/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_dpdp_AC_xy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2121_13_12(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49745 = 0 * ae;
    const double C49744 = ae * be;
    const double C49743 = 0 * be;
    const double C49742 = ae + be;
    const double C49741 = 0 * be;
    const double C49740 = xA - xB;
    const double C49783 = ce + de;
    const double C49782 = yC - yD;
    const double C49793 = ce * de;
    const double C49792 = 0 * de;
    const double C49811 = 0 * ce;
    const double C49807 = 0 * de;
    const double C49874 = yP - yQ;
    const double C49873 = p + q;
    const double C49872 = p * q;
    const double C49871 = xP - xQ;
    const double C49879 = bs[3];
    const double C49890 = bs[4];
    const double C49898 = bs[5];
    const double C49917 = bs[6];
    const double C49949 = bs[7];
    const double C50086 = zP - zQ;
    const double C50238 = bs[2];
    const double C122 = bs[0];
    const double C50631 = xC - xD;
    const double C50663 = zC - zD;
    const double C50758 = yA - yB;
    const double C50763 = zA - zB;
    const double C49750 = C49745 / C49742;
    const double C49747 = 2 * C49742;
    const double C49746 = std::pow(C49742, 2);
    const double C49749 = C49744 * C49740;
    const double C49748 = C49740 * C49743;
    const double C50608 = C49740 * be;
    const double C50607 = C49740 * ae;
    const double C50606 = std::pow(C49740, 2);
    const double C49791 = 2 * C49783;
    const double C49808 = std::pow(C49783, 2);
    const double C49882 = C49783 * C49742;
    const double C143 = (-(std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                           (xP - xQ) * (yP - yQ) * ae * ce) /
                         C49783) /
                        C49742;
    const double C50668 = std::pow(C49782, 2);
    const double C50684 = C49782 * de;
    const double C50683 = C49782 * ce;
    const double C49794 = C49793 * C49782;
    const double C49809 = C49782 * C49792;
    const double C49815 = C49811 / C49783;
    const double C49880 = C49874 * ce;
    const double C50095 = std::pow(C49874, 2);
    const double C49875 = 2 * C49872;
    const double C49881 = C49871 * C49874;
    const double C49900 = std::pow(C49871, 2);
    const double C49984 = C49871 * ae;
    const double C50129 = std::pow(C50086, 2);
    const double C50634 = C50631 * de;
    const double C50633 = C50631 * ce;
    const double C50632 = std::pow(C50631, 2);
    const double C50698 = std::pow(C50663, 2);
    const double C50710 = C50663 * de;
    const double C50709 = C50663 * ce;
    const double C50772 = std::pow(C50758, 2);
    const double C50786 = C50758 * be;
    const double C50785 = C50758 * ae;
    const double C50798 = std::pow(C50763, 2);
    const double C50810 = C50763 * be;
    const double C50809 = C50763 * ae;
    const double C50616 = std::pow(C49747, -1);
    const double C50918 = std::pow(C49747, -2);
    const double C49751 = 2 * C49746;
    const double C50897 = 4 * C49746;
    const double C49752 = C49748 / C49742;
    const double C50609 = C50606 * C49744;
    const double C50642 = std::pow(C49791, -1);
    const double C50906 = std::pow(C49791, -2);
    const double C49812 = 2 * C49808;
    const double C50904 = 4 * C49808;
    const double C50669 = C50668 * C49793;
    const double C49813 = C49809 / C49783;
    const double C49884 = C49879 * C49880;
    const double C49892 = C49890 * C49880;
    const double C49903 = C49898 * C49880;
    const double C49923 = C49917 * C49880;
    const double C49958 = C49949 * C49880;
    const double C49876 = C49875 / C49873;
    const double C133 = (bs[1] * C49880 * C49875) / (C49873 * C49783);
    const double C123 = -(C49871 * bs[1] * C49875) / C49873;
    const double C258 = -(C49874 * bs[1] * C49875) / C49873;
    const double C383 = -(C50086 * bs[1] * C49875) / C49873;
    const double C49885 = C49881 * ae;
    const double C49987 = C49890 * C49984;
    const double C49993 = C49898 * C49984;
    const double C50003 = C49917 * C49984;
    const double C50026 = C49879 * C49984;
    const double C50046 = C49949 * C49984;
    const double C129 = (-(bs[1] * C49984 * C49875) / C49873) / C49742;
    const double C50635 = C50632 * C49793;
    const double C50699 = C50698 * C49793;
    const double C50773 = C50772 * C49744;
    const double C50799 = C50798 * C49744;
    const double C49757 = C49743 / C49751;
    const double C49755 = C49741 / C49751;
    const double C49754 = 0 - C49752;
    const double C50610 = C50609 / C49742;
    const double C49820 = C49792 / C49812;
    const double C49818 = C49807 / C49812;
    const double C50670 = C50669 / C49783;
    const double C49817 = 0 - C49813;
    const double C49878 = -C49876;
    const double C49889 = std::pow(C49876, 4);
    const double C49916 = std::pow(C49876, 6);
    const double C144 =
        (-(C49871 * std::pow(-C49876, 3) * bs[3] * C49871 * C49874 * ae * ce) /
         C49783) /
            C49742 -
        (ae * std::pow(C49876, 2) * bs[2] * C49874 * ce) / (C49783 * C49742);
    const double C50237 = std::pow(C49876, 2);
    const double C130 =
        (C49871 * std::pow(C49876, 2) * bs[2] * C49984) / C49742 -
        (ae * bs[1] * C49875) / (C49873 * C49742);
    const double C49887 = C49885 * ce;
    const double C50636 = C50635 / C49783;
    const double C50700 = C50699 / C49783;
    const double C50774 = C50773 / C49742;
    const double C50800 = C50799 / C49742;
    const double C49759 = C49754 * ae;
    const double C50611 = -C50610;
    const double C50671 = -C50670;
    const double C49822 = C49817 * ce;
    const double C49883 = std::pow(C49878, 3);
    const double C49897 = std::pow(C49878, 5);
    const double C49948 = std::pow(C49878, 7);
    const double C49894 = C49889 * C49892;
    const double C49986 = C49890 * C49889;
    const double C49988 = C49889 * C49987;
    const double C49927 = C49916 * C49923;
    const double C50006 = C49917 * C49916;
    const double C50007 = C49916 * C50003;
    const double C50239 = C50238 * C50237;
    const double C134 = -(C49871 * C50237 * C50238 * C49880) / C49783;
    const double C264 = (C49874 * C50237 * C50238 * C49984) / C49742;
    const double C268 = (ce * bs[1] * C49875) / (C49873 * C49783) -
                        (C49874 * C50237 * C50238 * C49880) / C49783;
    const double C393 = -(C50086 * C50237 * C50238 * C49880) / C49783;
    const double C394 = (C50086 * C50237 * C50238 * C49984) / C49742;
    const double C49891 = C49890 * C49887;
    const double C49901 = C49898 * C49887;
    const double C49920 = C49917 * C49887;
    const double C49954 = C49949 * C49887;
    const double C50637 = -C50636;
    const double C50701 = -C50700;
    const double C50775 = -C50774;
    const double C50801 = -C50800;
    const double C49762 = C49759 / C49742;
    const double C50612 = std::exp(C50611);
    const double C50672 = std::exp(C50671);
    const double C49824 = C49822 / C49783;
    const double C49886 = C49883 * C49884;
    const double C49985 = C49879 * C49883;
    const double C50027 = C49883 * C50026;
    const double C276 =
        (-(C49874 * C49883 * C49879 * C49887) / C49783) / C49742 -
        (std::pow(C49876, 2) * bs[2] * C49984 * ce) / C49882;
    const double C401 =
        (-((zP - zQ) * C49883 * C49879 * C49887) / C49783) / C49742;
    const double C49905 = C49897 * C49903;
    const double C49996 = C49898 * C49897;
    const double C49997 = C49897 * C49993;
    const double C49963 = C49948 * C49958;
    const double C50051 = C49948 * C50046;
    const double C49899 = ae * C49894;
    const double C49896 = C49871 * C49894;
    const double C50364 = C49874 * C49894;
    const double C49995 = C49871 * C49986;
    const double C49994 = C49986 * ae;
    const double C50248 = C49986 * C49900;
    const double C50367 = C49986 * C50095;
    const double C50413 = C49874 * C49986;
    const double C50412 = C49986 * ce;
    const double C50592 = C49986 * C50129;
    const double C50598 = C50086 * C49986;
    const double C50029 = C49871 * C49988;
    const double C50111 = C49988 * ce;
    const double C50109 = C49874 * C49988;
    const double C49930 = C49927 * C49900;
    const double C49950 = ae * C49927;
    const double C49946 = C49871 * C49927;
    const double C50439 = C49874 * C49927;
    const double C50494 = C49927 * C50129;
    const double C50009 = C50006 * C49900;
    const double C50048 = C49871 * C50006;
    const double C50047 = C50006 * ae;
    const double C50443 = C50006 * C50095;
    const double C50011 = C49871 * C50007;
    const double C50152 = C50007 * C50095;
    const double C50180 = C50007 * ce;
    const double C50178 = C49874 * C50007;
    const double C50503 = C50007 * C50129;
    const double C124 = C50239 * C49900 - (bs[1] * C49875) / C49873;
    const double C257 = C49874 * C49871 * C50239;
    const double C379 = C50086 * C49871 * C50239;
    const double C509 = C50239 * C50095 - (bs[1] * C49875) / C49873;
    const double C718 = C50086 * C49874 * C50239;
    const double C851 = C50239 * C50129 - (bs[1] * C49875) / C49873;
    const double C49893 = C49889 * C49891;
    const double C49904 = C49897 * C49901;
    const double C49925 = C49916 * C49920;
    const double C49961 = C49948 * C49954;
    const double C50638 = std::exp(C50637);
    const double C50702 = std::exp(C50701);
    const double C50776 = std::exp(C50775);
    const double C50802 = std::exp(C50801);
    const double C49764 = C49762 - C49755;
    const double C10726 = C50612 * C264;
    const double C12876 = C50612 * C394;
    const double C49753 = C49749 * C50612;
    const double C50613 = C50612 * C50607;
    const double C50617 = C50616 * C50612;
    const double C50893 = C50612 / C49747;
    const double C50892 = C50612 * C50608;
    const double C2173 = C50918 * C50612;
    const double C49795 = C49794 * C50672;
    const double C121 = -(2 * ce * de * (yC - yD) * C50672) / (ce + de);
    const double C253 =
        ((C50672 - (C49782 * 2 * ce * de * C49782 * C50672) / C49783) * ce) /
            C49783 -
        (0 * de) / (2 * std::pow(C49783, 2));
    const double C254 =
        (0 * ce) / C49783 - (ce * de * C49782 * C50672) / std::pow(C49783, 2);
    const double C50685 = C50672 * C50683;
    const double C50688 = C50642 * C50672;
    const double C50909 = C50672 * C50684;
    const double C50908 = C50672 / C49791;
    const double C503 = C50906 * C50672;
    const double C49826 = C49824 - C49818;
    const double C145 =
        (-(ae * C49871 * C49886) / C49783) / C49742 -
        (C49883 * C49879 * C49887) / C49882 +
        C49871 * ((-(C49871 * std::pow(C49876, 4) * bs[4] * C49887) / C49783) /
                      C49742 -
                  (ae * C49886) / C49882);
    const double C135 = -(C49886 * C49900 + C50237 * C50238 * C49880) / C49783;
    const double C136 = (-2 * C49871 * C49886) / C49783 -
                        (C49871 * (C49894 * C49900 + C49886)) / C49783;
    const double C267 =
        -(C49874 * C49871 * C49886 + C49871 * C50239 * ce) / C49783;
    const double C389 = -(C50086 * C49871 * C49886) / C49783;
    const double C390 = -(C50086 * (C49894 * C49900 + C49886)) / C49783;
    const double C518 = -(C49874 * (C49874 * C49886 + C50239 * ce) +
                          C50237 * C50238 * C49880 + C49874 * C50239 * ce) /
                        C49783;
    const double C730 = -(C50086 * (C49874 * C49886 + C50239 * ce)) / C49783;
    const double C860 = -(C49886 * C50129 + C50237 * C50238 * C49880) / C49783;
    const double C1062 = (-2 * C50086 * C49886) / C49783 -
                         (C50086 * (C49894 * C50129 + C49886)) / C49783;
    const double C50030 = C49985 * ae;
    const double C50247 = C49871 * C49985;
    const double C50366 = C49874 * C49985;
    const double C50365 = C49985 * ce;
    const double C266 = -(C49874 * (C49894 * C49900 + C49886) +
                          (C50239 + C49985 * C49900) * ce) /
                        C49783;
    const double C615 = (-2 * (C49874 * C49886 + C50239 * ce)) / C49783 -
                        (C49874 * (C49874 * (C49874 * C49894 + C49985 * ce) +
                                   C49886 + C49874 * C49985 * ce)) /
                            C49783 -
                        ((C50239 + C49985 * C50095) * ce) / C49783;
    const double C741 = -(C50086 * (C49874 * (C49874 * C49894 + C49985 * ce) +
                                    C49886 + C49874 * C49985 * ce)) /
                        C49783;
    const double C980 = -((C49874 * C49894 + C49985 * ce) * C50129 +
                          C49874 * C49886 + C50239 * ce) /
                        C49783;
    const double C125 =
        2 * C49871 * C50239 + C49871 * (C50239 + C49985 * C49900);
    const double C256 = C49874 * (C50239 + C49985 * C49900);
    const double C380 = C50086 * (C50239 + C49985 * C49900);
    const double C607 =
        2 * C49874 * C50239 + C49874 * (C50239 + C49985 * C50095);
    const double C725 = C50086 * (C50239 + C49985 * C50095);
    const double C1058 =
        2 * C50086 * C50239 + C50086 * (C50239 + C49985 * C50129);
    const double C6201 =
        3 * (C50239 + C49985 * C50129) +
        C50086 * (2 * C50086 * C49985 + C50086 * (C49985 + C49986 * C50129));
    const double C131 =
        (C50237 * C50238 * C49984 + C49871 * (C49871 * C50027 + C50239 * ae) +
         C49871 * C50239 * ae) /
        C49742;
    const double C263 = (C49874 * (C49871 * C50027 + C50239 * ae)) / C49742;
    const double C385 = (C50086 * (C49871 * C50027 + C50239 * ae)) / C49742;
    const double C514 = (C50237 * C50238 * C49984 + C50027 * C50095) / C49742;
    const double C611 =
        (2 * C49874 * C50027 + C49874 * (C50027 + C49988 * C50095)) / C49742;
    const double C726 = (C50086 * C49874 * C50027) / C49742;
    const double C737 = (C50086 * (C50027 + C49988 * C50095)) / C49742;
    const double C856 = (C50237 * C50238 * C49984 + C50027 * C50129) / C49742;
    const double C1066 =
        (2 * C50086 * C50027 + C50086 * (C50027 + C49988 * C50129)) / C49742;
    const double C10728 = C50612 * C276;
    const double C12878 = C50612 * C401;
    const double C49907 = C49905 * C49900;
    const double C49918 = ae * C49905;
    const double C49914 = C49871 * C49905;
    const double C50411 = C49874 * C49905;
    const double C50478 = C49905 * C50129;
    const double C50493 = C50086 * C49905;
    const double C6204 =
        (-3 * (C49894 * C50129 + C49886)) / C49783 +
        C50086 * ((-2 * C50086 * C49894) / C49783 -
                  (C50086 * (C49905 * C50129 + C49894)) / C49783);
    const double C49998 = C49996 * C49900;
    const double C50005 = C49871 * C49996;
    const double C50004 = C49996 * ae;
    const double C50414 = C49996 * C50095;
    const double C50441 = C49874 * C49996;
    const double C50440 = C49996 * ce;
    const double C50599 = C49996 * C50129;
    const double C49999 = C49871 * C49997;
    const double C50112 = C49997 * C50095;
    const double C50151 = C49997 * ce;
    const double C50149 = C49874 * C49997;
    const double C50484 = C49997 * C50129;
    const double C50502 = C50086 * C49997;
    const double C6207 =
        (3 * (C50027 + C49988 * C50129) +
         C50086 * (2 * C50086 * C49988 + C50086 * (C49988 + C49997 * C50129))) /
        C49742;
    const double C49966 = C49963 * C49900;
    const double C50053 = C49871 * C50051;
    const double C50182 = C50051 * C50095;
    const double C49902 = C49899 / C49882;
    const double C861 = -(C49896 * C50129 + C49871 * C49886) / C49783;
    const double C50034 = C49995 * ae;
    const double C50251 = 2 * C49995;
    const double C50359 = C49874 * C49995;
    const double C50358 = C49995 * ce;
    const double C50249 = C49985 + C50248;
    const double C50369 = C49985 + C50367;
    const double C50418 = 2 * C50413;
    const double C50416 = C50413 * ce;
    const double C50593 = C49985 + C50592;
    const double C50600 = 2 * C50598;
    const double C50114 = C50111 / C49882;
    const double C976 = (C49874 * C50027 + C50109 * C50129) / C49742;
    const double C49933 = C49930 + C49905;
    const double C49955 = C49950 / C49882;
    const double C49957 = -2 * C49946;
    const double C49953 = ae * C49946;
    const double C50397 = C49874 * C49946;
    const double C50475 = C49946 * C50129;
    const double C50496 = C50494 + C49905;
    const double C50012 = C49996 + C50009;
    const double C50052 = C50048 * ae;
    const double C50400 = C50048 * C50095;
    const double C50449 = C49996 + C50443;
    const double C50157 = C49997 + C50152;
    const double C50186 = C50180 / C49882;
    const double C50187 = 2 * C50178;
    const double C50184 = C50178 * ce;
    const double C50490 = C50178 * C50129;
    const double C50505 = C49997 + C50503;
    const double C146 =
        2 * ((-(C49871 * C49893) / C49783) / C49742 - (ae * C49886) / C49882) -
        (ae * (C49894 * std::pow(C49871, 2) + C49886)) / C49882 +
        C49871 *
            ((-(ae * C49871 * C49894) / C49783) / C49742 - C49893 / C49882 +
             C49871 *
                 ((-(C49871 * std::pow(C49878, 5) * bs[5] * C49887) / C49783) /
                      C49742 -
                  (ae * C49894) / C49882));
    const double C275 = C49874 * ((-(C49871 * C49893) / C49783) / C49742 -
                                  (ae * C49886) / C49882) -
                        ((C49871 * C49883 * C49879 * C49984 +
                          bs[2] * std::pow(C49876, 2) * ae) *
                         ce) /
                            C49882;
    const double C397 = (zP - zQ) * ((-(C49871 * C49893) / C49783) / C49742 -
                                     (ae * C49886) / C49882);
    const double C524 = (-(C49874 * C50027 * ce) / C49783) / C49742 -
                        (C49883 * C49879 * C49887) / C49882 +
                        C49874 * ((-(C49874 * C49893) / C49783) / C49742 -
                                  (C50027 * ce) / C49882);
    const double C742 = (zP - zQ) * ((-(C49874 * C49893) / C49783) / C49742 -
                                     (C50027 * ce) / C49882);
    const double C866 = (-(C49893 * std::pow(zP - zQ, 2)) / C49783) / C49742 -
                        (C49883 * C49879 * C49887) / C49882;
    const double C49906 = C49871 * C49904;
    const double C49915 = C49904 / C49882;
    const double C50110 = C49874 * C49904;
    const double C619 =
        2 * ((-(C49874 * C49893) / C49783) / C49742 - (C50027 * ce) / C49882) -
        ((C50027 + C49988 * std::pow(C49874, 2)) * ce) / C49882 +
        C49874 *
            ((-(C49874 * C49988 * ce) / C49783) / C49742 - C49893 / C49882 +
             C49874 * ((-(C49874 * C49904) / C49783) / C49742 -
                       (C49988 * ce) / C49882));
    const double C749 =
        (zP - zQ) *
        ((-(C49874 * C49988 * ce) / C49783) / C49742 - C49893 / C49882 +
         C49874 *
             ((-(C49874 * C49904) / C49783) / C49742 - (C49988 * ce) / C49882));
    const double C984 =
        (-(C49874 * C49893) / C49783) / C49742 - (C50027 * ce) / C49882 +
        ((-(C49874 * C49904) / C49783) / C49742 - (C49988 * ce) / C49882) *
            std::pow(zP - zQ, 2);
    const double C1070 =
        (-2 * C50086 * C49893) / C49882 +
        C50086 * ((-(C49904 * std::pow(C50086, 2)) / C49783) / C49742 -
                  C49893 / C49882);
    const double C49929 = C49871 * C49925;
    const double C49947 = C49925 / C49882;
    const double C50150 = C49874 * C49925;
    const double C50215 = C49925 * C50129;
    const double C50224 = C50086 * C49925;
    const double C49965 = C49871 * C49961;
    const double C50179 = C49874 * C49961;
    const double C50225 = C49961 * C50129;
    const double C50639 = C50638 * C50633;
    const double C50643 = C50642 * C50638;
    const double C50900 = C50638 / C49791;
    const double C50899 = C50638 * C50634;
    const double C252 = C50906 * C50638;
    const double C50711 = C50702 * C50709;
    const double C50714 = C50642 * C50702;
    const double C50914 = C50702 * C50710;
    const double C50913 = C50702 / C49791;
    const double C850 = C50906 * C50702;
    const double C50787 = C50776 * C50785;
    const double C50790 = C50616 * C50776;
    const double C50922 = C50776 * C50786;
    const double C50921 = C50776 / C49747;
    const double C7789 = C50918 * C50776;
    const double C50811 = C50802 * C50809;
    const double C50814 = C50616 * C50802;
    const double C50927 = C50802 * C50810;
    const double C50926 = C50802 / C49747;
    const double C15424 = C50918 * C50802;
    const double C49758 = C49753 / C49746;
    const double C49756 = 2 * C49753;
    const double C50895 = C50613 / C49751;
    const double C50894 = C50613 * C50608;
    const double C50891 = C50613 / C49742;
    const double C50620 = C50617 * C50608;
    const double C108 = C50617 / C50897;
    const double C22847 = C50617 / C49747;
    const double C2171 = (C50612 * std::pow(C50608, 2)) / C49746 + C50893;
    const double C50931 = C50892 / C49742;
    const double C2172 = (-2 * C50616 * C50892) / C49742;
    const double C49796 = 2 * C49795;
    const double C49816 = C49795 / C49808;
    const double C50911 = C50685 / C49812;
    const double C50910 = C50685 * C50684;
    const double C50905 = C50685 / C49783;
    const double C50691 = C50688 * C50684;
    const double C598 = C50688 / C50904;
    const double C1276 = C50688 / C49791;
    const double C50937 = C50909 / C49783;
    const double C502 = (-2 * C50642 * C50909) / C49783;
    const double C501 = (C50672 * std::pow(C50684, 2)) / C49808 + C50908;
    const double C50031 = C50029 + C50030;
    const double C519 = -(C49874 * (C49874 * C49896 + C50247 * ce) +
                          C49871 * C49886 + C49874 * C50247 * ce) /
                        C49783;
    const double C731 = -(C50086 * (C49874 * C49896 + C50247 * ce)) / C49783;
    const double C510 = C49871 * C50239 + C50247 * C50095;
    const double C606 =
        2 * C49874 * C50247 + C49874 * (C50247 + C49995 * C50095);
    const double C719 = C50086 * C49874 * C50247;
    const double C724 = C50086 * (C50247 + C49995 * C50095);
    const double C852 = C49871 * C50239 + C50247 * C50129;
    const double C1057 =
        2 * C50086 * C50247 + C50086 * (C50247 + C49995 * C50129);
    const double C972 = C49874 * C50239 + C50366 * C50129;
    const double C3451 =
        2 * C50086 * C50366 + C50086 * (C50366 + C50413 * C50129);
    const double C50368 = C50364 + C50365;
    const double C7940 = C50617 * C263;
    const double C10738 = C50612 * C263;
    const double C25816 = C50617 * C263;
    const double C12890 = C50612 * C385;
    const double C15721 = C50617 * C385;
    const double C28932 = C50617 * C385;
    const double C10730 = C50612 * C514;
    const double C10734 = C50612 * C611;
    const double C11166 = C50612 * C726;
    const double C11170 = C50612 * C737;
    const double C13484 = C50612 * C856;
    const double C13790 = C50612 * C1066;
    const double C49909 = C49907 + C49894;
    const double C49921 = C49918 / C49882;
    const double C49922 = -2 * C49914;
    const double C49919 = ae * C49914;
    const double C50357 = C49874 * C49914;
    const double C614 = (-2 * (C49874 * C49896 + C50247 * ce)) / C49783 -
                        (C49874 * (C49874 * (C49874 * C49914 + C49995 * ce) +
                                   C49896 + C49874 * C49995 * ce)) /
                            C49783 -
                        ((C50247 + C49995 * C50095) * ce) / C49783;
    const double C740 = -(C50086 * (C49874 * (C49874 * C49914 + C49995 * ce) +
                                    C49896 + C49874 * C49995 * ce)) /
                        C49783;
    const double C979 = -((C49874 * C49914 + C49995 * ce) * C50129 +
                          C49874 * C49896 + C50247 * ce) /
                        C49783;
    const double C1061 = (-2 * C50086 * C49896) / C49783 -
                         (C50086 * (C49914 * C50129 + C49896)) / C49783;
    const double C6203 =
        (-3 * (C49914 * C50129 + C49896)) / C49783 +
        C50086 * ((-2 * C50086 * C49914) / C49783 -
                  (C50086 * (C49946 * C50129 + C49914)) / C49783);
    const double C50415 = C50411 + C50412;
    const double C50479 = C50478 + C49894;
    const double C50495 = -2 * C50493;
    const double C50000 = C49986 + C49998;
    const double C50010 = 2 * C50005;
    const double C50008 = C50005 * ae;
    const double C50360 = C50005 * C50095;
    const double C50399 = C49874 * C50005;
    const double C50398 = C50005 * ce;
    const double C50589 = C50005 * C50129;
    const double C6200 =
        3 * (C50247 + C49995 * C50129) +
        C50086 * (2 * C50086 * C49995 + C50086 * (C49995 + C50005 * C50129));
    const double C50013 = C50011 + C50004;
    const double C50417 = C49986 + C50414;
    const double C50450 = 2 * C50441;
    const double C50447 = C50441 * ce;
    const double C50595 = C50441 * C50129;
    const double C13781 =
        3 * (C50366 + C50413 * C50129) +
        C50086 * (2 * C50086 * C50413 + C50086 * (C50413 + C50441 * C50129));
    const double C50446 = C50439 + C50440;
    const double C50601 = C49986 + C50599;
    const double C50001 = C49999 + C49994;
    const double C50115 = C49988 + C50112;
    const double C50155 = C50151 / C49882;
    const double C50156 = 2 * C50149;
    const double C50153 = C50149 * ce;
    const double C3457 =
        (2 * C50086 * C50109 + C50086 * (C50109 + C50149 * C50129)) / C49742;
    const double C13785 =
        (3 * (C50109 + C50149 * C50129) +
         C50086 * (2 * C50086 * C50149 + C50086 * (C50149 + C50178 * C50129))) /
        C49742;
    const double C50485 = C49988 + C50484;
    const double C50504 = 2 * C50502;
    const double C19390 = C50612 * C6207;
    const double C49969 = C49966 + C49927;
    const double C50054 = C50053 + C50047;
    const double C50188 = C50007 + C50182;
    const double C971 = C49874 * C50247 + C50359 * C50129;
    const double C126 = 3 * (C50239 + C49985 * C49900) +
                        C49871 * (2 * C50247 + C49871 * C50249);
    const double C255 = C49874 * (2 * C50247 + C49871 * C50249);
    const double C381 = C50086 * (2 * C50247 + C49871 * C50249);
    const double C511 = C50239 + C49985 * C49900 + C50249 * C50095;
    const double C720 = C50086 * C49874 * C50249;
    const double C853 = C50239 + C49985 * C49900 + C50249 * C50129;
    const double C2807 = 3 * (C50239 + C49985 * C50095) +
                         C49874 * (2 * C50366 + C49874 * C50369);
    const double C2983 = C50086 * (2 * C50366 + C49874 * C50369);
    const double C3323 = C50239 + C49985 * C50095 + C50369 * C50129;
    const double C16632 =
        4 * (2 * C50086 * C49985 + C50086 * C50593) +
        C50086 * (3 * C50593 + C50086 * (2 * C50086 * C49986 +
                                         C50086 * (C49986 + C49996 * C50129)));
    const double C11390 = C50612 * C976;
    const double C49936 = C49871 * C49933;
    const double C49951 = -3 * C49933;
    const double C49945 = ae * C49933;
    const double C50350 = C49874 * C49933;
    const double C49962 = C49957 / C49783;
    const double C49960 = C49953 / C49783;
    const double C50476 = C50475 + C49914;
    const double C50498 = C50086 * C50496;
    const double C50014 = C49871 * C50012;
    const double C50049 = C50012 * ae;
    const double C50353 = C50012 * C50095;
    const double C50403 = C50005 + C50400;
    const double C50452 = C49874 * C50449;
    const double C50160 = C49874 * C50157;
    const double C50181 = 3 * C50157;
    const double C50177 = C50157 * ce;
    const double C50190 = C50184 / C49783;
    const double C50491 = C50149 + C50490;
    const double C50506 = C50086 * C50505;
    const double C7944 = C50617 * C275;
    const double C10740 = C50612 * C275;
    const double C25820 = C50617 * C275;
    const double C12888 = C50612 * C397;
    const double C15725 = C50617 * C397;
    const double C28936 = C50617 * C397;
    const double C10732 = C50612 * C524;
    const double C11168 = C50612 * C742;
    const double C13482 = C50612 * C866;
    const double C49908 = C49906 / C49783;
    const double C6210 =
        3 * ((-(C49904 * C50129) / C49783) / C49742 - C49893 / C49882) +
        C50086 * ((-2 * C50086 * C49904) / C49882 +
                  C50086 * ((-(C49925 * C50129) / C49783) / C49742 - C49915));
    const double C50113 = C50110 / C49783;
    const double C10736 = C50612 * C619;
    const double C11172 = C50612 * C749;
    const double C11392 = C50612 * C984;
    const double C13792 = C50612 * C1070;
    const double C49932 = C49929 / C49783;
    const double C50154 = C50150 / C49783;
    const double C50216 = C50215 / C49783;
    const double C50226 = -2 * C50224;
    const double C49968 = C49965 / C49783;
    const double C50185 = C50179 / C49783;
    const double C50227 = C50225 / C49783;
    const double C50902 = C50639 / C49812;
    const double C50901 = C50639 * C50634;
    const double C50898 = C50639 / C49783;
    const double C50646 = C50643 * C50634;
    const double C115 = C50643 / C50904;
    const double C1173 = C50643 / C49791;
    const double C250 = (C50638 * std::pow(C50634, 2)) / C49808 + C50900;
    const double C50934 = C50899 / C49783;
    const double C251 = (-2 * C50642 * C50899) / C49783;
    const double C50916 = C50711 / C49812;
    const double C50915 = C50711 * C50710;
    const double C50907 = C50711 / C49783;
    const double C50717 = C50714 * C50710;
    const double C1054 = C50714 / C50904;
    const double C1746 = C50714 / C49791;
    const double C50940 = C50914 / C49783;
    const double C849 = (-2 * C50642 * C50914) / C49783;
    const double C848 = (C50702 * std::pow(C50710, 2)) / C49808 + C50913;
    const double C50924 = C50787 / C49751;
    const double C50923 = C50787 * C50786;
    const double C50919 = C50787 / C49742;
    const double C50793 = C50790 * C50786;
    const double C10624 = C50790 / C50897;
    const double C25665 = C50790 / C49747;
    const double C50943 = C50922 / C49742;
    const double C7788 = (-2 * C50616 * C50922) / C49742;
    const double C7787 = (C50776 * std::pow(C50786, 2)) / C49746 + C50921;
    const double C50929 = C50811 / C49751;
    const double C50928 = C50811 * C50810;
    const double C50920 = C50811 / C49742;
    const double C50817 = C50814 * C50810;
    const double C20973 = C50814 / C50897;
    const double C38342 = C50814 / C49747;
    const double C50946 = C50927 / C49742;
    const double C15423 = (-2 * C50616 * C50927) / C49742;
    const double C15422 = (C50802 * std::pow(C50810, 2)) / C49746 + C50926;
    const double C49761 = C49750 - C49758;
    const double C49760 = C49740 * C49756;
    const double C2178 =
        ((-C49756 / C49742) / C49747 - (0 * be) / C49742) / C49747 -
        (0 * be) / C49742;
    const double C10625 = -C49756 / C49742;
    const double C25667 = (-C49756 / C49742) / C49747 - (0 * be) / C49742;
    const double C50932 = C50894 / C49746;
    const double C7960 = C50891 * C275;
    const double C7956 = C50891 * C263;
    const double C7954 = C50891 * C524;
    const double C7950 = C50891 * C514;
    const double C7946 = C50891 * C276;
    const double C7942 = C50891 * C264;
    const double C8310 = C50891 * C619;
    const double C8306 = C50891 * C611;
    const double C8620 = C50891 * C749;
    const double C8616 = C50891 * C737;
    const double C8610 = C50891 * C742;
    const double C8606 = C50891 * C726;
    const double C8950 = C50891 * C984;
    const double C8946 = C50891 * C976;
    const double C15749 = C50891 * C385;
    const double C15745 = C50891 * C397;
    const double C15731 = C50891 * C866;
    const double C15727 = C50891 * C856;
    const double C15723 = C50891 * C401;
    const double C15719 = C50891 * C394;
    const double C16345 = C50891 * C1066;
    const double C16341 = C50891 * C1070;
    const double C16643 = C50891 * C6207;
    const double C50896 = C50620 / C49742;
    const double C2345 = C2171 * C275;
    const double C2339 = C2171 * C263;
    const double C2337 = C2171 * C276;
    const double C2331 = C2171 * C264;
    const double C2679 = C2171 * C524;
    const double C2673 = C2171 * C514;
    const double C2829 = C2171 * C619;
    const double C2823 = C2171 * C611;
    const double C3017 = C2171 * C749;
    const double C3011 = C2171 * C737;
    const double C3001 = C2171 * C742;
    const double C2995 = C2171 * C726;
    const double C3345 = C2171 * C984;
    const double C3339 = C2171 * C976;
    const double C5353 = C2171 * C385;
    const double C5347 = C2171 * C397;
    const double C5337 = C2171 * C401;
    const double C5331 = C2171 * C394;
    const double C5943 = C2171 * C856;
    const double C5937 = C2171 * C866;
    const double C6219 = C2171 * C1070;
    const double C6213 = C2171 * C1066;
    const double C25661 = -C50931;
    const double C2335 = C2172 * C275;
    const double C2329 = C2172 * C263;
    const double C5339 = C2172 * C397;
    const double C5333 = C2172 * C385;
    const double C49810 = C49782 * C49796;
    const double C507 =
        ((-C49792 / C49783) / C49791 -
         ((C50672 - (C49782 * C49796) / C49783) * de) / C49783) /
            C49791 -
        ((C49782 * ((-C49796 / C49783) / C49791 - (0 * de) / C49783) + C50688) *
         de) /
            C49783;
    const double C508 =
        ((-C49796 / C49783) / C49791 - (0 * de) / C49783) / C49791 -
        (0 * de) / C49783;
    const double C1175 = (-C49796 / C49783) / C49791 - (0 * de) / C49783;
    const double C49821 = C49815 - C49816;
    const double C50938 = C50910 / C49808;
    const double C50912 = C50691 / C49783;
    const double C1169 = -C50937;
    const double C132 =
        (2 * (C49871 * C50027 + C50239 * ae) +
         C49871 * (C50027 + C49871 * C50031 + C49871 * C49985 * ae) +
         (C50239 + C49985 * C49900) * ae) /
        C49742;
    const double C262 =
        (C49874 * (C50027 + C49871 * C50031 + C50247 * ae)) / C49742;
    const double C386 =
        (C50086 * (C50027 + C49871 * C50031 + C50247 * ae)) / C49742;
    const double C515 =
        (C49871 * C50027 + C50239 * ae + C50031 * C50095) / C49742;
    const double C727 = (C50086 * C49874 * C50031) / C49742;
    const double C857 =
        (C49871 * C50027 + C50239 * ae + C50031 * C50129) / C49742;
    const double C2813 =
        (-3 * (C49874 * C50368 + C49886 + C50366 * ce)) / C49783 +
        C49874 * ((-2 * C50368) / C49783 -
                  (C49874 * (C49874 * (C49874 * C49905 + C49986 * ce) + C49894 +
                             C49874 * C49986 * ce)) /
                      C49783 -
                  (C50369 * ce) / C49783) -
        ((2 * C50366 + C49874 * C50369) * ce) / C49783;
    const double C2989 =
        C50086 * ((-2 * C50368) / C49783 -
                  (C49874 * (C49874 * (C49874 * C49905 + C49986 * ce) + C49894 +
                             C49874 * C49986 * ce)) /
                      C49783 -
                  (C50369 * ce) / C49783);
    const double C3329 = -((C49874 * (C49874 * C49905 + C49986 * ce) + C49894 +
                            C49874 * C49986 * ce) *
                               C50129 +
                           C49874 * C50368 + C49886 + C50366 * ce) /
                         C49783;
    const double C3454 =
        (-2 * C50086 * C50368) / C49783 -
        (C50086 * ((C49874 * C49905 + C49986 * ce) * C50129 + C50368)) / C49783;
    const double C137 =
        (-3 * (C49894 * C49900 + C49886)) / C49783 +
        C49871 * ((-2 * C49896) / C49783 - (C49871 * C49909) / C49783);
    const double C265 =
        C49874 * ((-2 * C49896) / C49783 - (C49871 * C49909) / C49783) -
        ((2 * C50247 + C49871 * C50249) * ce) / C49783;
    const double C391 =
        C50086 * ((-2 * C49896) / C49783 - (C49871 * C49909) / C49783);
    const double C520 = -(C49874 * (C49874 * C49909 + C50249 * ce) +
                          C49894 * C49900 + C49886 + C49874 * C50249 * ce) /
                        C49783;
    const double C732 = -(C50086 * (C49874 * C49909 + C50249 * ce)) / C49783;
    const double C862 = -(C49909 * C50129 + C49894 * C49900 + C49886) / C49783;
    const double C1060 = (-2 * C50086 * C49909) / C49783 -
                         (C50086 * (C49933 * C50129 + C49909)) / C49783;
    const double C49926 = C49922 / C49783;
    const double C49924 = C49919 / C49783;
    const double C50361 = C50357 + C50358;
    const double C50419 = C49874 * C50415;
    const double C50438 = -2 * C50415;
    const double C16634 =
        4 * ((-2 * C50086 * C49894) / C49783 - (C50086 * C50479) / C49783) +
        C50086 * ((-3 * C50479) / C49783 +
                  C50086 * ((-2 * C50086 * C49905) / C49783 -
                            (C50086 * (C49927 * C50129 + C49905)) / C49783));
    const double C50497 = C50495 / C49783;
    const double C50040 = C50000 * ae;
    const double C50252 = C49871 * C50000;
    const double C50257 = 3 * C50000;
    const double C50352 = C49874 * C50000;
    const double C50351 = C50000 * ce;
    const double C613 = (-2 * (C49874 * C49909 + C50249 * ce)) / C49783 -
                        (C49874 * (C49874 * (C49874 * C49933 + C50000 * ce) +
                                   C49909 + C49874 * C50000 * ce)) /
                            C49783 -
                        ((C50249 + C50000 * C50095) * ce) / C49783;
    const double C739 = -(C50086 * (C49874 * (C49874 * C49933 + C50000 * ce) +
                                    C49909 + C49874 * C50000 * ce)) /
                        C49783;
    const double C978 = -((C49874 * C49933 + C50000 * ce) * C50129 +
                          C49874 * C49909 + C50249 * ce) /
                        C49783;
    const double C605 =
        2 * C49874 * C50249 + C49874 * (C50249 + C50000 * C50095);
    const double C723 = C50086 * (C50249 + C50000 * C50095);
    const double C1056 =
        2 * C50086 * C50249 + C50086 * (C50249 + C50000 * C50129);
    const double C6199 =
        3 * (C50249 + C50000 * C50129) +
        C50086 * (2 * C50086 * C50000 + C50086 * (C50000 + C50012 * C50129));
    const double C50362 = C49995 + C50360;
    const double C50404 = 2 * C50399;
    const double C50402 = C50399 * ce;
    const double C3450 =
        2 * C50086 * C50359 + C50086 * (C50359 + C50399 * C50129);
    const double C16507 =
        3 * (C50359 + C50399 * C50129) +
        C50086 * (2 * C50086 * C50399 +
                  C50086 * (C50399 + C49874 * C50048 * C50129));
    const double C50401 = C50397 + C50398;
    const double C50590 = C49995 + C50589;
    const double C50015 = C49871 * C50013;
    const double C50045 = 2 * C50013;
    const double C50104 = C50013 * C50095;
    const double C50135 = C50013 * ce;
    const double C50133 = C49874 * C50013;
    const double C50481 = C50013 * C50129;
    const double C50420 = C49874 * C50417;
    const double C50444 = 3 * C50417;
    const double C50442 = C50417 * ce;
    const double C9065 =
        2 * C50086 * C50369 + C50086 * (C50369 + C50417 * C50129);
    const double C13780 =
        3 * (C50369 + C50417 * C50129) +
        C50086 * (2 * C50086 * C50417 + C50086 * (C50417 + C50449 * C50129));
    const double C50596 = C50413 + C50595;
    const double C50451 = C49874 * C50446;
    const double C50487 = C50446 * C50129;
    const double C13784 =
        (-3 * (C50415 * C50129 + C50368)) / C49783 +
        C50086 * ((-2 * C50086 * C50415) / C49783 -
                  (C50086 * (C50446 * C50129 + C50415)) / C49783);
    const double C50602 = C50086 * C50601;
    const double C50033 = C49871 * C50001;
    const double C50038 = 2 * C50001;
    const double C50103 = C50001 * ce;
    const double C50101 = C49874 * C50001;
    const double C610 =
        (2 * C49874 * C50031 + C49874 * (C50031 + C50001 * C50095)) / C49742;
    const double C736 = (C50086 * (C50031 + C50001 * C50095)) / C49742;
    const double C1065 =
        (2 * C50086 * C50031 + C50086 * (C50031 + C50001 * C50129)) / C49742;
    const double C6206 =
        (3 * (C50031 + C50001 * C50129) +
         C50086 * (2 * C50086 * C50001 + C50086 * (C50001 + C50013 * C50129))) /
        C49742;
    const double C2810 = (3 * (C50027 + C49988 * C50095) +
                          C49874 * (2 * C50109 + C49874 * C50115)) /
                         C49742;
    const double C2986 = (C50086 * (2 * C50109 + C49874 * C50115)) / C49742;
    const double C3326 = (C50027 + C49988 * C50095 + C50115 * C50129) / C49742;
    const double C9069 =
        (2 * C50086 * C50115 + C50086 * (C50115 + C50157 * C50129)) / C49742;
    const double C50158 = C50153 / C49783;
    const double C13672 = C50612 * C3457;
    const double C16517 = C50891 * C3457;
    const double C19273 = C50612 * C13785;
    const double C16636 =
        (4 * (2 * C50086 * C49988 + C50086 * C50485) +
         C50086 *
             (3 * C50485 + C50086 * (2 * C50086 * C49997 +
                                     C50086 * (C49997 + C50007 * C50129)))) /
        C49742;
    const double C49972 = C49871 * C49969;
    const double C6202 =
        (-3 * (C49933 * C50129 + C49909)) / C49783 +
        C50086 * ((-2 * C50086 * C49933) / C49783 -
                  (C50086 * (C49969 * C50129 + C49933)) / C49783);
    const double C50055 = C49871 * C50054;
    const double C50136 = C50054 * C50095;
    const double C50192 = C49874 * C50188;
    const double C13783 =
        (3 * (C50115 + C50157 * C50129) +
         C50086 * (2 * C50086 * C50157 + C50086 * (C50157 + C50188 * C50129))) /
        C49742;
    const double C49938 = C49936 / C49783;
    const double C49956 = C49951 / C49783;
    const double C49952 = C49945 / C49882;
    const double C49964 = -C49960;
    const double C16633 =
        4 * ((-2 * C50086 * C49914) / C49783 - (C50086 * C50476) / C49783) +
        C50086 * ((-3 * C50476) / C49783 +
                  C50086 * ((-2 * C50086 * C49946) / C49783 -
                            (C50086 * (C49871 * C49963 * C50129 + C49946)) /
                                C49783));
    const double C50499 = C50498 / C49783;
    const double C50016 = C50010 + C50014;
    const double C50355 = C50000 + C50353;
    const double C50406 = C49874 * C50403;
    const double C50454 = C50450 + C50452;
    const double C50163 = C50156 + C50160;
    const double C50183 = C50177 / C49882;
    const double C50193 = -C50190;
    const double C19384 =
        (4 * (2 * C50086 * C50149 + C50086 * C50491) +
         C50086 * (3 * C50491 +
                   C50086 * (2 * C50086 * C50178 +
                             C50086 * (C50178 + C49874 * C50051 * C50129)))) /
        C49742;
    const double C50507 = C50504 + C50506;
    const double C49910 = -C49908;
    const double C16647 = C50891 * C6210;
    const double C19392 = C50612 * C6210;
    const double C50116 = -C50113;
    const double C49935 = -C49932;
    const double C50159 = -C50154;
    const double C50217 = -C50216;
    const double C50228 = C50226 / C49882;
    const double C49971 = -C49968;
    const double C50191 = -C50185;
    const double C50229 = -C50227;
    const double C50935 = C50901 / C49808;
    const double C50903 = C50646 / C49783;
    const double C1277 = -C50934;
    const double C50941 = C50915 / C49808;
    const double C50917 = C50717 / C49783;
    const double C1514 = -C50940;
    const double C50944 = C50923 / C49746;
    const double C50925 = C50793 / C49742;
    const double C22848 = -C50943;
    const double C50947 = C50928 / C49746;
    const double C50930 = C50817 / C49742;
    const double C32110 = -C50946;
    const double C7971 = C49761 * C255;
    const double C7965 = C49761 * C511;
    const double C7961 = C49761 * C266;
    const double C7957 = C49761 * C256;
    const double C7951 = C49761 * C519;
    const double C7947 = C49761 * C510;
    const double C7943 = C49761 * C267;
    const double C7939 = C49761 * C257;
    const double C8311 = C49761 * C614;
    const double C8307 = C49761 * C606;
    const double C8617 = C49761 * C740;
    const double C8613 = C49761 * C724;
    const double C8611 = C49761 * C731;
    const double C8607 = C49761 * C719;
    const double C8947 = C49761 * C979;
    const double C8943 = C49761 * C971;
    const double C9559 = C49761 * C720;
    const double C15752 = C49761 * C381;
    const double C15746 = C49761 * C380;
    const double C15742 = C49761 * C390;
    const double C15738 = C49761 * C853;
    const double C15732 = C49761 * C861;
    const double C15728 = C49761 * C852;
    const double C15724 = C49761 * C389;
    const double C15720 = C49761 * C379;
    const double C16342 = C49761 * C1057;
    const double C16338 = C49761 * C1061;
    const double C16648 = C49761 * C6203;
    const double C16644 = C49761 * C6200;
    const double C120 =
        (C49761 / C49747 - (0 * be) / C49742) / C49747 - (0 * be) / C49742;
    const double C22852 = C49761 / C49747 - (0 * be) / C49742;
    const double C49763 = C49760 / C49742;
    const double C2342 = C2178 * C255;
    const double C2332 = C2178 * C266;
    const double C2326 = C2178 * C256;
    const double C2676 = C2178 * C511;
    const double C2998 = C2178 * C720;
    const double C5348 = C2178 * C381;
    const double C5340 = C2178 * C390;
    const double C5334 = C2178 * C380;
    const double C5938 = C2178 * C853;
    const double C10753 = C10625 * C511;
    const double C10751 = C10625 * C266;
    const double C10749 = C10625 * C256;
    const double C10747 = C10625 * C614;
    const double C10745 = C10625 * C606;
    const double C10743 = C10625 * C519;
    const double C10741 = C10625 * C510;
    const double C10739 = C10625 * C267;
    const double C10737 = C10625 * C257;
    const double C10735 = C10625 * C615;
    const double C10733 = C10625 * C607;
    const double C10731 = C10625 * C518;
    const double C10729 = C10625 * C509;
    const double C10727 = C10625 * C268;
    const double C10725 = C10625 * C258;
    const double C10975 = C10625 * C2807;
    const double C11173 = C10625 * C2983;
    const double C11171 = C10625 * C741;
    const double C11169 = C10625 * C725;
    const double C11167 = C10625 * C730;
    const double C11165 = C10625 * C718;
    const double C11393 = C10625 * C3323;
    const double C11391 = C10625 * C980;
    const double C11389 = C10625 * C972;
    const double C11809 = C10625 * C740;
    const double C11807 = C10625 * C724;
    const double C11805 = C10625 * C731;
    const double C11803 = C10625 * C719;
    const double C12717 = C10625 * C720;
    const double C12893 = C10625 * C390;
    const double C12891 = C10625 * C380;
    const double C12889 = C10625 * C379;
    const double C12887 = C10625 * C389;
    const double C12877 = C10625 * C393;
    const double C12875 = C10625 * C383;
    const double C13483 = C10625 * C851;
    const double C13481 = C10625 * C860;
    const double C13471 = C10625 * C979;
    const double C13469 = C10625 * C971;
    const double C13467 = C10625 * C861;
    const double C13465 = C10625 * C852;
    const double C13671 = C10625 * C3451;
    const double C13791 = C10625 * C1062;
    const double C13789 = C10625 * C1058;
    const double C18532 = C10625 * C853;
    const double C19096 = C10625 * C1061;
    const double C19094 = C10625 * C1057;
    const double C19272 = C10625 * C13781;
    const double C19391 = C10625 * C6204;
    const double C19389 = C10625 * C6201;
    const double C21551 = C10625 * C6203;
    const double C21549 = C10625 * C6200;
    const double C21738 = C10625 * C16632;
    const double C25847 = C25667 * C255;
    const double C25841 = C25667 * C511;
    const double C25837 = C25667 * C266;
    const double C25833 = C25667 * C256;
    const double C25827 = C25667 * C519;
    const double C25823 = C25667 * C510;
    const double C25819 = C25667 * C267;
    const double C25815 = C25667 * C257;
    const double C26187 = C25667 * C614;
    const double C26183 = C25667 * C606;
    const double C26477 = C25667 * C740;
    const double C26473 = C25667 * C724;
    const double C26471 = C25667 * C731;
    const double C26467 = C25667 * C719;
    const double C26799 = C25667 * C979;
    const double C26795 = C25667 * C971;
    const double C27403 = C25667 * C720;
    const double C28947 = C25667 * C381;
    const double C28941 = C25667 * C380;
    const double C28937 = C25667 * C390;
    const double C28935 = C25667 * C389;
    const double C28931 = C25667 * C379;
    const double C29703 = C25667 * C852;
    const double C29699 = C25667 * C861;
    const double C29685 = C25667 * C853;
    const double C30065 = C25667 * C1061;
    const double C30061 = C25667 * C1057;
    const double C39468 = C25667 * C6203;
    const double C39464 = C25667 * C6200;
    const double C50949 = C50893 - C50932;
    const double C50933 = C50895 - C50896;
    const double C25836 = C25661 * C275;
    const double C25832 = C25661 * C263;
    const double C25830 = C25661 * C524;
    const double C25826 = C25661 * C514;
    const double C25822 = C25661 * C276;
    const double C25818 = C25661 * C264;
    const double C26186 = C25661 * C619;
    const double C26182 = C25661 * C611;
    const double C26480 = C25661 * C749;
    const double C26476 = C25661 * C737;
    const double C26470 = C25661 * C742;
    const double C26466 = C25661 * C726;
    const double C26802 = C25661 * C984;
    const double C26798 = C25661 * C976;
    const double C28944 = C25661 * C385;
    const double C28940 = C25661 * C397;
    const double C28934 = C25661 * C401;
    const double C28930 = C25661 * C394;
    const double C29706 = C25661 * C856;
    const double C29702 = C25661 * C866;
    const double C29920 = C25661 * C3457;
    const double C30064 = C25661 * C1070;
    const double C30060 = C25661 * C1066;
    const double C39467 = C25661 * C6210;
    const double C39463 = C25661 * C6207;
    const double C49814 = C49810 / C49783;
    const double C603 =
        (C49821 / C49791 - (0 * de) / C49783) / C49791 - (0 * de) / C49783;
    const double C1281 = C49821 / C49791 - (0 * de) / C49783;
    const double C50951 = C50908 - C50938;
    const double C50939 = C50911 - C50912;
    const double C506 =
        ((-(0 * de) / C49783) / C49791 -
         ((0 - (C49782 * C49792) / C49783) * de) / C49783) /
            C49791 -
        ((C49782 * ((-C49792 / C49783) / C49791 -
                    ((C50672 - (C49782 * C49796) / C49783) * de) / C49783) +
          C1169) *
         de) /
            C49783 +
        (-C49796 / C49783) / C49791 - (0 * de) / C49783;
    const double C2355 = C2171 * C262;
    const double C2341 = C2172 * C262;
    const double C2327 = C2173 * C262;
    const double C7974 = C50891 * C262;
    const double C7958 = C50617 * C262;
    const double C10750 = C50612 * C262;
    const double C23001 = C22847 * C262;
    const double C25850 = C25661 * C262;
    const double C25834 = C50617 * C262;
    const double C5355 = C2171 * C386;
    const double C5351 = C2172 * C386;
    const double C5335 = C2173 * C386;
    const double C12892 = C50612 * C386;
    const double C15751 = C50891 * C386;
    const double C15747 = C50617 * C386;
    const double C28946 = C25661 * C386;
    const double C28942 = C50617 * C386;
    const double C32410 = C22847 * C386;
    const double C2689 = C2171 * C515;
    const double C2675 = C2172 * C515;
    const double C7964 = C50891 * C515;
    const double C7948 = C50617 * C515;
    const double C10742 = C50612 * C515;
    const double C25840 = C25661 * C515;
    const double C25824 = C50617 * C515;
    const double C2997 = C2172 * C727;
    const double C3953 = C2171 * C727;
    const double C8608 = C50617 * C727;
    const double C9562 = C50891 * C727;
    const double C11804 = C50612 * C727;
    const double C26468 = C50617 * C727;
    const double C27406 = C25661 * C727;
    const double C5941 = C2172 * C857;
    const double C5921 = C2171 * C857;
    const double C13466 = C50612 * C857;
    const double C15741 = C50891 * C857;
    const double C15729 = C50617 * C857;
    const double C29704 = C50617 * C857;
    const double C29684 = C25661 * C857;
    const double C10977 = C10625 * C2813;
    const double C11175 = C10625 * C2989;
    const double C11395 = C10625 * C3329;
    const double C13673 = C10625 * C3454;
    const double C2348 = C2178 * C265;
    const double C7975 = C49761 * C265;
    const double C25851 = C25667 * C265;
    const double C5342 = C2178 * C391;
    const double C15756 = C49761 * C391;
    const double C28951 = C25667 * C391;
    const double C2682 = C2178 * C520;
    const double C7969 = C49761 * C520;
    const double C10755 = C10625 * C520;
    const double C25845 = C25667 * C520;
    const double C3004 = C2178 * C732;
    const double C9563 = C49761 * C732;
    const double C12719 = C10625 * C732;
    const double C27407 = C25667 * C732;
    const double C5932 = C2178 * C862;
    const double C15734 = C49761 * C862;
    const double C18534 = C10625 * C862;
    const double C29689 = C25667 * C862;
    const double C6222 = C2178 * C1060;
    const double C16336 = C49761 * C1060;
    const double C21173 = C10625 * C1060;
    const double C39194 = C25667 * C1060;
    const double C49928 = -C49924;
    const double C3328 = -((C49874 * (C49874 * C49946 + C50005 * ce) + C49914 +
                            C49874 * C50005 * ce) *
                               C50129 +
                           C49874 * C50361 + C49896 + C50359 * ce) /
                         C49783;
    const double C3453 =
        (-2 * C50086 * C50361) / C49783 -
        (C50086 * ((C49874 * C49946 + C50005 * ce) * C50129 + C50361)) / C49783;
    const double C50421 = C50419 + C49894;
    const double C50445 = C50438 / C49783;
    const double C21740 = C10625 * C16634;
    const double C50253 = C50251 + C50252;
    const double C970 = C49874 * C50249 + C50352 * C50129;
    const double C3449 =
        2 * C50086 * C50352 + C50086 * (C50352 + C49874 * C50012 * C50129);
    const double C50354 = C50350 + C50351;
    const double C2824 = C2178 * C613;
    const double C8319 = C49761 * C613;
    const double C10759 = C10625 * C613;
    const double C26195 = C25667 * C613;
    const double C3012 = C2178 * C739;
    const double C9571 = C49761 * C739;
    const double C12723 = C10625 * C739;
    const double C27415 = C25667 * C739;
    const double C3340 = C2178 * C978;
    const double C17150 = C49761 * C978;
    const double C18382 = C10625 * C978;
    const double C29697 = C25667 * C978;
    const double C2818 = C2178 * C605;
    const double C8315 = C49761 * C605;
    const double C10757 = C10625 * C605;
    const double C26191 = C25667 * C605;
    const double C3006 = C2178 * C723;
    const double C9567 = C49761 * C723;
    const double C12721 = C10625 * C723;
    const double C27411 = C25667 * C723;
    const double C6216 = C2178 * C1056;
    const double C16332 = C49761 * C1056;
    const double C21171 = C10625 * C1056;
    const double C39190 = C25667 * C1056;
    const double C2812 =
        (-3 * (C49874 * C50361 + C49896 + C50359 * ce)) / C49783 +
        C49874 * ((-2 * C50361) / C49783 -
                  (C49874 * (C49874 * (C49874 * C49946 + C50005 * ce) + C49914 +
                             C49874 * C50005 * ce)) /
                      C49783 -
                  (C50362 * ce) / C49783) -
        ((2 * C50359 + C49874 * C50362) * ce) / C49783;
    const double C2988 =
        C50086 * ((-2 * C50361) / C49783 -
                  (C49874 * (C49874 * (C49874 * C49946 + C50005 * ce) + C49914 +
                             C49874 * C50005 * ce)) /
                      C49783 -
                  (C50362 * ce) / C49783);
    const double C2806 = 3 * (C50247 + C49995 * C50095) +
                         C49874 * (2 * C50359 + C49874 * C50362);
    const double C2982 = C50086 * (2 * C50359 + C49874 * C50362);
    const double C3322 = C50247 + C49995 * C50095 + C50362 * C50129;
    const double C9064 =
        2 * C50086 * C50362 + C50086 * (C50362 + C50403 * C50129);
    const double C16518 = C49761 * C3450;
    const double C19098 = C10625 * C3450;
    const double C29917 = C25667 * C3450;
    const double C50405 = C49874 * C50401;
    const double C16509 =
        (-3 * (C50401 * C50129 + C50361)) / C49783 +
        C50086 * ((-2 * C50086 * C50401) / C49783 -
                  (C50086 * ((C49874 * C49871 * C49963 + C50048 * ce) * C50129 +
                             C50401)) /
                      C49783);
    const double C16631 =
        4 * (2 * C50086 * C49995 + C50086 * C50590) +
        C50086 * (3 * C50590 + C50086 * (2 * C50086 * C50005 +
                                         C50086 * (C50005 + C50048 * C50129)));
    const double C50017 = C49997 + C50015;
    const double C50106 = C50001 + C50104;
    const double C50138 = C50135 / C49882;
    const double C50139 = 2 * C50133;
    const double C50137 = C50133 * ce;
    const double C50482 = C50001 + C50481;
    const double C50422 = C50418 + C50420;
    const double C50448 = C50442 / C49783;
    const double C13675 = C10625 * C9065;
    const double C19382 =
        4 * (2 * C50086 * C50413 + C50086 * C50596) +
        C50086 * (3 * C50596 +
                  C50086 * (2 * C50086 * C50441 +
                            C50086 * (C50441 + C49874 * C50006 * C50129)));
    const double C50453 = C50451 + C49905;
    const double C50488 = C50487 + C50415;
    const double C19274 = C10625 * C13784;
    const double C50603 = C50600 + C50602;
    const double C50035 = C49988 + C50033;
    const double C50105 = C50103 / C49882;
    const double C975 = (C49874 * C50031 + C50101 * C50129) / C49742;
    const double C3456 =
        (2 * C50086 * C50101 + C50086 * (C50101 + C50133 * C50129)) / C49742;
    const double C16508 =
        (3 * (C50101 + C50133 * C50129) +
         C50086 * (2 * C50086 * C50133 +
                   C50086 * (C50133 + C49874 * C50054 * C50129))) /
        C49742;
    const double C2821 = C2172 * C610;
    const double C8318 = C50891 * C610;
    const double C8308 = C50617 * C610;
    const double C10746 = C50612 * C610;
    const double C26194 = C25661 * C610;
    const double C26184 = C50617 * C610;
    const double C3009 = C2172 * C736;
    const double C8614 = C50617 * C736;
    const double C9570 = C50891 * C736;
    const double C11808 = C50612 * C736;
    const double C26474 = C50617 * C736;
    const double C27414 = C25661 * C736;
    const double C6215 = C2172 * C1065;
    const double C16343 = C50617 * C1065;
    const double C16331 = C50891 * C1065;
    const double C19095 = C50612 * C1065;
    const double C30062 = C50617 * C1065;
    const double C39189 = C25661 * C1065;
    const double C16645 = C50617 * C6206;
    const double C21550 = C50612 * C6206;
    const double C39465 = C50617 * C6206;
    const double C8442 = C50891 * C2810;
    const double C10976 = C50612 * C2810;
    const double C26310 = C25661 * C2810;
    const double C8624 = C50891 * C2986;
    const double C11174 = C50612 * C2986;
    const double C26484 = C25661 * C2986;
    const double C8954 = C50891 * C3326;
    const double C11394 = C50612 * C3326;
    const double C26806 = C25661 * C3326;
    const double C13676 = C50612 * C9069;
    const double C50161 = -C50158;
    const double C21739 = C50612 * C16636;
    const double C49974 = C49972 / C49783;
    const double C50056 = C50007 + C50055;
    const double C50140 = C50013 + C50136;
    const double C50195 = C50187 + C50192;
    const double C49940 = C49926 - C49938;
    const double C49967 = C49964 / C49742;
    const double C50500 = C50497 - C50499;
    const double C50050 = C50016 * ae;
    const double C50258 = C49871 * C50016;
    const double C2805 = 3 * (C50249 + C50000 * C50095) +
                         C49874 * (2 * C50352 + C49874 * C50355);
    const double C2981 = C50086 * (2 * C50352 + C49874 * C50355);
    const double C3321 = C50249 + C50000 * C50095 + C50355 * C50129;
    const double C50408 = C50404 + C50406;
    const double C50456 = C49874 * C50454;
    const double C8431 = (4 * (2 * C50109 + C49874 * C50115) +
                          C49874 * (3 * C50115 + C49874 * C50163)) /
                         C49742;
    const double C8599 = (C50086 * (3 * C50115 + C49874 * C50163)) / C49742;
    const double C8937 =
        (2 * C50109 + C49874 * C50115 + C50163 * C50129) / C49742;
    const double C50196 = C50193 / C49742;
    const double C21733 =
        (5 * (3 * C50485 + C50086 * C50507) +
         C50086 * (4 * C50507 +
                   C50086 * (3 * C50505 +
                             C50086 * (2 * C50086 * C50007 +
                                       C50086 * (C50007 + C50051 * C50129))))) /
        C49742;
    const double C49911 = C49910 / C49742;
    const double C50117 = C50116 / C49742;
    const double C49937 = C49935 / C49742;
    const double C50162 = C50159 / C49742;
    const double C50218 = C50217 / C49742;
    const double C49973 = C49971 / C49742;
    const double C50194 = C50191 / C49742;
    const double C50230 = C50229 / C49742;
    const double C50950 = C50900 - C50935;
    const double C50936 = C50902 - C50903;
    const double C50952 = C50913 - C50941;
    const double C50942 = C50916 - C50917;
    const double C50953 = C50921 - C50944;
    const double C50945 = C50924 - C50925;
    const double C50954 = C50926 - C50947;
    const double C50948 = C50929 - C50930;
    const double C7989 = C7943 + C7944;
    const double C7987 = C7939 + C7940;
    const double C15769 = C15724 + C15725;
    const double C15767 = C15720 + C15721;
    const double C23022 = C22852 * C265;
    const double C23016 = C22852 * C255;
    const double C23006 = C22852 * C266;
    const double C23000 = C22852 * C256;
    const double C23356 = C22852 * C520;
    const double C23350 = C22852 * C511;
    const double C23486 = C22852 * C613;
    const double C23480 = C22852 * C605;
    const double C23662 = C22852 * C739;
    const double C23656 = C22852 * C723;
    const double C23654 = C22852 * C732;
    const double C23648 = C22852 * C720;
    const double C23978 = C22852 * C978;
    const double C32423 = C22852 * C381;
    const double C32417 = C22852 * C391;
    const double C32415 = C22852 * C390;
    const double C32409 = C22852 * C380;
    const double C33013 = C22852 * C853;
    const double C33007 = C22852 * C862;
    const double C33285 = C22852 * C1060;
    const double C33279 = C22852 * C1056;
    const double C49765 = C50612 - C49763;
    const double C10768 = C10739 + C10740;
    const double C10767 = C10737 + C10738;
    const double C10766 = C10735 + C10736;
    const double C10765 = C10733 + C10734;
    const double C10764 = C10731 + C10732;
    const double C10763 = C10729 + C10730;
    const double C10762 = C10727 + C10728;
    const double C10761 = C10725 + C10726;
    const double C11184 = C11171 + C11172;
    const double C11183 = C11169 + C11170;
    const double C11182 = C11167 + C11168;
    const double C11181 = C11165 + C11166;
    const double C11402 = C11391 + C11392;
    const double C11401 = C11389 + C11390;
    const double C12902 = C12889 + C12890;
    const double C12901 = C12887 + C12888;
    const double C12900 = C12877 + C12878;
    const double C12899 = C12875 + C12876;
    const double C13492 = C13483 + C13484;
    const double C13491 = C13481 + C13482;
    const double C13679 = C13671 + C13672;
    const double C13798 = C13791 + C13792;
    const double C13797 = C13789 + C13790;
    const double C19278 = C19272 + C19273;
    const double C19398 = C19391 + C19392;
    const double C19397 = C19389 + C19390;
    const double C25865 = C25819 + C25820;
    const double C25863 = C25815 + C25816;
    const double C28956 = C28935 + C28936;
    const double C28954 = C28931 + C28932;
    const double C23029 = C50949 * C262;
    const double C23019 = C50949 * C275;
    const double C23013 = C50949 * C263;
    const double C23011 = C50949 * C276;
    const double C23005 = C50949 * C264;
    const double C23363 = C50949 * C515;
    const double C23353 = C50949 * C524;
    const double C23347 = C50949 * C514;
    const double C23491 = C50949 * C619;
    const double C23485 = C50949 * C611;
    const double C23667 = C50949 * C749;
    const double C23661 = C50949 * C737;
    const double C23651 = C50949 * C742;
    const double C23645 = C50949 * C726;
    const double C23983 = C50949 * C984;
    const double C23977 = C50949 * C976;
    const double C24579 = C50949 * C727;
    const double C32430 = C50949 * C386;
    const double C32428 = C50949 * C385;
    const double C32422 = C50949 * C397;
    const double C32412 = C50949 * C401;
    const double C32406 = C50949 * C394;
    const double C33018 = C50949 * C856;
    const double C33012 = C50949 * C866;
    const double C32996 = C50949 * C857;
    const double C33282 = C50949 * C1070;
    const double C33276 = C50949 * C1066;
    const double C105 = (C50891 - C50931) / C49747 - (C50949 * C50608) / C49742;
    const double C23015 = C50933 * C262;
    const double C23009 = C50933 * C275;
    const double C23003 = C50933 * C263;
    const double C23349 = C50933 * C515;
    const double C23483 = C50933 * C610;
    const double C23659 = C50933 * C736;
    const double C23647 = C50933 * C727;
    const double C32426 = C50933 * C386;
    const double C32414 = C50933 * C397;
    const double C32408 = C50933 * C385;
    const double C33016 = C50933 * C857;
    const double C33278 = C50933 * C1065;
    const double C106 =
        (2 * C50617 + C50949) / C49747 - (C50933 * C50608) / C49742;
    const double C107 = C50933 / C49747 - C50620 / C49751;
    const double C49819 = C50672 - C49814;
    const double C595 = (C50905 - C50937) / C49791 - (C50951 * C50684) / C49783;
    const double C596 =
        (2 * C50688 + C50951) / C49791 - (C50939 * C50684) / C49783;
    const double C597 = C50939 / C49791 - C50691 / C49812;
    const double C2362 = C2326 + C2327;
    const double C7996 = C7957 + C7958;
    const double C10773 = C10749 + C10750;
    const double C25872 = C25833 + C25834;
    const double C5368 = C5334 + C5335;
    const double C12903 = C12891 + C12892;
    const double C15780 = C15746 + C15747;
    const double C28959 = C28941 + C28942;
    const double C7991 = C7947 + C7948;
    const double C10769 = C10741 + C10742;
    const double C25867 = C25823 + C25824;
    const double C8630 = C8607 + C8608;
    const double C11815 = C11803 + C11804;
    const double C26490 = C26467 + C26468;
    const double C13485 = C13465 + C13466;
    const double C15771 = C15728 + C15729;
    const double C29717 = C29703 + C29704;
    const double C49931 = C49928 / C49742;
    const double C8955 = C49761 * C3328;
    const double C13475 = C10625 * C3328;
    const double C26807 = C25667 * C3328;
    const double C16522 = C49761 * C3453;
    const double C19100 = C10625 * C3453;
    const double C29921 = C25667 * C3453;
    const double C50423 = C50421 + C50416;
    const double C127 = 4 * (2 * C50247 + C49871 * C50249) +
                        C49871 * (3 * C50249 + C49871 * C50253);
    const double C259 = C49874 * (3 * C50249 + C49871 * C50253);
    const double C382 = C50086 * (3 * C50249 + C49871 * C50253);
    const double C512 = 2 * C50247 + C49871 * C50249 + C50253 * C50095;
    const double C604 =
        2 * C49874 * C50253 + C49874 * (C50253 + C50016 * C50095);
    const double C721 = C50086 * C49874 * C50253;
    const double C722 = C50086 * (C50253 + C50016 * C50095);
    const double C854 = 2 * C50247 + C49871 * C50249 + C50253 * C50129;
    const double C969 = C49874 * C50253 + C49874 * C50016 * C50129;
    const double C1055 =
        2 * C50086 * C50253 + C50086 * (C50253 + C50016 * C50129);
    const double C3334 = C2178 * C970;
    const double C17146 = C49761 * C970;
    const double C18380 = C10625 * C970;
    const double C23972 = C22852 * C970;
    const double C29693 = C25667 * C970;
    const double C2811 =
        (-3 * (C49874 * C50354 + C49909 + C50352 * ce)) / C49783 +
        C49874 * ((-2 * C50354) / C49783 -
                  (C49874 * (C49874 * (C49874 * C49969 + C50012 * ce) + C49933 +
                             C49874 * C50012 * ce)) /
                      C49783 -
                  (C50355 * ce) / C49783) -
        ((2 * C50352 + C49874 * C50355) * ce) / C49783;
    const double C2987 =
        C50086 * ((-2 * C50354) / C49783 -
                  (C49874 * (C49874 * (C49874 * C49969 + C50012 * ce) + C49933 +
                             C49874 * C50012 * ce)) /
                      C49783 -
                  (C50355 * ce) / C49783);
    const double C3327 = -((C49874 * (C49874 * C49969 + C50012 * ce) + C49933 +
                            C49874 * C50012 * ce) *
                               C50129 +
                           C49874 * C50354 + C49909 + C50352 * ce) /
                         C49783;
    const double C3452 =
        (-2 * C50086 * C50354) / C49783 -
        (C50086 * ((C49874 * C49969 + C50012 * ce) * C50129 + C50354)) / C49783;
    const double C8443 = C49761 * C2812;
    const double C10981 = C10625 * C2812;
    const double C26311 = C25667 * C2812;
    const double C8625 = C49761 * C2988;
    const double C11813 = C10625 * C2988;
    const double C26485 = C25667 * C2988;
    const double C8439 = C49761 * C2806;
    const double C10979 = C10625 * C2806;
    const double C26307 = C25667 * C2806;
    const double C8621 = C49761 * C2982;
    const double C11811 = C10625 * C2982;
    const double C26481 = C25667 * C2982;
    const double C8951 = C49761 * C3322;
    const double C13473 = C10625 * C3322;
    const double C26803 = C25667 * C3322;
    const double C50407 = C50405 + C49914;
    const double C50018 = C50017 + C50008;
    const double C2809 = (3 * (C50031 + C50001 * C50095) +
                          C49874 * (2 * C50101 + C49874 * C50106)) /
                         C49742;
    const double C2985 = (C50086 * (2 * C50101 + C49874 * C50106)) / C49742;
    const double C3325 = (C50031 + C50001 * C50095 + C50106 * C50129) / C49742;
    const double C50141 = C50137 / C49882;
    const double C16635 =
        (4 * (2 * C50086 * C50001 + C50086 * C50482) +
         C50086 *
             (3 * C50482 + C50086 * (2 * C50086 * C50013 +
                                     C50086 * (C50013 + C50054 * C50129)))) /
        C49742;
    const double C8429 = 4 * (2 * C50366 + C49874 * C50369) +
                         C49874 * (3 * C50369 + C49874 * C50422);
    const double C8597 = C50086 * (3 * C50369 + C49874 * C50422);
    const double C8935 = 2 * C50366 + C49874 * C50369 + C50422 * C50129;
    const double C11472 =
        2 * C50086 * C50422 + C50086 * (C50422 + C50454 * C50129);
    const double C50455 = C50453 + C50447;
    const double C19383 =
        4 * ((-2 * C50086 * C50415) / C49783 - (C50086 * C50488) / C49783) +
        C50086 *
            ((-3 * C50488) / C49783 +
             C50086 * ((-2 * C50086 * C50446) / C49783 -
                       (C50086 *
                        ((C49874 * C49963 + C50006 * ce) * C50129 + C50446)) /
                           C49783));
    const double C21731 =
        5 * (3 * C50593 + C50086 * C50603) +
        C50086 * (4 * C50603 +
                  C50086 * (3 * C50601 +
                            C50086 * (2 * C50086 * C49996 +
                                      C50086 * (C49996 + C50006 * C50129))));
    const double C50036 = C50035 + C50034;
    const double C3337 = C2172 * C975;
    const double C8944 = C50617 * C975;
    const double C13470 = C50612 * C975;
    const double C17145 = C50891 * C975;
    const double C23975 = C50933 * C975;
    const double C26796 = C50617 * C975;
    const double C29692 = C25661 * C975;
    const double C16519 = C50617 * C3456;
    const double C19099 = C50612 * C3456;
    const double C29918 = C50617 * C3456;
    const double C8324 = C8307 + C8308;
    const double C10771 = C10745 + C10746;
    const double C26200 = C26183 + C26184;
    const double C8633 = C8613 + C8614;
    const double C11817 = C11807 + C11808;
    const double C26493 = C26473 + C26474;
    const double C16356 = C16342 + C16343;
    const double C19106 = C19094 + C19095;
    const double C30068 = C30061 + C30062;
    const double C16653 = C16644 + C16645;
    const double C21555 = C21549 + C21550;
    const double C39473 = C39464 + C39465;
    const double C10983 = C10975 + C10976;
    const double C11185 = C11173 + C11174;
    const double C11403 = C11393 + C11394;
    const double C13681 = C13675 + C13676;
    const double C50164 = C50161 / C49742;
    const double C21743 = C21738 + C21739;
    const double C49976 = C49962 - C49974;
    const double C50057 = C50056 + C50052;
    const double C50143 = C49874 * C50140;
    const double C9068 =
        (2 * C50086 * C50106 + C50086 * (C50106 + C50140 * C50129)) / C49742;
    const double C50198 = C49874 * C50195;
    const double C11474 =
        (2 * C50086 * C50163 + C50086 * (C50163 + C50195 * C50129)) / C49742;
    const double C140 =
        4 * ((-2 * C49896) / C49783 - (C49871 * C49909) / C49783) +
        C49871 * ((-3 * C49909) / C49783 + C49871 * C49940);
    const double C270 = C49874 * ((-3 * C49909) / C49783 + C49871 * C49940) -
                        ((3 * C50249 + C49871 * C50253) * ce) / C49783;
    const double C392 = C50086 * ((-3 * C49909) / C49783 + C49871 * C49940);
    const double C521 = (-2 * C49896) / C49783 - (C49871 * C49909) / C49783 +
                        C49874 * (C49874 * C49940 - (C50253 * ce) / C49783) -
                        (C49874 * C50253 * ce) / C49783;
    const double C733 = C50086 * (C49874 * C49940 - (C50253 * ce) / C49783);
    const double C863 =
        (-2 * C49896) / C49783 - (C49871 * C49909) / C49783 + C49940 * C50129;
    const double C49970 = C49967 - C49947;
    const double C21732 =
        5 * ((-3 * C50479) / C49783 + C50086 * C50500) +
        C50086 * (4 * C50500 +
                  C50086 * ((-3 * C50496) / C49783 +
                            C50086 * ((-2 * C50086 * C49927) / C49783 -
                                      (C50086 * (C49963 * C50129 + C49927)) /
                                          C49783)));
    const double C50259 = C50257 + C50258;
    const double C8428 = 4 * (2 * C50359 + C49874 * C50362) +
                         C49874 * (3 * C50362 + C49874 * C50408);
    const double C8596 = C50086 * (3 * C50362 + C49874 * C50408);
    const double C8934 = 2 * C50359 + C49874 * C50362 + C50408 * C50129;
    const double C50458 = C50444 + C50456;
    const double C11058 = C50612 * C8431;
    const double C11178 = C50612 * C8599;
    const double C11398 = C50612 * C8937;
    const double C50199 = C50196 - C49947;
    const double C49912 = C49911 - C49902;
    const double C50118 = C50117 - C50114;
    const double C49939 = C49937 - C49921;
    const double C50165 = C50162 - C50155;
    const double C50219 = C50218 - C49915;
    const double C49975 = C49973 - C49955;
    const double C50197 = C50194 - C50186;
    const double C50231 = C50230 - C49947;
    const double C112 = (C50898 - C50934) / C49791 - (C50950 * C50634) / C49783;
    const double C113 =
        (2 * C50643 + C50950) / C49791 - (C50936 * C50634) / C49783;
    const double C114 = C50936 / C49791 - C50646 / C49812;
    const double C1051 =
        (C50907 - C50940) / C49791 - (C50952 * C50710) / C49783;
    const double C1052 =
        (2 * C50714 + C50952) / C49791 - (C50942 * C50710) / C49783;
    const double C1053 = C50942 / C49791 - C50717 / C49812;
    const double C10621 =
        (C50919 - C50943) / C49747 - (C50953 * C50786) / C49742;
    const double C10622 =
        (2 * C50790 + C50953) / C49747 - (C50945 * C50786) / C49742;
    const double C10623 = C50945 / C49747 - C50793 / C49751;
    const double C20970 =
        (C50920 - C50946) / C49747 - (C50954 * C50810) / C49742;
    const double C20971 =
        (2 * C50814 + C50954) / C49747 - (C50948 * C50810) / C49742;
    const double C20972 = C50948 / C49747 - C50817 / C49751;
    const double C23036 = C23000 + C23001;
    const double C32443 = C32409 + C32410;
    const double C49766 = C49765 * ae;
    const double C2176 =
        ((-C49741 / C49742) / C49747 - (C49754 * be) / C49742) / C49747 -
        ((C49740 * ((-C49743 / C49742) / C49747 - (C49765 * be) / C49742) +
          C25661) *
         be) /
            C49742 +
        (-C49756 / C49742) / C49747 - (0 * be) / C49742;
    const double C2177 =
        ((-C49743 / C49742) / C49747 - (C49765 * be) / C49742) / C49747 -
        ((C49740 * ((-C49756 / C49742) / C49747 - (0 * be) / C49742) + C50617) *
         be) /
            C49742;
    const double C25666 = (-C49743 / C49742) / C49747 - (C49765 * be) / C49742;
    const double C12882 = C11184 * C50672;
    const double C13314 = C11184 * C501;
    const double C13310 = C11184 * C502;
    const double C13306 = C11184 * C503;
    const double C13656 = C11184 * C50905;
    const double C13654 = C11184 * C50688;
    const double C14296 = C11184 * C1169;
    const double C14294 = C11184 * C50688;
    const double C15162 = C11184 * C50951;
    const double C15158 = C11184 * C50939;
    const double C15154 = C11184 * C1276;
    const double C12881 = C11183 * C121;
    const double C13313 = C11183 * C506;
    const double C13309 = C11183 * C507;
    const double C13305 = C11183 * C508;
    const double C13655 = C11183 * C253;
    const double C13653 = C11183 * C254;
    const double C14293 = C11183 * C1175;
    const double C15153 = C11183 * C1281;
    const double C12880 = C11182 * C50672;
    const double C13308 = C11182 * C501;
    const double C13304 = C11182 * C502;
    const double C13652 = C11182 * C50905;
    const double C13650 = C11182 * C50688;
    const double C14292 = C11182 * C1169;
    const double C14290 = C11182 * C50688;
    const double C15156 = C11182 * C50951;
    const double C15152 = C11182 * C50939;
    const double C12879 = C11181 * C121;
    const double C13307 = C11181 * C506;
    const double C13303 = C11181 * C507;
    const double C13651 = C11181 * C253;
    const double C13649 = C11181 * C254;
    const double C14289 = C11181 * C1175;
    const double C13479 = C11402 * C50672;
    const double C13664 = C11402 * C50905;
    const double C13662 = C11402 * C50688;
    const double C15318 = C11402 * C1169;
    const double C15316 = C11402 * C50688;
    const double C18939 = C11402 * C501;
    const double C18935 = C11402 * C502;
    const double C20737 = C11402 * C50951;
    const double C20733 = C11402 * C50939;
    const double C13480 = C11401 * C121;
    const double C13665 = C11401 * C253;
    const double C13659 = C11401 * C254;
    const double C15313 = C11401 * C1175;
    const double C18938 = C11401 * C506;
    const double C18934 = C11401 * C507;
    const double C12908 = C12902 * C121;
    const double C14653 = C12902 * C253;
    const double C12907 = C12901 * C50672;
    const double C14300 = C12901 * C1169;
    const double C14652 = C12901 * C50905;
    const double C12906 = C12900 * C50672;
    const double C13302 = C12900 * C501;
    const double C13648 = C12900 * C50905;
    const double C14288 = C12900 * C1169;
    const double C15150 = C12900 * C50951;
    const double C12905 = C12899 * C121;
    const double C13301 = C12899 * C506;
    const double C13647 = C12899 * C253;
    const double C13500 = C13492 * C121;
    const double C13661 = C13492 * C253;
    const double C18932 = C13492 * C506;
    const double C13499 = C13491 * C50672;
    const double C13660 = C13491 * C50905;
    const double C15314 = C13491 * C1169;
    const double C18933 = C13491 * C501;
    const double C20731 = C13491 * C50951;
    const double C13793 = C13679 * C121;
    const double C19270 = C13679 * C253;
    const double C19264 = C13679 * C254;
    const double C20890 = C13679 * C1175;
    const double C21443 = C13679 * C507;
    const double C13800 = C13798 * C50672;
    const double C19265 = C13798 * C50905;
    const double C20891 = C13798 * C1169;
    const double C21442 = C13798 * C501;
    const double C22636 = C13798 * C50951;
    const double C13799 = C13797 * C121;
    const double C19266 = C13797 * C253;
    const double C21441 = C13797 * C506;
    const double C19393 = C19278 * C121;
    const double C21659 = C19278 * C254;
    const double C22741 = C19278 * C1175;
    const double C19401 = C19398 * C50672;
    const double C21660 = C19398 * C50905;
    const double C22742 = C19398 * C1169;
    const double C19400 = C19397 * C121;
    const double C21661 = C19397 * C253;
    const double C49823 = C49819 * ce;
    const double C1174 = (-C49792 / C49783) / C49791 - (C49819 * de) / C49783;
    const double C12909 = C12903 * C121;
    const double C12886 = C11815 * C121;
    const double C14299 = C11815 * C1175;
    const double C14657 = C11815 * C253;
    const double C14651 = C11815 * C254;
    const double C13493 = C13485 * C121;
    const double C20238 = C13485 * C253;
    const double C49934 = C49931 - C49915;
    const double C8433 =
        4 * ((-2 * C50368) / C49783 - (C49874 * C50423) / C49783 -
             (C50369 * ce) / C49783) +
        C49874 *
            ((-3 * C50423) / C49783 +
             C49874 * ((-2 * C50415) / C49783 -
                       (C49874 * (C49874 * (C49874 * C49927 + C49996 * ce) +
                                  C49905 + C49874 * C49996 * ce)) /
                           C49783 -
                       (C50417 * ce) / C49783) -
             (C50422 * ce) / C49783) -
        ((3 * C50369 + C49874 * C50422) * ce) / C49783;
    const double C8601 =
        C50086 *
        ((-3 * C50423) / C49783 +
         C49874 * ((-2 * C50415) / C49783 -
                   (C49874 * (C49874 * (C49874 * C49927 + C49996 * ce) +
                              C49905 + C49874 * C49996 * ce)) /
                       C49783 -
                   (C50417 * ce) / C49783) -
         (C50422 * ce) / C49783);
    const double C8939 = (-2 * C50368) / C49783 - (C49874 * C50423) / C49783 -
                         (C50369 * ce) / C49783 +
                         ((-2 * C50415) / C49783 -
                          (C49874 * (C49874 * (C49874 * C49927 + C49996 * ce) +
                                     C49905 + C49874 * C49996 * ce)) /
                              C49783 -
                          (C50417 * ce) / C49783) *
                             C50129;
    const double C9067 = (-2 * C50086 * C50423) / C49783 -
                         (C50086 * ((C49874 * (C49874 * C49927 + C49996 * ce) +
                                     C49905 + C49874 * C49996 * ce) *
                                        C50129 +
                                    C50423)) /
                             C49783;
    const double C2350 = C2178 * C259;
    const double C23024 = C22852 * C259;
    const double C5358 = C2178 * C382;
    const double C32433 = C22852 * C382;
    const double C2684 = C2178 * C512;
    const double C7979 = C49761 * C512;
    const double C23358 = C22852 * C512;
    const double C25855 = C25667 * C512;
    const double C3948 = C2178 * C721;
    const double C24574 = C22852 * C721;
    const double C28723 = C25667 * C721;
    const double C41268 = C49761 * C721;
    const double C5924 = C2178 * C854;
    const double C15760 = C49761 * C854;
    const double C32999 = C22852 * C854;
    const double C38638 = C25667 * C854;
    const double C50409 = C50407 + C50402;
    const double C50039 = C49871 * C50018;
    const double C50044 = 3 * C50018;
    const double C50094 = C50018 * ce;
    const double C50092 = C49874 * C50018;
    const double C8440 = C50617 * C2809;
    const double C10980 = C50612 * C2809;
    const double C26308 = C50617 * C2809;
    const double C8622 = C50617 * C2985;
    const double C11812 = C50612 * C2985;
    const double C26482 = C50617 * C2985;
    const double C8952 = C50617 * C3325;
    const double C13474 = C50612 * C3325;
    const double C26804 = C50617 * C3325;
    const double C11057 = C10625 * C8429;
    const double C11177 = C10625 * C8597;
    const double C11397 = C10625 * C8935;
    const double C50457 = C49874 * C50455;
    const double C13782 =
        (-3 * (C50455 * C50129 + C50423)) / C49783 +
        C50086 * ((-2 * C50086 * C50455) / C49783 -
                  (C50086 * ((C49874 * (C49874 * C49963 + C50006 * ce) +
                              C49927 + C49874 * C50006 * ce) *
                                 C50129 +
                             C50455)) /
                      C49783);
    const double C138 = (3 * (C50027 + C49871 * C50031 + C50247 * ae) +
                         C49871 * (2 * C50031 + C49871 * C50036 + C50249 * ae) +
                         (2 * C50247 + C49871 * C50249) * ae) /
                        C49742;
    const double C261 =
        (C49874 * (2 * C50031 + C49871 * C50036 + C50249 * ae)) / C49742;
    const double C387 =
        (C50086 * (2 * C50031 + C49871 * C50036 + C50249 * ae)) / C49742;
    const double C516 =
        (C50027 + C49871 * C50031 + C50247 * ae + C50036 * C50095) / C49742;
    const double C609 =
        (2 * C49874 * C50036 + C49874 * (C50036 + C50018 * C50095)) / C49742;
    const double C728 = (C50086 * C49874 * C50036) / C49742;
    const double C735 = (C50086 * (C50036 + C50018 * C50095)) / C49742;
    const double C858 =
        (C50027 + C49871 * C50031 + C50247 * ae + C50036 * C50129) / C49742;
    const double C1064 =
        (2 * C50086 * C50036 + C50086 * (C50036 + C50018 * C50129)) / C49742;
    const double C8959 = C8943 + C8944;
    const double C13487 = C13469 + C13470;
    const double C26811 = C26795 + C26796;
    const double C16528 = C16518 + C16519;
    const double C19108 = C19098 + C19099;
    const double C29925 = C29917 + C29918;
    const double C12884 = C11817 * C121;
    const double C14303 = C11817 * C1175;
    const double C14661 = C11817 * C253;
    const double C14655 = C11817 * C254;
    const double C19112 = C19106 * C121;
    const double C22307 = C19106 * C253;
    const double C21557 = C21555 * C121;
    const double C13315 = C11185 * C507;
    const double C13311 = C11185 * C508;
    const double C13657 = C11185 * C254;
    const double C14297 = C11185 * C1175;
    const double C15159 = C11185 * C1281;
    const double C13478 = C11403 * C121;
    const double C13669 = C11403 * C253;
    const double C13663 = C11403 * C254;
    const double C15317 = C11403 * C1175;
    const double C18940 = C11403 * C507;
    const double C18936 = C11403 * C508;
    const double C20734 = C11403 * C1281;
    const double C13795 = C13681 * C121;
    const double C19268 = C13681 * C254;
    const double C20894 = C13681 * C1175;
    const double C21445 = C13681 * C508;
    const double C22639 = C13681 * C1281;
    const double C50166 = C50164 - C49915;
    const double C21745 = C21743 * C121;
    const double C49978 = C49871 * C49976;
    const double C612 =
        2 * (C49874 * C49940 - (C50253 * ce) / C49783) +
        C49874 * (C49940 + C49874 * (C49874 * C49976 - (C50016 * ce) / C49783) -
                  (C49874 * C50016 * ce) / C49783) -
        ((C50253 + C50016 * C50095) * ce) / C49783;
    const double C738 =
        C50086 * (C49940 + C49874 * (C49874 * C49976 - (C50016 * ce) / C49783) -
                  (C49874 * C50016 * ce) / C49783);
    const double C977 = C49874 * C49940 - (C50253 * ce) / C49783 +
                        (C49874 * C49976 - (C50016 * ce) / C49783) * C50129;
    const double C1059 =
        2 * C50086 * C49940 + C50086 * (C49940 + C49976 * C50129);
    const double C50058 = C49871 * C50057;
    const double C50097 = C50057 * C50095;
    const double C6205 =
        (3 * (C50036 + C50018 * C50129) +
         C50086 * (2 * C50086 * C50018 + C50086 * (C50018 + C50057 * C50129))) /
        C49742;
    const double C50146 = C50139 + C50143;
    const double C50201 = C50181 + C50198;
    const double C2356 = C2178 * C270;
    const double C23030 = C22852 * C270;
    const double C5364 = C2178 * C392;
    const double C32439 = C22852 * C392;
    const double C2690 = C2178 * C521;
    const double C7983 = C49761 * C521;
    const double C23364 = C22852 * C521;
    const double C25859 = C25667 * C521;
    const double C3954 = C2178 * C733;
    const double C24580 = C22852 * C733;
    const double C28727 = C25667 * C733;
    const double C41272 = C49761 * C733;
    const double C5930 = C2178 * C863;
    const double C15764 = C49761 * C863;
    const double C33005 = C22852 * C863;
    const double C38642 = C25667 * C863;
    const double C128 = 5 * (3 * C50249 + C49871 * C50253) +
                        C49871 * (4 * C50253 + C49871 * C50259);
    const double C260 = C49874 * (4 * C50253 + C49871 * C50259);
    const double C384 = C50086 * (4 * C50253 + C49871 * C50259);
    const double C513 = 3 * C50249 + C49871 * C50253 + C50259 * C50095;
    const double C855 = 3 * C50249 + C49871 * C50253 + C50259 * C50129;
    const double C1412 = C50086 * C49874 * C50259;
    const double C11052 = 5 * (3 * C50369 + C49874 * C50422) +
                          C49874 * (4 * C50422 + C49874 * C50458);
    const double C11160 = C50086 * (4 * C50422 + C49874 * C50458);
    const double C11384 = 3 * C50369 + C49874 * C50422 + C50458 * C50129;
    const double C147 =
        3 * ((-(ae * C49896) / C49783) / C49742 - C49893 / C49882 +
             C49871 * C49912) +
        (((-2 * C49896) / C49783 - (C49871 * C49909) / C49783) * ae) / C49742 +
        C49871 *
            (2 * C49912 - (ae * C49909) / C49882 +
             C49871 *
                 ((-(ae * C49871 * C49905) / C49783) / C49742 -
                  C49904 / C49882 +
                  C49871 * ((-(C49871 * std::pow(C49876, 6) * bs[6] * C49887) /
                             C49783) /
                                C49742 -
                            (ae * C49905) / C49882)));
    const double C274 =
        C49874 * ((-(ae * C49896) / C49783) / C49742 - C49893 / C49882 +
                  C49871 * C49912) -
        ((C49883 * C49879 * C49984 + C49871 * (C49871 * C49988 + C49985 * ae) +
          C49871 * C49985 * ae) *
         ce) /
            C49882;
    const double C398 = (zP - zQ) * ((-(ae * C49896) / C49783) / C49742 -
                                     C49893 / C49882 + C49871 * C49912);
    const double C525 = (-(C49871 * C49893) / C49783) / C49742 -
                        (ae * C49886) / C49882 -
                        (C49874 * C50031 * ce) / C49882 +
                        C49874 * (C49874 * C49912 - (C50031 * ce) / C49882);
    const double C743 = (zP - zQ) * (C49874 * C49912 - (C50031 * ce) / C49882);
    const double C867 = (-(C49871 * C49893) / C49783) / C49742 -
                        (ae * C49886) / C49882 + C49912 * std::pow(zP - zQ, 2);
    const double C2816 =
        3 * ((-(C50109 * ce) / C49783) / C49742 - C49893 / C49882 +
             C49874 * C50118) -
        ((2 * C50109 + C49874 * C50115) * ce) / C49882 +
        C49874 *
            (2 * C50118 - (C50115 * ce) / C49882 +
             C49874 * ((-(C49874 * C49997 * ce) / C49783) / C49742 - C49915 +
                       C49874 * ((-(C49874 * C49925) / C49783) / C49742 -
                                 (C49997 * ce) / C49882)));
    const double C2992 =
        C50086 *
        (2 * C50118 - (C50115 * ce) / C49882 +
         C49874 * ((-(C49874 * C49997 * ce) / C49783) / C49742 - C49915 +
                   C49874 * ((-(C49874 * C49925) / C49783) / C49742 -
                             (C49997 * ce) / C49882)));
    const double C3332 = (-(C50109 * ce) / C49783) / C49742 - C49893 / C49882 +
                         C49874 * C50118 +
                         ((-(C49874 * C49997 * ce) / C49783) / C49742 - C49915 +
                          C49874 * ((-(C49874 * C49925) / C49783) / C49742 -
                                    (C49997 * ce) / C49882)) *
                             std::pow(C50086, 2);
    const double C3460 =
        2 * C50086 * C50118 +
        C50086 * (C50118 + ((-(C49874 * C49925) / C49783) / C49742 -
                            (C49997 * ce) / C49882) *
                               std::pow(C50086, 2));
    const double C49941 = C49871 * C49939;
    const double C49944 = 2 * C49939;
    const double C50102 = C49874 * C49939;
    const double C50144 = C49939 - C50141;
    const double C618 =
        2 * (C49874 * C49912 - (C50031 * ce) / C49882) -
        ((C50031 + C50001 * std::pow(C49874, 2)) * ce) / C49882 +
        C49874 * (C49912 - (C49874 * C50001 * ce) / C49882 +
                  C49874 * (C49874 * C49939 - (C50001 * ce) / C49882));
    const double C748 =
        (zP - zQ) * (C49912 - (C49874 * C50001 * ce) / C49882 +
                     C49874 * (C49874 * C49939 - (C50001 * ce) / C49882));
    const double C983 =
        C49874 * C49912 - (C50031 * ce) / C49882 +
        (C49874 * C49939 - (C50001 * ce) / C49882) * std::pow(zP - zQ, 2);
    const double C1069 =
        2 * C50086 * C49912 + C50086 * (C49912 + C49939 * std::pow(C50086, 2));
    const double C50167 = C49874 * C50165;
    const double C50176 = 2 * C50165;
    const double C16638 =
        4 * ((-2 * C50086 * C49904) / C49882 + C50086 * C50219) +
        C50086 * (3 * C50219 +
                  C50086 * ((-2 * C50086 * C49925) / C49882 +
                            C50086 * ((-(C49961 * C50129) / C49783) / C49742 -
                                      C49947)));
    const double C49977 = C49871 * C49975;
    const double C50134 = C49874 * C49975;
    const double C50212 = C49975 * C50129;
    const double C6209 =
        3 * (C49912 + C49939 * C50129) +
        C50086 * (2 * C50086 * C49939 + C50086 * (C49939 + C49975 * C50129));
    const double C50200 = C49874 * C50197;
    const double C50221 = C50197 * C50129;
    const double C13787 =
        3 * (C50118 + C50165 * C50129) +
        C50086 * (2 * C50086 * C50165 + C50086 * (C50165 + C50197 * C50129));
    const double C50232 = C50086 * C50231;
    const double C49767 = C49766 / C49742;
    const double C2360 = C2176 * C266;
    const double C2354 = C2176 * C256;
    const double C2344 = C2176 * C267;
    const double C2338 = C2176 * C257;
    const double C2336 = C2176 * C268;
    const double C2330 = C2176 * C258;
    const double C2694 = C2176 * C519;
    const double C2688 = C2176 * C510;
    const double C2678 = C2176 * C518;
    const double C2672 = C2176 * C509;
    const double C2828 = C2176 * C615;
    const double C2822 = C2176 * C607;
    const double C3016 = C2176 * C741;
    const double C3010 = C2176 * C725;
    const double C3000 = C2176 * C730;
    const double C2994 = C2176 * C718;
    const double C3344 = C2176 * C980;
    const double C3338 = C2176 * C972;
    const double C3958 = C2176 * C731;
    const double C3952 = C2176 * C719;
    const double C5360 = C2176 * C390;
    const double C5354 = C2176 * C380;
    const double C5352 = C2176 * C379;
    const double C5346 = C2176 * C389;
    const double C5336 = C2176 * C393;
    const double C5330 = C2176 * C383;
    const double C5942 = C2176 * C851;
    const double C5936 = C2176 * C860;
    const double C5926 = C2176 * C861;
    const double C5920 = C2176 * C852;
    const double C6218 = C2176 * C1062;
    const double C6212 = C2176 * C1058;
    const double C2358 = C2177 * C265;
    const double C2352 = C2177 * C255;
    const double C2346 = C2177 * C266;
    const double C2340 = C2177 * C256;
    const double C2334 = C2177 * C267;
    const double C2328 = C2177 * C257;
    const double C2692 = C2177 * C520;
    const double C2686 = C2177 * C511;
    const double C2680 = C2177 * C519;
    const double C2674 = C2177 * C510;
    const double C2826 = C2177 * C614;
    const double C2820 = C2177 * C606;
    const double C3014 = C2177 * C740;
    const double C3008 = C2177 * C724;
    const double C3002 = C2177 * C731;
    const double C2996 = C2177 * C719;
    const double C3342 = C2177 * C979;
    const double C3336 = C2177 * C971;
    const double C3956 = C2177 * C732;
    const double C3950 = C2177 * C720;
    const double C5362 = C2177 * C391;
    const double C5356 = C2177 * C381;
    const double C5350 = C2177 * C380;
    const double C5344 = C2177 * C390;
    const double C5338 = C2177 * C389;
    const double C5332 = C2177 * C379;
    const double C5940 = C2177 * C852;
    const double C5934 = C2177 * C861;
    const double C5928 = C2177 * C862;
    const double C5922 = C2177 * C853;
    const double C6220 = C2177 * C1061;
    const double C6214 = C2177 * C1057;
    const double C25861 = C25666 * C520;
    const double C25857 = C25666 * C511;
    const double C25853 = C25666 * C266;
    const double C25849 = C25666 * C256;
    const double C25843 = C25666 * C519;
    const double C25839 = C25666 * C510;
    const double C25835 = C25666 * C267;
    const double C25831 = C25666 * C257;
    const double C25829 = C25666 * C518;
    const double C25825 = C25666 * C509;
    const double C25821 = C25666 * C268;
    const double C25817 = C25666 * C258;
    const double C26197 = C25666 * C614;
    const double C26193 = C25666 * C606;
    const double C26185 = C25666 * C615;
    const double C26181 = C25666 * C607;
    const double C26313 = C25666 * C2813;
    const double C26309 = C25666 * C2807;
    const double C26487 = C25666 * C2989;
    const double C26483 = C25666 * C2983;
    const double C26479 = C25666 * C741;
    const double C26475 = C25666 * C725;
    const double C26469 = C25666 * C730;
    const double C26465 = C25666 * C718;
    const double C26809 = C25666 * C3329;
    const double C26805 = C25666 * C3323;
    const double C26801 = C25666 * C980;
    const double C26797 = C25666 * C972;
    const double C27417 = C25666 * C740;
    const double C27413 = C25666 * C724;
    const double C27409 = C25666 * C731;
    const double C27405 = C25666 * C719;
    const double C28729 = C25666 * C732;
    const double C28725 = C25666 * C720;
    const double C28949 = C25666 * C390;
    const double C28945 = C25666 * C380;
    const double C28943 = C25666 * C379;
    const double C28939 = C25666 * C389;
    const double C28933 = C25666 * C393;
    const double C28929 = C25666 * C383;
    const double C29705 = C25666 * C851;
    const double C29701 = C25666 * C860;
    const double C29695 = C25666 * C979;
    const double C29691 = C25666 * C971;
    const double C29687 = C25666 * C861;
    const double C29683 = C25666 * C852;
    const double C29923 = C25666 * C3454;
    const double C29919 = C25666 * C3451;
    const double C30063 = C25666 * C1062;
    const double C30059 = C25666 * C1058;
    const double C38640 = C25666 * C862;
    const double C38636 = C25666 * C853;
    const double C39192 = C25666 * C1061;
    const double C39188 = C25666 * C1057;
    const double C39466 = C25666 * C6204;
    const double C39462 = C25666 * C6201;
    const double C19091 = C13480 + C13479;
    const double C19263 = C13665 + C13664;
    const double C19090 = C13500 + C13499;
    const double C19262 = C13661 + C13660;
    const double C19388 = C13800 + C13799;
    const double C21546 = C13799 + C13800;
    const double C21658 = C19266 + C19265;
    const double C21736 = C19401 + C19400;
    const double C49825 = C49823 / C49783;
    const double C14309 = C11817 * C1174;
    const double C14305 = C11815 * C1174;
    const double C14301 = C12902 * C1174;
    const double C14295 = C11183 * C1174;
    const double C14291 = C11181 * C1174;
    const double C14287 = C12899 * C1174;
    const double C15323 = C11403 * C1174;
    const double C15319 = C11401 * C1174;
    const double C15315 = C13492 * C1174;
    const double C19890 = C13485 * C1174;
    const double C20896 = C13679 * C1174;
    const double C20892 = C13797 * C1174;
    const double C22075 = C19106 * C1174;
    const double C22743 = C19397 * C1174;
    const double C11059 = C10625 * C8433;
    const double C11179 = C10625 * C8601;
    const double C11399 = C10625 * C8939;
    const double C13677 = C10625 * C9067;
    const double C8432 =
        4 * ((-2 * C50361) / C49783 - (C49874 * C50409) / C49783 -
             (C50362 * ce) / C49783) +
        C49874 *
            ((-3 * C50409) / C49783 +
             C49874 *
                 ((-2 * C50401) / C49783 -
                  (C49874 * (C49874 * (C49874 * C49871 * C49963 + C50048 * ce) +
                             C49946 + C49874 * C50048 * ce)) /
                      C49783 -
                  (C50403 * ce) / C49783) -
             (C50408 * ce) / C49783) -
        ((3 * C50362 + C49874 * C50408) * ce) / C49783;
    const double C8600 =
        C50086 *
        ((-3 * C50409) / C49783 +
         C49874 *
             ((-2 * C50401) / C49783 -
              (C49874 * (C49874 * (C49874 * C49871 * C49963 + C50048 * ce) +
                         C49946 + C49874 * C50048 * ce)) /
                  C49783 -
              (C50403 * ce) / C49783) -
         (C50408 * ce) / C49783);
    const double C8938 =
        (-2 * C50361) / C49783 - (C49874 * C50409) / C49783 -
        (C50362 * ce) / C49783 +
        ((-2 * C50401) / C49783 -
         (C49874 * (C49874 * (C49874 * C49871 * C49963 + C50048 * ce) + C49946 +
                    C49874 * C50048 * ce)) /
             C49783 -
         (C50403 * ce) / C49783) *
            C50129;
    const double C9066 =
        (-2 * C50086 * C50409) / C49783 -
        (C50086 * ((C49874 * (C49874 * C49871 * C49963 + C50048 * ce) + C49946 +
                    C49874 * C50048 * ce) *
                       C50129 +
                   C50409)) /
            C49783;
    const double C50041 = C50038 + C50039;
    const double C50096 = C50094 / C49882;
    const double C974 = (C49874 * C50036 + C50092 * C50129) / C49742;
    const double C3455 =
        (2 * C50086 * C50092 + C50086 * (C50092 + C49874 * C50057 * C50129)) /
        C49742;
    const double C8447 = C8439 + C8440;
    const double C10985 = C10979 + C10980;
    const double C26315 = C26307 + C26308;
    const double C8637 = C8621 + C8622;
    const double C11819 = C11811 + C11812;
    const double C26497 = C26481 + C26482;
    const double C8963 = C8951 + C8952;
    const double C13489 = C13473 + C13474;
    const double C26815 = C26803 + C26804;
    const double C11061 = C11057 + C11058;
    const double C11187 = C11177 + C11178;
    const double C11405 = C11397 + C11398;
    const double C50459 = C50457 / C49783;
    const double C2353 = C2172 * C261;
    const double C2343 = C2173 * C261;
    const double C7972 = C50617 * C261;
    const double C23027 = C50933 * C261;
    const double C23017 = C22847 * C261;
    const double C25848 = C50617 * C261;
    const double C5357 = C2172 * C387;
    const double C5349 = C2173 * C387;
    const double C15753 = C50617 * C387;
    const double C28948 = C50617 * C387;
    const double C32432 = C50933 * C387;
    const double C32424 = C22847 * C387;
    const double C2687 = C2172 * C516;
    const double C2677 = C2173 * C516;
    const double C7982 = C50891 * C516;
    const double C7966 = C50617 * C516;
    const double C10754 = C50612 * C516;
    const double C23361 = C50933 * C516;
    const double C23351 = C22847 * C516;
    const double C25858 = C25661 * C516;
    const double C25842 = C50617 * C516;
    const double C2819 = C2173 * C609;
    const double C8316 = C50617 * C609;
    const double C10758 = C50612 * C609;
    const double C23481 = C22847 * C609;
    const double C26192 = C50617 * C609;
    const double C2999 = C2173 * C728;
    const double C3951 = C2172 * C728;
    const double C9560 = C50617 * C728;
    const double C12718 = C50612 * C728;
    const double C23649 = C22847 * C728;
    const double C24577 = C50933 * C728;
    const double C27404 = C50617 * C728;
    const double C28726 = C25661 * C728;
    const double C41271 = C50891 * C728;
    const double C3007 = C2173 * C735;
    const double C9568 = C50617 * C735;
    const double C12722 = C50612 * C735;
    const double C23657 = C22847 * C735;
    const double C27412 = C50617 * C735;
    const double C5939 = C2173 * C858;
    const double C5923 = C2172 * C858;
    const double C15759 = C50891 * C858;
    const double C15739 = C50617 * C858;
    const double C18533 = C50612 * C858;
    const double C29686 = C50617 * C858;
    const double C33014 = C22847 * C858;
    const double C32998 = C50933 * C858;
    const double C38637 = C25661 * C858;
    const double C6217 = C2173 * C1064;
    const double C16333 = C50617 * C1064;
    const double C21172 = C50612 * C1064;
    const double C33280 = C22847 * C1064;
    const double C39191 = C50617 * C1064;
    const double C13495 = C13487 * C121;
    const double C19894 = C13487 * C1174;
    const double C19888 = C13487 * C1175;
    const double C20242 = C13487 * C253;
    const double C20236 = C13487 * C254;
    const double C19114 = C19108 * C121;
    const double C22073 = C19108 * C1175;
    const double C22305 = C19108 * C254;
    const double C49980 = C49956 + C49978;
    const double C50059 = C50045 + C50058;
    const double C50099 = C50018 + C50097;
    const double C8430 = (4 * (2 * C50101 + C49874 * C50106) +
                          C49874 * (3 * C50106 + C49874 * C50146)) /
                         C49742;
    const double C8598 = (C50086 * (3 * C50106 + C49874 * C50146)) / C49742;
    const double C8936 =
        (2 * C50101 + C49874 * C50106 + C50146 * C50129) / C49742;
    const double C11053 = (5 * (3 * C50115 + C49874 * C50163) +
                           C49874 * (4 * C50163 + C49874 * C50201)) /
                          C49742;
    const double C11161 = (C50086 * (4 * C50163 + C49874 * C50201)) / C49742;
    const double C11385 =
        (3 * C50115 + C49874 * C50163 + C50201 * C50129) / C49742;
    const double C2361 = C2171 * C274;
    const double C2347 = C2172 * C274;
    const double C2333 = C2173 * C274;
    const double C7978 = C50891 * C274;
    const double C7962 = C50617 * C274;
    const double C10752 = C50612 * C274;
    const double C23035 = C50949 * C274;
    const double C23021 = C50933 * C274;
    const double C23007 = C22847 * C274;
    const double C25854 = C25661 * C274;
    const double C25838 = C50617 * C274;
    const double C5361 = C2171 * C398;
    const double C5345 = C2172 * C398;
    const double C5341 = C2173 * C398;
    const double C12894 = C50612 * C398;
    const double C15755 = C50891 * C398;
    const double C15743 = C50617 * C398;
    const double C28950 = C25661 * C398;
    const double C28938 = C50617 * C398;
    const double C32436 = C50949 * C398;
    const double C32420 = C50933 * C398;
    const double C32416 = C22847 * C398;
    const double C2695 = C2171 * C525;
    const double C2681 = C2172 * C525;
    const double C7968 = C50891 * C525;
    const double C7952 = C50617 * C525;
    const double C10744 = C50612 * C525;
    const double C23369 = C50949 * C525;
    const double C23355 = C50933 * C525;
    const double C25844 = C25661 * C525;
    const double C25828 = C50617 * C525;
    const double C3003 = C2172 * C743;
    const double C3959 = C2171 * C743;
    const double C8612 = C50617 * C743;
    const double C9566 = C50891 * C743;
    const double C11806 = C50612 * C743;
    const double C23653 = C50933 * C743;
    const double C24585 = C50949 * C743;
    const double C26472 = C50617 * C743;
    const double C27410 = C25661 * C743;
    const double C5935 = C2172 * C867;
    const double C5927 = C2171 * C867;
    const double C13468 = C50612 * C867;
    const double C15737 = C50891 * C867;
    const double C15733 = C50617 * C867;
    const double C29700 = C50617 * C867;
    const double C29688 = C25661 * C867;
    const double C33010 = C50933 * C867;
    const double C33002 = C50949 * C867;
    const double C8446 = C50891 * C2816;
    const double C10978 = C50612 * C2816;
    const double C26314 = C25661 * C2816;
    const double C8628 = C50891 * C2992;
    const double C11176 = C50612 * C2992;
    const double C26488 = C25661 * C2992;
    const double C8958 = C50891 * C3332;
    const double C11396 = C50612 * C3332;
    const double C26810 = C25661 * C3332;
    const double C13674 = C50612 * C3460;
    const double C16521 = C50891 * C3460;
    const double C29924 = C25661 * C3460;
    const double C49942 = C49934 + C49941;
    const double C49959 = C49944 - C49952;
    const double C50107 = C50102 - C50105;
    const double C2827 = C2172 * C618;
    const double C8322 = C50891 * C618;
    const double C8312 = C50617 * C618;
    const double C10748 = C50612 * C618;
    const double C23489 = C50933 * C618;
    const double C26198 = C25661 * C618;
    const double C26188 = C50617 * C618;
    const double C3015 = C2172 * C748;
    const double C8618 = C50617 * C748;
    const double C9574 = C50891 * C748;
    const double C11810 = C50612 * C748;
    const double C23665 = C50933 * C748;
    const double C26478 = C50617 * C748;
    const double C27418 = C25661 * C748;
    const double C3343 = C2172 * C983;
    const double C8948 = C50617 * C983;
    const double C13472 = C50612 * C983;
    const double C17149 = C50891 * C983;
    const double C23981 = C50933 * C983;
    const double C26800 = C50617 * C983;
    const double C29696 = C25661 * C983;
    const double C6221 = C2172 * C1069;
    const double C16339 = C50617 * C1069;
    const double C16335 = C50891 * C1069;
    const double C19097 = C50612 * C1069;
    const double C30066 = C50617 * C1069;
    const double C33284 = C50933 * C1069;
    const double C39193 = C25661 * C1069;
    const double C50168 = C50166 + C50167;
    const double C50189 = C50176 - C50183;
    const double C21741 = C50612 * C16638;
    const double C49979 = C49970 + C49977;
    const double C50142 = C50134 - C50138;
    const double C50213 = C49939 + C50212;
    const double C16649 = C50617 * C6209;
    const double C21552 = C50612 * C6209;
    const double C39469 = C50617 * C6209;
    const double C50202 = C50199 + C50200;
    const double C50222 = C50165 + C50221;
    const double C19275 = C50612 * C13787;
    const double C50233 = C50228 + C50232;
    const double C49768 = C49767 - C49757;
    const double C2376 = C2354 + C2355;
    const double C2371 = C2344 + C2345;
    const double C2368 = C2338 + C2339;
    const double C2367 = C2336 + C2337;
    const double C2364 = C2330 + C2331;
    const double C2704 = C2688 + C2689;
    const double C2699 = C2678 + C2679;
    const double C2696 = C2672 + C2673;
    const double C2835 = C2828 + C2829;
    const double C2832 = C2822 + C2823;
    const double C3029 = C3016 + C3017;
    const double C3026 = C3010 + C3011;
    const double C3021 = C3000 + C3001;
    const double C3018 = C2994 + C2995;
    const double C3351 = C3344 + C3345;
    const double C3348 = C3338 + C3339;
    const double C3962 = C3952 + C3953;
    const double C5378 = C5354 + C5355;
    const double C5377 = C5352 + C5353;
    const double C5374 = C5346 + C5347;
    const double C5369 = C5336 + C5337;
    const double C5366 = C5330 + C5331;
    const double C5955 = C5942 + C5943;
    const double C5952 = C5936 + C5937;
    const double C5944 = C5920 + C5921;
    const double C6227 = C6218 + C6219;
    const double C6224 = C6212 + C6213;
    const double C2369 = C2340 + C2341;
    const double C2366 = C2334 + C2335;
    const double C2363 = C2328 + C2329;
    const double C2697 = C2674 + C2675;
    const double C2831 = C2820 + C2821;
    const double C3025 = C3008 + C3009;
    const double C3019 = C2996 + C2997;
    const double C3347 = C3336 + C3337;
    const double C5376 = C5350 + C5351;
    const double C5370 = C5338 + C5339;
    const double C5367 = C5332 + C5333;
    const double C5954 = C5940 + C5941;
    const double C6225 = C6214 + C6215;
    const double C25880 = C25849 + C25850;
    const double C25875 = C25839 + C25840;
    const double C25873 = C25835 + C25836;
    const double C25871 = C25831 + C25832;
    const double C25870 = C25829 + C25830;
    const double C25868 = C25825 + C25826;
    const double C25866 = C25821 + C25822;
    const double C25864 = C25817 + C25818;
    const double C26204 = C26193 + C26194;
    const double C26201 = C26185 + C26186;
    const double C26199 = C26181 + C26182;
    const double C26316 = C26309 + C26310;
    const double C26498 = C26483 + C26484;
    const double C26496 = C26479 + C26480;
    const double C26494 = C26475 + C26476;
    const double C26491 = C26469 + C26470;
    const double C26489 = C26465 + C26466;
    const double C26816 = C26805 + C26806;
    const double C26814 = C26801 + C26802;
    const double C26812 = C26797 + C26798;
    const double C27424 = C27413 + C27414;
    const double C27420 = C27405 + C27406;
    const double C28961 = C28945 + C28946;
    const double C28960 = C28943 + C28944;
    const double C28958 = C28939 + C28940;
    const double C28955 = C28933 + C28934;
    const double C28953 = C28929 + C28930;
    const double C29718 = C29705 + C29706;
    const double C29716 = C29701 + C29702;
    const double C29711 = C29691 + C29692;
    const double C29707 = C29683 + C29684;
    const double C29926 = C29919 + C29920;
    const double C30069 = C30063 + C30064;
    const double C30067 = C30059 + C30060;
    const double C39200 = C39188 + C39189;
    const double C39474 = C39466 + C39467;
    const double C39472 = C39462 + C39463;
    const double C19103 = C19091 * C50790;
    const double C48015 = C19091 * C50790;
    const double C19277 = C19263 - C13663;
    const double C19102 = C19090 * C50919;
    const double C21545 = C19090 * C50776;
    const double C48014 = C19090 * C22848;
    const double C19276 = C19262 - C13659;
    const double C19396 = C19388 * C50919;
    const double C21737 = C19388 * C50776;
    const double C48268 = C19388 * C22848;
    const double C21553 = C21546 * C50776;
    const double C21663 = C21658 - C19264;
    const double C21742 = C21736 * C50776;
    const double C49827 = C49825 - C49820;
    const double C20889 = C15319 + C15318;
    const double C20888 = C15315 + C15314;
    const double C22740 = C20892 + C20891;
    const double C50042 = C50041 + C50040;
    const double C3335 = C2173 * C974;
    const double C17147 = C50617 * C974;
    const double C18381 = C50612 * C974;
    const double C23973 = C22847 * C974;
    const double C29694 = C50617 * C974;
    const double C14307 = C11819 * C1175;
    const double C14659 = C11819 * C254;
    const double C13497 = C13489 * C121;
    const double C19892 = C13489 * C1175;
    const double C20240 = C13489 * C254;
    const double C13317 = C11187 * C508;
    const double C15165 = C11187 * C1281;
    const double C13667 = C11405 * C254;
    const double C15321 = C11405 * C1175;
    const double C18942 = C11405 * C508;
    const double C20740 = C11405 * C1281;
    const double C50460 = C50445 - C50459;
    const double C2375 = C2352 + C2353;
    const double C2370 = C2342 + C2343;
    const double C8003 = C7971 + C7972;
    const double C23044 = C23016 + C23017;
    const double C25879 = C25847 + C25848;
    const double C5379 = C5356 + C5357;
    const double C5375 = C5348 + C5349;
    const double C15783 = C15752 + C15753;
    const double C28962 = C28947 + C28948;
    const double C32450 = C32423 + C32424;
    const double C2703 = C2686 + C2687;
    const double C2698 = C2676 + C2677;
    const double C8000 = C7965 + C7966;
    const double C10775 = C10753 + C10754;
    const double C23372 = C23350 + C23351;
    const double C25884 = C25857 + C25858;
    const double C25876 = C25841 + C25842;
    const double C2830 = C2818 + C2819;
    const double C8327 = C8315 + C8316;
    const double C10777 = C10757 + C10758;
    const double C23492 = C23480 + C23481;
    const double C26203 = C26191 + C26192;
    const double C3020 = C2998 + C2999;
    const double C3961 = C3950 + C3951;
    const double C9575 = C9559 + C9560;
    const double C12725 = C12717 + C12718;
    const double C23670 = C23648 + C23649;
    const double C27419 = C27403 + C27404;
    const double C28732 = C28725 + C28726;
    const double C3024 = C3006 + C3007;
    const double C9579 = C9567 + C9568;
    const double C12727 = C12721 + C12722;
    const double C23674 = C23656 + C23657;
    const double C27423 = C27411 + C27412;
    const double C5953 = C5938 + C5939;
    const double C5945 = C5922 + C5923;
    const double C15776 = C15738 + C15739;
    const double C18538 = C18532 + C18533;
    const double C29708 = C29685 + C29686;
    const double C33028 = C33013 + C33014;
    const double C38644 = C38636 + C38637;
    const double C6226 = C6216 + C6217;
    const double C16351 = C16332 + C16333;
    const double C21175 = C21171 + C21172;
    const double C33289 = C33279 + C33280;
    const double C39201 = C39190 + C39191;
    const double C141 = 5 * ((-3 * C49909) / C49783 + C49871 * C49940) +
                        C49871 * (4 * C49940 + C49871 * C49980);
    const double C272 = C49874 * (4 * C49940 + C49871 * C49980) -
                        ((4 * C50253 + C49871 * C50259) * ce) / C49783;
    const double C395 = C50086 * (4 * C49940 + C49871 * C49980);
    const double C523 = (-3 * C49909) / C49783 + C49871 * C49940 +
                        C49874 * (C49874 * C49980 - (C50259 * ce) / C49783) -
                        (C49874 * C50259 * ce) / C49783;
    const double C864 =
        (-3 * C49909) / C49783 + C49871 * C49940 + C49980 * C50129;
    const double C1414 = C50086 * (C49874 * C49980 - (C50259 * ce) / C49783);
    const double C50060 = C50059 + C50049;
    const double C2808 = (3 * (C50036 + C50018 * C50095) +
                          C49874 * (2 * C50092 + C49874 * C50099)) /
                         C49742;
    const double C2984 = (C50086 * (2 * C50092 + C49874 * C50099)) / C49742;
    const double C3324 = (C50036 + C50018 * C50095 + C50099 * C50129) / C49742;
    const double C2379 = C2360 + C2361;
    const double C2372 = C2346 + C2347;
    const double C2365 = C2332 + C2333;
    const double C7998 = C7961 + C7962;
    const double C10774 = C10751 + C10752;
    const double C23039 = C23006 + C23007;
    const double C25882 = C25853 + C25854;
    const double C25874 = C25837 + C25838;
    const double C5381 = C5360 + C5361;
    const double C5373 = C5344 + C5345;
    const double C5371 = C5340 + C5341;
    const double C12904 = C12893 + C12894;
    const double C15778 = C15742 + C15743;
    const double C28963 = C28949 + C28950;
    const double C28957 = C28937 + C28938;
    const double C32446 = C32415 + C32416;
    const double C2707 = C2694 + C2695;
    const double C2700 = C2680 + C2681;
    const double C7993 = C7951 + C7952;
    const double C10770 = C10743 + C10744;
    const double C25877 = C25843 + C25844;
    const double C25869 = C25827 + C25828;
    const double C3022 = C3002 + C3003;
    const double C3965 = C3958 + C3959;
    const double C8632 = C8611 + C8612;
    const double C11816 = C11805 + C11806;
    const double C26492 = C26471 + C26472;
    const double C27422 = C27409 + C27410;
    const double C5951 = C5934 + C5935;
    const double C5947 = C5926 + C5927;
    const double C13486 = C13467 + C13468;
    const double C15773 = C15732 + C15733;
    const double C29715 = C29699 + C29700;
    const double C29709 = C29687 + C29688;
    const double C10984 = C10977 + C10978;
    const double C26318 = C26313 + C26314;
    const double C11186 = C11175 + C11176;
    const double C26500 = C26487 + C26488;
    const double C11404 = C11395 + C11396;
    const double C26818 = C26809 + C26810;
    const double C13680 = C13673 + C13674;
    const double C29928 = C29923 + C29924;
    const double C148 =
        4 * (2 * C49912 - (ae * C49909) / C49882 + C49871 * C49942) +
        (((-3 * C49909) / C49783 + C49871 * C49940) * ae) / C49742 +
        C49871 *
            (3 * C49942 + (C49940 * ae) / C49742 +
             C49871 * (2 * C49939 - (ae * C49933) / C49882 +
                       C49871 * ((-(ae * C49871 * C49927) / C49783) / C49742 -
                                 C49925 / C49882 +
                                 C49871 * ((-(C49871 * std::pow(C49878, 7) *
                                              bs[7] * C49887) /
                                            C49783) /
                                               C49742 -
                                           (ae * C49927) / C49882))));
    const double C273 =
        C49874 * (2 * C49912 - (ae * C49909) / C49882 + C49871 * C49942) -
        ((2 * (C49871 * C49988 + C49985 * ae) +
          C49871 * (C49988 +
                    C49871 * (C49871 * C49897 * C49898 * C49984 + C49986 * ae) +
                    C49871 * C49986 * ae) +
          (C49985 + C49986 * C49900) * ae) *
         ce) /
            C49882;
    const double C399 =
        (zP - zQ) * (2 * C49912 - (ae * C49909) / C49882 + C49871 * C49942);
    const double C526 = (-(ae * C49896) / C49783) / C49742 - C49893 / C49882 +
                        C49871 * C49912 - (C49874 * C50036 * ce) / C49882 +
                        C49874 * (C49874 * C49942 - (C50036 * ce) / C49882);
    const double C744 = (zP - zQ) * (C49874 * C49942 - (C50036 * ce) / C49882);
    const double C868 = (-(ae * C49896) / C49783) / C49742 - C49893 / C49882 +
                        C49871 * C49912 + C49942 * std::pow(zP - zQ, 2);
    const double C2815 =
        3 * (C49912 - (C50101 * ce) / C49882 + C49874 * C50107) -
        ((2 * C50101 + C49874 * C50106) * ce) / C49882 +
        C49874 *
            (2 * C50107 - (C50106 * ce) / C49882 +
             C49874 * (C49939 - (C49874 * C50013 * ce) / C49882 +
                       C49874 * (C49874 * C49975 - (C50013 * ce) / C49882)));
    const double C2991 =
        C50086 *
        (2 * C50107 - (C50106 * ce) / C49882 +
         C49874 * (C49939 - (C49874 * C50013 * ce) / C49882 +
                   C49874 * (C49874 * C49975 - (C50013 * ce) / C49882)));
    const double C3331 = C49912 - (C50101 * ce) / C49882 + C49874 * C50107 +
                         (C49939 - (C49874 * C50013 * ce) / C49882 +
                          C49874 * (C49874 * C49975 - (C50013 * ce) / C49882)) *
                             std::pow(C50086, 2);
    const double C3459 =
        2 * C50086 * C50107 +
        C50086 * (C50107 + (C49874 * C49975 - (C50013 * ce) / C49882) *
                               std::pow(C50086, 2));
    const double C2834 = C2826 + C2827;
    const double C8326 = C8311 + C8312;
    const double C10772 = C10747 + C10748;
    const double C26206 = C26197 + C26198;
    const double C26202 = C26187 + C26188;
    const double C3028 = C3014 + C3015;
    const double C8635 = C8617 + C8618;
    const double C11818 = C11809 + C11810;
    const double C26495 = C26477 + C26478;
    const double C27426 = C27417 + C27418;
    const double C3350 = C3342 + C3343;
    const double C8961 = C8947 + C8948;
    const double C13488 = C13471 + C13472;
    const double C26813 = C26799 + C26800;
    const double C29713 = C29695 + C29696;
    const double C6228 = C6220 + C6221;
    const double C16354 = C16338 + C16339;
    const double C19107 = C19096 + C19097;
    const double C30070 = C30065 + C30066;
    const double C39202 = C39192 + C39193;
    const double C8435 =
        4 * (2 * C50118 - (C50115 * ce) / C49882 + C49874 * C50168) -
        ((3 * C50115 + C49874 * C50163) * ce) / C49882 +
        C49874 *
            (3 * C50168 - (C50163 * ce) / C49882 +
             C49874 *
                 (2 * C50165 - (C50157 * ce) / C49882 +
                  C49874 *
                      ((-(C49874 * C50007 * ce) / C49783) / C49742 - C49947 +
                       C49874 * ((-(C49874 * C49961) / C49783) / C49742 -
                                 (C50007 * ce) / C49882))));
    const double C8603 =
        C50086 *
        (3 * C50168 - (C50163 * ce) / C49882 +
         C49874 *
             (2 * C50165 - (C50157 * ce) / C49882 +
              C49874 * ((-(C49874 * C50007 * ce) / C49783) / C49742 - C49947 +
                        C49874 * ((-(C49874 * C49961) / C49783) / C49742 -
                                  (C50007 * ce) / C49882))));
    const double C8941 =
        2 * C50118 - (C50115 * ce) / C49882 + C49874 * C50168 +
        (2 * C50165 - (C50157 * ce) / C49882 +
         C49874 * ((-(C49874 * C50007 * ce) / C49783) / C49742 - C49947 +
                   C49874 * ((-(C49874 * C49961) / C49783) / C49742 -
                             (C50007 * ce) / C49882))) *
            C50129;
    const double C9071 =
        2 * C50086 * C50168 +
        C50086 *
            (C50168 + ((-(C49874 * C50007 * ce) / C49783) / C49742 - C49947 +
                       C49874 * ((-(C49874 * C49961) / C49783) / C49742 -
                                 (C50007 * ce) / C49882)) *
                          C50129);
    const double C21744 = C21740 + C21741;
    const double C49981 = C49871 * C49979;
    const double C50093 = C49874 * C49979;
    const double C617 =
        2 * (C49874 * C49942 - (C50036 * ce) / C49882) -
        ((C50036 + C50018 * std::pow(C49874, 2)) * ce) / C49882 +
        C49874 * (C49942 - (C49874 * C50018 * ce) / C49882 +
                  C49874 * (C49874 * C49979 - (C50018 * ce) / C49882));
    const double C747 =
        (zP - zQ) * (C49942 - (C49874 * C50018 * ce) / C49882 +
                     C49874 * (C49874 * C49979 - (C50018 * ce) / C49882));
    const double C982 =
        C49874 * C49942 - (C50036 * ce) / C49882 +
        (C49874 * C49979 - (C50018 * ce) / C49882) * std::pow(zP - zQ, 2);
    const double C1068 =
        2 * C50086 * C49942 + C50086 * (C49942 + C49979 * std::pow(C50086, 2));
    const double C6208 =
        3 * (C49942 + C49979 * C50129) +
        C50086 *
            (2 * C50086 * C49979 +
             C50086 *
                 (C49979 +
                  ((-(ae * C49871 * C49963) / C49783) / C49742 -
                   C49961 / C49882 +
                   C49871 * ((-(C49871 * std::pow(C49876, 8) * bs[8] * C49887) /
                              C49783) /
                                 C49742 -
                             (ae * C49963) / C49882)) *
                      C50129));
    const double C50145 = C49874 * C50142;
    const double C16510 =
        3 * (C50107 + C50142 * C50129) +
        C50086 *
            (2 * C50086 * C50142 +
             C50086 *
                 (C50142 +
                  (C49874 * ((-(C49871 * std::pow(C49876, 8) * bs[8] * C49887) /
                              C49783) /
                                 C49742 -
                             (ae * C49963) / C49882) -
                   (C50054 * ce) / C49882) *
                      C50129));
    const double C16637 =
        4 * (2 * C50086 * C49939 + C50086 * C50213) +
        C50086 *
            (3 * C50213 +
             C50086 * (2 * C50086 * C49975 +
                       C50086 * (C49975 + ((-(C49871 * std::pow(C49876, 8) *
                                              bs[8] * C49887) /
                                            C49783) /
                                               C49742 -
                                           (ae * C49963) / C49882) *
                                              C50129)));
    const double C16655 = C16648 + C16649;
    const double C21556 = C21551 + C21552;
    const double C39475 = C39468 + C39469;
    const double C50203 = C49874 * C50202;
    const double C13786 =
        3 * (C50168 + C50202 * C50129) +
        C50086 *
            (2 * C50086 * C50202 +
             C50086 *
                 (C50202 +
                  ((-(C49874 * C50051 * ce) / C49783) / C49742 -
                   C49961 / C49882 +
                   C49874 * ((-(C49874 * std::pow(C49876, 8) * bs[8] * C49887) /
                              C49783) /
                                 C49742 -
                             (C50051 * ce) / C49882)) *
                      C50129));
    const double C19385 =
        4 * (2 * C50086 * C50165 + C50086 * C50222) +
        C50086 *
            (3 * C50222 +
             C50086 * (2 * C50086 * C50197 +
                       C50086 * (C50197 + ((-(C49874 * std::pow(C49876, 8) *
                                              bs[8] * C49887) /
                                            C49783) /
                                               C49742 -
                                           (C50051 * ce) / C49882) *
                                              C50129)));
    const double C19279 = C19274 + C19275;
    const double C21734 =
        5 * (3 * C50219 + C50086 * C50233) +
        C50086 * (4 * C50233 +
                  C50086 * (3 * C50231 +
                            C50086 * ((-2 * C50086 * C49961) / C49882 +
                                      C50086 * ((-(std::pow(C49876, 8) * bs[8] *
                                                   C49887 * C50129) /
                                                 C49783) /
                                                    C49742 -
                                                C49961 / C49882))));
    const double C7985 = C49768 * C520;
    const double C7981 = C49768 * C511;
    const double C7977 = C49768 * C266;
    const double C7973 = C49768 * C256;
    const double C7967 = C49768 * C519;
    const double C7963 = C49768 * C510;
    const double C7959 = C49768 * C267;
    const double C7955 = C49768 * C257;
    const double C7953 = C49768 * C518;
    const double C7949 = C49768 * C509;
    const double C7945 = C49768 * C268;
    const double C7941 = C49768 * C258;
    const double C8321 = C49768 * C614;
    const double C8317 = C49768 * C606;
    const double C8309 = C49768 * C615;
    const double C8305 = C49768 * C607;
    const double C8445 = C49768 * C2813;
    const double C8441 = C49768 * C2807;
    const double C8627 = C49768 * C2989;
    const double C8623 = C49768 * C2983;
    const double C8619 = C49768 * C741;
    const double C8615 = C49768 * C725;
    const double C8609 = C49768 * C730;
    const double C8605 = C49768 * C718;
    const double C8957 = C49768 * C3329;
    const double C8953 = C49768 * C3323;
    const double C8949 = C49768 * C980;
    const double C8945 = C49768 * C972;
    const double C9573 = C49768 * C740;
    const double C9569 = C49768 * C724;
    const double C9565 = C49768 * C731;
    const double C9561 = C49768 * C719;
    const double C15762 = C49768 * C862;
    const double C15758 = C49768 * C853;
    const double C15754 = C49768 * C390;
    const double C15750 = C49768 * C380;
    const double C15748 = C49768 * C379;
    const double C15744 = C49768 * C389;
    const double C15740 = C49768 * C852;
    const double C15736 = C49768 * C861;
    const double C15730 = C49768 * C860;
    const double C15726 = C49768 * C851;
    const double C15722 = C49768 * C393;
    const double C15718 = C49768 * C383;
    const double C16344 = C49768 * C1058;
    const double C16340 = C49768 * C1062;
    const double C16334 = C49768 * C1061;
    const double C16330 = C49768 * C1057;
    const double C16520 = C49768 * C3454;
    const double C16516 = C49768 * C3451;
    const double C16646 = C49768 * C6204;
    const double C16642 = C49768 * C6201;
    const double C17148 = C49768 * C979;
    const double C17144 = C49768 * C971;
    const double C41274 = C49768 * C732;
    const double C41270 = C49768 * C720;
    const double C117 =
        ((((0 - (C49740 * C49741) / C49742) * ae) / C49742 - (0 * be) / C49751 +
          C49743 / C49742) /
             C49747 -
         ((C49740 * C49764 + 0) * be) / C49742) /
            C49747 -
        ((C49740 * (C49764 / C49747 -
                    ((C49740 * C49768 + C50891) * be) / C49742 + C49761) +
          C50949) *
         be) /
            C49742 +
        C49768 / C49747 - ((C49740 * C49761 + C50617) * be) / C49742;
    const double C118 =
        (C49764 / C49747 - ((C49740 * C49768 + C50891) * be) / C49742 +
         C49761) /
            C49747 -
        ((C49740 *
              (C49768 / C49747 - ((C49740 * C49761 + C50617) * be) / C49742) +
          C50933) *
         be) /
            C49742 +
        2 * (C49761 / C49747 - (0 * be) / C49742);
    const double C119 =
        (C49768 / C49747 - ((C49740 * C49761 + C50617) * be) / C49742) /
            C49747 -
        ((C49740 * (C49761 / C49747 - (0 * be) / C49742) + C22847) * be) /
            C49742;
    const double C22850 =
        C49764 / C49747 - ((C49740 * C49768 + C50891) * be) / C49742 + C49761;
    const double C22851 =
        C49768 / C49747 - ((C49740 * C49761 + C50617) * be) / C49742;
    const double C26179 = C25868 + C25867;
    const double C26305 = C26200 + C26199;
    const double C26501 = C26493 + C26494;
    const double C29485 = C26494 + C26493;
    const double C29487 = C26489 + C26490;
    const double C29483 = C26490 + C26489;
    const double C29916 = C26811 + C26812;
    const double C29913 = C26812 + C26811;
    const double C39184 = C29718 + C29717;
    const double C39461 = C30068 + C30067;
    const double C19110 = C19102 + C19103;
    const double C48018 = C48014 + C48015;
    const double C19280 = C19276 - C13662;
    const double C600 =
        ((((0 - (C49782 * C49807) / C49783) * ce) / C49783 - (0 * de) / C49812 +
          C49792 / C49783) /
             C49791 -
         ((C49782 * C49826 + 0) * de) / C49783) /
            C49791 -
        ((C49782 * (C49826 / C49791 -
                    ((C49782 * C49827 + C50905) * de) / C49783 + C49821) +
          C50951) *
         de) /
            C49783 +
        C49827 / C49791 - ((C49782 * C49821 + C50688) * de) / C49783;
    const double C601 =
        (C49826 / C49791 - ((C49782 * C49827 + C50905) * de) / C49783 +
         C49821) /
            C49791 -
        ((C49782 *
              (C49827 / C49791 - ((C49782 * C49821 + C50688) * de) / C49783) +
          C50939) *
         de) /
            C49783 +
        2 * (C49821 / C49791 - (0 * de) / C49783);
    const double C602 =
        (C49827 / C49791 - ((C49782 * C49821 + C50688) * de) / C49783) /
            C49791 -
        ((C49782 * (C49821 / C49791 - (0 * de) / C49783) + C1276) * de) /
            C49783;
    const double C1279 =
        C49826 / C49791 - ((C49782 * C49827 + C50905) * de) / C49783 + C49821;
    const double C1280 =
        C49827 / C49791 - ((C49782 * C49821 + C50688) * de) / C49783;
    const double C20899 = C20889 - C15317;
    const double C20898 = C20888 - C15313;
    const double C22745 = C22740 - C20890;
    const double C139 = (4 * (2 * C50031 + C49871 * C50036 + C50249 * ae) +
                         C49871 * (3 * C50036 + C49871 * C50042 + C50253 * ae) +
                         (3 * C50249 + C49871 * C50253) * ae) /
                        C49742;
    const double C269 =
        (C49874 * (3 * C50036 + C49871 * C50042 + C50253 * ae)) / C49742;
    const double C388 =
        (C50086 * (3 * C50036 + C49871 * C50042 + C50253 * ae)) / C49742;
    const double C517 =
        (2 * C50031 + C49871 * C50036 + C50249 * ae + C50042 * C50095) / C49742;
    const double C729 = (C50086 * C49874 * C50042) / C49742;
    const double C859 =
        (2 * C50031 + C49871 * C50036 + C50249 * ae + C50042 * C50129) / C49742;
    const double C3346 = C3334 + C3335;
    const double C17153 = C17146 + C17147;
    const double C18384 = C18380 + C18381;
    const double C23984 = C23972 + C23973;
    const double C29712 = C29693 + C29694;
    const double C50461 = C50460 - C50448;
    const double C26189 = C25876 + C25875;
    const double C12895 = C12725 * C121;
    const double C30720 = C27419 + C27420;
    const double C30717 = C27420 + C27419;
    const double C12897 = C12727 * C121;
    const double C18540 = C18538 * C121;
    const double C39187 = C29708 + C29707;
    const double C21177 = C21175 * C121;
    const double C50061 = C49871 * C50060;
    const double C608 =
        (2 * C49874 * C50042 + C49874 * (C50042 + C50060 * C50095)) / C49742;
    const double C734 = (C50086 * (C50042 + C50060 * C50095)) / C49742;
    const double C973 = (C49874 * C50042 + C49874 * C50060 * C50129) / C49742;
    const double C1063 =
        (2 * C50086 * C50042 + C50086 * (C50042 + C50060 * C50129)) / C49742;
    const double C12910 = C12904 * C50672;
    const double C26180 = C25870 + C25869;
    const double C12885 = C11816 * C50672;
    const double C14304 = C11816 * C1169;
    const double C14302 = C11816 * C50688;
    const double C14656 = C11816 * C50905;
    const double C14654 = C11816 * C50688;
    const double C29488 = C26491 + C26492;
    const double C29484 = C26492 + C26491;
    const double C13494 = C13486 * C50672;
    const double C19889 = C13486 * C1169;
    const double C20237 = C13486 * C50905;
    const double C39185 = C29716 + C29715;
    const double C13316 = C11186 * C502;
    const double C13312 = C11186 * C503;
    const double C13658 = C11186 * C50688;
    const double C14298 = C11186 * C50688;
    const double C15164 = C11186 * C50939;
    const double C15160 = C11186 * C1276;
    const double C13477 = C11404 * C50672;
    const double C13668 = C11404 * C50905;
    const double C13666 = C11404 * C50688;
    const double C15322 = C11404 * C1169;
    const double C15320 = C11404 * C50688;
    const double C18941 = C11404 * C502;
    const double C18937 = C11404 * C503;
    const double C20739 = C11404 * C50939;
    const double C20735 = C11404 * C1276;
    const double C13794 = C13680 * C50672;
    const double C19269 = C13680 * C50905;
    const double C19267 = C13680 * C50688;
    const double C20895 = C13680 * C1169;
    const double C20893 = C13680 * C50688;
    const double C21444 = C13680 * C502;
    const double C22638 = C13680 * C50939;
    const double C2359 = C2172 * C273;
    const double C2349 = C2173 * C273;
    const double C7976 = C50617 * C273;
    const double C23033 = C50933 * C273;
    const double C23023 = C22847 * C273;
    const double C25852 = C50617 * C273;
    const double C5363 = C2172 * C399;
    const double C5343 = C2173 * C399;
    const double C15757 = C50617 * C399;
    const double C28952 = C50617 * C399;
    const double C32438 = C50933 * C399;
    const double C32418 = C22847 * C399;
    const double C2693 = C2172 * C526;
    const double C2683 = C2173 * C526;
    const double C7986 = C50891 * C526;
    const double C7970 = C50617 * C526;
    const double C10756 = C50612 * C526;
    const double C23367 = C50933 * C526;
    const double C23357 = C22847 * C526;
    const double C25862 = C25661 * C526;
    const double C25846 = C50617 * C526;
    const double C3005 = C2173 * C744;
    const double C3957 = C2172 * C744;
    const double C9564 = C50617 * C744;
    const double C12720 = C50612 * C744;
    const double C23655 = C22847 * C744;
    const double C24583 = C50933 * C744;
    const double C27408 = C50617 * C744;
    const double C28730 = C25661 * C744;
    const double C41275 = C50891 * C744;
    const double C5933 = C2173 * C868;
    const double C5929 = C2172 * C868;
    const double C15763 = C50891 * C868;
    const double C15735 = C50617 * C868;
    const double C18535 = C50612 * C868;
    const double C29690 = C50617 * C868;
    const double C33008 = C22847 * C868;
    const double C33004 = C50933 * C868;
    const double C38641 = C25661 * C868;
    const double C8444 = C50617 * C2815;
    const double C10982 = C50612 * C2815;
    const double C26312 = C50617 * C2815;
    const double C8626 = C50617 * C2991;
    const double C11814 = C50612 * C2991;
    const double C26486 = C50617 * C2991;
    const double C8956 = C50617 * C3331;
    const double C13476 = C50612 * C3331;
    const double C26808 = C50617 * C3331;
    const double C16523 = C50617 * C3459;
    const double C19101 = C50612 * C3459;
    const double C29922 = C50617 * C3459;
    const double C26306 = C26202 + C26201;
    const double C12883 = C11818 * C50672;
    const double C14308 = C11818 * C1169;
    const double C14306 = C11818 * C50688;
    const double C14660 = C11818 * C50905;
    const double C14658 = C11818 * C50688;
    const double C26502 = C26495 + C26496;
    const double C29486 = C26496 + C26495;
    const double C13496 = C13488 * C50672;
    const double C19893 = C13488 * C1169;
    const double C19891 = C13488 * C50688;
    const double C20241 = C13488 * C50905;
    const double C20239 = C13488 * C50688;
    const double C29915 = C26813 + C26814;
    const double C29914 = C26814 + C26813;
    const double C19113 = C19107 * C50672;
    const double C22074 = C19107 * C1169;
    const double C22306 = C19107 * C50905;
    const double C39460 = C30070 + C30069;
    const double C11060 = C50612 * C8435;
    const double C11180 = C50612 * C8603;
    const double C11400 = C50612 * C8941;
    const double C13678 = C50612 * C9071;
    const double C21746 = C21744 * C50672;
    const double C49982 = C49959 + C49981;
    const double C50098 = C50093 - C50096;
    const double C2825 = C2173 * C617;
    const double C8320 = C50617 * C617;
    const double C10760 = C50612 * C617;
    const double C23487 = C22847 * C617;
    const double C26196 = C50617 * C617;
    const double C3013 = C2173 * C747;
    const double C9572 = C50617 * C747;
    const double C12724 = C50612 * C747;
    const double C23663 = C22847 * C747;
    const double C27416 = C50617 * C747;
    const double C3341 = C2173 * C982;
    const double C17151 = C50617 * C982;
    const double C18383 = C50612 * C982;
    const double C23979 = C22847 * C982;
    const double C29698 = C50617 * C982;
    const double C6223 = C2173 * C1068;
    const double C16337 = C50617 * C1068;
    const double C21174 = C50612 * C1068;
    const double C33286 = C22847 * C1068;
    const double C39195 = C50617 * C1068;
    const double C50147 = C50144 + C50145;
    const double C21558 = C21556 * C50672;
    const double C50204 = C50189 + C50203;
    const double C19394 = C19279 * C50672;
    const double C21662 = C19279 * C50688;
    const double C22744 = C19279 * C50688;
    const double C8008 = C7981 + C7982;
    const double C8006 = C7977 + C7978;
    const double C8004 = C7973 + C7974;
    const double C8001 = C7967 + C7968;
    const double C7999 = C7963 + C7964;
    const double C7997 = C7959 + C7960;
    const double C7995 = C7955 + C7956;
    const double C7994 = C7953 + C7954;
    const double C7992 = C7949 + C7950;
    const double C7990 = C7945 + C7946;
    const double C7988 = C7941 + C7942;
    const double C8330 = C8321 + C8322;
    const double C8328 = C8317 + C8318;
    const double C8325 = C8309 + C8310;
    const double C8323 = C8305 + C8306;
    const double C8450 = C8445 + C8446;
    const double C8448 = C8441 + C8442;
    const double C8640 = C8627 + C8628;
    const double C8638 = C8623 + C8624;
    const double C8636 = C8619 + C8620;
    const double C8634 = C8615 + C8616;
    const double C8631 = C8609 + C8610;
    const double C8629 = C8605 + C8606;
    const double C8966 = C8957 + C8958;
    const double C8964 = C8953 + C8954;
    const double C8962 = C8949 + C8950;
    const double C8960 = C8945 + C8946;
    const double C9582 = C9573 + C9574;
    const double C9580 = C9569 + C9570;
    const double C9578 = C9565 + C9566;
    const double C9576 = C9561 + C9562;
    const double C15786 = C15758 + C15759;
    const double C15784 = C15754 + C15755;
    const double C15782 = C15750 + C15751;
    const double C15781 = C15748 + C15749;
    const double C15779 = C15744 + C15745;
    const double C15777 = C15740 + C15741;
    const double C15775 = C15736 + C15737;
    const double C15772 = C15730 + C15731;
    const double C15770 = C15726 + C15727;
    const double C15768 = C15722 + C15723;
    const double C15766 = C15718 + C15719;
    const double C16357 = C16344 + C16345;
    const double C16355 = C16340 + C16341;
    const double C16352 = C16334 + C16335;
    const double C16350 = C16330 + C16331;
    const double C16529 = C16520 + C16521;
    const double C16527 = C16516 + C16517;
    const double C16654 = C16646 + C16647;
    const double C16652 = C16642 + C16643;
    const double C17154 = C17148 + C17149;
    const double C17152 = C17144 + C17145;
    const double C41277 = C41270 + C41271;
    const double C23034 = C22850 * C266;
    const double C23028 = C22850 * C256;
    const double C23018 = C22850 * C267;
    const double C23012 = C22850 * C257;
    const double C23010 = C22850 * C268;
    const double C23004 = C22850 * C258;
    const double C23368 = C22850 * C519;
    const double C23362 = C22850 * C510;
    const double C23352 = C22850 * C518;
    const double C23346 = C22850 * C509;
    const double C23490 = C22850 * C615;
    const double C23484 = C22850 * C607;
    const double C23666 = C22850 * C741;
    const double C23660 = C22850 * C725;
    const double C23650 = C22850 * C730;
    const double C23644 = C22850 * C718;
    const double C23982 = C22850 * C980;
    const double C23976 = C22850 * C972;
    const double C24584 = C22850 * C731;
    const double C24578 = C22850 * C719;
    const double C32435 = C22850 * C390;
    const double C32429 = C22850 * C380;
    const double C32427 = C22850 * C379;
    const double C32421 = C22850 * C389;
    const double C32411 = C22850 * C393;
    const double C32405 = C22850 * C383;
    const double C33017 = C22850 * C851;
    const double C33011 = C22850 * C860;
    const double C33001 = C22850 * C861;
    const double C32995 = C22850 * C852;
    const double C33281 = C22850 * C1062;
    const double C33275 = C22850 * C1058;
    const double C23032 = C22851 * C265;
    const double C23026 = C22851 * C255;
    const double C23020 = C22851 * C266;
    const double C23014 = C22851 * C256;
    const double C23008 = C22851 * C267;
    const double C23002 = C22851 * C257;
    const double C23366 = C22851 * C520;
    const double C23360 = C22851 * C511;
    const double C23354 = C22851 * C519;
    const double C23348 = C22851 * C510;
    const double C23488 = C22851 * C614;
    const double C23482 = C22851 * C606;
    const double C23664 = C22851 * C740;
    const double C23658 = C22851 * C724;
    const double C23652 = C22851 * C731;
    const double C23646 = C22851 * C719;
    const double C23980 = C22851 * C979;
    const double C23974 = C22851 * C971;
    const double C24582 = C22851 * C732;
    const double C24576 = C22851 * C720;
    const double C32437 = C22851 * C391;
    const double C32431 = C22851 * C381;
    const double C32425 = C22851 * C380;
    const double C32419 = C22851 * C390;
    const double C32413 = C22851 * C389;
    const double C32407 = C22851 * C379;
    const double C33015 = C22851 * C852;
    const double C33009 = C22851 * C861;
    const double C33003 = C22851 * C862;
    const double C32997 = C22851 * C853;
    const double C33283 = C22851 * C1061;
    const double C33277 = C22851 * C1057;
    const double C39356 = C29916 * C254;
    const double C40938 = C29916 * C1175;
    const double C39196 = C39184 * C121;
    const double C39354 = C39184 * C253;
    const double C40936 = C39184 * C1174;
    const double C39471 = C39461 * C121;
    const double C19282 = C19280 * C50919;
    const double C21657 = C19280 * C50776;
    const double C48166 = C19280 * C22848;
    const double C15161 = C11183 * C1279;
    const double C15155 = C11181 * C1279;
    const double C15149 = C12899 * C1279;
    const double C20736 = C11401 * C1279;
    const double C20730 = C13492 * C1279;
    const double C22635 = C13797 * C1279;
    const double C15163 = C11185 * C1280;
    const double C15157 = C11183 * C1280;
    const double C15151 = C11181 * C1280;
    const double C20738 = C11403 * C1280;
    const double C20732 = C11401 * C1280;
    const double C22637 = C13679 * C1280;
    const double C20900 = C20898 - C15316;
    const double C2351 = C2173 * C269;
    const double C23025 = C22847 * C269;
    const double C5359 = C2173 * C388;
    const double C32434 = C22847 * C388;
    const double C2685 = C2173 * C517;
    const double C7980 = C50617 * C517;
    const double C23359 = C22847 * C517;
    const double C25856 = C50617 * C517;
    const double C3949 = C2173 * C729;
    const double C24575 = C22847 * C729;
    const double C28724 = C50617 * C729;
    const double C41269 = C50617 * C729;
    const double C5925 = C2173 * C859;
    const double C15761 = C50617 * C859;
    const double C33000 = C22847 * C859;
    const double C38639 = C50617 * C859;
    const double C18536 = C18384 * C121;
    const double C11054 =
        5 * ((-3 * C50423) / C49783 + C49874 * C50461 -
             (C50422 * ce) / C49783) +
        C49874 *
            (4 * C50461 +
             C49874 * ((-3 * C50455) / C49783 +
                       C49874 * ((-2 * C50446) / C49783 -
                                 (C49874 *
                                  (C49874 * (C49874 * C49963 + C50006 * ce) +
                                   C49927 + C49874 * C50006 * ce)) /
                                     C49783 -
                                 (C50449 * ce) / C49783) -
                       (C50454 * ce) / C49783) -
             (C50458 * ce) / C49783) -
        ((4 * C50422 + C49874 * C50458) * ce) / C49783;
    const double C11162 =
        C50086 *
        (4 * C50461 +
         C49874 *
             ((-3 * C50455) / C49783 +
              C49874 * ((-2 * C50446) / C49783 -
                        (C49874 * (C49874 * (C49874 * C49963 + C50006 * ce) +
                                   C49927 + C49874 * C50006 * ce)) /
                            C49783 -
                        (C50449 * ce) / C49783) -
              (C50454 * ce) / C49783) -
         (C50458 * ce) / C49783);
    const double C11386 =
        (-3 * C50423) / C49783 + C49874 * C50461 - (C50422 * ce) / C49783 +
        ((-3 * C50455) / C49783 +
         C49874 * ((-2 * C50446) / C49783 -
                   (C49874 * (C49874 * (C49874 * C49963 + C50006 * ce) +
                              C49927 + C49874 * C50006 * ce)) /
                       C49783 -
                   (C50449 * ce) / C49783) -
         (C50454 * ce) / C49783) *
            C50129;
    const double C11473 =
        2 * C50086 * C50461 +
        C50086 *
            (C50461 + ((-2 * C50446) / C49783 -
                       (C49874 * (C49874 * (C49874 * C49963 + C50006 * ce) +
                                  C49927 + C49874 * C50006 * ce)) /
                           C49783 -
                       (C50449 * ce) / C49783) *
                          C50129);
    const double C39199 = C39187 * C121;
    const double C50062 = C50044 + C50061;
    const double C19093 = C13494 + C13493;
    const double C39197 = C39185 * C50672;
    const double C39355 = C39185 * C50905;
    const double C40937 = C39185 * C1169;
    const double C19281 = C19277 - C13666;
    const double C20901 = C20899 - C15320;
    const double C19387 = C13794 + C13793;
    const double C21664 = C21663 - C19267;
    const double C22746 = C22745 - C20893;
    const double C2378 = C2358 + C2359;
    const double C2373 = C2348 + C2349;
    const double C8005 = C7975 + C7976;
    const double C23047 = C23022 + C23023;
    const double C25881 = C25851 + C25852;
    const double C5382 = C5362 + C5363;
    const double C5372 = C5342 + C5343;
    const double C15785 = C15756 + C15757;
    const double C28964 = C28951 + C28952;
    const double C32447 = C32417 + C32418;
    const double C2706 = C2692 + C2693;
    const double C2701 = C2682 + C2683;
    const double C8010 = C7985 + C7986;
    const double C8002 = C7969 + C7970;
    const double C10776 = C10755 + C10756;
    const double C23375 = C23356 + C23357;
    const double C25886 = C25861 + C25862;
    const double C25878 = C25845 + C25846;
    const double C3023 = C3004 + C3005;
    const double C3964 = C3956 + C3957;
    const double C9577 = C9563 + C9564;
    const double C12726 = C12719 + C12720;
    const double C23673 = C23654 + C23655;
    const double C27421 = C27407 + C27408;
    const double C28734 = C28729 + C28730;
    const double C41279 = C41274 + C41275;
    const double C5950 = C5932 + C5933;
    const double C5948 = C5928 + C5929;
    const double C15788 = C15762 + C15763;
    const double C15774 = C15734 + C15735;
    const double C18539 = C18534 + C18535;
    const double C29710 = C29689 + C29690;
    const double C33025 = C33007 + C33008;
    const double C38646 = C38640 + C38641;
    const double C8449 = C8443 + C8444;
    const double C10986 = C10981 + C10982;
    const double C26317 = C26311 + C26312;
    const double C8639 = C8625 + C8626;
    const double C11820 = C11813 + C11814;
    const double C26499 = C26485 + C26486;
    const double C8965 = C8955 + C8956;
    const double C13490 = C13475 + C13476;
    const double C26817 = C26807 + C26808;
    const double C16530 = C16522 + C16523;
    const double C19109 = C19100 + C19101;
    const double C29927 = C29921 + C29922;
    const double C19092 = C13496 + C13495;
    const double C39357 = C29915 * C50688;
    const double C40939 = C29915 * C50688;
    const double C21547 = C19113 + C19112;
    const double C39470 = C39460 * C50672;
    const double C11062 = C11059 + C11060;
    const double C11188 = C11179 + C11180;
    const double C11406 = C11399 + C11400;
    const double C13682 = C13677 + C13678;
    const double C149 =
        5 * (3 * C49942 + (C49940 * ae) / C49742 + C49871 * C49982) +
        ((4 * C49940 + C49871 * C49980) * ae) / C49742 +
        C49871 *
            (4 * C49982 + (C49980 * ae) / C49742 +
             C49871 *
                 (3 * C49979 + (C49976 * ae) / C49742 +
                  C49871 *
                      (2 * C49975 - (ae * C49969) / C49882 +
                       C49871 * ((-(ae * C49871 * C49963) / C49783) / C49742 -
                                 C49961 / C49882 +
                                 C49871 * ((-(C49871 * std::pow(C49876, 8) *
                                              bs[8] * C49887) /
                                            C49783) /
                                               C49742 -
                                           (ae * C49963) / C49882)))));
    const double C277 =
        C49874 * (3 * C49942 + (C49940 * ae) / C49742 + C49871 * C49982) -
        ((3 * (C49988 + C49871 * C50001 + C49995 * ae) +
          C49871 * (2 * C50001 +
                    C49871 * (C49997 +
                              C49871 * (C49871 * C49916 * C49917 * C49984 +
                                        C49996 * ae) +
                              C49871 * C49996 * ae) +
                    C50000 * ae) +
          (2 * C49995 + C49871 * C50000) * ae) *
         ce) /
            C49882;
    const double C278 =
        C49874 *
            (4 * C49982 + (C49980 * ae) / C49742 +
             C49871 *
                 (3 * C49979 + (C49976 * ae) / C49742 +
                  C49871 *
                      (2 * C49975 - (ae * C49969) / C49882 +
                       C49871 * ((-(ae * C49871 * C49963) / C49783) / C49742 -
                                 C49961 / C49882 +
                                 C49871 * ((-(C49871 * std::pow(C49876, 8) *
                                              bs[8] * C49887) /
                                            C49783) /
                                               C49742 -
                                           (ae * C49963) / C49882))))) -
        ((4 * (2 * C50001 + C49871 * C50018 + C50000 * ae) +
          C49871 *
              (3 * C50018 +
               C49871 * (2 * C50013 +
                         C49871 * (C50007 +
                                   C49871 * (C49871 * C49948 * C49949 * C49984 +
                                             C50006 * ae) +
                                   C49871 * C50006 * ae) +
                         C50012 * ae) +
               C50016 * ae) +
          (3 * C50000 + C49871 * C50016) * ae) *
         ce) /
            C49882;
    const double C400 =
        (zP - zQ) * (3 * C49942 + (C49940 * ae) / C49742 + C49871 * C49982);
    const double C402 =
        (zP - zQ) *
        (4 * C49982 + (C49980 * ae) / C49742 +
         C49871 *
             (3 * C49979 + (C49976 * ae) / C49742 +
              C49871 * (2 * C49975 - (ae * C49969) / C49882 +
                        C49871 * ((-(ae * C49871 * C49963) / C49783) / C49742 -
                                  C49961 / C49882 +
                                  C49871 * ((-(C49871 * std::pow(C49876, 8) *
                                               bs[8] * C49887) /
                                             C49783) /
                                                C49742 -
                                            (ae * C49963) / C49882)))));
    const double C527 = 2 * C49912 - (ae * C49909) / C49882 + C49871 * C49942 -
                        (C49874 * C50042 * ce) / C49882 +
                        C49874 * (C49874 * C49982 - (C50042 * ce) / C49882);
    const double C616 =
        2 * (C49874 * C49982 - (C50042 * ce) / C49882) -
        ((C50042 + C50060 * std::pow(C49874, 2)) * ce) / C49882 +
        C49874 *
            (C49982 - (C49874 * C50060 * ce) / C49882 +
             C49874 *
                 (C49874 *
                      (2 * C49975 - (ae * C49969) / C49882 +
                       C49871 * ((-(ae * C49871 * C49963) / C49783) / C49742 -
                                 C49961 / C49882 +
                                 C49871 * ((-(C49871 * std::pow(C49876, 8) *
                                              bs[8] * C49887) /
                                            C49783) /
                                               C49742 -
                                           (ae * C49963) / C49882))) -
                  (C50060 * ce) / C49882));
    const double C745 = (zP - zQ) * (C49874 * C49982 - (C50042 * ce) / C49882);
    const double C746 =
        (zP - zQ) *
        (C49982 - (C49874 * C50060 * ce) / C49882 +
         C49874 *
             (C49874 * (2 * C49975 - (ae * C49969) / C49882 +
                        C49871 * ((-(ae * C49871 * C49963) / C49783) / C49742 -
                                  C49961 / C49882 +
                                  C49871 * ((-(C49871 * std::pow(C49876, 8) *
                                               bs[8] * C49887) /
                                             C49783) /
                                                C49742 -
                                            (ae * C49963) / C49882))) -
              (C50060 * ce) / C49882));
    const double C869 = 2 * C49912 - (ae * C49909) / C49882 + C49871 * C49942 +
                        C49982 * std::pow(zP - zQ, 2);
    const double C870 =
        3 * C49942 + (C49940 * ae) / C49742 + C49871 * C49982 +
        (3 * C49979 + (C49976 * ae) / C49742 +
         C49871 *
             (2 * C49975 - (ae * C49969) / C49882 +
              C49871 *
                  ((-(ae * C49871 * C49963) / C49783) / C49742 -
                   C49961 / C49882 +
                   C49871 * ((-(C49871 * std::pow(C49876, 8) * bs[8] * C49887) /
                              C49783) /
                                 C49742 -
                             (ae * C49963) / C49882)))) *
            std::pow(zP - zQ, 2);
    const double C981 =
        C49874 * C49982 - (C50042 * ce) / C49882 +
        (C49874 *
             (2 * C49975 - (ae * C49969) / C49882 +
              C49871 *
                  ((-(ae * C49871 * C49963) / C49783) / C49742 -
                   C49961 / C49882 +
                   C49871 * ((-(C49871 * std::pow(C49876, 8) * bs[8] * C49887) /
                              C49783) /
                                 C49742 -
                             (ae * C49963) / C49882))) -
         (C50060 * ce) / C49882) *
            std::pow(zP - zQ, 2);
    const double C1067 =
        2 * C50086 * C49982 +
        C50086 *
            (C49982 +
             (2 * C49975 - (ae * C49969) / C49882 +
              C49871 *
                  ((-(ae * C49871 * C49963) / C49783) / C49742 -
                   C49961 / C49882 +
                   C49871 * ((-(C49871 * std::pow(C49876, 8) * bs[8] * C49887) /
                              C49783) /
                                 C49742 -
                             (ae * C49963) / C49882))) *
                 std::pow(C50086, 2));
    const double C2814 =
        3 * (C49942 - (C50092 * ce) / C49882 + C49874 * C50098) -
        ((2 * C50092 + C49874 * C50099) * ce) / C49882 +
        C49874 *
            (2 * C50098 - (C50099 * ce) / C49882 +
             C49874 *
                 (C49979 - (C49874 * C50057 * ce) / C49882 +
                  C49874 *
                      (C49874 * ((-(ae * C49871 * C49963) / C49783) / C49742 -
                                 C49961 / C49882 +
                                 C49871 * ((-(C49871 * std::pow(C49876, 8) *
                                              bs[8] * C49887) /
                                            C49783) /
                                               C49742 -
                                           (ae * C49963) / C49882)) -
                       (C50057 * ce) / C49882)));
    const double C2990 =
        C50086 *
        (2 * C50098 - (C50099 * ce) / C49882 +
         C49874 *
             (C49979 - (C49874 * C50057 * ce) / C49882 +
              C49874 * (C49874 * ((-(ae * C49871 * C49963) / C49783) / C49742 -
                                  C49961 / C49882 +
                                  C49871 * ((-(C49871 * std::pow(C49876, 8) *
                                               bs[8] * C49887) /
                                             C49783) /
                                                C49742 -
                                            (ae * C49963) / C49882)) -
                        (C50057 * ce) / C49882)));
    const double C3330 =
        C49942 - (C50092 * ce) / C49882 + C49874 * C50098 +
        (C49979 - (C49874 * C50057 * ce) / C49882 +
         C49874 *
             (C49874 *
                  ((-(ae * C49871 * C49963) / C49783) / C49742 -
                   C49961 / C49882 +
                   C49871 * ((-(C49871 * std::pow(C49876, 8) * bs[8] * C49887) /
                              C49783) /
                                 C49742 -
                             (ae * C49963) / C49882)) -
              (C50057 * ce) / C49882)) *
            std::pow(C50086, 2);
    const double C3458 =
        2 * C50086 * C50098 +
        C50086 *
            (C50098 +
             (C49874 *
                  ((-(ae * C49871 * C49963) / C49783) / C49742 -
                   C49961 / C49882 +
                   C49871 * ((-(C49871 * std::pow(C49876, 8) * bs[8] * C49887) /
                              C49783) /
                                 C49742 -
                             (ae * C49963) / C49882)) -
              (C50057 * ce) / C49882) *
                 std::pow(C50086, 2));
    const double C2833 = C2824 + C2825;
    const double C8329 = C8319 + C8320;
    const double C10778 = C10759 + C10760;
    const double C23495 = C23486 + C23487;
    const double C26205 = C26195 + C26196;
    const double C3027 = C3012 + C3013;
    const double C9581 = C9571 + C9572;
    const double C12728 = C12723 + C12724;
    const double C23677 = C23662 + C23663;
    const double C27425 = C27415 + C27416;
    const double C3349 = C3340 + C3341;
    const double C17155 = C17150 + C17151;
    const double C18385 = C18382 + C18383;
    const double C23987 = C23978 + C23979;
    const double C29714 = C29697 + C29698;
    const double C6229 = C6222 + C6223;
    const double C16353 = C16336 + C16337;
    const double C21176 = C21173 + C21174;
    const double C33292 = C33285 + C33286;
    const double C39203 = C39194 + C39195;
    const double C8434 =
        4 * (2 * C50107 - (C50106 * ce) / C49882 + C49874 * C50147) -
        ((3 * C50106 + C49874 * C50146) * ce) / C49882 +
        C49874 *
            (3 * C50147 - (C50146 * ce) / C49882 +
             C49874 *
                 (2 * C50142 - (C50140 * ce) / C49882 +
                  C49874 *
                      (C49975 - (C49874 * C50054 * ce) / C49882 +
                       C49874 * (C49874 * ((-(C49871 * std::pow(C49876, 8) *
                                              bs[8] * C49887) /
                                            C49783) /
                                               C49742 -
                                           (ae * C49963) / C49882) -
                                 (C50054 * ce) / C49882))));
    const double C8602 =
        C50086 *
        (3 * C50147 - (C50146 * ce) / C49882 +
         C49874 *
             (2 * C50142 - (C50140 * ce) / C49882 +
              C49874 * (C49975 - (C49874 * C50054 * ce) / C49882 +
                        C49874 * (C49874 * ((-(C49871 * std::pow(C49876, 8) *
                                               bs[8] * C49887) /
                                             C49783) /
                                                C49742 -
                                            (ae * C49963) / C49882) -
                                  (C50054 * ce) / C49882))));
    const double C8940 =
        2 * C50107 - (C50106 * ce) / C49882 + C49874 * C50147 +
        (2 * C50142 - (C50140 * ce) / C49882 +
         C49874 *
             (C49975 - (C49874 * C50054 * ce) / C49882 +
              C49874 *
                  (C49874 * ((-(C49871 * std::pow(C49876, 8) * bs[8] * C49887) /
                              C49783) /
                                 C49742 -
                             (ae * C49963) / C49882) -
                   (C50054 * ce) / C49882))) *
            C50129;
    const double C9070 =
        2 * C50086 * C50147 +
        C50086 *
            (C50147 +
             (C49975 - (C49874 * C50054 * ce) / C49882 +
              C49874 *
                  (C49874 * ((-(C49871 * std::pow(C49876, 8) * bs[8] * C49887) /
                              C49783) /
                                 C49742 -
                             (ae * C49963) / C49882) -
                   (C50054 * ce) / C49882)) *
                 C50129);
    const double C11055 =
        5 * (3 * C50168 - (C50163 * ce) / C49882 + C49874 * C50204) -
        ((4 * C50163 + C49874 * C50201) * ce) / C49882 +
        C49874 *
            (4 * C50204 - (C50201 * ce) / C49882 +
             C49874 *
                 (3 * C50202 - (C50195 * ce) / C49882 +
                  C49874 *
                      (2 * C50197 - (C50188 * ce) / C49882 +
                       C49874 * ((-(C49874 * C50051 * ce) / C49783) / C49742 -
                                 C49961 / C49882 +
                                 C49874 * ((-(C49874 * std::pow(C49876, 8) *
                                              bs[8] * C49887) /
                                            C49783) /
                                               C49742 -
                                           (C50051 * ce) / C49882)))));
    const double C11163 =
        C50086 *
        (4 * C50204 - (C50201 * ce) / C49882 +
         C49874 *
             (3 * C50202 - (C50195 * ce) / C49882 +
              C49874 * (2 * C50197 - (C50188 * ce) / C49882 +
                        C49874 * ((-(C49874 * C50051 * ce) / C49783) / C49742 -
                                  C49961 / C49882 +
                                  C49874 * ((-(C49874 * std::pow(C49876, 8) *
                                               bs[8] * C49887) /
                                             C49783) /
                                                C49742 -
                                            (C50051 * ce) / C49882)))));
    const double C11387 =
        3 * C50168 - (C50163 * ce) / C49882 + C49874 * C50204 +
        (3 * C50202 - (C50195 * ce) / C49882 +
         C49874 *
             (2 * C50197 - (C50188 * ce) / C49882 +
              C49874 *
                  ((-(C49874 * C50051 * ce) / C49783) / C49742 -
                   C49961 / C49882 +
                   C49874 * ((-(C49874 * std::pow(C49876, 8) * bs[8] * C49887) /
                              C49783) /
                                 C49742 -
                             (C50051 * ce) / C49882)))) *
            C50129;
    const double C11475 =
        2 * C50086 * C50204 +
        C50086 *
            (C50204 +
             (2 * C50197 - (C50188 * ce) / C49882 +
              C49874 *
                  ((-(C49874 * C50051 * ce) / C49783) / C49742 -
                   C49961 / C49882 +
                   C49874 * ((-(C49874 * std::pow(C49876, 8) * bs[8] * C49887) /
                              C49783) /
                                 C49742 -
                             (C50051 * ce) / C49882))) *
                 C50129);
    const double C8313 = C8000 + C7999;
    const double C8304 = C7994 + C7993;
    const double C8303 = C7992 + C7991;
    const double C8438 = C8326 + C8325;
    const double C8437 = C8324 + C8323;
    const double C8642 = C8635 + C8636;
    const double C41995 = C8636 + C8635;
    const double C8641 = C8633 + C8634;
    const double C41994 = C8634 + C8633;
    const double C41997 = C8631 + C8632;
    const double C41993 = C8632 + C8631;
    const double C41996 = C8629 + C8630;
    const double C41992 = C8630 + C8629;
    const double C16515 = C8961 + C8962;
    const double C42387 = C8962 + C8961;
    const double C16514 = C8959 + C8960;
    const double C42386 = C8960 + C8959;
    const double C43167 = C9575 + C9576;
    const double C43164 = C9576 + C9575;
    const double C16329 = C15776 + C15777;
    const double C16327 = C15772 + C15773;
    const double C16326 = C15770 + C15771;
    const double C16641 = C16356 + C16357;
    const double C16640 = C16354 + C16355;
    const double C23053 = C23034 + C23035;
    const double C23050 = C23028 + C23029;
    const double C23045 = C23018 + C23019;
    const double C23042 = C23012 + C23013;
    const double C23041 = C23010 + C23011;
    const double C23038 = C23004 + C23005;
    const double C23381 = C23368 + C23369;
    const double C23378 = C23362 + C23363;
    const double C23373 = C23352 + C23353;
    const double C23370 = C23346 + C23347;
    const double C23497 = C23490 + C23491;
    const double C23494 = C23484 + C23485;
    const double C23679 = C23666 + C23667;
    const double C23676 = C23660 + C23661;
    const double C23671 = C23650 + C23651;
    const double C23668 = C23644 + C23645;
    const double C23989 = C23982 + C23983;
    const double C23986 = C23976 + C23977;
    const double C24591 = C24584 + C24585;
    const double C24588 = C24578 + C24579;
    const double C32456 = C32435 + C32436;
    const double C32453 = C32429 + C32430;
    const double C32452 = C32427 + C32428;
    const double C32449 = C32421 + C32422;
    const double C32444 = C32411 + C32412;
    const double C32441 = C32405 + C32406;
    const double C33030 = C33017 + C33018;
    const double C33027 = C33011 + C33012;
    const double C33022 = C33001 + C33002;
    const double C33019 = C32995 + C32996;
    const double C33290 = C33281 + C33282;
    const double C33287 = C33275 + C33276;
    const double C23052 = C23032 + C23033;
    const double C23049 = C23026 + C23027;
    const double C23046 = C23020 + C23021;
    const double C23043 = C23014 + C23015;
    const double C23040 = C23008 + C23009;
    const double C23037 = C23002 + C23003;
    const double C23380 = C23366 + C23367;
    const double C23377 = C23360 + C23361;
    const double C23374 = C23354 + C23355;
    const double C23371 = C23348 + C23349;
    const double C23496 = C23488 + C23489;
    const double C23493 = C23482 + C23483;
    const double C23678 = C23664 + C23665;
    const double C23675 = C23658 + C23659;
    const double C23672 = C23652 + C23653;
    const double C23669 = C23646 + C23647;
    const double C23988 = C23980 + C23981;
    const double C23985 = C23974 + C23975;
    const double C24590 = C24582 + C24583;
    const double C24587 = C24576 + C24577;
    const double C32457 = C32437 + C32438;
    const double C32454 = C32431 + C32432;
    const double C32451 = C32425 + C32426;
    const double C32448 = C32419 + C32420;
    const double C32445 = C32413 + C32414;
    const double C32442 = C32407 + C32408;
    const double C33029 = C33015 + C33016;
    const double C33026 = C33009 + C33010;
    const double C33023 = C33003 + C33004;
    const double C33020 = C32997 + C32998;
    const double C33291 = C33283 + C33284;
    const double C33288 = C33277 + C33278;
    const double C20902 = C20900 * C50919;
    const double C22739 = C20900 * C50776;
    const double C49728 = C20900 * C22848;
    const double C2374 = C2350 + C2351;
    const double C23048 = C23024 + C23025;
    const double C5380 = C5358 + C5359;
    const double C32455 = C32433 + C32434;
    const double C2702 = C2684 + C2685;
    const double C8007 = C7979 + C7980;
    const double C23376 = C23358 + C23359;
    const double C25883 = C25855 + C25856;
    const double C3960 = C3948 + C3949;
    const double C24586 = C24574 + C24575;
    const double C28731 = C28723 + C28724;
    const double C41276 = C41268 + C41269;
    const double C5946 = C5924 + C5925;
    const double C15787 = C15760 + C15761;
    const double C33021 = C32999 + C33000;
    const double C38645 = C38638 + C38639;
    const double C50063 = C50062 + C50050;
    const double C19105 = C19093 * C50919;
    const double C21548 = C19093 * C50776;
    const double C48017 = C19093 * C22848;
    const double C39204 = C39196 + C39197;
    const double C39358 = C39354 + C39355;
    const double C40940 = C40936 + C40937;
    const double C19283 = C19281 * C50790;
    const double C48167 = C19281 * C50790;
    const double C20903 = C20901 * C50790;
    const double C49729 = C20901 * C50790;
    const double C19395 = C19387 * C50790;
    const double C48267 = C19387 * C50790;
    const double C21665 = C21664 * C50776;
    const double C22747 = C22746 * C50776;
    const double C8314 = C8002 + C8001;
    const double C26190 = C25878 + C25877;
    const double C43166 = C9577 + C9578;
    const double C43165 = C9578 + C9577;
    const double C12896 = C12726 * C50672;
    const double C30719 = C27421 + C27422;
    const double C30718 = C27422 + C27421;
    const double C16328 = C15774 + C15775;
    const double C18541 = C18539 * C50672;
    const double C39186 = C29710 + C29709;
    const double C14310 = C11820 * C50688;
    const double C14662 = C11820 * C50688;
    const double C13498 = C13490 * C50672;
    const double C19895 = C13490 * C50688;
    const double C20243 = C13490 * C50688;
    const double C19115 = C19109 * C50672;
    const double C22076 = C19109 * C50688;
    const double C22308 = C19109 * C50688;
    const double C19104 = C19092 * C50790;
    const double C48016 = C19092 * C50790;
    const double C21554 = C21547 * C50776;
    const double C39476 = C39470 + C39471;
    const double C13318 = C11188 * C503;
    const double C15166 = C11188 * C1276;
    const double C13670 = C11406 * C50688;
    const double C15324 = C11406 * C50688;
    const double C18943 = C11406 * C503;
    const double C20741 = C11406 * C1276;
    const double C13796 = C13682 * C50672;
    const double C19271 = C13682 * C50688;
    const double C20897 = C13682 * C50688;
    const double C21446 = C13682 * C503;
    const double C22640 = C13682 * C1276;
    const double C2357 = C2173 * C277;
    const double C23031 = C22847 * C277;
    const double C5365 = C2173 * C400;
    const double C32440 = C22847 * C400;
    const double C2691 = C2173 * C527;
    const double C7984 = C50617 * C527;
    const double C23365 = C22847 * C527;
    const double C25860 = C50617 * C527;
    const double C3955 = C2173 * C745;
    const double C24581 = C22847 * C745;
    const double C28728 = C50617 * C745;
    const double C41273 = C50617 * C745;
    const double C5931 = C2173 * C869;
    const double C15765 = C50617 * C869;
    const double C33006 = C22847 * C869;
    const double C38643 = C50617 * C869;
    const double C12898 = C12728 * C50672;
    const double C18537 = C18385 * C50672;
    const double C21178 = C21176 * C50672;
    const double C16526 = C16515 * C50688;
    const double C18131 = C16515 * C50688;
    const double C16525 = C16514 * C254;
    const double C18130 = C16514 * C1175;
    const double C16349 = C16329 * C121;
    const double C16347 = C16327 * C50672;
    const double C16513 = C16327 * C50905;
    const double C18129 = C16327 * C1169;
    const double C16346 = C16326 * C121;
    const double C16512 = C16326 * C253;
    const double C18128 = C16326 * C1174;
    const double C16651 = C16641 * C121;
    const double C16650 = C16640 * C50672;
    const double C528 =
        3 * C49942 + (C49940 * ae) / C49742 + C49871 * C49982 -
        (C49874 * C50063 * ce) / C49882 +
        C49874 *
            (C49874 *
                 (3 * C49979 + (C49976 * ae) / C49742 +
                  C49871 *
                      (2 * C49975 - (ae * C49969) / C49882 +
                       C49871 * ((-(ae * C49871 * C49963) / C49783) / C49742 -
                                 C49961 / C49882 +
                                 C49871 * ((-(C49871 * std::pow(C49876, 8) *
                                              bs[8] * C49887) /
                                            C49783) /
                                               C49742 -
                                           (ae * C49963) / C49882)))) -
             (C50063 * ce) / C49882);
    const double C1415 =
        C50086 *
        (C49874 *
             (3 * C49979 + (C49976 * ae) / C49742 +
              C49871 * (2 * C49975 - (ae * C49969) / C49882 +
                        C49871 * ((-(ae * C49871 * C49963) / C49783) / C49742 -
                                  C49961 / C49882 +
                                  C49871 * ((-(C49871 * std::pow(C49876, 8) *
                                               bs[8] * C49887) /
                                             C49783) /
                                                C49742 -
                                            (ae * C49963) / C49882)))) -
         (C50063 * ce) / C49882);
    const double C142 = (5 * (3 * C50036 + C49871 * C50042 + C50253 * ae) +
                         C49871 * (4 * C50042 + C49871 * C50063 + C50259 * ae) +
                         (4 * C50253 + C49871 * C50259) * ae) /
                        C49742;
    const double C271 =
        (C49874 * (4 * C50042 + C49871 * C50063 + C50259 * ae)) / C49742;
    const double C396 =
        (C50086 * (4 * C50042 + C49871 * C50063 + C50259 * ae)) / C49742;
    const double C522 =
        (3 * C50036 + C49871 * C50042 + C50253 * ae + C50063 * C50095) / C49742;
    const double C865 =
        (3 * C50036 + C49871 * C50042 + C50253 * ae + C50063 * C50129) / C49742;
    const double C1413 = (C50086 * C49874 * C50063) / C49742;
    const double C39206 = C39204 * C50776;
    const double C39359 = C39358 - C39356;
    const double C40941 = C40940 - C40938;
    const double C19284 = C19282 + C19283;
    const double C48168 = C48166 + C48167;
    const double C20904 = C20902 + C20903;
    const double C49730 = C49728 + C49729;
    const double C19399 = C19395 + C19396;
    const double C48269 = C48267 + C48268;
    const double C16348 = C16328 * C50672;
    const double C39198 = C39186 * C50672;
    const double C19111 = C19104 + C19105;
    const double C48019 = C48016 + C48017;
    const double C39477 = C39476 * C50776;
    const double C2377 = C2356 + C2357;
    const double C23051 = C23030 + C23031;
    const double C5383 = C5364 + C5365;
    const double C32458 = C32439 + C32440;
    const double C2705 = C2690 + C2691;
    const double C8009 = C7983 + C7984;
    const double C23379 = C23364 + C23365;
    const double C25885 = C25859 + C25860;
    const double C3963 = C3954 + C3955;
    const double C24589 = C24580 + C24581;
    const double C28733 = C28727 + C28728;
    const double C41278 = C41272 + C41273;
    const double C5949 = C5930 + C5931;
    const double C15789 = C15764 + C15765;
    const double C33024 = C33005 + C33006;
    const double C38647 = C38642 + C38643;
    const double C16358 = C16346 + C16347;
    const double C16524 = C16512 + C16513;
    const double C18132 = C18128 + C18129;
    const double C16656 = C16650 + C16651;
    const double C39360 = C39359 - C39357;
    const double C40942 = C40941 - C40939;
    const double C16359 = C16348 + C16349;
    const double C39205 = C39198 + C39199;
    const double C16360 = C16358 * C50776;
    const double C16531 = C16524 - C16525;
    const double C18133 = C18132 - C18130;
    const double C16657 = C16656 * C50776;
    const double C39361 = C39360 * C50776;
    const double C40943 = C40942 * C50776;
    const double C16361 = C16359 * C50776;
    const double C39207 = C39205 * C50776;
    const double C16532 = C16531 - C16526;
    const double C18134 = C18133 - C18131;
    const double C16533 = C16532 * C50776;
    const double C18135 = C18134 * C50776;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                    C50933 * C130 + C22852 * C124 + C22847 * C131) *
                       C1174 +
                   (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                    C50933 * C144 + C22852 * C135 + C22847 * C145) *
                       C1169 -
                   (C23036 + C23037 + C23038) * C1175 -
                   (C23039 + C23040 + C23041) * C50688) *
                      C22848 +
                  ((C23038 + C23037 + C23036) * C1174 +
                   (C23041 + C23040 + C23039) * C1169 -
                   (C23372 + C23371 + C23370) * C1175 -
                   (C23375 + C23374 + C23373) * C50688) *
                      C50790) *
                     C50802 * C50950 +
                 (((C23042 + C23043 + C23044) * C1175 -
                   ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                     C50933 * C145 + C22850 * C134 + C50949 * C144) *
                        C1169 +
                    (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                     C50933 * C131 + C22850 * C123 + C50949 * C130) *
                        C1174) +
                   (C23045 + C23046 + C23047) * C50688) *
                      C22848 +
                  ((C23378 + C23377 + C23376) * C1175 -
                   ((C23047 + C23046 + C23045) * C1169 +
                    (C23044 + C23043 + C23042) * C1174) +
                   (C23381 + C23380 + C23379) * C50688) *
                      C50790) *
                     C50802 * C50936 +
                 (((C22850 * C124 + C50949 * C131 + C22851 * C125 +
                    C50933 * C132 + C22852 * C126 + C22847 * C138) *
                       C1174 +
                   (C22850 * C135 + C50949 * C145 + C22851 * C136 +
                    C50933 * C146 + C22852 * C137 + C22847 * C147) *
                       C1169 -
                   (C23048 + C23049 + C23050) * C1175 -
                   (C23051 + C23052 + C23053) * C50688) *
                      C22848 +
                  ((C23050 + C23049 + C23048) * C1174 +
                   (C23053 + C23052 + C23051) * C1169 -
                   (C22852 * C513 + C22847 * C522 + C22851 * C512 +
                    C50933 * C517 + C22850 * C511 + C50949 * C516) *
                       C1175 -
                   (C22852 * C523 + C22847 * C528 + C22851 * C521 +
                    C50933 * C527 + C22850 * C520 + C50949 * C526) *
                       C50688) *
                      C50790) *
                     C50802 * C1173) *
                C50702) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                    C50933 * C130 + C22852 * C124 + C22847 * C131) *
                       C1279 +
                   (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                    C50933 * C144 + C22852 * C135 + C22847 * C145) *
                       C50951 -
                   (C23036 + C23037 + C23038) * C1280 -
                   (C23039 + C23040 + C23041) * C50939 +
                   (C23370 + C23371 + C23372) * C1281 +
                   (C23373 + C23374 + C23375) * C1276) *
                      C22848 +
                  ((C23038 + C23037 + C23036) * C1279 +
                   (C23041 + C23040 + C23039) * C50951 -
                   (C23372 + C23371 + C23370) * C1280 -
                   (C23375 + C23374 + C23373) * C50939 +
                   (C23494 + C23493 + C23492) * C1281 +
                   (C23497 + C23496 + C23495) * C1276) *
                      C50790) *
                     C50802 * C1277 +
                 (((C23042 + C23043 + C23044) * C1280 -
                   ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                     C50933 * C145 + C22850 * C134 + C50949 * C144) *
                        C50951 +
                    (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                     C50933 * C131 + C22850 * C123 + C50949 * C130) *
                        C1279) +
                   (C23045 + C23046 + C23047) * C50939 -
                   (C23376 + C23377 + C23378) * C1281 -
                   (C23379 + C23380 + C23381) * C1276) *
                      C22848 +
                  ((C23378 + C23377 + C23376) * C1280 -
                   ((C23047 + C23046 + C23045) * C50951 +
                    (C23044 + C23043 + C23042) * C1279) +
                   (C23381 + C23380 + C23379) * C50939 -
                   (C22852 * C604 + C22847 * C608 + C22851 * C605 +
                    C50933 * C609 + C22850 * C606 + C50949 * C610) *
                       C1281 -
                   (C22852 * C612 + C22847 * C616 + C22851 * C613 +
                    C50933 * C617 + C22850 * C614 + C50949 * C618) *
                       C1276) *
                      C50790) *
                     C50802 * C50643) *
                C50702) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                     C50933 * C130 + C22852 * C124 + C22847 * C131) *
                        C1174 +
                    (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                     C50933 * C144 + C22852 * C135 + C22847 * C145) *
                        C1169 -
                    (C23036 + C23037 + C23038) * C1175 -
                    (C23039 + C23040 + C23041) * C50688) *
                       C22848 +
                   ((C23038 + C23037 + C23036) * C1174 +
                    (C23041 + C23040 + C23039) * C1169 -
                    (C23372 + C23371 + C23370) * C1175 -
                    (C23375 + C23374 + C23373) * C50688) *
                       C50790) *
                      C50802 * C1277 +
                  (((C23042 + C23043 + C23044) * C1175 -
                    ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                      C50933 * C145 + C22850 * C134 + C50949 * C144) *
                         C1169 +
                     (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                      C50933 * C131 + C22850 * C123 + C50949 * C130) *
                         C1174) +
                    (C23045 + C23046 + C23047) * C50688) *
                       C22848 +
                   ((C23378 + C23377 + C23376) * C1175 -
                    ((C23047 + C23046 + C23045) * C1169 +
                     (C23044 + C23043 + C23042) * C1174) +
                    (C23381 + C23380 + C23379) * C50688) *
                       C50790) *
                      C50802 * C50643) *
                     C50907 +
                 ((((C23668 + C23669 + C23670) * C1175 -
                    ((C22852 * C390 + C22847 * C398 + C22851 * C389 +
                      C50933 * C397 + C22850 * C393 + C50949 * C401) *
                         C1169 +
                     (C22852 * C380 + C22847 * C386 + C22851 * C379 +
                      C50933 * C385 + C22850 * C383 + C50949 * C394) *
                         C1174) +
                    (C23671 + C23672 + C23673) * C50688) *
                       C22848 +
                   ((C23676 + C23675 + C23674) * C1175 -
                    ((C23673 + C23672 + C23671) * C1169 +
                     (C23670 + C23669 + C23668) * C1174) +
                    (C23679 + C23678 + C23677) * C50688) *
                       C50790) *
                      C50802 * C1277 +
                  (((C22850 * C379 + C50949 * C385 + C22851 * C380 +
                     C50933 * C386 + C22852 * C381 + C22847 * C387) *
                        C1174 +
                    (C22850 * C389 + C50949 * C397 + C22851 * C390 +
                     C50933 * C398 + C22852 * C391 + C22847 * C399) *
                        C1169 -
                    (C24586 + C24587 + C24588) * C1175 -
                    (C24589 + C24590 + C24591) * C50688) *
                       C22848 +
                   ((C24588 + C24587 + C24586) * C1174 +
                    (C24591 + C24590 + C24589) * C1169 -
                    (C22852 * C722 + C22847 * C734 + C22851 * C723 +
                     C50933 * C735 + C22850 * C724 + C50949 * C736) *
                        C1175 -
                    (C22852 * C738 + C22847 * C746 + C22851 * C739 +
                     C50933 * C747 + C22850 * C740 + C50949 * C748) *
                        C50688) *
                       C50790) *
                      C50802 * C50643) *
                     C50714)) /
               (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                     C50933 * C130 + C22852 * C124 + C22847 * C131) *
                        C1174 +
                    (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                     C50933 * C144 + C22852 * C135 + C22847 * C145) *
                        C1169 -
                    (C23036 + C23037 + C23038) * C1175 -
                    (C23039 + C23040 + C23041) * C50688) *
                       C22848 +
                   ((C23038 + C23037 + C23036) * C1174 +
                    (C23041 + C23040 + C23039) * C1169 -
                    (C23372 + C23371 + C23370) * C1175 -
                    (C23375 + C23374 + C23373) * C50688) *
                       C50790) *
                      C50802 * C50898 +
                  (((C23042 + C23043 + C23044) * C1175 -
                    ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                      C50933 * C145 + C22850 * C134 + C50949 * C144) *
                         C1169 +
                     (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                      C50933 * C131 + C22850 * C123 + C50949 * C130) *
                         C1174) +
                    (C23045 + C23046 + C23047) * C50688) *
                       C22848 +
                   ((C23378 + C23377 + C23376) * C1175 -
                    ((C23047 + C23046 + C23045) * C1169 +
                     (C23044 + C23043 + C23042) * C1174) +
                    (C23381 + C23380 + C23379) * C50688) *
                       C50790) *
                      C50802 * C50643) *
                     C1514 +
                 ((((C23668 + C23669 + C23670) * C1175 -
                    ((C22852 * C390 + C22847 * C398 + C22851 * C389 +
                      C50933 * C397 + C22850 * C393 + C50949 * C401) *
                         C1169 +
                     (C22852 * C380 + C22847 * C386 + C22851 * C379 +
                      C50933 * C385 + C22850 * C383 + C50949 * C394) *
                         C1174) +
                    (C23671 + C23672 + C23673) * C50688) *
                       C22848 +
                   ((C23676 + C23675 + C23674) * C1175 -
                    ((C23673 + C23672 + C23671) * C1169 +
                     (C23670 + C23669 + C23668) * C1174) +
                    (C23679 + C23678 + C23677) * C50688) *
                       C50790) *
                      C50802 * C50898 +
                  (((C22850 * C379 + C50949 * C385 + C22851 * C380 +
                     C50933 * C386 + C22852 * C381 + C22847 * C387) *
                        C1174 +
                    (C22850 * C389 + C50949 * C397 + C22851 * C390 +
                     C50933 * C398 + C22852 * C391 + C22847 * C399) *
                        C1169 -
                    (C24586 + C24587 + C24588) * C1175 -
                    (C24589 + C24590 + C24591) * C50688) *
                       C22848 +
                   ((C24588 + C24587 + C24586) * C1174 +
                    (C24591 + C24590 + C24589) * C1169 -
                    (C22852 * C722 + C22847 * C734 + C22851 * C723 +
                     C50933 * C735 + C22850 * C724 + C50949 * C736) *
                        C1175 -
                    (C22852 * C738 + C22847 * C746 + C22851 * C739 +
                     C50933 * C747 + C22850 * C740 + C50949 * C748) *
                        C50688) *
                       C50790) *
                      C50802 * C50643) *
                     C50714)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                    C50933 * C130 + C22852 * C124 + C22847 * C131) *
                       C1279 +
                   (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                    C50933 * C144 + C22852 * C135 + C22847 * C145) *
                       C50951 -
                   (C23036 + C23037 + C23038) * C1280 -
                   (C23039 + C23040 + C23041) * C50939 +
                   (C23370 + C23371 + C23372) * C1281 +
                   (C23373 + C23374 + C23375) * C1276) *
                      C22848 +
                  ((C23038 + C23037 + C23036) * C1279 +
                   (C23041 + C23040 + C23039) * C50951 -
                   (C23372 + C23371 + C23370) * C1280 -
                   (C23375 + C23374 + C23373) * C50939 +
                   (C23494 + C23493 + C23492) * C1281 +
                   (C23497 + C23496 + C23495) * C1276) *
                      C50790) *
                     C50802 * C50638 * C1514 +
                 (((C23668 + C23669 + C23670) * C1280 -
                   ((C22852 * C390 + C22847 * C398 + C22851 * C389 +
                     C50933 * C397 + C22850 * C393 + C50949 * C401) *
                        C50951 +
                    (C22852 * C380 + C22847 * C386 + C22851 * C379 +
                     C50933 * C385 + C22850 * C383 + C50949 * C394) *
                        C1279) +
                   (C23671 + C23672 + C23673) * C50939 -
                   (C23674 + C23675 + C23676) * C1281 -
                   (C23677 + C23678 + C23679) * C1276) *
                      C22848 +
                  ((C23676 + C23675 + C23674) * C1280 -
                   ((C23673 + C23672 + C23671) * C50951 +
                    (C23670 + C23669 + C23668) * C1279) +
                   (C23679 + C23678 + C23677) * C50939 -
                   (C22852 * C2981 + C22847 * C2984 + C22851 * C2982 +
                    C50933 * C2985 + C22850 * C2983 + C50949 * C2986) *
                       C1281 -
                   (C22852 * C2987 + C22847 * C2990 + C22851 * C2988 +
                    C50933 * C2991 + C22850 * C2989 + C50949 * C2992) *
                       C1276) *
                      C50790) *
                     C50802 * C50638 * C50714)) /
               (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                    C50933 * C130 + C22852 * C124 + C22847 * C131) *
                       C1174 +
                   (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                    C50933 * C144 + C22852 * C135 + C22847 * C145) *
                       C1169 -
                   (C23036 + C23037 + C23038) * C1175 -
                   (C23039 + C23040 + C23041) * C50688) *
                      C22848 +
                  ((C23038 + C23037 + C23036) * C1174 +
                   (C23041 + C23040 + C23039) * C1169 -
                   (C23372 + C23371 + C23370) * C1175 -
                   (C23375 + C23374 + C23373) * C50688) *
                      C50790) *
                     C50802 * C50638 * C50952 +
                 (((C23668 + C23669 + C23670) * C1175 -
                   ((C22852 * C390 + C22847 * C398 + C22851 * C389 +
                     C50933 * C397 + C22850 * C393 + C50949 * C401) *
                        C1169 +
                    (C22852 * C380 + C22847 * C386 + C22851 * C379 +
                     C50933 * C385 + C22850 * C383 + C50949 * C394) *
                        C1174) +
                   (C23671 + C23672 + C23673) * C50688) *
                      C22848 +
                  ((C23676 + C23675 + C23674) * C1175 -
                   ((C23673 + C23672 + C23671) * C1169 +
                    (C23670 + C23669 + C23668) * C1174) +
                   (C23679 + C23678 + C23677) * C50688) *
                      C50790) *
                     C50802 * C50638 * C50942 +
                 (((C22850 * C851 + C50949 * C856 + C22851 * C852 +
                    C50933 * C857 + C22852 * C853 + C22847 * C858) *
                       C1174 +
                   (C22850 * C860 + C50949 * C866 + C22851 * C861 +
                    C50933 * C867 + C22852 * C862 + C22847 * C868) *
                       C1169 -
                   (C23984 + C23985 + C23986) * C1175 -
                   (C23987 + C23988 + C23989) * C50688) *
                      C22848 +
                  ((C23986 + C23985 + C23984) * C1174 +
                   (C23989 + C23988 + C23987) * C1169 -
                   (C22852 * C3321 + C22847 * C3324 + C22851 * C3322 +
                    C50933 * C3325 + C22850 * C3323 + C50949 * C3326) *
                       C1175 -
                   (C22852 * C3327 + C22847 * C3330 + C22851 * C3328 +
                    C50933 * C3331 + C22850 * C3329 + C50949 * C3332) *
                       C50688) *
                      C50790) *
                     C50802 * C50638 * C1746)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                    C50933 * C130 + C22852 * C124 + C22847 * C131) *
                       C506 +
                   (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                    C50933 * C144 + C22852 * C135 + C22847 * C145) *
                       C501 -
                   (C23036 + C23037 + C23038) * C507 -
                   (C23039 + C23040 + C23041) * C502 +
                   (C23370 + C23371 + C23372) * C508 +
                   (C23373 + C23374 + C23375) * C503) *
                      C22848 +
                  ((C23038 + C23037 + C23036) * C506 +
                   (C23041 + C23040 + C23039) * C501 -
                   (C23372 + C23371 + C23370) * C507 -
                   (C23375 + C23374 + C23373) * C502 +
                   (C22850 * C607 + C50949 * C611 + C22851 * C606 +
                    C50933 * C610 + C22852 * C605 + C22847 * C609) *
                       C508 +
                   (C22850 * C615 + C50949 * C619 + C22851 * C614 +
                    C50933 * C618 + C22852 * C613 + C22847 * C617) *
                       C503) *
                      C50790) *
                     C50802 * C50898 +
                 (((C23042 + C23043 + C23044) * C507 -
                   ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                     C50933 * C145 + C22850 * C134 + C50949 * C144) *
                        C501 +
                    (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                     C50933 * C131 + C22850 * C123 + C50949 * C130) *
                        C506) +
                   (C23045 + C23046 + C23047) * C502 -
                   (C23376 + C23377 + C23378) * C508 -
                   (C23379 + C23380 + C23381) * C503) *
                      C22848 +
                  ((C23378 + C23377 + C23376) * C507 -
                   ((C23047 + C23046 + C23045) * C501 +
                    (C23044 + C23043 + C23042) * C506) +
                   (C23381 + C23380 + C23379) * C502 -
                   (C22852 * C604 + C22847 * C608 + C22851 * C605 +
                    C50933 * C609 + C22850 * C606 + C50949 * C610) *
                       C508 -
                   (C22852 * C612 + C22847 * C616 + C22851 * C613 +
                    C50933 * C617 + C22850 * C614 + C50949 * C618) *
                       C503) *
                      C50790) *
                     C50802 * C50643) *
                C50702) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                    C50933 * C130 + C22852 * C124 + C22847 * C131) *
                       C121 +
                   (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                    C50933 * C144 + C22852 * C135 + C22847 * C145) *
                       C50672) *
                      C22848 +
                  ((C22850 * C258 + C50949 * C264 + C22851 * C257 +
                    C50933 * C263 + C22852 * C256 + C22847 * C262) *
                       C121 +
                   (C22850 * C268 + C50949 * C276 + C22851 * C267 +
                    C50933 * C275 + C22852 * C266 + C22847 * C274) *
                       C50672) *
                      C50790) *
                     C50802 * C112 -
                 (((C22852 * C265 + C22847 * C273 + C22851 * C266 +
                    C50933 * C274 + C22850 * C267 + C50949 * C275) *
                       C50672 +
                   (C22852 * C255 + C22847 * C261 + C22851 * C256 +
                    C50933 * C262 + C22850 * C257 + C50949 * C263) *
                       C121) *
                      C50790 +
                  ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                    C50933 * C145 + C22850 * C134 + C50949 * C144) *
                       C50672 +
                   (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                    C50933 * C131 + C22850 * C123 + C50949 * C130) *
                       C121) *
                      C22848) *
                     C50802 * C113 +
                 (((C22850 * C124 + C50949 * C131 + C22851 * C125 +
                    C50933 * C132 + C22852 * C126 + C22847 * C138) *
                       C121 +
                   (C22850 * C135 + C50949 * C145 + C22851 * C136 +
                    C50933 * C146 + C22852 * C137 + C22847 * C147) *
                       C50672) *
                      C22848 +
                  ((C22850 * C256 + C50949 * C262 + C22851 * C255 +
                    C50933 * C261 + C22852 * C259 + C22847 * C269) *
                       C121 +
                   (C22850 * C266 + C50949 * C274 + C22851 * C265 +
                    C50933 * C273 + C22852 * C270 + C22847 * C277) *
                       C50672) *
                      C50790) *
                     C50802 * C114 -
                 (((C22852 * C272 + C22847 * C278 + C22851 * C270 +
                    C50933 * C277 + C22850 * C265 + C50949 * C273) *
                       C50672 +
                   (C22852 * C260 + C22847 * C271 + C22851 * C259 +
                    C50933 * C269 + C22850 * C255 + C50949 * C261) *
                       C121) *
                      C50790 +
                  ((C22852 * C140 + C22847 * C148 + C22851 * C137 +
                    C50933 * C147 + C22850 * C136 + C50949 * C146) *
                       C50672 +
                   (C22852 * C127 + C22847 * C139 + C22851 * C126 +
                    C50933 * C138 + C22850 * C125 + C50949 * C132) *
                       C121) *
                      C22848) *
                     C50802 * C115) *
                C50702) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                     C50933 * C130 + C22852 * C124 + C22847 * C131) *
                        C121 +
                    (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                     C50933 * C144 + C22852 * C135 + C22847 * C145) *
                        C50672) *
                       C22848 +
                   ((C23038 + C23037 + C23036) * C121 +
                    (C23041 + C23040 + C23039) * C50672) *
                       C50790) *
                      C50802 * C50898 -
                  (((C23047 + C23046 + C23045) * C50672 +
                    (C23044 + C23043 + C23042) * C121) *
                       C50790 +
                   ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                     C50933 * C145 + C22850 * C134 + C50949 * C144) *
                        C50672 +
                    (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                     C50933 * C131 + C22850 * C123 + C50949 * C130) *
                        C121) *
                       C22848) *
                      C50802 * C50643) *
                     C848 +
                 ((((C22850 * C379 + C50949 * C385 + C22851 * C380 +
                     C50933 * C386 + C22852 * C381 + C22847 * C387) *
                        C121 +
                    (C22850 * C389 + C50949 * C397 + C22851 * C390 +
                     C50933 * C398 + C22852 * C391 + C22847 * C399) *
                        C50672) *
                       C22848 +
                   ((C22850 * C719 + C50949 * C727 + C22851 * C720 +
                     C50933 * C728 + C22852 * C721 + C22847 * C729) *
                        C121 +
                    (C22850 * C731 + C50949 * C743 + C22851 * C732 +
                     C50933 * C744 + C22852 * C733 + C22847 * C745) *
                        C50672) *
                       C50790) *
                      C50802 * C50643 -
                  (((C23673 + C23672 + C23671) * C50672 +
                    (C23670 + C23669 + C23668) * C121) *
                       C50790 +
                   ((C22852 * C390 + C22847 * C398 + C22851 * C389 +
                     C50933 * C397 + C22850 * C393 + C50949 * C401) *
                        C50672 +
                    (C22852 * C380 + C22847 * C386 + C22851 * C379 +
                     C50933 * C385 + C22850 * C383 + C50949 * C394) *
                        C121) *
                       C22848) *
                      C50802 * C50898) *
                     C849 +
                 ((((C22850 * C851 + C50949 * C856 + C22851 * C852 +
                     C50933 * C857 + C22852 * C853 + C22847 * C858) *
                        C121 +
                    (C22850 * C860 + C50949 * C866 + C22851 * C861 +
                     C50933 * C867 + C22852 * C862 + C22847 * C868) *
                        C50672) *
                       C22848 +
                   ((C22850 * C972 + C50949 * C976 + C22851 * C971 +
                     C50933 * C975 + C22852 * C970 + C22847 * C974) *
                        C121 +
                    (C22850 * C980 + C50949 * C984 + C22851 * C979 +
                     C50933 * C983 + C22852 * C978 + C22847 * C982) *
                        C50672) *
                       C50790) *
                      C50802 * C50898 -
                  (((C22852 * C977 + C22847 * C981 + C22851 * C978 +
                     C50933 * C982 + C22850 * C979 + C50949 * C983) *
                        C50672 +
                    (C22852 * C969 + C22847 * C973 + C22851 * C970 +
                     C50933 * C974 + C22850 * C971 + C50949 * C975) *
                        C121) *
                       C50790 +
                   ((C22852 * C863 + C22847 * C869 + C22851 * C862 +
                     C50933 * C868 + C22850 * C861 + C50949 * C867) *
                        C50672 +
                    (C22852 * C854 + C22847 * C859 + C22851 * C853 +
                     C50933 * C858 + C22850 * C852 + C50949 * C857) *
                        C121) *
                       C22848) *
                      C50802 * C50643) *
                     C850)) /
                   (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                   C50933 * C130 + C22852 * C124 + C22847 * C131) *
                      C600 +
                  (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                   C50933 * C144 + C22852 * C135 + C22847 * C145) *
                      C595 -
                  (C23036 + C23037 + C23038) * C601 -
                  (C23039 + C23040 + C23041) * C596 +
                  (C23370 + C23371 + C23372) * C602 +
                  (C23373 + C23374 + C23375) * C597 -
                  (C23492 + C23493 + C23494) * C603 -
                  (C23495 + C23496 + C23497) * C598) *
                     C22848 +
                 ((C23038 + C23037 + C23036) * C600 +
                  (C23041 + C23040 + C23039) * C595 -
                  (C23372 + C23371 + C23370) * C601 -
                  (C23375 + C23374 + C23373) * C596 +
                  (C23494 + C23493 + C23492) * C602 +
                  (C23497 + C23496 + C23495) * C597 -
                  (C22852 * C2805 + C22847 * C2808 + C22851 * C2806 +
                   C50933 * C2809 + C22850 * C2807 + C50949 * C2810) *
                      C603 -
                  (C22852 * C2811 + C22847 * C2814 + C22851 * C2812 +
                   C50933 * C2815 + C22850 * C2813 + C50949 * C2816) *
                      C598) *
                     C50790) *
                C50802 * C50638 * C50702) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                    C50933 * C130 + C22852 * C124 + C22847 * C131) *
                       C253 +
                   (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                    C50933 * C144 + C22852 * C135 + C22847 * C145) *
                       C50905 -
                   (C23036 + C23037 + C23038) * C254 -
                   (C23039 + C23040 + C23041) * C50688) *
                      C22848 +
                  ((C23038 + C23037 + C23036) * C253 +
                   (C23041 + C23040 + C23039) * C50905 -
                   (C22852 * C511 + C22847 * C516 + C22851 * C510 +
                    C50933 * C515 + C22850 * C509 + C50949 * C514) *
                       C254 -
                   (C22852 * C520 + C22847 * C526 + C22851 * C519 +
                    C50933 * C525 + C22850 * C518 + C50949 * C524) *
                       C50688) *
                      C50790) *
                     C50802 * C250 +
                 (((C23042 + C23043 + C23044) * C254 -
                   ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                     C50933 * C145 + C22850 * C134 + C50949 * C144) *
                        C50905 +
                    (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                     C50933 * C131 + C22850 * C123 + C50949 * C130) *
                        C253) +
                   (C23045 + C23046 + C23047) * C50688) *
                      C22848 +
                  ((C22850 * C510 + C50949 * C515 + C22851 * C511 +
                    C50933 * C516 + C22852 * C512 + C22847 * C517) *
                       C254 -
                   ((C23047 + C23046 + C23045) * C50905 +
                    (C23044 + C23043 + C23042) * C253) +
                   (C22850 * C519 + C50949 * C525 + C22851 * C520 +
                    C50933 * C526 + C22852 * C521 + C22847 * C527) *
                       C50688) *
                      C50790) *
                     C50802 * C251 +
                 (((C22850 * C124 + C50949 * C131 + C22851 * C125 +
                    C50933 * C132 + C22852 * C126 + C22847 * C138) *
                       C253 +
                   (C22850 * C135 + C50949 * C145 + C22851 * C136 +
                    C50933 * C146 + C22852 * C137 + C22847 * C147) *
                       C50905 -
                   (C23048 + C23049 + C23050) * C254 -
                   (C23051 + C23052 + C23053) * C50688) *
                      C22848 +
                  ((C23050 + C23049 + C23048) * C253 +
                   (C23053 + C23052 + C23051) * C50905 -
                   (C22852 * C513 + C22847 * C522 + C22851 * C512 +
                    C50933 * C517 + C22850 * C511 + C50949 * C516) *
                       C254 -
                   (C22852 * C523 + C22847 * C528 + C22851 * C521 +
                    C50933 * C527 + C22850 * C520 + C50949 * C526) *
                       C50688) *
                      C50790) *
                     C50802 * C252) *
                C50702) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                    C50933 * C130 + C22852 * C124 + C22847 * C131) *
                       C253 +
                   (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                    C50933 * C144 + C22852 * C135 + C22847 * C145) *
                       C50905 -
                   (C23036 + C23037 + C23038) * C254 -
                   (C23039 + C23040 + C23041) * C50688) *
                      C22848 +
                  ((C23038 + C23037 + C23036) * C253 +
                   (C23041 + C23040 + C23039) * C50905 -
                   (C23372 + C23371 + C23370) * C254 -
                   (C23375 + C23374 + C23373) * C50688) *
                      C50790) *
                     C50802 * C50638 * C848 +
                 (((C23668 + C23669 + C23670) * C254 -
                   ((C22852 * C390 + C22847 * C398 + C22851 * C389 +
                     C50933 * C397 + C22850 * C393 + C50949 * C401) *
                        C50905 +
                    (C22852 * C380 + C22847 * C386 + C22851 * C379 +
                     C50933 * C385 + C22850 * C383 + C50949 * C394) *
                        C253) +
                   (C23671 + C23672 + C23673) * C50688) *
                      C22848 +
                  ((C23676 + C23675 + C23674) * C254 -
                   ((C23673 + C23672 + C23671) * C50905 +
                    (C23670 + C23669 + C23668) * C253) +
                   (C23679 + C23678 + C23677) * C50688) *
                      C50790) *
                     C50802 * C50638 * C849 +
                 (((C22850 * C851 + C50949 * C856 + C22851 * C852 +
                    C50933 * C857 + C22852 * C853 + C22847 * C858) *
                       C253 +
                   (C22850 * C860 + C50949 * C866 + C22851 * C861 +
                    C50933 * C867 + C22852 * C862 + C22847 * C868) *
                       C50905 -
                   (C23984 + C23985 + C23986) * C254 -
                   (C23987 + C23988 + C23989) * C50688) *
                      C22848 +
                  ((C23986 + C23985 + C23984) * C253 +
                   (C23989 + C23988 + C23987) * C50905 -
                   (C22852 * C3321 + C22847 * C3324 + C22851 * C3322 +
                    C50933 * C3325 + C22850 * C3323 + C50949 * C3326) *
                       C254 -
                   (C22852 * C3327 + C22847 * C3330 + C22851 * C3328 +
                    C50933 * C3331 + C22850 * C3329 + C50949 * C3332) *
                       C50688) *
                      C50790) *
                     C50802 * C50638 * C850)) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                    C50933 * C130 + C22852 * C124 + C22847 * C131) *
                       C506 +
                   (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                    C50933 * C144 + C22852 * C135 + C22847 * C145) *
                       C501 -
                   (C23036 + C23037 + C23038) * C507 -
                   (C23039 + C23040 + C23041) * C502 +
                   (C23370 + C23371 + C23372) * C508 +
                   (C23373 + C23374 + C23375) * C503) *
                      C22848 +
                  ((C23038 + C23037 + C23036) * C506 +
                   (C23041 + C23040 + C23039) * C501 -
                   (C23372 + C23371 + C23370) * C507 -
                   (C23375 + C23374 + C23373) * C502 +
                   (C23494 + C23493 + C23492) * C508 +
                   (C23497 + C23496 + C23495) * C503) *
                      C50790) *
                     C50802 * C50638 * C50907 +
                 (((C23668 + C23669 + C23670) * C507 -
                   ((C22852 * C390 + C22847 * C398 + C22851 * C389 +
                     C50933 * C397 + C22850 * C393 + C50949 * C401) *
                        C501 +
                    (C22852 * C380 + C22847 * C386 + C22851 * C379 +
                     C50933 * C385 + C22850 * C383 + C50949 * C394) *
                        C506) +
                   (C23671 + C23672 + C23673) * C502 -
                   (C23674 + C23675 + C23676) * C508 -
                   (C23677 + C23678 + C23679) * C503) *
                      C22848 +
                  ((C23676 + C23675 + C23674) * C507 -
                   ((C23673 + C23672 + C23671) * C501 +
                    (C23670 + C23669 + C23668) * C506) +
                   (C23679 + C23678 + C23677) * C502 -
                   (C22852 * C2981 + C22847 * C2984 + C22851 * C2982 +
                    C50933 * C2985 + C22850 * C2983 + C50949 * C2986) *
                       C508 -
                   (C22852 * C2987 + C22847 * C2990 + C22851 * C2988 +
                    C50933 * C2991 + C22850 * C2989 + C50949 * C2992) *
                       C503) *
                      C50790) *
                     C50802 * C50638 * C50714)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                     C50933 * C130 + C22852 * C124 + C22847 * C131) *
                        C121 +
                    (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                     C50933 * C144 + C22852 * C135 + C22847 * C145) *
                        C50672) *
                       C22848 +
                   ((C23038 + C23037 + C23036) * C121 +
                    (C23041 + C23040 + C23039) * C50672) *
                       C50790) *
                      C50802 * C250 -
                  (((C23047 + C23046 + C23045) * C50672 +
                    (C23044 + C23043 + C23042) * C121) *
                       C50790 +
                   ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                     C50933 * C145 + C22850 * C134 + C50949 * C144) *
                        C50672 +
                    (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                     C50933 * C131 + C22850 * C123 + C50949 * C130) *
                        C121) *
                       C22848) *
                      C50802 * C251 +
                  (((C22850 * C124 + C50949 * C131 + C22851 * C125 +
                     C50933 * C132 + C22852 * C126 + C22847 * C138) *
                        C121 +
                    (C22850 * C135 + C50949 * C145 + C22851 * C136 +
                     C50933 * C146 + C22852 * C137 + C22847 * C147) *
                        C50672) *
                       C22848 +
                   ((C23050 + C23049 + C23048) * C121 +
                    (C23053 + C23052 + C23051) * C50672) *
                       C50790) *
                      C50802 * C252) *
                     C50907 +
                 ((((C22850 * C379 + C50949 * C385 + C22851 * C380 +
                     C50933 * C386 + C22852 * C381 + C22847 * C387) *
                        C121 +
                    (C22850 * C389 + C50949 * C397 + C22851 * C390 +
                     C50933 * C398 + C22852 * C391 + C22847 * C399) *
                        C50672) *
                       C22848 +
                   ((C22850 * C719 + C50949 * C727 + C22851 * C720 +
                     C50933 * C728 + C22852 * C721 + C22847 * C729) *
                        C121 +
                    (C22850 * C731 + C50949 * C743 + C22851 * C732 +
                     C50933 * C744 + C22852 * C733 + C22847 * C745) *
                        C50672) *
                       C50790) *
                      C50802 * C251 -
                  (((C22852 * C732 + C22847 * C744 + C22851 * C731 +
                     C50933 * C743 + C22850 * C730 + C50949 * C742) *
                        C50672 +
                    (C22852 * C720 + C22847 * C728 + C22851 * C719 +
                     C50933 * C727 + C22850 * C718 + C50949 * C726) *
                        C121) *
                       C50790 +
                   ((C22852 * C390 + C22847 * C398 + C22851 * C389 +
                     C50933 * C397 + C22850 * C393 + C50949 * C401) *
                        C50672 +
                    (C22852 * C380 + C22847 * C386 + C22851 * C379 +
                     C50933 * C385 + C22850 * C383 + C50949 * C394) *
                        C121) *
                       C22848) *
                      C50802 * C250 -
                  (((C22852 * C1414 + C22847 * C1415 + C22851 * C733 +
                     C50933 * C745 + C22850 * C732 + C50949 * C744) *
                        C50672 +
                    (C22852 * C1412 + C22847 * C1413 + C22851 * C721 +
                     C50933 * C729 + C22850 * C720 + C50949 * C728) *
                        C121) *
                       C50790 +
                   ((C22852 * C392 + C22847 * C400 + C22851 * C391 +
                     C50933 * C399 + C22850 * C390 + C50949 * C398) *
                        C50672 +
                    (C22852 * C382 + C22847 * C388 + C22851 * C381 +
                     C50933 * C387 + C22850 * C380 + C50949 * C386) *
                        C121) *
                       C22848) *
                      C50802 * C252) *
                     C50714)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                    C50933 * C130 + C22852 * C124 + C22847 * C131) *
                       C121 +
                   (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                    C50933 * C144 + C22852 * C135 + C22847 * C145) *
                       C50672) *
                      C22848 +
                  ((C23038 + C23037 + C23036) * C121 +
                   (C23041 + C23040 + C23039) * C50672) *
                      C50790) *
                     C50802 * C50638 * C1051 -
                 (((C23673 + C23672 + C23671) * C50672 +
                   (C23670 + C23669 + C23668) * C121) *
                      C50790 +
                  ((C22852 * C390 + C22847 * C398 + C22851 * C389 +
                    C50933 * C397 + C22850 * C393 + C50949 * C401) *
                       C50672 +
                   (C22852 * C380 + C22847 * C386 + C22851 * C379 +
                    C50933 * C385 + C22850 * C383 + C50949 * C394) *
                       C121) *
                      C22848) *
                     C50802 * C50638 * C1052 +
                 (((C22850 * C851 + C50949 * C856 + C22851 * C852 +
                    C50933 * C857 + C22852 * C853 + C22847 * C858) *
                       C121 +
                   (C22850 * C860 + C50949 * C866 + C22851 * C861 +
                    C50933 * C867 + C22852 * C862 + C22847 * C868) *
                       C50672) *
                      C22848 +
                  ((C23986 + C23985 + C23984) * C121 +
                   (C23989 + C23988 + C23987) * C50672) *
                      C50790) *
                     C50802 * C50638 * C1053 -
                 (((C22852 * C3452 + C22847 * C3458 + C22851 * C3453 +
                    C50933 * C3459 + C22850 * C3454 + C50949 * C3460) *
                       C50672 +
                   (C22852 * C3449 + C22847 * C3455 + C22851 * C3450 +
                    C50933 * C3456 + C22850 * C3451 + C50949 * C3457) *
                       C121) *
                      C50790 +
                  ((C22852 * C1060 + C22847 * C1068 + C22851 * C1061 +
                    C50933 * C1069 + C22850 * C1062 + C50949 * C1070) *
                       C50672 +
                   (C22852 * C1056 + C22847 * C1064 + C22851 * C1057 +
                    C50933 * C1065 + C22850 * C1058 + C50949 * C1066) *
                       C121) *
                      C22848) *
                     C50802 * C50638 * C1054)) /
                   (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                     C50933 * C130 + C22852 * C124 + C22847 * C131) *
                        C121 +
                    (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                     C50933 * C144 + C22852 * C135 + C22847 * C145) *
                        C50672) *
                       C22848 +
                   ((C23038 + C23037 + C23036) * C121 +
                    (C23041 + C23040 + C23039) * C50672) *
                       C50790) *
                      C50802 * C50950 -
                  (((C23047 + C23046 + C23045) * C50672 +
                    (C23044 + C23043 + C23042) * C121) *
                       C50790 +
                   ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                     C50933 * C145 + C22850 * C134 + C50949 * C144) *
                        C50672 +
                    (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                     C50933 * C131 + C22850 * C123 + C50949 * C130) *
                        C121) *
                       C22848) *
                      C50802 * C50936 +
                  (((C22850 * C124 + C50949 * C131 + C22851 * C125 +
                     C50933 * C132 + C22852 * C126 + C22847 * C138) *
                        C121 +
                    (C22850 * C135 + C50949 * C145 + C22851 * C136 +
                     C50933 * C146 + C22852 * C137 + C22847 * C147) *
                        C50672) *
                       C22848 +
                   ((C23050 + C23049 + C23048) * C121 +
                    (C23053 + C23052 + C23051) * C50672) *
                       C50790) *
                      C50802 * C1173) *
                     C1514 +
                 ((((C22850 * C379 + C50949 * C385 + C22851 * C380 +
                     C50933 * C386 + C22852 * C381 + C22847 * C387) *
                        C121 +
                    (C22850 * C389 + C50949 * C397 + C22851 * C390 +
                     C50933 * C398 + C22852 * C391 + C22847 * C399) *
                        C50672) *
                       C22848 +
                   ((C24588 + C24587 + C24586) * C121 +
                    (C24591 + C24590 + C24589) * C50672) *
                       C50790) *
                      C50802 * C50936 -
                  (((C23673 + C23672 + C23671) * C50672 +
                    (C23670 + C23669 + C23668) * C121) *
                       C50790 +
                   ((C22852 * C390 + C22847 * C398 + C22851 * C389 +
                     C50933 * C397 + C22850 * C393 + C50949 * C401) *
                        C50672 +
                    (C22852 * C380 + C22847 * C386 + C22851 * C379 +
                     C50933 * C385 + C22850 * C383 + C50949 * C394) *
                        C121) *
                       C22848) *
                      C50802 * C50950 -
                  (((C22852 * C1414 + C22847 * C1415 + C22851 * C733 +
                     C50933 * C745 + C22850 * C732 + C50949 * C744) *
                        C50672 +
                    (C22852 * C1412 + C22847 * C1413 + C22851 * C721 +
                     C50933 * C729 + C22850 * C720 + C50949 * C728) *
                        C121) *
                       C50790 +
                   ((C22852 * C392 + C22847 * C400 + C22851 * C391 +
                     C50933 * C399 + C22850 * C390 + C50949 * C398) *
                        C50672 +
                    (C22852 * C382 + C22847 * C388 + C22851 * C381 +
                     C50933 * C387 + C22850 * C380 + C50949 * C386) *
                        C121) *
                       C22848) *
                      C50802 * C1173) *
                     C50714)) /
               (p * q * std::sqrt(p + q));
    d2ee[10] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                      C50933 * C130 + C22852 * C124 + C22847 * C131) *
                         C253 +
                     (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                      C50933 * C144 + C22852 * C135 + C22847 * C145) *
                         C50905 -
                     (C23036 + C23037 + C23038) * C254 -
                     (C23039 + C23040 + C23041) * C50688) *
                        C22848 +
                    ((C23038 + C23037 + C23036) * C253 +
                     (C23041 + C23040 + C23039) * C50905 -
                     (C23372 + C23371 + C23370) * C254 -
                     (C23375 + C23374 + C23373) * C50688) *
                        C50790) *
                       C50802 * C1277 +
                   (((C23042 + C23043 + C23044) * C254 -
                     ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                       C50933 * C145 + C22850 * C134 + C50949 * C144) *
                          C50905 +
                      (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                       C50933 * C131 + C22850 * C123 + C50949 * C130) *
                          C253) +
                     (C23045 + C23046 + C23047) * C50688) *
                        C22848 +
                    ((C23378 + C23377 + C23376) * C254 -
                     ((C23047 + C23046 + C23045) * C50905 +
                      (C23044 + C23043 + C23042) * C253) +
                     (C23381 + C23380 + C23379) * C50688) *
                        C50790) *
                       C50802 * C50643) *
                      C1514 +
                  ((((C23668 + C23669 + C23670) * C254 -
                     ((C22852 * C390 + C22847 * C398 + C22851 * C389 +
                       C50933 * C397 + C22850 * C393 + C50949 * C401) *
                          C50905 +
                      (C22852 * C380 + C22847 * C386 + C22851 * C379 +
                       C50933 * C385 + C22850 * C383 + C50949 * C394) *
                          C253) +
                     (C23671 + C23672 + C23673) * C50688) *
                        C22848 +
                    ((C23676 + C23675 + C23674) * C254 -
                     ((C23673 + C23672 + C23671) * C50905 +
                      (C23670 + C23669 + C23668) * C253) +
                     (C23679 + C23678 + C23677) * C50688) *
                        C50790) *
                       C50802 * C1277 +
                   (((C22850 * C379 + C50949 * C385 + C22851 * C380 +
                      C50933 * C386 + C22852 * C381 + C22847 * C387) *
                         C253 +
                     (C22850 * C389 + C50949 * C397 + C22851 * C390 +
                      C50933 * C398 + C22852 * C391 + C22847 * C399) *
                         C50905 -
                     (C24586 + C24587 + C24588) * C254 -
                     (C24589 + C24590 + C24591) * C50688) *
                        C22848 +
                    ((C24588 + C24587 + C24586) * C253 +
                     (C24591 + C24590 + C24589) * C50905 -
                     (C22852 * C722 + C22847 * C734 + C22851 * C723 +
                      C50933 * C735 + C22850 * C724 + C50949 * C736) *
                         C254 -
                     (C22852 * C738 + C22847 * C746 + C22851 * C739 +
                      C50933 * C747 + C22850 * C740 + C50949 * C748) *
                         C50688) *
                        C50790) *
                       C50802 * C50643) *
                      C50714)) /
                (p * q * std::sqrt(p + q));
    d2ee[11] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                      C50933 * C130 + C22852 * C124 + C22847 * C131) *
                         C121 +
                     (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                      C50933 * C144 + C22852 * C135 + C22847 * C145) *
                         C50672) *
                        C22848 +
                    ((C23038 + C23037 + C23036) * C121 +
                     (C23041 + C23040 + C23039) * C50672) *
                        C50790) *
                       C50802 * C1277 -
                   (((C23047 + C23046 + C23045) * C50672 +
                     (C23044 + C23043 + C23042) * C121) *
                        C50790 +
                    ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                      C50933 * C145 + C22850 * C134 + C50949 * C144) *
                         C50672 +
                     (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                      C50933 * C131 + C22850 * C123 + C50949 * C130) *
                         C121) *
                        C22848) *
                       C50802 * C50643) *
                      C50952 +
                  ((((C22850 * C379 + C50949 * C385 + C22851 * C380 +
                      C50933 * C386 + C22852 * C381 + C22847 * C387) *
                         C121 +
                     (C22850 * C389 + C50949 * C397 + C22851 * C390 +
                      C50933 * C398 + C22852 * C391 + C22847 * C399) *
                         C50672) *
                        C22848 +
                    ((C24588 + C24587 + C24586) * C121 +
                     (C24591 + C24590 + C24589) * C50672) *
                        C50790) *
                       C50802 * C50643 -
                   (((C23673 + C23672 + C23671) * C50672 +
                     (C23670 + C23669 + C23668) * C121) *
                        C50790 +
                    ((C22852 * C390 + C22847 * C398 + C22851 * C389 +
                      C50933 * C397 + C22850 * C393 + C50949 * C401) *
                         C50672 +
                     (C22852 * C380 + C22847 * C386 + C22851 * C379 +
                      C50933 * C385 + C22850 * C383 + C50949 * C394) *
                         C121) *
                        C22848) *
                       C50802 * C1277) *
                      C50942 +
                  ((((C22850 * C851 + C50949 * C856 + C22851 * C852 +
                      C50933 * C857 + C22852 * C853 + C22847 * C858) *
                         C121 +
                     (C22850 * C860 + C50949 * C866 + C22851 * C861 +
                      C50933 * C867 + C22852 * C862 + C22847 * C868) *
                         C50672) *
                        C22848 +
                    ((C23986 + C23985 + C23984) * C121 +
                     (C23989 + C23988 + C23987) * C50672) *
                        C50790) *
                       C50802 * C1277 -
                   (((C22852 * C977 + C22847 * C981 + C22851 * C978 +
                      C50933 * C982 + C22850 * C979 + C50949 * C983) *
                         C50672 +
                     (C22852 * C969 + C22847 * C973 + C22851 * C970 +
                      C50933 * C974 + C22850 * C971 + C50949 * C975) *
                         C121) *
                        C50790 +
                    ((C22852 * C863 + C22847 * C869 + C22851 * C862 +
                      C50933 * C868 + C22850 * C861 + C50949 * C867) *
                         C50672 +
                     (C22852 * C854 + C22847 * C859 + C22851 * C853 +
                      C50933 * C858 + C22850 * C852 + C50949 * C857) *
                         C121) *
                        C22848) *
                       C50802 * C50643) *
                      C1746)) /
                (p * q * std::sqrt(p + q));
    d2ee[12] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                     C50933 * C130 + C22852 * C124 + C22847 * C131) *
                        C121 +
                    (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                     C50933 * C144 + C22852 * C135 + C22847 * C145) *
                        C50672) *
                       C22848 +
                   ((C22850 * C258 + C50949 * C264 + C22851 * C257 +
                     C50933 * C263 + C22852 * C256 + C22847 * C262) *
                        C121 +
                    (C22850 * C268 + C50949 * C276 + C22851 * C267 +
                     C50933 * C275 + C22852 * C266 + C22847 * C274) *
                        C50672) *
                       C50790) *
                      C50802 * C112 -
                  (((C22852 * C265 + C22847 * C273 + C22851 * C266 +
                     C50933 * C274 + C22850 * C267 + C50949 * C275) *
                        C50672 +
                    (C22852 * C255 + C22847 * C261 + C22851 * C256 +
                     C50933 * C262 + C22850 * C257 + C50949 * C263) *
                        C121) *
                       C50790 +
                   ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                     C50933 * C145 + C22850 * C134 + C50949 * C144) *
                        C50672 +
                    (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                     C50933 * C131 + C22850 * C123 + C50949 * C130) *
                        C121) *
                       C22848) *
                      C50802 * C113 +
                  (((C22850 * C124 + C50949 * C131 + C22851 * C125 +
                     C50933 * C132 + C22852 * C126 + C22847 * C138) *
                        C121 +
                    (C22850 * C135 + C50949 * C145 + C22851 * C136 +
                     C50933 * C146 + C22852 * C137 + C22847 * C147) *
                        C50672) *
                       C22848 +
                   ((C22850 * C256 + C50949 * C262 + C22851 * C255 +
                     C50933 * C261 + C22852 * C259 + C22847 * C269) *
                        C121 +
                    (C22850 * C266 + C50949 * C274 + C22851 * C265 +
                     C50933 * C273 + C22852 * C270 + C22847 * C277) *
                        C50672) *
                       C50790) *
                      C50802 * C114 -
                  (((C22852 * C272 + C22847 * C278 + C22851 * C270 +
                     C50933 * C277 + C22850 * C265 + C50949 * C273) *
                        C50672 +
                    (C22852 * C260 + C22847 * C271 + C22851 * C259 +
                     C50933 * C269 + C22850 * C255 + C50949 * C261) *
                        C121) *
                       C50790 +
                   ((C22852 * C140 + C22847 * C148 + C22851 * C137 +
                     C50933 * C147 + C22850 * C136 + C50949 * C146) *
                        C50672 +
                    (C22852 * C127 + C22847 * C139 + C22851 * C126 +
                     C50933 * C138 + C22850 * C125 + C50949 * C132) *
                        C121) *
                       C22848) *
                      C50802 * C115) *
                 C50702) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                     C50933 * C130 + C22852 * C124 + C22847 * C131) *
                        C506 +
                    (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                     C50933 * C144 + C22852 * C135 + C22847 * C145) *
                        C501 -
                    (C23036 + C23037 + C23038) * C507 -
                    (C23039 + C23040 + C23041) * C502 +
                    (C23370 + C23371 + C23372) * C508 +
                    (C23373 + C23374 + C23375) * C503) *
                       C22848 +
                   ((C23038 + C23037 + C23036) * C506 +
                    (C23041 + C23040 + C23039) * C501 -
                    (C23372 + C23371 + C23370) * C507 -
                    (C23375 + C23374 + C23373) * C502 +
                    (C22850 * C607 + C50949 * C611 + C22851 * C606 +
                     C50933 * C610 + C22852 * C605 + C22847 * C609) *
                        C508 +
                    (C22850 * C615 + C50949 * C619 + C22851 * C614 +
                     C50933 * C618 + C22852 * C613 + C22847 * C617) *
                        C503) *
                       C50790) *
                      C50802 * C50898 +
                  (((C23042 + C23043 + C23044) * C507 -
                    ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                      C50933 * C145 + C22850 * C134 + C50949 * C144) *
                         C501 +
                     (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                      C50933 * C131 + C22850 * C123 + C50949 * C130) *
                         C506) +
                    (C23045 + C23046 + C23047) * C502 -
                    (C23376 + C23377 + C23378) * C508 -
                    (C23379 + C23380 + C23381) * C503) *
                       C22848 +
                   ((C23378 + C23377 + C23376) * C507 -
                    ((C23047 + C23046 + C23045) * C501 +
                     (C23044 + C23043 + C23042) * C506) +
                    (C23381 + C23380 + C23379) * C502 -
                    (C22852 * C604 + C22847 * C608 + C22851 * C605 +
                     C50933 * C609 + C22850 * C606 + C50949 * C610) *
                        C508 -
                    (C22852 * C612 + C22847 * C616 + C22851 * C613 +
                     C50933 * C617 + C22850 * C614 + C50949 * C618) *
                        C503) *
                       C50790) *
                      C50802 * C50643) *
                 C50702) /
                    (p * q * std::sqrt(p + q));
    d2ee[13] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                     C50933 * C130 + C22852 * C124 + C22847 * C131) *
                        C253 +
                    (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                     C50933 * C144 + C22852 * C135 + C22847 * C145) *
                        C50905 -
                    (C23036 + C23037 + C23038) * C254 -
                    (C23039 + C23040 + C23041) * C50688) *
                       C22848 +
                   ((C23038 + C23037 + C23036) * C253 +
                    (C23041 + C23040 + C23039) * C50905 -
                    (C22852 * C511 + C22847 * C516 + C22851 * C510 +
                     C50933 * C515 + C22850 * C509 + C50949 * C514) *
                        C254 -
                    (C22852 * C520 + C22847 * C526 + C22851 * C519 +
                     C50933 * C525 + C22850 * C518 + C50949 * C524) *
                        C50688) *
                       C50790) *
                      C50802 * C250 +
                  (((C23042 + C23043 + C23044) * C254 -
                    ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                      C50933 * C145 + C22850 * C134 + C50949 * C144) *
                         C50905 +
                     (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                      C50933 * C131 + C22850 * C123 + C50949 * C130) *
                         C253) +
                    (C23045 + C23046 + C23047) * C50688) *
                       C22848 +
                   ((C22850 * C510 + C50949 * C515 + C22851 * C511 +
                     C50933 * C516 + C22852 * C512 + C22847 * C517) *
                        C254 -
                    ((C23047 + C23046 + C23045) * C50905 +
                     (C23044 + C23043 + C23042) * C253) +
                    (C22850 * C519 + C50949 * C525 + C22851 * C520 +
                     C50933 * C526 + C22852 * C521 + C22847 * C527) *
                        C50688) *
                       C50790) *
                      C50802 * C251 +
                  (((C22850 * C124 + C50949 * C131 + C22851 * C125 +
                     C50933 * C132 + C22852 * C126 + C22847 * C138) *
                        C253 +
                    (C22850 * C135 + C50949 * C145 + C22851 * C136 +
                     C50933 * C146 + C22852 * C137 + C22847 * C147) *
                        C50905 -
                    (C23048 + C23049 + C23050) * C254 -
                    (C23051 + C23052 + C23053) * C50688) *
                       C22848 +
                   ((C23050 + C23049 + C23048) * C253 +
                    (C23053 + C23052 + C23051) * C50905 -
                    (C22852 * C513 + C22847 * C522 + C22851 * C512 +
                     C50933 * C517 + C22850 * C511 + C50949 * C516) *
                        C254 -
                    (C22852 * C523 + C22847 * C528 + C22851 * C521 +
                     C50933 * C527 + C22850 * C520 + C50949 * C526) *
                        C50688) *
                       C50790) *
                      C50802 * C252) *
                 C50702) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                    C50933 * C130 + C22852 * C124 + C22847 * C131) *
                       C600 +
                   (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                    C50933 * C144 + C22852 * C135 + C22847 * C145) *
                       C595 -
                   (C23036 + C23037 + C23038) * C601 -
                   (C23039 + C23040 + C23041) * C596 +
                   (C23370 + C23371 + C23372) * C602 +
                   (C23373 + C23374 + C23375) * C597 -
                   (C23492 + C23493 + C23494) * C603 -
                   (C23495 + C23496 + C23497) * C598) *
                      C22848 +
                  ((C23038 + C23037 + C23036) * C600 +
                   (C23041 + C23040 + C23039) * C595 -
                   (C23372 + C23371 + C23370) * C601 -
                   (C23375 + C23374 + C23373) * C596 +
                   (C23494 + C23493 + C23492) * C602 +
                   (C23497 + C23496 + C23495) * C597 -
                   (C22852 * C2805 + C22847 * C2808 + C22851 * C2806 +
                    C50933 * C2809 + C22850 * C2807 + C50949 * C2810) *
                       C603 -
                   (C22852 * C2811 + C22847 * C2814 + C22851 * C2812 +
                    C50933 * C2815 + C22850 * C2813 + C50949 * C2816) *
                       C598) *
                      C50790) *
                 C50802 * C50638 * C50702) /
                    (p * q * std::sqrt(p + q));
    d2ee[14] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                      C50933 * C130 + C22852 * C124 + C22847 * C131) *
                         C121 +
                     (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                      C50933 * C144 + C22852 * C135 + C22847 * C145) *
                         C50672) *
                        C22848 +
                    ((C23038 + C23037 + C23036) * C121 +
                     (C23041 + C23040 + C23039) * C50672) *
                        C50790) *
                       C50802 * C250 -
                   (((C23047 + C23046 + C23045) * C50672 +
                     (C23044 + C23043 + C23042) * C121) *
                        C50790 +
                    ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                      C50933 * C145 + C22850 * C134 + C50949 * C144) *
                         C50672 +
                     (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                      C50933 * C131 + C22850 * C123 + C50949 * C130) *
                         C121) *
                        C22848) *
                       C50802 * C251 +
                   (((C22850 * C124 + C50949 * C131 + C22851 * C125 +
                      C50933 * C132 + C22852 * C126 + C22847 * C138) *
                         C121 +
                     (C22850 * C135 + C50949 * C145 + C22851 * C136 +
                      C50933 * C146 + C22852 * C137 + C22847 * C147) *
                         C50672) *
                        C22848 +
                    ((C23050 + C23049 + C23048) * C121 +
                     (C23053 + C23052 + C23051) * C50672) *
                        C50790) *
                       C50802 * C252) *
                      C50907 +
                  ((((C22850 * C379 + C50949 * C385 + C22851 * C380 +
                      C50933 * C386 + C22852 * C381 + C22847 * C387) *
                         C121 +
                     (C22850 * C389 + C50949 * C397 + C22851 * C390 +
                      C50933 * C398 + C22852 * C391 + C22847 * C399) *
                         C50672) *
                        C22848 +
                    ((C22850 * C719 + C50949 * C727 + C22851 * C720 +
                      C50933 * C728 + C22852 * C721 + C22847 * C729) *
                         C121 +
                     (C22850 * C731 + C50949 * C743 + C22851 * C732 +
                      C50933 * C744 + C22852 * C733 + C22847 * C745) *
                         C50672) *
                        C50790) *
                       C50802 * C251 -
                   (((C22852 * C732 + C22847 * C744 + C22851 * C731 +
                      C50933 * C743 + C22850 * C730 + C50949 * C742) *
                         C50672 +
                     (C22852 * C720 + C22847 * C728 + C22851 * C719 +
                      C50933 * C727 + C22850 * C718 + C50949 * C726) *
                         C121) *
                        C50790 +
                    ((C22852 * C390 + C22847 * C398 + C22851 * C389 +
                      C50933 * C397 + C22850 * C393 + C50949 * C401) *
                         C50672 +
                     (C22852 * C380 + C22847 * C386 + C22851 * C379 +
                      C50933 * C385 + C22850 * C383 + C50949 * C394) *
                         C121) *
                        C22848) *
                       C50802 * C250 -
                   (((C22852 * C1414 + C22847 * C1415 + C22851 * C733 +
                      C50933 * C745 + C22850 * C732 + C50949 * C744) *
                         C50672 +
                     (C22852 * C1412 + C22847 * C1413 + C22851 * C721 +
                      C50933 * C729 + C22850 * C720 + C50949 * C728) *
                         C121) *
                        C50790 +
                    ((C22852 * C392 + C22847 * C400 + C22851 * C391 +
                      C50933 * C399 + C22850 * C390 + C50949 * C398) *
                         C50672 +
                     (C22852 * C382 + C22847 * C388 + C22851 * C381 +
                      C50933 * C387 + C22850 * C380 + C50949 * C386) *
                         C121) *
                        C22848) *
                       C50802 * C252) *
                      C50714)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                     C50933 * C130 + C22852 * C124 + C22847 * C131) *
                        C506 +
                    (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                     C50933 * C144 + C22852 * C135 + C22847 * C145) *
                        C501 -
                    (C23036 + C23037 + C23038) * C507 -
                    (C23039 + C23040 + C23041) * C502 +
                    (C23370 + C23371 + C23372) * C508 +
                    (C23373 + C23374 + C23375) * C503) *
                       C22848 +
                   ((C23038 + C23037 + C23036) * C506 +
                    (C23041 + C23040 + C23039) * C501 -
                    (C23372 + C23371 + C23370) * C507 -
                    (C23375 + C23374 + C23373) * C502 +
                    (C23494 + C23493 + C23492) * C508 +
                    (C23497 + C23496 + C23495) * C503) *
                       C50790) *
                      C50802 * C50638 * C50907 +
                  (((C23668 + C23669 + C23670) * C507 -
                    ((C22852 * C390 + C22847 * C398 + C22851 * C389 +
                      C50933 * C397 + C22850 * C393 + C50949 * C401) *
                         C501 +
                     (C22852 * C380 + C22847 * C386 + C22851 * C379 +
                      C50933 * C385 + C22850 * C383 + C50949 * C394) *
                         C506) +
                    (C23671 + C23672 + C23673) * C502 -
                    (C23674 + C23675 + C23676) * C508 -
                    (C23677 + C23678 + C23679) * C503) *
                       C22848 +
                   ((C23676 + C23675 + C23674) * C507 -
                    ((C23673 + C23672 + C23671) * C501 +
                     (C23670 + C23669 + C23668) * C506) +
                    (C23679 + C23678 + C23677) * C502 -
                    (C22852 * C2981 + C22847 * C2984 + C22851 * C2982 +
                     C50933 * C2985 + C22850 * C2983 + C50949 * C2986) *
                        C508 -
                    (C22852 * C2987 + C22847 * C2990 + C22851 * C2988 +
                     C50933 * C2991 + C22850 * C2989 + C50949 * C2992) *
                        C503) *
                       C50790) *
                      C50802 * C50638 * C50714)) /
                    (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C1174 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C1169 -
            (C25863 + C25864) * C1175 - (C25865 + C25866) * C50688) *
               C50953 +
           ((C25864 + C25863) * C1174 + (C25866 + C25865) * C1169 -
            (C25867 + C25868) * C1175 - (C25869 + C25870) * C50688) *
               C50945 +
           (C26179 * C1174 + C26180 * C1169 - C26305 * C1175 -
            C26306 * C50688) *
               C25665) *
              C50802 * C50950 +
          (((C25871 + C25872) * C1175 -
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C1169 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C1174) +
            (C25873 + C25874) * C50688) *
               C50953 +
           ((C25875 + C25876) * C1175 -
            ((C25874 + C25873) * C1169 + (C25872 + C25871) * C1174) +
            (C25877 + C25878) * C50688) *
               C50945 +
           ((C26204 + C26203) * C1175 - (C26190 * C1169 + C26189 * C1174) +
            (C26206 + C26205) * C50688) *
               C25665) *
              C50802 * C50936 +
          (((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                C1174 +
            (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                C1169 -
            (C25879 + C25880) * C1175 - (C25881 + C25882) * C50688) *
               C50953 +
           ((C25880 + C25879) * C1174 + (C25882 + C25881) * C1169 -
            (C25883 + C25884) * C1175 - (C25885 + C25886) * C50688) *
               C50945 +
           ((C25884 + C25883) * C1174 + (C25886 + C25885) * C1169 -
            (C25667 * C604 + C50617 * C608 + C25666 * C605 + C25661 * C609) *
                C1175 -
            (C25667 * C612 + C50617 * C616 + C25666 * C613 + C25661 * C617) *
                C50688) *
               C25665) *
              C50802 * C1173) *
         C50702) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C1279 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C50951 -
            (C25863 + C25864) * C1280 - (C25865 + C25866) * C50939 +
            C26179 * C1281 + C26180 * C1276) *
               C50953 +
           ((C25864 + C25863) * C1279 + (C25866 + C25865) * C50951 -
            (C25867 + C25868) * C1280 - (C25869 + C25870) * C50939 +
            (C26199 + C26200) * C1281 + (C26201 + C26202) * C1276) *
               C50945 +
           (C26179 * C1279 + C26180 * C50951 - C26305 * C1280 -
            C26306 * C50939 + (C26316 + C26315) * C1281 +
            (C26318 + C26317) * C1276) *
               C25665) *
              C50802 * C1277 +
          (((C25871 + C25872) * C1280 -
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50951 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C1279) +
            (C25873 + C25874) * C50939 - C26189 * C1281 - C26190 * C1276) *
               C50953 +
           ((C25875 + C25876) * C1280 -
            ((C25874 + C25873) * C50951 + (C25872 + C25871) * C1279) +
            (C25877 + C25878) * C50939 - (C26203 + C26204) * C1281 -
            (C26205 + C26206) * C1276) *
               C50945 +
           ((C26204 + C26203) * C1280 - (C26190 * C50951 + C26189 * C1279) +
            (C26206 + C26205) * C50939 -
            (C25667 * C2805 + C50617 * C2808 + C25666 * C2806 +
             C25661 * C2809) *
                C1281 -
            (C25667 * C2811 + C50617 * C2814 + C25666 * C2812 +
             C25661 * C2815) *
                C1276) *
               C25665) *
              C50802 * C50643) *
         C50702) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C1174 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C1169 -
             (C25863 + C25864) * C1175 - (C25865 + C25866) * C50688) *
                C50953 +
            ((C25864 + C25863) * C1174 + (C25866 + C25865) * C1169 -
             (C25867 + C25868) * C1175 - (C25869 + C25870) * C50688) *
                C50945 +
            (C26179 * C1174 + C26180 * C1169 - C26305 * C1175 -
             C26306 * C50688) *
                C25665) *
               C50802 * C1277 +
           (((C25871 + C25872) * C1175 -
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C1169 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C1174) +
             (C25873 + C25874) * C50688) *
                C50953 +
            ((C25875 + C25876) * C1175 -
             ((C25874 + C25873) * C1169 + (C25872 + C25871) * C1174) +
             (C25877 + C25878) * C50688) *
                C50945 +
            ((C26204 + C26203) * C1175 - (C26190 * C1169 + C26189 * C1174) +
             (C26206 + C26205) * C50688) *
                C25665) *
               C50802 * C50643) *
              C50907 +
          ((((C26489 + C26490) * C1175 -
             ((C25667 * C389 + C50617 * C397 + C25666 * C393 + C25661 * C401) *
                  C1169 +
              (C25667 * C379 + C50617 * C385 + C25666 * C383 + C25661 * C394) *
                  C1174) +
             (C26491 + C26492) * C50688) *
                C50953 +
            ((C26494 + C26493) * C1175 -
             ((C26492 + C26491) * C1169 + (C26490 + C26489) * C1174) +
             (C26496 + C26495) * C50688) *
                C50945 +
            ((C26498 + C26497) * C1175 - (C26502 * C1169 + C26501 * C1174) +
             (C26500 + C26499) * C50688) *
                C25665) *
               C50802 * C1277 +
           (((C25666 * C379 + C25661 * C385 + C25667 * C380 + C50617 * C386) *
                 C1174 +
             (C25666 * C389 + C25661 * C397 + C25667 * C390 + C50617 * C398) *
                 C1169 -
             (C27419 + C27420) * C1175 - (C27421 + C27422) * C50688) *
                C50953 +
            ((C27420 + C27419) * C1174 + (C27422 + C27421) * C1169 -
             (C27423 + C27424) * C1175 - (C27425 + C27426) * C50688) *
                C50945 +
            ((C27424 + C27423) * C1174 + (C27426 + C27425) * C1169 -
             (C25667 * C2981 + C50617 * C2984 + C25666 * C2982 +
              C25661 * C2985) *
                 C1175 -
             (C25667 * C2987 + C50617 * C2990 + C25666 * C2988 +
              C25661 * C2991) *
                 C50688) *
                C25665) *
               C50802 * C50643) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C1174 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C1169 -
             (C25863 + C25864) * C1175 - (C25865 + C25866) * C50688) *
                C50953 +
            ((C25864 + C25863) * C1174 + (C25866 + C25865) * C1169 -
             (C25867 + C25868) * C1175 - (C25869 + C25870) * C50688) *
                C50945 +
            (C26179 * C1174 + C26180 * C1169 - C26305 * C1175 -
             C26306 * C50688) *
                C25665) *
               C50802 * C50898 +
           (((C25871 + C25872) * C1175 -
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C1169 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C1174) +
             (C25873 + C25874) * C50688) *
                C50953 +
            ((C25875 + C25876) * C1175 -
             ((C25874 + C25873) * C1169 + (C25872 + C25871) * C1174) +
             (C25877 + C25878) * C50688) *
                C50945 +
            ((C26204 + C26203) * C1175 - (C26190 * C1169 + C26189 * C1174) +
             (C26206 + C26205) * C50688) *
                C25665) *
               C50802 * C50643) *
              C1514 +
          ((((C26489 + C26490) * C1175 -
             ((C25667 * C389 + C50617 * C397 + C25666 * C393 + C25661 * C401) *
                  C1169 +
              (C25667 * C379 + C50617 * C385 + C25666 * C383 + C25661 * C394) *
                  C1174) +
             (C26491 + C26492) * C50688) *
                C50953 +
            ((C26494 + C26493) * C1175 -
             ((C26492 + C26491) * C1169 + (C26490 + C26489) * C1174) +
             (C26496 + C26495) * C50688) *
                C50945 +
            ((C26498 + C26497) * C1175 - (C26502 * C1169 + C26501 * C1174) +
             (C26500 + C26499) * C50688) *
                C25665) *
               C50802 * C50898 +
           (((C25666 * C379 + C25661 * C385 + C25667 * C380 + C50617 * C386) *
                 C1174 +
             (C25666 * C389 + C25661 * C397 + C25667 * C390 + C50617 * C398) *
                 C1169 -
             (C27419 + C27420) * C1175 - (C27421 + C27422) * C50688) *
                C50953 +
            ((C27420 + C27419) * C1174 + (C27422 + C27421) * C1169 -
             (C27423 + C27424) * C1175 - (C27425 + C27426) * C50688) *
                C50945 +
            ((C27424 + C27423) * C1174 + (C27426 + C27425) * C1169 -
             (C25667 * C2981 + C50617 * C2984 + C25666 * C2982 +
              C25661 * C2985) *
                 C1175 -
             (C25667 * C2987 + C50617 * C2990 + C25666 * C2988 +
              C25661 * C2991) *
                 C50688) *
                C25665) *
               C50802 * C50643) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C1279 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C50951 -
            (C25863 + C25864) * C1280 - (C25865 + C25866) * C50939 +
            C26179 * C1281 + C26180 * C1276) *
               C50953 +
           ((C25864 + C25863) * C1279 + (C25866 + C25865) * C50951 -
            (C25867 + C25868) * C1280 - (C25869 + C25870) * C50939 +
            (C26199 + C26200) * C1281 + (C26201 + C26202) * C1276) *
               C50945 +
           (C26179 * C1279 + C26180 * C50951 - C26305 * C1280 -
            C26306 * C50939 + (C26316 + C26315) * C1281 +
            (C26318 + C26317) * C1276) *
               C25665) *
              C50802 * C50638 * C1514 +
          (((C26489 + C26490) * C1280 -
            ((C25667 * C389 + C50617 * C397 + C25666 * C393 + C25661 * C401) *
                 C50951 +
             (C25667 * C379 + C50617 * C385 + C25666 * C383 + C25661 * C394) *
                 C1279) +
            (C26491 + C26492) * C50939 - C26501 * C1281 - C26502 * C1276) *
               C50953 +
           ((C26494 + C26493) * C1280 -
            ((C26492 + C26491) * C50951 + (C26490 + C26489) * C1279) +
            (C26496 + C26495) * C50939 - (C26497 + C26498) * C1281 -
            (C26499 + C26500) * C1276) *
               C50945 +
           ((C26498 + C26497) * C1280 - (C26502 * C50951 + C26501 * C1279) +
            (C26500 + C26499) * C50939 -
            (C25667 * C8596 + C50617 * C8598 + C25666 * C8597 +
             C25661 * C8599) *
                C1281 -
            (C25667 * C8600 + C50617 * C8602 + C25666 * C8601 +
             C25661 * C8603) *
                C1276) *
               C25665) *
              C50802 * C50638 * C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C1174 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C1169 -
            (C25863 + C25864) * C1175 - (C25865 + C25866) * C50688) *
               C50953 +
           ((C25864 + C25863) * C1174 + (C25866 + C25865) * C1169 -
            (C25867 + C25868) * C1175 - (C25869 + C25870) * C50688) *
               C50945 +
           (C26179 * C1174 + C26180 * C1169 - C26305 * C1175 -
            C26306 * C50688) *
               C25665) *
              C50802 * C50638 * C50952 +
          (((C26489 + C26490) * C1175 -
            ((C25667 * C389 + C50617 * C397 + C25666 * C393 + C25661 * C401) *
                 C1169 +
             (C25667 * C379 + C50617 * C385 + C25666 * C383 + C25661 * C394) *
                 C1174) +
            (C26491 + C26492) * C50688) *
               C50953 +
           ((C26494 + C26493) * C1175 -
            ((C26492 + C26491) * C1169 + (C26490 + C26489) * C1174) +
            (C26496 + C26495) * C50688) *
               C50945 +
           ((C26498 + C26497) * C1175 - (C26502 * C1169 + C26501 * C1174) +
            (C26500 + C26499) * C50688) *
               C25665) *
              C50802 * C50638 * C50942 +
          (((C25666 * C851 + C25661 * C856 + C25667 * C852 + C50617 * C857) *
                C1174 +
            (C25666 * C860 + C25661 * C866 + C25667 * C861 + C50617 * C867) *
                C1169 -
            (C26811 + C26812) * C1175 - (C26813 + C26814) * C50688) *
               C50953 +
           ((C26812 + C26811) * C1174 + (C26814 + C26813) * C1169 -
            (C26815 + C26816) * C1175 - (C26817 + C26818) * C50688) *
               C50945 +
           ((C26816 + C26815) * C1174 + (C26818 + C26817) * C1169 -
            (C25667 * C8934 + C50617 * C8936 + C25666 * C8935 +
             C25661 * C8937) *
                C1175 -
            (C25667 * C8938 + C50617 * C8940 + C25666 * C8939 +
             C25661 * C8941) *
                C50688) *
               C25665) *
              C50802 * C50638 * C1746)) /
        (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C506 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C501 -
            (C25863 + C25864) * C507 - (C25865 + C25866) * C502 +
            C26179 * C508 + C26180 * C503) *
               C50953 +
           ((C25864 + C25863) * C506 + (C25866 + C25865) * C501 -
            (C25867 + C25868) * C507 - (C25869 + C25870) * C502 +
            (C26199 + C26200) * C508 + (C26201 + C26202) * C503) *
               C50945 +
           (C26179 * C506 + C26180 * C501 - (C26200 + C26199) * C507 -
            (C26202 + C26201) * C502 +
            (C25666 * C2807 + C25661 * C2810 + C25667 * C2806 +
             C50617 * C2809) *
                C508 +
            (C25666 * C2813 + C25661 * C2816 + C25667 * C2812 +
             C50617 * C2815) *
                C503) *
               C25665) *
              C50802 * C50898 +
          (((C25871 + C25872) * C507 -
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C501 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C506) +
            (C25873 + C25874) * C502 - C26189 * C508 - C26190 * C503) *
               C50953 +
           ((C25875 + C25876) * C507 -
            ((C25874 + C25873) * C501 + (C25872 + C25871) * C506) +
            (C25877 + C25878) * C502 - (C26203 + C26204) * C508 -
            (C26205 + C26206) * C503) *
               C50945 +
           ((C26204 + C26203) * C507 - (C26190 * C501 + C26189 * C506) +
            (C26206 + C26205) * C502 -
            (C25667 * C2805 + C50617 * C2808 + C25666 * C2806 +
             C25661 * C2809) *
                C508 -
            (C25667 * C2811 + C50617 * C2814 + C25666 * C2812 +
             C25661 * C2815) *
                C503) *
               C25665) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C121 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C50672) *
               C50953 +
           ((C25666 * C258 + C25661 * C264 + C25667 * C257 + C50617 * C263) *
                C121 +
            (C25666 * C268 + C25661 * C276 + C25667 * C267 + C50617 * C275) *
                C50672) *
               C50945 +
           ((C25666 * C509 + C25661 * C514 + C25667 * C510 + C50617 * C515) *
                C121 +
            (C25666 * C518 + C25661 * C524 + C25667 * C519 + C50617 * C525) *
                C50672) *
               C25665) *
              C50802 * C112 -
          (((C25667 * C520 + C50617 * C526 + C25666 * C519 + C25661 * C525) *
                C50672 +
            (C25667 * C511 + C50617 * C516 + C25666 * C510 + C25661 * C515) *
                C121) *
               C25665 +
           ((C25667 * C266 + C50617 * C274 + C25666 * C267 + C25661 * C275) *
                C50672 +
            (C25667 * C256 + C50617 * C262 + C25666 * C257 + C25661 * C263) *
                C121) *
               C50945 +
           ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                C50672 +
            (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                C121) *
               C50953) *
              C50802 * C113 +
          (((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                C121 +
            (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                C50672) *
               C50953 +
           ((C25666 * C256 + C25661 * C262 + C25667 * C255 + C50617 * C261) *
                C121 +
            (C25666 * C266 + C25661 * C274 + C25667 * C265 + C50617 * C273) *
                C50672) *
               C50945 +
           ((C25666 * C511 + C25661 * C516 + C25667 * C512 + C50617 * C517) *
                C121 +
            (C25666 * C520 + C25661 * C526 + C25667 * C521 + C50617 * C527) *
                C50672) *
               C25665) *
              C50802 * C114 -
          (((C25667 * C523 + C50617 * C528 + C25666 * C521 + C25661 * C527) *
                C50672 +
            (C25667 * C513 + C50617 * C522 + C25666 * C512 + C25661 * C517) *
                C121) *
               C25665 +
           ((C25667 * C270 + C50617 * C277 + C25666 * C265 + C25661 * C273) *
                C50672 +
            (C25667 * C259 + C50617 * C269 + C25666 * C255 + C25661 * C261) *
                C121) *
               C50945 +
           ((C25667 * C137 + C50617 * C147 + C25666 * C136 + C25661 * C146) *
                C50672 +
            (C25667 * C126 + C50617 * C138 + C25666 * C125 + C25661 * C132) *
                C121) *
               C50953) *
              C50802 * C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C121 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50672) *
                C50953 +
            ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50945 +
            (C26179 * C121 + C26180 * C50672) * C25665) *
               C50802 * C50898 -
           ((C26190 * C50672 + C26189 * C121) * C25665 +
            ((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50945 +
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50672 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C121) *
                C50953) *
               C50802 * C50643) *
              C848 +
          ((((C25666 * C379 + C25661 * C385 + C25667 * C380 + C50617 * C386) *
                 C121 +
             (C25666 * C389 + C25661 * C397 + C25667 * C390 + C50617 * C398) *
                 C50672) *
                C50953 +
            ((C25666 * C719 + C25661 * C727 + C25667 * C720 + C50617 * C728) *
                 C121 +
             (C25666 * C731 + C25661 * C743 + C25667 * C732 + C50617 * C744) *
                 C50672) *
                C50945 +
            ((C25666 * C724 + C25661 * C736 + C25667 * C723 + C50617 * C735) *
                 C121 +
             (C25666 * C740 + C25661 * C748 + C25667 * C739 + C50617 * C747) *
                 C50672) *
                C25665) *
               C50802 * C50643 -
           ((C26502 * C50672 + C26501 * C121) * C25665 +
            ((C26492 + C26491) * C50672 + (C26490 + C26489) * C121) * C50945 +
            ((C25667 * C389 + C50617 * C397 + C25666 * C393 + C25661 * C401) *
                 C50672 +
             (C25667 * C379 + C50617 * C385 + C25666 * C383 + C25661 * C394) *
                 C121) *
                C50953) *
               C50802 * C50898) *
              C849 +
          ((((C25666 * C851 + C25661 * C856 + C25667 * C852 + C50617 * C857) *
                 C121 +
             (C25666 * C860 + C25661 * C866 + C25667 * C861 + C50617 * C867) *
                 C50672) *
                C50953 +
            ((C25666 * C972 + C25661 * C976 + C25667 * C971 + C50617 * C975) *
                 C121 +
             (C25666 * C980 + C25661 * C984 + C25667 * C979 + C50617 * C983) *
                 C50672) *
                C50945 +
            ((C25666 * C3323 + C25661 * C3326 + C25667 * C3322 +
              C50617 * C3325) *
                 C121 +
             (C25666 * C3329 + C25661 * C3332 + C25667 * C3328 +
              C50617 * C3331) *
                 C50672) *
                C25665) *
               C50802 * C50898 -
           (((C25667 * C3327 + C50617 * C3330 + C25666 * C3328 +
              C25661 * C3331) *
                 C50672 +
             (C25667 * C3321 + C50617 * C3324 + C25666 * C3322 +
              C25661 * C3325) *
                 C121) *
                C25665 +
            ((C25667 * C978 + C50617 * C982 + C25666 * C979 + C25661 * C983) *
                 C50672 +
             (C25667 * C970 + C50617 * C974 + C25666 * C971 + C25661 * C975) *
                 C121) *
                C50945 +
            ((C25667 * C862 + C50617 * C868 + C25666 * C861 + C25661 * C867) *
                 C50672 +
             (C25667 * C853 + C50617 * C858 + C25666 * C852 + C25661 * C857) *
                 C121) *
                C50953) *
               C50802 * C50643) *
              C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
               C600 +
           (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
               C595 -
           (C25863 + C25864) * C601 - (C25865 + C25866) * C596 + C26179 * C602 +
           C26180 * C597 - C26305 * C603 - C26306 * C598) *
              C50953 +
          ((C25864 + C25863) * C600 + (C25866 + C25865) * C595 -
           (C25867 + C25868) * C601 - (C25869 + C25870) * C596 +
           (C26199 + C26200) * C602 + (C26201 + C26202) * C597 -
           (C26315 + C26316) * C603 - (C26317 + C26318) * C598) *
              C50945 +
          (C26179 * C600 + C26180 * C595 - C26305 * C601 - C26306 * C596 +
           (C26316 + C26315) * C602 + (C26318 + C26317) * C597 -
           (C25667 * C8428 + C50617 * C8430 + C25666 * C8429 + C25661 * C8431) *
               C603 -
           (C25667 * C8432 + C50617 * C8434 + C25666 * C8433 + C25661 * C8435) *
               C598) *
              C25665) *
         C50802 * C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C253 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C50905 -
            (C25863 + C25864) * C254 - (C25865 + C25866) * C50688) *
               C50953 +
           ((C25864 + C25863) * C253 + (C25866 + C25865) * C50905 -
            (C25867 + C25868) * C254 - (C25869 + C25870) * C50688) *
               C50945 +
           ((C25868 + C25867) * C253 + (C25870 + C25869) * C50905 -
            (C25667 * C606 + C50617 * C610 + C25666 * C607 + C25661 * C611) *
                C254 -
            (C25667 * C614 + C50617 * C618 + C25666 * C615 + C25661 * C619) *
                C50688) *
               C25665) *
              C50802 * C250 +
          (((C25871 + C25872) * C254 -
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50905 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C253) +
            (C25873 + C25874) * C50688) *
               C50953 +
           ((C25875 + C25876) * C254 -
            ((C25874 + C25873) * C50905 + (C25872 + C25871) * C253) +
            (C25877 + C25878) * C50688) *
               C50945 +
           ((C25666 * C606 + C25661 * C610 + C25667 * C605 + C50617 * C609) *
                C254 -
            ((C25878 + C25877) * C50905 + (C25876 + C25875) * C253) +
            (C25666 * C614 + C25661 * C618 + C25667 * C613 + C50617 * C617) *
                C50688) *
               C25665) *
              C50802 * C251 +
          (((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                C253 +
            (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                C50905 -
            (C25879 + C25880) * C254 - (C25881 + C25882) * C50688) *
               C50953 +
           ((C25880 + C25879) * C253 + (C25882 + C25881) * C50905 -
            (C25883 + C25884) * C254 - (C25885 + C25886) * C50688) *
               C50945 +
           ((C25884 + C25883) * C253 + (C25886 + C25885) * C50905 -
            (C25667 * C604 + C50617 * C608 + C25666 * C605 + C25661 * C609) *
                C254 -
            (C25667 * C612 + C50617 * C616 + C25666 * C613 + C25661 * C617) *
                C50688) *
               C25665) *
              C50802 * C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C253 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C50905 -
            (C25863 + C25864) * C254 - (C25865 + C25866) * C50688) *
               C50953 +
           ((C25864 + C25863) * C253 + (C25866 + C25865) * C50905 -
            (C25867 + C25868) * C254 - (C25869 + C25870) * C50688) *
               C50945 +
           (C26179 * C253 + C26180 * C50905 - C26305 * C254 - C26306 * C50688) *
               C25665) *
              C50802 * C50638 * C848 +
          (((C26489 + C26490) * C254 -
            ((C25667 * C389 + C50617 * C397 + C25666 * C393 + C25661 * C401) *
                 C50905 +
             (C25667 * C379 + C50617 * C385 + C25666 * C383 + C25661 * C394) *
                 C253) +
            (C26491 + C26492) * C50688) *
               C50953 +
           ((C26494 + C26493) * C254 -
            ((C26492 + C26491) * C50905 + (C26490 + C26489) * C253) +
            (C26496 + C26495) * C50688) *
               C50945 +
           ((C26498 + C26497) * C254 - (C26502 * C50905 + C26501 * C253) +
            (C26500 + C26499) * C50688) *
               C25665) *
              C50802 * C50638 * C849 +
          (((C25666 * C851 + C25661 * C856 + C25667 * C852 + C50617 * C857) *
                C253 +
            (C25666 * C860 + C25661 * C866 + C25667 * C861 + C50617 * C867) *
                C50905 -
            (C26811 + C26812) * C254 - (C26813 + C26814) * C50688) *
               C50953 +
           ((C26812 + C26811) * C253 + (C26814 + C26813) * C50905 -
            (C26815 + C26816) * C254 - (C26817 + C26818) * C50688) *
               C50945 +
           ((C26816 + C26815) * C253 + (C26818 + C26817) * C50905 -
            (C25667 * C8934 + C50617 * C8936 + C25666 * C8935 +
             C25661 * C8937) *
                C254 -
            (C25667 * C8938 + C50617 * C8940 + C25666 * C8939 +
             C25661 * C8941) *
                C50688) *
               C25665) *
              C50802 * C50638 * C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C506 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C501 -
            (C25863 + C25864) * C507 - (C25865 + C25866) * C502 +
            C26179 * C508 + C26180 * C503) *
               C50953 +
           ((C25864 + C25863) * C506 + (C25866 + C25865) * C501 -
            (C25867 + C25868) * C507 - (C25869 + C25870) * C502 +
            (C26199 + C26200) * C508 + (C26201 + C26202) * C503) *
               C50945 +
           (C26179 * C506 + C26180 * C501 - C26305 * C507 - C26306 * C502 +
            (C26316 + C26315) * C508 + (C26318 + C26317) * C503) *
               C25665) *
              C50802 * C50638 * C50907 +
          (((C26489 + C26490) * C507 -
            ((C25667 * C389 + C50617 * C397 + C25666 * C393 + C25661 * C401) *
                 C501 +
             (C25667 * C379 + C50617 * C385 + C25666 * C383 + C25661 * C394) *
                 C506) +
            (C26491 + C26492) * C502 - C26501 * C508 - C26502 * C503) *
               C50953 +
           ((C26494 + C26493) * C507 -
            ((C26492 + C26491) * C501 + (C26490 + C26489) * C506) +
            (C26496 + C26495) * C502 - (C26497 + C26498) * C508 -
            (C26499 + C26500) * C503) *
               C50945 +
           ((C26498 + C26497) * C507 - (C26502 * C501 + C26501 * C506) +
            (C26500 + C26499) * C502 -
            (C25667 * C8596 + C50617 * C8598 + C25666 * C8597 +
             C25661 * C8599) *
                C508 -
            (C25667 * C8600 + C50617 * C8602 + C25666 * C8601 +
             C25661 * C8603) *
                C503) *
               C25665) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C121 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50672) *
                C50953 +
            ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50945 +
            ((C25868 + C25867) * C121 + (C25870 + C25869) * C50672) * C25665) *
               C50802 * C250 -
           (((C25878 + C25877) * C50672 + (C25876 + C25875) * C121) * C25665 +
            ((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50945 +
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50672 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C121) *
                C50953) *
               C50802 * C251 +
           (((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                 C121 +
             (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                 C50672) *
                C50953 +
            ((C25880 + C25879) * C121 + (C25882 + C25881) * C50672) * C50945 +
            ((C25884 + C25883) * C121 + (C25886 + C25885) * C50672) * C25665) *
               C50802 * C252) *
              C50907 +
          ((((C25666 * C379 + C25661 * C385 + C25667 * C380 + C50617 * C386) *
                 C121 +
             (C25666 * C389 + C25661 * C397 + C25667 * C390 + C50617 * C398) *
                 C50672) *
                C50953 +
            ((C25666 * C719 + C25661 * C727 + C25667 * C720 + C50617 * C728) *
                 C121 +
             (C25666 * C731 + C25661 * C743 + C25667 * C732 + C50617 * C744) *
                 C50672) *
                C50945 +
            ((C25666 * C724 + C25661 * C736 + C25667 * C723 + C50617 * C735) *
                 C121 +
             (C25666 * C740 + C25661 * C748 + C25667 * C739 + C50617 * C747) *
                 C50672) *
                C25665) *
               C50802 * C251 -
           (((C25667 * C740 + C50617 * C748 + C25666 * C741 + C25661 * C749) *
                 C50672 +
             (C25667 * C724 + C50617 * C736 + C25666 * C725 + C25661 * C737) *
                 C121) *
                C25665 +
            ((C25667 * C731 + C50617 * C743 + C25666 * C730 + C25661 * C742) *
                 C50672 +
             (C25667 * C719 + C50617 * C727 + C25666 * C718 + C25661 * C726) *
                 C121) *
                C50945 +
            ((C25667 * C389 + C50617 * C397 + C25666 * C393 + C25661 * C401) *
                 C50672 +
             (C25667 * C379 + C50617 * C385 + C25666 * C383 + C25661 * C394) *
                 C121) *
                C50953) *
               C50802 * C250 -
           (((C25667 * C738 + C50617 * C746 + C25666 * C739 + C25661 * C747) *
                 C50672 +
             (C25667 * C722 + C50617 * C734 + C25666 * C723 + C25661 * C735) *
                 C121) *
                C25665 +
            ((C25667 * C733 + C50617 * C745 + C25666 * C732 + C25661 * C744) *
                 C50672 +
             (C25667 * C721 + C50617 * C729 + C25666 * C720 + C25661 * C728) *
                 C121) *
                C50945 +
            ((C25667 * C391 + C50617 * C399 + C25666 * C390 + C25661 * C398) *
                 C50672 +
             (C25667 * C381 + C50617 * C387 + C25666 * C380 + C25661 * C386) *
                 C121) *
                C50953) *
               C50802 * C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C121 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C50672) *
               C50953 +
           ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50945 +
           (C26179 * C121 + C26180 * C50672) * C25665) *
              C50802 * C50638 * C1051 -
          ((C26502 * C50672 + C26501 * C121) * C25665 +
           ((C26492 + C26491) * C50672 + (C26490 + C26489) * C121) * C50945 +
           ((C25667 * C389 + C50617 * C397 + C25666 * C393 + C25661 * C401) *
                C50672 +
            (C25667 * C379 + C50617 * C385 + C25666 * C383 + C25661 * C394) *
                C121) *
               C50953) *
              C50802 * C50638 * C1052 +
          (((C25666 * C851 + C25661 * C856 + C25667 * C852 + C50617 * C857) *
                C121 +
            (C25666 * C860 + C25661 * C866 + C25667 * C861 + C50617 * C867) *
                C50672) *
               C50953 +
           ((C26812 + C26811) * C121 + (C26814 + C26813) * C50672) * C50945 +
           ((C26816 + C26815) * C121 + (C26818 + C26817) * C50672) * C25665) *
              C50802 * C50638 * C1053 -
          (((C25667 * C9066 + C50617 * C9070 + C25666 * C9067 +
             C25661 * C9071) *
                C50672 +
            (C25667 * C9064 + C50617 * C9068 + C25666 * C9065 +
             C25661 * C9069) *
                C121) *
               C25665 +
           ((C25667 * C3453 + C50617 * C3459 + C25666 * C3454 +
             C25661 * C3460) *
                C50672 +
            (C25667 * C3450 + C50617 * C3456 + C25666 * C3451 +
             C25661 * C3457) *
                C121) *
               C50945 +
           ((C25667 * C1061 + C50617 * C1069 + C25666 * C1062 +
             C25661 * C1070) *
                C50672 +
            (C25667 * C1057 + C50617 * C1065 + C25666 * C1058 +
             C25661 * C1066) *
                C121) *
               C50953) *
              C50802 * C50638 * C1054)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C121 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50672) *
                C50953 +
            ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50945 +
            (C26179 * C121 + C26180 * C50672) * C25665) *
               C50802 * C50950 -
           ((C26190 * C50672 + C26189 * C121) * C25665 +
            ((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50945 +
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50672 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C121) *
                C50953) *
               C50802 * C50936 +
           (((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                 C121 +
             (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                 C50672) *
                C50953 +
            ((C25880 + C25879) * C121 + (C25882 + C25881) * C50672) * C50945 +
            ((C25884 + C25883) * C121 + (C25886 + C25885) * C50672) * C25665) *
               C50802 * C1173) *
              C1514 +
          ((((C25666 * C379 + C25661 * C385 + C25667 * C380 + C50617 * C386) *
                 C121 +
             (C25666 * C389 + C25661 * C397 + C25667 * C390 + C50617 * C398) *
                 C50672) *
                C50953 +
            ((C27420 + C27419) * C121 + (C27422 + C27421) * C50672) * C50945 +
            ((C27424 + C27423) * C121 + (C27426 + C27425) * C50672) * C25665) *
               C50802 * C50936 -
           ((C26502 * C50672 + C26501 * C121) * C25665 +
            ((C26492 + C26491) * C50672 + (C26490 + C26489) * C121) * C50945 +
            ((C25667 * C389 + C50617 * C397 + C25666 * C393 + C25661 * C401) *
                 C50672 +
             (C25667 * C379 + C50617 * C385 + C25666 * C383 + C25661 * C394) *
                 C121) *
                C50953) *
               C50802 * C50950 -
           (((C25667 * C738 + C50617 * C746 + C25666 * C739 + C25661 * C747) *
                 C50672 +
             (C25667 * C722 + C50617 * C734 + C25666 * C723 + C25661 * C735) *
                 C121) *
                C25665 +
            ((C25667 * C733 + C50617 * C745 + C25666 * C732 + C25661 * C744) *
                 C50672 +
             (C25667 * C721 + C50617 * C729 + C25666 * C720 + C25661 * C728) *
                 C121) *
                C50945 +
            ((C25667 * C391 + C50617 * C399 + C25666 * C390 + C25661 * C398) *
                 C50672 +
             (C25667 * C381 + C50617 * C387 + C25666 * C380 + C25661 * C386) *
                 C121) *
                C50953) *
               C50802 * C1173) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C253 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50905 -
             (C25863 + C25864) * C254 - (C25865 + C25866) * C50688) *
                C50953 +
            ((C25864 + C25863) * C253 + (C25866 + C25865) * C50905 -
             (C25867 + C25868) * C254 - (C25869 + C25870) * C50688) *
                C50945 +
            (C26179 * C253 + C26180 * C50905 - C26305 * C254 -
             C26306 * C50688) *
                C25665) *
               C50802 * C1277 +
           (((C25871 + C25872) * C254 -
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C50905 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C253) +
             (C25873 + C25874) * C50688) *
                C50953 +
            ((C25875 + C25876) * C254 -
             ((C25874 + C25873) * C50905 + (C25872 + C25871) * C253) +
             (C25877 + C25878) * C50688) *
                C50945 +
            ((C26204 + C26203) * C254 - (C26190 * C50905 + C26189 * C253) +
             (C26206 + C26205) * C50688) *
                C25665) *
               C50802 * C50643) *
              C1514 +
          ((((C26489 + C26490) * C254 -
             ((C25667 * C389 + C50617 * C397 + C25666 * C393 + C25661 * C401) *
                  C50905 +
              (C25667 * C379 + C50617 * C385 + C25666 * C383 + C25661 * C394) *
                  C253) +
             (C26491 + C26492) * C50688) *
                C50953 +
            ((C26494 + C26493) * C254 -
             ((C26492 + C26491) * C50905 + (C26490 + C26489) * C253) +
             (C26496 + C26495) * C50688) *
                C50945 +
            ((C26498 + C26497) * C254 - (C26502 * C50905 + C26501 * C253) +
             (C26500 + C26499) * C50688) *
                C25665) *
               C50802 * C1277 +
           (((C25666 * C379 + C25661 * C385 + C25667 * C380 + C50617 * C386) *
                 C253 +
             (C25666 * C389 + C25661 * C397 + C25667 * C390 + C50617 * C398) *
                 C50905 -
             (C27419 + C27420) * C254 - (C27421 + C27422) * C50688) *
                C50953 +
            ((C27420 + C27419) * C253 + (C27422 + C27421) * C50905 -
             (C27423 + C27424) * C254 - (C27425 + C27426) * C50688) *
                C50945 +
            ((C27424 + C27423) * C253 + (C27426 + C27425) * C50905 -
             (C25667 * C2981 + C50617 * C2984 + C25666 * C2982 +
              C25661 * C2985) *
                 C254 -
             (C25667 * C2987 + C50617 * C2990 + C25666 * C2988 +
              C25661 * C2991) *
                 C50688) *
                C25665) *
               C50802 * C50643) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C121 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50672) *
                C50953 +
            ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50945 +
            (C26179 * C121 + C26180 * C50672) * C25665) *
               C50802 * C1277 -
           ((C26190 * C50672 + C26189 * C121) * C25665 +
            ((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50945 +
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50672 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C121) *
                C50953) *
               C50802 * C50643) *
              C50952 +
          ((((C25666 * C379 + C25661 * C385 + C25667 * C380 + C50617 * C386) *
                 C121 +
             (C25666 * C389 + C25661 * C397 + C25667 * C390 + C50617 * C398) *
                 C50672) *
                C50953 +
            ((C27420 + C27419) * C121 + (C27422 + C27421) * C50672) * C50945 +
            ((C27424 + C27423) * C121 + (C27426 + C27425) * C50672) * C25665) *
               C50802 * C50643 -
           ((C26502 * C50672 + C26501 * C121) * C25665 +
            ((C26492 + C26491) * C50672 + (C26490 + C26489) * C121) * C50945 +
            ((C25667 * C389 + C50617 * C397 + C25666 * C393 + C25661 * C401) *
                 C50672 +
             (C25667 * C379 + C50617 * C385 + C25666 * C383 + C25661 * C394) *
                 C121) *
                C50953) *
               C50802 * C1277) *
              C50942 +
          ((((C25666 * C851 + C25661 * C856 + C25667 * C852 + C50617 * C857) *
                 C121 +
             (C25666 * C860 + C25661 * C866 + C25667 * C861 + C50617 * C867) *
                 C50672) *
                C50953 +
            ((C26812 + C26811) * C121 + (C26814 + C26813) * C50672) * C50945 +
            ((C26816 + C26815) * C121 + (C26818 + C26817) * C50672) * C25665) *
               C50802 * C1277 -
           (((C25667 * C3327 + C50617 * C3330 + C25666 * C3328 +
              C25661 * C3331) *
                 C50672 +
             (C25667 * C3321 + C50617 * C3324 + C25666 * C3322 +
              C25661 * C3325) *
                 C121) *
                C25665 +
            ((C25667 * C978 + C50617 * C982 + C25666 * C979 + C25661 * C983) *
                 C50672 +
             (C25667 * C970 + C50617 * C974 + C25666 * C971 + C25661 * C975) *
                 C121) *
                C50945 +
            ((C25667 * C862 + C50617 * C868 + C25666 * C861 + C25661 * C867) *
                 C50672 +
             (C25667 * C853 + C50617 * C858 + C25666 * C852 + C25661 * C857) *
                 C121) *
                C50953) *
               C50802 * C50643) *
              C1746)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C121 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C50672) *
               C50953 +
           ((C25666 * C258 + C25661 * C264 + C25667 * C257 + C50617 * C263) *
                C121 +
            (C25666 * C268 + C25661 * C276 + C25667 * C267 + C50617 * C275) *
                C50672) *
               C50945 +
           ((C25666 * C509 + C25661 * C514 + C25667 * C510 + C50617 * C515) *
                C121 +
            (C25666 * C518 + C25661 * C524 + C25667 * C519 + C50617 * C525) *
                C50672) *
               C25665) *
              C50802 * C112 -
          (((C25667 * C520 + C50617 * C526 + C25666 * C519 + C25661 * C525) *
                C50672 +
            (C25667 * C511 + C50617 * C516 + C25666 * C510 + C25661 * C515) *
                C121) *
               C25665 +
           ((C25667 * C266 + C50617 * C274 + C25666 * C267 + C25661 * C275) *
                C50672 +
            (C25667 * C256 + C50617 * C262 + C25666 * C257 + C25661 * C263) *
                C121) *
               C50945 +
           ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                C50672 +
            (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                C121) *
               C50953) *
              C50802 * C113 +
          (((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                C121 +
            (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                C50672) *
               C50953 +
           ((C25666 * C256 + C25661 * C262 + C25667 * C255 + C50617 * C261) *
                C121 +
            (C25666 * C266 + C25661 * C274 + C25667 * C265 + C50617 * C273) *
                C50672) *
               C50945 +
           ((C25666 * C511 + C25661 * C516 + C25667 * C512 + C50617 * C517) *
                C121 +
            (C25666 * C520 + C25661 * C526 + C25667 * C521 + C50617 * C527) *
                C50672) *
               C25665) *
              C50802 * C114 -
          (((C25667 * C523 + C50617 * C528 + C25666 * C521 + C25661 * C527) *
                C50672 +
            (C25667 * C513 + C50617 * C522 + C25666 * C512 + C25661 * C517) *
                C121) *
               C25665 +
           ((C25667 * C270 + C50617 * C277 + C25666 * C265 + C25661 * C273) *
                C50672 +
            (C25667 * C259 + C50617 * C269 + C25666 * C255 + C25661 * C261) *
                C121) *
               C50945 +
           ((C25667 * C137 + C50617 * C147 + C25666 * C136 + C25661 * C146) *
                C50672 +
            (C25667 * C126 + C50617 * C138 + C25666 * C125 + C25661 * C132) *
                C121) *
               C50953) *
              C50802 * C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C506 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C501 -
            (C25863 + C25864) * C507 - (C25865 + C25866) * C502 +
            C26179 * C508 + C26180 * C503) *
               C50953 +
           ((C25864 + C25863) * C506 + (C25866 + C25865) * C501 -
            (C25867 + C25868) * C507 - (C25869 + C25870) * C502 +
            (C26199 + C26200) * C508 + (C26201 + C26202) * C503) *
               C50945 +
           (C26179 * C506 + C26180 * C501 - (C26200 + C26199) * C507 -
            (C26202 + C26201) * C502 +
            (C25666 * C2807 + C25661 * C2810 + C25667 * C2806 +
             C50617 * C2809) *
                C508 +
            (C25666 * C2813 + C25661 * C2816 + C25667 * C2812 +
             C50617 * C2815) *
                C503) *
               C25665) *
              C50802 * C50898 +
          (((C25871 + C25872) * C507 -
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C501 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C506) +
            (C25873 + C25874) * C502 - C26189 * C508 - C26190 * C503) *
               C50953 +
           ((C25875 + C25876) * C507 -
            ((C25874 + C25873) * C501 + (C25872 + C25871) * C506) +
            (C25877 + C25878) * C502 - (C26203 + C26204) * C508 -
            (C26205 + C26206) * C503) *
               C50945 +
           ((C26204 + C26203) * C507 - (C26190 * C501 + C26189 * C506) +
            (C26206 + C26205) * C502 -
            (C25667 * C2805 + C50617 * C2808 + C25666 * C2806 +
             C25661 * C2809) *
                C508 -
            (C25667 * C2811 + C50617 * C2814 + C25666 * C2812 +
             C25661 * C2815) *
                C503) *
               C25665) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C253 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C50905 -
            (C25863 + C25864) * C254 - (C25865 + C25866) * C50688) *
               C50953 +
           ((C25864 + C25863) * C253 + (C25866 + C25865) * C50905 -
            (C25867 + C25868) * C254 - (C25869 + C25870) * C50688) *
               C50945 +
           ((C25868 + C25867) * C253 + (C25870 + C25869) * C50905 -
            (C25667 * C606 + C50617 * C610 + C25666 * C607 + C25661 * C611) *
                C254 -
            (C25667 * C614 + C50617 * C618 + C25666 * C615 + C25661 * C619) *
                C50688) *
               C25665) *
              C50802 * C250 +
          (((C25871 + C25872) * C254 -
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50905 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C253) +
            (C25873 + C25874) * C50688) *
               C50953 +
           ((C25875 + C25876) * C254 -
            ((C25874 + C25873) * C50905 + (C25872 + C25871) * C253) +
            (C25877 + C25878) * C50688) *
               C50945 +
           ((C25666 * C606 + C25661 * C610 + C25667 * C605 + C50617 * C609) *
                C254 -
            ((C25878 + C25877) * C50905 + (C25876 + C25875) * C253) +
            (C25666 * C614 + C25661 * C618 + C25667 * C613 + C50617 * C617) *
                C50688) *
               C25665) *
              C50802 * C251 +
          (((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                C253 +
            (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                C50905 -
            (C25879 + C25880) * C254 - (C25881 + C25882) * C50688) *
               C50953 +
           ((C25880 + C25879) * C253 + (C25882 + C25881) * C50905 -
            (C25883 + C25884) * C254 - (C25885 + C25886) * C50688) *
               C50945 +
           ((C25884 + C25883) * C253 + (C25886 + C25885) * C50905 -
            (C25667 * C604 + C50617 * C608 + C25666 * C605 + C25661 * C609) *
                C254 -
            (C25667 * C612 + C50617 * C616 + C25666 * C613 + C25661 * C617) *
                C50688) *
               C25665) *
              C50802 * C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
               C600 +
           (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
               C595 -
           (C25863 + C25864) * C601 - (C25865 + C25866) * C596 + C26179 * C602 +
           C26180 * C597 - C26305 * C603 - C26306 * C598) *
              C50953 +
          ((C25864 + C25863) * C600 + (C25866 + C25865) * C595 -
           (C25867 + C25868) * C601 - (C25869 + C25870) * C596 +
           (C26199 + C26200) * C602 + (C26201 + C26202) * C597 -
           (C26315 + C26316) * C603 - (C26317 + C26318) * C598) *
              C50945 +
          (C26179 * C600 + C26180 * C595 - C26305 * C601 - C26306 * C596 +
           (C26316 + C26315) * C602 + (C26318 + C26317) * C597 -
           (C25667 * C8428 + C50617 * C8430 + C25666 * C8429 + C25661 * C8431) *
               C603 -
           (C25667 * C8432 + C50617 * C8434 + C25666 * C8433 + C25661 * C8435) *
               C598) *
              C25665) *
         C50802 * C50638 * C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C121 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50672) *
                C50953 +
            ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50945 +
            ((C25868 + C25867) * C121 + (C25870 + C25869) * C50672) * C25665) *
               C50802 * C250 -
           (((C25878 + C25877) * C50672 + (C25876 + C25875) * C121) * C25665 +
            ((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50945 +
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50672 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C121) *
                C50953) *
               C50802 * C251 +
           (((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                 C121 +
             (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                 C50672) *
                C50953 +
            ((C25880 + C25879) * C121 + (C25882 + C25881) * C50672) * C50945 +
            ((C25884 + C25883) * C121 + (C25886 + C25885) * C50672) * C25665) *
               C50802 * C252) *
              C50907 +
          ((((C25666 * C379 + C25661 * C385 + C25667 * C380 + C50617 * C386) *
                 C121 +
             (C25666 * C389 + C25661 * C397 + C25667 * C390 + C50617 * C398) *
                 C50672) *
                C50953 +
            ((C25666 * C719 + C25661 * C727 + C25667 * C720 + C50617 * C728) *
                 C121 +
             (C25666 * C731 + C25661 * C743 + C25667 * C732 + C50617 * C744) *
                 C50672) *
                C50945 +
            ((C25666 * C724 + C25661 * C736 + C25667 * C723 + C50617 * C735) *
                 C121 +
             (C25666 * C740 + C25661 * C748 + C25667 * C739 + C50617 * C747) *
                 C50672) *
                C25665) *
               C50802 * C251 -
           (((C25667 * C740 + C50617 * C748 + C25666 * C741 + C25661 * C749) *
                 C50672 +
             (C25667 * C724 + C50617 * C736 + C25666 * C725 + C25661 * C737) *
                 C121) *
                C25665 +
            ((C25667 * C731 + C50617 * C743 + C25666 * C730 + C25661 * C742) *
                 C50672 +
             (C25667 * C719 + C50617 * C727 + C25666 * C718 + C25661 * C726) *
                 C121) *
                C50945 +
            ((C25667 * C389 + C50617 * C397 + C25666 * C393 + C25661 * C401) *
                 C50672 +
             (C25667 * C379 + C50617 * C385 + C25666 * C383 + C25661 * C394) *
                 C121) *
                C50953) *
               C50802 * C250 -
           (((C25667 * C738 + C50617 * C746 + C25666 * C739 + C25661 * C747) *
                 C50672 +
             (C25667 * C722 + C50617 * C734 + C25666 * C723 + C25661 * C735) *
                 C121) *
                C25665 +
            ((C25667 * C733 + C50617 * C745 + C25666 * C732 + C25661 * C744) *
                 C50672 +
             (C25667 * C721 + C50617 * C729 + C25666 * C720 + C25661 * C728) *
                 C121) *
                C50945 +
            ((C25667 * C391 + C50617 * C399 + C25666 * C390 + C25661 * C398) *
                 C50672 +
             (C25667 * C381 + C50617 * C387 + C25666 * C380 + C25661 * C386) *
                 C121) *
                C50953) *
               C50802 * C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C506 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C501 -
            (C25863 + C25864) * C507 - (C25865 + C25866) * C502 +
            C26179 * C508 + C26180 * C503) *
               C50953 +
           ((C25864 + C25863) * C506 + (C25866 + C25865) * C501 -
            (C25867 + C25868) * C507 - (C25869 + C25870) * C502 +
            (C26199 + C26200) * C508 + (C26201 + C26202) * C503) *
               C50945 +
           (C26179 * C506 + C26180 * C501 - C26305 * C507 - C26306 * C502 +
            (C26316 + C26315) * C508 + (C26318 + C26317) * C503) *
               C25665) *
              C50802 * C50638 * C50907 +
          (((C26489 + C26490) * C507 -
            ((C25667 * C389 + C50617 * C397 + C25666 * C393 + C25661 * C401) *
                 C501 +
             (C25667 * C379 + C50617 * C385 + C25666 * C383 + C25661 * C394) *
                 C506) +
            (C26491 + C26492) * C502 - C26501 * C508 - C26502 * C503) *
               C50953 +
           ((C26494 + C26493) * C507 -
            ((C26492 + C26491) * C501 + (C26490 + C26489) * C506) +
            (C26496 + C26495) * C502 - (C26497 + C26498) * C508 -
            (C26499 + C26500) * C503) *
               C50945 +
           ((C26498 + C26497) * C507 - (C26502 * C501 + C26501 * C506) +
            (C26500 + C26499) * C502 -
            (C25667 * C8596 + C50617 * C8598 + C25666 * C8597 +
             C25661 * C8599) *
                C508 -
            (C25667 * C8600 + C50617 * C8602 + C25666 * C8601 +
             C25661 * C8603) *
                C503) *
               C25665) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C1174 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C1169 -
             (C25863 + C25864) * C1175 - (C25865 + C25866) * C50688) *
                C22848 +
            ((C25864 + C25863) * C1174 + (C25866 + C25865) * C1169 -
             (C25867 + C25868) * C1175 - (C25869 + C25870) * C50688) *
                C50790) *
               C50920 +
           (((C28953 + C28954) * C1174 + (C28955 + C28956) * C1169 -
             C29483 * C1175 - C29484 * C50688) *
                C22848 +
            (C29487 * C1174 + C29488 * C1169 - C26501 * C1175 -
             C26502 * C50688) *
                C50790) *
               C50814) *
              C50950 +
          ((((C25871 + C25872) * C1175 -
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C1169 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C1174) +
             (C25873 + C25874) * C50688) *
                C22848 +
            ((C25875 + C25876) * C1175 -
             ((C25874 + C25873) * C1169 + (C25872 + C25871) * C1174) +
             (C25877 + C25878) * C50688) *
                C50790) *
               C50920 +
           (((C27420 + C27419) * C1175 -
             ((C28957 + C28958) * C1169 + (C28959 + C28960) * C1174) +
             (C27422 + C27421) * C50688) *
                C22848 +
            ((C27424 + C27423) * C1175 -
             ((C27421 + C27422) * C1169 + (C27419 + C27420) * C1174) +
             (C27426 + C27425) * C50688) *
                C50790) *
               C50814) *
              C50936 +
          ((((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                 C1174 +
             (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                 C1169 -
             (C25879 + C25880) * C1175 - (C25881 + C25882) * C50688) *
                C22848 +
            ((C25880 + C25879) * C1174 + (C25882 + C25881) * C1169 -
             (C25883 + C25884) * C1175 - (C25885 + C25886) * C50688) *
                C50790) *
               C50920 +
           (((C28961 + C28962) * C1174 + (C28963 + C28964) * C1169 -
             (C28731 + C28732) * C1175 - (C28733 + C28734) * C50688) *
                C22848 +
            ((C28732 + C28731) * C1174 + (C28734 + C28733) * C1169 -
             (C25667 * C722 + C50617 * C734 + C25666 * C723 + C25661 * C735) *
                 C1175 -
             (C25667 * C738 + C50617 * C746 + C25666 * C739 + C25661 * C747) *
                 C50688) *
                C50790) *
               C50814) *
              C1173) *
         C50702) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C1279 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50951 -
             (C25863 + C25864) * C1280 - (C25865 + C25866) * C50939 +
             C26179 * C1281 + C26180 * C1276) *
                C22848 +
            ((C25864 + C25863) * C1279 + (C25866 + C25865) * C50951 -
             (C25867 + C25868) * C1280 - (C25869 + C25870) * C50939 +
             (C26199 + C26200) * C1281 + (C26201 + C26202) * C1276) *
                C50790) *
               C50920 +
           (((C28953 + C28954) * C1279 + (C28955 + C28956) * C50951 -
             C29483 * C1280 - C29484 * C50939 + C29485 * C1281 +
             C29486 * C1276) *
                C22848 +
            (C29487 * C1279 + C29488 * C50951 - C26501 * C1280 -
             C26502 * C50939 + (C26498 + C26497) * C1281 +
             (C26500 + C26499) * C1276) *
                C50790) *
               C50814) *
              C1277 +
          ((((C25871 + C25872) * C1280 -
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C50951 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C1279) +
             (C25873 + C25874) * C50939 - C26189 * C1281 - C26190 * C1276) *
                C22848 +
            ((C25875 + C25876) * C1280 -
             ((C25874 + C25873) * C50951 + (C25872 + C25871) * C1279) +
             (C25877 + C25878) * C50939 - (C26203 + C26204) * C1281 -
             (C26205 + C26206) * C1276) *
                C50790) *
               C50920 +
           (((C27420 + C27419) * C1280 -
             ((C28957 + C28958) * C50951 + (C28959 + C28960) * C1279) +
             (C27422 + C27421) * C50939 - (C27423 + C27424) * C1281 -
             (C27425 + C27426) * C1276) *
                C22848 +
            ((C27424 + C27423) * C1280 -
             ((C27421 + C27422) * C50951 + (C27419 + C27420) * C1279) +
             (C27426 + C27425) * C50939 -
             (C25667 * C2981 + C50617 * C2984 + C25666 * C2982 +
              C25661 * C2985) *
                 C1281 -
             (C25667 * C2987 + C50617 * C2990 + C25666 * C2988 +
              C25661 * C2991) *
                 C1276) *
                C50790) *
               C50814) *
              C50643) *
         C50702) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                  C1174 +
              (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                  C1169 -
              (C25863 + C25864) * C1175 - (C25865 + C25866) * C50688) *
                 C22848 +
             ((C25864 + C25863) * C1174 + (C25866 + C25865) * C1169 -
              (C25867 + C25868) * C1175 - (C25869 + C25870) * C50688) *
                 C50790) *
                C50920 +
            (((C28953 + C28954) * C1174 + (C28955 + C28956) * C1169 -
              C29483 * C1175 - C29484 * C50688) *
                 C22848 +
             (C29487 * C1174 + C29488 * C1169 - C26501 * C1175 -
              C26502 * C50688) *
                 C50790) *
                C50814) *
               C1277 +
           ((((C25871 + C25872) * C1175 -
              ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                   C1169 +
               (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                   C1174) +
              (C25873 + C25874) * C50688) *
                 C22848 +
             ((C25875 + C25876) * C1175 -
              ((C25874 + C25873) * C1169 + (C25872 + C25871) * C1174) +
              (C25877 + C25878) * C50688) *
                 C50790) *
                C50920 +
            ((C30717 * C1175 -
              ((C28957 + C28958) * C1169 + (C28959 + C28960) * C1174) +
              C30718 * C50688) *
                 C22848 +
             ((C27424 + C27423) * C1175 - (C30719 * C1169 + C30720 * C1174) +
              (C27426 + C27425) * C50688) *
                 C50790) *
                C50814) *
               C50643) *
              C50907 +
          ((((C29487 * C1175 -
              ((C28956 + C28955) * C1169 + (C28954 + C28953) * C1174) +
              C29488 * C50688) *
                 C22848 +
             (C29485 * C1175 - (C29484 * C1169 + C29483 * C1174) +
              C29486 * C50688) *
                 C50790) *
                C50920 +
            ((C29913 * C1175 -
              ((C29715 + C29716) * C1169 + (C29717 + C29718) * C1174) +
              C29914 * C50688) *
                 C22848 +
             ((C26816 + C26815) * C1175 - (C29915 * C1169 + C29916 * C1174) +
              (C26818 + C26817) * C50688) *
                 C50790) *
                C50814) *
               C1277 +
           ((((C28960 + C28959) * C1174 + (C28958 + C28957) * C1169 -
              C30720 * C1175 - C30719 * C50688) *
                 C22848 +
             (C30717 * C1174 + C30718 * C1169 - (C27423 + C27424) * C1175 -
              (C27425 + C27426) * C50688) *
                 C50790) *
                C50920 +
            (((C29707 + C29708) * C1174 + (C29709 + C29710) * C1169 -
              (C29712 + C29711) * C1175 - (C29714 + C29713) * C50688) *
                 C22848 +
             ((C29711 + C29712) * C1174 + (C29713 + C29714) * C1169 -
              (C25667 * C3321 + C50617 * C3324 + C25666 * C3322 +
               C25661 * C3325) *
                  C1175 -
              (C25667 * C3327 + C50617 * C3330 + C25666 * C3328 +
               C25661 * C3331) *
                  C50688) *
                 C50790) *
                C50814) *
               C50643) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                  C1174 +
              (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                  C1169 -
              (C25863 + C25864) * C1175 - (C25865 + C25866) * C50688) *
                 C22848 +
             ((C25864 + C25863) * C1174 + (C25866 + C25865) * C1169 -
              (C25867 + C25868) * C1175 - (C25869 + C25870) * C50688) *
                 C50790) *
                C50920 +
            (((C28953 + C28954) * C1174 + (C28955 + C28956) * C1169 -
              C29483 * C1175 - C29484 * C50688) *
                 C22848 +
             (C29487 * C1174 + C29488 * C1169 - C26501 * C1175 -
              C26502 * C50688) *
                 C50790) *
                C50814) *
               C50898 +
           ((((C25871 + C25872) * C1175 -
              ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                   C1169 +
               (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                   C1174) +
              (C25873 + C25874) * C50688) *
                 C22848 +
             ((C25875 + C25876) * C1175 -
              ((C25874 + C25873) * C1169 + (C25872 + C25871) * C1174) +
              (C25877 + C25878) * C50688) *
                 C50790) *
                C50920 +
            ((C30717 * C1175 -
              ((C28957 + C28958) * C1169 + (C28959 + C28960) * C1174) +
              C30718 * C50688) *
                 C22848 +
             ((C27424 + C27423) * C1175 - (C30719 * C1169 + C30720 * C1174) +
              (C27426 + C27425) * C50688) *
                 C50790) *
                C50814) *
               C50643) *
              C1514 +
          ((((C29487 * C1175 -
              ((C28956 + C28955) * C1169 + (C28954 + C28953) * C1174) +
              C29488 * C50688) *
                 C22848 +
             (C29485 * C1175 - (C29484 * C1169 + C29483 * C1174) +
              C29486 * C50688) *
                 C50790) *
                C50920 +
            ((C29913 * C1175 -
              ((C29715 + C29716) * C1169 + (C29717 + C29718) * C1174) +
              C29914 * C50688) *
                 C22848 +
             ((C26816 + C26815) * C1175 - (C29915 * C1169 + C29916 * C1174) +
              (C26818 + C26817) * C50688) *
                 C50790) *
                C50814) *
               C50898 +
           ((((C28960 + C28959) * C1174 + (C28958 + C28957) * C1169 -
              C30720 * C1175 - C30719 * C50688) *
                 C22848 +
             (C30717 * C1174 + C30718 * C1169 - (C27423 + C27424) * C1175 -
              (C27425 + C27426) * C50688) *
                 C50790) *
                C50920 +
            (((C29707 + C29708) * C1174 + (C29709 + C29710) * C1169 -
              (C29712 + C29711) * C1175 - (C29714 + C29713) * C50688) *
                 C22848 +
             ((C29711 + C29712) * C1174 + (C29713 + C29714) * C1169 -
              (C25667 * C3321 + C50617 * C3324 + C25666 * C3322 +
               C25661 * C3325) *
                  C1175 -
              (C25667 * C3327 + C50617 * C3330 + C25666 * C3328 +
               C25661 * C3331) *
                  C50688) *
                 C50790) *
                C50814) *
               C50643) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C1279 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50951 -
             (C25863 + C25864) * C1280 - (C25865 + C25866) * C50939 +
             C26179 * C1281 + C26180 * C1276) *
                C22848 +
            ((C25864 + C25863) * C1279 + (C25866 + C25865) * C50951 -
             (C25867 + C25868) * C1280 - (C25869 + C25870) * C50939 +
             (C26199 + C26200) * C1281 + (C26201 + C26202) * C1276) *
                C50790) *
               C50920 +
           (((C28953 + C28954) * C1279 + (C28955 + C28956) * C50951 -
             C29483 * C1280 - C29484 * C50939 + C29485 * C1281 +
             C29486 * C1276) *
                C22848 +
            (C29487 * C1279 + C29488 * C50951 - C26501 * C1280 -
             C26502 * C50939 + (C26498 + C26497) * C1281 +
             (C26500 + C26499) * C1276) *
                C50790) *
               C50814) *
              C50638 * C1514 +
          (((C29487 * C1280 -
             ((C28956 + C28955) * C50951 + (C28954 + C28953) * C1279) +
             C29488 * C50939 - C26501 * C1281 - C26502 * C1276) *
                C22848 +
            (C29485 * C1280 - (C29484 * C50951 + C29483 * C1279) +
             C29486 * C50939 - (C26497 + C26498) * C1281 -
             (C26499 + C26500) * C1276) *
                C50790) *
               C50920 +
           ((C29913 * C1280 -
             ((C29715 + C29716) * C50951 + (C29717 + C29718) * C1279) +
             C29914 * C50939 - (C26815 + C26816) * C1281 -
             (C26817 + C26818) * C1276) *
                C22848 +
            ((C26816 + C26815) * C1280 - (C29915 * C50951 + C29916 * C1279) +
             (C26818 + C26817) * C50939 -
             (C25667 * C8934 + C50617 * C8936 + C25666 * C8935 +
              C25661 * C8937) *
                 C1281 -
             (C25667 * C8938 + C50617 * C8940 + C25666 * C8939 +
              C25661 * C8941) *
                 C1276) *
                C50790) *
               C50814) *
              C50638 * C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C1174 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C1169 -
             (C25863 + C25864) * C1175 - (C25865 + C25866) * C50688) *
                C22848 +
            ((C25864 + C25863) * C1174 + (C25866 + C25865) * C1169 -
             (C25867 + C25868) * C1175 - (C25869 + C25870) * C50688) *
                C50790) *
               C50920 +
           (((C28953 + C28954) * C1174 + (C28955 + C28956) * C1169 -
             C29483 * C1175 - C29484 * C50688) *
                C22848 +
            (C29487 * C1174 + C29488 * C1169 - C26501 * C1175 -
             C26502 * C50688) *
                C50790) *
               C50814) *
              C50638 * C50952 +
          (((C29487 * C1175 -
             ((C28956 + C28955) * C1169 + (C28954 + C28953) * C1174) +
             C29488 * C50688) *
                C22848 +
            (C29485 * C1175 - (C29484 * C1169 + C29483 * C1174) +
             C29486 * C50688) *
                C50790) *
               C50920 +
           ((C29913 * C1175 -
             ((C29715 + C29716) * C1169 + (C29717 + C29718) * C1174) +
             C29914 * C50688) *
                C22848 +
            ((C26816 + C26815) * C1175 - (C29915 * C1169 + C29916 * C1174) +
             (C26818 + C26817) * C50688) *
                C50790) *
               C50814) *
              C50638 * C50942 +
          ((((C29718 + C29717) * C1174 + (C29716 + C29715) * C1169 -
             C29916 * C1175 - C29915 * C50688) *
                C22848 +
            (C29913 * C1174 + C29914 * C1169 - (C26815 + C26816) * C1175 -
             (C26817 + C26818) * C50688) *
                C50790) *
               C50920 +
           (((C30067 + C30068) * C1174 + (C30069 + C30070) * C1169 -
             (C29925 + C29926) * C1175 - (C29927 + C29928) * C50688) *
                C22848 +
            ((C29926 + C29925) * C1174 + (C29928 + C29927) * C1169 -
             (C25667 * C9064 + C50617 * C9068 + C25666 * C9065 +
              C25661 * C9069) *
                 C1175 -
             (C25667 * C9066 + C50617 * C9070 + C25666 * C9067 +
              C25661 * C9071) *
                 C50688) *
                C50790) *
               C50814) *
              C50638 * C1746)) /
        (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C506 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C501 -
             (C25863 + C25864) * C507 - (C25865 + C25866) * C502 +
             C26179 * C508 + C26180 * C503) *
                C22848 +
            ((C25864 + C25863) * C506 + (C25866 + C25865) * C501 -
             (C25867 + C25868) * C507 - (C25869 + C25870) * C502 +
             (C26199 + C26200) * C508 + (C26201 + C26202) * C503) *
                C50790) *
               C50920 +
           (((C28953 + C28954) * C506 + (C28955 + C28956) * C501 -
             (C26490 + C26489) * C507 - (C26492 + C26491) * C502 +
             (C26494 + C26493) * C508 + (C26496 + C26495) * C503) *
                C22848 +
            ((C26489 + C26490) * C506 + (C26491 + C26492) * C501 -
             C26501 * C507 - C26502 * C502 + (C26498 + C26497) * C508 +
             (C26500 + C26499) * C503) *
                C50790) *
               C50814) *
              C50898 +
          ((((C25871 + C25872) * C507 -
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C501 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C506) +
             (C25873 + C25874) * C502 - C26189 * C508 - C26190 * C503) *
                C22848 +
            ((C25875 + C25876) * C507 -
             ((C25874 + C25873) * C501 + (C25872 + C25871) * C506) +
             (C25877 + C25878) * C502 - (C26203 + C26204) * C508 -
             (C26205 + C26206) * C503) *
                C50790) *
               C50920 +
           (((C27420 + C27419) * C507 -
             ((C28957 + C28958) * C501 + (C28959 + C28960) * C506) +
             (C27422 + C27421) * C502 - (C27423 + C27424) * C508 -
             (C27425 + C27426) * C503) *
                C22848 +
            ((C27424 + C27423) * C507 -
             ((C27421 + C27422) * C501 + (C27419 + C27420) * C506) +
             (C27426 + C27425) * C502 -
             (C25667 * C2981 + C50617 * C2984 + C25666 * C2982 +
              C25661 * C2985) *
                 C508 -
             (C25667 * C2987 + C50617 * C2990 + C25666 * C2988 +
              C25661 * C2991) *
                 C503) *
                C50790) *
               C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C121 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50672) *
                C22848 +
            ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50790) *
               C50920 +
           (((C25666 * C383 + C25661 * C394 + C25667 * C379 + C50617 * C385) *
                 C121 +
             (C25666 * C393 + C25661 * C401 + C25667 * C389 + C50617 * C397) *
                 C50672) *
                C22848 +
            ((C26489 + C26490) * C121 + (C26491 + C26492) * C50672) * C50790) *
               C50814) *
              C112 -
          ((((C27421 + C27422) * C50672 + (C27419 + C27420) * C121) * C50790 +
            ((C25667 * C390 + C50617 * C398 + C25666 * C389 + C25661 * C397) *
                 C50672 +
             (C25667 * C380 + C50617 * C386 + C25666 * C379 + C25661 * C385) *
                 C121) *
                C22848) *
               C50814 +
           (((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50790 +
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50672 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C121) *
                C22848) *
               C50920) *
              C113 +
          ((((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                 C121 +
             (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                 C50672) *
                C22848 +
            ((C25880 + C25879) * C121 + (C25882 + C25881) * C50672) * C50790) *
               C50920 +
           (((C25666 * C380 + C25661 * C386 + C25667 * C381 + C50617 * C387) *
                 C121 +
             (C25666 * C390 + C25661 * C398 + C25667 * C391 + C50617 * C399) *
                 C50672) *
                C22848 +
            ((C25666 * C720 + C25661 * C728 + C25667 * C721 + C50617 * C729) *
                 C121 +
             (C25666 * C732 + C25661 * C744 + C25667 * C733 + C50617 * C745) *
                 C50672) *
                C50790) *
               C50814) *
              C114 -
          ((((C25667 * C1414 + C50617 * C1415 + C25666 * C733 + C25661 * C745) *
                 C50672 +
             (C25667 * C1412 + C50617 * C1413 + C25666 * C721 + C25661 * C729) *
                 C121) *
                C50790 +
            ((C25667 * C392 + C50617 * C400 + C25666 * C391 + C25661 * C399) *
                 C50672 +
             (C25667 * C382 + C50617 * C388 + C25666 * C381 + C25661 * C387) *
                 C121) *
                C22848) *
               C50814 +
           (((C25667 * C270 + C50617 * C277 + C25666 * C265 + C25661 * C273) *
                 C50672 +
             (C25667 * C259 + C50617 * C269 + C25666 * C255 + C25661 * C261) *
                 C121) *
                C50790 +
            ((C25667 * C137 + C50617 * C147 + C25666 * C136 + C25661 * C146) *
                 C50672 +
             (C25667 * C126 + C50617 * C138 + C25666 * C125 + C25661 * C132) *
                 C121) *
                C22848) *
               C50920) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                  C121 +
              (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                  C50672) *
                 C22848 +
             ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50790) *
                C50920 +
            (((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C22848 +
             (C29487 * C121 + C29488 * C50672) * C50790) *
                C50814) *
               C50898 -
           ((((C27421 + C27422) * C50672 + (C27419 + C27420) * C121) * C50790 +
             ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C22848) *
                C50814 +
            (((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50790 +
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C50672 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C121) *
                 C22848) *
                C50920) *
               C50643) *
              C848 +
          (((((C28960 + C28959) * C121 + (C28958 + C28957) * C50672) * C22848 +
             ((C27420 + C27419) * C121 + (C27422 + C27421) * C50672) * C50790) *
                C50920 +
            (((C29707 + C29708) * C121 + (C29709 + C29710) * C50672) * C22848 +
             ((C29711 + C29712) * C121 + (C29713 + C29714) * C50672) * C50790) *
                C50814) *
               C50643 -
           ((((C26813 + C26814) * C50672 + (C26811 + C26812) * C121) * C50790 +
             ((C29715 + C29716) * C50672 + (C29717 + C29718) * C121) * C22848) *
                C50814 +
            ((C29484 * C50672 + C29483 * C121) * C50790 +
             ((C28956 + C28955) * C50672 + (C28954 + C28953) * C121) * C22848) *
                C50920) *
               C50898) *
              C849 +
          (((((C29718 + C29717) * C121 + (C29716 + C29715) * C50672) * C22848 +
             ((C26812 + C26811) * C121 + (C26814 + C26813) * C50672) * C50790) *
                C50920 +
            (((C25666 * C1058 + C25661 * C1066 + C25667 * C1057 +
               C50617 * C1065) *
                  C121 +
              (C25666 * C1062 + C25661 * C1070 + C25667 * C1061 +
               C50617 * C1069) *
                  C50672) *
                 C22848 +
             ((C25666 * C3451 + C25661 * C3457 + C25667 * C3450 +
               C50617 * C3456) *
                  C121 +
              (C25666 * C3454 + C25661 * C3460 + C25667 * C3453 +
               C50617 * C3459) *
                  C50672) *
                 C50790) *
                C50814) *
               C50898 -
           ((((C25667 * C3452 + C50617 * C3458 + C25666 * C3453 +
               C25661 * C3459) *
                  C50672 +
              (C25667 * C3449 + C50617 * C3455 + C25666 * C3450 +
               C25661 * C3456) *
                  C121) *
                 C50790 +
             ((C25667 * C1060 + C50617 * C1068 + C25666 * C1061 +
               C25661 * C1069) *
                  C50672 +
              (C25667 * C1056 + C50617 * C1064 + C25666 * C1057 +
               C25661 * C1065) *
                  C121) *
                 C22848) *
                C50814 +
            (((C29714 + C29713) * C50672 + (C29712 + C29711) * C121) * C50790 +
             ((C29710 + C29709) * C50672 + (C29708 + C29707) * C121) * C22848) *
                C50920) *
               C50643) *
              C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C600 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C595 -
            (C25863 + C25864) * C601 - (C25865 + C25866) * C596 +
            C26179 * C602 + C26180 * C597 - C26305 * C603 - C26306 * C598) *
               C22848 +
           ((C25864 + C25863) * C600 + (C25866 + C25865) * C595 -
            (C25867 + C25868) * C601 - (C25869 + C25870) * C596 +
            (C26199 + C26200) * C602 + (C26201 + C26202) * C597 -
            (C26315 + C26316) * C603 - (C26317 + C26318) * C598) *
               C50790) *
              C50920 +
          (((C28953 + C28954) * C600 + (C28955 + C28956) * C595 -
            (C26490 + C26489) * C601 - (C26492 + C26491) * C596 +
            (C26494 + C26493) * C602 + (C26496 + C26495) * C597 -
            (C26497 + C26498) * C603 - (C26499 + C26500) * C598) *
               C22848 +
           ((C26489 + C26490) * C600 + (C26491 + C26492) * C595 -
            C26501 * C601 - C26502 * C596 + (C26498 + C26497) * C602 +
            (C26500 + C26499) * C597 -
            (C25667 * C8596 + C50617 * C8598 + C25666 * C8597 +
             C25661 * C8599) *
                C603 -
            (C25667 * C8600 + C50617 * C8602 + C25666 * C8601 +
             C25661 * C8603) *
                C598) *
               C50790) *
              C50814) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C253 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50905 -
             (C25863 + C25864) * C254 - (C25865 + C25866) * C50688) *
                C22848 +
            ((C25864 + C25863) * C253 + (C25866 + C25865) * C50905 -
             (C25867 + C25868) * C254 - (C25869 + C25870) * C50688) *
                C50790) *
               C50920 +
           (((C25666 * C383 + C25661 * C394 + C25667 * C379 + C50617 * C385) *
                 C253 +
             (C25666 * C393 + C25661 * C401 + C25667 * C389 + C50617 * C397) *
                 C50905 -
             (C26490 + C26489) * C254 - (C26492 + C26491) * C50688) *
                C22848 +
            ((C26489 + C26490) * C253 + (C26491 + C26492) * C50905 -
             C26501 * C254 - C26502 * C50688) *
                C50790) *
               C50814) *
              C250 +
          ((((C25871 + C25872) * C254 -
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C50905 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C253) +
             (C25873 + C25874) * C50688) *
                C22848 +
            ((C25875 + C25876) * C254 -
             ((C25874 + C25873) * C50905 + (C25872 + C25871) * C253) +
             (C25877 + C25878) * C50688) *
                C50790) *
               C50920 +
           (((C27420 + C27419) * C254 -
             ((C25667 * C390 + C50617 * C398 + C25666 * C389 + C25661 * C397) *
                  C50905 +
              (C25667 * C380 + C50617 * C386 + C25666 * C379 + C25661 * C385) *
                  C253) +
             (C27422 + C27421) * C50688) *
                C22848 +
            ((C27424 + C27423) * C254 -
             ((C27421 + C27422) * C50905 + (C27419 + C27420) * C253) +
             (C27426 + C27425) * C50688) *
                C50790) *
               C50814) *
              C251 +
          ((((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                 C253 +
             (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                 C50905 -
             (C25879 + C25880) * C254 - (C25881 + C25882) * C50688) *
                C22848 +
            ((C25880 + C25879) * C253 + (C25882 + C25881) * C50905 -
             (C25883 + C25884) * C254 - (C25885 + C25886) * C50688) *
                C50790) *
               C50920 +
           (((C25666 * C380 + C25661 * C386 + C25667 * C381 + C50617 * C387) *
                 C253 +
             (C25666 * C390 + C25661 * C398 + C25667 * C391 + C50617 * C399) *
                 C50905 -
             (C28731 + C28732) * C254 - (C28733 + C28734) * C50688) *
                C22848 +
            ((C28732 + C28731) * C253 + (C28734 + C28733) * C50905 -
             (C25667 * C722 + C50617 * C734 + C25666 * C723 + C25661 * C735) *
                 C254 -
             (C25667 * C738 + C50617 * C746 + C25666 * C739 + C25661 * C747) *
                 C50688) *
                C50790) *
               C50814) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C253 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50905 -
             (C25863 + C25864) * C254 - (C25865 + C25866) * C50688) *
                C22848 +
            ((C25864 + C25863) * C253 + (C25866 + C25865) * C50905 -
             (C25867 + C25868) * C254 - (C25869 + C25870) * C50688) *
                C50790) *
               C50920 +
           (((C28953 + C28954) * C253 + (C28955 + C28956) * C50905 -
             C29483 * C254 - C29484 * C50688) *
                C22848 +
            (C29487 * C253 + C29488 * C50905 - C26501 * C254 -
             C26502 * C50688) *
                C50790) *
               C50814) *
              C50638 * C848 +
          (((C29487 * C254 -
             ((C28956 + C28955) * C50905 + (C28954 + C28953) * C253) +
             C29488 * C50688) *
                C22848 +
            (C29485 * C254 - (C29484 * C50905 + C29483 * C253) +
             C29486 * C50688) *
                C50790) *
               C50920 +
           ((C29913 * C254 -
             ((C29715 + C29716) * C50905 + (C29717 + C29718) * C253) +
             C29914 * C50688) *
                C22848 +
            ((C26816 + C26815) * C254 - (C29915 * C50905 + C29916 * C253) +
             (C26818 + C26817) * C50688) *
                C50790) *
               C50814) *
              C50638 * C849 +
          ((((C29718 + C29717) * C253 + (C29716 + C29715) * C50905 -
             C29916 * C254 - C29915 * C50688) *
                C22848 +
            (C29913 * C253 + C29914 * C50905 - (C26815 + C26816) * C254 -
             (C26817 + C26818) * C50688) *
                C50790) *
               C50920 +
           (((C25666 * C1058 + C25661 * C1066 + C25667 * C1057 +
              C50617 * C1065) *
                 C253 +
             (C25666 * C1062 + C25661 * C1070 + C25667 * C1061 +
              C50617 * C1069) *
                 C50905 -
             (C29925 + C29926) * C254 - (C29927 + C29928) * C50688) *
                C22848 +
            ((C29926 + C29925) * C253 + (C29928 + C29927) * C50905 -
             (C25667 * C9064 + C50617 * C9068 + C25666 * C9065 +
              C25661 * C9069) *
                 C254 -
             (C25667 * C9066 + C50617 * C9070 + C25666 * C9067 +
              C25661 * C9071) *
                 C50688) *
                C50790) *
               C50814) *
              C50638 * C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C506 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C501 -
             (C25863 + C25864) * C507 - (C25865 + C25866) * C502 +
             C26179 * C508 + C26180 * C503) *
                C22848 +
            ((C25864 + C25863) * C506 + (C25866 + C25865) * C501 -
             (C25867 + C25868) * C507 - (C25869 + C25870) * C502 +
             (C26199 + C26200) * C508 + (C26201 + C26202) * C503) *
                C50790) *
               C50920 +
           (((C28953 + C28954) * C506 + (C28955 + C28956) * C501 -
             C29483 * C507 - C29484 * C502 + C29485 * C508 + C29486 * C503) *
                C22848 +
            (C29487 * C506 + C29488 * C501 - C26501 * C507 - C26502 * C502 +
             (C26498 + C26497) * C508 + (C26500 + C26499) * C503) *
                C50790) *
               C50814) *
              C50638 * C50907 +
          (((C29487 * C507 -
             ((C28956 + C28955) * C501 + (C28954 + C28953) * C506) +
             C29488 * C502 - C26501 * C508 - C26502 * C503) *
                C22848 +
            (C29485 * C507 - (C29484 * C501 + C29483 * C506) + C29486 * C502 -
             (C26497 + C26498) * C508 - (C26499 + C26500) * C503) *
                C50790) *
               C50920 +
           (((C26812 + C26811) * C507 -
             ((C25667 * C861 + C50617 * C867 + C25666 * C860 + C25661 * C866) *
                  C501 +
              (C25667 * C852 + C50617 * C857 + C25666 * C851 + C25661 * C856) *
                  C506) +
             (C26814 + C26813) * C502 - (C26815 + C26816) * C508 -
             (C26817 + C26818) * C503) *
                C22848 +
            ((C26816 + C26815) * C507 -
             ((C26813 + C26814) * C501 + (C26811 + C26812) * C506) +
             (C26818 + C26817) * C502 -
             (C25667 * C8934 + C50617 * C8936 + C25666 * C8935 +
              C25661 * C8937) *
                 C508 -
             (C25667 * C8938 + C50617 * C8940 + C25666 * C8939 +
              C25661 * C8941) *
                 C503) *
                C50790) *
               C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                  C121 +
              (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                  C50672) *
                 C22848 +
             ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50790) *
                C50920 +
            (((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C22848 +
             ((C26489 + C26490) * C121 + (C26491 + C26492) * C50672) * C50790) *
                C50814) *
               C250 -
           ((((C27421 + C27422) * C50672 + (C27419 + C27420) * C121) * C50790 +
             ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C22848) *
                C50814 +
            (((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50790 +
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C50672 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C121) *
                 C22848) *
                C50920) *
               C251 +
           ((((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                  C121 +
              (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                  C50672) *
                 C22848 +
             ((C25880 + C25879) * C121 + (C25882 + C25881) * C50672) * C50790) *
                C50920 +
            (((C28961 + C28962) * C121 + (C28963 + C28964) * C50672) * C22848 +
             ((C28732 + C28731) * C121 + (C28734 + C28733) * C50672) * C50790) *
                C50814) *
               C252) *
              C50907 +
          (((((C28960 + C28959) * C121 + (C28958 + C28957) * C50672) * C22848 +
             ((C27420 + C27419) * C121 + (C27422 + C27421) * C50672) * C50790) *
                C50920 +
            (((C25666 * C852 + C25661 * C857 + C25667 * C853 + C50617 * C858) *
                  C121 +
              (C25666 * C861 + C25661 * C867 + C25667 * C862 + C50617 * C868) *
                  C50672) *
                 C22848 +
             ((C25666 * C971 + C25661 * C975 + C25667 * C970 + C50617 * C974) *
                  C121 +
              (C25666 * C979 + C25661 * C983 + C25667 * C978 + C50617 * C982) *
                  C50672) *
                 C50790) *
                C50814) *
               C251 -
           ((((C26813 + C26814) * C50672 + (C26811 + C26812) * C121) * C50790 +
             ((C25667 * C861 + C50617 * C867 + C25666 * C860 + C25661 * C866) *
                  C50672 +
              (C25667 * C852 + C50617 * C857 + C25666 * C851 + C25661 * C856) *
                  C121) *
                 C22848) *
                C50814 +
            (((C26492 + C26491) * C50672 + (C26490 + C26489) * C121) * C50790 +
             ((C28956 + C28955) * C50672 + (C28954 + C28953) * C121) * C22848) *
                C50920) *
               C250 -
           ((((C25667 * C977 + C50617 * C981 + C25666 * C978 + C25661 * C982) *
                  C50672 +
              (C25667 * C969 + C50617 * C973 + C25666 * C970 + C25661 * C974) *
                  C121) *
                 C50790 +
             ((C25667 * C863 + C50617 * C869 + C25666 * C862 + C25661 * C868) *
                  C50672 +
              (C25667 * C854 + C50617 * C859 + C25666 * C853 + C25661 * C858) *
                  C121) *
                 C22848) *
                C50814 +
            (((C28733 + C28734) * C50672 + (C28731 + C28732) * C121) * C50790 +
             ((C28964 + C28963) * C50672 + (C28962 + C28961) * C121) * C22848) *
                C50920) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C121 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50672) *
                C22848 +
            ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50790) *
               C50920 +
           (((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C22848 +
            (C29487 * C121 + C29488 * C50672) * C50790) *
               C50814) *
              C50638 * C1051 -
          (((C29915 * C50672 + C29916 * C121) * C50790 +
            ((C29715 + C29716) * C50672 + (C29717 + C29718) * C121) * C22848) *
               C50814 +
           ((C29484 * C50672 + C29483 * C121) * C50790 +
            ((C28956 + C28955) * C50672 + (C28954 + C28953) * C121) * C22848) *
               C50920) *
              C50638 * C1052 +
          ((((C29718 + C29717) * C121 + (C29716 + C29715) * C50672) * C22848 +
            (C29913 * C121 + C29914 * C50672) * C50790) *
               C50920 +
           (((C30067 + C30068) * C121 + (C30069 + C30070) * C50672) * C22848 +
            ((C29926 + C29925) * C121 + (C29928 + C29927) * C50672) * C50790) *
               C50814) *
              C50638 * C1053 -
          ((((C25667 * C16509 + C50617 * C16510 + C25666 * C13784 +
              C25661 * C13787) *
                 C50672 +
             (C25667 * C16507 + C50617 * C16508 + C25666 * C13781 +
              C25661 * C13785) *
                 C121) *
                C50790 +
            ((C25667 * C6203 + C50617 * C6209 + C25666 * C6204 +
              C25661 * C6210) *
                 C50672 +
             (C25667 * C6200 + C50617 * C6206 + C25666 * C6201 +
              C25661 * C6207) *
                 C121) *
                C22848) *
               C50814 +
           (((C29927 + C29928) * C50672 + (C29925 + C29926) * C121) * C50790 +
            ((C30070 + C30069) * C50672 + (C30068 + C30067) * C121) * C22848) *
               C50920) *
              C50638 * C1054)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                  C121 +
              (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                  C50672) *
                 C22848 +
             ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50790) *
                C50920 +
            (((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C22848 +
             (C29487 * C121 + C29488 * C50672) * C50790) *
                C50814) *
               C50950 -
           (((C30719 * C50672 + C30720 * C121) * C50790 +
             ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C22848) *
                C50814 +
            (((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50790 +
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C50672 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C121) *
                 C22848) *
                C50920) *
               C50936 +
           ((((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                  C121 +
              (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                  C50672) *
                 C22848 +
             ((C25880 + C25879) * C121 + (C25882 + C25881) * C50672) * C50790) *
                C50920 +
            (((C28961 + C28962) * C121 + (C28963 + C28964) * C50672) * C22848 +
             ((C28732 + C28731) * C121 + (C28734 + C28733) * C50672) * C50790) *
                C50814) *
               C1173) *
              C1514 +
          (((((C28960 + C28959) * C121 + (C28958 + C28957) * C50672) * C22848 +
             (C30717 * C121 + C30718 * C50672) * C50790) *
                C50920 +
            (((C29707 + C29708) * C121 + (C29709 + C29710) * C50672) * C22848 +
             ((C29711 + C29712) * C121 + (C29713 + C29714) * C50672) * C50790) *
                C50814) *
               C50936 -
           (((C29915 * C50672 + C29916 * C121) * C50790 +
             ((C29715 + C29716) * C50672 + (C29717 + C29718) * C121) * C22848) *
                C50814 +
            ((C29484 * C50672 + C29483 * C121) * C50790 +
             ((C28956 + C28955) * C50672 + (C28954 + C28953) * C121) * C22848) *
                C50920) *
               C50950 -
           ((((C25667 * C977 + C50617 * C981 + C25666 * C978 + C25661 * C982) *
                  C50672 +
              (C25667 * C969 + C50617 * C973 + C25666 * C970 + C25661 * C974) *
                  C121) *
                 C50790 +
             ((C25667 * C863 + C50617 * C869 + C25666 * C862 + C25661 * C868) *
                  C50672 +
              (C25667 * C854 + C50617 * C859 + C25666 * C853 + C25661 * C858) *
                  C121) *
                 C22848) *
                C50814 +
            (((C28733 + C28734) * C50672 + (C28731 + C28732) * C121) * C50790 +
             ((C28964 + C28963) * C50672 + (C28962 + C28961) * C121) * C22848) *
                C50920) *
               C1173) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                  C253 +
              (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                  C50905 -
              (C25863 + C25864) * C254 - (C25865 + C25866) * C50688) *
                 C22848 +
             ((C25864 + C25863) * C253 + (C25866 + C25865) * C50905 -
              (C25867 + C25868) * C254 - (C25869 + C25870) * C50688) *
                 C50790) *
                C50920 +
            (((C28953 + C28954) * C253 + (C28955 + C28956) * C50905 -
              C29483 * C254 - C29484 * C50688) *
                 C22848 +
             (C29487 * C253 + C29488 * C50905 - C26501 * C254 -
              C26502 * C50688) *
                 C50790) *
                C50814) *
               C1277 +
           ((((C25871 + C25872) * C254 -
              ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                   C50905 +
               (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                   C253) +
              (C25873 + C25874) * C50688) *
                 C22848 +
             ((C25875 + C25876) * C254 -
              ((C25874 + C25873) * C50905 + (C25872 + C25871) * C253) +
              (C25877 + C25878) * C50688) *
                 C50790) *
                C50920 +
            ((C30717 * C254 -
              ((C28957 + C28958) * C50905 + (C28959 + C28960) * C253) +
              C30718 * C50688) *
                 C22848 +
             ((C27424 + C27423) * C254 - (C30719 * C50905 + C30720 * C253) +
              (C27426 + C27425) * C50688) *
                 C50790) *
                C50814) *
               C50643) *
              C1514 +
          ((((C29487 * C254 -
              ((C28956 + C28955) * C50905 + (C28954 + C28953) * C253) +
              C29488 * C50688) *
                 C22848 +
             (C29485 * C254 - (C29484 * C50905 + C29483 * C253) +
              C29486 * C50688) *
                 C50790) *
                C50920 +
            ((C29913 * C254 -
              ((C29715 + C29716) * C50905 + (C29717 + C29718) * C253) +
              C29914 * C50688) *
                 C22848 +
             ((C26816 + C26815) * C254 - (C29915 * C50905 + C29916 * C253) +
              (C26818 + C26817) * C50688) *
                 C50790) *
                C50814) *
               C1277 +
           ((((C28960 + C28959) * C253 + (C28958 + C28957) * C50905 -
              C30720 * C254 - C30719 * C50688) *
                 C22848 +
             (C30717 * C253 + C30718 * C50905 - (C27423 + C27424) * C254 -
              (C27425 + C27426) * C50688) *
                 C50790) *
                C50920 +
            (((C29707 + C29708) * C253 + (C29709 + C29710) * C50905 -
              (C29712 + C29711) * C254 - (C29714 + C29713) * C50688) *
                 C22848 +
             ((C29711 + C29712) * C253 + (C29713 + C29714) * C50905 -
              (C25667 * C3321 + C50617 * C3324 + C25666 * C3322 +
               C25661 * C3325) *
                  C254 -
              (C25667 * C3327 + C50617 * C3330 + C25666 * C3328 +
               C25661 * C3331) *
                  C50688) *
                 C50790) *
                C50814) *
               C50643) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                  C121 +
              (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                  C50672) *
                 C22848 +
             ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50790) *
                C50920 +
            (((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C22848 +
             (C29487 * C121 + C29488 * C50672) * C50790) *
                C50814) *
               C1277 -
           (((C30719 * C50672 + C30720 * C121) * C50790 +
             ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C22848) *
                C50814 +
            (((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50790 +
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C50672 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C121) *
                 C22848) *
                C50920) *
               C50643) *
              C50952 +
          (((((C28960 + C28959) * C121 + (C28958 + C28957) * C50672) * C22848 +
             (C30717 * C121 + C30718 * C50672) * C50790) *
                C50920 +
            (((C29707 + C29708) * C121 + (C29709 + C29710) * C50672) * C22848 +
             ((C29711 + C29712) * C121 + (C29713 + C29714) * C50672) * C50790) *
                C50814) *
               C50643 -
           (((C29915 * C50672 + C29916 * C121) * C50790 +
             ((C29715 + C29716) * C50672 + (C29717 + C29718) * C121) * C22848) *
                C50814 +
            ((C29484 * C50672 + C29483 * C121) * C50790 +
             ((C28956 + C28955) * C50672 + (C28954 + C28953) * C121) * C22848) *
                C50920) *
               C1277) *
              C50942 +
          (((((C29718 + C29717) * C121 + (C29716 + C29715) * C50672) * C22848 +
             (C29913 * C121 + C29914 * C50672) * C50790) *
                C50920 +
            (((C30067 + C30068) * C121 + (C30069 + C30070) * C50672) * C22848 +
             ((C29926 + C29925) * C121 + (C29928 + C29927) * C50672) * C50790) *
                C50814) *
               C1277 -
           ((((C25667 * C3452 + C50617 * C3458 + C25666 * C3453 +
               C25661 * C3459) *
                  C50672 +
              (C25667 * C3449 + C50617 * C3455 + C25666 * C3450 +
               C25661 * C3456) *
                  C121) *
                 C50790 +
             ((C25667 * C1060 + C50617 * C1068 + C25666 * C1061 +
               C25661 * C1069) *
                  C50672 +
              (C25667 * C1056 + C50617 * C1064 + C25666 * C1057 +
               C25661 * C1065) *
                  C121) *
                 C22848) *
                C50814 +
            (((C29714 + C29713) * C50672 + (C29712 + C29711) * C121) * C50790 +
             ((C29710 + C29709) * C50672 + (C29708 + C29707) * C121) * C22848) *
                C50920) *
               C50643) *
              C1746)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C121 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50672) *
                C22848 +
            ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50790) *
               C50920 +
           (((C25666 * C383 + C25661 * C394 + C25667 * C379 + C50617 * C385) *
                 C121 +
             (C25666 * C393 + C25661 * C401 + C25667 * C389 + C50617 * C397) *
                 C50672) *
                C22848 +
            ((C26489 + C26490) * C121 + (C26491 + C26492) * C50672) * C50790) *
               C50814) *
              C112 -
          ((((C27421 + C27422) * C50672 + (C27419 + C27420) * C121) * C50790 +
            ((C25667 * C390 + C50617 * C398 + C25666 * C389 + C25661 * C397) *
                 C50672 +
             (C25667 * C380 + C50617 * C386 + C25666 * C379 + C25661 * C385) *
                 C121) *
                C22848) *
               C50814 +
           (((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50790 +
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50672 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C121) *
                C22848) *
               C50920) *
              C113 +
          ((((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                 C121 +
             (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                 C50672) *
                C22848 +
            ((C25880 + C25879) * C121 + (C25882 + C25881) * C50672) * C50790) *
               C50920 +
           (((C25666 * C380 + C25661 * C386 + C25667 * C381 + C50617 * C387) *
                 C121 +
             (C25666 * C390 + C25661 * C398 + C25667 * C391 + C50617 * C399) *
                 C50672) *
                C22848 +
            ((C25666 * C720 + C25661 * C728 + C25667 * C721 + C50617 * C729) *
                 C121 +
             (C25666 * C732 + C25661 * C744 + C25667 * C733 + C50617 * C745) *
                 C50672) *
                C50790) *
               C50814) *
              C114 -
          ((((C25667 * C1414 + C50617 * C1415 + C25666 * C733 + C25661 * C745) *
                 C50672 +
             (C25667 * C1412 + C50617 * C1413 + C25666 * C721 + C25661 * C729) *
                 C121) *
                C50790 +
            ((C25667 * C392 + C50617 * C400 + C25666 * C391 + C25661 * C399) *
                 C50672 +
             (C25667 * C382 + C50617 * C388 + C25666 * C381 + C25661 * C387) *
                 C121) *
                C22848) *
               C50814 +
           (((C25667 * C270 + C50617 * C277 + C25666 * C265 + C25661 * C273) *
                 C50672 +
             (C25667 * C259 + C50617 * C269 + C25666 * C255 + C25661 * C261) *
                 C121) *
                C50790 +
            ((C25667 * C137 + C50617 * C147 + C25666 * C136 + C25661 * C146) *
                 C50672 +
             (C25667 * C126 + C50617 * C138 + C25666 * C125 + C25661 * C132) *
                 C121) *
                C22848) *
               C50920) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C506 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C501 -
             (C25863 + C25864) * C507 - (C25865 + C25866) * C502 +
             C26179 * C508 + C26180 * C503) *
                C22848 +
            ((C25864 + C25863) * C506 + (C25866 + C25865) * C501 -
             (C25867 + C25868) * C507 - (C25869 + C25870) * C502 +
             (C26199 + C26200) * C508 + (C26201 + C26202) * C503) *
                C50790) *
               C50920 +
           (((C28953 + C28954) * C506 + (C28955 + C28956) * C501 -
             (C26490 + C26489) * C507 - (C26492 + C26491) * C502 +
             (C26494 + C26493) * C508 + (C26496 + C26495) * C503) *
                C22848 +
            ((C26489 + C26490) * C506 + (C26491 + C26492) * C501 -
             C26501 * C507 - C26502 * C502 + (C26498 + C26497) * C508 +
             (C26500 + C26499) * C503) *
                C50790) *
               C50814) *
              C50898 +
          ((((C25871 + C25872) * C507 -
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C501 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C506) +
             (C25873 + C25874) * C502 - C26189 * C508 - C26190 * C503) *
                C22848 +
            ((C25875 + C25876) * C507 -
             ((C25874 + C25873) * C501 + (C25872 + C25871) * C506) +
             (C25877 + C25878) * C502 - (C26203 + C26204) * C508 -
             (C26205 + C26206) * C503) *
                C50790) *
               C50920 +
           (((C27420 + C27419) * C507 -
             ((C28957 + C28958) * C501 + (C28959 + C28960) * C506) +
             (C27422 + C27421) * C502 - (C27423 + C27424) * C508 -
             (C27425 + C27426) * C503) *
                C22848 +
            ((C27424 + C27423) * C507 -
             ((C27421 + C27422) * C501 + (C27419 + C27420) * C506) +
             (C27426 + C27425) * C502 -
             (C25667 * C2981 + C50617 * C2984 + C25666 * C2982 +
              C25661 * C2985) *
                 C508 -
             (C25667 * C2987 + C50617 * C2990 + C25666 * C2988 +
              C25661 * C2991) *
                 C503) *
                C50790) *
               C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C253 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50905 -
             (C25863 + C25864) * C254 - (C25865 + C25866) * C50688) *
                C22848 +
            ((C25864 + C25863) * C253 + (C25866 + C25865) * C50905 -
             (C25867 + C25868) * C254 - (C25869 + C25870) * C50688) *
                C50790) *
               C50920 +
           (((C25666 * C383 + C25661 * C394 + C25667 * C379 + C50617 * C385) *
                 C253 +
             (C25666 * C393 + C25661 * C401 + C25667 * C389 + C50617 * C397) *
                 C50905 -
             (C26490 + C26489) * C254 - (C26492 + C26491) * C50688) *
                C22848 +
            ((C26489 + C26490) * C253 + (C26491 + C26492) * C50905 -
             C26501 * C254 - C26502 * C50688) *
                C50790) *
               C50814) *
              C250 +
          ((((C25871 + C25872) * C254 -
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C50905 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C253) +
             (C25873 + C25874) * C50688) *
                C22848 +
            ((C25875 + C25876) * C254 -
             ((C25874 + C25873) * C50905 + (C25872 + C25871) * C253) +
             (C25877 + C25878) * C50688) *
                C50790) *
               C50920 +
           (((C27420 + C27419) * C254 -
             ((C25667 * C390 + C50617 * C398 + C25666 * C389 + C25661 * C397) *
                  C50905 +
              (C25667 * C380 + C50617 * C386 + C25666 * C379 + C25661 * C385) *
                  C253) +
             (C27422 + C27421) * C50688) *
                C22848 +
            ((C27424 + C27423) * C254 -
             ((C27421 + C27422) * C50905 + (C27419 + C27420) * C253) +
             (C27426 + C27425) * C50688) *
                C50790) *
               C50814) *
              C251 +
          ((((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                 C253 +
             (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                 C50905 -
             (C25879 + C25880) * C254 - (C25881 + C25882) * C50688) *
                C22848 +
            ((C25880 + C25879) * C253 + (C25882 + C25881) * C50905 -
             (C25883 + C25884) * C254 - (C25885 + C25886) * C50688) *
                C50790) *
               C50920 +
           (((C25666 * C380 + C25661 * C386 + C25667 * C381 + C50617 * C387) *
                 C253 +
             (C25666 * C390 + C25661 * C398 + C25667 * C391 + C50617 * C399) *
                 C50905 -
             (C28731 + C28732) * C254 - (C28733 + C28734) * C50688) *
                C22848 +
            ((C28732 + C28731) * C253 + (C28734 + C28733) * C50905 -
             (C25667 * C722 + C50617 * C734 + C25666 * C723 + C25661 * C735) *
                 C254 -
             (C25667 * C738 + C50617 * C746 + C25666 * C739 + C25661 * C747) *
                 C50688) *
                C50790) *
               C50814) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C600 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C595 -
            (C25863 + C25864) * C601 - (C25865 + C25866) * C596 +
            C26179 * C602 + C26180 * C597 - C26305 * C603 - C26306 * C598) *
               C22848 +
           ((C25864 + C25863) * C600 + (C25866 + C25865) * C595 -
            (C25867 + C25868) * C601 - (C25869 + C25870) * C596 +
            (C26199 + C26200) * C602 + (C26201 + C26202) * C597 -
            (C26315 + C26316) * C603 - (C26317 + C26318) * C598) *
               C50790) *
              C50920 +
          (((C28953 + C28954) * C600 + (C28955 + C28956) * C595 -
            (C26490 + C26489) * C601 - (C26492 + C26491) * C596 +
            (C26494 + C26493) * C602 + (C26496 + C26495) * C597 -
            (C26497 + C26498) * C603 - (C26499 + C26500) * C598) *
               C22848 +
           ((C26489 + C26490) * C600 + (C26491 + C26492) * C595 -
            C26501 * C601 - C26502 * C596 + (C26498 + C26497) * C602 +
            (C26500 + C26499) * C597 -
            (C25667 * C8596 + C50617 * C8598 + C25666 * C8597 +
             C25661 * C8599) *
                C603 -
            (C25667 * C8600 + C50617 * C8602 + C25666 * C8601 +
             C25661 * C8603) *
                C598) *
               C50790) *
              C50814) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                  C121 +
              (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                  C50672) *
                 C22848 +
             ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50790) *
                C50920 +
            (((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C22848 +
             ((C26489 + C26490) * C121 + (C26491 + C26492) * C50672) * C50790) *
                C50814) *
               C250 -
           ((((C27421 + C27422) * C50672 + (C27419 + C27420) * C121) * C50790 +
             ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C22848) *
                C50814 +
            (((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50790 +
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C50672 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C121) *
                 C22848) *
                C50920) *
               C251 +
           ((((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                  C121 +
              (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                  C50672) *
                 C22848 +
             ((C25880 + C25879) * C121 + (C25882 + C25881) * C50672) * C50790) *
                C50920 +
            (((C28961 + C28962) * C121 + (C28963 + C28964) * C50672) * C22848 +
             ((C28732 + C28731) * C121 + (C28734 + C28733) * C50672) * C50790) *
                C50814) *
               C252) *
              C50907 +
          (((((C28960 + C28959) * C121 + (C28958 + C28957) * C50672) * C22848 +
             ((C27420 + C27419) * C121 + (C27422 + C27421) * C50672) * C50790) *
                C50920 +
            (((C25666 * C852 + C25661 * C857 + C25667 * C853 + C50617 * C858) *
                  C121 +
              (C25666 * C861 + C25661 * C867 + C25667 * C862 + C50617 * C868) *
                  C50672) *
                 C22848 +
             ((C25666 * C971 + C25661 * C975 + C25667 * C970 + C50617 * C974) *
                  C121 +
              (C25666 * C979 + C25661 * C983 + C25667 * C978 + C50617 * C982) *
                  C50672) *
                 C50790) *
                C50814) *
               C251 -
           ((((C26813 + C26814) * C50672 + (C26811 + C26812) * C121) * C50790 +
             ((C25667 * C861 + C50617 * C867 + C25666 * C860 + C25661 * C866) *
                  C50672 +
              (C25667 * C852 + C50617 * C857 + C25666 * C851 + C25661 * C856) *
                  C121) *
                 C22848) *
                C50814 +
            (((C26492 + C26491) * C50672 + (C26490 + C26489) * C121) * C50790 +
             ((C28956 + C28955) * C50672 + (C28954 + C28953) * C121) * C22848) *
                C50920) *
               C250 -
           ((((C25667 * C977 + C50617 * C981 + C25666 * C978 + C25661 * C982) *
                  C50672 +
              (C25667 * C969 + C50617 * C973 + C25666 * C970 + C25661 * C974) *
                  C121) *
                 C50790 +
             ((C25667 * C863 + C50617 * C869 + C25666 * C862 + C25661 * C868) *
                  C50672 +
              (C25667 * C854 + C50617 * C859 + C25666 * C853 + C25661 * C858) *
                  C121) *
                 C22848) *
                C50814 +
            (((C28733 + C28734) * C50672 + (C28731 + C28732) * C121) * C50790 +
             ((C28964 + C28963) * C50672 + (C28962 + C28961) * C121) * C22848) *
                C50920) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C506 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C501 -
             (C25863 + C25864) * C507 - (C25865 + C25866) * C502 +
             C26179 * C508 + C26180 * C503) *
                C22848 +
            ((C25864 + C25863) * C506 + (C25866 + C25865) * C501 -
             (C25867 + C25868) * C507 - (C25869 + C25870) * C502 +
             (C26199 + C26200) * C508 + (C26201 + C26202) * C503) *
                C50790) *
               C50920 +
           (((C28953 + C28954) * C506 + (C28955 + C28956) * C501 -
             C29483 * C507 - C29484 * C502 + C29485 * C508 + C29486 * C503) *
                C22848 +
            (C29487 * C506 + C29488 * C501 - C26501 * C507 - C26502 * C502 +
             (C26498 + C26497) * C508 + (C26500 + C26499) * C503) *
                C50790) *
               C50814) *
              C50638 * C50907 +
          (((C29487 * C507 -
             ((C28956 + C28955) * C501 + (C28954 + C28953) * C506) +
             C29488 * C502 - C26501 * C508 - C26502 * C503) *
                C22848 +
            (C29485 * C507 - (C29484 * C501 + C29483 * C506) + C29486 * C502 -
             (C26497 + C26498) * C508 - (C26499 + C26500) * C503) *
                C50790) *
               C50920 +
           (((C26812 + C26811) * C507 -
             ((C25667 * C861 + C50617 * C867 + C25666 * C860 + C25661 * C866) *
                  C501 +
              (C25667 * C852 + C50617 * C857 + C25666 * C851 + C25661 * C856) *
                  C506) +
             (C26814 + C26813) * C502 - (C26815 + C26816) * C508 -
             (C26817 + C26818) * C503) *
                C22848 +
            ((C26816 + C26815) * C507 -
             ((C26813 + C26814) * C501 + (C26811 + C26812) * C506) +
             (C26818 + C26817) * C502 -
             (C25667 * C8934 + C50617 * C8936 + C25666 * C8935 +
              C25661 * C8937) *
                 C508 -
             (C25667 * C8938 + C50617 * C8940 + C25666 * C8939 +
              C25661 * C8941) *
                 C503) *
                C50790) *
               C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C1174 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C1169 -
             (C7987 + C7988) * C1175 - (C7989 + C7990) * C50688) *
                C22848 +
            ((C7988 + C7987) * C1174 + (C7990 + C7989) * C1169 -
             (C7991 + C7992) * C1175 - (C7993 + C7994) * C50688) *
                C50790) *
               C32110 +
           (((C15766 + C15767) * C1174 + (C15768 + C15769) * C1169 -
             C41992 * C1175 - C41993 * C50688) *
                C22848 +
            (C41996 * C1174 + C41997 * C1169 - C8641 * C1175 - C8642 * C50688) *
                C50790) *
               C50814) *
              C50950 +
          ((((C7995 + C7996) * C1175 -
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C1169 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C1174) +
             (C7997 + C7998) * C50688) *
                C22848 +
            ((C7999 + C8000) * C1175 -
             ((C7998 + C7997) * C1169 + (C7996 + C7995) * C1174) +
             (C8001 + C8002) * C50688) *
                C50790) *
               C32110 +
           (((C9576 + C9575) * C1175 -
             ((C15778 + C15779) * C1169 + (C15780 + C15781) * C1174) +
             (C9578 + C9577) * C50688) *
                C22848 +
            ((C9580 + C9579) * C1175 -
             ((C9577 + C9578) * C1169 + (C9575 + C9576) * C1174) +
             (C9582 + C9581) * C50688) *
                C50790) *
               C50814) *
              C50936 +
          ((((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                 C1174 +
             (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                 C1169 -
             (C8003 + C8004) * C1175 - (C8005 + C8006) * C50688) *
                C22848 +
            ((C8004 + C8003) * C1174 + (C8006 + C8005) * C1169 -
             (C8007 + C8008) * C1175 - (C8009 + C8010) * C50688) *
                C50790) *
               C32110 +
           (((C15782 + C15783) * C1174 + (C15784 + C15785) * C1169 -
             (C41276 + C41277) * C1175 - (C41278 + C41279) * C50688) *
                C22848 +
            ((C41277 + C41276) * C1174 + (C41279 + C41278) * C1169 -
             (C49761 * C722 + C50617 * C734 + C49768 * C723 + C50891 * C735) *
                 C1175 -
             (C49761 * C738 + C50617 * C746 + C49768 * C739 + C50891 * C747) *
                 C50688) *
                C50790) *
               C50814) *
              C1173) *
         C50702) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C1279 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50951 -
             (C7987 + C7988) * C1280 - (C7989 + C7990) * C50939 +
             C8303 * C1281 + C8304 * C1276) *
                C22848 +
            ((C7988 + C7987) * C1279 + (C7990 + C7989) * C50951 -
             (C7991 + C7992) * C1280 - (C7993 + C7994) * C50939 +
             (C8323 + C8324) * C1281 + (C8325 + C8326) * C1276) *
                C50790) *
               C32110 +
           (((C15766 + C15767) * C1279 + (C15768 + C15769) * C50951 -
             C41992 * C1280 - C41993 * C50939 + C41994 * C1281 +
             C41995 * C1276) *
                C22848 +
            (C41996 * C1279 + C41997 * C50951 - C8641 * C1280 - C8642 * C50939 +
             (C8638 + C8637) * C1281 + (C8640 + C8639) * C1276) *
                C50790) *
               C50814) *
              C1277 +
          ((((C7995 + C7996) * C1280 -
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C50951 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C1279) +
             (C7997 + C7998) * C50939 - C8313 * C1281 - C8314 * C1276) *
                C22848 +
            ((C7999 + C8000) * C1280 -
             ((C7998 + C7997) * C50951 + (C7996 + C7995) * C1279) +
             (C8001 + C8002) * C50939 - (C8327 + C8328) * C1281 -
             (C8329 + C8330) * C1276) *
                C50790) *
               C32110 +
           (((C9576 + C9575) * C1280 -
             ((C15778 + C15779) * C50951 + (C15780 + C15781) * C1279) +
             (C9578 + C9577) * C50939 - (C9579 + C9580) * C1281 -
             (C9581 + C9582) * C1276) *
                C22848 +
            ((C9580 + C9579) * C1280 -
             ((C9577 + C9578) * C50951 + (C9575 + C9576) * C1279) +
             (C9582 + C9581) * C50939 -
             (C49761 * C2981 + C50617 * C2984 + C49768 * C2982 +
              C50891 * C2985) *
                 C1281 -
             (C49761 * C2987 + C50617 * C2990 + C49768 * C2988 +
              C50891 * C2991) *
                 C1276) *
                C50790) *
               C50814) *
              C50643) *
         C50702) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                  C1174 +
              (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                  C1169 -
              (C7987 + C7988) * C1175 - (C7989 + C7990) * C50688) *
                 C22848 +
             ((C7988 + C7987) * C1174 + (C7990 + C7989) * C1169 -
              (C7991 + C7992) * C1175 - (C7993 + C7994) * C50688) *
                 C50790) *
                C32110 +
            (((C15766 + C15767) * C1174 + (C15768 + C15769) * C1169 -
              C41992 * C1175 - C41993 * C50688) *
                 C22848 +
             (C41996 * C1174 + C41997 * C1169 - C8641 * C1175 -
              C8642 * C50688) *
                 C50790) *
                C50814) *
               C1277 +
           ((((C7995 + C7996) * C1175 -
              ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                   C1169 +
               (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                   C1174) +
              (C7997 + C7998) * C50688) *
                 C22848 +
             ((C7999 + C8000) * C1175 -
              ((C7998 + C7997) * C1169 + (C7996 + C7995) * C1174) +
              (C8001 + C8002) * C50688) *
                 C50790) *
                C32110 +
            ((C43164 * C1175 -
              ((C15778 + C15779) * C1169 + (C15780 + C15781) * C1174) +
              C43165 * C50688) *
                 C22848 +
             ((C9580 + C9579) * C1175 - (C43166 * C1169 + C43167 * C1174) +
              (C9582 + C9581) * C50688) *
                 C50790) *
                C50814) *
               C50643) *
              C50907 +
          ((((C41996 * C1175 -
              ((C15769 + C15768) * C1169 + (C15767 + C15766) * C1174) +
              C41997 * C50688) *
                 C22848 +
             (C41994 * C1175 - (C41993 * C1169 + C41992 * C1174) +
              C41995 * C50688) *
                 C50790) *
                C32110 +
            ((C42386 * C1175 -
              ((C15773 + C15772) * C1169 + (C15771 + C15770) * C1174) +
              C42387 * C50688) *
                 C22848 +
             ((C8964 + C8963) * C1175 - (C16515 * C1169 + C16514 * C1174) +
              (C8966 + C8965) * C50688) *
                 C50790) *
                C50814) *
               C1277 +
           ((((C15781 + C15780) * C1174 + (C15779 + C15778) * C1169 -
              C43167 * C1175 - C43166 * C50688) *
                 C22848 +
             (C43164 * C1174 + C43165 * C1169 - (C9579 + C9580) * C1175 -
              (C9581 + C9582) * C50688) *
                 C50790) *
                C32110 +
            (((C15777 + C15776) * C1174 + (C15775 + C15774) * C1169 -
              (C17153 + C17152) * C1175 - (C17155 + C17154) * C50688) *
                 C22848 +
             ((C17152 + C17153) * C1174 + (C17154 + C17155) * C1169 -
              (C49761 * C3321 + C50617 * C3324 + C49768 * C3322 +
               C50891 * C3325) *
                  C1175 -
              (C49761 * C3327 + C50617 * C3330 + C49768 * C3328 +
               C50891 * C3331) *
                  C50688) *
                 C50790) *
                C50814) *
               C50643) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                  C1174 +
              (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                  C1169 -
              (C7987 + C7988) * C1175 - (C7989 + C7990) * C50688) *
                 C22848 +
             ((C7988 + C7987) * C1174 + (C7990 + C7989) * C1169 -
              (C7991 + C7992) * C1175 - (C7993 + C7994) * C50688) *
                 C50790) *
                C32110 +
            (((C15766 + C15767) * C1174 + (C15768 + C15769) * C1169 -
              C41992 * C1175 - C41993 * C50688) *
                 C22848 +
             (C41996 * C1174 + C41997 * C1169 - C8641 * C1175 -
              C8642 * C50688) *
                 C50790) *
                C50814) *
               C50898 +
           ((((C7995 + C7996) * C1175 -
              ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                   C1169 +
               (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                   C1174) +
              (C7997 + C7998) * C50688) *
                 C22848 +
             ((C7999 + C8000) * C1175 -
              ((C7998 + C7997) * C1169 + (C7996 + C7995) * C1174) +
              (C8001 + C8002) * C50688) *
                 C50790) *
                C32110 +
            ((C43164 * C1175 -
              ((C15778 + C15779) * C1169 + (C15780 + C15781) * C1174) +
              C43165 * C50688) *
                 C22848 +
             ((C9580 + C9579) * C1175 - (C43166 * C1169 + C43167 * C1174) +
              (C9582 + C9581) * C50688) *
                 C50790) *
                C50814) *
               C50643) *
              C1514 +
          ((((C41996 * C1175 -
              ((C15769 + C15768) * C1169 + (C15767 + C15766) * C1174) +
              C41997 * C50688) *
                 C22848 +
             (C41994 * C1175 - (C41993 * C1169 + C41992 * C1174) +
              C41995 * C50688) *
                 C50790) *
                C32110 +
            ((C42386 * C1175 -
              ((C15773 + C15772) * C1169 + (C15771 + C15770) * C1174) +
              C42387 * C50688) *
                 C22848 +
             ((C8964 + C8963) * C1175 - (C16515 * C1169 + C16514 * C1174) +
              (C8966 + C8965) * C50688) *
                 C50790) *
                C50814) *
               C50898 +
           ((((C15781 + C15780) * C1174 + (C15779 + C15778) * C1169 -
              C43167 * C1175 - C43166 * C50688) *
                 C22848 +
             (C43164 * C1174 + C43165 * C1169 - (C9579 + C9580) * C1175 -
              (C9581 + C9582) * C50688) *
                 C50790) *
                C32110 +
            (((C15777 + C15776) * C1174 + (C15775 + C15774) * C1169 -
              (C17153 + C17152) * C1175 - (C17155 + C17154) * C50688) *
                 C22848 +
             ((C17152 + C17153) * C1174 + (C17154 + C17155) * C1169 -
              (C49761 * C3321 + C50617 * C3324 + C49768 * C3322 +
               C50891 * C3325) *
                  C1175 -
              (C49761 * C3327 + C50617 * C3330 + C49768 * C3328 +
               C50891 * C3331) *
                  C50688) *
                 C50790) *
                C50814) *
               C50643) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C1279 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50951 -
             (C7987 + C7988) * C1280 - (C7989 + C7990) * C50939 +
             C8303 * C1281 + C8304 * C1276) *
                C22848 +
            ((C7988 + C7987) * C1279 + (C7990 + C7989) * C50951 -
             (C7991 + C7992) * C1280 - (C7993 + C7994) * C50939 +
             (C8323 + C8324) * C1281 + (C8325 + C8326) * C1276) *
                C50790) *
               C32110 +
           (((C15766 + C15767) * C1279 + (C15768 + C15769) * C50951 -
             C41992 * C1280 - C41993 * C50939 + C41994 * C1281 +
             C41995 * C1276) *
                C22848 +
            (C41996 * C1279 + C41997 * C50951 - C8641 * C1280 - C8642 * C50939 +
             (C8638 + C8637) * C1281 + (C8640 + C8639) * C1276) *
                C50790) *
               C50814) *
              C50638 * C1514 +
          (((C41996 * C1280 -
             ((C15769 + C15768) * C50951 + (C15767 + C15766) * C1279) +
             C41997 * C50939 - C8641 * C1281 - C8642 * C1276) *
                C22848 +
            (C41994 * C1280 - (C41993 * C50951 + C41992 * C1279) +
             C41995 * C50939 - (C8637 + C8638) * C1281 -
             (C8639 + C8640) * C1276) *
                C50790) *
               C32110 +
           ((C42386 * C1280 -
             ((C15773 + C15772) * C50951 + (C15771 + C15770) * C1279) +
             C42387 * C50939 - (C8963 + C8964) * C1281 -
             (C8965 + C8966) * C1276) *
                C22848 +
            ((C8964 + C8963) * C1280 - (C16515 * C50951 + C16514 * C1279) +
             (C8966 + C8965) * C50939 -
             (C49761 * C8934 + C50617 * C8936 + C49768 * C8935 +
              C50891 * C8937) *
                 C1281 -
             (C49761 * C8938 + C50617 * C8940 + C49768 * C8939 +
              C50891 * C8941) *
                 C1276) *
                C50790) *
               C50814) *
              C50638 * C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C1174 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C1169 -
             (C7987 + C7988) * C1175 - (C7989 + C7990) * C50688) *
                C22848 +
            ((C7988 + C7987) * C1174 + (C7990 + C7989) * C1169 -
             (C7991 + C7992) * C1175 - (C7993 + C7994) * C50688) *
                C50790) *
               C32110 +
           (((C15766 + C15767) * C1174 + (C15768 + C15769) * C1169 -
             C41992 * C1175 - C41993 * C50688) *
                C22848 +
            (C41996 * C1174 + C41997 * C1169 - C8641 * C1175 - C8642 * C50688) *
                C50790) *
               C50814) *
              C50638 * C50952 +
          (((C41996 * C1175 -
             ((C15769 + C15768) * C1169 + (C15767 + C15766) * C1174) +
             C41997 * C50688) *
                C22848 +
            (C41994 * C1175 - (C41993 * C1169 + C41992 * C1174) +
             C41995 * C50688) *
                C50790) *
               C32110 +
           ((C42386 * C1175 -
             ((C15773 + C15772) * C1169 + (C15771 + C15770) * C1174) +
             C42387 * C50688) *
                C22848 +
            ((C8964 + C8963) * C1175 - (C16515 * C1169 + C16514 * C1174) +
             (C8966 + C8965) * C50688) *
                C50790) *
               C50814) *
              C50638 * C50942 +
          ((C18134 * C22848 +
            (C42386 * C1174 + C42387 * C1169 - (C8963 + C8964) * C1175 -
             (C8965 + C8966) * C50688) *
                C50790) *
               C32110 +
           (((C16357 + C16356) * C1174 + (C16355 + C16354) * C1169 -
             (C16528 + C16527) * C1175 - (C16530 + C16529) * C50688) *
                C22848 +
            ((C16527 + C16528) * C1174 + (C16529 + C16530) * C1169 -
             (C49761 * C9064 + C50617 * C9068 + C49768 * C9065 +
              C50891 * C9069) *
                 C1175 -
             (C49761 * C9066 + C50617 * C9070 + C49768 * C9067 +
              C50891 * C9071) *
                 C50688) *
                C50790) *
               C50814) *
              C50638 * C1746)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C506 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C501 -
             (C7987 + C7988) * C507 - (C7989 + C7990) * C502 + C8303 * C508 +
             C8304 * C503) *
                C22848 +
            ((C7988 + C7987) * C506 + (C7990 + C7989) * C501 -
             (C7991 + C7992) * C507 - (C7993 + C7994) * C502 +
             (C8323 + C8324) * C508 + (C8325 + C8326) * C503) *
                C50790) *
               C32110 +
           (((C15766 + C15767) * C506 + (C15768 + C15769) * C501 -
             (C8630 + C8629) * C507 - (C8632 + C8631) * C502 +
             (C8634 + C8633) * C508 + (C8636 + C8635) * C503) *
                C22848 +
            ((C8629 + C8630) * C506 + (C8631 + C8632) * C501 - C8641 * C507 -
             C8642 * C502 + (C8638 + C8637) * C508 + (C8640 + C8639) * C503) *
                C50790) *
               C50814) *
              C50898 +
          ((((C7995 + C7996) * C507 -
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C501 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C506) +
             (C7997 + C7998) * C502 - C8313 * C508 - C8314 * C503) *
                C22848 +
            ((C7999 + C8000) * C507 -
             ((C7998 + C7997) * C501 + (C7996 + C7995) * C506) +
             (C8001 + C8002) * C502 - (C8327 + C8328) * C508 -
             (C8329 + C8330) * C503) *
                C50790) *
               C32110 +
           (((C9576 + C9575) * C507 -
             ((C15778 + C15779) * C501 + (C15780 + C15781) * C506) +
             (C9578 + C9577) * C502 - (C9579 + C9580) * C508 -
             (C9581 + C9582) * C503) *
                C22848 +
            ((C9580 + C9579) * C507 -
             ((C9577 + C9578) * C501 + (C9575 + C9576) * C506) +
             (C9582 + C9581) * C502 -
             (C49761 * C2981 + C50617 * C2984 + C49768 * C2982 +
              C50891 * C2985) *
                 C508 -
             (C49761 * C2987 + C50617 * C2990 + C49768 * C2988 +
              C50891 * C2991) *
                 C503) *
                C50790) *
               C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C121 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50672) *
                C22848 +
            ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C50790) *
               C32110 +
           (((C15766 + C15767) * C121 + (C15768 + C15769) * C50672) * C22848 +
            ((C8629 + C8630) * C121 + (C8631 + C8632) * C50672) * C50790) *
               C50814) *
              C112 -
          ((((C9577 + C9578) * C50672 + (C9575 + C9576) * C121) * C50790 +
            ((C15778 + C15779) * C50672 + (C15780 + C15781) * C121) * C22848) *
               C50814 +
           (((C7998 + C7997) * C50672 + (C7996 + C7995) * C121) * C50790 +
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50672 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C121) *
                C22848) *
               C32110) *
              C113 +
          ((((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                 C121 +
             (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                 C50672) *
                C22848 +
            ((C8004 + C8003) * C121 + (C8006 + C8005) * C50672) * C50790) *
               C32110 +
           (((C15782 + C15783) * C121 + (C15784 + C15785) * C50672) * C22848 +
            ((C49768 * C720 + C50891 * C728 + C49761 * C721 + C50617 * C729) *
                 C121 +
             (C49768 * C732 + C50891 * C744 + C49761 * C733 + C50617 * C745) *
                 C50672) *
                C50790) *
               C50814) *
              C114 -
          ((((C49761 * C1414 + C50617 * C1415 + C49768 * C733 + C50891 * C745) *
                 C50672 +
             (C49761 * C1412 + C50617 * C1413 + C49768 * C721 + C50891 * C729) *
                 C121) *
                C50790 +
            ((C49761 * C392 + C50617 * C400 + C49768 * C391 + C50891 * C399) *
                 C50672 +
             (C49761 * C382 + C50617 * C388 + C49768 * C381 + C50891 * C387) *
                 C121) *
                C22848) *
               C50814 +
           (((C49761 * C270 + C50617 * C277 + C49768 * C265 + C50891 * C273) *
                 C50672 +
             (C49761 * C259 + C50617 * C269 + C49768 * C255 + C50891 * C261) *
                 C121) *
                C50790 +
            ((C49761 * C137 + C50617 * C147 + C49768 * C136 + C50891 * C146) *
                 C50672 +
             (C49761 * C126 + C50617 * C138 + C49768 * C125 + C50891 * C132) *
                 C121) *
                C22848) *
               C32110) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                  C121 +
              (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                  C50672) *
                 C22848 +
             ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C50790) *
                C32110 +
            (((C15766 + C15767) * C121 + (C15768 + C15769) * C50672) * C22848 +
             (C41996 * C121 + C41997 * C50672) * C50790) *
                C50814) *
               C50898 -
           ((((C9577 + C9578) * C50672 + (C9575 + C9576) * C121) * C50790 +
             ((C15778 + C15779) * C50672 + (C15780 + C15781) * C121) * C22848) *
                C50814 +
            (((C7998 + C7997) * C50672 + (C7996 + C7995) * C121) * C50790 +
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C50672 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C121) *
                 C22848) *
                C32110) *
               C50643) *
              C848 +
          (((((C15781 + C15780) * C121 + (C15779 + C15778) * C50672) * C22848 +
             ((C9576 + C9575) * C121 + (C9578 + C9577) * C50672) * C50790) *
                C32110 +
            (((C15777 + C15776) * C121 + (C15775 + C15774) * C50672) * C22848 +
             ((C17152 + C17153) * C121 + (C17154 + C17155) * C50672) * C50790) *
                C50814) *
               C50643 -
           (((C16515 * C50672 + C16514 * C121) * C50790 +
             ((C15773 + C15772) * C50672 + (C15771 + C15770) * C121) * C22848) *
                C50814 +
            ((C41993 * C50672 + C41992 * C121) * C50790 +
             ((C15769 + C15768) * C50672 + (C15767 + C15766) * C121) * C22848) *
                C32110) *
               C50898) *
              C849 +
          (((C16358 * C22848 +
             ((C8960 + C8959) * C121 + (C8962 + C8961) * C50672) * C50790) *
                C32110 +
            (((C16357 + C16356) * C121 + (C16355 + C16354) * C50672) * C22848 +
             ((C16527 + C16528) * C121 + (C16529 + C16530) * C50672) * C50790) *
                C50814) *
               C50898 -
           ((((C49761 * C3452 + C50617 * C3458 + C49768 * C3453 +
               C50891 * C3459) *
                  C50672 +
              (C49761 * C3449 + C50617 * C3455 + C49768 * C3450 +
               C50891 * C3456) *
                  C121) *
                 C50790 +
             ((C16353 + C16352) * C50672 + (C16351 + C16350) * C121) * C22848) *
                C50814 +
            (((C17155 + C17154) * C50672 + (C17153 + C17152) * C121) * C50790 +
             C16359 * C22848) *
                C32110) *
               C50643) *
              C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C600 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C595 -
            (C7987 + C7988) * C601 - (C7989 + C7990) * C596 + C8303 * C602 +
            C8304 * C597 - C8437 * C603 - C8438 * C598) *
               C22848 +
           ((C7988 + C7987) * C600 + (C7990 + C7989) * C595 -
            (C7991 + C7992) * C601 - (C7993 + C7994) * C596 +
            (C8323 + C8324) * C602 + (C8325 + C8326) * C597 -
            (C8447 + C8448) * C603 - (C8449 + C8450) * C598) *
               C50790) *
              C32110 +
          (((C15766 + C15767) * C600 + (C15768 + C15769) * C595 -
            (C8630 + C8629) * C601 - (C8632 + C8631) * C596 +
            (C8634 + C8633) * C602 + (C8636 + C8635) * C597 -
            (C8637 + C8638) * C603 - (C8639 + C8640) * C598) *
               C22848 +
           ((C8629 + C8630) * C600 + (C8631 + C8632) * C595 - C8641 * C601 -
            C8642 * C596 + (C8638 + C8637) * C602 + (C8640 + C8639) * C597 -
            (C49761 * C8596 + C50617 * C8598 + C49768 * C8597 +
             C50891 * C8599) *
                C603 -
            (C49761 * C8600 + C50617 * C8602 + C49768 * C8601 +
             C50891 * C8603) *
                C598) *
               C50790) *
              C50814) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C253 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50905 -
             (C7987 + C7988) * C254 - (C7989 + C7990) * C50688) *
                C22848 +
            ((C7988 + C7987) * C253 + (C7990 + C7989) * C50905 -
             (C7991 + C7992) * C254 - (C7993 + C7994) * C50688) *
                C50790) *
               C32110 +
           (((C15766 + C15767) * C253 + (C15768 + C15769) * C50905 -
             (C8630 + C8629) * C254 - (C8632 + C8631) * C50688) *
                C22848 +
            ((C8629 + C8630) * C253 + (C8631 + C8632) * C50905 - C8641 * C254 -
             C8642 * C50688) *
                C50790) *
               C50814) *
              C250 +
          ((((C7995 + C7996) * C254 -
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C50905 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C253) +
             (C7997 + C7998) * C50688) *
                C22848 +
            ((C7999 + C8000) * C254 -
             ((C7998 + C7997) * C50905 + (C7996 + C7995) * C253) +
             (C8001 + C8002) * C50688) *
                C50790) *
               C32110 +
           (((C9576 + C9575) * C254 -
             ((C15778 + C15779) * C50905 + (C15780 + C15781) * C253) +
             (C9578 + C9577) * C50688) *
                C22848 +
            ((C9580 + C9579) * C254 -
             ((C9577 + C9578) * C50905 + (C9575 + C9576) * C253) +
             (C9582 + C9581) * C50688) *
                C50790) *
               C50814) *
              C251 +
          ((((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                 C253 +
             (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                 C50905 -
             (C8003 + C8004) * C254 - (C8005 + C8006) * C50688) *
                C22848 +
            ((C8004 + C8003) * C253 + (C8006 + C8005) * C50905 -
             (C8007 + C8008) * C254 - (C8009 + C8010) * C50688) *
                C50790) *
               C32110 +
           (((C15782 + C15783) * C253 + (C15784 + C15785) * C50905 -
             (C41276 + C41277) * C254 - (C41278 + C41279) * C50688) *
                C22848 +
            ((C41277 + C41276) * C253 + (C41279 + C41278) * C50905 -
             (C49761 * C722 + C50617 * C734 + C49768 * C723 + C50891 * C735) *
                 C254 -
             (C49761 * C738 + C50617 * C746 + C49768 * C739 + C50891 * C747) *
                 C50688) *
                C50790) *
               C50814) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C253 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50905 -
             (C7987 + C7988) * C254 - (C7989 + C7990) * C50688) *
                C22848 +
            ((C7988 + C7987) * C253 + (C7990 + C7989) * C50905 -
             (C7991 + C7992) * C254 - (C7993 + C7994) * C50688) *
                C50790) *
               C32110 +
           (((C15766 + C15767) * C253 + (C15768 + C15769) * C50905 -
             C41992 * C254 - C41993 * C50688) *
                C22848 +
            (C41996 * C253 + C41997 * C50905 - C8641 * C254 - C8642 * C50688) *
                C50790) *
               C50814) *
              C50638 * C848 +
          (((C41996 * C254 -
             ((C15769 + C15768) * C50905 + (C15767 + C15766) * C253) +
             C41997 * C50688) *
                C22848 +
            (C41994 * C254 - (C41993 * C50905 + C41992 * C253) +
             C41995 * C50688) *
                C50790) *
               C32110 +
           ((C42386 * C254 -
             ((C15773 + C15772) * C50905 + (C15771 + C15770) * C253) +
             C42387 * C50688) *
                C22848 +
            ((C8964 + C8963) * C254 - (C16515 * C50905 + C16514 * C253) +
             (C8966 + C8965) * C50688) *
                C50790) *
               C50814) *
              C50638 * C849 +
          ((C16532 * C22848 +
            (C42386 * C253 + C42387 * C50905 - (C8963 + C8964) * C254 -
             (C8965 + C8966) * C50688) *
                C50790) *
               C32110 +
           (((C16357 + C16356) * C253 + (C16355 + C16354) * C50905 -
             (C16528 + C16527) * C254 - (C16530 + C16529) * C50688) *
                C22848 +
            ((C16527 + C16528) * C253 + (C16529 + C16530) * C50905 -
             (C49761 * C9064 + C50617 * C9068 + C49768 * C9065 +
              C50891 * C9069) *
                 C254 -
             (C49761 * C9066 + C50617 * C9070 + C49768 * C9067 +
              C50891 * C9071) *
                 C50688) *
                C50790) *
               C50814) *
              C50638 * C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C506 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C501 -
             (C7987 + C7988) * C507 - (C7989 + C7990) * C502 + C8303 * C508 +
             C8304 * C503) *
                C22848 +
            ((C7988 + C7987) * C506 + (C7990 + C7989) * C501 -
             (C7991 + C7992) * C507 - (C7993 + C7994) * C502 +
             (C8323 + C8324) * C508 + (C8325 + C8326) * C503) *
                C50790) *
               C32110 +
           (((C15766 + C15767) * C506 + (C15768 + C15769) * C501 -
             C41992 * C507 - C41993 * C502 + C41994 * C508 + C41995 * C503) *
                C22848 +
            (C41996 * C506 + C41997 * C501 - C8641 * C507 - C8642 * C502 +
             (C8638 + C8637) * C508 + (C8640 + C8639) * C503) *
                C50790) *
               C50814) *
              C50638 * C50907 +
          (((C41996 * C507 -
             ((C15769 + C15768) * C501 + (C15767 + C15766) * C506) +
             C41997 * C502 - C8641 * C508 - C8642 * C503) *
                C22848 +
            (C41994 * C507 - (C41993 * C501 + C41992 * C506) + C41995 * C502 -
             (C8637 + C8638) * C508 - (C8639 + C8640) * C503) *
                C50790) *
               C32110 +
           (((C8960 + C8959) * C507 -
             ((C15773 + C15772) * C501 + (C15771 + C15770) * C506) +
             (C8962 + C8961) * C502 - (C8963 + C8964) * C508 -
             (C8965 + C8966) * C503) *
                C22848 +
            ((C8964 + C8963) * C507 - (C16515 * C501 + C16514 * C506) +
             (C8966 + C8965) * C502 -
             (C49761 * C8934 + C50617 * C8936 + C49768 * C8935 +
              C50891 * C8937) *
                 C508 -
             (C49761 * C8938 + C50617 * C8940 + C49768 * C8939 +
              C50891 * C8941) *
                 C503) *
                C50790) *
               C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                  C121 +
              (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                  C50672) *
                 C22848 +
             ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C50790) *
                C32110 +
            (((C15766 + C15767) * C121 + (C15768 + C15769) * C50672) * C22848 +
             ((C8629 + C8630) * C121 + (C8631 + C8632) * C50672) * C50790) *
                C50814) *
               C250 -
           ((((C9577 + C9578) * C50672 + (C9575 + C9576) * C121) * C50790 +
             ((C15778 + C15779) * C50672 + (C15780 + C15781) * C121) * C22848) *
                C50814 +
            (((C7998 + C7997) * C50672 + (C7996 + C7995) * C121) * C50790 +
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C50672 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C121) *
                 C22848) *
                C32110) *
               C251 +
           ((((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                  C121 +
              (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                  C50672) *
                 C22848 +
             ((C8004 + C8003) * C121 + (C8006 + C8005) * C50672) * C50790) *
                C32110 +
            (((C15782 + C15783) * C121 + (C15784 + C15785) * C50672) * C22848 +
             ((C41277 + C41276) * C121 + (C41279 + C41278) * C50672) * C50790) *
                C50814) *
               C252) *
              C50907 +
          (((((C15781 + C15780) * C121 + (C15779 + C15778) * C50672) * C22848 +
             ((C9576 + C9575) * C121 + (C9578 + C9577) * C50672) * C50790) *
                C32110 +
            (((C15777 + C15776) * C121 + (C15775 + C15774) * C50672) * C22848 +
             ((C17152 + C17153) * C121 + (C17154 + C17155) * C50672) * C50790) *
                C50814) *
               C251 -
           (((C16515 * C50672 + C16514 * C121) * C50790 +
             ((C15773 + C15772) * C50672 + (C15771 + C15770) * C121) * C22848) *
                C50814 +
            (((C8632 + C8631) * C50672 + (C8630 + C8629) * C121) * C50790 +
             ((C15769 + C15768) * C50672 + (C15767 + C15766) * C121) * C22848) *
                C32110) *
               C250 -
           ((((C49761 * C977 + C50617 * C981 + C49768 * C978 + C50891 * C982) *
                  C50672 +
              (C49761 * C969 + C50617 * C973 + C49768 * C970 + C50891 * C974) *
                  C121) *
                 C50790 +
             ((C15789 + C15788) * C50672 + (C15787 + C15786) * C121) * C22848) *
                C50814 +
            (((C41278 + C41279) * C50672 + (C41276 + C41277) * C121) * C50790 +
             ((C15785 + C15784) * C50672 + (C15783 + C15782) * C121) * C22848) *
                C32110) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C121 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50672) *
                C22848 +
            ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C50790) *
               C32110 +
           (((C15766 + C15767) * C121 + (C15768 + C15769) * C50672) * C22848 +
            (C41996 * C121 + C41997 * C50672) * C50790) *
               C50814) *
              C50638 * C1051 -
          (((C16515 * C50672 + C16514 * C121) * C50790 +
            ((C15773 + C15772) * C50672 + (C15771 + C15770) * C121) * C22848) *
               C50814 +
           ((C41993 * C50672 + C41992 * C121) * C50790 +
            ((C15769 + C15768) * C50672 + (C15767 + C15766) * C121) * C22848) *
               C32110) *
              C50638 * C1052 +
          ((C16358 * C22848 + (C42386 * C121 + C42387 * C50672) * C50790) *
               C32110 +
           (((C16357 + C16356) * C121 + (C16355 + C16354) * C50672) * C22848 +
            ((C16527 + C16528) * C121 + (C16529 + C16530) * C50672) * C50790) *
               C50814) *
              C50638 * C1053 -
          ((((C49761 * C16509 + C50617 * C16510 + C49768 * C13784 +
              C50891 * C13787) *
                 C50672 +
             (C49761 * C16507 + C50617 * C16508 + C49768 * C13781 +
              C50891 * C13785) *
                 C121) *
                C50790 +
            ((C16655 + C16654) * C50672 + (C16653 + C16652) * C121) * C22848) *
               C50814 +
           (((C16530 + C16529) * C50672 + (C16528 + C16527) * C121) * C50790 +
            C16656 * C22848) *
               C32110) *
              C50638 * C1054)) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                  C121 +
              (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                  C50672) *
                 C22848 +
             ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C50790) *
                C32110 +
            (((C15766 + C15767) * C121 + (C15768 + C15769) * C50672) * C22848 +
             (C41996 * C121 + C41997 * C50672) * C50790) *
                C50814) *
               C50950 -
           (((C43166 * C50672 + C43167 * C121) * C50790 +
             ((C15778 + C15779) * C50672 + (C15780 + C15781) * C121) * C22848) *
                C50814 +
            (((C7998 + C7997) * C50672 + (C7996 + C7995) * C121) * C50790 +
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C50672 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C121) *
                 C22848) *
                C32110) *
               C50936 +
           ((((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                  C121 +
              (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                  C50672) *
                 C22848 +
             ((C8004 + C8003) * C121 + (C8006 + C8005) * C50672) * C50790) *
                C32110 +
            (((C15782 + C15783) * C121 + (C15784 + C15785) * C50672) * C22848 +
             ((C41277 + C41276) * C121 + (C41279 + C41278) * C50672) * C50790) *
                C50814) *
               C1173) *
              C1514 +
          (((((C15781 + C15780) * C121 + (C15779 + C15778) * C50672) * C22848 +
             (C43164 * C121 + C43165 * C50672) * C50790) *
                C32110 +
            (((C15777 + C15776) * C121 + (C15775 + C15774) * C50672) * C22848 +
             ((C17152 + C17153) * C121 + (C17154 + C17155) * C50672) * C50790) *
                C50814) *
               C50936 -
           (((C16515 * C50672 + C16514 * C121) * C50790 +
             ((C15773 + C15772) * C50672 + (C15771 + C15770) * C121) * C22848) *
                C50814 +
            ((C41993 * C50672 + C41992 * C121) * C50790 +
             ((C15769 + C15768) * C50672 + (C15767 + C15766) * C121) * C22848) *
                C32110) *
               C50950 -
           ((((C49761 * C977 + C50617 * C981 + C49768 * C978 + C50891 * C982) *
                  C50672 +
              (C49761 * C969 + C50617 * C973 + C49768 * C970 + C50891 * C974) *
                  C121) *
                 C50790 +
             ((C15789 + C15788) * C50672 + (C15787 + C15786) * C121) * C22848) *
                C50814 +
            (((C41278 + C41279) * C50672 + (C41276 + C41277) * C121) * C50790 +
             ((C15785 + C15784) * C50672 + (C15783 + C15782) * C121) * C22848) *
                C32110) *
               C1173) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                  C253 +
              (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                  C50905 -
              (C7987 + C7988) * C254 - (C7989 + C7990) * C50688) *
                 C22848 +
             ((C7988 + C7987) * C253 + (C7990 + C7989) * C50905 -
              (C7991 + C7992) * C254 - (C7993 + C7994) * C50688) *
                 C50790) *
                C32110 +
            (((C15766 + C15767) * C253 + (C15768 + C15769) * C50905 -
              C41992 * C254 - C41993 * C50688) *
                 C22848 +
             (C41996 * C253 + C41997 * C50905 - C8641 * C254 - C8642 * C50688) *
                 C50790) *
                C50814) *
               C1277 +
           ((((C7995 + C7996) * C254 -
              ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                   C50905 +
               (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                   C253) +
              (C7997 + C7998) * C50688) *
                 C22848 +
             ((C7999 + C8000) * C254 -
              ((C7998 + C7997) * C50905 + (C7996 + C7995) * C253) +
              (C8001 + C8002) * C50688) *
                 C50790) *
                C32110 +
            ((C43164 * C254 -
              ((C15778 + C15779) * C50905 + (C15780 + C15781) * C253) +
              C43165 * C50688) *
                 C22848 +
             ((C9580 + C9579) * C254 - (C43166 * C50905 + C43167 * C253) +
              (C9582 + C9581) * C50688) *
                 C50790) *
                C50814) *
               C50643) *
              C1514 +
          ((((C41996 * C254 -
              ((C15769 + C15768) * C50905 + (C15767 + C15766) * C253) +
              C41997 * C50688) *
                 C22848 +
             (C41994 * C254 - (C41993 * C50905 + C41992 * C253) +
              C41995 * C50688) *
                 C50790) *
                C32110 +
            ((C42386 * C254 -
              ((C15773 + C15772) * C50905 + (C15771 + C15770) * C253) +
              C42387 * C50688) *
                 C22848 +
             ((C8964 + C8963) * C254 - (C16515 * C50905 + C16514 * C253) +
              (C8966 + C8965) * C50688) *
                 C50790) *
                C50814) *
               C1277 +
           ((((C15781 + C15780) * C253 + (C15779 + C15778) * C50905 -
              C43167 * C254 - C43166 * C50688) *
                 C22848 +
             (C43164 * C253 + C43165 * C50905 - (C9579 + C9580) * C254 -
              (C9581 + C9582) * C50688) *
                 C50790) *
                C32110 +
            (((C15777 + C15776) * C253 + (C15775 + C15774) * C50905 -
              (C17153 + C17152) * C254 - (C17155 + C17154) * C50688) *
                 C22848 +
             ((C17152 + C17153) * C253 + (C17154 + C17155) * C50905 -
              (C49761 * C3321 + C50617 * C3324 + C49768 * C3322 +
               C50891 * C3325) *
                  C254 -
              (C49761 * C3327 + C50617 * C3330 + C49768 * C3328 +
               C50891 * C3331) *
                  C50688) *
                 C50790) *
                C50814) *
               C50643) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                  C121 +
              (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                  C50672) *
                 C22848 +
             ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C50790) *
                C32110 +
            (((C15766 + C15767) * C121 + (C15768 + C15769) * C50672) * C22848 +
             (C41996 * C121 + C41997 * C50672) * C50790) *
                C50814) *
               C1277 -
           (((C43166 * C50672 + C43167 * C121) * C50790 +
             ((C15778 + C15779) * C50672 + (C15780 + C15781) * C121) * C22848) *
                C50814 +
            (((C7998 + C7997) * C50672 + (C7996 + C7995) * C121) * C50790 +
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C50672 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C121) *
                 C22848) *
                C32110) *
               C50643) *
              C50952 +
          (((((C15781 + C15780) * C121 + (C15779 + C15778) * C50672) * C22848 +
             (C43164 * C121 + C43165 * C50672) * C50790) *
                C32110 +
            (((C15777 + C15776) * C121 + (C15775 + C15774) * C50672) * C22848 +
             ((C17152 + C17153) * C121 + (C17154 + C17155) * C50672) * C50790) *
                C50814) *
               C50643 -
           (((C16515 * C50672 + C16514 * C121) * C50790 +
             ((C15773 + C15772) * C50672 + (C15771 + C15770) * C121) * C22848) *
                C50814 +
            ((C41993 * C50672 + C41992 * C121) * C50790 +
             ((C15769 + C15768) * C50672 + (C15767 + C15766) * C121) * C22848) *
                C32110) *
               C1277) *
              C50942 +
          (((C16358 * C22848 + (C42386 * C121 + C42387 * C50672) * C50790) *
                C32110 +
            (((C16357 + C16356) * C121 + (C16355 + C16354) * C50672) * C22848 +
             ((C16527 + C16528) * C121 + (C16529 + C16530) * C50672) * C50790) *
                C50814) *
               C1277 -
           ((((C49761 * C3452 + C50617 * C3458 + C49768 * C3453 +
               C50891 * C3459) *
                  C50672 +
              (C49761 * C3449 + C50617 * C3455 + C49768 * C3450 +
               C50891 * C3456) *
                  C121) *
                 C50790 +
             ((C16353 + C16352) * C50672 + (C16351 + C16350) * C121) * C22848) *
                C50814 +
            (((C17155 + C17154) * C50672 + (C17153 + C17152) * C121) * C50790 +
             C16359 * C22848) *
                C32110) *
               C50643) *
              C1746)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C121 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50672) *
                C22848 +
            ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C50790) *
               C32110 +
           (((C15766 + C15767) * C121 + (C15768 + C15769) * C50672) * C22848 +
            ((C8629 + C8630) * C121 + (C8631 + C8632) * C50672) * C50790) *
               C50814) *
              C112 -
          ((((C9577 + C9578) * C50672 + (C9575 + C9576) * C121) * C50790 +
            ((C15778 + C15779) * C50672 + (C15780 + C15781) * C121) * C22848) *
               C50814 +
           (((C7998 + C7997) * C50672 + (C7996 + C7995) * C121) * C50790 +
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50672 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C121) *
                C22848) *
               C32110) *
              C113 +
          ((((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                 C121 +
             (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                 C50672) *
                C22848 +
            ((C8004 + C8003) * C121 + (C8006 + C8005) * C50672) * C50790) *
               C32110 +
           (((C15782 + C15783) * C121 + (C15784 + C15785) * C50672) * C22848 +
            ((C49768 * C720 + C50891 * C728 + C49761 * C721 + C50617 * C729) *
                 C121 +
             (C49768 * C732 + C50891 * C744 + C49761 * C733 + C50617 * C745) *
                 C50672) *
                C50790) *
               C50814) *
              C114 -
          ((((C49761 * C1414 + C50617 * C1415 + C49768 * C733 + C50891 * C745) *
                 C50672 +
             (C49761 * C1412 + C50617 * C1413 + C49768 * C721 + C50891 * C729) *
                 C121) *
                C50790 +
            ((C49761 * C392 + C50617 * C400 + C49768 * C391 + C50891 * C399) *
                 C50672 +
             (C49761 * C382 + C50617 * C388 + C49768 * C381 + C50891 * C387) *
                 C121) *
                C22848) *
               C50814 +
           (((C49761 * C270 + C50617 * C277 + C49768 * C265 + C50891 * C273) *
                 C50672 +
             (C49761 * C259 + C50617 * C269 + C49768 * C255 + C50891 * C261) *
                 C121) *
                C50790 +
            ((C49761 * C137 + C50617 * C147 + C49768 * C136 + C50891 * C146) *
                 C50672 +
             (C49761 * C126 + C50617 * C138 + C49768 * C125 + C50891 * C132) *
                 C121) *
                C22848) *
               C32110) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C506 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C501 -
             (C7987 + C7988) * C507 - (C7989 + C7990) * C502 + C8303 * C508 +
             C8304 * C503) *
                C22848 +
            ((C7988 + C7987) * C506 + (C7990 + C7989) * C501 -
             (C7991 + C7992) * C507 - (C7993 + C7994) * C502 +
             (C8323 + C8324) * C508 + (C8325 + C8326) * C503) *
                C50790) *
               C32110 +
           (((C15766 + C15767) * C506 + (C15768 + C15769) * C501 -
             (C8630 + C8629) * C507 - (C8632 + C8631) * C502 +
             (C8634 + C8633) * C508 + (C8636 + C8635) * C503) *
                C22848 +
            ((C8629 + C8630) * C506 + (C8631 + C8632) * C501 - C8641 * C507 -
             C8642 * C502 + (C8638 + C8637) * C508 + (C8640 + C8639) * C503) *
                C50790) *
               C50814) *
              C50898 +
          ((((C7995 + C7996) * C507 -
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C501 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C506) +
             (C7997 + C7998) * C502 - C8313 * C508 - C8314 * C503) *
                C22848 +
            ((C7999 + C8000) * C507 -
             ((C7998 + C7997) * C501 + (C7996 + C7995) * C506) +
             (C8001 + C8002) * C502 - (C8327 + C8328) * C508 -
             (C8329 + C8330) * C503) *
                C50790) *
               C32110 +
           (((C9576 + C9575) * C507 -
             ((C15778 + C15779) * C501 + (C15780 + C15781) * C506) +
             (C9578 + C9577) * C502 - (C9579 + C9580) * C508 -
             (C9581 + C9582) * C503) *
                C22848 +
            ((C9580 + C9579) * C507 -
             ((C9577 + C9578) * C501 + (C9575 + C9576) * C506) +
             (C9582 + C9581) * C502 -
             (C49761 * C2981 + C50617 * C2984 + C49768 * C2982 +
              C50891 * C2985) *
                 C508 -
             (C49761 * C2987 + C50617 * C2990 + C49768 * C2988 +
              C50891 * C2991) *
                 C503) *
                C50790) *
               C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C253 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50905 -
             (C7987 + C7988) * C254 - (C7989 + C7990) * C50688) *
                C22848 +
            ((C7988 + C7987) * C253 + (C7990 + C7989) * C50905 -
             (C7991 + C7992) * C254 - (C7993 + C7994) * C50688) *
                C50790) *
               C32110 +
           (((C15766 + C15767) * C253 + (C15768 + C15769) * C50905 -
             (C8630 + C8629) * C254 - (C8632 + C8631) * C50688) *
                C22848 +
            ((C8629 + C8630) * C253 + (C8631 + C8632) * C50905 - C8641 * C254 -
             C8642 * C50688) *
                C50790) *
               C50814) *
              C250 +
          ((((C7995 + C7996) * C254 -
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C50905 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C253) +
             (C7997 + C7998) * C50688) *
                C22848 +
            ((C7999 + C8000) * C254 -
             ((C7998 + C7997) * C50905 + (C7996 + C7995) * C253) +
             (C8001 + C8002) * C50688) *
                C50790) *
               C32110 +
           (((C9576 + C9575) * C254 -
             ((C15778 + C15779) * C50905 + (C15780 + C15781) * C253) +
             (C9578 + C9577) * C50688) *
                C22848 +
            ((C9580 + C9579) * C254 -
             ((C9577 + C9578) * C50905 + (C9575 + C9576) * C253) +
             (C9582 + C9581) * C50688) *
                C50790) *
               C50814) *
              C251 +
          ((((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                 C253 +
             (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                 C50905 -
             (C8003 + C8004) * C254 - (C8005 + C8006) * C50688) *
                C22848 +
            ((C8004 + C8003) * C253 + (C8006 + C8005) * C50905 -
             (C8007 + C8008) * C254 - (C8009 + C8010) * C50688) *
                C50790) *
               C32110 +
           (((C15782 + C15783) * C253 + (C15784 + C15785) * C50905 -
             (C41276 + C41277) * C254 - (C41278 + C41279) * C50688) *
                C22848 +
            ((C41277 + C41276) * C253 + (C41279 + C41278) * C50905 -
             (C49761 * C722 + C50617 * C734 + C49768 * C723 + C50891 * C735) *
                 C254 -
             (C49761 * C738 + C50617 * C746 + C49768 * C739 + C50891 * C747) *
                 C50688) *
                C50790) *
               C50814) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C600 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C595 -
            (C7987 + C7988) * C601 - (C7989 + C7990) * C596 + C8303 * C602 +
            C8304 * C597 - C8437 * C603 - C8438 * C598) *
               C22848 +
           ((C7988 + C7987) * C600 + (C7990 + C7989) * C595 -
            (C7991 + C7992) * C601 - (C7993 + C7994) * C596 +
            (C8323 + C8324) * C602 + (C8325 + C8326) * C597 -
            (C8447 + C8448) * C603 - (C8449 + C8450) * C598) *
               C50790) *
              C32110 +
          (((C15766 + C15767) * C600 + (C15768 + C15769) * C595 -
            (C8630 + C8629) * C601 - (C8632 + C8631) * C596 +
            (C8634 + C8633) * C602 + (C8636 + C8635) * C597 -
            (C8637 + C8638) * C603 - (C8639 + C8640) * C598) *
               C22848 +
           ((C8629 + C8630) * C600 + (C8631 + C8632) * C595 - C8641 * C601 -
            C8642 * C596 + (C8638 + C8637) * C602 + (C8640 + C8639) * C597 -
            (C49761 * C8596 + C50617 * C8598 + C49768 * C8597 +
             C50891 * C8599) *
                C603 -
            (C49761 * C8600 + C50617 * C8602 + C49768 * C8601 +
             C50891 * C8603) *
                C598) *
               C50790) *
              C50814) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                  C121 +
              (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                  C50672) *
                 C22848 +
             ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C50790) *
                C32110 +
            (((C15766 + C15767) * C121 + (C15768 + C15769) * C50672) * C22848 +
             ((C8629 + C8630) * C121 + (C8631 + C8632) * C50672) * C50790) *
                C50814) *
               C250 -
           ((((C9577 + C9578) * C50672 + (C9575 + C9576) * C121) * C50790 +
             ((C15778 + C15779) * C50672 + (C15780 + C15781) * C121) * C22848) *
                C50814 +
            (((C7998 + C7997) * C50672 + (C7996 + C7995) * C121) * C50790 +
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C50672 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C121) *
                 C22848) *
                C32110) *
               C251 +
           ((((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                  C121 +
              (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                  C50672) *
                 C22848 +
             ((C8004 + C8003) * C121 + (C8006 + C8005) * C50672) * C50790) *
                C32110 +
            (((C15782 + C15783) * C121 + (C15784 + C15785) * C50672) * C22848 +
             ((C41277 + C41276) * C121 + (C41279 + C41278) * C50672) * C50790) *
                C50814) *
               C252) *
              C50907 +
          (((((C15781 + C15780) * C121 + (C15779 + C15778) * C50672) * C22848 +
             ((C9576 + C9575) * C121 + (C9578 + C9577) * C50672) * C50790) *
                C32110 +
            (((C15777 + C15776) * C121 + (C15775 + C15774) * C50672) * C22848 +
             ((C17152 + C17153) * C121 + (C17154 + C17155) * C50672) * C50790) *
                C50814) *
               C251 -
           (((C16515 * C50672 + C16514 * C121) * C50790 +
             ((C15773 + C15772) * C50672 + (C15771 + C15770) * C121) * C22848) *
                C50814 +
            (((C8632 + C8631) * C50672 + (C8630 + C8629) * C121) * C50790 +
             ((C15769 + C15768) * C50672 + (C15767 + C15766) * C121) * C22848) *
                C32110) *
               C250 -
           ((((C49761 * C977 + C50617 * C981 + C49768 * C978 + C50891 * C982) *
                  C50672 +
              (C49761 * C969 + C50617 * C973 + C49768 * C970 + C50891 * C974) *
                  C121) *
                 C50790 +
             ((C15789 + C15788) * C50672 + (C15787 + C15786) * C121) * C22848) *
                C50814 +
            (((C41278 + C41279) * C50672 + (C41276 + C41277) * C121) * C50790 +
             ((C15785 + C15784) * C50672 + (C15783 + C15782) * C121) * C22848) *
                C32110) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C506 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C501 -
             (C7987 + C7988) * C507 - (C7989 + C7990) * C502 + C8303 * C508 +
             C8304 * C503) *
                C22848 +
            ((C7988 + C7987) * C506 + (C7990 + C7989) * C501 -
             (C7991 + C7992) * C507 - (C7993 + C7994) * C502 +
             (C8323 + C8324) * C508 + (C8325 + C8326) * C503) *
                C50790) *
               C32110 +
           (((C15766 + C15767) * C506 + (C15768 + C15769) * C501 -
             C41992 * C507 - C41993 * C502 + C41994 * C508 + C41995 * C503) *
                C22848 +
            (C41996 * C506 + C41997 * C501 - C8641 * C507 - C8642 * C502 +
             (C8638 + C8637) * C508 + (C8640 + C8639) * C503) *
                C50790) *
               C50814) *
              C50638 * C50907 +
          (((C41996 * C507 -
             ((C15769 + C15768) * C501 + (C15767 + C15766) * C506) +
             C41997 * C502 - C8641 * C508 - C8642 * C503) *
                C22848 +
            (C41994 * C507 - (C41993 * C501 + C41992 * C506) + C41995 * C502 -
             (C8637 + C8638) * C508 - (C8639 + C8640) * C503) *
                C50790) *
               C32110 +
           (((C8960 + C8959) * C507 -
             ((C15773 + C15772) * C501 + (C15771 + C15770) * C506) +
             (C8962 + C8961) * C502 - (C8963 + C8964) * C508 -
             (C8965 + C8966) * C503) *
                C22848 +
            ((C8964 + C8963) * C507 - (C16515 * C501 + C16514 * C506) +
             (C8966 + C8965) * C502 -
             (C49761 * C8934 + C50617 * C8936 + C49768 * C8935 +
              C50891 * C8937) *
                 C508 -
             (C49761 * C8938 + C50617 * C8940 + C49768 * C8939 +
              C50891 * C8941) *
                 C503) *
                C50790) *
               C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[60] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C10625 * C122 + C50612 * C129) * C1174 +
                     (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
                     C10762 * C50688) *
                        C50953 +
                    (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
                     C10764 * C50688) *
                        C50945 +
                    (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
                     C10766 * C50688) *
                        C25665) *
                       C32110 +
                   ((C14287 + C14288 - C14289 - C14290) * C50953 +
                    (C14291 + C14292 - C14293 - C14294) * C50945 +
                    (C14295 + C14296 - C14297 - C14298) * C25665) *
                       C50814) *
                      C50950 +
                  (((C10767 * C1175 -
                     ((C10625 * C134 + C50612 * C144) * C1169 +
                      (C10625 * C123 + C50612 * C130) * C1174) +
                     C10768 * C50688) *
                        C50953 +
                    (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
                     C10770 * C50688) *
                        C50945 +
                    (C10771 * C1175 - (C10770 * C1169 + C10769 * C1174) +
                     C10772 * C50688) *
                        C25665) *
                       C32110 +
                   ((C14299 - (C14300 + C14301) + C14302) * C50953 +
                    (C14303 - (C14304 + C14305) + C14306) * C50945 +
                    (C14307 - (C14308 + C14309) + C14310) * C25665) *
                       C50814) *
                      C50936 +
                  ((((C10625 * C124 + C50612 * C131) * C1174 +
                     (C10625 * C135 + C50612 * C145) * C1169 - C10773 * C1175 -
                     C10774 * C50688) *
                        C50953 +
                    (C10773 * C1174 + C10774 * C1169 - C10775 * C1175 -
                     C10776 * C50688) *
                        C50945 +
                    (C10775 * C1174 + C10776 * C1169 - C10777 * C1175 -
                     C10778 * C50688) *
                        C25665) *
                       C32110 +
                   ((C12903 * C1174 + C12904 * C1169 - C12725 * C1175 -
                     C12726 * C50688) *
                        C50953 +
                    (C12725 * C1174 + C12726 * C1169 - C12727 * C1175 -
                     C12728 * C50688) *
                        C50945 +
                    (C12727 * C1174 + C12728 * C1169 -
                     (C10625 * C2981 + C50612 * C2984) * C1175 -
                     (C10625 * C2987 + C50612 * C2990) * C50688) *
                        C25665) *
                       C50814) *
                      C1173) *
                 C50702) /
                (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1279 +
             (C10625 * C133 + C50612 * C143) * C50951 - C10761 * C1280 -
             C10762 * C50939 + C10763 * C1281 + C10764 * C1276) *
                C50953 +
            (C10761 * C1279 + C10762 * C50951 - C10763 * C1280 -
             C10764 * C50939 + C10765 * C1281 + C10766 * C1276) *
                C50945 +
            (C10763 * C1279 + C10764 * C50951 - C10765 * C1280 -
             C10766 * C50939 + C10983 * C1281 + C10984 * C1276) *
                C25665) *
               C32110 +
           ((C15149 + C15150 - C15151 - C15152 + C15153 + C15154) * C50953 +
            (C15155 + C15156 - C15157 - C15158 + C15159 + C15160) * C50945 +
            (C15161 + C15162 - C15163 - C15164 + C15165 + C15166) * C25665) *
               C50814) *
              C1277 +
          (((C10767 * C1280 -
             ((C10625 * C134 + C50612 * C144) * C50951 +
              (C10625 * C123 + C50612 * C130) * C1279) +
             C10768 * C50939 - C10769 * C1281 - C10770 * C1276) *
                C50953 +
            (C10769 * C1280 - (C10768 * C50951 + C10767 * C1279) +
             C10770 * C50939 - C10771 * C1281 - C10772 * C1276) *
                C50945 +
            (C10771 * C1280 - (C10770 * C50951 + C10769 * C1279) +
             C10772 * C50939 - C10985 * C1281 - C10986 * C1276) *
                C25665) *
               C32110 +
           ((C11815 * C1280 - (C12901 * C50951 + C12902 * C1279) +
             C11816 * C50939 - C11817 * C1281 - C11818 * C1276) *
                C50953 +
            (C11817 * C1280 - (C11816 * C50951 + C11815 * C1279) +
             C11818 * C50939 - C11819 * C1281 - C11820 * C1276) *
                C50945 +
            (C11819 * C1280 - (C11818 * C50951 + C11817 * C1279) +
             C11820 * C50939 - (C10625 * C8596 + C50612 * C8598) * C1281 -
             (C10625 * C8600 + C50612 * C8602) * C1276) *
                C25665) *
               C50814) *
              C50643) *
         C50702) /
        (p * q * std::sqrt(p + q));
    d2ee[62] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C10625 * C122 + C50612 * C129) * C1174 +
                      (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
                      C10762 * C50688) *
                         C50953 +
                     (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
                      C10764 * C50688) *
                         C50945 +
                     (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
                      C10766 * C50688) *
                         C25665) *
                        C32110 +
                    ((C14287 + C14288 - C14289 - C14290) * C50953 +
                     (C14291 + C14292 - C14293 - C14294) * C50945 +
                     (C14295 + C14296 - C14297 - C14298) * C25665) *
                        C50814) *
                       C1277 +
                   (((C10767 * C1175 -
                      ((C10625 * C134 + C50612 * C144) * C1169 +
                       (C10625 * C123 + C50612 * C130) * C1174) +
                      C10768 * C50688) *
                         C50953 +
                     (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
                      C10770 * C50688) *
                         C50945 +
                     (C10771 * C1175 - (C10770 * C1169 + C10769 * C1174) +
                      C10772 * C50688) *
                         C25665) *
                        C32110 +
                    ((C14299 - (C14300 + C14301) + C14302) * C50953 +
                     (C14303 - (C14304 + C14305) + C14306) * C50945 +
                     (C14307 - (C14308 + C14309) + C14310) * C25665) *
                        C50814) *
                       C50643) *
                      C50907 +
                  ((((C14289 - (C14288 + C14287) + C14290) * C50953 +
                     (C14293 - (C14292 + C14291) + C14294) * C50945 +
                     (C14297 - (C14296 + C14295) + C14298) * C25665) *
                        C32110 +
                    ((C15313 - (C15314 + C15315) + C15316) * C50953 +
                     (C15317 - (C15318 + C15319) + C15320) * C50945 +
                     (C15321 - (C15322 + C15323) + C15324) * C25665) *
                        C50814) *
                       C1277 +
                   (((C14301 + C14300 - C14299 - C14302) * C50953 +
                     (C14305 + C14304 - C14303 - C14306) * C50945 +
                     (C14309 + C14308 - C14307 - C14310) * C25665) *
                        C32110 +
                    ((C19890 + C19889 - C19888 - C19891) * C50953 +
                     (C19894 + C19893 - C19892 - C19895) * C50945 +
                     (C13489 * C1174 + C13490 * C1169 -
                      (C10625 * C8934 + C50612 * C8936) * C1175 -
                      (C10625 * C8938 + C50612 * C8940) * C50688) *
                         C25665) *
                        C50814) *
                       C50643) *
                      C50714)) /
                (p * q * std::sqrt(p + q));
    d2ee[63] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C10625 * C122 + C50612 * C129) * C1174 +
                      (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
                      C10762 * C50688) *
                         C50953 +
                     (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
                      C10764 * C50688) *
                         C50945 +
                     (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
                      C10766 * C50688) *
                         C25665) *
                        C32110 +
                    ((C14287 + C14288 - C14289 - C14290) * C50953 +
                     (C14291 + C14292 - C14293 - C14294) * C50945 +
                     (C14295 + C14296 - C14297 - C14298) * C25665) *
                        C50814) *
                       C50898 +
                   (((C10767 * C1175 -
                      ((C10625 * C134 + C50612 * C144) * C1169 +
                       (C10625 * C123 + C50612 * C130) * C1174) +
                      C10768 * C50688) *
                         C50953 +
                     (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
                      C10770 * C50688) *
                         C50945 +
                     (C10771 * C1175 - (C10770 * C1169 + C10769 * C1174) +
                      C10772 * C50688) *
                         C25665) *
                        C32110 +
                    ((C14299 - (C14300 + C14301) + C14302) * C50953 +
                     (C14303 - (C14304 + C14305) + C14306) * C50945 +
                     (C14307 - (C14308 + C14309) + C14310) * C25665) *
                        C50814) *
                       C50643) *
                      C1514 +
                  ((((C14289 - (C14288 + C14287) + C14290) * C50953 +
                     (C14293 - (C14292 + C14291) + C14294) * C50945 +
                     (C14297 - (C14296 + C14295) + C14298) * C25665) *
                        C32110 +
                    ((C15313 - (C15314 + C15315) + C15316) * C50953 +
                     (C15317 - (C15318 + C15319) + C15320) * C50945 +
                     (C15321 - (C15322 + C15323) + C15324) * C25665) *
                        C50814) *
                       C50898 +
                   (((C14301 + C14300 - C14299 - C14302) * C50953 +
                     (C14305 + C14304 - C14303 - C14306) * C50945 +
                     (C14309 + C14308 - C14307 - C14310) * C25665) *
                        C32110 +
                    ((C19890 + C19889 - C19888 - C19891) * C50953 +
                     (C19894 + C19893 - C19892 - C19895) * C50945 +
                     (C13489 * C1174 + C13490 * C1169 -
                      (C10625 * C8934 + C50612 * C8936) * C1175 -
                      (C10625 * C8938 + C50612 * C8940) * C50688) *
                         C25665) *
                        C50814) *
                       C50643) *
                      C50714)) /
                (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1279 +
             (C10625 * C133 + C50612 * C143) * C50951 - C10761 * C1280 -
             C10762 * C50939 + C10763 * C1281 + C10764 * C1276) *
                C50953 +
            (C10761 * C1279 + C10762 * C50951 - C10763 * C1280 -
             C10764 * C50939 + C10765 * C1281 + C10766 * C1276) *
                C50945 +
            (C10763 * C1279 + C10764 * C50951 - C10765 * C1280 -
             C10766 * C50939 + C10983 * C1281 + C10984 * C1276) *
                C25665) *
               C32110 +
           ((C15149 + C15150 - C15151 - C15152 + C15153 + C15154) * C50953 +
            (C15155 + C15156 - C15157 - C15158 + C15159 + C15160) * C50945 +
            (C15161 + C15162 - C15163 - C15164 + C15165 + C15166) * C25665) *
               C50814) *
              C50638 * C1514 +
          (((C15151 - (C15150 + C15149) + C15152 - C15153 - C15154) * C50953 +
            (C15157 - (C15156 + C15155) + C15158 - C15159 - C15160) * C50945 +
            (C15163 - (C15162 + C15161) + C15164 - C15165 - C15166) * C25665) *
               C32110 +
           ((C20732 - (C20731 + C20730) + C20733 - C20734 - C20735) * C50953 +
            (C20738 - (C20737 + C20736) + C20739 - C20740 - C20741) * C50945 +
            (C11405 * C1280 - (C11404 * C50951 + C11403 * C1279) +
             C11406 * C50939 - (C10625 * C11384 + C50612 * C11385) * C1281 -
             (C10625 * C11386 + C50612 * C11387) * C1276) *
                C25665) *
               C50814) *
              C50638 * C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1174 +
             (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
             C10762 * C50688) *
                C50953 +
            (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
             C10764 * C50688) *
                C50945 +
            (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
             C10766 * C50688) *
                C25665) *
               C32110 +
           ((C14287 + C14288 - C14289 - C14290) * C50953 +
            (C14291 + C14292 - C14293 - C14294) * C50945 +
            (C14295 + C14296 - C14297 - C14298) * C25665) *
               C50814) *
              C50638 * C50952 +
          (((C14289 - (C14288 + C14287) + C14290) * C50953 +
            (C14293 - (C14292 + C14291) + C14294) * C50945 +
            (C14297 - (C14296 + C14295) + C14298) * C25665) *
               C32110 +
           ((C15313 - (C15314 + C15315) + C15316) * C50953 +
            (C15317 - (C15318 + C15319) + C15320) * C50945 +
            (C15321 - (C15322 + C15323) + C15324) * C25665) *
               C50814) *
              C50638 * C50942 +
          ((C20900 * C50953 + C20901 * C50945 +
            (C15323 + C15322 - C15321 - C15324) * C25665) *
               C32110 +
           (C22746 * C50953 + (C20896 + C20895 - C20894 - C20897) * C50945 +
            (C13681 * C1174 + C13682 * C1169 -
             (C10625 * C11472 + C50612 * C11474) * C1175 -
             (C10625 * C11473 + C50612 * C11475) * C50688) *
                C25665) *
               C50814) *
              C50638 * C1746)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C50953 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C50945 +
            (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
             C10983 * C508 + C10984 * C503) *
                C25665) *
               C32110 +
           ((C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C50953 +
            (C13307 + C13308 - C13309 - C13310 + C13311 + C13312) * C50945 +
            (C13313 + C13314 - C13315 - C13316 + C13317 + C13318) * C25665) *
               C50814) *
              C50898 +
          (((C10767 * C507 -
             ((C10625 * C134 + C50612 * C144) * C501 +
              (C10625 * C123 + C50612 * C130) * C506) +
             C10768 * C502 - C10769 * C508 - C10770 * C503) *
                C50953 +
            (C10769 * C507 - (C10768 * C501 + C10767 * C506) + C10770 * C502 -
             C10771 * C508 - C10772 * C503) *
                C50945 +
            (C10771 * C507 - (C10770 * C501 + C10769 * C506) + C10772 * C502 -
             C10985 * C508 - C10986 * C503) *
                C25665) *
               C32110 +
           ((C11815 * C507 - (C12901 * C501 + C12902 * C506) + C11816 * C502 -
             C11817 * C508 - C11818 * C503) *
                C50953 +
            (C11817 * C507 - (C11816 * C501 + C11815 * C506) + C11818 * C502 -
             C11819 * C508 - C11820 * C503) *
                C50945 +
            (C11819 * C507 - (C11818 * C501 + C11817 * C506) + C11820 * C502 -
             (C10625 * C8596 + C50612 * C8598) * C508 -
             (C10625 * C8600 + C50612 * C8602) * C503) *
                C25665) *
               C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C50953 +
            (C10761 * C121 + C10762 * C50672) * C50945 +
            (C10763 * C121 + C10764 * C50672) * C25665) *
               C32110 +
           ((C12905 + C12906) * C50953 + (C12879 + C12880) * C50945 +
            (C12881 + C12882) * C25665) *
               C50814) *
              C112 -
          (((C12883 + C12884) * C25665 + (C12885 + C12886) * C50945 +
            (C12907 + C12908) * C50953) *
               C50814 +
           ((C10770 * C50672 + C10769 * C121) * C25665 +
            (C10768 * C50672 + C10767 * C121) * C50945 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C50953) *
               C32110) *
              C113 +
          ((((C10625 * C124 + C50612 * C131) * C121 +
             (C10625 * C135 + C50612 * C145) * C50672) *
                C50953 +
            (C10773 * C121 + C10774 * C50672) * C50945 +
            (C10775 * C121 + C10776 * C50672) * C25665) *
               C32110 +
           ((C12909 + C12910) * C50953 + (C12895 + C12896) * C50945 +
            (C12897 + C12898) * C25665) *
               C50814) *
              C114 -
          ((((C10625 * C738 + C50612 * C746) * C50672 +
             (C10625 * C722 + C50612 * C734) * C121) *
                C25665 +
            ((C10625 * C733 + C50612 * C745) * C50672 +
             (C10625 * C721 + C50612 * C729) * C121) *
                C50945 +
            ((C10625 * C391 + C50612 * C399) * C50672 +
             (C10625 * C381 + C50612 * C387) * C121) *
                C50953) *
               C50814 +
           (((C10625 * C521 + C50612 * C527) * C50672 +
             (C10625 * C512 + C50612 * C517) * C121) *
                C25665 +
            ((C10625 * C265 + C50612 * C273) * C50672 +
             (C10625 * C255 + C50612 * C261) * C121) *
                C50945 +
            ((C10625 * C136 + C50612 * C146) * C50672 +
             (C10625 * C125 + C50612 * C132) * C121) *
                C50953) *
               C32110) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C50953 +
             (C10761 * C121 + C10762 * C50672) * C50945 +
             (C10763 * C121 + C10764 * C50672) * C25665) *
                C32110 +
            ((C12905 + C12906) * C50953 + (C12879 + C12880) * C50945 +
             (C12881 + C12882) * C25665) *
                C50814) *
               C50898 -
           (((C12883 + C12884) * C25665 + (C12885 + C12886) * C50945 +
             (C12907 + C12908) * C50953) *
                C50814 +
            ((C10770 * C50672 + C10769 * C121) * C25665 +
             (C10768 * C50672 + C10767 * C121) * C50945 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C50953) *
                C32110) *
               C50643) *
              C848 +
          ((((C12908 + C12907) * C50953 + (C12886 + C12885) * C50945 +
             (C12884 + C12883) * C25665) *
                C32110 +
            ((C13493 + C13494) * C50953 + (C13495 + C13496) * C50945 +
             (C13497 + C13498) * C25665) *
                C50814) *
               C50643 -
           (((C13477 + C13478) * C25665 + (C13479 + C13480) * C50945 +
             (C13499 + C13500) * C50953) *
                C50814 +
            ((C12882 + C12881) * C25665 + (C12880 + C12879) * C50945 +
             (C12906 + C12905) * C50953) *
                C32110) *
               C50898) *
              C849 +
          (((C19090 * C50953 + C19091 * C50945 + (C13478 + C13477) * C25665) *
                C32110 +
            (C21546 * C50953 + (C13793 + C13794) * C50945 +
             (C13795 + C13796) * C25665) *
                C50814) *
               C50898 -
           ((((C10625 * C9066 + C50612 * C9070) * C50672 +
              (C10625 * C9064 + C50612 * C9068) * C121) *
                 C25665 +
             (C19115 + C19114) * C50945 + C21547 * C50953) *
                C50814 +
            ((C13498 + C13497) * C25665 + C19092 * C50945 + C19093 * C50953) *
                C32110) *
               C50643) *
              C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C600 +
            (C10625 * C133 + C50612 * C143) * C595 - C10761 * C601 -
            C10762 * C596 + C10763 * C602 + C10764 * C597 - C10765 * C603 -
            C10766 * C598) *
               C50953 +
           (C10761 * C600 + C10762 * C595 - C10763 * C601 - C10764 * C596 +
            C10765 * C602 + C10766 * C597 - C10983 * C603 - C10984 * C598) *
               C50945 +
           (C10763 * C600 + C10764 * C595 - C10765 * C601 - C10766 * C596 +
            C10983 * C602 + C10984 * C597 - C11061 * C603 - C11062 * C598) *
               C25665) *
              C32110 +
          ((C12899 * C600 + C12900 * C595 - C11181 * C601 - C11182 * C596 +
            C11183 * C602 + C11184 * C597 - C11185 * C603 - C11186 * C598) *
               C50953 +
           (C11181 * C600 + C11182 * C595 - C11183 * C601 - C11184 * C596 +
            C11185 * C602 + C11186 * C597 - C11187 * C603 - C11188 * C598) *
               C50945 +
           (C11183 * C600 + C11184 * C595 - C11185 * C601 - C11186 * C596 +
            C11187 * C602 + C11188 * C597 -
            (C10625 * C11160 + C50612 * C11161) * C603 -
            (C10625 * C11162 + C50612 * C11163) * C598) *
               C25665) *
              C50814) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C253 +
             (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
             C10762 * C50688) *
                C50953 +
            (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
             C10764 * C50688) *
                C50945 +
            (C10763 * C253 + C10764 * C50905 - C10765 * C254 -
             C10766 * C50688) *
                C25665) *
               C32110 +
           ((C13647 + C13648 - C13649 - C13650) * C50953 +
            (C13651 + C13652 - C13653 - C13654) * C50945 +
            (C13655 + C13656 - C13657 - C13658) * C25665) *
               C50814) *
              C250 +
          (((C10767 * C254 -
             ((C10625 * C134 + C50612 * C144) * C50905 +
              (C10625 * C123 + C50612 * C130) * C253) +
             C10768 * C50688) *
                C50953 +
            (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
             C10770 * C50688) *
                C50945 +
            (C10771 * C254 - (C10770 * C50905 + C10769 * C253) +
             C10772 * C50688) *
                C25665) *
               C32110 +
           ((C14651 - (C14652 + C14653) + C14654) * C50953 +
            (C14655 - (C14656 + C14657) + C14658) * C50945 +
            (C14659 - (C14660 + C14661) + C14662) * C25665) *
               C50814) *
              C251 +
          ((((C10625 * C124 + C50612 * C131) * C253 +
             (C10625 * C135 + C50612 * C145) * C50905 - C10773 * C254 -
             C10774 * C50688) *
                C50953 +
            (C10773 * C253 + C10774 * C50905 - C10775 * C254 -
             C10776 * C50688) *
                C50945 +
            (C10775 * C253 + C10776 * C50905 - C10777 * C254 -
             C10778 * C50688) *
                C25665) *
               C32110 +
           ((C12903 * C253 + C12904 * C50905 - C12725 * C254 -
             C12726 * C50688) *
                C50953 +
            (C12725 * C253 + C12726 * C50905 - C12727 * C254 -
             C12728 * C50688) *
                C50945 +
            (C12727 * C253 + C12728 * C50905 -
             (C10625 * C2981 + C50612 * C2984) * C254 -
             (C10625 * C2987 + C50612 * C2990) * C50688) *
                C25665) *
               C50814) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C253 +
             (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
             C10762 * C50688) *
                C50953 +
            (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
             C10764 * C50688) *
                C50945 +
            (C10763 * C253 + C10764 * C50905 - C10765 * C254 -
             C10766 * C50688) *
                C25665) *
               C32110 +
           ((C13647 + C13648 - C13649 - C13650) * C50953 +
            (C13651 + C13652 - C13653 - C13654) * C50945 +
            (C13655 + C13656 - C13657 - C13658) * C25665) *
               C50814) *
              C50638 * C848 +
          (((C13649 - (C13648 + C13647) + C13650) * C50953 +
            (C13653 - (C13652 + C13651) + C13654) * C50945 +
            (C13657 - (C13656 + C13655) + C13658) * C25665) *
               C32110 +
           ((C13659 - (C13660 + C13661) + C13662) * C50953 +
            (C13663 - (C13664 + C13665) + C13666) * C50945 +
            (C13667 - (C13668 + C13669) + C13670) * C25665) *
               C50814) *
              C50638 * C849 +
          ((C19280 * C50953 + C19281 * C50945 +
            (C13669 + C13668 - C13667 - C13670) * C25665) *
               C32110 +
           (C21664 * C50953 + (C19270 + C19269 - C19268 - C19271) * C50945 +
            (C13681 * C253 + C13682 * C50905 -
             (C10625 * C11472 + C50612 * C11474) * C254 -
             (C10625 * C11473 + C50612 * C11475) * C50688) *
                C25665) *
               C50814) *
              C50638 * C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C50953 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C50945 +
            (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
             C10983 * C508 + C10984 * C503) *
                C25665) *
               C32110 +
           ((C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C50953 +
            (C13307 + C13308 - C13309 - C13310 + C13311 + C13312) * C50945 +
            (C13313 + C13314 - C13315 - C13316 + C13317 + C13318) * C25665) *
               C50814) *
              C50638 * C50907 +
          (((C13303 - (C13302 + C13301) + C13304 - C13305 - C13306) * C50953 +
            (C13309 - (C13308 + C13307) + C13310 - C13311 - C13312) * C50945 +
            (C13315 - (C13314 + C13313) + C13316 - C13317 - C13318) * C25665) *
               C32110 +
           ((C18934 - (C18933 + C18932) + C18935 - C18936 - C18937) * C50953 +
            (C18940 - (C18939 + C18938) + C18941 - C18942 - C18943) * C50945 +
            (C11405 * C507 - (C11404 * C501 + C11403 * C506) + C11406 * C502 -
             (C10625 * C11384 + C50612 * C11385) * C508 -
             (C10625 * C11386 + C50612 * C11387) * C503) *
                C25665) *
               C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C50953 +
             (C10761 * C121 + C10762 * C50672) * C50945 +
             (C10763 * C121 + C10764 * C50672) * C25665) *
                C32110 +
            ((C12905 + C12906) * C50953 + (C12879 + C12880) * C50945 +
             (C12881 + C12882) * C25665) *
                C50814) *
               C250 -
           (((C12883 + C12884) * C25665 + (C12885 + C12886) * C50945 +
             (C12907 + C12908) * C50953) *
                C50814 +
            ((C10770 * C50672 + C10769 * C121) * C25665 +
             (C10768 * C50672 + C10767 * C121) * C50945 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C50953) *
                C32110) *
               C251 +
           ((((C10625 * C124 + C50612 * C131) * C121 +
              (C10625 * C135 + C50612 * C145) * C50672) *
                 C50953 +
             (C10773 * C121 + C10774 * C50672) * C50945 +
             (C10775 * C121 + C10776 * C50672) * C25665) *
                C32110 +
            ((C12909 + C12910) * C50953 + (C12895 + C12896) * C50945 +
             (C12897 + C12898) * C25665) *
                C50814) *
               C252) *
              C50907 +
          ((((C12908 + C12907) * C50953 + (C12886 + C12885) * C50945 +
             (C12884 + C12883) * C25665) *
                C32110 +
            ((C13493 + C13494) * C50953 + (C13495 + C13496) * C50945 +
             (C13497 + C13498) * C25665) *
                C50814) *
               C251 -
           (((C13477 + C13478) * C25665 + (C13479 + C13480) * C50945 +
             (C13499 + C13500) * C50953) *
                C50814 +
            ((C12882 + C12881) * C25665 + (C12880 + C12879) * C50945 +
             (C12906 + C12905) * C50953) *
                C32110) *
               C250 -
           ((((C10625 * C3327 + C50612 * C3330) * C50672 +
              (C10625 * C3321 + C50612 * C3324) * C121) *
                 C25665 +
             (C18537 + C18536) * C50945 + (C18541 + C18540) * C50953) *
                C50814 +
            ((C12898 + C12897) * C25665 + (C12896 + C12895) * C50945 +
             (C12910 + C12909) * C50953) *
                C32110) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C50953 +
            (C10761 * C121 + C10762 * C50672) * C50945 +
            (C10763 * C121 + C10764 * C50672) * C25665) *
               C32110 +
           ((C12905 + C12906) * C50953 + (C12879 + C12880) * C50945 +
            (C12881 + C12882) * C25665) *
               C50814) *
              C50638 * C1051 -
          (((C13477 + C13478) * C25665 + (C13479 + C13480) * C50945 +
            (C13499 + C13500) * C50953) *
               C50814 +
           ((C12882 + C12881) * C25665 + (C12880 + C12879) * C50945 +
            (C12906 + C12905) * C50953) *
               C32110) *
              C50638 * C1052 +
          ((C19090 * C50953 + C19091 * C50945 + (C13478 + C13477) * C25665) *
               C32110 +
           (C21546 * C50953 + (C13793 + C13794) * C50945 +
            (C13795 + C13796) * C25665) *
               C50814) *
              C50638 * C1053 -
          ((((C10625 * C13782 + C50612 * C13786) * C50672 +
             (C10625 * C13780 + C50612 * C13783) * C121) *
                C25665 +
            (C19394 + C19393) * C50945 + C21736 * C50953) *
               C50814 +
           ((C13796 + C13795) * C25665 + C19387 * C50945 + C19388 * C50953) *
               C32110) *
              C50638 * C1054)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C10625 * C122 + C50612 * C129) * C121 +
                      (C10625 * C133 + C50612 * C143) * C50672) *
                         C50953 +
                     (C10761 * C121 + C10762 * C50672) * C50945 +
                     (C10763 * C121 + C10764 * C50672) * C25665) *
                        C32110 +
                    ((C12905 + C12906) * C50953 + (C12879 + C12880) * C50945 +
                     (C12881 + C12882) * C25665) *
                        C50814) *
                       C50950 -
                   (((C12883 + C12884) * C25665 + (C12885 + C12886) * C50945 +
                     (C12907 + C12908) * C50953) *
                        C50814 +
                    ((C10770 * C50672 + C10769 * C121) * C25665 +
                     (C10768 * C50672 + C10767 * C121) * C50945 +
                     ((C10625 * C134 + C50612 * C144) * C50672 +
                      (C10625 * C123 + C50612 * C130) * C121) *
                         C50953) *
                        C32110) *
                       C50936 +
                   ((((C10625 * C124 + C50612 * C131) * C121 +
                      (C10625 * C135 + C50612 * C145) * C50672) *
                         C50953 +
                     (C10773 * C121 + C10774 * C50672) * C50945 +
                     (C10775 * C121 + C10776 * C50672) * C25665) *
                        C32110 +
                    ((C12909 + C12910) * C50953 + (C12895 + C12896) * C50945 +
                     (C12897 + C12898) * C25665) *
                        C50814) *
                       C1173) *
                      C1514 +
                  ((((C12908 + C12907) * C50953 + (C12886 + C12885) * C50945 +
                     (C12884 + C12883) * C25665) *
                        C32110 +
                    ((C13493 + C13494) * C50953 + (C13495 + C13496) * C50945 +
                     (C13497 + C13498) * C25665) *
                        C50814) *
                       C50936 -
                   (((C13477 + C13478) * C25665 + (C13479 + C13480) * C50945 +
                     (C13499 + C13500) * C50953) *
                        C50814 +
                    ((C12882 + C12881) * C25665 + (C12880 + C12879) * C50945 +
                     (C12906 + C12905) * C50953) *
                        C32110) *
                       C50950 -
                   ((((C10625 * C3327 + C50612 * C3330) * C50672 +
                      (C10625 * C3321 + C50612 * C3324) * C121) *
                         C25665 +
                     (C18537 + C18536) * C50945 + (C18541 + C18540) * C50953) *
                        C50814 +
                    ((C12898 + C12897) * C25665 + (C12896 + C12895) * C50945 +
                     (C12910 + C12909) * C50953) *
                        C32110) *
                       C1173) *
                      C50714)) /
                (p * q * std::sqrt(p + q));
    d2ee[70] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C10625 * C122 + C50612 * C129) * C253 +
                      (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
                      C10762 * C50688) *
                         C50953 +
                     (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
                      C10764 * C50688) *
                         C50945 +
                     (C10763 * C253 + C10764 * C50905 - C10765 * C254 -
                      C10766 * C50688) *
                         C25665) *
                        C32110 +
                    ((C13647 + C13648 - C13649 - C13650) * C50953 +
                     (C13651 + C13652 - C13653 - C13654) * C50945 +
                     (C13655 + C13656 - C13657 - C13658) * C25665) *
                        C50814) *
                       C1277 +
                   (((C10767 * C254 -
                      ((C10625 * C134 + C50612 * C144) * C50905 +
                       (C10625 * C123 + C50612 * C130) * C253) +
                      C10768 * C50688) *
                         C50953 +
                     (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
                      C10770 * C50688) *
                         C50945 +
                     (C10771 * C254 - (C10770 * C50905 + C10769 * C253) +
                      C10772 * C50688) *
                         C25665) *
                        C32110 +
                    ((C14651 - (C14652 + C14653) + C14654) * C50953 +
                     (C14655 - (C14656 + C14657) + C14658) * C50945 +
                     (C14659 - (C14660 + C14661) + C14662) * C25665) *
                        C50814) *
                       C50643) *
                      C1514 +
                  ((((C13649 - (C13648 + C13647) + C13650) * C50953 +
                     (C13653 - (C13652 + C13651) + C13654) * C50945 +
                     (C13657 - (C13656 + C13655) + C13658) * C25665) *
                        C32110 +
                    ((C13659 - (C13660 + C13661) + C13662) * C50953 +
                     (C13663 - (C13664 + C13665) + C13666) * C50945 +
                     (C13667 - (C13668 + C13669) + C13670) * C25665) *
                        C50814) *
                       C1277 +
                   (((C14653 + C14652 - C14651 - C14654) * C50953 +
                     (C14657 + C14656 - C14655 - C14658) * C50945 +
                     (C14661 + C14660 - C14659 - C14662) * C25665) *
                        C32110 +
                    ((C20238 + C20237 - C20236 - C20239) * C50953 +
                     (C20242 + C20241 - C20240 - C20243) * C50945 +
                     (C13489 * C253 + C13490 * C50905 -
                      (C10625 * C8934 + C50612 * C8936) * C254 -
                      (C10625 * C8938 + C50612 * C8940) * C50688) *
                         C25665) *
                        C50814) *
                       C50643) *
                      C50714)) /
                (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C50953 +
             (C10761 * C121 + C10762 * C50672) * C50945 +
             (C10763 * C121 + C10764 * C50672) * C25665) *
                C32110 +
            ((C12905 + C12906) * C50953 + (C12879 + C12880) * C50945 +
             (C12881 + C12882) * C25665) *
                C50814) *
               C1277 -
           (((C12883 + C12884) * C25665 + (C12885 + C12886) * C50945 +
             (C12907 + C12908) * C50953) *
                C50814 +
            ((C10770 * C50672 + C10769 * C121) * C25665 +
             (C10768 * C50672 + C10767 * C121) * C50945 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C50953) *
                C32110) *
               C50643) *
              C50952 +
          ((((C12908 + C12907) * C50953 + (C12886 + C12885) * C50945 +
             (C12884 + C12883) * C25665) *
                C32110 +
            ((C13493 + C13494) * C50953 + (C13495 + C13496) * C50945 +
             (C13497 + C13498) * C25665) *
                C50814) *
               C50643 -
           (((C13477 + C13478) * C25665 + (C13479 + C13480) * C50945 +
             (C13499 + C13500) * C50953) *
                C50814 +
            ((C12882 + C12881) * C25665 + (C12880 + C12879) * C50945 +
             (C12906 + C12905) * C50953) *
                C32110) *
               C1277) *
              C50942 +
          (((C19090 * C50953 + C19091 * C50945 + (C13478 + C13477) * C25665) *
                C32110 +
            (C21546 * C50953 + (C13793 + C13794) * C50945 +
             (C13795 + C13796) * C25665) *
                C50814) *
               C1277 -
           ((((C10625 * C9066 + C50612 * C9070) * C50672 +
              (C10625 * C9064 + C50612 * C9068) * C121) *
                 C25665 +
             (C19115 + C19114) * C50945 + C21547 * C50953) *
                C50814 +
            ((C13498 + C13497) * C25665 + C19092 * C50945 + C19093 * C50953) *
                C32110) *
               C50643) *
              C1746)) /
        (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C50953 +
            (C10761 * C121 + C10762 * C50672) * C50945 +
            (C10763 * C121 + C10764 * C50672) * C25665) *
               C32110 +
           ((C12905 + C12906) * C50953 + (C12879 + C12880) * C50945 +
            (C12881 + C12882) * C25665) *
               C50814) *
              C112 -
          (((C12883 + C12884) * C25665 + (C12885 + C12886) * C50945 +
            (C12907 + C12908) * C50953) *
               C50814 +
           ((C10770 * C50672 + C10769 * C121) * C25665 +
            (C10768 * C50672 + C10767 * C121) * C50945 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C50953) *
               C32110) *
              C113 +
          ((((C10625 * C124 + C50612 * C131) * C121 +
             (C10625 * C135 + C50612 * C145) * C50672) *
                C50953 +
            (C10773 * C121 + C10774 * C50672) * C50945 +
            (C10775 * C121 + C10776 * C50672) * C25665) *
               C32110 +
           ((C12909 + C12910) * C50953 + (C12895 + C12896) * C50945 +
            (C12897 + C12898) * C25665) *
               C50814) *
              C114 -
          ((((C10625 * C738 + C50612 * C746) * C50672 +
             (C10625 * C722 + C50612 * C734) * C121) *
                C25665 +
            ((C10625 * C733 + C50612 * C745) * C50672 +
             (C10625 * C721 + C50612 * C729) * C121) *
                C50945 +
            ((C10625 * C391 + C50612 * C399) * C50672 +
             (C10625 * C381 + C50612 * C387) * C121) *
                C50953) *
               C50814 +
           (((C10625 * C521 + C50612 * C527) * C50672 +
             (C10625 * C512 + C50612 * C517) * C121) *
                C25665 +
            ((C10625 * C265 + C50612 * C273) * C50672 +
             (C10625 * C255 + C50612 * C261) * C121) *
                C50945 +
            ((C10625 * C136 + C50612 * C146) * C50672 +
             (C10625 * C125 + C50612 * C132) * C121) *
                C50953) *
               C32110) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C50953 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C50945 +
            (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
             C10983 * C508 + C10984 * C503) *
                C25665) *
               C32110 +
           ((C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C50953 +
            (C13307 + C13308 - C13309 - C13310 + C13311 + C13312) * C50945 +
            (C13313 + C13314 - C13315 - C13316 + C13317 + C13318) * C25665) *
               C50814) *
              C50898 +
          (((C10767 * C507 -
             ((C10625 * C134 + C50612 * C144) * C501 +
              (C10625 * C123 + C50612 * C130) * C506) +
             C10768 * C502 - C10769 * C508 - C10770 * C503) *
                C50953 +
            (C10769 * C507 - (C10768 * C501 + C10767 * C506) + C10770 * C502 -
             C10771 * C508 - C10772 * C503) *
                C50945 +
            (C10771 * C507 - (C10770 * C501 + C10769 * C506) + C10772 * C502 -
             C10985 * C508 - C10986 * C503) *
                C25665) *
               C32110 +
           ((C11815 * C507 - (C12901 * C501 + C12902 * C506) + C11816 * C502 -
             C11817 * C508 - C11818 * C503) *
                C50953 +
            (C11817 * C507 - (C11816 * C501 + C11815 * C506) + C11818 * C502 -
             C11819 * C508 - C11820 * C503) *
                C50945 +
            (C11819 * C507 - (C11818 * C501 + C11817 * C506) + C11820 * C502 -
             (C10625 * C8596 + C50612 * C8598) * C508 -
             (C10625 * C8600 + C50612 * C8602) * C503) *
                C25665) *
               C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C253 +
             (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
             C10762 * C50688) *
                C50953 +
            (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
             C10764 * C50688) *
                C50945 +
            (C10763 * C253 + C10764 * C50905 - C10765 * C254 -
             C10766 * C50688) *
                C25665) *
               C32110 +
           ((C13647 + C13648 - C13649 - C13650) * C50953 +
            (C13651 + C13652 - C13653 - C13654) * C50945 +
            (C13655 + C13656 - C13657 - C13658) * C25665) *
               C50814) *
              C250 +
          (((C10767 * C254 -
             ((C10625 * C134 + C50612 * C144) * C50905 +
              (C10625 * C123 + C50612 * C130) * C253) +
             C10768 * C50688) *
                C50953 +
            (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
             C10770 * C50688) *
                C50945 +
            (C10771 * C254 - (C10770 * C50905 + C10769 * C253) +
             C10772 * C50688) *
                C25665) *
               C32110 +
           ((C14651 - (C14652 + C14653) + C14654) * C50953 +
            (C14655 - (C14656 + C14657) + C14658) * C50945 +
            (C14659 - (C14660 + C14661) + C14662) * C25665) *
               C50814) *
              C251 +
          ((((C10625 * C124 + C50612 * C131) * C253 +
             (C10625 * C135 + C50612 * C145) * C50905 - C10773 * C254 -
             C10774 * C50688) *
                C50953 +
            (C10773 * C253 + C10774 * C50905 - C10775 * C254 -
             C10776 * C50688) *
                C50945 +
            (C10775 * C253 + C10776 * C50905 - C10777 * C254 -
             C10778 * C50688) *
                C25665) *
               C32110 +
           ((C12903 * C253 + C12904 * C50905 - C12725 * C254 -
             C12726 * C50688) *
                C50953 +
            (C12725 * C253 + C12726 * C50905 - C12727 * C254 -
             C12728 * C50688) *
                C50945 +
            (C12727 * C253 + C12728 * C50905 -
             (C10625 * C2981 + C50612 * C2984) * C254 -
             (C10625 * C2987 + C50612 * C2990) * C50688) *
                C25665) *
               C50814) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C600 +
            (C10625 * C133 + C50612 * C143) * C595 - C10761 * C601 -
            C10762 * C596 + C10763 * C602 + C10764 * C597 - C10765 * C603 -
            C10766 * C598) *
               C50953 +
           (C10761 * C600 + C10762 * C595 - C10763 * C601 - C10764 * C596 +
            C10765 * C602 + C10766 * C597 - C10983 * C603 - C10984 * C598) *
               C50945 +
           (C10763 * C600 + C10764 * C595 - C10765 * C601 - C10766 * C596 +
            C10983 * C602 + C10984 * C597 - C11061 * C603 - C11062 * C598) *
               C25665) *
              C32110 +
          ((C12899 * C600 + C12900 * C595 - C11181 * C601 - C11182 * C596 +
            C11183 * C602 + C11184 * C597 - C11185 * C603 - C11186 * C598) *
               C50953 +
           (C11181 * C600 + C11182 * C595 - C11183 * C601 - C11184 * C596 +
            C11185 * C602 + C11186 * C597 - C11187 * C603 - C11188 * C598) *
               C50945 +
           (C11183 * C600 + C11184 * C595 - C11185 * C601 - C11186 * C596 +
            C11187 * C602 + C11188 * C597 -
            (C10625 * C11160 + C50612 * C11161) * C603 -
            (C10625 * C11162 + C50612 * C11163) * C598) *
               C25665) *
              C50814) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C50953 +
             (C10761 * C121 + C10762 * C50672) * C50945 +
             (C10763 * C121 + C10764 * C50672) * C25665) *
                C32110 +
            ((C12905 + C12906) * C50953 + (C12879 + C12880) * C50945 +
             (C12881 + C12882) * C25665) *
                C50814) *
               C250 -
           (((C12883 + C12884) * C25665 + (C12885 + C12886) * C50945 +
             (C12907 + C12908) * C50953) *
                C50814 +
            ((C10770 * C50672 + C10769 * C121) * C25665 +
             (C10768 * C50672 + C10767 * C121) * C50945 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C50953) *
                C32110) *
               C251 +
           ((((C10625 * C124 + C50612 * C131) * C121 +
              (C10625 * C135 + C50612 * C145) * C50672) *
                 C50953 +
             (C10773 * C121 + C10774 * C50672) * C50945 +
             (C10775 * C121 + C10776 * C50672) * C25665) *
                C32110 +
            ((C12909 + C12910) * C50953 + (C12895 + C12896) * C50945 +
             (C12897 + C12898) * C25665) *
                C50814) *
               C252) *
              C50907 +
          ((((C12908 + C12907) * C50953 + (C12886 + C12885) * C50945 +
             (C12884 + C12883) * C25665) *
                C32110 +
            ((C13493 + C13494) * C50953 + (C13495 + C13496) * C50945 +
             (C13497 + C13498) * C25665) *
                C50814) *
               C251 -
           (((C13477 + C13478) * C25665 + (C13479 + C13480) * C50945 +
             (C13499 + C13500) * C50953) *
                C50814 +
            ((C12882 + C12881) * C25665 + (C12880 + C12879) * C50945 +
             (C12906 + C12905) * C50953) *
                C32110) *
               C250 -
           ((((C10625 * C3327 + C50612 * C3330) * C50672 +
              (C10625 * C3321 + C50612 * C3324) * C121) *
                 C25665 +
             (C18537 + C18536) * C50945 + (C18541 + C18540) * C50953) *
                C50814 +
            ((C12898 + C12897) * C25665 + (C12896 + C12895) * C50945 +
             (C12910 + C12909) * C50953) *
                C32110) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C50953 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C50945 +
            (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
             C10983 * C508 + C10984 * C503) *
                C25665) *
               C32110 +
           ((C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C50953 +
            (C13307 + C13308 - C13309 - C13310 + C13311 + C13312) * C50945 +
            (C13313 + C13314 - C13315 - C13316 + C13317 + C13318) * C25665) *
               C50814) *
              C50638 * C50907 +
          (((C13303 - (C13302 + C13301) + C13304 - C13305 - C13306) * C50953 +
            (C13309 - (C13308 + C13307) + C13310 - C13311 - C13312) * C50945 +
            (C13315 - (C13314 + C13313) + C13316 - C13317 - C13318) * C25665) *
               C32110 +
           ((C18934 - (C18933 + C18932) + C18935 - C18936 - C18937) * C50953 +
            (C18940 - (C18939 + C18938) + C18941 - C18942 - C18943) * C50945 +
            (C11405 * C507 - (C11404 * C501 + C11403 * C506) + C11406 * C502 -
             (C10625 * C11384 + C50612 * C11385) * C508 -
             (C10625 * C11386 + C50612 * C11387) * C503) *
                C25665) *
               C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[75] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C10625 * C122 + C50612 * C129) * C1174 +
                     (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
                     C10762 * C50688) *
                        C22848 +
                    (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
                     C10764 * C50688) *
                        C50790) *
                       C50954 +
                   ((C14287 + C14288 - C14289 - C14290) * C22848 +
                    (C14291 + C14292 - C14293 - C14294) * C50790) *
                       C50948 +
                   (C20900 * C22848 + C20901 * C50790) * C38342) *
                      C50950 +
                  (((C10767 * C1175 -
                     ((C10625 * C134 + C50612 * C144) * C1169 +
                      (C10625 * C123 + C50612 * C130) * C1174) +
                     C10768 * C50688) *
                        C22848 +
                    (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
                     C10770 * C50688) *
                        C50790) *
                       C50954 +
                   ((C14299 - (C14300 + C14301) + C14302) * C22848 +
                    (C14303 - (C14304 + C14305) + C14306) * C50790) *
                       C50948 +
                   ((C19888 - (C19889 + C19890) + C19891) * C22848 +
                    (C19892 - (C19893 + C19894) + C19895) * C50790) *
                       C38342) *
                      C50936 +
                  ((((C10625 * C124 + C50612 * C131) * C1174 +
                     (C10625 * C135 + C50612 * C145) * C1169 - C10773 * C1175 -
                     C10774 * C50688) *
                        C22848 +
                    (C10773 * C1174 + C10774 * C1169 - C10775 * C1175 -
                     C10776 * C50688) *
                        C50790) *
                       C50954 +
                   ((C12903 * C1174 + C12904 * C1169 - C12725 * C1175 -
                     C12726 * C50688) *
                        C22848 +
                    (C12725 * C1174 + C12726 * C1169 - C12727 * C1175 -
                     C12728 * C50688) *
                        C50790) *
                       C50948 +
                   ((C18538 * C1174 + C18539 * C1169 - C18384 * C1175 -
                     C18385 * C50688) *
                        C22848 +
                    (C18384 * C1174 + C18385 * C1169 -
                     (C10625 * C3321 + C50612 * C3324) * C1175 -
                     (C10625 * C3327 + C50612 * C3330) * C50688) *
                        C50790) *
                       C38342) *
                      C1173) *
                 C50702) /
                (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1279 +
             (C10625 * C133 + C50612 * C143) * C50951 - C10761 * C1280 -
             C10762 * C50939 + C10763 * C1281 + C10764 * C1276) *
                C22848 +
            (C10761 * C1279 + C10762 * C50951 - C10763 * C1280 -
             C10764 * C50939 + C10765 * C1281 + C10766 * C1276) *
                C50790) *
               C50954 +
           ((C15149 + C15150 - C15151 - C15152 + C15153 + C15154) * C22848 +
            (C15155 + C15156 - C15157 - C15158 + C15159 + C15160) * C50790) *
               C50948 +
           ((C20730 + C20731 - C20732 - C20733 + C20734 + C20735) * C22848 +
            (C20736 + C20737 - C20738 - C20739 + C20740 + C20741) * C50790) *
               C38342) *
              C1277 +
          (((C10767 * C1280 -
             ((C10625 * C134 + C50612 * C144) * C50951 +
              (C10625 * C123 + C50612 * C130) * C1279) +
             C10768 * C50939 - C10769 * C1281 - C10770 * C1276) *
                C22848 +
            (C10769 * C1280 - (C10768 * C50951 + C10767 * C1279) +
             C10770 * C50939 - C10771 * C1281 - C10772 * C1276) *
                C50790) *
               C50954 +
           ((C11815 * C1280 - (C12901 * C50951 + C12902 * C1279) +
             C11816 * C50939 - C11817 * C1281 - C11818 * C1276) *
                C22848 +
            (C11817 * C1280 - (C11816 * C50951 + C11815 * C1279) +
             C11818 * C50939 - C11819 * C1281 - C11820 * C1276) *
                C50790) *
               C50948 +
           ((C13487 * C1280 - (C13486 * C50951 + C13485 * C1279) +
             C13488 * C50939 - C13489 * C1281 - C13490 * C1276) *
                C22848 +
            (C13489 * C1280 - (C13488 * C50951 + C13487 * C1279) +
             C13490 * C50939 - (C10625 * C8934 + C50612 * C8936) * C1281 -
             (C10625 * C8938 + C50612 * C8940) * C1276) *
                C50790) *
               C38342) *
              C50643) *
         C50702) /
        (p * q * std::sqrt(p + q));
    d2ee[77] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C10625 * C122 + C50612 * C129) * C1174 +
                      (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
                      C10762 * C50688) *
                         C22848 +
                     (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
                      C10764 * C50688) *
                         C50790) *
                        C50954 +
                    ((C14287 + C14288 - C14289 - C14290) * C22848 +
                     (C14291 + C14292 - C14293 - C14294) * C50790) *
                        C50948 +
                    (C20900 * C22848 + C20901 * C50790) * C38342) *
                       C1277 +
                   (((C10767 * C1175 -
                      ((C10625 * C134 + C50612 * C144) * C1169 +
                       (C10625 * C123 + C50612 * C130) * C1174) +
                      C10768 * C50688) *
                         C22848 +
                     (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
                      C10770 * C50688) *
                         C50790) *
                        C50954 +
                    ((C14299 - (C14300 + C14301) + C14302) * C22848 +
                     (C14303 - (C14304 + C14305) + C14306) * C50790) *
                        C50948 +
                    ((C19888 - (C19889 + C19890) + C19891) * C22848 +
                     (C19892 - (C19893 + C19894) + C19895) * C50790) *
                        C38342) *
                       C50643) *
                      C50907 +
                  ((((C14289 - (C14288 + C14287) + C14290) * C22848 +
                     (C14293 - (C14292 + C14291) + C14294) * C50790) *
                        C50954 +
                    ((C15313 - (C15314 + C15315) + C15316) * C22848 +
                     (C15317 - (C15318 + C15319) + C15320) * C50790) *
                        C50948 +
                    ((C20890 - (C20891 + C20892) + C20893) * C22848 +
                     (C20894 - (C20895 + C20896) + C20897) * C50790) *
                        C38342) *
                       C1277 +
                   (((C14301 + C14300 - C14299 - C14302) * C22848 +
                     (C14305 + C14304 - C14303 - C14306) * C50790) *
                        C50954 +
                    ((C19890 + C19889 - C19888 - C19891) * C22848 +
                     (C19894 + C19893 - C19892 - C19895) * C50790) *
                        C50948 +
                    ((C22075 + C22074 - C22073 - C22076) * C22848 +
                     (C19108 * C1174 + C19109 * C1169 -
                      (C10625 * C9064 + C50612 * C9068) * C1175 -
                      (C10625 * C9066 + C50612 * C9070) * C50688) *
                         C50790) *
                        C38342) *
                       C50643) *
                      C50714)) /
                (p * q * std::sqrt(p + q));
    d2ee[78] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C10625 * C122 + C50612 * C129) * C1174 +
                      (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
                      C10762 * C50688) *
                         C22848 +
                     (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
                      C10764 * C50688) *
                         C50790) *
                        C50954 +
                    ((C14287 + C14288 - C14289 - C14290) * C22848 +
                     (C14291 + C14292 - C14293 - C14294) * C50790) *
                        C50948 +
                    (C20900 * C22848 + C20901 * C50790) * C38342) *
                       C50898 +
                   (((C10767 * C1175 -
                      ((C10625 * C134 + C50612 * C144) * C1169 +
                       (C10625 * C123 + C50612 * C130) * C1174) +
                      C10768 * C50688) *
                         C22848 +
                     (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
                      C10770 * C50688) *
                         C50790) *
                        C50954 +
                    ((C14299 - (C14300 + C14301) + C14302) * C22848 +
                     (C14303 - (C14304 + C14305) + C14306) * C50790) *
                        C50948 +
                    ((C19888 - (C19889 + C19890) + C19891) * C22848 +
                     (C19892 - (C19893 + C19894) + C19895) * C50790) *
                        C38342) *
                       C50643) *
                      C1514 +
                  ((((C14289 - (C14288 + C14287) + C14290) * C22848 +
                     (C14293 - (C14292 + C14291) + C14294) * C50790) *
                        C50954 +
                    ((C15313 - (C15314 + C15315) + C15316) * C22848 +
                     (C15317 - (C15318 + C15319) + C15320) * C50790) *
                        C50948 +
                    ((C20890 - (C20891 + C20892) + C20893) * C22848 +
                     (C20894 - (C20895 + C20896) + C20897) * C50790) *
                        C38342) *
                       C50898 +
                   (((C14301 + C14300 - C14299 - C14302) * C22848 +
                     (C14305 + C14304 - C14303 - C14306) * C50790) *
                        C50954 +
                    ((C19890 + C19889 - C19888 - C19891) * C22848 +
                     (C19894 + C19893 - C19892 - C19895) * C50790) *
                        C50948 +
                    ((C22075 + C22074 - C22073 - C22076) * C22848 +
                     (C19108 * C1174 + C19109 * C1169 -
                      (C10625 * C9064 + C50612 * C9068) * C1175 -
                      (C10625 * C9066 + C50612 * C9070) * C50688) *
                         C50790) *
                        C38342) *
                       C50643) *
                      C50714)) /
                (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1279 +
             (C10625 * C133 + C50612 * C143) * C50951 - C10761 * C1280 -
             C10762 * C50939 + C10763 * C1281 + C10764 * C1276) *
                C22848 +
            (C10761 * C1279 + C10762 * C50951 - C10763 * C1280 -
             C10764 * C50939 + C10765 * C1281 + C10766 * C1276) *
                C50790) *
               C50954 +
           ((C15149 + C15150 - C15151 - C15152 + C15153 + C15154) * C22848 +
            (C15155 + C15156 - C15157 - C15158 + C15159 + C15160) * C50790) *
               C50948 +
           ((C20730 + C20731 - C20732 - C20733 + C20734 + C20735) * C22848 +
            (C20736 + C20737 - C20738 - C20739 + C20740 + C20741) * C50790) *
               C38342) *
              C50638 * C1514 +
          (((C15151 - (C15150 + C15149) + C15152 - C15153 - C15154) * C22848 +
            (C15157 - (C15156 + C15155) + C15158 - C15159 - C15160) * C50790) *
               C50954 +
           ((C20732 - (C20731 + C20730) + C20733 - C20734 - C20735) * C22848 +
            (C20738 - (C20737 + C20736) + C20739 - C20740 - C20741) * C50790) *
               C50948 +
           ((C22637 - (C22636 + C22635) + C22638 - C22639 - C22640) * C22848 +
            (C13681 * C1280 - (C13680 * C50951 + C13679 * C1279) +
             C13682 * C50939 - (C10625 * C11472 + C50612 * C11474) * C1281 -
             (C10625 * C11473 + C50612 * C11475) * C1276) *
                C50790) *
               C38342) *
              C50638 * C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1174 +
             (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
             C10762 * C50688) *
                C22848 +
            (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
             C10764 * C50688) *
                C50790) *
               C50954 +
           ((C14287 + C14288 - C14289 - C14290) * C22848 +
            (C14291 + C14292 - C14293 - C14294) * C50790) *
               C50948 +
           C49730 * C38342) *
              C50638 * C50952 +
          (((C14289 - (C14288 + C14287) + C14290) * C22848 +
            (C14293 - (C14292 + C14291) + C14294) * C50790) *
               C50954 +
           ((C15313 - (C15314 + C15315) + C15316) * C22848 +
            (C15317 - (C15318 + C15319) + C15320) * C50790) *
               C50948 +
           ((C20890 - (C20891 + C20892) + C20893) * C22848 +
            (C20894 - (C20895 + C20896) + C20897) * C50790) *
               C38342) *
              C50638 * C50942 +
          (C49730 * C50954 +
           (C22746 * C22848 + (C20896 + C20895 - C20894 - C20897) * C50790) *
               C50948 +
           ((C22743 + C22742 - C22741 - C22744) * C22848 +
            (C19278 * C1174 + C19279 * C1169 -
             (C10625 * C13780 + C50612 * C13783) * C1175 -
             (C10625 * C13782 + C50612 * C13786) * C50688) *
                C50790) *
               C38342) *
              C50638 * C1746)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C22848 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C50790) *
               C50954 +
           ((C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C22848 +
            (C13307 + C13308 - C13309 - C13310 + C13311 + C13312) * C50790) *
               C50948 +
           ((C18932 + C18933 - C18934 - C18935 + C18936 + C18937) * C22848 +
            (C18938 + C18939 - C18940 - C18941 + C18942 + C18943) * C50790) *
               C38342) *
              C50898 +
          (((C10767 * C507 -
             ((C10625 * C134 + C50612 * C144) * C501 +
              (C10625 * C123 + C50612 * C130) * C506) +
             C10768 * C502 - C10769 * C508 - C10770 * C503) *
                C22848 +
            (C10769 * C507 - (C10768 * C501 + C10767 * C506) + C10770 * C502 -
             C10771 * C508 - C10772 * C503) *
                C50790) *
               C50954 +
           ((C11815 * C507 - (C12901 * C501 + C12902 * C506) + C11816 * C502 -
             C11817 * C508 - C11818 * C503) *
                C22848 +
            (C11817 * C507 - (C11816 * C501 + C11815 * C506) + C11818 * C502 -
             C11819 * C508 - C11820 * C503) *
                C50790) *
               C50948 +
           ((C13487 * C507 - (C13486 * C501 + C13485 * C506) + C13488 * C502 -
             C13489 * C508 - C13490 * C503) *
                C22848 +
            (C13489 * C507 - (C13488 * C501 + C13487 * C506) + C13490 * C502 -
             (C10625 * C8934 + C50612 * C8936) * C508 -
             (C10625 * C8938 + C50612 * C8940) * C503) *
                C50790) *
               C38342) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C22848 +
            (C10761 * C121 + C10762 * C50672) * C50790) *
               C50954 +
           ((C12905 + C12906) * C22848 + (C12879 + C12880) * C50790) * C50948 +
           (C19090 * C22848 + C19091 * C50790) * C38342) *
              C112 -
          ((C19092 * C50790 + C19093 * C22848) * C38342 +
           ((C12885 + C12886) * C50790 + (C12907 + C12908) * C22848) * C50948 +
           ((C10768 * C50672 + C10767 * C121) * C50790 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C22848) *
               C50954) *
              C113 +
          ((((C10625 * C124 + C50612 * C131) * C121 +
             (C10625 * C135 + C50612 * C145) * C50672) *
                C22848 +
            (C10773 * C121 + C10774 * C50672) * C50790) *
               C50954 +
           ((C12909 + C12910) * C22848 + (C12895 + C12896) * C50790) * C50948 +
           ((C18540 + C18541) * C22848 + (C18536 + C18537) * C50790) * C38342) *
              C114 -
          ((((C10625 * C977 + C50612 * C981) * C50672 +
             (C10625 * C969 + C50612 * C973) * C121) *
                C50790 +
            ((C10625 * C863 + C50612 * C869) * C50672 +
             (C10625 * C854 + C50612 * C859) * C121) *
                C22848) *
               C38342 +
           (((C10625 * C733 + C50612 * C745) * C50672 +
             (C10625 * C721 + C50612 * C729) * C121) *
                C50790 +
            ((C10625 * C391 + C50612 * C399) * C50672 +
             (C10625 * C381 + C50612 * C387) * C121) *
                C22848) *
               C50948 +
           (((C10625 * C265 + C50612 * C273) * C50672 +
             (C10625 * C255 + C50612 * C261) * C121) *
                C50790 +
            ((C10625 * C136 + C50612 * C146) * C50672 +
             (C10625 * C125 + C50612 * C132) * C121) *
                C22848) *
               C50954) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C22848 +
             (C10761 * C121 + C10762 * C50672) * C50790) *
                C50954 +
            ((C12905 + C12906) * C22848 + (C12879 + C12880) * C50790) * C50948 +
            C48018 * C38342) *
               C50898 -
           (C48019 * C38342 +
            ((C12885 + C12886) * C50790 + (C12907 + C12908) * C22848) * C50948 +
            ((C10768 * C50672 + C10767 * C121) * C50790 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C22848) *
                C50954) *
               C50643) *
              C848 +
          ((((C12908 + C12907) * C22848 + (C12886 + C12885) * C50790) * C50954 +
            ((C13493 + C13494) * C22848 + (C13495 + C13496) * C50790) * C50948 +
            ((C19112 + C19113) * C22848 + (C19114 + C19115) * C50790) *
                C38342) *
               C50643 -
           ((C19387 * C50790 + C19388 * C22848) * C38342 +
            ((C13479 + C13480) * C50790 + (C13499 + C13500) * C22848) * C50948 +
            ((C12880 + C12879) * C50790 + (C12906 + C12905) * C22848) *
                C50954) *
               C50898) *
              C849 +
          ((C48018 * C50954 +
            (C21546 * C22848 + (C13793 + C13794) * C50790) * C50948 +
            ((C19400 + C19401) * C22848 + (C19393 + C19394) * C50790) *
                C38342) *
               C50898 -
           ((((C10625 * C16509 + C50612 * C16510) * C50672 +
              (C10625 * C16507 + C50612 * C16508) * C121) *
                 C50790 +
             (C21558 + C21557) * C22848) *
                C38342 +
            ((C19115 + C19114) * C50790 + C21547 * C22848) * C50948 +
            C48019 * C50954) *
               C50643) *
              C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C600 +
            (C10625 * C133 + C50612 * C143) * C595 - C10761 * C601 -
            C10762 * C596 + C10763 * C602 + C10764 * C597 - C10765 * C603 -
            C10766 * C598) *
               C22848 +
           (C10761 * C600 + C10762 * C595 - C10763 * C601 - C10764 * C596 +
            C10765 * C602 + C10766 * C597 - C10983 * C603 - C10984 * C598) *
               C50790) *
              C50954 +
          ((C12899 * C600 + C12900 * C595 - C11181 * C601 - C11182 * C596 +
            C11183 * C602 + C11184 * C597 - C11185 * C603 - C11186 * C598) *
               C22848 +
           (C11181 * C600 + C11182 * C595 - C11183 * C601 - C11184 * C596 +
            C11185 * C602 + C11186 * C597 - C11187 * C603 - C11188 * C598) *
               C50790) *
              C50948 +
          ((C13492 * C600 + C13491 * C595 - C11401 * C601 - C11402 * C596 +
            C11403 * C602 + C11404 * C597 - C11405 * C603 - C11406 * C598) *
               C22848 +
           (C11401 * C600 + C11402 * C595 - C11403 * C601 - C11404 * C596 +
            C11405 * C602 + C11406 * C597 -
            (C10625 * C11384 + C50612 * C11385) * C603 -
            (C10625 * C11386 + C50612 * C11387) * C598) *
               C50790) *
              C38342) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C253 +
             (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
             C10762 * C50688) *
                C22848 +
            (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
             C10764 * C50688) *
                C50790) *
               C50954 +
           ((C13647 + C13648 - C13649 - C13650) * C22848 +
            (C13651 + C13652 - C13653 - C13654) * C50790) *
               C50948 +
           (C19280 * C22848 + C19281 * C50790) * C38342) *
              C250 +
          (((C10767 * C254 -
             ((C10625 * C134 + C50612 * C144) * C50905 +
              (C10625 * C123 + C50612 * C130) * C253) +
             C10768 * C50688) *
                C22848 +
            (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
             C10770 * C50688) *
                C50790) *
               C50954 +
           ((C14651 - (C14652 + C14653) + C14654) * C22848 +
            (C14655 - (C14656 + C14657) + C14658) * C50790) *
               C50948 +
           ((C20236 - (C20237 + C20238) + C20239) * C22848 +
            (C20240 - (C20241 + C20242) + C20243) * C50790) *
               C38342) *
              C251 +
          ((((C10625 * C124 + C50612 * C131) * C253 +
             (C10625 * C135 + C50612 * C145) * C50905 - C10773 * C254 -
             C10774 * C50688) *
                C22848 +
            (C10773 * C253 + C10774 * C50905 - C10775 * C254 -
             C10776 * C50688) *
                C50790) *
               C50954 +
           ((C12903 * C253 + C12904 * C50905 - C12725 * C254 -
             C12726 * C50688) *
                C22848 +
            (C12725 * C253 + C12726 * C50905 - C12727 * C254 -
             C12728 * C50688) *
                C50790) *
               C50948 +
           ((C18538 * C253 + C18539 * C50905 - C18384 * C254 -
             C18385 * C50688) *
                C22848 +
            (C18384 * C253 + C18385 * C50905 -
             (C10625 * C3321 + C50612 * C3324) * C254 -
             (C10625 * C3327 + C50612 * C3330) * C50688) *
                C50790) *
               C38342) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C253 +
             (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
             C10762 * C50688) *
                C22848 +
            (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
             C10764 * C50688) *
                C50790) *
               C50954 +
           ((C13647 + C13648 - C13649 - C13650) * C22848 +
            (C13651 + C13652 - C13653 - C13654) * C50790) *
               C50948 +
           C48168 * C38342) *
              C50638 * C848 +
          (((C13649 - (C13648 + C13647) + C13650) * C22848 +
            (C13653 - (C13652 + C13651) + C13654) * C50790) *
               C50954 +
           ((C13659 - (C13660 + C13661) + C13662) * C22848 +
            (C13663 - (C13664 + C13665) + C13666) * C50790) *
               C50948 +
           ((C19264 - (C19265 + C19266) + C19267) * C22848 +
            (C19268 - (C19269 + C19270) + C19271) * C50790) *
               C38342) *
              C50638 * C849 +
          (C48168 * C50954 +
           (C21664 * C22848 + (C19270 + C19269 - C19268 - C19271) * C50790) *
               C50948 +
           ((C21661 + C21660 - C21659 - C21662) * C22848 +
            (C19278 * C253 + C19279 * C50905 -
             (C10625 * C13780 + C50612 * C13783) * C254 -
             (C10625 * C13782 + C50612 * C13786) * C50688) *
                C50790) *
               C38342) *
              C50638 * C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C22848 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C50790) *
               C50954 +
           ((C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C22848 +
            (C13307 + C13308 - C13309 - C13310 + C13311 + C13312) * C50790) *
               C50948 +
           ((C18932 + C18933 - C18934 - C18935 + C18936 + C18937) * C22848 +
            (C18938 + C18939 - C18940 - C18941 + C18942 + C18943) * C50790) *
               C38342) *
              C50638 * C50907 +
          (((C13303 - (C13302 + C13301) + C13304 - C13305 - C13306) * C22848 +
            (C13309 - (C13308 + C13307) + C13310 - C13311 - C13312) * C50790) *
               C50954 +
           ((C18934 - (C18933 + C18932) + C18935 - C18936 - C18937) * C22848 +
            (C18940 - (C18939 + C18938) + C18941 - C18942 - C18943) * C50790) *
               C50948 +
           ((C21443 - (C21442 + C21441) + C21444 - C21445 - C21446) * C22848 +
            (C13681 * C507 - (C13680 * C501 + C13679 * C506) + C13682 * C502 -
             (C10625 * C11472 + C50612 * C11474) * C508 -
             (C10625 * C11473 + C50612 * C11475) * C503) *
                C50790) *
               C38342) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C22848 +
             (C10761 * C121 + C10762 * C50672) * C50790) *
                C50954 +
            ((C12905 + C12906) * C22848 + (C12879 + C12880) * C50790) * C50948 +
            (C19090 * C22848 + C19091 * C50790) * C38342) *
               C250 -
           ((C19092 * C50790 + C19093 * C22848) * C38342 +
            ((C12885 + C12886) * C50790 + (C12907 + C12908) * C22848) * C50948 +
            ((C10768 * C50672 + C10767 * C121) * C50790 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C22848) *
                C50954) *
               C251 +
           ((((C10625 * C124 + C50612 * C131) * C121 +
              (C10625 * C135 + C50612 * C145) * C50672) *
                 C22848 +
             (C10773 * C121 + C10774 * C50672) * C50790) *
                C50954 +
            ((C12909 + C12910) * C22848 + (C12895 + C12896) * C50790) * C50948 +
            ((C18540 + C18541) * C22848 + (C18536 + C18537) * C50790) *
                C38342) *
               C252) *
              C50907 +
          ((((C12908 + C12907) * C22848 + (C12886 + C12885) * C50790) * C50954 +
            ((C13493 + C13494) * C22848 + (C13495 + C13496) * C50790) * C50948 +
            ((C19112 + C19113) * C22848 + (C19114 + C19115) * C50790) *
                C38342) *
               C251 -
           ((C19387 * C50790 + C19388 * C22848) * C38342 +
            ((C13479 + C13480) * C50790 + (C13499 + C13500) * C22848) * C50948 +
            ((C12880 + C12879) * C50790 + (C12906 + C12905) * C22848) *
                C50954) *
               C250 -
           ((((C10625 * C3452 + C50612 * C3458) * C50672 +
              (C10625 * C3449 + C50612 * C3455) * C121) *
                 C50790 +
             (C21178 + C21177) * C22848) *
                C38342 +
            ((C18537 + C18536) * C50790 + (C18541 + C18540) * C22848) * C50948 +
            ((C12896 + C12895) * C50790 + (C12910 + C12909) * C22848) *
                C50954) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C22848 +
            (C10761 * C121 + C10762 * C50672) * C50790) *
               C50954 +
           ((C12905 + C12906) * C22848 + (C12879 + C12880) * C50790) * C50948 +
           C48018 * C38342) *
              C50638 * C1051 -
          (C48269 * C38342 +
           ((C13479 + C13480) * C50790 + (C13499 + C13500) * C22848) * C50948 +
           ((C12880 + C12879) * C50790 + (C12906 + C12905) * C22848) * C50954) *
              C50638 * C1052 +
          (C48018 * C50954 +
           (C21546 * C22848 + (C13793 + C13794) * C50790) * C50948 +
           ((C19400 + C19401) * C22848 + (C19393 + C19394) * C50790) * C38342) *
              C50638 * C1053 -
          ((((C10625 * C19383 + C50612 * C19385) * C50672 +
             (C10625 * C19382 + C50612 * C19384) * C121) *
                C50790 +
            (C21746 + C21745) * C22848) *
               C38342 +
           ((C19394 + C19393) * C50790 + C21736 * C22848) * C50948 +
           C48269 * C50954) *
              C50638 * C1054)) /
            (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C22848 +
             (C10761 * C121 + C10762 * C50672) * C50790) *
                C50954 +
            ((C12905 + C12906) * C22848 + (C12879 + C12880) * C50790) * C50948 +
            C48018 * C38342) *
               C50950 -
           (C48019 * C38342 +
            ((C12885 + C12886) * C50790 + (C12907 + C12908) * C22848) * C50948 +
            ((C10768 * C50672 + C10767 * C121) * C50790 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C22848) *
                C50954) *
               C50936 +
           ((((C10625 * C124 + C50612 * C131) * C121 +
              (C10625 * C135 + C50612 * C145) * C50672) *
                 C22848 +
             (C10773 * C121 + C10774 * C50672) * C50790) *
                C50954 +
            ((C12909 + C12910) * C22848 + (C12895 + C12896) * C50790) * C50948 +
            ((C18540 + C18541) * C22848 + (C18536 + C18537) * C50790) *
                C38342) *
               C1173) *
              C1514 +
          ((((C12908 + C12907) * C22848 + (C12886 + C12885) * C50790) * C50954 +
            ((C13493 + C13494) * C22848 + (C13495 + C13496) * C50790) * C50948 +
            ((C19112 + C19113) * C22848 + (C19114 + C19115) * C50790) *
                C38342) *
               C50936 -
           (C48269 * C38342 +
            ((C13479 + C13480) * C50790 + (C13499 + C13500) * C22848) * C50948 +
            ((C12880 + C12879) * C50790 + (C12906 + C12905) * C22848) *
                C50954) *
               C50950 -
           ((((C10625 * C3452 + C50612 * C3458) * C50672 +
              (C10625 * C3449 + C50612 * C3455) * C121) *
                 C50790 +
             (C21178 + C21177) * C22848) *
                C38342 +
            ((C18537 + C18536) * C50790 + (C18541 + C18540) * C22848) * C50948 +
            ((C12896 + C12895) * C50790 + (C12910 + C12909) * C22848) *
                C50954) *
               C1173) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[85] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C10625 * C122 + C50612 * C129) * C253 +
                      (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
                      C10762 * C50688) *
                         C22848 +
                     (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
                      C10764 * C50688) *
                         C50790) *
                        C50954 +
                    ((C13647 + C13648 - C13649 - C13650) * C22848 +
                     (C13651 + C13652 - C13653 - C13654) * C50790) *
                        C50948 +
                    C48168 * C38342) *
                       C1277 +
                   (((C10767 * C254 -
                      ((C10625 * C134 + C50612 * C144) * C50905 +
                       (C10625 * C123 + C50612 * C130) * C253) +
                      C10768 * C50688) *
                         C22848 +
                     (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
                      C10770 * C50688) *
                         C50790) *
                        C50954 +
                    ((C14651 - (C14652 + C14653) + C14654) * C22848 +
                     (C14655 - (C14656 + C14657) + C14658) * C50790) *
                        C50948 +
                    ((C20236 - (C20237 + C20238) + C20239) * C22848 +
                     (C20240 - (C20241 + C20242) + C20243) * C50790) *
                        C38342) *
                       C50643) *
                      C1514 +
                  ((((C13649 - (C13648 + C13647) + C13650) * C22848 +
                     (C13653 - (C13652 + C13651) + C13654) * C50790) *
                        C50954 +
                    ((C13659 - (C13660 + C13661) + C13662) * C22848 +
                     (C13663 - (C13664 + C13665) + C13666) * C50790) *
                        C50948 +
                    ((C19264 - (C19265 + C19266) + C19267) * C22848 +
                     (C19268 - (C19269 + C19270) + C19271) * C50790) *
                        C38342) *
                       C1277 +
                   (((C14653 + C14652 - C14651 - C14654) * C22848 +
                     (C14657 + C14656 - C14655 - C14658) * C50790) *
                        C50954 +
                    ((C20238 + C20237 - C20236 - C20239) * C22848 +
                     (C20242 + C20241 - C20240 - C20243) * C50790) *
                        C50948 +
                    ((C22307 + C22306 - C22305 - C22308) * C22848 +
                     (C19108 * C253 + C19109 * C50905 -
                      (C10625 * C9064 + C50612 * C9068) * C254 -
                      (C10625 * C9066 + C50612 * C9070) * C50688) *
                         C50790) *
                        C38342) *
                       C50643) *
                      C50714)) /
                (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C22848 +
             (C10761 * C121 + C10762 * C50672) * C50790) *
                C50954 +
            ((C12905 + C12906) * C22848 + (C12879 + C12880) * C50790) * C50948 +
            C48018 * C38342) *
               C1277 -
           (C48019 * C38342 +
            ((C12885 + C12886) * C50790 + (C12907 + C12908) * C22848) * C50948 +
            ((C10768 * C50672 + C10767 * C121) * C50790 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C22848) *
                C50954) *
               C50643) *
              C50952 +
          ((((C12908 + C12907) * C22848 + (C12886 + C12885) * C50790) * C50954 +
            ((C13493 + C13494) * C22848 + (C13495 + C13496) * C50790) * C50948 +
            ((C19112 + C19113) * C22848 + (C19114 + C19115) * C50790) *
                C38342) *
               C50643 -
           (C48269 * C38342 +
            ((C13479 + C13480) * C50790 + (C13499 + C13500) * C22848) * C50948 +
            ((C12880 + C12879) * C50790 + (C12906 + C12905) * C22848) *
                C50954) *
               C1277) *
              C50942 +
          ((C48018 * C50954 +
            (C21546 * C22848 + (C13793 + C13794) * C50790) * C50948 +
            ((C19400 + C19401) * C22848 + (C19393 + C19394) * C50790) *
                C38342) *
               C1277 -
           ((((C10625 * C16509 + C50612 * C16510) * C50672 +
              (C10625 * C16507 + C50612 * C16508) * C121) *
                 C50790 +
             (C21558 + C21557) * C22848) *
                C38342 +
            ((C19115 + C19114) * C50790 + C21547 * C22848) * C50948 +
            C48019 * C50954) *
               C50643) *
              C1746)) /
        (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C22848 +
            (C10761 * C121 + C10762 * C50672) * C50790) *
               C50954 +
           ((C12905 + C12906) * C22848 + (C12879 + C12880) * C50790) * C50948 +
           (C19090 * C22848 + C19091 * C50790) * C38342) *
              C112 -
          ((C19092 * C50790 + C19093 * C22848) * C38342 +
           ((C12885 + C12886) * C50790 + (C12907 + C12908) * C22848) * C50948 +
           ((C10768 * C50672 + C10767 * C121) * C50790 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C22848) *
               C50954) *
              C113 +
          ((((C10625 * C124 + C50612 * C131) * C121 +
             (C10625 * C135 + C50612 * C145) * C50672) *
                C22848 +
            (C10773 * C121 + C10774 * C50672) * C50790) *
               C50954 +
           ((C12909 + C12910) * C22848 + (C12895 + C12896) * C50790) * C50948 +
           ((C18540 + C18541) * C22848 + (C18536 + C18537) * C50790) * C38342) *
              C114 -
          ((((C10625 * C977 + C50612 * C981) * C50672 +
             (C10625 * C969 + C50612 * C973) * C121) *
                C50790 +
            ((C10625 * C863 + C50612 * C869) * C50672 +
             (C10625 * C854 + C50612 * C859) * C121) *
                C22848) *
               C38342 +
           (((C10625 * C733 + C50612 * C745) * C50672 +
             (C10625 * C721 + C50612 * C729) * C121) *
                C50790 +
            ((C10625 * C391 + C50612 * C399) * C50672 +
             (C10625 * C381 + C50612 * C387) * C121) *
                C22848) *
               C50948 +
           (((C10625 * C265 + C50612 * C273) * C50672 +
             (C10625 * C255 + C50612 * C261) * C121) *
                C50790 +
            ((C10625 * C136 + C50612 * C146) * C50672 +
             (C10625 * C125 + C50612 * C132) * C121) *
                C22848) *
               C50954) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C22848 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C50790) *
               C50954 +
           ((C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C22848 +
            (C13307 + C13308 - C13309 - C13310 + C13311 + C13312) * C50790) *
               C50948 +
           ((C18932 + C18933 - C18934 - C18935 + C18936 + C18937) * C22848 +
            (C18938 + C18939 - C18940 - C18941 + C18942 + C18943) * C50790) *
               C38342) *
              C50898 +
          (((C10767 * C507 -
             ((C10625 * C134 + C50612 * C144) * C501 +
              (C10625 * C123 + C50612 * C130) * C506) +
             C10768 * C502 - C10769 * C508 - C10770 * C503) *
                C22848 +
            (C10769 * C507 - (C10768 * C501 + C10767 * C506) + C10770 * C502 -
             C10771 * C508 - C10772 * C503) *
                C50790) *
               C50954 +
           ((C11815 * C507 - (C12901 * C501 + C12902 * C506) + C11816 * C502 -
             C11817 * C508 - C11818 * C503) *
                C22848 +
            (C11817 * C507 - (C11816 * C501 + C11815 * C506) + C11818 * C502 -
             C11819 * C508 - C11820 * C503) *
                C50790) *
               C50948 +
           ((C13487 * C507 - (C13486 * C501 + C13485 * C506) + C13488 * C502 -
             C13489 * C508 - C13490 * C503) *
                C22848 +
            (C13489 * C507 - (C13488 * C501 + C13487 * C506) + C13490 * C502 -
             (C10625 * C8934 + C50612 * C8936) * C508 -
             (C10625 * C8938 + C50612 * C8940) * C503) *
                C50790) *
               C38342) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C253 +
             (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
             C10762 * C50688) *
                C22848 +
            (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
             C10764 * C50688) *
                C50790) *
               C50954 +
           ((C13647 + C13648 - C13649 - C13650) * C22848 +
            (C13651 + C13652 - C13653 - C13654) * C50790) *
               C50948 +
           (C19280 * C22848 + C19281 * C50790) * C38342) *
              C250 +
          (((C10767 * C254 -
             ((C10625 * C134 + C50612 * C144) * C50905 +
              (C10625 * C123 + C50612 * C130) * C253) +
             C10768 * C50688) *
                C22848 +
            (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
             C10770 * C50688) *
                C50790) *
               C50954 +
           ((C14651 - (C14652 + C14653) + C14654) * C22848 +
            (C14655 - (C14656 + C14657) + C14658) * C50790) *
               C50948 +
           ((C20236 - (C20237 + C20238) + C20239) * C22848 +
            (C20240 - (C20241 + C20242) + C20243) * C50790) *
               C38342) *
              C251 +
          ((((C10625 * C124 + C50612 * C131) * C253 +
             (C10625 * C135 + C50612 * C145) * C50905 - C10773 * C254 -
             C10774 * C50688) *
                C22848 +
            (C10773 * C253 + C10774 * C50905 - C10775 * C254 -
             C10776 * C50688) *
                C50790) *
               C50954 +
           ((C12903 * C253 + C12904 * C50905 - C12725 * C254 -
             C12726 * C50688) *
                C22848 +
            (C12725 * C253 + C12726 * C50905 - C12727 * C254 -
             C12728 * C50688) *
                C50790) *
               C50948 +
           ((C18538 * C253 + C18539 * C50905 - C18384 * C254 -
             C18385 * C50688) *
                C22848 +
            (C18384 * C253 + C18385 * C50905 -
             (C10625 * C3321 + C50612 * C3324) * C254 -
             (C10625 * C3327 + C50612 * C3330) * C50688) *
                C50790) *
               C38342) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C600 +
            (C10625 * C133 + C50612 * C143) * C595 - C10761 * C601 -
            C10762 * C596 + C10763 * C602 + C10764 * C597 - C10765 * C603 -
            C10766 * C598) *
               C22848 +
           (C10761 * C600 + C10762 * C595 - C10763 * C601 - C10764 * C596 +
            C10765 * C602 + C10766 * C597 - C10983 * C603 - C10984 * C598) *
               C50790) *
              C50954 +
          ((C12899 * C600 + C12900 * C595 - C11181 * C601 - C11182 * C596 +
            C11183 * C602 + C11184 * C597 - C11185 * C603 - C11186 * C598) *
               C22848 +
           (C11181 * C600 + C11182 * C595 - C11183 * C601 - C11184 * C596 +
            C11185 * C602 + C11186 * C597 - C11187 * C603 - C11188 * C598) *
               C50790) *
              C50948 +
          ((C13492 * C600 + C13491 * C595 - C11401 * C601 - C11402 * C596 +
            C11403 * C602 + C11404 * C597 - C11405 * C603 - C11406 * C598) *
               C22848 +
           (C11401 * C600 + C11402 * C595 - C11403 * C601 - C11404 * C596 +
            C11405 * C602 + C11406 * C597 -
            (C10625 * C11384 + C50612 * C11385) * C603 -
            (C10625 * C11386 + C50612 * C11387) * C598) *
               C50790) *
              C38342) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C22848 +
             (C10761 * C121 + C10762 * C50672) * C50790) *
                C50954 +
            ((C12905 + C12906) * C22848 + (C12879 + C12880) * C50790) * C50948 +
            (C19090 * C22848 + C19091 * C50790) * C38342) *
               C250 -
           ((C19092 * C50790 + C19093 * C22848) * C38342 +
            ((C12885 + C12886) * C50790 + (C12907 + C12908) * C22848) * C50948 +
            ((C10768 * C50672 + C10767 * C121) * C50790 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C22848) *
                C50954) *
               C251 +
           ((((C10625 * C124 + C50612 * C131) * C121 +
              (C10625 * C135 + C50612 * C145) * C50672) *
                 C22848 +
             (C10773 * C121 + C10774 * C50672) * C50790) *
                C50954 +
            ((C12909 + C12910) * C22848 + (C12895 + C12896) * C50790) * C50948 +
            ((C18540 + C18541) * C22848 + (C18536 + C18537) * C50790) *
                C38342) *
               C252) *
              C50907 +
          ((((C12908 + C12907) * C22848 + (C12886 + C12885) * C50790) * C50954 +
            ((C13493 + C13494) * C22848 + (C13495 + C13496) * C50790) * C50948 +
            ((C19112 + C19113) * C22848 + (C19114 + C19115) * C50790) *
                C38342) *
               C251 -
           ((C19387 * C50790 + C19388 * C22848) * C38342 +
            ((C13479 + C13480) * C50790 + (C13499 + C13500) * C22848) * C50948 +
            ((C12880 + C12879) * C50790 + (C12906 + C12905) * C22848) *
                C50954) *
               C250 -
           ((((C10625 * C3452 + C50612 * C3458) * C50672 +
              (C10625 * C3449 + C50612 * C3455) * C121) *
                 C50790 +
             (C21178 + C21177) * C22848) *
                C38342 +
            ((C18537 + C18536) * C50790 + (C18541 + C18540) * C22848) * C50948 +
            ((C12896 + C12895) * C50790 + (C12910 + C12909) * C22848) *
                C50954) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C22848 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C50790) *
               C50954 +
           ((C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C22848 +
            (C13307 + C13308 - C13309 - C13310 + C13311 + C13312) * C50790) *
               C50948 +
           ((C18932 + C18933 - C18934 - C18935 + C18936 + C18937) * C22848 +
            (C18938 + C18939 - C18940 - C18941 + C18942 + C18943) * C50790) *
               C38342) *
              C50638 * C50907 +
          (((C13303 - (C13302 + C13301) + C13304 - C13305 - C13306) * C22848 +
            (C13309 - (C13308 + C13307) + C13310 - C13311 - C13312) * C50790) *
               C50954 +
           ((C18934 - (C18933 + C18932) + C18935 - C18936 - C18937) * C22848 +
            (C18940 - (C18939 + C18938) + C18941 - C18942 - C18943) * C50790) *
               C50948 +
           ((C21443 - (C21442 + C21441) + C21444 - C21445 - C21446) * C22848 +
            (C13681 * C507 - (C13680 * C501 + C13679 * C506) + C13682 * C502 -
             (C10625 * C11472 + C50612 * C11474) * C508 -
             (C10625 * C11473 + C50612 * C11475) * C503) *
                C50790) *
               C38342) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C1174 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C1169 -
            (C7987 + C7988) * C1175 - (C7989 + C7990) * C50688) *
               C7787 +
           ((C7988 + C7987) * C1174 + (C7990 + C7989) * C1169 -
            (C7991 + C7992) * C1175 - (C7993 + C7994) * C50688) *
               C7788 +
           (C8303 * C1174 + C8304 * C1169 - C8437 * C1175 - C8438 * C50688) *
               C7789) *
              C50802 * C50950 +
          (((C7995 + C7996) * C1175 -
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C1169 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C1174) +
            (C7997 + C7998) * C50688) *
               C7787 +
           ((C7999 + C8000) * C1175 -
            ((C7998 + C7997) * C1169 + (C7996 + C7995) * C1174) +
            (C8001 + C8002) * C50688) *
               C7788 +
           ((C8328 + C8327) * C1175 - (C8314 * C1169 + C8313 * C1174) +
            (C8330 + C8329) * C50688) *
               C7789) *
              C50802 * C50936 +
          (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                C1174 +
            (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                C1169 -
            (C8003 + C8004) * C1175 - (C8005 + C8006) * C50688) *
               C7787 +
           ((C8004 + C8003) * C1174 + (C8006 + C8005) * C1169 -
            (C8007 + C8008) * C1175 - (C8009 + C8010) * C50688) *
               C7788 +
           ((C8008 + C8007) * C1174 + (C8010 + C8009) * C1169 -
            (C49761 * C604 + C50617 * C608 + C49768 * C605 + C50891 * C609) *
                C1175 -
            (C49761 * C612 + C50617 * C616 + C49768 * C613 + C50891 * C617) *
                C50688) *
               C7789) *
              C50802 * C1173) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1174 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C1169 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C1175 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C50688) *
              C50776 * C50802 * C50950 +
          ((C117 * C257 + C105 * C263 + C118 * C256 + C106 * C262 +
            C119 * C255 + C107 * C261 + C120 * C259 + C108 * C269) *
               C1175 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C1169 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C1174) +
           (C117 * C267 + C105 * C275 + C118 * C266 + C106 * C274 +
            C119 * C265 + C107 * C273 + C120 * C270 + C108 * C277) *
               C50688) *
              C50776 * C50802 * C50936 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C1174 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C1169 -
           (C120 * C260 + C108 * C271 + C119 * C259 + C107 * C269 +
            C118 * C255 + C106 * C261 + C117 * C256 + C105 * C262) *
               C1175 -
           (C120 * C272 + C108 * C278 + C119 * C270 + C107 * C277 +
            C118 * C265 + C106 * C273 + C117 * C266 + C105 * C274) *
               C50688) *
              C50776 * C50802 * C1173) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C1174 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C1169 -
            (C7987 + C7988) * C1175 - (C7989 + C7990) * C50688) *
               C50776 * C15422 +
           ((C15766 + C15767) * C1174 + (C15768 + C15769) * C1169 -
            (C8630 + C8629) * C1175 - (C8632 + C8631) * C50688) *
               C50776 * C15423 +
           (C16326 * C1174 + C16327 * C1169 - C16514 * C1175 -
            C16515 * C50688) *
               C50776 * C15424) *
              C50950 +
          (((C7995 + C7996) * C1175 -
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C1169 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C1174) +
            (C7997 + C7998) * C50688) *
               C50776 * C15422 +
           ((C9576 + C9575) * C1175 -
            ((C15778 + C15779) * C1169 + (C15780 + C15781) * C1174) +
            (C9578 + C9577) * C50688) *
               C50776 * C15423 +
           ((C49768 * C971 + C50891 * C975 + C49761 * C970 + C50617 * C974) *
                C1175 -
            (C16328 * C1169 + C16329 * C1174) +
            (C49768 * C979 + C50891 * C983 + C49761 * C978 + C50617 * C982) *
                C50688) *
               C50776 * C15424) *
              C50936 +
          (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                C1174 +
            (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                C1169 -
            (C8003 + C8004) * C1175 - (C8005 + C8006) * C50688) *
               C50776 * C15422 +
           ((C15782 + C15783) * C1174 + (C15784 + C15785) * C1169 -
            (C49761 * C721 + C50617 * C729 + C49768 * C720 + C50891 * C728) *
                C1175 -
            (C49761 * C733 + C50617 * C745 + C49768 * C732 + C50891 * C744) *
                C50688) *
               C50776 * C15423 +
           ((C15786 + C15787) * C1174 + (C15788 + C15789) * C1169 -
            (C49761 * C969 + C50617 * C973 + C49768 * C970 + C50891 * C974) *
                C1175 -
            (C49761 * C977 + C50617 * C981 + C49768 * C978 + C50891 * C982) *
                C50688) *
               C50776 * C15424) *
              C1173) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C1279 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50951 -
            (C7987 + C7988) * C1280 - (C7989 + C7990) * C50939 + C8303 * C1281 +
            C8304 * C1276) *
               C7787 +
           ((C7988 + C7987) * C1279 + (C7990 + C7989) * C50951 -
            (C7991 + C7992) * C1280 - (C7993 + C7994) * C50939 +
            (C8323 + C8324) * C1281 + (C8325 + C8326) * C1276) *
               C7788 +
           (C8303 * C1279 + C8304 * C50951 - C8437 * C1280 - C8438 * C50939 +
            (C8448 + C8447) * C1281 + (C8450 + C8449) * C1276) *
               C7789) *
              C50802 * C1277 +
          (((C7995 + C7996) * C1280 -
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50951 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C1279) +
            (C7997 + C7998) * C50939 - C8313 * C1281 - C8314 * C1276) *
               C7787 +
           ((C7999 + C8000) * C1280 -
            ((C7998 + C7997) * C50951 + (C7996 + C7995) * C1279) +
            (C8001 + C8002) * C50939 - (C8327 + C8328) * C1281 -
            (C8329 + C8330) * C1276) *
               C7788 +
           ((C8328 + C8327) * C1280 - (C8314 * C50951 + C8313 * C1279) +
            (C8330 + C8329) * C50939 -
            (C49761 * C2805 + C50617 * C2808 + C49768 * C2806 +
             C50891 * C2809) *
                C1281 -
            (C49761 * C2811 + C50617 * C2814 + C49768 * C2812 +
             C50891 * C2815) *
                C1276) *
               C7789) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1279 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50951 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C1280 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C50939 +
           (C117 * C509 + C105 * C514 + C118 * C510 + C106 * C515 +
            C119 * C511 + C107 * C516 + C120 * C512 + C108 * C517) *
               C1281 +
           (C117 * C518 + C105 * C524 + C118 * C519 + C106 * C525 +
            C119 * C520 + C107 * C526 + C120 * C521 + C108 * C527) *
               C1276) *
              C50776 * C50802 * C1277 +
          ((C117 * C257 + C105 * C263 + C118 * C256 + C106 * C262 +
            C119 * C255 + C107 * C261 + C120 * C259 + C108 * C269) *
               C1280 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50951 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C1279) +
           (C117 * C267 + C105 * C275 + C118 * C266 + C106 * C274 +
            C119 * C265 + C107 * C273 + C120 * C270 + C108 * C277) *
               C50939 -
           (C120 * C513 + C108 * C522 + C119 * C512 + C107 * C517 +
            C118 * C511 + C106 * C516 + C117 * C510 + C105 * C515) *
               C1281 -
           (C120 * C523 + C108 * C528 + C119 * C521 + C107 * C527 +
            C118 * C520 + C106 * C526 + C117 * C519 + C105 * C525) *
               C1276) *
              C50776 * C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C1279 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50951 -
            (C7987 + C7988) * C1280 - (C7989 + C7990) * C50939 + C8303 * C1281 +
            C8304 * C1276) *
               C50776 * C15422 +
           ((C15766 + C15767) * C1279 + (C15768 + C15769) * C50951 -
            (C8630 + C8629) * C1280 - (C8632 + C8631) * C50939 +
            (C8634 + C8633) * C1281 + (C8636 + C8635) * C1276) *
               C50776 * C15423 +
           (C16326 * C1279 + C16327 * C50951 - C16514 * C1280 -
            C16515 * C50939 + (C8964 + C8963) * C1281 +
            (C8966 + C8965) * C1276) *
               C50776 * C15424) *
              C1277 +
          (((C7995 + C7996) * C1280 -
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50951 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C1279) +
            (C7997 + C7998) * C50939 - C8313 * C1281 - C8314 * C1276) *
               C50776 * C15422 +
           ((C9576 + C9575) * C1280 -
            ((C15778 + C15779) * C50951 + (C15780 + C15781) * C1279) +
            (C9578 + C9577) * C50939 - (C9579 + C9580) * C1281 -
            (C9581 + C9582) * C1276) *
               C50776 * C15423 +
           ((C49768 * C971 + C50891 * C975 + C49761 * C970 + C50617 * C974) *
                C1280 -
            (C16328 * C50951 + C16329 * C1279) +
            (C49768 * C979 + C50891 * C983 + C49761 * C978 + C50617 * C982) *
                C50939 -
            (C49761 * C3321 + C50617 * C3324 + C49768 * C3322 +
             C50891 * C3325) *
                C1281 -
            (C49761 * C3327 + C50617 * C3330 + C49768 * C3328 +
             C50891 * C3331) *
                C1276) *
               C50776 * C15424) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C1174 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C1169 -
             (C7987 + C7988) * C1175 - (C7989 + C7990) * C50688) *
                C7787 +
            ((C7988 + C7987) * C1174 + (C7990 + C7989) * C1169 -
             (C7991 + C7992) * C1175 - (C7993 + C7994) * C50688) *
                C7788 +
            (C8303 * C1174 + C8304 * C1169 - C8437 * C1175 - C8438 * C50688) *
                C7789) *
               C50802 * C1277 +
           (((C7995 + C7996) * C1175 -
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C1169 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C1174) +
             (C7997 + C7998) * C50688) *
                C7787 +
            ((C7999 + C8000) * C1175 -
             ((C7998 + C7997) * C1169 + (C7996 + C7995) * C1174) +
             (C8001 + C8002) * C50688) *
                C7788 +
            ((C8328 + C8327) * C1175 - (C8314 * C1169 + C8313 * C1174) +
             (C8330 + C8329) * C50688) *
                C7789) *
               C50802 * C50643) *
              C50907 +
          ((((C8629 + C8630) * C1175 -
             ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                  C1169 +
              (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                  C1174) +
             (C8631 + C8632) * C50688) *
                C7787 +
            ((C8634 + C8633) * C1175 -
             ((C8632 + C8631) * C1169 + (C8630 + C8629) * C1174) +
             (C8636 + C8635) * C50688) *
                C7788 +
            ((C8638 + C8637) * C1175 - (C8642 * C1169 + C8641 * C1174) +
             (C8640 + C8639) * C50688) *
                C7789) *
               C50802 * C1277 +
           (((C49768 * C379 + C50891 * C385 + C49761 * C380 + C50617 * C386) *
                 C1174 +
             (C49768 * C389 + C50891 * C397 + C49761 * C390 + C50617 * C398) *
                 C1169 -
             (C9575 + C9576) * C1175 - (C9577 + C9578) * C50688) *
                C7787 +
            ((C9576 + C9575) * C1174 + (C9578 + C9577) * C1169 -
             (C9579 + C9580) * C1175 - (C9581 + C9582) * C50688) *
                C7788 +
            ((C9580 + C9579) * C1174 + (C9582 + C9581) * C1169 -
             (C49761 * C2981 + C50617 * C2984 + C49768 * C2982 +
              C50891 * C2985) *
                 C1175 -
             (C49761 * C2987 + C50617 * C2990 + C49768 * C2988 +
              C50891 * C2991) *
                 C50688) *
                C7789) *
               C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C1174 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C1169 -
            (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
             C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
                C1175 -
            (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
             C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
                C50688) *
               C50776 * C50802 * C1277 +
           ((C117 * C257 + C105 * C263 + C118 * C256 + C106 * C262 +
             C119 * C255 + C107 * C261 + C120 * C259 + C108 * C269) *
                C1175 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C1169 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C1174) +
            (C117 * C267 + C105 * C275 + C118 * C266 + C106 * C274 +
             C119 * C265 + C107 * C273 + C120 * C270 + C108 * C277) *
                C50688) *
               C50776 * C50802 * C50643) *
              C50907 +
          (((C117 * C718 + C105 * C726 + C118 * C719 + C106 * C727 +
             C119 * C720 + C107 * C728 + C120 * C721 + C108 * C729) *
                C1175 -
            ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
              C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                 C1169 +
             (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
              C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                 C1174) +
            (C117 * C730 + C105 * C742 + C118 * C731 + C106 * C743 +
             C119 * C732 + C107 * C744 + C120 * C733 + C108 * C745) *
                C50688) *
               C50776 * C50802 * C1277 +
           ((C117 * C379 + C105 * C385 + C118 * C380 + C106 * C386 +
             C119 * C381 + C107 * C387 + C120 * C382 + C108 * C388) *
                C1174 +
            (C117 * C389 + C105 * C397 + C118 * C390 + C106 * C398 +
             C119 * C391 + C107 * C399 + C120 * C392 + C108 * C400) *
                C1169 -
            (C120 * C1412 + C108 * C1413 + C119 * C721 + C107 * C729 +
             C118 * C720 + C106 * C728 + C117 * C719 + C105 * C727) *
                C1175 -
            (C120 * C1414 + C108 * C1415 + C119 * C733 + C107 * C745 +
             C118 * C732 + C106 * C744 + C117 * C731 + C105 * C743) *
                C50688) *
               C50776 * C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C1174 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C1169 -
             (C7987 + C7988) * C1175 - (C7989 + C7990) * C50688) *
                C50776 * C15422 +
            ((C15766 + C15767) * C1174 + (C15768 + C15769) * C1169 -
             (C8630 + C8629) * C1175 - (C8632 + C8631) * C50688) *
                C50776 * C15423 +
            (C16326 * C1174 + C16327 * C1169 - C16514 * C1175 -
             C16515 * C50688) *
                C50776 * C15424) *
               C1277 +
           (((C7995 + C7996) * C1175 -
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C1169 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C1174) +
             (C7997 + C7998) * C50688) *
                C50776 * C15422 +
            ((C9576 + C9575) * C1175 -
             ((C15778 + C15779) * C1169 + (C15780 + C15781) * C1174) +
             (C9578 + C9577) * C50688) *
                C50776 * C15423 +
            ((C17152 + C17153) * C1175 - (C16328 * C1169 + C16329 * C1174) +
             (C17154 + C17155) * C50688) *
                C50776 * C15424) *
               C50643) *
              C50907 +
          ((((C8629 + C8630) * C1175 -
             ((C15769 + C15768) * C1169 + (C15767 + C15766) * C1174) +
             (C8631 + C8632) * C50688) *
                C50776 * C15422 +
            ((C8960 + C8959) * C1175 -
             ((C15773 + C15772) * C1169 + (C15771 + C15770) * C1174) +
             (C8962 + C8961) * C50688) *
                C50776 * C15423 +
            ((C16527 + C16528) * C1175 - (C16640 * C1169 + C16641 * C1174) +
             (C16529 + C16530) * C50688) *
                C50776 * C15424) *
               C1277 +
           (((C15781 + C15780) * C1174 + (C15779 + C15778) * C1169 -
             (C9575 + C9576) * C1175 - (C9577 + C9578) * C50688) *
                C50776 * C15422 +
            ((C15777 + C15776) * C1174 + (C15775 + C15774) * C1169 -
             (C17153 + C17152) * C1175 - (C17155 + C17154) * C50688) *
                C50776 * C15423 +
            ((C16350 + C16351) * C1174 + (C16352 + C16353) * C1169 -
             (C49761 * C3449 + C50617 * C3455 + C49768 * C3450 +
              C50891 * C3456) *
                 C1175 -
             (C49761 * C3452 + C50617 * C3458 + C49768 * C3453 +
              C50891 * C3459) *
                 C50688) *
                C50776 * C15424) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C1174 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C1169 -
             (C7987 + C7988) * C1175 - (C7989 + C7990) * C50688) *
                C7787 +
            ((C7988 + C7987) * C1174 + (C7990 + C7989) * C1169 -
             (C7991 + C7992) * C1175 - (C7993 + C7994) * C50688) *
                C7788 +
            (C8303 * C1174 + C8304 * C1169 - C8437 * C1175 - C8438 * C50688) *
                C7789) *
               C50802 * C50898 +
           (((C7995 + C7996) * C1175 -
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C1169 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C1174) +
             (C7997 + C7998) * C50688) *
                C7787 +
            ((C7999 + C8000) * C1175 -
             ((C7998 + C7997) * C1169 + (C7996 + C7995) * C1174) +
             (C8001 + C8002) * C50688) *
                C7788 +
            ((C8328 + C8327) * C1175 - (C8314 * C1169 + C8313 * C1174) +
             (C8330 + C8329) * C50688) *
                C7789) *
               C50802 * C50643) *
              C1514 +
          ((((C8629 + C8630) * C1175 -
             ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                  C1169 +
              (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                  C1174) +
             (C8631 + C8632) * C50688) *
                C7787 +
            ((C8634 + C8633) * C1175 -
             ((C8632 + C8631) * C1169 + (C8630 + C8629) * C1174) +
             (C8636 + C8635) * C50688) *
                C7788 +
            ((C8638 + C8637) * C1175 - (C8642 * C1169 + C8641 * C1174) +
             (C8640 + C8639) * C50688) *
                C7789) *
               C50802 * C50898 +
           (((C49768 * C379 + C50891 * C385 + C49761 * C380 + C50617 * C386) *
                 C1174 +
             (C49768 * C389 + C50891 * C397 + C49761 * C390 + C50617 * C398) *
                 C1169 -
             (C9575 + C9576) * C1175 - (C9577 + C9578) * C50688) *
                C7787 +
            ((C9576 + C9575) * C1174 + (C9578 + C9577) * C1169 -
             (C9579 + C9580) * C1175 - (C9581 + C9582) * C50688) *
                C7788 +
            ((C9580 + C9579) * C1174 + (C9582 + C9581) * C1169 -
             (C49761 * C2981 + C50617 * C2984 + C49768 * C2982 +
              C50891 * C2985) *
                 C1175 -
             (C49761 * C2987 + C50617 * C2990 + C49768 * C2988 +
              C50891 * C2991) *
                 C50688) *
                C7789) *
               C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C1174 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C1169 -
            (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
             C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
                C1175 -
            (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
             C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
                C50688) *
               C50776 * C50802 * C50898 +
           ((C117 * C257 + C105 * C263 + C118 * C256 + C106 * C262 +
             C119 * C255 + C107 * C261 + C120 * C259 + C108 * C269) *
                C1175 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C1169 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C1174) +
            (C117 * C267 + C105 * C275 + C118 * C266 + C106 * C274 +
             C119 * C265 + C107 * C273 + C120 * C270 + C108 * C277) *
                C50688) *
               C50776 * C50802 * C50643) *
              C1514 +
          (((C117 * C718 + C105 * C726 + C118 * C719 + C106 * C727 +
             C119 * C720 + C107 * C728 + C120 * C721 + C108 * C729) *
                C1175 -
            ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
              C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                 C1169 +
             (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
              C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                 C1174) +
            (C117 * C730 + C105 * C742 + C118 * C731 + C106 * C743 +
             C119 * C732 + C107 * C744 + C120 * C733 + C108 * C745) *
                C50688) *
               C50776 * C50802 * C50898 +
           ((C117 * C379 + C105 * C385 + C118 * C380 + C106 * C386 +
             C119 * C381 + C107 * C387 + C120 * C382 + C108 * C388) *
                C1174 +
            (C117 * C389 + C105 * C397 + C118 * C390 + C106 * C398 +
             C119 * C391 + C107 * C399 + C120 * C392 + C108 * C400) *
                C1169 -
            (C120 * C1412 + C108 * C1413 + C119 * C721 + C107 * C729 +
             C118 * C720 + C106 * C728 + C117 * C719 + C105 * C727) *
                C1175 -
            (C120 * C1414 + C108 * C1415 + C119 * C733 + C107 * C745 +
             C118 * C732 + C106 * C744 + C117 * C731 + C105 * C743) *
                C50688) *
               C50776 * C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C1174 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C1169 -
             (C7987 + C7988) * C1175 - (C7989 + C7990) * C50688) *
                C50776 * C15422 +
            ((C15766 + C15767) * C1174 + (C15768 + C15769) * C1169 -
             (C8630 + C8629) * C1175 - (C8632 + C8631) * C50688) *
                C50776 * C15423 +
            (C16326 * C1174 + C16327 * C1169 - C16514 * C1175 -
             C16515 * C50688) *
                C50776 * C15424) *
               C50898 +
           (((C7995 + C7996) * C1175 -
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C1169 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C1174) +
             (C7997 + C7998) * C50688) *
                C50776 * C15422 +
            ((C9576 + C9575) * C1175 -
             ((C15778 + C15779) * C1169 + (C15780 + C15781) * C1174) +
             (C9578 + C9577) * C50688) *
                C50776 * C15423 +
            ((C17152 + C17153) * C1175 - (C16328 * C1169 + C16329 * C1174) +
             (C17154 + C17155) * C50688) *
                C50776 * C15424) *
               C50643) *
              C1514 +
          ((((C8629 + C8630) * C1175 -
             ((C15769 + C15768) * C1169 + (C15767 + C15766) * C1174) +
             (C8631 + C8632) * C50688) *
                C50776 * C15422 +
            ((C8960 + C8959) * C1175 -
             ((C15773 + C15772) * C1169 + (C15771 + C15770) * C1174) +
             (C8962 + C8961) * C50688) *
                C50776 * C15423 +
            ((C16527 + C16528) * C1175 - (C16640 * C1169 + C16641 * C1174) +
             (C16529 + C16530) * C50688) *
                C50776 * C15424) *
               C50898 +
           (((C15781 + C15780) * C1174 + (C15779 + C15778) * C1169 -
             (C9575 + C9576) * C1175 - (C9577 + C9578) * C50688) *
                C50776 * C15422 +
            ((C15777 + C15776) * C1174 + (C15775 + C15774) * C1169 -
             (C17153 + C17152) * C1175 - (C17155 + C17154) * C50688) *
                C50776 * C15423 +
            ((C16350 + C16351) * C1174 + (C16352 + C16353) * C1169 -
             (C49761 * C3449 + C50617 * C3455 + C49768 * C3450 +
              C50891 * C3456) *
                 C1175 -
             (C49761 * C3452 + C50617 * C3458 + C49768 * C3453 +
              C50891 * C3459) *
                 C50688) *
                C50776 * C15424) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C1279 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50951 -
            (C7987 + C7988) * C1280 - (C7989 + C7990) * C50939 + C8303 * C1281 +
            C8304 * C1276) *
               C7787 +
           ((C7988 + C7987) * C1279 + (C7990 + C7989) * C50951 -
            (C7991 + C7992) * C1280 - (C7993 + C7994) * C50939 +
            (C8323 + C8324) * C1281 + (C8325 + C8326) * C1276) *
               C7788 +
           (C8303 * C1279 + C8304 * C50951 - C8437 * C1280 - C8438 * C50939 +
            (C8448 + C8447) * C1281 + (C8450 + C8449) * C1276) *
               C7789) *
              C50802 * C50638 * C1514 +
          (((C8629 + C8630) * C1280 -
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C50951 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C1279) +
            (C8631 + C8632) * C50939 - C8641 * C1281 - C8642 * C1276) *
               C7787 +
           ((C8634 + C8633) * C1280 -
            ((C8632 + C8631) * C50951 + (C8630 + C8629) * C1279) +
            (C8636 + C8635) * C50939 - (C8637 + C8638) * C1281 -
            (C8639 + C8640) * C1276) *
               C7788 +
           ((C8638 + C8637) * C1280 - (C8642 * C50951 + C8641 * C1279) +
            (C8640 + C8639) * C50939 -
            (C49761 * C8596 + C50617 * C8598 + C49768 * C8597 +
             C50891 * C8599) *
                C1281 -
            (C49761 * C8600 + C50617 * C8602 + C49768 * C8601 +
             C50891 * C8603) *
                C1276) *
               C7789) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1279 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50951 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C1280 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C50939 +
           (C117 * C509 + C105 * C514 + C118 * C510 + C106 * C515 +
            C119 * C511 + C107 * C516 + C120 * C512 + C108 * C517) *
               C1281 +
           (C117 * C518 + C105 * C524 + C118 * C519 + C106 * C525 +
            C119 * C520 + C107 * C526 + C120 * C521 + C108 * C527) *
               C1276) *
              C50776 * C50802 * C50638 * C1514 +
          ((C117 * C718 + C105 * C726 + C118 * C719 + C106 * C727 +
            C119 * C720 + C107 * C728 + C120 * C721 + C108 * C729) *
               C1280 -
           ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
             C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                C50951 +
            (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
             C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                C1279) +
           (C117 * C730 + C105 * C742 + C118 * C731 + C106 * C743 +
            C119 * C732 + C107 * C744 + C120 * C733 + C108 * C745) *
               C50939 -
           (C120 * C722 + C108 * C734 + C119 * C723 + C107 * C735 +
            C118 * C724 + C106 * C736 + C117 * C725 + C105 * C737) *
               C1281 -
           (C120 * C738 + C108 * C746 + C119 * C739 + C107 * C747 +
            C118 * C740 + C106 * C748 + C117 * C741 + C105 * C749) *
               C1276) *
              C50776 * C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C1279 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50951 -
            (C7987 + C7988) * C1280 - (C7989 + C7990) * C50939 + C8303 * C1281 +
            C8304 * C1276) *
               C50776 * C15422 +
           ((C15766 + C15767) * C1279 + (C15768 + C15769) * C50951 -
            (C8630 + C8629) * C1280 - (C8632 + C8631) * C50939 +
            (C8634 + C8633) * C1281 + (C8636 + C8635) * C1276) *
               C50776 * C15423 +
           (C16326 * C1279 + C16327 * C50951 - C16514 * C1280 -
            C16515 * C50939 + (C8964 + C8963) * C1281 +
            (C8966 + C8965) * C1276) *
               C50776 * C15424) *
              C50638 * C1514 +
          (((C8629 + C8630) * C1280 -
            ((C15769 + C15768) * C50951 + (C15767 + C15766) * C1279) +
            (C8631 + C8632) * C50939 - C8641 * C1281 - C8642 * C1276) *
               C50776 * C15422 +
           ((C8960 + C8959) * C1280 -
            ((C15773 + C15772) * C50951 + (C15771 + C15770) * C1279) +
            (C8962 + C8961) * C50939 - (C8963 + C8964) * C1281 -
            (C8965 + C8966) * C1276) *
               C50776 * C15423 +
           ((C16527 + C16528) * C1280 - (C16640 * C50951 + C16641 * C1279) +
            (C16529 + C16530) * C50939 -
            (C49761 * C9064 + C50617 * C9068 + C49768 * C9065 +
             C50891 * C9069) *
                C1281 -
            (C49761 * C9066 + C50617 * C9070 + C49768 * C9067 +
             C50891 * C9071) *
                C1276) *
               C50776 * C15424) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C1174 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C1169 -
            (C7987 + C7988) * C1175 - (C7989 + C7990) * C50688) *
               C7787 +
           ((C7988 + C7987) * C1174 + (C7990 + C7989) * C1169 -
            (C7991 + C7992) * C1175 - (C7993 + C7994) * C50688) *
               C7788 +
           (C8303 * C1174 + C8304 * C1169 - C8437 * C1175 - C8438 * C50688) *
               C7789) *
              C50802 * C50638 * C50952 +
          (((C8629 + C8630) * C1175 -
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C1169 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C1174) +
            (C8631 + C8632) * C50688) *
               C7787 +
           ((C8634 + C8633) * C1175 -
            ((C8632 + C8631) * C1169 + (C8630 + C8629) * C1174) +
            (C8636 + C8635) * C50688) *
               C7788 +
           ((C8638 + C8637) * C1175 - (C8642 * C1169 + C8641 * C1174) +
            (C8640 + C8639) * C50688) *
               C7789) *
              C50802 * C50638 * C50942 +
          (((C49768 * C851 + C50891 * C856 + C49761 * C852 + C50617 * C857) *
                C1174 +
            (C49768 * C860 + C50891 * C866 + C49761 * C861 + C50617 * C867) *
                C1169 -
            (C8959 + C8960) * C1175 - (C8961 + C8962) * C50688) *
               C7787 +
           ((C8960 + C8959) * C1174 + (C8962 + C8961) * C1169 -
            (C8963 + C8964) * C1175 - (C8965 + C8966) * C50688) *
               C7788 +
           ((C8964 + C8963) * C1174 + (C8966 + C8965) * C1169 -
            (C49761 * C8934 + C50617 * C8936 + C49768 * C8935 +
             C50891 * C8937) *
                C1175 -
            (C49761 * C8938 + C50617 * C8940 + C49768 * C8939 +
             C50891 * C8941) *
                C50688) *
               C7789) *
              C50802 * C50638 * C1746)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1174 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C1169 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C1175 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C50688) *
              C50776 * C50802 * C50638 * C50952 +
          ((C117 * C718 + C105 * C726 + C118 * C719 + C106 * C727 +
            C119 * C720 + C107 * C728 + C120 * C721 + C108 * C729) *
               C1175 -
           ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
             C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                C1169 +
            (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
             C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                C1174) +
           (C117 * C730 + C105 * C742 + C118 * C731 + C106 * C743 +
            C119 * C732 + C107 * C744 + C120 * C733 + C108 * C745) *
               C50688) *
              C50776 * C50802 * C50638 * C50942 +
          ((C117 * C851 + C105 * C856 + C118 * C852 + C106 * C857 +
            C119 * C853 + C107 * C858 + C120 * C854 + C108 * C859) *
               C1174 +
           (C117 * C860 + C105 * C866 + C118 * C861 + C106 * C867 +
            C119 * C862 + C107 * C868 + C120 * C863 + C108 * C869) *
               C1169 -
           (C120 * C969 + C108 * C973 + C119 * C970 + C107 * C974 +
            C118 * C971 + C106 * C975 + C117 * C972 + C105 * C976) *
               C1175 -
           (C120 * C977 + C108 * C981 + C119 * C978 + C107 * C982 +
            C118 * C979 + C106 * C983 + C117 * C980 + C105 * C984) *
               C50688) *
              C50776 * C50802 * C50638 * C1746)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C1174 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C1169 -
            (C7987 + C7988) * C1175 - (C7989 + C7990) * C50688) *
               C50776 * C15422 +
           ((C15766 + C15767) * C1174 + (C15768 + C15769) * C1169 -
            (C8630 + C8629) * C1175 - (C8632 + C8631) * C50688) *
               C50776 * C15423 +
           C18135 * C15424) *
              C50638 * C50952 +
          (((C8629 + C8630) * C1175 -
            ((C15769 + C15768) * C1169 + (C15767 + C15766) * C1174) +
            (C8631 + C8632) * C50688) *
               C50776 * C15422 +
           ((C8960 + C8959) * C1175 -
            ((C15773 + C15772) * C1169 + (C15771 + C15770) * C1174) +
            (C8962 + C8961) * C50688) *
               C50776 * C15423 +
           ((C16527 + C16528) * C1175 - (C16640 * C1169 + C16641 * C1174) +
            (C16529 + C16530) * C50688) *
               C50776 * C15424) *
              C50638 * C50942 +
          (C18135 * C15422 +
           ((C16357 + C16356) * C1174 + (C16355 + C16354) * C1169 -
            (C16528 + C16527) * C1175 - (C16530 + C16529) * C50688) *
               C50776 * C15423 +
           ((C16652 + C16653) * C1174 + (C16654 + C16655) * C1169 -
            (C49761 * C16507 + C50617 * C16508 + C49768 * C13781 +
             C50891 * C13785) *
                C1175 -
            (C49761 * C16509 + C50617 * C16510 + C49768 * C13784 +
             C50891 * C13787) *
                C50688) *
               C50776 * C15424) *
              C50638 * C1746)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                   C121 +
               (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                   C50672) *
                  C50776 * C50802 * C112 -
              ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
                C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                   C50672 +
               (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
                C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                   C121) *
                  C50776 * C50802 * C113 +
              ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
                C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                   C121 +
               (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
                C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                   C50672) *
                  C50776 * C50802 * C114 -
              ((C120 * C141 + C108 * C149 + C119 * C140 + C107 * C148 +
                C118 * C137 + C106 * C147 + C117 * C136 + C105 * C146) *
                   C50672 +
               (C120 * C128 + C108 * C142 + C119 * C127 + C107 * C139 +
                C118 * C126 + C106 * C138 + C117 * C125 + C105 * C132) *
                   C121) *
                  C50776 * C50802 * C115) *
             C50702 +
         0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                   C506 +
               (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                   C501 -
               (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
                C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
                   C507 -
               (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
                C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
                   C502 +
               (C117 * C509 + C105 * C514 + C118 * C510 + C106 * C515 +
                C119 * C511 + C107 * C516 + C120 * C512 + C108 * C517) *
                   C508 +
               (C117 * C518 + C105 * C524 + C118 * C519 + C106 * C525 +
                C119 * C520 + C107 * C526 + C120 * C521 + C108 * C527) *
                   C503) *
                  C50776 * C50802 * C50898 +
              ((C117 * C257 + C105 * C263 + C118 * C256 + C106 * C262 +
                C119 * C255 + C107 * C261 + C120 * C259 + C108 * C269) *
                   C507 -
               ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
                 C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                    C501 +
                (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
                 C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                    C506) +
               (C117 * C267 + C105 * C275 + C118 * C266 + C106 * C274 +
                C119 * C265 + C107 * C273 + C120 * C270 + C108 * C277) *
                   C502 -
               (C120 * C513 + C108 * C522 + C119 * C512 + C107 * C517 +
                C118 * C511 + C106 * C516 + C117 * C510 + C105 * C515) *
                   C508 -
               (C120 * C523 + C108 * C528 + C119 * C521 + C107 * C527 +
                C118 * C520 + C106 * C526 + C117 * C519 + C105 * C525) *
                   C503) *
                  C50776 * C50802 * C50643) *
             C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50672) *
               C50776 * C50802 * C50898 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50672 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50776 * C50802 * C50643) *
              C848 +
          (((C117 * C379 + C105 * C385 + C118 * C380 + C106 * C386 +
             C119 * C381 + C107 * C387 + C120 * C382 + C108 * C388) *
                C121 +
            (C117 * C389 + C105 * C397 + C118 * C390 + C106 * C398 +
             C119 * C391 + C107 * C399 + C120 * C392 + C108 * C400) *
                C50672) *
               C50776 * C50802 * C50643 -
           ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
             C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                C50672 +
            (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
             C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                C121) *
               C50776 * C50802 * C50898) *
              C849 +
          (((C117 * C851 + C105 * C856 + C118 * C852 + C106 * C857 +
             C119 * C853 + C107 * C858 + C120 * C854 + C108 * C859) *
                C121 +
            (C117 * C860 + C105 * C866 + C118 * C861 + C106 * C867 +
             C119 * C862 + C107 * C868 + C120 * C863 + C108 * C869) *
                C50672) *
               C50776 * C50802 * C50898 -
           ((C120 * C864 + C108 * C870 + C119 * C863 + C107 * C869 +
             C118 * C862 + C106 * C868 + C117 * C861 + C105 * C867) *
                C50672 +
            (C120 * C855 + C108 * C865 + C119 * C854 + C107 * C859 +
             C118 * C853 + C106 * C858 + C117 * C852 + C105 * C857) *
                C121) *
               C50776 * C50802 * C50643) *
              C850)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C121 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50672) *
               C7787 +
           ((C49768 * C258 + C50891 * C264 + C49761 * C257 + C50617 * C263) *
                C121 +
            (C49768 * C268 + C50891 * C276 + C49761 * C267 + C50617 * C275) *
                C50672) *
               C7788 +
           ((C49768 * C509 + C50891 * C514 + C49761 * C510 + C50617 * C515) *
                C121 +
            (C49768 * C518 + C50891 * C524 + C49761 * C519 + C50617 * C525) *
                C50672) *
               C7789) *
              C50802 * C112 -
          (((C49761 * C520 + C50617 * C526 + C49768 * C519 + C50891 * C525) *
                C50672 +
            (C49761 * C511 + C50617 * C516 + C49768 * C510 + C50891 * C515) *
                C121) *
               C7789 +
           ((C49761 * C266 + C50617 * C274 + C49768 * C267 + C50891 * C275) *
                C50672 +
            (C49761 * C256 + C50617 * C262 + C49768 * C257 + C50891 * C263) *
                C121) *
               C7788 +
           ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                C50672 +
            (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                C121) *
               C7787) *
              C50802 * C113 +
          (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                C121 +
            (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                C50672) *
               C7787 +
           ((C49768 * C256 + C50891 * C262 + C49761 * C255 + C50617 * C261) *
                C121 +
            (C49768 * C266 + C50891 * C274 + C49761 * C265 + C50617 * C273) *
                C50672) *
               C7788 +
           ((C49768 * C511 + C50891 * C516 + C49761 * C512 + C50617 * C517) *
                C121 +
            (C49768 * C520 + C50891 * C526 + C49761 * C521 + C50617 * C527) *
                C50672) *
               C7789) *
              C50802 * C114 -
          (((C49761 * C523 + C50617 * C528 + C49768 * C521 + C50891 * C527) *
                C50672 +
            (C49761 * C513 + C50617 * C522 + C49768 * C512 + C50891 * C517) *
                C121) *
               C7789 +
           ((C49761 * C270 + C50617 * C277 + C49768 * C265 + C50891 * C273) *
                C50672 +
            (C49761 * C259 + C50617 * C269 + C49768 * C255 + C50891 * C261) *
                C121) *
               C7788 +
           ((C49761 * C137 + C50617 * C147 + C49768 * C136 + C50891 * C146) *
                C50672 +
            (C49761 * C126 + C50617 * C138 + C49768 * C125 + C50891 * C132) *
                C121) *
               C7787) *
              C50802 * C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C506 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C501 -
            (C7987 + C7988) * C507 - (C7989 + C7990) * C502 + C8303 * C508 +
            C8304 * C503) *
               C7787 +
           ((C7988 + C7987) * C506 + (C7990 + C7989) * C501 -
            (C7991 + C7992) * C507 - (C7993 + C7994) * C502 +
            (C8323 + C8324) * C508 + (C8325 + C8326) * C503) *
               C7788 +
           (C8303 * C506 + C8304 * C501 - (C8324 + C8323) * C507 -
            (C8326 + C8325) * C502 +
            (C49768 * C2807 + C50891 * C2810 + C49761 * C2806 +
             C50617 * C2809) *
                C508 +
            (C49768 * C2813 + C50891 * C2816 + C49761 * C2812 +
             C50617 * C2815) *
                C503) *
               C7789) *
              C50802 * C50898 +
          (((C7995 + C7996) * C507 -
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C501 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C506) +
            (C7997 + C7998) * C502 - C8313 * C508 - C8314 * C503) *
               C7787 +
           ((C7999 + C8000) * C507 -
            ((C7998 + C7997) * C501 + (C7996 + C7995) * C506) +
            (C8001 + C8002) * C502 - (C8327 + C8328) * C508 -
            (C8329 + C8330) * C503) *
               C7788 +
           ((C8328 + C8327) * C507 - (C8314 * C501 + C8313 * C506) +
            (C8330 + C8329) * C502 -
            (C49761 * C2805 + C50617 * C2808 + C49768 * C2806 +
             C50891 * C2809) *
                C508 -
            (C49761 * C2811 + C50617 * C2814 + C49768 * C2812 +
             C50891 * C2815) *
                C503) *
               C7789) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C121 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50672) *
                C7787 +
            ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C7788 +
            (C8303 * C121 + C8304 * C50672) * C7789) *
               C50802 * C50898 -
           ((C8314 * C50672 + C8313 * C121) * C7789 +
            ((C7998 + C7997) * C50672 + (C7996 + C7995) * C121) * C7788 +
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50672 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C121) *
                C7787) *
               C50802 * C50643) *
              C848 +
          ((((C49768 * C379 + C50891 * C385 + C49761 * C380 + C50617 * C386) *
                 C121 +
             (C49768 * C389 + C50891 * C397 + C49761 * C390 + C50617 * C398) *
                 C50672) *
                C7787 +
            ((C49768 * C719 + C50891 * C727 + C49761 * C720 + C50617 * C728) *
                 C121 +
             (C49768 * C731 + C50891 * C743 + C49761 * C732 + C50617 * C744) *
                 C50672) *
                C7788 +
            ((C49768 * C724 + C50891 * C736 + C49761 * C723 + C50617 * C735) *
                 C121 +
             (C49768 * C740 + C50891 * C748 + C49761 * C739 + C50617 * C747) *
                 C50672) *
                C7789) *
               C50802 * C50643 -
           ((C8642 * C50672 + C8641 * C121) * C7789 +
            ((C8632 + C8631) * C50672 + (C8630 + C8629) * C121) * C7788 +
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C50672 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C121) *
                C7787) *
               C50802 * C50898) *
              C849 +
          ((((C49768 * C851 + C50891 * C856 + C49761 * C852 + C50617 * C857) *
                 C121 +
             (C49768 * C860 + C50891 * C866 + C49761 * C861 + C50617 * C867) *
                 C50672) *
                C7787 +
            ((C49768 * C972 + C50891 * C976 + C49761 * C971 + C50617 * C975) *
                 C121 +
             (C49768 * C980 + C50891 * C984 + C49761 * C979 + C50617 * C983) *
                 C50672) *
                C7788 +
            ((C49768 * C3323 + C50891 * C3326 + C49761 * C3322 +
              C50617 * C3325) *
                 C121 +
             (C49768 * C3329 + C50891 * C3332 + C49761 * C3328 +
              C50617 * C3331) *
                 C50672) *
                C7789) *
               C50802 * C50898 -
           (((C49761 * C3327 + C50617 * C3330 + C49768 * C3328 +
              C50891 * C3331) *
                 C50672 +
             (C49761 * C3321 + C50617 * C3324 + C49768 * C3322 +
              C50891 * C3325) *
                 C121) *
                C7789 +
            ((C49761 * C978 + C50617 * C982 + C49768 * C979 + C50891 * C983) *
                 C50672 +
             (C49761 * C970 + C50617 * C974 + C49768 * C971 + C50891 * C975) *
                 C121) *
                C7788 +
            ((C49761 * C862 + C50617 * C868 + C49768 * C861 + C50891 * C867) *
                 C50672 +
             (C49761 * C853 + C50617 * C858 + C49768 * C852 + C50891 * C857) *
                 C121) *
                C7787) *
               C50802 * C50643) *
              C850)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C121 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50672) *
               C50776 * C15422 +
           ((C49768 * C383 + C50891 * C394 + C49761 * C379 + C50617 * C385) *
                C121 +
            (C49768 * C393 + C50891 * C401 + C49761 * C389 + C50617 * C397) *
                C50672) *
               C50776 * C15423 +
           ((C49768 * C851 + C50891 * C856 + C49761 * C852 + C50617 * C857) *
                C121 +
            (C49768 * C860 + C50891 * C866 + C49761 * C861 + C50617 * C867) *
                C50672) *
               C50776 * C15424) *
              C112 -
          (((C49761 * C862 + C50617 * C868 + C49768 * C861 + C50891 * C867) *
                C50672 +
            (C49761 * C853 + C50617 * C858 + C49768 * C852 + C50891 * C857) *
                C121) *
               C50776 * C15424 +
           ((C49761 * C390 + C50617 * C398 + C49768 * C389 + C50891 * C397) *
                C50672 +
            (C49761 * C380 + C50617 * C386 + C49768 * C379 + C50891 * C385) *
                C121) *
               C50776 * C15423 +
           ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                C50672 +
            (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                C121) *
               C50776 * C15422) *
              C113 +
          (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                C121 +
            (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                C50672) *
               C50776 * C15422 +
           ((C49768 * C380 + C50891 * C386 + C49761 * C381 + C50617 * C387) *
                C121 +
            (C49768 * C390 + C50891 * C398 + C49761 * C391 + C50617 * C399) *
                C50672) *
               C50776 * C15423 +
           ((C49768 * C853 + C50891 * C858 + C49761 * C854 + C50617 * C859) *
                C121 +
            (C49768 * C862 + C50891 * C868 + C49761 * C863 + C50617 * C869) *
                C50672) *
               C50776 * C15424) *
              C114 -
          (((C49761 * C864 + C50617 * C870 + C49768 * C863 + C50891 * C869) *
                C50672 +
            (C49761 * C855 + C50617 * C865 + C49768 * C854 + C50891 * C859) *
                C121) *
               C50776 * C15424 +
           ((C49761 * C392 + C50617 * C400 + C49768 * C391 + C50891 * C399) *
                C50672 +
            (C49761 * C382 + C50617 * C388 + C49768 * C381 + C50891 * C387) *
                C121) *
               C50776 * C15423 +
           ((C49761 * C137 + C50617 * C147 + C49768 * C136 + C50891 * C146) *
                C50672 +
            (C49761 * C126 + C50617 * C138 + C49768 * C125 + C50891 * C132) *
                C121) *
               C50776 * C15422) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C506 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C501 -
            (C7987 + C7988) * C507 - (C7989 + C7990) * C502 + C8303 * C508 +
            C8304 * C503) *
               C50776 * C15422 +
           ((C15766 + C15767) * C506 + (C15768 + C15769) * C501 -
            (C8630 + C8629) * C507 - (C8632 + C8631) * C502 +
            (C8634 + C8633) * C508 + (C8636 + C8635) * C503) *
               C50776 * C15423 +
           ((C15770 + C15771) * C506 + (C15772 + C15773) * C501 -
            (C8959 + C8960) * C507 - (C8961 + C8962) * C502 +
            (C8964 + C8963) * C508 + (C8966 + C8965) * C503) *
               C50776 * C15424) *
              C50898 +
          (((C7995 + C7996) * C507 -
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C501 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C506) +
            (C7997 + C7998) * C502 - C8313 * C508 - C8314 * C503) *
               C50776 * C15422 +
           ((C9576 + C9575) * C507 -
            ((C15778 + C15779) * C501 + (C15780 + C15781) * C506) +
            (C9578 + C9577) * C502 - (C9579 + C9580) * C508 -
            (C9581 + C9582) * C503) *
               C50776 * C15423 +
           ((C49768 * C971 + C50891 * C975 + C49761 * C970 + C50617 * C974) *
                C507 -
            ((C15774 + C15775) * C501 + (C15776 + C15777) * C506) +
            (C49768 * C979 + C50891 * C983 + C49761 * C978 + C50617 * C982) *
                C502 -
            (C49761 * C3321 + C50617 * C3324 + C49768 * C3322 +
             C50891 * C3325) *
                C508 -
            (C49761 * C3327 + C50617 * C3330 + C49768 * C3328 +
             C50891 * C3331) *
                C503) *
               C50776 * C15424) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C121 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50672) *
                C50776 * C15422 +
            ((C15766 + C15767) * C121 + (C15768 + C15769) * C50672) * C50776 *
                C15423 +
            C16360 * C15424) *
               C50898 -
           (C16361 * C15424 +
            ((C15778 + C15779) * C50672 + (C15780 + C15781) * C121) * C50776 *
                C15423 +
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50672 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C121) *
                C50776 * C15422) *
               C50643) *
              C848 +
          ((((C15781 + C15780) * C121 + (C15779 + C15778) * C50672) * C50776 *
                C15422 +
            ((C15777 + C15776) * C121 + (C15775 + C15774) * C50672) * C50776 *
                C15423 +
            ((C16350 + C16351) * C121 + (C16352 + C16353) * C50672) * C50776 *
                C15424) *
               C50643 -
           (((C16354 + C16355) * C50672 + (C16356 + C16357) * C121) * C50776 *
                C15424 +
            ((C15773 + C15772) * C50672 + (C15771 + C15770) * C121) * C50776 *
                C15423 +
            ((C15769 + C15768) * C50672 + (C15767 + C15766) * C121) * C50776 *
                C15422) *
               C50898) *
              C849 +
          ((C16360 * C15422 +
            ((C16357 + C16356) * C121 + (C16355 + C16354) * C50672) * C50776 *
                C15423 +
            ((C49768 * C6201 + C50891 * C6207 + C49761 * C6200 +
              C50617 * C6206) *
                 C121 +
             (C49768 * C6204 + C50891 * C6210 + C49761 * C6203 +
              C50617 * C6209) *
                 C50672) *
                C50776 * C15424) *
               C50898 -
           (((C49761 * C6202 + C50617 * C6208 + C49768 * C6203 +
              C50891 * C6209) *
                 C50672 +
             (C49761 * C6199 + C50617 * C6205 + C49768 * C6200 +
              C50891 * C6206) *
                 C121) *
                C50776 * C15424 +
            ((C16353 + C16352) * C50672 + (C16351 + C16350) * C121) * C50776 *
                C15423 +
            C16361 * C15422) *
               C50643) *
              C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                   C253 +
               (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                   C50905 -
               (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
                C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
                   C254 -
               (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
                C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
                   C50688) *
                  C50776 * C50802 * C250 +
              ((C117 * C257 + C105 * C263 + C118 * C256 + C106 * C262 +
                C119 * C255 + C107 * C261 + C120 * C259 + C108 * C269) *
                   C254 -
               ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
                 C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                    C50905 +
                (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
                 C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                    C253) +
               (C117 * C267 + C105 * C275 + C118 * C266 + C106 * C274 +
                C119 * C265 + C107 * C273 + C120 * C270 + C108 * C277) *
                   C50688) *
                  C50776 * C50802 * C251 +
              ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
                C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                   C253 +
               (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
                C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                   C50905 -
               (C120 * C260 + C108 * C271 + C119 * C259 + C107 * C269 +
                C118 * C255 + C106 * C261 + C117 * C256 + C105 * C262) *
                   C254 -
               (C120 * C272 + C108 * C278 + C119 * C270 + C107 * C277 +
                C118 * C265 + C106 * C273 + C117 * C266 + C105 * C274) *
                   C50688) *
                  C50776 * C50802 * C252) *
             C50702 +
         0.5 * std::pow(Pi, 2.5) *
             ((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
               C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                  C600 +
              (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
               C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                  C595 -
              (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
               C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
                  C601 -
              (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
               C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
                  C596 +
              (C117 * C509 + C105 * C514 + C118 * C510 + C106 * C515 +
               C119 * C511 + C107 * C516 + C120 * C512 + C108 * C517) *
                  C602 +
              (C117 * C518 + C105 * C524 + C118 * C519 + C106 * C525 +
               C119 * C520 + C107 * C526 + C120 * C521 + C108 * C527) *
                  C597 -
              (C120 * C604 + C108 * C608 + C119 * C605 + C107 * C609 +
               C118 * C606 + C106 * C610 + C117 * C607 + C105 * C611) *
                  C603 -
              (C120 * C612 + C108 * C616 + C119 * C613 + C107 * C617 +
               C118 * C614 + C106 * C618 + C117 * C615 + C105 * C619) *
                  C598) *
             C50776 * C50802 * C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C253 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50905 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C254 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C50688) *
              C50776 * C50802 * C50638 * C848 +
          ((C117 * C718 + C105 * C726 + C118 * C719 + C106 * C727 +
            C119 * C720 + C107 * C728 + C120 * C721 + C108 * C729) *
               C254 -
           ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
             C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                C50905 +
            (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
             C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                C253) +
           (C117 * C730 + C105 * C742 + C118 * C731 + C106 * C743 +
            C119 * C732 + C107 * C744 + C120 * C733 + C108 * C745) *
               C50688) *
              C50776 * C50802 * C50638 * C849 +
          ((C117 * C851 + C105 * C856 + C118 * C852 + C106 * C857 +
            C119 * C853 + C107 * C858 + C120 * C854 + C108 * C859) *
               C253 +
           (C117 * C860 + C105 * C866 + C118 * C861 + C106 * C867 +
            C119 * C862 + C107 * C868 + C120 * C863 + C108 * C869) *
               C50905 -
           (C120 * C969 + C108 * C973 + C119 * C970 + C107 * C974 +
            C118 * C971 + C106 * C975 + C117 * C972 + C105 * C976) *
               C254 -
           (C120 * C977 + C108 * C981 + C119 * C978 + C107 * C982 +
            C118 * C979 + C106 * C983 + C117 * C980 + C105 * C984) *
               C50688) *
              C50776 * C50802 * C50638 * C850)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C253 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50905 -
            (C7987 + C7988) * C254 - (C7989 + C7990) * C50688) *
               C7787 +
           ((C7988 + C7987) * C253 + (C7990 + C7989) * C50905 -
            (C7991 + C7992) * C254 - (C7993 + C7994) * C50688) *
               C7788 +
           ((C7992 + C7991) * C253 + (C7994 + C7993) * C50905 -
            (C49761 * C606 + C50617 * C610 + C49768 * C607 + C50891 * C611) *
                C254 -
            (C49761 * C614 + C50617 * C618 + C49768 * C615 + C50891 * C619) *
                C50688) *
               C7789) *
              C50802 * C250 +
          (((C7995 + C7996) * C254 -
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50905 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C253) +
            (C7997 + C7998) * C50688) *
               C7787 +
           ((C7999 + C8000) * C254 -
            ((C7998 + C7997) * C50905 + (C7996 + C7995) * C253) +
            (C8001 + C8002) * C50688) *
               C7788 +
           ((C49768 * C606 + C50891 * C610 + C49761 * C605 + C50617 * C609) *
                C254 -
            ((C8002 + C8001) * C50905 + (C8000 + C7999) * C253) +
            (C49768 * C614 + C50891 * C618 + C49761 * C613 + C50617 * C617) *
                C50688) *
               C7789) *
              C50802 * C251 +
          (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                C253 +
            (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                C50905 -
            (C8003 + C8004) * C254 - (C8005 + C8006) * C50688) *
               C7787 +
           ((C8004 + C8003) * C253 + (C8006 + C8005) * C50905 -
            (C8007 + C8008) * C254 - (C8009 + C8010) * C50688) *
               C7788 +
           ((C8008 + C8007) * C253 + (C8010 + C8009) * C50905 -
            (C49761 * C604 + C50617 * C608 + C49768 * C605 + C50891 * C609) *
                C254 -
            (C49761 * C612 + C50617 * C616 + C49768 * C613 + C50891 * C617) *
                C50688) *
               C7789) *
              C50802 * C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
               C600 +
           (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
               C595 -
           (C7987 + C7988) * C601 - (C7989 + C7990) * C596 + C8303 * C602 +
           C8304 * C597 - C8437 * C603 - C8438 * C598) *
              C7787 +
          ((C7988 + C7987) * C600 + (C7990 + C7989) * C595 -
           (C7991 + C7992) * C601 - (C7993 + C7994) * C596 +
           (C8323 + C8324) * C602 + (C8325 + C8326) * C597 -
           (C8447 + C8448) * C603 - (C8449 + C8450) * C598) *
              C7788 +
          (C8303 * C600 + C8304 * C595 - C8437 * C601 - C8438 * C596 +
           (C8448 + C8447) * C602 + (C8450 + C8449) * C597 -
           (C49761 * C8428 + C50617 * C8430 + C49768 * C8429 + C50891 * C8431) *
               C603 -
           (C49761 * C8432 + C50617 * C8434 + C49768 * C8433 + C50891 * C8435) *
               C598) *
              C7789) *
         C50802 * C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C253 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50905 -
            (C7987 + C7988) * C254 - (C7989 + C7990) * C50688) *
               C7787 +
           ((C7988 + C7987) * C253 + (C7990 + C7989) * C50905 -
            (C7991 + C7992) * C254 - (C7993 + C7994) * C50688) *
               C7788 +
           (C8303 * C253 + C8304 * C50905 - C8437 * C254 - C8438 * C50688) *
               C7789) *
              C50802 * C50638 * C848 +
          (((C8629 + C8630) * C254 -
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C50905 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C253) +
            (C8631 + C8632) * C50688) *
               C7787 +
           ((C8634 + C8633) * C254 -
            ((C8632 + C8631) * C50905 + (C8630 + C8629) * C253) +
            (C8636 + C8635) * C50688) *
               C7788 +
           ((C8638 + C8637) * C254 - (C8642 * C50905 + C8641 * C253) +
            (C8640 + C8639) * C50688) *
               C7789) *
              C50802 * C50638 * C849 +
          (((C49768 * C851 + C50891 * C856 + C49761 * C852 + C50617 * C857) *
                C253 +
            (C49768 * C860 + C50891 * C866 + C49761 * C861 + C50617 * C867) *
                C50905 -
            (C8959 + C8960) * C254 - (C8961 + C8962) * C50688) *
               C7787 +
           ((C8960 + C8959) * C253 + (C8962 + C8961) * C50905 -
            (C8963 + C8964) * C254 - (C8965 + C8966) * C50688) *
               C7788 +
           ((C8964 + C8963) * C253 + (C8966 + C8965) * C50905 -
            (C49761 * C8934 + C50617 * C8936 + C49768 * C8935 +
             C50891 * C8937) *
                C254 -
            (C49761 * C8938 + C50617 * C8940 + C49768 * C8939 +
             C50891 * C8941) *
                C50688) *
               C7789) *
              C50802 * C50638 * C850)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C253 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50905 -
            (C7987 + C7988) * C254 - (C7989 + C7990) * C50688) *
               C50776 * C15422 +
           ((C49768 * C383 + C50891 * C394 + C49761 * C379 + C50617 * C385) *
                C253 +
            (C49768 * C393 + C50891 * C401 + C49761 * C389 + C50617 * C397) *
                C50905 -
            (C8630 + C8629) * C254 - (C8632 + C8631) * C50688) *
               C50776 * C15423 +
           ((C49768 * C851 + C50891 * C856 + C49761 * C852 + C50617 * C857) *
                C253 +
            (C49768 * C860 + C50891 * C866 + C49761 * C861 + C50617 * C867) *
                C50905 -
            (C8959 + C8960) * C254 - (C8961 + C8962) * C50688) *
               C50776 * C15424) *
              C250 +
          (((C7995 + C7996) * C254 -
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50905 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C253) +
            (C7997 + C7998) * C50688) *
               C50776 * C15422 +
           ((C9576 + C9575) * C254 -
            ((C49761 * C390 + C50617 * C398 + C49768 * C389 + C50891 * C397) *
                 C50905 +
             (C49761 * C380 + C50617 * C386 + C49768 * C379 + C50891 * C385) *
                 C253) +
            (C9578 + C9577) * C50688) *
               C50776 * C15423 +
           ((C49768 * C971 + C50891 * C975 + C49761 * C970 + C50617 * C974) *
                C254 -
            ((C49761 * C862 + C50617 * C868 + C49768 * C861 + C50891 * C867) *
                 C50905 +
             (C49761 * C853 + C50617 * C858 + C49768 * C852 + C50891 * C857) *
                 C253) +
            (C49768 * C979 + C50891 * C983 + C49761 * C978 + C50617 * C982) *
                C50688) *
               C50776 * C15424) *
              C251 +
          (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                C253 +
            (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                C50905 -
            (C8003 + C8004) * C254 - (C8005 + C8006) * C50688) *
               C50776 * C15422 +
           ((C49768 * C380 + C50891 * C386 + C49761 * C381 + C50617 * C387) *
                C253 +
            (C49768 * C390 + C50891 * C398 + C49761 * C391 + C50617 * C399) *
                C50905 -
            (C49761 * C721 + C50617 * C729 + C49768 * C720 + C50891 * C728) *
                C254 -
            (C49761 * C733 + C50617 * C745 + C49768 * C732 + C50891 * C744) *
                C50688) *
               C50776 * C15423 +
           ((C49768 * C853 + C50891 * C858 + C49761 * C854 + C50617 * C859) *
                C253 +
            (C49768 * C862 + C50891 * C868 + C49761 * C863 + C50617 * C869) *
                C50905 -
            (C49761 * C969 + C50617 * C973 + C49768 * C970 + C50891 * C974) *
                C254 -
            (C49761 * C977 + C50617 * C981 + C49768 * C978 + C50891 * C982) *
                C50688) *
               C50776 * C15424) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
               C600 +
           (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
               C595 -
           (C7987 + C7988) * C601 - (C7989 + C7990) * C596 + C8303 * C602 +
           C8304 * C597 - C8437 * C603 - C8438 * C598) *
              C50776 * C15422 +
          ((C15766 + C15767) * C600 + (C15768 + C15769) * C595 -
           (C8630 + C8629) * C601 - (C8632 + C8631) * C596 +
           (C8634 + C8633) * C602 + (C8636 + C8635) * C597 -
           (C8637 + C8638) * C603 - (C8639 + C8640) * C598) *
              C50776 * C15423 +
          ((C15770 + C15771) * C600 + (C15772 + C15773) * C595 -
           (C8959 + C8960) * C601 - (C8961 + C8962) * C596 +
           (C8964 + C8963) * C602 + (C8966 + C8965) * C597 -
           (C49761 * C8934 + C50617 * C8936 + C49768 * C8935 + C50891 * C8937) *
               C603 -
           (C49761 * C8938 + C50617 * C8940 + C49768 * C8939 + C50891 * C8941) *
               C598) *
              C50776 * C15424) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C253 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50905 -
            (C7987 + C7988) * C254 - (C7989 + C7990) * C50688) *
               C50776 * C15422 +
           ((C15766 + C15767) * C253 + (C15768 + C15769) * C50905 -
            (C8630 + C8629) * C254 - (C8632 + C8631) * C50688) *
               C50776 * C15423 +
           C16533 * C15424) *
              C50638 * C848 +
          (((C8629 + C8630) * C254 -
            ((C15769 + C15768) * C50905 + (C15767 + C15766) * C253) +
            (C8631 + C8632) * C50688) *
               C50776 * C15422 +
           ((C8960 + C8959) * C254 -
            ((C15773 + C15772) * C50905 + (C15771 + C15770) * C253) +
            (C8962 + C8961) * C50688) *
               C50776 * C15423 +
           ((C16527 + C16528) * C254 -
            ((C16354 + C16355) * C50905 + (C16356 + C16357) * C253) +
            (C16529 + C16530) * C50688) *
               C50776 * C15424) *
              C50638 * C849 +
          (C16533 * C15422 +
           ((C16357 + C16356) * C253 + (C16355 + C16354) * C50905 -
            (C16528 + C16527) * C254 - (C16530 + C16529) * C50688) *
               C50776 * C15423 +
           ((C49768 * C6201 + C50891 * C6207 + C49761 * C6200 +
             C50617 * C6206) *
                C253 +
            (C49768 * C6204 + C50891 * C6210 + C49761 * C6203 +
             C50617 * C6209) *
                C50905 -
            (C49761 * C16507 + C50617 * C16508 + C49768 * C13781 +
             C50891 * C13785) *
                C254 -
            (C49761 * C16509 + C50617 * C16510 + C49768 * C13784 +
             C50891 * C13787) *
                C50688) *
               C50776 * C15424) *
              C50638 * C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                 C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                    C121 +
                (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                 C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                    C50672) *
                   C50776 * C50802 * C250 -
               ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
                 C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                    C50672 +
                (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
                 C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                    C121) *
                   C50776 * C50802 * C251 +
               ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
                 C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                    C121 +
                (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
                 C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                    C50672) *
                   C50776 * C50802 * C252) *
                  C50907 +
              (((C117 * C379 + C105 * C385 + C118 * C380 + C106 * C386 +
                 C119 * C381 + C107 * C387 + C120 * C382 + C108 * C388) *
                    C121 +
                (C117 * C389 + C105 * C397 + C118 * C390 + C106 * C398 +
                 C119 * C391 + C107 * C399 + C120 * C392 + C108 * C400) *
                    C50672) *
                   C50776 * C50802 * C251 -
               ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
                 C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                    C50672 +
                (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
                 C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                    C121) *
                   C50776 * C50802 * C250 -
               ((C120 * C395 + C108 * C402 + C119 * C392 + C107 * C400 +
                 C118 * C391 + C106 * C399 + C117 * C390 + C105 * C398) *
                    C50672 +
                (C120 * C384 + C108 * C396 + C119 * C382 + C107 * C388 +
                 C118 * C381 + C106 * C387 + C117 * C380 + C105 * C386) *
                    C121) *
                   C50776 * C50802 * C252) *
                  C50714) +
         0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                   C506 +
               (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                   C501 -
               (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
                C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
                   C507 -
               (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
                C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
                   C502 +
               (C117 * C509 + C105 * C514 + C118 * C510 + C106 * C515 +
                C119 * C511 + C107 * C516 + C120 * C512 + C108 * C517) *
                   C508 +
               (C117 * C518 + C105 * C524 + C118 * C519 + C106 * C525 +
                C119 * C520 + C107 * C526 + C120 * C521 + C108 * C527) *
                   C503) *
                  C50776 * C50802 * C50638 * C50907 +
              ((C117 * C718 + C105 * C726 + C118 * C719 + C106 * C727 +
                C119 * C720 + C107 * C728 + C120 * C721 + C108 * C729) *
                   C507 -
               ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
                 C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                    C501 +
                (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
                 C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                    C506) +
               (C117 * C730 + C105 * C742 + C118 * C731 + C106 * C743 +
                C119 * C732 + C107 * C744 + C120 * C733 + C108 * C745) *
                   C502 -
               (C120 * C722 + C108 * C734 + C119 * C723 + C107 * C735 +
                C118 * C724 + C106 * C736 + C117 * C725 + C105 * C737) *
                   C508 -
               (C120 * C738 + C108 * C746 + C119 * C739 + C107 * C747 +
                C118 * C740 + C106 * C748 + C117 * C741 + C105 * C749) *
                   C503) *
                  C50776 * C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50672) *
              C50776 * C50802 * C50638 * C1051 -
          ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
            C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
               C50672 +
           (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
            C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
               C121) *
              C50776 * C50802 * C50638 * C1052 +
          ((C117 * C851 + C105 * C856 + C118 * C852 + C106 * C857 +
            C119 * C853 + C107 * C858 + C120 * C854 + C108 * C859) *
               C121 +
           (C117 * C860 + C105 * C866 + C118 * C861 + C106 * C867 +
            C119 * C862 + C107 * C868 + C120 * C863 + C108 * C869) *
               C50672) *
              C50776 * C50802 * C50638 * C1053 -
          ((C120 * C1059 + C108 * C1067 + C119 * C1060 + C107 * C1068 +
            C118 * C1061 + C106 * C1069 + C117 * C1062 + C105 * C1070) *
               C50672 +
           (C120 * C1055 + C108 * C1063 + C119 * C1056 + C107 * C1064 +
            C118 * C1057 + C106 * C1065 + C117 * C1058 + C105 * C1066) *
               C121) *
              C50776 * C50802 * C50638 * C1054)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C121 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50672) *
                C7787 +
            ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C7788 +
            ((C7992 + C7991) * C121 + (C7994 + C7993) * C50672) * C7789) *
               C50802 * C250 -
           (((C8002 + C8001) * C50672 + (C8000 + C7999) * C121) * C7789 +
            ((C7998 + C7997) * C50672 + (C7996 + C7995) * C121) * C7788 +
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50672 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C121) *
                C7787) *
               C50802 * C251 +
           (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                 C121 +
             (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                 C50672) *
                C7787 +
            ((C8004 + C8003) * C121 + (C8006 + C8005) * C50672) * C7788 +
            ((C8008 + C8007) * C121 + (C8010 + C8009) * C50672) * C7789) *
               C50802 * C252) *
              C50907 +
          ((((C49768 * C379 + C50891 * C385 + C49761 * C380 + C50617 * C386) *
                 C121 +
             (C49768 * C389 + C50891 * C397 + C49761 * C390 + C50617 * C398) *
                 C50672) *
                C7787 +
            ((C49768 * C719 + C50891 * C727 + C49761 * C720 + C50617 * C728) *
                 C121 +
             (C49768 * C731 + C50891 * C743 + C49761 * C732 + C50617 * C744) *
                 C50672) *
                C7788 +
            ((C49768 * C724 + C50891 * C736 + C49761 * C723 + C50617 * C735) *
                 C121 +
             (C49768 * C740 + C50891 * C748 + C49761 * C739 + C50617 * C747) *
                 C50672) *
                C7789) *
               C50802 * C251 -
           (((C49761 * C740 + C50617 * C748 + C49768 * C741 + C50891 * C749) *
                 C50672 +
             (C49761 * C724 + C50617 * C736 + C49768 * C725 + C50891 * C737) *
                 C121) *
                C7789 +
            ((C49761 * C731 + C50617 * C743 + C49768 * C730 + C50891 * C742) *
                 C50672 +
             (C49761 * C719 + C50617 * C727 + C49768 * C718 + C50891 * C726) *
                 C121) *
                C7788 +
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C50672 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C121) *
                C7787) *
               C50802 * C250 -
           (((C49761 * C738 + C50617 * C746 + C49768 * C739 + C50891 * C747) *
                 C50672 +
             (C49761 * C722 + C50617 * C734 + C49768 * C723 + C50891 * C735) *
                 C121) *
                C7789 +
            ((C49761 * C733 + C50617 * C745 + C49768 * C732 + C50891 * C744) *
                 C50672 +
             (C49761 * C721 + C50617 * C729 + C49768 * C720 + C50891 * C728) *
                 C121) *
                C7788 +
            ((C49761 * C391 + C50617 * C399 + C49768 * C390 + C50891 * C398) *
                 C50672 +
             (C49761 * C381 + C50617 * C387 + C49768 * C380 + C50891 * C386) *
                 C121) *
                C7787) *
               C50802 * C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C506 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C501 -
            (C7987 + C7988) * C507 - (C7989 + C7990) * C502 + C8303 * C508 +
            C8304 * C503) *
               C7787 +
           ((C7988 + C7987) * C506 + (C7990 + C7989) * C501 -
            (C7991 + C7992) * C507 - (C7993 + C7994) * C502 +
            (C8323 + C8324) * C508 + (C8325 + C8326) * C503) *
               C7788 +
           (C8303 * C506 + C8304 * C501 - C8437 * C507 - C8438 * C502 +
            (C8448 + C8447) * C508 + (C8450 + C8449) * C503) *
               C7789) *
              C50802 * C50638 * C50907 +
          (((C8629 + C8630) * C507 -
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C501 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C506) +
            (C8631 + C8632) * C502 - C8641 * C508 - C8642 * C503) *
               C7787 +
           ((C8634 + C8633) * C507 -
            ((C8632 + C8631) * C501 + (C8630 + C8629) * C506) +
            (C8636 + C8635) * C502 - (C8637 + C8638) * C508 -
            (C8639 + C8640) * C503) *
               C7788 +
           ((C8638 + C8637) * C507 - (C8642 * C501 + C8641 * C506) +
            (C8640 + C8639) * C502 -
            (C49761 * C8596 + C50617 * C8598 + C49768 * C8597 +
             C50891 * C8599) *
                C508 -
            (C49761 * C8600 + C50617 * C8602 + C49768 * C8601 +
             C50891 * C8603) *
                C503) *
               C7789) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C121 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50672) *
               C7787 +
           ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C7788 +
           (C8303 * C121 + C8304 * C50672) * C7789) *
              C50802 * C50638 * C1051 -
          ((C8642 * C50672 + C8641 * C121) * C7789 +
           ((C8632 + C8631) * C50672 + (C8630 + C8629) * C121) * C7788 +
           ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                C50672 +
            (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                C121) *
               C7787) *
              C50802 * C50638 * C1052 +
          (((C49768 * C851 + C50891 * C856 + C49761 * C852 + C50617 * C857) *
                C121 +
            (C49768 * C860 + C50891 * C866 + C49761 * C861 + C50617 * C867) *
                C50672) *
               C7787 +
           ((C8960 + C8959) * C121 + (C8962 + C8961) * C50672) * C7788 +
           ((C8964 + C8963) * C121 + (C8966 + C8965) * C50672) * C7789) *
              C50802 * C50638 * C1053 -
          (((C49761 * C9066 + C50617 * C9070 + C49768 * C9067 +
             C50891 * C9071) *
                C50672 +
            (C49761 * C9064 + C50617 * C9068 + C49768 * C9065 +
             C50891 * C9069) *
                C121) *
               C7789 +
           ((C49761 * C3453 + C50617 * C3459 + C49768 * C3454 +
             C50891 * C3460) *
                C50672 +
            (C49761 * C3450 + C50617 * C3456 + C49768 * C3451 +
             C50891 * C3457) *
                C121) *
               C7788 +
           ((C49761 * C1061 + C50617 * C1069 + C49768 * C1062 +
             C50891 * C1070) *
                C50672 +
            (C49761 * C1057 + C50617 * C1065 + C49768 * C1058 +
             C50891 * C1066) *
                C121) *
               C7787) *
              C50802 * C50638 * C1054)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C121 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50672) *
                C50776 * C15422 +
            ((C15766 + C15767) * C121 + (C15768 + C15769) * C50672) * C50776 *
                C15423 +
            ((C15770 + C15771) * C121 + (C15772 + C15773) * C50672) * C50776 *
                C15424) *
               C250 -
           (((C15774 + C15775) * C50672 + (C15776 + C15777) * C121) * C50776 *
                C15424 +
            ((C15778 + C15779) * C50672 + (C15780 + C15781) * C121) * C50776 *
                C15423 +
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50672 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C121) *
                C50776 * C15422) *
               C251 +
           (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                 C121 +
             (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                 C50672) *
                C50776 * C15422 +
            ((C15782 + C15783) * C121 + (C15784 + C15785) * C50672) * C50776 *
                C15423 +
            ((C15786 + C15787) * C121 + (C15788 + C15789) * C50672) * C50776 *
                C15424) *
               C252) *
              C50907 +
          ((((C15781 + C15780) * C121 + (C15779 + C15778) * C50672) * C50776 *
                C15422 +
            ((C15777 + C15776) * C121 + (C15775 + C15774) * C50672) * C50776 *
                C15423 +
            ((C49768 * C1057 + C50891 * C1065 + C49761 * C1056 +
              C50617 * C1064) *
                 C121 +
             (C49768 * C1061 + C50891 * C1069 + C49761 * C1060 +
              C50617 * C1068) *
                 C50672) *
                C50776 * C15424) *
               C251 -
           (((C49761 * C1061 + C50617 * C1069 + C49768 * C1062 +
              C50891 * C1070) *
                 C50672 +
             (C49761 * C1057 + C50617 * C1065 + C49768 * C1058 +
              C50891 * C1066) *
                 C121) *
                C50776 * C15424 +
            ((C15773 + C15772) * C50672 + (C15771 + C15770) * C121) * C50776 *
                C15423 +
            ((C15769 + C15768) * C50672 + (C15767 + C15766) * C121) * C50776 *
                C15422) *
               C250 -
           (((C49761 * C1059 + C50617 * C1067 + C49768 * C1060 +
              C50891 * C1068) *
                 C50672 +
             (C49761 * C1055 + C50617 * C1063 + C49768 * C1056 +
              C50891 * C1064) *
                 C121) *
                C50776 * C15424 +
            ((C15789 + C15788) * C50672 + (C15787 + C15786) * C121) * C50776 *
                C15423 +
            ((C15785 + C15784) * C50672 + (C15783 + C15782) * C121) * C50776 *
                C15422) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C506 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C501 -
            (C7987 + C7988) * C507 - (C7989 + C7990) * C502 + C8303 * C508 +
            C8304 * C503) *
               C50776 * C15422 +
           ((C15766 + C15767) * C506 + (C15768 + C15769) * C501 -
            (C8630 + C8629) * C507 - (C8632 + C8631) * C502 +
            (C8634 + C8633) * C508 + (C8636 + C8635) * C503) *
               C50776 * C15423 +
           ((C15770 + C15771) * C506 + (C15772 + C15773) * C501 -
            (C8959 + C8960) * C507 - (C8961 + C8962) * C502 +
            (C8964 + C8963) * C508 + (C8966 + C8965) * C503) *
               C50776 * C15424) *
              C50638 * C50907 +
          (((C8629 + C8630) * C507 -
            ((C15769 + C15768) * C501 + (C15767 + C15766) * C506) +
            (C8631 + C8632) * C502 - C8641 * C508 - C8642 * C503) *
               C50776 * C15422 +
           ((C8960 + C8959) * C507 -
            ((C15773 + C15772) * C501 + (C15771 + C15770) * C506) +
            (C8962 + C8961) * C502 - (C8963 + C8964) * C508 -
            (C8965 + C8966) * C503) *
               C50776 * C15423 +
           ((C49768 * C3451 + C50891 * C3457 + C49761 * C3450 +
             C50617 * C3456) *
                C507 -
            ((C49761 * C1061 + C50617 * C1069 + C49768 * C1062 +
              C50891 * C1070) *
                 C501 +
             (C49761 * C1057 + C50617 * C1065 + C49768 * C1058 +
              C50891 * C1066) *
                 C506) +
            (C49768 * C3454 + C50891 * C3460 + C49761 * C3453 +
             C50617 * C3459) *
                C502 -
            (C49761 * C9064 + C50617 * C9068 + C49768 * C9065 +
             C50891 * C9069) *
                C508 -
            (C49761 * C9066 + C50617 * C9070 + C49768 * C9067 +
             C50891 * C9071) *
                C503) *
               C50776 * C15424) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C121 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50672) *
               C50776 * C15422 +
           ((C15766 + C15767) * C121 + (C15768 + C15769) * C50672) * C50776 *
               C15423 +
           C16360 * C15424) *
              C50638 * C1051 -
          (C16657 * C15424 +
           ((C15773 + C15772) * C50672 + (C15771 + C15770) * C121) * C50776 *
               C15423 +
           ((C15769 + C15768) * C50672 + (C15767 + C15766) * C121) * C50776 *
               C15422) *
              C50638 * C1052 +
          (C16360 * C15422 +
           ((C16357 + C16356) * C121 + (C16355 + C16354) * C50672) * C50776 *
               C15423 +
           ((C16652 + C16653) * C121 + (C16654 + C16655) * C50672) * C50776 *
               C15424) *
              C50638 * C1053 -
          (((C49761 * C16633 + C50617 * C16637 + C49768 * C16634 +
             C50891 * C16638) *
                C50672 +
            (C49761 * C16631 + C50617 * C16635 + C49768 * C16632 +
             C50891 * C16636) *
                C121) *
               C50776 * C15424 +
           ((C16655 + C16654) * C50672 + (C16653 + C16652) * C121) * C50776 *
               C15423 +
           C16657 * C15422) *
              C50638 * C1054)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C121 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50672) *
                C7787 +
            ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C7788 +
            (C8303 * C121 + C8304 * C50672) * C7789) *
               C50802 * C50950 -
           ((C8314 * C50672 + C8313 * C121) * C7789 +
            ((C7998 + C7997) * C50672 + (C7996 + C7995) * C121) * C7788 +
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50672 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C121) *
                C7787) *
               C50802 * C50936 +
           (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                 C121 +
             (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                 C50672) *
                C7787 +
            ((C8004 + C8003) * C121 + (C8006 + C8005) * C50672) * C7788 +
            ((C8008 + C8007) * C121 + (C8010 + C8009) * C50672) * C7789) *
               C50802 * C1173) *
              C1514 +
          ((((C49768 * C379 + C50891 * C385 + C49761 * C380 + C50617 * C386) *
                 C121 +
             (C49768 * C389 + C50891 * C397 + C49761 * C390 + C50617 * C398) *
                 C50672) *
                C7787 +
            ((C9576 + C9575) * C121 + (C9578 + C9577) * C50672) * C7788 +
            ((C9580 + C9579) * C121 + (C9582 + C9581) * C50672) * C7789) *
               C50802 * C50936 -
           ((C8642 * C50672 + C8641 * C121) * C7789 +
            ((C8632 + C8631) * C50672 + (C8630 + C8629) * C121) * C7788 +
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C50672 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C121) *
                C7787) *
               C50802 * C50950 -
           (((C49761 * C738 + C50617 * C746 + C49768 * C739 + C50891 * C747) *
                 C50672 +
             (C49761 * C722 + C50617 * C734 + C49768 * C723 + C50891 * C735) *
                 C121) *
                C7789 +
            ((C49761 * C733 + C50617 * C745 + C49768 * C732 + C50891 * C744) *
                 C50672 +
             (C49761 * C721 + C50617 * C729 + C49768 * C720 + C50891 * C728) *
                 C121) *
                C7788 +
            ((C49761 * C391 + C50617 * C399 + C49768 * C390 + C50891 * C398) *
                 C50672 +
             (C49761 * C381 + C50617 * C387 + C49768 * C380 + C50891 * C386) *
                 C121) *
                C7787) *
               C50802 * C1173) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50672) *
               C50776 * C50802 * C50950 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50672 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50776 * C50802 * C50936 +
           ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50672) *
               C50776 * C50802 * C1173) *
              C1514 +
          (((C117 * C379 + C105 * C385 + C118 * C380 + C106 * C386 +
             C119 * C381 + C107 * C387 + C120 * C382 + C108 * C388) *
                C121 +
            (C117 * C389 + C105 * C397 + C118 * C390 + C106 * C398 +
             C119 * C391 + C107 * C399 + C120 * C392 + C108 * C400) *
                C50672) *
               C50776 * C50802 * C50936 -
           ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
             C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                C50672 +
            (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
             C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                C121) *
               C50776 * C50802 * C50950 -
           ((C120 * C395 + C108 * C402 + C119 * C392 + C107 * C400 +
             C118 * C391 + C106 * C399 + C117 * C390 + C105 * C398) *
                C50672 +
            (C120 * C384 + C108 * C396 + C119 * C382 + C107 * C388 +
             C118 * C381 + C106 * C387 + C117 * C380 + C105 * C386) *
                C121) *
               C50776 * C50802 * C1173) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C121 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50672) *
                C50776 * C15422 +
            ((C15766 + C15767) * C121 + (C15768 + C15769) * C50672) * C50776 *
                C15423 +
            C16360 * C15424) *
               C50950 -
           (C16361 * C15424 +
            ((C15778 + C15779) * C50672 + (C15780 + C15781) * C121) * C50776 *
                C15423 +
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50672 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C121) *
                C50776 * C15422) *
               C50936 +
           (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                 C121 +
             (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                 C50672) *
                C50776 * C15422 +
            ((C15782 + C15783) * C121 + (C15784 + C15785) * C50672) * C50776 *
                C15423 +
            ((C15786 + C15787) * C121 + (C15788 + C15789) * C50672) * C50776 *
                C15424) *
               C1173) *
              C1514 +
          ((((C15781 + C15780) * C121 + (C15779 + C15778) * C50672) * C50776 *
                C15422 +
            ((C15777 + C15776) * C121 + (C15775 + C15774) * C50672) * C50776 *
                C15423 +
            ((C16350 + C16351) * C121 + (C16352 + C16353) * C50672) * C50776 *
                C15424) *
               C50936 -
           (C16657 * C15424 +
            ((C15773 + C15772) * C50672 + (C15771 + C15770) * C121) * C50776 *
                C15423 +
            ((C15769 + C15768) * C50672 + (C15767 + C15766) * C121) * C50776 *
                C15422) *
               C50950 -
           (((C49761 * C1059 + C50617 * C1067 + C49768 * C1060 +
              C50891 * C1068) *
                 C50672 +
             (C49761 * C1055 + C50617 * C1063 + C49768 * C1056 +
              C50891 * C1064) *
                 C121) *
                C50776 * C15424 +
            ((C15789 + C15788) * C50672 + (C15787 + C15786) * C121) * C50776 *
                C15423 +
            ((C15785 + C15784) * C50672 + (C15783 + C15782) * C121) * C50776 *
                C15422) *
               C1173) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C253 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50905 -
             (C7987 + C7988) * C254 - (C7989 + C7990) * C50688) *
                C7787 +
            ((C7988 + C7987) * C253 + (C7990 + C7989) * C50905 -
             (C7991 + C7992) * C254 - (C7993 + C7994) * C50688) *
                C7788 +
            (C8303 * C253 + C8304 * C50905 - C8437 * C254 - C8438 * C50688) *
                C7789) *
               C50802 * C1277 +
           (((C7995 + C7996) * C254 -
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C50905 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C253) +
             (C7997 + C7998) * C50688) *
                C7787 +
            ((C7999 + C8000) * C254 -
             ((C7998 + C7997) * C50905 + (C7996 + C7995) * C253) +
             (C8001 + C8002) * C50688) *
                C7788 +
            ((C8328 + C8327) * C254 - (C8314 * C50905 + C8313 * C253) +
             (C8330 + C8329) * C50688) *
                C7789) *
               C50802 * C50643) *
              C1514 +
          ((((C8629 + C8630) * C254 -
             ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                  C50905 +
              (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                  C253) +
             (C8631 + C8632) * C50688) *
                C7787 +
            ((C8634 + C8633) * C254 -
             ((C8632 + C8631) * C50905 + (C8630 + C8629) * C253) +
             (C8636 + C8635) * C50688) *
                C7788 +
            ((C8638 + C8637) * C254 - (C8642 * C50905 + C8641 * C253) +
             (C8640 + C8639) * C50688) *
                C7789) *
               C50802 * C1277 +
           (((C49768 * C379 + C50891 * C385 + C49761 * C380 + C50617 * C386) *
                 C253 +
             (C49768 * C389 + C50891 * C397 + C49761 * C390 + C50617 * C398) *
                 C50905 -
             (C9575 + C9576) * C254 - (C9577 + C9578) * C50688) *
                C7787 +
            ((C9576 + C9575) * C253 + (C9578 + C9577) * C50905 -
             (C9579 + C9580) * C254 - (C9581 + C9582) * C50688) *
                C7788 +
            ((C9580 + C9579) * C253 + (C9582 + C9581) * C50905 -
             (C49761 * C2981 + C50617 * C2984 + C49768 * C2982 +
              C50891 * C2985) *
                 C254 -
             (C49761 * C2987 + C50617 * C2990 + C49768 * C2988 +
              C50891 * C2991) *
                 C50688) *
                C7789) *
               C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C253 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50905 -
            (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
             C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
                C254 -
            (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
             C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
                C50688) *
               C50776 * C50802 * C1277 +
           ((C117 * C257 + C105 * C263 + C118 * C256 + C106 * C262 +
             C119 * C255 + C107 * C261 + C120 * C259 + C108 * C269) *
                C254 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C50905 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C253) +
            (C117 * C267 + C105 * C275 + C118 * C266 + C106 * C274 +
             C119 * C265 + C107 * C273 + C120 * C270 + C108 * C277) *
                C50688) *
               C50776 * C50802 * C50643) *
              C1514 +
          (((C117 * C718 + C105 * C726 + C118 * C719 + C106 * C727 +
             C119 * C720 + C107 * C728 + C120 * C721 + C108 * C729) *
                C254 -
            ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
              C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                 C50905 +
             (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
              C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                 C253) +
            (C117 * C730 + C105 * C742 + C118 * C731 + C106 * C743 +
             C119 * C732 + C107 * C744 + C120 * C733 + C108 * C745) *
                C50688) *
               C50776 * C50802 * C1277 +
           ((C117 * C379 + C105 * C385 + C118 * C380 + C106 * C386 +
             C119 * C381 + C107 * C387 + C120 * C382 + C108 * C388) *
                C253 +
            (C117 * C389 + C105 * C397 + C118 * C390 + C106 * C398 +
             C119 * C391 + C107 * C399 + C120 * C392 + C108 * C400) *
                C50905 -
            (C120 * C1412 + C108 * C1413 + C119 * C721 + C107 * C729 +
             C118 * C720 + C106 * C728 + C117 * C719 + C105 * C727) *
                C254 -
            (C120 * C1414 + C108 * C1415 + C119 * C733 + C107 * C745 +
             C118 * C732 + C106 * C744 + C117 * C731 + C105 * C743) *
                C50688) *
               C50776 * C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C253 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50905 -
             (C7987 + C7988) * C254 - (C7989 + C7990) * C50688) *
                C50776 * C15422 +
            ((C15766 + C15767) * C253 + (C15768 + C15769) * C50905 -
             (C8630 + C8629) * C254 - (C8632 + C8631) * C50688) *
                C50776 * C15423 +
            C16533 * C15424) *
               C1277 +
           (((C7995 + C7996) * C254 -
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C50905 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C253) +
             (C7997 + C7998) * C50688) *
                C50776 * C15422 +
            ((C9576 + C9575) * C254 -
             ((C15778 + C15779) * C50905 + (C15780 + C15781) * C253) +
             (C9578 + C9577) * C50688) *
                C50776 * C15423 +
            ((C17152 + C17153) * C254 - (C16328 * C50905 + C16329 * C253) +
             (C17154 + C17155) * C50688) *
                C50776 * C15424) *
               C50643) *
              C1514 +
          ((((C8629 + C8630) * C254 -
             ((C15769 + C15768) * C50905 + (C15767 + C15766) * C253) +
             (C8631 + C8632) * C50688) *
                C50776 * C15422 +
            ((C8960 + C8959) * C254 -
             ((C15773 + C15772) * C50905 + (C15771 + C15770) * C253) +
             (C8962 + C8961) * C50688) *
                C50776 * C15423 +
            ((C16527 + C16528) * C254 - (C16640 * C50905 + C16641 * C253) +
             (C16529 + C16530) * C50688) *
                C50776 * C15424) *
               C1277 +
           (((C15781 + C15780) * C253 + (C15779 + C15778) * C50905 -
             (C9575 + C9576) * C254 - (C9577 + C9578) * C50688) *
                C50776 * C15422 +
            ((C15777 + C15776) * C253 + (C15775 + C15774) * C50905 -
             (C17153 + C17152) * C254 - (C17155 + C17154) * C50688) *
                C50776 * C15423 +
            ((C16350 + C16351) * C253 + (C16352 + C16353) * C50905 -
             (C49761 * C3449 + C50617 * C3455 + C49768 * C3450 +
              C50891 * C3456) *
                 C254 -
             (C49761 * C3452 + C50617 * C3458 + C49768 * C3453 +
              C50891 * C3459) *
                 C50688) *
                C50776 * C15424) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C121 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50672) *
                C7787 +
            ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C7788 +
            (C8303 * C121 + C8304 * C50672) * C7789) *
               C50802 * C1277 -
           ((C8314 * C50672 + C8313 * C121) * C7789 +
            ((C7998 + C7997) * C50672 + (C7996 + C7995) * C121) * C7788 +
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50672 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C121) *
                C7787) *
               C50802 * C50643) *
              C50952 +
          ((((C49768 * C379 + C50891 * C385 + C49761 * C380 + C50617 * C386) *
                 C121 +
             (C49768 * C389 + C50891 * C397 + C49761 * C390 + C50617 * C398) *
                 C50672) *
                C7787 +
            ((C9576 + C9575) * C121 + (C9578 + C9577) * C50672) * C7788 +
            ((C9580 + C9579) * C121 + (C9582 + C9581) * C50672) * C7789) *
               C50802 * C50643 -
           ((C8642 * C50672 + C8641 * C121) * C7789 +
            ((C8632 + C8631) * C50672 + (C8630 + C8629) * C121) * C7788 +
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C50672 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C121) *
                C7787) *
               C50802 * C1277) *
              C50942 +
          ((((C49768 * C851 + C50891 * C856 + C49761 * C852 + C50617 * C857) *
                 C121 +
             (C49768 * C860 + C50891 * C866 + C49761 * C861 + C50617 * C867) *
                 C50672) *
                C7787 +
            ((C8960 + C8959) * C121 + (C8962 + C8961) * C50672) * C7788 +
            ((C8964 + C8963) * C121 + (C8966 + C8965) * C50672) * C7789) *
               C50802 * C1277 -
           (((C49761 * C3327 + C50617 * C3330 + C49768 * C3328 +
              C50891 * C3331) *
                 C50672 +
             (C49761 * C3321 + C50617 * C3324 + C49768 * C3322 +
              C50891 * C3325) *
                 C121) *
                C7789 +
            ((C49761 * C978 + C50617 * C982 + C49768 * C979 + C50891 * C983) *
                 C50672 +
             (C49761 * C970 + C50617 * C974 + C49768 * C971 + C50891 * C975) *
                 C121) *
                C7788 +
            ((C49761 * C862 + C50617 * C868 + C49768 * C861 + C50891 * C867) *
                 C50672 +
             (C49761 * C853 + C50617 * C858 + C49768 * C852 + C50891 * C857) *
                 C121) *
                C7787) *
               C50802 * C50643) *
              C1746)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50672) *
               C50776 * C50802 * C1277 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50672 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50776 * C50802 * C50643) *
              C50952 +
          (((C117 * C379 + C105 * C385 + C118 * C380 + C106 * C386 +
             C119 * C381 + C107 * C387 + C120 * C382 + C108 * C388) *
                C121 +
            (C117 * C389 + C105 * C397 + C118 * C390 + C106 * C398 +
             C119 * C391 + C107 * C399 + C120 * C392 + C108 * C400) *
                C50672) *
               C50776 * C50802 * C50643 -
           ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
             C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                C50672 +
            (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
             C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                C121) *
               C50776 * C50802 * C1277) *
              C50942 +
          (((C117 * C851 + C105 * C856 + C118 * C852 + C106 * C857 +
             C119 * C853 + C107 * C858 + C120 * C854 + C108 * C859) *
                C121 +
            (C117 * C860 + C105 * C866 + C118 * C861 + C106 * C867 +
             C119 * C862 + C107 * C868 + C120 * C863 + C108 * C869) *
                C50672) *
               C50776 * C50802 * C1277 -
           ((C120 * C864 + C108 * C870 + C119 * C863 + C107 * C869 +
             C118 * C862 + C106 * C868 + C117 * C861 + C105 * C867) *
                C50672 +
            (C120 * C855 + C108 * C865 + C119 * C854 + C107 * C859 +
             C118 * C853 + C106 * C858 + C117 * C852 + C105 * C857) *
                C121) *
               C50776 * C50802 * C50643) *
              C1746)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C121 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50672) *
                C50776 * C15422 +
            ((C15766 + C15767) * C121 + (C15768 + C15769) * C50672) * C50776 *
                C15423 +
            C16360 * C15424) *
               C1277 -
           (C16361 * C15424 +
            ((C15778 + C15779) * C50672 + (C15780 + C15781) * C121) * C50776 *
                C15423 +
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50672 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C121) *
                C50776 * C15422) *
               C50643) *
              C50952 +
          ((((C15781 + C15780) * C121 + (C15779 + C15778) * C50672) * C50776 *
                C15422 +
            ((C15777 + C15776) * C121 + (C15775 + C15774) * C50672) * C50776 *
                C15423 +
            ((C16350 + C16351) * C121 + (C16352 + C16353) * C50672) * C50776 *
                C15424) *
               C50643 -
           (C16657 * C15424 +
            ((C15773 + C15772) * C50672 + (C15771 + C15770) * C121) * C50776 *
                C15423 +
            ((C15769 + C15768) * C50672 + (C15767 + C15766) * C121) * C50776 *
                C15422) *
               C1277) *
              C50942 +
          ((C16360 * C15422 +
            ((C16357 + C16356) * C121 + (C16355 + C16354) * C50672) * C50776 *
                C15423 +
            ((C16652 + C16653) * C121 + (C16654 + C16655) * C50672) * C50776 *
                C15424) *
               C1277 -
           (((C49761 * C6202 + C50617 * C6208 + C49768 * C6203 +
              C50891 * C6209) *
                 C50672 +
             (C49761 * C6199 + C50617 * C6205 + C49768 * C6200 +
              C50891 * C6206) *
                 C121) *
                C50776 * C15424 +
            ((C16353 + C16352) * C50672 + (C16351 + C16350) * C121) * C50776 *
                C15423 +
            C16361 * C15422) *
               C50643) *
              C1746)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C506 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C501 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C507 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C502 +
           (C117 * C509 + C105 * C514 + C118 * C510 + C106 * C515 +
            C119 * C511 + C107 * C516 + C120 * C512 + C108 * C517) *
               C508 +
           (C117 * C518 + C105 * C524 + C118 * C519 + C106 * C525 +
            C119 * C520 + C107 * C526 + C120 * C521 + C108 * C527) *
               C503) *
              C50776 * C50802 * C50898 +
          ((C117 * C257 + C105 * C263 + C118 * C256 + C106 * C262 +
            C119 * C255 + C107 * C261 + C120 * C259 + C108 * C269) *
               C507 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C501 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C506) +
           (C117 * C267 + C105 * C275 + C118 * C266 + C106 * C274 +
            C119 * C265 + C107 * C273 + C120 * C270 + C108 * C277) *
               C502 -
           (C120 * C513 + C108 * C522 + C119 * C512 + C107 * C517 +
            C118 * C511 + C106 * C516 + C117 * C510 + C105 * C515) *
               C508 -
           (C120 * C523 + C108 * C528 + C119 * C521 + C107 * C527 +
            C118 * C520 + C106 * C526 + C117 * C519 + C105 * C525) *
               C503) *
              C50776 * C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50672) *
              C50776 * C50802 * C112 -
          ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
            C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
               C50672 +
           (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
            C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
               C121) *
              C50776 * C50802 * C113 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C121 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50672) *
              C50776 * C50802 * C114 -
          ((C120 * C141 + C108 * C149 + C119 * C140 + C107 * C148 +
            C118 * C137 + C106 * C147 + C117 * C136 + C105 * C146) *
               C50672 +
           (C120 * C128 + C108 * C142 + C119 * C127 + C107 * C139 +
            C118 * C126 + C106 * C138 + C117 * C125 + C105 * C132) *
               C121) *
              C50776 * C50802 * C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C121 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50672) *
               C7787 +
           ((C49768 * C258 + C50891 * C264 + C49761 * C257 + C50617 * C263) *
                C121 +
            (C49768 * C268 + C50891 * C276 + C49761 * C267 + C50617 * C275) *
                C50672) *
               C7788 +
           ((C49768 * C509 + C50891 * C514 + C49761 * C510 + C50617 * C515) *
                C121 +
            (C49768 * C518 + C50891 * C524 + C49761 * C519 + C50617 * C525) *
                C50672) *
               C7789) *
              C50802 * C112 -
          (((C49761 * C520 + C50617 * C526 + C49768 * C519 + C50891 * C525) *
                C50672 +
            (C49761 * C511 + C50617 * C516 + C49768 * C510 + C50891 * C515) *
                C121) *
               C7789 +
           ((C49761 * C266 + C50617 * C274 + C49768 * C267 + C50891 * C275) *
                C50672 +
            (C49761 * C256 + C50617 * C262 + C49768 * C257 + C50891 * C263) *
                C121) *
               C7788 +
           ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                C50672 +
            (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                C121) *
               C7787) *
              C50802 * C113 +
          (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                C121 +
            (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                C50672) *
               C7787 +
           ((C49768 * C256 + C50891 * C262 + C49761 * C255 + C50617 * C261) *
                C121 +
            (C49768 * C266 + C50891 * C274 + C49761 * C265 + C50617 * C273) *
                C50672) *
               C7788 +
           ((C49768 * C511 + C50891 * C516 + C49761 * C512 + C50617 * C517) *
                C121 +
            (C49768 * C520 + C50891 * C526 + C49761 * C521 + C50617 * C527) *
                C50672) *
               C7789) *
              C50802 * C114 -
          (((C49761 * C523 + C50617 * C528 + C49768 * C521 + C50891 * C527) *
                C50672 +
            (C49761 * C513 + C50617 * C522 + C49768 * C512 + C50891 * C517) *
                C121) *
               C7789 +
           ((C49761 * C270 + C50617 * C277 + C49768 * C265 + C50891 * C273) *
                C50672 +
            (C49761 * C259 + C50617 * C269 + C49768 * C255 + C50891 * C261) *
                C121) *
               C7788 +
           ((C49761 * C137 + C50617 * C147 + C49768 * C136 + C50891 * C146) *
                C50672 +
            (C49761 * C126 + C50617 * C138 + C49768 * C125 + C50891 * C132) *
                C121) *
               C7787) *
              C50802 * C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C506 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C501 -
            (C7987 + C7988) * C507 - (C7989 + C7990) * C502 + C8303 * C508 +
            C8304 * C503) *
               C7787 +
           ((C7988 + C7987) * C506 + (C7990 + C7989) * C501 -
            (C7991 + C7992) * C507 - (C7993 + C7994) * C502 +
            (C8323 + C8324) * C508 + (C8325 + C8326) * C503) *
               C7788 +
           (C8303 * C506 + C8304 * C501 - (C8324 + C8323) * C507 -
            (C8326 + C8325) * C502 +
            (C49768 * C2807 + C50891 * C2810 + C49761 * C2806 +
             C50617 * C2809) *
                C508 +
            (C49768 * C2813 + C50891 * C2816 + C49761 * C2812 +
             C50617 * C2815) *
                C503) *
               C7789) *
              C50802 * C50898 +
          (((C7995 + C7996) * C507 -
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C501 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C506) +
            (C7997 + C7998) * C502 - C8313 * C508 - C8314 * C503) *
               C7787 +
           ((C7999 + C8000) * C507 -
            ((C7998 + C7997) * C501 + (C7996 + C7995) * C506) +
            (C8001 + C8002) * C502 - (C8327 + C8328) * C508 -
            (C8329 + C8330) * C503) *
               C7788 +
           ((C8328 + C8327) * C507 - (C8314 * C501 + C8313 * C506) +
            (C8330 + C8329) * C502 -
            (C49761 * C2805 + C50617 * C2808 + C49768 * C2806 +
             C50891 * C2809) *
                C508 -
            (C49761 * C2811 + C50617 * C2814 + C49768 * C2812 +
             C50891 * C2815) *
                C503) *
               C7789) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C121 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50672) *
               C50776 * C15422 +
           ((C49768 * C383 + C50891 * C394 + C49761 * C379 + C50617 * C385) *
                C121 +
            (C49768 * C393 + C50891 * C401 + C49761 * C389 + C50617 * C397) *
                C50672) *
               C50776 * C15423 +
           ((C49768 * C851 + C50891 * C856 + C49761 * C852 + C50617 * C857) *
                C121 +
            (C49768 * C860 + C50891 * C866 + C49761 * C861 + C50617 * C867) *
                C50672) *
               C50776 * C15424) *
              C112 -
          (((C49761 * C862 + C50617 * C868 + C49768 * C861 + C50891 * C867) *
                C50672 +
            (C49761 * C853 + C50617 * C858 + C49768 * C852 + C50891 * C857) *
                C121) *
               C50776 * C15424 +
           ((C49761 * C390 + C50617 * C398 + C49768 * C389 + C50891 * C397) *
                C50672 +
            (C49761 * C380 + C50617 * C386 + C49768 * C379 + C50891 * C385) *
                C121) *
               C50776 * C15423 +
           ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                C50672 +
            (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                C121) *
               C50776 * C15422) *
              C113 +
          (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                C121 +
            (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                C50672) *
               C50776 * C15422 +
           ((C49768 * C380 + C50891 * C386 + C49761 * C381 + C50617 * C387) *
                C121 +
            (C49768 * C390 + C50891 * C398 + C49761 * C391 + C50617 * C399) *
                C50672) *
               C50776 * C15423 +
           ((C49768 * C853 + C50891 * C858 + C49761 * C854 + C50617 * C859) *
                C121 +
            (C49768 * C862 + C50891 * C868 + C49761 * C863 + C50617 * C869) *
                C50672) *
               C50776 * C15424) *
              C114 -
          (((C49761 * C864 + C50617 * C870 + C49768 * C863 + C50891 * C869) *
                C50672 +
            (C49761 * C855 + C50617 * C865 + C49768 * C854 + C50891 * C859) *
                C121) *
               C50776 * C15424 +
           ((C49761 * C392 + C50617 * C400 + C49768 * C391 + C50891 * C399) *
                C50672 +
            (C49761 * C382 + C50617 * C388 + C49768 * C381 + C50891 * C387) *
                C121) *
               C50776 * C15423 +
           ((C49761 * C137 + C50617 * C147 + C49768 * C136 + C50891 * C146) *
                C50672 +
            (C49761 * C126 + C50617 * C138 + C49768 * C125 + C50891 * C132) *
                C121) *
               C50776 * C15422) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C506 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C501 -
            (C7987 + C7988) * C507 - (C7989 + C7990) * C502 + C8303 * C508 +
            C8304 * C503) *
               C50776 * C15422 +
           ((C15766 + C15767) * C506 + (C15768 + C15769) * C501 -
            (C8630 + C8629) * C507 - (C8632 + C8631) * C502 +
            (C8634 + C8633) * C508 + (C8636 + C8635) * C503) *
               C50776 * C15423 +
           ((C15770 + C15771) * C506 + (C15772 + C15773) * C501 -
            (C8959 + C8960) * C507 - (C8961 + C8962) * C502 +
            (C8964 + C8963) * C508 + (C8966 + C8965) * C503) *
               C50776 * C15424) *
              C50898 +
          (((C7995 + C7996) * C507 -
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C501 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C506) +
            (C7997 + C7998) * C502 - C8313 * C508 - C8314 * C503) *
               C50776 * C15422 +
           ((C9576 + C9575) * C507 -
            ((C15778 + C15779) * C501 + (C15780 + C15781) * C506) +
            (C9578 + C9577) * C502 - (C9579 + C9580) * C508 -
            (C9581 + C9582) * C503) *
               C50776 * C15423 +
           ((C49768 * C971 + C50891 * C975 + C49761 * C970 + C50617 * C974) *
                C507 -
            ((C15774 + C15775) * C501 + (C15776 + C15777) * C506) +
            (C49768 * C979 + C50891 * C983 + C49761 * C978 + C50617 * C982) *
                C502 -
            (C49761 * C3321 + C50617 * C3324 + C49768 * C3322 +
             C50891 * C3325) *
                C508 -
            (C49761 * C3327 + C50617 * C3330 + C49768 * C3328 +
             C50891 * C3331) *
                C503) *
               C50776 * C15424) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 + C119 * C124 +
           C107 * C131 + C120 * C125 + C108 * C132) *
              C600 +
          (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 + C119 * C135 +
           C107 * C145 + C120 * C136 + C108 * C146) *
              C595 -
          (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 + C118 * C257 +
           C106 * C263 + C117 * C258 + C105 * C264) *
              C601 -
          (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 + C118 * C267 +
           C106 * C275 + C117 * C268 + C105 * C276) *
              C596 +
          (C117 * C509 + C105 * C514 + C118 * C510 + C106 * C515 + C119 * C511 +
           C107 * C516 + C120 * C512 + C108 * C517) *
              C602 +
          (C117 * C518 + C105 * C524 + C118 * C519 + C106 * C525 + C119 * C520 +
           C107 * C526 + C120 * C521 + C108 * C527) *
              C597 -
          (C120 * C604 + C108 * C608 + C119 * C605 + C107 * C609 + C118 * C606 +
           C106 * C610 + C117 * C607 + C105 * C611) *
              C603 -
          (C120 * C612 + C108 * C616 + C119 * C613 + C107 * C617 + C118 * C614 +
           C106 * C618 + C117 * C615 + C105 * C619) *
              C598) *
         C50776 * C50802 * C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C253 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50905 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C254 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C50688) *
              C50776 * C50802 * C250 +
          ((C117 * C257 + C105 * C263 + C118 * C256 + C106 * C262 +
            C119 * C255 + C107 * C261 + C120 * C259 + C108 * C269) *
               C254 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50905 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C253) +
           (C117 * C267 + C105 * C275 + C118 * C266 + C106 * C274 +
            C119 * C265 + C107 * C273 + C120 * C270 + C108 * C277) *
               C50688) *
              C50776 * C50802 * C251 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C253 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50905 -
           (C120 * C260 + C108 * C271 + C119 * C259 + C107 * C269 +
            C118 * C255 + C106 * C261 + C117 * C256 + C105 * C262) *
               C254 -
           (C120 * C272 + C108 * C278 + C119 * C270 + C107 * C277 +
            C118 * C265 + C106 * C273 + C117 * C266 + C105 * C274) *
               C50688) *
              C50776 * C50802 * C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C253 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50905 -
            (C7987 + C7988) * C254 - (C7989 + C7990) * C50688) *
               C7787 +
           ((C7988 + C7987) * C253 + (C7990 + C7989) * C50905 -
            (C7991 + C7992) * C254 - (C7993 + C7994) * C50688) *
               C7788 +
           ((C7992 + C7991) * C253 + (C7994 + C7993) * C50905 -
            (C49761 * C606 + C50617 * C610 + C49768 * C607 + C50891 * C611) *
                C254 -
            (C49761 * C614 + C50617 * C618 + C49768 * C615 + C50891 * C619) *
                C50688) *
               C7789) *
              C50802 * C250 +
          (((C7995 + C7996) * C254 -
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50905 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C253) +
            (C7997 + C7998) * C50688) *
               C7787 +
           ((C7999 + C8000) * C254 -
            ((C7998 + C7997) * C50905 + (C7996 + C7995) * C253) +
            (C8001 + C8002) * C50688) *
               C7788 +
           ((C49768 * C606 + C50891 * C610 + C49761 * C605 + C50617 * C609) *
                C254 -
            ((C8002 + C8001) * C50905 + (C8000 + C7999) * C253) +
            (C49768 * C614 + C50891 * C618 + C49761 * C613 + C50617 * C617) *
                C50688) *
               C7789) *
              C50802 * C251 +
          (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                C253 +
            (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                C50905 -
            (C8003 + C8004) * C254 - (C8005 + C8006) * C50688) *
               C7787 +
           ((C8004 + C8003) * C253 + (C8006 + C8005) * C50905 -
            (C8007 + C8008) * C254 - (C8009 + C8010) * C50688) *
               C7788 +
           ((C8008 + C8007) * C253 + (C8010 + C8009) * C50905 -
            (C49761 * C604 + C50617 * C608 + C49768 * C605 + C50891 * C609) *
                C254 -
            (C49761 * C612 + C50617 * C616 + C49768 * C613 + C50891 * C617) *
                C50688) *
               C7789) *
              C50802 * C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
               C600 +
           (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
               C595 -
           (C7987 + C7988) * C601 - (C7989 + C7990) * C596 + C8303 * C602 +
           C8304 * C597 - C8437 * C603 - C8438 * C598) *
              C7787 +
          ((C7988 + C7987) * C600 + (C7990 + C7989) * C595 -
           (C7991 + C7992) * C601 - (C7993 + C7994) * C596 +
           (C8323 + C8324) * C602 + (C8325 + C8326) * C597 -
           (C8447 + C8448) * C603 - (C8449 + C8450) * C598) *
              C7788 +
          (C8303 * C600 + C8304 * C595 - C8437 * C601 - C8438 * C596 +
           (C8448 + C8447) * C602 + (C8450 + C8449) * C597 -
           (C49761 * C8428 + C50617 * C8430 + C49768 * C8429 + C50891 * C8431) *
               C603 -
           (C49761 * C8432 + C50617 * C8434 + C49768 * C8433 + C50891 * C8435) *
               C598) *
              C7789) *
         C50802 * C50638 * C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C253 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50905 -
            (C7987 + C7988) * C254 - (C7989 + C7990) * C50688) *
               C50776 * C15422 +
           ((C49768 * C383 + C50891 * C394 + C49761 * C379 + C50617 * C385) *
                C253 +
            (C49768 * C393 + C50891 * C401 + C49761 * C389 + C50617 * C397) *
                C50905 -
            (C8630 + C8629) * C254 - (C8632 + C8631) * C50688) *
               C50776 * C15423 +
           ((C49768 * C851 + C50891 * C856 + C49761 * C852 + C50617 * C857) *
                C253 +
            (C49768 * C860 + C50891 * C866 + C49761 * C861 + C50617 * C867) *
                C50905 -
            (C8959 + C8960) * C254 - (C8961 + C8962) * C50688) *
               C50776 * C15424) *
              C250 +
          (((C7995 + C7996) * C254 -
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50905 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C253) +
            (C7997 + C7998) * C50688) *
               C50776 * C15422 +
           ((C9576 + C9575) * C254 -
            ((C49761 * C390 + C50617 * C398 + C49768 * C389 + C50891 * C397) *
                 C50905 +
             (C49761 * C380 + C50617 * C386 + C49768 * C379 + C50891 * C385) *
                 C253) +
            (C9578 + C9577) * C50688) *
               C50776 * C15423 +
           ((C49768 * C971 + C50891 * C975 + C49761 * C970 + C50617 * C974) *
                C254 -
            ((C49761 * C862 + C50617 * C868 + C49768 * C861 + C50891 * C867) *
                 C50905 +
             (C49761 * C853 + C50617 * C858 + C49768 * C852 + C50891 * C857) *
                 C253) +
            (C49768 * C979 + C50891 * C983 + C49761 * C978 + C50617 * C982) *
                C50688) *
               C50776 * C15424) *
              C251 +
          (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                C253 +
            (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                C50905 -
            (C8003 + C8004) * C254 - (C8005 + C8006) * C50688) *
               C50776 * C15422 +
           ((C49768 * C380 + C50891 * C386 + C49761 * C381 + C50617 * C387) *
                C253 +
            (C49768 * C390 + C50891 * C398 + C49761 * C391 + C50617 * C399) *
                C50905 -
            (C49761 * C721 + C50617 * C729 + C49768 * C720 + C50891 * C728) *
                C254 -
            (C49761 * C733 + C50617 * C745 + C49768 * C732 + C50891 * C744) *
                C50688) *
               C50776 * C15423 +
           ((C49768 * C853 + C50891 * C858 + C49761 * C854 + C50617 * C859) *
                C253 +
            (C49768 * C862 + C50891 * C868 + C49761 * C863 + C50617 * C869) *
                C50905 -
            (C49761 * C969 + C50617 * C973 + C49768 * C970 + C50891 * C974) *
                C254 -
            (C49761 * C977 + C50617 * C981 + C49768 * C978 + C50891 * C982) *
                C50688) *
               C50776 * C15424) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
               C600 +
           (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
               C595 -
           (C7987 + C7988) * C601 - (C7989 + C7990) * C596 + C8303 * C602 +
           C8304 * C597 - C8437 * C603 - C8438 * C598) *
              C50776 * C15422 +
          ((C15766 + C15767) * C600 + (C15768 + C15769) * C595 -
           (C8630 + C8629) * C601 - (C8632 + C8631) * C596 +
           (C8634 + C8633) * C602 + (C8636 + C8635) * C597 -
           (C8637 + C8638) * C603 - (C8639 + C8640) * C598) *
              C50776 * C15423 +
          ((C15770 + C15771) * C600 + (C15772 + C15773) * C595 -
           (C8959 + C8960) * C601 - (C8961 + C8962) * C596 +
           (C8964 + C8963) * C602 + (C8966 + C8965) * C597 -
           (C49761 * C8934 + C50617 * C8936 + C49768 * C8935 + C50891 * C8937) *
               C603 -
           (C49761 * C8938 + C50617 * C8940 + C49768 * C8939 + C50891 * C8941) *
               C598) *
              C50776 * C15424) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C506 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C501 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C507 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C502 +
           (C117 * C509 + C105 * C514 + C118 * C510 + C106 * C515 +
            C119 * C511 + C107 * C516 + C120 * C512 + C108 * C517) *
               C508 +
           (C117 * C518 + C105 * C524 + C118 * C519 + C106 * C525 +
            C119 * C520 + C107 * C526 + C120 * C521 + C108 * C527) *
               C503) *
              C50776 * C50802 * C50638 * C50907 +
          ((C117 * C718 + C105 * C726 + C118 * C719 + C106 * C727 +
            C119 * C720 + C107 * C728 + C120 * C721 + C108 * C729) *
               C507 -
           ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
             C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                C501 +
            (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
             C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                C506) +
           (C117 * C730 + C105 * C742 + C118 * C731 + C106 * C743 +
            C119 * C732 + C107 * C744 + C120 * C733 + C108 * C745) *
               C502 -
           (C120 * C722 + C108 * C734 + C119 * C723 + C107 * C735 +
            C118 * C724 + C106 * C736 + C117 * C725 + C105 * C737) *
               C508 -
           (C120 * C738 + C108 * C746 + C119 * C739 + C107 * C747 +
            C118 * C740 + C106 * C748 + C117 * C741 + C105 * C749) *
               C503) *
              C50776 * C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50672) *
               C50776 * C50802 * C250 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50672 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50776 * C50802 * C251 +
           ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50672) *
               C50776 * C50802 * C252) *
              C50907 +
          (((C117 * C379 + C105 * C385 + C118 * C380 + C106 * C386 +
             C119 * C381 + C107 * C387 + C120 * C382 + C108 * C388) *
                C121 +
            (C117 * C389 + C105 * C397 + C118 * C390 + C106 * C398 +
             C119 * C391 + C107 * C399 + C120 * C392 + C108 * C400) *
                C50672) *
               C50776 * C50802 * C251 -
           ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
             C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                C50672 +
            (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
             C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                C121) *
               C50776 * C50802 * C250 -
           ((C120 * C395 + C108 * C402 + C119 * C392 + C107 * C400 +
             C118 * C391 + C106 * C399 + C117 * C390 + C105 * C398) *
                C50672 +
            (C120 * C384 + C108 * C396 + C119 * C382 + C107 * C388 +
             C118 * C381 + C106 * C387 + C117 * C380 + C105 * C386) *
                C121) *
               C50776 * C50802 * C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C121 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50672) *
                C7787 +
            ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C7788 +
            ((C7992 + C7991) * C121 + (C7994 + C7993) * C50672) * C7789) *
               C50802 * C250 -
           (((C8002 + C8001) * C50672 + (C8000 + C7999) * C121) * C7789 +
            ((C7998 + C7997) * C50672 + (C7996 + C7995) * C121) * C7788 +
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50672 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C121) *
                C7787) *
               C50802 * C251 +
           (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                 C121 +
             (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                 C50672) *
                C7787 +
            ((C8004 + C8003) * C121 + (C8006 + C8005) * C50672) * C7788 +
            ((C8008 + C8007) * C121 + (C8010 + C8009) * C50672) * C7789) *
               C50802 * C252) *
              C50907 +
          ((((C49768 * C379 + C50891 * C385 + C49761 * C380 + C50617 * C386) *
                 C121 +
             (C49768 * C389 + C50891 * C397 + C49761 * C390 + C50617 * C398) *
                 C50672) *
                C7787 +
            ((C49768 * C719 + C50891 * C727 + C49761 * C720 + C50617 * C728) *
                 C121 +
             (C49768 * C731 + C50891 * C743 + C49761 * C732 + C50617 * C744) *
                 C50672) *
                C7788 +
            ((C49768 * C724 + C50891 * C736 + C49761 * C723 + C50617 * C735) *
                 C121 +
             (C49768 * C740 + C50891 * C748 + C49761 * C739 + C50617 * C747) *
                 C50672) *
                C7789) *
               C50802 * C251 -
           (((C49761 * C740 + C50617 * C748 + C49768 * C741 + C50891 * C749) *
                 C50672 +
             (C49761 * C724 + C50617 * C736 + C49768 * C725 + C50891 * C737) *
                 C121) *
                C7789 +
            ((C49761 * C731 + C50617 * C743 + C49768 * C730 + C50891 * C742) *
                 C50672 +
             (C49761 * C719 + C50617 * C727 + C49768 * C718 + C50891 * C726) *
                 C121) *
                C7788 +
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C50672 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C121) *
                C7787) *
               C50802 * C250 -
           (((C49761 * C738 + C50617 * C746 + C49768 * C739 + C50891 * C747) *
                 C50672 +
             (C49761 * C722 + C50617 * C734 + C49768 * C723 + C50891 * C735) *
                 C121) *
                C7789 +
            ((C49761 * C733 + C50617 * C745 + C49768 * C732 + C50891 * C744) *
                 C50672 +
             (C49761 * C721 + C50617 * C729 + C49768 * C720 + C50891 * C728) *
                 C121) *
                C7788 +
            ((C49761 * C391 + C50617 * C399 + C49768 * C390 + C50891 * C398) *
                 C50672 +
             (C49761 * C381 + C50617 * C387 + C49768 * C380 + C50891 * C386) *
                 C121) *
                C7787) *
               C50802 * C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C506 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C501 -
            (C7987 + C7988) * C507 - (C7989 + C7990) * C502 + C8303 * C508 +
            C8304 * C503) *
               C7787 +
           ((C7988 + C7987) * C506 + (C7990 + C7989) * C501 -
            (C7991 + C7992) * C507 - (C7993 + C7994) * C502 +
            (C8323 + C8324) * C508 + (C8325 + C8326) * C503) *
               C7788 +
           (C8303 * C506 + C8304 * C501 - C8437 * C507 - C8438 * C502 +
            (C8448 + C8447) * C508 + (C8450 + C8449) * C503) *
               C7789) *
              C50802 * C50638 * C50907 +
          (((C8629 + C8630) * C507 -
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C501 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C506) +
            (C8631 + C8632) * C502 - C8641 * C508 - C8642 * C503) *
               C7787 +
           ((C8634 + C8633) * C507 -
            ((C8632 + C8631) * C501 + (C8630 + C8629) * C506) +
            (C8636 + C8635) * C502 - (C8637 + C8638) * C508 -
            (C8639 + C8640) * C503) *
               C7788 +
           ((C8638 + C8637) * C507 - (C8642 * C501 + C8641 * C506) +
            (C8640 + C8639) * C502 -
            (C49761 * C8596 + C50617 * C8598 + C49768 * C8597 +
             C50891 * C8599) *
                C508 -
            (C49761 * C8600 + C50617 * C8602 + C49768 * C8601 +
             C50891 * C8603) *
                C503) *
               C7789) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C121 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50672) *
                C50776 * C15422 +
            ((C15766 + C15767) * C121 + (C15768 + C15769) * C50672) * C50776 *
                C15423 +
            ((C15770 + C15771) * C121 + (C15772 + C15773) * C50672) * C50776 *
                C15424) *
               C250 -
           (((C15774 + C15775) * C50672 + (C15776 + C15777) * C121) * C50776 *
                C15424 +
            ((C15778 + C15779) * C50672 + (C15780 + C15781) * C121) * C50776 *
                C15423 +
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50672 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C121) *
                C50776 * C15422) *
               C251 +
           (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                 C121 +
             (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                 C50672) *
                C50776 * C15422 +
            ((C15782 + C15783) * C121 + (C15784 + C15785) * C50672) * C50776 *
                C15423 +
            ((C15786 + C15787) * C121 + (C15788 + C15789) * C50672) * C50776 *
                C15424) *
               C252) *
              C50907 +
          ((((C15781 + C15780) * C121 + (C15779 + C15778) * C50672) * C50776 *
                C15422 +
            ((C15777 + C15776) * C121 + (C15775 + C15774) * C50672) * C50776 *
                C15423 +
            ((C49768 * C1057 + C50891 * C1065 + C49761 * C1056 +
              C50617 * C1064) *
                 C121 +
             (C49768 * C1061 + C50891 * C1069 + C49761 * C1060 +
              C50617 * C1068) *
                 C50672) *
                C50776 * C15424) *
               C251 -
           (((C49761 * C1061 + C50617 * C1069 + C49768 * C1062 +
              C50891 * C1070) *
                 C50672 +
             (C49761 * C1057 + C50617 * C1065 + C49768 * C1058 +
              C50891 * C1066) *
                 C121) *
                C50776 * C15424 +
            ((C15773 + C15772) * C50672 + (C15771 + C15770) * C121) * C50776 *
                C15423 +
            ((C15769 + C15768) * C50672 + (C15767 + C15766) * C121) * C50776 *
                C15422) *
               C250 -
           (((C49761 * C1059 + C50617 * C1067 + C49768 * C1060 +
              C50891 * C1068) *
                 C50672 +
             (C49761 * C1055 + C50617 * C1063 + C49768 * C1056 +
              C50891 * C1064) *
                 C121) *
                C50776 * C15424 +
            ((C15789 + C15788) * C50672 + (C15787 + C15786) * C121) * C50776 *
                C15423 +
            ((C15785 + C15784) * C50672 + (C15783 + C15782) * C121) * C50776 *
                C15422) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C506 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C501 -
            (C7987 + C7988) * C507 - (C7989 + C7990) * C502 + C8303 * C508 +
            C8304 * C503) *
               C50776 * C15422 +
           ((C15766 + C15767) * C506 + (C15768 + C15769) * C501 -
            (C8630 + C8629) * C507 - (C8632 + C8631) * C502 +
            (C8634 + C8633) * C508 + (C8636 + C8635) * C503) *
               C50776 * C15423 +
           ((C15770 + C15771) * C506 + (C15772 + C15773) * C501 -
            (C8959 + C8960) * C507 - (C8961 + C8962) * C502 +
            (C8964 + C8963) * C508 + (C8966 + C8965) * C503) *
               C50776 * C15424) *
              C50638 * C50907 +
          (((C8629 + C8630) * C507 -
            ((C15769 + C15768) * C501 + (C15767 + C15766) * C506) +
            (C8631 + C8632) * C502 - C8641 * C508 - C8642 * C503) *
               C50776 * C15422 +
           ((C8960 + C8959) * C507 -
            ((C15773 + C15772) * C501 + (C15771 + C15770) * C506) +
            (C8962 + C8961) * C502 - (C8963 + C8964) * C508 -
            (C8965 + C8966) * C503) *
               C50776 * C15423 +
           ((C49768 * C3451 + C50891 * C3457 + C49761 * C3450 +
             C50617 * C3456) *
                C507 -
            ((C49761 * C1061 + C50617 * C1069 + C49768 * C1062 +
              C50891 * C1070) *
                 C501 +
             (C49761 * C1057 + C50617 * C1065 + C49768 * C1058 +
              C50891 * C1066) *
                 C506) +
            (C49768 * C3454 + C50891 * C3460 + C49761 * C3453 +
             C50617 * C3459) *
                C502 -
            (C49761 * C9064 + C50617 * C9068 + C49768 * C9065 +
             C50891 * C9069) *
                C508 -
            (C49761 * C9066 + C50617 * C9070 + C49768 * C9067 +
             C50891 * C9071) *
                C503) *
               C50776 * C15424) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C1174 +
            (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
            C10762 * C50688) *
               C10621 +
           (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
            C10764 * C50688) *
               C10622 +
           (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
            C10766 * C50688) *
               C10623 +
           (C10765 * C1174 + C10766 * C1169 - C10983 * C1175 -
            C10984 * C50688) *
               C10624) *
              C50802 * C50950 +
          ((C10767 * C1175 -
            ((C10625 * C134 + C50612 * C144) * C1169 +
             (C10625 * C123 + C50612 * C130) * C1174) +
            C10768 * C50688) *
               C10621 +
           (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
            C10770 * C50688) *
               C10622 +
           (C10771 * C1175 - (C10770 * C1169 + C10769 * C1174) +
            C10772 * C50688) *
               C10623 +
           (C10985 * C1175 - (C10772 * C1169 + C10771 * C1174) +
            C10986 * C50688) *
               C10624) *
              C50802 * C50936 +
          (((C10625 * C124 + C50612 * C131) * C1174 +
            (C10625 * C135 + C50612 * C145) * C1169 - C10773 * C1175 -
            C10774 * C50688) *
               C10621 +
           (C10773 * C1174 + C10774 * C1169 - C10775 * C1175 -
            C10776 * C50688) *
               C10622 +
           (C10775 * C1174 + C10776 * C1169 - C10777 * C1175 -
            C10778 * C50688) *
               C10623 +
           (C10777 * C1174 + C10778 * C1169 -
            (C10625 * C2805 + C50612 * C2808) * C1175 -
            (C10625 * C2811 + C50612 * C2814) * C50688) *
               C10624) *
              C50802 * C1173) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1174 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C1169 -
            (C2362 + C2363 + C2364) * C1175 -
            (C2365 + C2366 + C2367) * C50688) *
               C50919 +
           ((C2364 + C2363 + C2362) * C1174 + (C2367 + C2366 + C2365) * C1169 -
            (C2698 + C2697 + C2696) * C1175 -
            (C2701 + C2700 + C2699) * C50688) *
               C50790) *
              C50802 * C50950 +
          (((C2368 + C2369 + C2370) * C1175 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C1169 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C1174) +
            (C2371 + C2372 + C2373) * C50688) *
               C50919 +
           ((C2704 + C2703 + C2702) * C1175 -
            ((C2373 + C2372 + C2371) * C1169 +
             (C2370 + C2369 + C2368) * C1174) +
            (C2707 + C2706 + C2705) * C50688) *
               C50790) *
              C50802 * C50936 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C1174 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C1169 -
            (C2374 + C2375 + C2376) * C1175 -
            (C2377 + C2378 + C2379) * C50688) *
               C50919 +
           ((C2376 + C2375 + C2374) * C1174 + (C2379 + C2378 + C2377) * C1169 -
            (C2178 * C513 + C2173 * C522 + C2177 * C512 + C2172 * C517 +
             C2176 * C511 + C2171 * C516) *
                C1175 -
            (C2178 * C523 + C2173 * C528 + C2177 * C521 + C2172 * C527 +
             C2176 * C520 + C2171 * C526) *
                C50688) *
               C50790) *
              C50802 * C1173) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1174 +
             (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
             C10762 * C50688) *
                C50919 +
            (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
             C10764 * C50688) *
                C50790) *
               C15422 +
           ((C14287 + C14288 - C14289 - C14290) * C50919 +
            (C14291 + C14292 - C14293 - C14294) * C50790) *
               C15423 +
           ((C15315 + C15314 - C15313 - C15316) * C50919 +
            (C15319 + C15318 - C15317 - C15320) * C50790) *
               C15424) *
              C50950 +
          (((C10767 * C1175 -
             ((C10625 * C134 + C50612 * C144) * C1169 +
              (C10625 * C123 + C50612 * C130) * C1174) +
             C10768 * C50688) *
                C50919 +
            (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
             C10770 * C50688) *
                C50790) *
               C15422 +
           ((C14299 - (C14300 + C14301) + C14302) * C50919 +
            (C14303 - (C14304 + C14305) + C14306) * C50790) *
               C15423 +
           ((C13487 * C1175 - (C13486 * C1169 + C13485 * C1174) +
             C13488 * C50688) *
                C50919 +
            (C13489 * C1175 - (C13488 * C1169 + C13487 * C1174) +
             C13490 * C50688) *
                C50790) *
               C15424) *
              C50936 +
          ((((C10625 * C124 + C50612 * C131) * C1174 +
             (C10625 * C135 + C50612 * C145) * C1169 - C10773 * C1175 -
             C10774 * C50688) *
                C50919 +
            (C10773 * C1174 + C10774 * C1169 - C10775 * C1175 -
             C10776 * C50688) *
                C50790) *
               C15422 +
           ((C12903 * C1174 + C12904 * C1169 - C12725 * C1175 -
             C12726 * C50688) *
                C50919 +
            (C12725 * C1174 + C12726 * C1169 - C12727 * C1175 -
             C12728 * C50688) *
                C50790) *
               C15423 +
           ((C18538 * C1174 + C18539 * C1169 - C18384 * C1175 -
             C18385 * C50688) *
                C50919 +
            (C18384 * C1174 + C18385 * C1169 -
             (C10625 * C3321 + C50612 * C3324) * C1175 -
             (C10625 * C3327 + C50612 * C3330) * C50688) *
                C50790) *
               C15424) *
              C1173) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C1279 +
            (C10625 * C133 + C50612 * C143) * C50951 - C10761 * C1280 -
            C10762 * C50939 + C10763 * C1281 + C10764 * C1276) *
               C10621 +
           (C10761 * C1279 + C10762 * C50951 - C10763 * C1280 -
            C10764 * C50939 + C10765 * C1281 + C10766 * C1276) *
               C10622 +
           (C10763 * C1279 + C10764 * C50951 - C10765 * C1280 -
            C10766 * C50939 + C10983 * C1281 + C10984 * C1276) *
               C10623 +
           (C10765 * C1279 + C10766 * C50951 - C10983 * C1280 -
            C10984 * C50939 + C11061 * C1281 + C11062 * C1276) *
               C10624) *
              C50802 * C1277 +
          ((C10767 * C1280 -
            ((C10625 * C134 + C50612 * C144) * C50951 +
             (C10625 * C123 + C50612 * C130) * C1279) +
            C10768 * C50939 - C10769 * C1281 - C10770 * C1276) *
               C10621 +
           (C10769 * C1280 - (C10768 * C50951 + C10767 * C1279) +
            C10770 * C50939 - C10771 * C1281 - C10772 * C1276) *
               C10622 +
           (C10771 * C1280 - (C10770 * C50951 + C10769 * C1279) +
            C10772 * C50939 - C10985 * C1281 - C10986 * C1276) *
               C10623 +
           (C10985 * C1280 - (C10772 * C50951 + C10771 * C1279) +
            C10986 * C50939 - (C10625 * C8428 + C50612 * C8430) * C1281 -
            (C10625 * C8432 + C50612 * C8434) * C1276) *
               C10624) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1279 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50951 -
            (C2362 + C2363 + C2364) * C1280 - (C2365 + C2366 + C2367) * C50939 +
            (C2696 + C2697 + C2698) * C1281 + (C2699 + C2700 + C2701) * C1276) *
               C50919 +
           ((C2364 + C2363 + C2362) * C1279 + (C2367 + C2366 + C2365) * C50951 -
            (C2698 + C2697 + C2696) * C1280 - (C2701 + C2700 + C2699) * C50939 +
            (C2832 + C2831 + C2830) * C1281 + (C2835 + C2834 + C2833) * C1276) *
               C50790) *
              C50802 * C1277 +
          (((C2368 + C2369 + C2370) * C1280 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50951 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C1279) +
            (C2371 + C2372 + C2373) * C50939 - (C2702 + C2703 + C2704) * C1281 -
            (C2705 + C2706 + C2707) * C1276) *
               C50919 +
           ((C2704 + C2703 + C2702) * C1280 -
            ((C2373 + C2372 + C2371) * C50951 +
             (C2370 + C2369 + C2368) * C1279) +
            (C2707 + C2706 + C2705) * C50939 -
            (C2178 * C604 + C2173 * C608 + C2177 * C605 + C2172 * C609 +
             C2176 * C606 + C2171 * C610) *
                C1281 -
            (C2178 * C612 + C2173 * C616 + C2177 * C613 + C2172 * C617 +
             C2176 * C614 + C2171 * C618) *
                C1276) *
               C50790) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1279 +
             (C10625 * C133 + C50612 * C143) * C50951 - C10761 * C1280 -
             C10762 * C50939 + C10763 * C1281 + C10764 * C1276) *
                C50919 +
            (C10761 * C1279 + C10762 * C50951 - C10763 * C1280 -
             C10764 * C50939 + C10765 * C1281 + C10766 * C1276) *
                C50790) *
               C15422 +
           ((C15149 + C15150 - C15151 - C15152 + C15153 + C15154) * C50919 +
            (C15155 + C15156 - C15157 - C15158 + C15159 + C15160) * C50790) *
               C15423 +
           ((C13492 * C1279 + C13491 * C50951 - C11401 * C1280 -
             C11402 * C50939 + C11403 * C1281 + C11404 * C1276) *
                C50919 +
            (C11401 * C1279 + C11402 * C50951 - C11403 * C1280 -
             C11404 * C50939 + C11405 * C1281 + C11406 * C1276) *
                C50790) *
               C15424) *
              C1277 +
          (((C10767 * C1280 -
             ((C10625 * C134 + C50612 * C144) * C50951 +
              (C10625 * C123 + C50612 * C130) * C1279) +
             C10768 * C50939 - C10769 * C1281 - C10770 * C1276) *
                C50919 +
            (C10769 * C1280 - (C10768 * C50951 + C10767 * C1279) +
             C10770 * C50939 - C10771 * C1281 - C10772 * C1276) *
                C50790) *
               C15422 +
           ((C11815 * C1280 - (C12901 * C50951 + C12902 * C1279) +
             C11816 * C50939 - C11817 * C1281 - C11818 * C1276) *
                C50919 +
            (C11817 * C1280 - (C11816 * C50951 + C11815 * C1279) +
             C11818 * C50939 - C11819 * C1281 - C11820 * C1276) *
                C50790) *
               C15423 +
           ((C13487 * C1280 - (C13486 * C50951 + C13485 * C1279) +
             C13488 * C50939 - C13489 * C1281 - C13490 * C1276) *
                C50919 +
            (C13489 * C1280 - (C13488 * C50951 + C13487 * C1279) +
             C13490 * C50939 - (C10625 * C8934 + C50612 * C8936) * C1281 -
             (C10625 * C8938 + C50612 * C8940) * C1276) *
                C50790) *
               C15424) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1174 +
             (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
             C10762 * C50688) *
                C10621 +
            (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
             C10764 * C50688) *
                C10622 +
            (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
             C10766 * C50688) *
                C10623 +
            (C10765 * C1174 + C10766 * C1169 - C10983 * C1175 -
             C10984 * C50688) *
                C10624) *
               C50802 * C1277 +
           ((C10767 * C1175 -
             ((C10625 * C134 + C50612 * C144) * C1169 +
              (C10625 * C123 + C50612 * C130) * C1174) +
             C10768 * C50688) *
                C10621 +
            (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
             C10770 * C50688) *
                C10622 +
            (C10771 * C1175 - (C10770 * C1169 + C10769 * C1174) +
             C10772 * C50688) *
                C10623 +
            (C10985 * C1175 - (C10772 * C1169 + C10771 * C1174) +
             C10986 * C50688) *
                C10624) *
               C50802 * C50643) *
              C50907 +
          (((C11181 * C1175 -
             ((C10625 * C393 + C50612 * C401) * C1169 +
              (C10625 * C383 + C50612 * C394) * C1174) +
             C11182 * C50688) *
                C10621 +
            (C11183 * C1175 - (C11182 * C1169 + C11181 * C1174) +
             C11184 * C50688) *
                C10622 +
            (C11185 * C1175 - (C11184 * C1169 + C11183 * C1174) +
             C11186 * C50688) *
                C10623 +
            (C11187 * C1175 - (C11186 * C1169 + C11185 * C1174) +
             C11188 * C50688) *
                C10624) *
               C50802 * C1277 +
           (((C10625 * C379 + C50612 * C385) * C1174 +
             (C10625 * C389 + C50612 * C397) * C1169 - C11815 * C1175 -
             C11816 * C50688) *
                C10621 +
            (C11815 * C1174 + C11816 * C1169 - C11817 * C1175 -
             C11818 * C50688) *
                C10622 +
            (C11817 * C1174 + C11818 * C1169 - C11819 * C1175 -
             C11820 * C50688) *
                C10623 +
            (C11819 * C1174 + C11820 * C1169 -
             (C10625 * C8596 + C50612 * C8598) * C1175 -
             (C10625 * C8600 + C50612 * C8602) * C50688) *
                C10624) *
               C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C1174 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C1169 -
             (C2362 + C2363 + C2364) * C1175 -
             (C2365 + C2366 + C2367) * C50688) *
                C50919 +
            ((C2364 + C2363 + C2362) * C1174 + (C2367 + C2366 + C2365) * C1169 -
             (C2698 + C2697 + C2696) * C1175 -
             (C2701 + C2700 + C2699) * C50688) *
                C50790) *
               C50802 * C1277 +
           (((C2368 + C2369 + C2370) * C1175 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C1169 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C1174) +
             (C2371 + C2372 + C2373) * C50688) *
                C50919 +
            ((C2704 + C2703 + C2702) * C1175 -
             ((C2373 + C2372 + C2371) * C1169 +
              (C2370 + C2369 + C2368) * C1174) +
             (C2707 + C2706 + C2705) * C50688) *
                C50790) *
               C50802 * C50643) *
              C50907 +
          ((((C3018 + C3019 + C3020) * C1175 -
             ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
               C2176 * C393 + C2171 * C401) *
                  C1169 +
              (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
               C2176 * C383 + C2171 * C394) *
                  C1174) +
             (C3021 + C3022 + C3023) * C50688) *
                C50919 +
            ((C3026 + C3025 + C3024) * C1175 -
             ((C3023 + C3022 + C3021) * C1169 +
              (C3020 + C3019 + C3018) * C1174) +
             (C3029 + C3028 + C3027) * C50688) *
                C50790) *
               C50802 * C1277 +
           (((C2176 * C379 + C2171 * C385 + C2177 * C380 + C2172 * C386 +
              C2178 * C381 + C2173 * C387) *
                 C1174 +
             (C2176 * C389 + C2171 * C397 + C2177 * C390 + C2172 * C398 +
              C2178 * C391 + C2173 * C399) *
                 C1169 -
             (C3960 + C3961 + C3962) * C1175 -
             (C3963 + C3964 + C3965) * C50688) *
                C50919 +
            ((C3962 + C3961 + C3960) * C1174 + (C3965 + C3964 + C3963) * C1169 -
             (C2178 * C722 + C2173 * C734 + C2177 * C723 + C2172 * C735 +
              C2176 * C724 + C2171 * C736) *
                 C1175 -
             (C2178 * C738 + C2173 * C746 + C2177 * C739 + C2172 * C747 +
              C2176 * C740 + C2171 * C748) *
                 C50688) *
                C50790) *
               C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C1174 +
              (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
              C10762 * C50688) *
                 C50919 +
             (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
              C10764 * C50688) *
                 C50790) *
                C15422 +
            ((C14287 + C14288 - C14289 - C14290) * C50919 +
             (C14291 + C14292 - C14293 - C14294) * C50790) *
                C15423 +
            ((C15315 + C15314 - C15313 - C15316) * C50919 +
             (C15319 + C15318 - C15317 - C15320) * C50790) *
                C15424) *
               C1277 +
           (((C10767 * C1175 -
              ((C10625 * C134 + C50612 * C144) * C1169 +
               (C10625 * C123 + C50612 * C130) * C1174) +
              C10768 * C50688) *
                 C50919 +
             (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
              C10770 * C50688) *
                 C50790) *
                C15422 +
            ((C14299 - (C14300 + C14301) + C14302) * C50919 +
             (C14303 - (C14304 + C14305) + C14306) * C50790) *
                C15423 +
            ((C19888 - (C19889 + C19890) + C19891) * C50919 +
             (C19892 - (C19893 + C19894) + C19895) * C50790) *
                C15424) *
               C50643) *
              C50907 +
          ((((C14289 - (C14288 + C14287) + C14290) * C50919 +
             (C14293 - (C14292 + C14291) + C14294) * C50790) *
                C15422 +
            ((C15313 - (C15314 + C15315) + C15316) * C50919 +
             (C15317 - (C15318 + C15319) + C15320) * C50790) *
                C15423 +
            ((C13679 * C1175 - (C13798 * C1169 + C13797 * C1174) +
              C13680 * C50688) *
                 C50919 +
             (C13681 * C1175 - (C13680 * C1169 + C13679 * C1174) +
              C13682 * C50688) *
                 C50790) *
                C15424) *
               C1277 +
           (((C14301 + C14300 - C14299 - C14302) * C50919 +
             (C14305 + C14304 - C14303 - C14306) * C50790) *
                C15422 +
            ((C19890 + C19889 - C19888 - C19891) * C50919 +
             (C19894 + C19893 - C19892 - C19895) * C50790) *
                C15423 +
            ((C19106 * C1174 + C19107 * C1169 - C19108 * C1175 -
              C19109 * C50688) *
                 C50919 +
             (C19108 * C1174 + C19109 * C1169 -
              (C10625 * C9064 + C50612 * C9068) * C1175 -
              (C10625 * C9066 + C50612 * C9070) * C50688) *
                 C50790) *
                C15424) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1174 +
             (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
             C10762 * C50688) *
                C10621 +
            (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
             C10764 * C50688) *
                C10622 +
            (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
             C10766 * C50688) *
                C10623 +
            (C10765 * C1174 + C10766 * C1169 - C10983 * C1175 -
             C10984 * C50688) *
                C10624) *
               C50802 * C50898 +
           ((C10767 * C1175 -
             ((C10625 * C134 + C50612 * C144) * C1169 +
              (C10625 * C123 + C50612 * C130) * C1174) +
             C10768 * C50688) *
                C10621 +
            (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
             C10770 * C50688) *
                C10622 +
            (C10771 * C1175 - (C10770 * C1169 + C10769 * C1174) +
             C10772 * C50688) *
                C10623 +
            (C10985 * C1175 - (C10772 * C1169 + C10771 * C1174) +
             C10986 * C50688) *
                C10624) *
               C50802 * C50643) *
              C1514 +
          (((C11181 * C1175 -
             ((C10625 * C393 + C50612 * C401) * C1169 +
              (C10625 * C383 + C50612 * C394) * C1174) +
             C11182 * C50688) *
                C10621 +
            (C11183 * C1175 - (C11182 * C1169 + C11181 * C1174) +
             C11184 * C50688) *
                C10622 +
            (C11185 * C1175 - (C11184 * C1169 + C11183 * C1174) +
             C11186 * C50688) *
                C10623 +
            (C11187 * C1175 - (C11186 * C1169 + C11185 * C1174) +
             C11188 * C50688) *
                C10624) *
               C50802 * C50898 +
           (((C10625 * C379 + C50612 * C385) * C1174 +
             (C10625 * C389 + C50612 * C397) * C1169 - C11815 * C1175 -
             C11816 * C50688) *
                C10621 +
            (C11815 * C1174 + C11816 * C1169 - C11817 * C1175 -
             C11818 * C50688) *
                C10622 +
            (C11817 * C1174 + C11818 * C1169 - C11819 * C1175 -
             C11820 * C50688) *
                C10623 +
            (C11819 * C1174 + C11820 * C1169 -
             (C10625 * C8596 + C50612 * C8598) * C1175 -
             (C10625 * C8600 + C50612 * C8602) * C50688) *
                C10624) *
               C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C1174 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C1169 -
             (C2362 + C2363 + C2364) * C1175 -
             (C2365 + C2366 + C2367) * C50688) *
                C50919 +
            ((C2364 + C2363 + C2362) * C1174 + (C2367 + C2366 + C2365) * C1169 -
             (C2698 + C2697 + C2696) * C1175 -
             (C2701 + C2700 + C2699) * C50688) *
                C50790) *
               C50802 * C50898 +
           (((C2368 + C2369 + C2370) * C1175 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C1169 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C1174) +
             (C2371 + C2372 + C2373) * C50688) *
                C50919 +
            ((C2704 + C2703 + C2702) * C1175 -
             ((C2373 + C2372 + C2371) * C1169 +
              (C2370 + C2369 + C2368) * C1174) +
             (C2707 + C2706 + C2705) * C50688) *
                C50790) *
               C50802 * C50643) *
              C1514 +
          ((((C3018 + C3019 + C3020) * C1175 -
             ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
               C2176 * C393 + C2171 * C401) *
                  C1169 +
              (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
               C2176 * C383 + C2171 * C394) *
                  C1174) +
             (C3021 + C3022 + C3023) * C50688) *
                C50919 +
            ((C3026 + C3025 + C3024) * C1175 -
             ((C3023 + C3022 + C3021) * C1169 +
              (C3020 + C3019 + C3018) * C1174) +
             (C3029 + C3028 + C3027) * C50688) *
                C50790) *
               C50802 * C50898 +
           (((C2176 * C379 + C2171 * C385 + C2177 * C380 + C2172 * C386 +
              C2178 * C381 + C2173 * C387) *
                 C1174 +
             (C2176 * C389 + C2171 * C397 + C2177 * C390 + C2172 * C398 +
              C2178 * C391 + C2173 * C399) *
                 C1169 -
             (C3960 + C3961 + C3962) * C1175 -
             (C3963 + C3964 + C3965) * C50688) *
                C50919 +
            ((C3962 + C3961 + C3960) * C1174 + (C3965 + C3964 + C3963) * C1169 -
             (C2178 * C722 + C2173 * C734 + C2177 * C723 + C2172 * C735 +
              C2176 * C724 + C2171 * C736) *
                 C1175 -
             (C2178 * C738 + C2173 * C746 + C2177 * C739 + C2172 * C747 +
              C2176 * C740 + C2171 * C748) *
                 C50688) *
                C50790) *
               C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C1174 +
              (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
              C10762 * C50688) *
                 C50919 +
             (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
              C10764 * C50688) *
                 C50790) *
                C15422 +
            ((C14287 + C14288 - C14289 - C14290) * C50919 +
             (C14291 + C14292 - C14293 - C14294) * C50790) *
                C15423 +
            ((C15315 + C15314 - C15313 - C15316) * C50919 +
             (C15319 + C15318 - C15317 - C15320) * C50790) *
                C15424) *
               C50898 +
           (((C10767 * C1175 -
              ((C10625 * C134 + C50612 * C144) * C1169 +
               (C10625 * C123 + C50612 * C130) * C1174) +
              C10768 * C50688) *
                 C50919 +
             (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
              C10770 * C50688) *
                 C50790) *
                C15422 +
            ((C14299 - (C14300 + C14301) + C14302) * C50919 +
             (C14303 - (C14304 + C14305) + C14306) * C50790) *
                C15423 +
            ((C19888 - (C19889 + C19890) + C19891) * C50919 +
             (C19892 - (C19893 + C19894) + C19895) * C50790) *
                C15424) *
               C50643) *
              C1514 +
          ((((C14289 - (C14288 + C14287) + C14290) * C50919 +
             (C14293 - (C14292 + C14291) + C14294) * C50790) *
                C15422 +
            ((C15313 - (C15314 + C15315) + C15316) * C50919 +
             (C15317 - (C15318 + C15319) + C15320) * C50790) *
                C15423 +
            ((C13679 * C1175 - (C13798 * C1169 + C13797 * C1174) +
              C13680 * C50688) *
                 C50919 +
             (C13681 * C1175 - (C13680 * C1169 + C13679 * C1174) +
              C13682 * C50688) *
                 C50790) *
                C15424) *
               C50898 +
           (((C14301 + C14300 - C14299 - C14302) * C50919 +
             (C14305 + C14304 - C14303 - C14306) * C50790) *
                C15422 +
            ((C19890 + C19889 - C19888 - C19891) * C50919 +
             (C19894 + C19893 - C19892 - C19895) * C50790) *
                C15423 +
            ((C19106 * C1174 + C19107 * C1169 - C19108 * C1175 -
              C19109 * C50688) *
                 C50919 +
             (C19108 * C1174 + C19109 * C1169 -
              (C10625 * C9064 + C50612 * C9068) * C1175 -
              (C10625 * C9066 + C50612 * C9070) * C50688) *
                 C50790) *
                C15424) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C1279 +
            (C10625 * C133 + C50612 * C143) * C50951 - C10761 * C1280 -
            C10762 * C50939 + C10763 * C1281 + C10764 * C1276) *
               C10621 +
           (C10761 * C1279 + C10762 * C50951 - C10763 * C1280 -
            C10764 * C50939 + C10765 * C1281 + C10766 * C1276) *
               C10622 +
           (C10763 * C1279 + C10764 * C50951 - C10765 * C1280 -
            C10766 * C50939 + C10983 * C1281 + C10984 * C1276) *
               C10623 +
           (C10765 * C1279 + C10766 * C50951 - C10983 * C1280 -
            C10984 * C50939 + C11061 * C1281 + C11062 * C1276) *
               C10624) *
              C50802 * C50638 * C1514 +
          ((C11181 * C1280 -
            ((C10625 * C393 + C50612 * C401) * C50951 +
             (C10625 * C383 + C50612 * C394) * C1279) +
            C11182 * C50939 - C11183 * C1281 - C11184 * C1276) *
               C10621 +
           (C11183 * C1280 - (C11182 * C50951 + C11181 * C1279) +
            C11184 * C50939 - C11185 * C1281 - C11186 * C1276) *
               C10622 +
           (C11185 * C1280 - (C11184 * C50951 + C11183 * C1279) +
            C11186 * C50939 - C11187 * C1281 - C11188 * C1276) *
               C10623 +
           (C11187 * C1280 - (C11186 * C50951 + C11185 * C1279) +
            C11188 * C50939 - (C10625 * C11160 + C50612 * C11161) * C1281 -
            (C10625 * C11162 + C50612 * C11163) * C1276) *
               C10624) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1279 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50951 -
            (C2362 + C2363 + C2364) * C1280 - (C2365 + C2366 + C2367) * C50939 +
            (C2696 + C2697 + C2698) * C1281 + (C2699 + C2700 + C2701) * C1276) *
               C50919 +
           ((C2364 + C2363 + C2362) * C1279 + (C2367 + C2366 + C2365) * C50951 -
            (C2698 + C2697 + C2696) * C1280 - (C2701 + C2700 + C2699) * C50939 +
            (C2832 + C2831 + C2830) * C1281 + (C2835 + C2834 + C2833) * C1276) *
               C50790) *
              C50802 * C50638 * C1514 +
          (((C3018 + C3019 + C3020) * C1280 -
            ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
              C2176 * C393 + C2171 * C401) *
                 C50951 +
             (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
              C2176 * C383 + C2171 * C394) *
                 C1279) +
            (C3021 + C3022 + C3023) * C50939 - (C3024 + C3025 + C3026) * C1281 -
            (C3027 + C3028 + C3029) * C1276) *
               C50919 +
           ((C3026 + C3025 + C3024) * C1280 -
            ((C3023 + C3022 + C3021) * C50951 +
             (C3020 + C3019 + C3018) * C1279) +
            (C3029 + C3028 + C3027) * C50939 -
            (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
             C2176 * C2983 + C2171 * C2986) *
                C1281 -
            (C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
             C2176 * C2989 + C2171 * C2992) *
                C1276) *
               C50790) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1279 +
             (C10625 * C133 + C50612 * C143) * C50951 - C10761 * C1280 -
             C10762 * C50939 + C10763 * C1281 + C10764 * C1276) *
                C50919 +
            (C10761 * C1279 + C10762 * C50951 - C10763 * C1280 -
             C10764 * C50939 + C10765 * C1281 + C10766 * C1276) *
                C50790) *
               C15422 +
           ((C15149 + C15150 - C15151 - C15152 + C15153 + C15154) * C50919 +
            (C15155 + C15156 - C15157 - C15158 + C15159 + C15160) * C50790) *
               C15423 +
           ((C20730 + C20731 - C20732 - C20733 + C20734 + C20735) * C50919 +
            (C20736 + C20737 - C20738 - C20739 + C20740 + C20741) * C50790) *
               C15424) *
              C50638 * C1514 +
          (((C15151 - (C15150 + C15149) + C15152 - C15153 - C15154) * C50919 +
            (C15157 - (C15156 + C15155) + C15158 - C15159 - C15160) * C50790) *
               C15422 +
           ((C20732 - (C20731 + C20730) + C20733 - C20734 - C20735) * C50919 +
            (C20738 - (C20737 + C20736) + C20739 - C20740 - C20741) * C50790) *
               C15423 +
           ((C13679 * C1280 - (C13798 * C50951 + C13797 * C1279) +
             C13680 * C50939 - C13681 * C1281 - C13682 * C1276) *
                C50919 +
            (C13681 * C1280 - (C13680 * C50951 + C13679 * C1279) +
             C13682 * C50939 - (C10625 * C11472 + C50612 * C11474) * C1281 -
             (C10625 * C11473 + C50612 * C11475) * C1276) *
                C50790) *
               C15424) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C1174 +
            (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
            C10762 * C50688) *
               C10621 +
           (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
            C10764 * C50688) *
               C10622 +
           (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
            C10766 * C50688) *
               C10623 +
           (C10765 * C1174 + C10766 * C1169 - C10983 * C1175 -
            C10984 * C50688) *
               C10624) *
              C50802 * C50638 * C50952 +
          ((C11181 * C1175 -
            ((C10625 * C393 + C50612 * C401) * C1169 +
             (C10625 * C383 + C50612 * C394) * C1174) +
            C11182 * C50688) *
               C10621 +
           (C11183 * C1175 - (C11182 * C1169 + C11181 * C1174) +
            C11184 * C50688) *
               C10622 +
           (C11185 * C1175 - (C11184 * C1169 + C11183 * C1174) +
            C11186 * C50688) *
               C10623 +
           (C11187 * C1175 - (C11186 * C1169 + C11185 * C1174) +
            C11188 * C50688) *
               C10624) *
              C50802 * C50638 * C50942 +
          (((C10625 * C851 + C50612 * C856) * C1174 +
            (C10625 * C860 + C50612 * C866) * C1169 - C11401 * C1175 -
            C11402 * C50688) *
               C10621 +
           (C11401 * C1174 + C11402 * C1169 - C11403 * C1175 -
            C11404 * C50688) *
               C10622 +
           (C11403 * C1174 + C11404 * C1169 - C11405 * C1175 -
            C11406 * C50688) *
               C10623 +
           (C11405 * C1174 + C11406 * C1169 -
            (C10625 * C11384 + C50612 * C11385) * C1175 -
            (C10625 * C11386 + C50612 * C11387) * C50688) *
               C10624) *
              C50802 * C50638 * C1746)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1174 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C1169 -
            (C2362 + C2363 + C2364) * C1175 -
            (C2365 + C2366 + C2367) * C50688) *
               C50919 +
           ((C2364 + C2363 + C2362) * C1174 + (C2367 + C2366 + C2365) * C1169 -
            (C2698 + C2697 + C2696) * C1175 -
            (C2701 + C2700 + C2699) * C50688) *
               C50790) *
              C50802 * C50638 * C50952 +
          (((C3018 + C3019 + C3020) * C1175 -
            ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
              C2176 * C393 + C2171 * C401) *
                 C1169 +
             (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
              C2176 * C383 + C2171 * C394) *
                 C1174) +
            (C3021 + C3022 + C3023) * C50688) *
               C50919 +
           ((C3026 + C3025 + C3024) * C1175 -
            ((C3023 + C3022 + C3021) * C1169 +
             (C3020 + C3019 + C3018) * C1174) +
            (C3029 + C3028 + C3027) * C50688) *
               C50790) *
              C50802 * C50638 * C50942 +
          (((C2176 * C851 + C2171 * C856 + C2177 * C852 + C2172 * C857 +
             C2178 * C853 + C2173 * C858) *
                C1174 +
            (C2176 * C860 + C2171 * C866 + C2177 * C861 + C2172 * C867 +
             C2178 * C862 + C2173 * C868) *
                C1169 -
            (C3346 + C3347 + C3348) * C1175 -
            (C3349 + C3350 + C3351) * C50688) *
               C50919 +
           ((C3348 + C3347 + C3346) * C1174 + (C3351 + C3350 + C3349) * C1169 -
            (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
             C2176 * C3323 + C2171 * C3326) *
                C1175 -
            (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
             C2176 * C3329 + C2171 * C3332) *
                C50688) *
               C50790) *
              C50802 * C50638 * C1746)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1174 +
             (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
             C10762 * C50688) *
                C50919 +
            (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
             C10764 * C50688) *
                C50790) *
               C15422 +
           ((C14287 + C14288 - C14289 - C14290) * C50919 +
            (C14291 + C14292 - C14293 - C14294) * C50790) *
               C15423 +
           C20904 * C15424) *
              C50638 * C50952 +
          (((C14289 - (C14288 + C14287) + C14290) * C50919 +
            (C14293 - (C14292 + C14291) + C14294) * C50790) *
               C15422 +
           ((C15313 - (C15314 + C15315) + C15316) * C50919 +
            (C15317 - (C15318 + C15319) + C15320) * C50790) *
               C15423 +
           ((C20890 - (C20891 + C20892) + C20893) * C50919 +
            (C20894 - (C20895 + C20896) + C20897) * C50790) *
               C15424) *
              C50638 * C50942 +
          (C20904 * C15422 +
           ((C20892 + C20891 - C20890 - C20893) * C50919 +
            (C20896 + C20895 - C20894 - C20897) * C50790) *
               C15423 +
           ((C19397 * C1174 + C19398 * C1169 - C19278 * C1175 -
             C19279 * C50688) *
                C50919 +
            (C19278 * C1174 + C19279 * C1169 -
             (C10625 * C13780 + C50612 * C13783) * C1175 -
             (C10625 * C13782 + C50612 * C13786) * C50688) *
                C50790) *
               C15424) *
              C50638 * C1746)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                 C2178 * C124 + C2173 * C131) *
                    C121 +
                (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                 C2178 * C135 + C2173 * C145) *
                    C50672) *
                   C50919 +
               ((C2176 * C258 + C2171 * C264 + C2177 * C257 + C2172 * C263 +
                 C2178 * C256 + C2173 * C262) *
                    C121 +
                (C2176 * C268 + C2171 * C276 + C2177 * C267 + C2172 * C275 +
                 C2178 * C266 + C2173 * C274) *
                    C50672) *
                   C50790) *
                  C50802 * C112 -
              (((C2178 * C265 + C2173 * C273 + C2177 * C266 + C2172 * C274 +
                 C2176 * C267 + C2171 * C275) *
                    C50672 +
                (C2178 * C255 + C2173 * C261 + C2177 * C256 + C2172 * C262 +
                 C2176 * C257 + C2171 * C263) *
                    C121) *
                   C50790 +
               ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
                 C2176 * C134 + C2171 * C144) *
                    C50672 +
                (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
                 C2176 * C123 + C2171 * C130) *
                    C121) *
                   C50919) *
                  C50802 * C113 +
              (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
                 C2178 * C126 + C2173 * C138) *
                    C121 +
                (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
                 C2178 * C137 + C2173 * C147) *
                    C50672) *
                   C50919 +
               ((C2176 * C256 + C2171 * C262 + C2177 * C255 + C2172 * C261 +
                 C2178 * C259 + C2173 * C269) *
                    C121 +
                (C2176 * C266 + C2171 * C274 + C2177 * C265 + C2172 * C273 +
                 C2178 * C270 + C2173 * C277) *
                    C50672) *
                   C50790) *
                  C50802 * C114 -
              (((C2178 * C272 + C2173 * C278 + C2177 * C270 + C2172 * C277 +
                 C2176 * C265 + C2171 * C273) *
                    C50672 +
                (C2178 * C260 + C2173 * C271 + C2177 * C259 + C2172 * C269 +
                 C2176 * C255 + C2171 * C261) *
                    C121) *
                   C50790 +
               ((C2178 * C140 + C2173 * C148 + C2177 * C137 + C2172 * C147 +
                 C2176 * C136 + C2171 * C146) *
                    C50672 +
                (C2178 * C127 + C2173 * C139 + C2177 * C126 + C2172 * C138 +
                 C2176 * C125 + C2171 * C132) *
                    C121) *
                   C50919) *
                  C50802 * C115) *
             C50702 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                 C2178 * C124 + C2173 * C131) *
                    C506 +
                (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                 C2178 * C135 + C2173 * C145) *
                    C501 -
                (C2362 + C2363 + C2364) * C507 -
                (C2365 + C2366 + C2367) * C502 +
                (C2696 + C2697 + C2698) * C508 +
                (C2699 + C2700 + C2701) * C503) *
                   C50919 +
               ((C2364 + C2363 + C2362) * C506 +
                (C2367 + C2366 + C2365) * C501 -
                (C2698 + C2697 + C2696) * C507 -
                (C2701 + C2700 + C2699) * C502 +
                (C2176 * C607 + C2171 * C611 + C2177 * C606 + C2172 * C610 +
                 C2178 * C605 + C2173 * C609) *
                    C508 +
                (C2176 * C615 + C2171 * C619 + C2177 * C614 + C2172 * C618 +
                 C2178 * C613 + C2173 * C617) *
                    C503) *
                   C50790) *
                  C50802 * C50898 +
              (((C2368 + C2369 + C2370) * C507 -
                ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
                  C2176 * C134 + C2171 * C144) *
                     C501 +
                 (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
                  C2176 * C123 + C2171 * C130) *
                     C506) +
                (C2371 + C2372 + C2373) * C502 -
                (C2702 + C2703 + C2704) * C508 -
                (C2705 + C2706 + C2707) * C503) *
                   C50919 +
               ((C2704 + C2703 + C2702) * C507 -
                ((C2373 + C2372 + C2371) * C501 +
                 (C2370 + C2369 + C2368) * C506) +
                (C2707 + C2706 + C2705) * C502 -
                (C2178 * C604 + C2173 * C608 + C2177 * C605 + C2172 * C609 +
                 C2176 * C606 + C2171 * C610) *
                    C508 -
                (C2178 * C612 + C2173 * C616 + C2177 * C613 + C2172 * C617 +
                 C2176 * C614 + C2171 * C618) *
                    C503) *
                   C50790) *
                  C50802 * C50643) *
             C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C2176 * C122 + C2171 * C129 + C2177 * C123 +
                                  C2172 * C130 + C2178 * C124 + C2173 * C131) *
                                     C121 +
                                 (C2176 * C133 + C2171 * C143 + C2177 * C134 +
                                  C2172 * C144 + C2178 * C135 + C2173 * C145) *
                                     C50672) *
                                    C50919 +
                                ((C2364 + C2363 + C2362) * C121 +
                                 (C2367 + C2366 + C2365) * C50672) *
                                    C50790) *
                                   C50802 * C50898 -
                               (((C2373 + C2372 + C2371) * C50672 +
                                 (C2370 + C2369 + C2368) * C121) *
                                    C50790 +
                                ((C2178 * C136 + C2173 * C146 + C2177 * C135 +
                                  C2172 * C145 + C2176 * C134 + C2171 * C144) *
                                     C50672 +
                                 (C2178 * C125 + C2173 * C132 + C2177 * C124 +
                                  C2172 * C131 + C2176 * C123 + C2171 * C130) *
                                     C121) *
                                    C50919) *
                                   C50802 * C50643) *
                                  C848 +
                              ((((C2176 * C379 + C2171 * C385 + C2177 * C380 +
                                  C2172 * C386 + C2178 * C381 + C2173 * C387) *
                                     C121 +
                                 (C2176 * C389 + C2171 * C397 + C2177 * C390 +
                                  C2172 * C398 + C2178 * C391 + C2173 * C399) *
                                     C50672) *
                                    C50919 +
                                ((C2176 * C719 + C2171 * C727 + C2177 * C720 +
                                  C2172 * C728 + C2178 * C721 + C2173 * C729) *
                                     C121 +
                                 (C2176 * C731 + C2171 * C743 + C2177 * C732 +
                                  C2172 * C744 + C2178 * C733 + C2173 * C745) *
                                     C50672) *
                                    C50790) *
                                   C50802 * C50643 -
                               (((C3023 + C3022 + C3021) * C50672 +
                                 (C3020 + C3019 + C3018) * C121) *
                                    C50790 +
                                ((C2178 * C390 + C2173 * C398 + C2177 * C389 +
                                  C2172 * C397 + C2176 * C393 + C2171 * C401) *
                                     C50672 +
                                 (C2178 * C380 + C2173 * C386 + C2177 * C379 +
                                  C2172 * C385 + C2176 * C383 + C2171 * C394) *
                                     C121) *
                                    C50919) *
                                   C50802 * C50898) *
                                  C849 +
                              ((((C2176 * C851 + C2171 * C856 + C2177 * C852 +
                                  C2172 * C857 + C2178 * C853 + C2173 * C858) *
                                     C121 +
                                 (C2176 * C860 + C2171 * C866 + C2177 * C861 +
                                  C2172 * C867 + C2178 * C862 + C2173 * C868) *
                                     C50672) *
                                    C50919 +
                                ((C2176 * C972 + C2171 * C976 + C2177 * C971 +
                                  C2172 * C975 + C2178 * C970 + C2173 * C974) *
                                     C121 +
                                 (C2176 * C980 + C2171 * C984 + C2177 * C979 +
                                  C2172 * C983 + C2178 * C978 + C2173 * C982) *
                                     C50672) *
                                    C50790) *
                                   C50802 * C50898 -
                               (((C2178 * C977 + C2173 * C981 + C2177 * C978 +
                                  C2172 * C982 + C2176 * C979 + C2171 * C983) *
                                     C50672 +
                                 (C2178 * C969 + C2173 * C973 + C2177 * C970 +
                                  C2172 * C974 + C2176 * C971 + C2171 * C975) *
                                     C121) *
                                    C50790 +
                                ((C2178 * C863 + C2173 * C869 + C2177 * C862 +
                                  C2172 * C868 + C2176 * C861 + C2171 * C867) *
                                     C50672 +
                                 (C2178 * C854 + C2173 * C859 + C2177 * C853 +
                                  C2172 * C858 + C2176 * C852 + C2171 * C857) *
                                     C121) *
                                    C50919) *
                                   C50802 * C50643) *
                                  C850)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C121 +
            (C10625 * C133 + C50612 * C143) * C50672) *
               C10621 +
           ((C10625 * C258 + C50612 * C264) * C121 +
            (C10625 * C268 + C50612 * C276) * C50672) *
               C10622 +
           ((C10625 * C509 + C50612 * C514) * C121 +
            (C10625 * C518 + C50612 * C524) * C50672) *
               C10623 +
           ((C10625 * C607 + C50612 * C611) * C121 +
            (C10625 * C615 + C50612 * C619) * C50672) *
               C10624) *
              C50802 * C112 -
          (((C10625 * C614 + C50612 * C618) * C50672 +
            (C10625 * C606 + C50612 * C610) * C121) *
               C10624 +
           ((C10625 * C519 + C50612 * C525) * C50672 +
            (C10625 * C510 + C50612 * C515) * C121) *
               C10623 +
           ((C10625 * C267 + C50612 * C275) * C50672 +
            (C10625 * C257 + C50612 * C263) * C121) *
               C10622 +
           ((C10625 * C134 + C50612 * C144) * C50672 +
            (C10625 * C123 + C50612 * C130) * C121) *
               C10621) *
              C50802 * C113 +
          (((C10625 * C124 + C50612 * C131) * C121 +
            (C10625 * C135 + C50612 * C145) * C50672) *
               C10621 +
           ((C10625 * C256 + C50612 * C262) * C121 +
            (C10625 * C266 + C50612 * C274) * C50672) *
               C10622 +
           ((C10625 * C511 + C50612 * C516) * C121 +
            (C10625 * C520 + C50612 * C526) * C50672) *
               C10623 +
           ((C10625 * C605 + C50612 * C609) * C121 +
            (C10625 * C613 + C50612 * C617) * C50672) *
               C10624) *
              C50802 * C114 -
          (((C10625 * C612 + C50612 * C616) * C50672 +
            (C10625 * C604 + C50612 * C608) * C121) *
               C10624 +
           ((C10625 * C521 + C50612 * C527) * C50672 +
            (C10625 * C512 + C50612 * C517) * C121) *
               C10623 +
           ((C10625 * C265 + C50612 * C273) * C50672 +
            (C10625 * C255 + C50612 * C261) * C121) *
               C10622 +
           ((C10625 * C136 + C50612 * C146) * C50672 +
            (C10625 * C125 + C50612 * C132) * C121) *
               C10621) *
              C50802 * C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C506 +
            (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
            C10762 * C502 + C10763 * C508 + C10764 * C503) *
               C10621 +
           (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
            C10765 * C508 + C10766 * C503) *
               C10622 +
           (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
            C10983 * C508 + C10984 * C503) *
               C10623 +
           (C10765 * C506 + C10766 * C501 - C10983 * C507 - C10984 * C502 +
            (C10625 * C8429 + C50612 * C8431) * C508 +
            (C10625 * C8433 + C50612 * C8435) * C503) *
               C10624) *
              C50802 * C50898 +
          ((C10767 * C507 -
            ((C10625 * C134 + C50612 * C144) * C501 +
             (C10625 * C123 + C50612 * C130) * C506) +
            C10768 * C502 - C10769 * C508 - C10770 * C503) *
               C10621 +
           (C10769 * C507 - (C10768 * C501 + C10767 * C506) + C10770 * C502 -
            C10771 * C508 - C10772 * C503) *
               C10622 +
           (C10771 * C507 - (C10770 * C501 + C10769 * C506) + C10772 * C502 -
            C10985 * C508 - C10986 * C503) *
               C10623 +
           (C10985 * C507 - (C10772 * C501 + C10771 * C506) + C10986 * C502 -
            (C10625 * C8428 + C50612 * C8430) * C508 -
            (C10625 * C8432 + C50612 * C8434) * C503) *
               C10624) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C10625 * C122 + C50612 * C129) * C121 +
                                 (C10625 * C133 + C50612 * C143) * C50672) *
                                    C10621 +
                                (C10761 * C121 + C10762 * C50672) * C10622 +
                                (C10763 * C121 + C10764 * C50672) * C10623 +
                                (C10765 * C121 + C10766 * C50672) * C10624) *
                                   C50802 * C50898 -
                               ((C10772 * C50672 + C10771 * C121) * C10624 +
                                (C10770 * C50672 + C10769 * C121) * C10623 +
                                (C10768 * C50672 + C10767 * C121) * C10622 +
                                ((C10625 * C134 + C50612 * C144) * C50672 +
                                 (C10625 * C123 + C50612 * C130) * C121) *
                                    C10621) *
                                   C50802 * C50643) *
                                  C848 +
                              ((((C10625 * C379 + C50612 * C385) * C121 +
                                 (C10625 * C389 + C50612 * C397) * C50672) *
                                    C10621 +
                                ((C10625 * C719 + C50612 * C727) * C121 +
                                 (C10625 * C731 + C50612 * C743) * C50672) *
                                    C10622 +
                                ((C10625 * C724 + C50612 * C736) * C121 +
                                 (C10625 * C740 + C50612 * C748) * C50672) *
                                    C10623 +
                                ((C10625 * C2982 + C50612 * C2985) * C121 +
                                 (C10625 * C2988 + C50612 * C2991) * C50672) *
                                    C10624) *
                                   C50802 * C50643 -
                               ((C11186 * C50672 + C11185 * C121) * C10624 +
                                (C11184 * C50672 + C11183 * C121) * C10623 +
                                (C11182 * C50672 + C11181 * C121) * C10622 +
                                ((C10625 * C393 + C50612 * C401) * C50672 +
                                 (C10625 * C383 + C50612 * C394) * C121) *
                                    C10621) *
                                   C50802 * C50898) *
                                  C849 +
                              ((((C10625 * C851 + C50612 * C856) * C121 +
                                 (C10625 * C860 + C50612 * C866) * C50672) *
                                    C10621 +
                                ((C10625 * C972 + C50612 * C976) * C121 +
                                 (C10625 * C980 + C50612 * C984) * C50672) *
                                    C10622 +
                                ((C10625 * C3323 + C50612 * C3326) * C121 +
                                 (C10625 * C3329 + C50612 * C3332) * C50672) *
                                    C10623 +
                                ((C10625 * C8935 + C50612 * C8937) * C121 +
                                 (C10625 * C8939 + C50612 * C8941) * C50672) *
                                    C10624) *
                                   C50802 * C50898 -
                               (((C10625 * C8938 + C50612 * C8940) * C50672 +
                                 (C10625 * C8934 + C50612 * C8936) * C121) *
                                    C10624 +
                                ((C10625 * C3328 + C50612 * C3331) * C50672 +
                                 (C10625 * C3322 + C50612 * C3325) * C121) *
                                    C10623 +
                                ((C10625 * C979 + C50612 * C983) * C50672 +
                                 (C10625 * C971 + C50612 * C975) * C121) *
                                    C10622 +
                                ((C10625 * C861 + C50612 * C867) * C50672 +
                                 (C10625 * C852 + C50612 * C857) * C121) *
                                    C10621) *
                                   C50802 * C50643) *
                                  C850)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C50919 +
            (C10761 * C121 + C10762 * C50672) * C50790) *
               C15422 +
           ((C12905 + C12906) * C50919 + (C12879 + C12880) * C50790) * C15423 +
           ((C13500 + C13499) * C50919 + (C13480 + C13479) * C50790) * C15424) *
              C112 -
          (((C13496 + C13495) * C50790 + (C13494 + C13493) * C50919) * C15424 +
           ((C12885 + C12886) * C50790 + (C12907 + C12908) * C50919) * C15423 +
           ((C10768 * C50672 + C10767 * C121) * C50790 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C50919) *
               C15422) *
              C113 +
          ((((C10625 * C124 + C50612 * C131) * C121 +
             (C10625 * C135 + C50612 * C145) * C50672) *
                C50919 +
            (C10773 * C121 + C10774 * C50672) * C50790) *
               C15422 +
           ((C12909 + C12910) * C50919 + (C12895 + C12896) * C50790) * C15423 +
           (((C10625 * C853 + C50612 * C858) * C121 +
             (C10625 * C862 + C50612 * C868) * C50672) *
                C50919 +
            ((C10625 * C970 + C50612 * C974) * C121 +
             (C10625 * C978 + C50612 * C982) * C50672) *
                C50790) *
               C15424) *
              C114 -
          ((((C10625 * C977 + C50612 * C981) * C50672 +
             (C10625 * C969 + C50612 * C973) * C121) *
                C50790 +
            ((C10625 * C863 + C50612 * C869) * C50672 +
             (C10625 * C854 + C50612 * C859) * C121) *
                C50919) *
               C15424 +
           (((C10625 * C733 + C50612 * C745) * C50672 +
             (C10625 * C721 + C50612 * C729) * C121) *
                C50790 +
            ((C10625 * C391 + C50612 * C399) * C50672 +
             (C10625 * C381 + C50612 * C387) * C121) *
                C50919) *
               C15423 +
           (((C10625 * C265 + C50612 * C273) * C50672 +
             (C10625 * C255 + C50612 * C261) * C121) *
                C50790 +
            ((C10625 * C136 + C50612 * C146) * C50672 +
             (C10625 * C125 + C50612 * C132) * C121) *
                C50919) *
               C15422) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C50919 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C50790) *
               C15422 +
           ((C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C50919 +
            (C13307 + C13308 - C13309 - C13310 + C13311 + C13312) * C50790) *
               C15423 +
           ((C13492 * C506 + C13491 * C501 - C11401 * C507 - C11402 * C502 +
             C11403 * C508 + C11404 * C503) *
                C50919 +
            (C11401 * C506 + C11402 * C501 - C11403 * C507 - C11404 * C502 +
             C11405 * C508 + C11406 * C503) *
                C50790) *
               C15424) *
              C50898 +
          (((C10767 * C507 -
             ((C10625 * C134 + C50612 * C144) * C501 +
              (C10625 * C123 + C50612 * C130) * C506) +
             C10768 * C502 - C10769 * C508 - C10770 * C503) *
                C50919 +
            (C10769 * C507 - (C10768 * C501 + C10767 * C506) + C10770 * C502 -
             C10771 * C508 - C10772 * C503) *
                C50790) *
               C15422 +
           ((C11815 * C507 - (C12901 * C501 + C12902 * C506) + C11816 * C502 -
             C11817 * C508 - C11818 * C503) *
                C50919 +
            (C11817 * C507 - (C11816 * C501 + C11815 * C506) + C11818 * C502 -
             C11819 * C508 - C11820 * C503) *
                C50790) *
               C15423 +
           ((C13487 * C507 - (C13486 * C501 + C13485 * C506) + C13488 * C502 -
             C13489 * C508 - C13490 * C503) *
                C50919 +
            (C13489 * C507 - (C13488 * C501 + C13487 * C506) + C13490 * C502 -
             (C10625 * C8934 + C50612 * C8936) * C508 -
             (C10625 * C8938 + C50612 * C8940) * C503) *
                C50790) *
               C15424) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C50919 +
             (C10761 * C121 + C10762 * C50672) * C50790) *
                C15422 +
            ((C12905 + C12906) * C50919 + (C12879 + C12880) * C50790) * C15423 +
            C19110 * C15424) *
               C50898 -
           (C19111 * C15424 +
            ((C12885 + C12886) * C50790 + (C12907 + C12908) * C50919) * C15423 +
            ((C10768 * C50672 + C10767 * C121) * C50790 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C50919) *
                C15422) *
               C50643) *
              C848 +
          ((((C12908 + C12907) * C50919 + (C12886 + C12885) * C50790) * C15422 +
            ((C13493 + C13494) * C50919 + (C13495 + C13496) * C50790) * C15423 +
            ((C19112 + C19113) * C50919 + (C19114 + C19115) * C50790) *
                C15424) *
               C50643 -
           (((C13794 + C13793) * C50790 + (C13800 + C13799) * C50919) * C15424 +
            ((C13479 + C13480) * C50790 + (C13499 + C13500) * C50919) * C15423 +
            ((C12880 + C12879) * C50790 + (C12906 + C12905) * C50919) *
                C15422) *
               C50898) *
              C849 +
          ((C19110 * C15422 +
            ((C13799 + C13800) * C50919 + (C13793 + C13794) * C50790) * C15423 +
            (((C10625 * C6201 + C50612 * C6207) * C121 +
              (C10625 * C6204 + C50612 * C6210) * C50672) *
                 C50919 +
             ((C10625 * C13781 + C50612 * C13785) * C121 +
              (C10625 * C13784 + C50612 * C13787) * C50672) *
                 C50790) *
                C15424) *
               C50898 -
           ((((C10625 * C16509 + C50612 * C16510) * C50672 +
              (C10625 * C16507 + C50612 * C16508) * C121) *
                 C50790 +
             ((C10625 * C6203 + C50612 * C6209) * C50672 +
              (C10625 * C6200 + C50612 * C6206) * C121) *
                 C50919) *
                C15424 +
            ((C19115 + C19114) * C50790 + (C19113 + C19112) * C50919) * C15423 +
            C19111 * C15422) *
               C50643) *
              C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                 C2178 * C124 + C2173 * C131) *
                    C253 +
                (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                 C2178 * C135 + C2173 * C145) *
                    C50905 -
                (C2362 + C2363 + C2364) * C254 -
                (C2365 + C2366 + C2367) * C50688) *
                   C50919 +
               ((C2364 + C2363 + C2362) * C253 +
                (C2367 + C2366 + C2365) * C50905 -
                (C2178 * C511 + C2173 * C516 + C2177 * C510 + C2172 * C515 +
                 C2176 * C509 + C2171 * C514) *
                    C254 -
                (C2178 * C520 + C2173 * C526 + C2177 * C519 + C2172 * C525 +
                 C2176 * C518 + C2171 * C524) *
                    C50688) *
                   C50790) *
                  C50802 * C250 +
              (((C2368 + C2369 + C2370) * C254 -
                ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
                  C2176 * C134 + C2171 * C144) *
                     C50905 +
                 (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
                  C2176 * C123 + C2171 * C130) *
                     C253) +
                (C2371 + C2372 + C2373) * C50688) *
                   C50919 +
               ((C2176 * C510 + C2171 * C515 + C2177 * C511 + C2172 * C516 +
                 C2178 * C512 + C2173 * C517) *
                    C254 -
                ((C2373 + C2372 + C2371) * C50905 +
                 (C2370 + C2369 + C2368) * C253) +
                (C2176 * C519 + C2171 * C525 + C2177 * C520 + C2172 * C526 +
                 C2178 * C521 + C2173 * C527) *
                    C50688) *
                   C50790) *
                  C50802 * C251 +
              (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
                 C2178 * C126 + C2173 * C138) *
                    C253 +
                (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
                 C2178 * C137 + C2173 * C147) *
                    C50905 -
                (C2374 + C2375 + C2376) * C254 -
                (C2377 + C2378 + C2379) * C50688) *
                   C50919 +
               ((C2376 + C2375 + C2374) * C253 +
                (C2379 + C2378 + C2377) * C50905 -
                (C2178 * C513 + C2173 * C522 + C2177 * C512 + C2172 * C517 +
                 C2176 * C511 + C2171 * C516) *
                    C254 -
                (C2178 * C523 + C2173 * C528 + C2177 * C521 + C2172 * C527 +
                 C2176 * C520 + C2171 * C526) *
                    C50688) *
                   C50790) *
                  C50802 * C252) *
             C50702 +
         0.5 * std::pow(Pi, 2.5) *
             (((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                C2178 * C124 + C2173 * C131) *
                   C600 +
               (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                C2178 * C135 + C2173 * C145) *
                   C595 -
               (C2362 + C2363 + C2364) * C601 - (C2365 + C2366 + C2367) * C596 +
               (C2696 + C2697 + C2698) * C602 + (C2699 + C2700 + C2701) * C597 -
               (C2830 + C2831 + C2832) * C603 -
               (C2833 + C2834 + C2835) * C598) *
                  C50919 +
              ((C2364 + C2363 + C2362) * C600 + (C2367 + C2366 + C2365) * C595 -
               (C2698 + C2697 + C2696) * C601 - (C2701 + C2700 + C2699) * C596 +
               (C2832 + C2831 + C2830) * C602 + (C2835 + C2834 + C2833) * C597 -
               (C2178 * C2805 + C2173 * C2808 + C2177 * C2806 + C2172 * C2809 +
                C2176 * C2807 + C2171 * C2810) *
                   C603 -
               (C2178 * C2811 + C2173 * C2814 + C2177 * C2812 + C2172 * C2815 +
                C2176 * C2813 + C2171 * C2816) *
                   C598) *
                  C50790) *
             C50802 * C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50905 -
            (C2362 + C2363 + C2364) * C254 - (C2365 + C2366 + C2367) * C50688) *
               C50919 +
           ((C2364 + C2363 + C2362) * C253 + (C2367 + C2366 + C2365) * C50905 -
            (C2698 + C2697 + C2696) * C254 - (C2701 + C2700 + C2699) * C50688) *
               C50790) *
              C50802 * C50638 * C848 +
          (((C3018 + C3019 + C3020) * C254 -
            ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
              C2176 * C393 + C2171 * C401) *
                 C50905 +
             (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
              C2176 * C383 + C2171 * C394) *
                 C253) +
            (C3021 + C3022 + C3023) * C50688) *
               C50919 +
           ((C3026 + C3025 + C3024) * C254 -
            ((C3023 + C3022 + C3021) * C50905 +
             (C3020 + C3019 + C3018) * C253) +
            (C3029 + C3028 + C3027) * C50688) *
               C50790) *
              C50802 * C50638 * C849 +
          (((C2176 * C851 + C2171 * C856 + C2177 * C852 + C2172 * C857 +
             C2178 * C853 + C2173 * C858) *
                C253 +
            (C2176 * C860 + C2171 * C866 + C2177 * C861 + C2172 * C867 +
             C2178 * C862 + C2173 * C868) *
                C50905 -
            (C3346 + C3347 + C3348) * C254 - (C3349 + C3350 + C3351) * C50688) *
               C50919 +
           ((C3348 + C3347 + C3346) * C253 + (C3351 + C3350 + C3349) * C50905 -
            (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
             C2176 * C3323 + C2171 * C3326) *
                C254 -
            (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
             C2176 * C3329 + C2171 * C3332) *
                C50688) *
               C50790) *
              C50802 * C50638 * C850)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C253 +
            (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
            C10762 * C50688) *
               C10621 +
           (C10761 * C253 + C10762 * C50905 - C10763 * C254 - C10764 * C50688) *
               C10622 +
           (C10763 * C253 + C10764 * C50905 - C10765 * C254 - C10766 * C50688) *
               C10623 +
           (C10765 * C253 + C10766 * C50905 -
            (C10625 * C2807 + C50612 * C2810) * C254 -
            (C10625 * C2813 + C50612 * C2816) * C50688) *
               C10624) *
              C50802 * C250 +
          ((C10767 * C254 -
            ((C10625 * C134 + C50612 * C144) * C50905 +
             (C10625 * C123 + C50612 * C130) * C253) +
            C10768 * C50688) *
               C10621 +
           (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
            C10770 * C50688) *
               C10622 +
           (C10771 * C254 - (C10770 * C50905 + C10769 * C253) +
            C10772 * C50688) *
               C10623 +
           ((C10625 * C2806 + C50612 * C2809) * C254 -
            (C10772 * C50905 + C10771 * C253) +
            (C10625 * C2812 + C50612 * C2815) * C50688) *
               C10624) *
              C50802 * C251 +
          (((C10625 * C124 + C50612 * C131) * C253 +
            (C10625 * C135 + C50612 * C145) * C50905 - C10773 * C254 -
            C10774 * C50688) *
               C10621 +
           (C10773 * C253 + C10774 * C50905 - C10775 * C254 - C10776 * C50688) *
               C10622 +
           (C10775 * C253 + C10776 * C50905 - C10777 * C254 - C10778 * C50688) *
               C10623 +
           (C10777 * C253 + C10778 * C50905 -
            (C10625 * C2805 + C50612 * C2808) * C254 -
            (C10625 * C2811 + C50612 * C2814) * C50688) *
               C10624) *
              C50802 * C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C10625 * C122 + C50612 * C129) * C600 +
           (C10625 * C133 + C50612 * C143) * C595 - C10761 * C601 -
           C10762 * C596 + C10763 * C602 + C10764 * C597 - C10765 * C603 -
           C10766 * C598) *
              C10621 +
          (C10761 * C600 + C10762 * C595 - C10763 * C601 - C10764 * C596 +
           C10765 * C602 + C10766 * C597 - C10983 * C603 - C10984 * C598) *
              C10622 +
          (C10763 * C600 + C10764 * C595 - C10765 * C601 - C10766 * C596 +
           C10983 * C602 + C10984 * C597 - C11061 * C603 - C11062 * C598) *
              C10623 +
          (C10765 * C600 + C10766 * C595 - C10983 * C601 - C10984 * C596 +
           C11061 * C602 + C11062 * C597 -
           (C10625 * C11052 + C50612 * C11053) * C603 -
           (C10625 * C11054 + C50612 * C11055) * C598) *
              C10624) *
         C50802 * C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C253 +
            (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
            C10762 * C50688) *
               C10621 +
           (C10761 * C253 + C10762 * C50905 - C10763 * C254 - C10764 * C50688) *
               C10622 +
           (C10763 * C253 + C10764 * C50905 - C10765 * C254 - C10766 * C50688) *
               C10623 +
           (C10765 * C253 + C10766 * C50905 - C10983 * C254 - C10984 * C50688) *
               C10624) *
              C50802 * C50638 * C848 +
          ((C11181 * C254 -
            ((C10625 * C393 + C50612 * C401) * C50905 +
             (C10625 * C383 + C50612 * C394) * C253) +
            C11182 * C50688) *
               C10621 +
           (C11183 * C254 - (C11182 * C50905 + C11181 * C253) +
            C11184 * C50688) *
               C10622 +
           (C11185 * C254 - (C11184 * C50905 + C11183 * C253) +
            C11186 * C50688) *
               C10623 +
           (C11187 * C254 - (C11186 * C50905 + C11185 * C253) +
            C11188 * C50688) *
               C10624) *
              C50802 * C50638 * C849 +
          (((C10625 * C851 + C50612 * C856) * C253 +
            (C10625 * C860 + C50612 * C866) * C50905 - C11401 * C254 -
            C11402 * C50688) *
               C10621 +
           (C11401 * C253 + C11402 * C50905 - C11403 * C254 - C11404 * C50688) *
               C10622 +
           (C11403 * C253 + C11404 * C50905 - C11405 * C254 - C11406 * C50688) *
               C10623 +
           (C11405 * C253 + C11406 * C50905 -
            (C10625 * C11384 + C50612 * C11385) * C254 -
            (C10625 * C11386 + C50612 * C11387) * C50688) *
               C10624) *
              C50802 * C50638 * C850)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C253 +
             (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
             C10762 * C50688) *
                C50919 +
            (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
             C10764 * C50688) *
                C50790) *
               C15422 +
           ((C13647 + C13648 - C13649 - C13650) * C50919 +
            (C13651 + C13652 - C13653 - C13654) * C50790) *
               C15423 +
           ((C13661 + C13660 - C13659 - C13662) * C50919 +
            (C13665 + C13664 - C13663 - C13666) * C50790) *
               C15424) *
              C250 +
          (((C10767 * C254 -
             ((C10625 * C134 + C50612 * C144) * C50905 +
              (C10625 * C123 + C50612 * C130) * C253) +
             C10768 * C50688) *
                C50919 +
            (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
             C10770 * C50688) *
                C50790) *
               C15422 +
           ((C14651 - (C14652 + C14653) + C14654) * C50919 +
            (C14655 - (C14656 + C14657) + C14658) * C50790) *
               C15423 +
           ((C13487 * C254 - (C13486 * C50905 + C13485 * C253) +
             C13488 * C50688) *
                C50919 +
            (C13489 * C254 - (C13488 * C50905 + C13487 * C253) +
             C13490 * C50688) *
                C50790) *
               C15424) *
              C251 +
          ((((C10625 * C124 + C50612 * C131) * C253 +
             (C10625 * C135 + C50612 * C145) * C50905 - C10773 * C254 -
             C10774 * C50688) *
                C50919 +
            (C10773 * C253 + C10774 * C50905 - C10775 * C254 -
             C10776 * C50688) *
                C50790) *
               C15422 +
           ((C12903 * C253 + C12904 * C50905 - C12725 * C254 -
             C12726 * C50688) *
                C50919 +
            (C12725 * C253 + C12726 * C50905 - C12727 * C254 -
             C12728 * C50688) *
                C50790) *
               C15423 +
           (((C10625 * C853 + C50612 * C858) * C253 +
             (C10625 * C862 + C50612 * C868) * C50905 - C18384 * C254 -
             C18385 * C50688) *
                C50919 +
            (C18384 * C253 + C18385 * C50905 -
             (C10625 * C3321 + C50612 * C3324) * C254 -
             (C10625 * C3327 + C50612 * C3330) * C50688) *
                C50790) *
               C15424) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C600 +
            (C10625 * C133 + C50612 * C143) * C595 - C10761 * C601 -
            C10762 * C596 + C10763 * C602 + C10764 * C597 - C10765 * C603 -
            C10766 * C598) *
               C50919 +
           (C10761 * C600 + C10762 * C595 - C10763 * C601 - C10764 * C596 +
            C10765 * C602 + C10766 * C597 - C10983 * C603 - C10984 * C598) *
               C50790) *
              C15422 +
          ((C12899 * C600 + C12900 * C595 - C11181 * C601 - C11182 * C596 +
            C11183 * C602 + C11184 * C597 - C11185 * C603 - C11186 * C598) *
               C50919 +
           (C11181 * C600 + C11182 * C595 - C11183 * C601 - C11184 * C596 +
            C11185 * C602 + C11186 * C597 - C11187 * C603 - C11188 * C598) *
               C50790) *
              C15423 +
          ((C13492 * C600 + C13491 * C595 - C11401 * C601 - C11402 * C596 +
            C11403 * C602 + C11404 * C597 - C11405 * C603 - C11406 * C598) *
               C50919 +
           (C11401 * C600 + C11402 * C595 - C11403 * C601 - C11404 * C596 +
            C11405 * C602 + C11406 * C597 -
            (C10625 * C11384 + C50612 * C11385) * C603 -
            (C10625 * C11386 + C50612 * C11387) * C598) *
               C50790) *
              C15424) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C253 +
             (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
             C10762 * C50688) *
                C50919 +
            (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
             C10764 * C50688) *
                C50790) *
               C15422 +
           ((C13647 + C13648 - C13649 - C13650) * C50919 +
            (C13651 + C13652 - C13653 - C13654) * C50790) *
               C15423 +
           C19284 * C15424) *
              C50638 * C848 +
          (((C13649 - (C13648 + C13647) + C13650) * C50919 +
            (C13653 - (C13652 + C13651) + C13654) * C50790) *
               C15422 +
           ((C13659 - (C13660 + C13661) + C13662) * C50919 +
            (C13663 - (C13664 + C13665) + C13666) * C50790) *
               C15423 +
           ((C19264 - (C19265 + C19266) + C19267) * C50919 +
            (C19268 - (C19269 + C19270) + C19271) * C50790) *
               C15424) *
              C50638 * C849 +
          (C19284 * C15422 +
           ((C19266 + C19265 - C19264 - C19267) * C50919 +
            (C19270 + C19269 - C19268 - C19271) * C50790) *
               C15423 +
           (((C10625 * C6201 + C50612 * C6207) * C253 +
             (C10625 * C6204 + C50612 * C6210) * C50905 - C19278 * C254 -
             C19279 * C50688) *
                C50919 +
            (C19278 * C253 + C19279 * C50905 -
             (C10625 * C13780 + C50612 * C13783) * C254 -
             (C10625 * C13782 + C50612 * C13786) * C50688) *
                C50790) *
               C15424) *
              C50638 * C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                  C2178 * C124 + C2173 * C131) *
                     C121 +
                 (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                  C2178 * C135 + C2173 * C145) *
                     C50672) *
                    C50919 +
                ((C2364 + C2363 + C2362) * C121 +
                 (C2367 + C2366 + C2365) * C50672) *
                    C50790) *
                   C50802 * C250 -
               (((C2373 + C2372 + C2371) * C50672 +
                 (C2370 + C2369 + C2368) * C121) *
                    C50790 +
                ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
                  C2176 * C134 + C2171 * C144) *
                     C50672 +
                 (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
                  C2176 * C123 + C2171 * C130) *
                     C121) *
                    C50919) *
                   C50802 * C251 +
               (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
                  C2178 * C126 + C2173 * C138) *
                     C121 +
                 (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
                  C2178 * C137 + C2173 * C147) *
                     C50672) *
                    C50919 +
                ((C2376 + C2375 + C2374) * C121 +
                 (C2379 + C2378 + C2377) * C50672) *
                    C50790) *
                   C50802 * C252) *
                  C50907 +
              ((((C2176 * C379 + C2171 * C385 + C2177 * C380 + C2172 * C386 +
                  C2178 * C381 + C2173 * C387) *
                     C121 +
                 (C2176 * C389 + C2171 * C397 + C2177 * C390 + C2172 * C398 +
                  C2178 * C391 + C2173 * C399) *
                     C50672) *
                    C50919 +
                ((C2176 * C719 + C2171 * C727 + C2177 * C720 + C2172 * C728 +
                  C2178 * C721 + C2173 * C729) *
                     C121 +
                 (C2176 * C731 + C2171 * C743 + C2177 * C732 + C2172 * C744 +
                  C2178 * C733 + C2173 * C745) *
                     C50672) *
                    C50790) *
                   C50802 * C251 -
               (((C2178 * C732 + C2173 * C744 + C2177 * C731 + C2172 * C743 +
                  C2176 * C730 + C2171 * C742) *
                     C50672 +
                 (C2178 * C720 + C2173 * C728 + C2177 * C719 + C2172 * C727 +
                  C2176 * C718 + C2171 * C726) *
                     C121) *
                    C50790 +
                ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
                  C2176 * C393 + C2171 * C401) *
                     C50672 +
                 (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
                  C2176 * C383 + C2171 * C394) *
                     C121) *
                    C50919) *
                   C50802 * C250 -
               (((C2178 * C1414 + C2173 * C1415 + C2177 * C733 + C2172 * C745 +
                  C2176 * C732 + C2171 * C744) *
                     C50672 +
                 (C2178 * C1412 + C2173 * C1413 + C2177 * C721 + C2172 * C729 +
                  C2176 * C720 + C2171 * C728) *
                     C121) *
                    C50790 +
                ((C2178 * C392 + C2173 * C400 + C2177 * C391 + C2172 * C399 +
                  C2176 * C390 + C2171 * C398) *
                     C50672 +
                 (C2178 * C382 + C2173 * C388 + C2177 * C381 + C2172 * C387 +
                  C2176 * C380 + C2171 * C386) *
                     C121) *
                    C50919) *
                   C50802 * C252) *
                  C50714) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                 C2178 * C124 + C2173 * C131) *
                    C506 +
                (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                 C2178 * C135 + C2173 * C145) *
                    C501 -
                (C2362 + C2363 + C2364) * C507 -
                (C2365 + C2366 + C2367) * C502 +
                (C2696 + C2697 + C2698) * C508 +
                (C2699 + C2700 + C2701) * C503) *
                   C50919 +
               ((C2364 + C2363 + C2362) * C506 +
                (C2367 + C2366 + C2365) * C501 -
                (C2698 + C2697 + C2696) * C507 -
                (C2701 + C2700 + C2699) * C502 +
                (C2832 + C2831 + C2830) * C508 +
                (C2835 + C2834 + C2833) * C503) *
                   C50790) *
                  C50802 * C50638 * C50907 +
              (((C3018 + C3019 + C3020) * C507 -
                ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
                  C2176 * C393 + C2171 * C401) *
                     C501 +
                 (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
                  C2176 * C383 + C2171 * C394) *
                     C506) +
                (C3021 + C3022 + C3023) * C502 -
                (C3024 + C3025 + C3026) * C508 -
                (C3027 + C3028 + C3029) * C503) *
                   C50919 +
               ((C3026 + C3025 + C3024) * C507 -
                ((C3023 + C3022 + C3021) * C501 +
                 (C3020 + C3019 + C3018) * C506) +
                (C3029 + C3028 + C3027) * C502 -
                (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
                 C2176 * C2983 + C2171 * C2986) *
                    C508 -
                (C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
                 C2176 * C2989 + C2171 * C2992) *
                    C503) *
                   C50790) *
                  C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50672) *
               C50919 +
           ((C2364 + C2363 + C2362) * C121 + (C2367 + C2366 + C2365) * C50672) *
               C50790) *
              C50802 * C50638 * C1051 -
          (((C3023 + C3022 + C3021) * C50672 + (C3020 + C3019 + C3018) * C121) *
               C50790 +
           ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
             C2176 * C393 + C2171 * C401) *
                C50672 +
            (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
             C2176 * C383 + C2171 * C394) *
                C121) *
               C50919) *
              C50802 * C50638 * C1052 +
          (((C2176 * C851 + C2171 * C856 + C2177 * C852 + C2172 * C857 +
             C2178 * C853 + C2173 * C858) *
                C121 +
            (C2176 * C860 + C2171 * C866 + C2177 * C861 + C2172 * C867 +
             C2178 * C862 + C2173 * C868) *
                C50672) *
               C50919 +
           ((C3348 + C3347 + C3346) * C121 + (C3351 + C3350 + C3349) * C50672) *
               C50790) *
              C50802 * C50638 * C1053 -
          (((C2178 * C3452 + C2173 * C3458 + C2177 * C3453 + C2172 * C3459 +
             C2176 * C3454 + C2171 * C3460) *
                C50672 +
            (C2178 * C3449 + C2173 * C3455 + C2177 * C3450 + C2172 * C3456 +
             C2176 * C3451 + C2171 * C3457) *
                C121) *
               C50790 +
           ((C2178 * C1060 + C2173 * C1068 + C2177 * C1061 + C2172 * C1069 +
             C2176 * C1062 + C2171 * C1070) *
                C50672 +
            (C2178 * C1056 + C2173 * C1064 + C2177 * C1057 + C2172 * C1065 +
             C2176 * C1058 + C2171 * C1066) *
                C121) *
               C50919) *
              C50802 * C50638 * C1054)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C10621 +
            (C10761 * C121 + C10762 * C50672) * C10622 +
            (C10763 * C121 + C10764 * C50672) * C10623 +
            (C10765 * C121 + C10766 * C50672) * C10624) *
               C50802 * C250 -
           ((C10772 * C50672 + C10771 * C121) * C10624 +
            (C10770 * C50672 + C10769 * C121) * C10623 +
            (C10768 * C50672 + C10767 * C121) * C10622 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C10621) *
               C50802 * C251 +
           (((C10625 * C124 + C50612 * C131) * C121 +
             (C10625 * C135 + C50612 * C145) * C50672) *
                C10621 +
            (C10773 * C121 + C10774 * C50672) * C10622 +
            (C10775 * C121 + C10776 * C50672) * C10623 +
            (C10777 * C121 + C10778 * C50672) * C10624) *
               C50802 * C252) *
              C50907 +
          ((((C10625 * C379 + C50612 * C385) * C121 +
             (C10625 * C389 + C50612 * C397) * C50672) *
                C10621 +
            ((C10625 * C719 + C50612 * C727) * C121 +
             (C10625 * C731 + C50612 * C743) * C50672) *
                C10622 +
            ((C10625 * C724 + C50612 * C736) * C121 +
             (C10625 * C740 + C50612 * C748) * C50672) *
                C10623 +
            ((C10625 * C2982 + C50612 * C2985) * C121 +
             (C10625 * C2988 + C50612 * C2991) * C50672) *
                C10624) *
               C50802 * C251 -
           (((C10625 * C2989 + C50612 * C2992) * C50672 +
             (C10625 * C2983 + C50612 * C2986) * C121) *
                C10624 +
            ((C10625 * C741 + C50612 * C749) * C50672 +
             (C10625 * C725 + C50612 * C737) * C121) *
                C10623 +
            ((C10625 * C730 + C50612 * C742) * C50672 +
             (C10625 * C718 + C50612 * C726) * C121) *
                C10622 +
            ((C10625 * C393 + C50612 * C401) * C50672 +
             (C10625 * C383 + C50612 * C394) * C121) *
                C10621) *
               C50802 * C250 -
           (((C10625 * C2987 + C50612 * C2990) * C50672 +
             (C10625 * C2981 + C50612 * C2984) * C121) *
                C10624 +
            ((C10625 * C739 + C50612 * C747) * C50672 +
             (C10625 * C723 + C50612 * C735) * C121) *
                C10623 +
            ((C10625 * C732 + C50612 * C744) * C50672 +
             (C10625 * C720 + C50612 * C728) * C121) *
                C10622 +
            ((C10625 * C390 + C50612 * C398) * C50672 +
             (C10625 * C380 + C50612 * C386) * C121) *
                C10621) *
               C50802 * C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C506 +
            (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
            C10762 * C502 + C10763 * C508 + C10764 * C503) *
               C10621 +
           (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
            C10765 * C508 + C10766 * C503) *
               C10622 +
           (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
            C10983 * C508 + C10984 * C503) *
               C10623 +
           (C10765 * C506 + C10766 * C501 - C10983 * C507 - C10984 * C502 +
            C11061 * C508 + C11062 * C503) *
               C10624) *
              C50802 * C50638 * C50907 +
          ((C11181 * C507 -
            ((C10625 * C393 + C50612 * C401) * C501 +
             (C10625 * C383 + C50612 * C394) * C506) +
            C11182 * C502 - C11183 * C508 - C11184 * C503) *
               C10621 +
           (C11183 * C507 - (C11182 * C501 + C11181 * C506) + C11184 * C502 -
            C11185 * C508 - C11186 * C503) *
               C10622 +
           (C11185 * C507 - (C11184 * C501 + C11183 * C506) + C11186 * C502 -
            C11187 * C508 - C11188 * C503) *
               C10623 +
           (C11187 * C507 - (C11186 * C501 + C11185 * C506) + C11188 * C502 -
            (C10625 * C11160 + C50612 * C11161) * C508 -
            (C10625 * C11162 + C50612 * C11163) * C503) *
               C10624) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C10625 * C122 + C50612 * C129) * C121 +
                                (C10625 * C133 + C50612 * C143) * C50672) *
                                   C10621 +
                               (C10761 * C121 + C10762 * C50672) * C10622 +
                               (C10763 * C121 + C10764 * C50672) * C10623 +
                               (C10765 * C121 + C10766 * C50672) * C10624) *
                                  C50802 * C50638 * C1051 -
                              ((C11186 * C50672 + C11185 * C121) * C10624 +
                               (C11184 * C50672 + C11183 * C121) * C10623 +
                               (C11182 * C50672 + C11181 * C121) * C10622 +
                               ((C10625 * C393 + C50612 * C401) * C50672 +
                                (C10625 * C383 + C50612 * C394) * C121) *
                                   C10621) *
                                  C50802 * C50638 * C1052 +
                              (((C10625 * C851 + C50612 * C856) * C121 +
                                (C10625 * C860 + C50612 * C866) * C50672) *
                                   C10621 +
                               (C11401 * C121 + C11402 * C50672) * C10622 +
                               (C11403 * C121 + C11404 * C50672) * C10623 +
                               (C11405 * C121 + C11406 * C50672) * C10624) *
                                  C50802 * C50638 * C1053 -
                              (((C10625 * C11473 + C50612 * C11475) * C50672 +
                                (C10625 * C11472 + C50612 * C11474) * C121) *
                                   C10624 +
                               ((C10625 * C9067 + C50612 * C9071) * C50672 +
                                (C10625 * C9065 + C50612 * C9069) * C121) *
                                   C10623 +
                               ((C10625 * C3454 + C50612 * C3460) * C50672 +
                                (C10625 * C3451 + C50612 * C3457) * C121) *
                                   C10622 +
                               ((C10625 * C1062 + C50612 * C1070) * C50672 +
                                (C10625 * C1058 + C50612 * C1066) * C121) *
                                   C10621) *
                                  C50802 * C50638 * C1054)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C50919 +
             (C10761 * C121 + C10762 * C50672) * C50790) *
                C15422 +
            ((C12905 + C12906) * C50919 + (C12879 + C12880) * C50790) * C15423 +
            ((C13500 + C13499) * C50919 + (C13480 + C13479) * C50790) *
                C15424) *
               C250 -
           (((C13496 + C13495) * C50790 + (C13494 + C13493) * C50919) * C15424 +
            ((C12885 + C12886) * C50790 + (C12907 + C12908) * C50919) * C15423 +
            ((C10768 * C50672 + C10767 * C121) * C50790 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C50919) *
                C15422) *
               C251 +
           ((((C10625 * C124 + C50612 * C131) * C121 +
              (C10625 * C135 + C50612 * C145) * C50672) *
                 C50919 +
             (C10773 * C121 + C10774 * C50672) * C50790) *
                C15422 +
            ((C12909 + C12910) * C50919 + (C12895 + C12896) * C50790) * C15423 +
            ((C18540 + C18541) * C50919 + (C18536 + C18537) * C50790) *
                C15424) *
               C252) *
              C50907 +
          ((((C12908 + C12907) * C50919 + (C12886 + C12885) * C50790) * C15422 +
            ((C13493 + C13494) * C50919 + (C13495 + C13496) * C50790) * C15423 +
            (((C10625 * C1057 + C50612 * C1065) * C121 +
              (C10625 * C1061 + C50612 * C1069) * C50672) *
                 C50919 +
             ((C10625 * C3450 + C50612 * C3456) * C121 +
              (C10625 * C3453 + C50612 * C3459) * C50672) *
                 C50790) *
                C15424) *
               C251 -
           (((C13794 + C13793) * C50790 + (C13800 + C13799) * C50919) * C15424 +
            ((C13479 + C13480) * C50790 + (C13499 + C13500) * C50919) * C15423 +
            ((C12880 + C12879) * C50790 + (C12906 + C12905) * C50919) *
                C15422) *
               C250 -
           ((((C10625 * C3452 + C50612 * C3458) * C50672 +
              (C10625 * C3449 + C50612 * C3455) * C121) *
                 C50790 +
             ((C10625 * C1060 + C50612 * C1068) * C50672 +
              (C10625 * C1056 + C50612 * C1064) * C121) *
                 C50919) *
                C15424 +
            ((C18537 + C18536) * C50790 + (C18541 + C18540) * C50919) * C15423 +
            ((C12896 + C12895) * C50790 + (C12910 + C12909) * C50919) *
                C15422) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C50919 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C50790) *
               C15422 +
           ((C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C50919 +
            (C13307 + C13308 - C13309 - C13310 + C13311 + C13312) * C50790) *
               C15423 +
           ((C18932 + C18933 - C18934 - C18935 + C18936 + C18937) * C50919 +
            (C18938 + C18939 - C18940 - C18941 + C18942 + C18943) * C50790) *
               C15424) *
              C50638 * C50907 +
          (((C13303 - (C13302 + C13301) + C13304 - C13305 - C13306) * C50919 +
            (C13309 - (C13308 + C13307) + C13310 - C13311 - C13312) * C50790) *
               C15422 +
           ((C18934 - (C18933 + C18932) + C18935 - C18936 - C18937) * C50919 +
            (C18940 - (C18939 + C18938) + C18941 - C18942 - C18943) * C50790) *
               C15423 +
           ((C13679 * C507 - (C13798 * C501 + C13797 * C506) + C13680 * C502 -
             C13681 * C508 - C13682 * C503) *
                C50919 +
            (C13681 * C507 - (C13680 * C501 + C13679 * C506) + C13682 * C502 -
             (C10625 * C11472 + C50612 * C11474) * C508 -
             (C10625 * C11473 + C50612 * C11475) * C503) *
                C50790) *
               C15424) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C50919 +
            (C10761 * C121 + C10762 * C50672) * C50790) *
               C15422 +
           ((C12905 + C12906) * C50919 + (C12879 + C12880) * C50790) * C15423 +
           C19110 * C15424) *
              C50638 * C1051 -
          (C19399 * C15424 +
           ((C13479 + C13480) * C50790 + (C13499 + C13500) * C50919) * C15423 +
           ((C12880 + C12879) * C50790 + (C12906 + C12905) * C50919) * C15422) *
              C50638 * C1052 +
          (C19110 * C15422 +
           ((C13799 + C13800) * C50919 + (C13793 + C13794) * C50790) * C15423 +
           ((C19400 + C19401) * C50919 + (C19393 + C19394) * C50790) * C15424) *
              C50638 * C1053 -
          ((((C10625 * C19383 + C50612 * C19385) * C50672 +
             (C10625 * C19382 + C50612 * C19384) * C121) *
                C50790 +
            ((C10625 * C16634 + C50612 * C16638) * C50672 +
             (C10625 * C16632 + C50612 * C16636) * C121) *
                C50919) *
               C15424 +
           ((C19394 + C19393) * C50790 + (C19401 + C19400) * C50919) * C15423 +
           C19399 * C15422) *
              C50638 * C1054)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C10621 +
            (C10761 * C121 + C10762 * C50672) * C10622 +
            (C10763 * C121 + C10764 * C50672) * C10623 +
            (C10765 * C121 + C10766 * C50672) * C10624) *
               C50802 * C50950 -
           ((C10772 * C50672 + C10771 * C121) * C10624 +
            (C10770 * C50672 + C10769 * C121) * C10623 +
            (C10768 * C50672 + C10767 * C121) * C10622 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C10621) *
               C50802 * C50936 +
           (((C10625 * C124 + C50612 * C131) * C121 +
             (C10625 * C135 + C50612 * C145) * C50672) *
                C10621 +
            (C10773 * C121 + C10774 * C50672) * C10622 +
            (C10775 * C121 + C10776 * C50672) * C10623 +
            (C10777 * C121 + C10778 * C50672) * C10624) *
               C50802 * C1173) *
              C1514 +
          ((((C10625 * C379 + C50612 * C385) * C121 +
             (C10625 * C389 + C50612 * C397) * C50672) *
                C10621 +
            (C11815 * C121 + C11816 * C50672) * C10622 +
            (C11817 * C121 + C11818 * C50672) * C10623 +
            (C11819 * C121 + C11820 * C50672) * C10624) *
               C50802 * C50936 -
           ((C11186 * C50672 + C11185 * C121) * C10624 +
            (C11184 * C50672 + C11183 * C121) * C10623 +
            (C11182 * C50672 + C11181 * C121) * C10622 +
            ((C10625 * C393 + C50612 * C401) * C50672 +
             (C10625 * C383 + C50612 * C394) * C121) *
                C10621) *
               C50802 * C50950 -
           (((C10625 * C2987 + C50612 * C2990) * C50672 +
             (C10625 * C2981 + C50612 * C2984) * C121) *
                C10624 +
            ((C10625 * C739 + C50612 * C747) * C50672 +
             (C10625 * C723 + C50612 * C735) * C121) *
                C10623 +
            ((C10625 * C732 + C50612 * C744) * C50672 +
             (C10625 * C720 + C50612 * C728) * C121) *
                C10622 +
            ((C10625 * C390 + C50612 * C398) * C50672 +
             (C10625 * C380 + C50612 * C386) * C121) *
                C10621) *
               C50802 * C1173) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50672) *
                C50919 +
            ((C2364 + C2363 + C2362) * C121 +
             (C2367 + C2366 + C2365) * C50672) *
                C50790) *
               C50802 * C50950 -
           (((C2373 + C2372 + C2371) * C50672 +
             (C2370 + C2369 + C2368) * C121) *
                C50790 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50672 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50919) *
               C50802 * C50936 +
           (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
              C2178 * C126 + C2173 * C138) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
              C2178 * C137 + C2173 * C147) *
                 C50672) *
                C50919 +
            ((C2376 + C2375 + C2374) * C121 +
             (C2379 + C2378 + C2377) * C50672) *
                C50790) *
               C50802 * C1173) *
              C1514 +
          ((((C2176 * C379 + C2171 * C385 + C2177 * C380 + C2172 * C386 +
              C2178 * C381 + C2173 * C387) *
                 C121 +
             (C2176 * C389 + C2171 * C397 + C2177 * C390 + C2172 * C398 +
              C2178 * C391 + C2173 * C399) *
                 C50672) *
                C50919 +
            ((C3962 + C3961 + C3960) * C121 +
             (C3965 + C3964 + C3963) * C50672) *
                C50790) *
               C50802 * C50936 -
           (((C3023 + C3022 + C3021) * C50672 +
             (C3020 + C3019 + C3018) * C121) *
                C50790 +
            ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
              C2176 * C393 + C2171 * C401) *
                 C50672 +
             (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
              C2176 * C383 + C2171 * C394) *
                 C121) *
                C50919) *
               C50802 * C50950 -
           (((C2178 * C1414 + C2173 * C1415 + C2177 * C733 + C2172 * C745 +
              C2176 * C732 + C2171 * C744) *
                 C50672 +
             (C2178 * C1412 + C2173 * C1413 + C2177 * C721 + C2172 * C729 +
              C2176 * C720 + C2171 * C728) *
                 C121) *
                C50790 +
            ((C2178 * C392 + C2173 * C400 + C2177 * C391 + C2172 * C399 +
              C2176 * C390 + C2171 * C398) *
                 C50672 +
             (C2178 * C382 + C2173 * C388 + C2177 * C381 + C2172 * C387 +
              C2176 * C380 + C2171 * C386) *
                 C121) *
                C50919) *
               C50802 * C1173) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C50919 +
             (C10761 * C121 + C10762 * C50672) * C50790) *
                C15422 +
            ((C12905 + C12906) * C50919 + (C12879 + C12880) * C50790) * C15423 +
            C19110 * C15424) *
               C50950 -
           (C19111 * C15424 +
            ((C12885 + C12886) * C50790 + (C12907 + C12908) * C50919) * C15423 +
            ((C10768 * C50672 + C10767 * C121) * C50790 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C50919) *
                C15422) *
               C50936 +
           ((((C10625 * C124 + C50612 * C131) * C121 +
              (C10625 * C135 + C50612 * C145) * C50672) *
                 C50919 +
             (C10773 * C121 + C10774 * C50672) * C50790) *
                C15422 +
            ((C12909 + C12910) * C50919 + (C12895 + C12896) * C50790) * C15423 +
            ((C18540 + C18541) * C50919 + (C18536 + C18537) * C50790) *
                C15424) *
               C1173) *
              C1514 +
          ((((C12908 + C12907) * C50919 + (C12886 + C12885) * C50790) * C15422 +
            ((C13493 + C13494) * C50919 + (C13495 + C13496) * C50790) * C15423 +
            ((C19112 + C19113) * C50919 + (C19114 + C19115) * C50790) *
                C15424) *
               C50936 -
           (C19399 * C15424 +
            ((C13479 + C13480) * C50790 + (C13499 + C13500) * C50919) * C15423 +
            ((C12880 + C12879) * C50790 + (C12906 + C12905) * C50919) *
                C15422) *
               C50950 -
           ((((C10625 * C3452 + C50612 * C3458) * C50672 +
              (C10625 * C3449 + C50612 * C3455) * C121) *
                 C50790 +
             ((C10625 * C1060 + C50612 * C1068) * C50672 +
              (C10625 * C1056 + C50612 * C1064) * C121) *
                 C50919) *
                C15424 +
            ((C18537 + C18536) * C50790 + (C18541 + C18540) * C50919) * C15423 +
            ((C12896 + C12895) * C50790 + (C12910 + C12909) * C50919) *
                C15422) *
               C1173) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C253 +
             (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
             C10762 * C50688) *
                C10621 +
            (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
             C10764 * C50688) *
                C10622 +
            (C10763 * C253 + C10764 * C50905 - C10765 * C254 -
             C10766 * C50688) *
                C10623 +
            (C10765 * C253 + C10766 * C50905 - C10983 * C254 -
             C10984 * C50688) *
                C10624) *
               C50802 * C1277 +
           ((C10767 * C254 -
             ((C10625 * C134 + C50612 * C144) * C50905 +
              (C10625 * C123 + C50612 * C130) * C253) +
             C10768 * C50688) *
                C10621 +
            (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
             C10770 * C50688) *
                C10622 +
            (C10771 * C254 - (C10770 * C50905 + C10769 * C253) +
             C10772 * C50688) *
                C10623 +
            (C10985 * C254 - (C10772 * C50905 + C10771 * C253) +
             C10986 * C50688) *
                C10624) *
               C50802 * C50643) *
              C1514 +
          (((C11181 * C254 -
             ((C10625 * C393 + C50612 * C401) * C50905 +
              (C10625 * C383 + C50612 * C394) * C253) +
             C11182 * C50688) *
                C10621 +
            (C11183 * C254 - (C11182 * C50905 + C11181 * C253) +
             C11184 * C50688) *
                C10622 +
            (C11185 * C254 - (C11184 * C50905 + C11183 * C253) +
             C11186 * C50688) *
                C10623 +
            (C11187 * C254 - (C11186 * C50905 + C11185 * C253) +
             C11188 * C50688) *
                C10624) *
               C50802 * C1277 +
           (((C10625 * C379 + C50612 * C385) * C253 +
             (C10625 * C389 + C50612 * C397) * C50905 - C11815 * C254 -
             C11816 * C50688) *
                C10621 +
            (C11815 * C253 + C11816 * C50905 - C11817 * C254 -
             C11818 * C50688) *
                C10622 +
            (C11817 * C253 + C11818 * C50905 - C11819 * C254 -
             C11820 * C50688) *
                C10623 +
            (C11819 * C253 + C11820 * C50905 -
             (C10625 * C8596 + C50612 * C8598) * C254 -
             (C10625 * C8600 + C50612 * C8602) * C50688) *
                C10624) *
               C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C253 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50905 -
             (C2362 + C2363 + C2364) * C254 -
             (C2365 + C2366 + C2367) * C50688) *
                C50919 +
            ((C2364 + C2363 + C2362) * C253 + (C2367 + C2366 + C2365) * C50905 -
             (C2698 + C2697 + C2696) * C254 -
             (C2701 + C2700 + C2699) * C50688) *
                C50790) *
               C50802 * C1277 +
           (((C2368 + C2369 + C2370) * C254 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C50905 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C253) +
             (C2371 + C2372 + C2373) * C50688) *
                C50919 +
            ((C2704 + C2703 + C2702) * C254 -
             ((C2373 + C2372 + C2371) * C50905 +
              (C2370 + C2369 + C2368) * C253) +
             (C2707 + C2706 + C2705) * C50688) *
                C50790) *
               C50802 * C50643) *
              C1514 +
          ((((C3018 + C3019 + C3020) * C254 -
             ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
               C2176 * C393 + C2171 * C401) *
                  C50905 +
              (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
               C2176 * C383 + C2171 * C394) *
                  C253) +
             (C3021 + C3022 + C3023) * C50688) *
                C50919 +
            ((C3026 + C3025 + C3024) * C254 -
             ((C3023 + C3022 + C3021) * C50905 +
              (C3020 + C3019 + C3018) * C253) +
             (C3029 + C3028 + C3027) * C50688) *
                C50790) *
               C50802 * C1277 +
           (((C2176 * C379 + C2171 * C385 + C2177 * C380 + C2172 * C386 +
              C2178 * C381 + C2173 * C387) *
                 C253 +
             (C2176 * C389 + C2171 * C397 + C2177 * C390 + C2172 * C398 +
              C2178 * C391 + C2173 * C399) *
                 C50905 -
             (C3960 + C3961 + C3962) * C254 -
             (C3963 + C3964 + C3965) * C50688) *
                C50919 +
            ((C3962 + C3961 + C3960) * C253 + (C3965 + C3964 + C3963) * C50905 -
             (C2178 * C722 + C2173 * C734 + C2177 * C723 + C2172 * C735 +
              C2176 * C724 + C2171 * C736) *
                 C254 -
             (C2178 * C738 + C2173 * C746 + C2177 * C739 + C2172 * C747 +
              C2176 * C740 + C2171 * C748) *
                 C50688) *
                C50790) *
               C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C253 +
              (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
              C10762 * C50688) *
                 C50919 +
             (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
              C10764 * C50688) *
                 C50790) *
                C15422 +
            ((C13647 + C13648 - C13649 - C13650) * C50919 +
             (C13651 + C13652 - C13653 - C13654) * C50790) *
                C15423 +
            C19284 * C15424) *
               C1277 +
           (((C10767 * C254 -
              ((C10625 * C134 + C50612 * C144) * C50905 +
               (C10625 * C123 + C50612 * C130) * C253) +
              C10768 * C50688) *
                 C50919 +
             (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
              C10770 * C50688) *
                 C50790) *
                C15422 +
            ((C14651 - (C14652 + C14653) + C14654) * C50919 +
             (C14655 - (C14656 + C14657) + C14658) * C50790) *
                C15423 +
            ((C20236 - (C20237 + C20238) + C20239) * C50919 +
             (C20240 - (C20241 + C20242) + C20243) * C50790) *
                C15424) *
               C50643) *
              C1514 +
          ((((C13649 - (C13648 + C13647) + C13650) * C50919 +
             (C13653 - (C13652 + C13651) + C13654) * C50790) *
                C15422 +
            ((C13659 - (C13660 + C13661) + C13662) * C50919 +
             (C13663 - (C13664 + C13665) + C13666) * C50790) *
                C15423 +
            ((C19264 - (C19265 + C19266) + C19267) * C50919 +
             (C19268 - (C19269 + C19270) + C19271) * C50790) *
                C15424) *
               C1277 +
           (((C14653 + C14652 - C14651 - C14654) * C50919 +
             (C14657 + C14656 - C14655 - C14658) * C50790) *
                C15422 +
            ((C20238 + C20237 - C20236 - C20239) * C50919 +
             (C20242 + C20241 - C20240 - C20243) * C50790) *
                C15423 +
            ((C19106 * C253 + C19107 * C50905 - C19108 * C254 -
              C19109 * C50688) *
                 C50919 +
             (C19108 * C253 + C19109 * C50905 -
              (C10625 * C9064 + C50612 * C9068) * C254 -
              (C10625 * C9066 + C50612 * C9070) * C50688) *
                 C50790) *
                C15424) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C10621 +
            (C10761 * C121 + C10762 * C50672) * C10622 +
            (C10763 * C121 + C10764 * C50672) * C10623 +
            (C10765 * C121 + C10766 * C50672) * C10624) *
               C50802 * C1277 -
           ((C10772 * C50672 + C10771 * C121) * C10624 +
            (C10770 * C50672 + C10769 * C121) * C10623 +
            (C10768 * C50672 + C10767 * C121) * C10622 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C10621) *
               C50802 * C50643) *
              C50952 +
          ((((C10625 * C379 + C50612 * C385) * C121 +
             (C10625 * C389 + C50612 * C397) * C50672) *
                C10621 +
            (C11815 * C121 + C11816 * C50672) * C10622 +
            (C11817 * C121 + C11818 * C50672) * C10623 +
            (C11819 * C121 + C11820 * C50672) * C10624) *
               C50802 * C50643 -
           ((C11186 * C50672 + C11185 * C121) * C10624 +
            (C11184 * C50672 + C11183 * C121) * C10623 +
            (C11182 * C50672 + C11181 * C121) * C10622 +
            ((C10625 * C393 + C50612 * C401) * C50672 +
             (C10625 * C383 + C50612 * C394) * C121) *
                C10621) *
               C50802 * C1277) *
              C50942 +
          ((((C10625 * C851 + C50612 * C856) * C121 +
             (C10625 * C860 + C50612 * C866) * C50672) *
                C10621 +
            (C11401 * C121 + C11402 * C50672) * C10622 +
            (C11403 * C121 + C11404 * C50672) * C10623 +
            (C11405 * C121 + C11406 * C50672) * C10624) *
               C50802 * C1277 -
           (((C10625 * C8938 + C50612 * C8940) * C50672 +
             (C10625 * C8934 + C50612 * C8936) * C121) *
                C10624 +
            ((C10625 * C3328 + C50612 * C3331) * C50672 +
             (C10625 * C3322 + C50612 * C3325) * C121) *
                C10623 +
            ((C10625 * C979 + C50612 * C983) * C50672 +
             (C10625 * C971 + C50612 * C975) * C121) *
                C10622 +
            ((C10625 * C861 + C50612 * C867) * C50672 +
             (C10625 * C852 + C50612 * C857) * C121) *
                C10621) *
               C50802 * C50643) *
              C1746)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50672) *
                C50919 +
            ((C2364 + C2363 + C2362) * C121 +
             (C2367 + C2366 + C2365) * C50672) *
                C50790) *
               C50802 * C1277 -
           (((C2373 + C2372 + C2371) * C50672 +
             (C2370 + C2369 + C2368) * C121) *
                C50790 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50672 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50919) *
               C50802 * C50643) *
              C50952 +
          ((((C2176 * C379 + C2171 * C385 + C2177 * C380 + C2172 * C386 +
              C2178 * C381 + C2173 * C387) *
                 C121 +
             (C2176 * C389 + C2171 * C397 + C2177 * C390 + C2172 * C398 +
              C2178 * C391 + C2173 * C399) *
                 C50672) *
                C50919 +
            ((C3962 + C3961 + C3960) * C121 +
             (C3965 + C3964 + C3963) * C50672) *
                C50790) *
               C50802 * C50643 -
           (((C3023 + C3022 + C3021) * C50672 +
             (C3020 + C3019 + C3018) * C121) *
                C50790 +
            ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
              C2176 * C393 + C2171 * C401) *
                 C50672 +
             (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
              C2176 * C383 + C2171 * C394) *
                 C121) *
                C50919) *
               C50802 * C1277) *
              C50942 +
          ((((C2176 * C851 + C2171 * C856 + C2177 * C852 + C2172 * C857 +
              C2178 * C853 + C2173 * C858) *
                 C121 +
             (C2176 * C860 + C2171 * C866 + C2177 * C861 + C2172 * C867 +
              C2178 * C862 + C2173 * C868) *
                 C50672) *
                C50919 +
            ((C3348 + C3347 + C3346) * C121 +
             (C3351 + C3350 + C3349) * C50672) *
                C50790) *
               C50802 * C1277 -
           (((C2178 * C977 + C2173 * C981 + C2177 * C978 + C2172 * C982 +
              C2176 * C979 + C2171 * C983) *
                 C50672 +
             (C2178 * C969 + C2173 * C973 + C2177 * C970 + C2172 * C974 +
              C2176 * C971 + C2171 * C975) *
                 C121) *
                C50790 +
            ((C2178 * C863 + C2173 * C869 + C2177 * C862 + C2172 * C868 +
              C2176 * C861 + C2171 * C867) *
                 C50672 +
             (C2178 * C854 + C2173 * C859 + C2177 * C853 + C2172 * C858 +
              C2176 * C852 + C2171 * C857) *
                 C121) *
                C50919) *
               C50802 * C50643) *
              C1746)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C50919 +
             (C10761 * C121 + C10762 * C50672) * C50790) *
                C15422 +
            ((C12905 + C12906) * C50919 + (C12879 + C12880) * C50790) * C15423 +
            C19110 * C15424) *
               C1277 -
           (C19111 * C15424 +
            ((C12885 + C12886) * C50790 + (C12907 + C12908) * C50919) * C15423 +
            ((C10768 * C50672 + C10767 * C121) * C50790 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C50919) *
                C15422) *
               C50643) *
              C50952 +
          ((((C12908 + C12907) * C50919 + (C12886 + C12885) * C50790) * C15422 +
            ((C13493 + C13494) * C50919 + (C13495 + C13496) * C50790) * C15423 +
            ((C19112 + C19113) * C50919 + (C19114 + C19115) * C50790) *
                C15424) *
               C50643 -
           (C19399 * C15424 +
            ((C13479 + C13480) * C50790 + (C13499 + C13500) * C50919) * C15423 +
            ((C12880 + C12879) * C50790 + (C12906 + C12905) * C50919) *
                C15422) *
               C1277) *
              C50942 +
          ((C19110 * C15422 +
            ((C13799 + C13800) * C50919 + (C13793 + C13794) * C50790) * C15423 +
            ((C19400 + C19401) * C50919 + (C19393 + C19394) * C50790) *
                C15424) *
               C1277 -
           ((((C10625 * C16509 + C50612 * C16510) * C50672 +
              (C10625 * C16507 + C50612 * C16508) * C121) *
                 C50790 +
             ((C10625 * C6203 + C50612 * C6209) * C50672 +
              (C10625 * C6200 + C50612 * C6206) * C121) *
                 C50919) *
                C15424 +
            ((C19115 + C19114) * C50790 + (C19113 + C19112) * C50919) * C15423 +
            C19111 * C15422) *
               C50643) *
              C1746)) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C506 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C501 -
            (C2362 + C2363 + C2364) * C507 - (C2365 + C2366 + C2367) * C502 +
            (C2696 + C2697 + C2698) * C508 + (C2699 + C2700 + C2701) * C503) *
               C50919 +
           ((C2364 + C2363 + C2362) * C506 + (C2367 + C2366 + C2365) * C501 -
            (C2698 + C2697 + C2696) * C507 - (C2701 + C2700 + C2699) * C502 +
            (C2176 * C607 + C2171 * C611 + C2177 * C606 + C2172 * C610 +
             C2178 * C605 + C2173 * C609) *
                C508 +
            (C2176 * C615 + C2171 * C619 + C2177 * C614 + C2172 * C618 +
             C2178 * C613 + C2173 * C617) *
                C503) *
               C50790) *
              C50802 * C50898 +
          (((C2368 + C2369 + C2370) * C507 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C501 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C506) +
            (C2371 + C2372 + C2373) * C502 - (C2702 + C2703 + C2704) * C508 -
            (C2705 + C2706 + C2707) * C503) *
               C50919 +
           ((C2704 + C2703 + C2702) * C507 -
            ((C2373 + C2372 + C2371) * C501 + (C2370 + C2369 + C2368) * C506) +
            (C2707 + C2706 + C2705) * C502 -
            (C2178 * C604 + C2173 * C608 + C2177 * C605 + C2172 * C609 +
             C2176 * C606 + C2171 * C610) *
                C508 -
            (C2178 * C612 + C2173 * C616 + C2177 * C613 + C2172 * C617 +
             C2176 * C614 + C2171 * C618) *
                C503) *
               C50790) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50672) *
               C50919 +
           ((C2176 * C258 + C2171 * C264 + C2177 * C257 + C2172 * C263 +
             C2178 * C256 + C2173 * C262) *
                C121 +
            (C2176 * C268 + C2171 * C276 + C2177 * C267 + C2172 * C275 +
             C2178 * C266 + C2173 * C274) *
                C50672) *
               C50790) *
              C50802 * C112 -
          (((C2178 * C265 + C2173 * C273 + C2177 * C266 + C2172 * C274 +
             C2176 * C267 + C2171 * C275) *
                C50672 +
            (C2178 * C255 + C2173 * C261 + C2177 * C256 + C2172 * C262 +
             C2176 * C257 + C2171 * C263) *
                C121) *
               C50790 +
           ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
             C2176 * C134 + C2171 * C144) *
                C50672 +
            (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
             C2176 * C123 + C2171 * C130) *
                C121) *
               C50919) *
              C50802 * C113 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C121 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50672) *
               C50919 +
           ((C2176 * C256 + C2171 * C262 + C2177 * C255 + C2172 * C261 +
             C2178 * C259 + C2173 * C269) *
                C121 +
            (C2176 * C266 + C2171 * C274 + C2177 * C265 + C2172 * C273 +
             C2178 * C270 + C2173 * C277) *
                C50672) *
               C50790) *
              C50802 * C114 -
          (((C2178 * C272 + C2173 * C278 + C2177 * C270 + C2172 * C277 +
             C2176 * C265 + C2171 * C273) *
                C50672 +
            (C2178 * C260 + C2173 * C271 + C2177 * C259 + C2172 * C269 +
             C2176 * C255 + C2171 * C261) *
                C121) *
               C50790 +
           ((C2178 * C140 + C2173 * C148 + C2177 * C137 + C2172 * C147 +
             C2176 * C136 + C2171 * C146) *
                C50672 +
            (C2178 * C127 + C2173 * C139 + C2177 * C126 + C2172 * C138 +
             C2176 * C125 + C2171 * C132) *
                C121) *
               C50919) *
              C50802 * C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C121 +
            (C10625 * C133 + C50612 * C143) * C50672) *
               C10621 +
           ((C10625 * C258 + C50612 * C264) * C121 +
            (C10625 * C268 + C50612 * C276) * C50672) *
               C10622 +
           ((C10625 * C509 + C50612 * C514) * C121 +
            (C10625 * C518 + C50612 * C524) * C50672) *
               C10623 +
           ((C10625 * C607 + C50612 * C611) * C121 +
            (C10625 * C615 + C50612 * C619) * C50672) *
               C10624) *
              C50802 * C112 -
          (((C10625 * C614 + C50612 * C618) * C50672 +
            (C10625 * C606 + C50612 * C610) * C121) *
               C10624 +
           ((C10625 * C519 + C50612 * C525) * C50672 +
            (C10625 * C510 + C50612 * C515) * C121) *
               C10623 +
           ((C10625 * C267 + C50612 * C275) * C50672 +
            (C10625 * C257 + C50612 * C263) * C121) *
               C10622 +
           ((C10625 * C134 + C50612 * C144) * C50672 +
            (C10625 * C123 + C50612 * C130) * C121) *
               C10621) *
              C50802 * C113 +
          (((C10625 * C124 + C50612 * C131) * C121 +
            (C10625 * C135 + C50612 * C145) * C50672) *
               C10621 +
           ((C10625 * C256 + C50612 * C262) * C121 +
            (C10625 * C266 + C50612 * C274) * C50672) *
               C10622 +
           ((C10625 * C511 + C50612 * C516) * C121 +
            (C10625 * C520 + C50612 * C526) * C50672) *
               C10623 +
           ((C10625 * C605 + C50612 * C609) * C121 +
            (C10625 * C613 + C50612 * C617) * C50672) *
               C10624) *
              C50802 * C114 -
          (((C10625 * C612 + C50612 * C616) * C50672 +
            (C10625 * C604 + C50612 * C608) * C121) *
               C10624 +
           ((C10625 * C521 + C50612 * C527) * C50672 +
            (C10625 * C512 + C50612 * C517) * C121) *
               C10623 +
           ((C10625 * C265 + C50612 * C273) * C50672 +
            (C10625 * C255 + C50612 * C261) * C121) *
               C10622 +
           ((C10625 * C136 + C50612 * C146) * C50672 +
            (C10625 * C125 + C50612 * C132) * C121) *
               C10621) *
              C50802 * C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C506 +
            (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
            C10762 * C502 + C10763 * C508 + C10764 * C503) *
               C10621 +
           (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
            C10765 * C508 + C10766 * C503) *
               C10622 +
           (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
            C10983 * C508 + C10984 * C503) *
               C10623 +
           (C10765 * C506 + C10766 * C501 - C10983 * C507 - C10984 * C502 +
            (C10625 * C8429 + C50612 * C8431) * C508 +
            (C10625 * C8433 + C50612 * C8435) * C503) *
               C10624) *
              C50802 * C50898 +
          ((C10767 * C507 -
            ((C10625 * C134 + C50612 * C144) * C501 +
             (C10625 * C123 + C50612 * C130) * C506) +
            C10768 * C502 - C10769 * C508 - C10770 * C503) *
               C10621 +
           (C10769 * C507 - (C10768 * C501 + C10767 * C506) + C10770 * C502 -
            C10771 * C508 - C10772 * C503) *
               C10622 +
           (C10771 * C507 - (C10770 * C501 + C10769 * C506) + C10772 * C502 -
            C10985 * C508 - C10986 * C503) *
               C10623 +
           (C10985 * C507 - (C10772 * C501 + C10771 * C506) + C10986 * C502 -
            (C10625 * C8428 + C50612 * C8430) * C508 -
            (C10625 * C8432 + C50612 * C8434) * C503) *
               C10624) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C50919 +
            (C10761 * C121 + C10762 * C50672) * C50790) *
               C15422 +
           ((C12905 + C12906) * C50919 + (C12879 + C12880) * C50790) * C15423 +
           ((C13500 + C13499) * C50919 + (C13480 + C13479) * C50790) * C15424) *
              C112 -
          (((C13496 + C13495) * C50790 + (C13494 + C13493) * C50919) * C15424 +
           ((C12885 + C12886) * C50790 + (C12907 + C12908) * C50919) * C15423 +
           ((C10768 * C50672 + C10767 * C121) * C50790 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C50919) *
               C15422) *
              C113 +
          ((((C10625 * C124 + C50612 * C131) * C121 +
             (C10625 * C135 + C50612 * C145) * C50672) *
                C50919 +
            (C10773 * C121 + C10774 * C50672) * C50790) *
               C15422 +
           ((C12909 + C12910) * C50919 + (C12895 + C12896) * C50790) * C15423 +
           (((C10625 * C853 + C50612 * C858) * C121 +
             (C10625 * C862 + C50612 * C868) * C50672) *
                C50919 +
            ((C10625 * C970 + C50612 * C974) * C121 +
             (C10625 * C978 + C50612 * C982) * C50672) *
                C50790) *
               C15424) *
              C114 -
          ((((C10625 * C977 + C50612 * C981) * C50672 +
             (C10625 * C969 + C50612 * C973) * C121) *
                C50790 +
            ((C10625 * C863 + C50612 * C869) * C50672 +
             (C10625 * C854 + C50612 * C859) * C121) *
                C50919) *
               C15424 +
           (((C10625 * C733 + C50612 * C745) * C50672 +
             (C10625 * C721 + C50612 * C729) * C121) *
                C50790 +
            ((C10625 * C391 + C50612 * C399) * C50672 +
             (C10625 * C381 + C50612 * C387) * C121) *
                C50919) *
               C15423 +
           (((C10625 * C265 + C50612 * C273) * C50672 +
             (C10625 * C255 + C50612 * C261) * C121) *
                C50790 +
            ((C10625 * C136 + C50612 * C146) * C50672 +
             (C10625 * C125 + C50612 * C132) * C121) *
                C50919) *
               C15422) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C50919 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C50790) *
               C15422 +
           ((C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C50919 +
            (C13307 + C13308 - C13309 - C13310 + C13311 + C13312) * C50790) *
               C15423 +
           ((C13492 * C506 + C13491 * C501 - C11401 * C507 - C11402 * C502 +
             C11403 * C508 + C11404 * C503) *
                C50919 +
            (C11401 * C506 + C11402 * C501 - C11403 * C507 - C11404 * C502 +
             C11405 * C508 + C11406 * C503) *
                C50790) *
               C15424) *
              C50898 +
          (((C10767 * C507 -
             ((C10625 * C134 + C50612 * C144) * C501 +
              (C10625 * C123 + C50612 * C130) * C506) +
             C10768 * C502 - C10769 * C508 - C10770 * C503) *
                C50919 +
            (C10769 * C507 - (C10768 * C501 + C10767 * C506) + C10770 * C502 -
             C10771 * C508 - C10772 * C503) *
                C50790) *
               C15422 +
           ((C11815 * C507 - (C12901 * C501 + C12902 * C506) + C11816 * C502 -
             C11817 * C508 - C11818 * C503) *
                C50919 +
            (C11817 * C507 - (C11816 * C501 + C11815 * C506) + C11818 * C502 -
             C11819 * C508 - C11820 * C503) *
                C50790) *
               C15423 +
           ((C13487 * C507 - (C13486 * C501 + C13485 * C506) + C13488 * C502 -
             C13489 * C508 - C13490 * C503) *
                C50919 +
            (C13489 * C507 - (C13488 * C501 + C13487 * C506) + C13490 * C502 -
             (C10625 * C8934 + C50612 * C8936) * C508 -
             (C10625 * C8938 + C50612 * C8940) * C503) *
                C50790) *
               C15424) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
            C2178 * C124 + C2173 * C131) *
               C600 +
           (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
            C2178 * C135 + C2173 * C145) *
               C595 -
           (C2362 + C2363 + C2364) * C601 - (C2365 + C2366 + C2367) * C596 +
           (C2696 + C2697 + C2698) * C602 + (C2699 + C2700 + C2701) * C597 -
           (C2830 + C2831 + C2832) * C603 - (C2833 + C2834 + C2835) * C598) *
              C50919 +
          ((C2364 + C2363 + C2362) * C600 + (C2367 + C2366 + C2365) * C595 -
           (C2698 + C2697 + C2696) * C601 - (C2701 + C2700 + C2699) * C596 +
           (C2832 + C2831 + C2830) * C602 + (C2835 + C2834 + C2833) * C597 -
           (C2178 * C2805 + C2173 * C2808 + C2177 * C2806 + C2172 * C2809 +
            C2176 * C2807 + C2171 * C2810) *
               C603 -
           (C2178 * C2811 + C2173 * C2814 + C2177 * C2812 + C2172 * C2815 +
            C2176 * C2813 + C2171 * C2816) *
               C598) *
              C50790) *
         C50802 * C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50905 -
            (C2362 + C2363 + C2364) * C254 - (C2365 + C2366 + C2367) * C50688) *
               C50919 +
           ((C2364 + C2363 + C2362) * C253 + (C2367 + C2366 + C2365) * C50905 -
            (C2178 * C511 + C2173 * C516 + C2177 * C510 + C2172 * C515 +
             C2176 * C509 + C2171 * C514) *
                C254 -
            (C2178 * C520 + C2173 * C526 + C2177 * C519 + C2172 * C525 +
             C2176 * C518 + C2171 * C524) *
                C50688) *
               C50790) *
              C50802 * C250 +
          (((C2368 + C2369 + C2370) * C254 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50905 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C253) +
            (C2371 + C2372 + C2373) * C50688) *
               C50919 +
           ((C2176 * C510 + C2171 * C515 + C2177 * C511 + C2172 * C516 +
             C2178 * C512 + C2173 * C517) *
                C254 -
            ((C2373 + C2372 + C2371) * C50905 +
             (C2370 + C2369 + C2368) * C253) +
            (C2176 * C519 + C2171 * C525 + C2177 * C520 + C2172 * C526 +
             C2178 * C521 + C2173 * C527) *
                C50688) *
               C50790) *
              C50802 * C251 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C253 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50905 -
            (C2374 + C2375 + C2376) * C254 - (C2377 + C2378 + C2379) * C50688) *
               C50919 +
           ((C2376 + C2375 + C2374) * C253 + (C2379 + C2378 + C2377) * C50905 -
            (C2178 * C513 + C2173 * C522 + C2177 * C512 + C2172 * C517 +
             C2176 * C511 + C2171 * C516) *
                C254 -
            (C2178 * C523 + C2173 * C528 + C2177 * C521 + C2172 * C527 +
             C2176 * C520 + C2171 * C526) *
                C50688) *
               C50790) *
              C50802 * C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C253 +
            (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
            C10762 * C50688) *
               C10621 +
           (C10761 * C253 + C10762 * C50905 - C10763 * C254 - C10764 * C50688) *
               C10622 +
           (C10763 * C253 + C10764 * C50905 - C10765 * C254 - C10766 * C50688) *
               C10623 +
           (C10765 * C253 + C10766 * C50905 -
            (C10625 * C2807 + C50612 * C2810) * C254 -
            (C10625 * C2813 + C50612 * C2816) * C50688) *
               C10624) *
              C50802 * C250 +
          ((C10767 * C254 -
            ((C10625 * C134 + C50612 * C144) * C50905 +
             (C10625 * C123 + C50612 * C130) * C253) +
            C10768 * C50688) *
               C10621 +
           (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
            C10770 * C50688) *
               C10622 +
           (C10771 * C254 - (C10770 * C50905 + C10769 * C253) +
            C10772 * C50688) *
               C10623 +
           ((C10625 * C2806 + C50612 * C2809) * C254 -
            (C10772 * C50905 + C10771 * C253) +
            (C10625 * C2812 + C50612 * C2815) * C50688) *
               C10624) *
              C50802 * C251 +
          (((C10625 * C124 + C50612 * C131) * C253 +
            (C10625 * C135 + C50612 * C145) * C50905 - C10773 * C254 -
            C10774 * C50688) *
               C10621 +
           (C10773 * C253 + C10774 * C50905 - C10775 * C254 - C10776 * C50688) *
               C10622 +
           (C10775 * C253 + C10776 * C50905 - C10777 * C254 - C10778 * C50688) *
               C10623 +
           (C10777 * C253 + C10778 * C50905 -
            (C10625 * C2805 + C50612 * C2808) * C254 -
            (C10625 * C2811 + C50612 * C2814) * C50688) *
               C10624) *
              C50802 * C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10625 * C122 + C50612 * C129) * C600 +
           (C10625 * C133 + C50612 * C143) * C595 - C10761 * C601 -
           C10762 * C596 + C10763 * C602 + C10764 * C597 - C10765 * C603 -
           C10766 * C598) *
              C10621 +
          (C10761 * C600 + C10762 * C595 - C10763 * C601 - C10764 * C596 +
           C10765 * C602 + C10766 * C597 - C10983 * C603 - C10984 * C598) *
              C10622 +
          (C10763 * C600 + C10764 * C595 - C10765 * C601 - C10766 * C596 +
           C10983 * C602 + C10984 * C597 - C11061 * C603 - C11062 * C598) *
              C10623 +
          (C10765 * C600 + C10766 * C595 - C10983 * C601 - C10984 * C596 +
           C11061 * C602 + C11062 * C597 -
           (C10625 * C11052 + C50612 * C11053) * C603 -
           (C10625 * C11054 + C50612 * C11055) * C598) *
              C10624) *
         C50802 * C50638 * C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C253 +
             (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
             C10762 * C50688) *
                C50919 +
            (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
             C10764 * C50688) *
                C50790) *
               C15422 +
           ((C13647 + C13648 - C13649 - C13650) * C50919 +
            (C13651 + C13652 - C13653 - C13654) * C50790) *
               C15423 +
           ((C13661 + C13660 - C13659 - C13662) * C50919 +
            (C13665 + C13664 - C13663 - C13666) * C50790) *
               C15424) *
              C250 +
          (((C10767 * C254 -
             ((C10625 * C134 + C50612 * C144) * C50905 +
              (C10625 * C123 + C50612 * C130) * C253) +
             C10768 * C50688) *
                C50919 +
            (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
             C10770 * C50688) *
                C50790) *
               C15422 +
           ((C14651 - (C14652 + C14653) + C14654) * C50919 +
            (C14655 - (C14656 + C14657) + C14658) * C50790) *
               C15423 +
           ((C13487 * C254 - (C13486 * C50905 + C13485 * C253) +
             C13488 * C50688) *
                C50919 +
            (C13489 * C254 - (C13488 * C50905 + C13487 * C253) +
             C13490 * C50688) *
                C50790) *
               C15424) *
              C251 +
          ((((C10625 * C124 + C50612 * C131) * C253 +
             (C10625 * C135 + C50612 * C145) * C50905 - C10773 * C254 -
             C10774 * C50688) *
                C50919 +
            (C10773 * C253 + C10774 * C50905 - C10775 * C254 -
             C10776 * C50688) *
                C50790) *
               C15422 +
           ((C12903 * C253 + C12904 * C50905 - C12725 * C254 -
             C12726 * C50688) *
                C50919 +
            (C12725 * C253 + C12726 * C50905 - C12727 * C254 -
             C12728 * C50688) *
                C50790) *
               C15423 +
           (((C10625 * C853 + C50612 * C858) * C253 +
             (C10625 * C862 + C50612 * C868) * C50905 - C18384 * C254 -
             C18385 * C50688) *
                C50919 +
            (C18384 * C253 + C18385 * C50905 -
             (C10625 * C3321 + C50612 * C3324) * C254 -
             (C10625 * C3327 + C50612 * C3330) * C50688) *
                C50790) *
               C15424) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C600 +
            (C10625 * C133 + C50612 * C143) * C595 - C10761 * C601 -
            C10762 * C596 + C10763 * C602 + C10764 * C597 - C10765 * C603 -
            C10766 * C598) *
               C50919 +
           (C10761 * C600 + C10762 * C595 - C10763 * C601 - C10764 * C596 +
            C10765 * C602 + C10766 * C597 - C10983 * C603 - C10984 * C598) *
               C50790) *
              C15422 +
          ((C12899 * C600 + C12900 * C595 - C11181 * C601 - C11182 * C596 +
            C11183 * C602 + C11184 * C597 - C11185 * C603 - C11186 * C598) *
               C50919 +
           (C11181 * C600 + C11182 * C595 - C11183 * C601 - C11184 * C596 +
            C11185 * C602 + C11186 * C597 - C11187 * C603 - C11188 * C598) *
               C50790) *
              C15423 +
          ((C13492 * C600 + C13491 * C595 - C11401 * C601 - C11402 * C596 +
            C11403 * C602 + C11404 * C597 - C11405 * C603 - C11406 * C598) *
               C50919 +
           (C11401 * C600 + C11402 * C595 - C11403 * C601 - C11404 * C596 +
            C11405 * C602 + C11406 * C597 -
            (C10625 * C11384 + C50612 * C11385) * C603 -
            (C10625 * C11386 + C50612 * C11387) * C598) *
               C50790) *
              C15424) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C506 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C501 -
            (C2362 + C2363 + C2364) * C507 - (C2365 + C2366 + C2367) * C502 +
            (C2696 + C2697 + C2698) * C508 + (C2699 + C2700 + C2701) * C503) *
               C50919 +
           ((C2364 + C2363 + C2362) * C506 + (C2367 + C2366 + C2365) * C501 -
            (C2698 + C2697 + C2696) * C507 - (C2701 + C2700 + C2699) * C502 +
            (C2832 + C2831 + C2830) * C508 + (C2835 + C2834 + C2833) * C503) *
               C50790) *
              C50802 * C50638 * C50907 +
          (((C3018 + C3019 + C3020) * C507 -
            ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
              C2176 * C393 + C2171 * C401) *
                 C501 +
             (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
              C2176 * C383 + C2171 * C394) *
                 C506) +
            (C3021 + C3022 + C3023) * C502 - (C3024 + C3025 + C3026) * C508 -
            (C3027 + C3028 + C3029) * C503) *
               C50919 +
           ((C3026 + C3025 + C3024) * C507 -
            ((C3023 + C3022 + C3021) * C501 + (C3020 + C3019 + C3018) * C506) +
            (C3029 + C3028 + C3027) * C502 -
            (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
             C2176 * C2983 + C2171 * C2986) *
                C508 -
            (C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
             C2176 * C2989 + C2171 * C2992) *
                C503) *
               C50790) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50672) *
                C50919 +
            ((C2364 + C2363 + C2362) * C121 +
             (C2367 + C2366 + C2365) * C50672) *
                C50790) *
               C50802 * C250 -
           (((C2373 + C2372 + C2371) * C50672 +
             (C2370 + C2369 + C2368) * C121) *
                C50790 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50672 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50919) *
               C50802 * C251 +
           (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
              C2178 * C126 + C2173 * C138) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
              C2178 * C137 + C2173 * C147) *
                 C50672) *
                C50919 +
            ((C2376 + C2375 + C2374) * C121 +
             (C2379 + C2378 + C2377) * C50672) *
                C50790) *
               C50802 * C252) *
              C50907 +
          ((((C2176 * C379 + C2171 * C385 + C2177 * C380 + C2172 * C386 +
              C2178 * C381 + C2173 * C387) *
                 C121 +
             (C2176 * C389 + C2171 * C397 + C2177 * C390 + C2172 * C398 +
              C2178 * C391 + C2173 * C399) *
                 C50672) *
                C50919 +
            ((C2176 * C719 + C2171 * C727 + C2177 * C720 + C2172 * C728 +
              C2178 * C721 + C2173 * C729) *
                 C121 +
             (C2176 * C731 + C2171 * C743 + C2177 * C732 + C2172 * C744 +
              C2178 * C733 + C2173 * C745) *
                 C50672) *
                C50790) *
               C50802 * C251 -
           (((C2178 * C732 + C2173 * C744 + C2177 * C731 + C2172 * C743 +
              C2176 * C730 + C2171 * C742) *
                 C50672 +
             (C2178 * C720 + C2173 * C728 + C2177 * C719 + C2172 * C727 +
              C2176 * C718 + C2171 * C726) *
                 C121) *
                C50790 +
            ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
              C2176 * C393 + C2171 * C401) *
                 C50672 +
             (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
              C2176 * C383 + C2171 * C394) *
                 C121) *
                C50919) *
               C50802 * C250 -
           (((C2178 * C1414 + C2173 * C1415 + C2177 * C733 + C2172 * C745 +
              C2176 * C732 + C2171 * C744) *
                 C50672 +
             (C2178 * C1412 + C2173 * C1413 + C2177 * C721 + C2172 * C729 +
              C2176 * C720 + C2171 * C728) *
                 C121) *
                C50790 +
            ((C2178 * C392 + C2173 * C400 + C2177 * C391 + C2172 * C399 +
              C2176 * C390 + C2171 * C398) *
                 C50672 +
             (C2178 * C382 + C2173 * C388 + C2177 * C381 + C2172 * C387 +
              C2176 * C380 + C2171 * C386) *
                 C121) *
                C50919) *
               C50802 * C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C10621 +
            (C10761 * C121 + C10762 * C50672) * C10622 +
            (C10763 * C121 + C10764 * C50672) * C10623 +
            (C10765 * C121 + C10766 * C50672) * C10624) *
               C50802 * C250 -
           ((C10772 * C50672 + C10771 * C121) * C10624 +
            (C10770 * C50672 + C10769 * C121) * C10623 +
            (C10768 * C50672 + C10767 * C121) * C10622 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C10621) *
               C50802 * C251 +
           (((C10625 * C124 + C50612 * C131) * C121 +
             (C10625 * C135 + C50612 * C145) * C50672) *
                C10621 +
            (C10773 * C121 + C10774 * C50672) * C10622 +
            (C10775 * C121 + C10776 * C50672) * C10623 +
            (C10777 * C121 + C10778 * C50672) * C10624) *
               C50802 * C252) *
              C50907 +
          ((((C10625 * C379 + C50612 * C385) * C121 +
             (C10625 * C389 + C50612 * C397) * C50672) *
                C10621 +
            ((C10625 * C719 + C50612 * C727) * C121 +
             (C10625 * C731 + C50612 * C743) * C50672) *
                C10622 +
            ((C10625 * C724 + C50612 * C736) * C121 +
             (C10625 * C740 + C50612 * C748) * C50672) *
                C10623 +
            ((C10625 * C2982 + C50612 * C2985) * C121 +
             (C10625 * C2988 + C50612 * C2991) * C50672) *
                C10624) *
               C50802 * C251 -
           (((C10625 * C2989 + C50612 * C2992) * C50672 +
             (C10625 * C2983 + C50612 * C2986) * C121) *
                C10624 +
            ((C10625 * C741 + C50612 * C749) * C50672 +
             (C10625 * C725 + C50612 * C737) * C121) *
                C10623 +
            ((C10625 * C730 + C50612 * C742) * C50672 +
             (C10625 * C718 + C50612 * C726) * C121) *
                C10622 +
            ((C10625 * C393 + C50612 * C401) * C50672 +
             (C10625 * C383 + C50612 * C394) * C121) *
                C10621) *
               C50802 * C250 -
           (((C10625 * C2987 + C50612 * C2990) * C50672 +
             (C10625 * C2981 + C50612 * C2984) * C121) *
                C10624 +
            ((C10625 * C739 + C50612 * C747) * C50672 +
             (C10625 * C723 + C50612 * C735) * C121) *
                C10623 +
            ((C10625 * C732 + C50612 * C744) * C50672 +
             (C10625 * C720 + C50612 * C728) * C121) *
                C10622 +
            ((C10625 * C390 + C50612 * C398) * C50672 +
             (C10625 * C380 + C50612 * C386) * C121) *
                C10621) *
               C50802 * C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C506 +
            (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
            C10762 * C502 + C10763 * C508 + C10764 * C503) *
               C10621 +
           (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
            C10765 * C508 + C10766 * C503) *
               C10622 +
           (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
            C10983 * C508 + C10984 * C503) *
               C10623 +
           (C10765 * C506 + C10766 * C501 - C10983 * C507 - C10984 * C502 +
            C11061 * C508 + C11062 * C503) *
               C10624) *
              C50802 * C50638 * C50907 +
          ((C11181 * C507 -
            ((C10625 * C393 + C50612 * C401) * C501 +
             (C10625 * C383 + C50612 * C394) * C506) +
            C11182 * C502 - C11183 * C508 - C11184 * C503) *
               C10621 +
           (C11183 * C507 - (C11182 * C501 + C11181 * C506) + C11184 * C502 -
            C11185 * C508 - C11186 * C503) *
               C10622 +
           (C11185 * C507 - (C11184 * C501 + C11183 * C506) + C11186 * C502 -
            C11187 * C508 - C11188 * C503) *
               C10623 +
           (C11187 * C507 - (C11186 * C501 + C11185 * C506) + C11188 * C502 -
            (C10625 * C11160 + C50612 * C11161) * C508 -
            (C10625 * C11162 + C50612 * C11163) * C503) *
               C10624) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C50919 +
             (C10761 * C121 + C10762 * C50672) * C50790) *
                C15422 +
            ((C12905 + C12906) * C50919 + (C12879 + C12880) * C50790) * C15423 +
            ((C13500 + C13499) * C50919 + (C13480 + C13479) * C50790) *
                C15424) *
               C250 -
           (((C13496 + C13495) * C50790 + (C13494 + C13493) * C50919) * C15424 +
            ((C12885 + C12886) * C50790 + (C12907 + C12908) * C50919) * C15423 +
            ((C10768 * C50672 + C10767 * C121) * C50790 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C50919) *
                C15422) *
               C251 +
           ((((C10625 * C124 + C50612 * C131) * C121 +
              (C10625 * C135 + C50612 * C145) * C50672) *
                 C50919 +
             (C10773 * C121 + C10774 * C50672) * C50790) *
                C15422 +
            ((C12909 + C12910) * C50919 + (C12895 + C12896) * C50790) * C15423 +
            ((C18540 + C18541) * C50919 + (C18536 + C18537) * C50790) *
                C15424) *
               C252) *
              C50907 +
          ((((C12908 + C12907) * C50919 + (C12886 + C12885) * C50790) * C15422 +
            ((C13493 + C13494) * C50919 + (C13495 + C13496) * C50790) * C15423 +
            (((C10625 * C1057 + C50612 * C1065) * C121 +
              (C10625 * C1061 + C50612 * C1069) * C50672) *
                 C50919 +
             ((C10625 * C3450 + C50612 * C3456) * C121 +
              (C10625 * C3453 + C50612 * C3459) * C50672) *
                 C50790) *
                C15424) *
               C251 -
           (((C13794 + C13793) * C50790 + (C13800 + C13799) * C50919) * C15424 +
            ((C13479 + C13480) * C50790 + (C13499 + C13500) * C50919) * C15423 +
            ((C12880 + C12879) * C50790 + (C12906 + C12905) * C50919) *
                C15422) *
               C250 -
           ((((C10625 * C3452 + C50612 * C3458) * C50672 +
              (C10625 * C3449 + C50612 * C3455) * C121) *
                 C50790 +
             ((C10625 * C1060 + C50612 * C1068) * C50672 +
              (C10625 * C1056 + C50612 * C1064) * C121) *
                 C50919) *
                C15424 +
            ((C18537 + C18536) * C50790 + (C18541 + C18540) * C50919) * C15423 +
            ((C12896 + C12895) * C50790 + (C12910 + C12909) * C50919) *
                C15422) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C50919 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C50790) *
               C15422 +
           ((C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C50919 +
            (C13307 + C13308 - C13309 - C13310 + C13311 + C13312) * C50790) *
               C15423 +
           ((C18932 + C18933 - C18934 - C18935 + C18936 + C18937) * C50919 +
            (C18938 + C18939 - C18940 - C18941 + C18942 + C18943) * C50790) *
               C15424) *
              C50638 * C50907 +
          (((C13303 - (C13302 + C13301) + C13304 - C13305 - C13306) * C50919 +
            (C13309 - (C13308 + C13307) + C13310 - C13311 - C13312) * C50790) *
               C15422 +
           ((C18934 - (C18933 + C18932) + C18935 - C18936 - C18937) * C50919 +
            (C18940 - (C18939 + C18938) + C18941 - C18942 - C18943) * C50790) *
               C15423 +
           ((C13679 * C507 - (C13798 * C501 + C13797 * C506) + C13680 * C502 -
             C13681 * C508 - C13682 * C503) *
                C50919 +
            (C13681 * C507 - (C13680 * C501 + C13679 * C506) + C13682 * C502 -
             (C10625 * C11472 + C50612 * C11474) * C508 -
             (C10625 * C11473 + C50612 * C11475) * C503) *
                C50790) *
               C15424) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1174 +
             (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
             C10762 * C50688) *
                C7787 +
            (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
             C10764 * C50688) *
                C7788 +
            (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
             C10766 * C50688) *
                C7789) *
               C50920 +
           ((C12899 * C1174 + C12900 * C1169 - C11181 * C1175 -
             C11182 * C50688) *
                C7787 +
            (C11181 * C1174 + C11182 * C1169 - C11183 * C1175 -
             C11184 * C50688) *
                C7788 +
            (C11183 * C1174 + C11184 * C1169 - C11185 * C1175 -
             C11186 * C50688) *
                C7789) *
               C50814) *
              C50950 +
          (((C10767 * C1175 -
             ((C10625 * C134 + C50612 * C144) * C1169 +
              (C10625 * C123 + C50612 * C130) * C1174) +
             C10768 * C50688) *
                C7787 +
            (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
             C10770 * C50688) *
                C7788 +
            (C10771 * C1175 - (C10770 * C1169 + C10769 * C1174) +
             C10772 * C50688) *
                C7789) *
               C50920 +
           ((C11815 * C1175 - (C12901 * C1169 + C12902 * C1174) +
             C11816 * C50688) *
                C7787 +
            (C11817 * C1175 - (C11816 * C1169 + C11815 * C1174) +
             C11818 * C50688) *
                C7788 +
            (C11819 * C1175 - (C11818 * C1169 + C11817 * C1174) +
             C11820 * C50688) *
                C7789) *
               C50814) *
              C50936 +
          ((((C10625 * C124 + C50612 * C131) * C1174 +
             (C10625 * C135 + C50612 * C145) * C1169 - C10773 * C1175 -
             C10774 * C50688) *
                C7787 +
            (C10773 * C1174 + C10774 * C1169 - C10775 * C1175 -
             C10776 * C50688) *
                C7788 +
            (C10775 * C1174 + C10776 * C1169 - C10777 * C1175 -
             C10778 * C50688) *
                C7789) *
               C50920 +
           ((C12903 * C1174 + C12904 * C1169 - C12725 * C1175 -
             C12726 * C50688) *
                C7787 +
            (C12725 * C1174 + C12726 * C1169 - C12727 * C1175 -
             C12728 * C50688) *
                C7788 +
            (C12727 * C1174 + C12728 * C1169 -
             (C10625 * C2981 + C50612 * C2984) * C1175 -
             (C10625 * C2987 + C50612 * C2990) * C50688) *
                C7789) *
               C50814) *
              C1173) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1174 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C1169 -
            (C2362 + C2363 + C2364) * C1175 -
            (C2365 + C2366 + C2367) * C50688) *
               C50776 * C50920 +
           ((C5366 + C5367 + C5368) * C1174 + (C5369 + C5370 + C5371) * C1169 -
            (C3020 + C3019 + C3018) * C1175 -
            (C3023 + C3022 + C3021) * C50688) *
               C50776 * C50814) *
              C50950 +
          (((C2368 + C2369 + C2370) * C1175 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C1169 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C1174) +
            (C2371 + C2372 + C2373) * C50688) *
               C50776 * C50920 +
           ((C3962 + C3961 + C3960) * C1175 -
            ((C5372 + C5373 + C5374) * C1169 +
             (C5375 + C5376 + C5377) * C1174) +
            (C3965 + C3964 + C3963) * C50688) *
               C50776 * C50814) *
              C50936 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C1174 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C1169 -
            (C2374 + C2375 + C2376) * C1175 -
            (C2377 + C2378 + C2379) * C50688) *
               C50776 * C50920 +
           ((C5378 + C5379 + C5380) * C1174 + (C5381 + C5382 + C5383) * C1169 -
            (C2178 * C1412 + C2173 * C1413 + C2177 * C721 + C2172 * C729 +
             C2176 * C720 + C2171 * C728) *
                C1175 -
            (C2178 * C1414 + C2173 * C1415 + C2177 * C733 + C2172 * C745 +
             C2176 * C732 + C2171 * C744) *
                C50688) *
               C50776 * C50814) *
              C1173) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C1174 +
            (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
            C10762 * C50688) *
               C50776 * C20970 +
           (C14287 + C14288 - C14289 - C14290) * C50776 * C20971 +
           C20900 * C50776 * C20972 +
           (C20892 + C20891 - C20890 - C20893) * C50776 * C20973) *
              C50950 +
          ((C10767 * C1175 -
            ((C10625 * C134 + C50612 * C144) * C1169 +
             (C10625 * C123 + C50612 * C130) * C1174) +
            C10768 * C50688) *
               C50776 * C20970 +
           (C14299 - (C14300 + C14301) + C14302) * C50776 * C20971 +
           (C19888 - (C19889 + C19890) + C19891) * C50776 * C20972 +
           (C19108 * C1175 - (C19107 * C1169 + C19106 * C1174) +
            C19109 * C50688) *
               C50776 * C20973) *
              C50936 +
          (((C10625 * C124 + C50612 * C131) * C1174 +
            (C10625 * C135 + C50612 * C145) * C1169 - C10773 * C1175 -
            C10774 * C50688) *
               C50776 * C20970 +
           (C12903 * C1174 + C12904 * C1169 - C12725 * C1175 -
            C12726 * C50688) *
               C50776 * C20971 +
           (C18538 * C1174 + C18539 * C1169 - C18384 * C1175 -
            C18385 * C50688) *
               C50776 * C20972 +
           (C21175 * C1174 + C21176 * C1169 -
            (C10625 * C3449 + C50612 * C3455) * C1175 -
            (C10625 * C3452 + C50612 * C3458) * C50688) *
               C50776 * C20973) *
              C1173) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1279 +
             (C10625 * C133 + C50612 * C143) * C50951 - C10761 * C1280 -
             C10762 * C50939 + C10763 * C1281 + C10764 * C1276) *
                C7787 +
            (C10761 * C1279 + C10762 * C50951 - C10763 * C1280 -
             C10764 * C50939 + C10765 * C1281 + C10766 * C1276) *
                C7788 +
            (C10763 * C1279 + C10764 * C50951 - C10765 * C1280 -
             C10766 * C50939 + C10983 * C1281 + C10984 * C1276) *
                C7789) *
               C50920 +
           ((C12899 * C1279 + C12900 * C50951 - C11181 * C1280 -
             C11182 * C50939 + C11183 * C1281 + C11184 * C1276) *
                C7787 +
            (C11181 * C1279 + C11182 * C50951 - C11183 * C1280 -
             C11184 * C50939 + C11185 * C1281 + C11186 * C1276) *
                C7788 +
            (C11183 * C1279 + C11184 * C50951 - C11185 * C1280 -
             C11186 * C50939 + C11187 * C1281 + C11188 * C1276) *
                C7789) *
               C50814) *
              C1277 +
          (((C10767 * C1280 -
             ((C10625 * C134 + C50612 * C144) * C50951 +
              (C10625 * C123 + C50612 * C130) * C1279) +
             C10768 * C50939 - C10769 * C1281 - C10770 * C1276) *
                C7787 +
            (C10769 * C1280 - (C10768 * C50951 + C10767 * C1279) +
             C10770 * C50939 - C10771 * C1281 - C10772 * C1276) *
                C7788 +
            (C10771 * C1280 - (C10770 * C50951 + C10769 * C1279) +
             C10772 * C50939 - C10985 * C1281 - C10986 * C1276) *
                C7789) *
               C50920 +
           ((C11815 * C1280 - (C12901 * C50951 + C12902 * C1279) +
             C11816 * C50939 - C11817 * C1281 - C11818 * C1276) *
                C7787 +
            (C11817 * C1280 - (C11816 * C50951 + C11815 * C1279) +
             C11818 * C50939 - C11819 * C1281 - C11820 * C1276) *
                C7788 +
            (C11819 * C1280 - (C11818 * C50951 + C11817 * C1279) +
             C11820 * C50939 - (C10625 * C8596 + C50612 * C8598) * C1281 -
             (C10625 * C8600 + C50612 * C8602) * C1276) *
                C7789) *
               C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1279 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50951 -
            (C2362 + C2363 + C2364) * C1280 - (C2365 + C2366 + C2367) * C50939 +
            (C2696 + C2697 + C2698) * C1281 + (C2699 + C2700 + C2701) * C1276) *
               C50776 * C50920 +
           ((C5366 + C5367 + C5368) * C1279 + (C5369 + C5370 + C5371) * C50951 -
            (C3020 + C3019 + C3018) * C1280 - (C3023 + C3022 + C3021) * C50939 +
            (C3026 + C3025 + C3024) * C1281 + (C3029 + C3028 + C3027) * C1276) *
               C50776 * C50814) *
              C1277 +
          (((C2368 + C2369 + C2370) * C1280 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50951 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C1279) +
            (C2371 + C2372 + C2373) * C50939 - (C2702 + C2703 + C2704) * C1281 -
            (C2705 + C2706 + C2707) * C1276) *
               C50776 * C50920 +
           ((C3962 + C3961 + C3960) * C1280 -
            ((C5372 + C5373 + C5374) * C50951 +
             (C5375 + C5376 + C5377) * C1279) +
            (C3965 + C3964 + C3963) * C50939 -
            (C2178 * C722 + C2173 * C734 + C2177 * C723 + C2172 * C735 +
             C2176 * C724 + C2171 * C736) *
                C1281 -
            (C2178 * C738 + C2173 * C746 + C2177 * C739 + C2172 * C747 +
             C2176 * C740 + C2171 * C748) *
                C1276) *
               C50776 * C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C1279 +
            (C10625 * C133 + C50612 * C143) * C50951 - C10761 * C1280 -
            C10762 * C50939 + C10763 * C1281 + C10764 * C1276) *
               C50776 * C20970 +
           (C15149 + C15150 - C15151 - C15152 + C15153 + C15154) * C50776 *
               C20971 +
           (C20730 + C20731 - C20732 - C20733 + C20734 + C20735) * C50776 *
               C20972 +
           (C13797 * C1279 + C13798 * C50951 - C13679 * C1280 -
            C13680 * C50939 + C13681 * C1281 + C13682 * C1276) *
               C50776 * C20973) *
              C1277 +
          ((C10767 * C1280 -
            ((C10625 * C134 + C50612 * C144) * C50951 +
             (C10625 * C123 + C50612 * C130) * C1279) +
            C10768 * C50939 - C10769 * C1281 - C10770 * C1276) *
               C50776 * C20970 +
           (C11815 * C1280 - (C12901 * C50951 + C12902 * C1279) +
            C11816 * C50939 - C11817 * C1281 - C11818 * C1276) *
               C50776 * C20971 +
           (C13487 * C1280 - (C13486 * C50951 + C13485 * C1279) +
            C13488 * C50939 - C13489 * C1281 - C13490 * C1276) *
               C50776 * C20972 +
           (C19108 * C1280 - (C19107 * C50951 + C19106 * C1279) +
            C19109 * C50939 - (C10625 * C9064 + C50612 * C9068) * C1281 -
            (C10625 * C9066 + C50612 * C9070) * C1276) *
               C50776 * C20973) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C1174 +
              (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
              C10762 * C50688) *
                 C7787 +
             (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
              C10764 * C50688) *
                 C7788 +
             (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
              C10766 * C50688) *
                 C7789) *
                C50920 +
            ((C14287 + C14288 - C14289 - C14290) * C7787 +
             (C14291 + C14292 - C14293 - C14294) * C7788 +
             (C14295 + C14296 - C14297 - C14298) * C7789) *
                C50814) *
               C1277 +
           (((C10767 * C1175 -
              ((C10625 * C134 + C50612 * C144) * C1169 +
               (C10625 * C123 + C50612 * C130) * C1174) +
              C10768 * C50688) *
                 C7787 +
             (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
              C10770 * C50688) *
                 C7788 +
             (C10771 * C1175 - (C10770 * C1169 + C10769 * C1174) +
              C10772 * C50688) *
                 C7789) *
                C50920 +
            ((C14299 - (C14300 + C14301) + C14302) * C7787 +
             (C14303 - (C14304 + C14305) + C14306) * C7788 +
             (C14307 - (C14308 + C14309) + C14310) * C7789) *
                C50814) *
               C50643) *
              C50907 +
          ((((C14289 - (C14288 + C14287) + C14290) * C7787 +
             (C14293 - (C14292 + C14291) + C14294) * C7788 +
             (C14297 - (C14296 + C14295) + C14298) * C7789) *
                C50920 +
            ((C11401 * C1175 - (C13491 * C1169 + C13492 * C1174) +
              C11402 * C50688) *
                 C7787 +
             (C11403 * C1175 - (C11402 * C1169 + C11401 * C1174) +
              C11404 * C50688) *
                 C7788 +
             (C11405 * C1175 - (C11404 * C1169 + C11403 * C1174) +
              C11406 * C50688) *
                 C7789) *
                C50814) *
               C1277 +
           (((C14301 + C14300 - C14299 - C14302) * C7787 +
             (C14305 + C14304 - C14303 - C14306) * C7788 +
             (C14309 + C14308 - C14307 - C14310) * C7789) *
                C50920 +
            ((C13485 * C1174 + C13486 * C1169 - C13487 * C1175 -
              C13488 * C50688) *
                 C7787 +
             (C13487 * C1174 + C13488 * C1169 - C13489 * C1175 -
              C13490 * C50688) *
                 C7788 +
             (C13489 * C1174 + C13490 * C1169 -
              (C10625 * C8934 + C50612 * C8936) * C1175 -
              (C10625 * C8938 + C50612 * C8940) * C50688) *
                 C7789) *
                C50814) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C1174 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C1169 -
             (C2362 + C2363 + C2364) * C1175 -
             (C2365 + C2366 + C2367) * C50688) *
                C50776 * C50920 +
            ((C5366 + C5367 + C5368) * C1174 + (C5369 + C5370 + C5371) * C1169 -
             (C3020 + C3019 + C3018) * C1175 -
             (C3023 + C3022 + C3021) * C50688) *
                C50776 * C50814) *
               C1277 +
           (((C2368 + C2369 + C2370) * C1175 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C1169 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C1174) +
             (C2371 + C2372 + C2373) * C50688) *
                C50776 * C50920 +
            ((C3962 + C3961 + C3960) * C1175 -
             ((C5372 + C5373 + C5374) * C1169 +
              (C5375 + C5376 + C5377) * C1174) +
             (C3965 + C3964 + C3963) * C50688) *
                C50776 * C50814) *
               C50643) *
              C50907 +
          ((((C3018 + C3019 + C3020) * C1175 -
             ((C5371 + C5370 + C5369) * C1169 +
              (C5368 + C5367 + C5366) * C1174) +
             (C3021 + C3022 + C3023) * C50688) *
                C50776 * C50920 +
            ((C3348 + C3347 + C3346) * C1175 -
             ((C5950 + C5951 + C5952) * C1169 +
              (C5953 + C5954 + C5955) * C1174) +
             (C3351 + C3350 + C3349) * C50688) *
                C50776 * C50814) *
               C1277 +
           (((C5377 + C5376 + C5375) * C1174 + (C5374 + C5373 + C5372) * C1169 -
             (C3960 + C3961 + C3962) * C1175 -
             (C3963 + C3964 + C3965) * C50688) *
                C50776 * C50920 +
            ((C5944 + C5945 + C5946) * C1174 + (C5947 + C5948 + C5949) * C1169 -
             (C2178 * C969 + C2173 * C973 + C2177 * C970 + C2172 * C974 +
              C2176 * C971 + C2171 * C975) *
                 C1175 -
             (C2178 * C977 + C2173 * C981 + C2177 * C978 + C2172 * C982 +
              C2176 * C979 + C2171 * C983) *
                 C50688) *
                C50776 * C50814) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1174 +
             (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
             C10762 * C50688) *
                C50776 * C20970 +
            (C14287 + C14288 - C14289 - C14290) * C50776 * C20971 +
            C20900 * C50776 * C20972 +
            (C20892 + C20891 - C20890 - C20893) * C50776 * C20973) *
               C1277 +
           ((C10767 * C1175 -
             ((C10625 * C134 + C50612 * C144) * C1169 +
              (C10625 * C123 + C50612 * C130) * C1174) +
             C10768 * C50688) *
                C50776 * C20970 +
            (C14299 - (C14300 + C14301) + C14302) * C50776 * C20971 +
            (C19888 - (C19889 + C19890) + C19891) * C50776 * C20972 +
            (C22073 - (C22074 + C22075) + C22076) * C50776 * C20973) *
               C50643) *
              C50907 +
          (((C14289 - (C14288 + C14287) + C14290) * C50776 * C20970 +
            (C15313 - (C15314 + C15315) + C15316) * C50776 * C20971 +
            (C20890 - (C20891 + C20892) + C20893) * C50776 * C20972 +
            (C19278 * C1175 - (C19398 * C1169 + C19397 * C1174) +
             C19279 * C50688) *
                C50776 * C20973) *
               C1277 +
           ((C14301 + C14300 - C14299 - C14302) * C50776 * C20970 +
            (C19890 + C19889 - C19888 - C19891) * C50776 * C20971 +
            (C22075 + C22074 - C22073 - C22076) * C50776 * C20972 +
            (C21555 * C1174 + C21556 * C1169 -
             (C10625 * C16507 + C50612 * C16508) * C1175 -
             (C10625 * C16509 + C50612 * C16510) * C50688) *
                C50776 * C20973) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C1174 +
              (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
              C10762 * C50688) *
                 C7787 +
             (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
              C10764 * C50688) *
                 C7788 +
             (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
              C10766 * C50688) *
                 C7789) *
                C50920 +
            ((C14287 + C14288 - C14289 - C14290) * C7787 +
             (C14291 + C14292 - C14293 - C14294) * C7788 +
             (C14295 + C14296 - C14297 - C14298) * C7789) *
                C50814) *
               C50898 +
           (((C10767 * C1175 -
              ((C10625 * C134 + C50612 * C144) * C1169 +
               (C10625 * C123 + C50612 * C130) * C1174) +
              C10768 * C50688) *
                 C7787 +
             (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
              C10770 * C50688) *
                 C7788 +
             (C10771 * C1175 - (C10770 * C1169 + C10769 * C1174) +
              C10772 * C50688) *
                 C7789) *
                C50920 +
            ((C14299 - (C14300 + C14301) + C14302) * C7787 +
             (C14303 - (C14304 + C14305) + C14306) * C7788 +
             (C14307 - (C14308 + C14309) + C14310) * C7789) *
                C50814) *
               C50643) *
              C1514 +
          ((((C14289 - (C14288 + C14287) + C14290) * C7787 +
             (C14293 - (C14292 + C14291) + C14294) * C7788 +
             (C14297 - (C14296 + C14295) + C14298) * C7789) *
                C50920 +
            ((C11401 * C1175 - (C13491 * C1169 + C13492 * C1174) +
              C11402 * C50688) *
                 C7787 +
             (C11403 * C1175 - (C11402 * C1169 + C11401 * C1174) +
              C11404 * C50688) *
                 C7788 +
             (C11405 * C1175 - (C11404 * C1169 + C11403 * C1174) +
              C11406 * C50688) *
                 C7789) *
                C50814) *
               C50898 +
           (((C14301 + C14300 - C14299 - C14302) * C7787 +
             (C14305 + C14304 - C14303 - C14306) * C7788 +
             (C14309 + C14308 - C14307 - C14310) * C7789) *
                C50920 +
            ((C13485 * C1174 + C13486 * C1169 - C13487 * C1175 -
              C13488 * C50688) *
                 C7787 +
             (C13487 * C1174 + C13488 * C1169 - C13489 * C1175 -
              C13490 * C50688) *
                 C7788 +
             (C13489 * C1174 + C13490 * C1169 -
              (C10625 * C8934 + C50612 * C8936) * C1175 -
              (C10625 * C8938 + C50612 * C8940) * C50688) *
                 C7789) *
                C50814) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C1174 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C1169 -
             (C2362 + C2363 + C2364) * C1175 -
             (C2365 + C2366 + C2367) * C50688) *
                C50776 * C50920 +
            ((C5366 + C5367 + C5368) * C1174 + (C5369 + C5370 + C5371) * C1169 -
             (C3020 + C3019 + C3018) * C1175 -
             (C3023 + C3022 + C3021) * C50688) *
                C50776 * C50814) *
               C50898 +
           (((C2368 + C2369 + C2370) * C1175 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C1169 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C1174) +
             (C2371 + C2372 + C2373) * C50688) *
                C50776 * C50920 +
            ((C3962 + C3961 + C3960) * C1175 -
             ((C5372 + C5373 + C5374) * C1169 +
              (C5375 + C5376 + C5377) * C1174) +
             (C3965 + C3964 + C3963) * C50688) *
                C50776 * C50814) *
               C50643) *
              C1514 +
          ((((C3018 + C3019 + C3020) * C1175 -
             ((C5371 + C5370 + C5369) * C1169 +
              (C5368 + C5367 + C5366) * C1174) +
             (C3021 + C3022 + C3023) * C50688) *
                C50776 * C50920 +
            ((C3348 + C3347 + C3346) * C1175 -
             ((C5950 + C5951 + C5952) * C1169 +
              (C5953 + C5954 + C5955) * C1174) +
             (C3351 + C3350 + C3349) * C50688) *
                C50776 * C50814) *
               C50898 +
           (((C5377 + C5376 + C5375) * C1174 + (C5374 + C5373 + C5372) * C1169 -
             (C3960 + C3961 + C3962) * C1175 -
             (C3963 + C3964 + C3965) * C50688) *
                C50776 * C50920 +
            ((C5944 + C5945 + C5946) * C1174 + (C5947 + C5948 + C5949) * C1169 -
             (C2178 * C969 + C2173 * C973 + C2177 * C970 + C2172 * C974 +
              C2176 * C971 + C2171 * C975) *
                 C1175 -
             (C2178 * C977 + C2173 * C981 + C2177 * C978 + C2172 * C982 +
              C2176 * C979 + C2171 * C983) *
                 C50688) *
                C50776 * C50814) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1174 +
             (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
             C10762 * C50688) *
                C50776 * C20970 +
            (C14287 + C14288 - C14289 - C14290) * C50776 * C20971 +
            C20900 * C50776 * C20972 +
            (C20892 + C20891 - C20890 - C20893) * C50776 * C20973) *
               C50898 +
           ((C10767 * C1175 -
             ((C10625 * C134 + C50612 * C144) * C1169 +
              (C10625 * C123 + C50612 * C130) * C1174) +
             C10768 * C50688) *
                C50776 * C20970 +
            (C14299 - (C14300 + C14301) + C14302) * C50776 * C20971 +
            (C19888 - (C19889 + C19890) + C19891) * C50776 * C20972 +
            (C22073 - (C22074 + C22075) + C22076) * C50776 * C20973) *
               C50643) *
              C1514 +
          (((C14289 - (C14288 + C14287) + C14290) * C50776 * C20970 +
            (C15313 - (C15314 + C15315) + C15316) * C50776 * C20971 +
            (C20890 - (C20891 + C20892) + C20893) * C50776 * C20972 +
            (C19278 * C1175 - (C19398 * C1169 + C19397 * C1174) +
             C19279 * C50688) *
                C50776 * C20973) *
               C50898 +
           ((C14301 + C14300 - C14299 - C14302) * C50776 * C20970 +
            (C19890 + C19889 - C19888 - C19891) * C50776 * C20971 +
            (C22075 + C22074 - C22073 - C22076) * C50776 * C20972 +
            (C21555 * C1174 + C21556 * C1169 -
             (C10625 * C16507 + C50612 * C16508) * C1175 -
             (C10625 * C16509 + C50612 * C16510) * C50688) *
                C50776 * C20973) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1279 +
             (C10625 * C133 + C50612 * C143) * C50951 - C10761 * C1280 -
             C10762 * C50939 + C10763 * C1281 + C10764 * C1276) *
                C7787 +
            (C10761 * C1279 + C10762 * C50951 - C10763 * C1280 -
             C10764 * C50939 + C10765 * C1281 + C10766 * C1276) *
                C7788 +
            (C10763 * C1279 + C10764 * C50951 - C10765 * C1280 -
             C10766 * C50939 + C10983 * C1281 + C10984 * C1276) *
                C7789) *
               C50920 +
           ((C15149 + C15150 - C15151 - C15152 + C15153 + C15154) * C7787 +
            (C15155 + C15156 - C15157 - C15158 + C15159 + C15160) * C7788 +
            (C15161 + C15162 - C15163 - C15164 + C15165 + C15166) * C7789) *
               C50814) *
              C50638 * C1514 +
          (((C15151 - (C15150 + C15149) + C15152 - C15153 - C15154) * C7787 +
            (C15157 - (C15156 + C15155) + C15158 - C15159 - C15160) * C7788 +
            (C15163 - (C15162 + C15161) + C15164 - C15165 - C15166) * C7789) *
               C50920 +
           ((C11401 * C1280 - (C13491 * C50951 + C13492 * C1279) +
             C11402 * C50939 - C11403 * C1281 - C11404 * C1276) *
                C7787 +
            (C11403 * C1280 - (C11402 * C50951 + C11401 * C1279) +
             C11404 * C50939 - C11405 * C1281 - C11406 * C1276) *
                C7788 +
            (C11405 * C1280 - (C11404 * C50951 + C11403 * C1279) +
             C11406 * C50939 - (C10625 * C11384 + C50612 * C11385) * C1281 -
             (C10625 * C11386 + C50612 * C11387) * C1276) *
                C7789) *
               C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1279 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50951 -
            (C2362 + C2363 + C2364) * C1280 - (C2365 + C2366 + C2367) * C50939 +
            (C2696 + C2697 + C2698) * C1281 + (C2699 + C2700 + C2701) * C1276) *
               C50776 * C50920 +
           ((C5366 + C5367 + C5368) * C1279 + (C5369 + C5370 + C5371) * C50951 -
            (C3020 + C3019 + C3018) * C1280 - (C3023 + C3022 + C3021) * C50939 +
            (C3026 + C3025 + C3024) * C1281 + (C3029 + C3028 + C3027) * C1276) *
               C50776 * C50814) *
              C50638 * C1514 +
          (((C3018 + C3019 + C3020) * C1280 -
            ((C5371 + C5370 + C5369) * C50951 +
             (C5368 + C5367 + C5366) * C1279) +
            (C3021 + C3022 + C3023) * C50939 - (C3024 + C3025 + C3026) * C1281 -
            (C3027 + C3028 + C3029) * C1276) *
               C50776 * C50920 +
           ((C3348 + C3347 + C3346) * C1280 -
            ((C5950 + C5951 + C5952) * C50951 +
             (C5953 + C5954 + C5955) * C1279) +
            (C3351 + C3350 + C3349) * C50939 -
            (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
             C2176 * C3323 + C2171 * C3326) *
                C1281 -
            (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
             C2176 * C3329 + C2171 * C3332) *
                C1276) *
               C50776 * C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C1279 +
            (C10625 * C133 + C50612 * C143) * C50951 - C10761 * C1280 -
            C10762 * C50939 + C10763 * C1281 + C10764 * C1276) *
               C50776 * C20970 +
           (C15149 + C15150 - C15151 - C15152 + C15153 + C15154) * C50776 *
               C20971 +
           (C20730 + C20731 - C20732 - C20733 + C20734 + C20735) * C50776 *
               C20972 +
           (C22635 + C22636 - C22637 - C22638 + C22639 + C22640) * C50776 *
               C20973) *
              C50638 * C1514 +
          ((C15151 - (C15150 + C15149) + C15152 - C15153 - C15154) * C50776 *
               C20970 +
           (C20732 - (C20731 + C20730) + C20733 - C20734 - C20735) * C50776 *
               C20971 +
           (C22637 - (C22636 + C22635) + C22638 - C22639 - C22640) * C50776 *
               C20972 +
           (C19278 * C1280 - (C19398 * C50951 + C19397 * C1279) +
            C19279 * C50939 - (C10625 * C13780 + C50612 * C13783) * C1281 -
            (C10625 * C13782 + C50612 * C13786) * C1276) *
               C50776 * C20973) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1174 +
             (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
             C10762 * C50688) *
                C7787 +
            (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
             C10764 * C50688) *
                C7788 +
            (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
             C10766 * C50688) *
                C7789) *
               C50920 +
           ((C14287 + C14288 - C14289 - C14290) * C7787 +
            (C14291 + C14292 - C14293 - C14294) * C7788 +
            (C14295 + C14296 - C14297 - C14298) * C7789) *
               C50814) *
              C50638 * C50952 +
          (((C14289 - (C14288 + C14287) + C14290) * C7787 +
            (C14293 - (C14292 + C14291) + C14294) * C7788 +
            (C14297 - (C14296 + C14295) + C14298) * C7789) *
               C50920 +
           ((C15313 - (C15314 + C15315) + C15316) * C7787 +
            (C15317 - (C15318 + C15319) + C15320) * C7788 +
            (C15321 - (C15322 + C15323) + C15324) * C7789) *
               C50814) *
              C50638 * C50942 +
          (((C15315 + C15314 - C15313 - C15316) * C7787 +
            (C15319 + C15318 - C15317 - C15320) * C7788 +
            (C15323 + C15322 - C15321 - C15324) * C7789) *
               C50920 +
           ((C13797 * C1174 + C13798 * C1169 - C13679 * C1175 -
             C13680 * C50688) *
                C7787 +
            (C13679 * C1174 + C13680 * C1169 - C13681 * C1175 -
             C13682 * C50688) *
                C7788 +
            (C13681 * C1174 + C13682 * C1169 -
             (C10625 * C11472 + C50612 * C11474) * C1175 -
             (C10625 * C11473 + C50612 * C11475) * C50688) *
                C7789) *
               C50814) *
              C50638 * C1746)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1174 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C1169 -
            (C2362 + C2363 + C2364) * C1175 -
            (C2365 + C2366 + C2367) * C50688) *
               C50776 * C50920 +
           ((C5366 + C5367 + C5368) * C1174 + (C5369 + C5370 + C5371) * C1169 -
            (C3020 + C3019 + C3018) * C1175 -
            (C3023 + C3022 + C3021) * C50688) *
               C50776 * C50814) *
              C50638 * C50952 +
          (((C3018 + C3019 + C3020) * C1175 -
            ((C5371 + C5370 + C5369) * C1169 +
             (C5368 + C5367 + C5366) * C1174) +
            (C3021 + C3022 + C3023) * C50688) *
               C50776 * C50920 +
           ((C3348 + C3347 + C3346) * C1175 -
            ((C5950 + C5951 + C5952) * C1169 +
             (C5953 + C5954 + C5955) * C1174) +
            (C3351 + C3350 + C3349) * C50688) *
               C50776 * C50814) *
              C50638 * C50942 +
          (((C5955 + C5954 + C5953) * C1174 + (C5952 + C5951 + C5950) * C1169 -
            (C3346 + C3347 + C3348) * C1175 -
            (C3349 + C3350 + C3351) * C50688) *
               C50776 * C50920 +
           ((C6224 + C6225 + C6226) * C1174 + (C6227 + C6228 + C6229) * C1169 -
            (C2178 * C3449 + C2173 * C3455 + C2177 * C3450 + C2172 * C3456 +
             C2176 * C3451 + C2171 * C3457) *
                C1175 -
            (C2178 * C3452 + C2173 * C3458 + C2177 * C3453 + C2172 * C3459 +
             C2176 * C3454 + C2171 * C3460) *
                C50688) *
               C50776 * C50814) *
              C50638 * C1746)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C1174 +
            (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
            C10762 * C50688) *
               C50776 * C20970 +
           (C14287 + C14288 - C14289 - C14290) * C50776 * C20971 +
           C22739 * C20972 + C22747 * C20973) *
              C50638 * C50952 +
          ((C14289 - (C14288 + C14287) + C14290) * C50776 * C20970 +
           (C15313 - (C15314 + C15315) + C15316) * C50776 * C20971 +
           (C20890 - (C20891 + C20892) + C20893) * C50776 * C20972 +
           (C22741 - (C22742 + C22743) + C22744) * C50776 * C20973) *
              C50638 * C50942 +
          (C22739 * C20970 + C22747 * C20971 +
           (C22743 + C22742 - C22741 - C22744) * C50776 * C20972 +
           (C21743 * C1174 + C21744 * C1169 -
            (C10625 * C19382 + C50612 * C19384) * C1175 -
            (C10625 * C19383 + C50612 * C19385) * C50688) *
               C50776 * C20973) *
              C50638 * C1746)) /
            (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                 C2178 * C124 + C2173 * C131) *
                    C121 +
                (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                 C2178 * C135 + C2173 * C145) *
                    C50672) *
                   C50776 * C50920 +
               ((C2176 * C383 + C2171 * C394 + C2177 * C379 + C2172 * C385 +
                 C2178 * C380 + C2173 * C386) *
                    C121 +
                (C2176 * C393 + C2171 * C401 + C2177 * C389 + C2172 * C397 +
                 C2178 * C390 + C2173 * C398) *
                    C50672) *
                   C50776 * C50814) *
                  C112 -
              (((C2178 * C391 + C2173 * C399 + C2177 * C390 + C2172 * C398 +
                 C2176 * C389 + C2171 * C397) *
                    C50672 +
                (C2178 * C381 + C2173 * C387 + C2177 * C380 + C2172 * C386 +
                 C2176 * C379 + C2171 * C385) *
                    C121) *
                   C50776 * C50814 +
               ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
                 C2176 * C134 + C2171 * C144) *
                    C50672 +
                (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
                 C2176 * C123 + C2171 * C130) *
                    C121) *
                   C50776 * C50920) *
                  C113 +
              (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
                 C2178 * C126 + C2173 * C138) *
                    C121 +
                (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
                 C2178 * C137 + C2173 * C147) *
                    C50672) *
                   C50776 * C50920 +
               ((C2176 * C380 + C2171 * C386 + C2177 * C381 + C2172 * C387 +
                 C2178 * C382 + C2173 * C388) *
                    C121 +
                (C2176 * C390 + C2171 * C398 + C2177 * C391 + C2172 * C399 +
                 C2178 * C392 + C2173 * C400) *
                    C50672) *
                   C50776 * C50814) *
                  C114 -
              (((C2178 * C395 + C2173 * C402 + C2177 * C392 + C2172 * C400 +
                 C2176 * C391 + C2171 * C399) *
                    C50672 +
                (C2178 * C384 + C2173 * C396 + C2177 * C382 + C2172 * C388 +
                 C2176 * C381 + C2171 * C387) *
                    C121) *
                   C50776 * C50814 +
               ((C2178 * C140 + C2173 * C148 + C2177 * C137 + C2172 * C147 +
                 C2176 * C136 + C2171 * C146) *
                    C50672 +
                (C2178 * C127 + C2173 * C139 + C2177 * C126 + C2172 * C138 +
                 C2176 * C125 + C2171 * C132) *
                    C121) *
                   C50776 * C50920) *
                  C115) *
             C50702 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                 C2178 * C124 + C2173 * C131) *
                    C506 +
                (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                 C2178 * C135 + C2173 * C145) *
                    C501 -
                (C2362 + C2363 + C2364) * C507 -
                (C2365 + C2366 + C2367) * C502 +
                (C2696 + C2697 + C2698) * C508 +
                (C2699 + C2700 + C2701) * C503) *
                   C50776 * C50920 +
               ((C5366 + C5367 + C5368) * C506 +
                (C5369 + C5370 + C5371) * C501 -
                (C3020 + C3019 + C3018) * C507 -
                (C3023 + C3022 + C3021) * C502 +
                (C3026 + C3025 + C3024) * C508 +
                (C3029 + C3028 + C3027) * C503) *
                   C50776 * C50814) *
                  C50898 +
              (((C2368 + C2369 + C2370) * C507 -
                ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
                  C2176 * C134 + C2171 * C144) *
                     C501 +
                 (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
                  C2176 * C123 + C2171 * C130) *
                     C506) +
                (C2371 + C2372 + C2373) * C502 -
                (C2702 + C2703 + C2704) * C508 -
                (C2705 + C2706 + C2707) * C503) *
                   C50776 * C50920 +
               ((C3962 + C3961 + C3960) * C507 -
                ((C5372 + C5373 + C5374) * C501 +
                 (C5375 + C5376 + C5377) * C506) +
                (C3965 + C3964 + C3963) * C502 -
                (C2178 * C722 + C2173 * C734 + C2177 * C723 + C2172 * C735 +
                 C2176 * C724 + C2171 * C736) *
                    C508 -
                (C2178 * C738 + C2173 * C746 + C2177 * C739 + C2172 * C747 +
                 C2176 * C740 + C2171 * C748) *
                    C503) *
                   C50776 * C50814) *
                  C50643) *
             C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50672) *
                C50776 * C50920 +
            ((C5366 + C5367 + C5368) * C121 +
             (C5369 + C5370 + C5371) * C50672) *
                C50776 * C50814) *
               C50898 -
           (((C5372 + C5373 + C5374) * C50672 +
             (C5375 + C5376 + C5377) * C121) *
                C50776 * C50814 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50672 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50776 * C50920) *
               C50643) *
              C848 +
          ((((C5377 + C5376 + C5375) * C121 +
             (C5374 + C5373 + C5372) * C50672) *
                C50776 * C50920 +
            ((C5944 + C5945 + C5946) * C121 +
             (C5947 + C5948 + C5949) * C50672) *
                C50776 * C50814) *
               C50643 -
           (((C5950 + C5951 + C5952) * C50672 +
             (C5953 + C5954 + C5955) * C121) *
                C50776 * C50814 +
            ((C5371 + C5370 + C5369) * C50672 +
             (C5368 + C5367 + C5366) * C121) *
                C50776 * C50920) *
               C50898) *
              C849 +
          ((((C5955 + C5954 + C5953) * C121 +
             (C5952 + C5951 + C5950) * C50672) *
                C50776 * C50920 +
            ((C2176 * C1058 + C2171 * C1066 + C2177 * C1057 + C2172 * C1065 +
              C2178 * C1056 + C2173 * C1064) *
                 C121 +
             (C2176 * C1062 + C2171 * C1070 + C2177 * C1061 + C2172 * C1069 +
              C2178 * C1060 + C2173 * C1068) *
                 C50672) *
                C50776 * C50814) *
               C50898 -
           (((C2178 * C1059 + C2173 * C1067 + C2177 * C1060 + C2172 * C1068 +
              C2176 * C1061 + C2171 * C1069) *
                 C50672 +
             (C2178 * C1055 + C2173 * C1063 + C2177 * C1056 + C2172 * C1064 +
              C2176 * C1057 + C2171 * C1065) *
                 C121) *
                C50776 * C50814 +
            ((C5949 + C5948 + C5947) * C50672 +
             (C5946 + C5945 + C5944) * C121) *
                C50776 * C50920) *
               C50643) *
              C850)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C7787 +
            (C10761 * C121 + C10762 * C50672) * C7788 +
            (C10763 * C121 + C10764 * C50672) * C7789) *
               C50920 +
           (((C10625 * C383 + C50612 * C394) * C121 +
             (C10625 * C393 + C50612 * C401) * C50672) *
                C7787 +
            (C11181 * C121 + C11182 * C50672) * C7788 +
            (C11183 * C121 + C11184 * C50672) * C7789) *
               C50814) *
              C112 -
          (((C11818 * C50672 + C11817 * C121) * C7789 +
            (C11816 * C50672 + C11815 * C121) * C7788 +
            ((C10625 * C389 + C50612 * C397) * C50672 +
             (C10625 * C379 + C50612 * C385) * C121) *
                C7787) *
               C50814 +
           ((C10770 * C50672 + C10769 * C121) * C7789 +
            (C10768 * C50672 + C10767 * C121) * C7788 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C7787) *
               C50920) *
              C113 +
          ((((C10625 * C124 + C50612 * C131) * C121 +
             (C10625 * C135 + C50612 * C145) * C50672) *
                C7787 +
            (C10773 * C121 + C10774 * C50672) * C7788 +
            (C10775 * C121 + C10776 * C50672) * C7789) *
               C50920 +
           (((C10625 * C380 + C50612 * C386) * C121 +
             (C10625 * C390 + C50612 * C398) * C50672) *
                C7787 +
            ((C10625 * C720 + C50612 * C728) * C121 +
             (C10625 * C732 + C50612 * C744) * C50672) *
                C7788 +
            ((C10625 * C723 + C50612 * C735) * C121 +
             (C10625 * C739 + C50612 * C747) * C50672) *
                C7789) *
               C50814) *
              C114 -
          ((((C10625 * C738 + C50612 * C746) * C50672 +
             (C10625 * C722 + C50612 * C734) * C121) *
                C7789 +
            ((C10625 * C733 + C50612 * C745) * C50672 +
             (C10625 * C721 + C50612 * C729) * C121) *
                C7788 +
            ((C10625 * C391 + C50612 * C399) * C50672 +
             (C10625 * C381 + C50612 * C387) * C121) *
                C7787) *
               C50814 +
           (((C10625 * C521 + C50612 * C527) * C50672 +
             (C10625 * C512 + C50612 * C517) * C121) *
                C7789 +
            ((C10625 * C265 + C50612 * C273) * C50672 +
             (C10625 * C255 + C50612 * C261) * C121) *
                C7788 +
            ((C10625 * C136 + C50612 * C146) * C50672 +
             (C10625 * C125 + C50612 * C132) * C121) *
                C7787) *
               C50920) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C7787 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C7788 +
            (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
             C10983 * C508 + C10984 * C503) *
                C7789) *
               C50920 +
           ((C12899 * C506 + C12900 * C501 - C11181 * C507 - C11182 * C502 +
             C11183 * C508 + C11184 * C503) *
                C7787 +
            (C11181 * C506 + C11182 * C501 - C11183 * C507 - C11184 * C502 +
             C11185 * C508 + C11186 * C503) *
                C7788 +
            (C11183 * C506 + C11184 * C501 - C11185 * C507 - C11186 * C502 +
             C11187 * C508 + C11188 * C503) *
                C7789) *
               C50814) *
              C50898 +
          (((C10767 * C507 -
             ((C10625 * C134 + C50612 * C144) * C501 +
              (C10625 * C123 + C50612 * C130) * C506) +
             C10768 * C502 - C10769 * C508 - C10770 * C503) *
                C7787 +
            (C10769 * C507 - (C10768 * C501 + C10767 * C506) + C10770 * C502 -
             C10771 * C508 - C10772 * C503) *
                C7788 +
            (C10771 * C507 - (C10770 * C501 + C10769 * C506) + C10772 * C502 -
             C10985 * C508 - C10986 * C503) *
                C7789) *
               C50920 +
           ((C11815 * C507 - (C12901 * C501 + C12902 * C506) + C11816 * C502 -
             C11817 * C508 - C11818 * C503) *
                C7787 +
            (C11817 * C507 - (C11816 * C501 + C11815 * C506) + C11818 * C502 -
             C11819 * C508 - C11820 * C503) *
                C7788 +
            (C11819 * C507 - (C11818 * C501 + C11817 * C506) + C11820 * C502 -
             (C10625 * C8596 + C50612 * C8598) * C508 -
             (C10625 * C8600 + C50612 * C8602) * C503) *
                C7789) *
               C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C7787 +
             (C10761 * C121 + C10762 * C50672) * C7788 +
             (C10763 * C121 + C10764 * C50672) * C7789) *
                C50920 +
            ((C12905 + C12906) * C7787 + (C12879 + C12880) * C7788 +
             (C12881 + C12882) * C7789) *
                C50814) *
               C50898 -
           (((C12883 + C12884) * C7789 + (C12885 + C12886) * C7788 +
             (C12907 + C12908) * C7787) *
                C50814 +
            ((C10770 * C50672 + C10769 * C121) * C7789 +
             (C10768 * C50672 + C10767 * C121) * C7788 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C7787) *
                C50920) *
               C50643) *
              C848 +
          ((((C12908 + C12907) * C7787 + (C12886 + C12885) * C7788 +
             (C12884 + C12883) * C7789) *
                C50920 +
            ((C13493 + C13494) * C7787 + (C13495 + C13496) * C7788 +
             (C13497 + C13498) * C7789) *
                C50814) *
               C50643 -
           (((C13477 + C13478) * C7789 + (C13479 + C13480) * C7788 +
             (C13499 + C13500) * C7787) *
                C50814 +
            ((C12882 + C12881) * C7789 + (C12880 + C12879) * C7788 +
             (C12906 + C12905) * C7787) *
                C50920) *
               C50898) *
              C849 +
          ((((C13500 + C13499) * C7787 + (C13480 + C13479) * C7788 +
             (C13478 + C13477) * C7789) *
                C50920 +
            (((C10625 * C1058 + C50612 * C1066) * C121 +
              (C10625 * C1062 + C50612 * C1070) * C50672) *
                 C7787 +
             ((C10625 * C3451 + C50612 * C3457) * C121 +
              (C10625 * C3454 + C50612 * C3460) * C50672) *
                 C7788 +
             ((C10625 * C9065 + C50612 * C9069) * C121 +
              (C10625 * C9067 + C50612 * C9071) * C50672) *
                 C7789) *
                C50814) *
               C50898 -
           ((((C10625 * C9066 + C50612 * C9070) * C50672 +
              (C10625 * C9064 + C50612 * C9068) * C121) *
                 C7789 +
             ((C10625 * C3453 + C50612 * C3459) * C50672 +
              (C10625 * C3450 + C50612 * C3456) * C121) *
                 C7788 +
             ((C10625 * C1061 + C50612 * C1069) * C50672 +
              (C10625 * C1057 + C50612 * C1065) * C121) *
                 C7787) *
                C50814 +
            ((C13498 + C13497) * C7789 + (C13496 + C13495) * C7788 +
             (C13494 + C13493) * C7787) *
                C50920) *
               C50643) *
              C850)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C121 +
            (C10625 * C133 + C50612 * C143) * C50672) *
               C50776 * C20970 +
           (C12905 + C12906) * C50776 * C20971 + C19090 * C50776 * C20972 +
           (C13799 + C13800) * C50776 * C20973) *
              C112 -
          ((C19113 + C19112) * C50776 * C20973 + C19093 * C50776 * C20972 +
           (C12907 + C12908) * C50776 * C20971 +
           ((C10625 * C134 + C50612 * C144) * C50672 +
            (C10625 * C123 + C50612 * C130) * C121) *
               C50776 * C20970) *
              C113 +
          (((C10625 * C124 + C50612 * C131) * C121 +
            (C10625 * C135 + C50612 * C145) * C50672) *
               C50776 * C20970 +
           (C12909 + C12910) * C50776 * C20971 +
           (C18540 + C18541) * C50776 * C20972 +
           ((C10625 * C1056 + C50612 * C1064) * C121 +
            (C10625 * C1060 + C50612 * C1068) * C50672) *
               C50776 * C20973) *
              C114 -
          (((C10625 * C1059 + C50612 * C1067) * C50672 +
            (C10625 * C1055 + C50612 * C1063) * C121) *
               C50776 * C20973 +
           ((C10625 * C863 + C50612 * C869) * C50672 +
            (C10625 * C854 + C50612 * C859) * C121) *
               C50776 * C20972 +
           ((C10625 * C391 + C50612 * C399) * C50672 +
            (C10625 * C381 + C50612 * C387) * C121) *
               C50776 * C20971 +
           ((C10625 * C136 + C50612 * C146) * C50672 +
            (C10625 * C125 + C50612 * C132) * C121) *
               C50776 * C20970) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C506 +
            (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
            C10762 * C502 + C10763 * C508 + C10764 * C503) *
               C50776 * C20970 +
           (C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C50776 *
               C20971 +
           (C18932 + C18933 - C18934 - C18935 + C18936 + C18937) * C50776 *
               C20972 +
           (C13797 * C506 + C13798 * C501 - C13679 * C507 - C13680 * C502 +
            C13681 * C508 + C13682 * C503) *
               C50776 * C20973) *
              C50898 +
          ((C10767 * C507 -
            ((C10625 * C134 + C50612 * C144) * C501 +
             (C10625 * C123 + C50612 * C130) * C506) +
            C10768 * C502 - C10769 * C508 - C10770 * C503) *
               C50776 * C20970 +
           (C11815 * C507 - (C12901 * C501 + C12902 * C506) + C11816 * C502 -
            C11817 * C508 - C11818 * C503) *
               C50776 * C20971 +
           (C13487 * C507 - (C13486 * C501 + C13485 * C506) + C13488 * C502 -
            C13489 * C508 - C13490 * C503) *
               C50776 * C20972 +
           (C19108 * C507 - (C19107 * C501 + C19106 * C506) + C19109 * C502 -
            (C10625 * C9064 + C50612 * C9068) * C508 -
            (C10625 * C9066 + C50612 * C9070) * C503) *
               C50776 * C20973) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C50776 * C20970 +
            (C12905 + C12906) * C50776 * C20971 + C21545 * C20972 +
            C21553 * C20973) *
               C50898 -
           (C21554 * C20973 + C21548 * C20972 +
            (C12907 + C12908) * C50776 * C20971 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C50776 * C20970) *
               C50643) *
              C848 +
          (((C12908 + C12907) * C50776 * C20970 +
            (C13493 + C13494) * C50776 * C20971 +
            (C19112 + C19113) * C50776 * C20972 +
            (C21557 + C21558) * C50776 * C20973) *
               C50643 -
           ((C19401 + C19400) * C50776 * C20973 + C19388 * C50776 * C20972 +
            (C13499 + C13500) * C50776 * C20971 +
            (C12906 + C12905) * C50776 * C20970) *
               C50898) *
              C849 +
          ((C21545 * C20970 + C21553 * C20971 +
            (C19400 + C19401) * C50776 * C20972 +
            ((C10625 * C16632 + C50612 * C16636) * C121 +
             (C10625 * C16634 + C50612 * C16638) * C50672) *
                C50776 * C20973) *
               C50898 -
           (((C10625 * C16633 + C50612 * C16637) * C50672 +
             (C10625 * C16631 + C50612 * C16635) * C121) *
                C50776 * C20973 +
            (C21558 + C21557) * C50776 * C20972 + C21554 * C20971 +
            C21548 * C20970) *
               C50643) *
              C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                 C2178 * C124 + C2173 * C131) *
                    C253 +
                (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                 C2178 * C135 + C2173 * C145) *
                    C50905 -
                (C2362 + C2363 + C2364) * C254 -
                (C2365 + C2366 + C2367) * C50688) *
                   C50776 * C50920 +
               ((C2176 * C383 + C2171 * C394 + C2177 * C379 + C2172 * C385 +
                 C2178 * C380 + C2173 * C386) *
                    C253 +
                (C2176 * C393 + C2171 * C401 + C2177 * C389 + C2172 * C397 +
                 C2178 * C390 + C2173 * C398) *
                    C50905 -
                (C3020 + C3019 + C3018) * C254 -
                (C3023 + C3022 + C3021) * C50688) *
                   C50776 * C50814) *
                  C250 +
              (((C2368 + C2369 + C2370) * C254 -
                ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
                  C2176 * C134 + C2171 * C144) *
                     C50905 +
                 (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
                  C2176 * C123 + C2171 * C130) *
                     C253) +
                (C2371 + C2372 + C2373) * C50688) *
                   C50776 * C50920 +
               ((C3962 + C3961 + C3960) * C254 -
                ((C2178 * C391 + C2173 * C399 + C2177 * C390 + C2172 * C398 +
                  C2176 * C389 + C2171 * C397) *
                     C50905 +
                 (C2178 * C381 + C2173 * C387 + C2177 * C380 + C2172 * C386 +
                  C2176 * C379 + C2171 * C385) *
                     C253) +
                (C3965 + C3964 + C3963) * C50688) *
                   C50776 * C50814) *
                  C251 +
              (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
                 C2178 * C126 + C2173 * C138) *
                    C253 +
                (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
                 C2178 * C137 + C2173 * C147) *
                    C50905 -
                (C2374 + C2375 + C2376) * C254 -
                (C2377 + C2378 + C2379) * C50688) *
                   C50776 * C50920 +
               ((C2176 * C380 + C2171 * C386 + C2177 * C381 + C2172 * C387 +
                 C2178 * C382 + C2173 * C388) *
                    C253 +
                (C2176 * C390 + C2171 * C398 + C2177 * C391 + C2172 * C399 +
                 C2178 * C392 + C2173 * C400) *
                    C50905 -
                (C2178 * C1412 + C2173 * C1413 + C2177 * C721 + C2172 * C729 +
                 C2176 * C720 + C2171 * C728) *
                    C254 -
                (C2178 * C1414 + C2173 * C1415 + C2177 * C733 + C2172 * C745 +
                 C2176 * C732 + C2171 * C744) *
                    C50688) *
                   C50776 * C50814) *
                  C252) *
             C50702 +
         0.5 * std::pow(Pi, 2.5) *
             (((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                C2178 * C124 + C2173 * C131) *
                   C600 +
               (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                C2178 * C135 + C2173 * C145) *
                   C595 -
               (C2362 + C2363 + C2364) * C601 - (C2365 + C2366 + C2367) * C596 +
               (C2696 + C2697 + C2698) * C602 + (C2699 + C2700 + C2701) * C597 -
               (C2830 + C2831 + C2832) * C603 -
               (C2833 + C2834 + C2835) * C598) *
                  C50776 * C50920 +
              ((C5366 + C5367 + C5368) * C600 + (C5369 + C5370 + C5371) * C595 -
               (C3020 + C3019 + C3018) * C601 - (C3023 + C3022 + C3021) * C596 +
               (C3026 + C3025 + C3024) * C602 + (C3029 + C3028 + C3027) * C597 -
               (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
                C2176 * C2983 + C2171 * C2986) *
                   C603 -
               (C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
                C2176 * C2989 + C2171 * C2992) *
                   C598) *
                  C50776 * C50814) *
             C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50905 -
            (C2362 + C2363 + C2364) * C254 - (C2365 + C2366 + C2367) * C50688) *
               C50776 * C50920 +
           ((C5366 + C5367 + C5368) * C253 + (C5369 + C5370 + C5371) * C50905 -
            (C3020 + C3019 + C3018) * C254 - (C3023 + C3022 + C3021) * C50688) *
               C50776 * C50814) *
              C50638 * C848 +
          (((C3018 + C3019 + C3020) * C254 -
            ((C5371 + C5370 + C5369) * C50905 +
             (C5368 + C5367 + C5366) * C253) +
            (C3021 + C3022 + C3023) * C50688) *
               C50776 * C50920 +
           ((C3348 + C3347 + C3346) * C254 -
            ((C5950 + C5951 + C5952) * C50905 +
             (C5953 + C5954 + C5955) * C253) +
            (C3351 + C3350 + C3349) * C50688) *
               C50776 * C50814) *
              C50638 * C849 +
          (((C5955 + C5954 + C5953) * C253 + (C5952 + C5951 + C5950) * C50905 -
            (C3346 + C3347 + C3348) * C254 - (C3349 + C3350 + C3351) * C50688) *
               C50776 * C50920 +
           ((C2176 * C1058 + C2171 * C1066 + C2177 * C1057 + C2172 * C1065 +
             C2178 * C1056 + C2173 * C1064) *
                C253 +
            (C2176 * C1062 + C2171 * C1070 + C2177 * C1061 + C2172 * C1069 +
             C2178 * C1060 + C2173 * C1068) *
                C50905 -
            (C2178 * C3449 + C2173 * C3455 + C2177 * C3450 + C2172 * C3456 +
             C2176 * C3451 + C2171 * C3457) *
                C254 -
            (C2178 * C3452 + C2173 * C3458 + C2177 * C3453 + C2172 * C3459 +
             C2176 * C3454 + C2171 * C3460) *
                C50688) *
               C50776 * C50814) *
              C50638 * C850)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C253 +
             (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
             C10762 * C50688) *
                C7787 +
            (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
             C10764 * C50688) *
                C7788 +
            (C10763 * C253 + C10764 * C50905 - C10765 * C254 -
             C10766 * C50688) *
                C7789) *
               C50920 +
           (((C10625 * C383 + C50612 * C394) * C253 +
             (C10625 * C393 + C50612 * C401) * C50905 - C11181 * C254 -
             C11182 * C50688) *
                C7787 +
            (C11181 * C253 + C11182 * C50905 - C11183 * C254 -
             C11184 * C50688) *
                C7788 +
            (C11183 * C253 + C11184 * C50905 - C11185 * C254 -
             C11186 * C50688) *
                C7789) *
               C50814) *
              C250 +
          (((C10767 * C254 -
             ((C10625 * C134 + C50612 * C144) * C50905 +
              (C10625 * C123 + C50612 * C130) * C253) +
             C10768 * C50688) *
                C7787 +
            (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
             C10770 * C50688) *
                C7788 +
            (C10771 * C254 - (C10770 * C50905 + C10769 * C253) +
             C10772 * C50688) *
                C7789) *
               C50920 +
           ((C11815 * C254 -
             ((C10625 * C389 + C50612 * C397) * C50905 +
              (C10625 * C379 + C50612 * C385) * C253) +
             C11816 * C50688) *
                C7787 +
            (C11817 * C254 - (C11816 * C50905 + C11815 * C253) +
             C11818 * C50688) *
                C7788 +
            (C11819 * C254 - (C11818 * C50905 + C11817 * C253) +
             C11820 * C50688) *
                C7789) *
               C50814) *
              C251 +
          ((((C10625 * C124 + C50612 * C131) * C253 +
             (C10625 * C135 + C50612 * C145) * C50905 - C10773 * C254 -
             C10774 * C50688) *
                C7787 +
            (C10773 * C253 + C10774 * C50905 - C10775 * C254 -
             C10776 * C50688) *
                C7788 +
            (C10775 * C253 + C10776 * C50905 - C10777 * C254 -
             C10778 * C50688) *
                C7789) *
               C50920 +
           (((C10625 * C380 + C50612 * C386) * C253 +
             (C10625 * C390 + C50612 * C398) * C50905 - C12725 * C254 -
             C12726 * C50688) *
                C7787 +
            (C12725 * C253 + C12726 * C50905 - C12727 * C254 -
             C12728 * C50688) *
                C7788 +
            (C12727 * C253 + C12728 * C50905 -
             (C10625 * C2981 + C50612 * C2984) * C254 -
             (C10625 * C2987 + C50612 * C2990) * C50688) *
                C7789) *
               C50814) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C600 +
            (C10625 * C133 + C50612 * C143) * C595 - C10761 * C601 -
            C10762 * C596 + C10763 * C602 + C10764 * C597 - C10765 * C603 -
            C10766 * C598) *
               C7787 +
           (C10761 * C600 + C10762 * C595 - C10763 * C601 - C10764 * C596 +
            C10765 * C602 + C10766 * C597 - C10983 * C603 - C10984 * C598) *
               C7788 +
           (C10763 * C600 + C10764 * C595 - C10765 * C601 - C10766 * C596 +
            C10983 * C602 + C10984 * C597 - C11061 * C603 - C11062 * C598) *
               C7789) *
              C50920 +
          ((C12899 * C600 + C12900 * C595 - C11181 * C601 - C11182 * C596 +
            C11183 * C602 + C11184 * C597 - C11185 * C603 - C11186 * C598) *
               C7787 +
           (C11181 * C600 + C11182 * C595 - C11183 * C601 - C11184 * C596 +
            C11185 * C602 + C11186 * C597 - C11187 * C603 - C11188 * C598) *
               C7788 +
           (C11183 * C600 + C11184 * C595 - C11185 * C601 - C11186 * C596 +
            C11187 * C602 + C11188 * C597 -
            (C10625 * C11160 + C50612 * C11161) * C603 -
            (C10625 * C11162 + C50612 * C11163) * C598) *
               C7789) *
              C50814) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C10625 * C122 + C50612 * C129) * C253 +
                                 (C10625 * C133 + C50612 * C143) * C50905 -
                                 C10761 * C254 - C10762 * C50688) *
                                    C7787 +
                                (C10761 * C253 + C10762 * C50905 -
                                 C10763 * C254 - C10764 * C50688) *
                                    C7788 +
                                (C10763 * C253 + C10764 * C50905 -
                                 C10765 * C254 - C10766 * C50688) *
                                    C7789) *
                                   C50920 +
                               ((C13647 + C13648 - C13649 - C13650) * C7787 +
                                (C13651 + C13652 - C13653 - C13654) * C7788 +
                                (C13655 + C13656 - C13657 - C13658) * C7789) *
                                   C50814) *
                                  C50638 * C848 +
                              (((C13649 - (C13648 + C13647) + C13650) * C7787 +
                                (C13653 - (C13652 + C13651) + C13654) * C7788 +
                                (C13657 - (C13656 + C13655) + C13658) * C7789) *
                                   C50920 +
                               ((C13659 - (C13660 + C13661) + C13662) * C7787 +
                                (C13663 - (C13664 + C13665) + C13666) * C7788 +
                                (C13667 - (C13668 + C13669) + C13670) * C7789) *
                                   C50814) *
                                  C50638 * C849 +
                              (((C13661 + C13660 - C13659 - C13662) * C7787 +
                                (C13665 + C13664 - C13663 - C13666) * C7788 +
                                (C13669 + C13668 - C13667 - C13670) * C7789) *
                                   C50920 +
                               (((C10625 * C1058 + C50612 * C1066) * C253 +
                                 (C10625 * C1062 + C50612 * C1070) * C50905 -
                                 C13679 * C254 - C13680 * C50688) *
                                    C7787 +
                                (C13679 * C253 + C13680 * C50905 -
                                 C13681 * C254 - C13682 * C50688) *
                                    C7788 +
                                (C13681 * C253 + C13682 * C50905 -
                                 (C10625 * C11472 + C50612 * C11474) * C254 -
                                 (C10625 * C11473 + C50612 * C11475) * C50688) *
                                    C7789) *
                                   C50814) *
                                  C50638 * C850)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C253 +
            (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
            C10762 * C50688) *
               C50776 * C20970 +
           (C13647 + C13648 - C13649 - C13650) * C50776 * C20971 +
           C19280 * C50776 * C20972 +
           (C19266 + C19265 - C19264 - C19267) * C50776 * C20973) *
              C250 +
          ((C10767 * C254 -
            ((C10625 * C134 + C50612 * C144) * C50905 +
             (C10625 * C123 + C50612 * C130) * C253) +
            C10768 * C50688) *
               C50776 * C20970 +
           (C14651 - (C14652 + C14653) + C14654) * C50776 * C20971 +
           (C20236 - (C20237 + C20238) + C20239) * C50776 * C20972 +
           (C19108 * C254 - (C19107 * C50905 + C19106 * C253) +
            C19109 * C50688) *
               C50776 * C20973) *
              C251 +
          (((C10625 * C124 + C50612 * C131) * C253 +
            (C10625 * C135 + C50612 * C145) * C50905 - C10773 * C254 -
            C10774 * C50688) *
               C50776 * C20970 +
           (C12903 * C253 + C12904 * C50905 - C12725 * C254 - C12726 * C50688) *
               C50776 * C20971 +
           (C18538 * C253 + C18539 * C50905 - C18384 * C254 - C18385 * C50688) *
               C50776 * C20972 +
           ((C10625 * C1056 + C50612 * C1064) * C253 +
            (C10625 * C1060 + C50612 * C1068) * C50905 -
            (C10625 * C3449 + C50612 * C3455) * C254 -
            (C10625 * C3452 + C50612 * C3458) * C50688) *
               C50776 * C20973) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C10625 * C122 + C50612 * C129) * C600 +
           (C10625 * C133 + C50612 * C143) * C595 - C10761 * C601 -
           C10762 * C596 + C10763 * C602 + C10764 * C597 - C10765 * C603 -
           C10766 * C598) *
              C50776 * C20970 +
          (C12899 * C600 + C12900 * C595 - C11181 * C601 - C11182 * C596 +
           C11183 * C602 + C11184 * C597 - C11185 * C603 - C11186 * C598) *
              C50776 * C20971 +
          (C13492 * C600 + C13491 * C595 - C11401 * C601 - C11402 * C596 +
           C11403 * C602 + C11404 * C597 - C11405 * C603 - C11406 * C598) *
              C50776 * C20972 +
          (C13797 * C600 + C13798 * C595 - C13679 * C601 - C13680 * C596 +
           C13681 * C602 + C13682 * C597 -
           (C10625 * C11472 + C50612 * C11474) * C603 -
           (C10625 * C11473 + C50612 * C11475) * C598) *
              C50776 * C20973) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C253 +
            (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
            C10762 * C50688) *
               C50776 * C20970 +
           (C13647 + C13648 - C13649 - C13650) * C50776 * C20971 +
           C21657 * C20972 + C21665 * C20973) *
              C50638 * C848 +
          ((C13649 - (C13648 + C13647) + C13650) * C50776 * C20970 +
           (C13659 - (C13660 + C13661) + C13662) * C50776 * C20971 +
           (C19264 - (C19265 + C19266) + C19267) * C50776 * C20972 +
           (C21659 - (C21660 + C21661) + C21662) * C50776 * C20973) *
              C50638 * C849 +
          (C21657 * C20970 + C21665 * C20971 +
           (C21661 + C21660 - C21659 - C21662) * C50776 * C20972 +
           ((C10625 * C16632 + C50612 * C16636) * C253 +
            (C10625 * C16634 + C50612 * C16638) * C50905 -
            (C10625 * C19382 + C50612 * C19384) * C254 -
            (C10625 * C19383 + C50612 * C19385) * C50688) *
               C50776 * C20973) *
              C50638 * C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                  C2178 * C124 + C2173 * C131) *
                     C121 +
                 (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                  C2178 * C135 + C2173 * C145) *
                     C50672) *
                    C50776 * C50920 +
                ((C5366 + C5367 + C5368) * C121 +
                 (C5369 + C5370 + C5371) * C50672) *
                    C50776 * C50814) *
                   C250 -
               (((C5372 + C5373 + C5374) * C50672 +
                 (C5375 + C5376 + C5377) * C121) *
                    C50776 * C50814 +
                ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
                  C2176 * C134 + C2171 * C144) *
                     C50672 +
                 (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
                  C2176 * C123 + C2171 * C130) *
                     C121) *
                    C50776 * C50920) *
                   C251 +
               (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
                  C2178 * C126 + C2173 * C138) *
                     C121 +
                 (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
                  C2178 * C137 + C2173 * C147) *
                     C50672) *
                    C50776 * C50920 +
                ((C5378 + C5379 + C5380) * C121 +
                 (C5381 + C5382 + C5383) * C50672) *
                    C50776 * C50814) *
                   C252) *
                  C50907 +
              ((((C5377 + C5376 + C5375) * C121 +
                 (C5374 + C5373 + C5372) * C50672) *
                    C50776 * C50920 +
                ((C2176 * C852 + C2171 * C857 + C2177 * C853 + C2172 * C858 +
                  C2178 * C854 + C2173 * C859) *
                     C121 +
                 (C2176 * C861 + C2171 * C867 + C2177 * C862 + C2172 * C868 +
                  C2178 * C863 + C2173 * C869) *
                     C50672) *
                    C50776 * C50814) *
                   C251 -
               (((C2178 * C862 + C2173 * C868 + C2177 * C861 + C2172 * C867 +
                  C2176 * C860 + C2171 * C866) *
                     C50672 +
                 (C2178 * C853 + C2173 * C858 + C2177 * C852 + C2172 * C857 +
                  C2176 * C851 + C2171 * C856) *
                     C121) *
                    C50776 * C50814 +
                ((C5371 + C5370 + C5369) * C50672 +
                 (C5368 + C5367 + C5366) * C121) *
                    C50776 * C50920) *
                   C250 -
               (((C2178 * C864 + C2173 * C870 + C2177 * C863 + C2172 * C869 +
                  C2176 * C862 + C2171 * C868) *
                     C50672 +
                 (C2178 * C855 + C2173 * C865 + C2177 * C854 + C2172 * C859 +
                  C2176 * C853 + C2171 * C858) *
                     C121) *
                    C50776 * C50814 +
                ((C5383 + C5382 + C5381) * C50672 +
                 (C5380 + C5379 + C5378) * C121) *
                    C50776 * C50920) *
                   C252) *
                  C50714) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                 C2178 * C124 + C2173 * C131) *
                    C506 +
                (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                 C2178 * C135 + C2173 * C145) *
                    C501 -
                (C2362 + C2363 + C2364) * C507 -
                (C2365 + C2366 + C2367) * C502 +
                (C2696 + C2697 + C2698) * C508 +
                (C2699 + C2700 + C2701) * C503) *
                   C50776 * C50920 +
               ((C5366 + C5367 + C5368) * C506 +
                (C5369 + C5370 + C5371) * C501 -
                (C3020 + C3019 + C3018) * C507 -
                (C3023 + C3022 + C3021) * C502 +
                (C3026 + C3025 + C3024) * C508 +
                (C3029 + C3028 + C3027) * C503) *
                   C50776 * C50814) *
                  C50638 * C50907 +
              (((C3018 + C3019 + C3020) * C507 -
                ((C5371 + C5370 + C5369) * C501 +
                 (C5368 + C5367 + C5366) * C506) +
                (C3021 + C3022 + C3023) * C502 -
                (C3024 + C3025 + C3026) * C508 -
                (C3027 + C3028 + C3029) * C503) *
                   C50776 * C50920 +
               ((C3348 + C3347 + C3346) * C507 -
                ((C2178 * C862 + C2173 * C868 + C2177 * C861 + C2172 * C867 +
                  C2176 * C860 + C2171 * C866) *
                     C501 +
                 (C2178 * C853 + C2173 * C858 + C2177 * C852 + C2172 * C857 +
                  C2176 * C851 + C2171 * C856) *
                     C506) +
                (C3351 + C3350 + C3349) * C502 -
                (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
                 C2176 * C3323 + C2171 * C3326) *
                    C508 -
                (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
                 C2176 * C3329 + C2171 * C3332) *
                    C503) *
                   C50776 * C50814) *
                  C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50672) *
               C50776 * C50920 +
           ((C5366 + C5367 + C5368) * C121 + (C5369 + C5370 + C5371) * C50672) *
               C50776 * C50814) *
              C50638 * C1051 -
          (((C5950 + C5951 + C5952) * C50672 + (C5953 + C5954 + C5955) * C121) *
               C50776 * C50814 +
           ((C5371 + C5370 + C5369) * C50672 + (C5368 + C5367 + C5366) * C121) *
               C50776 * C50920) *
              C50638 * C1052 +
          (((C5955 + C5954 + C5953) * C121 + (C5952 + C5951 + C5950) * C50672) *
               C50776 * C50920 +
           ((C6224 + C6225 + C6226) * C121 + (C6227 + C6228 + C6229) * C50672) *
               C50776 * C50814) *
              C50638 * C1053 -
          (((C2178 * C6202 + C2173 * C6208 + C2177 * C6203 + C2172 * C6209 +
             C2176 * C6204 + C2171 * C6210) *
                C50672 +
            (C2178 * C6199 + C2173 * C6205 + C2177 * C6200 + C2172 * C6206 +
             C2176 * C6201 + C2171 * C6207) *
                C121) *
               C50776 * C50814 +
           ((C6229 + C6228 + C6227) * C50672 + (C6226 + C6225 + C6224) * C121) *
               C50776 * C50920) *
              C50638 * C1054)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C7787 +
             (C10761 * C121 + C10762 * C50672) * C7788 +
             (C10763 * C121 + C10764 * C50672) * C7789) *
                C50920 +
            ((C12905 + C12906) * C7787 + (C12879 + C12880) * C7788 +
             (C12881 + C12882) * C7789) *
                C50814) *
               C250 -
           (((C12883 + C12884) * C7789 + (C12885 + C12886) * C7788 +
             (C12907 + C12908) * C7787) *
                C50814 +
            ((C10770 * C50672 + C10769 * C121) * C7789 +
             (C10768 * C50672 + C10767 * C121) * C7788 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C7787) *
                C50920) *
               C251 +
           ((((C10625 * C124 + C50612 * C131) * C121 +
              (C10625 * C135 + C50612 * C145) * C50672) *
                 C7787 +
             (C10773 * C121 + C10774 * C50672) * C7788 +
             (C10775 * C121 + C10776 * C50672) * C7789) *
                C50920 +
            ((C12909 + C12910) * C7787 + (C12895 + C12896) * C7788 +
             (C12897 + C12898) * C7789) *
                C50814) *
               C252) *
              C50907 +
          ((((C12908 + C12907) * C7787 + (C12886 + C12885) * C7788 +
             (C12884 + C12883) * C7789) *
                C50920 +
            (((C10625 * C852 + C50612 * C857) * C121 +
              (C10625 * C861 + C50612 * C867) * C50672) *
                 C7787 +
             ((C10625 * C971 + C50612 * C975) * C121 +
              (C10625 * C979 + C50612 * C983) * C50672) *
                 C7788 +
             ((C10625 * C3322 + C50612 * C3325) * C121 +
              (C10625 * C3328 + C50612 * C3331) * C50672) *
                 C7789) *
                C50814) *
               C251 -
           (((C11404 * C50672 + C11403 * C121) * C7789 +
             (C11402 * C50672 + C11401 * C121) * C7788 +
             ((C10625 * C860 + C50612 * C866) * C50672 +
              (C10625 * C851 + C50612 * C856) * C121) *
                 C7787) *
                C50814 +
            ((C12882 + C12881) * C7789 + (C12880 + C12879) * C7788 +
             (C12906 + C12905) * C7787) *
                C50920) *
               C250 -
           ((((C10625 * C3327 + C50612 * C3330) * C50672 +
              (C10625 * C3321 + C50612 * C3324) * C121) *
                 C7789 +
             ((C10625 * C978 + C50612 * C982) * C50672 +
              (C10625 * C970 + C50612 * C974) * C121) *
                 C7788 +
             ((C10625 * C862 + C50612 * C868) * C50672 +
              (C10625 * C853 + C50612 * C858) * C121) *
                 C7787) *
                C50814 +
            ((C12898 + C12897) * C7789 + (C12896 + C12895) * C7788 +
             (C12910 + C12909) * C7787) *
                C50920) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C7787 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C7788 +
            (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
             C10983 * C508 + C10984 * C503) *
                C7789) *
               C50920 +
           ((C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C7787 +
            (C13307 + C13308 - C13309 - C13310 + C13311 + C13312) * C7788 +
            (C13313 + C13314 - C13315 - C13316 + C13317 + C13318) * C7789) *
               C50814) *
              C50638 * C50907 +
          (((C13303 - (C13302 + C13301) + C13304 - C13305 - C13306) * C7787 +
            (C13309 - (C13308 + C13307) + C13310 - C13311 - C13312) * C7788 +
            (C13315 - (C13314 + C13313) + C13316 - C13317 - C13318) * C7789) *
               C50920 +
           ((C11401 * C507 -
             ((C10625 * C860 + C50612 * C866) * C501 +
              (C10625 * C851 + C50612 * C856) * C506) +
             C11402 * C502 - C11403 * C508 - C11404 * C503) *
                C7787 +
            (C11403 * C507 - (C11402 * C501 + C11401 * C506) + C11404 * C502 -
             C11405 * C508 - C11406 * C503) *
                C7788 +
            (C11405 * C507 - (C11404 * C501 + C11403 * C506) + C11406 * C502 -
             (C10625 * C11384 + C50612 * C11385) * C508 -
             (C10625 * C11386 + C50612 * C11387) * C503) *
                C7789) *
               C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C7787 +
            (C10761 * C121 + C10762 * C50672) * C7788 +
            (C10763 * C121 + C10764 * C50672) * C7789) *
               C50920 +
           ((C12905 + C12906) * C7787 + (C12879 + C12880) * C7788 +
            (C12881 + C12882) * C7789) *
               C50814) *
              C50638 * C1051 -
          (((C13477 + C13478) * C7789 + (C13479 + C13480) * C7788 +
            (C13499 + C13500) * C7787) *
               C50814 +
           ((C12882 + C12881) * C7789 + (C12880 + C12879) * C7788 +
            (C12906 + C12905) * C7787) *
               C50920) *
              C50638 * C1052 +
          (((C13500 + C13499) * C7787 + (C13480 + C13479) * C7788 +
            (C13478 + C13477) * C7789) *
               C50920 +
           ((C13799 + C13800) * C7787 + (C13793 + C13794) * C7788 +
            (C13795 + C13796) * C7789) *
               C50814) *
              C50638 * C1053 -
          ((((C10625 * C13782 + C50612 * C13786) * C50672 +
             (C10625 * C13780 + C50612 * C13783) * C121) *
                C7789 +
            ((C10625 * C13784 + C50612 * C13787) * C50672 +
             (C10625 * C13781 + C50612 * C13785) * C121) *
                C7788 +
            ((C10625 * C6204 + C50612 * C6210) * C50672 +
             (C10625 * C6201 + C50612 * C6207) * C121) *
                C7787) *
               C50814 +
           ((C13796 + C13795) * C7789 + (C13794 + C13793) * C7788 +
            (C13800 + C13799) * C7787) *
               C50920) *
              C50638 * C1054)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C50776 * C20970 +
            (C12905 + C12906) * C50776 * C20971 + C19090 * C50776 * C20972 +
            (C13799 + C13800) * C50776 * C20973) *
               C250 -
           ((C19113 + C19112) * C50776 * C20973 + C19093 * C50776 * C20972 +
            (C12907 + C12908) * C50776 * C20971 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C50776 * C20970) *
               C251 +
           (((C10625 * C124 + C50612 * C131) * C121 +
             (C10625 * C135 + C50612 * C145) * C50672) *
                C50776 * C20970 +
            (C12909 + C12910) * C50776 * C20971 +
            (C18540 + C18541) * C50776 * C20972 +
            (C21177 + C21178) * C50776 * C20973) *
               C252) *
              C50907 +
          (((C12908 + C12907) * C50776 * C20970 +
            (C13493 + C13494) * C50776 * C20971 +
            (C19112 + C19113) * C50776 * C20972 +
            ((C10625 * C6200 + C50612 * C6206) * C121 +
             (C10625 * C6203 + C50612 * C6209) * C50672) *
                C50776 * C20973) *
               C251 -
           ((C19401 + C19400) * C50776 * C20973 + C19388 * C50776 * C20972 +
            (C13499 + C13500) * C50776 * C20971 +
            (C12906 + C12905) * C50776 * C20970) *
               C250 -
           (((C10625 * C6202 + C50612 * C6208) * C50672 +
             (C10625 * C6199 + C50612 * C6205) * C121) *
                C50776 * C20973 +
            (C21178 + C21177) * C50776 * C20972 +
            (C18541 + C18540) * C50776 * C20971 +
            (C12910 + C12909) * C50776 * C20970) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C506 +
            (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
            C10762 * C502 + C10763 * C508 + C10764 * C503) *
               C50776 * C20970 +
           (C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C50776 *
               C20971 +
           (C18932 + C18933 - C18934 - C18935 + C18936 + C18937) * C50776 *
               C20972 +
           (C21441 + C21442 - C21443 - C21444 + C21445 + C21446) * C50776 *
               C20973) *
              C50638 * C50907 +
          ((C13303 - (C13302 + C13301) + C13304 - C13305 - C13306) * C50776 *
               C20970 +
           (C18934 - (C18933 + C18932) + C18935 - C18936 - C18937) * C50776 *
               C20971 +
           (C21443 - (C21442 + C21441) + C21444 - C21445 - C21446) * C50776 *
               C20972 +
           (C19278 * C507 - (C19398 * C501 + C19397 * C506) + C19279 * C502 -
            (C10625 * C13780 + C50612 * C13783) * C508 -
            (C10625 * C13782 + C50612 * C13786) * C503) *
               C50776 * C20973) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C121 +
            (C10625 * C133 + C50612 * C143) * C50672) *
               C50776 * C20970 +
           (C12905 + C12906) * C50776 * C20971 + C21545 * C20972 +
           C21553 * C20973) *
              C50638 * C1051 -
          (C21742 * C20973 + C21737 * C20972 +
           (C13499 + C13500) * C50776 * C20971 +
           (C12906 + C12905) * C50776 * C20970) *
              C50638 * C1052 +
          (C21545 * C20970 + C21553 * C20971 +
           (C19400 + C19401) * C50776 * C20972 +
           (C21745 + C21746) * C50776 * C20973) *
              C50638 * C1053 -
          (((C10625 * C21732 + C50612 * C21734) * C50672 +
            (C10625 * C21731 + C50612 * C21733) * C121) *
               C50776 * C20973 +
           (C21746 + C21745) * C50776 * C20972 + C21742 * C20971 +
           C21737 * C20970) *
              C50638 * C1054)) /
            (p * q * std::sqrt(p + q));
    d2ee[129] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C10625 * C122 + C50612 * C129) * C121 +
                       (C10625 * C133 + C50612 * C143) * C50672) *
                          C7787 +
                      (C10761 * C121 + C10762 * C50672) * C7788 +
                      (C10763 * C121 + C10764 * C50672) * C7789) *
                         C50920 +
                     ((C12905 + C12906) * C7787 + (C12879 + C12880) * C7788 +
                      (C12881 + C12882) * C7789) *
                         C50814) *
                        C50950 -
                    (((C12883 + C12884) * C7789 + (C12885 + C12886) * C7788 +
                      (C12907 + C12908) * C7787) *
                         C50814 +
                     ((C10770 * C50672 + C10769 * C121) * C7789 +
                      (C10768 * C50672 + C10767 * C121) * C7788 +
                      ((C10625 * C134 + C50612 * C144) * C50672 +
                       (C10625 * C123 + C50612 * C130) * C121) *
                          C7787) *
                         C50920) *
                        C50936 +
                    ((((C10625 * C124 + C50612 * C131) * C121 +
                       (C10625 * C135 + C50612 * C145) * C50672) *
                          C7787 +
                      (C10773 * C121 + C10774 * C50672) * C7788 +
                      (C10775 * C121 + C10776 * C50672) * C7789) *
                         C50920 +
                     ((C12909 + C12910) * C7787 + (C12895 + C12896) * C7788 +
                      (C12897 + C12898) * C7789) *
                         C50814) *
                        C1173) *
                       C1514 +
                   ((((C12908 + C12907) * C7787 + (C12886 + C12885) * C7788 +
                      (C12884 + C12883) * C7789) *
                         C50920 +
                     ((C13493 + C13494) * C7787 + (C13495 + C13496) * C7788 +
                      (C13497 + C13498) * C7789) *
                         C50814) *
                        C50936 -
                    (((C13477 + C13478) * C7789 + (C13479 + C13480) * C7788 +
                      (C13499 + C13500) * C7787) *
                         C50814 +
                     ((C12882 + C12881) * C7789 + (C12880 + C12879) * C7788 +
                      (C12906 + C12905) * C7787) *
                         C50920) *
                        C50950 -
                    ((((C10625 * C3327 + C50612 * C3330) * C50672 +
                       (C10625 * C3321 + C50612 * C3324) * C121) *
                          C7789 +
                      ((C10625 * C978 + C50612 * C982) * C50672 +
                       (C10625 * C970 + C50612 * C974) * C121) *
                          C7788 +
                      ((C10625 * C862 + C50612 * C868) * C50672 +
                       (C10625 * C853 + C50612 * C858) * C121) *
                          C7787) *
                         C50814 +
                     ((C12898 + C12897) * C7789 + (C12896 + C12895) * C7788 +
                      (C12910 + C12909) * C7787) *
                         C50920) *
                        C1173) *
                       C50714)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C2176 * C122 + C2171 * C129 + C2177 * C123 +
                       C2172 * C130 + C2178 * C124 + C2173 * C131) *
                          C121 +
                      (C2176 * C133 + C2171 * C143 + C2177 * C134 +
                       C2172 * C144 + C2178 * C135 + C2173 * C145) *
                          C50672) *
                         C50776 * C50920 +
                     ((C5366 + C5367 + C5368) * C121 +
                      (C5369 + C5370 + C5371) * C50672) *
                         C50776 * C50814) *
                        C50950 -
                    (((C5372 + C5373 + C5374) * C50672 +
                      (C5375 + C5376 + C5377) * C121) *
                         C50776 * C50814 +
                     ((C2178 * C136 + C2173 * C146 + C2177 * C135 +
                       C2172 * C145 + C2176 * C134 + C2171 * C144) *
                          C50672 +
                      (C2178 * C125 + C2173 * C132 + C2177 * C124 +
                       C2172 * C131 + C2176 * C123 + C2171 * C130) *
                          C121) *
                         C50776 * C50920) *
                        C50936 +
                    (((C2176 * C124 + C2171 * C131 + C2177 * C125 +
                       C2172 * C132 + C2178 * C126 + C2173 * C138) *
                          C121 +
                      (C2176 * C135 + C2171 * C145 + C2177 * C136 +
                       C2172 * C146 + C2178 * C137 + C2173 * C147) *
                          C50672) *
                         C50776 * C50920 +
                     ((C5378 + C5379 + C5380) * C121 +
                      (C5381 + C5382 + C5383) * C50672) *
                         C50776 * C50814) *
                        C1173) *
                       C1514 +
                   ((((C5377 + C5376 + C5375) * C121 +
                      (C5374 + C5373 + C5372) * C50672) *
                         C50776 * C50920 +
                     ((C5944 + C5945 + C5946) * C121 +
                      (C5947 + C5948 + C5949) * C50672) *
                         C50776 * C50814) *
                        C50936 -
                    (((C5950 + C5951 + C5952) * C50672 +
                      (C5953 + C5954 + C5955) * C121) *
                         C50776 * C50814 +
                     ((C5371 + C5370 + C5369) * C50672 +
                      (C5368 + C5367 + C5366) * C121) *
                         C50776 * C50920) *
                        C50950 -
                    (((C2178 * C864 + C2173 * C870 + C2177 * C863 +
                       C2172 * C869 + C2176 * C862 + C2171 * C868) *
                          C50672 +
                      (C2178 * C855 + C2173 * C865 + C2177 * C854 +
                       C2172 * C859 + C2176 * C853 + C2171 * C858) *
                          C121) *
                         C50776 * C50814 +
                     ((C5383 + C5382 + C5381) * C50672 +
                      (C5380 + C5379 + C5378) * C121) *
                         C50776 * C50920) *
                        C1173) *
                       C50714)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C10625 * C122 + C50612 * C129) * C121 +
                      (C10625 * C133 + C50612 * C143) * C50672) *
                         C50776 * C20970 +
                     (C12905 + C12906) * C50776 * C20971 + C21545 * C20972 +
                     C21553 * C20973) *
                        C50950 -
                    (C21554 * C20973 + C21548 * C20972 +
                     (C12907 + C12908) * C50776 * C20971 +
                     ((C10625 * C134 + C50612 * C144) * C50672 +
                      (C10625 * C123 + C50612 * C130) * C121) *
                         C50776 * C20970) *
                        C50936 +
                    (((C10625 * C124 + C50612 * C131) * C121 +
                      (C10625 * C135 + C50612 * C145) * C50672) *
                         C50776 * C20970 +
                     (C12909 + C12910) * C50776 * C20971 +
                     (C18540 + C18541) * C50776 * C20972 +
                     (C21177 + C21178) * C50776 * C20973) *
                        C1173) *
                       C1514 +
                   (((C12908 + C12907) * C50776 * C20970 +
                     (C13493 + C13494) * C50776 * C20971 +
                     (C19112 + C19113) * C50776 * C20972 +
                     (C21557 + C21558) * C50776 * C20973) *
                        C50936 -
                    (C21742 * C20973 + C21737 * C20972 +
                     (C13499 + C13500) * C50776 * C20971 +
                     (C12906 + C12905) * C50776 * C20970) *
                        C50950 -
                    (((C10625 * C6202 + C50612 * C6208) * C50672 +
                      (C10625 * C6199 + C50612 * C6205) * C121) *
                         C50776 * C20973 +
                     (C21178 + C21177) * C50776 * C20972 +
                     (C18541 + C18540) * C50776 * C20971 +
                     (C12910 + C12909) * C50776 * C20970) *
                        C1173) *
                       C50714)) /
                     (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C253 +
              (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
              C10762 * C50688) *
                 C7787 +
             (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
              C10764 * C50688) *
                 C7788 +
             (C10763 * C253 + C10764 * C50905 - C10765 * C254 -
              C10766 * C50688) *
                 C7789) *
                C50920 +
            ((C13647 + C13648 - C13649 - C13650) * C7787 +
             (C13651 + C13652 - C13653 - C13654) * C7788 +
             (C13655 + C13656 - C13657 - C13658) * C7789) *
                C50814) *
               C1277 +
           (((C10767 * C254 -
              ((C10625 * C134 + C50612 * C144) * C50905 +
               (C10625 * C123 + C50612 * C130) * C253) +
              C10768 * C50688) *
                 C7787 +
             (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
              C10770 * C50688) *
                 C7788 +
             (C10771 * C254 - (C10770 * C50905 + C10769 * C253) +
              C10772 * C50688) *
                 C7789) *
                C50920 +
            ((C14651 - (C14652 + C14653) + C14654) * C7787 +
             (C14655 - (C14656 + C14657) + C14658) * C7788 +
             (C14659 - (C14660 + C14661) + C14662) * C7789) *
                C50814) *
               C50643) *
              C1514 +
          ((((C13649 - (C13648 + C13647) + C13650) * C7787 +
             (C13653 - (C13652 + C13651) + C13654) * C7788 +
             (C13657 - (C13656 + C13655) + C13658) * C7789) *
                C50920 +
            ((C13659 - (C13660 + C13661) + C13662) * C7787 +
             (C13663 - (C13664 + C13665) + C13666) * C7788 +
             (C13667 - (C13668 + C13669) + C13670) * C7789) *
                C50814) *
               C1277 +
           (((C14653 + C14652 - C14651 - C14654) * C7787 +
             (C14657 + C14656 - C14655 - C14658) * C7788 +
             (C14661 + C14660 - C14659 - C14662) * C7789) *
                C50920 +
            ((C13485 * C253 + C13486 * C50905 - C13487 * C254 -
              C13488 * C50688) *
                 C7787 +
             (C13487 * C253 + C13488 * C50905 - C13489 * C254 -
              C13490 * C50688) *
                 C7788 +
             (C13489 * C253 + C13490 * C50905 -
              (C10625 * C8934 + C50612 * C8936) * C254 -
              (C10625 * C8938 + C50612 * C8940) * C50688) *
                 C7789) *
                C50814) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C253 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50905 -
             (C2362 + C2363 + C2364) * C254 -
             (C2365 + C2366 + C2367) * C50688) *
                C50776 * C50920 +
            ((C5366 + C5367 + C5368) * C253 + (C5369 + C5370 + C5371) * C50905 -
             (C3020 + C3019 + C3018) * C254 -
             (C3023 + C3022 + C3021) * C50688) *
                C50776 * C50814) *
               C1277 +
           (((C2368 + C2369 + C2370) * C254 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C50905 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C253) +
             (C2371 + C2372 + C2373) * C50688) *
                C50776 * C50920 +
            ((C3962 + C3961 + C3960) * C254 -
             ((C5372 + C5373 + C5374) * C50905 +
              (C5375 + C5376 + C5377) * C253) +
             (C3965 + C3964 + C3963) * C50688) *
                C50776 * C50814) *
               C50643) *
              C1514 +
          ((((C3018 + C3019 + C3020) * C254 -
             ((C5371 + C5370 + C5369) * C50905 +
              (C5368 + C5367 + C5366) * C253) +
             (C3021 + C3022 + C3023) * C50688) *
                C50776 * C50920 +
            ((C3348 + C3347 + C3346) * C254 -
             ((C5950 + C5951 + C5952) * C50905 +
              (C5953 + C5954 + C5955) * C253) +
             (C3351 + C3350 + C3349) * C50688) *
                C50776 * C50814) *
               C1277 +
           (((C5377 + C5376 + C5375) * C253 + (C5374 + C5373 + C5372) * C50905 -
             (C3960 + C3961 + C3962) * C254 -
             (C3963 + C3964 + C3965) * C50688) *
                C50776 * C50920 +
            ((C5944 + C5945 + C5946) * C253 + (C5947 + C5948 + C5949) * C50905 -
             (C2178 * C969 + C2173 * C973 + C2177 * C970 + C2172 * C974 +
              C2176 * C971 + C2171 * C975) *
                 C254 -
             (C2178 * C977 + C2173 * C981 + C2177 * C978 + C2172 * C982 +
              C2176 * C979 + C2171 * C983) *
                 C50688) *
                C50776 * C50814) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C253 +
             (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
             C10762 * C50688) *
                C50776 * C20970 +
            (C13647 + C13648 - C13649 - C13650) * C50776 * C20971 +
            C21657 * C20972 + C21665 * C20973) *
               C1277 +
           ((C10767 * C254 -
             ((C10625 * C134 + C50612 * C144) * C50905 +
              (C10625 * C123 + C50612 * C130) * C253) +
             C10768 * C50688) *
                C50776 * C20970 +
            (C14651 - (C14652 + C14653) + C14654) * C50776 * C20971 +
            (C20236 - (C20237 + C20238) + C20239) * C50776 * C20972 +
            (C22305 - (C22306 + C22307) + C22308) * C50776 * C20973) *
               C50643) *
              C1514 +
          (((C13649 - (C13648 + C13647) + C13650) * C50776 * C20970 +
            (C13659 - (C13660 + C13661) + C13662) * C50776 * C20971 +
            (C19264 - (C19265 + C19266) + C19267) * C50776 * C20972 +
            (C21659 - (C21660 + C21661) + C21662) * C50776 * C20973) *
               C1277 +
           ((C14653 + C14652 - C14651 - C14654) * C50776 * C20970 +
            (C20238 + C20237 - C20236 - C20239) * C50776 * C20971 +
            (C22307 + C22306 - C22305 - C22308) * C50776 * C20972 +
            (C21555 * C253 + C21556 * C50905 -
             (C10625 * C16507 + C50612 * C16508) * C254 -
             (C10625 * C16509 + C50612 * C16510) * C50688) *
                C50776 * C20973) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[131] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C10625 * C122 + C50612 * C129) * C121 +
                       (C10625 * C133 + C50612 * C143) * C50672) *
                          C7787 +
                      (C10761 * C121 + C10762 * C50672) * C7788 +
                      (C10763 * C121 + C10764 * C50672) * C7789) *
                         C50920 +
                     ((C12905 + C12906) * C7787 + (C12879 + C12880) * C7788 +
                      (C12881 + C12882) * C7789) *
                         C50814) *
                        C1277 -
                    (((C12883 + C12884) * C7789 + (C12885 + C12886) * C7788 +
                      (C12907 + C12908) * C7787) *
                         C50814 +
                     ((C10770 * C50672 + C10769 * C121) * C7789 +
                      (C10768 * C50672 + C10767 * C121) * C7788 +
                      ((C10625 * C134 + C50612 * C144) * C50672 +
                       (C10625 * C123 + C50612 * C130) * C121) *
                          C7787) *
                         C50920) *
                        C50643) *
                       C50952 +
                   ((((C12908 + C12907) * C7787 + (C12886 + C12885) * C7788 +
                      (C12884 + C12883) * C7789) *
                         C50920 +
                     ((C13493 + C13494) * C7787 + (C13495 + C13496) * C7788 +
                      (C13497 + C13498) * C7789) *
                         C50814) *
                        C50643 -
                    (((C13477 + C13478) * C7789 + (C13479 + C13480) * C7788 +
                      (C13499 + C13500) * C7787) *
                         C50814 +
                     ((C12882 + C12881) * C7789 + (C12880 + C12879) * C7788 +
                      (C12906 + C12905) * C7787) *
                         C50920) *
                        C1277) *
                       C50942 +
                   ((((C13500 + C13499) * C7787 + (C13480 + C13479) * C7788 +
                      (C13478 + C13477) * C7789) *
                         C50920 +
                     ((C13799 + C13800) * C7787 + (C13793 + C13794) * C7788 +
                      (C13795 + C13796) * C7789) *
                         C50814) *
                        C1277 -
                    ((((C10625 * C9066 + C50612 * C9070) * C50672 +
                       (C10625 * C9064 + C50612 * C9068) * C121) *
                          C7789 +
                      ((C10625 * C3453 + C50612 * C3459) * C50672 +
                       (C10625 * C3450 + C50612 * C3456) * C121) *
                          C7788 +
                      ((C10625 * C1061 + C50612 * C1069) * C50672 +
                       (C10625 * C1057 + C50612 * C1065) * C121) *
                          C7787) *
                         C50814 +
                     ((C13498 + C13497) * C7789 + (C13496 + C13495) * C7788 +
                      (C13494 + C13493) * C7787) *
                         C50920) *
                        C50643) *
                       C1746)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C2176 * C122 + C2171 * C129 + C2177 * C123 +
                       C2172 * C130 + C2178 * C124 + C2173 * C131) *
                          C121 +
                      (C2176 * C133 + C2171 * C143 + C2177 * C134 +
                       C2172 * C144 + C2178 * C135 + C2173 * C145) *
                          C50672) *
                         C50776 * C50920 +
                     ((C5366 + C5367 + C5368) * C121 +
                      (C5369 + C5370 + C5371) * C50672) *
                         C50776 * C50814) *
                        C1277 -
                    (((C5372 + C5373 + C5374) * C50672 +
                      (C5375 + C5376 + C5377) * C121) *
                         C50776 * C50814 +
                     ((C2178 * C136 + C2173 * C146 + C2177 * C135 +
                       C2172 * C145 + C2176 * C134 + C2171 * C144) *
                          C50672 +
                      (C2178 * C125 + C2173 * C132 + C2177 * C124 +
                       C2172 * C131 + C2176 * C123 + C2171 * C130) *
                          C121) *
                         C50776 * C50920) *
                        C50643) *
                       C50952 +
                   ((((C5377 + C5376 + C5375) * C121 +
                      (C5374 + C5373 + C5372) * C50672) *
                         C50776 * C50920 +
                     ((C5944 + C5945 + C5946) * C121 +
                      (C5947 + C5948 + C5949) * C50672) *
                         C50776 * C50814) *
                        C50643 -
                    (((C5950 + C5951 + C5952) * C50672 +
                      (C5953 + C5954 + C5955) * C121) *
                         C50776 * C50814 +
                     ((C5371 + C5370 + C5369) * C50672 +
                      (C5368 + C5367 + C5366) * C121) *
                         C50776 * C50920) *
                        C1277) *
                       C50942 +
                   ((((C5955 + C5954 + C5953) * C121 +
                      (C5952 + C5951 + C5950) * C50672) *
                         C50776 * C50920 +
                     ((C6224 + C6225 + C6226) * C121 +
                      (C6227 + C6228 + C6229) * C50672) *
                         C50776 * C50814) *
                        C1277 -
                    (((C2178 * C1059 + C2173 * C1067 + C2177 * C1060 +
                       C2172 * C1068 + C2176 * C1061 + C2171 * C1069) *
                          C50672 +
                      (C2178 * C1055 + C2173 * C1063 + C2177 * C1056 +
                       C2172 * C1064 + C2176 * C1057 + C2171 * C1065) *
                          C121) *
                         C50776 * C50814 +
                     ((C5949 + C5948 + C5947) * C50672 +
                      (C5946 + C5945 + C5944) * C121) *
                         C50776 * C50920) *
                        C50643) *
                       C1746)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C10625 * C122 + C50612 * C129) * C121 +
                      (C10625 * C133 + C50612 * C143) * C50672) *
                         C50776 * C20970 +
                     (C12905 + C12906) * C50776 * C20971 + C21545 * C20972 +
                     C21553 * C20973) *
                        C1277 -
                    (C21554 * C20973 + C21548 * C20972 +
                     (C12907 + C12908) * C50776 * C20971 +
                     ((C10625 * C134 + C50612 * C144) * C50672 +
                      (C10625 * C123 + C50612 * C130) * C121) *
                         C50776 * C20970) *
                        C50643) *
                       C50952 +
                   (((C12908 + C12907) * C50776 * C20970 +
                     (C13493 + C13494) * C50776 * C20971 +
                     (C19112 + C19113) * C50776 * C20972 +
                     (C21557 + C21558) * C50776 * C20973) *
                        C50643 -
                    (C21742 * C20973 + C21737 * C20972 +
                     (C13499 + C13500) * C50776 * C20971 +
                     (C12906 + C12905) * C50776 * C20970) *
                        C1277) *
                       C50942 +
                   ((C21545 * C20970 + C21553 * C20971 +
                     (C19400 + C19401) * C50776 * C20972 +
                     (C21745 + C21746) * C50776 * C20973) *
                        C1277 -
                    (((C10625 * C16633 + C50612 * C16637) * C50672 +
                      (C10625 * C16631 + C50612 * C16635) * C121) *
                         C50776 * C20973 +
                     (C21558 + C21557) * C50776 * C20972 + C21554 * C20971 +
                     C21548 * C20970) *
                        C50643) *
                       C1746)) /
                     (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C506 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C501 -
            (C2362 + C2363 + C2364) * C507 - (C2365 + C2366 + C2367) * C502 +
            (C2696 + C2697 + C2698) * C508 + (C2699 + C2700 + C2701) * C503) *
               C50776 * C50920 +
           ((C5366 + C5367 + C5368) * C506 + (C5369 + C5370 + C5371) * C501 -
            (C3020 + C3019 + C3018) * C507 - (C3023 + C3022 + C3021) * C502 +
            (C3026 + C3025 + C3024) * C508 + (C3029 + C3028 + C3027) * C503) *
               C50776 * C50814) *
              C50898 +
          (((C2368 + C2369 + C2370) * C507 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C501 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C506) +
            (C2371 + C2372 + C2373) * C502 - (C2702 + C2703 + C2704) * C508 -
            (C2705 + C2706 + C2707) * C503) *
               C50776 * C50920 +
           ((C3962 + C3961 + C3960) * C507 -
            ((C5372 + C5373 + C5374) * C501 + (C5375 + C5376 + C5377) * C506) +
            (C3965 + C3964 + C3963) * C502 -
            (C2178 * C722 + C2173 * C734 + C2177 * C723 + C2172 * C735 +
             C2176 * C724 + C2171 * C736) *
                C508 -
            (C2178 * C738 + C2173 * C746 + C2177 * C739 + C2172 * C747 +
             C2176 * C740 + C2171 * C748) *
                C503) *
               C50776 * C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50672) *
               C50776 * C50920 +
           ((C2176 * C383 + C2171 * C394 + C2177 * C379 + C2172 * C385 +
             C2178 * C380 + C2173 * C386) *
                C121 +
            (C2176 * C393 + C2171 * C401 + C2177 * C389 + C2172 * C397 +
             C2178 * C390 + C2173 * C398) *
                C50672) *
               C50776 * C50814) *
              C112 -
          (((C2178 * C391 + C2173 * C399 + C2177 * C390 + C2172 * C398 +
             C2176 * C389 + C2171 * C397) *
                C50672 +
            (C2178 * C381 + C2173 * C387 + C2177 * C380 + C2172 * C386 +
             C2176 * C379 + C2171 * C385) *
                C121) *
               C50776 * C50814 +
           ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
             C2176 * C134 + C2171 * C144) *
                C50672 +
            (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
             C2176 * C123 + C2171 * C130) *
                C121) *
               C50776 * C50920) *
              C113 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C121 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50672) *
               C50776 * C50920 +
           ((C2176 * C380 + C2171 * C386 + C2177 * C381 + C2172 * C387 +
             C2178 * C382 + C2173 * C388) *
                C121 +
            (C2176 * C390 + C2171 * C398 + C2177 * C391 + C2172 * C399 +
             C2178 * C392 + C2173 * C400) *
                C50672) *
               C50776 * C50814) *
              C114 -
          (((C2178 * C395 + C2173 * C402 + C2177 * C392 + C2172 * C400 +
             C2176 * C391 + C2171 * C399) *
                C50672 +
            (C2178 * C384 + C2173 * C396 + C2177 * C382 + C2172 * C388 +
             C2176 * C381 + C2171 * C387) *
                C121) *
               C50776 * C50814 +
           ((C2178 * C140 + C2173 * C148 + C2177 * C137 + C2172 * C147 +
             C2176 * C136 + C2171 * C146) *
                C50672 +
            (C2178 * C127 + C2173 * C139 + C2177 * C126 + C2172 * C138 +
             C2176 * C125 + C2171 * C132) *
                C121) *
               C50776 * C50920) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C7787 +
            (C10761 * C121 + C10762 * C50672) * C7788 +
            (C10763 * C121 + C10764 * C50672) * C7789) *
               C50920 +
           (((C10625 * C383 + C50612 * C394) * C121 +
             (C10625 * C393 + C50612 * C401) * C50672) *
                C7787 +
            (C11181 * C121 + C11182 * C50672) * C7788 +
            (C11183 * C121 + C11184 * C50672) * C7789) *
               C50814) *
              C112 -
          (((C11818 * C50672 + C11817 * C121) * C7789 +
            (C11816 * C50672 + C11815 * C121) * C7788 +
            ((C10625 * C389 + C50612 * C397) * C50672 +
             (C10625 * C379 + C50612 * C385) * C121) *
                C7787) *
               C50814 +
           ((C10770 * C50672 + C10769 * C121) * C7789 +
            (C10768 * C50672 + C10767 * C121) * C7788 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C7787) *
               C50920) *
              C113 +
          ((((C10625 * C124 + C50612 * C131) * C121 +
             (C10625 * C135 + C50612 * C145) * C50672) *
                C7787 +
            (C10773 * C121 + C10774 * C50672) * C7788 +
            (C10775 * C121 + C10776 * C50672) * C7789) *
               C50920 +
           (((C10625 * C380 + C50612 * C386) * C121 +
             (C10625 * C390 + C50612 * C398) * C50672) *
                C7787 +
            ((C10625 * C720 + C50612 * C728) * C121 +
             (C10625 * C732 + C50612 * C744) * C50672) *
                C7788 +
            ((C10625 * C723 + C50612 * C735) * C121 +
             (C10625 * C739 + C50612 * C747) * C50672) *
                C7789) *
               C50814) *
              C114 -
          ((((C10625 * C738 + C50612 * C746) * C50672 +
             (C10625 * C722 + C50612 * C734) * C121) *
                C7789 +
            ((C10625 * C733 + C50612 * C745) * C50672 +
             (C10625 * C721 + C50612 * C729) * C121) *
                C7788 +
            ((C10625 * C391 + C50612 * C399) * C50672 +
             (C10625 * C381 + C50612 * C387) * C121) *
                C7787) *
               C50814 +
           (((C10625 * C521 + C50612 * C527) * C50672 +
             (C10625 * C512 + C50612 * C517) * C121) *
                C7789 +
            ((C10625 * C265 + C50612 * C273) * C50672 +
             (C10625 * C255 + C50612 * C261) * C121) *
                C7788 +
            ((C10625 * C136 + C50612 * C146) * C50672 +
             (C10625 * C125 + C50612 * C132) * C121) *
                C7787) *
               C50920) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C7787 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C7788 +
            (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
             C10983 * C508 + C10984 * C503) *
                C7789) *
               C50920 +
           ((C12899 * C506 + C12900 * C501 - C11181 * C507 - C11182 * C502 +
             C11183 * C508 + C11184 * C503) *
                C7787 +
            (C11181 * C506 + C11182 * C501 - C11183 * C507 - C11184 * C502 +
             C11185 * C508 + C11186 * C503) *
                C7788 +
            (C11183 * C506 + C11184 * C501 - C11185 * C507 - C11186 * C502 +
             C11187 * C508 + C11188 * C503) *
                C7789) *
               C50814) *
              C50898 +
          (((C10767 * C507 -
             ((C10625 * C134 + C50612 * C144) * C501 +
              (C10625 * C123 + C50612 * C130) * C506) +
             C10768 * C502 - C10769 * C508 - C10770 * C503) *
                C7787 +
            (C10769 * C507 - (C10768 * C501 + C10767 * C506) + C10770 * C502 -
             C10771 * C508 - C10772 * C503) *
                C7788 +
            (C10771 * C507 - (C10770 * C501 + C10769 * C506) + C10772 * C502 -
             C10985 * C508 - C10986 * C503) *
                C7789) *
               C50920 +
           ((C11815 * C507 - (C12901 * C501 + C12902 * C506) + C11816 * C502 -
             C11817 * C508 - C11818 * C503) *
                C7787 +
            (C11817 * C507 - (C11816 * C501 + C11815 * C506) + C11818 * C502 -
             C11819 * C508 - C11820 * C503) *
                C7788 +
            (C11819 * C507 - (C11818 * C501 + C11817 * C506) + C11820 * C502 -
             (C10625 * C8596 + C50612 * C8598) * C508 -
             (C10625 * C8600 + C50612 * C8602) * C503) *
                C7789) *
               C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C121 +
            (C10625 * C133 + C50612 * C143) * C50672) *
               C50776 * C20970 +
           (C12905 + C12906) * C50776 * C20971 + C19090 * C50776 * C20972 +
           (C13799 + C13800) * C50776 * C20973) *
              C112 -
          ((C19113 + C19112) * C50776 * C20973 + C19093 * C50776 * C20972 +
           (C12907 + C12908) * C50776 * C20971 +
           ((C10625 * C134 + C50612 * C144) * C50672 +
            (C10625 * C123 + C50612 * C130) * C121) *
               C50776 * C20970) *
              C113 +
          (((C10625 * C124 + C50612 * C131) * C121 +
            (C10625 * C135 + C50612 * C145) * C50672) *
               C50776 * C20970 +
           (C12909 + C12910) * C50776 * C20971 +
           (C18540 + C18541) * C50776 * C20972 +
           ((C10625 * C1056 + C50612 * C1064) * C121 +
            (C10625 * C1060 + C50612 * C1068) * C50672) *
               C50776 * C20973) *
              C114 -
          (((C10625 * C1059 + C50612 * C1067) * C50672 +
            (C10625 * C1055 + C50612 * C1063) * C121) *
               C50776 * C20973 +
           ((C10625 * C863 + C50612 * C869) * C50672 +
            (C10625 * C854 + C50612 * C859) * C121) *
               C50776 * C20972 +
           ((C10625 * C391 + C50612 * C399) * C50672 +
            (C10625 * C381 + C50612 * C387) * C121) *
               C50776 * C20971 +
           ((C10625 * C136 + C50612 * C146) * C50672 +
            (C10625 * C125 + C50612 * C132) * C121) *
               C50776 * C20970) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C506 +
            (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
            C10762 * C502 + C10763 * C508 + C10764 * C503) *
               C50776 * C20970 +
           (C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C50776 *
               C20971 +
           (C18932 + C18933 - C18934 - C18935 + C18936 + C18937) * C50776 *
               C20972 +
           (C13797 * C506 + C13798 * C501 - C13679 * C507 - C13680 * C502 +
            C13681 * C508 + C13682 * C503) *
               C50776 * C20973) *
              C50898 +
          ((C10767 * C507 -
            ((C10625 * C134 + C50612 * C144) * C501 +
             (C10625 * C123 + C50612 * C130) * C506) +
            C10768 * C502 - C10769 * C508 - C10770 * C503) *
               C50776 * C20970 +
           (C11815 * C507 - (C12901 * C501 + C12902 * C506) + C11816 * C502 -
            C11817 * C508 - C11818 * C503) *
               C50776 * C20971 +
           (C13487 * C507 - (C13486 * C501 + C13485 * C506) + C13488 * C502 -
            C13489 * C508 - C13490 * C503) *
               C50776 * C20972 +
           (C19108 * C507 - (C19107 * C501 + C19106 * C506) + C19109 * C502 -
            (C10625 * C9064 + C50612 * C9068) * C508 -
            (C10625 * C9066 + C50612 * C9070) * C503) *
               C50776 * C20973) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
            C2178 * C124 + C2173 * C131) *
               C600 +
           (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
            C2178 * C135 + C2173 * C145) *
               C595 -
           (C2362 + C2363 + C2364) * C601 - (C2365 + C2366 + C2367) * C596 +
           (C2696 + C2697 + C2698) * C602 + (C2699 + C2700 + C2701) * C597 -
           (C2830 + C2831 + C2832) * C603 - (C2833 + C2834 + C2835) * C598) *
              C50776 * C50920 +
          ((C5366 + C5367 + C5368) * C600 + (C5369 + C5370 + C5371) * C595 -
           (C3020 + C3019 + C3018) * C601 - (C3023 + C3022 + C3021) * C596 +
           (C3026 + C3025 + C3024) * C602 + (C3029 + C3028 + C3027) * C597 -
           (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
            C2176 * C2983 + C2171 * C2986) *
               C603 -
           (C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
            C2176 * C2989 + C2171 * C2992) *
               C598) *
              C50776 * C50814) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50905 -
            (C2362 + C2363 + C2364) * C254 - (C2365 + C2366 + C2367) * C50688) *
               C50776 * C50920 +
           ((C2176 * C383 + C2171 * C394 + C2177 * C379 + C2172 * C385 +
             C2178 * C380 + C2173 * C386) *
                C253 +
            (C2176 * C393 + C2171 * C401 + C2177 * C389 + C2172 * C397 +
             C2178 * C390 + C2173 * C398) *
                C50905 -
            (C3020 + C3019 + C3018) * C254 - (C3023 + C3022 + C3021) * C50688) *
               C50776 * C50814) *
              C250 +
          (((C2368 + C2369 + C2370) * C254 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50905 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C253) +
            (C2371 + C2372 + C2373) * C50688) *
               C50776 * C50920 +
           ((C3962 + C3961 + C3960) * C254 -
            ((C2178 * C391 + C2173 * C399 + C2177 * C390 + C2172 * C398 +
              C2176 * C389 + C2171 * C397) *
                 C50905 +
             (C2178 * C381 + C2173 * C387 + C2177 * C380 + C2172 * C386 +
              C2176 * C379 + C2171 * C385) *
                 C253) +
            (C3965 + C3964 + C3963) * C50688) *
               C50776 * C50814) *
              C251 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C253 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50905 -
            (C2374 + C2375 + C2376) * C254 - (C2377 + C2378 + C2379) * C50688) *
               C50776 * C50920 +
           ((C2176 * C380 + C2171 * C386 + C2177 * C381 + C2172 * C387 +
             C2178 * C382 + C2173 * C388) *
                C253 +
            (C2176 * C390 + C2171 * C398 + C2177 * C391 + C2172 * C399 +
             C2178 * C392 + C2173 * C400) *
                C50905 -
            (C2178 * C1412 + C2173 * C1413 + C2177 * C721 + C2172 * C729 +
             C2176 * C720 + C2171 * C728) *
                C254 -
            (C2178 * C1414 + C2173 * C1415 + C2177 * C733 + C2172 * C745 +
             C2176 * C732 + C2171 * C744) *
                C50688) *
               C50776 * C50814) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C253 +
             (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
             C10762 * C50688) *
                C7787 +
            (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
             C10764 * C50688) *
                C7788 +
            (C10763 * C253 + C10764 * C50905 - C10765 * C254 -
             C10766 * C50688) *
                C7789) *
               C50920 +
           (((C10625 * C383 + C50612 * C394) * C253 +
             (C10625 * C393 + C50612 * C401) * C50905 - C11181 * C254 -
             C11182 * C50688) *
                C7787 +
            (C11181 * C253 + C11182 * C50905 - C11183 * C254 -
             C11184 * C50688) *
                C7788 +
            (C11183 * C253 + C11184 * C50905 - C11185 * C254 -
             C11186 * C50688) *
                C7789) *
               C50814) *
              C250 +
          (((C10767 * C254 -
             ((C10625 * C134 + C50612 * C144) * C50905 +
              (C10625 * C123 + C50612 * C130) * C253) +
             C10768 * C50688) *
                C7787 +
            (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
             C10770 * C50688) *
                C7788 +
            (C10771 * C254 - (C10770 * C50905 + C10769 * C253) +
             C10772 * C50688) *
                C7789) *
               C50920 +
           ((C11815 * C254 -
             ((C10625 * C389 + C50612 * C397) * C50905 +
              (C10625 * C379 + C50612 * C385) * C253) +
             C11816 * C50688) *
                C7787 +
            (C11817 * C254 - (C11816 * C50905 + C11815 * C253) +
             C11818 * C50688) *
                C7788 +
            (C11819 * C254 - (C11818 * C50905 + C11817 * C253) +
             C11820 * C50688) *
                C7789) *
               C50814) *
              C251 +
          ((((C10625 * C124 + C50612 * C131) * C253 +
             (C10625 * C135 + C50612 * C145) * C50905 - C10773 * C254 -
             C10774 * C50688) *
                C7787 +
            (C10773 * C253 + C10774 * C50905 - C10775 * C254 -
             C10776 * C50688) *
                C7788 +
            (C10775 * C253 + C10776 * C50905 - C10777 * C254 -
             C10778 * C50688) *
                C7789) *
               C50920 +
           (((C10625 * C380 + C50612 * C386) * C253 +
             (C10625 * C390 + C50612 * C398) * C50905 - C12725 * C254 -
             C12726 * C50688) *
                C7787 +
            (C12725 * C253 + C12726 * C50905 - C12727 * C254 -
             C12728 * C50688) *
                C7788 +
            (C12727 * C253 + C12728 * C50905 -
             (C10625 * C2981 + C50612 * C2984) * C254 -
             (C10625 * C2987 + C50612 * C2990) * C50688) *
                C7789) *
               C50814) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C600 +
            (C10625 * C133 + C50612 * C143) * C595 - C10761 * C601 -
            C10762 * C596 + C10763 * C602 + C10764 * C597 - C10765 * C603 -
            C10766 * C598) *
               C7787 +
           (C10761 * C600 + C10762 * C595 - C10763 * C601 - C10764 * C596 +
            C10765 * C602 + C10766 * C597 - C10983 * C603 - C10984 * C598) *
               C7788 +
           (C10763 * C600 + C10764 * C595 - C10765 * C601 - C10766 * C596 +
            C10983 * C602 + C10984 * C597 - C11061 * C603 - C11062 * C598) *
               C7789) *
              C50920 +
          ((C12899 * C600 + C12900 * C595 - C11181 * C601 - C11182 * C596 +
            C11183 * C602 + C11184 * C597 - C11185 * C603 - C11186 * C598) *
               C7787 +
           (C11181 * C600 + C11182 * C595 - C11183 * C601 - C11184 * C596 +
            C11185 * C602 + C11186 * C597 - C11187 * C603 - C11188 * C598) *
               C7788 +
           (C11183 * C600 + C11184 * C595 - C11185 * C601 - C11186 * C596 +
            C11187 * C602 + C11188 * C597 -
            (C10625 * C11160 + C50612 * C11161) * C603 -
            (C10625 * C11162 + C50612 * C11163) * C598) *
               C7789) *
              C50814) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C253 +
            (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
            C10762 * C50688) *
               C50776 * C20970 +
           (C13647 + C13648 - C13649 - C13650) * C50776 * C20971 +
           C19280 * C50776 * C20972 +
           (C19266 + C19265 - C19264 - C19267) * C50776 * C20973) *
              C250 +
          ((C10767 * C254 -
            ((C10625 * C134 + C50612 * C144) * C50905 +
             (C10625 * C123 + C50612 * C130) * C253) +
            C10768 * C50688) *
               C50776 * C20970 +
           (C14651 - (C14652 + C14653) + C14654) * C50776 * C20971 +
           (C20236 - (C20237 + C20238) + C20239) * C50776 * C20972 +
           (C19108 * C254 - (C19107 * C50905 + C19106 * C253) +
            C19109 * C50688) *
               C50776 * C20973) *
              C251 +
          (((C10625 * C124 + C50612 * C131) * C253 +
            (C10625 * C135 + C50612 * C145) * C50905 - C10773 * C254 -
            C10774 * C50688) *
               C50776 * C20970 +
           (C12903 * C253 + C12904 * C50905 - C12725 * C254 - C12726 * C50688) *
               C50776 * C20971 +
           (C18538 * C253 + C18539 * C50905 - C18384 * C254 - C18385 * C50688) *
               C50776 * C20972 +
           ((C10625 * C1056 + C50612 * C1064) * C253 +
            (C10625 * C1060 + C50612 * C1068) * C50905 -
            (C10625 * C3449 + C50612 * C3455) * C254 -
            (C10625 * C3452 + C50612 * C3458) * C50688) *
               C50776 * C20973) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10625 * C122 + C50612 * C129) * C600 +
           (C10625 * C133 + C50612 * C143) * C595 - C10761 * C601 -
           C10762 * C596 + C10763 * C602 + C10764 * C597 - C10765 * C603 -
           C10766 * C598) *
              C50776 * C20970 +
          (C12899 * C600 + C12900 * C595 - C11181 * C601 - C11182 * C596 +
           C11183 * C602 + C11184 * C597 - C11185 * C603 - C11186 * C598) *
              C50776 * C20971 +
          (C13492 * C600 + C13491 * C595 - C11401 * C601 - C11402 * C596 +
           C11403 * C602 + C11404 * C597 - C11405 * C603 - C11406 * C598) *
              C50776 * C20972 +
          (C13797 * C600 + C13798 * C595 - C13679 * C601 - C13680 * C596 +
           C13681 * C602 + C13682 * C597 -
           (C10625 * C11472 + C50612 * C11474) * C603 -
           (C10625 * C11473 + C50612 * C11475) * C598) *
              C50776 * C20973) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C506 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C501 -
            (C2362 + C2363 + C2364) * C507 - (C2365 + C2366 + C2367) * C502 +
            (C2696 + C2697 + C2698) * C508 + (C2699 + C2700 + C2701) * C503) *
               C50776 * C50920 +
           ((C5366 + C5367 + C5368) * C506 + (C5369 + C5370 + C5371) * C501 -
            (C3020 + C3019 + C3018) * C507 - (C3023 + C3022 + C3021) * C502 +
            (C3026 + C3025 + C3024) * C508 + (C3029 + C3028 + C3027) * C503) *
               C50776 * C50814) *
              C50638 * C50907 +
          (((C3018 + C3019 + C3020) * C507 -
            ((C5371 + C5370 + C5369) * C501 + (C5368 + C5367 + C5366) * C506) +
            (C3021 + C3022 + C3023) * C502 - (C3024 + C3025 + C3026) * C508 -
            (C3027 + C3028 + C3029) * C503) *
               C50776 * C50920 +
           ((C3348 + C3347 + C3346) * C507 -
            ((C2178 * C862 + C2173 * C868 + C2177 * C861 + C2172 * C867 +
              C2176 * C860 + C2171 * C866) *
                 C501 +
             (C2178 * C853 + C2173 * C858 + C2177 * C852 + C2172 * C857 +
              C2176 * C851 + C2171 * C856) *
                 C506) +
            (C3351 + C3350 + C3349) * C502 -
            (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
             C2176 * C3323 + C2171 * C3326) *
                C508 -
            (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
             C2176 * C3329 + C2171 * C3332) *
                C503) *
               C50776 * C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50672) *
                C50776 * C50920 +
            ((C5366 + C5367 + C5368) * C121 +
             (C5369 + C5370 + C5371) * C50672) *
                C50776 * C50814) *
               C250 -
           (((C5372 + C5373 + C5374) * C50672 +
             (C5375 + C5376 + C5377) * C121) *
                C50776 * C50814 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50672 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50776 * C50920) *
               C251 +
           (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
              C2178 * C126 + C2173 * C138) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
              C2178 * C137 + C2173 * C147) *
                 C50672) *
                C50776 * C50920 +
            ((C5378 + C5379 + C5380) * C121 +
             (C5381 + C5382 + C5383) * C50672) *
                C50776 * C50814) *
               C252) *
              C50907 +
          ((((C5377 + C5376 + C5375) * C121 +
             (C5374 + C5373 + C5372) * C50672) *
                C50776 * C50920 +
            ((C2176 * C852 + C2171 * C857 + C2177 * C853 + C2172 * C858 +
              C2178 * C854 + C2173 * C859) *
                 C121 +
             (C2176 * C861 + C2171 * C867 + C2177 * C862 + C2172 * C868 +
              C2178 * C863 + C2173 * C869) *
                 C50672) *
                C50776 * C50814) *
               C251 -
           (((C2178 * C862 + C2173 * C868 + C2177 * C861 + C2172 * C867 +
              C2176 * C860 + C2171 * C866) *
                 C50672 +
             (C2178 * C853 + C2173 * C858 + C2177 * C852 + C2172 * C857 +
              C2176 * C851 + C2171 * C856) *
                 C121) *
                C50776 * C50814 +
            ((C5371 + C5370 + C5369) * C50672 +
             (C5368 + C5367 + C5366) * C121) *
                C50776 * C50920) *
               C250 -
           (((C2178 * C864 + C2173 * C870 + C2177 * C863 + C2172 * C869 +
              C2176 * C862 + C2171 * C868) *
                 C50672 +
             (C2178 * C855 + C2173 * C865 + C2177 * C854 + C2172 * C859 +
              C2176 * C853 + C2171 * C858) *
                 C121) *
                C50776 * C50814 +
            ((C5383 + C5382 + C5381) * C50672 +
             (C5380 + C5379 + C5378) * C121) *
                C50776 * C50920) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C7787 +
             (C10761 * C121 + C10762 * C50672) * C7788 +
             (C10763 * C121 + C10764 * C50672) * C7789) *
                C50920 +
            ((C12905 + C12906) * C7787 + (C12879 + C12880) * C7788 +
             (C12881 + C12882) * C7789) *
                C50814) *
               C250 -
           (((C12883 + C12884) * C7789 + (C12885 + C12886) * C7788 +
             (C12907 + C12908) * C7787) *
                C50814 +
            ((C10770 * C50672 + C10769 * C121) * C7789 +
             (C10768 * C50672 + C10767 * C121) * C7788 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C7787) *
                C50920) *
               C251 +
           ((((C10625 * C124 + C50612 * C131) * C121 +
              (C10625 * C135 + C50612 * C145) * C50672) *
                 C7787 +
             (C10773 * C121 + C10774 * C50672) * C7788 +
             (C10775 * C121 + C10776 * C50672) * C7789) *
                C50920 +
            ((C12909 + C12910) * C7787 + (C12895 + C12896) * C7788 +
             (C12897 + C12898) * C7789) *
                C50814) *
               C252) *
              C50907 +
          ((((C12908 + C12907) * C7787 + (C12886 + C12885) * C7788 +
             (C12884 + C12883) * C7789) *
                C50920 +
            (((C10625 * C852 + C50612 * C857) * C121 +
              (C10625 * C861 + C50612 * C867) * C50672) *
                 C7787 +
             ((C10625 * C971 + C50612 * C975) * C121 +
              (C10625 * C979 + C50612 * C983) * C50672) *
                 C7788 +
             ((C10625 * C3322 + C50612 * C3325) * C121 +
              (C10625 * C3328 + C50612 * C3331) * C50672) *
                 C7789) *
                C50814) *
               C251 -
           (((C11404 * C50672 + C11403 * C121) * C7789 +
             (C11402 * C50672 + C11401 * C121) * C7788 +
             ((C10625 * C860 + C50612 * C866) * C50672 +
              (C10625 * C851 + C50612 * C856) * C121) *
                 C7787) *
                C50814 +
            ((C12882 + C12881) * C7789 + (C12880 + C12879) * C7788 +
             (C12906 + C12905) * C7787) *
                C50920) *
               C250 -
           ((((C10625 * C3327 + C50612 * C3330) * C50672 +
              (C10625 * C3321 + C50612 * C3324) * C121) *
                 C7789 +
             ((C10625 * C978 + C50612 * C982) * C50672 +
              (C10625 * C970 + C50612 * C974) * C121) *
                 C7788 +
             ((C10625 * C862 + C50612 * C868) * C50672 +
              (C10625 * C853 + C50612 * C858) * C121) *
                 C7787) *
                C50814 +
            ((C12898 + C12897) * C7789 + (C12896 + C12895) * C7788 +
             (C12910 + C12909) * C7787) *
                C50920) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C7787 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C7788 +
            (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
             C10983 * C508 + C10984 * C503) *
                C7789) *
               C50920 +
           ((C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C7787 +
            (C13307 + C13308 - C13309 - C13310 + C13311 + C13312) * C7788 +
            (C13313 + C13314 - C13315 - C13316 + C13317 + C13318) * C7789) *
               C50814) *
              C50638 * C50907 +
          (((C13303 - (C13302 + C13301) + C13304 - C13305 - C13306) * C7787 +
            (C13309 - (C13308 + C13307) + C13310 - C13311 - C13312) * C7788 +
            (C13315 - (C13314 + C13313) + C13316 - C13317 - C13318) * C7789) *
               C50920 +
           ((C11401 * C507 -
             ((C10625 * C860 + C50612 * C866) * C501 +
              (C10625 * C851 + C50612 * C856) * C506) +
             C11402 * C502 - C11403 * C508 - C11404 * C503) *
                C7787 +
            (C11403 * C507 - (C11402 * C501 + C11401 * C506) + C11404 * C502 -
             C11405 * C508 - C11406 * C503) *
                C7788 +
            (C11405 * C507 - (C11404 * C501 + C11403 * C506) + C11406 * C502 -
             (C10625 * C11384 + C50612 * C11385) * C508 -
             (C10625 * C11386 + C50612 * C11387) * C503) *
                C7789) *
               C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C50776 * C20970 +
            (C12905 + C12906) * C50776 * C20971 + C19090 * C50776 * C20972 +
            (C13799 + C13800) * C50776 * C20973) *
               C250 -
           ((C19113 + C19112) * C50776 * C20973 + C19093 * C50776 * C20972 +
            (C12907 + C12908) * C50776 * C20971 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C50776 * C20970) *
               C251 +
           (((C10625 * C124 + C50612 * C131) * C121 +
             (C10625 * C135 + C50612 * C145) * C50672) *
                C50776 * C20970 +
            (C12909 + C12910) * C50776 * C20971 +
            (C18540 + C18541) * C50776 * C20972 +
            (C21177 + C21178) * C50776 * C20973) *
               C252) *
              C50907 +
          (((C12908 + C12907) * C50776 * C20970 +
            (C13493 + C13494) * C50776 * C20971 +
            (C19112 + C19113) * C50776 * C20972 +
            ((C10625 * C6200 + C50612 * C6206) * C121 +
             (C10625 * C6203 + C50612 * C6209) * C50672) *
                C50776 * C20973) *
               C251 -
           ((C19401 + C19400) * C50776 * C20973 + C19388 * C50776 * C20972 +
            (C13499 + C13500) * C50776 * C20971 +
            (C12906 + C12905) * C50776 * C20970) *
               C250 -
           (((C10625 * C6202 + C50612 * C6208) * C50672 +
             (C10625 * C6199 + C50612 * C6205) * C121) *
                C50776 * C20973 +
            (C21178 + C21177) * C50776 * C20972 +
            (C18541 + C18540) * C50776 * C20971 +
            (C12910 + C12909) * C50776 * C20970) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C506 +
            (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
            C10762 * C502 + C10763 * C508 + C10764 * C503) *
               C50776 * C20970 +
           (C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C50776 *
               C20971 +
           (C18932 + C18933 - C18934 - C18935 + C18936 + C18937) * C50776 *
               C20972 +
           (C21441 + C21442 - C21443 - C21444 + C21445 + C21446) * C50776 *
               C20973) *
              C50638 * C50907 +
          ((C13303 - (C13302 + C13301) + C13304 - C13305 - C13306) * C50776 *
               C20970 +
           (C18934 - (C18933 + C18932) + C18935 - C18936 - C18937) * C50776 *
               C20971 +
           (C21443 - (C21442 + C21441) + C21444 - C21445 - C21446) * C50776 *
               C20972 +
           (C19278 * C507 - (C19398 * C501 + C19397 * C506) + C19279 * C502 -
            (C10625 * C13780 + C50612 * C13783) * C508 -
            (C10625 * C13782 + C50612 * C13786) * C503) *
               C50776 * C20973) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[135] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                      C50933 * C130 + C22852 * C124 + C22847 * C131) *
                         C1174 +
                     (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                      C50933 * C144 + C22852 * C135 + C22847 * C145) *
                         C1169 -
                     (C23036 + C23037 + C23038) * C1175 -
                     (C23039 + C23040 + C23041) * C50688) *
                        C50776 * C32110 +
                    ((C32441 + C32442 + C32443) * C1174 +
                     (C32444 + C32445 + C32446) * C1169 -
                     (C23670 + C23669 + C23668) * C1175 -
                     (C23673 + C23672 + C23671) * C50688) *
                        C50776 * C50814) *
                       C50950 +
                   (((C23042 + C23043 + C23044) * C1175 -
                     ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                       C50933 * C145 + C22850 * C134 + C50949 * C144) *
                          C1169 +
                      (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                       C50933 * C131 + C22850 * C123 + C50949 * C130) *
                          C1174) +
                     (C23045 + C23046 + C23047) * C50688) *
                        C50776 * C32110 +
                    ((C24588 + C24587 + C24586) * C1175 -
                     ((C32447 + C32448 + C32449) * C1169 +
                      (C32450 + C32451 + C32452) * C1174) +
                     (C24591 + C24590 + C24589) * C50688) *
                        C50776 * C50814) *
                       C50936 +
                   (((C22850 * C124 + C50949 * C131 + C22851 * C125 +
                      C50933 * C132 + C22852 * C126 + C22847 * C138) *
                         C1174 +
                     (C22850 * C135 + C50949 * C145 + C22851 * C136 +
                      C50933 * C146 + C22852 * C137 + C22847 * C147) *
                         C1169 -
                     (C23048 + C23049 + C23050) * C1175 -
                     (C23051 + C23052 + C23053) * C50688) *
                        C50776 * C32110 +
                    ((C32453 + C32454 + C32455) * C1174 +
                     (C32456 + C32457 + C32458) * C1169 -
                     (C22852 * C1412 + C22847 * C1413 + C22851 * C721 +
                      C50933 * C729 + C22850 * C720 + C50949 * C728) *
                         C1175 -
                     (C22852 * C1414 + C22847 * C1415 + C22851 * C733 +
                      C50933 * C745 + C22850 * C732 + C50949 * C744) *
                         C50688) *
                        C50776 * C50814) *
                       C1173) *
                  C50702) /
                 (p * q * std::sqrt(p + q));
    d2ee[136] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                      C50933 * C130 + C22852 * C124 + C22847 * C131) *
                         C1279 +
                     (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                      C50933 * C144 + C22852 * C135 + C22847 * C145) *
                         C50951 -
                     (C23036 + C23037 + C23038) * C1280 -
                     (C23039 + C23040 + C23041) * C50939 +
                     (C23370 + C23371 + C23372) * C1281 +
                     (C23373 + C23374 + C23375) * C1276) *
                        C50776 * C32110 +
                    ((C32441 + C32442 + C32443) * C1279 +
                     (C32444 + C32445 + C32446) * C50951 -
                     (C23670 + C23669 + C23668) * C1280 -
                     (C23673 + C23672 + C23671) * C50939 +
                     (C23676 + C23675 + C23674) * C1281 +
                     (C23679 + C23678 + C23677) * C1276) *
                        C50776 * C50814) *
                       C1277 +
                   (((C23042 + C23043 + C23044) * C1280 -
                     ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                       C50933 * C145 + C22850 * C134 + C50949 * C144) *
                          C50951 +
                      (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                       C50933 * C131 + C22850 * C123 + C50949 * C130) *
                          C1279) +
                     (C23045 + C23046 + C23047) * C50939 -
                     (C23376 + C23377 + C23378) * C1281 -
                     (C23379 + C23380 + C23381) * C1276) *
                        C50776 * C32110 +
                    ((C24588 + C24587 + C24586) * C1280 -
                     ((C32447 + C32448 + C32449) * C50951 +
                      (C32450 + C32451 + C32452) * C1279) +
                     (C24591 + C24590 + C24589) * C50939 -
                     (C22852 * C722 + C22847 * C734 + C22851 * C723 +
                      C50933 * C735 + C22850 * C724 + C50949 * C736) *
                         C1281 -
                     (C22852 * C738 + C22847 * C746 + C22851 * C739 +
                      C50933 * C747 + C22850 * C740 + C50949 * C748) *
                         C1276) *
                        C50776 * C50814) *
                       C50643) *
                  C50702) /
                 (p * q * std::sqrt(p + q));
    d2ee[137] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                       C50933 * C130 + C22852 * C124 + C22847 * C131) *
                          C1174 +
                      (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                       C50933 * C144 + C22852 * C135 + C22847 * C145) *
                          C1169 -
                      (C23036 + C23037 + C23038) * C1175 -
                      (C23039 + C23040 + C23041) * C50688) *
                         C50776 * C32110 +
                     ((C32441 + C32442 + C32443) * C1174 +
                      (C32444 + C32445 + C32446) * C1169 -
                      (C23670 + C23669 + C23668) * C1175 -
                      (C23673 + C23672 + C23671) * C50688) *
                         C50776 * C50814) *
                        C1277 +
                    (((C23042 + C23043 + C23044) * C1175 -
                      ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                        C50933 * C145 + C22850 * C134 + C50949 * C144) *
                           C1169 +
                       (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                        C50933 * C131 + C22850 * C123 + C50949 * C130) *
                           C1174) +
                      (C23045 + C23046 + C23047) * C50688) *
                         C50776 * C32110 +
                     ((C24588 + C24587 + C24586) * C1175 -
                      ((C32447 + C32448 + C32449) * C1169 +
                       (C32450 + C32451 + C32452) * C1174) +
                      (C24591 + C24590 + C24589) * C50688) *
                         C50776 * C50814) *
                        C50643) *
                       C50907 +
                   ((((C23668 + C23669 + C23670) * C1175 -
                      ((C32446 + C32445 + C32444) * C1169 +
                       (C32443 + C32442 + C32441) * C1174) +
                      (C23671 + C23672 + C23673) * C50688) *
                         C50776 * C32110 +
                     ((C23986 + C23985 + C23984) * C1175 -
                      ((C33025 + C33026 + C33027) * C1169 +
                       (C33028 + C33029 + C33030) * C1174) +
                      (C23989 + C23988 + C23987) * C50688) *
                         C50776 * C50814) *
                        C1277 +
                    (((C32452 + C32451 + C32450) * C1174 +
                      (C32449 + C32448 + C32447) * C1169 -
                      (C24586 + C24587 + C24588) * C1175 -
                      (C24589 + C24590 + C24591) * C50688) *
                         C50776 * C32110 +
                     ((C33019 + C33020 + C33021) * C1174 +
                      (C33022 + C33023 + C33024) * C1169 -
                      (C22852 * C969 + C22847 * C973 + C22851 * C970 +
                       C50933 * C974 + C22850 * C971 + C50949 * C975) *
                          C1175 -
                      (C22852 * C977 + C22847 * C981 + C22851 * C978 +
                       C50933 * C982 + C22850 * C979 + C50949 * C983) *
                          C50688) *
                         C50776 * C50814) *
                        C50643) *
                       C50714)) /
                 (p * q * std::sqrt(p + q));
    d2ee[138] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                       C50933 * C130 + C22852 * C124 + C22847 * C131) *
                          C1174 +
                      (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                       C50933 * C144 + C22852 * C135 + C22847 * C145) *
                          C1169 -
                      (C23036 + C23037 + C23038) * C1175 -
                      (C23039 + C23040 + C23041) * C50688) *
                         C50776 * C32110 +
                     ((C32441 + C32442 + C32443) * C1174 +
                      (C32444 + C32445 + C32446) * C1169 -
                      (C23670 + C23669 + C23668) * C1175 -
                      (C23673 + C23672 + C23671) * C50688) *
                         C50776 * C50814) *
                        C50898 +
                    (((C23042 + C23043 + C23044) * C1175 -
                      ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                        C50933 * C145 + C22850 * C134 + C50949 * C144) *
                           C1169 +
                       (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                        C50933 * C131 + C22850 * C123 + C50949 * C130) *
                           C1174) +
                      (C23045 + C23046 + C23047) * C50688) *
                         C50776 * C32110 +
                     ((C24588 + C24587 + C24586) * C1175 -
                      ((C32447 + C32448 + C32449) * C1169 +
                       (C32450 + C32451 + C32452) * C1174) +
                      (C24591 + C24590 + C24589) * C50688) *
                         C50776 * C50814) *
                        C50643) *
                       C1514 +
                   ((((C23668 + C23669 + C23670) * C1175 -
                      ((C32446 + C32445 + C32444) * C1169 +
                       (C32443 + C32442 + C32441) * C1174) +
                      (C23671 + C23672 + C23673) * C50688) *
                         C50776 * C32110 +
                     ((C23986 + C23985 + C23984) * C1175 -
                      ((C33025 + C33026 + C33027) * C1169 +
                       (C33028 + C33029 + C33030) * C1174) +
                      (C23989 + C23988 + C23987) * C50688) *
                         C50776 * C50814) *
                        C50898 +
                    (((C32452 + C32451 + C32450) * C1174 +
                      (C32449 + C32448 + C32447) * C1169 -
                      (C24586 + C24587 + C24588) * C1175 -
                      (C24589 + C24590 + C24591) * C50688) *
                         C50776 * C32110 +
                     ((C33019 + C33020 + C33021) * C1174 +
                      (C33022 + C33023 + C33024) * C1169 -
                      (C22852 * C969 + C22847 * C973 + C22851 * C970 +
                       C50933 * C974 + C22850 * C971 + C50949 * C975) *
                          C1175 -
                      (C22852 * C977 + C22847 * C981 + C22851 * C978 +
                       C50933 * C982 + C22850 * C979 + C50949 * C983) *
                          C50688) *
                         C50776 * C50814) *
                        C50643) *
                       C50714)) /
                 (p * q * std::sqrt(p + q));
    d2ee[139] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                      C50933 * C130 + C22852 * C124 + C22847 * C131) *
                         C1279 +
                     (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                      C50933 * C144 + C22852 * C135 + C22847 * C145) *
                         C50951 -
                     (C23036 + C23037 + C23038) * C1280 -
                     (C23039 + C23040 + C23041) * C50939 +
                     (C23370 + C23371 + C23372) * C1281 +
                     (C23373 + C23374 + C23375) * C1276) *
                        C50776 * C32110 +
                    ((C32441 + C32442 + C32443) * C1279 +
                     (C32444 + C32445 + C32446) * C50951 -
                     (C23670 + C23669 + C23668) * C1280 -
                     (C23673 + C23672 + C23671) * C50939 +
                     (C23676 + C23675 + C23674) * C1281 +
                     (C23679 + C23678 + C23677) * C1276) *
                        C50776 * C50814) *
                       C50638 * C1514 +
                   (((C23668 + C23669 + C23670) * C1280 -
                     ((C32446 + C32445 + C32444) * C50951 +
                      (C32443 + C32442 + C32441) * C1279) +
                     (C23671 + C23672 + C23673) * C50939 -
                     (C23674 + C23675 + C23676) * C1281 -
                     (C23677 + C23678 + C23679) * C1276) *
                        C50776 * C32110 +
                    ((C23986 + C23985 + C23984) * C1280 -
                     ((C33025 + C33026 + C33027) * C50951 +
                      (C33028 + C33029 + C33030) * C1279) +
                     (C23989 + C23988 + C23987) * C50939 -
                     (C22852 * C3321 + C22847 * C3324 + C22851 * C3322 +
                      C50933 * C3325 + C22850 * C3323 + C50949 * C3326) *
                         C1281 -
                     (C22852 * C3327 + C22847 * C3330 + C22851 * C3328 +
                      C50933 * C3331 + C22850 * C3329 + C50949 * C3332) *
                         C1276) *
                        C50776 * C50814) *
                       C50638 * C50714)) /
                 (p * q * std::sqrt(p + q));
    d2ee[140] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                      C50933 * C130 + C22852 * C124 + C22847 * C131) *
                         C1174 +
                     (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                      C50933 * C144 + C22852 * C135 + C22847 * C145) *
                         C1169 -
                     (C23036 + C23037 + C23038) * C1175 -
                     (C23039 + C23040 + C23041) * C50688) *
                        C50776 * C32110 +
                    ((C32441 + C32442 + C32443) * C1174 +
                     (C32444 + C32445 + C32446) * C1169 -
                     (C23670 + C23669 + C23668) * C1175 -
                     (C23673 + C23672 + C23671) * C50688) *
                        C50776 * C50814) *
                       C50638 * C50952 +
                   (((C23668 + C23669 + C23670) * C1175 -
                     ((C32446 + C32445 + C32444) * C1169 +
                      (C32443 + C32442 + C32441) * C1174) +
                     (C23671 + C23672 + C23673) * C50688) *
                        C50776 * C32110 +
                    ((C23986 + C23985 + C23984) * C1175 -
                     ((C33025 + C33026 + C33027) * C1169 +
                      (C33028 + C33029 + C33030) * C1174) +
                     (C23989 + C23988 + C23987) * C50688) *
                        C50776 * C50814) *
                       C50638 * C50942 +
                   (((C33030 + C33029 + C33028) * C1174 +
                     (C33027 + C33026 + C33025) * C1169 -
                     (C23984 + C23985 + C23986) * C1175 -
                     (C23987 + C23988 + C23989) * C50688) *
                        C50776 * C32110 +
                    ((C33287 + C33288 + C33289) * C1174 +
                     (C33290 + C33291 + C33292) * C1169 -
                     (C22852 * C3449 + C22847 * C3455 + C22851 * C3450 +
                      C50933 * C3456 + C22850 * C3451 + C50949 * C3457) *
                         C1175 -
                     (C22852 * C3452 + C22847 * C3458 + C22851 * C3453 +
                      C50933 * C3459 + C22850 * C3454 + C50949 * C3460) *
                         C50688) *
                        C50776 * C50814) *
                       C50638 * C1746)) /
                 (p * q * std::sqrt(p + q));
    d2ee[141] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                      C50933 * C130 + C22852 * C124 + C22847 * C131) *
                         C506 +
                     (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                      C50933 * C144 + C22852 * C135 + C22847 * C145) *
                         C501 -
                     (C23036 + C23037 + C23038) * C507 -
                     (C23039 + C23040 + C23041) * C502 +
                     (C23370 + C23371 + C23372) * C508 +
                     (C23373 + C23374 + C23375) * C503) *
                        C50776 * C32110 +
                    ((C32441 + C32442 + C32443) * C506 +
                     (C32444 + C32445 + C32446) * C501 -
                     (C23670 + C23669 + C23668) * C507 -
                     (C23673 + C23672 + C23671) * C502 +
                     (C23676 + C23675 + C23674) * C508 +
                     (C23679 + C23678 + C23677) * C503) *
                        C50776 * C50814) *
                       C50898 +
                   (((C23042 + C23043 + C23044) * C507 -
                     ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                       C50933 * C145 + C22850 * C134 + C50949 * C144) *
                          C501 +
                      (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                       C50933 * C131 + C22850 * C123 + C50949 * C130) *
                          C506) +
                     (C23045 + C23046 + C23047) * C502 -
                     (C23376 + C23377 + C23378) * C508 -
                     (C23379 + C23380 + C23381) * C503) *
                        C50776 * C32110 +
                    ((C24588 + C24587 + C24586) * C507 -
                     ((C32447 + C32448 + C32449) * C501 +
                      (C32450 + C32451 + C32452) * C506) +
                     (C24591 + C24590 + C24589) * C502 -
                     (C22852 * C722 + C22847 * C734 + C22851 * C723 +
                      C50933 * C735 + C22850 * C724 + C50949 * C736) *
                         C508 -
                     (C22852 * C738 + C22847 * C746 + C22851 * C739 +
                      C50933 * C747 + C22850 * C740 + C50949 * C748) *
                         C503) *
                        C50776 * C50814) *
                       C50643) *
                  C50702) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                      C50933 * C130 + C22852 * C124 + C22847 * C131) *
                         C121 +
                     (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                      C50933 * C144 + C22852 * C135 + C22847 * C145) *
                         C50672) *
                        C50776 * C32110 +
                    ((C22850 * C383 + C50949 * C394 + C22851 * C379 +
                      C50933 * C385 + C22852 * C380 + C22847 * C386) *
                         C121 +
                     (C22850 * C393 + C50949 * C401 + C22851 * C389 +
                      C50933 * C397 + C22852 * C390 + C22847 * C398) *
                         C50672) *
                        C50776 * C50814) *
                       C112 -
                   (((C22852 * C391 + C22847 * C399 + C22851 * C390 +
                      C50933 * C398 + C22850 * C389 + C50949 * C397) *
                         C50672 +
                     (C22852 * C381 + C22847 * C387 + C22851 * C380 +
                      C50933 * C386 + C22850 * C379 + C50949 * C385) *
                         C121) *
                        C50776 * C50814 +
                    ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                      C50933 * C145 + C22850 * C134 + C50949 * C144) *
                         C50672 +
                     (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                      C50933 * C131 + C22850 * C123 + C50949 * C130) *
                         C121) *
                        C50776 * C32110) *
                       C113 +
                   (((C22850 * C124 + C50949 * C131 + C22851 * C125 +
                      C50933 * C132 + C22852 * C126 + C22847 * C138) *
                         C121 +
                     (C22850 * C135 + C50949 * C145 + C22851 * C136 +
                      C50933 * C146 + C22852 * C137 + C22847 * C147) *
                         C50672) *
                        C50776 * C32110 +
                    ((C22850 * C380 + C50949 * C386 + C22851 * C381 +
                      C50933 * C387 + C22852 * C382 + C22847 * C388) *
                         C121 +
                     (C22850 * C390 + C50949 * C398 + C22851 * C391 +
                      C50933 * C399 + C22852 * C392 + C22847 * C400) *
                         C50672) *
                        C50776 * C50814) *
                       C114 -
                   (((C22852 * C395 + C22847 * C402 + C22851 * C392 +
                      C50933 * C400 + C22850 * C391 + C50949 * C399) *
                         C50672 +
                     (C22852 * C384 + C22847 * C396 + C22851 * C382 +
                      C50933 * C388 + C22850 * C381 + C50949 * C387) *
                         C121) *
                        C50776 * C50814 +
                    ((C22852 * C140 + C22847 * C148 + C22851 * C137 +
                      C50933 * C147 + C22850 * C136 + C50949 * C146) *
                         C50672 +
                     (C22852 * C127 + C22847 * C139 + C22851 * C126 +
                      C50933 * C138 + C22850 * C125 + C50949 * C132) *
                         C121) *
                        C50776 * C32110) *
                       C115) *
                  C50702) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                       C50933 * C130 + C22852 * C124 + C22847 * C131) *
                          C121 +
                      (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                       C50933 * C144 + C22852 * C135 + C22847 * C145) *
                          C50672) *
                         C50776 * C32110 +
                     ((C32441 + C32442 + C32443) * C121 +
                      (C32444 + C32445 + C32446) * C50672) *
                         C50776 * C50814) *
                        C50898 -
                    (((C32447 + C32448 + C32449) * C50672 +
                      (C32450 + C32451 + C32452) * C121) *
                         C50776 * C50814 +
                     ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                       C50933 * C145 + C22850 * C134 + C50949 * C144) *
                          C50672 +
                      (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                       C50933 * C131 + C22850 * C123 + C50949 * C130) *
                          C121) *
                         C50776 * C32110) *
                        C50643) *
                       C848 +
                   ((((C32452 + C32451 + C32450) * C121 +
                      (C32449 + C32448 + C32447) * C50672) *
                         C50776 * C32110 +
                     ((C33019 + C33020 + C33021) * C121 +
                      (C33022 + C33023 + C33024) * C50672) *
                         C50776 * C50814) *
                        C50643 -
                    (((C33025 + C33026 + C33027) * C50672 +
                      (C33028 + C33029 + C33030) * C121) *
                         C50776 * C50814 +
                     ((C32446 + C32445 + C32444) * C50672 +
                      (C32443 + C32442 + C32441) * C121) *
                         C50776 * C32110) *
                        C50898) *
                       C849 +
                   ((((C33030 + C33029 + C33028) * C121 +
                      (C33027 + C33026 + C33025) * C50672) *
                         C50776 * C32110 +
                     ((C22850 * C1058 + C50949 * C1066 + C22851 * C1057 +
                       C50933 * C1065 + C22852 * C1056 + C22847 * C1064) *
                          C121 +
                      (C22850 * C1062 + C50949 * C1070 + C22851 * C1061 +
                       C50933 * C1069 + C22852 * C1060 + C22847 * C1068) *
                          C50672) *
                         C50776 * C50814) *
                        C50898 -
                    (((C22852 * C1059 + C22847 * C1067 + C22851 * C1060 +
                       C50933 * C1068 + C22850 * C1061 + C50949 * C1069) *
                          C50672 +
                      (C22852 * C1055 + C22847 * C1063 + C22851 * C1056 +
                       C50933 * C1064 + C22850 * C1057 + C50949 * C1065) *
                          C121) *
                         C50776 * C50814 +
                     ((C33024 + C33023 + C33022) * C50672 +
                      (C33021 + C33020 + C33019) * C121) *
                         C50776 * C32110) *
                        C50643) *
                       C850)) /
                     (p * q * std::sqrt(p + q));
    d2ee[142] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                     C50933 * C130 + C22852 * C124 + C22847 * C131) *
                        C600 +
                    (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                     C50933 * C144 + C22852 * C135 + C22847 * C145) *
                        C595 -
                    (C23036 + C23037 + C23038) * C601 -
                    (C23039 + C23040 + C23041) * C596 +
                    (C23370 + C23371 + C23372) * C602 +
                    (C23373 + C23374 + C23375) * C597 -
                    (C23492 + C23493 + C23494) * C603 -
                    (C23495 + C23496 + C23497) * C598) *
                       C50776 * C32110 +
                   ((C32441 + C32442 + C32443) * C600 +
                    (C32444 + C32445 + C32446) * C595 -
                    (C23670 + C23669 + C23668) * C601 -
                    (C23673 + C23672 + C23671) * C596 +
                    (C23676 + C23675 + C23674) * C602 +
                    (C23679 + C23678 + C23677) * C597 -
                    (C22852 * C2981 + C22847 * C2984 + C22851 * C2982 +
                     C50933 * C2985 + C22850 * C2983 + C50949 * C2986) *
                        C603 -
                    (C22852 * C2987 + C22847 * C2990 + C22851 * C2988 +
                     C50933 * C2991 + C22850 * C2989 + C50949 * C2992) *
                        C598) *
                       C50776 * C50814) *
                  C50638 * C50702) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                      C50933 * C130 + C22852 * C124 + C22847 * C131) *
                         C253 +
                     (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                      C50933 * C144 + C22852 * C135 + C22847 * C145) *
                         C50905 -
                     (C23036 + C23037 + C23038) * C254 -
                     (C23039 + C23040 + C23041) * C50688) *
                        C50776 * C32110 +
                    ((C22850 * C383 + C50949 * C394 + C22851 * C379 +
                      C50933 * C385 + C22852 * C380 + C22847 * C386) *
                         C253 +
                     (C22850 * C393 + C50949 * C401 + C22851 * C389 +
                      C50933 * C397 + C22852 * C390 + C22847 * C398) *
                         C50905 -
                     (C23670 + C23669 + C23668) * C254 -
                     (C23673 + C23672 + C23671) * C50688) *
                        C50776 * C50814) *
                       C250 +
                   (((C23042 + C23043 + C23044) * C254 -
                     ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                       C50933 * C145 + C22850 * C134 + C50949 * C144) *
                          C50905 +
                      (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                       C50933 * C131 + C22850 * C123 + C50949 * C130) *
                          C253) +
                     (C23045 + C23046 + C23047) * C50688) *
                        C50776 * C32110 +
                    ((C24588 + C24587 + C24586) * C254 -
                     ((C22852 * C391 + C22847 * C399 + C22851 * C390 +
                       C50933 * C398 + C22850 * C389 + C50949 * C397) *
                          C50905 +
                      (C22852 * C381 + C22847 * C387 + C22851 * C380 +
                       C50933 * C386 + C22850 * C379 + C50949 * C385) *
                          C253) +
                     (C24591 + C24590 + C24589) * C50688) *
                        C50776 * C50814) *
                       C251 +
                   (((C22850 * C124 + C50949 * C131 + C22851 * C125 +
                      C50933 * C132 + C22852 * C126 + C22847 * C138) *
                         C253 +
                     (C22850 * C135 + C50949 * C145 + C22851 * C136 +
                      C50933 * C146 + C22852 * C137 + C22847 * C147) *
                         C50905 -
                     (C23048 + C23049 + C23050) * C254 -
                     (C23051 + C23052 + C23053) * C50688) *
                        C50776 * C32110 +
                    ((C22850 * C380 + C50949 * C386 + C22851 * C381 +
                      C50933 * C387 + C22852 * C382 + C22847 * C388) *
                         C253 +
                     (C22850 * C390 + C50949 * C398 + C22851 * C391 +
                      C50933 * C399 + C22852 * C392 + C22847 * C400) *
                         C50905 -
                     (C22852 * C1412 + C22847 * C1413 + C22851 * C721 +
                      C50933 * C729 + C22850 * C720 + C50949 * C728) *
                         C254 -
                     (C22852 * C1414 + C22847 * C1415 + C22851 * C733 +
                      C50933 * C745 + C22850 * C732 + C50949 * C744) *
                         C50688) *
                        C50776 * C50814) *
                       C252) *
                  C50702) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                      C50933 * C130 + C22852 * C124 + C22847 * C131) *
                         C253 +
                     (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                      C50933 * C144 + C22852 * C135 + C22847 * C145) *
                         C50905 -
                     (C23036 + C23037 + C23038) * C254 -
                     (C23039 + C23040 + C23041) * C50688) *
                        C50776 * C32110 +
                    ((C32441 + C32442 + C32443) * C253 +
                     (C32444 + C32445 + C32446) * C50905 -
                     (C23670 + C23669 + C23668) * C254 -
                     (C23673 + C23672 + C23671) * C50688) *
                        C50776 * C50814) *
                       C50638 * C848 +
                   (((C23668 + C23669 + C23670) * C254 -
                     ((C32446 + C32445 + C32444) * C50905 +
                      (C32443 + C32442 + C32441) * C253) +
                     (C23671 + C23672 + C23673) * C50688) *
                        C50776 * C32110 +
                    ((C23986 + C23985 + C23984) * C254 -
                     ((C33025 + C33026 + C33027) * C50905 +
                      (C33028 + C33029 + C33030) * C253) +
                     (C23989 + C23988 + C23987) * C50688) *
                        C50776 * C50814) *
                       C50638 * C849 +
                   (((C33030 + C33029 + C33028) * C253 +
                     (C33027 + C33026 + C33025) * C50905 -
                     (C23984 + C23985 + C23986) * C254 -
                     (C23987 + C23988 + C23989) * C50688) *
                        C50776 * C32110 +
                    ((C22850 * C1058 + C50949 * C1066 + C22851 * C1057 +
                      C50933 * C1065 + C22852 * C1056 + C22847 * C1064) *
                         C253 +
                     (C22850 * C1062 + C50949 * C1070 + C22851 * C1061 +
                      C50933 * C1069 + C22852 * C1060 + C22847 * C1068) *
                         C50905 -
                     (C22852 * C3449 + C22847 * C3455 + C22851 * C3450 +
                      C50933 * C3456 + C22850 * C3451 + C50949 * C3457) *
                         C254 -
                     (C22852 * C3452 + C22847 * C3458 + C22851 * C3453 +
                      C50933 * C3459 + C22850 * C3454 + C50949 * C3460) *
                         C50688) *
                        C50776 * C50814) *
                       C50638 * C850)) /
                     (p * q * std::sqrt(p + q));
    d2ee[143] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                      C50933 * C130 + C22852 * C124 + C22847 * C131) *
                         C506 +
                     (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                      C50933 * C144 + C22852 * C135 + C22847 * C145) *
                         C501 -
                     (C23036 + C23037 + C23038) * C507 -
                     (C23039 + C23040 + C23041) * C502 +
                     (C23370 + C23371 + C23372) * C508 +
                     (C23373 + C23374 + C23375) * C503) *
                        C50776 * C32110 +
                    ((C32441 + C32442 + C32443) * C506 +
                     (C32444 + C32445 + C32446) * C501 -
                     (C23670 + C23669 + C23668) * C507 -
                     (C23673 + C23672 + C23671) * C502 +
                     (C23676 + C23675 + C23674) * C508 +
                     (C23679 + C23678 + C23677) * C503) *
                        C50776 * C50814) *
                       C50638 * C50907 +
                   (((C23668 + C23669 + C23670) * C507 -
                     ((C32446 + C32445 + C32444) * C501 +
                      (C32443 + C32442 + C32441) * C506) +
                     (C23671 + C23672 + C23673) * C502 -
                     (C23674 + C23675 + C23676) * C508 -
                     (C23677 + C23678 + C23679) * C503) *
                        C50776 * C32110 +
                    ((C23986 + C23985 + C23984) * C507 -
                     ((C22852 * C862 + C22847 * C868 + C22851 * C861 +
                       C50933 * C867 + C22850 * C860 + C50949 * C866) *
                          C501 +
                      (C22852 * C853 + C22847 * C858 + C22851 * C852 +
                       C50933 * C857 + C22850 * C851 + C50949 * C856) *
                          C506) +
                     (C23989 + C23988 + C23987) * C502 -
                     (C22852 * C3321 + C22847 * C3324 + C22851 * C3322 +
                      C50933 * C3325 + C22850 * C3323 + C50949 * C3326) *
                         C508 -
                     (C22852 * C3327 + C22847 * C3330 + C22851 * C3328 +
                      C50933 * C3331 + C22850 * C3329 + C50949 * C3332) *
                         C503) *
                        C50776 * C50814) *
                       C50638 * C50714)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                       C50933 * C130 + C22852 * C124 + C22847 * C131) *
                          C121 +
                      (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                       C50933 * C144 + C22852 * C135 + C22847 * C145) *
                          C50672) *
                         C50776 * C32110 +
                     ((C32441 + C32442 + C32443) * C121 +
                      (C32444 + C32445 + C32446) * C50672) *
                         C50776 * C50814) *
                        C250 -
                    (((C32447 + C32448 + C32449) * C50672 +
                      (C32450 + C32451 + C32452) * C121) *
                         C50776 * C50814 +
                     ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                       C50933 * C145 + C22850 * C134 + C50949 * C144) *
                          C50672 +
                      (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                       C50933 * C131 + C22850 * C123 + C50949 * C130) *
                          C121) *
                         C50776 * C32110) *
                        C251 +
                    (((C22850 * C124 + C50949 * C131 + C22851 * C125 +
                       C50933 * C132 + C22852 * C126 + C22847 * C138) *
                          C121 +
                      (C22850 * C135 + C50949 * C145 + C22851 * C136 +
                       C50933 * C146 + C22852 * C137 + C22847 * C147) *
                          C50672) *
                         C50776 * C32110 +
                     ((C32453 + C32454 + C32455) * C121 +
                      (C32456 + C32457 + C32458) * C50672) *
                         C50776 * C50814) *
                        C252) *
                       C50907 +
                   ((((C32452 + C32451 + C32450) * C121 +
                      (C32449 + C32448 + C32447) * C50672) *
                         C50776 * C32110 +
                     ((C22850 * C852 + C50949 * C857 + C22851 * C853 +
                       C50933 * C858 + C22852 * C854 + C22847 * C859) *
                          C121 +
                      (C22850 * C861 + C50949 * C867 + C22851 * C862 +
                       C50933 * C868 + C22852 * C863 + C22847 * C869) *
                          C50672) *
                         C50776 * C50814) *
                        C251 -
                    (((C22852 * C862 + C22847 * C868 + C22851 * C861 +
                       C50933 * C867 + C22850 * C860 + C50949 * C866) *
                          C50672 +
                      (C22852 * C853 + C22847 * C858 + C22851 * C852 +
                       C50933 * C857 + C22850 * C851 + C50949 * C856) *
                          C121) *
                         C50776 * C50814 +
                     ((C32446 + C32445 + C32444) * C50672 +
                      (C32443 + C32442 + C32441) * C121) *
                         C50776 * C32110) *
                        C250 -
                    (((C22852 * C864 + C22847 * C870 + C22851 * C863 +
                       C50933 * C869 + C22850 * C862 + C50949 * C868) *
                          C50672 +
                      (C22852 * C855 + C22847 * C865 + C22851 * C854 +
                       C50933 * C859 + C22850 * C853 + C50949 * C858) *
                          C121) *
                         C50776 * C50814 +
                     ((C32458 + C32457 + C32456) * C50672 +
                      (C32455 + C32454 + C32453) * C121) *
                         C50776 * C32110) *
                        C252) *
                       C50714)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                      C50933 * C130 + C22852 * C124 + C22847 * C131) *
                         C121 +
                     (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                      C50933 * C144 + C22852 * C135 + C22847 * C145) *
                         C50672) *
                        C50776 * C32110 +
                    ((C32441 + C32442 + C32443) * C121 +
                     (C32444 + C32445 + C32446) * C50672) *
                        C50776 * C50814) *
                       C50638 * C1051 -
                   (((C33025 + C33026 + C33027) * C50672 +
                     (C33028 + C33029 + C33030) * C121) *
                        C50776 * C50814 +
                    ((C32446 + C32445 + C32444) * C50672 +
                     (C32443 + C32442 + C32441) * C121) *
                        C50776 * C32110) *
                       C50638 * C1052 +
                   (((C33030 + C33029 + C33028) * C121 +
                     (C33027 + C33026 + C33025) * C50672) *
                        C50776 * C32110 +
                    ((C33287 + C33288 + C33289) * C121 +
                     (C33290 + C33291 + C33292) * C50672) *
                        C50776 * C50814) *
                       C50638 * C1053 -
                   (((C22852 * C6202 + C22847 * C6208 + C22851 * C6203 +
                      C50933 * C6209 + C22850 * C6204 + C50949 * C6210) *
                         C50672 +
                     (C22852 * C6199 + C22847 * C6205 + C22851 * C6200 +
                      C50933 * C6206 + C22850 * C6201 + C50949 * C6207) *
                         C121) *
                        C50776 * C50814 +
                    ((C33292 + C33291 + C33290) * C50672 +
                     (C33289 + C33288 + C33287) * C121) *
                        C50776 * C32110) *
                       C50638 * C1054)) /
                     (p * q * std::sqrt(p + q));
    d2ee[144] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                       C50933 * C130 + C22852 * C124 + C22847 * C131) *
                          C121 +
                      (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                       C50933 * C144 + C22852 * C135 + C22847 * C145) *
                          C50672) *
                         C50776 * C32110 +
                     ((C32441 + C32442 + C32443) * C121 +
                      (C32444 + C32445 + C32446) * C50672) *
                         C50776 * C50814) *
                        C50950 -
                    (((C32447 + C32448 + C32449) * C50672 +
                      (C32450 + C32451 + C32452) * C121) *
                         C50776 * C50814 +
                     ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                       C50933 * C145 + C22850 * C134 + C50949 * C144) *
                          C50672 +
                      (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                       C50933 * C131 + C22850 * C123 + C50949 * C130) *
                          C121) *
                         C50776 * C32110) *
                        C50936 +
                    (((C22850 * C124 + C50949 * C131 + C22851 * C125 +
                       C50933 * C132 + C22852 * C126 + C22847 * C138) *
                          C121 +
                      (C22850 * C135 + C50949 * C145 + C22851 * C136 +
                       C50933 * C146 + C22852 * C137 + C22847 * C147) *
                          C50672) *
                         C50776 * C32110 +
                     ((C32453 + C32454 + C32455) * C121 +
                      (C32456 + C32457 + C32458) * C50672) *
                         C50776 * C50814) *
                        C1173) *
                       C1514 +
                   ((((C32452 + C32451 + C32450) * C121 +
                      (C32449 + C32448 + C32447) * C50672) *
                         C50776 * C32110 +
                     ((C33019 + C33020 + C33021) * C121 +
                      (C33022 + C33023 + C33024) * C50672) *
                         C50776 * C50814) *
                        C50936 -
                    (((C33025 + C33026 + C33027) * C50672 +
                      (C33028 + C33029 + C33030) * C121) *
                         C50776 * C50814 +
                     ((C32446 + C32445 + C32444) * C50672 +
                      (C32443 + C32442 + C32441) * C121) *
                         C50776 * C32110) *
                        C50950 -
                    (((C22852 * C864 + C22847 * C870 + C22851 * C863 +
                       C50933 * C869 + C22850 * C862 + C50949 * C868) *
                          C50672 +
                      (C22852 * C855 + C22847 * C865 + C22851 * C854 +
                       C50933 * C859 + C22850 * C853 + C50949 * C858) *
                          C121) *
                         C50776 * C50814 +
                     ((C32458 + C32457 + C32456) * C50672 +
                      (C32455 + C32454 + C32453) * C121) *
                         C50776 * C32110) *
                        C1173) *
                       C50714)) /
                 (p * q * std::sqrt(p + q));
    d2ee[145] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                       C50933 * C130 + C22852 * C124 + C22847 * C131) *
                          C253 +
                      (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                       C50933 * C144 + C22852 * C135 + C22847 * C145) *
                          C50905 -
                      (C23036 + C23037 + C23038) * C254 -
                      (C23039 + C23040 + C23041) * C50688) *
                         C50776 * C32110 +
                     ((C32441 + C32442 + C32443) * C253 +
                      (C32444 + C32445 + C32446) * C50905 -
                      (C23670 + C23669 + C23668) * C254 -
                      (C23673 + C23672 + C23671) * C50688) *
                         C50776 * C50814) *
                        C1277 +
                    (((C23042 + C23043 + C23044) * C254 -
                      ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                        C50933 * C145 + C22850 * C134 + C50949 * C144) *
                           C50905 +
                       (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                        C50933 * C131 + C22850 * C123 + C50949 * C130) *
                           C253) +
                      (C23045 + C23046 + C23047) * C50688) *
                         C50776 * C32110 +
                     ((C24588 + C24587 + C24586) * C254 -
                      ((C32447 + C32448 + C32449) * C50905 +
                       (C32450 + C32451 + C32452) * C253) +
                      (C24591 + C24590 + C24589) * C50688) *
                         C50776 * C50814) *
                        C50643) *
                       C1514 +
                   ((((C23668 + C23669 + C23670) * C254 -
                      ((C32446 + C32445 + C32444) * C50905 +
                       (C32443 + C32442 + C32441) * C253) +
                      (C23671 + C23672 + C23673) * C50688) *
                         C50776 * C32110 +
                     ((C23986 + C23985 + C23984) * C254 -
                      ((C33025 + C33026 + C33027) * C50905 +
                       (C33028 + C33029 + C33030) * C253) +
                      (C23989 + C23988 + C23987) * C50688) *
                         C50776 * C50814) *
                        C1277 +
                    (((C32452 + C32451 + C32450) * C253 +
                      (C32449 + C32448 + C32447) * C50905 -
                      (C24586 + C24587 + C24588) * C254 -
                      (C24589 + C24590 + C24591) * C50688) *
                         C50776 * C32110 +
                     ((C33019 + C33020 + C33021) * C253 +
                      (C33022 + C33023 + C33024) * C50905 -
                      (C22852 * C969 + C22847 * C973 + C22851 * C970 +
                       C50933 * C974 + C22850 * C971 + C50949 * C975) *
                          C254 -
                      (C22852 * C977 + C22847 * C981 + C22851 * C978 +
                       C50933 * C982 + C22850 * C979 + C50949 * C983) *
                          C50688) *
                         C50776 * C50814) *
                        C50643) *
                       C50714)) /
                 (p * q * std::sqrt(p + q));
    d2ee[146] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                       C50933 * C130 + C22852 * C124 + C22847 * C131) *
                          C121 +
                      (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                       C50933 * C144 + C22852 * C135 + C22847 * C145) *
                          C50672) *
                         C50776 * C32110 +
                     ((C32441 + C32442 + C32443) * C121 +
                      (C32444 + C32445 + C32446) * C50672) *
                         C50776 * C50814) *
                        C1277 -
                    (((C32447 + C32448 + C32449) * C50672 +
                      (C32450 + C32451 + C32452) * C121) *
                         C50776 * C50814 +
                     ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                       C50933 * C145 + C22850 * C134 + C50949 * C144) *
                          C50672 +
                      (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                       C50933 * C131 + C22850 * C123 + C50949 * C130) *
                          C121) *
                         C50776 * C32110) *
                        C50643) *
                       C50952 +
                   ((((C32452 + C32451 + C32450) * C121 +
                      (C32449 + C32448 + C32447) * C50672) *
                         C50776 * C32110 +
                     ((C33019 + C33020 + C33021) * C121 +
                      (C33022 + C33023 + C33024) * C50672) *
                         C50776 * C50814) *
                        C50643 -
                    (((C33025 + C33026 + C33027) * C50672 +
                      (C33028 + C33029 + C33030) * C121) *
                         C50776 * C50814 +
                     ((C32446 + C32445 + C32444) * C50672 +
                      (C32443 + C32442 + C32441) * C121) *
                         C50776 * C32110) *
                        C1277) *
                       C50942 +
                   ((((C33030 + C33029 + C33028) * C121 +
                      (C33027 + C33026 + C33025) * C50672) *
                         C50776 * C32110 +
                     ((C33287 + C33288 + C33289) * C121 +
                      (C33290 + C33291 + C33292) * C50672) *
                         C50776 * C50814) *
                        C1277 -
                    (((C22852 * C1059 + C22847 * C1067 + C22851 * C1060 +
                       C50933 * C1068 + C22850 * C1061 + C50949 * C1069) *
                          C50672 +
                      (C22852 * C1055 + C22847 * C1063 + C22851 * C1056 +
                       C50933 * C1064 + C22850 * C1057 + C50949 * C1065) *
                          C121) *
                         C50776 * C50814 +
                     ((C33024 + C33023 + C33022) * C50672 +
                      (C33021 + C33020 + C33019) * C121) *
                         C50776 * C32110) *
                        C50643) *
                       C1746)) /
                 (p * q * std::sqrt(p + q));
    d2ee[147] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                      C50933 * C130 + C22852 * C124 + C22847 * C131) *
                         C121 +
                     (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                      C50933 * C144 + C22852 * C135 + C22847 * C145) *
                         C50672) *
                        C50776 * C32110 +
                    ((C22850 * C383 + C50949 * C394 + C22851 * C379 +
                      C50933 * C385 + C22852 * C380 + C22847 * C386) *
                         C121 +
                     (C22850 * C393 + C50949 * C401 + C22851 * C389 +
                      C50933 * C397 + C22852 * C390 + C22847 * C398) *
                         C50672) *
                        C50776 * C50814) *
                       C112 -
                   (((C22852 * C391 + C22847 * C399 + C22851 * C390 +
                      C50933 * C398 + C22850 * C389 + C50949 * C397) *
                         C50672 +
                     (C22852 * C381 + C22847 * C387 + C22851 * C380 +
                      C50933 * C386 + C22850 * C379 + C50949 * C385) *
                         C121) *
                        C50776 * C50814 +
                    ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                      C50933 * C145 + C22850 * C134 + C50949 * C144) *
                         C50672 +
                     (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                      C50933 * C131 + C22850 * C123 + C50949 * C130) *
                         C121) *
                        C50776 * C32110) *
                       C113 +
                   (((C22850 * C124 + C50949 * C131 + C22851 * C125 +
                      C50933 * C132 + C22852 * C126 + C22847 * C138) *
                         C121 +
                     (C22850 * C135 + C50949 * C145 + C22851 * C136 +
                      C50933 * C146 + C22852 * C137 + C22847 * C147) *
                         C50672) *
                        C50776 * C32110 +
                    ((C22850 * C380 + C50949 * C386 + C22851 * C381 +
                      C50933 * C387 + C22852 * C382 + C22847 * C388) *
                         C121 +
                     (C22850 * C390 + C50949 * C398 + C22851 * C391 +
                      C50933 * C399 + C22852 * C392 + C22847 * C400) *
                         C50672) *
                        C50776 * C50814) *
                       C114 -
                   (((C22852 * C395 + C22847 * C402 + C22851 * C392 +
                      C50933 * C400 + C22850 * C391 + C50949 * C399) *
                         C50672 +
                     (C22852 * C384 + C22847 * C396 + C22851 * C382 +
                      C50933 * C388 + C22850 * C381 + C50949 * C387) *
                         C121) *
                        C50776 * C50814 +
                    ((C22852 * C140 + C22847 * C148 + C22851 * C137 +
                      C50933 * C147 + C22850 * C136 + C50949 * C146) *
                         C50672 +
                     (C22852 * C127 + C22847 * C139 + C22851 * C126 +
                      C50933 * C138 + C22850 * C125 + C50949 * C132) *
                         C121) *
                        C50776 * C32110) *
                       C115) *
                  C50702) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                      C50933 * C130 + C22852 * C124 + C22847 * C131) *
                         C506 +
                     (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                      C50933 * C144 + C22852 * C135 + C22847 * C145) *
                         C501 -
                     (C23036 + C23037 + C23038) * C507 -
                     (C23039 + C23040 + C23041) * C502 +
                     (C23370 + C23371 + C23372) * C508 +
                     (C23373 + C23374 + C23375) * C503) *
                        C50776 * C32110 +
                    ((C32441 + C32442 + C32443) * C506 +
                     (C32444 + C32445 + C32446) * C501 -
                     (C23670 + C23669 + C23668) * C507 -
                     (C23673 + C23672 + C23671) * C502 +
                     (C23676 + C23675 + C23674) * C508 +
                     (C23679 + C23678 + C23677) * C503) *
                        C50776 * C50814) *
                       C50898 +
                   (((C23042 + C23043 + C23044) * C507 -
                     ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                       C50933 * C145 + C22850 * C134 + C50949 * C144) *
                          C501 +
                      (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                       C50933 * C131 + C22850 * C123 + C50949 * C130) *
                          C506) +
                     (C23045 + C23046 + C23047) * C502 -
                     (C23376 + C23377 + C23378) * C508 -
                     (C23379 + C23380 + C23381) * C503) *
                        C50776 * C32110 +
                    ((C24588 + C24587 + C24586) * C507 -
                     ((C32447 + C32448 + C32449) * C501 +
                      (C32450 + C32451 + C32452) * C506) +
                     (C24591 + C24590 + C24589) * C502 -
                     (C22852 * C722 + C22847 * C734 + C22851 * C723 +
                      C50933 * C735 + C22850 * C724 + C50949 * C736) *
                         C508 -
                     (C22852 * C738 + C22847 * C746 + C22851 * C739 +
                      C50933 * C747 + C22850 * C740 + C50949 * C748) *
                         C503) *
                        C50776 * C50814) *
                       C50643) *
                  C50702) /
                     (p * q * std::sqrt(p + q));
    d2ee[148] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                      C50933 * C130 + C22852 * C124 + C22847 * C131) *
                         C253 +
                     (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                      C50933 * C144 + C22852 * C135 + C22847 * C145) *
                         C50905 -
                     (C23036 + C23037 + C23038) * C254 -
                     (C23039 + C23040 + C23041) * C50688) *
                        C50776 * C32110 +
                    ((C22850 * C383 + C50949 * C394 + C22851 * C379 +
                      C50933 * C385 + C22852 * C380 + C22847 * C386) *
                         C253 +
                     (C22850 * C393 + C50949 * C401 + C22851 * C389 +
                      C50933 * C397 + C22852 * C390 + C22847 * C398) *
                         C50905 -
                     (C23670 + C23669 + C23668) * C254 -
                     (C23673 + C23672 + C23671) * C50688) *
                        C50776 * C50814) *
                       C250 +
                   (((C23042 + C23043 + C23044) * C254 -
                     ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                       C50933 * C145 + C22850 * C134 + C50949 * C144) *
                          C50905 +
                      (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                       C50933 * C131 + C22850 * C123 + C50949 * C130) *
                          C253) +
                     (C23045 + C23046 + C23047) * C50688) *
                        C50776 * C32110 +
                    ((C24588 + C24587 + C24586) * C254 -
                     ((C22852 * C391 + C22847 * C399 + C22851 * C390 +
                       C50933 * C398 + C22850 * C389 + C50949 * C397) *
                          C50905 +
                      (C22852 * C381 + C22847 * C387 + C22851 * C380 +
                       C50933 * C386 + C22850 * C379 + C50949 * C385) *
                          C253) +
                     (C24591 + C24590 + C24589) * C50688) *
                        C50776 * C50814) *
                       C251 +
                   (((C22850 * C124 + C50949 * C131 + C22851 * C125 +
                      C50933 * C132 + C22852 * C126 + C22847 * C138) *
                         C253 +
                     (C22850 * C135 + C50949 * C145 + C22851 * C136 +
                      C50933 * C146 + C22852 * C137 + C22847 * C147) *
                         C50905 -
                     (C23048 + C23049 + C23050) * C254 -
                     (C23051 + C23052 + C23053) * C50688) *
                        C50776 * C32110 +
                    ((C22850 * C380 + C50949 * C386 + C22851 * C381 +
                      C50933 * C387 + C22852 * C382 + C22847 * C388) *
                         C253 +
                     (C22850 * C390 + C50949 * C398 + C22851 * C391 +
                      C50933 * C399 + C22852 * C392 + C22847 * C400) *
                         C50905 -
                     (C22852 * C1412 + C22847 * C1413 + C22851 * C721 +
                      C50933 * C729 + C22850 * C720 + C50949 * C728) *
                         C254 -
                     (C22852 * C1414 + C22847 * C1415 + C22851 * C733 +
                      C50933 * C745 + C22850 * C732 + C50949 * C744) *
                         C50688) *
                        C50776 * C50814) *
                       C252) *
                  C50702) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                     C50933 * C130 + C22852 * C124 + C22847 * C131) *
                        C600 +
                    (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                     C50933 * C144 + C22852 * C135 + C22847 * C145) *
                        C595 -
                    (C23036 + C23037 + C23038) * C601 -
                    (C23039 + C23040 + C23041) * C596 +
                    (C23370 + C23371 + C23372) * C602 +
                    (C23373 + C23374 + C23375) * C597 -
                    (C23492 + C23493 + C23494) * C603 -
                    (C23495 + C23496 + C23497) * C598) *
                       C50776 * C32110 +
                   ((C32441 + C32442 + C32443) * C600 +
                    (C32444 + C32445 + C32446) * C595 -
                    (C23670 + C23669 + C23668) * C601 -
                    (C23673 + C23672 + C23671) * C596 +
                    (C23676 + C23675 + C23674) * C602 +
                    (C23679 + C23678 + C23677) * C597 -
                    (C22852 * C2981 + C22847 * C2984 + C22851 * C2982 +
                     C50933 * C2985 + C22850 * C2983 + C50949 * C2986) *
                        C603 -
                    (C22852 * C2987 + C22847 * C2990 + C22851 * C2988 +
                     C50933 * C2991 + C22850 * C2989 + C50949 * C2992) *
                        C598) *
                       C50776 * C50814) *
                  C50638 * C50702) /
                     (p * q * std::sqrt(p + q));
    d2ee[149] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                       C50933 * C130 + C22852 * C124 + C22847 * C131) *
                          C121 +
                      (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                       C50933 * C144 + C22852 * C135 + C22847 * C145) *
                          C50672) *
                         C50776 * C32110 +
                     ((C32441 + C32442 + C32443) * C121 +
                      (C32444 + C32445 + C32446) * C50672) *
                         C50776 * C50814) *
                        C250 -
                    (((C32447 + C32448 + C32449) * C50672 +
                      (C32450 + C32451 + C32452) * C121) *
                         C50776 * C50814 +
                     ((C22852 * C136 + C22847 * C146 + C22851 * C135 +
                       C50933 * C145 + C22850 * C134 + C50949 * C144) *
                          C50672 +
                      (C22852 * C125 + C22847 * C132 + C22851 * C124 +
                       C50933 * C131 + C22850 * C123 + C50949 * C130) *
                          C121) *
                         C50776 * C32110) *
                        C251 +
                    (((C22850 * C124 + C50949 * C131 + C22851 * C125 +
                       C50933 * C132 + C22852 * C126 + C22847 * C138) *
                          C121 +
                      (C22850 * C135 + C50949 * C145 + C22851 * C136 +
                       C50933 * C146 + C22852 * C137 + C22847 * C147) *
                          C50672) *
                         C50776 * C32110 +
                     ((C32453 + C32454 + C32455) * C121 +
                      (C32456 + C32457 + C32458) * C50672) *
                         C50776 * C50814) *
                        C252) *
                       C50907 +
                   ((((C32452 + C32451 + C32450) * C121 +
                      (C32449 + C32448 + C32447) * C50672) *
                         C50776 * C32110 +
                     ((C22850 * C852 + C50949 * C857 + C22851 * C853 +
                       C50933 * C858 + C22852 * C854 + C22847 * C859) *
                          C121 +
                      (C22850 * C861 + C50949 * C867 + C22851 * C862 +
                       C50933 * C868 + C22852 * C863 + C22847 * C869) *
                          C50672) *
                         C50776 * C50814) *
                        C251 -
                    (((C22852 * C862 + C22847 * C868 + C22851 * C861 +
                       C50933 * C867 + C22850 * C860 + C50949 * C866) *
                          C50672 +
                      (C22852 * C853 + C22847 * C858 + C22851 * C852 +
                       C50933 * C857 + C22850 * C851 + C50949 * C856) *
                          C121) *
                         C50776 * C50814 +
                     ((C32446 + C32445 + C32444) * C50672 +
                      (C32443 + C32442 + C32441) * C121) *
                         C50776 * C32110) *
                        C250 -
                    (((C22852 * C864 + C22847 * C870 + C22851 * C863 +
                       C50933 * C869 + C22850 * C862 + C50949 * C868) *
                          C50672 +
                      (C22852 * C855 + C22847 * C865 + C22851 * C854 +
                       C50933 * C859 + C22850 * C853 + C50949 * C858) *
                          C121) *
                         C50776 * C50814 +
                     ((C32458 + C32457 + C32456) * C50672 +
                      (C32455 + C32454 + C32453) * C121) *
                         C50776 * C32110) *
                        C252) *
                       C50714)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22850 * C122 + C50949 * C129 + C22851 * C123 +
                      C50933 * C130 + C22852 * C124 + C22847 * C131) *
                         C506 +
                     (C22850 * C133 + C50949 * C143 + C22851 * C134 +
                      C50933 * C144 + C22852 * C135 + C22847 * C145) *
                         C501 -
                     (C23036 + C23037 + C23038) * C507 -
                     (C23039 + C23040 + C23041) * C502 +
                     (C23370 + C23371 + C23372) * C508 +
                     (C23373 + C23374 + C23375) * C503) *
                        C50776 * C32110 +
                    ((C32441 + C32442 + C32443) * C506 +
                     (C32444 + C32445 + C32446) * C501 -
                     (C23670 + C23669 + C23668) * C507 -
                     (C23673 + C23672 + C23671) * C502 +
                     (C23676 + C23675 + C23674) * C508 +
                     (C23679 + C23678 + C23677) * C503) *
                        C50776 * C50814) *
                       C50638 * C50907 +
                   (((C23668 + C23669 + C23670) * C507 -
                     ((C32446 + C32445 + C32444) * C501 +
                      (C32443 + C32442 + C32441) * C506) +
                     (C23671 + C23672 + C23673) * C502 -
                     (C23674 + C23675 + C23676) * C508 -
                     (C23677 + C23678 + C23679) * C503) *
                        C50776 * C32110 +
                    ((C23986 + C23985 + C23984) * C507 -
                     ((C22852 * C862 + C22847 * C868 + C22851 * C861 +
                       C50933 * C867 + C22850 * C860 + C50949 * C866) *
                          C501 +
                      (C22852 * C853 + C22847 * C858 + C22851 * C852 +
                       C50933 * C857 + C22850 * C851 + C50949 * C856) *
                          C506) +
                     (C23989 + C23988 + C23987) * C502 -
                     (C22852 * C3321 + C22847 * C3324 + C22851 * C3322 +
                      C50933 * C3325 + C22850 * C3323 + C50949 * C3326) *
                         C508 -
                     (C22852 * C3327 + C22847 * C3330 + C22851 * C3328 +
                      C50933 * C3331 + C22850 * C3329 + C50949 * C3332) *
                         C503) *
                        C50776 * C50814) *
                       C50638 * C50714)) /
                     (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C1174 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C1169 -
             (C25863 + C25864) * C1175 - (C25865 + C25866) * C50688) *
                C50919 +
            ((C25864 + C25863) * C1174 + (C25866 + C25865) * C1169 -
             (C25867 + C25868) * C1175 - (C25869 + C25870) * C50688) *
                C50790) *
               C32110 +
           (((C28953 + C28954) * C1174 + (C28955 + C28956) * C1169 -
             C29483 * C1175 - C29484 * C50688) *
                C50919 +
            (C29487 * C1174 + C29488 * C1169 - C26501 * C1175 -
             C26502 * C50688) *
                C50790) *
               C50814) *
              C50950 +
          ((((C25871 + C25872) * C1175 -
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C1169 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C1174) +
             (C25873 + C25874) * C50688) *
                C50919 +
            ((C25875 + C25876) * C1175 -
             ((C25874 + C25873) * C1169 + (C25872 + C25871) * C1174) +
             (C25877 + C25878) * C50688) *
                C50790) *
               C32110 +
           ((C30717 * C1175 -
             ((C28957 + C28958) * C1169 + (C28959 + C28960) * C1174) +
             C30718 * C50688) *
                C50919 +
            ((C27424 + C27423) * C1175 - (C30719 * C1169 + C30720 * C1174) +
             (C27426 + C27425) * C50688) *
                C50790) *
               C50814) *
              C50936 +
          ((((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                 C1174 +
             (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                 C1169 -
             (C25879 + C25880) * C1175 - (C25881 + C25882) * C50688) *
                C50919 +
            ((C25880 + C25879) * C1174 + (C25882 + C25881) * C1169 -
             (C25883 + C25884) * C1175 - (C25885 + C25886) * C50688) *
                C50790) *
               C32110 +
           (((C28961 + C28962) * C1174 + (C28963 + C28964) * C1169 -
             (C28731 + C28732) * C1175 - (C28733 + C28734) * C50688) *
                C50919 +
            ((C28732 + C28731) * C1174 + (C28734 + C28733) * C1169 -
             (C25667 * C722 + C50617 * C734 + C25666 * C723 + C25661 * C735) *
                 C1175 -
             (C25667 * C738 + C50617 * C746 + C25666 * C739 + C25661 * C747) *
                 C50688) *
                C50790) *
               C50814) *
              C1173) *
         C50702) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C1279 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50951 -
             (C25863 + C25864) * C1280 - (C25865 + C25866) * C50939 +
             C26179 * C1281 + C26180 * C1276) *
                C50919 +
            ((C25864 + C25863) * C1279 + (C25866 + C25865) * C50951 -
             (C25867 + C25868) * C1280 - (C25869 + C25870) * C50939 +
             (C26199 + C26200) * C1281 + (C26201 + C26202) * C1276) *
                C50790) *
               C32110 +
           (((C28953 + C28954) * C1279 + (C28955 + C28956) * C50951 -
             C29483 * C1280 - C29484 * C50939 + C29485 * C1281 +
             C29486 * C1276) *
                C50919 +
            (C29487 * C1279 + C29488 * C50951 - C26501 * C1280 -
             C26502 * C50939 + (C26498 + C26497) * C1281 +
             (C26500 + C26499) * C1276) *
                C50790) *
               C50814) *
              C1277 +
          ((((C25871 + C25872) * C1280 -
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C50951 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C1279) +
             (C25873 + C25874) * C50939 - C26189 * C1281 - C26190 * C1276) *
                C50919 +
            ((C25875 + C25876) * C1280 -
             ((C25874 + C25873) * C50951 + (C25872 + C25871) * C1279) +
             (C25877 + C25878) * C50939 - (C26203 + C26204) * C1281 -
             (C26205 + C26206) * C1276) *
                C50790) *
               C32110 +
           ((C30717 * C1280 -
             ((C28957 + C28958) * C50951 + (C28959 + C28960) * C1279) +
             C30718 * C50939 - (C27423 + C27424) * C1281 -
             (C27425 + C27426) * C1276) *
                C50919 +
            ((C27424 + C27423) * C1280 - (C30719 * C50951 + C30720 * C1279) +
             (C27426 + C27425) * C50939 -
             (C25667 * C2981 + C50617 * C2984 + C25666 * C2982 +
              C25661 * C2985) *
                 C1281 -
             (C25667 * C2987 + C50617 * C2990 + C25666 * C2988 +
              C25661 * C2991) *
                 C1276) *
                C50790) *
               C50814) *
              C50643) *
         C50702) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                  C1174 +
              (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                  C1169 -
              (C25863 + C25864) * C1175 - (C25865 + C25866) * C50688) *
                 C50919 +
             ((C25864 + C25863) * C1174 + (C25866 + C25865) * C1169 -
              (C25867 + C25868) * C1175 - (C25869 + C25870) * C50688) *
                 C50790) *
                C32110 +
            (((C28953 + C28954) * C1174 + (C28955 + C28956) * C1169 -
              C29483 * C1175 - C29484 * C50688) *
                 C50919 +
             (C29487 * C1174 + C29488 * C1169 - C26501 * C1175 -
              C26502 * C50688) *
                 C50790) *
                C50814) *
               C1277 +
           ((((C25871 + C25872) * C1175 -
              ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                   C1169 +
               (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                   C1174) +
              (C25873 + C25874) * C50688) *
                 C50919 +
             ((C25875 + C25876) * C1175 -
              ((C25874 + C25873) * C1169 + (C25872 + C25871) * C1174) +
              (C25877 + C25878) * C50688) *
                 C50790) *
                C32110 +
            ((C30717 * C1175 -
              ((C28957 + C28958) * C1169 + (C28959 + C28960) * C1174) +
              C30718 * C50688) *
                 C50919 +
             ((C27424 + C27423) * C1175 - (C30719 * C1169 + C30720 * C1174) +
              (C27426 + C27425) * C50688) *
                 C50790) *
                C50814) *
               C50643) *
              C50907 +
          ((((C29487 * C1175 -
              ((C28956 + C28955) * C1169 + (C28954 + C28953) * C1174) +
              C29488 * C50688) *
                 C50919 +
             (C29485 * C1175 - (C29484 * C1169 + C29483 * C1174) +
              C29486 * C50688) *
                 C50790) *
                C32110 +
            ((C29913 * C1175 -
              ((C29715 + C29716) * C1169 + (C29717 + C29718) * C1174) +
              C29914 * C50688) *
                 C50919 +
             ((C26816 + C26815) * C1175 - (C29915 * C1169 + C29916 * C1174) +
              (C26818 + C26817) * C50688) *
                 C50790) *
                C50814) *
               C1277 +
           ((((C28960 + C28959) * C1174 + (C28958 + C28957) * C1169 -
              C30720 * C1175 - C30719 * C50688) *
                 C50919 +
             (C30717 * C1174 + C30718 * C1169 - (C27423 + C27424) * C1175 -
              (C27425 + C27426) * C50688) *
                 C50790) *
                C32110 +
            (((C29707 + C29708) * C1174 + (C29709 + C29710) * C1169 -
              (C29712 + C29711) * C1175 - (C29714 + C29713) * C50688) *
                 C50919 +
             ((C29711 + C29712) * C1174 + (C29713 + C29714) * C1169 -
              (C25667 * C3321 + C50617 * C3324 + C25666 * C3322 +
               C25661 * C3325) *
                  C1175 -
              (C25667 * C3327 + C50617 * C3330 + C25666 * C3328 +
               C25661 * C3331) *
                  C50688) *
                 C50790) *
                C50814) *
               C50643) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                  C1174 +
              (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                  C1169 -
              (C25863 + C25864) * C1175 - (C25865 + C25866) * C50688) *
                 C50919 +
             ((C25864 + C25863) * C1174 + (C25866 + C25865) * C1169 -
              (C25867 + C25868) * C1175 - (C25869 + C25870) * C50688) *
                 C50790) *
                C32110 +
            (((C28953 + C28954) * C1174 + (C28955 + C28956) * C1169 -
              C29483 * C1175 - C29484 * C50688) *
                 C50919 +
             (C29487 * C1174 + C29488 * C1169 - C26501 * C1175 -
              C26502 * C50688) *
                 C50790) *
                C50814) *
               C50898 +
           ((((C25871 + C25872) * C1175 -
              ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                   C1169 +
               (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                   C1174) +
              (C25873 + C25874) * C50688) *
                 C50919 +
             ((C25875 + C25876) * C1175 -
              ((C25874 + C25873) * C1169 + (C25872 + C25871) * C1174) +
              (C25877 + C25878) * C50688) *
                 C50790) *
                C32110 +
            ((C30717 * C1175 -
              ((C28957 + C28958) * C1169 + (C28959 + C28960) * C1174) +
              C30718 * C50688) *
                 C50919 +
             ((C27424 + C27423) * C1175 - (C30719 * C1169 + C30720 * C1174) +
              (C27426 + C27425) * C50688) *
                 C50790) *
                C50814) *
               C50643) *
              C1514 +
          ((((C29487 * C1175 -
              ((C28956 + C28955) * C1169 + (C28954 + C28953) * C1174) +
              C29488 * C50688) *
                 C50919 +
             (C29485 * C1175 - (C29484 * C1169 + C29483 * C1174) +
              C29486 * C50688) *
                 C50790) *
                C32110 +
            ((C29913 * C1175 -
              ((C29715 + C29716) * C1169 + (C29717 + C29718) * C1174) +
              C29914 * C50688) *
                 C50919 +
             ((C26816 + C26815) * C1175 - (C29915 * C1169 + C29916 * C1174) +
              (C26818 + C26817) * C50688) *
                 C50790) *
                C50814) *
               C50898 +
           ((((C28960 + C28959) * C1174 + (C28958 + C28957) * C1169 -
              C30720 * C1175 - C30719 * C50688) *
                 C50919 +
             (C30717 * C1174 + C30718 * C1169 - (C27423 + C27424) * C1175 -
              (C27425 + C27426) * C50688) *
                 C50790) *
                C32110 +
            (((C29707 + C29708) * C1174 + (C29709 + C29710) * C1169 -
              (C29712 + C29711) * C1175 - (C29714 + C29713) * C50688) *
                 C50919 +
             ((C29711 + C29712) * C1174 + (C29713 + C29714) * C1169 -
              (C25667 * C3321 + C50617 * C3324 + C25666 * C3322 +
               C25661 * C3325) *
                  C1175 -
              (C25667 * C3327 + C50617 * C3330 + C25666 * C3328 +
               C25661 * C3331) *
                  C50688) *
                 C50790) *
                C50814) *
               C50643) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C1279 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50951 -
             (C25863 + C25864) * C1280 - (C25865 + C25866) * C50939 +
             C26179 * C1281 + C26180 * C1276) *
                C50919 +
            ((C25864 + C25863) * C1279 + (C25866 + C25865) * C50951 -
             (C25867 + C25868) * C1280 - (C25869 + C25870) * C50939 +
             (C26199 + C26200) * C1281 + (C26201 + C26202) * C1276) *
                C50790) *
               C32110 +
           (((C28953 + C28954) * C1279 + (C28955 + C28956) * C50951 -
             C29483 * C1280 - C29484 * C50939 + C29485 * C1281 +
             C29486 * C1276) *
                C50919 +
            (C29487 * C1279 + C29488 * C50951 - C26501 * C1280 -
             C26502 * C50939 + (C26498 + C26497) * C1281 +
             (C26500 + C26499) * C1276) *
                C50790) *
               C50814) *
              C50638 * C1514 +
          (((C29487 * C1280 -
             ((C28956 + C28955) * C50951 + (C28954 + C28953) * C1279) +
             C29488 * C50939 - C26501 * C1281 - C26502 * C1276) *
                C50919 +
            (C29485 * C1280 - (C29484 * C50951 + C29483 * C1279) +
             C29486 * C50939 - (C26497 + C26498) * C1281 -
             (C26499 + C26500) * C1276) *
                C50790) *
               C32110 +
           ((C29913 * C1280 -
             ((C29715 + C29716) * C50951 + (C29717 + C29718) * C1279) +
             C29914 * C50939 - (C26815 + C26816) * C1281 -
             (C26817 + C26818) * C1276) *
                C50919 +
            ((C26816 + C26815) * C1280 - (C29915 * C50951 + C29916 * C1279) +
             (C26818 + C26817) * C50939 -
             (C25667 * C8934 + C50617 * C8936 + C25666 * C8935 +
              C25661 * C8937) *
                 C1281 -
             (C25667 * C8938 + C50617 * C8940 + C25666 * C8939 +
              C25661 * C8941) *
                 C1276) *
                C50790) *
               C50814) *
              C50638 * C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C1174 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C1169 -
             (C25863 + C25864) * C1175 - (C25865 + C25866) * C50688) *
                C50919 +
            ((C25864 + C25863) * C1174 + (C25866 + C25865) * C1169 -
             (C25867 + C25868) * C1175 - (C25869 + C25870) * C50688) *
                C50790) *
               C32110 +
           (((C28953 + C28954) * C1174 + (C28955 + C28956) * C1169 -
             C29483 * C1175 - C29484 * C50688) *
                C50919 +
            (C29487 * C1174 + C29488 * C1169 - C26501 * C1175 -
             C26502 * C50688) *
                C50790) *
               C50814) *
              C50638 * C50952 +
          (((C29487 * C1175 -
             ((C28956 + C28955) * C1169 + (C28954 + C28953) * C1174) +
             C29488 * C50688) *
                C50919 +
            (C29485 * C1175 - (C29484 * C1169 + C29483 * C1174) +
             C29486 * C50688) *
                C50790) *
               C32110 +
           ((C29913 * C1175 -
             ((C29715 + C29716) * C1169 + (C29717 + C29718) * C1174) +
             C29914 * C50688) *
                C50919 +
            ((C26816 + C26815) * C1175 - (C29915 * C1169 + C29916 * C1174) +
             (C26818 + C26817) * C50688) *
                C50790) *
               C50814) *
              C50638 * C50942 +
          ((((C29718 + C29717) * C1174 + (C29716 + C29715) * C1169 -
             C29916 * C1175 - C29915 * C50688) *
                C50919 +
            (C29913 * C1174 + C29914 * C1169 - (C26815 + C26816) * C1175 -
             (C26817 + C26818) * C50688) *
                C50790) *
               C32110 +
           (((C30067 + C30068) * C1174 + (C30069 + C30070) * C1169 -
             (C29925 + C29926) * C1175 - (C29927 + C29928) * C50688) *
                C50919 +
            ((C29926 + C29925) * C1174 + (C29928 + C29927) * C1169 -
             (C25667 * C9064 + C50617 * C9068 + C25666 * C9065 +
              C25661 * C9069) *
                 C1175 -
             (C25667 * C9066 + C50617 * C9070 + C25666 * C9067 +
              C25661 * C9071) *
                 C50688) *
                C50790) *
               C50814) *
              C50638 * C1746)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C506 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C501 -
             (C25863 + C25864) * C507 - (C25865 + C25866) * C502 +
             C26179 * C508 + C26180 * C503) *
                C50919 +
            ((C25864 + C25863) * C506 + (C25866 + C25865) * C501 -
             (C25867 + C25868) * C507 - (C25869 + C25870) * C502 +
             (C26199 + C26200) * C508 + (C26201 + C26202) * C503) *
                C50790) *
               C32110 +
           (((C28953 + C28954) * C506 + (C28955 + C28956) * C501 -
             C29483 * C507 - C29484 * C502 + C29485 * C508 + C29486 * C503) *
                C50919 +
            (C29487 * C506 + C29488 * C501 - C26501 * C507 - C26502 * C502 +
             (C26498 + C26497) * C508 + (C26500 + C26499) * C503) *
                C50790) *
               C50814) *
              C50898 +
          ((((C25871 + C25872) * C507 -
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C501 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C506) +
             (C25873 + C25874) * C502 - C26189 * C508 - C26190 * C503) *
                C50919 +
            ((C25875 + C25876) * C507 -
             ((C25874 + C25873) * C501 + (C25872 + C25871) * C506) +
             (C25877 + C25878) * C502 - (C26203 + C26204) * C508 -
             (C26205 + C26206) * C503) *
                C50790) *
               C32110 +
           ((C30717 * C507 -
             ((C28957 + C28958) * C501 + (C28959 + C28960) * C506) +
             C30718 * C502 - (C27423 + C27424) * C508 -
             (C27425 + C27426) * C503) *
                C50919 +
            ((C27424 + C27423) * C507 - (C30719 * C501 + C30720 * C506) +
             (C27426 + C27425) * C502 -
             (C25667 * C2981 + C50617 * C2984 + C25666 * C2982 +
              C25661 * C2985) *
                 C508 -
             (C25667 * C2987 + C50617 * C2990 + C25666 * C2988 +
              C25661 * C2991) *
                 C503) *
                C50790) *
               C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C121 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50672) *
                C50919 +
            ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50790) *
               C32110 +
           (((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C50919 +
            (C29487 * C121 + C29488 * C50672) * C50790) *
               C50814) *
              C112 -
          (((C30719 * C50672 + C30720 * C121) * C50790 +
            ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C50919) *
               C50814 +
           (((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50790 +
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50672 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C121) *
                C50919) *
               C32110) *
              C113 +
          ((((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                 C121 +
             (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                 C50672) *
                C50919 +
            ((C25880 + C25879) * C121 + (C25882 + C25881) * C50672) * C50790) *
               C32110 +
           (((C28961 + C28962) * C121 + (C28963 + C28964) * C50672) * C50919 +
            ((C28732 + C28731) * C121 + (C28734 + C28733) * C50672) * C50790) *
               C50814) *
              C114 -
          ((((C25667 * C1414 + C50617 * C1415 + C25666 * C733 + C25661 * C745) *
                 C50672 +
             (C25667 * C1412 + C50617 * C1413 + C25666 * C721 + C25661 * C729) *
                 C121) *
                C50790 +
            ((C25667 * C392 + C50617 * C400 + C25666 * C391 + C25661 * C399) *
                 C50672 +
             (C25667 * C382 + C50617 * C388 + C25666 * C381 + C25661 * C387) *
                 C121) *
                C50919) *
               C50814 +
           (((C25667 * C270 + C50617 * C277 + C25666 * C265 + C25661 * C273) *
                 C50672 +
             (C25667 * C259 + C50617 * C269 + C25666 * C255 + C25661 * C261) *
                 C121) *
                C50790 +
            ((C25667 * C137 + C50617 * C147 + C25666 * C136 + C25661 * C146) *
                 C50672 +
             (C25667 * C126 + C50617 * C138 + C25666 * C125 + C25661 * C132) *
                 C121) *
                C50919) *
               C32110) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                  C121 +
              (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                  C50672) *
                 C50919 +
             ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50790) *
                C32110 +
            (((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C50919 +
             (C29487 * C121 + C29488 * C50672) * C50790) *
                C50814) *
               C50898 -
           (((C30719 * C50672 + C30720 * C121) * C50790 +
             ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C50919) *
                C50814 +
            (((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50790 +
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C50672 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C121) *
                 C50919) *
                C32110) *
               C50643) *
              C848 +
          (((((C28960 + C28959) * C121 + (C28958 + C28957) * C50672) * C50919 +
             (C30717 * C121 + C30718 * C50672) * C50790) *
                C32110 +
            (((C29707 + C29708) * C121 + (C29709 + C29710) * C50672) * C50919 +
             ((C29711 + C29712) * C121 + (C29713 + C29714) * C50672) * C50790) *
                C50814) *
               C50643 -
           (((C29915 * C50672 + C29916 * C121) * C50790 +
             ((C29715 + C29716) * C50672 + (C29717 + C29718) * C121) * C50919) *
                C50814 +
            ((C29484 * C50672 + C29483 * C121) * C50790 +
             ((C28956 + C28955) * C50672 + (C28954 + C28953) * C121) * C50919) *
                C32110) *
               C50898) *
              C849 +
          (((((C29718 + C29717) * C121 + (C29716 + C29715) * C50672) * C50919 +
             (C29913 * C121 + C29914 * C50672) * C50790) *
                C32110 +
            (((C30067 + C30068) * C121 + (C30069 + C30070) * C50672) * C50919 +
             ((C29926 + C29925) * C121 + (C29928 + C29927) * C50672) * C50790) *
                C50814) *
               C50898 -
           ((((C25667 * C3452 + C50617 * C3458 + C25666 * C3453 +
               C25661 * C3459) *
                  C50672 +
              (C25667 * C3449 + C50617 * C3455 + C25666 * C3450 +
               C25661 * C3456) *
                  C121) *
                 C50790 +
             ((C25667 * C1060 + C50617 * C1068 + C25666 * C1061 +
               C25661 * C1069) *
                  C50672 +
              (C25667 * C1056 + C50617 * C1064 + C25666 * C1057 +
               C25661 * C1065) *
                  C121) *
                 C50919) *
                C50814 +
            (((C29714 + C29713) * C50672 + (C29712 + C29711) * C121) * C50790 +
             ((C29710 + C29709) * C50672 + (C29708 + C29707) * C121) * C50919) *
                C32110) *
               C50643) *
              C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C600 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C595 -
            (C25863 + C25864) * C601 - (C25865 + C25866) * C596 +
            C26179 * C602 + C26180 * C597 - C26305 * C603 - C26306 * C598) *
               C50919 +
           ((C25864 + C25863) * C600 + (C25866 + C25865) * C595 -
            (C25867 + C25868) * C601 - (C25869 + C25870) * C596 +
            (C26199 + C26200) * C602 + (C26201 + C26202) * C597 -
            (C26315 + C26316) * C603 - (C26317 + C26318) * C598) *
               C50790) *
              C32110 +
          (((C28953 + C28954) * C600 + (C28955 + C28956) * C595 -
            C29483 * C601 - C29484 * C596 + C29485 * C602 + C29486 * C597 -
            (C26497 + C26498) * C603 - (C26499 + C26500) * C598) *
               C50919 +
           (C29487 * C600 + C29488 * C595 - C26501 * C601 - C26502 * C596 +
            (C26498 + C26497) * C602 + (C26500 + C26499) * C597 -
            (C25667 * C8596 + C50617 * C8598 + C25666 * C8597 +
             C25661 * C8599) *
                C603 -
            (C25667 * C8600 + C50617 * C8602 + C25666 * C8601 +
             C25661 * C8603) *
                C598) *
               C50790) *
              C50814) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C253 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50905 -
             (C25863 + C25864) * C254 - (C25865 + C25866) * C50688) *
                C50919 +
            ((C25864 + C25863) * C253 + (C25866 + C25865) * C50905 -
             (C25867 + C25868) * C254 - (C25869 + C25870) * C50688) *
                C50790) *
               C32110 +
           (((C28953 + C28954) * C253 + (C28955 + C28956) * C50905 -
             C29483 * C254 - C29484 * C50688) *
                C50919 +
            (C29487 * C253 + C29488 * C50905 - C26501 * C254 -
             C26502 * C50688) *
                C50790) *
               C50814) *
              C250 +
          ((((C25871 + C25872) * C254 -
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C50905 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C253) +
             (C25873 + C25874) * C50688) *
                C50919 +
            ((C25875 + C25876) * C254 -
             ((C25874 + C25873) * C50905 + (C25872 + C25871) * C253) +
             (C25877 + C25878) * C50688) *
                C50790) *
               C32110 +
           ((C30717 * C254 -
             ((C28957 + C28958) * C50905 + (C28959 + C28960) * C253) +
             C30718 * C50688) *
                C50919 +
            ((C27424 + C27423) * C254 - (C30719 * C50905 + C30720 * C253) +
             (C27426 + C27425) * C50688) *
                C50790) *
               C50814) *
              C251 +
          ((((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                 C253 +
             (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                 C50905 -
             (C25879 + C25880) * C254 - (C25881 + C25882) * C50688) *
                C50919 +
            ((C25880 + C25879) * C253 + (C25882 + C25881) * C50905 -
             (C25883 + C25884) * C254 - (C25885 + C25886) * C50688) *
                C50790) *
               C32110 +
           (((C28961 + C28962) * C253 + (C28963 + C28964) * C50905 -
             (C28731 + C28732) * C254 - (C28733 + C28734) * C50688) *
                C50919 +
            ((C28732 + C28731) * C253 + (C28734 + C28733) * C50905 -
             (C25667 * C722 + C50617 * C734 + C25666 * C723 + C25661 * C735) *
                 C254 -
             (C25667 * C738 + C50617 * C746 + C25666 * C739 + C25661 * C747) *
                 C50688) *
                C50790) *
               C50814) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C253 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50905 -
             (C25863 + C25864) * C254 - (C25865 + C25866) * C50688) *
                C50919 +
            ((C25864 + C25863) * C253 + (C25866 + C25865) * C50905 -
             (C25867 + C25868) * C254 - (C25869 + C25870) * C50688) *
                C50790) *
               C32110 +
           (((C28953 + C28954) * C253 + (C28955 + C28956) * C50905 -
             C29483 * C254 - C29484 * C50688) *
                C50919 +
            (C29487 * C253 + C29488 * C50905 - C26501 * C254 -
             C26502 * C50688) *
                C50790) *
               C50814) *
              C50638 * C848 +
          (((C29487 * C254 -
             ((C28956 + C28955) * C50905 + (C28954 + C28953) * C253) +
             C29488 * C50688) *
                C50919 +
            (C29485 * C254 - (C29484 * C50905 + C29483 * C253) +
             C29486 * C50688) *
                C50790) *
               C32110 +
           ((C29913 * C254 -
             ((C29715 + C29716) * C50905 + (C29717 + C29718) * C253) +
             C29914 * C50688) *
                C50919 +
            ((C26816 + C26815) * C254 - (C29915 * C50905 + C29916 * C253) +
             (C26818 + C26817) * C50688) *
                C50790) *
               C50814) *
              C50638 * C849 +
          ((((C29718 + C29717) * C253 + (C29716 + C29715) * C50905 -
             C29916 * C254 - C29915 * C50688) *
                C50919 +
            (C29913 * C253 + C29914 * C50905 - (C26815 + C26816) * C254 -
             (C26817 + C26818) * C50688) *
                C50790) *
               C32110 +
           (((C30067 + C30068) * C253 + (C30069 + C30070) * C50905 -
             (C29925 + C29926) * C254 - (C29927 + C29928) * C50688) *
                C50919 +
            ((C29926 + C29925) * C253 + (C29928 + C29927) * C50905 -
             (C25667 * C9064 + C50617 * C9068 + C25666 * C9065 +
              C25661 * C9069) *
                 C254 -
             (C25667 * C9066 + C50617 * C9070 + C25666 * C9067 +
              C25661 * C9071) *
                 C50688) *
                C50790) *
               C50814) *
              C50638 * C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C506 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C501 -
             (C25863 + C25864) * C507 - (C25865 + C25866) * C502 +
             C26179 * C508 + C26180 * C503) *
                C50919 +
            ((C25864 + C25863) * C506 + (C25866 + C25865) * C501 -
             (C25867 + C25868) * C507 - (C25869 + C25870) * C502 +
             (C26199 + C26200) * C508 + (C26201 + C26202) * C503) *
                C50790) *
               C32110 +
           (((C28953 + C28954) * C506 + (C28955 + C28956) * C501 -
             C29483 * C507 - C29484 * C502 + C29485 * C508 + C29486 * C503) *
                C50919 +
            (C29487 * C506 + C29488 * C501 - C26501 * C507 - C26502 * C502 +
             (C26498 + C26497) * C508 + (C26500 + C26499) * C503) *
                C50790) *
               C50814) *
              C50638 * C50907 +
          (((C29487 * C507 -
             ((C28956 + C28955) * C501 + (C28954 + C28953) * C506) +
             C29488 * C502 - C26501 * C508 - C26502 * C503) *
                C50919 +
            (C29485 * C507 - (C29484 * C501 + C29483 * C506) + C29486 * C502 -
             (C26497 + C26498) * C508 - (C26499 + C26500) * C503) *
                C50790) *
               C32110 +
           ((C29913 * C507 -
             ((C29715 + C29716) * C501 + (C29717 + C29718) * C506) +
             C29914 * C502 - (C26815 + C26816) * C508 -
             (C26817 + C26818) * C503) *
                C50919 +
            ((C26816 + C26815) * C507 - (C29915 * C501 + C29916 * C506) +
             (C26818 + C26817) * C502 -
             (C25667 * C8934 + C50617 * C8936 + C25666 * C8935 +
              C25661 * C8937) *
                 C508 -
             (C25667 * C8938 + C50617 * C8940 + C25666 * C8939 +
              C25661 * C8941) *
                 C503) *
                C50790) *
               C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                  C121 +
              (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                  C50672) *
                 C50919 +
             ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50790) *
                C32110 +
            (((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C50919 +
             (C29487 * C121 + C29488 * C50672) * C50790) *
                C50814) *
               C250 -
           (((C30719 * C50672 + C30720 * C121) * C50790 +
             ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C50919) *
                C50814 +
            (((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50790 +
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C50672 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C121) *
                 C50919) *
                C32110) *
               C251 +
           ((((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                  C121 +
              (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                  C50672) *
                 C50919 +
             ((C25880 + C25879) * C121 + (C25882 + C25881) * C50672) * C50790) *
                C32110 +
            (((C28961 + C28962) * C121 + (C28963 + C28964) * C50672) * C50919 +
             ((C28732 + C28731) * C121 + (C28734 + C28733) * C50672) * C50790) *
                C50814) *
               C252) *
              C50907 +
          (((((C28960 + C28959) * C121 + (C28958 + C28957) * C50672) * C50919 +
             (C30717 * C121 + C30718 * C50672) * C50790) *
                C32110 +
            (((C29707 + C29708) * C121 + (C29709 + C29710) * C50672) * C50919 +
             ((C29711 + C29712) * C121 + (C29713 + C29714) * C50672) * C50790) *
                C50814) *
               C251 -
           (((C29915 * C50672 + C29916 * C121) * C50790 +
             ((C29715 + C29716) * C50672 + (C29717 + C29718) * C121) * C50919) *
                C50814 +
            ((C29484 * C50672 + C29483 * C121) * C50790 +
             ((C28956 + C28955) * C50672 + (C28954 + C28953) * C121) * C50919) *
                C32110) *
               C250 -
           ((((C25667 * C977 + C50617 * C981 + C25666 * C978 + C25661 * C982) *
                  C50672 +
              (C25667 * C969 + C50617 * C973 + C25666 * C970 + C25661 * C974) *
                  C121) *
                 C50790 +
             ((C25667 * C863 + C50617 * C869 + C25666 * C862 + C25661 * C868) *
                  C50672 +
              (C25667 * C854 + C50617 * C859 + C25666 * C853 + C25661 * C858) *
                  C121) *
                 C50919) *
                C50814 +
            (((C28733 + C28734) * C50672 + (C28731 + C28732) * C121) * C50790 +
             ((C28964 + C28963) * C50672 + (C28962 + C28961) * C121) * C50919) *
                C32110) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C121 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50672) *
                C50919 +
            ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50790) *
               C32110 +
           (((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C50919 +
            (C29487 * C121 + C29488 * C50672) * C50790) *
               C50814) *
              C50638 * C1051 -
          (((C29915 * C50672 + C29916 * C121) * C50790 +
            ((C29715 + C29716) * C50672 + (C29717 + C29718) * C121) * C50919) *
               C50814 +
           ((C29484 * C50672 + C29483 * C121) * C50790 +
            ((C28956 + C28955) * C50672 + (C28954 + C28953) * C121) * C50919) *
               C32110) *
              C50638 * C1052 +
          ((((C29718 + C29717) * C121 + (C29716 + C29715) * C50672) * C50919 +
            (C29913 * C121 + C29914 * C50672) * C50790) *
               C32110 +
           (((C30067 + C30068) * C121 + (C30069 + C30070) * C50672) * C50919 +
            ((C29926 + C29925) * C121 + (C29928 + C29927) * C50672) * C50790) *
               C50814) *
              C50638 * C1053 -
          ((((C25667 * C16509 + C50617 * C16510 + C25666 * C13784 +
              C25661 * C13787) *
                 C50672 +
             (C25667 * C16507 + C50617 * C16508 + C25666 * C13781 +
              C25661 * C13785) *
                 C121) *
                C50790 +
            ((C25667 * C6203 + C50617 * C6209 + C25666 * C6204 +
              C25661 * C6210) *
                 C50672 +
             (C25667 * C6200 + C50617 * C6206 + C25666 * C6201 +
              C25661 * C6207) *
                 C121) *
                C50919) *
               C50814 +
           (((C29927 + C29928) * C50672 + (C29925 + C29926) * C121) * C50790 +
            ((C30070 + C30069) * C50672 + (C30068 + C30067) * C121) * C50919) *
               C32110) *
              C50638 * C1054)) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                  C121 +
              (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                  C50672) *
                 C50919 +
             ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50790) *
                C32110 +
            (((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C50919 +
             (C29487 * C121 + C29488 * C50672) * C50790) *
                C50814) *
               C50950 -
           (((C30719 * C50672 + C30720 * C121) * C50790 +
             ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C50919) *
                C50814 +
            (((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50790 +
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C50672 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C121) *
                 C50919) *
                C32110) *
               C50936 +
           ((((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                  C121 +
              (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                  C50672) *
                 C50919 +
             ((C25880 + C25879) * C121 + (C25882 + C25881) * C50672) * C50790) *
                C32110 +
            (((C28961 + C28962) * C121 + (C28963 + C28964) * C50672) * C50919 +
             ((C28732 + C28731) * C121 + (C28734 + C28733) * C50672) * C50790) *
                C50814) *
               C1173) *
              C1514 +
          (((((C28960 + C28959) * C121 + (C28958 + C28957) * C50672) * C50919 +
             (C30717 * C121 + C30718 * C50672) * C50790) *
                C32110 +
            (((C29707 + C29708) * C121 + (C29709 + C29710) * C50672) * C50919 +
             ((C29711 + C29712) * C121 + (C29713 + C29714) * C50672) * C50790) *
                C50814) *
               C50936 -
           (((C29915 * C50672 + C29916 * C121) * C50790 +
             ((C29715 + C29716) * C50672 + (C29717 + C29718) * C121) * C50919) *
                C50814 +
            ((C29484 * C50672 + C29483 * C121) * C50790 +
             ((C28956 + C28955) * C50672 + (C28954 + C28953) * C121) * C50919) *
                C32110) *
               C50950 -
           ((((C25667 * C977 + C50617 * C981 + C25666 * C978 + C25661 * C982) *
                  C50672 +
              (C25667 * C969 + C50617 * C973 + C25666 * C970 + C25661 * C974) *
                  C121) *
                 C50790 +
             ((C25667 * C863 + C50617 * C869 + C25666 * C862 + C25661 * C868) *
                  C50672 +
              (C25667 * C854 + C50617 * C859 + C25666 * C853 + C25661 * C858) *
                  C121) *
                 C50919) *
                C50814 +
            (((C28733 + C28734) * C50672 + (C28731 + C28732) * C121) * C50790 +
             ((C28964 + C28963) * C50672 + (C28962 + C28961) * C121) * C50919) *
                C32110) *
               C1173) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                  C253 +
              (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                  C50905 -
              (C25863 + C25864) * C254 - (C25865 + C25866) * C50688) *
                 C50919 +
             ((C25864 + C25863) * C253 + (C25866 + C25865) * C50905 -
              (C25867 + C25868) * C254 - (C25869 + C25870) * C50688) *
                 C50790) *
                C32110 +
            (((C28953 + C28954) * C253 + (C28955 + C28956) * C50905 -
              C29483 * C254 - C29484 * C50688) *
                 C50919 +
             (C29487 * C253 + C29488 * C50905 - C26501 * C254 -
              C26502 * C50688) *
                 C50790) *
                C50814) *
               C1277 +
           ((((C25871 + C25872) * C254 -
              ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                   C50905 +
               (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                   C253) +
              (C25873 + C25874) * C50688) *
                 C50919 +
             ((C25875 + C25876) * C254 -
              ((C25874 + C25873) * C50905 + (C25872 + C25871) * C253) +
              (C25877 + C25878) * C50688) *
                 C50790) *
                C32110 +
            ((C30717 * C254 -
              ((C28957 + C28958) * C50905 + (C28959 + C28960) * C253) +
              C30718 * C50688) *
                 C50919 +
             ((C27424 + C27423) * C254 - (C30719 * C50905 + C30720 * C253) +
              (C27426 + C27425) * C50688) *
                 C50790) *
                C50814) *
               C50643) *
              C1514 +
          ((((C29487 * C254 -
              ((C28956 + C28955) * C50905 + (C28954 + C28953) * C253) +
              C29488 * C50688) *
                 C50919 +
             (C29485 * C254 - (C29484 * C50905 + C29483 * C253) +
              C29486 * C50688) *
                 C50790) *
                C32110 +
            ((C29913 * C254 -
              ((C29715 + C29716) * C50905 + (C29717 + C29718) * C253) +
              C29914 * C50688) *
                 C50919 +
             ((C26816 + C26815) * C254 - (C29915 * C50905 + C29916 * C253) +
              (C26818 + C26817) * C50688) *
                 C50790) *
                C50814) *
               C1277 +
           ((((C28960 + C28959) * C253 + (C28958 + C28957) * C50905 -
              C30720 * C254 - C30719 * C50688) *
                 C50919 +
             (C30717 * C253 + C30718 * C50905 - (C27423 + C27424) * C254 -
              (C27425 + C27426) * C50688) *
                 C50790) *
                C32110 +
            (((C29707 + C29708) * C253 + (C29709 + C29710) * C50905 -
              (C29712 + C29711) * C254 - (C29714 + C29713) * C50688) *
                 C50919 +
             ((C29711 + C29712) * C253 + (C29713 + C29714) * C50905 -
              (C25667 * C3321 + C50617 * C3324 + C25666 * C3322 +
               C25661 * C3325) *
                  C254 -
              (C25667 * C3327 + C50617 * C3330 + C25666 * C3328 +
               C25661 * C3331) *
                  C50688) *
                 C50790) *
                C50814) *
               C50643) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                  C121 +
              (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                  C50672) *
                 C50919 +
             ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50790) *
                C32110 +
            (((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C50919 +
             (C29487 * C121 + C29488 * C50672) * C50790) *
                C50814) *
               C1277 -
           (((C30719 * C50672 + C30720 * C121) * C50790 +
             ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C50919) *
                C50814 +
            (((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50790 +
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C50672 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C121) *
                 C50919) *
                C32110) *
               C50643) *
              C50952 +
          (((((C28960 + C28959) * C121 + (C28958 + C28957) * C50672) * C50919 +
             (C30717 * C121 + C30718 * C50672) * C50790) *
                C32110 +
            (((C29707 + C29708) * C121 + (C29709 + C29710) * C50672) * C50919 +
             ((C29711 + C29712) * C121 + (C29713 + C29714) * C50672) * C50790) *
                C50814) *
               C50643 -
           (((C29915 * C50672 + C29916 * C121) * C50790 +
             ((C29715 + C29716) * C50672 + (C29717 + C29718) * C121) * C50919) *
                C50814 +
            ((C29484 * C50672 + C29483 * C121) * C50790 +
             ((C28956 + C28955) * C50672 + (C28954 + C28953) * C121) * C50919) *
                C32110) *
               C1277) *
              C50942 +
          (((((C29718 + C29717) * C121 + (C29716 + C29715) * C50672) * C50919 +
             (C29913 * C121 + C29914 * C50672) * C50790) *
                C32110 +
            (((C30067 + C30068) * C121 + (C30069 + C30070) * C50672) * C50919 +
             ((C29926 + C29925) * C121 + (C29928 + C29927) * C50672) * C50790) *
                C50814) *
               C1277 -
           ((((C25667 * C3452 + C50617 * C3458 + C25666 * C3453 +
               C25661 * C3459) *
                  C50672 +
              (C25667 * C3449 + C50617 * C3455 + C25666 * C3450 +
               C25661 * C3456) *
                  C121) *
                 C50790 +
             ((C25667 * C1060 + C50617 * C1068 + C25666 * C1061 +
               C25661 * C1069) *
                  C50672 +
              (C25667 * C1056 + C50617 * C1064 + C25666 * C1057 +
               C25661 * C1065) *
                  C121) *
                 C50919) *
                C50814 +
            (((C29714 + C29713) * C50672 + (C29712 + C29711) * C121) * C50790 +
             ((C29710 + C29709) * C50672 + (C29708 + C29707) * C121) * C50919) *
                C32110) *
               C50643) *
              C1746)) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C121 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50672) *
                C50919 +
            ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50790) *
               C32110 +
           (((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C50919 +
            (C29487 * C121 + C29488 * C50672) * C50790) *
               C50814) *
              C112 -
          (((C30719 * C50672 + C30720 * C121) * C50790 +
            ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C50919) *
               C50814 +
           (((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50790 +
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50672 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C121) *
                C50919) *
               C32110) *
              C113 +
          ((((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                 C121 +
             (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                 C50672) *
                C50919 +
            ((C25880 + C25879) * C121 + (C25882 + C25881) * C50672) * C50790) *
               C32110 +
           (((C28961 + C28962) * C121 + (C28963 + C28964) * C50672) * C50919 +
            ((C28732 + C28731) * C121 + (C28734 + C28733) * C50672) * C50790) *
               C50814) *
              C114 -
          ((((C25667 * C1414 + C50617 * C1415 + C25666 * C733 + C25661 * C745) *
                 C50672 +
             (C25667 * C1412 + C50617 * C1413 + C25666 * C721 + C25661 * C729) *
                 C121) *
                C50790 +
            ((C25667 * C392 + C50617 * C400 + C25666 * C391 + C25661 * C399) *
                 C50672 +
             (C25667 * C382 + C50617 * C388 + C25666 * C381 + C25661 * C387) *
                 C121) *
                C50919) *
               C50814 +
           (((C25667 * C270 + C50617 * C277 + C25666 * C265 + C25661 * C273) *
                 C50672 +
             (C25667 * C259 + C50617 * C269 + C25666 * C255 + C25661 * C261) *
                 C121) *
                C50790 +
            ((C25667 * C137 + C50617 * C147 + C25666 * C136 + C25661 * C146) *
                 C50672 +
             (C25667 * C126 + C50617 * C138 + C25666 * C125 + C25661 * C132) *
                 C121) *
                C50919) *
               C32110) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C506 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C501 -
             (C25863 + C25864) * C507 - (C25865 + C25866) * C502 +
             C26179 * C508 + C26180 * C503) *
                C50919 +
            ((C25864 + C25863) * C506 + (C25866 + C25865) * C501 -
             (C25867 + C25868) * C507 - (C25869 + C25870) * C502 +
             (C26199 + C26200) * C508 + (C26201 + C26202) * C503) *
                C50790) *
               C32110 +
           (((C28953 + C28954) * C506 + (C28955 + C28956) * C501 -
             C29483 * C507 - C29484 * C502 + C29485 * C508 + C29486 * C503) *
                C50919 +
            (C29487 * C506 + C29488 * C501 - C26501 * C507 - C26502 * C502 +
             (C26498 + C26497) * C508 + (C26500 + C26499) * C503) *
                C50790) *
               C50814) *
              C50898 +
          ((((C25871 + C25872) * C507 -
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C501 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C506) +
             (C25873 + C25874) * C502 - C26189 * C508 - C26190 * C503) *
                C50919 +
            ((C25875 + C25876) * C507 -
             ((C25874 + C25873) * C501 + (C25872 + C25871) * C506) +
             (C25877 + C25878) * C502 - (C26203 + C26204) * C508 -
             (C26205 + C26206) * C503) *
                C50790) *
               C32110 +
           ((C30717 * C507 -
             ((C28957 + C28958) * C501 + (C28959 + C28960) * C506) +
             C30718 * C502 - (C27423 + C27424) * C508 -
             (C27425 + C27426) * C503) *
                C50919 +
            ((C27424 + C27423) * C507 - (C30719 * C501 + C30720 * C506) +
             (C27426 + C27425) * C502 -
             (C25667 * C2981 + C50617 * C2984 + C25666 * C2982 +
              C25661 * C2985) *
                 C508 -
             (C25667 * C2987 + C50617 * C2990 + C25666 * C2988 +
              C25661 * C2991) *
                 C503) *
                C50790) *
               C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C253 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50905 -
             (C25863 + C25864) * C254 - (C25865 + C25866) * C50688) *
                C50919 +
            ((C25864 + C25863) * C253 + (C25866 + C25865) * C50905 -
             (C25867 + C25868) * C254 - (C25869 + C25870) * C50688) *
                C50790) *
               C32110 +
           (((C28953 + C28954) * C253 + (C28955 + C28956) * C50905 -
             C29483 * C254 - C29484 * C50688) *
                C50919 +
            (C29487 * C253 + C29488 * C50905 - C26501 * C254 -
             C26502 * C50688) *
                C50790) *
               C50814) *
              C250 +
          ((((C25871 + C25872) * C254 -
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C50905 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C253) +
             (C25873 + C25874) * C50688) *
                C50919 +
            ((C25875 + C25876) * C254 -
             ((C25874 + C25873) * C50905 + (C25872 + C25871) * C253) +
             (C25877 + C25878) * C50688) *
                C50790) *
               C32110 +
           ((C30717 * C254 -
             ((C28957 + C28958) * C50905 + (C28959 + C28960) * C253) +
             C30718 * C50688) *
                C50919 +
            ((C27424 + C27423) * C254 - (C30719 * C50905 + C30720 * C253) +
             (C27426 + C27425) * C50688) *
                C50790) *
               C50814) *
              C251 +
          ((((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                 C253 +
             (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                 C50905 -
             (C25879 + C25880) * C254 - (C25881 + C25882) * C50688) *
                C50919 +
            ((C25880 + C25879) * C253 + (C25882 + C25881) * C50905 -
             (C25883 + C25884) * C254 - (C25885 + C25886) * C50688) *
                C50790) *
               C32110 +
           (((C28961 + C28962) * C253 + (C28963 + C28964) * C50905 -
             (C28731 + C28732) * C254 - (C28733 + C28734) * C50688) *
                C50919 +
            ((C28732 + C28731) * C253 + (C28734 + C28733) * C50905 -
             (C25667 * C722 + C50617 * C734 + C25666 * C723 + C25661 * C735) *
                 C254 -
             (C25667 * C738 + C50617 * C746 + C25666 * C739 + C25661 * C747) *
                 C50688) *
                C50790) *
               C50814) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C600 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C595 -
            (C25863 + C25864) * C601 - (C25865 + C25866) * C596 +
            C26179 * C602 + C26180 * C597 - C26305 * C603 - C26306 * C598) *
               C50919 +
           ((C25864 + C25863) * C600 + (C25866 + C25865) * C595 -
            (C25867 + C25868) * C601 - (C25869 + C25870) * C596 +
            (C26199 + C26200) * C602 + (C26201 + C26202) * C597 -
            (C26315 + C26316) * C603 - (C26317 + C26318) * C598) *
               C50790) *
              C32110 +
          (((C28953 + C28954) * C600 + (C28955 + C28956) * C595 -
            C29483 * C601 - C29484 * C596 + C29485 * C602 + C29486 * C597 -
            (C26497 + C26498) * C603 - (C26499 + C26500) * C598) *
               C50919 +
           (C29487 * C600 + C29488 * C595 - C26501 * C601 - C26502 * C596 +
            (C26498 + C26497) * C602 + (C26500 + C26499) * C597 -
            (C25667 * C8596 + C50617 * C8598 + C25666 * C8597 +
             C25661 * C8599) *
                C603 -
            (C25667 * C8600 + C50617 * C8602 + C25666 * C8601 +
             C25661 * C8603) *
                C598) *
               C50790) *
              C50814) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                  C121 +
              (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                  C50672) *
                 C50919 +
             ((C25864 + C25863) * C121 + (C25866 + C25865) * C50672) * C50790) *
                C32110 +
            (((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C50919 +
             (C29487 * C121 + C29488 * C50672) * C50790) *
                C50814) *
               C250 -
           (((C30719 * C50672 + C30720 * C121) * C50790 +
             ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C50919) *
                C50814 +
            (((C25874 + C25873) * C50672 + (C25872 + C25871) * C121) * C50790 +
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C50672 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C121) *
                 C50919) *
                C32110) *
               C251 +
           ((((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                  C121 +
              (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                  C50672) *
                 C50919 +
             ((C25880 + C25879) * C121 + (C25882 + C25881) * C50672) * C50790) *
                C32110 +
            (((C28961 + C28962) * C121 + (C28963 + C28964) * C50672) * C50919 +
             ((C28732 + C28731) * C121 + (C28734 + C28733) * C50672) * C50790) *
                C50814) *
               C252) *
              C50907 +
          (((((C28960 + C28959) * C121 + (C28958 + C28957) * C50672) * C50919 +
             (C30717 * C121 + C30718 * C50672) * C50790) *
                C32110 +
            (((C29707 + C29708) * C121 + (C29709 + C29710) * C50672) * C50919 +
             ((C29711 + C29712) * C121 + (C29713 + C29714) * C50672) * C50790) *
                C50814) *
               C251 -
           (((C29915 * C50672 + C29916 * C121) * C50790 +
             ((C29715 + C29716) * C50672 + (C29717 + C29718) * C121) * C50919) *
                C50814 +
            ((C29484 * C50672 + C29483 * C121) * C50790 +
             ((C28956 + C28955) * C50672 + (C28954 + C28953) * C121) * C50919) *
                C32110) *
               C250 -
           ((((C25667 * C977 + C50617 * C981 + C25666 * C978 + C25661 * C982) *
                  C50672 +
              (C25667 * C969 + C50617 * C973 + C25666 * C970 + C25661 * C974) *
                  C121) *
                 C50790 +
             ((C25667 * C863 + C50617 * C869 + C25666 * C862 + C25661 * C868) *
                  C50672 +
              (C25667 * C854 + C50617 * C859 + C25666 * C853 + C25661 * C858) *
                  C121) *
                 C50919) *
                C50814 +
            (((C28733 + C28734) * C50672 + (C28731 + C28732) * C121) * C50790 +
             ((C28964 + C28963) * C50672 + (C28962 + C28961) * C121) * C50919) *
                C32110) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C506 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C501 -
             (C25863 + C25864) * C507 - (C25865 + C25866) * C502 +
             C26179 * C508 + C26180 * C503) *
                C50919 +
            ((C25864 + C25863) * C506 + (C25866 + C25865) * C501 -
             (C25867 + C25868) * C507 - (C25869 + C25870) * C502 +
             (C26199 + C26200) * C508 + (C26201 + C26202) * C503) *
                C50790) *
               C32110 +
           (((C28953 + C28954) * C506 + (C28955 + C28956) * C501 -
             C29483 * C507 - C29484 * C502 + C29485 * C508 + C29486 * C503) *
                C50919 +
            (C29487 * C506 + C29488 * C501 - C26501 * C507 - C26502 * C502 +
             (C26498 + C26497) * C508 + (C26500 + C26499) * C503) *
                C50790) *
               C50814) *
              C50638 * C50907 +
          (((C29487 * C507 -
             ((C28956 + C28955) * C501 + (C28954 + C28953) * C506) +
             C29488 * C502 - C26501 * C508 - C26502 * C503) *
                C50919 +
            (C29485 * C507 - (C29484 * C501 + C29483 * C506) + C29486 * C502 -
             (C26497 + C26498) * C508 - (C26499 + C26500) * C503) *
                C50790) *
               C32110 +
           ((C29913 * C507 -
             ((C29715 + C29716) * C501 + (C29717 + C29718) * C506) +
             C29914 * C502 - (C26815 + C26816) * C508 -
             (C26817 + C26818) * C503) *
                C50919 +
            ((C26816 + C26815) * C507 - (C29915 * C501 + C29916 * C506) +
             (C26818 + C26817) * C502 -
             (C25667 * C8934 + C50617 * C8936 + C25666 * C8935 +
              C25661 * C8937) *
                 C508 -
             (C25667 * C8938 + C50617 * C8940 + C25666 * C8939 +
              C25661 * C8941) *
                 C503) *
                C50790) *
               C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C1174 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C1169 -
            (C25863 + C25864) * C1175 - (C25865 + C25866) * C50688) *
               C50776 * C50954 +
           ((C28953 + C28954) * C1174 + (C28955 + C28956) * C1169 -
            C29483 * C1175 - C29484 * C50688) *
               C50776 * C50948 +
           (C39184 * C1174 + C39185 * C1169 - C29916 * C1175 -
            C29915 * C50688) *
               C50776 * C38342) *
              C50950 +
          (((C25871 + C25872) * C1175 -
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C1169 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C1174) +
            (C25873 + C25874) * C50688) *
               C50776 * C50954 +
           (C30717 * C1175 -
            ((C28957 + C28958) * C1169 + (C28959 + C28960) * C1174) +
            C30718 * C50688) *
               C50776 * C50948 +
           ((C29711 + C29712) * C1175 - (C39186 * C1169 + C39187 * C1174) +
            (C29713 + C29714) * C50688) *
               C50776 * C38342) *
              C50936 +
          (((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                C1174 +
            (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                C1169 -
            (C25879 + C25880) * C1175 - (C25881 + C25882) * C50688) *
               C50776 * C50954 +
           ((C28961 + C28962) * C1174 + (C28963 + C28964) * C1169 -
            (C28731 + C28732) * C1175 - (C28733 + C28734) * C50688) *
               C50776 * C50948 +
           ((C38644 + C38645) * C1174 + (C38646 + C38647) * C1169 -
            (C25667 * C969 + C50617 * C973 + C25666 * C970 + C25661 * C974) *
                C1175 -
            (C25667 * C977 + C50617 * C981 + C25666 * C978 + C25661 * C982) *
                C50688) *
               C50776 * C38342) *
              C1173) *
         C50702) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C1279 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C50951 -
            (C25863 + C25864) * C1280 - (C25865 + C25866) * C50939 +
            C26179 * C1281 + C26180 * C1276) *
               C50776 * C50954 +
           ((C28953 + C28954) * C1279 + (C28955 + C28956) * C50951 -
            C29483 * C1280 - C29484 * C50939 + C29485 * C1281 +
            C29486 * C1276) *
               C50776 * C50948 +
           (C39184 * C1279 + C39185 * C50951 - C29916 * C1280 -
            C29915 * C50939 + (C26816 + C26815) * C1281 +
            (C26818 + C26817) * C1276) *
               C50776 * C38342) *
              C1277 +
          (((C25871 + C25872) * C1280 -
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50951 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C1279) +
            (C25873 + C25874) * C50939 - C26189 * C1281 - C26190 * C1276) *
               C50776 * C50954 +
           (C30717 * C1280 -
            ((C28957 + C28958) * C50951 + (C28959 + C28960) * C1279) +
            C30718 * C50939 - (C27423 + C27424) * C1281 -
            (C27425 + C27426) * C1276) *
               C50776 * C50948 +
           ((C29711 + C29712) * C1280 - (C39186 * C50951 + C39187 * C1279) +
            (C29713 + C29714) * C50939 -
            (C25667 * C3321 + C50617 * C3324 + C25666 * C3322 +
             C25661 * C3325) *
                C1281 -
            (C25667 * C3327 + C50617 * C3330 + C25666 * C3328 +
             C25661 * C3331) *
                C1276) *
               C50776 * C38342) *
              C50643) *
         C50702) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C1174 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C1169 -
             (C25863 + C25864) * C1175 - (C25865 + C25866) * C50688) *
                C50776 * C50954 +
            ((C28953 + C28954) * C1174 + (C28955 + C28956) * C1169 -
             C29483 * C1175 - C29484 * C50688) *
                C50776 * C50948 +
            (C39184 * C1174 + C39185 * C1169 - C29916 * C1175 -
             C29915 * C50688) *
                C50776 * C38342) *
               C1277 +
           (((C25871 + C25872) * C1175 -
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C1169 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C1174) +
             (C25873 + C25874) * C50688) *
                C50776 * C50954 +
            (C30717 * C1175 -
             ((C28957 + C28958) * C1169 + (C28959 + C28960) * C1174) +
             C30718 * C50688) *
                C50776 * C50948 +
            ((C29711 + C29712) * C1175 - (C39186 * C1169 + C39187 * C1174) +
             (C29713 + C29714) * C50688) *
                C50776 * C38342) *
               C50643) *
              C50907 +
          (((C29487 * C1175 -
             ((C28956 + C28955) * C1169 + (C28954 + C28953) * C1174) +
             C29488 * C50688) *
                C50776 * C50954 +
            (C29913 * C1175 -
             ((C29715 + C29716) * C1169 + (C29717 + C29718) * C1174) +
             C29914 * C50688) *
                C50776 * C50948 +
            ((C29926 + C29925) * C1175 - (C39460 * C1169 + C39461 * C1174) +
             (C29928 + C29927) * C50688) *
                C50776 * C38342) *
               C1277 +
           (((C28960 + C28959) * C1174 + (C28958 + C28957) * C1169 -
             C30720 * C1175 - C30719 * C50688) *
                C50776 * C50954 +
            ((C29707 + C29708) * C1174 + (C29709 + C29710) * C1169 -
             (C29712 + C29711) * C1175 - (C29714 + C29713) * C50688) *
                C50776 * C50948 +
            ((C39200 + C39201) * C1174 + (C39202 + C39203) * C1169 -
             (C25667 * C3449 + C50617 * C3455 + C25666 * C3450 +
              C25661 * C3456) *
                 C1175 -
             (C25667 * C3452 + C50617 * C3458 + C25666 * C3453 +
              C25661 * C3459) *
                 C50688) *
                C50776 * C38342) *
               C50643) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C1174 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C1169 -
             (C25863 + C25864) * C1175 - (C25865 + C25866) * C50688) *
                C50776 * C50954 +
            ((C28953 + C28954) * C1174 + (C28955 + C28956) * C1169 -
             C29483 * C1175 - C29484 * C50688) *
                C50776 * C50948 +
            (C39184 * C1174 + C39185 * C1169 - C29916 * C1175 -
             C29915 * C50688) *
                C50776 * C38342) *
               C50898 +
           (((C25871 + C25872) * C1175 -
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C1169 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C1174) +
             (C25873 + C25874) * C50688) *
                C50776 * C50954 +
            (C30717 * C1175 -
             ((C28957 + C28958) * C1169 + (C28959 + C28960) * C1174) +
             C30718 * C50688) *
                C50776 * C50948 +
            ((C29711 + C29712) * C1175 - (C39186 * C1169 + C39187 * C1174) +
             (C29713 + C29714) * C50688) *
                C50776 * C38342) *
               C50643) *
              C1514 +
          (((C29487 * C1175 -
             ((C28956 + C28955) * C1169 + (C28954 + C28953) * C1174) +
             C29488 * C50688) *
                C50776 * C50954 +
            (C29913 * C1175 -
             ((C29715 + C29716) * C1169 + (C29717 + C29718) * C1174) +
             C29914 * C50688) *
                C50776 * C50948 +
            ((C29926 + C29925) * C1175 - (C39460 * C1169 + C39461 * C1174) +
             (C29928 + C29927) * C50688) *
                C50776 * C38342) *
               C50898 +
           (((C28960 + C28959) * C1174 + (C28958 + C28957) * C1169 -
             C30720 * C1175 - C30719 * C50688) *
                C50776 * C50954 +
            ((C29707 + C29708) * C1174 + (C29709 + C29710) * C1169 -
             (C29712 + C29711) * C1175 - (C29714 + C29713) * C50688) *
                C50776 * C50948 +
            ((C39200 + C39201) * C1174 + (C39202 + C39203) * C1169 -
             (C25667 * C3449 + C50617 * C3455 + C25666 * C3450 +
              C25661 * C3456) *
                 C1175 -
             (C25667 * C3452 + C50617 * C3458 + C25666 * C3453 +
              C25661 * C3459) *
                 C50688) *
                C50776 * C38342) *
               C50643) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C1279 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C50951 -
            (C25863 + C25864) * C1280 - (C25865 + C25866) * C50939 +
            C26179 * C1281 + C26180 * C1276) *
               C50776 * C50954 +
           ((C28953 + C28954) * C1279 + (C28955 + C28956) * C50951 -
            C29483 * C1280 - C29484 * C50939 + C29485 * C1281 +
            C29486 * C1276) *
               C50776 * C50948 +
           (C39184 * C1279 + C39185 * C50951 - C29916 * C1280 -
            C29915 * C50939 + (C26816 + C26815) * C1281 +
            (C26818 + C26817) * C1276) *
               C50776 * C38342) *
              C50638 * C1514 +
          ((C29487 * C1280 -
            ((C28956 + C28955) * C50951 + (C28954 + C28953) * C1279) +
            C29488 * C50939 - C26501 * C1281 - C26502 * C1276) *
               C50776 * C50954 +
           (C29913 * C1280 -
            ((C29715 + C29716) * C50951 + (C29717 + C29718) * C1279) +
            C29914 * C50939 - (C26815 + C26816) * C1281 -
            (C26817 + C26818) * C1276) *
               C50776 * C50948 +
           ((C29926 + C29925) * C1280 - (C39460 * C50951 + C39461 * C1279) +
            (C29928 + C29927) * C50939 -
            (C25667 * C9064 + C50617 * C9068 + C25666 * C9065 +
             C25661 * C9069) *
                C1281 -
            (C25667 * C9066 + C50617 * C9070 + C25666 * C9067 +
             C25661 * C9071) *
                C1276) *
               C50776 * C38342) *
              C50638 * C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C1174 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C1169 -
            (C25863 + C25864) * C1175 - (C25865 + C25866) * C50688) *
               C50776 * C50954 +
           ((C28953 + C28954) * C1174 + (C28955 + C28956) * C1169 -
            C29483 * C1175 - C29484 * C50688) *
               C50776 * C50948 +
           C40943 * C38342) *
              C50638 * C50952 +
          ((C29487 * C1175 -
            ((C28956 + C28955) * C1169 + (C28954 + C28953) * C1174) +
            C29488 * C50688) *
               C50776 * C50954 +
           (C29913 * C1175 -
            ((C29715 + C29716) * C1169 + (C29717 + C29718) * C1174) +
            C29914 * C50688) *
               C50776 * C50948 +
           ((C29926 + C29925) * C1175 - (C39460 * C1169 + C39461 * C1174) +
            (C29928 + C29927) * C50688) *
               C50776 * C38342) *
              C50638 * C50942 +
          (C40943 * C50954 +
           ((C30067 + C30068) * C1174 + (C30069 + C30070) * C1169 -
            (C29925 + C29926) * C1175 - (C29927 + C29928) * C50688) *
               C50776 * C50948 +
           ((C39472 + C39473) * C1174 + (C39474 + C39475) * C1169 -
            (C25667 * C16507 + C50617 * C16508 + C25666 * C13781 +
             C25661 * C13785) *
                C1175 -
            (C25667 * C16509 + C50617 * C16510 + C25666 * C13784 +
             C25661 * C13787) *
                C50688) *
               C50776 * C38342) *
              C50638 * C1746)) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C506 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C501 -
            (C25863 + C25864) * C507 - (C25865 + C25866) * C502 +
            C26179 * C508 + C26180 * C503) *
               C50776 * C50954 +
           ((C28953 + C28954) * C506 + (C28955 + C28956) * C501 -
            C29483 * C507 - C29484 * C502 + C29485 * C508 + C29486 * C503) *
               C50776 * C50948 +
           ((C29718 + C29717) * C506 + (C29716 + C29715) * C501 -
            C29916 * C507 - C29915 * C502 + (C26816 + C26815) * C508 +
            (C26818 + C26817) * C503) *
               C50776 * C38342) *
              C50898 +
          (((C25871 + C25872) * C507 -
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C501 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C506) +
            (C25873 + C25874) * C502 - C26189 * C508 - C26190 * C503) *
               C50776 * C50954 +
           (C30717 * C507 -
            ((C28957 + C28958) * C501 + (C28959 + C28960) * C506) +
            C30718 * C502 - (C27423 + C27424) * C508 -
            (C27425 + C27426) * C503) *
               C50776 * C50948 +
           ((C29711 + C29712) * C507 -
            ((C29710 + C29709) * C501 + (C29708 + C29707) * C506) +
            (C29713 + C29714) * C502 -
            (C25667 * C3321 + C50617 * C3324 + C25666 * C3322 +
             C25661 * C3325) *
                C508 -
            (C25667 * C3327 + C50617 * C3330 + C25666 * C3328 +
             C25661 * C3331) *
                C503) *
               C50776 * C38342) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C121 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C50672) *
               C50776 * C50954 +
           ((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C50776 *
               C50948 +
           ((C29718 + C29717) * C121 + (C29716 + C29715) * C50672) * C50776 *
               C38342) *
              C112 -
          (((C29710 + C29709) * C50672 + (C29708 + C29707) * C121) * C50776 *
               C38342 +
           ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C50776 *
               C50948 +
           ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                C50672 +
            (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                C121) *
               C50776 * C50954) *
              C113 +
          (((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                C121 +
            (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                C50672) *
               C50776 * C50954 +
           ((C28961 + C28962) * C121 + (C28963 + C28964) * C50672) * C50776 *
               C50948 +
           ((C25666 * C853 + C25661 * C858 + C25667 * C854 + C50617 * C859) *
                C121 +
            (C25666 * C862 + C25661 * C868 + C25667 * C863 + C50617 * C869) *
                C50672) *
               C50776 * C38342) *
              C114 -
          (((C25667 * C864 + C50617 * C870 + C25666 * C863 + C25661 * C869) *
                C50672 +
            (C25667 * C855 + C50617 * C865 + C25666 * C854 + C25661 * C859) *
                C121) *
               C50776 * C38342 +
           ((C25667 * C392 + C50617 * C400 + C25666 * C391 + C25661 * C399) *
                C50672 +
            (C25667 * C382 + C50617 * C388 + C25666 * C381 + C25661 * C387) *
                C121) *
               C50776 * C50948 +
           ((C25667 * C137 + C50617 * C147 + C25666 * C136 + C25661 * C146) *
                C50672 +
            (C25667 * C126 + C50617 * C138 + C25666 * C125 + C25661 * C132) *
                C121) *
               C50776 * C50954) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C121 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50672) *
                C50776 * C50954 +
            ((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C50776 *
                C50948 +
            C39206 * C38342) *
               C50898 -
           (C39207 * C38342 +
            ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C50776 *
                C50948 +
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50672 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C121) *
                C50776 * C50954) *
               C50643) *
              C848 +
          ((((C28960 + C28959) * C121 + (C28958 + C28957) * C50672) * C50776 *
                C50954 +
            ((C29707 + C29708) * C121 + (C29709 + C29710) * C50672) * C50776 *
                C50948 +
            ((C39200 + C39201) * C121 + (C39202 + C39203) * C50672) * C50776 *
                C38342) *
               C50643 -
           (((C30070 + C30069) * C50672 + (C30068 + C30067) * C121) * C50776 *
                C38342 +
            ((C29715 + C29716) * C50672 + (C29717 + C29718) * C121) * C50776 *
                C50948 +
            ((C28956 + C28955) * C50672 + (C28954 + C28953) * C121) * C50776 *
                C50954) *
               C50898) *
              C849 +
          ((C39206 * C50954 +
            ((C30067 + C30068) * C121 + (C30069 + C30070) * C50672) * C50776 *
                C50948 +
            ((C25666 * C6201 + C25661 * C6207 + C25667 * C6200 +
              C50617 * C6206) *
                 C121 +
             (C25666 * C6204 + C25661 * C6210 + C25667 * C6203 +
              C50617 * C6209) *
                 C50672) *
                C50776 * C38342) *
               C50898 -
           (((C25667 * C6202 + C50617 * C6208 + C25666 * C6203 +
              C25661 * C6209) *
                 C50672 +
             (C25667 * C6199 + C50617 * C6205 + C25666 * C6200 +
              C25661 * C6206) *
                 C121) *
                C50776 * C38342 +
            ((C39203 + C39202) * C50672 + (C39201 + C39200) * C121) * C50776 *
                C50948 +
            C39207 * C50954) *
               C50643) *
              C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
               C600 +
           (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
               C595 -
           (C25863 + C25864) * C601 - (C25865 + C25866) * C596 + C26179 * C602 +
           C26180 * C597 - C26305 * C603 - C26306 * C598) *
              C50776 * C50954 +
          ((C28953 + C28954) * C600 + (C28955 + C28956) * C595 - C29483 * C601 -
           C29484 * C596 + C29485 * C602 + C29486 * C597 -
           (C26497 + C26498) * C603 - (C26499 + C26500) * C598) *
              C50776 * C50948 +
          ((C29718 + C29717) * C600 + (C29716 + C29715) * C595 - C29916 * C601 -
           C29915 * C596 + (C26816 + C26815) * C602 + (C26818 + C26817) * C597 -
           (C25667 * C8934 + C50617 * C8936 + C25666 * C8935 + C25661 * C8937) *
               C603 -
           (C25667 * C8938 + C50617 * C8940 + C25666 * C8939 + C25661 * C8941) *
               C598) *
              C50776 * C38342) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C253 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C50905 -
            (C25863 + C25864) * C254 - (C25865 + C25866) * C50688) *
               C50776 * C50954 +
           ((C28953 + C28954) * C253 + (C28955 + C28956) * C50905 -
            C29483 * C254 - C29484 * C50688) *
               C50776 * C50948 +
           ((C29718 + C29717) * C253 + (C29716 + C29715) * C50905 -
            C29916 * C254 - C29915 * C50688) *
               C50776 * C38342) *
              C250 +
          (((C25871 + C25872) * C254 -
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50905 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C253) +
            (C25873 + C25874) * C50688) *
               C50776 * C50954 +
           (C30717 * C254 -
            ((C28957 + C28958) * C50905 + (C28959 + C28960) * C253) +
            C30718 * C50688) *
               C50776 * C50948 +
           ((C29711 + C29712) * C254 -
            ((C29710 + C29709) * C50905 + (C29708 + C29707) * C253) +
            (C29713 + C29714) * C50688) *
               C50776 * C38342) *
              C251 +
          (((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                C253 +
            (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                C50905 -
            (C25879 + C25880) * C254 - (C25881 + C25882) * C50688) *
               C50776 * C50954 +
           ((C28961 + C28962) * C253 + (C28963 + C28964) * C50905 -
            (C28731 + C28732) * C254 - (C28733 + C28734) * C50688) *
               C50776 * C50948 +
           ((C25666 * C853 + C25661 * C858 + C25667 * C854 + C50617 * C859) *
                C253 +
            (C25666 * C862 + C25661 * C868 + C25667 * C863 + C50617 * C869) *
                C50905 -
            (C25667 * C969 + C50617 * C973 + C25666 * C970 + C25661 * C974) *
                C254 -
            (C25667 * C977 + C50617 * C981 + C25666 * C978 + C25661 * C982) *
                C50688) *
               C50776 * C38342) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C253 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C50905 -
            (C25863 + C25864) * C254 - (C25865 + C25866) * C50688) *
               C50776 * C50954 +
           ((C28953 + C28954) * C253 + (C28955 + C28956) * C50905 -
            C29483 * C254 - C29484 * C50688) *
               C50776 * C50948 +
           C39361 * C38342) *
              C50638 * C848 +
          ((C29487 * C254 -
            ((C28956 + C28955) * C50905 + (C28954 + C28953) * C253) +
            C29488 * C50688) *
               C50776 * C50954 +
           (C29913 * C254 -
            ((C29715 + C29716) * C50905 + (C29717 + C29718) * C253) +
            C29914 * C50688) *
               C50776 * C50948 +
           ((C29926 + C29925) * C254 -
            ((C30070 + C30069) * C50905 + (C30068 + C30067) * C253) +
            (C29928 + C29927) * C50688) *
               C50776 * C38342) *
              C50638 * C849 +
          (C39361 * C50954 +
           ((C30067 + C30068) * C253 + (C30069 + C30070) * C50905 -
            (C29925 + C29926) * C254 - (C29927 + C29928) * C50688) *
               C50776 * C50948 +
           ((C25666 * C6201 + C25661 * C6207 + C25667 * C6200 +
             C50617 * C6206) *
                C253 +
            (C25666 * C6204 + C25661 * C6210 + C25667 * C6203 +
             C50617 * C6209) *
                C50905 -
            (C25667 * C16507 + C50617 * C16508 + C25666 * C13781 +
             C25661 * C13785) *
                C254 -
            (C25667 * C16509 + C50617 * C16510 + C25666 * C13784 +
             C25661 * C13787) *
                C50688) *
               C50776 * C38342) *
              C50638 * C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C506 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C501 -
            (C25863 + C25864) * C507 - (C25865 + C25866) * C502 +
            C26179 * C508 + C26180 * C503) *
               C50776 * C50954 +
           ((C28953 + C28954) * C506 + (C28955 + C28956) * C501 -
            C29483 * C507 - C29484 * C502 + C29485 * C508 + C29486 * C503) *
               C50776 * C50948 +
           ((C29718 + C29717) * C506 + (C29716 + C29715) * C501 -
            C29916 * C507 - C29915 * C502 + (C26816 + C26815) * C508 +
            (C26818 + C26817) * C503) *
               C50776 * C38342) *
              C50638 * C50907 +
          ((C29487 * C507 -
            ((C28956 + C28955) * C501 + (C28954 + C28953) * C506) +
            C29488 * C502 - C26501 * C508 - C26502 * C503) *
               C50776 * C50954 +
           (C29913 * C507 -
            ((C29715 + C29716) * C501 + (C29717 + C29718) * C506) +
            C29914 * C502 - (C26815 + C26816) * C508 -
            (C26817 + C26818) * C503) *
               C50776 * C50948 +
           ((C29926 + C29925) * C507 -
            ((C30070 + C30069) * C501 + (C30068 + C30067) * C506) +
            (C29928 + C29927) * C502 -
            (C25667 * C9064 + C50617 * C9068 + C25666 * C9065 +
             C25661 * C9069) *
                C508 -
            (C25667 * C9066 + C50617 * C9070 + C25666 * C9067 +
             C25661 * C9071) *
                C503) *
               C50776 * C38342) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C121 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50672) *
                C50776 * C50954 +
            ((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C50776 *
                C50948 +
            ((C29718 + C29717) * C121 + (C29716 + C29715) * C50672) * C50776 *
                C38342) *
               C250 -
           (((C29710 + C29709) * C50672 + (C29708 + C29707) * C121) * C50776 *
                C38342 +
            ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C50776 *
                C50948 +
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50672 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C121) *
                C50776 * C50954) *
               C251 +
           (((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                 C121 +
             (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                 C50672) *
                C50776 * C50954 +
            ((C28961 + C28962) * C121 + (C28963 + C28964) * C50672) * C50776 *
                C50948 +
            ((C38644 + C38645) * C121 + (C38646 + C38647) * C50672) * C50776 *
                C38342) *
               C252) *
              C50907 +
          ((((C28960 + C28959) * C121 + (C28958 + C28957) * C50672) * C50776 *
                C50954 +
            ((C29707 + C29708) * C121 + (C29709 + C29710) * C50672) * C50776 *
                C50948 +
            ((C25666 * C1057 + C25661 * C1065 + C25667 * C1056 +
              C50617 * C1064) *
                 C121 +
             (C25666 * C1061 + C25661 * C1069 + C25667 * C1060 +
              C50617 * C1068) *
                 C50672) *
                C50776 * C38342) *
               C251 -
           (((C30070 + C30069) * C50672 + (C30068 + C30067) * C121) * C50776 *
                C38342 +
            ((C29715 + C29716) * C50672 + (C29717 + C29718) * C121) * C50776 *
                C50948 +
            ((C28956 + C28955) * C50672 + (C28954 + C28953) * C121) * C50776 *
                C50954) *
               C250 -
           (((C25667 * C1059 + C50617 * C1067 + C25666 * C1060 +
              C25661 * C1068) *
                 C50672 +
             (C25667 * C1055 + C50617 * C1063 + C25666 * C1056 +
              C25661 * C1064) *
                 C121) *
                C50776 * C38342 +
            ((C38647 + C38646) * C50672 + (C38645 + C38644) * C121) * C50776 *
                C50948 +
            ((C28964 + C28963) * C50672 + (C28962 + C28961) * C121) * C50776 *
                C50954) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C121 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C50672) *
               C50776 * C50954 +
           ((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C50776 *
               C50948 +
           C39206 * C38342) *
              C50638 * C1051 -
          (C39477 * C38342 +
           ((C29715 + C29716) * C50672 + (C29717 + C29718) * C121) * C50776 *
               C50948 +
           ((C28956 + C28955) * C50672 + (C28954 + C28953) * C121) * C50776 *
               C50954) *
              C50638 * C1052 +
          (C39206 * C50954 +
           ((C30067 + C30068) * C121 + (C30069 + C30070) * C50672) * C50776 *
               C50948 +
           ((C39472 + C39473) * C121 + (C39474 + C39475) * C50672) * C50776 *
               C38342) *
              C50638 * C1053 -
          (((C25667 * C16633 + C50617 * C16637 + C25666 * C16634 +
             C25661 * C16638) *
                C50672 +
            (C25667 * C16631 + C50617 * C16635 + C25666 * C16632 +
             C25661 * C16636) *
                C121) *
               C50776 * C38342 +
           ((C39475 + C39474) * C50672 + (C39473 + C39472) * C121) * C50776 *
               C50948 +
           C39477 * C50954) *
              C50638 * C1054)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C121 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50672) *
                C50776 * C50954 +
            ((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C50776 *
                C50948 +
            C39206 * C38342) *
               C50950 -
           (C39207 * C38342 +
            ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C50776 *
                C50948 +
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50672 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C121) *
                C50776 * C50954) *
               C50936 +
           (((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                 C121 +
             (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                 C50672) *
                C50776 * C50954 +
            ((C28961 + C28962) * C121 + (C28963 + C28964) * C50672) * C50776 *
                C50948 +
            ((C38644 + C38645) * C121 + (C38646 + C38647) * C50672) * C50776 *
                C38342) *
               C1173) *
              C1514 +
          ((((C28960 + C28959) * C121 + (C28958 + C28957) * C50672) * C50776 *
                C50954 +
            ((C29707 + C29708) * C121 + (C29709 + C29710) * C50672) * C50776 *
                C50948 +
            ((C39200 + C39201) * C121 + (C39202 + C39203) * C50672) * C50776 *
                C38342) *
               C50936 -
           (C39477 * C38342 +
            ((C29715 + C29716) * C50672 + (C29717 + C29718) * C121) * C50776 *
                C50948 +
            ((C28956 + C28955) * C50672 + (C28954 + C28953) * C121) * C50776 *
                C50954) *
               C50950 -
           (((C25667 * C1059 + C50617 * C1067 + C25666 * C1060 +
              C25661 * C1068) *
                 C50672 +
             (C25667 * C1055 + C50617 * C1063 + C25666 * C1056 +
              C25661 * C1064) *
                 C121) *
                C50776 * C38342 +
            ((C38647 + C38646) * C50672 + (C38645 + C38644) * C121) * C50776 *
                C50948 +
            ((C28964 + C28963) * C50672 + (C28962 + C28961) * C121) * C50776 *
                C50954) *
               C1173) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C253 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50905 -
             (C25863 + C25864) * C254 - (C25865 + C25866) * C50688) *
                C50776 * C50954 +
            ((C28953 + C28954) * C253 + (C28955 + C28956) * C50905 -
             C29483 * C254 - C29484 * C50688) *
                C50776 * C50948 +
            C39361 * C38342) *
               C1277 +
           (((C25871 + C25872) * C254 -
             ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                  C50905 +
              (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                  C253) +
             (C25873 + C25874) * C50688) *
                C50776 * C50954 +
            (C30717 * C254 -
             ((C28957 + C28958) * C50905 + (C28959 + C28960) * C253) +
             C30718 * C50688) *
                C50776 * C50948 +
            ((C29711 + C29712) * C254 - (C39186 * C50905 + C39187 * C253) +
             (C29713 + C29714) * C50688) *
                C50776 * C38342) *
               C50643) *
              C1514 +
          (((C29487 * C254 -
             ((C28956 + C28955) * C50905 + (C28954 + C28953) * C253) +
             C29488 * C50688) *
                C50776 * C50954 +
            (C29913 * C254 -
             ((C29715 + C29716) * C50905 + (C29717 + C29718) * C253) +
             C29914 * C50688) *
                C50776 * C50948 +
            ((C29926 + C29925) * C254 - (C39460 * C50905 + C39461 * C253) +
             (C29928 + C29927) * C50688) *
                C50776 * C38342) *
               C1277 +
           (((C28960 + C28959) * C253 + (C28958 + C28957) * C50905 -
             C30720 * C254 - C30719 * C50688) *
                C50776 * C50954 +
            ((C29707 + C29708) * C253 + (C29709 + C29710) * C50905 -
             (C29712 + C29711) * C254 - (C29714 + C29713) * C50688) *
                C50776 * C50948 +
            ((C39200 + C39201) * C253 + (C39202 + C39203) * C50905 -
             (C25667 * C3449 + C50617 * C3455 + C25666 * C3450 +
              C25661 * C3456) *
                 C254 -
             (C25667 * C3452 + C50617 * C3458 + C25666 * C3453 +
              C25661 * C3459) *
                 C50688) *
                C50776 * C38342) *
               C50643) *
              C50714)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C121 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50672) *
                C50776 * C50954 +
            ((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C50776 *
                C50948 +
            C39206 * C38342) *
               C1277 -
           (C39207 * C38342 +
            ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C50776 *
                C50948 +
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50672 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C121) *
                C50776 * C50954) *
               C50643) *
              C50952 +
          ((((C28960 + C28959) * C121 + (C28958 + C28957) * C50672) * C50776 *
                C50954 +
            ((C29707 + C29708) * C121 + (C29709 + C29710) * C50672) * C50776 *
                C50948 +
            ((C39200 + C39201) * C121 + (C39202 + C39203) * C50672) * C50776 *
                C38342) *
               C50643 -
           (C39477 * C38342 +
            ((C29715 + C29716) * C50672 + (C29717 + C29718) * C121) * C50776 *
                C50948 +
            ((C28956 + C28955) * C50672 + (C28954 + C28953) * C121) * C50776 *
                C50954) *
               C1277) *
              C50942 +
          ((C39206 * C50954 +
            ((C30067 + C30068) * C121 + (C30069 + C30070) * C50672) * C50776 *
                C50948 +
            ((C39472 + C39473) * C121 + (C39474 + C39475) * C50672) * C50776 *
                C38342) *
               C1277 -
           (((C25667 * C6202 + C50617 * C6208 + C25666 * C6203 +
              C25661 * C6209) *
                 C50672 +
             (C25667 * C6199 + C50617 * C6205 + C25666 * C6200 +
              C25661 * C6206) *
                 C121) *
                C50776 * C38342 +
            ((C39203 + C39202) * C50672 + (C39201 + C39200) * C121) * C50776 *
                C50948 +
            C39207 * C50954) *
               C50643) *
              C1746)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C121 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C50672) *
               C50776 * C50954 +
           ((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C50776 *
               C50948 +
           ((C29718 + C29717) * C121 + (C29716 + C29715) * C50672) * C50776 *
               C38342) *
              C112 -
          (((C29710 + C29709) * C50672 + (C29708 + C29707) * C121) * C50776 *
               C38342 +
           ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C50776 *
               C50948 +
           ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                C50672 +
            (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                C121) *
               C50776 * C50954) *
              C113 +
          (((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                C121 +
            (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                C50672) *
               C50776 * C50954 +
           ((C28961 + C28962) * C121 + (C28963 + C28964) * C50672) * C50776 *
               C50948 +
           ((C25666 * C853 + C25661 * C858 + C25667 * C854 + C50617 * C859) *
                C121 +
            (C25666 * C862 + C25661 * C868 + C25667 * C863 + C50617 * C869) *
                C50672) *
               C50776 * C38342) *
              C114 -
          (((C25667 * C864 + C50617 * C870 + C25666 * C863 + C25661 * C869) *
                C50672 +
            (C25667 * C855 + C50617 * C865 + C25666 * C854 + C25661 * C859) *
                C121) *
               C50776 * C38342 +
           ((C25667 * C392 + C50617 * C400 + C25666 * C391 + C25661 * C399) *
                C50672 +
            (C25667 * C382 + C50617 * C388 + C25666 * C381 + C25661 * C387) *
                C121) *
               C50776 * C50948 +
           ((C25667 * C137 + C50617 * C147 + C25666 * C136 + C25661 * C146) *
                C50672 +
            (C25667 * C126 + C50617 * C138 + C25666 * C125 + C25661 * C132) *
                C121) *
               C50776 * C50954) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C506 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C501 -
            (C25863 + C25864) * C507 - (C25865 + C25866) * C502 +
            C26179 * C508 + C26180 * C503) *
               C50776 * C50954 +
           ((C28953 + C28954) * C506 + (C28955 + C28956) * C501 -
            C29483 * C507 - C29484 * C502 + C29485 * C508 + C29486 * C503) *
               C50776 * C50948 +
           ((C29718 + C29717) * C506 + (C29716 + C29715) * C501 -
            C29916 * C507 - C29915 * C502 + (C26816 + C26815) * C508 +
            (C26818 + C26817) * C503) *
               C50776 * C38342) *
              C50898 +
          (((C25871 + C25872) * C507 -
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C501 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C506) +
            (C25873 + C25874) * C502 - C26189 * C508 - C26190 * C503) *
               C50776 * C50954 +
           (C30717 * C507 -
            ((C28957 + C28958) * C501 + (C28959 + C28960) * C506) +
            C30718 * C502 - (C27423 + C27424) * C508 -
            (C27425 + C27426) * C503) *
               C50776 * C50948 +
           ((C29711 + C29712) * C507 -
            ((C29710 + C29709) * C501 + (C29708 + C29707) * C506) +
            (C29713 + C29714) * C502 -
            (C25667 * C3321 + C50617 * C3324 + C25666 * C3322 +
             C25661 * C3325) *
                C508 -
            (C25667 * C3327 + C50617 * C3330 + C25666 * C3328 +
             C25661 * C3331) *
                C503) *
               C50776 * C38342) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C253 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C50905 -
            (C25863 + C25864) * C254 - (C25865 + C25866) * C50688) *
               C50776 * C50954 +
           ((C28953 + C28954) * C253 + (C28955 + C28956) * C50905 -
            C29483 * C254 - C29484 * C50688) *
               C50776 * C50948 +
           ((C29718 + C29717) * C253 + (C29716 + C29715) * C50905 -
            C29916 * C254 - C29915 * C50688) *
               C50776 * C38342) *
              C250 +
          (((C25871 + C25872) * C254 -
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50905 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C253) +
            (C25873 + C25874) * C50688) *
               C50776 * C50954 +
           (C30717 * C254 -
            ((C28957 + C28958) * C50905 + (C28959 + C28960) * C253) +
            C30718 * C50688) *
               C50776 * C50948 +
           ((C29711 + C29712) * C254 -
            ((C29710 + C29709) * C50905 + (C29708 + C29707) * C253) +
            (C29713 + C29714) * C50688) *
               C50776 * C38342) *
              C251 +
          (((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                C253 +
            (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                C50905 -
            (C25879 + C25880) * C254 - (C25881 + C25882) * C50688) *
               C50776 * C50954 +
           ((C28961 + C28962) * C253 + (C28963 + C28964) * C50905 -
            (C28731 + C28732) * C254 - (C28733 + C28734) * C50688) *
               C50776 * C50948 +
           ((C25666 * C853 + C25661 * C858 + C25667 * C854 + C50617 * C859) *
                C253 +
            (C25666 * C862 + C25661 * C868 + C25667 * C863 + C50617 * C869) *
                C50905 -
            (C25667 * C969 + C50617 * C973 + C25666 * C970 + C25661 * C974) *
                C254 -
            (C25667 * C977 + C50617 * C981 + C25666 * C978 + C25661 * C982) *
                C50688) *
               C50776 * C38342) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
               C600 +
           (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
               C595 -
           (C25863 + C25864) * C601 - (C25865 + C25866) * C596 + C26179 * C602 +
           C26180 * C597 - C26305 * C603 - C26306 * C598) *
              C50776 * C50954 +
          ((C28953 + C28954) * C600 + (C28955 + C28956) * C595 - C29483 * C601 -
           C29484 * C596 + C29485 * C602 + C29486 * C597 -
           (C26497 + C26498) * C603 - (C26499 + C26500) * C598) *
              C50776 * C50948 +
          ((C29718 + C29717) * C600 + (C29716 + C29715) * C595 - C29916 * C601 -
           C29915 * C596 + (C26816 + C26815) * C602 + (C26818 + C26817) * C597 -
           (C25667 * C8934 + C50617 * C8936 + C25666 * C8935 + C25661 * C8937) *
               C603 -
           (C25667 * C8938 + C50617 * C8940 + C25666 * C8939 + C25661 * C8941) *
               C598) *
              C50776 * C38342) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                 C121 +
             (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                 C50672) *
                C50776 * C50954 +
            ((C28953 + C28954) * C121 + (C28955 + C28956) * C50672) * C50776 *
                C50948 +
            ((C29718 + C29717) * C121 + (C29716 + C29715) * C50672) * C50776 *
                C38342) *
               C250 -
           (((C29710 + C29709) * C50672 + (C29708 + C29707) * C121) * C50776 *
                C38342 +
            ((C28957 + C28958) * C50672 + (C28959 + C28960) * C121) * C50776 *
                C50948 +
            ((C25667 * C135 + C50617 * C145 + C25666 * C134 + C25661 * C144) *
                 C50672 +
             (C25667 * C124 + C50617 * C131 + C25666 * C123 + C25661 * C130) *
                 C121) *
                C50776 * C50954) *
               C251 +
           (((C25666 * C124 + C25661 * C131 + C25667 * C125 + C50617 * C132) *
                 C121 +
             (C25666 * C135 + C25661 * C145 + C25667 * C136 + C50617 * C146) *
                 C50672) *
                C50776 * C50954 +
            ((C28961 + C28962) * C121 + (C28963 + C28964) * C50672) * C50776 *
                C50948 +
            ((C38644 + C38645) * C121 + (C38646 + C38647) * C50672) * C50776 *
                C38342) *
               C252) *
              C50907 +
          ((((C28960 + C28959) * C121 + (C28958 + C28957) * C50672) * C50776 *
                C50954 +
            ((C29707 + C29708) * C121 + (C29709 + C29710) * C50672) * C50776 *
                C50948 +
            ((C25666 * C1057 + C25661 * C1065 + C25667 * C1056 +
              C50617 * C1064) *
                 C121 +
             (C25666 * C1061 + C25661 * C1069 + C25667 * C1060 +
              C50617 * C1068) *
                 C50672) *
                C50776 * C38342) *
               C251 -
           (((C30070 + C30069) * C50672 + (C30068 + C30067) * C121) * C50776 *
                C38342 +
            ((C29715 + C29716) * C50672 + (C29717 + C29718) * C121) * C50776 *
                C50948 +
            ((C28956 + C28955) * C50672 + (C28954 + C28953) * C121) * C50776 *
                C50954) *
               C250 -
           (((C25667 * C1059 + C50617 * C1067 + C25666 * C1060 +
              C25661 * C1068) *
                 C50672 +
             (C25667 * C1055 + C50617 * C1063 + C25666 * C1056 +
              C25661 * C1064) *
                 C121) *
                C50776 * C38342 +
            ((C38647 + C38646) * C50672 + (C38645 + C38644) * C121) * C50776 *
                C50948 +
            ((C28964 + C28963) * C50672 + (C28962 + C28961) * C121) * C50776 *
                C50954) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C25666 * C122 + C25661 * C129 + C25667 * C123 + C50617 * C130) *
                C506 +
            (C25666 * C133 + C25661 * C143 + C25667 * C134 + C50617 * C144) *
                C501 -
            (C25863 + C25864) * C507 - (C25865 + C25866) * C502 +
            C26179 * C508 + C26180 * C503) *
               C50776 * C50954 +
           ((C28953 + C28954) * C506 + (C28955 + C28956) * C501 -
            C29483 * C507 - C29484 * C502 + C29485 * C508 + C29486 * C503) *
               C50776 * C50948 +
           ((C29718 + C29717) * C506 + (C29716 + C29715) * C501 -
            C29916 * C507 - C29915 * C502 + (C26816 + C26815) * C508 +
            (C26818 + C26817) * C503) *
               C50776 * C38342) *
              C50638 * C50907 +
          ((C29487 * C507 -
            ((C28956 + C28955) * C501 + (C28954 + C28953) * C506) +
            C29488 * C502 - C26501 * C508 - C26502 * C503) *
               C50776 * C50954 +
           (C29913 * C507 -
            ((C29715 + C29716) * C501 + (C29717 + C29718) * C506) +
            C29914 * C502 - (C26815 + C26816) * C508 -
            (C26817 + C26818) * C503) *
               C50776 * C50948 +
           ((C29926 + C29925) * C507 -
            ((C30070 + C30069) * C501 + (C30068 + C30067) * C506) +
            (C29928 + C29927) * C502 -
            (C25667 * C9064 + C50617 * C9068 + C25666 * C9065 +
             C25661 * C9069) *
                C508 -
            (C25667 * C9066 + C50617 * C9070 + C25666 * C9067 +
             C25661 * C9071) *
                C503) *
               C50776 * C38342) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1174 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C1169 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C1175 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C50688) *
              C50776 * C50802 * C50950 +
          ((C117 * C257 + C105 * C263 + C118 * C256 + C106 * C262 +
            C119 * C255 + C107 * C261 + C120 * C259 + C108 * C269) *
               C1175 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C1169 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C1174) +
           (C117 * C267 + C105 * C275 + C118 * C266 + C106 * C274 +
            C119 * C265 + C107 * C273 + C120 * C270 + C108 * C277) *
               C50688) *
              C50776 * C50802 * C50936 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C1174 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C1169 -
           (C120 * C260 + C108 * C271 + C119 * C259 + C107 * C269 +
            C118 * C255 + C106 * C261 + C117 * C256 + C105 * C262) *
               C1175 -
           (C120 * C272 + C108 * C278 + C119 * C270 + C107 * C277 +
            C118 * C265 + C106 * C273 + C117 * C266 + C105 * C274) *
               C50688) *
              C50776 * C50802 * C1173) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C1174 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C1169 -
            (C7987 + C7988) * C1175 - (C7989 + C7990) * C50688) *
               C7787 +
           ((C7988 + C7987) * C1174 + (C7990 + C7989) * C1169 -
            (C7991 + C7992) * C1175 - (C7993 + C7994) * C50688) *
               C7788 +
           (C8303 * C1174 + C8304 * C1169 - C8437 * C1175 - C8438 * C50688) *
               C7789) *
              C50802 * C50950 +
          (((C7995 + C7996) * C1175 -
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C1169 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C1174) +
            (C7997 + C7998) * C50688) *
               C7787 +
           ((C7999 + C8000) * C1175 -
            ((C7998 + C7997) * C1169 + (C7996 + C7995) * C1174) +
            (C8001 + C8002) * C50688) *
               C7788 +
           ((C8328 + C8327) * C1175 - (C8314 * C1169 + C8313 * C1174) +
            (C8330 + C8329) * C50688) *
               C7789) *
              C50802 * C50936 +
          (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                C1174 +
            (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                C1169 -
            (C8003 + C8004) * C1175 - (C8005 + C8006) * C50688) *
               C7787 +
           ((C8004 + C8003) * C1174 + (C8006 + C8005) * C1169 -
            (C8007 + C8008) * C1175 - (C8009 + C8010) * C50688) *
               C7788 +
           ((C8008 + C8007) * C1174 + (C8010 + C8009) * C1169 -
            (C49761 * C604 + C50617 * C608 + C49768 * C605 + C50891 * C609) *
                C1175 -
            (C49761 * C612 + C50617 * C616 + C49768 * C613 + C50891 * C617) *
                C50688) *
               C7789) *
              C50802 * C1173) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1279 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50951 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C1280 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C50939 +
           (C117 * C509 + C105 * C514 + C118 * C510 + C106 * C515 +
            C119 * C511 + C107 * C516 + C120 * C512 + C108 * C517) *
               C1281 +
           (C117 * C518 + C105 * C524 + C118 * C519 + C106 * C525 +
            C119 * C520 + C107 * C526 + C120 * C521 + C108 * C527) *
               C1276) *
              C50776 * C50802 * C1277 +
          ((C117 * C257 + C105 * C263 + C118 * C256 + C106 * C262 +
            C119 * C255 + C107 * C261 + C120 * C259 + C108 * C269) *
               C1280 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50951 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C1279) +
           (C117 * C267 + C105 * C275 + C118 * C266 + C106 * C274 +
            C119 * C265 + C107 * C273 + C120 * C270 + C108 * C277) *
               C50939 -
           (C120 * C513 + C108 * C522 + C119 * C512 + C107 * C517 +
            C118 * C511 + C106 * C516 + C117 * C510 + C105 * C515) *
               C1281 -
           (C120 * C523 + C108 * C528 + C119 * C521 + C107 * C527 +
            C118 * C520 + C106 * C526 + C117 * C519 + C105 * C525) *
               C1276) *
              C50776 * C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C1279 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50951 -
            (C7987 + C7988) * C1280 - (C7989 + C7990) * C50939 + C8303 * C1281 +
            C8304 * C1276) *
               C7787 +
           ((C7988 + C7987) * C1279 + (C7990 + C7989) * C50951 -
            (C7991 + C7992) * C1280 - (C7993 + C7994) * C50939 +
            (C8323 + C8324) * C1281 + (C8325 + C8326) * C1276) *
               C7788 +
           (C8303 * C1279 + C8304 * C50951 - C8437 * C1280 - C8438 * C50939 +
            (C8448 + C8447) * C1281 + (C8450 + C8449) * C1276) *
               C7789) *
              C50802 * C1277 +
          (((C7995 + C7996) * C1280 -
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50951 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C1279) +
            (C7997 + C7998) * C50939 - C8313 * C1281 - C8314 * C1276) *
               C7787 +
           ((C7999 + C8000) * C1280 -
            ((C7998 + C7997) * C50951 + (C7996 + C7995) * C1279) +
            (C8001 + C8002) * C50939 - (C8327 + C8328) * C1281 -
            (C8329 + C8330) * C1276) *
               C7788 +
           ((C8328 + C8327) * C1280 - (C8314 * C50951 + C8313 * C1279) +
            (C8330 + C8329) * C50939 -
            (C49761 * C2805 + C50617 * C2808 + C49768 * C2806 +
             C50891 * C2809) *
                C1281 -
            (C49761 * C2811 + C50617 * C2814 + C49768 * C2812 +
             C50891 * C2815) *
                C1276) *
               C7789) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C1174 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C1169 -
            (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
             C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
                C1175 -
            (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
             C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
                C50688) *
               C50776 * C50802 * C1277 +
           ((C117 * C257 + C105 * C263 + C118 * C256 + C106 * C262 +
             C119 * C255 + C107 * C261 + C120 * C259 + C108 * C269) *
                C1175 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C1169 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C1174) +
            (C117 * C267 + C105 * C275 + C118 * C266 + C106 * C274 +
             C119 * C265 + C107 * C273 + C120 * C270 + C108 * C277) *
                C50688) *
               C50776 * C50802 * C50643) *
              C50907 +
          (((C117 * C718 + C105 * C726 + C118 * C719 + C106 * C727 +
             C119 * C720 + C107 * C728 + C120 * C721 + C108 * C729) *
                C1175 -
            ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
              C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                 C1169 +
             (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
              C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                 C1174) +
            (C117 * C730 + C105 * C742 + C118 * C731 + C106 * C743 +
             C119 * C732 + C107 * C744 + C120 * C733 + C108 * C745) *
                C50688) *
               C50776 * C50802 * C1277 +
           ((C117 * C379 + C105 * C385 + C118 * C380 + C106 * C386 +
             C119 * C381 + C107 * C387 + C120 * C382 + C108 * C388) *
                C1174 +
            (C117 * C389 + C105 * C397 + C118 * C390 + C106 * C398 +
             C119 * C391 + C107 * C399 + C120 * C392 + C108 * C400) *
                C1169 -
            (C120 * C1412 + C108 * C1413 + C119 * C721 + C107 * C729 +
             C118 * C720 + C106 * C728 + C117 * C719 + C105 * C727) *
                C1175 -
            (C120 * C1414 + C108 * C1415 + C119 * C733 + C107 * C745 +
             C118 * C732 + C106 * C744 + C117 * C731 + C105 * C743) *
                C50688) *
               C50776 * C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C1174 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C1169 -
             (C7987 + C7988) * C1175 - (C7989 + C7990) * C50688) *
                C7787 +
            ((C7988 + C7987) * C1174 + (C7990 + C7989) * C1169 -
             (C7991 + C7992) * C1175 - (C7993 + C7994) * C50688) *
                C7788 +
            (C8303 * C1174 + C8304 * C1169 - C8437 * C1175 - C8438 * C50688) *
                C7789) *
               C50802 * C1277 +
           (((C7995 + C7996) * C1175 -
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C1169 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C1174) +
             (C7997 + C7998) * C50688) *
                C7787 +
            ((C7999 + C8000) * C1175 -
             ((C7998 + C7997) * C1169 + (C7996 + C7995) * C1174) +
             (C8001 + C8002) * C50688) *
                C7788 +
            ((C8328 + C8327) * C1175 - (C8314 * C1169 + C8313 * C1174) +
             (C8330 + C8329) * C50688) *
                C7789) *
               C50802 * C50643) *
              C50907 +
          ((((C8629 + C8630) * C1175 -
             ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                  C1169 +
              (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                  C1174) +
             (C8631 + C8632) * C50688) *
                C7787 +
            ((C8634 + C8633) * C1175 -
             ((C8632 + C8631) * C1169 + (C8630 + C8629) * C1174) +
             (C8636 + C8635) * C50688) *
                C7788 +
            ((C8638 + C8637) * C1175 - (C8642 * C1169 + C8641 * C1174) +
             (C8640 + C8639) * C50688) *
                C7789) *
               C50802 * C1277 +
           (((C49768 * C379 + C50891 * C385 + C49761 * C380 + C50617 * C386) *
                 C1174 +
             (C49768 * C389 + C50891 * C397 + C49761 * C390 + C50617 * C398) *
                 C1169 -
             (C9575 + C9576) * C1175 - (C9577 + C9578) * C50688) *
                C7787 +
            ((C9576 + C9575) * C1174 + (C9578 + C9577) * C1169 -
             (C9579 + C9580) * C1175 - (C9581 + C9582) * C50688) *
                C7788 +
            ((C9580 + C9579) * C1174 + (C9582 + C9581) * C1169 -
             (C49761 * C2981 + C50617 * C2984 + C49768 * C2982 +
              C50891 * C2985) *
                 C1175 -
             (C49761 * C2987 + C50617 * C2990 + C49768 * C2988 +
              C50891 * C2991) *
                 C50688) *
                C7789) *
               C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C1174 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C1169 -
            (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
             C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
                C1175 -
            (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
             C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
                C50688) *
               C50776 * C50802 * C50898 +
           ((C117 * C257 + C105 * C263 + C118 * C256 + C106 * C262 +
             C119 * C255 + C107 * C261 + C120 * C259 + C108 * C269) *
                C1175 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C1169 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C1174) +
            (C117 * C267 + C105 * C275 + C118 * C266 + C106 * C274 +
             C119 * C265 + C107 * C273 + C120 * C270 + C108 * C277) *
                C50688) *
               C50776 * C50802 * C50643) *
              C1514 +
          (((C117 * C718 + C105 * C726 + C118 * C719 + C106 * C727 +
             C119 * C720 + C107 * C728 + C120 * C721 + C108 * C729) *
                C1175 -
            ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
              C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                 C1169 +
             (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
              C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                 C1174) +
            (C117 * C730 + C105 * C742 + C118 * C731 + C106 * C743 +
             C119 * C732 + C107 * C744 + C120 * C733 + C108 * C745) *
                C50688) *
               C50776 * C50802 * C50898 +
           ((C117 * C379 + C105 * C385 + C118 * C380 + C106 * C386 +
             C119 * C381 + C107 * C387 + C120 * C382 + C108 * C388) *
                C1174 +
            (C117 * C389 + C105 * C397 + C118 * C390 + C106 * C398 +
             C119 * C391 + C107 * C399 + C120 * C392 + C108 * C400) *
                C1169 -
            (C120 * C1412 + C108 * C1413 + C119 * C721 + C107 * C729 +
             C118 * C720 + C106 * C728 + C117 * C719 + C105 * C727) *
                C1175 -
            (C120 * C1414 + C108 * C1415 + C119 * C733 + C107 * C745 +
             C118 * C732 + C106 * C744 + C117 * C731 + C105 * C743) *
                C50688) *
               C50776 * C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C1174 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C1169 -
             (C7987 + C7988) * C1175 - (C7989 + C7990) * C50688) *
                C7787 +
            ((C7988 + C7987) * C1174 + (C7990 + C7989) * C1169 -
             (C7991 + C7992) * C1175 - (C7993 + C7994) * C50688) *
                C7788 +
            (C8303 * C1174 + C8304 * C1169 - C8437 * C1175 - C8438 * C50688) *
                C7789) *
               C50802 * C50898 +
           (((C7995 + C7996) * C1175 -
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C1169 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C1174) +
             (C7997 + C7998) * C50688) *
                C7787 +
            ((C7999 + C8000) * C1175 -
             ((C7998 + C7997) * C1169 + (C7996 + C7995) * C1174) +
             (C8001 + C8002) * C50688) *
                C7788 +
            ((C8328 + C8327) * C1175 - (C8314 * C1169 + C8313 * C1174) +
             (C8330 + C8329) * C50688) *
                C7789) *
               C50802 * C50643) *
              C1514 +
          ((((C8629 + C8630) * C1175 -
             ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                  C1169 +
              (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                  C1174) +
             (C8631 + C8632) * C50688) *
                C7787 +
            ((C8634 + C8633) * C1175 -
             ((C8632 + C8631) * C1169 + (C8630 + C8629) * C1174) +
             (C8636 + C8635) * C50688) *
                C7788 +
            ((C8638 + C8637) * C1175 - (C8642 * C1169 + C8641 * C1174) +
             (C8640 + C8639) * C50688) *
                C7789) *
               C50802 * C50898 +
           (((C49768 * C379 + C50891 * C385 + C49761 * C380 + C50617 * C386) *
                 C1174 +
             (C49768 * C389 + C50891 * C397 + C49761 * C390 + C50617 * C398) *
                 C1169 -
             (C9575 + C9576) * C1175 - (C9577 + C9578) * C50688) *
                C7787 +
            ((C9576 + C9575) * C1174 + (C9578 + C9577) * C1169 -
             (C9579 + C9580) * C1175 - (C9581 + C9582) * C50688) *
                C7788 +
            ((C9580 + C9579) * C1174 + (C9582 + C9581) * C1169 -
             (C49761 * C2981 + C50617 * C2984 + C49768 * C2982 +
              C50891 * C2985) *
                 C1175 -
             (C49761 * C2987 + C50617 * C2990 + C49768 * C2988 +
              C50891 * C2991) *
                 C50688) *
                C7789) *
               C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1279 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50951 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C1280 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C50939 +
           (C117 * C509 + C105 * C514 + C118 * C510 + C106 * C515 +
            C119 * C511 + C107 * C516 + C120 * C512 + C108 * C517) *
               C1281 +
           (C117 * C518 + C105 * C524 + C118 * C519 + C106 * C525 +
            C119 * C520 + C107 * C526 + C120 * C521 + C108 * C527) *
               C1276) *
              C50776 * C50802 * C50638 * C1514 +
          ((C117 * C718 + C105 * C726 + C118 * C719 + C106 * C727 +
            C119 * C720 + C107 * C728 + C120 * C721 + C108 * C729) *
               C1280 -
           ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
             C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                C50951 +
            (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
             C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                C1279) +
           (C117 * C730 + C105 * C742 + C118 * C731 + C106 * C743 +
            C119 * C732 + C107 * C744 + C120 * C733 + C108 * C745) *
               C50939 -
           (C120 * C722 + C108 * C734 + C119 * C723 + C107 * C735 +
            C118 * C724 + C106 * C736 + C117 * C725 + C105 * C737) *
               C1281 -
           (C120 * C738 + C108 * C746 + C119 * C739 + C107 * C747 +
            C118 * C740 + C106 * C748 + C117 * C741 + C105 * C749) *
               C1276) *
              C50776 * C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C1279 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50951 -
            (C7987 + C7988) * C1280 - (C7989 + C7990) * C50939 + C8303 * C1281 +
            C8304 * C1276) *
               C7787 +
           ((C7988 + C7987) * C1279 + (C7990 + C7989) * C50951 -
            (C7991 + C7992) * C1280 - (C7993 + C7994) * C50939 +
            (C8323 + C8324) * C1281 + (C8325 + C8326) * C1276) *
               C7788 +
           (C8303 * C1279 + C8304 * C50951 - C8437 * C1280 - C8438 * C50939 +
            (C8448 + C8447) * C1281 + (C8450 + C8449) * C1276) *
               C7789) *
              C50802 * C50638 * C1514 +
          (((C8629 + C8630) * C1280 -
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C50951 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C1279) +
            (C8631 + C8632) * C50939 - C8641 * C1281 - C8642 * C1276) *
               C7787 +
           ((C8634 + C8633) * C1280 -
            ((C8632 + C8631) * C50951 + (C8630 + C8629) * C1279) +
            (C8636 + C8635) * C50939 - (C8637 + C8638) * C1281 -
            (C8639 + C8640) * C1276) *
               C7788 +
           ((C8638 + C8637) * C1280 - (C8642 * C50951 + C8641 * C1279) +
            (C8640 + C8639) * C50939 -
            (C49761 * C8596 + C50617 * C8598 + C49768 * C8597 +
             C50891 * C8599) *
                C1281 -
            (C49761 * C8600 + C50617 * C8602 + C49768 * C8601 +
             C50891 * C8603) *
                C1276) *
               C7789) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1174 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C1169 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C1175 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C50688) *
              C50776 * C50802 * C50638 * C50952 +
          ((C117 * C718 + C105 * C726 + C118 * C719 + C106 * C727 +
            C119 * C720 + C107 * C728 + C120 * C721 + C108 * C729) *
               C1175 -
           ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
             C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                C1169 +
            (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
             C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                C1174) +
           (C117 * C730 + C105 * C742 + C118 * C731 + C106 * C743 +
            C119 * C732 + C107 * C744 + C120 * C733 + C108 * C745) *
               C50688) *
              C50776 * C50802 * C50638 * C50942 +
          ((C117 * C851 + C105 * C856 + C118 * C852 + C106 * C857 +
            C119 * C853 + C107 * C858 + C120 * C854 + C108 * C859) *
               C1174 +
           (C117 * C860 + C105 * C866 + C118 * C861 + C106 * C867 +
            C119 * C862 + C107 * C868 + C120 * C863 + C108 * C869) *
               C1169 -
           (C120 * C969 + C108 * C973 + C119 * C970 + C107 * C974 +
            C118 * C971 + C106 * C975 + C117 * C972 + C105 * C976) *
               C1175 -
           (C120 * C977 + C108 * C981 + C119 * C978 + C107 * C982 +
            C118 * C979 + C106 * C983 + C117 * C980 + C105 * C984) *
               C50688) *
              C50776 * C50802 * C50638 * C1746)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C1174 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C1169 -
            (C7987 + C7988) * C1175 - (C7989 + C7990) * C50688) *
               C7787 +
           ((C7988 + C7987) * C1174 + (C7990 + C7989) * C1169 -
            (C7991 + C7992) * C1175 - (C7993 + C7994) * C50688) *
               C7788 +
           (C8303 * C1174 + C8304 * C1169 - C8437 * C1175 - C8438 * C50688) *
               C7789) *
              C50802 * C50638 * C50952 +
          (((C8629 + C8630) * C1175 -
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C1169 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C1174) +
            (C8631 + C8632) * C50688) *
               C7787 +
           ((C8634 + C8633) * C1175 -
            ((C8632 + C8631) * C1169 + (C8630 + C8629) * C1174) +
            (C8636 + C8635) * C50688) *
               C7788 +
           ((C8638 + C8637) * C1175 - (C8642 * C1169 + C8641 * C1174) +
            (C8640 + C8639) * C50688) *
               C7789) *
              C50802 * C50638 * C50942 +
          (((C49768 * C851 + C50891 * C856 + C49761 * C852 + C50617 * C857) *
                C1174 +
            (C49768 * C860 + C50891 * C866 + C49761 * C861 + C50617 * C867) *
                C1169 -
            (C8959 + C8960) * C1175 - (C8961 + C8962) * C50688) *
               C7787 +
           ((C8960 + C8959) * C1174 + (C8962 + C8961) * C1169 -
            (C8963 + C8964) * C1175 - (C8965 + C8966) * C50688) *
               C7788 +
           ((C8964 + C8963) * C1174 + (C8966 + C8965) * C1169 -
            (C49761 * C8934 + C50617 * C8936 + C49768 * C8935 +
             C50891 * C8937) *
                C1175 -
            (C49761 * C8938 + C50617 * C8940 + C49768 * C8939 +
             C50891 * C8941) *
                C50688) *
               C7789) *
              C50802 * C50638 * C1746)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C506 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C501 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C507 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C502 +
           (C117 * C509 + C105 * C514 + C118 * C510 + C106 * C515 +
            C119 * C511 + C107 * C516 + C120 * C512 + C108 * C517) *
               C508 +
           (C117 * C518 + C105 * C524 + C118 * C519 + C106 * C525 +
            C119 * C520 + C107 * C526 + C120 * C521 + C108 * C527) *
               C503) *
              C50776 * C50802 * C50898 +
          ((C117 * C257 + C105 * C263 + C118 * C256 + C106 * C262 +
            C119 * C255 + C107 * C261 + C120 * C259 + C108 * C269) *
               C507 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C501 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C506) +
           (C117 * C267 + C105 * C275 + C118 * C266 + C106 * C274 +
            C119 * C265 + C107 * C273 + C120 * C270 + C108 * C277) *
               C502 -
           (C120 * C513 + C108 * C522 + C119 * C512 + C107 * C517 +
            C118 * C511 + C106 * C516 + C117 * C510 + C105 * C515) *
               C508 -
           (C120 * C523 + C108 * C528 + C119 * C521 + C107 * C527 +
            C118 * C520 + C106 * C526 + C117 * C519 + C105 * C525) *
               C503) *
              C50776 * C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50672) *
              C50776 * C50802 * C112 -
          ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
            C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
               C50672 +
           (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
            C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
               C121) *
              C50776 * C50802 * C113 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C121 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50672) *
              C50776 * C50802 * C114 -
          ((C120 * C141 + C108 * C149 + C119 * C140 + C107 * C148 +
            C118 * C137 + C106 * C147 + C117 * C136 + C105 * C146) *
               C50672 +
           (C120 * C128 + C108 * C142 + C119 * C127 + C107 * C139 +
            C118 * C126 + C106 * C138 + C117 * C125 + C105 * C132) *
               C121) *
              C50776 * C50802 * C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50672) *
               C50776 * C50802 * C50898 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50672 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50776 * C50802 * C50643) *
              C848 +
          (((C117 * C379 + C105 * C385 + C118 * C380 + C106 * C386 +
             C119 * C381 + C107 * C387 + C120 * C382 + C108 * C388) *
                C121 +
            (C117 * C389 + C105 * C397 + C118 * C390 + C106 * C398 +
             C119 * C391 + C107 * C399 + C120 * C392 + C108 * C400) *
                C50672) *
               C50776 * C50802 * C50643 -
           ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
             C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                C50672 +
            (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
             C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                C121) *
               C50776 * C50802 * C50898) *
              C849 +
          (((C117 * C851 + C105 * C856 + C118 * C852 + C106 * C857 +
             C119 * C853 + C107 * C858 + C120 * C854 + C108 * C859) *
                C121 +
            (C117 * C860 + C105 * C866 + C118 * C861 + C106 * C867 +
             C119 * C862 + C107 * C868 + C120 * C863 + C108 * C869) *
                C50672) *
               C50776 * C50802 * C50898 -
           ((C120 * C864 + C108 * C870 + C119 * C863 + C107 * C869 +
             C118 * C862 + C106 * C868 + C117 * C861 + C105 * C867) *
                C50672 +
            (C120 * C855 + C108 * C865 + C119 * C854 + C107 * C859 +
             C118 * C853 + C106 * C858 + C117 * C852 + C105 * C857) *
                C121) *
               C50776 * C50802 * C50643) *
              C850)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C121 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50672) *
               C7787 +
           ((C49768 * C258 + C50891 * C264 + C49761 * C257 + C50617 * C263) *
                C121 +
            (C49768 * C268 + C50891 * C276 + C49761 * C267 + C50617 * C275) *
                C50672) *
               C7788 +
           ((C49768 * C509 + C50891 * C514 + C49761 * C510 + C50617 * C515) *
                C121 +
            (C49768 * C518 + C50891 * C524 + C49761 * C519 + C50617 * C525) *
                C50672) *
               C7789) *
              C50802 * C112 -
          (((C49761 * C520 + C50617 * C526 + C49768 * C519 + C50891 * C525) *
                C50672 +
            (C49761 * C511 + C50617 * C516 + C49768 * C510 + C50891 * C515) *
                C121) *
               C7789 +
           ((C49761 * C266 + C50617 * C274 + C49768 * C267 + C50891 * C275) *
                C50672 +
            (C49761 * C256 + C50617 * C262 + C49768 * C257 + C50891 * C263) *
                C121) *
               C7788 +
           ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                C50672 +
            (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                C121) *
               C7787) *
              C50802 * C113 +
          (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                C121 +
            (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                C50672) *
               C7787 +
           ((C49768 * C256 + C50891 * C262 + C49761 * C255 + C50617 * C261) *
                C121 +
            (C49768 * C266 + C50891 * C274 + C49761 * C265 + C50617 * C273) *
                C50672) *
               C7788 +
           ((C49768 * C511 + C50891 * C516 + C49761 * C512 + C50617 * C517) *
                C121 +
            (C49768 * C520 + C50891 * C526 + C49761 * C521 + C50617 * C527) *
                C50672) *
               C7789) *
              C50802 * C114 -
          (((C49761 * C523 + C50617 * C528 + C49768 * C521 + C50891 * C527) *
                C50672 +
            (C49761 * C513 + C50617 * C522 + C49768 * C512 + C50891 * C517) *
                C121) *
               C7789 +
           ((C49761 * C270 + C50617 * C277 + C49768 * C265 + C50891 * C273) *
                C50672 +
            (C49761 * C259 + C50617 * C269 + C49768 * C255 + C50891 * C261) *
                C121) *
               C7788 +
           ((C49761 * C137 + C50617 * C147 + C49768 * C136 + C50891 * C146) *
                C50672 +
            (C49761 * C126 + C50617 * C138 + C49768 * C125 + C50891 * C132) *
                C121) *
               C7787) *
              C50802 * C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C506 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C501 -
            (C7987 + C7988) * C507 - (C7989 + C7990) * C502 + C8303 * C508 +
            C8304 * C503) *
               C7787 +
           ((C7988 + C7987) * C506 + (C7990 + C7989) * C501 -
            (C7991 + C7992) * C507 - (C7993 + C7994) * C502 +
            (C8323 + C8324) * C508 + (C8325 + C8326) * C503) *
               C7788 +
           (C8303 * C506 + C8304 * C501 - (C8324 + C8323) * C507 -
            (C8326 + C8325) * C502 +
            (C49768 * C2807 + C50891 * C2810 + C49761 * C2806 +
             C50617 * C2809) *
                C508 +
            (C49768 * C2813 + C50891 * C2816 + C49761 * C2812 +
             C50617 * C2815) *
                C503) *
               C7789) *
              C50802 * C50898 +
          (((C7995 + C7996) * C507 -
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C501 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C506) +
            (C7997 + C7998) * C502 - C8313 * C508 - C8314 * C503) *
               C7787 +
           ((C7999 + C8000) * C507 -
            ((C7998 + C7997) * C501 + (C7996 + C7995) * C506) +
            (C8001 + C8002) * C502 - (C8327 + C8328) * C508 -
            (C8329 + C8330) * C503) *
               C7788 +
           ((C8328 + C8327) * C507 - (C8314 * C501 + C8313 * C506) +
            (C8330 + C8329) * C502 -
            (C49761 * C2805 + C50617 * C2808 + C49768 * C2806 +
             C50891 * C2809) *
                C508 -
            (C49761 * C2811 + C50617 * C2814 + C49768 * C2812 +
             C50891 * C2815) *
                C503) *
               C7789) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C121 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50672) *
                C7787 +
            ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C7788 +
            (C8303 * C121 + C8304 * C50672) * C7789) *
               C50802 * C50898 -
           ((C8314 * C50672 + C8313 * C121) * C7789 +
            ((C7998 + C7997) * C50672 + (C7996 + C7995) * C121) * C7788 +
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50672 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C121) *
                C7787) *
               C50802 * C50643) *
              C848 +
          ((((C49768 * C379 + C50891 * C385 + C49761 * C380 + C50617 * C386) *
                 C121 +
             (C49768 * C389 + C50891 * C397 + C49761 * C390 + C50617 * C398) *
                 C50672) *
                C7787 +
            ((C49768 * C719 + C50891 * C727 + C49761 * C720 + C50617 * C728) *
                 C121 +
             (C49768 * C731 + C50891 * C743 + C49761 * C732 + C50617 * C744) *
                 C50672) *
                C7788 +
            ((C49768 * C724 + C50891 * C736 + C49761 * C723 + C50617 * C735) *
                 C121 +
             (C49768 * C740 + C50891 * C748 + C49761 * C739 + C50617 * C747) *
                 C50672) *
                C7789) *
               C50802 * C50643 -
           ((C8642 * C50672 + C8641 * C121) * C7789 +
            ((C8632 + C8631) * C50672 + (C8630 + C8629) * C121) * C7788 +
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C50672 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C121) *
                C7787) *
               C50802 * C50898) *
              C849 +
          ((((C49768 * C851 + C50891 * C856 + C49761 * C852 + C50617 * C857) *
                 C121 +
             (C49768 * C860 + C50891 * C866 + C49761 * C861 + C50617 * C867) *
                 C50672) *
                C7787 +
            ((C49768 * C972 + C50891 * C976 + C49761 * C971 + C50617 * C975) *
                 C121 +
             (C49768 * C980 + C50891 * C984 + C49761 * C979 + C50617 * C983) *
                 C50672) *
                C7788 +
            ((C49768 * C3323 + C50891 * C3326 + C49761 * C3322 +
              C50617 * C3325) *
                 C121 +
             (C49768 * C3329 + C50891 * C3332 + C49761 * C3328 +
              C50617 * C3331) *
                 C50672) *
                C7789) *
               C50802 * C50898 -
           (((C49761 * C3327 + C50617 * C3330 + C49768 * C3328 +
              C50891 * C3331) *
                 C50672 +
             (C49761 * C3321 + C50617 * C3324 + C49768 * C3322 +
              C50891 * C3325) *
                 C121) *
                C7789 +
            ((C49761 * C978 + C50617 * C982 + C49768 * C979 + C50891 * C983) *
                 C50672 +
             (C49761 * C970 + C50617 * C974 + C49768 * C971 + C50891 * C975) *
                 C121) *
                C7788 +
            ((C49761 * C862 + C50617 * C868 + C49768 * C861 + C50891 * C867) *
                 C50672 +
             (C49761 * C853 + C50617 * C858 + C49768 * C852 + C50891 * C857) *
                 C121) *
                C7787) *
               C50802 * C50643) *
              C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 + C119 * C124 +
           C107 * C131 + C120 * C125 + C108 * C132) *
              C600 +
          (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 + C119 * C135 +
           C107 * C145 + C120 * C136 + C108 * C146) *
              C595 -
          (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 + C118 * C257 +
           C106 * C263 + C117 * C258 + C105 * C264) *
              C601 -
          (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 + C118 * C267 +
           C106 * C275 + C117 * C268 + C105 * C276) *
              C596 +
          (C117 * C509 + C105 * C514 + C118 * C510 + C106 * C515 + C119 * C511 +
           C107 * C516 + C120 * C512 + C108 * C517) *
              C602 +
          (C117 * C518 + C105 * C524 + C118 * C519 + C106 * C525 + C119 * C520 +
           C107 * C526 + C120 * C521 + C108 * C527) *
              C597 -
          (C120 * C604 + C108 * C608 + C119 * C605 + C107 * C609 + C118 * C606 +
           C106 * C610 + C117 * C607 + C105 * C611) *
              C603 -
          (C120 * C612 + C108 * C616 + C119 * C613 + C107 * C617 + C118 * C614 +
           C106 * C618 + C117 * C615 + C105 * C619) *
              C598) *
         C50776 * C50802 * C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C253 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50905 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C254 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C50688) *
              C50776 * C50802 * C250 +
          ((C117 * C257 + C105 * C263 + C118 * C256 + C106 * C262 +
            C119 * C255 + C107 * C261 + C120 * C259 + C108 * C269) *
               C254 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50905 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C253) +
           (C117 * C267 + C105 * C275 + C118 * C266 + C106 * C274 +
            C119 * C265 + C107 * C273 + C120 * C270 + C108 * C277) *
               C50688) *
              C50776 * C50802 * C251 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C253 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50905 -
           (C120 * C260 + C108 * C271 + C119 * C259 + C107 * C269 +
            C118 * C255 + C106 * C261 + C117 * C256 + C105 * C262) *
               C254 -
           (C120 * C272 + C108 * C278 + C119 * C270 + C107 * C277 +
            C118 * C265 + C106 * C273 + C117 * C266 + C105 * C274) *
               C50688) *
              C50776 * C50802 * C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C253 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50905 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C254 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C50688) *
              C50776 * C50802 * C50638 * C848 +
          ((C117 * C718 + C105 * C726 + C118 * C719 + C106 * C727 +
            C119 * C720 + C107 * C728 + C120 * C721 + C108 * C729) *
               C254 -
           ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
             C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                C50905 +
            (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
             C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                C253) +
           (C117 * C730 + C105 * C742 + C118 * C731 + C106 * C743 +
            C119 * C732 + C107 * C744 + C120 * C733 + C108 * C745) *
               C50688) *
              C50776 * C50802 * C50638 * C849 +
          ((C117 * C851 + C105 * C856 + C118 * C852 + C106 * C857 +
            C119 * C853 + C107 * C858 + C120 * C854 + C108 * C859) *
               C253 +
           (C117 * C860 + C105 * C866 + C118 * C861 + C106 * C867 +
            C119 * C862 + C107 * C868 + C120 * C863 + C108 * C869) *
               C50905 -
           (C120 * C969 + C108 * C973 + C119 * C970 + C107 * C974 +
            C118 * C971 + C106 * C975 + C117 * C972 + C105 * C976) *
               C254 -
           (C120 * C977 + C108 * C981 + C119 * C978 + C107 * C982 +
            C118 * C979 + C106 * C983 + C117 * C980 + C105 * C984) *
               C50688) *
              C50776 * C50802 * C50638 * C850)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C253 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50905 -
            (C7987 + C7988) * C254 - (C7989 + C7990) * C50688) *
               C7787 +
           ((C7988 + C7987) * C253 + (C7990 + C7989) * C50905 -
            (C7991 + C7992) * C254 - (C7993 + C7994) * C50688) *
               C7788 +
           ((C7992 + C7991) * C253 + (C7994 + C7993) * C50905 -
            (C49761 * C606 + C50617 * C610 + C49768 * C607 + C50891 * C611) *
                C254 -
            (C49761 * C614 + C50617 * C618 + C49768 * C615 + C50891 * C619) *
                C50688) *
               C7789) *
              C50802 * C250 +
          (((C7995 + C7996) * C254 -
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50905 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C253) +
            (C7997 + C7998) * C50688) *
               C7787 +
           ((C7999 + C8000) * C254 -
            ((C7998 + C7997) * C50905 + (C7996 + C7995) * C253) +
            (C8001 + C8002) * C50688) *
               C7788 +
           ((C49768 * C606 + C50891 * C610 + C49761 * C605 + C50617 * C609) *
                C254 -
            ((C8002 + C8001) * C50905 + (C8000 + C7999) * C253) +
            (C49768 * C614 + C50891 * C618 + C49761 * C613 + C50617 * C617) *
                C50688) *
               C7789) *
              C50802 * C251 +
          (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                C253 +
            (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                C50905 -
            (C8003 + C8004) * C254 - (C8005 + C8006) * C50688) *
               C7787 +
           ((C8004 + C8003) * C253 + (C8006 + C8005) * C50905 -
            (C8007 + C8008) * C254 - (C8009 + C8010) * C50688) *
               C7788 +
           ((C8008 + C8007) * C253 + (C8010 + C8009) * C50905 -
            (C49761 * C604 + C50617 * C608 + C49768 * C605 + C50891 * C609) *
                C254 -
            (C49761 * C612 + C50617 * C616 + C49768 * C613 + C50891 * C617) *
                C50688) *
               C7789) *
              C50802 * C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
               C600 +
           (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
               C595 -
           (C7987 + C7988) * C601 - (C7989 + C7990) * C596 + C8303 * C602 +
           C8304 * C597 - C8437 * C603 - C8438 * C598) *
              C7787 +
          ((C7988 + C7987) * C600 + (C7990 + C7989) * C595 -
           (C7991 + C7992) * C601 - (C7993 + C7994) * C596 +
           (C8323 + C8324) * C602 + (C8325 + C8326) * C597 -
           (C8447 + C8448) * C603 - (C8449 + C8450) * C598) *
              C7788 +
          (C8303 * C600 + C8304 * C595 - C8437 * C601 - C8438 * C596 +
           (C8448 + C8447) * C602 + (C8450 + C8449) * C597 -
           (C49761 * C8428 + C50617 * C8430 + C49768 * C8429 + C50891 * C8431) *
               C603 -
           (C49761 * C8432 + C50617 * C8434 + C49768 * C8433 + C50891 * C8435) *
               C598) *
              C7789) *
         C50802 * C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C253 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50905 -
            (C7987 + C7988) * C254 - (C7989 + C7990) * C50688) *
               C7787 +
           ((C7988 + C7987) * C253 + (C7990 + C7989) * C50905 -
            (C7991 + C7992) * C254 - (C7993 + C7994) * C50688) *
               C7788 +
           (C8303 * C253 + C8304 * C50905 - C8437 * C254 - C8438 * C50688) *
               C7789) *
              C50802 * C50638 * C848 +
          (((C8629 + C8630) * C254 -
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C50905 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C253) +
            (C8631 + C8632) * C50688) *
               C7787 +
           ((C8634 + C8633) * C254 -
            ((C8632 + C8631) * C50905 + (C8630 + C8629) * C253) +
            (C8636 + C8635) * C50688) *
               C7788 +
           ((C8638 + C8637) * C254 - (C8642 * C50905 + C8641 * C253) +
            (C8640 + C8639) * C50688) *
               C7789) *
              C50802 * C50638 * C849 +
          (((C49768 * C851 + C50891 * C856 + C49761 * C852 + C50617 * C857) *
                C253 +
            (C49768 * C860 + C50891 * C866 + C49761 * C861 + C50617 * C867) *
                C50905 -
            (C8959 + C8960) * C254 - (C8961 + C8962) * C50688) *
               C7787 +
           ((C8960 + C8959) * C253 + (C8962 + C8961) * C50905 -
            (C8963 + C8964) * C254 - (C8965 + C8966) * C50688) *
               C7788 +
           ((C8964 + C8963) * C253 + (C8966 + C8965) * C50905 -
            (C49761 * C8934 + C50617 * C8936 + C49768 * C8935 +
             C50891 * C8937) *
                C254 -
            (C49761 * C8938 + C50617 * C8940 + C49768 * C8939 +
             C50891 * C8941) *
                C50688) *
               C7789) *
              C50802 * C50638 * C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C506 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C501 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C507 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C502 +
           (C117 * C509 + C105 * C514 + C118 * C510 + C106 * C515 +
            C119 * C511 + C107 * C516 + C120 * C512 + C108 * C517) *
               C508 +
           (C117 * C518 + C105 * C524 + C118 * C519 + C106 * C525 +
            C119 * C520 + C107 * C526 + C120 * C521 + C108 * C527) *
               C503) *
              C50776 * C50802 * C50638 * C50907 +
          ((C117 * C718 + C105 * C726 + C118 * C719 + C106 * C727 +
            C119 * C720 + C107 * C728 + C120 * C721 + C108 * C729) *
               C507 -
           ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
             C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                C501 +
            (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
             C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                C506) +
           (C117 * C730 + C105 * C742 + C118 * C731 + C106 * C743 +
            C119 * C732 + C107 * C744 + C120 * C733 + C108 * C745) *
               C502 -
           (C120 * C722 + C108 * C734 + C119 * C723 + C107 * C735 +
            C118 * C724 + C106 * C736 + C117 * C725 + C105 * C737) *
               C508 -
           (C120 * C738 + C108 * C746 + C119 * C739 + C107 * C747 +
            C118 * C740 + C106 * C748 + C117 * C741 + C105 * C749) *
               C503) *
              C50776 * C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50672) *
               C50776 * C50802 * C250 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50672 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50776 * C50802 * C251 +
           ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50672) *
               C50776 * C50802 * C252) *
              C50907 +
          (((C117 * C379 + C105 * C385 + C118 * C380 + C106 * C386 +
             C119 * C381 + C107 * C387 + C120 * C382 + C108 * C388) *
                C121 +
            (C117 * C389 + C105 * C397 + C118 * C390 + C106 * C398 +
             C119 * C391 + C107 * C399 + C120 * C392 + C108 * C400) *
                C50672) *
               C50776 * C50802 * C251 -
           ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
             C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                C50672 +
            (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
             C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                C121) *
               C50776 * C50802 * C250 -
           ((C120 * C395 + C108 * C402 + C119 * C392 + C107 * C400 +
             C118 * C391 + C106 * C399 + C117 * C390 + C105 * C398) *
                C50672 +
            (C120 * C384 + C108 * C396 + C119 * C382 + C107 * C388 +
             C118 * C381 + C106 * C387 + C117 * C380 + C105 * C386) *
                C121) *
               C50776 * C50802 * C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50672) *
              C50776 * C50802 * C50638 * C1051 -
          ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
            C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
               C50672 +
           (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
            C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
               C121) *
              C50776 * C50802 * C50638 * C1052 +
          ((C117 * C851 + C105 * C856 + C118 * C852 + C106 * C857 +
            C119 * C853 + C107 * C858 + C120 * C854 + C108 * C859) *
               C121 +
           (C117 * C860 + C105 * C866 + C118 * C861 + C106 * C867 +
            C119 * C862 + C107 * C868 + C120 * C863 + C108 * C869) *
               C50672) *
              C50776 * C50802 * C50638 * C1053 -
          ((C120 * C1059 + C108 * C1067 + C119 * C1060 + C107 * C1068 +
            C118 * C1061 + C106 * C1069 + C117 * C1062 + C105 * C1070) *
               C50672 +
           (C120 * C1055 + C108 * C1063 + C119 * C1056 + C107 * C1064 +
            C118 * C1057 + C106 * C1065 + C117 * C1058 + C105 * C1066) *
               C121) *
              C50776 * C50802 * C50638 * C1054)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C121 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50672) *
                C7787 +
            ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C7788 +
            ((C7992 + C7991) * C121 + (C7994 + C7993) * C50672) * C7789) *
               C50802 * C250 -
           (((C8002 + C8001) * C50672 + (C8000 + C7999) * C121) * C7789 +
            ((C7998 + C7997) * C50672 + (C7996 + C7995) * C121) * C7788 +
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50672 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C121) *
                C7787) *
               C50802 * C251 +
           (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                 C121 +
             (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                 C50672) *
                C7787 +
            ((C8004 + C8003) * C121 + (C8006 + C8005) * C50672) * C7788 +
            ((C8008 + C8007) * C121 + (C8010 + C8009) * C50672) * C7789) *
               C50802 * C252) *
              C50907 +
          ((((C49768 * C379 + C50891 * C385 + C49761 * C380 + C50617 * C386) *
                 C121 +
             (C49768 * C389 + C50891 * C397 + C49761 * C390 + C50617 * C398) *
                 C50672) *
                C7787 +
            ((C49768 * C719 + C50891 * C727 + C49761 * C720 + C50617 * C728) *
                 C121 +
             (C49768 * C731 + C50891 * C743 + C49761 * C732 + C50617 * C744) *
                 C50672) *
                C7788 +
            ((C49768 * C724 + C50891 * C736 + C49761 * C723 + C50617 * C735) *
                 C121 +
             (C49768 * C740 + C50891 * C748 + C49761 * C739 + C50617 * C747) *
                 C50672) *
                C7789) *
               C50802 * C251 -
           (((C49761 * C740 + C50617 * C748 + C49768 * C741 + C50891 * C749) *
                 C50672 +
             (C49761 * C724 + C50617 * C736 + C49768 * C725 + C50891 * C737) *
                 C121) *
                C7789 +
            ((C49761 * C731 + C50617 * C743 + C49768 * C730 + C50891 * C742) *
                 C50672 +
             (C49761 * C719 + C50617 * C727 + C49768 * C718 + C50891 * C726) *
                 C121) *
                C7788 +
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C50672 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C121) *
                C7787) *
               C50802 * C250 -
           (((C49761 * C738 + C50617 * C746 + C49768 * C739 + C50891 * C747) *
                 C50672 +
             (C49761 * C722 + C50617 * C734 + C49768 * C723 + C50891 * C735) *
                 C121) *
                C7789 +
            ((C49761 * C733 + C50617 * C745 + C49768 * C732 + C50891 * C744) *
                 C50672 +
             (C49761 * C721 + C50617 * C729 + C49768 * C720 + C50891 * C728) *
                 C121) *
                C7788 +
            ((C49761 * C391 + C50617 * C399 + C49768 * C390 + C50891 * C398) *
                 C50672 +
             (C49761 * C381 + C50617 * C387 + C49768 * C380 + C50891 * C386) *
                 C121) *
                C7787) *
               C50802 * C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C506 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C501 -
            (C7987 + C7988) * C507 - (C7989 + C7990) * C502 + C8303 * C508 +
            C8304 * C503) *
               C7787 +
           ((C7988 + C7987) * C506 + (C7990 + C7989) * C501 -
            (C7991 + C7992) * C507 - (C7993 + C7994) * C502 +
            (C8323 + C8324) * C508 + (C8325 + C8326) * C503) *
               C7788 +
           (C8303 * C506 + C8304 * C501 - C8437 * C507 - C8438 * C502 +
            (C8448 + C8447) * C508 + (C8450 + C8449) * C503) *
               C7789) *
              C50802 * C50638 * C50907 +
          (((C8629 + C8630) * C507 -
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C501 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C506) +
            (C8631 + C8632) * C502 - C8641 * C508 - C8642 * C503) *
               C7787 +
           ((C8634 + C8633) * C507 -
            ((C8632 + C8631) * C501 + (C8630 + C8629) * C506) +
            (C8636 + C8635) * C502 - (C8637 + C8638) * C508 -
            (C8639 + C8640) * C503) *
               C7788 +
           ((C8638 + C8637) * C507 - (C8642 * C501 + C8641 * C506) +
            (C8640 + C8639) * C502 -
            (C49761 * C8596 + C50617 * C8598 + C49768 * C8597 +
             C50891 * C8599) *
                C508 -
            (C49761 * C8600 + C50617 * C8602 + C49768 * C8601 +
             C50891 * C8603) *
                C503) *
               C7789) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C121 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50672) *
               C7787 +
           ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C7788 +
           (C8303 * C121 + C8304 * C50672) * C7789) *
              C50802 * C50638 * C1051 -
          ((C8642 * C50672 + C8641 * C121) * C7789 +
           ((C8632 + C8631) * C50672 + (C8630 + C8629) * C121) * C7788 +
           ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                C50672 +
            (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                C121) *
               C7787) *
              C50802 * C50638 * C1052 +
          (((C49768 * C851 + C50891 * C856 + C49761 * C852 + C50617 * C857) *
                C121 +
            (C49768 * C860 + C50891 * C866 + C49761 * C861 + C50617 * C867) *
                C50672) *
               C7787 +
           ((C8960 + C8959) * C121 + (C8962 + C8961) * C50672) * C7788 +
           ((C8964 + C8963) * C121 + (C8966 + C8965) * C50672) * C7789) *
              C50802 * C50638 * C1053 -
          (((C49761 * C9066 + C50617 * C9070 + C49768 * C9067 +
             C50891 * C9071) *
                C50672 +
            (C49761 * C9064 + C50617 * C9068 + C49768 * C9065 +
             C50891 * C9069) *
                C121) *
               C7789 +
           ((C49761 * C3453 + C50617 * C3459 + C49768 * C3454 +
             C50891 * C3460) *
                C50672 +
            (C49761 * C3450 + C50617 * C3456 + C49768 * C3451 +
             C50891 * C3457) *
                C121) *
               C7788 +
           ((C49761 * C1061 + C50617 * C1069 + C49768 * C1062 +
             C50891 * C1070) *
                C50672 +
            (C49761 * C1057 + C50617 * C1065 + C49768 * C1058 +
             C50891 * C1066) *
                C121) *
               C7787) *
              C50802 * C50638 * C1054)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50672) *
               C50776 * C50802 * C50950 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50672 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50776 * C50802 * C50936 +
           ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50672) *
               C50776 * C50802 * C1173) *
              C1514 +
          (((C117 * C379 + C105 * C385 + C118 * C380 + C106 * C386 +
             C119 * C381 + C107 * C387 + C120 * C382 + C108 * C388) *
                C121 +
            (C117 * C389 + C105 * C397 + C118 * C390 + C106 * C398 +
             C119 * C391 + C107 * C399 + C120 * C392 + C108 * C400) *
                C50672) *
               C50776 * C50802 * C50936 -
           ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
             C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                C50672 +
            (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
             C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                C121) *
               C50776 * C50802 * C50950 -
           ((C120 * C395 + C108 * C402 + C119 * C392 + C107 * C400 +
             C118 * C391 + C106 * C399 + C117 * C390 + C105 * C398) *
                C50672 +
            (C120 * C384 + C108 * C396 + C119 * C382 + C107 * C388 +
             C118 * C381 + C106 * C387 + C117 * C380 + C105 * C386) *
                C121) *
               C50776 * C50802 * C1173) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C121 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50672) *
                C7787 +
            ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C7788 +
            (C8303 * C121 + C8304 * C50672) * C7789) *
               C50802 * C50950 -
           ((C8314 * C50672 + C8313 * C121) * C7789 +
            ((C7998 + C7997) * C50672 + (C7996 + C7995) * C121) * C7788 +
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50672 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C121) *
                C7787) *
               C50802 * C50936 +
           (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                 C121 +
             (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                 C50672) *
                C7787 +
            ((C8004 + C8003) * C121 + (C8006 + C8005) * C50672) * C7788 +
            ((C8008 + C8007) * C121 + (C8010 + C8009) * C50672) * C7789) *
               C50802 * C1173) *
              C1514 +
          ((((C49768 * C379 + C50891 * C385 + C49761 * C380 + C50617 * C386) *
                 C121 +
             (C49768 * C389 + C50891 * C397 + C49761 * C390 + C50617 * C398) *
                 C50672) *
                C7787 +
            ((C9576 + C9575) * C121 + (C9578 + C9577) * C50672) * C7788 +
            ((C9580 + C9579) * C121 + (C9582 + C9581) * C50672) * C7789) *
               C50802 * C50936 -
           ((C8642 * C50672 + C8641 * C121) * C7789 +
            ((C8632 + C8631) * C50672 + (C8630 + C8629) * C121) * C7788 +
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C50672 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C121) *
                C7787) *
               C50802 * C50950 -
           (((C49761 * C738 + C50617 * C746 + C49768 * C739 + C50891 * C747) *
                 C50672 +
             (C49761 * C722 + C50617 * C734 + C49768 * C723 + C50891 * C735) *
                 C121) *
                C7789 +
            ((C49761 * C733 + C50617 * C745 + C49768 * C732 + C50891 * C744) *
                 C50672 +
             (C49761 * C721 + C50617 * C729 + C49768 * C720 + C50891 * C728) *
                 C121) *
                C7788 +
            ((C49761 * C391 + C50617 * C399 + C49768 * C390 + C50891 * C398) *
                 C50672 +
             (C49761 * C381 + C50617 * C387 + C49768 * C380 + C50891 * C386) *
                 C121) *
                C7787) *
               C50802 * C1173) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C253 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50905 -
            (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
             C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
                C254 -
            (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
             C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
                C50688) *
               C50776 * C50802 * C1277 +
           ((C117 * C257 + C105 * C263 + C118 * C256 + C106 * C262 +
             C119 * C255 + C107 * C261 + C120 * C259 + C108 * C269) *
                C254 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C50905 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C253) +
            (C117 * C267 + C105 * C275 + C118 * C266 + C106 * C274 +
             C119 * C265 + C107 * C273 + C120 * C270 + C108 * C277) *
                C50688) *
               C50776 * C50802 * C50643) *
              C1514 +
          (((C117 * C718 + C105 * C726 + C118 * C719 + C106 * C727 +
             C119 * C720 + C107 * C728 + C120 * C721 + C108 * C729) *
                C254 -
            ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
              C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                 C50905 +
             (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
              C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                 C253) +
            (C117 * C730 + C105 * C742 + C118 * C731 + C106 * C743 +
             C119 * C732 + C107 * C744 + C120 * C733 + C108 * C745) *
                C50688) *
               C50776 * C50802 * C1277 +
           ((C117 * C379 + C105 * C385 + C118 * C380 + C106 * C386 +
             C119 * C381 + C107 * C387 + C120 * C382 + C108 * C388) *
                C253 +
            (C117 * C389 + C105 * C397 + C118 * C390 + C106 * C398 +
             C119 * C391 + C107 * C399 + C120 * C392 + C108 * C400) *
                C50905 -
            (C120 * C1412 + C108 * C1413 + C119 * C721 + C107 * C729 +
             C118 * C720 + C106 * C728 + C117 * C719 + C105 * C727) *
                C254 -
            (C120 * C1414 + C108 * C1415 + C119 * C733 + C107 * C745 +
             C118 * C732 + C106 * C744 + C117 * C731 + C105 * C743) *
                C50688) *
               C50776 * C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C253 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50905 -
             (C7987 + C7988) * C254 - (C7989 + C7990) * C50688) *
                C7787 +
            ((C7988 + C7987) * C253 + (C7990 + C7989) * C50905 -
             (C7991 + C7992) * C254 - (C7993 + C7994) * C50688) *
                C7788 +
            (C8303 * C253 + C8304 * C50905 - C8437 * C254 - C8438 * C50688) *
                C7789) *
               C50802 * C1277 +
           (((C7995 + C7996) * C254 -
             ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                  C50905 +
              (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                  C253) +
             (C7997 + C7998) * C50688) *
                C7787 +
            ((C7999 + C8000) * C254 -
             ((C7998 + C7997) * C50905 + (C7996 + C7995) * C253) +
             (C8001 + C8002) * C50688) *
                C7788 +
            ((C8328 + C8327) * C254 - (C8314 * C50905 + C8313 * C253) +
             (C8330 + C8329) * C50688) *
                C7789) *
               C50802 * C50643) *
              C1514 +
          ((((C8629 + C8630) * C254 -
             ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                  C50905 +
              (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                  C253) +
             (C8631 + C8632) * C50688) *
                C7787 +
            ((C8634 + C8633) * C254 -
             ((C8632 + C8631) * C50905 + (C8630 + C8629) * C253) +
             (C8636 + C8635) * C50688) *
                C7788 +
            ((C8638 + C8637) * C254 - (C8642 * C50905 + C8641 * C253) +
             (C8640 + C8639) * C50688) *
                C7789) *
               C50802 * C1277 +
           (((C49768 * C379 + C50891 * C385 + C49761 * C380 + C50617 * C386) *
                 C253 +
             (C49768 * C389 + C50891 * C397 + C49761 * C390 + C50617 * C398) *
                 C50905 -
             (C9575 + C9576) * C254 - (C9577 + C9578) * C50688) *
                C7787 +
            ((C9576 + C9575) * C253 + (C9578 + C9577) * C50905 -
             (C9579 + C9580) * C254 - (C9581 + C9582) * C50688) *
                C7788 +
            ((C9580 + C9579) * C253 + (C9582 + C9581) * C50905 -
             (C49761 * C2981 + C50617 * C2984 + C49768 * C2982 +
              C50891 * C2985) *
                 C254 -
             (C49761 * C2987 + C50617 * C2990 + C49768 * C2988 +
              C50891 * C2991) *
                 C50688) *
                C7789) *
               C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50672) *
               C50776 * C50802 * C1277 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50672 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50776 * C50802 * C50643) *
              C50952 +
          (((C117 * C379 + C105 * C385 + C118 * C380 + C106 * C386 +
             C119 * C381 + C107 * C387 + C120 * C382 + C108 * C388) *
                C121 +
            (C117 * C389 + C105 * C397 + C118 * C390 + C106 * C398 +
             C119 * C391 + C107 * C399 + C120 * C392 + C108 * C400) *
                C50672) *
               C50776 * C50802 * C50643 -
           ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
             C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                C50672 +
            (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
             C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                C121) *
               C50776 * C50802 * C1277) *
              C50942 +
          (((C117 * C851 + C105 * C856 + C118 * C852 + C106 * C857 +
             C119 * C853 + C107 * C858 + C120 * C854 + C108 * C859) *
                C121 +
            (C117 * C860 + C105 * C866 + C118 * C861 + C106 * C867 +
             C119 * C862 + C107 * C868 + C120 * C863 + C108 * C869) *
                C50672) *
               C50776 * C50802 * C1277 -
           ((C120 * C864 + C108 * C870 + C119 * C863 + C107 * C869 +
             C118 * C862 + C106 * C868 + C117 * C861 + C105 * C867) *
                C50672 +
            (C120 * C855 + C108 * C865 + C119 * C854 + C107 * C859 +
             C118 * C853 + C106 * C858 + C117 * C852 + C105 * C857) *
                C121) *
               C50776 * C50802 * C50643) *
              C1746)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C121 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50672) *
                C7787 +
            ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C7788 +
            (C8303 * C121 + C8304 * C50672) * C7789) *
               C50802 * C1277 -
           ((C8314 * C50672 + C8313 * C121) * C7789 +
            ((C7998 + C7997) * C50672 + (C7996 + C7995) * C121) * C7788 +
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50672 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C121) *
                C7787) *
               C50802 * C50643) *
              C50952 +
          ((((C49768 * C379 + C50891 * C385 + C49761 * C380 + C50617 * C386) *
                 C121 +
             (C49768 * C389 + C50891 * C397 + C49761 * C390 + C50617 * C398) *
                 C50672) *
                C7787 +
            ((C9576 + C9575) * C121 + (C9578 + C9577) * C50672) * C7788 +
            ((C9580 + C9579) * C121 + (C9582 + C9581) * C50672) * C7789) *
               C50802 * C50643 -
           ((C8642 * C50672 + C8641 * C121) * C7789 +
            ((C8632 + C8631) * C50672 + (C8630 + C8629) * C121) * C7788 +
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C50672 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C121) *
                C7787) *
               C50802 * C1277) *
              C50942 +
          ((((C49768 * C851 + C50891 * C856 + C49761 * C852 + C50617 * C857) *
                 C121 +
             (C49768 * C860 + C50891 * C866 + C49761 * C861 + C50617 * C867) *
                 C50672) *
                C7787 +
            ((C8960 + C8959) * C121 + (C8962 + C8961) * C50672) * C7788 +
            ((C8964 + C8963) * C121 + (C8966 + C8965) * C50672) * C7789) *
               C50802 * C1277 -
           (((C49761 * C3327 + C50617 * C3330 + C49768 * C3328 +
              C50891 * C3331) *
                 C50672 +
             (C49761 * C3321 + C50617 * C3324 + C49768 * C3322 +
              C50891 * C3325) *
                 C121) *
                C7789 +
            ((C49761 * C978 + C50617 * C982 + C49768 * C979 + C50891 * C983) *
                 C50672 +
             (C49761 * C970 + C50617 * C974 + C49768 * C971 + C50891 * C975) *
                 C121) *
                C7788 +
            ((C49761 * C862 + C50617 * C868 + C49768 * C861 + C50891 * C867) *
                 C50672 +
             (C49761 * C853 + C50617 * C858 + C49768 * C852 + C50891 * C857) *
                 C121) *
                C7787) *
               C50802 * C50643) *
              C1746)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50672) *
              C50776 * C50802 * C112 -
          ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
            C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
               C50672 +
           (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
            C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
               C121) *
              C50776 * C50802 * C113 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C121 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50672) *
              C50776 * C50802 * C114 -
          ((C120 * C141 + C108 * C149 + C119 * C140 + C107 * C148 +
            C118 * C137 + C106 * C147 + C117 * C136 + C105 * C146) *
               C50672 +
           (C120 * C128 + C108 * C142 + C119 * C127 + C107 * C139 +
            C118 * C126 + C106 * C138 + C117 * C125 + C105 * C132) *
               C121) *
              C50776 * C50802 * C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C506 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C501 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C507 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C502 +
           (C117 * C509 + C105 * C514 + C118 * C510 + C106 * C515 +
            C119 * C511 + C107 * C516 + C120 * C512 + C108 * C517) *
               C508 +
           (C117 * C518 + C105 * C524 + C118 * C519 + C106 * C525 +
            C119 * C520 + C107 * C526 + C120 * C521 + C108 * C527) *
               C503) *
              C50776 * C50802 * C50898 +
          ((C117 * C257 + C105 * C263 + C118 * C256 + C106 * C262 +
            C119 * C255 + C107 * C261 + C120 * C259 + C108 * C269) *
               C507 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C501 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C506) +
           (C117 * C267 + C105 * C275 + C118 * C266 + C106 * C274 +
            C119 * C265 + C107 * C273 + C120 * C270 + C108 * C277) *
               C502 -
           (C120 * C513 + C108 * C522 + C119 * C512 + C107 * C517 +
            C118 * C511 + C106 * C516 + C117 * C510 + C105 * C515) *
               C508 -
           (C120 * C523 + C108 * C528 + C119 * C521 + C107 * C527 +
            C118 * C520 + C106 * C526 + C117 * C519 + C105 * C525) *
               C503) *
              C50776 * C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C121 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50672) *
               C7787 +
           ((C49768 * C258 + C50891 * C264 + C49761 * C257 + C50617 * C263) *
                C121 +
            (C49768 * C268 + C50891 * C276 + C49761 * C267 + C50617 * C275) *
                C50672) *
               C7788 +
           ((C49768 * C509 + C50891 * C514 + C49761 * C510 + C50617 * C515) *
                C121 +
            (C49768 * C518 + C50891 * C524 + C49761 * C519 + C50617 * C525) *
                C50672) *
               C7789) *
              C50802 * C112 -
          (((C49761 * C520 + C50617 * C526 + C49768 * C519 + C50891 * C525) *
                C50672 +
            (C49761 * C511 + C50617 * C516 + C49768 * C510 + C50891 * C515) *
                C121) *
               C7789 +
           ((C49761 * C266 + C50617 * C274 + C49768 * C267 + C50891 * C275) *
                C50672 +
            (C49761 * C256 + C50617 * C262 + C49768 * C257 + C50891 * C263) *
                C121) *
               C7788 +
           ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                C50672 +
            (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                C121) *
               C7787) *
              C50802 * C113 +
          (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                C121 +
            (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                C50672) *
               C7787 +
           ((C49768 * C256 + C50891 * C262 + C49761 * C255 + C50617 * C261) *
                C121 +
            (C49768 * C266 + C50891 * C274 + C49761 * C265 + C50617 * C273) *
                C50672) *
               C7788 +
           ((C49768 * C511 + C50891 * C516 + C49761 * C512 + C50617 * C517) *
                C121 +
            (C49768 * C520 + C50891 * C526 + C49761 * C521 + C50617 * C527) *
                C50672) *
               C7789) *
              C50802 * C114 -
          (((C49761 * C523 + C50617 * C528 + C49768 * C521 + C50891 * C527) *
                C50672 +
            (C49761 * C513 + C50617 * C522 + C49768 * C512 + C50891 * C517) *
                C121) *
               C7789 +
           ((C49761 * C270 + C50617 * C277 + C49768 * C265 + C50891 * C273) *
                C50672 +
            (C49761 * C259 + C50617 * C269 + C49768 * C255 + C50891 * C261) *
                C121) *
               C7788 +
           ((C49761 * C137 + C50617 * C147 + C49768 * C136 + C50891 * C146) *
                C50672 +
            (C49761 * C126 + C50617 * C138 + C49768 * C125 + C50891 * C132) *
                C121) *
               C7787) *
              C50802 * C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C506 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C501 -
            (C7987 + C7988) * C507 - (C7989 + C7990) * C502 + C8303 * C508 +
            C8304 * C503) *
               C7787 +
           ((C7988 + C7987) * C506 + (C7990 + C7989) * C501 -
            (C7991 + C7992) * C507 - (C7993 + C7994) * C502 +
            (C8323 + C8324) * C508 + (C8325 + C8326) * C503) *
               C7788 +
           (C8303 * C506 + C8304 * C501 - (C8324 + C8323) * C507 -
            (C8326 + C8325) * C502 +
            (C49768 * C2807 + C50891 * C2810 + C49761 * C2806 +
             C50617 * C2809) *
                C508 +
            (C49768 * C2813 + C50891 * C2816 + C49761 * C2812 +
             C50617 * C2815) *
                C503) *
               C7789) *
              C50802 * C50898 +
          (((C7995 + C7996) * C507 -
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C501 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C506) +
            (C7997 + C7998) * C502 - C8313 * C508 - C8314 * C503) *
               C7787 +
           ((C7999 + C8000) * C507 -
            ((C7998 + C7997) * C501 + (C7996 + C7995) * C506) +
            (C8001 + C8002) * C502 - (C8327 + C8328) * C508 -
            (C8329 + C8330) * C503) *
               C7788 +
           ((C8328 + C8327) * C507 - (C8314 * C501 + C8313 * C506) +
            (C8330 + C8329) * C502 -
            (C49761 * C2805 + C50617 * C2808 + C49768 * C2806 +
             C50891 * C2809) *
                C508 -
            (C49761 * C2811 + C50617 * C2814 + C49768 * C2812 +
             C50891 * C2815) *
                C503) *
               C7789) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C253 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50905 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C254 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C50688) *
              C50776 * C50802 * C250 +
          ((C117 * C257 + C105 * C263 + C118 * C256 + C106 * C262 +
            C119 * C255 + C107 * C261 + C120 * C259 + C108 * C269) *
               C254 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50905 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C253) +
           (C117 * C267 + C105 * C275 + C118 * C266 + C106 * C274 +
            C119 * C265 + C107 * C273 + C120 * C270 + C108 * C277) *
               C50688) *
              C50776 * C50802 * C251 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C253 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50905 -
           (C120 * C260 + C108 * C271 + C119 * C259 + C107 * C269 +
            C118 * C255 + C106 * C261 + C117 * C256 + C105 * C262) *
               C254 -
           (C120 * C272 + C108 * C278 + C119 * C270 + C107 * C277 +
            C118 * C265 + C106 * C273 + C117 * C266 + C105 * C274) *
               C50688) *
              C50776 * C50802 * C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 + C119 * C124 +
           C107 * C131 + C120 * C125 + C108 * C132) *
              C600 +
          (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 + C119 * C135 +
           C107 * C145 + C120 * C136 + C108 * C146) *
              C595 -
          (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 + C118 * C257 +
           C106 * C263 + C117 * C258 + C105 * C264) *
              C601 -
          (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 + C118 * C267 +
           C106 * C275 + C117 * C268 + C105 * C276) *
              C596 +
          (C117 * C509 + C105 * C514 + C118 * C510 + C106 * C515 + C119 * C511 +
           C107 * C516 + C120 * C512 + C108 * C517) *
              C602 +
          (C117 * C518 + C105 * C524 + C118 * C519 + C106 * C525 + C119 * C520 +
           C107 * C526 + C120 * C521 + C108 * C527) *
              C597 -
          (C120 * C604 + C108 * C608 + C119 * C605 + C107 * C609 + C118 * C606 +
           C106 * C610 + C117 * C607 + C105 * C611) *
              C603 -
          (C120 * C612 + C108 * C616 + C119 * C613 + C107 * C617 + C118 * C614 +
           C106 * C618 + C117 * C615 + C105 * C619) *
              C598) *
         C50776 * C50802 * C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C253 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C50905 -
            (C7987 + C7988) * C254 - (C7989 + C7990) * C50688) *
               C7787 +
           ((C7988 + C7987) * C253 + (C7990 + C7989) * C50905 -
            (C7991 + C7992) * C254 - (C7993 + C7994) * C50688) *
               C7788 +
           ((C7992 + C7991) * C253 + (C7994 + C7993) * C50905 -
            (C49761 * C606 + C50617 * C610 + C49768 * C607 + C50891 * C611) *
                C254 -
            (C49761 * C614 + C50617 * C618 + C49768 * C615 + C50891 * C619) *
                C50688) *
               C7789) *
              C50802 * C250 +
          (((C7995 + C7996) * C254 -
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50905 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C253) +
            (C7997 + C7998) * C50688) *
               C7787 +
           ((C7999 + C8000) * C254 -
            ((C7998 + C7997) * C50905 + (C7996 + C7995) * C253) +
            (C8001 + C8002) * C50688) *
               C7788 +
           ((C49768 * C606 + C50891 * C610 + C49761 * C605 + C50617 * C609) *
                C254 -
            ((C8002 + C8001) * C50905 + (C8000 + C7999) * C253) +
            (C49768 * C614 + C50891 * C618 + C49761 * C613 + C50617 * C617) *
                C50688) *
               C7789) *
              C50802 * C251 +
          (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                C253 +
            (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                C50905 -
            (C8003 + C8004) * C254 - (C8005 + C8006) * C50688) *
               C7787 +
           ((C8004 + C8003) * C253 + (C8006 + C8005) * C50905 -
            (C8007 + C8008) * C254 - (C8009 + C8010) * C50688) *
               C7788 +
           ((C8008 + C8007) * C253 + (C8010 + C8009) * C50905 -
            (C49761 * C604 + C50617 * C608 + C49768 * C605 + C50891 * C609) *
                C254 -
            (C49761 * C612 + C50617 * C616 + C49768 * C613 + C50891 * C617) *
                C50688) *
               C7789) *
              C50802 * C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
               C600 +
           (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
               C595 -
           (C7987 + C7988) * C601 - (C7989 + C7990) * C596 + C8303 * C602 +
           C8304 * C597 - C8437 * C603 - C8438 * C598) *
              C7787 +
          ((C7988 + C7987) * C600 + (C7990 + C7989) * C595 -
           (C7991 + C7992) * C601 - (C7993 + C7994) * C596 +
           (C8323 + C8324) * C602 + (C8325 + C8326) * C597 -
           (C8447 + C8448) * C603 - (C8449 + C8450) * C598) *
              C7788 +
          (C8303 * C600 + C8304 * C595 - C8437 * C601 - C8438 * C596 +
           (C8448 + C8447) * C602 + (C8450 + C8449) * C597 -
           (C49761 * C8428 + C50617 * C8430 + C49768 * C8429 + C50891 * C8431) *
               C603 -
           (C49761 * C8432 + C50617 * C8434 + C49768 * C8433 + C50891 * C8435) *
               C598) *
              C7789) *
         C50802 * C50638 * C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50672) *
               C50776 * C50802 * C250 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50672 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50776 * C50802 * C251 +
           ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50672) *
               C50776 * C50802 * C252) *
              C50907 +
          (((C117 * C379 + C105 * C385 + C118 * C380 + C106 * C386 +
             C119 * C381 + C107 * C387 + C120 * C382 + C108 * C388) *
                C121 +
            (C117 * C389 + C105 * C397 + C118 * C390 + C106 * C398 +
             C119 * C391 + C107 * C399 + C120 * C392 + C108 * C400) *
                C50672) *
               C50776 * C50802 * C251 -
           ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
             C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                C50672 +
            (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
             C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                C121) *
               C50776 * C50802 * C250 -
           ((C120 * C395 + C108 * C402 + C119 * C392 + C107 * C400 +
             C118 * C391 + C106 * C399 + C117 * C390 + C105 * C398) *
                C50672 +
            (C120 * C384 + C108 * C396 + C119 * C382 + C107 * C388 +
             C118 * C381 + C106 * C387 + C117 * C380 + C105 * C386) *
                C121) *
               C50776 * C50802 * C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C506 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C501 -
           (C120 * C255 + C108 * C261 + C119 * C256 + C107 * C262 +
            C118 * C257 + C106 * C263 + C117 * C258 + C105 * C264) *
               C507 -
           (C120 * C265 + C108 * C273 + C119 * C266 + C107 * C274 +
            C118 * C267 + C106 * C275 + C117 * C268 + C105 * C276) *
               C502 +
           (C117 * C509 + C105 * C514 + C118 * C510 + C106 * C515 +
            C119 * C511 + C107 * C516 + C120 * C512 + C108 * C517) *
               C508 +
           (C117 * C518 + C105 * C524 + C118 * C519 + C106 * C525 +
            C119 * C520 + C107 * C526 + C120 * C521 + C108 * C527) *
               C503) *
              C50776 * C50802 * C50638 * C50907 +
          ((C117 * C718 + C105 * C726 + C118 * C719 + C106 * C727 +
            C119 * C720 + C107 * C728 + C120 * C721 + C108 * C729) *
               C507 -
           ((C120 * C391 + C108 * C399 + C119 * C390 + C107 * C398 +
             C118 * C389 + C106 * C397 + C117 * C393 + C105 * C401) *
                C501 +
            (C120 * C381 + C108 * C387 + C119 * C380 + C107 * C386 +
             C118 * C379 + C106 * C385 + C117 * C383 + C105 * C394) *
                C506) +
           (C117 * C730 + C105 * C742 + C118 * C731 + C106 * C743 +
            C119 * C732 + C107 * C744 + C120 * C733 + C108 * C745) *
               C502 -
           (C120 * C722 + C108 * C734 + C119 * C723 + C107 * C735 +
            C118 * C724 + C106 * C736 + C117 * C725 + C105 * C737) *
               C508 -
           (C120 * C738 + C108 * C746 + C119 * C739 + C107 * C747 +
            C118 * C740 + C106 * C748 + C117 * C741 + C105 * C749) *
               C503) *
              C50776 * C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                 C121 +
             (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                 C50672) *
                C7787 +
            ((C7988 + C7987) * C121 + (C7990 + C7989) * C50672) * C7788 +
            ((C7992 + C7991) * C121 + (C7994 + C7993) * C50672) * C7789) *
               C50802 * C250 -
           (((C8002 + C8001) * C50672 + (C8000 + C7999) * C121) * C7789 +
            ((C7998 + C7997) * C50672 + (C7996 + C7995) * C121) * C7788 +
            ((C49761 * C135 + C50617 * C145 + C49768 * C134 + C50891 * C144) *
                 C50672 +
             (C49761 * C124 + C50617 * C131 + C49768 * C123 + C50891 * C130) *
                 C121) *
                C7787) *
               C50802 * C251 +
           (((C49768 * C124 + C50891 * C131 + C49761 * C125 + C50617 * C132) *
                 C121 +
             (C49768 * C135 + C50891 * C145 + C49761 * C136 + C50617 * C146) *
                 C50672) *
                C7787 +
            ((C8004 + C8003) * C121 + (C8006 + C8005) * C50672) * C7788 +
            ((C8008 + C8007) * C121 + (C8010 + C8009) * C50672) * C7789) *
               C50802 * C252) *
              C50907 +
          ((((C49768 * C379 + C50891 * C385 + C49761 * C380 + C50617 * C386) *
                 C121 +
             (C49768 * C389 + C50891 * C397 + C49761 * C390 + C50617 * C398) *
                 C50672) *
                C7787 +
            ((C49768 * C719 + C50891 * C727 + C49761 * C720 + C50617 * C728) *
                 C121 +
             (C49768 * C731 + C50891 * C743 + C49761 * C732 + C50617 * C744) *
                 C50672) *
                C7788 +
            ((C49768 * C724 + C50891 * C736 + C49761 * C723 + C50617 * C735) *
                 C121 +
             (C49768 * C740 + C50891 * C748 + C49761 * C739 + C50617 * C747) *
                 C50672) *
                C7789) *
               C50802 * C251 -
           (((C49761 * C740 + C50617 * C748 + C49768 * C741 + C50891 * C749) *
                 C50672 +
             (C49761 * C724 + C50617 * C736 + C49768 * C725 + C50891 * C737) *
                 C121) *
                C7789 +
            ((C49761 * C731 + C50617 * C743 + C49768 * C730 + C50891 * C742) *
                 C50672 +
             (C49761 * C719 + C50617 * C727 + C49768 * C718 + C50891 * C726) *
                 C121) *
                C7788 +
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C50672 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C121) *
                C7787) *
               C50802 * C250 -
           (((C49761 * C738 + C50617 * C746 + C49768 * C739 + C50891 * C747) *
                 C50672 +
             (C49761 * C722 + C50617 * C734 + C49768 * C723 + C50891 * C735) *
                 C121) *
                C7789 +
            ((C49761 * C733 + C50617 * C745 + C49768 * C732 + C50891 * C744) *
                 C50672 +
             (C49761 * C721 + C50617 * C729 + C49768 * C720 + C50891 * C728) *
                 C121) *
                C7788 +
            ((C49761 * C391 + C50617 * C399 + C49768 * C390 + C50891 * C398) *
                 C50672 +
             (C49761 * C381 + C50617 * C387 + C49768 * C380 + C50891 * C386) *
                 C121) *
                C7787) *
               C50802 * C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C49768 * C122 + C50891 * C129 + C49761 * C123 + C50617 * C130) *
                C506 +
            (C49768 * C133 + C50891 * C143 + C49761 * C134 + C50617 * C144) *
                C501 -
            (C7987 + C7988) * C507 - (C7989 + C7990) * C502 + C8303 * C508 +
            C8304 * C503) *
               C7787 +
           ((C7988 + C7987) * C506 + (C7990 + C7989) * C501 -
            (C7991 + C7992) * C507 - (C7993 + C7994) * C502 +
            (C8323 + C8324) * C508 + (C8325 + C8326) * C503) *
               C7788 +
           (C8303 * C506 + C8304 * C501 - C8437 * C507 - C8438 * C502 +
            (C8448 + C8447) * C508 + (C8450 + C8449) * C503) *
               C7789) *
              C50802 * C50638 * C50907 +
          (((C8629 + C8630) * C507 -
            ((C49761 * C389 + C50617 * C397 + C49768 * C393 + C50891 * C401) *
                 C501 +
             (C49761 * C379 + C50617 * C385 + C49768 * C383 + C50891 * C394) *
                 C506) +
            (C8631 + C8632) * C502 - C8641 * C508 - C8642 * C503) *
               C7787 +
           ((C8634 + C8633) * C507 -
            ((C8632 + C8631) * C501 + (C8630 + C8629) * C506) +
            (C8636 + C8635) * C502 - (C8637 + C8638) * C508 -
            (C8639 + C8640) * C503) *
               C7788 +
           ((C8638 + C8637) * C507 - (C8642 * C501 + C8641 * C506) +
            (C8640 + C8639) * C502 -
            (C49761 * C8596 + C50617 * C8598 + C49768 * C8597 +
             C50891 * C8599) *
                C508 -
            (C49761 * C8600 + C50617 * C8602 + C49768 * C8601 +
             C50891 * C8603) *
                C503) *
               C7789) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1174 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C1169 -
            (C2362 + C2363 + C2364) * C1175 -
            (C2365 + C2366 + C2367) * C50688) *
               C50919 +
           ((C2364 + C2363 + C2362) * C1174 + (C2367 + C2366 + C2365) * C1169 -
            (C2698 + C2697 + C2696) * C1175 -
            (C2701 + C2700 + C2699) * C50688) *
               C50790) *
              C50802 * C50950 +
          (((C2368 + C2369 + C2370) * C1175 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C1169 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C1174) +
            (C2371 + C2372 + C2373) * C50688) *
               C50919 +
           ((C2704 + C2703 + C2702) * C1175 -
            ((C2373 + C2372 + C2371) * C1169 +
             (C2370 + C2369 + C2368) * C1174) +
            (C2707 + C2706 + C2705) * C50688) *
               C50790) *
              C50802 * C50936 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C1174 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C1169 -
            (C2374 + C2375 + C2376) * C1175 -
            (C2377 + C2378 + C2379) * C50688) *
               C50919 +
           ((C2376 + C2375 + C2374) * C1174 + (C2379 + C2378 + C2377) * C1169 -
            (C2178 * C513 + C2173 * C522 + C2177 * C512 + C2172 * C517 +
             C2176 * C511 + C2171 * C516) *
                C1175 -
            (C2178 * C523 + C2173 * C528 + C2177 * C521 + C2172 * C527 +
             C2176 * C520 + C2171 * C526) *
                C50688) *
               C50790) *
              C50802 * C1173) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C1174 +
            (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
            C10762 * C50688) *
               C10621 +
           (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
            C10764 * C50688) *
               C10622 +
           (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
            C10766 * C50688) *
               C10623 +
           (C10765 * C1174 + C10766 * C1169 - C10983 * C1175 -
            C10984 * C50688) *
               C10624) *
              C50802 * C50950 +
          ((C10767 * C1175 -
            ((C10625 * C134 + C50612 * C144) * C1169 +
             (C10625 * C123 + C50612 * C130) * C1174) +
            C10768 * C50688) *
               C10621 +
           (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
            C10770 * C50688) *
               C10622 +
           (C10771 * C1175 - (C10770 * C1169 + C10769 * C1174) +
            C10772 * C50688) *
               C10623 +
           (C10985 * C1175 - (C10772 * C1169 + C10771 * C1174) +
            C10986 * C50688) *
               C10624) *
              C50802 * C50936 +
          (((C10625 * C124 + C50612 * C131) * C1174 +
            (C10625 * C135 + C50612 * C145) * C1169 - C10773 * C1175 -
            C10774 * C50688) *
               C10621 +
           (C10773 * C1174 + C10774 * C1169 - C10775 * C1175 -
            C10776 * C50688) *
               C10622 +
           (C10775 * C1174 + C10776 * C1169 - C10777 * C1175 -
            C10778 * C50688) *
               C10623 +
           (C10777 * C1174 + C10778 * C1169 -
            (C10625 * C2805 + C50612 * C2808) * C1175 -
            (C10625 * C2811 + C50612 * C2814) * C50688) *
               C10624) *
              C50802 * C1173) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1279 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50951 -
            (C2362 + C2363 + C2364) * C1280 - (C2365 + C2366 + C2367) * C50939 +
            (C2696 + C2697 + C2698) * C1281 + (C2699 + C2700 + C2701) * C1276) *
               C50919 +
           ((C2364 + C2363 + C2362) * C1279 + (C2367 + C2366 + C2365) * C50951 -
            (C2698 + C2697 + C2696) * C1280 - (C2701 + C2700 + C2699) * C50939 +
            (C2832 + C2831 + C2830) * C1281 + (C2835 + C2834 + C2833) * C1276) *
               C50790) *
              C50802 * C1277 +
          (((C2368 + C2369 + C2370) * C1280 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50951 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C1279) +
            (C2371 + C2372 + C2373) * C50939 - (C2702 + C2703 + C2704) * C1281 -
            (C2705 + C2706 + C2707) * C1276) *
               C50919 +
           ((C2704 + C2703 + C2702) * C1280 -
            ((C2373 + C2372 + C2371) * C50951 +
             (C2370 + C2369 + C2368) * C1279) +
            (C2707 + C2706 + C2705) * C50939 -
            (C2178 * C604 + C2173 * C608 + C2177 * C605 + C2172 * C609 +
             C2176 * C606 + C2171 * C610) *
                C1281 -
            (C2178 * C612 + C2173 * C616 + C2177 * C613 + C2172 * C617 +
             C2176 * C614 + C2171 * C618) *
                C1276) *
               C50790) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C1279 +
            (C10625 * C133 + C50612 * C143) * C50951 - C10761 * C1280 -
            C10762 * C50939 + C10763 * C1281 + C10764 * C1276) *
               C10621 +
           (C10761 * C1279 + C10762 * C50951 - C10763 * C1280 -
            C10764 * C50939 + C10765 * C1281 + C10766 * C1276) *
               C10622 +
           (C10763 * C1279 + C10764 * C50951 - C10765 * C1280 -
            C10766 * C50939 + C10983 * C1281 + C10984 * C1276) *
               C10623 +
           (C10765 * C1279 + C10766 * C50951 - C10983 * C1280 -
            C10984 * C50939 + C11061 * C1281 + C11062 * C1276) *
               C10624) *
              C50802 * C1277 +
          ((C10767 * C1280 -
            ((C10625 * C134 + C50612 * C144) * C50951 +
             (C10625 * C123 + C50612 * C130) * C1279) +
            C10768 * C50939 - C10769 * C1281 - C10770 * C1276) *
               C10621 +
           (C10769 * C1280 - (C10768 * C50951 + C10767 * C1279) +
            C10770 * C50939 - C10771 * C1281 - C10772 * C1276) *
               C10622 +
           (C10771 * C1280 - (C10770 * C50951 + C10769 * C1279) +
            C10772 * C50939 - C10985 * C1281 - C10986 * C1276) *
               C10623 +
           (C10985 * C1280 - (C10772 * C50951 + C10771 * C1279) +
            C10986 * C50939 - (C10625 * C8428 + C50612 * C8430) * C1281 -
            (C10625 * C8432 + C50612 * C8434) * C1276) *
               C10624) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C1174 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C1169 -
             (C2362 + C2363 + C2364) * C1175 -
             (C2365 + C2366 + C2367) * C50688) *
                C50919 +
            ((C2364 + C2363 + C2362) * C1174 + (C2367 + C2366 + C2365) * C1169 -
             (C2698 + C2697 + C2696) * C1175 -
             (C2701 + C2700 + C2699) * C50688) *
                C50790) *
               C50802 * C1277 +
           (((C2368 + C2369 + C2370) * C1175 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C1169 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C1174) +
             (C2371 + C2372 + C2373) * C50688) *
                C50919 +
            ((C2704 + C2703 + C2702) * C1175 -
             ((C2373 + C2372 + C2371) * C1169 +
              (C2370 + C2369 + C2368) * C1174) +
             (C2707 + C2706 + C2705) * C50688) *
                C50790) *
               C50802 * C50643) *
              C50907 +
          ((((C3018 + C3019 + C3020) * C1175 -
             ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
               C2176 * C393 + C2171 * C401) *
                  C1169 +
              (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
               C2176 * C383 + C2171 * C394) *
                  C1174) +
             (C3021 + C3022 + C3023) * C50688) *
                C50919 +
            ((C3026 + C3025 + C3024) * C1175 -
             ((C3023 + C3022 + C3021) * C1169 +
              (C3020 + C3019 + C3018) * C1174) +
             (C3029 + C3028 + C3027) * C50688) *
                C50790) *
               C50802 * C1277 +
           (((C2176 * C379 + C2171 * C385 + C2177 * C380 + C2172 * C386 +
              C2178 * C381 + C2173 * C387) *
                 C1174 +
             (C2176 * C389 + C2171 * C397 + C2177 * C390 + C2172 * C398 +
              C2178 * C391 + C2173 * C399) *
                 C1169 -
             (C3960 + C3961 + C3962) * C1175 -
             (C3963 + C3964 + C3965) * C50688) *
                C50919 +
            ((C3962 + C3961 + C3960) * C1174 + (C3965 + C3964 + C3963) * C1169 -
             (C2178 * C722 + C2173 * C734 + C2177 * C723 + C2172 * C735 +
              C2176 * C724 + C2171 * C736) *
                 C1175 -
             (C2178 * C738 + C2173 * C746 + C2177 * C739 + C2172 * C747 +
              C2176 * C740 + C2171 * C748) *
                 C50688) *
                C50790) *
               C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1174 +
             (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
             C10762 * C50688) *
                C10621 +
            (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
             C10764 * C50688) *
                C10622 +
            (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
             C10766 * C50688) *
                C10623 +
            (C10765 * C1174 + C10766 * C1169 - C10983 * C1175 -
             C10984 * C50688) *
                C10624) *
               C50802 * C1277 +
           ((C10767 * C1175 -
             ((C10625 * C134 + C50612 * C144) * C1169 +
              (C10625 * C123 + C50612 * C130) * C1174) +
             C10768 * C50688) *
                C10621 +
            (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
             C10770 * C50688) *
                C10622 +
            (C10771 * C1175 - (C10770 * C1169 + C10769 * C1174) +
             C10772 * C50688) *
                C10623 +
            (C10985 * C1175 - (C10772 * C1169 + C10771 * C1174) +
             C10986 * C50688) *
                C10624) *
               C50802 * C50643) *
              C50907 +
          (((C11181 * C1175 -
             ((C10625 * C393 + C50612 * C401) * C1169 +
              (C10625 * C383 + C50612 * C394) * C1174) +
             C11182 * C50688) *
                C10621 +
            (C11183 * C1175 - (C11182 * C1169 + C11181 * C1174) +
             C11184 * C50688) *
                C10622 +
            (C11185 * C1175 - (C11184 * C1169 + C11183 * C1174) +
             C11186 * C50688) *
                C10623 +
            (C11187 * C1175 - (C11186 * C1169 + C11185 * C1174) +
             C11188 * C50688) *
                C10624) *
               C50802 * C1277 +
           (((C10625 * C379 + C50612 * C385) * C1174 +
             (C10625 * C389 + C50612 * C397) * C1169 - C11815 * C1175 -
             C11816 * C50688) *
                C10621 +
            (C11815 * C1174 + C11816 * C1169 - C11817 * C1175 -
             C11818 * C50688) *
                C10622 +
            (C11817 * C1174 + C11818 * C1169 - C11819 * C1175 -
             C11820 * C50688) *
                C10623 +
            (C11819 * C1174 + C11820 * C1169 -
             (C10625 * C8596 + C50612 * C8598) * C1175 -
             (C10625 * C8600 + C50612 * C8602) * C50688) *
                C10624) *
               C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C1174 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C1169 -
             (C2362 + C2363 + C2364) * C1175 -
             (C2365 + C2366 + C2367) * C50688) *
                C50919 +
            ((C2364 + C2363 + C2362) * C1174 + (C2367 + C2366 + C2365) * C1169 -
             (C2698 + C2697 + C2696) * C1175 -
             (C2701 + C2700 + C2699) * C50688) *
                C50790) *
               C50802 * C50898 +
           (((C2368 + C2369 + C2370) * C1175 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C1169 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C1174) +
             (C2371 + C2372 + C2373) * C50688) *
                C50919 +
            ((C2704 + C2703 + C2702) * C1175 -
             ((C2373 + C2372 + C2371) * C1169 +
              (C2370 + C2369 + C2368) * C1174) +
             (C2707 + C2706 + C2705) * C50688) *
                C50790) *
               C50802 * C50643) *
              C1514 +
          ((((C3018 + C3019 + C3020) * C1175 -
             ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
               C2176 * C393 + C2171 * C401) *
                  C1169 +
              (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
               C2176 * C383 + C2171 * C394) *
                  C1174) +
             (C3021 + C3022 + C3023) * C50688) *
                C50919 +
            ((C3026 + C3025 + C3024) * C1175 -
             ((C3023 + C3022 + C3021) * C1169 +
              (C3020 + C3019 + C3018) * C1174) +
             (C3029 + C3028 + C3027) * C50688) *
                C50790) *
               C50802 * C50898 +
           (((C2176 * C379 + C2171 * C385 + C2177 * C380 + C2172 * C386 +
              C2178 * C381 + C2173 * C387) *
                 C1174 +
             (C2176 * C389 + C2171 * C397 + C2177 * C390 + C2172 * C398 +
              C2178 * C391 + C2173 * C399) *
                 C1169 -
             (C3960 + C3961 + C3962) * C1175 -
             (C3963 + C3964 + C3965) * C50688) *
                C50919 +
            ((C3962 + C3961 + C3960) * C1174 + (C3965 + C3964 + C3963) * C1169 -
             (C2178 * C722 + C2173 * C734 + C2177 * C723 + C2172 * C735 +
              C2176 * C724 + C2171 * C736) *
                 C1175 -
             (C2178 * C738 + C2173 * C746 + C2177 * C739 + C2172 * C747 +
              C2176 * C740 + C2171 * C748) *
                 C50688) *
                C50790) *
               C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1174 +
             (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
             C10762 * C50688) *
                C10621 +
            (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
             C10764 * C50688) *
                C10622 +
            (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
             C10766 * C50688) *
                C10623 +
            (C10765 * C1174 + C10766 * C1169 - C10983 * C1175 -
             C10984 * C50688) *
                C10624) *
               C50802 * C50898 +
           ((C10767 * C1175 -
             ((C10625 * C134 + C50612 * C144) * C1169 +
              (C10625 * C123 + C50612 * C130) * C1174) +
             C10768 * C50688) *
                C10621 +
            (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
             C10770 * C50688) *
                C10622 +
            (C10771 * C1175 - (C10770 * C1169 + C10769 * C1174) +
             C10772 * C50688) *
                C10623 +
            (C10985 * C1175 - (C10772 * C1169 + C10771 * C1174) +
             C10986 * C50688) *
                C10624) *
               C50802 * C50643) *
              C1514 +
          (((C11181 * C1175 -
             ((C10625 * C393 + C50612 * C401) * C1169 +
              (C10625 * C383 + C50612 * C394) * C1174) +
             C11182 * C50688) *
                C10621 +
            (C11183 * C1175 - (C11182 * C1169 + C11181 * C1174) +
             C11184 * C50688) *
                C10622 +
            (C11185 * C1175 - (C11184 * C1169 + C11183 * C1174) +
             C11186 * C50688) *
                C10623 +
            (C11187 * C1175 - (C11186 * C1169 + C11185 * C1174) +
             C11188 * C50688) *
                C10624) *
               C50802 * C50898 +
           (((C10625 * C379 + C50612 * C385) * C1174 +
             (C10625 * C389 + C50612 * C397) * C1169 - C11815 * C1175 -
             C11816 * C50688) *
                C10621 +
            (C11815 * C1174 + C11816 * C1169 - C11817 * C1175 -
             C11818 * C50688) *
                C10622 +
            (C11817 * C1174 + C11818 * C1169 - C11819 * C1175 -
             C11820 * C50688) *
                C10623 +
            (C11819 * C1174 + C11820 * C1169 -
             (C10625 * C8596 + C50612 * C8598) * C1175 -
             (C10625 * C8600 + C50612 * C8602) * C50688) *
                C10624) *
               C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1279 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50951 -
            (C2362 + C2363 + C2364) * C1280 - (C2365 + C2366 + C2367) * C50939 +
            (C2696 + C2697 + C2698) * C1281 + (C2699 + C2700 + C2701) * C1276) *
               C50919 +
           ((C2364 + C2363 + C2362) * C1279 + (C2367 + C2366 + C2365) * C50951 -
            (C2698 + C2697 + C2696) * C1280 - (C2701 + C2700 + C2699) * C50939 +
            (C2832 + C2831 + C2830) * C1281 + (C2835 + C2834 + C2833) * C1276) *
               C50790) *
              C50802 * C50638 * C1514 +
          (((C3018 + C3019 + C3020) * C1280 -
            ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
              C2176 * C393 + C2171 * C401) *
                 C50951 +
             (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
              C2176 * C383 + C2171 * C394) *
                 C1279) +
            (C3021 + C3022 + C3023) * C50939 - (C3024 + C3025 + C3026) * C1281 -
            (C3027 + C3028 + C3029) * C1276) *
               C50919 +
           ((C3026 + C3025 + C3024) * C1280 -
            ((C3023 + C3022 + C3021) * C50951 +
             (C3020 + C3019 + C3018) * C1279) +
            (C3029 + C3028 + C3027) * C50939 -
            (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
             C2176 * C2983 + C2171 * C2986) *
                C1281 -
            (C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
             C2176 * C2989 + C2171 * C2992) *
                C1276) *
               C50790) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C1279 +
            (C10625 * C133 + C50612 * C143) * C50951 - C10761 * C1280 -
            C10762 * C50939 + C10763 * C1281 + C10764 * C1276) *
               C10621 +
           (C10761 * C1279 + C10762 * C50951 - C10763 * C1280 -
            C10764 * C50939 + C10765 * C1281 + C10766 * C1276) *
               C10622 +
           (C10763 * C1279 + C10764 * C50951 - C10765 * C1280 -
            C10766 * C50939 + C10983 * C1281 + C10984 * C1276) *
               C10623 +
           (C10765 * C1279 + C10766 * C50951 - C10983 * C1280 -
            C10984 * C50939 + C11061 * C1281 + C11062 * C1276) *
               C10624) *
              C50802 * C50638 * C1514 +
          ((C11181 * C1280 -
            ((C10625 * C393 + C50612 * C401) * C50951 +
             (C10625 * C383 + C50612 * C394) * C1279) +
            C11182 * C50939 - C11183 * C1281 - C11184 * C1276) *
               C10621 +
           (C11183 * C1280 - (C11182 * C50951 + C11181 * C1279) +
            C11184 * C50939 - C11185 * C1281 - C11186 * C1276) *
               C10622 +
           (C11185 * C1280 - (C11184 * C50951 + C11183 * C1279) +
            C11186 * C50939 - C11187 * C1281 - C11188 * C1276) *
               C10623 +
           (C11187 * C1280 - (C11186 * C50951 + C11185 * C1279) +
            C11188 * C50939 - (C10625 * C11160 + C50612 * C11161) * C1281 -
            (C10625 * C11162 + C50612 * C11163) * C1276) *
               C10624) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1174 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C1169 -
            (C2362 + C2363 + C2364) * C1175 -
            (C2365 + C2366 + C2367) * C50688) *
               C50919 +
           ((C2364 + C2363 + C2362) * C1174 + (C2367 + C2366 + C2365) * C1169 -
            (C2698 + C2697 + C2696) * C1175 -
            (C2701 + C2700 + C2699) * C50688) *
               C50790) *
              C50802 * C50638 * C50952 +
          (((C3018 + C3019 + C3020) * C1175 -
            ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
              C2176 * C393 + C2171 * C401) *
                 C1169 +
             (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
              C2176 * C383 + C2171 * C394) *
                 C1174) +
            (C3021 + C3022 + C3023) * C50688) *
               C50919 +
           ((C3026 + C3025 + C3024) * C1175 -
            ((C3023 + C3022 + C3021) * C1169 +
             (C3020 + C3019 + C3018) * C1174) +
            (C3029 + C3028 + C3027) * C50688) *
               C50790) *
              C50802 * C50638 * C50942 +
          (((C2176 * C851 + C2171 * C856 + C2177 * C852 + C2172 * C857 +
             C2178 * C853 + C2173 * C858) *
                C1174 +
            (C2176 * C860 + C2171 * C866 + C2177 * C861 + C2172 * C867 +
             C2178 * C862 + C2173 * C868) *
                C1169 -
            (C3346 + C3347 + C3348) * C1175 -
            (C3349 + C3350 + C3351) * C50688) *
               C50919 +
           ((C3348 + C3347 + C3346) * C1174 + (C3351 + C3350 + C3349) * C1169 -
            (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
             C2176 * C3323 + C2171 * C3326) *
                C1175 -
            (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
             C2176 * C3329 + C2171 * C3332) *
                C50688) *
               C50790) *
              C50802 * C50638 * C1746)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C1174 +
            (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
            C10762 * C50688) *
               C10621 +
           (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
            C10764 * C50688) *
               C10622 +
           (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
            C10766 * C50688) *
               C10623 +
           (C10765 * C1174 + C10766 * C1169 - C10983 * C1175 -
            C10984 * C50688) *
               C10624) *
              C50802 * C50638 * C50952 +
          ((C11181 * C1175 -
            ((C10625 * C393 + C50612 * C401) * C1169 +
             (C10625 * C383 + C50612 * C394) * C1174) +
            C11182 * C50688) *
               C10621 +
           (C11183 * C1175 - (C11182 * C1169 + C11181 * C1174) +
            C11184 * C50688) *
               C10622 +
           (C11185 * C1175 - (C11184 * C1169 + C11183 * C1174) +
            C11186 * C50688) *
               C10623 +
           (C11187 * C1175 - (C11186 * C1169 + C11185 * C1174) +
            C11188 * C50688) *
               C10624) *
              C50802 * C50638 * C50942 +
          (((C10625 * C851 + C50612 * C856) * C1174 +
            (C10625 * C860 + C50612 * C866) * C1169 - C11401 * C1175 -
            C11402 * C50688) *
               C10621 +
           (C11401 * C1174 + C11402 * C1169 - C11403 * C1175 -
            C11404 * C50688) *
               C10622 +
           (C11403 * C1174 + C11404 * C1169 - C11405 * C1175 -
            C11406 * C50688) *
               C10623 +
           (C11405 * C1174 + C11406 * C1169 -
            (C10625 * C11384 + C50612 * C11385) * C1175 -
            (C10625 * C11386 + C50612 * C11387) * C50688) *
               C10624) *
              C50802 * C50638 * C1746)) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C506 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C501 -
            (C2362 + C2363 + C2364) * C507 - (C2365 + C2366 + C2367) * C502 +
            (C2696 + C2697 + C2698) * C508 + (C2699 + C2700 + C2701) * C503) *
               C50919 +
           ((C2364 + C2363 + C2362) * C506 + (C2367 + C2366 + C2365) * C501 -
            (C2698 + C2697 + C2696) * C507 - (C2701 + C2700 + C2699) * C502 +
            (C2176 * C607 + C2171 * C611 + C2177 * C606 + C2172 * C610 +
             C2178 * C605 + C2173 * C609) *
                C508 +
            (C2176 * C615 + C2171 * C619 + C2177 * C614 + C2172 * C618 +
             C2178 * C613 + C2173 * C617) *
                C503) *
               C50790) *
              C50802 * C50898 +
          (((C2368 + C2369 + C2370) * C507 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C501 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C506) +
            (C2371 + C2372 + C2373) * C502 - (C2702 + C2703 + C2704) * C508 -
            (C2705 + C2706 + C2707) * C503) *
               C50919 +
           ((C2704 + C2703 + C2702) * C507 -
            ((C2373 + C2372 + C2371) * C501 + (C2370 + C2369 + C2368) * C506) +
            (C2707 + C2706 + C2705) * C502 -
            (C2178 * C604 + C2173 * C608 + C2177 * C605 + C2172 * C609 +
             C2176 * C606 + C2171 * C610) *
                C508 -
            (C2178 * C612 + C2173 * C616 + C2177 * C613 + C2172 * C617 +
             C2176 * C614 + C2171 * C618) *
                C503) *
               C50790) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50672) *
               C50919 +
           ((C2176 * C258 + C2171 * C264 + C2177 * C257 + C2172 * C263 +
             C2178 * C256 + C2173 * C262) *
                C121 +
            (C2176 * C268 + C2171 * C276 + C2177 * C267 + C2172 * C275 +
             C2178 * C266 + C2173 * C274) *
                C50672) *
               C50790) *
              C50802 * C112 -
          (((C2178 * C265 + C2173 * C273 + C2177 * C266 + C2172 * C274 +
             C2176 * C267 + C2171 * C275) *
                C50672 +
            (C2178 * C255 + C2173 * C261 + C2177 * C256 + C2172 * C262 +
             C2176 * C257 + C2171 * C263) *
                C121) *
               C50790 +
           ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
             C2176 * C134 + C2171 * C144) *
                C50672 +
            (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
             C2176 * C123 + C2171 * C130) *
                C121) *
               C50919) *
              C50802 * C113 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C121 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50672) *
               C50919 +
           ((C2176 * C256 + C2171 * C262 + C2177 * C255 + C2172 * C261 +
             C2178 * C259 + C2173 * C269) *
                C121 +
            (C2176 * C266 + C2171 * C274 + C2177 * C265 + C2172 * C273 +
             C2178 * C270 + C2173 * C277) *
                C50672) *
               C50790) *
              C50802 * C114 -
          (((C2178 * C272 + C2173 * C278 + C2177 * C270 + C2172 * C277 +
             C2176 * C265 + C2171 * C273) *
                C50672 +
            (C2178 * C260 + C2173 * C271 + C2177 * C259 + C2172 * C269 +
             C2176 * C255 + C2171 * C261) *
                C121) *
               C50790 +
           ((C2178 * C140 + C2173 * C148 + C2177 * C137 + C2172 * C147 +
             C2176 * C136 + C2171 * C146) *
                C50672 +
            (C2178 * C127 + C2173 * C139 + C2177 * C126 + C2172 * C138 +
             C2176 * C125 + C2171 * C132) *
                C121) *
               C50919) *
              C50802 * C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50672) *
                C50919 +
            ((C2364 + C2363 + C2362) * C121 +
             (C2367 + C2366 + C2365) * C50672) *
                C50790) *
               C50802 * C50898 -
           (((C2373 + C2372 + C2371) * C50672 +
             (C2370 + C2369 + C2368) * C121) *
                C50790 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50672 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50919) *
               C50802 * C50643) *
              C848 +
          ((((C2176 * C379 + C2171 * C385 + C2177 * C380 + C2172 * C386 +
              C2178 * C381 + C2173 * C387) *
                 C121 +
             (C2176 * C389 + C2171 * C397 + C2177 * C390 + C2172 * C398 +
              C2178 * C391 + C2173 * C399) *
                 C50672) *
                C50919 +
            ((C2176 * C719 + C2171 * C727 + C2177 * C720 + C2172 * C728 +
              C2178 * C721 + C2173 * C729) *
                 C121 +
             (C2176 * C731 + C2171 * C743 + C2177 * C732 + C2172 * C744 +
              C2178 * C733 + C2173 * C745) *
                 C50672) *
                C50790) *
               C50802 * C50643 -
           (((C3023 + C3022 + C3021) * C50672 +
             (C3020 + C3019 + C3018) * C121) *
                C50790 +
            ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
              C2176 * C393 + C2171 * C401) *
                 C50672 +
             (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
              C2176 * C383 + C2171 * C394) *
                 C121) *
                C50919) *
               C50802 * C50898) *
              C849 +
          ((((C2176 * C851 + C2171 * C856 + C2177 * C852 + C2172 * C857 +
              C2178 * C853 + C2173 * C858) *
                 C121 +
             (C2176 * C860 + C2171 * C866 + C2177 * C861 + C2172 * C867 +
              C2178 * C862 + C2173 * C868) *
                 C50672) *
                C50919 +
            ((C2176 * C972 + C2171 * C976 + C2177 * C971 + C2172 * C975 +
              C2178 * C970 + C2173 * C974) *
                 C121 +
             (C2176 * C980 + C2171 * C984 + C2177 * C979 + C2172 * C983 +
              C2178 * C978 + C2173 * C982) *
                 C50672) *
                C50790) *
               C50802 * C50898 -
           (((C2178 * C977 + C2173 * C981 + C2177 * C978 + C2172 * C982 +
              C2176 * C979 + C2171 * C983) *
                 C50672 +
             (C2178 * C969 + C2173 * C973 + C2177 * C970 + C2172 * C974 +
              C2176 * C971 + C2171 * C975) *
                 C121) *
                C50790 +
            ((C2178 * C863 + C2173 * C869 + C2177 * C862 + C2172 * C868 +
              C2176 * C861 + C2171 * C867) *
                 C50672 +
             (C2178 * C854 + C2173 * C859 + C2177 * C853 + C2172 * C858 +
              C2176 * C852 + C2171 * C857) *
                 C121) *
                C50919) *
               C50802 * C50643) *
              C850)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C121 +
            (C10625 * C133 + C50612 * C143) * C50672) *
               C10621 +
           ((C10625 * C258 + C50612 * C264) * C121 +
            (C10625 * C268 + C50612 * C276) * C50672) *
               C10622 +
           ((C10625 * C509 + C50612 * C514) * C121 +
            (C10625 * C518 + C50612 * C524) * C50672) *
               C10623 +
           ((C10625 * C607 + C50612 * C611) * C121 +
            (C10625 * C615 + C50612 * C619) * C50672) *
               C10624) *
              C50802 * C112 -
          (((C10625 * C614 + C50612 * C618) * C50672 +
            (C10625 * C606 + C50612 * C610) * C121) *
               C10624 +
           ((C10625 * C519 + C50612 * C525) * C50672 +
            (C10625 * C510 + C50612 * C515) * C121) *
               C10623 +
           ((C10625 * C267 + C50612 * C275) * C50672 +
            (C10625 * C257 + C50612 * C263) * C121) *
               C10622 +
           ((C10625 * C134 + C50612 * C144) * C50672 +
            (C10625 * C123 + C50612 * C130) * C121) *
               C10621) *
              C50802 * C113 +
          (((C10625 * C124 + C50612 * C131) * C121 +
            (C10625 * C135 + C50612 * C145) * C50672) *
               C10621 +
           ((C10625 * C256 + C50612 * C262) * C121 +
            (C10625 * C266 + C50612 * C274) * C50672) *
               C10622 +
           ((C10625 * C511 + C50612 * C516) * C121 +
            (C10625 * C520 + C50612 * C526) * C50672) *
               C10623 +
           ((C10625 * C605 + C50612 * C609) * C121 +
            (C10625 * C613 + C50612 * C617) * C50672) *
               C10624) *
              C50802 * C114 -
          (((C10625 * C612 + C50612 * C616) * C50672 +
            (C10625 * C604 + C50612 * C608) * C121) *
               C10624 +
           ((C10625 * C521 + C50612 * C527) * C50672 +
            (C10625 * C512 + C50612 * C517) * C121) *
               C10623 +
           ((C10625 * C265 + C50612 * C273) * C50672 +
            (C10625 * C255 + C50612 * C261) * C121) *
               C10622 +
           ((C10625 * C136 + C50612 * C146) * C50672 +
            (C10625 * C125 + C50612 * C132) * C121) *
               C10621) *
              C50802 * C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C506 +
            (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
            C10762 * C502 + C10763 * C508 + C10764 * C503) *
               C10621 +
           (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
            C10765 * C508 + C10766 * C503) *
               C10622 +
           (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
            C10983 * C508 + C10984 * C503) *
               C10623 +
           (C10765 * C506 + C10766 * C501 - C10983 * C507 - C10984 * C502 +
            (C10625 * C8429 + C50612 * C8431) * C508 +
            (C10625 * C8433 + C50612 * C8435) * C503) *
               C10624) *
              C50802 * C50898 +
          ((C10767 * C507 -
            ((C10625 * C134 + C50612 * C144) * C501 +
             (C10625 * C123 + C50612 * C130) * C506) +
            C10768 * C502 - C10769 * C508 - C10770 * C503) *
               C10621 +
           (C10769 * C507 - (C10768 * C501 + C10767 * C506) + C10770 * C502 -
            C10771 * C508 - C10772 * C503) *
               C10622 +
           (C10771 * C507 - (C10770 * C501 + C10769 * C506) + C10772 * C502 -
            C10985 * C508 - C10986 * C503) *
               C10623 +
           (C10985 * C507 - (C10772 * C501 + C10771 * C506) + C10986 * C502 -
            (C10625 * C8428 + C50612 * C8430) * C508 -
            (C10625 * C8432 + C50612 * C8434) * C503) *
               C10624) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C10621 +
            (C10761 * C121 + C10762 * C50672) * C10622 +
            (C10763 * C121 + C10764 * C50672) * C10623 +
            (C10765 * C121 + C10766 * C50672) * C10624) *
               C50802 * C50898 -
           ((C10772 * C50672 + C10771 * C121) * C10624 +
            (C10770 * C50672 + C10769 * C121) * C10623 +
            (C10768 * C50672 + C10767 * C121) * C10622 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C10621) *
               C50802 * C50643) *
              C848 +
          ((((C10625 * C379 + C50612 * C385) * C121 +
             (C10625 * C389 + C50612 * C397) * C50672) *
                C10621 +
            ((C10625 * C719 + C50612 * C727) * C121 +
             (C10625 * C731 + C50612 * C743) * C50672) *
                C10622 +
            ((C10625 * C724 + C50612 * C736) * C121 +
             (C10625 * C740 + C50612 * C748) * C50672) *
                C10623 +
            ((C10625 * C2982 + C50612 * C2985) * C121 +
             (C10625 * C2988 + C50612 * C2991) * C50672) *
                C10624) *
               C50802 * C50643 -
           ((C11186 * C50672 + C11185 * C121) * C10624 +
            (C11184 * C50672 + C11183 * C121) * C10623 +
            (C11182 * C50672 + C11181 * C121) * C10622 +
            ((C10625 * C393 + C50612 * C401) * C50672 +
             (C10625 * C383 + C50612 * C394) * C121) *
                C10621) *
               C50802 * C50898) *
              C849 +
          ((((C10625 * C851 + C50612 * C856) * C121 +
             (C10625 * C860 + C50612 * C866) * C50672) *
                C10621 +
            ((C10625 * C972 + C50612 * C976) * C121 +
             (C10625 * C980 + C50612 * C984) * C50672) *
                C10622 +
            ((C10625 * C3323 + C50612 * C3326) * C121 +
             (C10625 * C3329 + C50612 * C3332) * C50672) *
                C10623 +
            ((C10625 * C8935 + C50612 * C8937) * C121 +
             (C10625 * C8939 + C50612 * C8941) * C50672) *
                C10624) *
               C50802 * C50898 -
           (((C10625 * C8938 + C50612 * C8940) * C50672 +
             (C10625 * C8934 + C50612 * C8936) * C121) *
                C10624 +
            ((C10625 * C3328 + C50612 * C3331) * C50672 +
             (C10625 * C3322 + C50612 * C3325) * C121) *
                C10623 +
            ((C10625 * C979 + C50612 * C983) * C50672 +
             (C10625 * C971 + C50612 * C975) * C121) *
                C10622 +
            ((C10625 * C861 + C50612 * C867) * C50672 +
             (C10625 * C852 + C50612 * C857) * C121) *
                C10621) *
               C50802 * C50643) *
              C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
            C2178 * C124 + C2173 * C131) *
               C600 +
           (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
            C2178 * C135 + C2173 * C145) *
               C595 -
           (C2362 + C2363 + C2364) * C601 - (C2365 + C2366 + C2367) * C596 +
           (C2696 + C2697 + C2698) * C602 + (C2699 + C2700 + C2701) * C597 -
           (C2830 + C2831 + C2832) * C603 - (C2833 + C2834 + C2835) * C598) *
              C50919 +
          ((C2364 + C2363 + C2362) * C600 + (C2367 + C2366 + C2365) * C595 -
           (C2698 + C2697 + C2696) * C601 - (C2701 + C2700 + C2699) * C596 +
           (C2832 + C2831 + C2830) * C602 + (C2835 + C2834 + C2833) * C597 -
           (C2178 * C2805 + C2173 * C2808 + C2177 * C2806 + C2172 * C2809 +
            C2176 * C2807 + C2171 * C2810) *
               C603 -
           (C2178 * C2811 + C2173 * C2814 + C2177 * C2812 + C2172 * C2815 +
            C2176 * C2813 + C2171 * C2816) *
               C598) *
              C50790) *
         C50802 * C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50905 -
            (C2362 + C2363 + C2364) * C254 - (C2365 + C2366 + C2367) * C50688) *
               C50919 +
           ((C2364 + C2363 + C2362) * C253 + (C2367 + C2366 + C2365) * C50905 -
            (C2178 * C511 + C2173 * C516 + C2177 * C510 + C2172 * C515 +
             C2176 * C509 + C2171 * C514) *
                C254 -
            (C2178 * C520 + C2173 * C526 + C2177 * C519 + C2172 * C525 +
             C2176 * C518 + C2171 * C524) *
                C50688) *
               C50790) *
              C50802 * C250 +
          (((C2368 + C2369 + C2370) * C254 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50905 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C253) +
            (C2371 + C2372 + C2373) * C50688) *
               C50919 +
           ((C2176 * C510 + C2171 * C515 + C2177 * C511 + C2172 * C516 +
             C2178 * C512 + C2173 * C517) *
                C254 -
            ((C2373 + C2372 + C2371) * C50905 +
             (C2370 + C2369 + C2368) * C253) +
            (C2176 * C519 + C2171 * C525 + C2177 * C520 + C2172 * C526 +
             C2178 * C521 + C2173 * C527) *
                C50688) *
               C50790) *
              C50802 * C251 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C253 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50905 -
            (C2374 + C2375 + C2376) * C254 - (C2377 + C2378 + C2379) * C50688) *
               C50919 +
           ((C2376 + C2375 + C2374) * C253 + (C2379 + C2378 + C2377) * C50905 -
            (C2178 * C513 + C2173 * C522 + C2177 * C512 + C2172 * C517 +
             C2176 * C511 + C2171 * C516) *
                C254 -
            (C2178 * C523 + C2173 * C528 + C2177 * C521 + C2172 * C527 +
             C2176 * C520 + C2171 * C526) *
                C50688) *
               C50790) *
              C50802 * C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50905 -
            (C2362 + C2363 + C2364) * C254 - (C2365 + C2366 + C2367) * C50688) *
               C50919 +
           ((C2364 + C2363 + C2362) * C253 + (C2367 + C2366 + C2365) * C50905 -
            (C2698 + C2697 + C2696) * C254 - (C2701 + C2700 + C2699) * C50688) *
               C50790) *
              C50802 * C50638 * C848 +
          (((C3018 + C3019 + C3020) * C254 -
            ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
              C2176 * C393 + C2171 * C401) *
                 C50905 +
             (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
              C2176 * C383 + C2171 * C394) *
                 C253) +
            (C3021 + C3022 + C3023) * C50688) *
               C50919 +
           ((C3026 + C3025 + C3024) * C254 -
            ((C3023 + C3022 + C3021) * C50905 +
             (C3020 + C3019 + C3018) * C253) +
            (C3029 + C3028 + C3027) * C50688) *
               C50790) *
              C50802 * C50638 * C849 +
          (((C2176 * C851 + C2171 * C856 + C2177 * C852 + C2172 * C857 +
             C2178 * C853 + C2173 * C858) *
                C253 +
            (C2176 * C860 + C2171 * C866 + C2177 * C861 + C2172 * C867 +
             C2178 * C862 + C2173 * C868) *
                C50905 -
            (C3346 + C3347 + C3348) * C254 - (C3349 + C3350 + C3351) * C50688) *
               C50919 +
           ((C3348 + C3347 + C3346) * C253 + (C3351 + C3350 + C3349) * C50905 -
            (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
             C2176 * C3323 + C2171 * C3326) *
                C254 -
            (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
             C2176 * C3329 + C2171 * C3332) *
                C50688) *
               C50790) *
              C50802 * C50638 * C850)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C253 +
            (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
            C10762 * C50688) *
               C10621 +
           (C10761 * C253 + C10762 * C50905 - C10763 * C254 - C10764 * C50688) *
               C10622 +
           (C10763 * C253 + C10764 * C50905 - C10765 * C254 - C10766 * C50688) *
               C10623 +
           (C10765 * C253 + C10766 * C50905 -
            (C10625 * C2807 + C50612 * C2810) * C254 -
            (C10625 * C2813 + C50612 * C2816) * C50688) *
               C10624) *
              C50802 * C250 +
          ((C10767 * C254 -
            ((C10625 * C134 + C50612 * C144) * C50905 +
             (C10625 * C123 + C50612 * C130) * C253) +
            C10768 * C50688) *
               C10621 +
           (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
            C10770 * C50688) *
               C10622 +
           (C10771 * C254 - (C10770 * C50905 + C10769 * C253) +
            C10772 * C50688) *
               C10623 +
           ((C10625 * C2806 + C50612 * C2809) * C254 -
            (C10772 * C50905 + C10771 * C253) +
            (C10625 * C2812 + C50612 * C2815) * C50688) *
               C10624) *
              C50802 * C251 +
          (((C10625 * C124 + C50612 * C131) * C253 +
            (C10625 * C135 + C50612 * C145) * C50905 - C10773 * C254 -
            C10774 * C50688) *
               C10621 +
           (C10773 * C253 + C10774 * C50905 - C10775 * C254 - C10776 * C50688) *
               C10622 +
           (C10775 * C253 + C10776 * C50905 - C10777 * C254 - C10778 * C50688) *
               C10623 +
           (C10777 * C253 + C10778 * C50905 -
            (C10625 * C2805 + C50612 * C2808) * C254 -
            (C10625 * C2811 + C50612 * C2814) * C50688) *
               C10624) *
              C50802 * C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10625 * C122 + C50612 * C129) * C600 +
           (C10625 * C133 + C50612 * C143) * C595 - C10761 * C601 -
           C10762 * C596 + C10763 * C602 + C10764 * C597 - C10765 * C603 -
           C10766 * C598) *
              C10621 +
          (C10761 * C600 + C10762 * C595 - C10763 * C601 - C10764 * C596 +
           C10765 * C602 + C10766 * C597 - C10983 * C603 - C10984 * C598) *
              C10622 +
          (C10763 * C600 + C10764 * C595 - C10765 * C601 - C10766 * C596 +
           C10983 * C602 + C10984 * C597 - C11061 * C603 - C11062 * C598) *
              C10623 +
          (C10765 * C600 + C10766 * C595 - C10983 * C601 - C10984 * C596 +
           C11061 * C602 + C11062 * C597 -
           (C10625 * C11052 + C50612 * C11053) * C603 -
           (C10625 * C11054 + C50612 * C11055) * C598) *
              C10624) *
         C50802 * C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C253 +
            (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
            C10762 * C50688) *
               C10621 +
           (C10761 * C253 + C10762 * C50905 - C10763 * C254 - C10764 * C50688) *
               C10622 +
           (C10763 * C253 + C10764 * C50905 - C10765 * C254 - C10766 * C50688) *
               C10623 +
           (C10765 * C253 + C10766 * C50905 - C10983 * C254 - C10984 * C50688) *
               C10624) *
              C50802 * C50638 * C848 +
          ((C11181 * C254 -
            ((C10625 * C393 + C50612 * C401) * C50905 +
             (C10625 * C383 + C50612 * C394) * C253) +
            C11182 * C50688) *
               C10621 +
           (C11183 * C254 - (C11182 * C50905 + C11181 * C253) +
            C11184 * C50688) *
               C10622 +
           (C11185 * C254 - (C11184 * C50905 + C11183 * C253) +
            C11186 * C50688) *
               C10623 +
           (C11187 * C254 - (C11186 * C50905 + C11185 * C253) +
            C11188 * C50688) *
               C10624) *
              C50802 * C50638 * C849 +
          (((C10625 * C851 + C50612 * C856) * C253 +
            (C10625 * C860 + C50612 * C866) * C50905 - C11401 * C254 -
            C11402 * C50688) *
               C10621 +
           (C11401 * C253 + C11402 * C50905 - C11403 * C254 - C11404 * C50688) *
               C10622 +
           (C11403 * C253 + C11404 * C50905 - C11405 * C254 - C11406 * C50688) *
               C10623 +
           (C11405 * C253 + C11406 * C50905 -
            (C10625 * C11384 + C50612 * C11385) * C254 -
            (C10625 * C11386 + C50612 * C11387) * C50688) *
               C10624) *
              C50802 * C50638 * C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C506 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C501 -
            (C2362 + C2363 + C2364) * C507 - (C2365 + C2366 + C2367) * C502 +
            (C2696 + C2697 + C2698) * C508 + (C2699 + C2700 + C2701) * C503) *
               C50919 +
           ((C2364 + C2363 + C2362) * C506 + (C2367 + C2366 + C2365) * C501 -
            (C2698 + C2697 + C2696) * C507 - (C2701 + C2700 + C2699) * C502 +
            (C2832 + C2831 + C2830) * C508 + (C2835 + C2834 + C2833) * C503) *
               C50790) *
              C50802 * C50638 * C50907 +
          (((C3018 + C3019 + C3020) * C507 -
            ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
              C2176 * C393 + C2171 * C401) *
                 C501 +
             (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
              C2176 * C383 + C2171 * C394) *
                 C506) +
            (C3021 + C3022 + C3023) * C502 - (C3024 + C3025 + C3026) * C508 -
            (C3027 + C3028 + C3029) * C503) *
               C50919 +
           ((C3026 + C3025 + C3024) * C507 -
            ((C3023 + C3022 + C3021) * C501 + (C3020 + C3019 + C3018) * C506) +
            (C3029 + C3028 + C3027) * C502 -
            (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
             C2176 * C2983 + C2171 * C2986) *
                C508 -
            (C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
             C2176 * C2989 + C2171 * C2992) *
                C503) *
               C50790) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50672) *
                C50919 +
            ((C2364 + C2363 + C2362) * C121 +
             (C2367 + C2366 + C2365) * C50672) *
                C50790) *
               C50802 * C250 -
           (((C2373 + C2372 + C2371) * C50672 +
             (C2370 + C2369 + C2368) * C121) *
                C50790 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50672 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50919) *
               C50802 * C251 +
           (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
              C2178 * C126 + C2173 * C138) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
              C2178 * C137 + C2173 * C147) *
                 C50672) *
                C50919 +
            ((C2376 + C2375 + C2374) * C121 +
             (C2379 + C2378 + C2377) * C50672) *
                C50790) *
               C50802 * C252) *
              C50907 +
          ((((C2176 * C379 + C2171 * C385 + C2177 * C380 + C2172 * C386 +
              C2178 * C381 + C2173 * C387) *
                 C121 +
             (C2176 * C389 + C2171 * C397 + C2177 * C390 + C2172 * C398 +
              C2178 * C391 + C2173 * C399) *
                 C50672) *
                C50919 +
            ((C2176 * C719 + C2171 * C727 + C2177 * C720 + C2172 * C728 +
              C2178 * C721 + C2173 * C729) *
                 C121 +
             (C2176 * C731 + C2171 * C743 + C2177 * C732 + C2172 * C744 +
              C2178 * C733 + C2173 * C745) *
                 C50672) *
                C50790) *
               C50802 * C251 -
           (((C2178 * C732 + C2173 * C744 + C2177 * C731 + C2172 * C743 +
              C2176 * C730 + C2171 * C742) *
                 C50672 +
             (C2178 * C720 + C2173 * C728 + C2177 * C719 + C2172 * C727 +
              C2176 * C718 + C2171 * C726) *
                 C121) *
                C50790 +
            ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
              C2176 * C393 + C2171 * C401) *
                 C50672 +
             (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
              C2176 * C383 + C2171 * C394) *
                 C121) *
                C50919) *
               C50802 * C250 -
           (((C2178 * C1414 + C2173 * C1415 + C2177 * C733 + C2172 * C745 +
              C2176 * C732 + C2171 * C744) *
                 C50672 +
             (C2178 * C1412 + C2173 * C1413 + C2177 * C721 + C2172 * C729 +
              C2176 * C720 + C2171 * C728) *
                 C121) *
                C50790 +
            ((C2178 * C392 + C2173 * C400 + C2177 * C391 + C2172 * C399 +
              C2176 * C390 + C2171 * C398) *
                 C50672 +
             (C2178 * C382 + C2173 * C388 + C2177 * C381 + C2172 * C387 +
              C2176 * C380 + C2171 * C386) *
                 C121) *
                C50919) *
               C50802 * C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50672) *
               C50919 +
           ((C2364 + C2363 + C2362) * C121 + (C2367 + C2366 + C2365) * C50672) *
               C50790) *
              C50802 * C50638 * C1051 -
          (((C3023 + C3022 + C3021) * C50672 + (C3020 + C3019 + C3018) * C121) *
               C50790 +
           ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
             C2176 * C393 + C2171 * C401) *
                C50672 +
            (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
             C2176 * C383 + C2171 * C394) *
                C121) *
               C50919) *
              C50802 * C50638 * C1052 +
          (((C2176 * C851 + C2171 * C856 + C2177 * C852 + C2172 * C857 +
             C2178 * C853 + C2173 * C858) *
                C121 +
            (C2176 * C860 + C2171 * C866 + C2177 * C861 + C2172 * C867 +
             C2178 * C862 + C2173 * C868) *
                C50672) *
               C50919 +
           ((C3348 + C3347 + C3346) * C121 + (C3351 + C3350 + C3349) * C50672) *
               C50790) *
              C50802 * C50638 * C1053 -
          (((C2178 * C3452 + C2173 * C3458 + C2177 * C3453 + C2172 * C3459 +
             C2176 * C3454 + C2171 * C3460) *
                C50672 +
            (C2178 * C3449 + C2173 * C3455 + C2177 * C3450 + C2172 * C3456 +
             C2176 * C3451 + C2171 * C3457) *
                C121) *
               C50790 +
           ((C2178 * C1060 + C2173 * C1068 + C2177 * C1061 + C2172 * C1069 +
             C2176 * C1062 + C2171 * C1070) *
                C50672 +
            (C2178 * C1056 + C2173 * C1064 + C2177 * C1057 + C2172 * C1065 +
             C2176 * C1058 + C2171 * C1066) *
                C121) *
               C50919) *
              C50802 * C50638 * C1054)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C10621 +
            (C10761 * C121 + C10762 * C50672) * C10622 +
            (C10763 * C121 + C10764 * C50672) * C10623 +
            (C10765 * C121 + C10766 * C50672) * C10624) *
               C50802 * C250 -
           ((C10772 * C50672 + C10771 * C121) * C10624 +
            (C10770 * C50672 + C10769 * C121) * C10623 +
            (C10768 * C50672 + C10767 * C121) * C10622 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C10621) *
               C50802 * C251 +
           (((C10625 * C124 + C50612 * C131) * C121 +
             (C10625 * C135 + C50612 * C145) * C50672) *
                C10621 +
            (C10773 * C121 + C10774 * C50672) * C10622 +
            (C10775 * C121 + C10776 * C50672) * C10623 +
            (C10777 * C121 + C10778 * C50672) * C10624) *
               C50802 * C252) *
              C50907 +
          ((((C10625 * C379 + C50612 * C385) * C121 +
             (C10625 * C389 + C50612 * C397) * C50672) *
                C10621 +
            ((C10625 * C719 + C50612 * C727) * C121 +
             (C10625 * C731 + C50612 * C743) * C50672) *
                C10622 +
            ((C10625 * C724 + C50612 * C736) * C121 +
             (C10625 * C740 + C50612 * C748) * C50672) *
                C10623 +
            ((C10625 * C2982 + C50612 * C2985) * C121 +
             (C10625 * C2988 + C50612 * C2991) * C50672) *
                C10624) *
               C50802 * C251 -
           (((C10625 * C2989 + C50612 * C2992) * C50672 +
             (C10625 * C2983 + C50612 * C2986) * C121) *
                C10624 +
            ((C10625 * C741 + C50612 * C749) * C50672 +
             (C10625 * C725 + C50612 * C737) * C121) *
                C10623 +
            ((C10625 * C730 + C50612 * C742) * C50672 +
             (C10625 * C718 + C50612 * C726) * C121) *
                C10622 +
            ((C10625 * C393 + C50612 * C401) * C50672 +
             (C10625 * C383 + C50612 * C394) * C121) *
                C10621) *
               C50802 * C250 -
           (((C10625 * C2987 + C50612 * C2990) * C50672 +
             (C10625 * C2981 + C50612 * C2984) * C121) *
                C10624 +
            ((C10625 * C739 + C50612 * C747) * C50672 +
             (C10625 * C723 + C50612 * C735) * C121) *
                C10623 +
            ((C10625 * C732 + C50612 * C744) * C50672 +
             (C10625 * C720 + C50612 * C728) * C121) *
                C10622 +
            ((C10625 * C390 + C50612 * C398) * C50672 +
             (C10625 * C380 + C50612 * C386) * C121) *
                C10621) *
               C50802 * C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C506 +
            (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
            C10762 * C502 + C10763 * C508 + C10764 * C503) *
               C10621 +
           (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
            C10765 * C508 + C10766 * C503) *
               C10622 +
           (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
            C10983 * C508 + C10984 * C503) *
               C10623 +
           (C10765 * C506 + C10766 * C501 - C10983 * C507 - C10984 * C502 +
            C11061 * C508 + C11062 * C503) *
               C10624) *
              C50802 * C50638 * C50907 +
          ((C11181 * C507 -
            ((C10625 * C393 + C50612 * C401) * C501 +
             (C10625 * C383 + C50612 * C394) * C506) +
            C11182 * C502 - C11183 * C508 - C11184 * C503) *
               C10621 +
           (C11183 * C507 - (C11182 * C501 + C11181 * C506) + C11184 * C502 -
            C11185 * C508 - C11186 * C503) *
               C10622 +
           (C11185 * C507 - (C11184 * C501 + C11183 * C506) + C11186 * C502 -
            C11187 * C508 - C11188 * C503) *
               C10623 +
           (C11187 * C507 - (C11186 * C501 + C11185 * C506) + C11188 * C502 -
            (C10625 * C11160 + C50612 * C11161) * C508 -
            (C10625 * C11162 + C50612 * C11163) * C503) *
               C10624) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C121 +
            (C10625 * C133 + C50612 * C143) * C50672) *
               C10621 +
           (C10761 * C121 + C10762 * C50672) * C10622 +
           (C10763 * C121 + C10764 * C50672) * C10623 +
           (C10765 * C121 + C10766 * C50672) * C10624) *
              C50802 * C50638 * C1051 -
          ((C11186 * C50672 + C11185 * C121) * C10624 +
           (C11184 * C50672 + C11183 * C121) * C10623 +
           (C11182 * C50672 + C11181 * C121) * C10622 +
           ((C10625 * C393 + C50612 * C401) * C50672 +
            (C10625 * C383 + C50612 * C394) * C121) *
               C10621) *
              C50802 * C50638 * C1052 +
          (((C10625 * C851 + C50612 * C856) * C121 +
            (C10625 * C860 + C50612 * C866) * C50672) *
               C10621 +
           (C11401 * C121 + C11402 * C50672) * C10622 +
           (C11403 * C121 + C11404 * C50672) * C10623 +
           (C11405 * C121 + C11406 * C50672) * C10624) *
              C50802 * C50638 * C1053 -
          (((C10625 * C11473 + C50612 * C11475) * C50672 +
            (C10625 * C11472 + C50612 * C11474) * C121) *
               C10624 +
           ((C10625 * C9067 + C50612 * C9071) * C50672 +
            (C10625 * C9065 + C50612 * C9069) * C121) *
               C10623 +
           ((C10625 * C3454 + C50612 * C3460) * C50672 +
            (C10625 * C3451 + C50612 * C3457) * C121) *
               C10622 +
           ((C10625 * C1062 + C50612 * C1070) * C50672 +
            (C10625 * C1058 + C50612 * C1066) * C121) *
               C10621) *
              C50802 * C50638 * C1054)) /
            (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C2176 * C122 + C2171 * C129 + C2177 * C123 +
                       C2172 * C130 + C2178 * C124 + C2173 * C131) *
                          C121 +
                      (C2176 * C133 + C2171 * C143 + C2177 * C134 +
                       C2172 * C144 + C2178 * C135 + C2173 * C145) *
                          C50672) *
                         C50919 +
                     ((C2364 + C2363 + C2362) * C121 +
                      (C2367 + C2366 + C2365) * C50672) *
                         C50790) *
                        C50802 * C50950 -
                    (((C2373 + C2372 + C2371) * C50672 +
                      (C2370 + C2369 + C2368) * C121) *
                         C50790 +
                     ((C2178 * C136 + C2173 * C146 + C2177 * C135 +
                       C2172 * C145 + C2176 * C134 + C2171 * C144) *
                          C50672 +
                      (C2178 * C125 + C2173 * C132 + C2177 * C124 +
                       C2172 * C131 + C2176 * C123 + C2171 * C130) *
                          C121) *
                         C50919) *
                        C50802 * C50936 +
                    (((C2176 * C124 + C2171 * C131 + C2177 * C125 +
                       C2172 * C132 + C2178 * C126 + C2173 * C138) *
                          C121 +
                      (C2176 * C135 + C2171 * C145 + C2177 * C136 +
                       C2172 * C146 + C2178 * C137 + C2173 * C147) *
                          C50672) *
                         C50919 +
                     ((C2376 + C2375 + C2374) * C121 +
                      (C2379 + C2378 + C2377) * C50672) *
                         C50790) *
                        C50802 * C1173) *
                       C1514 +
                   ((((C2176 * C379 + C2171 * C385 + C2177 * C380 +
                       C2172 * C386 + C2178 * C381 + C2173 * C387) *
                          C121 +
                      (C2176 * C389 + C2171 * C397 + C2177 * C390 +
                       C2172 * C398 + C2178 * C391 + C2173 * C399) *
                          C50672) *
                         C50919 +
                     ((C3962 + C3961 + C3960) * C121 +
                      (C3965 + C3964 + C3963) * C50672) *
                         C50790) *
                        C50802 * C50936 -
                    (((C3023 + C3022 + C3021) * C50672 +
                      (C3020 + C3019 + C3018) * C121) *
                         C50790 +
                     ((C2178 * C390 + C2173 * C398 + C2177 * C389 +
                       C2172 * C397 + C2176 * C393 + C2171 * C401) *
                          C50672 +
                      (C2178 * C380 + C2173 * C386 + C2177 * C379 +
                       C2172 * C385 + C2176 * C383 + C2171 * C394) *
                          C121) *
                         C50919) *
                        C50802 * C50950 -
                    (((C2178 * C1414 + C2173 * C1415 + C2177 * C733 +
                       C2172 * C745 + C2176 * C732 + C2171 * C744) *
                          C50672 +
                      (C2178 * C1412 + C2173 * C1413 + C2177 * C721 +
                       C2172 * C729 + C2176 * C720 + C2171 * C728) *
                          C121) *
                         C50790 +
                     ((C2178 * C392 + C2173 * C400 + C2177 * C391 +
                       C2172 * C399 + C2176 * C390 + C2171 * C398) *
                          C50672 +
                      (C2178 * C382 + C2173 * C388 + C2177 * C381 +
                       C2172 * C387 + C2176 * C380 + C2171 * C386) *
                          C121) *
                         C50919) *
                        C50802 * C1173) *
                       C50714)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C10625 * C122 + C50612 * C129) * C121 +
                      (C10625 * C133 + C50612 * C143) * C50672) *
                         C10621 +
                     (C10761 * C121 + C10762 * C50672) * C10622 +
                     (C10763 * C121 + C10764 * C50672) * C10623 +
                     (C10765 * C121 + C10766 * C50672) * C10624) *
                        C50802 * C50950 -
                    ((C10772 * C50672 + C10771 * C121) * C10624 +
                     (C10770 * C50672 + C10769 * C121) * C10623 +
                     (C10768 * C50672 + C10767 * C121) * C10622 +
                     ((C10625 * C134 + C50612 * C144) * C50672 +
                      (C10625 * C123 + C50612 * C130) * C121) *
                         C10621) *
                        C50802 * C50936 +
                    (((C10625 * C124 + C50612 * C131) * C121 +
                      (C10625 * C135 + C50612 * C145) * C50672) *
                         C10621 +
                     (C10773 * C121 + C10774 * C50672) * C10622 +
                     (C10775 * C121 + C10776 * C50672) * C10623 +
                     (C10777 * C121 + C10778 * C50672) * C10624) *
                        C50802 * C1173) *
                       C1514 +
                   ((((C10625 * C379 + C50612 * C385) * C121 +
                      (C10625 * C389 + C50612 * C397) * C50672) *
                         C10621 +
                     (C11815 * C121 + C11816 * C50672) * C10622 +
                     (C11817 * C121 + C11818 * C50672) * C10623 +
                     (C11819 * C121 + C11820 * C50672) * C10624) *
                        C50802 * C50936 -
                    ((C11186 * C50672 + C11185 * C121) * C10624 +
                     (C11184 * C50672 + C11183 * C121) * C10623 +
                     (C11182 * C50672 + C11181 * C121) * C10622 +
                     ((C10625 * C393 + C50612 * C401) * C50672 +
                      (C10625 * C383 + C50612 * C394) * C121) *
                         C10621) *
                        C50802 * C50950 -
                    (((C10625 * C2987 + C50612 * C2990) * C50672 +
                      (C10625 * C2981 + C50612 * C2984) * C121) *
                         C10624 +
                     ((C10625 * C739 + C50612 * C747) * C50672 +
                      (C10625 * C723 + C50612 * C735) * C121) *
                         C10623 +
                     ((C10625 * C732 + C50612 * C744) * C50672 +
                      (C10625 * C720 + C50612 * C728) * C121) *
                         C10622 +
                     ((C10625 * C390 + C50612 * C398) * C50672 +
                      (C10625 * C380 + C50612 * C386) * C121) *
                         C10621) *
                        C50802 * C1173) *
                       C50714)) /
                     (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C253 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50905 -
             (C2362 + C2363 + C2364) * C254 -
             (C2365 + C2366 + C2367) * C50688) *
                C50919 +
            ((C2364 + C2363 + C2362) * C253 + (C2367 + C2366 + C2365) * C50905 -
             (C2698 + C2697 + C2696) * C254 -
             (C2701 + C2700 + C2699) * C50688) *
                C50790) *
               C50802 * C1277 +
           (((C2368 + C2369 + C2370) * C254 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C50905 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C253) +
             (C2371 + C2372 + C2373) * C50688) *
                C50919 +
            ((C2704 + C2703 + C2702) * C254 -
             ((C2373 + C2372 + C2371) * C50905 +
              (C2370 + C2369 + C2368) * C253) +
             (C2707 + C2706 + C2705) * C50688) *
                C50790) *
               C50802 * C50643) *
              C1514 +
          ((((C3018 + C3019 + C3020) * C254 -
             ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
               C2176 * C393 + C2171 * C401) *
                  C50905 +
              (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
               C2176 * C383 + C2171 * C394) *
                  C253) +
             (C3021 + C3022 + C3023) * C50688) *
                C50919 +
            ((C3026 + C3025 + C3024) * C254 -
             ((C3023 + C3022 + C3021) * C50905 +
              (C3020 + C3019 + C3018) * C253) +
             (C3029 + C3028 + C3027) * C50688) *
                C50790) *
               C50802 * C1277 +
           (((C2176 * C379 + C2171 * C385 + C2177 * C380 + C2172 * C386 +
              C2178 * C381 + C2173 * C387) *
                 C253 +
             (C2176 * C389 + C2171 * C397 + C2177 * C390 + C2172 * C398 +
              C2178 * C391 + C2173 * C399) *
                 C50905 -
             (C3960 + C3961 + C3962) * C254 -
             (C3963 + C3964 + C3965) * C50688) *
                C50919 +
            ((C3962 + C3961 + C3960) * C253 + (C3965 + C3964 + C3963) * C50905 -
             (C2178 * C722 + C2173 * C734 + C2177 * C723 + C2172 * C735 +
              C2176 * C724 + C2171 * C736) *
                 C254 -
             (C2178 * C738 + C2173 * C746 + C2177 * C739 + C2172 * C747 +
              C2176 * C740 + C2171 * C748) *
                 C50688) *
                C50790) *
               C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C253 +
             (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
             C10762 * C50688) *
                C10621 +
            (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
             C10764 * C50688) *
                C10622 +
            (C10763 * C253 + C10764 * C50905 - C10765 * C254 -
             C10766 * C50688) *
                C10623 +
            (C10765 * C253 + C10766 * C50905 - C10983 * C254 -
             C10984 * C50688) *
                C10624) *
               C50802 * C1277 +
           ((C10767 * C254 -
             ((C10625 * C134 + C50612 * C144) * C50905 +
              (C10625 * C123 + C50612 * C130) * C253) +
             C10768 * C50688) *
                C10621 +
            (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
             C10770 * C50688) *
                C10622 +
            (C10771 * C254 - (C10770 * C50905 + C10769 * C253) +
             C10772 * C50688) *
                C10623 +
            (C10985 * C254 - (C10772 * C50905 + C10771 * C253) +
             C10986 * C50688) *
                C10624) *
               C50802 * C50643) *
              C1514 +
          (((C11181 * C254 -
             ((C10625 * C393 + C50612 * C401) * C50905 +
              (C10625 * C383 + C50612 * C394) * C253) +
             C11182 * C50688) *
                C10621 +
            (C11183 * C254 - (C11182 * C50905 + C11181 * C253) +
             C11184 * C50688) *
                C10622 +
            (C11185 * C254 - (C11184 * C50905 + C11183 * C253) +
             C11186 * C50688) *
                C10623 +
            (C11187 * C254 - (C11186 * C50905 + C11185 * C253) +
             C11188 * C50688) *
                C10624) *
               C50802 * C1277 +
           (((C10625 * C379 + C50612 * C385) * C253 +
             (C10625 * C389 + C50612 * C397) * C50905 - C11815 * C254 -
             C11816 * C50688) *
                C10621 +
            (C11815 * C253 + C11816 * C50905 - C11817 * C254 -
             C11818 * C50688) *
                C10622 +
            (C11817 * C253 + C11818 * C50905 - C11819 * C254 -
             C11820 * C50688) *
                C10623 +
            (C11819 * C253 + C11820 * C50905 -
             (C10625 * C8596 + C50612 * C8598) * C254 -
             (C10625 * C8600 + C50612 * C8602) * C50688) *
                C10624) *
               C50802 * C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[206] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C2176 * C122 + C2171 * C129 + C2177 * C123 +
                       C2172 * C130 + C2178 * C124 + C2173 * C131) *
                          C121 +
                      (C2176 * C133 + C2171 * C143 + C2177 * C134 +
                       C2172 * C144 + C2178 * C135 + C2173 * C145) *
                          C50672) *
                         C50919 +
                     ((C2364 + C2363 + C2362) * C121 +
                      (C2367 + C2366 + C2365) * C50672) *
                         C50790) *
                        C50802 * C1277 -
                    (((C2373 + C2372 + C2371) * C50672 +
                      (C2370 + C2369 + C2368) * C121) *
                         C50790 +
                     ((C2178 * C136 + C2173 * C146 + C2177 * C135 +
                       C2172 * C145 + C2176 * C134 + C2171 * C144) *
                          C50672 +
                      (C2178 * C125 + C2173 * C132 + C2177 * C124 +
                       C2172 * C131 + C2176 * C123 + C2171 * C130) *
                          C121) *
                         C50919) *
                        C50802 * C50643) *
                       C50952 +
                   ((((C2176 * C379 + C2171 * C385 + C2177 * C380 +
                       C2172 * C386 + C2178 * C381 + C2173 * C387) *
                          C121 +
                      (C2176 * C389 + C2171 * C397 + C2177 * C390 +
                       C2172 * C398 + C2178 * C391 + C2173 * C399) *
                          C50672) *
                         C50919 +
                     ((C3962 + C3961 + C3960) * C121 +
                      (C3965 + C3964 + C3963) * C50672) *
                         C50790) *
                        C50802 * C50643 -
                    (((C3023 + C3022 + C3021) * C50672 +
                      (C3020 + C3019 + C3018) * C121) *
                         C50790 +
                     ((C2178 * C390 + C2173 * C398 + C2177 * C389 +
                       C2172 * C397 + C2176 * C393 + C2171 * C401) *
                          C50672 +
                      (C2178 * C380 + C2173 * C386 + C2177 * C379 +
                       C2172 * C385 + C2176 * C383 + C2171 * C394) *
                          C121) *
                         C50919) *
                        C50802 * C1277) *
                       C50942 +
                   ((((C2176 * C851 + C2171 * C856 + C2177 * C852 +
                       C2172 * C857 + C2178 * C853 + C2173 * C858) *
                          C121 +
                      (C2176 * C860 + C2171 * C866 + C2177 * C861 +
                       C2172 * C867 + C2178 * C862 + C2173 * C868) *
                          C50672) *
                         C50919 +
                     ((C3348 + C3347 + C3346) * C121 +
                      (C3351 + C3350 + C3349) * C50672) *
                         C50790) *
                        C50802 * C1277 -
                    (((C2178 * C977 + C2173 * C981 + C2177 * C978 +
                       C2172 * C982 + C2176 * C979 + C2171 * C983) *
                          C50672 +
                      (C2178 * C969 + C2173 * C973 + C2177 * C970 +
                       C2172 * C974 + C2176 * C971 + C2171 * C975) *
                          C121) *
                         C50790 +
                     ((C2178 * C863 + C2173 * C869 + C2177 * C862 +
                       C2172 * C868 + C2176 * C861 + C2171 * C867) *
                          C50672 +
                      (C2178 * C854 + C2173 * C859 + C2177 * C853 +
                       C2172 * C858 + C2176 * C852 + C2171 * C857) *
                          C121) *
                         C50919) *
                        C50802 * C50643) *
                       C1746)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C10625 * C122 + C50612 * C129) * C121 +
                      (C10625 * C133 + C50612 * C143) * C50672) *
                         C10621 +
                     (C10761 * C121 + C10762 * C50672) * C10622 +
                     (C10763 * C121 + C10764 * C50672) * C10623 +
                     (C10765 * C121 + C10766 * C50672) * C10624) *
                        C50802 * C1277 -
                    ((C10772 * C50672 + C10771 * C121) * C10624 +
                     (C10770 * C50672 + C10769 * C121) * C10623 +
                     (C10768 * C50672 + C10767 * C121) * C10622 +
                     ((C10625 * C134 + C50612 * C144) * C50672 +
                      (C10625 * C123 + C50612 * C130) * C121) *
                         C10621) *
                        C50802 * C50643) *
                       C50952 +
                   ((((C10625 * C379 + C50612 * C385) * C121 +
                      (C10625 * C389 + C50612 * C397) * C50672) *
                         C10621 +
                     (C11815 * C121 + C11816 * C50672) * C10622 +
                     (C11817 * C121 + C11818 * C50672) * C10623 +
                     (C11819 * C121 + C11820 * C50672) * C10624) *
                        C50802 * C50643 -
                    ((C11186 * C50672 + C11185 * C121) * C10624 +
                     (C11184 * C50672 + C11183 * C121) * C10623 +
                     (C11182 * C50672 + C11181 * C121) * C10622 +
                     ((C10625 * C393 + C50612 * C401) * C50672 +
                      (C10625 * C383 + C50612 * C394) * C121) *
                         C10621) *
                        C50802 * C1277) *
                       C50942 +
                   ((((C10625 * C851 + C50612 * C856) * C121 +
                      (C10625 * C860 + C50612 * C866) * C50672) *
                         C10621 +
                     (C11401 * C121 + C11402 * C50672) * C10622 +
                     (C11403 * C121 + C11404 * C50672) * C10623 +
                     (C11405 * C121 + C11406 * C50672) * C10624) *
                        C50802 * C1277 -
                    (((C10625 * C8938 + C50612 * C8940) * C50672 +
                      (C10625 * C8934 + C50612 * C8936) * C121) *
                         C10624 +
                     ((C10625 * C3328 + C50612 * C3331) * C50672 +
                      (C10625 * C3322 + C50612 * C3325) * C121) *
                         C10623 +
                     ((C10625 * C979 + C50612 * C983) * C50672 +
                      (C10625 * C971 + C50612 * C975) * C121) *
                         C10622 +
                     ((C10625 * C861 + C50612 * C867) * C50672 +
                      (C10625 * C852 + C50612 * C857) * C121) *
                         C10621) *
                        C50802 * C50643) *
                       C1746)) /
                     (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50672) *
               C50919 +
           ((C2176 * C258 + C2171 * C264 + C2177 * C257 + C2172 * C263 +
             C2178 * C256 + C2173 * C262) *
                C121 +
            (C2176 * C268 + C2171 * C276 + C2177 * C267 + C2172 * C275 +
             C2178 * C266 + C2173 * C274) *
                C50672) *
               C50790) *
              C50802 * C112 -
          (((C2178 * C265 + C2173 * C273 + C2177 * C266 + C2172 * C274 +
             C2176 * C267 + C2171 * C275) *
                C50672 +
            (C2178 * C255 + C2173 * C261 + C2177 * C256 + C2172 * C262 +
             C2176 * C257 + C2171 * C263) *
                C121) *
               C50790 +
           ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
             C2176 * C134 + C2171 * C144) *
                C50672 +
            (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
             C2176 * C123 + C2171 * C130) *
                C121) *
               C50919) *
              C50802 * C113 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C121 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50672) *
               C50919 +
           ((C2176 * C256 + C2171 * C262 + C2177 * C255 + C2172 * C261 +
             C2178 * C259 + C2173 * C269) *
                C121 +
            (C2176 * C266 + C2171 * C274 + C2177 * C265 + C2172 * C273 +
             C2178 * C270 + C2173 * C277) *
                C50672) *
               C50790) *
              C50802 * C114 -
          (((C2178 * C272 + C2173 * C278 + C2177 * C270 + C2172 * C277 +
             C2176 * C265 + C2171 * C273) *
                C50672 +
            (C2178 * C260 + C2173 * C271 + C2177 * C259 + C2172 * C269 +
             C2176 * C255 + C2171 * C261) *
                C121) *
               C50790 +
           ((C2178 * C140 + C2173 * C148 + C2177 * C137 + C2172 * C147 +
             C2176 * C136 + C2171 * C146) *
                C50672 +
            (C2178 * C127 + C2173 * C139 + C2177 * C126 + C2172 * C138 +
             C2176 * C125 + C2171 * C132) *
                C121) *
               C50919) *
              C50802 * C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C506 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C501 -
            (C2362 + C2363 + C2364) * C507 - (C2365 + C2366 + C2367) * C502 +
            (C2696 + C2697 + C2698) * C508 + (C2699 + C2700 + C2701) * C503) *
               C50919 +
           ((C2364 + C2363 + C2362) * C506 + (C2367 + C2366 + C2365) * C501 -
            (C2698 + C2697 + C2696) * C507 - (C2701 + C2700 + C2699) * C502 +
            (C2176 * C607 + C2171 * C611 + C2177 * C606 + C2172 * C610 +
             C2178 * C605 + C2173 * C609) *
                C508 +
            (C2176 * C615 + C2171 * C619 + C2177 * C614 + C2172 * C618 +
             C2178 * C613 + C2173 * C617) *
                C503) *
               C50790) *
              C50802 * C50898 +
          (((C2368 + C2369 + C2370) * C507 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C501 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C506) +
            (C2371 + C2372 + C2373) * C502 - (C2702 + C2703 + C2704) * C508 -
            (C2705 + C2706 + C2707) * C503) *
               C50919 +
           ((C2704 + C2703 + C2702) * C507 -
            ((C2373 + C2372 + C2371) * C501 + (C2370 + C2369 + C2368) * C506) +
            (C2707 + C2706 + C2705) * C502 -
            (C2178 * C604 + C2173 * C608 + C2177 * C605 + C2172 * C609 +
             C2176 * C606 + C2171 * C610) *
                C508 -
            (C2178 * C612 + C2173 * C616 + C2177 * C613 + C2172 * C617 +
             C2176 * C614 + C2171 * C618) *
                C503) *
               C50790) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C121 +
            (C10625 * C133 + C50612 * C143) * C50672) *
               C10621 +
           ((C10625 * C258 + C50612 * C264) * C121 +
            (C10625 * C268 + C50612 * C276) * C50672) *
               C10622 +
           ((C10625 * C509 + C50612 * C514) * C121 +
            (C10625 * C518 + C50612 * C524) * C50672) *
               C10623 +
           ((C10625 * C607 + C50612 * C611) * C121 +
            (C10625 * C615 + C50612 * C619) * C50672) *
               C10624) *
              C50802 * C112 -
          (((C10625 * C614 + C50612 * C618) * C50672 +
            (C10625 * C606 + C50612 * C610) * C121) *
               C10624 +
           ((C10625 * C519 + C50612 * C525) * C50672 +
            (C10625 * C510 + C50612 * C515) * C121) *
               C10623 +
           ((C10625 * C267 + C50612 * C275) * C50672 +
            (C10625 * C257 + C50612 * C263) * C121) *
               C10622 +
           ((C10625 * C134 + C50612 * C144) * C50672 +
            (C10625 * C123 + C50612 * C130) * C121) *
               C10621) *
              C50802 * C113 +
          (((C10625 * C124 + C50612 * C131) * C121 +
            (C10625 * C135 + C50612 * C145) * C50672) *
               C10621 +
           ((C10625 * C256 + C50612 * C262) * C121 +
            (C10625 * C266 + C50612 * C274) * C50672) *
               C10622 +
           ((C10625 * C511 + C50612 * C516) * C121 +
            (C10625 * C520 + C50612 * C526) * C50672) *
               C10623 +
           ((C10625 * C605 + C50612 * C609) * C121 +
            (C10625 * C613 + C50612 * C617) * C50672) *
               C10624) *
              C50802 * C114 -
          (((C10625 * C612 + C50612 * C616) * C50672 +
            (C10625 * C604 + C50612 * C608) * C121) *
               C10624 +
           ((C10625 * C521 + C50612 * C527) * C50672 +
            (C10625 * C512 + C50612 * C517) * C121) *
               C10623 +
           ((C10625 * C265 + C50612 * C273) * C50672 +
            (C10625 * C255 + C50612 * C261) * C121) *
               C10622 +
           ((C10625 * C136 + C50612 * C146) * C50672 +
            (C10625 * C125 + C50612 * C132) * C121) *
               C10621) *
              C50802 * C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C506 +
            (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
            C10762 * C502 + C10763 * C508 + C10764 * C503) *
               C10621 +
           (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
            C10765 * C508 + C10766 * C503) *
               C10622 +
           (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
            C10983 * C508 + C10984 * C503) *
               C10623 +
           (C10765 * C506 + C10766 * C501 - C10983 * C507 - C10984 * C502 +
            (C10625 * C8429 + C50612 * C8431) * C508 +
            (C10625 * C8433 + C50612 * C8435) * C503) *
               C10624) *
              C50802 * C50898 +
          ((C10767 * C507 -
            ((C10625 * C134 + C50612 * C144) * C501 +
             (C10625 * C123 + C50612 * C130) * C506) +
            C10768 * C502 - C10769 * C508 - C10770 * C503) *
               C10621 +
           (C10769 * C507 - (C10768 * C501 + C10767 * C506) + C10770 * C502 -
            C10771 * C508 - C10772 * C503) *
               C10622 +
           (C10771 * C507 - (C10770 * C501 + C10769 * C506) + C10772 * C502 -
            C10985 * C508 - C10986 * C503) *
               C10623 +
           (C10985 * C507 - (C10772 * C501 + C10771 * C506) + C10986 * C502 -
            (C10625 * C8428 + C50612 * C8430) * C508 -
            (C10625 * C8432 + C50612 * C8434) * C503) *
               C10624) *
              C50802 * C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50905 -
            (C2362 + C2363 + C2364) * C254 - (C2365 + C2366 + C2367) * C50688) *
               C50919 +
           ((C2364 + C2363 + C2362) * C253 + (C2367 + C2366 + C2365) * C50905 -
            (C2178 * C511 + C2173 * C516 + C2177 * C510 + C2172 * C515 +
             C2176 * C509 + C2171 * C514) *
                C254 -
            (C2178 * C520 + C2173 * C526 + C2177 * C519 + C2172 * C525 +
             C2176 * C518 + C2171 * C524) *
                C50688) *
               C50790) *
              C50802 * C250 +
          (((C2368 + C2369 + C2370) * C254 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50905 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C253) +
            (C2371 + C2372 + C2373) * C50688) *
               C50919 +
           ((C2176 * C510 + C2171 * C515 + C2177 * C511 + C2172 * C516 +
             C2178 * C512 + C2173 * C517) *
                C254 -
            ((C2373 + C2372 + C2371) * C50905 +
             (C2370 + C2369 + C2368) * C253) +
            (C2176 * C519 + C2171 * C525 + C2177 * C520 + C2172 * C526 +
             C2178 * C521 + C2173 * C527) *
                C50688) *
               C50790) *
              C50802 * C251 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C253 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50905 -
            (C2374 + C2375 + C2376) * C254 - (C2377 + C2378 + C2379) * C50688) *
               C50919 +
           ((C2376 + C2375 + C2374) * C253 + (C2379 + C2378 + C2377) * C50905 -
            (C2178 * C513 + C2173 * C522 + C2177 * C512 + C2172 * C517 +
             C2176 * C511 + C2171 * C516) *
                C254 -
            (C2178 * C523 + C2173 * C528 + C2177 * C521 + C2172 * C527 +
             C2176 * C520 + C2171 * C526) *
                C50688) *
               C50790) *
              C50802 * C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
            C2178 * C124 + C2173 * C131) *
               C600 +
           (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
            C2178 * C135 + C2173 * C145) *
               C595 -
           (C2362 + C2363 + C2364) * C601 - (C2365 + C2366 + C2367) * C596 +
           (C2696 + C2697 + C2698) * C602 + (C2699 + C2700 + C2701) * C597 -
           (C2830 + C2831 + C2832) * C603 - (C2833 + C2834 + C2835) * C598) *
              C50919 +
          ((C2364 + C2363 + C2362) * C600 + (C2367 + C2366 + C2365) * C595 -
           (C2698 + C2697 + C2696) * C601 - (C2701 + C2700 + C2699) * C596 +
           (C2832 + C2831 + C2830) * C602 + (C2835 + C2834 + C2833) * C597 -
           (C2178 * C2805 + C2173 * C2808 + C2177 * C2806 + C2172 * C2809 +
            C2176 * C2807 + C2171 * C2810) *
               C603 -
           (C2178 * C2811 + C2173 * C2814 + C2177 * C2812 + C2172 * C2815 +
            C2176 * C2813 + C2171 * C2816) *
               C598) *
              C50790) *
         C50802 * C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C253 +
            (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
            C10762 * C50688) *
               C10621 +
           (C10761 * C253 + C10762 * C50905 - C10763 * C254 - C10764 * C50688) *
               C10622 +
           (C10763 * C253 + C10764 * C50905 - C10765 * C254 - C10766 * C50688) *
               C10623 +
           (C10765 * C253 + C10766 * C50905 -
            (C10625 * C2807 + C50612 * C2810) * C254 -
            (C10625 * C2813 + C50612 * C2816) * C50688) *
               C10624) *
              C50802 * C250 +
          ((C10767 * C254 -
            ((C10625 * C134 + C50612 * C144) * C50905 +
             (C10625 * C123 + C50612 * C130) * C253) +
            C10768 * C50688) *
               C10621 +
           (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
            C10770 * C50688) *
               C10622 +
           (C10771 * C254 - (C10770 * C50905 + C10769 * C253) +
            C10772 * C50688) *
               C10623 +
           ((C10625 * C2806 + C50612 * C2809) * C254 -
            (C10772 * C50905 + C10771 * C253) +
            (C10625 * C2812 + C50612 * C2815) * C50688) *
               C10624) *
              C50802 * C251 +
          (((C10625 * C124 + C50612 * C131) * C253 +
            (C10625 * C135 + C50612 * C145) * C50905 - C10773 * C254 -
            C10774 * C50688) *
               C10621 +
           (C10773 * C253 + C10774 * C50905 - C10775 * C254 - C10776 * C50688) *
               C10622 +
           (C10775 * C253 + C10776 * C50905 - C10777 * C254 - C10778 * C50688) *
               C10623 +
           (C10777 * C253 + C10778 * C50905 -
            (C10625 * C2805 + C50612 * C2808) * C254 -
            (C10625 * C2811 + C50612 * C2814) * C50688) *
               C10624) *
              C50802 * C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10625 * C122 + C50612 * C129) * C600 +
           (C10625 * C133 + C50612 * C143) * C595 - C10761 * C601 -
           C10762 * C596 + C10763 * C602 + C10764 * C597 - C10765 * C603 -
           C10766 * C598) *
              C10621 +
          (C10761 * C600 + C10762 * C595 - C10763 * C601 - C10764 * C596 +
           C10765 * C602 + C10766 * C597 - C10983 * C603 - C10984 * C598) *
              C10622 +
          (C10763 * C600 + C10764 * C595 - C10765 * C601 - C10766 * C596 +
           C10983 * C602 + C10984 * C597 - C11061 * C603 - C11062 * C598) *
              C10623 +
          (C10765 * C600 + C10766 * C595 - C10983 * C601 - C10984 * C596 +
           C11061 * C602 + C11062 * C597 -
           (C10625 * C11052 + C50612 * C11053) * C603 -
           (C10625 * C11054 + C50612 * C11055) * C598) *
              C10624) *
         C50802 * C50638 * C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50672) *
                C50919 +
            ((C2364 + C2363 + C2362) * C121 +
             (C2367 + C2366 + C2365) * C50672) *
                C50790) *
               C50802 * C250 -
           (((C2373 + C2372 + C2371) * C50672 +
             (C2370 + C2369 + C2368) * C121) *
                C50790 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50672 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50919) *
               C50802 * C251 +
           (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
              C2178 * C126 + C2173 * C138) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
              C2178 * C137 + C2173 * C147) *
                 C50672) *
                C50919 +
            ((C2376 + C2375 + C2374) * C121 +
             (C2379 + C2378 + C2377) * C50672) *
                C50790) *
               C50802 * C252) *
              C50907 +
          ((((C2176 * C379 + C2171 * C385 + C2177 * C380 + C2172 * C386 +
              C2178 * C381 + C2173 * C387) *
                 C121 +
             (C2176 * C389 + C2171 * C397 + C2177 * C390 + C2172 * C398 +
              C2178 * C391 + C2173 * C399) *
                 C50672) *
                C50919 +
            ((C2176 * C719 + C2171 * C727 + C2177 * C720 + C2172 * C728 +
              C2178 * C721 + C2173 * C729) *
                 C121 +
             (C2176 * C731 + C2171 * C743 + C2177 * C732 + C2172 * C744 +
              C2178 * C733 + C2173 * C745) *
                 C50672) *
                C50790) *
               C50802 * C251 -
           (((C2178 * C732 + C2173 * C744 + C2177 * C731 + C2172 * C743 +
              C2176 * C730 + C2171 * C742) *
                 C50672 +
             (C2178 * C720 + C2173 * C728 + C2177 * C719 + C2172 * C727 +
              C2176 * C718 + C2171 * C726) *
                 C121) *
                C50790 +
            ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
              C2176 * C393 + C2171 * C401) *
                 C50672 +
             (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
              C2176 * C383 + C2171 * C394) *
                 C121) *
                C50919) *
               C50802 * C250 -
           (((C2178 * C1414 + C2173 * C1415 + C2177 * C733 + C2172 * C745 +
              C2176 * C732 + C2171 * C744) *
                 C50672 +
             (C2178 * C1412 + C2173 * C1413 + C2177 * C721 + C2172 * C729 +
              C2176 * C720 + C2171 * C728) *
                 C121) *
                C50790 +
            ((C2178 * C392 + C2173 * C400 + C2177 * C391 + C2172 * C399 +
              C2176 * C390 + C2171 * C398) *
                 C50672 +
             (C2178 * C382 + C2173 * C388 + C2177 * C381 + C2172 * C387 +
              C2176 * C380 + C2171 * C386) *
                 C121) *
                C50919) *
               C50802 * C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C506 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C501 -
            (C2362 + C2363 + C2364) * C507 - (C2365 + C2366 + C2367) * C502 +
            (C2696 + C2697 + C2698) * C508 + (C2699 + C2700 + C2701) * C503) *
               C50919 +
           ((C2364 + C2363 + C2362) * C506 + (C2367 + C2366 + C2365) * C501 -
            (C2698 + C2697 + C2696) * C507 - (C2701 + C2700 + C2699) * C502 +
            (C2832 + C2831 + C2830) * C508 + (C2835 + C2834 + C2833) * C503) *
               C50790) *
              C50802 * C50638 * C50907 +
          (((C3018 + C3019 + C3020) * C507 -
            ((C2178 * C390 + C2173 * C398 + C2177 * C389 + C2172 * C397 +
              C2176 * C393 + C2171 * C401) *
                 C501 +
             (C2178 * C380 + C2173 * C386 + C2177 * C379 + C2172 * C385 +
              C2176 * C383 + C2171 * C394) *
                 C506) +
            (C3021 + C3022 + C3023) * C502 - (C3024 + C3025 + C3026) * C508 -
            (C3027 + C3028 + C3029) * C503) *
               C50919 +
           ((C3026 + C3025 + C3024) * C507 -
            ((C3023 + C3022 + C3021) * C501 + (C3020 + C3019 + C3018) * C506) +
            (C3029 + C3028 + C3027) * C502 -
            (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
             C2176 * C2983 + C2171 * C2986) *
                C508 -
            (C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
             C2176 * C2989 + C2171 * C2992) *
                C503) *
               C50790) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C10621 +
            (C10761 * C121 + C10762 * C50672) * C10622 +
            (C10763 * C121 + C10764 * C50672) * C10623 +
            (C10765 * C121 + C10766 * C50672) * C10624) *
               C50802 * C250 -
           ((C10772 * C50672 + C10771 * C121) * C10624 +
            (C10770 * C50672 + C10769 * C121) * C10623 +
            (C10768 * C50672 + C10767 * C121) * C10622 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C10621) *
               C50802 * C251 +
           (((C10625 * C124 + C50612 * C131) * C121 +
             (C10625 * C135 + C50612 * C145) * C50672) *
                C10621 +
            (C10773 * C121 + C10774 * C50672) * C10622 +
            (C10775 * C121 + C10776 * C50672) * C10623 +
            (C10777 * C121 + C10778 * C50672) * C10624) *
               C50802 * C252) *
              C50907 +
          ((((C10625 * C379 + C50612 * C385) * C121 +
             (C10625 * C389 + C50612 * C397) * C50672) *
                C10621 +
            ((C10625 * C719 + C50612 * C727) * C121 +
             (C10625 * C731 + C50612 * C743) * C50672) *
                C10622 +
            ((C10625 * C724 + C50612 * C736) * C121 +
             (C10625 * C740 + C50612 * C748) * C50672) *
                C10623 +
            ((C10625 * C2982 + C50612 * C2985) * C121 +
             (C10625 * C2988 + C50612 * C2991) * C50672) *
                C10624) *
               C50802 * C251 -
           (((C10625 * C2989 + C50612 * C2992) * C50672 +
             (C10625 * C2983 + C50612 * C2986) * C121) *
                C10624 +
            ((C10625 * C741 + C50612 * C749) * C50672 +
             (C10625 * C725 + C50612 * C737) * C121) *
                C10623 +
            ((C10625 * C730 + C50612 * C742) * C50672 +
             (C10625 * C718 + C50612 * C726) * C121) *
                C10622 +
            ((C10625 * C393 + C50612 * C401) * C50672 +
             (C10625 * C383 + C50612 * C394) * C121) *
                C10621) *
               C50802 * C250 -
           (((C10625 * C2987 + C50612 * C2990) * C50672 +
             (C10625 * C2981 + C50612 * C2984) * C121) *
                C10624 +
            ((C10625 * C739 + C50612 * C747) * C50672 +
             (C10625 * C723 + C50612 * C735) * C121) *
                C10623 +
            ((C10625 * C732 + C50612 * C744) * C50672 +
             (C10625 * C720 + C50612 * C728) * C121) *
                C10622 +
            ((C10625 * C390 + C50612 * C398) * C50672 +
             (C10625 * C380 + C50612 * C386) * C121) *
                C10621) *
               C50802 * C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C506 +
            (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
            C10762 * C502 + C10763 * C508 + C10764 * C503) *
               C10621 +
           (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
            C10765 * C508 + C10766 * C503) *
               C10622 +
           (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
            C10983 * C508 + C10984 * C503) *
               C10623 +
           (C10765 * C506 + C10766 * C501 - C10983 * C507 - C10984 * C502 +
            C11061 * C508 + C11062 * C503) *
               C10624) *
              C50802 * C50638 * C50907 +
          ((C11181 * C507 -
            ((C10625 * C393 + C50612 * C401) * C501 +
             (C10625 * C383 + C50612 * C394) * C506) +
            C11182 * C502 - C11183 * C508 - C11184 * C503) *
               C10621 +
           (C11183 * C507 - (C11182 * C501 + C11181 * C506) + C11184 * C502 -
            C11185 * C508 - C11186 * C503) *
               C10622 +
           (C11185 * C507 - (C11184 * C501 + C11183 * C506) + C11186 * C502 -
            C11187 * C508 - C11188 * C503) *
               C10623 +
           (C11187 * C507 - (C11186 * C501 + C11185 * C506) + C11188 * C502 -
            (C10625 * C11160 + C50612 * C11161) * C508 -
            (C10625 * C11162 + C50612 * C11163) * C503) *
               C10624) *
              C50802 * C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1174 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C1169 -
            (C2362 + C2363 + C2364) * C1175 -
            (C2365 + C2366 + C2367) * C50688) *
               C50776 * C50920 +
           ((C5366 + C5367 + C5368) * C1174 + (C5369 + C5370 + C5371) * C1169 -
            (C3020 + C3019 + C3018) * C1175 -
            (C3023 + C3022 + C3021) * C50688) *
               C50776 * C50814) *
              C50950 +
          (((C2368 + C2369 + C2370) * C1175 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C1169 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C1174) +
            (C2371 + C2372 + C2373) * C50688) *
               C50776 * C50920 +
           ((C3962 + C3961 + C3960) * C1175 -
            ((C5372 + C5373 + C5374) * C1169 +
             (C5375 + C5376 + C5377) * C1174) +
            (C3965 + C3964 + C3963) * C50688) *
               C50776 * C50814) *
              C50936 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C1174 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C1169 -
            (C2374 + C2375 + C2376) * C1175 -
            (C2377 + C2378 + C2379) * C50688) *
               C50776 * C50920 +
           ((C5378 + C5379 + C5380) * C1174 + (C5381 + C5382 + C5383) * C1169 -
            (C2178 * C1412 + C2173 * C1413 + C2177 * C721 + C2172 * C729 +
             C2176 * C720 + C2171 * C728) *
                C1175 -
            (C2178 * C1414 + C2173 * C1415 + C2177 * C733 + C2172 * C745 +
             C2176 * C732 + C2171 * C744) *
                C50688) *
               C50776 * C50814) *
              C1173) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1174 +
             (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
             C10762 * C50688) *
                C7787 +
            (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
             C10764 * C50688) *
                C7788 +
            (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
             C10766 * C50688) *
                C7789) *
               C50920 +
           ((C12899 * C1174 + C12900 * C1169 - C11181 * C1175 -
             C11182 * C50688) *
                C7787 +
            (C11181 * C1174 + C11182 * C1169 - C11183 * C1175 -
             C11184 * C50688) *
                C7788 +
            (C11183 * C1174 + C11184 * C1169 - C11185 * C1175 -
             C11186 * C50688) *
                C7789) *
               C50814) *
              C50950 +
          (((C10767 * C1175 -
             ((C10625 * C134 + C50612 * C144) * C1169 +
              (C10625 * C123 + C50612 * C130) * C1174) +
             C10768 * C50688) *
                C7787 +
            (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
             C10770 * C50688) *
                C7788 +
            (C10771 * C1175 - (C10770 * C1169 + C10769 * C1174) +
             C10772 * C50688) *
                C7789) *
               C50920 +
           ((C11815 * C1175 - (C12901 * C1169 + C12902 * C1174) +
             C11816 * C50688) *
                C7787 +
            (C11817 * C1175 - (C11816 * C1169 + C11815 * C1174) +
             C11818 * C50688) *
                C7788 +
            (C11819 * C1175 - (C11818 * C1169 + C11817 * C1174) +
             C11820 * C50688) *
                C7789) *
               C50814) *
              C50936 +
          ((((C10625 * C124 + C50612 * C131) * C1174 +
             (C10625 * C135 + C50612 * C145) * C1169 - C10773 * C1175 -
             C10774 * C50688) *
                C7787 +
            (C10773 * C1174 + C10774 * C1169 - C10775 * C1175 -
             C10776 * C50688) *
                C7788 +
            (C10775 * C1174 + C10776 * C1169 - C10777 * C1175 -
             C10778 * C50688) *
                C7789) *
               C50920 +
           ((C12903 * C1174 + C12904 * C1169 - C12725 * C1175 -
             C12726 * C50688) *
                C7787 +
            (C12725 * C1174 + C12726 * C1169 - C12727 * C1175 -
             C12728 * C50688) *
                C7788 +
            (C12727 * C1174 + C12728 * C1169 -
             (C10625 * C2981 + C50612 * C2984) * C1175 -
             (C10625 * C2987 + C50612 * C2990) * C50688) *
                C7789) *
               C50814) *
              C1173) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1279 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50951 -
            (C2362 + C2363 + C2364) * C1280 - (C2365 + C2366 + C2367) * C50939 +
            (C2696 + C2697 + C2698) * C1281 + (C2699 + C2700 + C2701) * C1276) *
               C50776 * C50920 +
           ((C5366 + C5367 + C5368) * C1279 + (C5369 + C5370 + C5371) * C50951 -
            (C3020 + C3019 + C3018) * C1280 - (C3023 + C3022 + C3021) * C50939 +
            (C3026 + C3025 + C3024) * C1281 + (C3029 + C3028 + C3027) * C1276) *
               C50776 * C50814) *
              C1277 +
          (((C2368 + C2369 + C2370) * C1280 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50951 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C1279) +
            (C2371 + C2372 + C2373) * C50939 - (C2702 + C2703 + C2704) * C1281 -
            (C2705 + C2706 + C2707) * C1276) *
               C50776 * C50920 +
           ((C3962 + C3961 + C3960) * C1280 -
            ((C5372 + C5373 + C5374) * C50951 +
             (C5375 + C5376 + C5377) * C1279) +
            (C3965 + C3964 + C3963) * C50939 -
            (C2178 * C722 + C2173 * C734 + C2177 * C723 + C2172 * C735 +
             C2176 * C724 + C2171 * C736) *
                C1281 -
            (C2178 * C738 + C2173 * C746 + C2177 * C739 + C2172 * C747 +
             C2176 * C740 + C2171 * C748) *
                C1276) *
               C50776 * C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1279 +
             (C10625 * C133 + C50612 * C143) * C50951 - C10761 * C1280 -
             C10762 * C50939 + C10763 * C1281 + C10764 * C1276) *
                C7787 +
            (C10761 * C1279 + C10762 * C50951 - C10763 * C1280 -
             C10764 * C50939 + C10765 * C1281 + C10766 * C1276) *
                C7788 +
            (C10763 * C1279 + C10764 * C50951 - C10765 * C1280 -
             C10766 * C50939 + C10983 * C1281 + C10984 * C1276) *
                C7789) *
               C50920 +
           ((C12899 * C1279 + C12900 * C50951 - C11181 * C1280 -
             C11182 * C50939 + C11183 * C1281 + C11184 * C1276) *
                C7787 +
            (C11181 * C1279 + C11182 * C50951 - C11183 * C1280 -
             C11184 * C50939 + C11185 * C1281 + C11186 * C1276) *
                C7788 +
            (C11183 * C1279 + C11184 * C50951 - C11185 * C1280 -
             C11186 * C50939 + C11187 * C1281 + C11188 * C1276) *
                C7789) *
               C50814) *
              C1277 +
          (((C10767 * C1280 -
             ((C10625 * C134 + C50612 * C144) * C50951 +
              (C10625 * C123 + C50612 * C130) * C1279) +
             C10768 * C50939 - C10769 * C1281 - C10770 * C1276) *
                C7787 +
            (C10769 * C1280 - (C10768 * C50951 + C10767 * C1279) +
             C10770 * C50939 - C10771 * C1281 - C10772 * C1276) *
                C7788 +
            (C10771 * C1280 - (C10770 * C50951 + C10769 * C1279) +
             C10772 * C50939 - C10985 * C1281 - C10986 * C1276) *
                C7789) *
               C50920 +
           ((C11815 * C1280 - (C12901 * C50951 + C12902 * C1279) +
             C11816 * C50939 - C11817 * C1281 - C11818 * C1276) *
                C7787 +
            (C11817 * C1280 - (C11816 * C50951 + C11815 * C1279) +
             C11818 * C50939 - C11819 * C1281 - C11820 * C1276) *
                C7788 +
            (C11819 * C1280 - (C11818 * C50951 + C11817 * C1279) +
             C11820 * C50939 - (C10625 * C8596 + C50612 * C8598) * C1281 -
             (C10625 * C8600 + C50612 * C8602) * C1276) *
                C7789) *
               C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C1174 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C1169 -
             (C2362 + C2363 + C2364) * C1175 -
             (C2365 + C2366 + C2367) * C50688) *
                C50776 * C50920 +
            ((C5366 + C5367 + C5368) * C1174 + (C5369 + C5370 + C5371) * C1169 -
             (C3020 + C3019 + C3018) * C1175 -
             (C3023 + C3022 + C3021) * C50688) *
                C50776 * C50814) *
               C1277 +
           (((C2368 + C2369 + C2370) * C1175 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C1169 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C1174) +
             (C2371 + C2372 + C2373) * C50688) *
                C50776 * C50920 +
            ((C3962 + C3961 + C3960) * C1175 -
             ((C5372 + C5373 + C5374) * C1169 +
              (C5375 + C5376 + C5377) * C1174) +
             (C3965 + C3964 + C3963) * C50688) *
                C50776 * C50814) *
               C50643) *
              C50907 +
          ((((C3018 + C3019 + C3020) * C1175 -
             ((C5371 + C5370 + C5369) * C1169 +
              (C5368 + C5367 + C5366) * C1174) +
             (C3021 + C3022 + C3023) * C50688) *
                C50776 * C50920 +
            ((C3348 + C3347 + C3346) * C1175 -
             ((C5950 + C5951 + C5952) * C1169 +
              (C5953 + C5954 + C5955) * C1174) +
             (C3351 + C3350 + C3349) * C50688) *
                C50776 * C50814) *
               C1277 +
           (((C5377 + C5376 + C5375) * C1174 + (C5374 + C5373 + C5372) * C1169 -
             (C3960 + C3961 + C3962) * C1175 -
             (C3963 + C3964 + C3965) * C50688) *
                C50776 * C50920 +
            ((C5944 + C5945 + C5946) * C1174 + (C5947 + C5948 + C5949) * C1169 -
             (C2178 * C969 + C2173 * C973 + C2177 * C970 + C2172 * C974 +
              C2176 * C971 + C2171 * C975) *
                 C1175 -
             (C2178 * C977 + C2173 * C981 + C2177 * C978 + C2172 * C982 +
              C2176 * C979 + C2171 * C983) *
                 C50688) *
                C50776 * C50814) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C1174 +
              (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
              C10762 * C50688) *
                 C7787 +
             (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
              C10764 * C50688) *
                 C7788 +
             (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
              C10766 * C50688) *
                 C7789) *
                C50920 +
            ((C14287 + C14288 - C14289 - C14290) * C7787 +
             (C14291 + C14292 - C14293 - C14294) * C7788 +
             (C14295 + C14296 - C14297 - C14298) * C7789) *
                C50814) *
               C1277 +
           (((C10767 * C1175 -
              ((C10625 * C134 + C50612 * C144) * C1169 +
               (C10625 * C123 + C50612 * C130) * C1174) +
              C10768 * C50688) *
                 C7787 +
             (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
              C10770 * C50688) *
                 C7788 +
             (C10771 * C1175 - (C10770 * C1169 + C10769 * C1174) +
              C10772 * C50688) *
                 C7789) *
                C50920 +
            ((C14299 - (C14300 + C14301) + C14302) * C7787 +
             (C14303 - (C14304 + C14305) + C14306) * C7788 +
             (C14307 - (C14308 + C14309) + C14310) * C7789) *
                C50814) *
               C50643) *
              C50907 +
          ((((C14289 - (C14288 + C14287) + C14290) * C7787 +
             (C14293 - (C14292 + C14291) + C14294) * C7788 +
             (C14297 - (C14296 + C14295) + C14298) * C7789) *
                C50920 +
            ((C11401 * C1175 - (C13491 * C1169 + C13492 * C1174) +
              C11402 * C50688) *
                 C7787 +
             (C11403 * C1175 - (C11402 * C1169 + C11401 * C1174) +
              C11404 * C50688) *
                 C7788 +
             (C11405 * C1175 - (C11404 * C1169 + C11403 * C1174) +
              C11406 * C50688) *
                 C7789) *
                C50814) *
               C1277 +
           (((C14301 + C14300 - C14299 - C14302) * C7787 +
             (C14305 + C14304 - C14303 - C14306) * C7788 +
             (C14309 + C14308 - C14307 - C14310) * C7789) *
                C50920 +
            ((C13485 * C1174 + C13486 * C1169 - C13487 * C1175 -
              C13488 * C50688) *
                 C7787 +
             (C13487 * C1174 + C13488 * C1169 - C13489 * C1175 -
              C13490 * C50688) *
                 C7788 +
             (C13489 * C1174 + C13490 * C1169 -
              (C10625 * C8934 + C50612 * C8936) * C1175 -
              (C10625 * C8938 + C50612 * C8940) * C50688) *
                 C7789) *
                C50814) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C1174 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C1169 -
             (C2362 + C2363 + C2364) * C1175 -
             (C2365 + C2366 + C2367) * C50688) *
                C50776 * C50920 +
            ((C5366 + C5367 + C5368) * C1174 + (C5369 + C5370 + C5371) * C1169 -
             (C3020 + C3019 + C3018) * C1175 -
             (C3023 + C3022 + C3021) * C50688) *
                C50776 * C50814) *
               C50898 +
           (((C2368 + C2369 + C2370) * C1175 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C1169 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C1174) +
             (C2371 + C2372 + C2373) * C50688) *
                C50776 * C50920 +
            ((C3962 + C3961 + C3960) * C1175 -
             ((C5372 + C5373 + C5374) * C1169 +
              (C5375 + C5376 + C5377) * C1174) +
             (C3965 + C3964 + C3963) * C50688) *
                C50776 * C50814) *
               C50643) *
              C1514 +
          ((((C3018 + C3019 + C3020) * C1175 -
             ((C5371 + C5370 + C5369) * C1169 +
              (C5368 + C5367 + C5366) * C1174) +
             (C3021 + C3022 + C3023) * C50688) *
                C50776 * C50920 +
            ((C3348 + C3347 + C3346) * C1175 -
             ((C5950 + C5951 + C5952) * C1169 +
              (C5953 + C5954 + C5955) * C1174) +
             (C3351 + C3350 + C3349) * C50688) *
                C50776 * C50814) *
               C50898 +
           (((C5377 + C5376 + C5375) * C1174 + (C5374 + C5373 + C5372) * C1169 -
             (C3960 + C3961 + C3962) * C1175 -
             (C3963 + C3964 + C3965) * C50688) *
                C50776 * C50920 +
            ((C5944 + C5945 + C5946) * C1174 + (C5947 + C5948 + C5949) * C1169 -
             (C2178 * C969 + C2173 * C973 + C2177 * C970 + C2172 * C974 +
              C2176 * C971 + C2171 * C975) *
                 C1175 -
             (C2178 * C977 + C2173 * C981 + C2177 * C978 + C2172 * C982 +
              C2176 * C979 + C2171 * C983) *
                 C50688) *
                C50776 * C50814) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C1174 +
              (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
              C10762 * C50688) *
                 C7787 +
             (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
              C10764 * C50688) *
                 C7788 +
             (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
              C10766 * C50688) *
                 C7789) *
                C50920 +
            ((C14287 + C14288 - C14289 - C14290) * C7787 +
             (C14291 + C14292 - C14293 - C14294) * C7788 +
             (C14295 + C14296 - C14297 - C14298) * C7789) *
                C50814) *
               C50898 +
           (((C10767 * C1175 -
              ((C10625 * C134 + C50612 * C144) * C1169 +
               (C10625 * C123 + C50612 * C130) * C1174) +
              C10768 * C50688) *
                 C7787 +
             (C10769 * C1175 - (C10768 * C1169 + C10767 * C1174) +
              C10770 * C50688) *
                 C7788 +
             (C10771 * C1175 - (C10770 * C1169 + C10769 * C1174) +
              C10772 * C50688) *
                 C7789) *
                C50920 +
            ((C14299 - (C14300 + C14301) + C14302) * C7787 +
             (C14303 - (C14304 + C14305) + C14306) * C7788 +
             (C14307 - (C14308 + C14309) + C14310) * C7789) *
                C50814) *
               C50643) *
              C1514 +
          ((((C14289 - (C14288 + C14287) + C14290) * C7787 +
             (C14293 - (C14292 + C14291) + C14294) * C7788 +
             (C14297 - (C14296 + C14295) + C14298) * C7789) *
                C50920 +
            ((C11401 * C1175 - (C13491 * C1169 + C13492 * C1174) +
              C11402 * C50688) *
                 C7787 +
             (C11403 * C1175 - (C11402 * C1169 + C11401 * C1174) +
              C11404 * C50688) *
                 C7788 +
             (C11405 * C1175 - (C11404 * C1169 + C11403 * C1174) +
              C11406 * C50688) *
                 C7789) *
                C50814) *
               C50898 +
           (((C14301 + C14300 - C14299 - C14302) * C7787 +
             (C14305 + C14304 - C14303 - C14306) * C7788 +
             (C14309 + C14308 - C14307 - C14310) * C7789) *
                C50920 +
            ((C13485 * C1174 + C13486 * C1169 - C13487 * C1175 -
              C13488 * C50688) *
                 C7787 +
             (C13487 * C1174 + C13488 * C1169 - C13489 * C1175 -
              C13490 * C50688) *
                 C7788 +
             (C13489 * C1174 + C13490 * C1169 -
              (C10625 * C8934 + C50612 * C8936) * C1175 -
              (C10625 * C8938 + C50612 * C8940) * C50688) *
                 C7789) *
                C50814) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1279 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50951 -
            (C2362 + C2363 + C2364) * C1280 - (C2365 + C2366 + C2367) * C50939 +
            (C2696 + C2697 + C2698) * C1281 + (C2699 + C2700 + C2701) * C1276) *
               C50776 * C50920 +
           ((C5366 + C5367 + C5368) * C1279 + (C5369 + C5370 + C5371) * C50951 -
            (C3020 + C3019 + C3018) * C1280 - (C3023 + C3022 + C3021) * C50939 +
            (C3026 + C3025 + C3024) * C1281 + (C3029 + C3028 + C3027) * C1276) *
               C50776 * C50814) *
              C50638 * C1514 +
          (((C3018 + C3019 + C3020) * C1280 -
            ((C5371 + C5370 + C5369) * C50951 +
             (C5368 + C5367 + C5366) * C1279) +
            (C3021 + C3022 + C3023) * C50939 - (C3024 + C3025 + C3026) * C1281 -
            (C3027 + C3028 + C3029) * C1276) *
               C50776 * C50920 +
           ((C3348 + C3347 + C3346) * C1280 -
            ((C5950 + C5951 + C5952) * C50951 +
             (C5953 + C5954 + C5955) * C1279) +
            (C3351 + C3350 + C3349) * C50939 -
            (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
             C2176 * C3323 + C2171 * C3326) *
                C1281 -
            (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
             C2176 * C3329 + C2171 * C3332) *
                C1276) *
               C50776 * C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1279 +
             (C10625 * C133 + C50612 * C143) * C50951 - C10761 * C1280 -
             C10762 * C50939 + C10763 * C1281 + C10764 * C1276) *
                C7787 +
            (C10761 * C1279 + C10762 * C50951 - C10763 * C1280 -
             C10764 * C50939 + C10765 * C1281 + C10766 * C1276) *
                C7788 +
            (C10763 * C1279 + C10764 * C50951 - C10765 * C1280 -
             C10766 * C50939 + C10983 * C1281 + C10984 * C1276) *
                C7789) *
               C50920 +
           ((C15149 + C15150 - C15151 - C15152 + C15153 + C15154) * C7787 +
            (C15155 + C15156 - C15157 - C15158 + C15159 + C15160) * C7788 +
            (C15161 + C15162 - C15163 - C15164 + C15165 + C15166) * C7789) *
               C50814) *
              C50638 * C1514 +
          (((C15151 - (C15150 + C15149) + C15152 - C15153 - C15154) * C7787 +
            (C15157 - (C15156 + C15155) + C15158 - C15159 - C15160) * C7788 +
            (C15163 - (C15162 + C15161) + C15164 - C15165 - C15166) * C7789) *
               C50920 +
           ((C11401 * C1280 - (C13491 * C50951 + C13492 * C1279) +
             C11402 * C50939 - C11403 * C1281 - C11404 * C1276) *
                C7787 +
            (C11403 * C1280 - (C11402 * C50951 + C11401 * C1279) +
             C11404 * C50939 - C11405 * C1281 - C11406 * C1276) *
                C7788 +
            (C11405 * C1280 - (C11404 * C50951 + C11403 * C1279) +
             C11406 * C50939 - (C10625 * C11384 + C50612 * C11385) * C1281 -
             (C10625 * C11386 + C50612 * C11387) * C1276) *
                C7789) *
               C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1174 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C1169 -
            (C2362 + C2363 + C2364) * C1175 -
            (C2365 + C2366 + C2367) * C50688) *
               C50776 * C50920 +
           ((C5366 + C5367 + C5368) * C1174 + (C5369 + C5370 + C5371) * C1169 -
            (C3020 + C3019 + C3018) * C1175 -
            (C3023 + C3022 + C3021) * C50688) *
               C50776 * C50814) *
              C50638 * C50952 +
          (((C3018 + C3019 + C3020) * C1175 -
            ((C5371 + C5370 + C5369) * C1169 +
             (C5368 + C5367 + C5366) * C1174) +
            (C3021 + C3022 + C3023) * C50688) *
               C50776 * C50920 +
           ((C3348 + C3347 + C3346) * C1175 -
            ((C5950 + C5951 + C5952) * C1169 +
             (C5953 + C5954 + C5955) * C1174) +
            (C3351 + C3350 + C3349) * C50688) *
               C50776 * C50814) *
              C50638 * C50942 +
          (((C5955 + C5954 + C5953) * C1174 + (C5952 + C5951 + C5950) * C1169 -
            (C3346 + C3347 + C3348) * C1175 -
            (C3349 + C3350 + C3351) * C50688) *
               C50776 * C50920 +
           ((C6224 + C6225 + C6226) * C1174 + (C6227 + C6228 + C6229) * C1169 -
            (C2178 * C3449 + C2173 * C3455 + C2177 * C3450 + C2172 * C3456 +
             C2176 * C3451 + C2171 * C3457) *
                C1175 -
            (C2178 * C3452 + C2173 * C3458 + C2177 * C3453 + C2172 * C3459 +
             C2176 * C3454 + C2171 * C3460) *
                C50688) *
               C50776 * C50814) *
              C50638 * C1746)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C1174 +
             (C10625 * C133 + C50612 * C143) * C1169 - C10761 * C1175 -
             C10762 * C50688) *
                C7787 +
            (C10761 * C1174 + C10762 * C1169 - C10763 * C1175 -
             C10764 * C50688) *
                C7788 +
            (C10763 * C1174 + C10764 * C1169 - C10765 * C1175 -
             C10766 * C50688) *
                C7789) *
               C50920 +
           ((C14287 + C14288 - C14289 - C14290) * C7787 +
            (C14291 + C14292 - C14293 - C14294) * C7788 +
            (C14295 + C14296 - C14297 - C14298) * C7789) *
               C50814) *
              C50638 * C50952 +
          (((C14289 - (C14288 + C14287) + C14290) * C7787 +
            (C14293 - (C14292 + C14291) + C14294) * C7788 +
            (C14297 - (C14296 + C14295) + C14298) * C7789) *
               C50920 +
           ((C15313 - (C15314 + C15315) + C15316) * C7787 +
            (C15317 - (C15318 + C15319) + C15320) * C7788 +
            (C15321 - (C15322 + C15323) + C15324) * C7789) *
               C50814) *
              C50638 * C50942 +
          (((C15315 + C15314 - C15313 - C15316) * C7787 +
            (C15319 + C15318 - C15317 - C15320) * C7788 +
            (C15323 + C15322 - C15321 - C15324) * C7789) *
               C50920 +
           ((C13797 * C1174 + C13798 * C1169 - C13679 * C1175 -
             C13680 * C50688) *
                C7787 +
            (C13679 * C1174 + C13680 * C1169 - C13681 * C1175 -
             C13682 * C50688) *
                C7788 +
            (C13681 * C1174 + C13682 * C1169 -
             (C10625 * C11472 + C50612 * C11474) * C1175 -
             (C10625 * C11473 + C50612 * C11475) * C50688) *
                C7789) *
               C50814) *
              C50638 * C1746)) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C506 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C501 -
            (C2362 + C2363 + C2364) * C507 - (C2365 + C2366 + C2367) * C502 +
            (C2696 + C2697 + C2698) * C508 + (C2699 + C2700 + C2701) * C503) *
               C50776 * C50920 +
           ((C5366 + C5367 + C5368) * C506 + (C5369 + C5370 + C5371) * C501 -
            (C3020 + C3019 + C3018) * C507 - (C3023 + C3022 + C3021) * C502 +
            (C3026 + C3025 + C3024) * C508 + (C3029 + C3028 + C3027) * C503) *
               C50776 * C50814) *
              C50898 +
          (((C2368 + C2369 + C2370) * C507 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C501 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C506) +
            (C2371 + C2372 + C2373) * C502 - (C2702 + C2703 + C2704) * C508 -
            (C2705 + C2706 + C2707) * C503) *
               C50776 * C50920 +
           ((C3962 + C3961 + C3960) * C507 -
            ((C5372 + C5373 + C5374) * C501 + (C5375 + C5376 + C5377) * C506) +
            (C3965 + C3964 + C3963) * C502 -
            (C2178 * C722 + C2173 * C734 + C2177 * C723 + C2172 * C735 +
             C2176 * C724 + C2171 * C736) *
                C508 -
            (C2178 * C738 + C2173 * C746 + C2177 * C739 + C2172 * C747 +
             C2176 * C740 + C2171 * C748) *
                C503) *
               C50776 * C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50672) *
               C50776 * C50920 +
           ((C2176 * C383 + C2171 * C394 + C2177 * C379 + C2172 * C385 +
             C2178 * C380 + C2173 * C386) *
                C121 +
            (C2176 * C393 + C2171 * C401 + C2177 * C389 + C2172 * C397 +
             C2178 * C390 + C2173 * C398) *
                C50672) *
               C50776 * C50814) *
              C112 -
          (((C2178 * C391 + C2173 * C399 + C2177 * C390 + C2172 * C398 +
             C2176 * C389 + C2171 * C397) *
                C50672 +
            (C2178 * C381 + C2173 * C387 + C2177 * C380 + C2172 * C386 +
             C2176 * C379 + C2171 * C385) *
                C121) *
               C50776 * C50814 +
           ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
             C2176 * C134 + C2171 * C144) *
                C50672 +
            (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
             C2176 * C123 + C2171 * C130) *
                C121) *
               C50776 * C50920) *
              C113 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C121 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50672) *
               C50776 * C50920 +
           ((C2176 * C380 + C2171 * C386 + C2177 * C381 + C2172 * C387 +
             C2178 * C382 + C2173 * C388) *
                C121 +
            (C2176 * C390 + C2171 * C398 + C2177 * C391 + C2172 * C399 +
             C2178 * C392 + C2173 * C400) *
                C50672) *
               C50776 * C50814) *
              C114 -
          (((C2178 * C395 + C2173 * C402 + C2177 * C392 + C2172 * C400 +
             C2176 * C391 + C2171 * C399) *
                C50672 +
            (C2178 * C384 + C2173 * C396 + C2177 * C382 + C2172 * C388 +
             C2176 * C381 + C2171 * C387) *
                C121) *
               C50776 * C50814 +
           ((C2178 * C140 + C2173 * C148 + C2177 * C137 + C2172 * C147 +
             C2176 * C136 + C2171 * C146) *
                C50672 +
            (C2178 * C127 + C2173 * C139 + C2177 * C126 + C2172 * C138 +
             C2176 * C125 + C2171 * C132) *
                C121) *
               C50776 * C50920) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50672) *
                C50776 * C50920 +
            ((C5366 + C5367 + C5368) * C121 +
             (C5369 + C5370 + C5371) * C50672) *
                C50776 * C50814) *
               C50898 -
           (((C5372 + C5373 + C5374) * C50672 +
             (C5375 + C5376 + C5377) * C121) *
                C50776 * C50814 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50672 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50776 * C50920) *
               C50643) *
              C848 +
          ((((C5377 + C5376 + C5375) * C121 +
             (C5374 + C5373 + C5372) * C50672) *
                C50776 * C50920 +
            ((C5944 + C5945 + C5946) * C121 +
             (C5947 + C5948 + C5949) * C50672) *
                C50776 * C50814) *
               C50643 -
           (((C5950 + C5951 + C5952) * C50672 +
             (C5953 + C5954 + C5955) * C121) *
                C50776 * C50814 +
            ((C5371 + C5370 + C5369) * C50672 +
             (C5368 + C5367 + C5366) * C121) *
                C50776 * C50920) *
               C50898) *
              C849 +
          ((((C5955 + C5954 + C5953) * C121 +
             (C5952 + C5951 + C5950) * C50672) *
                C50776 * C50920 +
            ((C2176 * C1058 + C2171 * C1066 + C2177 * C1057 + C2172 * C1065 +
              C2178 * C1056 + C2173 * C1064) *
                 C121 +
             (C2176 * C1062 + C2171 * C1070 + C2177 * C1061 + C2172 * C1069 +
              C2178 * C1060 + C2173 * C1068) *
                 C50672) *
                C50776 * C50814) *
               C50898 -
           (((C2178 * C1059 + C2173 * C1067 + C2177 * C1060 + C2172 * C1068 +
              C2176 * C1061 + C2171 * C1069) *
                 C50672 +
             (C2178 * C1055 + C2173 * C1063 + C2177 * C1056 + C2172 * C1064 +
              C2176 * C1057 + C2171 * C1065) *
                 C121) *
                C50776 * C50814 +
            ((C5949 + C5948 + C5947) * C50672 +
             (C5946 + C5945 + C5944) * C121) *
                C50776 * C50920) *
               C50643) *
              C850)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C7787 +
            (C10761 * C121 + C10762 * C50672) * C7788 +
            (C10763 * C121 + C10764 * C50672) * C7789) *
               C50920 +
           (((C10625 * C383 + C50612 * C394) * C121 +
             (C10625 * C393 + C50612 * C401) * C50672) *
                C7787 +
            (C11181 * C121 + C11182 * C50672) * C7788 +
            (C11183 * C121 + C11184 * C50672) * C7789) *
               C50814) *
              C112 -
          (((C11818 * C50672 + C11817 * C121) * C7789 +
            (C11816 * C50672 + C11815 * C121) * C7788 +
            ((C10625 * C389 + C50612 * C397) * C50672 +
             (C10625 * C379 + C50612 * C385) * C121) *
                C7787) *
               C50814 +
           ((C10770 * C50672 + C10769 * C121) * C7789 +
            (C10768 * C50672 + C10767 * C121) * C7788 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C7787) *
               C50920) *
              C113 +
          ((((C10625 * C124 + C50612 * C131) * C121 +
             (C10625 * C135 + C50612 * C145) * C50672) *
                C7787 +
            (C10773 * C121 + C10774 * C50672) * C7788 +
            (C10775 * C121 + C10776 * C50672) * C7789) *
               C50920 +
           (((C10625 * C380 + C50612 * C386) * C121 +
             (C10625 * C390 + C50612 * C398) * C50672) *
                C7787 +
            ((C10625 * C720 + C50612 * C728) * C121 +
             (C10625 * C732 + C50612 * C744) * C50672) *
                C7788 +
            ((C10625 * C723 + C50612 * C735) * C121 +
             (C10625 * C739 + C50612 * C747) * C50672) *
                C7789) *
               C50814) *
              C114 -
          ((((C10625 * C738 + C50612 * C746) * C50672 +
             (C10625 * C722 + C50612 * C734) * C121) *
                C7789 +
            ((C10625 * C733 + C50612 * C745) * C50672 +
             (C10625 * C721 + C50612 * C729) * C121) *
                C7788 +
            ((C10625 * C391 + C50612 * C399) * C50672 +
             (C10625 * C381 + C50612 * C387) * C121) *
                C7787) *
               C50814 +
           (((C10625 * C521 + C50612 * C527) * C50672 +
             (C10625 * C512 + C50612 * C517) * C121) *
                C7789 +
            ((C10625 * C265 + C50612 * C273) * C50672 +
             (C10625 * C255 + C50612 * C261) * C121) *
                C7788 +
            ((C10625 * C136 + C50612 * C146) * C50672 +
             (C10625 * C125 + C50612 * C132) * C121) *
                C7787) *
               C50920) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C7787 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C7788 +
            (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
             C10983 * C508 + C10984 * C503) *
                C7789) *
               C50920 +
           ((C12899 * C506 + C12900 * C501 - C11181 * C507 - C11182 * C502 +
             C11183 * C508 + C11184 * C503) *
                C7787 +
            (C11181 * C506 + C11182 * C501 - C11183 * C507 - C11184 * C502 +
             C11185 * C508 + C11186 * C503) *
                C7788 +
            (C11183 * C506 + C11184 * C501 - C11185 * C507 - C11186 * C502 +
             C11187 * C508 + C11188 * C503) *
                C7789) *
               C50814) *
              C50898 +
          (((C10767 * C507 -
             ((C10625 * C134 + C50612 * C144) * C501 +
              (C10625 * C123 + C50612 * C130) * C506) +
             C10768 * C502 - C10769 * C508 - C10770 * C503) *
                C7787 +
            (C10769 * C507 - (C10768 * C501 + C10767 * C506) + C10770 * C502 -
             C10771 * C508 - C10772 * C503) *
                C7788 +
            (C10771 * C507 - (C10770 * C501 + C10769 * C506) + C10772 * C502 -
             C10985 * C508 - C10986 * C503) *
                C7789) *
               C50920 +
           ((C11815 * C507 - (C12901 * C501 + C12902 * C506) + C11816 * C502 -
             C11817 * C508 - C11818 * C503) *
                C7787 +
            (C11817 * C507 - (C11816 * C501 + C11815 * C506) + C11818 * C502 -
             C11819 * C508 - C11820 * C503) *
                C7788 +
            (C11819 * C507 - (C11818 * C501 + C11817 * C506) + C11820 * C502 -
             (C10625 * C8596 + C50612 * C8598) * C508 -
             (C10625 * C8600 + C50612 * C8602) * C503) *
                C7789) *
               C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C7787 +
             (C10761 * C121 + C10762 * C50672) * C7788 +
             (C10763 * C121 + C10764 * C50672) * C7789) *
                C50920 +
            ((C12905 + C12906) * C7787 + (C12879 + C12880) * C7788 +
             (C12881 + C12882) * C7789) *
                C50814) *
               C50898 -
           (((C12883 + C12884) * C7789 + (C12885 + C12886) * C7788 +
             (C12907 + C12908) * C7787) *
                C50814 +
            ((C10770 * C50672 + C10769 * C121) * C7789 +
             (C10768 * C50672 + C10767 * C121) * C7788 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C7787) *
                C50920) *
               C50643) *
              C848 +
          ((((C12908 + C12907) * C7787 + (C12886 + C12885) * C7788 +
             (C12884 + C12883) * C7789) *
                C50920 +
            ((C13493 + C13494) * C7787 + (C13495 + C13496) * C7788 +
             (C13497 + C13498) * C7789) *
                C50814) *
               C50643 -
           (((C13477 + C13478) * C7789 + (C13479 + C13480) * C7788 +
             (C13499 + C13500) * C7787) *
                C50814 +
            ((C12882 + C12881) * C7789 + (C12880 + C12879) * C7788 +
             (C12906 + C12905) * C7787) *
                C50920) *
               C50898) *
              C849 +
          ((((C13500 + C13499) * C7787 + (C13480 + C13479) * C7788 +
             (C13478 + C13477) * C7789) *
                C50920 +
            (((C10625 * C1058 + C50612 * C1066) * C121 +
              (C10625 * C1062 + C50612 * C1070) * C50672) *
                 C7787 +
             ((C10625 * C3451 + C50612 * C3457) * C121 +
              (C10625 * C3454 + C50612 * C3460) * C50672) *
                 C7788 +
             ((C10625 * C9065 + C50612 * C9069) * C121 +
              (C10625 * C9067 + C50612 * C9071) * C50672) *
                 C7789) *
                C50814) *
               C50898 -
           ((((C10625 * C9066 + C50612 * C9070) * C50672 +
              (C10625 * C9064 + C50612 * C9068) * C121) *
                 C7789 +
             ((C10625 * C3453 + C50612 * C3459) * C50672 +
              (C10625 * C3450 + C50612 * C3456) * C121) *
                 C7788 +
             ((C10625 * C1061 + C50612 * C1069) * C50672 +
              (C10625 * C1057 + C50612 * C1065) * C121) *
                 C7787) *
                C50814 +
            ((C13498 + C13497) * C7789 + (C13496 + C13495) * C7788 +
             (C13494 + C13493) * C7787) *
                C50920) *
               C50643) *
              C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
            C2178 * C124 + C2173 * C131) *
               C600 +
           (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
            C2178 * C135 + C2173 * C145) *
               C595 -
           (C2362 + C2363 + C2364) * C601 - (C2365 + C2366 + C2367) * C596 +
           (C2696 + C2697 + C2698) * C602 + (C2699 + C2700 + C2701) * C597 -
           (C2830 + C2831 + C2832) * C603 - (C2833 + C2834 + C2835) * C598) *
              C50776 * C50920 +
          ((C5366 + C5367 + C5368) * C600 + (C5369 + C5370 + C5371) * C595 -
           (C3020 + C3019 + C3018) * C601 - (C3023 + C3022 + C3021) * C596 +
           (C3026 + C3025 + C3024) * C602 + (C3029 + C3028 + C3027) * C597 -
           (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
            C2176 * C2983 + C2171 * C2986) *
               C603 -
           (C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
            C2176 * C2989 + C2171 * C2992) *
               C598) *
              C50776 * C50814) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50905 -
            (C2362 + C2363 + C2364) * C254 - (C2365 + C2366 + C2367) * C50688) *
               C50776 * C50920 +
           ((C2176 * C383 + C2171 * C394 + C2177 * C379 + C2172 * C385 +
             C2178 * C380 + C2173 * C386) *
                C253 +
            (C2176 * C393 + C2171 * C401 + C2177 * C389 + C2172 * C397 +
             C2178 * C390 + C2173 * C398) *
                C50905 -
            (C3020 + C3019 + C3018) * C254 - (C3023 + C3022 + C3021) * C50688) *
               C50776 * C50814) *
              C250 +
          (((C2368 + C2369 + C2370) * C254 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50905 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C253) +
            (C2371 + C2372 + C2373) * C50688) *
               C50776 * C50920 +
           ((C3962 + C3961 + C3960) * C254 -
            ((C2178 * C391 + C2173 * C399 + C2177 * C390 + C2172 * C398 +
              C2176 * C389 + C2171 * C397) *
                 C50905 +
             (C2178 * C381 + C2173 * C387 + C2177 * C380 + C2172 * C386 +
              C2176 * C379 + C2171 * C385) *
                 C253) +
            (C3965 + C3964 + C3963) * C50688) *
               C50776 * C50814) *
              C251 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C253 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50905 -
            (C2374 + C2375 + C2376) * C254 - (C2377 + C2378 + C2379) * C50688) *
               C50776 * C50920 +
           ((C2176 * C380 + C2171 * C386 + C2177 * C381 + C2172 * C387 +
             C2178 * C382 + C2173 * C388) *
                C253 +
            (C2176 * C390 + C2171 * C398 + C2177 * C391 + C2172 * C399 +
             C2178 * C392 + C2173 * C400) *
                C50905 -
            (C2178 * C1412 + C2173 * C1413 + C2177 * C721 + C2172 * C729 +
             C2176 * C720 + C2171 * C728) *
                C254 -
            (C2178 * C1414 + C2173 * C1415 + C2177 * C733 + C2172 * C745 +
             C2176 * C732 + C2171 * C744) *
                C50688) *
               C50776 * C50814) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50905 -
            (C2362 + C2363 + C2364) * C254 - (C2365 + C2366 + C2367) * C50688) *
               C50776 * C50920 +
           ((C5366 + C5367 + C5368) * C253 + (C5369 + C5370 + C5371) * C50905 -
            (C3020 + C3019 + C3018) * C254 - (C3023 + C3022 + C3021) * C50688) *
               C50776 * C50814) *
              C50638 * C848 +
          (((C3018 + C3019 + C3020) * C254 -
            ((C5371 + C5370 + C5369) * C50905 +
             (C5368 + C5367 + C5366) * C253) +
            (C3021 + C3022 + C3023) * C50688) *
               C50776 * C50920 +
           ((C3348 + C3347 + C3346) * C254 -
            ((C5950 + C5951 + C5952) * C50905 +
             (C5953 + C5954 + C5955) * C253) +
            (C3351 + C3350 + C3349) * C50688) *
               C50776 * C50814) *
              C50638 * C849 +
          (((C5955 + C5954 + C5953) * C253 + (C5952 + C5951 + C5950) * C50905 -
            (C3346 + C3347 + C3348) * C254 - (C3349 + C3350 + C3351) * C50688) *
               C50776 * C50920 +
           ((C2176 * C1058 + C2171 * C1066 + C2177 * C1057 + C2172 * C1065 +
             C2178 * C1056 + C2173 * C1064) *
                C253 +
            (C2176 * C1062 + C2171 * C1070 + C2177 * C1061 + C2172 * C1069 +
             C2178 * C1060 + C2173 * C1068) *
                C50905 -
            (C2178 * C3449 + C2173 * C3455 + C2177 * C3450 + C2172 * C3456 +
             C2176 * C3451 + C2171 * C3457) *
                C254 -
            (C2178 * C3452 + C2173 * C3458 + C2177 * C3453 + C2172 * C3459 +
             C2176 * C3454 + C2171 * C3460) *
                C50688) *
               C50776 * C50814) *
              C50638 * C850)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C253 +
             (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
             C10762 * C50688) *
                C7787 +
            (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
             C10764 * C50688) *
                C7788 +
            (C10763 * C253 + C10764 * C50905 - C10765 * C254 -
             C10766 * C50688) *
                C7789) *
               C50920 +
           (((C10625 * C383 + C50612 * C394) * C253 +
             (C10625 * C393 + C50612 * C401) * C50905 - C11181 * C254 -
             C11182 * C50688) *
                C7787 +
            (C11181 * C253 + C11182 * C50905 - C11183 * C254 -
             C11184 * C50688) *
                C7788 +
            (C11183 * C253 + C11184 * C50905 - C11185 * C254 -
             C11186 * C50688) *
                C7789) *
               C50814) *
              C250 +
          (((C10767 * C254 -
             ((C10625 * C134 + C50612 * C144) * C50905 +
              (C10625 * C123 + C50612 * C130) * C253) +
             C10768 * C50688) *
                C7787 +
            (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
             C10770 * C50688) *
                C7788 +
            (C10771 * C254 - (C10770 * C50905 + C10769 * C253) +
             C10772 * C50688) *
                C7789) *
               C50920 +
           ((C11815 * C254 -
             ((C10625 * C389 + C50612 * C397) * C50905 +
              (C10625 * C379 + C50612 * C385) * C253) +
             C11816 * C50688) *
                C7787 +
            (C11817 * C254 - (C11816 * C50905 + C11815 * C253) +
             C11818 * C50688) *
                C7788 +
            (C11819 * C254 - (C11818 * C50905 + C11817 * C253) +
             C11820 * C50688) *
                C7789) *
               C50814) *
              C251 +
          ((((C10625 * C124 + C50612 * C131) * C253 +
             (C10625 * C135 + C50612 * C145) * C50905 - C10773 * C254 -
             C10774 * C50688) *
                C7787 +
            (C10773 * C253 + C10774 * C50905 - C10775 * C254 -
             C10776 * C50688) *
                C7788 +
            (C10775 * C253 + C10776 * C50905 - C10777 * C254 -
             C10778 * C50688) *
                C7789) *
               C50920 +
           (((C10625 * C380 + C50612 * C386) * C253 +
             (C10625 * C390 + C50612 * C398) * C50905 - C12725 * C254 -
             C12726 * C50688) *
                C7787 +
            (C12725 * C253 + C12726 * C50905 - C12727 * C254 -
             C12728 * C50688) *
                C7788 +
            (C12727 * C253 + C12728 * C50905 -
             (C10625 * C2981 + C50612 * C2984) * C254 -
             (C10625 * C2987 + C50612 * C2990) * C50688) *
                C7789) *
               C50814) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C600 +
            (C10625 * C133 + C50612 * C143) * C595 - C10761 * C601 -
            C10762 * C596 + C10763 * C602 + C10764 * C597 - C10765 * C603 -
            C10766 * C598) *
               C7787 +
           (C10761 * C600 + C10762 * C595 - C10763 * C601 - C10764 * C596 +
            C10765 * C602 + C10766 * C597 - C10983 * C603 - C10984 * C598) *
               C7788 +
           (C10763 * C600 + C10764 * C595 - C10765 * C601 - C10766 * C596 +
            C10983 * C602 + C10984 * C597 - C11061 * C603 - C11062 * C598) *
               C7789) *
              C50920 +
          ((C12899 * C600 + C12900 * C595 - C11181 * C601 - C11182 * C596 +
            C11183 * C602 + C11184 * C597 - C11185 * C603 - C11186 * C598) *
               C7787 +
           (C11181 * C600 + C11182 * C595 - C11183 * C601 - C11184 * C596 +
            C11185 * C602 + C11186 * C597 - C11187 * C603 - C11188 * C598) *
               C7788 +
           (C11183 * C600 + C11184 * C595 - C11185 * C601 - C11186 * C596 +
            C11187 * C602 + C11188 * C597 -
            (C10625 * C11160 + C50612 * C11161) * C603 -
            (C10625 * C11162 + C50612 * C11163) * C598) *
               C7789) *
              C50814) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C253 +
             (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
             C10762 * C50688) *
                C7787 +
            (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
             C10764 * C50688) *
                C7788 +
            (C10763 * C253 + C10764 * C50905 - C10765 * C254 -
             C10766 * C50688) *
                C7789) *
               C50920 +
           ((C13647 + C13648 - C13649 - C13650) * C7787 +
            (C13651 + C13652 - C13653 - C13654) * C7788 +
            (C13655 + C13656 - C13657 - C13658) * C7789) *
               C50814) *
              C50638 * C848 +
          (((C13649 - (C13648 + C13647) + C13650) * C7787 +
            (C13653 - (C13652 + C13651) + C13654) * C7788 +
            (C13657 - (C13656 + C13655) + C13658) * C7789) *
               C50920 +
           ((C13659 - (C13660 + C13661) + C13662) * C7787 +
            (C13663 - (C13664 + C13665) + C13666) * C7788 +
            (C13667 - (C13668 + C13669) + C13670) * C7789) *
               C50814) *
              C50638 * C849 +
          (((C13661 + C13660 - C13659 - C13662) * C7787 +
            (C13665 + C13664 - C13663 - C13666) * C7788 +
            (C13669 + C13668 - C13667 - C13670) * C7789) *
               C50920 +
           (((C10625 * C1058 + C50612 * C1066) * C253 +
             (C10625 * C1062 + C50612 * C1070) * C50905 - C13679 * C254 -
             C13680 * C50688) *
                C7787 +
            (C13679 * C253 + C13680 * C50905 - C13681 * C254 -
             C13682 * C50688) *
                C7788 +
            (C13681 * C253 + C13682 * C50905 -
             (C10625 * C11472 + C50612 * C11474) * C254 -
             (C10625 * C11473 + C50612 * C11475) * C50688) *
                C7789) *
               C50814) *
              C50638 * C850)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C506 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C501 -
            (C2362 + C2363 + C2364) * C507 - (C2365 + C2366 + C2367) * C502 +
            (C2696 + C2697 + C2698) * C508 + (C2699 + C2700 + C2701) * C503) *
               C50776 * C50920 +
           ((C5366 + C5367 + C5368) * C506 + (C5369 + C5370 + C5371) * C501 -
            (C3020 + C3019 + C3018) * C507 - (C3023 + C3022 + C3021) * C502 +
            (C3026 + C3025 + C3024) * C508 + (C3029 + C3028 + C3027) * C503) *
               C50776 * C50814) *
              C50638 * C50907 +
          (((C3018 + C3019 + C3020) * C507 -
            ((C5371 + C5370 + C5369) * C501 + (C5368 + C5367 + C5366) * C506) +
            (C3021 + C3022 + C3023) * C502 - (C3024 + C3025 + C3026) * C508 -
            (C3027 + C3028 + C3029) * C503) *
               C50776 * C50920 +
           ((C3348 + C3347 + C3346) * C507 -
            ((C2178 * C862 + C2173 * C868 + C2177 * C861 + C2172 * C867 +
              C2176 * C860 + C2171 * C866) *
                 C501 +
             (C2178 * C853 + C2173 * C858 + C2177 * C852 + C2172 * C857 +
              C2176 * C851 + C2171 * C856) *
                 C506) +
            (C3351 + C3350 + C3349) * C502 -
            (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
             C2176 * C3323 + C2171 * C3326) *
                C508 -
            (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
             C2176 * C3329 + C2171 * C3332) *
                C503) *
               C50776 * C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50672) *
                C50776 * C50920 +
            ((C5366 + C5367 + C5368) * C121 +
             (C5369 + C5370 + C5371) * C50672) *
                C50776 * C50814) *
               C250 -
           (((C5372 + C5373 + C5374) * C50672 +
             (C5375 + C5376 + C5377) * C121) *
                C50776 * C50814 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50672 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50776 * C50920) *
               C251 +
           (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
              C2178 * C126 + C2173 * C138) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
              C2178 * C137 + C2173 * C147) *
                 C50672) *
                C50776 * C50920 +
            ((C5378 + C5379 + C5380) * C121 +
             (C5381 + C5382 + C5383) * C50672) *
                C50776 * C50814) *
               C252) *
              C50907 +
          ((((C5377 + C5376 + C5375) * C121 +
             (C5374 + C5373 + C5372) * C50672) *
                C50776 * C50920 +
            ((C2176 * C852 + C2171 * C857 + C2177 * C853 + C2172 * C858 +
              C2178 * C854 + C2173 * C859) *
                 C121 +
             (C2176 * C861 + C2171 * C867 + C2177 * C862 + C2172 * C868 +
              C2178 * C863 + C2173 * C869) *
                 C50672) *
                C50776 * C50814) *
               C251 -
           (((C2178 * C862 + C2173 * C868 + C2177 * C861 + C2172 * C867 +
              C2176 * C860 + C2171 * C866) *
                 C50672 +
             (C2178 * C853 + C2173 * C858 + C2177 * C852 + C2172 * C857 +
              C2176 * C851 + C2171 * C856) *
                 C121) *
                C50776 * C50814 +
            ((C5371 + C5370 + C5369) * C50672 +
             (C5368 + C5367 + C5366) * C121) *
                C50776 * C50920) *
               C250 -
           (((C2178 * C864 + C2173 * C870 + C2177 * C863 + C2172 * C869 +
              C2176 * C862 + C2171 * C868) *
                 C50672 +
             (C2178 * C855 + C2173 * C865 + C2177 * C854 + C2172 * C859 +
              C2176 * C853 + C2171 * C858) *
                 C121) *
                C50776 * C50814 +
            ((C5383 + C5382 + C5381) * C50672 +
             (C5380 + C5379 + C5378) * C121) *
                C50776 * C50920) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50672) *
               C50776 * C50920 +
           ((C5366 + C5367 + C5368) * C121 + (C5369 + C5370 + C5371) * C50672) *
               C50776 * C50814) *
              C50638 * C1051 -
          (((C5950 + C5951 + C5952) * C50672 + (C5953 + C5954 + C5955) * C121) *
               C50776 * C50814 +
           ((C5371 + C5370 + C5369) * C50672 + (C5368 + C5367 + C5366) * C121) *
               C50776 * C50920) *
              C50638 * C1052 +
          (((C5955 + C5954 + C5953) * C121 + (C5952 + C5951 + C5950) * C50672) *
               C50776 * C50920 +
           ((C6224 + C6225 + C6226) * C121 + (C6227 + C6228 + C6229) * C50672) *
               C50776 * C50814) *
              C50638 * C1053 -
          (((C2178 * C6202 + C2173 * C6208 + C2177 * C6203 + C2172 * C6209 +
             C2176 * C6204 + C2171 * C6210) *
                C50672 +
            (C2178 * C6199 + C2173 * C6205 + C2177 * C6200 + C2172 * C6206 +
             C2176 * C6201 + C2171 * C6207) *
                C121) *
               C50776 * C50814 +
           ((C6229 + C6228 + C6227) * C50672 + (C6226 + C6225 + C6224) * C121) *
               C50776 * C50920) *
              C50638 * C1054)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C7787 +
             (C10761 * C121 + C10762 * C50672) * C7788 +
             (C10763 * C121 + C10764 * C50672) * C7789) *
                C50920 +
            ((C12905 + C12906) * C7787 + (C12879 + C12880) * C7788 +
             (C12881 + C12882) * C7789) *
                C50814) *
               C250 -
           (((C12883 + C12884) * C7789 + (C12885 + C12886) * C7788 +
             (C12907 + C12908) * C7787) *
                C50814 +
            ((C10770 * C50672 + C10769 * C121) * C7789 +
             (C10768 * C50672 + C10767 * C121) * C7788 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C7787) *
                C50920) *
               C251 +
           ((((C10625 * C124 + C50612 * C131) * C121 +
              (C10625 * C135 + C50612 * C145) * C50672) *
                 C7787 +
             (C10773 * C121 + C10774 * C50672) * C7788 +
             (C10775 * C121 + C10776 * C50672) * C7789) *
                C50920 +
            ((C12909 + C12910) * C7787 + (C12895 + C12896) * C7788 +
             (C12897 + C12898) * C7789) *
                C50814) *
               C252) *
              C50907 +
          ((((C12908 + C12907) * C7787 + (C12886 + C12885) * C7788 +
             (C12884 + C12883) * C7789) *
                C50920 +
            (((C10625 * C852 + C50612 * C857) * C121 +
              (C10625 * C861 + C50612 * C867) * C50672) *
                 C7787 +
             ((C10625 * C971 + C50612 * C975) * C121 +
              (C10625 * C979 + C50612 * C983) * C50672) *
                 C7788 +
             ((C10625 * C3322 + C50612 * C3325) * C121 +
              (C10625 * C3328 + C50612 * C3331) * C50672) *
                 C7789) *
                C50814) *
               C251 -
           (((C11404 * C50672 + C11403 * C121) * C7789 +
             (C11402 * C50672 + C11401 * C121) * C7788 +
             ((C10625 * C860 + C50612 * C866) * C50672 +
              (C10625 * C851 + C50612 * C856) * C121) *
                 C7787) *
                C50814 +
            ((C12882 + C12881) * C7789 + (C12880 + C12879) * C7788 +
             (C12906 + C12905) * C7787) *
                C50920) *
               C250 -
           ((((C10625 * C3327 + C50612 * C3330) * C50672 +
              (C10625 * C3321 + C50612 * C3324) * C121) *
                 C7789 +
             ((C10625 * C978 + C50612 * C982) * C50672 +
              (C10625 * C970 + C50612 * C974) * C121) *
                 C7788 +
             ((C10625 * C862 + C50612 * C868) * C50672 +
              (C10625 * C853 + C50612 * C858) * C121) *
                 C7787) *
                C50814 +
            ((C12898 + C12897) * C7789 + (C12896 + C12895) * C7788 +
             (C12910 + C12909) * C7787) *
                C50920) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C7787 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C7788 +
            (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
             C10983 * C508 + C10984 * C503) *
                C7789) *
               C50920 +
           ((C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C7787 +
            (C13307 + C13308 - C13309 - C13310 + C13311 + C13312) * C7788 +
            (C13313 + C13314 - C13315 - C13316 + C13317 + C13318) * C7789) *
               C50814) *
              C50638 * C50907 +
          (((C13303 - (C13302 + C13301) + C13304 - C13305 - C13306) * C7787 +
            (C13309 - (C13308 + C13307) + C13310 - C13311 - C13312) * C7788 +
            (C13315 - (C13314 + C13313) + C13316 - C13317 - C13318) * C7789) *
               C50920 +
           ((C11401 * C507 -
             ((C10625 * C860 + C50612 * C866) * C501 +
              (C10625 * C851 + C50612 * C856) * C506) +
             C11402 * C502 - C11403 * C508 - C11404 * C503) *
                C7787 +
            (C11403 * C507 - (C11402 * C501 + C11401 * C506) + C11404 * C502 -
             C11405 * C508 - C11406 * C503) *
                C7788 +
            (C11405 * C507 - (C11404 * C501 + C11403 * C506) + C11406 * C502 -
             (C10625 * C11384 + C50612 * C11385) * C508 -
             (C10625 * C11386 + C50612 * C11387) * C503) *
                C7789) *
               C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C7787 +
            (C10761 * C121 + C10762 * C50672) * C7788 +
            (C10763 * C121 + C10764 * C50672) * C7789) *
               C50920 +
           ((C12905 + C12906) * C7787 + (C12879 + C12880) * C7788 +
            (C12881 + C12882) * C7789) *
               C50814) *
              C50638 * C1051 -
          (((C13477 + C13478) * C7789 + (C13479 + C13480) * C7788 +
            (C13499 + C13500) * C7787) *
               C50814 +
           ((C12882 + C12881) * C7789 + (C12880 + C12879) * C7788 +
            (C12906 + C12905) * C7787) *
               C50920) *
              C50638 * C1052 +
          (((C13500 + C13499) * C7787 + (C13480 + C13479) * C7788 +
            (C13478 + C13477) * C7789) *
               C50920 +
           ((C13799 + C13800) * C7787 + (C13793 + C13794) * C7788 +
            (C13795 + C13796) * C7789) *
               C50814) *
              C50638 * C1053 -
          ((((C10625 * C13782 + C50612 * C13786) * C50672 +
             (C10625 * C13780 + C50612 * C13783) * C121) *
                C7789 +
            ((C10625 * C13784 + C50612 * C13787) * C50672 +
             (C10625 * C13781 + C50612 * C13785) * C121) *
                C7788 +
            ((C10625 * C6204 + C50612 * C6210) * C50672 +
             (C10625 * C6201 + C50612 * C6207) * C121) *
                C7787) *
               C50814 +
           ((C13796 + C13795) * C7789 + (C13794 + C13793) * C7788 +
            (C13800 + C13799) * C7787) *
               C50920) *
              C50638 * C1054)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C2176 * C122 + C2171 * C129 + C2177 * C123 +
                       C2172 * C130 + C2178 * C124 + C2173 * C131) *
                          C121 +
                      (C2176 * C133 + C2171 * C143 + C2177 * C134 +
                       C2172 * C144 + C2178 * C135 + C2173 * C145) *
                          C50672) *
                         C50776 * C50920 +
                     ((C5366 + C5367 + C5368) * C121 +
                      (C5369 + C5370 + C5371) * C50672) *
                         C50776 * C50814) *
                        C50950 -
                    (((C5372 + C5373 + C5374) * C50672 +
                      (C5375 + C5376 + C5377) * C121) *
                         C50776 * C50814 +
                     ((C2178 * C136 + C2173 * C146 + C2177 * C135 +
                       C2172 * C145 + C2176 * C134 + C2171 * C144) *
                          C50672 +
                      (C2178 * C125 + C2173 * C132 + C2177 * C124 +
                       C2172 * C131 + C2176 * C123 + C2171 * C130) *
                          C121) *
                         C50776 * C50920) *
                        C50936 +
                    (((C2176 * C124 + C2171 * C131 + C2177 * C125 +
                       C2172 * C132 + C2178 * C126 + C2173 * C138) *
                          C121 +
                      (C2176 * C135 + C2171 * C145 + C2177 * C136 +
                       C2172 * C146 + C2178 * C137 + C2173 * C147) *
                          C50672) *
                         C50776 * C50920 +
                     ((C5378 + C5379 + C5380) * C121 +
                      (C5381 + C5382 + C5383) * C50672) *
                         C50776 * C50814) *
                        C1173) *
                       C1514 +
                   ((((C5377 + C5376 + C5375) * C121 +
                      (C5374 + C5373 + C5372) * C50672) *
                         C50776 * C50920 +
                     ((C5944 + C5945 + C5946) * C121 +
                      (C5947 + C5948 + C5949) * C50672) *
                         C50776 * C50814) *
                        C50936 -
                    (((C5950 + C5951 + C5952) * C50672 +
                      (C5953 + C5954 + C5955) * C121) *
                         C50776 * C50814 +
                     ((C5371 + C5370 + C5369) * C50672 +
                      (C5368 + C5367 + C5366) * C121) *
                         C50776 * C50920) *
                        C50950 -
                    (((C2178 * C864 + C2173 * C870 + C2177 * C863 +
                       C2172 * C869 + C2176 * C862 + C2171 * C868) *
                          C50672 +
                      (C2178 * C855 + C2173 * C865 + C2177 * C854 +
                       C2172 * C859 + C2176 * C853 + C2171 * C858) *
                          C121) *
                         C50776 * C50814 +
                     ((C5383 + C5382 + C5381) * C50672 +
                      (C5380 + C5379 + C5378) * C121) *
                         C50776 * C50920) *
                        C1173) *
                       C50714)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C10625 * C122 + C50612 * C129) * C121 +
                       (C10625 * C133 + C50612 * C143) * C50672) *
                          C7787 +
                      (C10761 * C121 + C10762 * C50672) * C7788 +
                      (C10763 * C121 + C10764 * C50672) * C7789) *
                         C50920 +
                     ((C12905 + C12906) * C7787 + (C12879 + C12880) * C7788 +
                      (C12881 + C12882) * C7789) *
                         C50814) *
                        C50950 -
                    (((C12883 + C12884) * C7789 + (C12885 + C12886) * C7788 +
                      (C12907 + C12908) * C7787) *
                         C50814 +
                     ((C10770 * C50672 + C10769 * C121) * C7789 +
                      (C10768 * C50672 + C10767 * C121) * C7788 +
                      ((C10625 * C134 + C50612 * C144) * C50672 +
                       (C10625 * C123 + C50612 * C130) * C121) *
                          C7787) *
                         C50920) *
                        C50936 +
                    ((((C10625 * C124 + C50612 * C131) * C121 +
                       (C10625 * C135 + C50612 * C145) * C50672) *
                          C7787 +
                      (C10773 * C121 + C10774 * C50672) * C7788 +
                      (C10775 * C121 + C10776 * C50672) * C7789) *
                         C50920 +
                     ((C12909 + C12910) * C7787 + (C12895 + C12896) * C7788 +
                      (C12897 + C12898) * C7789) *
                         C50814) *
                        C1173) *
                       C1514 +
                   ((((C12908 + C12907) * C7787 + (C12886 + C12885) * C7788 +
                      (C12884 + C12883) * C7789) *
                         C50920 +
                     ((C13493 + C13494) * C7787 + (C13495 + C13496) * C7788 +
                      (C13497 + C13498) * C7789) *
                         C50814) *
                        C50936 -
                    (((C13477 + C13478) * C7789 + (C13479 + C13480) * C7788 +
                      (C13499 + C13500) * C7787) *
                         C50814 +
                     ((C12882 + C12881) * C7789 + (C12880 + C12879) * C7788 +
                      (C12906 + C12905) * C7787) *
                         C50920) *
                        C50950 -
                    ((((C10625 * C3327 + C50612 * C3330) * C50672 +
                       (C10625 * C3321 + C50612 * C3324) * C121) *
                          C7789 +
                      ((C10625 * C978 + C50612 * C982) * C50672 +
                       (C10625 * C970 + C50612 * C974) * C121) *
                          C7788 +
                      ((C10625 * C862 + C50612 * C868) * C50672 +
                       (C10625 * C853 + C50612 * C858) * C121) *
                          C7787) *
                         C50814 +
                     ((C12898 + C12897) * C7789 + (C12896 + C12895) * C7788 +
                      (C12910 + C12909) * C7787) *
                         C50920) *
                        C1173) *
                       C50714)) /
                     (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C253 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50905 -
             (C2362 + C2363 + C2364) * C254 -
             (C2365 + C2366 + C2367) * C50688) *
                C50776 * C50920 +
            ((C5366 + C5367 + C5368) * C253 + (C5369 + C5370 + C5371) * C50905 -
             (C3020 + C3019 + C3018) * C254 -
             (C3023 + C3022 + C3021) * C50688) *
                C50776 * C50814) *
               C1277 +
           (((C2368 + C2369 + C2370) * C254 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C50905 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C253) +
             (C2371 + C2372 + C2373) * C50688) *
                C50776 * C50920 +
            ((C3962 + C3961 + C3960) * C254 -
             ((C5372 + C5373 + C5374) * C50905 +
              (C5375 + C5376 + C5377) * C253) +
             (C3965 + C3964 + C3963) * C50688) *
                C50776 * C50814) *
               C50643) *
              C1514 +
          ((((C3018 + C3019 + C3020) * C254 -
             ((C5371 + C5370 + C5369) * C50905 +
              (C5368 + C5367 + C5366) * C253) +
             (C3021 + C3022 + C3023) * C50688) *
                C50776 * C50920 +
            ((C3348 + C3347 + C3346) * C254 -
             ((C5950 + C5951 + C5952) * C50905 +
              (C5953 + C5954 + C5955) * C253) +
             (C3351 + C3350 + C3349) * C50688) *
                C50776 * C50814) *
               C1277 +
           (((C5377 + C5376 + C5375) * C253 + (C5374 + C5373 + C5372) * C50905 -
             (C3960 + C3961 + C3962) * C254 -
             (C3963 + C3964 + C3965) * C50688) *
                C50776 * C50920 +
            ((C5944 + C5945 + C5946) * C253 + (C5947 + C5948 + C5949) * C50905 -
             (C2178 * C969 + C2173 * C973 + C2177 * C970 + C2172 * C974 +
              C2176 * C971 + C2171 * C975) *
                 C254 -
             (C2178 * C977 + C2173 * C981 + C2177 * C978 + C2172 * C982 +
              C2176 * C979 + C2171 * C983) *
                 C50688) *
                C50776 * C50814) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C253 +
              (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
              C10762 * C50688) *
                 C7787 +
             (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
              C10764 * C50688) *
                 C7788 +
             (C10763 * C253 + C10764 * C50905 - C10765 * C254 -
              C10766 * C50688) *
                 C7789) *
                C50920 +
            ((C13647 + C13648 - C13649 - C13650) * C7787 +
             (C13651 + C13652 - C13653 - C13654) * C7788 +
             (C13655 + C13656 - C13657 - C13658) * C7789) *
                C50814) *
               C1277 +
           (((C10767 * C254 -
              ((C10625 * C134 + C50612 * C144) * C50905 +
               (C10625 * C123 + C50612 * C130) * C253) +
              C10768 * C50688) *
                 C7787 +
             (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
              C10770 * C50688) *
                 C7788 +
             (C10771 * C254 - (C10770 * C50905 + C10769 * C253) +
              C10772 * C50688) *
                 C7789) *
                C50920 +
            ((C14651 - (C14652 + C14653) + C14654) * C7787 +
             (C14655 - (C14656 + C14657) + C14658) * C7788 +
             (C14659 - (C14660 + C14661) + C14662) * C7789) *
                C50814) *
               C50643) *
              C1514 +
          ((((C13649 - (C13648 + C13647) + C13650) * C7787 +
             (C13653 - (C13652 + C13651) + C13654) * C7788 +
             (C13657 - (C13656 + C13655) + C13658) * C7789) *
                C50920 +
            ((C13659 - (C13660 + C13661) + C13662) * C7787 +
             (C13663 - (C13664 + C13665) + C13666) * C7788 +
             (C13667 - (C13668 + C13669) + C13670) * C7789) *
                C50814) *
               C1277 +
           (((C14653 + C14652 - C14651 - C14654) * C7787 +
             (C14657 + C14656 - C14655 - C14658) * C7788 +
             (C14661 + C14660 - C14659 - C14662) * C7789) *
                C50920 +
            ((C13485 * C253 + C13486 * C50905 - C13487 * C254 -
              C13488 * C50688) *
                 C7787 +
             (C13487 * C253 + C13488 * C50905 - C13489 * C254 -
              C13490 * C50688) *
                 C7788 +
             (C13489 * C253 + C13490 * C50905 -
              (C10625 * C8934 + C50612 * C8936) * C254 -
              (C10625 * C8938 + C50612 * C8940) * C50688) *
                 C7789) *
                C50814) *
               C50643) *
              C50714)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C2176 * C122 + C2171 * C129 + C2177 * C123 +
                       C2172 * C130 + C2178 * C124 + C2173 * C131) *
                          C121 +
                      (C2176 * C133 + C2171 * C143 + C2177 * C134 +
                       C2172 * C144 + C2178 * C135 + C2173 * C145) *
                          C50672) *
                         C50776 * C50920 +
                     ((C5366 + C5367 + C5368) * C121 +
                      (C5369 + C5370 + C5371) * C50672) *
                         C50776 * C50814) *
                        C1277 -
                    (((C5372 + C5373 + C5374) * C50672 +
                      (C5375 + C5376 + C5377) * C121) *
                         C50776 * C50814 +
                     ((C2178 * C136 + C2173 * C146 + C2177 * C135 +
                       C2172 * C145 + C2176 * C134 + C2171 * C144) *
                          C50672 +
                      (C2178 * C125 + C2173 * C132 + C2177 * C124 +
                       C2172 * C131 + C2176 * C123 + C2171 * C130) *
                          C121) *
                         C50776 * C50920) *
                        C50643) *
                       C50952 +
                   ((((C5377 + C5376 + C5375) * C121 +
                      (C5374 + C5373 + C5372) * C50672) *
                         C50776 * C50920 +
                     ((C5944 + C5945 + C5946) * C121 +
                      (C5947 + C5948 + C5949) * C50672) *
                         C50776 * C50814) *
                        C50643 -
                    (((C5950 + C5951 + C5952) * C50672 +
                      (C5953 + C5954 + C5955) * C121) *
                         C50776 * C50814 +
                     ((C5371 + C5370 + C5369) * C50672 +
                      (C5368 + C5367 + C5366) * C121) *
                         C50776 * C50920) *
                        C1277) *
                       C50942 +
                   ((((C5955 + C5954 + C5953) * C121 +
                      (C5952 + C5951 + C5950) * C50672) *
                         C50776 * C50920 +
                     ((C6224 + C6225 + C6226) * C121 +
                      (C6227 + C6228 + C6229) * C50672) *
                         C50776 * C50814) *
                        C1277 -
                    (((C2178 * C1059 + C2173 * C1067 + C2177 * C1060 +
                       C2172 * C1068 + C2176 * C1061 + C2171 * C1069) *
                          C50672 +
                      (C2178 * C1055 + C2173 * C1063 + C2177 * C1056 +
                       C2172 * C1064 + C2176 * C1057 + C2171 * C1065) *
                          C121) *
                         C50776 * C50814 +
                     ((C5949 + C5948 + C5947) * C50672 +
                      (C5946 + C5945 + C5944) * C121) *
                         C50776 * C50920) *
                        C50643) *
                       C1746)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C10625 * C122 + C50612 * C129) * C121 +
                       (C10625 * C133 + C50612 * C143) * C50672) *
                          C7787 +
                      (C10761 * C121 + C10762 * C50672) * C7788 +
                      (C10763 * C121 + C10764 * C50672) * C7789) *
                         C50920 +
                     ((C12905 + C12906) * C7787 + (C12879 + C12880) * C7788 +
                      (C12881 + C12882) * C7789) *
                         C50814) *
                        C1277 -
                    (((C12883 + C12884) * C7789 + (C12885 + C12886) * C7788 +
                      (C12907 + C12908) * C7787) *
                         C50814 +
                     ((C10770 * C50672 + C10769 * C121) * C7789 +
                      (C10768 * C50672 + C10767 * C121) * C7788 +
                      ((C10625 * C134 + C50612 * C144) * C50672 +
                       (C10625 * C123 + C50612 * C130) * C121) *
                          C7787) *
                         C50920) *
                        C50643) *
                       C50952 +
                   ((((C12908 + C12907) * C7787 + (C12886 + C12885) * C7788 +
                      (C12884 + C12883) * C7789) *
                         C50920 +
                     ((C13493 + C13494) * C7787 + (C13495 + C13496) * C7788 +
                      (C13497 + C13498) * C7789) *
                         C50814) *
                        C50643 -
                    (((C13477 + C13478) * C7789 + (C13479 + C13480) * C7788 +
                      (C13499 + C13500) * C7787) *
                         C50814 +
                     ((C12882 + C12881) * C7789 + (C12880 + C12879) * C7788 +
                      (C12906 + C12905) * C7787) *
                         C50920) *
                        C1277) *
                       C50942 +
                   ((((C13500 + C13499) * C7787 + (C13480 + C13479) * C7788 +
                      (C13478 + C13477) * C7789) *
                         C50920 +
                     ((C13799 + C13800) * C7787 + (C13793 + C13794) * C7788 +
                      (C13795 + C13796) * C7789) *
                         C50814) *
                        C1277 -
                    ((((C10625 * C9066 + C50612 * C9070) * C50672 +
                       (C10625 * C9064 + C50612 * C9068) * C121) *
                          C7789 +
                      ((C10625 * C3453 + C50612 * C3459) * C50672 +
                       (C10625 * C3450 + C50612 * C3456) * C121) *
                          C7788 +
                      ((C10625 * C1061 + C50612 * C1069) * C50672 +
                       (C10625 * C1057 + C50612 * C1065) * C121) *
                          C7787) *
                         C50814 +
                     ((C13498 + C13497) * C7789 + (C13496 + C13495) * C7788 +
                      (C13494 + C13493) * C7787) *
                         C50920) *
                        C50643) *
                       C1746)) /
                     (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50672) *
               C50776 * C50920 +
           ((C2176 * C383 + C2171 * C394 + C2177 * C379 + C2172 * C385 +
             C2178 * C380 + C2173 * C386) *
                C121 +
            (C2176 * C393 + C2171 * C401 + C2177 * C389 + C2172 * C397 +
             C2178 * C390 + C2173 * C398) *
                C50672) *
               C50776 * C50814) *
              C112 -
          (((C2178 * C391 + C2173 * C399 + C2177 * C390 + C2172 * C398 +
             C2176 * C389 + C2171 * C397) *
                C50672 +
            (C2178 * C381 + C2173 * C387 + C2177 * C380 + C2172 * C386 +
             C2176 * C379 + C2171 * C385) *
                C121) *
               C50776 * C50814 +
           ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
             C2176 * C134 + C2171 * C144) *
                C50672 +
            (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
             C2176 * C123 + C2171 * C130) *
                C121) *
               C50776 * C50920) *
              C113 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C121 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50672) *
               C50776 * C50920 +
           ((C2176 * C380 + C2171 * C386 + C2177 * C381 + C2172 * C387 +
             C2178 * C382 + C2173 * C388) *
                C121 +
            (C2176 * C390 + C2171 * C398 + C2177 * C391 + C2172 * C399 +
             C2178 * C392 + C2173 * C400) *
                C50672) *
               C50776 * C50814) *
              C114 -
          (((C2178 * C395 + C2173 * C402 + C2177 * C392 + C2172 * C400 +
             C2176 * C391 + C2171 * C399) *
                C50672 +
            (C2178 * C384 + C2173 * C396 + C2177 * C382 + C2172 * C388 +
             C2176 * C381 + C2171 * C387) *
                C121) *
               C50776 * C50814 +
           ((C2178 * C140 + C2173 * C148 + C2177 * C137 + C2172 * C147 +
             C2176 * C136 + C2171 * C146) *
                C50672 +
            (C2178 * C127 + C2173 * C139 + C2177 * C126 + C2172 * C138 +
             C2176 * C125 + C2171 * C132) *
                C121) *
               C50776 * C50920) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C506 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C501 -
            (C2362 + C2363 + C2364) * C507 - (C2365 + C2366 + C2367) * C502 +
            (C2696 + C2697 + C2698) * C508 + (C2699 + C2700 + C2701) * C503) *
               C50776 * C50920 +
           ((C5366 + C5367 + C5368) * C506 + (C5369 + C5370 + C5371) * C501 -
            (C3020 + C3019 + C3018) * C507 - (C3023 + C3022 + C3021) * C502 +
            (C3026 + C3025 + C3024) * C508 + (C3029 + C3028 + C3027) * C503) *
               C50776 * C50814) *
              C50898 +
          (((C2368 + C2369 + C2370) * C507 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C501 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C506) +
            (C2371 + C2372 + C2373) * C502 - (C2702 + C2703 + C2704) * C508 -
            (C2705 + C2706 + C2707) * C503) *
               C50776 * C50920 +
           ((C3962 + C3961 + C3960) * C507 -
            ((C5372 + C5373 + C5374) * C501 + (C5375 + C5376 + C5377) * C506) +
            (C3965 + C3964 + C3963) * C502 -
            (C2178 * C722 + C2173 * C734 + C2177 * C723 + C2172 * C735 +
             C2176 * C724 + C2171 * C736) *
                C508 -
            (C2178 * C738 + C2173 * C746 + C2177 * C739 + C2172 * C747 +
             C2176 * C740 + C2171 * C748) *
                C503) *
               C50776 * C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C121 +
             (C10625 * C133 + C50612 * C143) * C50672) *
                C7787 +
            (C10761 * C121 + C10762 * C50672) * C7788 +
            (C10763 * C121 + C10764 * C50672) * C7789) *
               C50920 +
           (((C10625 * C383 + C50612 * C394) * C121 +
             (C10625 * C393 + C50612 * C401) * C50672) *
                C7787 +
            (C11181 * C121 + C11182 * C50672) * C7788 +
            (C11183 * C121 + C11184 * C50672) * C7789) *
               C50814) *
              C112 -
          (((C11818 * C50672 + C11817 * C121) * C7789 +
            (C11816 * C50672 + C11815 * C121) * C7788 +
            ((C10625 * C389 + C50612 * C397) * C50672 +
             (C10625 * C379 + C50612 * C385) * C121) *
                C7787) *
               C50814 +
           ((C10770 * C50672 + C10769 * C121) * C7789 +
            (C10768 * C50672 + C10767 * C121) * C7788 +
            ((C10625 * C134 + C50612 * C144) * C50672 +
             (C10625 * C123 + C50612 * C130) * C121) *
                C7787) *
               C50920) *
              C113 +
          ((((C10625 * C124 + C50612 * C131) * C121 +
             (C10625 * C135 + C50612 * C145) * C50672) *
                C7787 +
            (C10773 * C121 + C10774 * C50672) * C7788 +
            (C10775 * C121 + C10776 * C50672) * C7789) *
               C50920 +
           (((C10625 * C380 + C50612 * C386) * C121 +
             (C10625 * C390 + C50612 * C398) * C50672) *
                C7787 +
            ((C10625 * C720 + C50612 * C728) * C121 +
             (C10625 * C732 + C50612 * C744) * C50672) *
                C7788 +
            ((C10625 * C723 + C50612 * C735) * C121 +
             (C10625 * C739 + C50612 * C747) * C50672) *
                C7789) *
               C50814) *
              C114 -
          ((((C10625 * C738 + C50612 * C746) * C50672 +
             (C10625 * C722 + C50612 * C734) * C121) *
                C7789 +
            ((C10625 * C733 + C50612 * C745) * C50672 +
             (C10625 * C721 + C50612 * C729) * C121) *
                C7788 +
            ((C10625 * C391 + C50612 * C399) * C50672 +
             (C10625 * C381 + C50612 * C387) * C121) *
                C7787) *
               C50814 +
           (((C10625 * C521 + C50612 * C527) * C50672 +
             (C10625 * C512 + C50612 * C517) * C121) *
                C7789 +
            ((C10625 * C265 + C50612 * C273) * C50672 +
             (C10625 * C255 + C50612 * C261) * C121) *
                C7788 +
            ((C10625 * C136 + C50612 * C146) * C50672 +
             (C10625 * C125 + C50612 * C132) * C121) *
                C7787) *
               C50920) *
              C115) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C7787 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C7788 +
            (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
             C10983 * C508 + C10984 * C503) *
                C7789) *
               C50920 +
           ((C12899 * C506 + C12900 * C501 - C11181 * C507 - C11182 * C502 +
             C11183 * C508 + C11184 * C503) *
                C7787 +
            (C11181 * C506 + C11182 * C501 - C11183 * C507 - C11184 * C502 +
             C11185 * C508 + C11186 * C503) *
                C7788 +
            (C11183 * C506 + C11184 * C501 - C11185 * C507 - C11186 * C502 +
             C11187 * C508 + C11188 * C503) *
                C7789) *
               C50814) *
              C50898 +
          (((C10767 * C507 -
             ((C10625 * C134 + C50612 * C144) * C501 +
              (C10625 * C123 + C50612 * C130) * C506) +
             C10768 * C502 - C10769 * C508 - C10770 * C503) *
                C7787 +
            (C10769 * C507 - (C10768 * C501 + C10767 * C506) + C10770 * C502 -
             C10771 * C508 - C10772 * C503) *
                C7788 +
            (C10771 * C507 - (C10770 * C501 + C10769 * C506) + C10772 * C502 -
             C10985 * C508 - C10986 * C503) *
                C7789) *
               C50920 +
           ((C11815 * C507 - (C12901 * C501 + C12902 * C506) + C11816 * C502 -
             C11817 * C508 - C11818 * C503) *
                C7787 +
            (C11817 * C507 - (C11816 * C501 + C11815 * C506) + C11818 * C502 -
             C11819 * C508 - C11820 * C503) *
                C7788 +
            (C11819 * C507 - (C11818 * C501 + C11817 * C506) + C11820 * C502 -
             (C10625 * C8596 + C50612 * C8598) * C508 -
             (C10625 * C8600 + C50612 * C8602) * C503) *
                C7789) *
               C50814) *
              C50643) *
         C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C253 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50905 -
            (C2362 + C2363 + C2364) * C254 - (C2365 + C2366 + C2367) * C50688) *
               C50776 * C50920 +
           ((C2176 * C383 + C2171 * C394 + C2177 * C379 + C2172 * C385 +
             C2178 * C380 + C2173 * C386) *
                C253 +
            (C2176 * C393 + C2171 * C401 + C2177 * C389 + C2172 * C397 +
             C2178 * C390 + C2173 * C398) *
                C50905 -
            (C3020 + C3019 + C3018) * C254 - (C3023 + C3022 + C3021) * C50688) *
               C50776 * C50814) *
              C250 +
          (((C2368 + C2369 + C2370) * C254 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50905 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C253) +
            (C2371 + C2372 + C2373) * C50688) *
               C50776 * C50920 +
           ((C3962 + C3961 + C3960) * C254 -
            ((C2178 * C391 + C2173 * C399 + C2177 * C390 + C2172 * C398 +
              C2176 * C389 + C2171 * C397) *
                 C50905 +
             (C2178 * C381 + C2173 * C387 + C2177 * C380 + C2172 * C386 +
              C2176 * C379 + C2171 * C385) *
                 C253) +
            (C3965 + C3964 + C3963) * C50688) *
               C50776 * C50814) *
              C251 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C253 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50905 -
            (C2374 + C2375 + C2376) * C254 - (C2377 + C2378 + C2379) * C50688) *
               C50776 * C50920 +
           ((C2176 * C380 + C2171 * C386 + C2177 * C381 + C2172 * C387 +
             C2178 * C382 + C2173 * C388) *
                C253 +
            (C2176 * C390 + C2171 * C398 + C2177 * C391 + C2172 * C399 +
             C2178 * C392 + C2173 * C400) *
                C50905 -
            (C2178 * C1412 + C2173 * C1413 + C2177 * C721 + C2172 * C729 +
             C2176 * C720 + C2171 * C728) *
                C254 -
            (C2178 * C1414 + C2173 * C1415 + C2177 * C733 + C2172 * C745 +
             C2176 * C732 + C2171 * C744) *
                C50688) *
               C50776 * C50814) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
            C2178 * C124 + C2173 * C131) *
               C600 +
           (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
            C2178 * C135 + C2173 * C145) *
               C595 -
           (C2362 + C2363 + C2364) * C601 - (C2365 + C2366 + C2367) * C596 +
           (C2696 + C2697 + C2698) * C602 + (C2699 + C2700 + C2701) * C597 -
           (C2830 + C2831 + C2832) * C603 - (C2833 + C2834 + C2835) * C598) *
              C50776 * C50920 +
          ((C5366 + C5367 + C5368) * C600 + (C5369 + C5370 + C5371) * C595 -
           (C3020 + C3019 + C3018) * C601 - (C3023 + C3022 + C3021) * C596 +
           (C3026 + C3025 + C3024) * C602 + (C3029 + C3028 + C3027) * C597 -
           (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
            C2176 * C2983 + C2171 * C2986) *
               C603 -
           (C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
            C2176 * C2989 + C2171 * C2992) *
               C598) *
              C50776 * C50814) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C253 +
             (C10625 * C133 + C50612 * C143) * C50905 - C10761 * C254 -
             C10762 * C50688) *
                C7787 +
            (C10761 * C253 + C10762 * C50905 - C10763 * C254 -
             C10764 * C50688) *
                C7788 +
            (C10763 * C253 + C10764 * C50905 - C10765 * C254 -
             C10766 * C50688) *
                C7789) *
               C50920 +
           (((C10625 * C383 + C50612 * C394) * C253 +
             (C10625 * C393 + C50612 * C401) * C50905 - C11181 * C254 -
             C11182 * C50688) *
                C7787 +
            (C11181 * C253 + C11182 * C50905 - C11183 * C254 -
             C11184 * C50688) *
                C7788 +
            (C11183 * C253 + C11184 * C50905 - C11185 * C254 -
             C11186 * C50688) *
                C7789) *
               C50814) *
              C250 +
          (((C10767 * C254 -
             ((C10625 * C134 + C50612 * C144) * C50905 +
              (C10625 * C123 + C50612 * C130) * C253) +
             C10768 * C50688) *
                C7787 +
            (C10769 * C254 - (C10768 * C50905 + C10767 * C253) +
             C10770 * C50688) *
                C7788 +
            (C10771 * C254 - (C10770 * C50905 + C10769 * C253) +
             C10772 * C50688) *
                C7789) *
               C50920 +
           ((C11815 * C254 -
             ((C10625 * C389 + C50612 * C397) * C50905 +
              (C10625 * C379 + C50612 * C385) * C253) +
             C11816 * C50688) *
                C7787 +
            (C11817 * C254 - (C11816 * C50905 + C11815 * C253) +
             C11818 * C50688) *
                C7788 +
            (C11819 * C254 - (C11818 * C50905 + C11817 * C253) +
             C11820 * C50688) *
                C7789) *
               C50814) *
              C251 +
          ((((C10625 * C124 + C50612 * C131) * C253 +
             (C10625 * C135 + C50612 * C145) * C50905 - C10773 * C254 -
             C10774 * C50688) *
                C7787 +
            (C10773 * C253 + C10774 * C50905 - C10775 * C254 -
             C10776 * C50688) *
                C7788 +
            (C10775 * C253 + C10776 * C50905 - C10777 * C254 -
             C10778 * C50688) *
                C7789) *
               C50920 +
           (((C10625 * C380 + C50612 * C386) * C253 +
             (C10625 * C390 + C50612 * C398) * C50905 - C12725 * C254 -
             C12726 * C50688) *
                C7787 +
            (C12725 * C253 + C12726 * C50905 - C12727 * C254 -
             C12728 * C50688) *
                C7788 +
            (C12727 * C253 + C12728 * C50905 -
             (C10625 * C2981 + C50612 * C2984) * C254 -
             (C10625 * C2987 + C50612 * C2990) * C50688) *
                C7789) *
               C50814) *
              C252) *
         C50702) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10625 * C122 + C50612 * C129) * C600 +
            (C10625 * C133 + C50612 * C143) * C595 - C10761 * C601 -
            C10762 * C596 + C10763 * C602 + C10764 * C597 - C10765 * C603 -
            C10766 * C598) *
               C7787 +
           (C10761 * C600 + C10762 * C595 - C10763 * C601 - C10764 * C596 +
            C10765 * C602 + C10766 * C597 - C10983 * C603 - C10984 * C598) *
               C7788 +
           (C10763 * C600 + C10764 * C595 - C10765 * C601 - C10766 * C596 +
            C10983 * C602 + C10984 * C597 - C11061 * C603 - C11062 * C598) *
               C7789) *
              C50920 +
          ((C12899 * C600 + C12900 * C595 - C11181 * C601 - C11182 * C596 +
            C11183 * C602 + C11184 * C597 - C11185 * C603 - C11186 * C598) *
               C7787 +
           (C11181 * C600 + C11182 * C595 - C11183 * C601 - C11184 * C596 +
            C11185 * C602 + C11186 * C597 - C11187 * C603 - C11188 * C598) *
               C7788 +
           (C11183 * C600 + C11184 * C595 - C11185 * C601 - C11186 * C596 +
            C11187 * C602 + C11188 * C597 -
            (C10625 * C11160 + C50612 * C11161) * C603 -
            (C10625 * C11162 + C50612 * C11163) * C598) *
               C7789) *
              C50814) *
         C50638 * C50702) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50672) *
                C50776 * C50920 +
            ((C5366 + C5367 + C5368) * C121 +
             (C5369 + C5370 + C5371) * C50672) *
                C50776 * C50814) *
               C250 -
           (((C5372 + C5373 + C5374) * C50672 +
             (C5375 + C5376 + C5377) * C121) *
                C50776 * C50814 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50672 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50776 * C50920) *
               C251 +
           (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
              C2178 * C126 + C2173 * C138) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
              C2178 * C137 + C2173 * C147) *
                 C50672) *
                C50776 * C50920 +
            ((C5378 + C5379 + C5380) * C121 +
             (C5381 + C5382 + C5383) * C50672) *
                C50776 * C50814) *
               C252) *
              C50907 +
          ((((C5377 + C5376 + C5375) * C121 +
             (C5374 + C5373 + C5372) * C50672) *
                C50776 * C50920 +
            ((C2176 * C852 + C2171 * C857 + C2177 * C853 + C2172 * C858 +
              C2178 * C854 + C2173 * C859) *
                 C121 +
             (C2176 * C861 + C2171 * C867 + C2177 * C862 + C2172 * C868 +
              C2178 * C863 + C2173 * C869) *
                 C50672) *
                C50776 * C50814) *
               C251 -
           (((C2178 * C862 + C2173 * C868 + C2177 * C861 + C2172 * C867 +
              C2176 * C860 + C2171 * C866) *
                 C50672 +
             (C2178 * C853 + C2173 * C858 + C2177 * C852 + C2172 * C857 +
              C2176 * C851 + C2171 * C856) *
                 C121) *
                C50776 * C50814 +
            ((C5371 + C5370 + C5369) * C50672 +
             (C5368 + C5367 + C5366) * C121) *
                C50776 * C50920) *
               C250 -
           (((C2178 * C864 + C2173 * C870 + C2177 * C863 + C2172 * C869 +
              C2176 * C862 + C2171 * C868) *
                 C50672 +
             (C2178 * C855 + C2173 * C865 + C2177 * C854 + C2172 * C859 +
              C2176 * C853 + C2171 * C858) *
                 C121) *
                C50776 * C50814 +
            ((C5383 + C5382 + C5381) * C50672 +
             (C5380 + C5379 + C5378) * C121) *
                C50776 * C50920) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C506 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C501 -
            (C2362 + C2363 + C2364) * C507 - (C2365 + C2366 + C2367) * C502 +
            (C2696 + C2697 + C2698) * C508 + (C2699 + C2700 + C2701) * C503) *
               C50776 * C50920 +
           ((C5366 + C5367 + C5368) * C506 + (C5369 + C5370 + C5371) * C501 -
            (C3020 + C3019 + C3018) * C507 - (C3023 + C3022 + C3021) * C502 +
            (C3026 + C3025 + C3024) * C508 + (C3029 + C3028 + C3027) * C503) *
               C50776 * C50814) *
              C50638 * C50907 +
          (((C3018 + C3019 + C3020) * C507 -
            ((C5371 + C5370 + C5369) * C501 + (C5368 + C5367 + C5366) * C506) +
            (C3021 + C3022 + C3023) * C502 - (C3024 + C3025 + C3026) * C508 -
            (C3027 + C3028 + C3029) * C503) *
               C50776 * C50920 +
           ((C3348 + C3347 + C3346) * C507 -
            ((C2178 * C862 + C2173 * C868 + C2177 * C861 + C2172 * C867 +
              C2176 * C860 + C2171 * C866) *
                 C501 +
             (C2178 * C853 + C2173 * C858 + C2177 * C852 + C2172 * C857 +
              C2176 * C851 + C2171 * C856) *
                 C506) +
            (C3351 + C3350 + C3349) * C502 -
            (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
             C2176 * C3323 + C2171 * C3326) *
                C508 -
            (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
             C2176 * C3329 + C2171 * C3332) *
                C503) *
               C50776 * C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C10625 * C122 + C50612 * C129) * C121 +
              (C10625 * C133 + C50612 * C143) * C50672) *
                 C7787 +
             (C10761 * C121 + C10762 * C50672) * C7788 +
             (C10763 * C121 + C10764 * C50672) * C7789) *
                C50920 +
            ((C12905 + C12906) * C7787 + (C12879 + C12880) * C7788 +
             (C12881 + C12882) * C7789) *
                C50814) *
               C250 -
           (((C12883 + C12884) * C7789 + (C12885 + C12886) * C7788 +
             (C12907 + C12908) * C7787) *
                C50814 +
            ((C10770 * C50672 + C10769 * C121) * C7789 +
             (C10768 * C50672 + C10767 * C121) * C7788 +
             ((C10625 * C134 + C50612 * C144) * C50672 +
              (C10625 * C123 + C50612 * C130) * C121) *
                 C7787) *
                C50920) *
               C251 +
           ((((C10625 * C124 + C50612 * C131) * C121 +
              (C10625 * C135 + C50612 * C145) * C50672) *
                 C7787 +
             (C10773 * C121 + C10774 * C50672) * C7788 +
             (C10775 * C121 + C10776 * C50672) * C7789) *
                C50920 +
            ((C12909 + C12910) * C7787 + (C12895 + C12896) * C7788 +
             (C12897 + C12898) * C7789) *
                C50814) *
               C252) *
              C50907 +
          ((((C12908 + C12907) * C7787 + (C12886 + C12885) * C7788 +
             (C12884 + C12883) * C7789) *
                C50920 +
            (((C10625 * C852 + C50612 * C857) * C121 +
              (C10625 * C861 + C50612 * C867) * C50672) *
                 C7787 +
             ((C10625 * C971 + C50612 * C975) * C121 +
              (C10625 * C979 + C50612 * C983) * C50672) *
                 C7788 +
             ((C10625 * C3322 + C50612 * C3325) * C121 +
              (C10625 * C3328 + C50612 * C3331) * C50672) *
                 C7789) *
                C50814) *
               C251 -
           (((C11404 * C50672 + C11403 * C121) * C7789 +
             (C11402 * C50672 + C11401 * C121) * C7788 +
             ((C10625 * C860 + C50612 * C866) * C50672 +
              (C10625 * C851 + C50612 * C856) * C121) *
                 C7787) *
                C50814 +
            ((C12882 + C12881) * C7789 + (C12880 + C12879) * C7788 +
             (C12906 + C12905) * C7787) *
                C50920) *
               C250 -
           ((((C10625 * C3327 + C50612 * C3330) * C50672 +
              (C10625 * C3321 + C50612 * C3324) * C121) *
                 C7789 +
             ((C10625 * C978 + C50612 * C982) * C50672 +
              (C10625 * C970 + C50612 * C974) * C121) *
                 C7788 +
             ((C10625 * C862 + C50612 * C868) * C50672 +
              (C10625 * C853 + C50612 * C858) * C121) *
                 C7787) *
                C50814 +
            ((C12898 + C12897) * C7789 + (C12896 + C12895) * C7788 +
             (C12910 + C12909) * C7787) *
                C50920) *
               C252) *
              C50714)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10625 * C122 + C50612 * C129) * C506 +
             (C10625 * C133 + C50612 * C143) * C501 - C10761 * C507 -
             C10762 * C502 + C10763 * C508 + C10764 * C503) *
                C7787 +
            (C10761 * C506 + C10762 * C501 - C10763 * C507 - C10764 * C502 +
             C10765 * C508 + C10766 * C503) *
                C7788 +
            (C10763 * C506 + C10764 * C501 - C10765 * C507 - C10766 * C502 +
             C10983 * C508 + C10984 * C503) *
                C7789) *
               C50920 +
           ((C13301 + C13302 - C13303 - C13304 + C13305 + C13306) * C7787 +
            (C13307 + C13308 - C13309 - C13310 + C13311 + C13312) * C7788 +
            (C13313 + C13314 - C13315 - C13316 + C13317 + C13318) * C7789) *
               C50814) *
              C50638 * C50907 +
          (((C13303 - (C13302 + C13301) + C13304 - C13305 - C13306) * C7787 +
            (C13309 - (C13308 + C13307) + C13310 - C13311 - C13312) * C7788 +
            (C13315 - (C13314 + C13313) + C13316 - C13317 - C13318) * C7789) *
               C50920 +
           ((C11401 * C507 -
             ((C10625 * C860 + C50612 * C866) * C501 +
              (C10625 * C851 + C50612 * C856) * C506) +
             C11402 * C502 - C11403 * C508 - C11404 * C503) *
                C7787 +
            (C11403 * C507 - (C11402 * C501 + C11401 * C506) + C11404 * C502 -
             C11405 * C508 - C11406 * C503) *
                C7788 +
            (C11405 * C507 - (C11404 * C501 + C11403 * C506) + C11406 * C502 -
             (C10625 * C11384 + C50612 * C11385) * C508 -
             (C10625 * C11386 + C50612 * C11387) * C503) *
                C7789) *
               C50814) *
              C50638 * C50714)) /
            (p * q * std::sqrt(p + q));
}
