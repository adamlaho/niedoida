/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_dpdp_AC_xz.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2121_13_13(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49695 = 0 * ae;
    const double C49694 = ae * be;
    const double C49693 = 0 * be;
    const double C49692 = ae + be;
    const double C49691 = 0 * be;
    const double C49690 = xA - xB;
    const double C49733 = ce + de;
    const double C49732 = zC - zD;
    const double C49743 = ce * de;
    const double C49742 = 0 * de;
    const double C49761 = 0 * ce;
    const double C49757 = 0 * de;
    const double C49824 = zP - zQ;
    const double C49823 = p + q;
    const double C49822 = p * q;
    const double C49821 = xP - xQ;
    const double C49829 = bs[3];
    const double C49840 = bs[4];
    const double C49848 = bs[5];
    const double C49867 = bs[6];
    const double C49899 = bs[7];
    const double C49981 = yP - yQ;
    const double C50270 = bs[2];
    const double C122 = bs[0];
    const double C50709 = xC - xD;
    const double C50729 = yC - yD;
    const double C50834 = yA - yB;
    const double C50839 = zA - zB;
    const double C49700 = C49695 / C49692;
    const double C49697 = 2 * C49692;
    const double C49696 = std::pow(C49692, 2);
    const double C49699 = C49694 * C49690;
    const double C49698 = C49690 * C49693;
    const double C50684 = C49690 * be;
    const double C50683 = C49690 * ae;
    const double C50682 = std::pow(C49690, 2);
    const double C49741 = 2 * C49733;
    const double C49758 = std::pow(C49733, 2);
    const double C49832 = C49733 * C49692;
    const double C143 = (-(std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                           (xP - xQ) * (zP - zQ) * ae * ce) /
                         C49733) /
                        C49692;
    const double C50774 = std::pow(C49732, 2);
    const double C50786 = C49732 * de;
    const double C50785 = C49732 * ce;
    const double C49744 = C49743 * C49732;
    const double C49759 = C49732 * C49742;
    const double C49765 = C49761 / C49733;
    const double C49830 = C49824 * ce;
    const double C50074 = std::pow(C49824, 2);
    const double C49825 = 2 * C49822;
    const double C49831 = C49821 * C49824;
    const double C49850 = std::pow(C49821, 2);
    const double C49940 = C49821 * ae;
    const double C49990 = std::pow(C49981, 2);
    const double C50712 = C50709 * de;
    const double C50711 = C50709 * ce;
    const double C50710 = std::pow(C50709, 2);
    const double C50744 = std::pow(C50729, 2);
    const double C50760 = C50729 * de;
    const double C50759 = C50729 * ce;
    const double C50848 = std::pow(C50834, 2);
    const double C50862 = C50834 * be;
    const double C50861 = C50834 * ae;
    const double C50874 = std::pow(C50839, 2);
    const double C50886 = C50839 * be;
    const double C50885 = C50839 * ae;
    const double C50692 = std::pow(C49697, -1);
    const double C50994 = std::pow(C49697, -2);
    const double C49701 = 2 * C49696;
    const double C50973 = 4 * C49696;
    const double C49702 = C49698 / C49692;
    const double C50685 = C50682 * C49694;
    const double C50720 = std::pow(C49741, -1);
    const double C50982 = std::pow(C49741, -2);
    const double C49762 = 2 * C49758;
    const double C50980 = 4 * C49758;
    const double C50775 = C50774 * C49743;
    const double C49763 = C49759 / C49733;
    const double C49834 = C49829 * C49830;
    const double C49842 = C49840 * C49830;
    const double C49853 = C49848 * C49830;
    const double C49873 = C49867 * C49830;
    const double C49908 = C49899 * C49830;
    const double C49826 = C49825 / C49823;
    const double C133 = (bs[1] * C49830 * C49825) / (C49823 * C49733);
    const double C123 = -(C49821 * bs[1] * C49825) / C49823;
    const double C256 = -(C49981 * bs[1] * C49825) / C49823;
    const double C382 = -(C49824 * bs[1] * C49825) / C49823;
    const double C49835 = C49831 * ae;
    const double C49943 = C49840 * C49940;
    const double C49949 = C49848 * C49940;
    const double C49959 = C49867 * C49940;
    const double C49995 = C49829 * C49940;
    const double C50015 = C49899 * C49940;
    const double C129 = (-(bs[1] * C49940 * C49825) / C49823) / C49692;
    const double C50713 = C50710 * C49743;
    const double C50745 = C50744 * C49743;
    const double C50849 = C50848 * C49694;
    const double C50875 = C50874 * C49694;
    const double C49707 = C49693 / C49701;
    const double C49705 = C49691 / C49701;
    const double C49704 = 0 - C49702;
    const double C50686 = C50685 / C49692;
    const double C49770 = C49742 / C49762;
    const double C49768 = C49757 / C49762;
    const double C50776 = C50775 / C49733;
    const double C49767 = 0 - C49763;
    const double C49828 = -C49826;
    const double C49839 = std::pow(C49826, 4);
    const double C49866 = std::pow(C49826, 6);
    const double C144 =
        (-(C49821 * std::pow(-C49826, 3) * bs[3] * C49821 * C49824 * ae * ce) /
         C49733) /
            C49692 -
        (ae * std::pow(C49826, 2) * bs[2] * C49824 * ce) / (C49733 * C49692);
    const double C50269 = std::pow(C49826, 2);
    const double C130 =
        (C49821 * std::pow(C49826, 2) * bs[2] * C49940) / C49692 -
        (ae * bs[1] * C49825) / (C49823 * C49692);
    const double C49837 = C49835 * ce;
    const double C50714 = C50713 / C49733;
    const double C50746 = C50745 / C49733;
    const double C50850 = C50849 / C49692;
    const double C50876 = C50875 / C49692;
    const double C49709 = C49704 * ae;
    const double C50687 = -C50686;
    const double C50777 = -C50776;
    const double C49772 = C49767 * ce;
    const double C49833 = std::pow(C49828, 3);
    const double C49847 = std::pow(C49828, 5);
    const double C49898 = std::pow(C49828, 7);
    const double C49844 = C49839 * C49842;
    const double C49942 = C49840 * C49839;
    const double C49944 = C49839 * C49943;
    const double C49877 = C49866 * C49873;
    const double C49962 = C49867 * C49866;
    const double C49963 = C49866 * C49959;
    const double C50271 = C50270 * C50269;
    const double C134 = -(C49821 * C50269 * C50270 * C49830) / C49733;
    const double C262 = -(C49981 * C50269 * C50270 * C49830) / C49733;
    const double C266 = (C49981 * C50269 * C50270 * C49940) / C49692;
    const double C388 = (C49824 * C50269 * C50270 * C49940) / C49692;
    const double C392 = (ce * bs[1] * C49825) / (C49823 * C49733) -
                        (C49824 * C50269 * C50270 * C49830) / C49733;
    const double C49841 = C49840 * C49837;
    const double C49851 = C49848 * C49837;
    const double C49870 = C49867 * C49837;
    const double C49904 = C49899 * C49837;
    const double C50715 = -C50714;
    const double C50747 = -C50746;
    const double C50851 = -C50850;
    const double C50877 = -C50876;
    const double C49712 = C49709 / C49692;
    const double C50688 = std::exp(C50687);
    const double C50778 = std::exp(C50777);
    const double C49774 = C49772 / C49733;
    const double C49836 = C49833 * C49834;
    const double C49941 = C49829 * C49833;
    const double C49996 = C49833 * C49995;
    const double C274 =
        (-((yP - yQ) * C49833 * C49829 * C49837) / C49733) / C49692;
    const double C400 =
        (-(C49824 * C49833 * C49829 * C49837) / C49733) / C49692 -
        (std::pow(C49826, 2) * bs[2] * C49940 * ce) / C49832;
    const double C49855 = C49847 * C49853;
    const double C49952 = C49848 * C49847;
    const double C49953 = C49847 * C49949;
    const double C49913 = C49898 * C49908;
    const double C50020 = C49898 * C50015;
    const double C49849 = ae * C49844;
    const double C49846 = C49821 * C49844;
    const double C50416 = C49981 * C49844;
    const double C50436 = C49824 * C49844;
    const double C49951 = C49821 * C49942;
    const double C49950 = C49942 * ae;
    const double C50280 = C49942 * C49850;
    const double C50404 = C49942 * C49990;
    const double C50417 = C49981 * C49942;
    const double C50439 = C49942 * C50074;
    const double C50542 = C49824 * C49942;
    const double C50541 = C49942 * ce;
    const double C49998 = C49821 * C49944;
    const double C50040 = C49981 * C49944;
    const double C50090 = C49944 * ce;
    const double C50088 = C49824 * C49944;
    const double C49880 = C49877 * C49850;
    const double C49900 = ae * C49877;
    const double C49896 = C49821 * C49877;
    const double C50474 = C49877 * C49990;
    const double C50555 = C49981 * C49877;
    const double C50573 = C49824 * C49877;
    const double C49965 = C49962 * C49850;
    const double C50017 = C49821 * C49962;
    const double C50016 = C49962 * ae;
    const double C50488 = C49962 * C49990;
    const double C50558 = C49981 * C49962;
    const double C50577 = C49962 * C50074;
    const double C49967 = C49821 * C49963;
    const double C50117 = C49963 * C49990;
    const double C50137 = C49981 * C49963;
    const double C50195 = C49963 * C50074;
    const double C50241 = C49963 * ce;
    const double C50239 = C49824 * C49963;
    const double C124 = C50271 * C49850 - (bs[1] * C49825) / C49823;
    const double C255 = C49981 * C49821 * C50271;
    const double C381 = C49824 * C49821 * C50271;
    const double C506 = C50271 * C49990 - (bs[1] * C49825) / C49823;
    const double C711 = C49824 * C49981 * C50271;
    const double C847 = C50271 * C50074 - (bs[1] * C49825) / C49823;
    const double C49843 = C49839 * C49841;
    const double C49854 = C49847 * C49851;
    const double C49875 = C49866 * C49870;
    const double C49911 = C49898 * C49904;
    const double C50716 = std::exp(C50715);
    const double C50748 = std::exp(C50747);
    const double C50852 = std::exp(C50851);
    const double C50878 = std::exp(C50877);
    const double C49714 = C49712 - C49705;
    const double C10749 = C50688 * C266;
    const double C13045 = C50688 * C388;
    const double C49703 = C49699 * C50688;
    const double C50689 = C50688 * C50683;
    const double C50693 = C50692 * C50688;
    const double C50969 = C50688 / C49697;
    const double C50968 = C50688 * C50684;
    const double C2173 = C50994 * C50688;
    const double C49745 = C49744 * C50778;
    const double C121 = -(2 * ce * de * (zC - zD) * C50778) / (ce + de);
    const double C377 =
        ((C50778 - (C49732 * 2 * ce * de * C49732 * C50778) / C49733) * ce) /
            C49733 -
        (0 * de) / (2 * std::pow(C49733, 2));
    const double C378 =
        (0 * ce) / C49733 - (ce * de * C49732 * C50778) / std::pow(C49733, 2);
    const double C50787 = C50778 * C50785;
    const double C50790 = C50720 * C50778;
    const double C50990 = C50778 * C50786;
    const double C50989 = C50778 / C49741;
    const double C843 = C50982 * C50778;
    const double C49776 = C49774 - C49768;
    const double C145 =
        (-(ae * C49821 * C49836) / C49733) / C49692 -
        (C49833 * C49829 * C49837) / C49832 +
        C49821 * ((-(C49821 * std::pow(C49826, 4) * bs[4] * C49837) / C49733) /
                      C49692 -
                  (ae * C49836) / C49832);
    const double C135 = -(C49836 * C49850 + C50269 * C50270 * C49830) / C49733;
    const double C136 = (-2 * C49821 * C49836) / C49733 -
                        (C49821 * (C49844 * C49850 + C49836)) / C49733;
    const double C260 = -(C49981 * (C49844 * C49850 + C49836)) / C49733;
    const double C261 = -(C49981 * C49821 * C49836) / C49733;
    const double C391 =
        -(C49824 * C49821 * C49836 + C49821 * C50271 * ce) / C49733;
    const double C515 = -(C49836 * C49990 + C50269 * C50270 * C49830) / C49733;
    const double C604 = (-2 * C49981 * C49836) / C49733 -
                        (C49981 * (C49844 * C49990 + C49836)) / C49733;
    const double C723 =
        -(C49824 * C49981 * C49836 + C49981 * C50271 * ce) / C49733;
    const double C856 = -(C49824 * (C49824 * C49836 + C50271 * ce) +
                          C50269 * C50270 * C49830 + C49824 * C50271 * ce) /
                        C49733;
    const double C49999 = C49941 * ae;
    const double C50279 = C49821 * C49941;
    const double C50371 = C49981 * C49941;
    const double C50438 = C49824 * C49941;
    const double C50437 = C49941 * ce;
    const double C390 = -(C49824 * (C49844 * C49850 + C49836) +
                          (C50271 + C49941 * C49850) * ce) /
                        C49733;
    const double C734 = -(C49824 * (C49844 * C49990 + C49836) +
                          (C50271 + C49941 * C49990) * ce) /
                        C49733;
    const double C1066 = (-2 * (C49824 * C49836 + C50271 * ce)) / C49733 -
                         (C49824 * (C49824 * (C49824 * C49844 + C49941 * ce) +
                                    C49836 + C49824 * C49941 * ce)) /
                             C49733 -
                         ((C50271 + C49941 * C50074) * ce) / C49733;
    const double C125 =
        2 * C49821 * C50271 + C49821 * (C50271 + C49941 * C49850);
    const double C254 = C49981 * (C50271 + C49941 * C49850);
    const double C380 = C49824 * (C50271 + C49941 * C49850);
    const double C600 =
        2 * C49981 * C50271 + C49981 * (C50271 + C49941 * C49990);
    const double C718 = C49824 * (C50271 + C49941 * C49990);
    const double C1058 =
        2 * C49824 * C50271 + C49824 * (C50271 + C49941 * C50074);
    const double C131 =
        (C50269 * C50270 * C49940 + C49821 * (C49821 * C49996 + C50271 * ae) +
         C49821 * C50271 * ae) /
        C49692;
    const double C265 = (C49981 * (C49821 * C49996 + C50271 * ae)) / C49692;
    const double C387 = (C49824 * (C49821 * C49996 + C50271 * ae)) / C49692;
    const double C511 = (C50269 * C50270 * C49940 + C49996 * C49990) / C49692;
    const double C608 =
        (2 * C49981 * C49996 + C49981 * (C49996 + C49944 * C49990)) / C49692;
    const double C719 = (C49824 * C49981 * C49996) / C49692;
    const double C730 = (C49824 * (C49996 + C49944 * C49990)) / C49692;
    const double C852 = (C50269 * C50270 * C49940 + C49996 * C50074) / C49692;
    const double C1062 =
        (2 * C49824 * C49996 + C49824 * (C49996 + C49944 * C50074)) / C49692;
    const double C10751 = C50688 * C274;
    const double C13047 = C50688 * C400;
    const double C49857 = C49855 * C49850;
    const double C49868 = ae * C49855;
    const double C49864 = C49821 * C49855;
    const double C50446 = C49855 * C49990;
    const double C50473 = C49981 * C49855;
    const double C50540 = C49824 * C49855;
    const double C2810 =
        (-3 * (C49844 * C49990 + C49836)) / C49733 +
        C49981 * ((-2 * C49981 * C49844) / C49733 -
                  (C49981 * (C49855 * C49990 + C49844)) / C49733);
    const double C49954 = C49952 * C49850;
    const double C49961 = C49821 * C49952;
    const double C49960 = C49952 * ae;
    const double C50464 = C49952 * C49990;
    const double C50487 = C49981 * C49952;
    const double C50543 = C49952 * C50074;
    const double C50575 = C49824 * C49952;
    const double C50574 = C49952 * ce;
    const double C49955 = C49821 * C49953;
    const double C50059 = C49953 * C49990;
    const double C50069 = C49981 * C49953;
    const double C50091 = C49953 * C50074;
    const double C50194 = C49953 * ce;
    const double C50192 = C49824 * C49953;
    const double C49916 = C49913 * C49850;
    const double C50022 = C49821 * C50020;
    const double C50138 = C50020 * C49990;
    const double C50217 = C49981 * C50020;
    const double C50243 = C50020 * C50074;
    const double C49852 = C49849 / C49832;
    const double C516 = -(C49846 * C49990 + C49821 * C49836) / C49733;
    const double C50003 = C49951 * ae;
    const double C50283 = 2 * C49951;
    const double C50369 = C49981 * C49951;
    const double C50431 = C49824 * C49951;
    const double C50430 = C49951 * ce;
    const double C50281 = C49941 + C50280;
    const double C50405 = C49941 + C50404;
    const double C50463 = 2 * C50417;
    const double C50501 = C49824 * C50417;
    const double C50500 = C50417 * ce;
    const double C50441 = C49941 + C50439;
    const double C50547 = 2 * C50542;
    const double C50545 = C50542 * ce;
    const double C972 = (C49981 * C49996 + C50040 * C50074) / C49692;
    const double C50093 = C50090 / C49832;
    const double C49883 = C49880 + C49855;
    const double C49905 = C49900 / C49832;
    const double C49907 = -2 * C49896;
    const double C49903 = ae * C49896;
    const double C50443 = C49896 * C49990;
    const double C50515 = C49981 * C49896;
    const double C50526 = C49824 * C49896;
    const double C50476 = C50474 + C49855;
    const double C50559 = C49824 * C50555;
    const double C49968 = C49952 + C49965;
    const double C50021 = C50017 * ae;
    const double C50458 = C50017 * C49990;
    const double C50518 = C49981 * C50017;
    const double C50529 = C50017 * C50074;
    const double C50490 = C49952 + C50488;
    const double C50561 = C50558 * C50074;
    const double C50583 = C49952 + C50577;
    const double C50118 = C49953 + C50117;
    const double C50139 = 2 * C50137;
    const double C50150 = C50137 * C50074;
    const double C50216 = C50137 * ce;
    const double C50213 = C49824 * C50137;
    const double C50200 = C49953 + C50195;
    const double C50247 = C50241 / C49832;
    const double C50248 = 2 * C50239;
    const double C50245 = C50239 * ce;
    const double C146 =
        2 * ((-(C49821 * C49843) / C49733) / C49692 - (ae * C49836) / C49832) -
        (ae * (C49844 * std::pow(C49821, 2) + C49836)) / C49832 +
        C49821 *
            ((-(ae * C49821 * C49844) / C49733) / C49692 - C49843 / C49832 +
             C49821 *
                 ((-(C49821 * std::pow(C49828, 5) * bs[5] * C49837) / C49733) /
                      C49692 -
                  (ae * C49844) / C49832));
    const double C273 = (yP - yQ) * ((-(C49821 * C49843) / C49733) / C49692 -
                                     (ae * C49836) / C49832);
    const double C399 = C49824 * ((-(C49821 * C49843) / C49733) / C49692 -
                                  (ae * C49836) / C49832) -
                        ((C49821 * C49833 * C49829 * C49940 +
                          bs[2] * std::pow(C49826, 2) * ae) *
                         ce) /
                            C49832;
    const double C521 = (-(C49843 * std::pow(yP - yQ, 2)) / C49733) / C49692 -
                        (C49833 * C49829 * C49837) / C49832;
    const double C735 = (-(C49824 * C49981 * C49843) / C49733) / C49692 -
                        (C49981 * C49833 * C49829 * C49940 * ce) / C49832;
    const double C862 = (-(C49824 * C49996 * ce) / C49733) / C49692 -
                        (C49833 * C49829 * C49837) / C49832 +
                        C49824 * ((-(C49824 * C49843) / C49733) / C49692 -
                                  (C49996 * ce) / C49832);
    const double C49856 = C49821 * C49854;
    const double C49865 = C49854 / C49832;
    const double C50068 = C49981 * C49854;
    const double C50089 = C49824 * C49854;
    const double C612 =
        (-2 * C49981 * C49843) / C49832 +
        C49981 * ((-(C49854 * std::pow(C49981, 2)) / C49733) / C49692 -
                  C49843 / C49832);
    const double C742 =
        C49824 * ((-(C49854 * C49990) / C49733) / C49692 - C49843 / C49832) -
        ((C49833 * C49829 * C49940 + C49944 * C49990) * ce) / C49832;
    const double C980 =
        (-(C49824 * C50040 * ce) / C49733) / C49692 -
        (C49981 * C49843) / C49832 +
        C49824 * ((-(C49824 * C49981 * C49854) / C49733) / C49692 -
                  (C50040 * ce) / C49832);
    const double C1070 =
        2 * ((-(C49824 * C49843) / C49733) / C49692 - (C49996 * ce) / C49832) -
        ((C49996 + C49944 * std::pow(C49824, 2)) * ce) / C49832 +
        C49824 *
            ((-(C49824 * C49944 * ce) / C49733) / C49692 - C49843 / C49832 +
             C49824 * ((-(C49824 * C49854) / C49733) / C49692 -
                       (C49944 * ce) / C49832));
    const double C49879 = C49821 * C49875;
    const double C49897 = C49875 / C49832;
    const double C50102 = C49875 * C49990;
    const double C50124 = C49981 * C49875;
    const double C50193 = C49824 * C49875;
    const double C49915 = C49821 * C49911;
    const double C50125 = C49911 * C49990;
    const double C50215 = C49981 * C49911;
    const double C50240 = C49824 * C49911;
    const double C50717 = C50716 * C50711;
    const double C50721 = C50720 * C50716;
    const double C50976 = C50716 / C49741;
    const double C50975 = C50716 * C50712;
    const double C252 = C50982 * C50716;
    const double C50761 = C50748 * C50759;
    const double C50764 = C50720 * C50748;
    const double C50985 = C50748 * C50760;
    const double C50984 = C50748 / C49741;
    const double C503 = C50982 * C50748;
    const double C50863 = C50852 * C50861;
    const double C50866 = C50692 * C50852;
    const double C50998 = C50852 * C50862;
    const double C50997 = C50852 / C49697;
    const double C7789 = C50994 * C50852;
    const double C50887 = C50878 * C50885;
    const double C50890 = C50692 * C50878;
    const double C51003 = C50878 * C50886;
    const double C51002 = C50878 / C49697;
    const double C15528 = C50994 * C50878;
    const double C49708 = C49703 / C49696;
    const double C49706 = 2 * C49703;
    const double C50971 = C50689 / C49701;
    const double C50970 = C50689 * C50684;
    const double C50967 = C50689 / C49692;
    const double C50696 = C50693 * C50684;
    const double C108 = C50693 / C50973;
    const double C22817 = C50693 / C49697;
    const double C2171 = (C50688 * std::pow(C50684, 2)) / C49696 + C50969;
    const double C51007 = C50968 / C49692;
    const double C2172 = (-2 * C50692 * C50968) / C49692;
    const double C49746 = 2 * C49745;
    const double C49766 = C49745 / C49758;
    const double C50992 = C50787 / C49762;
    const double C50991 = C50787 * C50786;
    const double C50983 = C50787 / C49733;
    const double C50793 = C50790 * C50786;
    const double C1050 = C50790 / C50980;
    const double C1743 = C50790 / C49741;
    const double C51016 = C50990 / C49733;
    const double C842 = (-2 * C50720 * C50990) / C49733;
    const double C841 = (C50778 * std::pow(C50786, 2)) / C49758 + C50989;
    const double C50000 = C49998 + C49999;
    const double C724 =
        -(C49824 * C49981 * C49846 + C49981 * C50279 * ce) / C49733;
    const double C857 = -(C49824 * (C49824 * C49846 + C50279 * ce) +
                          C49821 * C49836 + C49824 * C50279 * ce) /
                        C49733;
    const double C507 = C49821 * C50271 + C50279 * C49990;
    const double C599 =
        2 * C49981 * C50279 + C49981 * (C50279 + C49951 * C49990);
    const double C712 = C49824 * C49981 * C50279;
    const double C717 = C49824 * (C50279 + C49951 * C49990);
    const double C848 = C49821 * C50271 + C50279 * C50074;
    const double C1057 =
        2 * C49824 * C50279 + C49824 * (C50279 + C49951 * C50074);
    const double C976 = -(C49824 * (C49824 * C49981 * C49844 + C50371 * ce) +
                          C49981 * C49836 + C49824 * C50371 * ce) /
                        C49733;
    const double C2989 =
        C49824 * ((-2 * C49981 * C49844) / C49733 -
                  (C49981 * (C49855 * C49990 + C49844)) / C49733) -
        ((2 * C50371 + C49981 * (C49941 + C49942 * C49990)) * ce) / C49733;
    const double C3457 =
        (-2 * (C49824 * C50416 + C50371 * ce)) / C49733 -
        (C49824 * (C49824 * (C49824 * C49981 * C49855 + C50417 * ce) + C50416 +
                   C49824 * C50417 * ce)) /
            C49733 -
        ((C50371 + C50417 * C50074) * ce) / C49733;
    const double C968 = C49981 * C50271 + C50371 * C50074;
    const double C3451 =
        2 * C49824 * C50371 + C49824 * (C50371 + C50417 * C50074);
    const double C50440 = C50436 + C50437;
    const double C7942 = C50693 * C265;
    const double C10761 = C50688 * C265;
    const double C25788 = C50693 * C265;
    const double C13049 = C50688 * C387;
    const double C15823 = C50693 * C387;
    const double C28923 = C50693 * C387;
    const double C10753 = C50688 * C511;
    const double C10757 = C50688 * C608;
    const double C11221 = C50688 * C719;
    const double C11227 = C50688 * C730;
    const double C13623 = C50688 * C852;
    const double C13923 = C50688 * C1062;
    const double C49859 = C49857 + C49844;
    const double C49871 = C49868 / C49832;
    const double C49872 = -2 * C49864;
    const double C49869 = ae * C49864;
    const double C50413 = C49981 * C49864;
    const double C50429 = C49824 * C49864;
    const double C603 = (-2 * C49981 * C49846) / C49733 -
                        (C49981 * (C49864 * C49990 + C49846)) / C49733;
    const double C733 = -(C49824 * (C49864 * C49990 + C49846) +
                          (C50279 + C49951 * C49990) * ce) /
                        C49733;
    const double C1065 = (-2 * (C49824 * C49846 + C50279 * ce)) / C49733 -
                         (C49824 * (C49824 * (C49824 * C49864 + C49951 * ce) +
                                    C49846 + C49824 * C49951 * ce)) /
                             C49733 -
                         ((C50279 + C49951 * C50074) * ce) / C49733;
    const double C2809 =
        (-3 * (C49864 * C49990 + C49846)) / C49733 +
        C49981 * ((-2 * C49981 * C49864) / C49733 -
                  (C49981 * (C49896 * C49990 + C49864)) / C49733);
    const double C50447 = C50446 + C49844;
    const double C50475 = -2 * C50473;
    const double C50499 = C49824 * C50473;
    const double C50544 = C50540 + C50541;
    const double C49956 = C49942 + C49954;
    const double C49966 = 2 * C49961;
    const double C49964 = C49961 * ae;
    const double C50401 = C49961 * C49990;
    const double C50414 = C49981 * C49961;
    const double C50432 = C49961 * C50074;
    const double C50528 = C49824 * C49961;
    const double C50527 = C49961 * ce;
    const double C49969 = C49967 + C49960;
    const double C50465 = C49942 + C50464;
    const double C50489 = 2 * C50487;
    const double C50502 = C50487 * C50074;
    const double C50557 = C49824 * C50487;
    const double C50556 = C50487 * ce;
    const double C50546 = C49942 + C50543;
    const double C50584 = 2 * C50575;
    const double C50581 = C50575 * ce;
    const double C50580 = C50573 + C50574;
    const double C49957 = C49955 + C49950;
    const double C50060 = C49944 + C50059;
    const double C50116 = 2 * C50069;
    const double C50149 = C50069 * ce;
    const double C50147 = C49824 * C50069;
    const double C3454 =
        (2 * C49824 * C50040 + C49824 * (C50040 + C50069 * C50074)) / C49692;
    const double C50094 = C49944 + C50091;
    const double C50198 = C50194 / C49832;
    const double C50199 = 2 * C50192;
    const double C50196 = C50192 * ce;
    const double C49919 = C49916 + C49877;
    const double C50023 = C50022 + C50016;
    const double C50140 = C49963 + C50138;
    const double C50222 = C50217 * C50074;
    const double C50249 = C49963 + C50243;
    const double C975 = -(C49824 * (C49824 * C49981 * C49864 + C50369 * ce) +
                          C49981 * C49846 + C49824 * C50369 * ce) /
                        C49733;
    const double C2988 =
        C49824 * ((-2 * C49981 * C49864) / C49733 -
                  (C49981 * (C49896 * C49990 + C49864)) / C49733) -
        ((2 * C50369 + C49981 * (C49951 + C49961 * C49990)) * ce) / C49733;
    const double C967 = C49981 * C50279 + C50369 * C50074;
    const double C126 = 3 * (C50271 + C49941 * C49850) +
                        C49821 * (2 * C50279 + C49821 * C50281);
    const double C253 = C49981 * (2 * C50279 + C49821 * C50281);
    const double C379 = C49824 * (2 * C50279 + C49821 * C50281);
    const double C508 = C50271 + C49941 * C49850 + C50281 * C49990;
    const double C713 = C49824 * C49981 * C50281;
    const double C849 = C50271 + C49941 * C49850 + C50281 * C50074;
    const double C3329 =
        -(C49824 * (C49824 * (C49855 * C49990 + C49844) + C50405 * ce) +
          C49844 * C49990 + C49836 + C49824 * C50405 * ce) /
        C49733;
    const double C2807 = 3 * (C50271 + C49941 * C49990) +
                         C49981 * (2 * C50371 + C49981 * C50405);
    const double C2983 = C49824 * (2 * C50371 + C49981 * C50405);
    const double C3323 = C50271 + C49941 * C49990 + C50405 * C50074;
    const double C6201 = 3 * (C50271 + C49941 * C50074) +
                         C49824 * (2 * C50438 + C49824 * C50441);
    const double C11469 = C50688 * C972;
    const double C49886 = C49821 * C49883;
    const double C49901 = -3 * C49883;
    const double C49895 = ae * C49883;
    const double C50410 = C49981 * C49883;
    const double C50422 = C49824 * C49883;
    const double C49912 = C49907 / C49733;
    const double C49910 = C49903 / C49733;
    const double C50444 = C50443 + C49864;
    const double C50519 = C49824 * C50515;
    const double C50478 = C49981 * C50476;
    const double C50507 = C49824 * C50476;
    const double C49970 = C49821 * C49968;
    const double C50018 = C49968 * ae;
    const double C50398 = C49968 * C49990;
    const double C50411 = C49981 * C49968;
    const double C50425 = C49968 * C50074;
    const double C50459 = C49961 + C50458;
    const double C50520 = C50518 * C50074;
    const double C50532 = C49961 + C50529;
    const double C50491 = C49981 * C50490;
    const double C50510 = C50490 * C50074;
    const double C50564 = C50487 + C50561;
    const double C50586 = C49824 * C50583;
    const double C50119 = C49981 * C50118;
    const double C50136 = 3 * C50118;
    const double C50160 = C50118 * ce;
    const double C50158 = C49824 * C50118;
    const double C50153 = C50069 + C50150;
    const double C50220 = C50216 / C49832;
    const double C50221 = 2 * C50213;
    const double C50218 = C50213 * ce;
    const double C50203 = C49824 * C50200;
    const double C50242 = 3 * C50200;
    const double C50238 = C50200 * ce;
    const double C50251 = C50245 / C49733;
    const double C7946 = C50693 * C273;
    const double C10763 = C50688 * C273;
    const double C25792 = C50693 * C273;
    const double C13051 = C50688 * C399;
    const double C15827 = C50693 * C399;
    const double C28927 = C50693 * C399;
    const double C10755 = C50688 * C521;
    const double C11223 = C50688 * C735;
    const double C13625 = C50688 * C862;
    const double C49858 = C49856 / C49733;
    const double C2816 =
        3 * ((-(C49854 * C49990) / C49733) / C49692 - C49843 / C49832) +
        C49981 * ((-2 * C49981 * C49854) / C49832 +
                  C49981 * ((-(C49875 * C49990) / C49733) / C49692 - C49865));
    const double C2992 =
        C49824 * ((-2 * C49981 * C49854) / C49832 +
                  C49981 * ((-(C49875 * C49990) / C49733) / C49692 - C49865)) -
        ((2 * C50040 + C49981 * (C49944 + C49953 * C49990)) * ce) / C49832;
    const double C3460 =
        2 * ((-(C49824 * C50068) / C49733) / C49692 - (C50040 * ce) / C49832) -
        ((C50040 + C50069 * std::pow(C49824, 2)) * ce) / C49832 +
        C49824 *
            ((-(C49824 * C50069 * ce) / C49733) / C49692 - C50068 / C49832 +
             C49824 * ((-(C49824 * C49981 * C49875) / C49733) / C49692 -
                       (C50069 * ce) / C49832));
    const double C50092 = C50089 / C49733;
    const double C10759 = C50688 * C612;
    const double C11229 = C50688 * C742;
    const double C11471 = C50688 * C980;
    const double C13925 = C50688 * C1070;
    const double C49882 = C49879 / C49733;
    const double C50103 = C50102 / C49733;
    const double C50126 = -2 * C50124;
    const double C50148 = C49824 * C50124;
    const double C50214 = C50124 / C49832;
    const double C50197 = C50193 / C49733;
    const double C49918 = C49915 / C49733;
    const double C50127 = C50125 / C49733;
    const double C50219 = C49824 * C50215;
    const double C50246 = C50240 / C49733;
    const double C50978 = C50717 / C49762;
    const double C50977 = C50717 * C50712;
    const double C50974 = C50717 / C49733;
    const double C50724 = C50721 * C50712;
    const double C116 = C50721 / C50980;
    const double C1173 = C50721 / C49741;
    const double C250 = (C50716 * std::pow(C50712, 2)) / C49758 + C50976;
    const double C51010 = C50975 / C49733;
    const double C251 = (-2 * C50720 * C50975) / C49733;
    const double C50987 = C50761 / C49762;
    const double C50986 = C50761 * C50760;
    const double C50981 = C50761 / C49733;
    const double C50767 = C50764 * C50760;
    const double C595 = C50764 / C50980;
    const double C1274 = C50764 / C49741;
    const double C51013 = C50985 / C49733;
    const double C502 = (-2 * C50720 * C50985) / C49733;
    const double C501 = (C50748 * std::pow(C50760, 2)) / C49758 + C50984;
    const double C51000 = C50863 / C49701;
    const double C50999 = C50863 * C50862;
    const double C50995 = C50863 / C49692;
    const double C50869 = C50866 * C50862;
    const double C10647 = C50866 / C50973;
    const double C25635 = C50866 / C49697;
    const double C51019 = C50998 / C49692;
    const double C7788 = (-2 * C50692 * C50998) / C49692;
    const double C7787 = (C50852 * std::pow(C50862, 2)) / C49696 + C50997;
    const double C51005 = C50887 / C49701;
    const double C51004 = C50887 * C50886;
    const double C50996 = C50887 / C49692;
    const double C50893 = C50890 * C50886;
    const double C20996 = C50890 / C50973;
    const double C38335 = C50890 / C49697;
    const double C51022 = C51003 / C49692;
    const double C15527 = (-2 * C50692 * C51003) / C49692;
    const double C15526 = (C50878 * std::pow(C50886, 2)) / C49696 + C51002;
    const double C49711 = C49700 - C49708;
    const double C49710 = C49690 * C49706;
    const double C2178 =
        ((-C49706 / C49692) / C49697 - (0 * be) / C49692) / C49697 -
        (0 * be) / C49692;
    const double C10648 = -C49706 / C49692;
    const double C25637 = (-C49706 / C49692) / C49697 - (0 * be) / C49692;
    const double C51008 = C50970 / C49696;
    const double C7960 = C50967 * C273;
    const double C7956 = C50967 * C265;
    const double C7952 = C50967 * C521;
    const double C7948 = C50967 * C511;
    const double C7944 = C50967 * C274;
    const double C7940 = C50967 * C266;
    const double C8312 = C50967 * C608;
    const double C8308 = C50967 * C612;
    const double C8631 = C50967 * C742;
    const double C8627 = C50967 * C730;
    const double C8621 = C50967 * C735;
    const double C8617 = C50967 * C719;
    const double C8964 = C50967 * C980;
    const double C8960 = C50967 * C972;
    const double C15843 = C50967 * C399;
    const double C15839 = C50967 * C387;
    const double C15837 = C50967 * C862;
    const double C15833 = C50967 * C852;
    const double C15829 = C50967 * C400;
    const double C15825 = C50967 * C388;
    const double C16437 = C50967 * C1070;
    const double C16433 = C50967 * C1062;
    const double C50972 = C50696 / C49692;
    const double C2345 = C2171 * C273;
    const double C2339 = C2171 * C265;
    const double C2333 = C2171 * C274;
    const double C2327 = C2171 * C266;
    const double C2683 = C2171 * C511;
    const double C2677 = C2171 * C521;
    const double C2825 = C2171 * C612;
    const double C2819 = C2171 * C608;
    const double C3013 = C2171 * C742;
    const double C3007 = C2171 * C730;
    const double C3005 = C2171 * C735;
    const double C2999 = C2171 * C719;
    const double C3341 = C2171 * C980;
    const double C3335 = C2171 * C972;
    const double C5349 = C2171 * C399;
    const double C5343 = C2171 * C387;
    const double C5341 = C2171 * C400;
    const double C5335 = C2171 * C388;
    const double C5927 = C2171 * C862;
    const double C5921 = C2171 * C852;
    const double C6223 = C2171 * C1070;
    const double C6217 = C2171 * C1062;
    const double C25631 = -C51007;
    const double C2335 = C2172 * C273;
    const double C2329 = C2172 * C265;
    const double C5339 = C2172 * C399;
    const double C5333 = C2172 * C387;
    const double C49760 = C49732 * C49746;
    const double C845 =
        ((-C49742 / C49733) / C49741 -
         ((C50778 - (C49732 * C49746) / C49733) * de) / C49733) /
            C49741 -
        ((C49732 * ((-C49746 / C49733) / C49741 - (0 * de) / C49733) + C50790) *
         de) /
            C49733;
    const double C846 =
        ((-C49746 / C49733) / C49741 - (0 * de) / C49733) / C49741 -
        (0 * de) / C49733;
    const double C1512 = (-C49746 / C49733) / C49741 - (0 * de) / C49733;
    const double C49771 = C49765 - C49766;
    const double C51017 = C50991 / C49758;
    const double C50993 = C50793 / C49733;
    const double C1509 = -C51016;
    const double C132 =
        (2 * (C49821 * C49996 + C50271 * ae) +
         C49821 * (C49996 + C49821 * C50000 + C49821 * C49941 * ae) +
         (C50271 + C49941 * C49850) * ae) /
        C49692;
    const double C264 =
        (C49981 * (C49996 + C49821 * C50000 + C50279 * ae)) / C49692;
    const double C386 =
        (C49824 * (C49996 + C49821 * C50000 + C50279 * ae)) / C49692;
    const double C512 =
        (C49821 * C49996 + C50271 * ae + C50000 * C49990) / C49692;
    const double C720 = (C49824 * C49981 * C50000) / C49692;
    const double C853 =
        (C49821 * C49996 + C50271 * ae + C50000 * C50074) / C49692;
    const double C6207 =
        (-3 * (C49824 * C50440 + C49836 + C50438 * ce)) / C49733 +
        C49824 * ((-2 * C50440) / C49733 -
                  (C49824 * (C49824 * (C49824 * C49855 + C49942 * ce) + C49844 +
                             C49824 * C49942 * ce)) /
                      C49733 -
                  (C50441 * ce) / C49733) -
        ((2 * C50438 + C49824 * C50441) * ce) / C49733;
    const double C137 =
        (-3 * (C49844 * C49850 + C49836)) / C49733 +
        C49821 * ((-2 * C49846) / C49733 - (C49821 * C49859) / C49733);
    const double C259 =
        C49981 * ((-2 * C49846) / C49733 - (C49821 * C49859) / C49733);
    const double C389 =
        C49824 * ((-2 * C49846) / C49733 - (C49821 * C49859) / C49733) -
        ((2 * C50279 + C49821 * C50281) * ce) / C49733;
    const double C517 = -(C49859 * C49990 + C49844 * C49850 + C49836) / C49733;
    const double C602 = (-2 * C49981 * C49859) / C49733 -
                        (C49981 * (C49883 * C49990 + C49859)) / C49733;
    const double C725 =
        -(C49824 * C49981 * C49859 + C49981 * C50281 * ce) / C49733;
    const double C858 = -(C49824 * (C49824 * C49859 + C50281 * ce) +
                          C49844 * C49850 + C49836 + C49824 * C50281 * ce) /
                        C49733;
    const double C49876 = C49872 / C49733;
    const double C49874 = C49869 / C49733;
    const double C50433 = C50429 + C50430;
    const double C8437 =
        4 * ((-2 * C50416) / C49733 - (C49981 * C50447) / C49733) +
        C49981 * ((-3 * C50447) / C49733 +
                  C49981 * ((-2 * C49981 * C49855) / C49733 -
                            (C49981 * (C49877 * C49990 + C49855)) / C49733));
    const double C8610 =
        C49824 * ((-3 * C50447) / C49733 +
                  C49981 * ((-2 * C49981 * C49855) / C49733 -
                            (C49981 * (C49877 * C49990 + C49855)) / C49733)) -
        ((3 * C50405 +
          C49981 * (2 * C50417 + C49981 * (C49942 + C49952 * C49990))) *
         ce) /
            C49733;
    const double C50477 = C50475 / C49733;
    const double C50503 = C50499 + C50500;
    const double C50548 = C49824 * C50544;
    const double C50572 = -2 * C50544;
    const double C50009 = C49956 * ae;
    const double C50284 = C49821 * C49956;
    const double C50289 = 3 * C49956;
    const double C50367 = C49981 * C49956;
    const double C50424 = C49824 * C49956;
    const double C50423 = C49956 * ce;
    const double C732 = -(C49824 * (C49883 * C49990 + C49859) +
                          (C50281 + C49956 * C49990) * ce) /
                        C49733;
    const double C1064 = (-2 * (C49824 * C49859 + C50281 * ce)) / C49733 -
                         (C49824 * (C49824 * (C49824 * C49883 + C49956 * ce) +
                                    C49859 + C49824 * C49956 * ce)) /
                             C49733 -
                         ((C50281 + C49956 * C50074) * ce) / C49733;
    const double C598 =
        2 * C49981 * C50281 + C49981 * (C50281 + C49956 * C49990);
    const double C716 = C49824 * (C50281 + C49956 * C49990);
    const double C1056 =
        2 * C49824 * C50281 + C49824 * (C50281 + C49956 * C50074);
    const double C50402 = C49951 + C50401;
    const double C50457 = 2 * C50414;
    const double C50517 = C49824 * C50414;
    const double C50516 = C50414 * ce;
    const double C3456 =
        (-2 * (C49824 * C50413 + C50369 * ce)) / C49733 -
        (C49824 * (C49824 * (C49824 * C49981 * C49896 + C50414 * ce) + C50413 +
                   C49824 * C50414 * ce)) /
            C49733 -
        ((C50369 + C50414 * C50074) * ce) / C49733;
    const double C3450 =
        2 * C49824 * C50369 + C49824 * (C50369 + C50414 * C50074);
    const double C50434 = C49951 + C50432;
    const double C50533 = 2 * C50528;
    const double C50531 = C50528 * ce;
    const double C50530 = C50526 + C50527;
    const double C49971 = C49821 * C49969;
    const double C50014 = 2 * C49969;
    const double C50056 = C49969 * C49990;
    const double C50066 = C49981 * C49969;
    const double C50083 = C49969 * C50074;
    const double C50178 = C49969 * ce;
    const double C50176 = C49824 * C49969;
    const double C50466 = C49981 * C50465;
    const double C50486 = 3 * C50465;
    const double C50509 = C49824 * C50465;
    const double C50508 = C50465 * ce;
    const double C9085 =
        (-2 * (C49824 * C50447 + C50405 * ce)) / C49733 -
        (C49824 *
         (C49824 * (C49824 * (C49877 * C49990 + C49855) + C50465 * ce) +
          C50447 + C49824 * C50465 * ce)) /
            C49733 -
        ((C50405 + C50465 * C50074) * ce) / C49733;
    const double C9081 =
        2 * C49824 * C50405 + C49824 * (C50405 + C50465 * C50074);
    const double C50504 = C50417 + C50502;
    const double C50562 = 2 * C50557;
    const double C50560 = C50557 * ce;
    const double C50563 = C50559 + C50556;
    const double C50549 = C49824 * C50546;
    const double C50578 = 3 * C50546;
    const double C50576 = C50546 * ce;
    const double C50585 = C49824 * C50580;
    const double C50002 = C49821 * C49957;
    const double C50007 = 2 * C49957;
    const double C50038 = C49981 * C49957;
    const double C50082 = C49957 * ce;
    const double C50080 = C49824 * C49957;
    const double C607 =
        (2 * C49981 * C50000 + C49981 * (C50000 + C49957 * C49990)) / C49692;
    const double C729 = (C49824 * (C50000 + C49957 * C49990)) / C49692;
    const double C1061 =
        (2 * C49824 * C50000 + C49824 * (C50000 + C49957 * C50074)) / C49692;
    const double C3332 =
        (-(C49854 * C49990) / C49733) / C49692 - C49843 / C49832 -
        (C49824 * C50060 * ce) / C49832 +
        C49824 * (C49824 * ((-(C49875 * C49990) / C49733) / C49692 - C49865) -
                  (C50060 * ce) / C49832);
    const double C2813 = (3 * (C49996 + C49944 * C49990) +
                          C49981 * (2 * C50040 + C49981 * C50060)) /
                         C49692;
    const double C2986 = (C49824 * (2 * C50040 + C49981 * C50060)) / C49692;
    const double C3326 = (C49996 + C49944 * C49990 + C50060 * C50074) / C49692;
    const double C9083 =
        (2 * C49824 * C50060 + C49824 * (C50060 + C50118 * C50074)) / C49692;
    const double C50152 = C50149 / C49832;
    const double C13797 = C50688 * C3454;
    const double C16613 = C50967 * C3454;
    const double C6204 = (3 * (C49996 + C49944 * C50074) +
                          C49824 * (2 * C50088 + C49824 * C50094)) /
                         C49692;
    const double C50201 = C50196 / C49733;
    const double C49922 = C49821 * C49919;
    const double C2808 =
        (-3 * (C49883 * C49990 + C49859)) / C49733 +
        C49981 * ((-2 * C49981 * C49883) / C49733 -
                  (C49981 * (C49919 * C49990 + C49883)) / C49733);
    const double C50024 = C49821 * C50023;
    const double C50111 = C50023 * C49990;
    const double C50169 = C49981 * C50023;
    const double C50179 = C50023 * C50074;
    const double C50141 = C49981 * C50140;
    const double C50161 = C50140 * C50074;
    const double C50225 = C50137 + C50222;
    const double C50253 = C49824 * C50249;
    const double C49888 = C49886 / C49733;
    const double C49906 = C49901 / C49733;
    const double C49902 = C49895 / C49832;
    const double C49914 = -C49910;
    const double C8436 =
        4 * ((-2 * C50413) / C49733 - (C49981 * C50444) / C49733) +
        C49981 * ((-3 * C50444) / C49733 +
                  C49981 * ((-2 * C49981 * C49896) / C49733 -
                            (C49981 * (C49821 * C49913 * C49990 + C49896)) /
                                C49733));
    const double C50479 = C50478 / C49733;
    const double C49972 = C49966 + C49970;
    const double C50399 = C49956 + C50398;
    const double C50427 = C49956 + C50425;
    const double C50460 = C49981 * C50459;
    const double C50522 = C50414 + C50520;
    const double C50535 = C49824 * C50532;
    const double C50492 = C50489 + C50491;
    const double C50512 = C50465 + C50510;
    const double C50566 = C49824 * C50564;
    const double C50588 = C50584 + C50586;
    const double C50120 = C50116 + C50119;
    const double C50162 = C50160 / C49832;
    const double C13915 = (3 * (C50040 + C50069 * C50074) +
                           C49824 * (2 * C50147 + C49824 * C50153)) /
                          C49692;
    const double C50223 = C50218 / C49733;
    const double C50206 = C50199 + C50203;
    const double C50244 = C50238 / C49832;
    const double C50254 = -C50251;
    const double C49860 = -C49858;
    const double C8450 = C50967 * C2816;
    const double C11019 = C50688 * C2816;
    const double C8637 = C50967 * C2992;
    const double C11235 = C50688 * C2992;
    const double C13799 = C50688 * C3460;
    const double C16617 = C50967 * C3460;
    const double C50095 = -C50092;
    const double C49885 = -C49882;
    const double C50104 = -C50103;
    const double C50128 = C50126 / C49832;
    const double C50151 = C50148 / C49733;
    const double C50202 = -C50197;
    const double C49921 = -C49918;
    const double C50129 = -C50127;
    const double C50224 = C50219 / C49733;
    const double C50252 = -C50246;
    const double C51011 = C50977 / C49758;
    const double C50979 = C50724 / C49733;
    const double C1275 = -C51010;
    const double C51014 = C50986 / C49758;
    const double C50988 = C50767 / C49733;
    const double C1169 = -C51013;
    const double C51020 = C50999 / C49696;
    const double C51001 = C50869 / C49692;
    const double C22818 = -C51019;
    const double C51023 = C51004 / C49696;
    const double C51006 = C50893 / C49692;
    const double C32103 = -C51022;
    const double C7973 = C49711 * C253;
    const double C7965 = C49711 * C508;
    const double C7961 = C49711 * C260;
    const double C7957 = C49711 * C254;
    const double C7953 = C49711 * C516;
    const double C7949 = C49711 * C507;
    const double C7945 = C49711 * C261;
    const double C7941 = C49711 * C255;
    const double C8309 = C49711 * C599;
    const double C8305 = C49711 * C603;
    const double C8451 = C49711 * C2809;
    const double C8638 = C49711 * C2988;
    const double C8628 = C49711 * C733;
    const double C8624 = C49711 * C717;
    const double C8618 = C49711 * C724;
    const double C8614 = C49711 * C712;
    const double C8965 = C49711 * C975;
    const double C8961 = C49711 * C967;
    const double C9577 = C49711 * C713;
    const double C15854 = C49711 * C379;
    const double C15848 = C49711 * C849;
    const double C15844 = C49711 * C390;
    const double C15840 = C49711 * C380;
    const double C15834 = C49711 * C857;
    const double C15830 = C49711 * C848;
    const double C15826 = C49711 * C391;
    const double C15822 = C49711 * C381;
    const double C16438 = C49711 * C1065;
    const double C16434 = C49711 * C1057;
    const double C120 =
        (C49711 / C49697 - (0 * be) / C49692) / C49697 - (0 * be) / C49692;
    const double C22822 = C49711 / C49697 - (0 * be) / C49692;
    const double C49713 = C49710 / C49692;
    const double C2342 = C2178 * C253;
    const double C2336 = C2178 * C260;
    const double C2330 = C2178 * C254;
    const double C2678 = C2178 * C508;
    const double C2994 = C2178 * C713;
    const double C5346 = C2178 * C379;
    const double C5336 = C2178 * C390;
    const double C5330 = C2178 * C380;
    const double C5924 = C2178 * C849;
    const double C10776 = C10648 * C508;
    const double C10774 = C10648 * C260;
    const double C10772 = C10648 * C254;
    const double C10770 = C10648 * C603;
    const double C10768 = C10648 * C599;
    const double C10766 = C10648 * C516;
    const double C10764 = C10648 * C507;
    const double C10762 = C10648 * C261;
    const double C10760 = C10648 * C255;
    const double C10758 = C10648 * C604;
    const double C10756 = C10648 * C600;
    const double C10754 = C10648 * C515;
    const double C10752 = C10648 * C506;
    const double C10750 = C10648 * C262;
    const double C10748 = C10648 * C256;
    const double C11024 = C10648 * C2809;
    const double C11020 = C10648 * C2807;
    const double C11018 = C10648 * C2810;
    const double C11234 = C10648 * C2989;
    const double C11232 = C10648 * C2983;
    const double C11228 = C10648 * C734;
    const double C11226 = C10648 * C718;
    const double C11222 = C10648 * C723;
    const double C11220 = C10648 * C711;
    const double C11478 = C10648 * C3329;
    const double C11476 = C10648 * C3323;
    const double C11470 = C10648 * C976;
    const double C11468 = C10648 * C968;
    const double C11912 = C10648 * C2988;
    const double C11906 = C10648 * C733;
    const double C11902 = C10648 * C717;
    const double C11900 = C10648 * C724;
    const double C11896 = C10648 * C712;
    const double C12882 = C10648 * C713;
    const double C13054 = C10648 * C390;
    const double C13052 = C10648 * C380;
    const double C13050 = C10648 * C391;
    const double C13048 = C10648 * C381;
    const double C13046 = C10648 * C392;
    const double C13044 = C10648 * C382;
    const double C13632 = C10648 * C975;
    const double C13630 = C10648 * C967;
    const double C13628 = C10648 * C857;
    const double C13626 = C10648 * C848;
    const double C13624 = C10648 * C856;
    const double C13622 = C10648 * C847;
    const double C13798 = C10648 * C3457;
    const double C13796 = C10648 * C3451;
    const double C13924 = C10648 * C1066;
    const double C13922 = C10648 * C1058;
    const double C18614 = C10648 * C849;
    const double C19172 = C10648 * C1065;
    const double C19170 = C10648 * C1057;
    const double C19442 = C10648 * C6201;
    const double C25819 = C25637 * C253;
    const double C25811 = C25637 * C508;
    const double C25807 = C25637 * C260;
    const double C25803 = C25637 * C254;
    const double C25799 = C25637 * C516;
    const double C25795 = C25637 * C507;
    const double C25791 = C25637 * C261;
    const double C25787 = C25637 * C255;
    const double C26155 = C25637 * C599;
    const double C26151 = C25637 * C603;
    const double C26289 = C25637 * C2809;
    const double C26468 = C25637 * C2988;
    const double C26458 = C25637 * C733;
    const double C26454 = C25637 * C717;
    const double C26448 = C25637 * C724;
    const double C26444 = C25637 * C712;
    const double C26787 = C25637 * C975;
    const double C26783 = C25637 * C967;
    const double C27391 = C25637 * C713;
    const double C28938 = C25637 * C379;
    const double C28936 = C25637 * C390;
    const double C28932 = C25637 * C380;
    const double C28926 = C25637 * C391;
    const double C28922 = C25637 * C381;
    const double C29684 = C25637 * C849;
    const double C29682 = C25637 * C857;
    const double C29678 = C25637 * C848;
    const double C30056 = C25637 * C1065;
    const double C30052 = C25637 * C1057;
    const double C51025 = C50969 - C51008;
    const double C51009 = C50971 - C50972;
    const double C25806 = C25631 * C273;
    const double C25802 = C25631 * C265;
    const double C25798 = C25631 * C521;
    const double C25794 = C25631 * C511;
    const double C25790 = C25631 * C274;
    const double C25786 = C25631 * C266;
    const double C26158 = C25631 * C608;
    const double C26154 = C25631 * C612;
    const double C26288 = C25631 * C2816;
    const double C26467 = C25631 * C2992;
    const double C26461 = C25631 * C742;
    const double C26457 = C25631 * C730;
    const double C26451 = C25631 * C735;
    const double C26447 = C25631 * C719;
    const double C26786 = C25631 * C980;
    const double C26782 = C25631 * C972;
    const double C28935 = C25631 * C399;
    const double C28931 = C25631 * C387;
    const double C28929 = C25631 * C400;
    const double C28925 = C25631 * C388;
    const double C29681 = C25631 * C862;
    const double C29677 = C25631 * C852;
    const double C29915 = C25631 * C3460;
    const double C29911 = C25631 * C3454;
    const double C30059 = C25631 * C1070;
    const double C30055 = C25631 * C1062;
    const double C49764 = C49760 / C49733;
    const double C1054 =
        (C49771 / C49741 - (0 * de) / C49733) / C49741 - (0 * de) / C49733;
    const double C1746 = C49771 / C49741 - (0 * de) / C49733;
    const double C51028 = C50989 - C51017;
    const double C51018 = C50992 - C50993;
    const double C844 =
        ((-(0 * de) / C49733) / C49741 -
         ((0 - (C49732 * C49742) / C49733) * de) / C49733) /
            C49741 -
        ((C49732 * ((-C49742 / C49733) / C49741 -
                    ((C50778 - (C49732 * C49746) / C49733) * de) / C49733) +
          C1509) *
         de) /
            C49733 +
        (-C49746 / C49733) / C49741 - (0 * de) / C49733;
    const double C2351 = C2171 * C264;
    const double C2341 = C2172 * C264;
    const double C2331 = C2173 * C264;
    const double C7972 = C50967 * C264;
    const double C7958 = C50693 * C264;
    const double C10773 = C50688 * C264;
    const double C22975 = C22817 * C264;
    const double C25818 = C25631 * C264;
    const double C25804 = C50693 * C264;
    const double C5359 = C2171 * C386;
    const double C5345 = C2172 * C386;
    const double C5331 = C2173 * C386;
    const double C13053 = C50688 * C386;
    const double C15857 = C50967 * C386;
    const double C15841 = C50693 * C386;
    const double C28941 = C25631 * C386;
    const double C28933 = C50693 * C386;
    const double C32399 = C22817 * C386;
    const double C2685 = C2171 * C512;
    const double C2681 = C2172 * C512;
    const double C7964 = C50967 * C512;
    const double C7950 = C50693 * C512;
    const double C10765 = C50688 * C512;
    const double C25810 = C25631 * C512;
    const double C25796 = C50693 * C512;
    const double C2997 = C2172 * C720;
    const double C3949 = C2171 * C720;
    const double C8615 = C50693 * C720;
    const double C9576 = C50967 * C720;
    const double C11897 = C50688 * C720;
    const double C26445 = C50693 * C720;
    const double C27390 = C25631 * C720;
    const double C5937 = C2171 * C853;
    const double C5923 = C2172 * C853;
    const double C13627 = C50688 * C853;
    const double C15847 = C50967 * C853;
    const double C15831 = C50693 * C853;
    const double C29687 = C25631 * C853;
    const double C29679 = C50693 * C853;
    const double C19444 = C10648 * C6207;
    const double C2348 = C2178 * C259;
    const double C7977 = C49711 * C259;
    const double C25823 = C25637 * C259;
    const double C5352 = C2178 * C389;
    const double C15858 = C49711 * C389;
    const double C28942 = C25637 * C389;
    const double C2672 = C2178 * C517;
    const double C7969 = C49711 * C517;
    const double C10778 = C10648 * C517;
    const double C25815 = C25637 * C517;
    const double C2828 = C2178 * C602;
    const double C8319 = C49711 * C602;
    const double C10782 = C10648 * C602;
    const double C26165 = C25637 * C602;
    const double C3000 = C2178 * C725;
    const double C9581 = C49711 * C725;
    const double C12884 = C10648 * C725;
    const double C27395 = C25637 * C725;
    const double C5930 = C2178 * C858;
    const double C15852 = C49711 * C858;
    const double C18616 = C10648 * C858;
    const double C29688 = C25637 * C858;
    const double C49878 = -C49874;
    const double C11110 = C10648 * C8437;
    const double C11240 = C10648 * C8610;
    const double C50550 = C50548 + C49844;
    const double C50579 = C50572 / C49733;
    const double C50285 = C50283 + C50284;
    const double C974 = -(C49824 * (C49824 * C49981 * C49883 + C50367 * ce) +
                          C49981 * C49859 + C49824 * C50367 * ce) /
                        C49733;
    const double C2987 =
        C49824 * ((-2 * C49981 * C49883) / C49733 -
                  (C49981 * (C49919 * C49990 + C49883)) / C49733) -
        ((2 * C50367 + C49981 * (C49956 + C49968 * C49990)) * ce) / C49733;
    const double C3455 =
        (-2 * (C49824 * C50410 + C50367 * ce)) / C49733 -
        (C49824 * (C49824 * (C49824 * C49981 * C49919 + C50411 * ce) + C50410 +
                   C49824 * C50411 * ce)) /
            C49733 -
        ((C50367 + C50411 * C50074) * ce) / C49733;
    const double C966 = C49981 * C50281 + C50367 * C50074;
    const double C3449 =
        2 * C49824 * C50367 + C49824 * (C50367 + C50411 * C50074);
    const double C50426 = C50422 + C50423;
    const double C3016 = C2178 * C732;
    const double C9589 = C49711 * C732;
    const double C12888 = C10648 * C732;
    const double C27403 = C25637 * C732;
    const double C6218 = C2178 * C1064;
    const double C16446 = C49711 * C1064;
    const double C21196 = C10648 * C1064;
    const double C39185 = C25637 * C1064;
    const double C2822 = C2178 * C598;
    const double C8315 = C49711 * C598;
    const double C10780 = C10648 * C598;
    const double C26161 = C25637 * C598;
    const double C3010 = C2178 * C716;
    const double C9585 = C49711 * C716;
    const double C12886 = C10648 * C716;
    const double C27399 = C25637 * C716;
    const double C6212 = C2178 * C1056;
    const double C16442 = C49711 * C1056;
    const double C21194 = C10648 * C1056;
    const double C39181 = C25637 * C1056;
    const double C3328 =
        -(C49824 * (C49824 * (C49896 * C49990 + C49864) + C50402 * ce) +
          C49864 * C49990 + C49846 + C49824 * C50402 * ce) /
        C49733;
    const double C8609 =
        C49824 * ((-3 * C50444) / C49733 +
                  C49981 * ((-2 * C49981 * C49896) / C49733 -
                            (C49981 * (C49821 * C49913 * C49990 + C49896)) /
                                C49733)) -
        ((3 * C50402 +
          C49981 * (2 * C50414 + C49981 * (C49961 + C50017 * C49990))) *
         ce) /
            C49733;
    const double C9084 =
        (-2 * (C49824 * C50444 + C50402 * ce)) / C49733 -
        (C49824 * (C49824 * (C49824 * (C49821 * C49913 * C49990 + C49896) +
                             C50459 * ce) +
                   C50444 + C49824 * C50459 * ce)) /
            C49733 -
        ((C50402 + C50459 * C50074) * ce) / C49733;
    const double C2806 = 3 * (C50279 + C49951 * C49990) +
                         C49981 * (2 * C50369 + C49981 * C50402);
    const double C2982 = C49824 * (2 * C50369 + C49981 * C50402);
    const double C3322 = C50279 + C49951 * C49990 + C50402 * C50074;
    const double C9080 =
        2 * C49824 * C50402 + C49824 * (C50402 + C50459 * C50074);
    const double C50521 = C50519 + C50516;
    const double C16614 = C49711 * C3456;
    const double C19176 = C10648 * C3456;
    const double C29916 = C25637 * C3456;
    const double C16610 = C49711 * C3450;
    const double C19174 = C10648 * C3450;
    const double C29912 = C25637 * C3450;
    const double C6206 =
        (-3 * (C49824 * C50433 + C49846 + C50431 * ce)) / C49733 +
        C49824 * ((-2 * C50433) / C49733 -
                  (C49824 * (C49824 * (C49824 * C49896 + C49961 * ce) + C49864 +
                             C49824 * C49961 * ce)) /
                      C49733 -
                  (C50434 * ce) / C49733) -
        ((2 * C50431 + C49824 * C50434) * ce) / C49733;
    const double C6200 = 3 * (C50279 + C49951 * C50074) +
                         C49824 * (2 * C50431 + C49824 * C50434);
    const double C50534 = C49824 * C50530;
    const double C49973 = C49953 + C49971;
    const double C50057 = C49957 + C50056;
    const double C50110 = 2 * C50066;
    const double C50168 = C50066 * ce;
    const double C50166 = C49824 * C50066;
    const double C50085 = C49957 + C50083;
    const double C50181 = C50178 / C49832;
    const double C50182 = 2 * C50176;
    const double C50180 = C50176 * ce;
    const double C50467 = C50463 + C50466;
    const double C50511 = C50507 + C50508;
    const double C13806 = C10648 * C9085;
    const double C13804 = C10648 * C9081;
    const double C13916 =
        (-3 * (C49824 * C50503 + C50416 + C50501 * ce)) / C49733 +
        C49824 * ((-2 * C50503) / C49733 -
                  (C49824 * (C49824 * (C49824 * C49981 * C49877 + C50487 * ce) +
                             C50473 + C49824 * C50487 * ce)) /
                      C49733 -
                  (C50504 * ce) / C49733) -
        ((2 * C50501 + C49824 * C50504) * ce) / C49733;
    const double C13913 = 3 * (C50371 + C50417 * C50074) +
                          C49824 * (2 * C50501 + C49824 * C50504);
    const double C50565 = C49824 * C50563;
    const double C50551 = C50547 + C50549;
    const double C50582 = C50576 / C49733;
    const double C50587 = C50585 + C49855;
    const double C50004 = C49944 + C50002;
    const double C971 = (C49981 * C50000 + C50038 * C50074) / C49692;
    const double C3453 =
        (2 * C49824 * C50038 + C49824 * (C50038 + C50066 * C50074)) / C49692;
    const double C50084 = C50082 / C49832;
    const double C2821 = C2172 * C607;
    const double C8314 = C50967 * C607;
    const double C8310 = C50693 * C607;
    const double C10769 = C50688 * C607;
    const double C26160 = C25631 * C607;
    const double C26156 = C50693 * C607;
    const double C3009 = C2172 * C729;
    const double C8625 = C50693 * C729;
    const double C9584 = C50967 * C729;
    const double C11903 = C50688 * C729;
    const double C26455 = C50693 * C729;
    const double C27398 = C25631 * C729;
    const double C6215 = C2172 * C1061;
    const double C16445 = C50967 * C1061;
    const double C16435 = C50693 * C1061;
    const double C19171 = C50688 * C1061;
    const double C30053 = C50693 * C1061;
    const double C39184 = C25631 * C1061;
    const double C8972 = C50967 * C3332;
    const double C11479 = C50688 * C3332;
    const double C26794 = C25631 * C3332;
    const double C8446 = C50967 * C2813;
    const double C11021 = C50688 * C2813;
    const double C26284 = C25631 * C2813;
    const double C8633 = C50967 * C2986;
    const double C11233 = C50688 * C2986;
    const double C26463 = C25631 * C2986;
    const double C8968 = C50967 * C3326;
    const double C11477 = C50688 * C3326;
    const double C26790 = C25631 * C3326;
    const double C13805 = C50688 * C9083;
    const double C16733 = C50967 * C6204;
    const double C19443 = C50688 * C6204;
    const double C39442 = C25631 * C6204;
    const double C50204 = -C50201;
    const double C49924 = C49922 / C49733;
    const double C50025 = C49963 + C50024;
    const double C50112 = C49969 + C50111;
    const double C50172 = C50169 * C50074;
    const double C50183 = C49969 + C50179;
    const double C50142 = C50139 + C50141;
    const double C50163 = C50118 + C50161;
    const double C50228 = C49824 * C50225;
    const double C50256 = C50248 + C50253;
    const double C49890 = C49876 - C49888;
    const double C49917 = C49914 / C49692;
    const double C50480 = C50477 - C50479;
    const double C50019 = C49972 * ae;
    const double C50290 = C49821 * C49972;
    const double C50365 = C49981 * C49972;
    const double C3327 =
        -(C49824 * (C49824 * (C49919 * C49990 + C49883) + C50399 * ce) +
          C49883 * C49990 + C49859 + C49824 * C50399 * ce) /
        C49733;
    const double C2805 = 3 * (C50281 + C49956 * C49990) +
                         C49981 * (2 * C50367 + C49981 * C50399);
    const double C2981 = C49824 * (2 * C50367 + C49981 * C50399);
    const double C3321 = C50281 + C49956 * C49990 + C50399 * C50074;
    const double C6199 = 3 * (C50281 + C49956 * C50074) +
                         C49824 * (2 * C50424 + C49824 * C50427);
    const double C50461 = C50457 + C50460;
    const double C16603 = 3 * (C50369 + C50414 * C50074) +
                          C49824 * (2 * C50517 + C49824 * C50522);
    const double C50537 = C50533 + C50535;
    const double C50493 = C49981 * C50492;
    const double C13914 = 3 * (C50405 + C50465 * C50074) +
                          C49824 * (2 * C50509 + C49824 * C50512);
    const double C50568 = C50562 + C50566;
    const double C50590 = C49824 * C50588;
    const double C8439 = (4 * (2 * C50040 + C49981 * C50060) +
                          C49981 * (3 * C50060 + C49981 * C50120)) /
                         C49692;
    const double C8608 = (C49824 * (3 * C50060 + C49981 * C50120)) / C49692;
    const double C8953 =
        (2 * C50040 + C49981 * C50060 + C50120 * C50074) / C49692;
    const double C19333 = C50688 * C13915;
    const double C50226 = -C50223;
    const double C16722 = (4 * (2 * C50088 + C49824 * C50094) +
                           C49824 * (3 * C50094 + C49824 * C50206)) /
                          C49692;
    const double C50257 = C50254 / C49692;
    const double C49861 = C49860 / C49692;
    const double C50096 = C50095 / C49692;
    const double C49887 = C49885 / C49692;
    const double C50105 = C50104 / C49692;
    const double C50154 = -C50151;
    const double C50205 = C50202 / C49692;
    const double C49923 = C49921 / C49692;
    const double C50130 = C50129 / C49692;
    const double C50227 = -C50224;
    const double C50255 = C50252 / C49692;
    const double C51026 = C50976 - C51011;
    const double C51012 = C50978 - C50979;
    const double C51027 = C50984 - C51014;
    const double C51015 = C50987 - C50988;
    const double C51029 = C50997 - C51020;
    const double C51021 = C51000 - C51001;
    const double C51030 = C51002 - C51023;
    const double C51024 = C51005 - C51006;
    const double C7990 = C7945 + C7946;
    const double C7988 = C7941 + C7942;
    const double C15872 = C15826 + C15827;
    const double C15870 = C15822 + C15823;
    const double C22992 = C22822 * C259;
    const double C22986 = C22822 * C253;
    const double C22980 = C22822 * C260;
    const double C22974 = C22822 * C254;
    const double C23322 = C22822 * C508;
    const double C23316 = C22822 * C517;
    const double C23460 = C22822 * C602;
    const double C23454 = C22822 * C598;
    const double C23636 = C22822 * C732;
    const double C23630 = C22822 * C716;
    const double C23620 = C22822 * C725;
    const double C23614 = C22822 * C713;
    const double C32420 = C22822 * C389;
    const double C32414 = C22822 * C379;
    const double C32404 = C22822 * C390;
    const double C32398 = C22822 * C380;
    const double C32998 = C22822 * C858;
    const double C32992 = C22822 * C849;
    const double C33274 = C22822 * C1064;
    const double C33268 = C22822 * C1056;
    const double C49715 = C50688 - C49713;
    const double C10791 = C10762 + C10763;
    const double C10790 = C10760 + C10761;
    const double C10789 = C10758 + C10759;
    const double C10788 = C10756 + C10757;
    const double C10787 = C10754 + C10755;
    const double C10786 = C10752 + C10753;
    const double C10785 = C10750 + C10751;
    const double C10784 = C10748 + C10749;
    const double C11028 = C11018 + C11019;
    const double C11249 = C11234 + C11235;
    const double C11246 = C11228 + C11229;
    const double C11245 = C11226 + C11227;
    const double C11243 = C11222 + C11223;
    const double C11242 = C11220 + C11221;
    const double C11489 = C11470 + C11471;
    const double C11488 = C11468 + C11469;
    const double C13059 = C13050 + C13051;
    const double C13058 = C13048 + C13049;
    const double C13057 = C13046 + C13047;
    const double C13056 = C13044 + C13045;
    const double C13639 = C13624 + C13625;
    const double C13638 = C13622 + C13623;
    const double C13809 = C13798 + C13799;
    const double C13808 = C13796 + C13797;
    const double C13927 = C13924 + C13925;
    const double C13926 = C13922 + C13923;
    const double C25836 = C25791 + C25792;
    const double C25834 = C25787 + C25788;
    const double C28948 = C28926 + C28927;
    const double C28946 = C28922 + C28923;
    const double C22995 = C51025 * C264;
    const double C22989 = C51025 * C273;
    const double C22983 = C51025 * C265;
    const double C22977 = C51025 * C274;
    const double C22971 = C51025 * C266;
    const double C23329 = C51025 * C512;
    const double C23327 = C51025 * C511;
    const double C23321 = C51025 * C521;
    const double C23457 = C51025 * C612;
    const double C23451 = C51025 * C608;
    const double C23633 = C51025 * C742;
    const double C23627 = C51025 * C730;
    const double C23625 = C51025 * C735;
    const double C23619 = C51025 * C719;
    const double C23949 = C51025 * C980;
    const double C23943 = C51025 * C972;
    const double C24545 = C51025 * C720;
    const double C32427 = C51025 * C386;
    const double C32417 = C51025 * C399;
    const double C32411 = C51025 * C387;
    const double C32409 = C51025 * C400;
    const double C32403 = C51025 * C388;
    const double C33005 = C51025 * C853;
    const double C32995 = C51025 * C862;
    const double C32989 = C51025 * C852;
    const double C33279 = C51025 * C1070;
    const double C33273 = C51025 * C1062;
    const double C105 = (C50967 - C51007) / C49697 - (C51025 * C50684) / C49692;
    const double C22985 = C51009 * C264;
    const double C22979 = C51009 * C273;
    const double C22973 = C51009 * C265;
    const double C23325 = C51009 * C512;
    const double C23453 = C51009 * C607;
    const double C23629 = C51009 * C729;
    const double C23617 = C51009 * C720;
    const double C32413 = C51009 * C386;
    const double C32407 = C51009 * C399;
    const double C32401 = C51009 * C387;
    const double C32991 = C51009 * C853;
    const double C33271 = C51009 * C1061;
    const double C106 =
        (2 * C50693 + C51025) / C49697 - (C51009 * C50684) / C49692;
    const double C107 = C51009 / C49697 - C50696 / C49701;
    const double C49769 = C50778 - C49764;
    const double C1047 =
        (C50983 - C51016) / C49741 - (C51028 * C50786) / C49733;
    const double C1048 =
        (2 * C50790 + C51028) / C49741 - (C51018 * C50786) / C49733;
    const double C1049 = C51018 / C49741 - C50793 / C49762;
    const double C2364 = C2330 + C2331;
    const double C7996 = C7957 + C7958;
    const double C10796 = C10772 + C10773;
    const double C25842 = C25803 + C25804;
    const double C5366 = C5330 + C5331;
    const double C13060 = C13052 + C13053;
    const double C15879 = C15840 + C15841;
    const double C28951 = C28932 + C28933;
    const double C7992 = C7949 + C7950;
    const double C10792 = C10764 + C10765;
    const double C25838 = C25795 + C25796;
    const double C8640 = C8614 + C8615;
    const double C11914 = C11896 + C11897;
    const double C26470 = C26444 + C26445;
    const double C13640 = C13626 + C13627;
    const double C15874 = C15830 + C15831;
    const double C29701 = C29678 + C29679;
    const double C49881 = C49878 / C49692;
    const double C50552 = C50550 + C50545;
    const double C127 = 4 * (2 * C50279 + C49821 * C50281) +
                        C49821 * (3 * C50281 + C49821 * C50285);
    const double C257 = C49981 * (3 * C50281 + C49821 * C50285);
    const double C383 = C49824 * (3 * C50281 + C49821 * C50285);
    const double C509 = 2 * C50279 + C49821 * C50281 + C50285 * C49990;
    const double C597 =
        2 * C49981 * C50285 + C49981 * (C50285 + C49972 * C49990);
    const double C714 = C49824 * C49981 * C50285;
    const double C715 = C49824 * (C50285 + C49972 * C49990);
    const double C850 = 2 * C50279 + C49821 * C50281 + C50285 * C50074;
    const double C1055 =
        2 * C49824 * C50285 + C49824 * (C50285 + C49972 * C50074);
    const double C3344 = C2178 * C974;
    const double C17232 = C49711 * C974;
    const double C18462 = C10648 * C974;
    const double C23952 = C22822 * C974;
    const double C29696 = C25637 * C974;
    const double C3338 = C2178 * C966;
    const double C17228 = C49711 * C966;
    const double C18460 = C10648 * C966;
    const double C23946 = C22822 * C966;
    const double C29692 = C25637 * C966;
    const double C6205 =
        (-3 * (C49824 * C50426 + C49859 + C50424 * ce)) / C49733 +
        C49824 * ((-2 * C50426) / C49733 -
                  (C49824 * (C49824 * (C49824 * C49919 + C49968 * ce) + C49883 +
                             C49824 * C49968 * ce)) /
                      C49733 -
                  (C50427 * ce) / C49733) -
        ((2 * C50424 + C49824 * C50427) * ce) / C49733;
    const double C8973 = C49711 * C3328;
    const double C13636 = C10648 * C3328;
    const double C26795 = C25637 * C3328;
    const double C8447 = C49711 * C2806;
    const double C11022 = C10648 * C2806;
    const double C26285 = C25637 * C2806;
    const double C8634 = C49711 * C2982;
    const double C11908 = C10648 * C2982;
    const double C26464 = C25637 * C2982;
    const double C8969 = C49711 * C3322;
    const double C13634 = C10648 * C3322;
    const double C26791 = C25637 * C3322;
    const double C16605 =
        (-3 * (C49824 * C50521 + C50413 + C50517 * ce)) / C49733 +
        C49824 * ((-2 * C50521) / C49733 -
                  (C49824 *
                   (C49824 * (C49824 * C49981 * C49821 * C49913 + C50518 * ce) +
                    C50515 + C49824 * C50518 * ce)) /
                      C49733 -
                  (C50522 * ce) / C49733) -
        ((2 * C50517 + C49824 * C50522) * ce) / C49733;
    const double C16734 = C49711 * C6206;
    const double C21562 = C10648 * C6206;
    const double C39443 = C25637 * C6206;
    const double C16730 = C49711 * C6200;
    const double C21560 = C10648 * C6200;
    const double C39439 = C25637 * C6200;
    const double C50536 = C50534 + C49864;
    const double C49974 = C49973 + C49964;
    const double C2812 = (3 * (C50000 + C49957 * C49990) +
                          C49981 * (2 * C50038 + C49981 * C50057)) /
                         C49692;
    const double C2985 = (C49824 * (2 * C50038 + C49981 * C50057)) / C49692;
    const double C3325 = (C50000 + C49957 * C49990 + C50057 * C50074) / C49692;
    const double C50171 = C50168 / C49832;
    const double C6203 = (3 * (C50000 + C49957 * C50074) +
                          C49824 * (2 * C50080 + C49824 * C50085)) /
                         C49692;
    const double C50184 = C50180 / C49832;
    const double C8955 =
        (-2 * C50416) / C49733 - (C49981 * C50447) / C49733 +
        C49824 * (C49824 * ((-2 * C49981 * C49855) / C49733 -
                            (C49981 * (C49877 * C49990 + C49855)) / C49733) -
                  (C50467 * ce) / C49733) -
        (C49824 * C50467 * ce) / C49733;
    const double C8435 = 4 * (2 * C50371 + C49981 * C50405) +
                         C49981 * (3 * C50405 + C49981 * C50467);
    const double C8606 = C49824 * (3 * C50405 + C49981 * C50467);
    const double C8951 = 2 * C50371 + C49981 * C50405 + C50467 * C50074;
    const double C11565 =
        2 * C49824 * C50467 + C49824 * (C50467 + C50492 * C50074);
    const double C13918 =
        (-3 * (C49824 * C50511 + C50447 + C50509 * ce)) / C49733 +
        C49824 * ((-2 * C50511) / C49733 -
                  (C49824 * (C49824 * (C49824 * (C49913 * C49990 + C49877) +
                                       C50490 * ce) +
                             C50476 + C49824 * C50490 * ce)) /
                      C49733 -
                  (C50512 * ce) / C49733) -
        ((2 * C50509 + C49824 * C50512) * ce) / C49733;
    const double C19334 = C10648 * C13916;
    const double C19332 = C10648 * C13913;
    const double C50567 = C50565 + C50473;
    const double C16720 = 4 * (2 * C50438 + C49824 * C50441) +
                          C49824 * (3 * C50441 + C49824 * C50551);
    const double C50589 = C50587 + C50581;
    const double C50005 = C50004 + C50003;
    const double C3337 = C2172 * C971;
    const double C8962 = C50693 * C971;
    const double C13631 = C50688 * C971;
    const double C17231 = C50967 * C971;
    const double C23945 = C51009 * C971;
    const double C26784 = C50693 * C971;
    const double C29695 = C25631 * C971;
    const double C16611 = C50693 * C3453;
    const double C19175 = C50688 * C3453;
    const double C29913 = C50693 * C3453;
    const double C8327 = C8309 + C8310;
    const double C10794 = C10768 + C10769;
    const double C26173 = C26155 + C26156;
    const double C8645 = C8624 + C8625;
    const double C11916 = C11902 + C11903;
    const double C26475 = C26454 + C26455;
    const double C16451 = C16434 + C16435;
    const double C19178 = C19170 + C19171;
    const double C30060 = C30052 + C30053;
    const double C11491 = C11478 + C11479;
    const double C11029 = C11020 + C11021;
    const double C11248 = C11232 + C11233;
    const double C11490 = C11476 + C11477;
    const double C13810 = C13804 + C13805;
    const double C19446 = C19442 + C19443;
    const double C50207 = C50204 / C49692;
    const double C49926 = C49912 - C49924;
    const double C50026 = C50025 + C50021;
    const double C50113 = C49981 * C50112;
    const double C9082 =
        (2 * C49824 * C50057 + C49824 * (C50057 + C50112 * C50074)) / C49692;
    const double C50174 = C50066 + C50172;
    const double C50186 = C49824 * C50183;
    const double C50143 = C49981 * C50142;
    const double C11566 =
        (2 * C49824 * C50120 + C49824 * (C50120 + C50142 * C50074)) / C49692;
    const double C13917 = (3 * (C50060 + C50118 * C50074) +
                           C49824 * (2 * C50158 + C49824 * C50163)) /
                          C49692;
    const double C50231 = C50221 + C50228;
    const double C50259 = C49824 * C50256;
    const double C140 =
        4 * ((-2 * C49846) / C49733 - (C49821 * C49859) / C49733) +
        C49821 * ((-3 * C49859) / C49733 + C49821 * C49890);
    const double C268 = C49981 * ((-3 * C49859) / C49733 + C49821 * C49890);
    const double C394 = C49824 * ((-3 * C49859) / C49733 + C49821 * C49890) -
                        ((3 * C50281 + C49821 * C50285) * ce) / C49733;
    const double C518 =
        (-2 * C49846) / C49733 - (C49821 * C49859) / C49733 + C49890 * C49990;
    const double C726 =
        C49824 * C49981 * C49890 - (C49981 * C50285 * ce) / C49733;
    const double C859 = (-2 * C49846) / C49733 - (C49821 * C49859) / C49733 +
                        C49824 * (C49824 * C49890 - (C50285 * ce) / C49733) -
                        (C49824 * C50285 * ce) / C49733;
    const double C49920 = C49917 - C49897;
    const double C11102 =
        5 * ((-3 * C50447) / C49733 + C49981 * C50480) +
        C49981 * (4 * C50480 +
                  C49981 * ((-3 * C50476) / C49733 +
                            C49981 * ((-2 * C49981 * C49877) / C49733 -
                                      (C49981 * (C49913 * C49990 + C49877)) /
                                          C49733)));
    const double C11215 =
        C49824 * (4 * C50480 +
                  C49981 * ((-3 * C50476) / C49733 +
                            C49981 * ((-2 * C49981 * C49877) / C49733 -
                                      (C49981 * (C49913 * C49990 + C49877)) /
                                          C49733))) -
        ((4 * C50467 +
          C49981 *
              (3 * C50465 + C49981 * (2 * C49981 * C49952 +
                                      C49981 * (C49952 + C49962 * C49990)))) *
         ce) /
            C49733;
    const double C11567 =
        2 * (C49824 * C50480 - (C50467 * ce) / C49733) +
        C49824 * (C50480 +
                  C49824 * (C49824 * ((-2 * C49981 * C49877) / C49733 -
                                      (C49981 * (C49913 * C49990 + C49877)) /
                                          C49733) -
                            (C50492 * ce) / C49733) -
                  (C49824 * C50492 * ce) / C49733) -
        ((C50467 + C50492 * C50074) * ce) / C49733;
    const double C50291 = C50289 + C50290;
    const double C965 = C49981 * C50285 + C50365 * C50074;
    const double C8954 =
        (-2 * C50413) / C49733 - (C49981 * C50444) / C49733 +
        C49824 * (C49824 * ((-2 * C49981 * C49896) / C49733 -
                            (C49981 * (C49821 * C49913 * C49990 + C49896)) /
                                C49733) -
                  (C50461 * ce) / C49733) -
        (C49824 * C50461 * ce) / C49733;
    const double C8434 = 4 * (2 * C50369 + C49981 * C50402) +
                         C49981 * (3 * C50402 + C49981 * C50461);
    const double C8605 = C49824 * (3 * C50402 + C49981 * C50461);
    const double C8950 = 2 * C50369 + C49981 * C50402 + C50461 * C50074;
    const double C16719 = 4 * (2 * C50431 + C49824 * C50434) +
                          C49824 * (3 * C50434 + C49824 * C50537);
    const double C50494 = C50486 + C50493;
    const double C19437 = 4 * (2 * C50501 + C49824 * C50504) +
                          C49824 * (3 * C50504 + C49824 * C50568);
    const double C50592 = C50578 + C50590;
    const double C11109 = C50688 * C8439;
    const double C11237 = C50688 * C8608;
    const double C11485 = C50688 * C8953;
    const double C50229 = C50226 / C49692;
    const double C21735 = C50688 * C16722;
    const double C50260 = C50257 - C49897;
    const double C49862 = C49861 - C49852;
    const double C50097 = C50096 - C50093;
    const double C49889 = C49887 - C49871;
    const double C50106 = C50105 - C49865;
    const double C50155 = C50154 / C49692;
    const double C50208 = C50205 - C50198;
    const double C49925 = C49923 - C49905;
    const double C50131 = C50130 - C49897;
    const double C50230 = C50227 / C49692;
    const double C50258 = C50255 - C50247;
    const double C113 = (C50974 - C51010) / C49741 - (C51026 * C50712) / C49733;
    const double C114 =
        (2 * C50721 + C51026) / C49741 - (C51012 * C50712) / C49733;
    const double C115 = C51012 / C49741 - C50724 / C49762;
    const double C592 = (C50981 - C51013) / C49741 - (C51027 * C50760) / C49733;
    const double C593 =
        (2 * C50764 + C51027) / C49741 - (C51015 * C50760) / C49733;
    const double C594 = C51015 / C49741 - C50767 / C49762;
    const double C10644 =
        (C50995 - C51019) / C49697 - (C51029 * C50862) / C49692;
    const double C10645 =
        (2 * C50866 + C51029) / C49697 - (C51021 * C50862) / C49692;
    const double C10646 = C51021 / C49697 - C50869 / C49701;
    const double C20993 =
        (C50996 - C51022) / C49697 - (C51030 * C50886) / C49692;
    const double C20994 =
        (2 * C50890 + C51030) / C49697 - (C51024 * C50886) / C49692;
    const double C20995 = C51024 / C49697 - C50893 / C49701;
    const double C23008 = C22974 + C22975;
    const double C32434 = C32398 + C32399;
    const double C49716 = C49715 * ae;
    const double C2176 =
        ((-C49691 / C49692) / C49697 - (C49704 * be) / C49692) / C49697 -
        ((C49690 * ((-C49693 / C49692) / C49697 - (C49715 * be) / C49692) +
          C25631) *
         be) /
            C49692 +
        (-C49706 / C49692) / C49697 - (0 * be) / C49692;
    const double C2177 =
        ((-C49693 / C49692) / C49697 - (C49715 * be) / C49692) / C49697 -
        ((C49690 * ((-C49706 / C49692) / C49697 - (0 * be) / C49692) + C50693) *
         be) /
            C49692;
    const double C25636 = (-C49693 / C49692) / C49697 - (C49715 * be) / C49692;
    const double C10809 = C10791 * C50778;
    const double C11898 = C10791 * C50983;
    const double C12167 = C10791 * C1509;
    const double C10808 = C10790 * C121;
    const double C11899 = C10790 * C377;
    const double C10807 = C10789 * C50778;
    const double C11231 = C10789 * C50983;
    const double C11481 = C10789 * C841;
    const double C12163 = C10789 * C1509;
    const double C12625 = C10789 * C51028;
    const double C10806 = C10788 * C121;
    const double C11230 = C10788 * C377;
    const double C11480 = C10788 * C844;
    const double C10805 = C10787 * C50778;
    const double C11225 = C10787 * C50983;
    const double C11473 = C10787 * C841;
    const double C12159 = C10787 * C1509;
    const double C12619 = C10787 * C51028;
    const double C10804 = C10786 * C121;
    const double C11224 = C10786 * C377;
    const double C11472 = C10786 * C844;
    const double C10803 = C10785 * C50778;
    const double C11219 = C10785 * C50983;
    const double C11465 = C10785 * C841;
    const double C12155 = C10785 * C1509;
    const double C12613 = C10785 * C51028;
    const double C10802 = C10784 * C121;
    const double C11218 = C10784 * C377;
    const double C11464 = C10784 * C844;
    const double C11032 = C11028 * C50778;
    const double C11238 = C11028 * C50983;
    const double C12507 = C11028 * C1509;
    const double C11257 = C11249 * C50790;
    const double C11483 = C11249 * C842;
    const double C12165 = C11249 * C50790;
    const double C12627 = C11249 * C51018;
    const double C13209 = C11249 * C50778;
    const double C13470 = C11249 * C50983;
    const double C15266 = C11249 * C1509;
    const double C11255 = C11246 * C50790;
    const double C11475 = C11246 * C842;
    const double C12161 = C11246 * C50790;
    const double C12621 = C11246 * C51018;
    const double C12877 = C11246 * C50778;
    const double C13466 = C11246 * C50983;
    const double C13801 = C11246 * C841;
    const double C14767 = C11246 * C1509;
    const double C15424 = C11246 * C51028;
    const double C11254 = C11245 * C378;
    const double C11474 = C11245 * C845;
    const double C12160 = C11245 * C1512;
    const double C12876 = C11245 * C121;
    const double C13465 = C11245 * C377;
    const double C13800 = C11245 * C844;
    const double C11253 = C11243 * C50790;
    const double C11467 = C11243 * C842;
    const double C12157 = C11243 * C50790;
    const double C12615 = C11243 * C51018;
    const double C12875 = C11243 * C50778;
    const double C13462 = C11243 * C50983;
    const double C13793 = C11243 * C841;
    const double C14763 = C11243 * C1509;
    const double C15418 = C11243 * C51028;
    const double C11252 = C11242 * C378;
    const double C11466 = C11242 * C845;
    const double C12156 = C11242 * C1512;
    const double C12874 = C11242 * C121;
    const double C13461 = C11242 * C377;
    const double C13792 = C11242 * C844;
    const double C11495 = C11489 * C843;
    const double C12617 = C11489 * C1743;
    const double C13464 = C11489 * C50790;
    const double C13795 = C11489 * C842;
    const double C14765 = C11489 * C50790;
    const double C15420 = C11489 * C51018;
    const double C18457 = C11489 * C50778;
    const double C19017 = C11489 * C50983;
    const double C19329 = C11489 * C841;
    const double C20279 = C11489 * C1509;
    const double C20923 = C11489 * C51028;
    const double C11494 = C11488 * C846;
    const double C12616 = C11488 * C1746;
    const double C13463 = C11488 * C378;
    const double C13794 = C11488 * C845;
    const double C14764 = C11488 * C1512;
    const double C18456 = C11488 * C121;
    const double C19016 = C11488 * C377;
    const double C19328 = C11488 * C844;
    const double C13813 = C13809 * C843;
    const double C15422 = C13809 * C1743;
    const double C19019 = C13809 * C50790;
    const double C19331 = C13809 * C842;
    const double C20281 = C13809 * C50790;
    const double C20925 = C13809 * C51018;
    const double C13812 = C13808 * C846;
    const double C15421 = C13808 * C1746;
    const double C19018 = C13808 * C378;
    const double C19330 = C13808 * C845;
    const double C20280 = C13808 * C1512;
    const double C49773 = C49769 * ce;
    const double C1511 = (-C49742 / C49733) / C49741 - (C49769 * de) / C49733;
    const double C10814 = C10796 * C121;
    const double C10810 = C10792 * C121;
    const double C11905 = C10792 * C377;
    const double C11920 = C11914 * C378;
    const double C12166 = C11914 * C1512;
    const double C12878 = C11914 * C121;
    const double C14416 = C11914 * C377;
    const double C49884 = C49881 - C49865;
    const double C16724 =
        4 * ((-2 * C50440) / C49733 - (C49824 * C50552) / C49733 -
             (C50441 * ce) / C49733) +
        C49824 *
            ((-3 * C50552) / C49733 +
             C49824 * ((-2 * C50544) / C49733 -
                       (C49824 * (C49824 * (C49824 * C49877 + C49952 * ce) +
                                  C49855 + C49824 * C49952 * ce)) /
                           C49733 -
                       (C50546 * ce) / C49733) -
             (C50551 * ce) / C49733) -
        ((3 * C50441 + C49824 * C50551) * ce) / C49733;
    const double C2354 = C2178 * C257;
    const double C22998 = C22822 * C257;
    const double C5354 = C2178 * C383;
    const double C32422 = C22822 * C383;
    const double C2688 = C2178 * C509;
    const double C7981 = C49711 * C509;
    const double C23332 = C22822 * C509;
    const double C25827 = C25637 * C509;
    const double C3952 = C2178 * C714;
    const double C24548 = C22822 * C714;
    const double C28718 = C25637 * C714;
    const double C41235 = C49711 * C714;
    const double C5932 = C2178 * C850;
    const double C15862 = C49711 * C850;
    const double C33000 = C22822 * C850;
    const double C38629 = C25637 * C850;
    const double C50538 = C50536 + C50531;
    const double C50008 = C49821 * C49974;
    const double C50013 = 3 * C49974;
    const double C50036 = C49981 * C49974;
    const double C50073 = C49974 * ce;
    const double C50071 = C49824 * C49974;
    const double C8448 = C50693 * C2812;
    const double C11023 = C50688 * C2812;
    const double C26286 = C50693 * C2812;
    const double C8635 = C50693 * C2985;
    const double C11909 = C50688 * C2985;
    const double C26465 = C50693 * C2985;
    const double C8970 = C50693 * C3325;
    const double C13635 = C50688 * C3325;
    const double C26792 = C50693 * C3325;
    const double C16731 = C50693 * C6203;
    const double C21561 = C50688 * C6203;
    const double C39440 = C50693 * C6203;
    const double C11486 = C10648 * C8955;
    const double C11108 = C10648 * C8435;
    const double C11236 = C10648 * C8606;
    const double C11484 = C10648 * C8951;
    const double C19336 = C19332 + C19333;
    const double C50569 = C50567 + C50560;
    const double C21734 = C10648 * C16720;
    const double C50591 = C49824 * C50589;
    const double C138 = (3 * (C49996 + C49821 * C50000 + C50279 * ae) +
                         C49821 * (2 * C50000 + C49821 * C50005 + C50281 * ae) +
                         (2 * C50279 + C49821 * C50281) * ae) /
                        C49692;
    const double C263 =
        (C49981 * (2 * C50000 + C49821 * C50005 + C50281 * ae)) / C49692;
    const double C385 =
        (C49824 * (2 * C50000 + C49821 * C50005 + C50281 * ae)) / C49692;
    const double C513 =
        (C49996 + C49821 * C50000 + C50279 * ae + C50005 * C49990) / C49692;
    const double C606 =
        (2 * C49981 * C50005 + C49981 * (C50005 + C49974 * C49990)) / C49692;
    const double C721 = (C49824 * C49981 * C50005) / C49692;
    const double C728 = (C49824 * (C50005 + C49974 * C49990)) / C49692;
    const double C854 =
        (C49996 + C49821 * C50000 + C50279 * ae + C50005 * C50074) / C49692;
    const double C1060 =
        (2 * C49824 * C50005 + C49824 * (C50005 + C49974 * C50074)) / C49692;
    const double C8976 = C8961 + C8962;
    const double C13642 = C13630 + C13631;
    const double C26798 = C26783 + C26784;
    const double C16618 = C16610 + C16611;
    const double C19180 = C19174 + C19175;
    const double C29919 = C29912 + C29913;
    const double C10812 = C10794 * C121;
    const double C11911 = C10794 * C377;
    const double C11922 = C11916 * C378;
    const double C12170 = C11916 * C1512;
    const double C12880 = C11916 * C121;
    const double C14420 = C11916 * C377;
    const double C11497 = C11491 * C843;
    const double C12623 = C11491 * C1743;
    const double C13468 = C11491 * C50790;
    const double C13803 = C11491 * C842;
    const double C14769 = C11491 * C50790;
    const double C15426 = C11491 * C51018;
    const double C18766 = C11491 * C50778;
    const double C19021 = C11491 * C50983;
    const double C20773 = C11491 * C1509;
    const double C11033 = C11029 * C121;
    const double C11239 = C11029 * C377;
    const double C11256 = C11248 * C378;
    const double C11482 = C11248 * C845;
    const double C12164 = C11248 * C1512;
    const double C13210 = C11248 * C121;
    const double C13471 = C11248 * C377;
    const double C11496 = C11490 * C846;
    const double C12622 = C11490 * C1746;
    const double C13467 = C11490 * C378;
    const double C13802 = C11490 * C845;
    const double C14768 = C11490 * C1512;
    const double C18767 = C11490 * C121;
    const double C19022 = C11490 * C377;
    const double C13814 = C13810 * C846;
    const double C15427 = C13810 * C1746;
    const double C19020 = C13810 * C378;
    const double C20772 = C13810 * C1512;
    const double C50209 = C50207 - C49865;
    const double C49928 = C49821 * C49926;
    const double C601 =
        2 * C49981 * C49890 + C49981 * (C49890 + C49926 * C49990);
    const double C731 = C49824 * (C49890 + C49926 * C49990) -
                        ((C50285 + C49972 * C49990) * ce) / C49733;
    const double C973 =
        C49981 * C49890 +
        C49824 * (C49824 * C49981 * C49926 - (C50365 * ce) / C49733) -
        (C49824 * C50365 * ce) / C49733;
    const double C1063 =
        2 * (C49824 * C49890 - (C50285 * ce) / C49733) +
        C49824 * (C49890 + C49824 * (C49824 * C49926 - (C49972 * ce) / C49733) -
                  (C49824 * C49972 * ce) / C49733) -
        ((C50285 + C49972 * C50074) * ce) / C49733;
    const double C50027 = C49821 * C50026;
    const double C50053 = C50026 * C49990;
    const double C50063 = C49981 * C50026;
    const double C50076 = C50026 * C50074;
    const double C50114 = C50110 + C50113;
    const double C16604 = (3 * (C50038 + C50066 * C50074) +
                           C49824 * (2 * C50166 + C49824 * C50174)) /
                          C49692;
    const double C50189 = C50182 + C50186;
    const double C50144 = C50136 + C50143;
    const double C19438 = (4 * (2 * C50147 + C49824 * C50153) +
                           C49824 * (3 * C50153 + C49824 * C50231)) /
                          C49692;
    const double C50262 = C50242 + C50259;
    const double C2360 = C2178 * C268;
    const double C23004 = C22822 * C268;
    const double C5360 = C2178 * C394;
    const double C32428 = C22822 * C394;
    const double C2694 = C2178 * C518;
    const double C7985 = C49711 * C518;
    const double C23338 = C22822 * C518;
    const double C25831 = C25637 * C518;
    const double C3958 = C2178 * C726;
    const double C24554 = C22822 * C726;
    const double C28722 = C25637 * C726;
    const double C41239 = C49711 * C726;
    const double C5938 = C2178 * C859;
    const double C15866 = C49711 * C859;
    const double C33006 = C22822 * C859;
    const double C38633 = C25637 * C859;
    const double C128 = 5 * (3 * C50281 + C49821 * C50285) +
                        C49821 * (4 * C50285 + C49821 * C50291);
    const double C258 = C49981 * (4 * C50285 + C49821 * C50291);
    const double C384 = C49824 * (4 * C50285 + C49821 * C50291);
    const double C510 = 3 * C50281 + C49821 * C50285 + C50291 * C49990;
    const double C851 = 3 * C50281 + C49821 * C50285 + C50291 * C50074;
    const double C1407 = C49824 * C49981 * C50291;
    const double C11461 =
        (-3 * C50447) / C49733 + C49981 * C50480 +
        C49824 * (C49824 * ((-3 * C50476) / C49733 +
                            C49981 * ((-2 * C49981 * C49877) / C49733 -
                                      (C49981 * (C49913 * C49990 + C49877)) /
                                          C49733)) -
                  (C50494 * ce) / C49733) -
        (C49824 * C50494 * ce) / C49733;
    const double C11101 = 5 * (3 * C50405 + C49981 * C50467) +
                          C49981 * (4 * C50467 + C49981 * C50494);
    const double C11213 = C49824 * (4 * C50467 + C49981 * C50494);
    const double C11459 = 3 * C50405 + C49981 * C50467 + C50494 * C50074;
    const double C21729 = 5 * (3 * C50441 + C49824 * C50551) +
                          C49824 * (4 * C50551 + C49824 * C50592);
    const double C50232 = C50229 - C50214;
    const double C147 =
        3 * ((-(ae * C49846) / C49733) / C49692 - C49843 / C49832 +
             C49821 * C49862) +
        (((-2 * C49846) / C49733 - (C49821 * C49859) / C49733) * ae) / C49692 +
        C49821 *
            (2 * C49862 - (ae * C49859) / C49832 +
             C49821 *
                 ((-(ae * C49821 * C49855) / C49733) / C49692 -
                  C49854 / C49832 +
                  C49821 * ((-(C49821 * std::pow(C49826, 6) * bs[6] * C49837) /
                             C49733) /
                                C49692 -
                            (ae * C49855) / C49832)));
    const double C272 = (yP - yQ) * ((-(ae * C49846) / C49733) / C49692 -
                                     C49843 / C49832 + C49821 * C49862);
    const double C398 =
        C49824 * ((-(ae * C49846) / C49733) / C49692 - C49843 / C49832 +
                  C49821 * C49862) -
        ((C49833 * C49829 * C49940 + C49821 * (C49821 * C49944 + C49941 * ae) +
          C49821 * C49941 * ae) *
         ce) /
            C49832;
    const double C522 = (-(C49821 * C49843) / C49733) / C49692 -
                        (ae * C49836) / C49832 + C49862 * std::pow(yP - yQ, 2);
    const double C736 =
        C49824 * C49981 * C49862 -
        (C49981 * (C49821 * C49944 + C49941 * ae) * ce) / C49832;
    const double C863 = (-(C49821 * C49843) / C49733) / C49692 -
                        (ae * C49836) / C49832 -
                        (C49824 * C50000 * ce) / C49832 +
                        C49824 * (C49824 * C49862 - (C50000 * ce) / C49832);
    const double C6210 =
        3 * ((-(C50088 * ce) / C49733) / C49692 - C49843 / C49832 +
             C49824 * C50097) -
        ((2 * C50088 + C49824 * C50094) * ce) / C49832 +
        C49824 *
            (2 * C50097 - (C50094 * ce) / C49832 +
             C49824 * ((-(C49824 * C49953 * ce) / C49733) / C49692 - C49865 +
                       C49824 * ((-(C49824 * C49875) / C49733) / C49692 -
                                 (C49953 * ce) / C49832)));
    const double C49891 = C49821 * C49889;
    const double C49894 = 2 * C49889;
    const double C50065 = C49981 * C49889;
    const double C50081 = C49824 * C49889;
    const double C50187 = C49889 - C50184;
    const double C611 =
        2 * C49981 * C49862 + C49981 * (C49862 + C49889 * std::pow(C49981, 2));
    const double C741 =
        C49824 * (C49862 + C49889 * C49990) -
        ((C49821 * C49944 + C49941 * ae + C49957 * C49990) * ce) / C49832;
    const double C979 =
        C49981 * C49862 - (C49824 * C50038 * ce) / C49832 +
        C49824 * (C49824 * C49981 * C49889 - (C50038 * ce) / C49832);
    const double C1069 =
        2 * (C49824 * C49862 - (C50000 * ce) / C49832) -
        ((C50000 + C49957 * std::pow(C49824, 2)) * ce) / C49832 +
        C49824 * (C49862 - (C49824 * C49957 * ce) / C49832 +
                  C49824 * (C49824 * C49889 - (C49957 * ce) / C49832));
    const double C8441 =
        4 * ((-2 * C50068) / C49832 + C49981 * C50106) +
        C49981 * (3 * C50106 +
                  C49981 * ((-2 * C49981 * C49875) / C49832 +
                            C49981 * ((-(C49911 * C49990) / C49733) / C49692 -
                                      C49897)));
    const double C8612 =
        C49824 * (3 * C50106 +
                  C49981 * ((-2 * C49981 * C49875) / C49832 +
                            C49981 * ((-(C49911 * C49990) / C49733) / C49692 -
                                      C49897))) -
        ((3 * C50060 +
          C49981 * (2 * C50069 + C49981 * (C49953 + C49963 * C49990))) *
         ce) /
            C49832;
    const double C8957 =
        (-2 * C50068) / C49832 + C49981 * C50106 -
        (C49824 * C50120 * ce) / C49832 +
        C49824 * (C49824 * ((-2 * C49981 * C49875) / C49832 +
                            C49981 * ((-(C49911 * C49990) / C49733) / C49692 -
                                      C49897)) -
                  (C50120 * ce) / C49832);
    const double C9087 =
        2 * (C49824 * C50106 - (C50060 * ce) / C49832) -
        ((C50060 + C50118 * C50074) * ce) / C49832 +
        C49824 * (C50106 - (C49824 * C50118 * ce) / C49832 +
                  C49824 * (C49824 * ((-(C49911 * C49990) / C49733) / C49692 -
                                      C49897) -
                            (C50118 * ce) / C49832));
    const double C50156 = C50155 - C50152;
    const double C50210 = C49824 * C50208;
    const double C50237 = 2 * C50208;
    const double C49927 = C49821 * C49925;
    const double C50099 = C49925 * C49990;
    const double C50167 = C49981 * C49925;
    const double C50177 = C49824 * C49925;
    const double C2815 =
        3 * (C49862 + C49889 * C49990) +
        C49981 * (2 * C49981 * C49889 + C49981 * (C49889 + C49925 * C49990));
    const double C2991 =
        C49824 * (2 * C49981 * C49889 + C49981 * (C49889 + C49925 * C49990)) -
        ((2 * C50038 + C49981 * (C49957 + C49969 * C49990)) * ce) / C49832;
    const double C3331 =
        C49862 + C49889 * C49990 - (C49824 * C50057 * ce) / C49832 +
        C49824 * (C49824 * (C49889 + C49925 * C49990) - (C50057 * ce) / C49832);
    const double C50132 = C49981 * C50131;
    const double C50159 = C49824 * C50131;
    const double C50233 = C50230 - C50220;
    const double C50261 = C49824 * C50258;
    const double C49717 = C49716 / C49692;
    const double C2356 = C2176 * C260;
    const double C2350 = C2176 * C254;
    const double C2344 = C2176 * C261;
    const double C2338 = C2176 * C255;
    const double C2332 = C2176 * C262;
    const double C2326 = C2176 * C256;
    const double C2690 = C2176 * C516;
    const double C2684 = C2176 * C507;
    const double C2682 = C2176 * C506;
    const double C2676 = C2176 * C515;
    const double C2824 = C2176 * C604;
    const double C2818 = C2176 * C600;
    const double C3012 = C2176 * C734;
    const double C3006 = C2176 * C718;
    const double C3004 = C2176 * C723;
    const double C2998 = C2176 * C711;
    const double C3340 = C2176 * C976;
    const double C3334 = C2176 * C968;
    const double C3954 = C2176 * C724;
    const double C3948 = C2176 * C712;
    const double C5364 = C2176 * C390;
    const double C5358 = C2176 * C380;
    const double C5348 = C2176 * C391;
    const double C5342 = C2176 * C381;
    const double C5340 = C2176 * C392;
    const double C5334 = C2176 * C382;
    const double C5942 = C2176 * C857;
    const double C5936 = C2176 * C848;
    const double C5926 = C2176 * C856;
    const double C5920 = C2176 * C847;
    const double C6222 = C2176 * C1066;
    const double C6216 = C2176 * C1058;
    const double C2358 = C2177 * C259;
    const double C2352 = C2177 * C253;
    const double C2346 = C2177 * C260;
    const double C2340 = C2177 * C254;
    const double C2334 = C2177 * C261;
    const double C2328 = C2177 * C255;
    const double C2692 = C2177 * C517;
    const double C2686 = C2177 * C508;
    const double C2680 = C2177 * C507;
    const double C2674 = C2177 * C516;
    const double C2826 = C2177 * C603;
    const double C2820 = C2177 * C599;
    const double C3014 = C2177 * C733;
    const double C3008 = C2177 * C717;
    const double C3002 = C2177 * C724;
    const double C2996 = C2177 * C712;
    const double C3342 = C2177 * C975;
    const double C3336 = C2177 * C967;
    const double C3956 = C2177 * C725;
    const double C3950 = C2177 * C713;
    const double C5362 = C2177 * C389;
    const double C5356 = C2177 * C379;
    const double C5350 = C2177 * C390;
    const double C5344 = C2177 * C380;
    const double C5338 = C2177 * C391;
    const double C5332 = C2177 * C381;
    const double C5940 = C2177 * C858;
    const double C5934 = C2177 * C849;
    const double C5928 = C2177 * C857;
    const double C5922 = C2177 * C848;
    const double C6220 = C2177 * C1065;
    const double C6214 = C2177 * C1057;
    const double C25829 = C25636 * C517;
    const double C25825 = C25636 * C508;
    const double C25821 = C25636 * C260;
    const double C25817 = C25636 * C254;
    const double C25813 = C25636 * C516;
    const double C25809 = C25636 * C507;
    const double C25805 = C25636 * C261;
    const double C25801 = C25636 * C255;
    const double C25797 = C25636 * C515;
    const double C25793 = C25636 * C506;
    const double C25789 = C25636 * C262;
    const double C25785 = C25636 * C256;
    const double C26163 = C25636 * C603;
    const double C26159 = C25636 * C599;
    const double C26157 = C25636 * C600;
    const double C26153 = C25636 * C604;
    const double C26287 = C25636 * C2810;
    const double C26283 = C25636 * C2807;
    const double C26466 = C25636 * C2989;
    const double C26462 = C25636 * C2983;
    const double C26460 = C25636 * C734;
    const double C26456 = C25636 * C718;
    const double C26450 = C25636 * C723;
    const double C26446 = C25636 * C711;
    const double C26793 = C25636 * C3329;
    const double C26789 = C25636 * C3323;
    const double C26785 = C25636 * C976;
    const double C26781 = C25636 * C968;
    const double C27401 = C25636 * C733;
    const double C27397 = C25636 * C717;
    const double C27393 = C25636 * C724;
    const double C27389 = C25636 * C712;
    const double C28720 = C25636 * C725;
    const double C28716 = C25636 * C713;
    const double C28944 = C25636 * C390;
    const double C28940 = C25636 * C380;
    const double C28934 = C25636 * C391;
    const double C28930 = C25636 * C381;
    const double C28928 = C25636 * C392;
    const double C28924 = C25636 * C382;
    const double C29698 = C25636 * C975;
    const double C29694 = C25636 * C967;
    const double C29690 = C25636 * C857;
    const double C29686 = C25636 * C848;
    const double C29680 = C25636 * C856;
    const double C29676 = C25636 * C847;
    const double C29914 = C25636 * C3457;
    const double C29910 = C25636 * C3451;
    const double C30058 = C25636 * C1066;
    const double C30054 = C25636 * C1058;
    const double C38635 = C25636 * C858;
    const double C38631 = C25636 * C849;
    const double C39187 = C25636 * C1065;
    const double C39183 = C25636 * C1057;
    const double C39445 = C25636 * C6207;
    const double C39441 = C25636 * C6201;
    const double C11017 = C10806 + C10807;
    const double C11107 = C10807 + C10806;
    const double C11247 = C11230 + C11231;
    const double C11016 = C10804 + C10805;
    const double C11244 = C11224 + C11225;
    const double C13208 = C12876 + C12877;
    const double C13473 = C13465 + C13466;
    const double C49775 = C49773 / C49733;
    const double C12176 = C10794 * C1511;
    const double C12172 = C10792 * C1511;
    const double C12168 = C10790 * C1511;
    const double C12162 = C10788 * C1511;
    const double C12158 = C10786 * C1511;
    const double C12154 = C10784 * C1511;
    const double C12508 = C11029 * C1511;
    const double C14776 = C11916 * C1511;
    const double C14772 = C11914 * C1511;
    const double C14766 = C11245 * C1511;
    const double C14762 = C11242 * C1511;
    const double C15267 = C11248 * C1511;
    const double C20278 = C11488 * C1511;
    const double C20774 = C11490 * C1511;
    const double C21736 = C10648 * C16724;
    const double C16723 =
        4 * ((-2 * C50433) / C49733 - (C49824 * C50538) / C49733 -
             (C50434 * ce) / C49733) +
        C49824 *
            ((-3 * C50538) / C49733 +
             C49824 *
                 ((-2 * C50530) / C49733 -
                  (C49824 * (C49824 * (C49824 * C49821 * C49913 + C50017 * ce) +
                             C49896 + C49824 * C50017 * ce)) /
                      C49733 -
                  (C50532 * ce) / C49733) -
             (C50537 * ce) / C49733) -
        ((3 * C50434 + C49824 * C50537) * ce) / C49733;
    const double C50010 = C50007 + C50008;
    const double C970 = (C49981 * C50005 + C50036 * C50074) / C49692;
    const double C50075 = C50073 / C49832;
    const double C8456 = C8447 + C8448;
    const double C11030 = C11022 + C11023;
    const double C26294 = C26285 + C26286;
    const double C8650 = C8634 + C8635;
    const double C11918 = C11908 + C11909;
    const double C26480 = C26464 + C26465;
    const double C8980 = C8969 + C8970;
    const double C13644 = C13634 + C13635;
    const double C26802 = C26791 + C26792;
    const double C16738 = C16730 + C16731;
    const double C21564 = C21560 + C21561;
    const double C39447 = C39439 + C39440;
    const double C11112 = C11108 + C11109;
    const double C11250 = C11236 + C11237;
    const double C11492 = C11484 + C11485;
    const double C19338 = C19336 * C846;
    const double C20926 = C19336 * C1746;
    const double C19439 =
        4 * ((-2 * C50503) / C49733 - (C49824 * C50569) / C49733 -
             (C50504 * ce) / C49733) +
        C49824 *
            ((-3 * C50569) / C49733 +
             C49824 *
                 ((-2 * C50563) / C49733 -
                  (C49824 * (C49824 * (C49824 * C49981 * C49913 + C50558 * ce) +
                             C50555 + C49824 * C50558 * ce)) /
                      C49733 -
                  (C50564 * ce) / C49733) -
             (C50568 * ce) / C49733) -
        ((3 * C50504 + C49824 * C50568) * ce) / C49733;
    const double C21738 = C21734 + C21735;
    const double C50593 = C50591 / C49733;
    const double C2353 = C2172 * C263;
    const double C2343 = C2173 * C263;
    const double C7974 = C50693 * C263;
    const double C22997 = C51009 * C263;
    const double C22987 = C22817 * C263;
    const double C25820 = C50693 * C263;
    const double C5357 = C2172 * C385;
    const double C5347 = C2173 * C385;
    const double C15855 = C50693 * C385;
    const double C28939 = C50693 * C385;
    const double C32425 = C51009 * C385;
    const double C32415 = C22817 * C385;
    const double C2687 = C2172 * C513;
    const double C2679 = C2173 * C513;
    const double C7980 = C50967 * C513;
    const double C7966 = C50693 * C513;
    const double C10777 = C50688 * C513;
    const double C23331 = C51009 * C513;
    const double C23323 = C22817 * C513;
    const double C25826 = C25631 * C513;
    const double C25812 = C50693 * C513;
    const double C2823 = C2173 * C606;
    const double C8316 = C50693 * C606;
    const double C10781 = C50688 * C606;
    const double C23455 = C22817 * C606;
    const double C26162 = C50693 * C606;
    const double C2995 = C2173 * C721;
    const double C3951 = C2172 * C721;
    const double C9578 = C50693 * C721;
    const double C12883 = C50688 * C721;
    const double C23615 = C22817 * C721;
    const double C24547 = C51009 * C721;
    const double C27392 = C50693 * C721;
    const double C28717 = C25631 * C721;
    const double C41234 = C50967 * C721;
    const double C3011 = C2173 * C728;
    const double C9586 = C50693 * C728;
    const double C12887 = C50688 * C728;
    const double C23631 = C22817 * C728;
    const double C27400 = C50693 * C728;
    const double C5935 = C2172 * C854;
    const double C5925 = C2173 * C854;
    const double C15865 = C50967 * C854;
    const double C15849 = C50693 * C854;
    const double C18615 = C50688 * C854;
    const double C29685 = C50693 * C854;
    const double C33003 = C51009 * C854;
    const double C32993 = C22817 * C854;
    const double C38632 = C25631 * C854;
    const double C6213 = C2173 * C1060;
    const double C16443 = C50693 * C1060;
    const double C21195 = C50688 * C1060;
    const double C33269 = C22817 * C1060;
    const double C39182 = C50693 * C1060;
    const double C14414 = C13642 * C378;
    const double C14770 = C13642 * C1512;
    const double C18458 = C13642 * C121;
    const double C19936 = C13642 * C377;
    const double C20284 = C13642 * C1511;
    const double C19934 = C19180 * C378;
    const double C20282 = C19180 * C1512;
    const double C11106 = C11032 + C11033;
    const double C13312 = C13209 + C13210;
    const double C49930 = C49906 + C49928;
    const double C50028 = C50014 + C50027;
    const double C50054 = C49974 + C50053;
    const double C3452 =
        (2 * C49824 * C50036 + C49824 * (C50036 + C50063 * C50074)) / C49692;
    const double C50078 = C49974 + C50076;
    const double C8438 = (4 * (2 * C50038 + C49981 * C50057) +
                          C49981 * (3 * C50057 + C49981 * C50114)) /
                         C49692;
    const double C8607 = (C49824 * (3 * C50057 + C49981 * C50114)) / C49692;
    const double C8952 =
        (2 * C50038 + C49981 * C50057 + C50114 * C50074) / C49692;
    const double C16721 = (4 * (2 * C50080 + C49824 * C50085) +
                           C49824 * (3 * C50085 + C49824 * C50189)) /
                          C49692;
    const double C11103 = (5 * (3 * C50060 + C49981 * C50120) +
                           C49981 * (4 * C50120 + C49981 * C50144)) /
                          C49692;
    const double C11214 = (C49824 * (4 * C50120 + C49981 * C50144)) / C49692;
    const double C11460 =
        (3 * C50060 + C49981 * C50120 + C50144 * C50074) / C49692;
    const double C21730 = (5 * (3 * C50094 + C49824 * C50206) +
                           C49824 * (4 * C50206 + C49824 * C50262)) /
                          C49692;
    const double C2357 = C2171 * C272;
    const double C2347 = C2172 * C272;
    const double C2337 = C2173 * C272;
    const double C7976 = C50967 * C272;
    const double C7962 = C50693 * C272;
    const double C10775 = C50688 * C272;
    const double C23001 = C51025 * C272;
    const double C22991 = C51009 * C272;
    const double C22981 = C22817 * C272;
    const double C25822 = C25631 * C272;
    const double C25808 = C50693 * C272;
    const double C5365 = C2171 * C398;
    const double C5351 = C2172 * C398;
    const double C5337 = C2173 * C398;
    const double C13055 = C50688 * C398;
    const double C15861 = C50967 * C398;
    const double C15845 = C50693 * C398;
    const double C28945 = C25631 * C398;
    const double C28937 = C50693 * C398;
    const double C32433 = C51025 * C398;
    const double C32419 = C51009 * C398;
    const double C32405 = C22817 * C398;
    const double C2691 = C2171 * C522;
    const double C2675 = C2172 * C522;
    const double C7968 = C50967 * C522;
    const double C7954 = C50693 * C522;
    const double C10767 = C50688 * C522;
    const double C23335 = C51025 * C522;
    const double C23319 = C51009 * C522;
    const double C25814 = C25631 * C522;
    const double C25800 = C50693 * C522;
    const double C3003 = C2172 * C736;
    const double C3955 = C2171 * C736;
    const double C8619 = C50693 * C736;
    const double C9580 = C50967 * C736;
    const double C11901 = C50688 * C736;
    const double C23623 = C51009 * C736;
    const double C24551 = C51025 * C736;
    const double C26449 = C50693 * C736;
    const double C27394 = C25631 * C736;
    const double C5943 = C2171 * C863;
    const double C5929 = C2172 * C863;
    const double C13629 = C50688 * C863;
    const double C15851 = C50967 * C863;
    const double C15835 = C50693 * C863;
    const double C29691 = C25631 * C863;
    const double C29683 = C50693 * C863;
    const double C33011 = C51025 * C863;
    const double C32997 = C51009 * C863;
    const double C16737 = C50967 * C6210;
    const double C19445 = C50688 * C6210;
    const double C39446 = C25631 * C6210;
    const double C49892 = C49884 + C49891;
    const double C49909 = C49894 - C49902;
    const double C3459 =
        2 * (C49824 * C50065 - (C50038 * ce) / C49832) -
        ((C50038 + C50066 * std::pow(C49824, 2)) * ce) / C49832 +
        C49824 * (C50065 - (C49824 * C50066 * ce) / C49832 +
                  C49824 * (C49824 * C49981 * C49925 - (C50066 * ce) / C49832));
    const double C50086 = C50081 - C50084;
    const double C2827 = C2172 * C611;
    const double C8318 = C50967 * C611;
    const double C8306 = C50693 * C611;
    const double C10771 = C50688 * C611;
    const double C23459 = C51009 * C611;
    const double C26164 = C25631 * C611;
    const double C26152 = C50693 * C611;
    const double C3015 = C2172 * C741;
    const double C8629 = C50693 * C741;
    const double C9588 = C50967 * C741;
    const double C11907 = C50688 * C741;
    const double C23635 = C51009 * C741;
    const double C26459 = C50693 * C741;
    const double C27402 = C25631 * C741;
    const double C3343 = C2172 * C979;
    const double C8966 = C50693 * C979;
    const double C13633 = C50688 * C979;
    const double C17235 = C50967 * C979;
    const double C23951 = C51009 * C979;
    const double C26788 = C50693 * C979;
    const double C29699 = C25631 * C979;
    const double C6221 = C2172 * C1069;
    const double C16449 = C50967 * C1069;
    const double C16439 = C50693 * C1069;
    const double C19173 = C50688 * C1069;
    const double C30057 = C50693 * C1069;
    const double C33277 = C51009 * C1069;
    const double C39188 = C25631 * C1069;
    const double C11111 = C50688 * C8441;
    const double C11241 = C50688 * C8612;
    const double C11487 = C50688 * C8957;
    const double C13807 = C50688 * C9087;
    const double C13919 =
        3 * ((-(C50147 * ce) / C49733) / C49692 - C50068 / C49832 +
             C49824 * C50156) -
        ((2 * C50147 + C49824 * C50153) * ce) / C49832 +
        C49824 * (2 * C50156 - (C50153 * ce) / C49832 +
                  C49824 * ((-(C49824 * C50137 * ce) / C49733) / C49692 -
                            C50124 / C49832 +
                            C49824 * ((-(C49824 * C49981 * C49911) / C49733) /
                                          C49692 -
                                      (C50137 * ce) / C49832)));
    const double C50211 = C50209 + C50210;
    const double C50250 = C50237 - C50244;
    const double C49929 = C49920 + C49927;
    const double C50100 = C49889 + C50099;
    const double C50170 = C49824 * C50167;
    const double C50185 = C50177 - C50181;
    const double C8452 = C50693 * C2815;
    const double C11025 = C50688 * C2815;
    const double C26290 = C50693 * C2815;
    const double C8639 = C50693 * C2991;
    const double C11913 = C50688 * C2991;
    const double C26469 = C50693 * C2991;
    const double C8974 = C50693 * C3331;
    const double C13637 = C50688 * C3331;
    const double C26796 = C50693 * C3331;
    const double C50133 = C50128 + C50132;
    const double C50164 = C50159 - C50162;
    const double C50234 = C49824 * C50233;
    const double C50263 = C50260 + C50261;
    const double C49718 = C49717 - C49707;
    const double C2374 = C2350 + C2351;
    const double C2371 = C2344 + C2345;
    const double C2368 = C2338 + C2339;
    const double C2365 = C2332 + C2333;
    const double C2362 = C2326 + C2327;
    const double C2702 = C2684 + C2685;
    const double C2701 = C2682 + C2683;
    const double C2698 = C2676 + C2677;
    const double C2833 = C2824 + C2825;
    const double C2830 = C2818 + C2819;
    const double C3027 = C3012 + C3013;
    const double C3024 = C3006 + C3007;
    const double C3023 = C3004 + C3005;
    const double C3020 = C2998 + C2999;
    const double C3349 = C3340 + C3341;
    const double C3346 = C3334 + C3335;
    const double C3960 = C3948 + C3949;
    const double C5380 = C5358 + C5359;
    const double C5375 = C5348 + C5349;
    const double C5372 = C5342 + C5343;
    const double C5371 = C5340 + C5341;
    const double C5368 = C5334 + C5335;
    const double C5952 = C5936 + C5937;
    const double C5947 = C5926 + C5927;
    const double C5944 = C5920 + C5921;
    const double C6229 = C6222 + C6223;
    const double C6226 = C6216 + C6217;
    const double C2369 = C2340 + C2341;
    const double C2366 = C2334 + C2335;
    const double C2363 = C2328 + C2329;
    const double C2700 = C2680 + C2681;
    const double C2831 = C2820 + C2821;
    const double C3025 = C3008 + C3009;
    const double C3019 = C2996 + C2997;
    const double C3347 = C3336 + C3337;
    const double C5373 = C5344 + C5345;
    const double C5370 = C5338 + C5339;
    const double C5367 = C5332 + C5333;
    const double C5945 = C5922 + C5923;
    const double C6225 = C6214 + C6215;
    const double C25849 = C25817 + C25818;
    const double C25845 = C25809 + C25810;
    const double C25843 = C25805 + C25806;
    const double C25841 = C25801 + C25802;
    const double C25839 = C25797 + C25798;
    const double C25837 = C25793 + C25794;
    const double C25835 = C25789 + C25790;
    const double C25833 = C25785 + C25786;
    const double C26175 = C26159 + C26160;
    const double C26174 = C26157 + C26158;
    const double C26172 = C26153 + C26154;
    const double C26295 = C26287 + C26288;
    const double C26293 = C26283 + C26284;
    const double C26481 = C26466 + C26467;
    const double C26479 = C26462 + C26463;
    const double C26478 = C26460 + C26461;
    const double C26476 = C26456 + C26457;
    const double C26473 = C26450 + C26451;
    const double C26471 = C26446 + C26447;
    const double C26803 = C26793 + C26794;
    const double C26801 = C26789 + C26790;
    const double C26799 = C26785 + C26786;
    const double C26797 = C26781 + C26782;
    const double C27409 = C27397 + C27398;
    const double C27405 = C27389 + C27390;
    const double C28955 = C28940 + C28941;
    const double C28952 = C28934 + C28935;
    const double C28950 = C28930 + C28931;
    const double C28949 = C28928 + C28929;
    const double C28947 = C28924 + C28925;
    const double C29709 = C29694 + C29695;
    const double C29705 = C29686 + C29687;
    const double C29702 = C29680 + C29681;
    const double C29700 = C29676 + C29677;
    const double C29920 = C29914 + C29915;
    const double C29918 = C29910 + C29911;
    const double C30063 = C30058 + C30059;
    const double C30061 = C30054 + C30055;
    const double C39190 = C39183 + C39184;
    const double C39448 = C39441 + C39442;
    const double C11261 = C11247 - C11256;
    const double C11260 = C11244 - C11254;
    const double C13474 = C13473 - C13467;
    const double C49777 = C49775 - C49770;
    const double C12505 = C12162 + C12163;
    const double C12504 = C12158 + C12159;
    const double C15264 = C14766 + C14767;
    const double C50011 = C50010 + C50009;
    const double C3339 = C2173 * C970;
    const double C17229 = C50693 * C970;
    const double C18461 = C50688 * C970;
    const double C23947 = C22817 * C970;
    const double C29693 = C50693 * C970;
    const double C11034 = C11030 * C121;
    const double C11924 = C11918 * C378;
    const double C12174 = C11918 * C1512;
    const double C13211 = C11918 * C121;
    const double C14418 = C13644 * C378;
    const double C14774 = C13644 * C1512;
    const double C18768 = C13644 * C121;
    const double C11114 = C11112 * C121;
    const double C11258 = C11250 * C378;
    const double C12506 = C11250 * C1512;
    const double C13313 = C11250 * C121;
    const double C11498 = C11492 * C846;
    const double C12628 = C11492 * C1746;
    const double C13469 = C11492 * C378;
    const double C15265 = C11492 * C1512;
    const double C18868 = C11492 * C121;
    const double C50594 = C50579 - C50593;
    const double C2375 = C2352 + C2353;
    const double C2370 = C2342 + C2343;
    const double C8004 = C7973 + C7974;
    const double C23014 = C22986 + C22987;
    const double C25850 = C25819 + C25820;
    const double C5379 = C5356 + C5357;
    const double C5374 = C5346 + C5347;
    const double C15886 = C15854 + C15855;
    const double C28954 = C28938 + C28939;
    const double C32442 = C32414 + C32415;
    const double C2703 = C2686 + C2687;
    const double C2699 = C2678 + C2679;
    const double C8000 = C7965 + C7966;
    const double C10798 = C10776 + C10777;
    const double C23343 = C23322 + C23323;
    const double C25853 = C25825 + C25826;
    const double C25846 = C25811 + C25812;
    const double C2832 = C2822 + C2823;
    const double C8330 = C8315 + C8316;
    const double C10800 = C10780 + C10781;
    const double C23464 = C23454 + C23455;
    const double C26176 = C26161 + C26162;
    const double C3018 = C2994 + C2995;
    const double C3961 = C3950 + C3951;
    const double C9592 = C9577 + C9578;
    const double C12890 = C12882 + C12883;
    const double C23638 = C23614 + C23615;
    const double C27406 = C27391 + C27392;
    const double C28724 = C28716 + C28717;
    const double C3026 = C3010 + C3011;
    const double C9596 = C9585 + C9586;
    const double C12892 = C12886 + C12887;
    const double C23646 = C23630 + C23631;
    const double C27410 = C27399 + C27400;
    const double C5951 = C5934 + C5935;
    const double C5946 = C5924 + C5925;
    const double C15883 = C15848 + C15849;
    const double C18618 = C18614 + C18615;
    const double C29704 = C29684 + C29685;
    const double C33014 = C32992 + C32993;
    const double C38638 = C38631 + C38632;
    const double C6224 = C6212 + C6213;
    const double C16454 = C16442 + C16443;
    const double C21198 = C21194 + C21195;
    const double C33280 = C33268 + C33269;
    const double C39189 = C39181 + C39182;
    const double C141 = 5 * ((-3 * C49859) / C49733 + C49821 * C49890) +
                        C49821 * (4 * C49890 + C49821 * C49930);
    const double C269 = C49981 * (4 * C49890 + C49821 * C49930);
    const double C396 = C49824 * (4 * C49890 + C49821 * C49930) -
                        ((4 * C50285 + C49821 * C50291) * ce) / C49733;
    const double C519 =
        (-3 * C49859) / C49733 + C49821 * C49890 + C49930 * C49990;
    const double C861 = (-3 * C49859) / C49733 + C49821 * C49890 +
                        C49824 * (C49824 * C49930 - (C50291 * ce) / C49733) -
                        (C49824 * C50291 * ce) / C49733;
    const double C1409 =
        C49824 * C49981 * C49930 - (C49981 * C50291 * ce) / C49733;
    const double C50029 = C50028 + C50018;
    const double C2811 = (3 * (C50005 + C49974 * C49990) +
                          C49981 * (2 * C50036 + C49981 * C50054)) /
                         C49692;
    const double C2984 = (C49824 * (2 * C50036 + C49981 * C50054)) / C49692;
    const double C3324 = (C50005 + C49974 * C49990 + C50054 * C50074) / C49692;
    const double C6202 = (3 * (C50005 + C49974 * C50074) +
                          C49824 * (2 * C50071 + C49824 * C50078)) /
                         C49692;
    const double C2377 = C2356 + C2357;
    const double C2372 = C2346 + C2347;
    const double C2367 = C2336 + C2337;
    const double C7998 = C7961 + C7962;
    const double C10797 = C10774 + C10775;
    const double C23011 = C22980 + C22981;
    const double C25851 = C25821 + C25822;
    const double C25844 = C25807 + C25808;
    const double C5383 = C5364 + C5365;
    const double C5376 = C5350 + C5351;
    const double C5369 = C5336 + C5337;
    const double C13061 = C13054 + C13055;
    const double C15881 = C15844 + C15845;
    const double C28957 = C28944 + C28945;
    const double C28953 = C28936 + C28937;
    const double C32437 = C32404 + C32405;
    const double C2705 = C2690 + C2691;
    const double C2697 = C2674 + C2675;
    const double C7994 = C7953 + C7954;
    const double C10793 = C10766 + C10767;
    const double C25847 = C25813 + C25814;
    const double C25840 = C25799 + C25800;
    const double C3022 = C3002 + C3003;
    const double C3963 = C3954 + C3955;
    const double C8642 = C8618 + C8619;
    const double C11915 = C11900 + C11901;
    const double C26472 = C26448 + C26449;
    const double C27407 = C27393 + C27394;
    const double C5955 = C5942 + C5943;
    const double C5948 = C5928 + C5929;
    const double C13641 = C13628 + C13629;
    const double C15876 = C15834 + C15835;
    const double C29707 = C29690 + C29691;
    const double C29703 = C29682 + C29683;
    const double C19447 = C19444 + C19445;
    const double C39450 = C39445 + C39446;
    const double C148 =
        4 * (2 * C49862 - (ae * C49859) / C49832 + C49821 * C49892) +
        (((-3 * C49859) / C49733 + C49821 * C49890) * ae) / C49692 +
        C49821 *
            (3 * C49892 + (C49890 * ae) / C49692 +
             C49821 * (2 * C49889 - (ae * C49883) / C49832 +
                       C49821 * ((-(ae * C49821 * C49877) / C49733) / C49692 -
                                 C49875 / C49832 +
                                 C49821 * ((-(C49821 * std::pow(C49828, 7) *
                                              bs[7] * C49837) /
                                            C49733) /
                                               C49692 -
                                           (ae * C49877) / C49832))));
    const double C271 =
        (yP - yQ) * (2 * C49862 - (ae * C49859) / C49832 + C49821 * C49892);
    const double C397 =
        C49824 * (2 * C49862 - (ae * C49859) / C49832 + C49821 * C49892) -
        ((2 * (C49821 * C49944 + C49941 * ae) +
          C49821 * (C49944 +
                    C49821 * (C49821 * C49847 * C49848 * C49940 + C49942 * ae) +
                    C49821 * C49942 * ae) +
          (C49941 + C49942 * C49850) * ae) *
         ce) /
            C49832;
    const double C523 = (-(ae * C49846) / C49733) / C49692 - C49843 / C49832 +
                        C49821 * C49862 + C49892 * std::pow(yP - yQ, 2);
    const double C737 =
        C49824 * C49981 * C49892 -
        (C49981 * (C49944 + C49821 * C49957 + C49951 * ae) * ce) / C49832;
    const double C864 = (-(ae * C49846) / C49733) / C49692 - C49843 / C49832 +
                        C49821 * C49862 - (C49824 * C50005 * ce) / C49832 +
                        C49824 * (C49824 * C49892 - (C50005 * ce) / C49832);
    const double C16615 = C50693 * C3459;
    const double C19177 = C50688 * C3459;
    const double C29917 = C50693 * C3459;
    const double C6209 =
        3 * (C49862 - (C50080 * ce) / C49832 + C49824 * C50086) -
        ((2 * C50080 + C49824 * C50085) * ce) / C49832 +
        C49824 *
            (2 * C50086 - (C50085 * ce) / C49832 +
             C49824 * (C49889 - (C49824 * C49969 * ce) / C49832 +
                       C49824 * (C49824 * C49925 - (C49969 * ce) / C49832)));
    const double C2834 = C2826 + C2827;
    const double C8325 = C8305 + C8306;
    const double C10795 = C10770 + C10771;
    const double C26177 = C26163 + C26164;
    const double C26171 = C26151 + C26152;
    const double C3028 = C3014 + C3015;
    const double C8647 = C8628 + C8629;
    const double C11917 = C11906 + C11907;
    const double C26477 = C26458 + C26459;
    const double C27411 = C27401 + C27402;
    const double C3350 = C3342 + C3343;
    const double C8978 = C8965 + C8966;
    const double C13643 = C13632 + C13633;
    const double C26800 = C26787 + C26788;
    const double C29711 = C29698 + C29699;
    const double C6228 = C6220 + C6221;
    const double C16453 = C16438 + C16439;
    const double C19179 = C19172 + C19173;
    const double C30062 = C30056 + C30057;
    const double C39192 = C39187 + C39188;
    const double C11113 = C11110 + C11111;
    const double C11251 = C11240 + C11241;
    const double C11493 = C11486 + C11487;
    const double C13811 = C13806 + C13807;
    const double C19335 = C50688 * C13919;
    const double C16726 =
        4 * (2 * C50097 - (C50094 * ce) / C49832 + C49824 * C50211) -
        ((3 * C50094 + C49824 * C50206) * ce) / C49832 +
        C49824 *
            (3 * C50211 - (C50206 * ce) / C49832 +
             C49824 *
                 (2 * C50208 - (C50200 * ce) / C49832 +
                  C49824 *
                      ((-(C49824 * C49963 * ce) / C49733) / C49692 - C49897 +
                       C49824 * ((-(C49824 * C49911) / C49733) / C49692 -
                                 (C49963 * ce) / C49832))));
    const double C49931 = C49821 * C49929;
    const double C50062 = C49981 * C49929;
    const double C50072 = C49824 * C49929;
    const double C610 =
        2 * C49981 * C49892 + C49981 * (C49892 + C49929 * std::pow(C49981, 2));
    const double C740 =
        C49824 * (C49892 + C49929 * C49990) -
        ((C49944 + C49821 * C49957 + C49951 * ae + C49974 * C49990) * ce) /
            C49832;
    const double C978 =
        C49981 * C49892 - (C49824 * C50036 * ce) / C49832 +
        C49824 * (C49824 * C49981 * C49929 - (C50036 * ce) / C49832);
    const double C1068 =
        2 * (C49824 * C49892 - (C50005 * ce) / C49832) -
        ((C50005 + C49974 * std::pow(C49824, 2)) * ce) / C49832 +
        C49824 * (C49892 - (C49824 * C49974 * ce) / C49832 +
                  C49824 * (C49824 * C49929 - (C49974 * ce) / C49832));
    const double C2814 =
        3 * (C49892 + C49929 * C49990) +
        C49981 *
            (2 * C49981 * C49929 +
             C49981 *
                 (C49929 +
                  ((-(ae * C49821 * C49913) / C49733) / C49692 -
                   C49911 / C49832 +
                   C49821 * ((-(C49821 * std::pow(C49826, 8) * bs[8] * C49837) /
                              C49733) /
                                 C49692 -
                             (ae * C49913) / C49832)) *
                      C49990));
    const double C2990 =
        C49824 *
            (2 * C49981 * C49929 +
             C49981 *
                 (C49929 +
                  ((-(ae * C49821 * C49913) / C49733) / C49692 -
                   C49911 / C49832 +
                   C49821 * ((-(C49821 * std::pow(C49826, 8) * bs[8] * C49837) /
                              C49733) /
                                 C49692 -
                             (ae * C49913) / C49832)) *
                      C49990)) -
        ((2 * C50036 + C49981 * (C49974 + C50026 * C49990)) * ce) / C49832;
    const double C3330 =
        C49892 + C49929 * C49990 - (C49824 * C50054 * ce) / C49832 +
        C49824 *
            (C49824 *
                 (C49929 +
                  ((-(ae * C49821 * C49913) / C49733) / C49692 -
                   C49911 / C49832 +
                   C49821 * ((-(C49821 * std::pow(C49826, 8) * bs[8] * C49837) /
                              C49733) /
                                 C49692 -
                             (ae * C49913) / C49832)) *
                      C49990) -
             (C50054 * ce) / C49832);
    const double C8440 =
        4 * (2 * C50065 + C49981 * C50100) +
        C49981 *
            (3 * C50100 +
             C49981 * (2 * C49981 * C49925 +
                       C49981 * (C49925 + ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49733) /
                                               C49692 -
                                           (ae * C49913) / C49832) *
                                              C49990)));
    const double C8611 =
        C49824 *
            (3 * C50100 +
             C49981 * (2 * C49981 * C49925 +
                       C49981 * (C49925 + ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49733) /
                                               C49692 -
                                           (ae * C49913) / C49832) *
                                              C49990))) -
        ((3 * C50057 +
          C49981 * (2 * C50066 + C49981 * (C49969 + C50023 * C49990))) *
         ce) /
            C49832;
    const double C8956 =
        2 * C50065 + C49981 * C50100 - (C49824 * C50114 * ce) / C49832 +
        C49824 *
            (C49824 * (2 * C49981 * C49925 +
                       C49981 * (C49925 + ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49733) /
                                               C49692 -
                                           (ae * C49913) / C49832) *
                                              C49990)) -
             (C50114 * ce) / C49832);
    const double C9086 =
        2 * (C49824 * C50100 - (C50057 * ce) / C49832) -
        ((C50057 + C50112 * C50074) * ce) / C49832 +
        C49824 *
            (C50100 - (C49824 * C50112 * ce) / C49832 +
             C49824 * (C49824 * (C49925 + ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49733) /
                                               C49692 -
                                           (ae * C49913) / C49832) *
                                              C49990) -
                       (C50112 * ce) / C49832));
    const double C50173 = C50170 - C50171;
    const double C50188 = C49824 * C50185;
    const double C8458 = C8451 + C8452;
    const double C11031 = C11024 + C11025;
    const double C26296 = C26289 + C26290;
    const double C8652 = C8638 + C8639;
    const double C11919 = C11912 + C11913;
    const double C26482 = C26468 + C26469;
    const double C8982 = C8973 + C8974;
    const double C13645 = C13636 + C13637;
    const double C26804 = C26795 + C26796;
    const double C11104 =
        5 * (3 * C50106 + C49981 * C50133) +
        C49981 * (4 * C50133 +
                  C49981 * (3 * C50131 +
                            C49981 * ((-2 * C49981 * C49911) / C49832 +
                                      C49981 * ((-(std::pow(C49826, 8) * bs[8] *
                                                   C49837 * C49990) /
                                                 C49733) /
                                                    C49692 -
                                                C49911 / C49832))));
    const double C11216 =
        C49824 * (4 * C50133 +
                  C49981 * (3 * C50131 +
                            C49981 * ((-2 * C49981 * C49911) / C49832 +
                                      C49981 * ((-(std::pow(C49826, 8) * bs[8] *
                                                   C49837 * C49990) /
                                                 C49733) /
                                                    C49692 -
                                                C49911 / C49832)))) -
        ((4 * C50120 +
          C49981 *
              (3 * C50118 + C49981 * (2 * C49981 * C49963 +
                                      C49981 * (C49963 + C50020 * C49990)))) *
         ce) /
            C49832;
    const double C11462 =
        3 * C50106 + C49981 * C50133 - (C49824 * C50144 * ce) / C49832 +
        C49824 * (C49824 * (3 * C50131 +
                            C49981 * ((-2 * C49981 * C49911) / C49832 +
                                      C49981 * ((-(std::pow(C49826, 8) * bs[8] *
                                                   C49837 * C49990) /
                                                 C49733) /
                                                    C49692 -
                                                C49911 / C49832))) -
                  (C50144 * ce) / C49832);
    const double C11568 =
        2 * (C49824 * C50133 - (C50120 * ce) / C49832) -
        ((C50120 + C50142 * C50074) * ce) / C49832 +
        C49824 * (C50133 - (C49824 * C50142 * ce) / C49832 +
                  C49824 * (C49824 * ((-2 * C49981 * C49911) / C49832 +
                                      C49981 * ((-(std::pow(C49826, 8) * bs[8] *
                                                   C49837 * C49990) /
                                                 C49733) /
                                                    C49692 -
                                                C49911 / C49832)) -
                            (C50142 * ce) / C49832));
    const double C13920 =
        3 * (C50106 - (C50158 * ce) / C49832 + C49824 * C50164) -
        ((2 * C50158 + C49824 * C50163) * ce) / C49832 +
        C49824 * (2 * C50164 - (C50163 * ce) / C49832 +
                  C49824 * (C50131 - (C49824 * C50140 * ce) / C49832 +
                            C49824 * (C49824 * ((-(std::pow(C49826, 8) * bs[8] *
                                                   C49837 * C49990) /
                                                 C49733) /
                                                    C49692 -
                                                C49911 / C49832) -
                                      (C50140 * ce) / C49832)));
    const double C50235 = C50232 + C50234;
    const double C50264 = C49824 * C50263;
    const double C7983 = C49718 * C517;
    const double C7979 = C49718 * C508;
    const double C7975 = C49718 * C260;
    const double C7971 = C49718 * C254;
    const double C7967 = C49718 * C516;
    const double C7963 = C49718 * C507;
    const double C7959 = C49718 * C261;
    const double C7955 = C49718 * C255;
    const double C7951 = C49718 * C515;
    const double C7947 = C49718 * C506;
    const double C7943 = C49718 * C262;
    const double C7939 = C49718 * C256;
    const double C8317 = C49718 * C603;
    const double C8313 = C49718 * C599;
    const double C8311 = C49718 * C600;
    const double C8307 = C49718 * C604;
    const double C8449 = C49718 * C2810;
    const double C8445 = C49718 * C2807;
    const double C8636 = C49718 * C2989;
    const double C8632 = C49718 * C2983;
    const double C8630 = C49718 * C734;
    const double C8626 = C49718 * C718;
    const double C8620 = C49718 * C723;
    const double C8616 = C49718 * C711;
    const double C8971 = C49718 * C3329;
    const double C8967 = C49718 * C3323;
    const double C8963 = C49718 * C976;
    const double C8959 = C49718 * C968;
    const double C9587 = C49718 * C733;
    const double C9583 = C49718 * C717;
    const double C9579 = C49718 * C724;
    const double C9575 = C49718 * C712;
    const double C15868 = C49718 * C858;
    const double C15864 = C49718 * C849;
    const double C15860 = C49718 * C390;
    const double C15856 = C49718 * C380;
    const double C15850 = C49718 * C857;
    const double C15846 = C49718 * C848;
    const double C15842 = C49718 * C391;
    const double C15838 = C49718 * C381;
    const double C15836 = C49718 * C856;
    const double C15832 = C49718 * C847;
    const double C15828 = C49718 * C392;
    const double C15824 = C49718 * C382;
    const double C16448 = C49718 * C1065;
    const double C16444 = C49718 * C1057;
    const double C16436 = C49718 * C1066;
    const double C16432 = C49718 * C1058;
    const double C16616 = C49718 * C3457;
    const double C16612 = C49718 * C3451;
    const double C16736 = C49718 * C6207;
    const double C16732 = C49718 * C6201;
    const double C17234 = C49718 * C975;
    const double C17230 = C49718 * C967;
    const double C41237 = C49718 * C725;
    const double C41233 = C49718 * C713;
    const double C117 =
        ((((0 - (C49690 * C49691) / C49692) * ae) / C49692 - (0 * be) / C49701 +
          C49693 / C49692) /
             C49697 -
         ((C49690 * C49714 + 0) * be) / C49692) /
            C49697 -
        ((C49690 * (C49714 / C49697 -
                    ((C49690 * C49718 + C50967) * be) / C49692 + C49711) +
          C51025) *
         be) /
            C49692 +
        C49718 / C49697 - ((C49690 * C49711 + C50693) * be) / C49692;
    const double C118 =
        (C49714 / C49697 - ((C49690 * C49718 + C50967) * be) / C49692 +
         C49711) /
            C49697 -
        ((C49690 *
              (C49718 / C49697 - ((C49690 * C49711 + C50693) * be) / C49692) +
          C51009) *
         be) /
            C49692 +
        2 * (C49711 / C49697 - (0 * be) / C49692);
    const double C119 =
        (C49718 / C49697 - ((C49690 * C49711 + C50693) * be) / C49692) /
            C49697 -
        ((C49690 * (C49711 / C49697 - (0 * be) / C49692) + C22817) * be) /
            C49692;
    const double C22820 =
        C49714 / C49697 - ((C49690 * C49718 + C50967) * be) / C49692 + C49711;
    const double C22821 =
        C49718 / C49697 - ((C49690 * C49711 + C50693) * be) / C49692;
    const double C26149 = C25837 + C25838;
    const double C26282 = C26173 + C26174;
    const double C26483 = C26475 + C26476;
    const double C29480 = C26476 + C26475;
    const double C29478 = C26471 + C26470;
    const double C29476 = C26470 + C26471;
    const double C29908 = C26798 + C26797;
    const double C29906 = C26797 + C26798;
    const double C39177 = C29700 + C29701;
    const double C39437 = C30060 + C30061;
    const double C11263 = C11261 - C11257;
    const double C11262 = C11260 - C11255;
    const double C13475 = C13474 - C13468;
    const double C1051 =
        ((((0 - (C49732 * C49757) / C49733) * ce) / C49733 - (0 * de) / C49762 +
          C49742 / C49733) /
             C49741 -
         ((C49732 * C49776 + 0) * de) / C49733) /
            C49741 -
        ((C49732 * (C49776 / C49741 -
                    ((C49732 * C49777 + C50983) * de) / C49733 + C49771) +
          C51028) *
         de) /
            C49733 +
        C49777 / C49741 - ((C49732 * C49771 + C50790) * de) / C49733;
    const double C1052 =
        (C49776 / C49741 - ((C49732 * C49777 + C50983) * de) / C49733 +
         C49771) /
            C49741 -
        ((C49732 *
              (C49777 / C49741 - ((C49732 * C49771 + C50790) * de) / C49733) +
          C51018) *
         de) /
            C49733 +
        2 * (C49771 / C49741 - (0 * de) / C49733);
    const double C1053 =
        (C49777 / C49741 - ((C49732 * C49771 + C50790) * de) / C49733) /
            C49741 -
        ((C49732 * (C49771 / C49741 - (0 * de) / C49733) + C1743) * de) /
            C49733;
    const double C1744 =
        C49776 / C49741 - ((C49732 * C49777 + C50983) * de) / C49733 + C49771;
    const double C1745 =
        C49777 / C49741 - ((C49732 * C49771 + C50790) * de) / C49733;
    const double C12511 = C12505 - C12164;
    const double C12510 = C12504 - C12160;
    const double C15269 = C15264 - C14768;
    const double C139 = (4 * (2 * C50000 + C49821 * C50005 + C50281 * ae) +
                         C49821 * (3 * C50005 + C49821 * C50011 + C50285 * ae) +
                         (3 * C50281 + C49821 * C50285) * ae) /
                        C49692;
    const double C267 =
        (C49981 * (3 * C50005 + C49821 * C50011 + C50285 * ae)) / C49692;
    const double C393 =
        (C49824 * (3 * C50005 + C49821 * C50011 + C50285 * ae)) / C49692;
    const double C514 =
        (2 * C50000 + C49821 * C50005 + C50281 * ae + C50011 * C49990) / C49692;
    const double C722 = (C49824 * C49981 * C50011) / C49692;
    const double C855 =
        (2 * C50000 + C49821 * C50005 + C50281 * ae + C50011 * C50074) / C49692;
    const double C3348 = C3338 + C3339;
    const double C17236 = C17228 + C17229;
    const double C18464 = C18460 + C18461;
    const double C23956 = C23946 + C23947;
    const double C29708 = C29692 + C29693;
    const double C50595 = C50594 - C50582;
    const double C10816 = C10798 * C121;
    const double C26168 = C25846 + C25845;
    const double C10818 = C10800 * C121;
    const double C12894 = C12890 * C121;
    const double C30713 = C27406 + C27405;
    const double C30710 = C27405 + C27406;
    const double C12896 = C12892 * C121;
    const double C39179 = C29704 + C29705;
    const double C50030 = C49821 * C50029;
    const double C50034 = C49981 * C50029;
    const double C605 =
        (2 * C49981 * C50011 + C49981 * (C50011 + C50029 * C49990)) / C49692;
    const double C727 = (C49824 * (C50011 + C50029 * C49990)) / C49692;
    const double C1059 =
        (2 * C49824 * C50011 + C49824 * (C50011 + C50029 * C50074)) / C49692;
    const double C10815 = C10797 * C50778;
    const double C10811 = C10793 * C50778;
    const double C11904 = C10793 * C50983;
    const double C12171 = C10793 * C1509;
    const double C26150 = C25839 + C25840;
    const double C11921 = C11915 * C50790;
    const double C12169 = C11915 * C50790;
    const double C12879 = C11915 * C50778;
    const double C14415 = C11915 * C50983;
    const double C14771 = C11915 * C1509;
    const double C29479 = C26473 + C26472;
    const double C29477 = C26472 + C26473;
    const double C39178 = C29702 + C29703;
    const double C2359 = C2172 * C271;
    const double C2349 = C2173 * C271;
    const double C7978 = C50693 * C271;
    const double C23003 = C51009 * C271;
    const double C22993 = C22817 * C271;
    const double C25824 = C50693 * C271;
    const double C5363 = C2172 * C397;
    const double C5353 = C2173 * C397;
    const double C15859 = C50693 * C397;
    const double C28943 = C50693 * C397;
    const double C32431 = C51009 * C397;
    const double C32421 = C22817 * C397;
    const double C2693 = C2172 * C523;
    const double C2673 = C2173 * C523;
    const double C7984 = C50967 * C523;
    const double C7970 = C50693 * C523;
    const double C10779 = C50688 * C523;
    const double C23337 = C51009 * C523;
    const double C23317 = C22817 * C523;
    const double C25830 = C25631 * C523;
    const double C25816 = C50693 * C523;
    const double C3001 = C2173 * C737;
    const double C3957 = C2172 * C737;
    const double C9582 = C50693 * C737;
    const double C12885 = C50688 * C737;
    const double C23621 = C22817 * C737;
    const double C24553 = C51009 * C737;
    const double C27396 = C50693 * C737;
    const double C28721 = C25631 * C737;
    const double C41238 = C50967 * C737;
    const double C5941 = C2172 * C864;
    const double C5931 = C2173 * C864;
    const double C15869 = C50967 * C864;
    const double C15853 = C50693 * C864;
    const double C18617 = C50688 * C864;
    const double C29689 = C50693 * C864;
    const double C33009 = C51009 * C864;
    const double C32999 = C22817 * C864;
    const double C38636 = C25631 * C864;
    const double C16620 = C16614 + C16615;
    const double C19181 = C19176 + C19177;
    const double C29921 = C29916 + C29917;
    const double C16735 = C50693 * C6209;
    const double C21563 = C50688 * C6209;
    const double C39444 = C50693 * C6209;
    const double C10813 = C10795 * C50778;
    const double C11910 = C10795 * C50983;
    const double C12175 = C10795 * C1509;
    const double C26281 = C26171 + C26172;
    const double C11923 = C11917 * C50790;
    const double C12173 = C11917 * C50790;
    const double C12881 = C11917 * C50778;
    const double C14419 = C11917 * C50983;
    const double C14775 = C11917 * C1509;
    const double C26484 = C26477 + C26478;
    const double C29481 = C26478 + C26477;
    const double C14417 = C13643 * C50790;
    const double C14773 = C13643 * C50790;
    const double C18459 = C13643 * C50778;
    const double C19935 = C13643 * C50983;
    const double C20283 = C13643 * C1509;
    const double C29909 = C26800 + C26799;
    const double C29907 = C26799 + C26800;
    const double C39438 = C30062 + C30063;
    const double C11115 = C11113 * C50778;
    const double C11259 = C11251 * C50790;
    const double C12509 = C11251 * C50790;
    const double C13314 = C11251 * C50778;
    const double C11499 = C11493 * C843;
    const double C12629 = C11493 * C1743;
    const double C13472 = C11493 * C50790;
    const double C15268 = C11493 * C50790;
    const double C18869 = C11493 * C50778;
    const double C13815 = C13811 * C843;
    const double C15428 = C13811 * C1743;
    const double C19023 = C13811 * C50790;
    const double C20775 = C13811 * C50790;
    const double C19337 = C19334 + C19335;
    const double C21737 = C50688 * C16726;
    const double C49932 = C49909 + C49931;
    const double C3458 =
        2 * (C49824 * C50062 - (C50036 * ce) / C49832) -
        ((C50036 + C50063 * std::pow(C49824, 2)) * ce) / C49832 +
        C49824 * (C50062 - (C49824 * C50063 * ce) / C49832 +
                  C49824 * (C49824 * C49981 *
                                ((-(ae * C49821 * C49913) / C49733) / C49692 -
                                 C49911 / C49832 +
                                 C49821 * ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49733) /
                                               C49692 -
                                           (ae * C49913) / C49832)) -
                            (C50063 * ce) / C49832));
    const double C50077 = C50072 - C50075;
    const double C2829 = C2173 * C610;
    const double C8320 = C50693 * C610;
    const double C10783 = C50688 * C610;
    const double C23461 = C22817 * C610;
    const double C26166 = C50693 * C610;
    const double C3017 = C2173 * C740;
    const double C9590 = C50693 * C740;
    const double C12889 = C50688 * C740;
    const double C23637 = C22817 * C740;
    const double C27404 = C50693 * C740;
    const double C3345 = C2173 * C978;
    const double C17233 = C50693 * C978;
    const double C18463 = C50688 * C978;
    const double C23953 = C22817 * C978;
    const double C29697 = C50693 * C978;
    const double C6219 = C2173 * C1068;
    const double C16447 = C50693 * C1068;
    const double C21197 = C50688 * C1068;
    const double C33275 = C22817 * C1068;
    const double C39186 = C50693 * C1068;
    const double C16606 =
        3 * (C50065 - (C50166 * ce) / C49832 + C49824 * C50173) -
        ((2 * C50166 + C49824 * C50174) * ce) / C49832 +
        C49824 * (2 * C50173 - (C50174 * ce) / C49832 +
                  C49824 * (C50167 - (C49824 * C50169 * ce) / C49832 +
                            C49824 * (C49824 * C49981 *
                                          ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49733) /
                                               C49692 -
                                           (ae * C49913) / C49832) -
                                      (C50169 * ce) / C49832)));
    const double C50190 = C50187 + C50188;
    const double C11035 = C11031 * C50778;
    const double C11925 = C11919 * C50790;
    const double C12177 = C11919 * C50790;
    const double C13212 = C11919 * C50778;
    const double C14421 = C13645 * C50790;
    const double C14777 = C13645 * C50790;
    const double C18769 = C13645 * C50778;
    const double C19440 =
        4 * (2 * C50156 - (C50153 * ce) / C49832 + C49824 * C50235) -
        ((3 * C50153 + C49824 * C50231) * ce) / C49832 +
        C49824 *
            (3 * C50235 - (C50231 * ce) / C49832 +
             C49824 *
                 (2 * C50233 - (C50225 * ce) / C49832 +
                  C49824 * ((-(C49824 * C50217 * ce) / C49733) / C49692 -
                            C50215 / C49832 +
                            C49824 * ((-(C49824 * C49981 * std::pow(C49826, 8) *
                                         bs[8] * C49837) /
                                       C49733) /
                                          C49692 -
                                      (C50217 * ce) / C49832))));
    const double C50265 = C50250 + C50264;
    const double C8007 = C7979 + C7980;
    const double C8005 = C7975 + C7976;
    const double C8003 = C7971 + C7972;
    const double C8001 = C7967 + C7968;
    const double C7999 = C7963 + C7964;
    const double C7997 = C7959 + C7960;
    const double C7995 = C7955 + C7956;
    const double C7993 = C7951 + C7952;
    const double C7991 = C7947 + C7948;
    const double C7989 = C7943 + C7944;
    const double C7987 = C7939 + C7940;
    const double C8331 = C8317 + C8318;
    const double C8329 = C8313 + C8314;
    const double C8328 = C8311 + C8312;
    const double C8326 = C8307 + C8308;
    const double C8457 = C8449 + C8450;
    const double C8455 = C8445 + C8446;
    const double C8651 = C8636 + C8637;
    const double C8649 = C8632 + C8633;
    const double C8648 = C8630 + C8631;
    const double C8646 = C8626 + C8627;
    const double C8643 = C8620 + C8621;
    const double C8641 = C8616 + C8617;
    const double C8981 = C8971 + C8972;
    const double C8979 = C8967 + C8968;
    const double C8977 = C8963 + C8964;
    const double C8975 = C8959 + C8960;
    const double C9597 = C9587 + C9588;
    const double C9595 = C9583 + C9584;
    const double C9593 = C9579 + C9580;
    const double C9591 = C9575 + C9576;
    const double C15891 = C15864 + C15865;
    const double C15889 = C15860 + C15861;
    const double C15887 = C15856 + C15857;
    const double C15884 = C15850 + C15851;
    const double C15882 = C15846 + C15847;
    const double C15880 = C15842 + C15843;
    const double C15878 = C15838 + C15839;
    const double C15877 = C15836 + C15837;
    const double C15875 = C15832 + C15833;
    const double C15873 = C15828 + C15829;
    const double C15871 = C15824 + C15825;
    const double C16457 = C16448 + C16449;
    const double C16455 = C16444 + C16445;
    const double C16452 = C16436 + C16437;
    const double C16450 = C16432 + C16433;
    const double C16621 = C16616 + C16617;
    const double C16619 = C16612 + C16613;
    const double C16741 = C16736 + C16737;
    const double C16739 = C16732 + C16733;
    const double C17239 = C17234 + C17235;
    const double C17237 = C17230 + C17231;
    const double C41241 = C41233 + C41234;
    const double C23000 = C22820 * C260;
    const double C22994 = C22820 * C254;
    const double C22988 = C22820 * C261;
    const double C22982 = C22820 * C255;
    const double C22976 = C22820 * C262;
    const double C22970 = C22820 * C256;
    const double C23334 = C22820 * C516;
    const double C23328 = C22820 * C507;
    const double C23326 = C22820 * C506;
    const double C23320 = C22820 * C515;
    const double C23456 = C22820 * C604;
    const double C23450 = C22820 * C600;
    const double C23632 = C22820 * C734;
    const double C23626 = C22820 * C718;
    const double C23624 = C22820 * C723;
    const double C23618 = C22820 * C711;
    const double C23948 = C22820 * C976;
    const double C23942 = C22820 * C968;
    const double C24550 = C22820 * C724;
    const double C24544 = C22820 * C712;
    const double C32432 = C22820 * C390;
    const double C32426 = C22820 * C380;
    const double C32416 = C22820 * C391;
    const double C32410 = C22820 * C381;
    const double C32408 = C22820 * C392;
    const double C32402 = C22820 * C382;
    const double C33010 = C22820 * C857;
    const double C33004 = C22820 * C848;
    const double C32994 = C22820 * C856;
    const double C32988 = C22820 * C847;
    const double C33278 = C22820 * C1066;
    const double C33272 = C22820 * C1058;
    const double C23002 = C22821 * C259;
    const double C22996 = C22821 * C253;
    const double C22990 = C22821 * C260;
    const double C22984 = C22821 * C254;
    const double C22978 = C22821 * C261;
    const double C22972 = C22821 * C255;
    const double C23336 = C22821 * C517;
    const double C23330 = C22821 * C508;
    const double C23324 = C22821 * C507;
    const double C23318 = C22821 * C516;
    const double C23458 = C22821 * C603;
    const double C23452 = C22821 * C599;
    const double C23634 = C22821 * C733;
    const double C23628 = C22821 * C717;
    const double C23622 = C22821 * C724;
    const double C23616 = C22821 * C712;
    const double C23950 = C22821 * C975;
    const double C23944 = C22821 * C967;
    const double C24552 = C22821 * C725;
    const double C24546 = C22821 * C713;
    const double C32430 = C22821 * C389;
    const double C32424 = C22821 * C379;
    const double C32418 = C22821 * C390;
    const double C32412 = C22821 * C380;
    const double C32406 = C22821 * C391;
    const double C32400 = C22821 * C381;
    const double C33008 = C22821 * C858;
    const double C33002 = C22821 * C849;
    const double C32996 = C22821 * C857;
    const double C32990 = C22821 * C848;
    const double C33276 = C22821 * C1065;
    const double C33270 = C22821 * C1057;
    const double C26169 = C26149 * C121;
    const double C26452 = C26149 * C377;
    const double C28239 = C26149 * C1511;
    const double C26292 = C26282 * C121;
    const double C26485 = C26483 * C378;
    const double C28241 = C26483 * C1512;
    const double C12624 = C10788 * C1744;
    const double C12618 = C10786 * C1744;
    const double C12612 = C10784 * C1744;
    const double C15423 = C11245 * C1744;
    const double C15417 = C11242 * C1744;
    const double C20922 = C11488 * C1744;
    const double C12626 = C11248 * C1745;
    const double C12620 = C11245 * C1745;
    const double C12614 = C11242 * C1745;
    const double C15425 = C11490 * C1745;
    const double C15419 = C11488 * C1745;
    const double C20924 = C13808 * C1745;
    const double C12513 = C12511 - C12165;
    const double C12512 = C12510 - C12161;
    const double C15270 = C15269 - C14769;
    const double C2355 = C2173 * C267;
    const double C22999 = C22817 * C267;
    const double C5355 = C2173 * C393;
    const double C32423 = C22817 * C393;
    const double C2689 = C2173 * C514;
    const double C7982 = C50693 * C514;
    const double C23333 = C22817 * C514;
    const double C25828 = C50693 * C514;
    const double C3953 = C2173 * C722;
    const double C24549 = C22817 * C722;
    const double C28719 = C50693 * C722;
    const double C41236 = C50693 * C722;
    const double C5933 = C2173 * C855;
    const double C15863 = C50693 * C855;
    const double C33001 = C22817 * C855;
    const double C38630 = C50693 * C855;
    const double C18466 = C18464 * C121;
    const double C21731 =
        5 * ((-3 * C50552) / C49733 + C49824 * C50595 -
             (C50551 * ce) / C49733) +
        C49824 *
            (4 * C50595 +
             C49824 * ((-3 * C50589) / C49733 +
                       C49824 * ((-2 * C50580) / C49733 -
                                 (C49824 *
                                  (C49824 * (C49824 * C49913 + C49962 * ce) +
                                   C49877 + C49824 * C49962 * ce)) /
                                     C49733 -
                                 (C50583 * ce) / C49733) -
                       (C50588 * ce) / C49733) -
             (C50592 * ce) / C49733) -
        ((4 * C50551 + C49824 * C50592) * ce) / C49733;
    const double C26180 = C26168 * C121;
    const double C50031 = C50013 + C50030;
    const double C969 = (C49981 * C50011 + C50034 * C50074) / C49692;
    const double C11027 = C10811 + C10810;
    const double C26170 = C26150 * C50778;
    const double C26453 = C26150 * C50983;
    const double C28240 = C26150 * C1509;
    const double C2378 = C2358 + C2359;
    const double C2373 = C2348 + C2349;
    const double C8006 = C7977 + C7978;
    const double C23017 = C22992 + C22993;
    const double C25852 = C25823 + C25824;
    const double C5382 = C5362 + C5363;
    const double C5377 = C5352 + C5353;
    const double C15888 = C15858 + C15859;
    const double C28956 = C28942 + C28943;
    const double C32445 = C32420 + C32421;
    const double C2706 = C2692 + C2693;
    const double C2696 = C2672 + C2673;
    const double C8009 = C7983 + C7984;
    const double C8002 = C7969 + C7970;
    const double C10799 = C10778 + C10779;
    const double C23340 = C23316 + C23317;
    const double C25855 = C25829 + C25830;
    const double C25848 = C25815 + C25816;
    const double C3021 = C3000 + C3001;
    const double C3964 = C3956 + C3957;
    const double C9594 = C9581 + C9582;
    const double C12891 = C12884 + C12885;
    const double C23641 = C23620 + C23621;
    const double C27408 = C27395 + C27396;
    const double C28726 = C28720 + C28721;
    const double C41243 = C41237 + C41238;
    const double C5954 = C5940 + C5941;
    const double C5949 = C5930 + C5931;
    const double C15893 = C15868 + C15869;
    const double C15885 = C15852 + C15853;
    const double C18619 = C18616 + C18617;
    const double C29706 = C29688 + C29689;
    const double C33017 = C32998 + C32999;
    const double C38640 = C38635 + C38636;
    const double C19937 = C19181 * C50790;
    const double C20285 = C19181 * C50790;
    const double C16740 = C16734 + C16735;
    const double C21565 = C21562 + C21563;
    const double C39449 = C39443 + C39444;
    const double C11026 = C10813 + C10812;
    const double C26291 = C26281 * C50778;
    const double C13213 = C12881 + C12880;
    const double C26486 = C26484 * C50790;
    const double C28242 = C26484 * C50790;
    const double C19339 = C19337 * C843;
    const double C20927 = C19337 * C1743;
    const double C21739 = C21736 + C21737;
    const double C149 =
        5 * (3 * C49892 + (C49890 * ae) / C49692 + C49821 * C49932) +
        ((4 * C49890 + C49821 * C49930) * ae) / C49692 +
        C49821 *
            (4 * C49932 + (C49930 * ae) / C49692 +
             C49821 *
                 (3 * C49929 + (C49926 * ae) / C49692 +
                  C49821 *
                      (2 * C49925 - (ae * C49919) / C49832 +
                       C49821 * ((-(ae * C49821 * C49913) / C49733) / C49692 -
                                 C49911 / C49832 +
                                 C49821 * ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49733) /
                                               C49692 -
                                           (ae * C49913) / C49832)))));
    const double C275 =
        (yP - yQ) * (3 * C49892 + (C49890 * ae) / C49692 + C49821 * C49932);
    const double C276 =
        (yP - yQ) *
        (4 * C49932 + (C49930 * ae) / C49692 +
         C49821 *
             (3 * C49929 + (C49926 * ae) / C49692 +
              C49821 * (2 * C49925 - (ae * C49919) / C49832 +
                        C49821 * ((-(ae * C49821 * C49913) / C49733) / C49692 -
                                  C49911 / C49832 +
                                  C49821 * ((-(C49821 * std::pow(C49826, 8) *
                                               bs[8] * C49837) /
                                             C49733) /
                                                C49692 -
                                            (ae * C49913) / C49832)))));
    const double C401 =
        C49824 * (3 * C49892 + (C49890 * ae) / C49692 + C49821 * C49932) -
        ((3 * (C49944 + C49821 * C49957 + C49951 * ae) +
          C49821 * (2 * C49957 +
                    C49821 * (C49953 +
                              C49821 * (C49821 * C49866 * C49867 * C49940 +
                                        C49952 * ae) +
                              C49821 * C49952 * ae) +
                    C49956 * ae) +
          (2 * C49951 + C49821 * C49956) * ae) *
         ce) /
            C49832;
    const double C402 =
        C49824 *
            (4 * C49932 + (C49930 * ae) / C49692 +
             C49821 *
                 (3 * C49929 + (C49926 * ae) / C49692 +
                  C49821 *
                      (2 * C49925 - (ae * C49919) / C49832 +
                       C49821 * ((-(ae * C49821 * C49913) / C49733) / C49692 -
                                 C49911 / C49832 +
                                 C49821 * ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49733) /
                                               C49692 -
                                           (ae * C49913) / C49832))))) -
        ((4 * (2 * C49957 + C49821 * C49974 + C49956 * ae) +
          C49821 *
              (3 * C49974 +
               C49821 * (2 * C49969 +
                         C49821 * (C49963 +
                                   C49821 * (C49821 * C49898 * C49899 * C49940 +
                                             C49962 * ae) +
                                   C49821 * C49962 * ae) +
                         C49968 * ae) +
               C49972 * ae) +
          (3 * C49956 + C49821 * C49972) * ae) *
         ce) /
            C49832;
    const double C524 = 2 * C49862 - (ae * C49859) / C49832 + C49821 * C49892 +
                        C49932 * std::pow(yP - yQ, 2);
    const double C525 =
        3 * C49892 + (C49890 * ae) / C49692 + C49821 * C49932 +
        (3 * C49929 + (C49926 * ae) / C49692 +
         C49821 *
             (2 * C49925 - (ae * C49919) / C49832 +
              C49821 *
                  ((-(ae * C49821 * C49913) / C49733) / C49692 -
                   C49911 / C49832 +
                   C49821 * ((-(C49821 * std::pow(C49826, 8) * bs[8] * C49837) /
                              C49733) /
                                 C49692 -
                             (ae * C49913) / C49832)))) *
            std::pow(yP - yQ, 2);
    const double C609 =
        2 * C49981 * C49932 +
        C49981 *
            (C49932 +
             (2 * C49925 - (ae * C49919) / C49832 +
              C49821 *
                  ((-(ae * C49821 * C49913) / C49733) / C49692 -
                   C49911 / C49832 +
                   C49821 * ((-(C49821 * std::pow(C49826, 8) * bs[8] * C49837) /
                              C49733) /
                                 C49692 -
                             (ae * C49913) / C49832))) *
                 std::pow(C49981, 2));
    const double C738 =
        C49824 * C49981 * C49932 -
        (C49981 * (2 * C49957 + C49821 * C49974 + C49956 * ae) * ce) / C49832;
    const double C739 =
        C49824 *
            (C49932 +
             (2 * C49925 - (ae * C49919) / C49832 +
              C49821 *
                  ((-(ae * C49821 * C49913) / C49733) / C49692 -
                   C49911 / C49832 +
                   C49821 * ((-(C49821 * std::pow(C49826, 8) * bs[8] * C49837) /
                              C49733) /
                                 C49692 -
                             (ae * C49913) / C49832))) *
                 C49990) -
        ((2 * C49957 + C49821 * C49974 + C49956 * ae +
          (2 * C49969 +
           C49821 *
               (C49963 +
                C49821 * (C49821 * C49898 * C49899 * C49940 + C49962 * ae) +
                C49821 * C49962 * ae) +
           C49968 * ae) *
              C49990) *
         ce) /
            C49832;
    const double C865 = 2 * C49862 - (ae * C49859) / C49832 + C49821 * C49892 -
                        (C49824 * C50011 * ce) / C49832 +
                        C49824 * (C49824 * C49932 - (C50011 * ce) / C49832);
    const double C977 =
        C49981 * C49932 - (C49824 * C50034 * ce) / C49832 +
        C49824 * (C49824 * C49981 *
                      (2 * C49925 - (ae * C49919) / C49832 +
                       C49821 * ((-(ae * C49821 * C49913) / C49733) / C49692 -
                                 C49911 / C49832 +
                                 C49821 * ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49733) /
                                               C49692 -
                                           (ae * C49913) / C49832))) -
                  (C50034 * ce) / C49832);
    const double C1067 =
        2 * (C49824 * C49932 - (C50011 * ce) / C49832) -
        ((C50011 + C50029 * std::pow(C49824, 2)) * ce) / C49832 +
        C49824 *
            (C49932 - (C49824 * C50029 * ce) / C49832 +
             C49824 *
                 (C49824 *
                      (2 * C49925 - (ae * C49919) / C49832 +
                       C49821 * ((-(ae * C49821 * C49913) / C49733) / C49692 -
                                 C49911 / C49832 +
                                 C49821 * ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49733) /
                                               C49692 -
                                           (ae * C49913) / C49832))) -
                  (C50029 * ce) / C49832));
    const double C6208 =
        3 * (C49892 - (C50071 * ce) / C49832 + C49824 * C50077) -
        ((2 * C50071 + C49824 * C50078) * ce) / C49832 +
        C49824 *
            (2 * C50077 - (C50078 * ce) / C49832 +
             C49824 *
                 (C49929 - (C49824 * C50026 * ce) / C49832 +
                  C49824 *
                      (C49824 * ((-(ae * C49821 * C49913) / C49733) / C49692 -
                                 C49911 / C49832 +
                                 C49821 * ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49733) /
                                               C49692 -
                                           (ae * C49913) / C49832)) -
                       (C50026 * ce) / C49832)));
    const double C2835 = C2828 + C2829;
    const double C8332 = C8319 + C8320;
    const double C10801 = C10782 + C10783;
    const double C23467 = C23460 + C23461;
    const double C26178 = C26165 + C26166;
    const double C3029 = C3016 + C3017;
    const double C9598 = C9589 + C9590;
    const double C12893 = C12888 + C12889;
    const double C23649 = C23636 + C23637;
    const double C27412 = C27403 + C27404;
    const double C3351 = C3344 + C3345;
    const double C17238 = C17232 + C17233;
    const double C18465 = C18462 + C18463;
    const double C23959 = C23952 + C23953;
    const double C29710 = C29696 + C29697;
    const double C6227 = C6218 + C6219;
    const double C16456 = C16446 + C16447;
    const double C21199 = C21196 + C21197;
    const double C33283 = C33274 + C33275;
    const double C39191 = C39185 + C39186;
    const double C16725 =
        4 * (2 * C50086 - (C50085 * ce) / C49832 + C49824 * C50190) -
        ((3 * C50085 + C49824 * C50189) * ce) / C49832 +
        C49824 *
            (3 * C50190 - (C50189 * ce) / C49832 +
             C49824 *
                 (2 * C50185 - (C50183 * ce) / C49832 +
                  C49824 *
                      (C49925 - (C49824 * C50023 * ce) / C49832 +
                       C49824 * (C49824 * ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49733) /
                                               C49692 -
                                           (ae * C49913) / C49832) -
                                 (C50023 * ce) / C49832))));
    const double C21732 =
        5 * (3 * C50211 - (C50206 * ce) / C49832 + C49824 * C50265) -
        ((4 * C50206 + C49824 * C50262) * ce) / C49832 +
        C49824 *
            (4 * C50265 - (C50262 * ce) / C49832 +
             C49824 *
                 (3 * C50263 - (C50256 * ce) / C49832 +
                  C49824 *
                      (2 * C50258 - (C50249 * ce) / C49832 +
                       C49824 * ((-(C49824 * C50020 * ce) / C49733) / C49692 -
                                 C49911 / C49832 +
                                 C49824 * ((-(C49824 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49733) /
                                               C49692 -
                                           (C50020 * ce) / C49832)))));
    const double C8322 = C8000 + C7999;
    const double C8304 = C7993 + C7994;
    const double C8303 = C7991 + C7992;
    const double C8444 = C8327 + C8328;
    const double C8443 = C8325 + C8326;
    const double C8654 = C8647 + C8648;
    const double C41962 = C8648 + C8647;
    const double C8653 = C8645 + C8646;
    const double C41961 = C8646 + C8645;
    const double C41960 = C8643 + C8642;
    const double C41958 = C8642 + C8643;
    const double C41959 = C8641 + C8640;
    const double C41957 = C8640 + C8641;
    const double C16609 = C8978 + C8977;
    const double C42352 = C8977 + C8978;
    const double C16608 = C8976 + C8975;
    const double C42351 = C8975 + C8976;
    const double C43132 = C9592 + C9591;
    const double C43129 = C9591 + C9592;
    const double C16440 = C15883 + C15882;
    const double C16431 = C15877 + C15876;
    const double C16430 = C15875 + C15874;
    const double C16729 = C16453 + C16452;
    const double C16728 = C16451 + C16450;
    const double C23021 = C23000 + C23001;
    const double C23018 = C22994 + C22995;
    const double C23015 = C22988 + C22989;
    const double C23012 = C22982 + C22983;
    const double C23009 = C22976 + C22977;
    const double C23006 = C22970 + C22971;
    const double C23349 = C23334 + C23335;
    const double C23346 = C23328 + C23329;
    const double C23345 = C23326 + C23327;
    const double C23342 = C23320 + C23321;
    const double C23465 = C23456 + C23457;
    const double C23462 = C23450 + C23451;
    const double C23647 = C23632 + C23633;
    const double C23644 = C23626 + C23627;
    const double C23643 = C23624 + C23625;
    const double C23640 = C23618 + C23619;
    const double C23957 = C23948 + C23949;
    const double C23954 = C23942 + C23943;
    const double C24559 = C24550 + C24551;
    const double C24556 = C24544 + C24545;
    const double C32451 = C32432 + C32433;
    const double C32448 = C32426 + C32427;
    const double C32443 = C32416 + C32417;
    const double C32440 = C32410 + C32411;
    const double C32439 = C32408 + C32409;
    const double C32436 = C32402 + C32403;
    const double C33023 = C33010 + C33011;
    const double C33020 = C33004 + C33005;
    const double C33015 = C32994 + C32995;
    const double C33012 = C32988 + C32989;
    const double C33285 = C33278 + C33279;
    const double C33282 = C33272 + C33273;
    const double C23022 = C23002 + C23003;
    const double C23019 = C22996 + C22997;
    const double C23016 = C22990 + C22991;
    const double C23013 = C22984 + C22985;
    const double C23010 = C22978 + C22979;
    const double C23007 = C22972 + C22973;
    const double C23350 = C23336 + C23337;
    const double C23347 = C23330 + C23331;
    const double C23344 = C23324 + C23325;
    const double C23341 = C23318 + C23319;
    const double C23466 = C23458 + C23459;
    const double C23463 = C23452 + C23453;
    const double C23648 = C23634 + C23635;
    const double C23645 = C23628 + C23629;
    const double C23642 = C23622 + C23623;
    const double C23639 = C23616 + C23617;
    const double C23958 = C23950 + C23951;
    const double C23955 = C23944 + C23945;
    const double C24560 = C24552 + C24553;
    const double C24557 = C24546 + C24547;
    const double C32450 = C32430 + C32431;
    const double C32447 = C32424 + C32425;
    const double C32444 = C32418 + C32419;
    const double C32441 = C32412 + C32413;
    const double C32438 = C32406 + C32407;
    const double C32435 = C32400 + C32401;
    const double C33022 = C33008 + C33009;
    const double C33019 = C33002 + C33003;
    const double C33016 = C32996 + C32997;
    const double C33013 = C32990 + C32991;
    const double C33284 = C33276 + C33277;
    const double C33281 = C33270 + C33271;
    const double C2376 = C2354 + C2355;
    const double C23020 = C22998 + C22999;
    const double C5378 = C5354 + C5355;
    const double C32446 = C32422 + C32423;
    const double C2704 = C2688 + C2689;
    const double C8008 = C7981 + C7982;
    const double C23348 = C23332 + C23333;
    const double C25854 = C25827 + C25828;
    const double C3962 = C3952 + C3953;
    const double C24558 = C24548 + C24549;
    const double C28725 = C28718 + C28719;
    const double C41242 = C41235 + C41236;
    const double C5950 = C5932 + C5933;
    const double C15890 = C15862 + C15863;
    const double C33018 = C33000 + C33001;
    const double C38637 = C38629 + C38630;
    const double C50032 = C50031 + C50019;
    const double C26181 = C26169 + C26170;
    const double C26474 = C26452 + C26453;
    const double C28243 = C28239 + C28240;
    const double C8321 = C8002 + C8001;
    const double C10817 = C10799 * C50778;
    const double C26167 = C25848 + C25847;
    const double C43131 = C9594 + C9593;
    const double C43130 = C9593 + C9594;
    const double C12895 = C12891 * C50778;
    const double C30712 = C27408 + C27407;
    const double C30711 = C27407 + C27408;
    const double C16441 = C15885 + C15884;
    const double C39180 = C29706 + C29707;
    const double C26297 = C26291 + C26292;
    const double C2361 = C2173 * C275;
    const double C23005 = C22817 * C275;
    const double C5361 = C2173 * C401;
    const double C32429 = C22817 * C401;
    const double C2695 = C2173 * C524;
    const double C7986 = C50693 * C524;
    const double C23339 = C22817 * C524;
    const double C25832 = C50693 * C524;
    const double C3959 = C2173 * C738;
    const double C24555 = C22817 * C738;
    const double C28723 = C50693 * C738;
    const double C41240 = C50693 * C738;
    const double C5939 = C2173 * C865;
    const double C15867 = C50693 * C865;
    const double C33007 = C22817 * C865;
    const double C38634 = C50693 * C865;
    const double C10819 = C10801 * C50778;
    const double C12897 = C12893 * C50778;
    const double C18467 = C18465 * C50778;
    const double C8334 = C8322 * C121;
    const double C8324 = C8304 * C50778;
    const double C8623 = C8304 * C50983;
    const double C10426 = C8304 * C1509;
    const double C8323 = C8303 * C121;
    const double C8622 = C8303 * C377;
    const double C10425 = C8303 * C1511;
    const double C8454 = C8444 * C121;
    const double C8453 = C8443 * C50778;
    const double C8656 = C8654 * C50790;
    const double C10428 = C8654 * C50790;
    const double C8655 = C8653 * C378;
    const double C10427 = C8653 * C1512;
    const double C866 =
        3 * C49892 + (C49890 * ae) / C49692 + C49821 * C49932 -
        (C49824 * C50032 * ce) / C49832 +
        C49824 *
            (C49824 *
                 (3 * C49929 + (C49926 * ae) / C49692 +
                  C49821 *
                      (2 * C49925 - (ae * C49919) / C49832 +
                       C49821 * ((-(ae * C49821 * C49913) / C49733) / C49692 -
                                 C49911 / C49832 +
                                 C49821 * ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49733) /
                                               C49692 -
                                           (ae * C49913) / C49832)))) -
             (C50032 * ce) / C49832);
    const double C1410 =
        C49824 * C49981 *
            (3 * C49929 + (C49926 * ae) / C49692 +
             C49821 * (2 * C49925 - (ae * C49919) / C49832 +
                       C49821 * ((-(ae * C49821 * C49913) / C49733) / C49692 -
                                 C49911 / C49832 +
                                 C49821 * ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49733) /
                                               C49692 -
                                           (ae * C49913) / C49832)))) -
        (C49981 * C50032 * ce) / C49832;
    const double C142 = (5 * (3 * C50005 + C49821 * C50011 + C50285 * ae) +
                         C49821 * (4 * C50011 + C49821 * C50032 + C50291 * ae) +
                         (4 * C50285 + C49821 * C50291) * ae) /
                        C49692;
    const double C270 =
        (C49981 * (4 * C50011 + C49821 * C50032 + C50291 * ae)) / C49692;
    const double C395 =
        (C49824 * (4 * C50011 + C49821 * C50032 + C50291 * ae)) / C49692;
    const double C520 =
        (3 * C50005 + C49821 * C50011 + C50285 * ae + C50032 * C49990) / C49692;
    const double C860 =
        (3 * C50005 + C49821 * C50011 + C50285 * ae + C50032 * C50074) / C49692;
    const double C1408 = (C49824 * C49981 * C50032) / C49692;
    const double C26487 = C26474 - C26485;
    const double C28244 = C28243 - C28241;
    const double C8333 = C8321 * C50778;
    const double C26179 = C26167 * C50778;
    const double C2379 = C2360 + C2361;
    const double C23023 = C23004 + C23005;
    const double C5381 = C5360 + C5361;
    const double C32449 = C32428 + C32429;
    const double C2707 = C2694 + C2695;
    const double C8010 = C7985 + C7986;
    const double C23351 = C23338 + C23339;
    const double C25856 = C25831 + C25832;
    const double C3965 = C3958 + C3959;
    const double C24561 = C24554 + C24555;
    const double C28727 = C28722 + C28723;
    const double C41244 = C41239 + C41240;
    const double C5953 = C5938 + C5939;
    const double C15892 = C15866 + C15867;
    const double C33021 = C33006 + C33007;
    const double C38639 = C38633 + C38634;
    const double C8335 = C8323 + C8324;
    const double C8644 = C8622 + C8623;
    const double C10429 = C10425 + C10426;
    const double C8459 = C8453 + C8454;
    const double C26488 = C26487 - C26486;
    const double C28245 = C28244 - C28242;
    const double C8336 = C8333 + C8334;
    const double C26182 = C26179 + C26180;
    const double C8657 = C8644 - C8655;
    const double C10430 = C10429 - C10427;
    const double C8658 = C8657 - C8656;
    const double C10431 = C10430 - C10428;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                     C51009 * C130 + C22822 * C124 + C22817 * C131) *
                        C121 +
                    (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                     C51009 * C144 + C22822 * C135 + C22817 * C145) *
                        C50778) *
                       C22818 +
                   ((C23006 + C23007 + C23008) * C121 +
                    (C23009 + C23010 + C23011) * C50778) *
                       C50866) *
                      C50878 * C1169 -
                  (((C23340 + C23341 + C23342) * C50778 +
                    (C23343 + C23344 + C23345) * C121) *
                       C50866 +
                   ((C23011 + C23010 + C23009) * C50778 +
                    (C23008 + C23007 + C23006) * C121) *
                       C22818) *
                      C50878 * C50764) *
                     C51026 +
                 ((((C23012 + C23013 + C23014) * C121 +
                    (C23015 + C23016 + C23017) * C50778) *
                       C22818 +
                   ((C23346 + C23347 + C23348) * C121 +
                    (C23349 + C23350 + C23351) * C50778) *
                       C50866) *
                      C50878 * C50764 -
                  (((C23017 + C23016 + C23015) * C50778 +
                    (C23014 + C23013 + C23012) * C121) *
                       C50866 +
                   ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                     C51009 * C145 + C22820 * C134 + C51025 * C144) *
                        C50778 +
                    (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                     C51009 * C131 + C22820 * C123 + C51025 * C130) *
                        C121) *
                       C22818) *
                      C50878 * C1169) *
                     C51012 +
                 ((((C22820 * C124 + C51025 * C131 + C22821 * C125 +
                     C51009 * C132 + C22822 * C126 + C22817 * C138) *
                        C121 +
                    (C22820 * C135 + C51025 * C145 + C22821 * C136 +
                     C51009 * C146 + C22822 * C137 + C22817 * C147) *
                        C50778) *
                       C22818 +
                   ((C23018 + C23019 + C23020) * C121 +
                    (C23021 + C23022 + C23023) * C50778) *
                       C50866) *
                      C50878 * C1169 -
                  (((C22822 * C519 + C22817 * C525 + C22821 * C518 +
                     C51009 * C524 + C22820 * C517 + C51025 * C523) *
                        C50778 +
                    (C22822 * C510 + C22817 * C520 + C22821 * C509 +
                     C51009 * C514 + C22820 * C508 + C51025 * C513) *
                        C121) *
                       C50866 +
                   ((C23023 + C23022 + C23021) * C50778 +
                    (C23020 + C23019 + C23018) * C121) *
                       C22818) *
                      C50878 * C50764) *
                     C1173)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                     C51009 * C130 + C22822 * C124 + C22817 * C131) *
                        C121 +
                    (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                     C51009 * C144 + C22822 * C135 + C22817 * C145) *
                        C50778) *
                       C22818 +
                   ((C23006 + C23007 + C23008) * C121 +
                    (C23009 + C23010 + C23011) * C50778) *
                       C50866) *
                      C50878 * C51027 -
                  (((C23340 + C23341 + C23342) * C50778 +
                    (C23343 + C23344 + C23345) * C121) *
                       C50866 +
                   ((C23011 + C23010 + C23009) * C50778 +
                    (C23008 + C23007 + C23006) * C121) *
                       C22818) *
                      C50878 * C51015 +
                  (((C23345 + C23344 + C23343) * C121 +
                    (C23342 + C23341 + C23340) * C50778) *
                       C22818 +
                   ((C23462 + C23463 + C23464) * C121 +
                    (C23465 + C23466 + C23467) * C50778) *
                       C50866) *
                      C50878 * C1274) *
                     C1275 +
                 ((((C23012 + C23013 + C23014) * C121 +
                    (C23015 + C23016 + C23017) * C50778) *
                       C22818 +
                   ((C23346 + C23347 + C23348) * C121 +
                    (C23349 + C23350 + C23351) * C50778) *
                       C50866) *
                      C50878 * C51015 -
                  (((C23017 + C23016 + C23015) * C50778 +
                    (C23014 + C23013 + C23012) * C121) *
                       C50866 +
                   ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                     C51009 * C145 + C22820 * C134 + C51025 * C144) *
                        C50778 +
                    (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                     C51009 * C131 + C22820 * C123 + C51025 * C130) *
                        C121) *
                       C22818) *
                      C50878 * C51027 -
                  (((C22822 * C601 + C22817 * C609 + C22821 * C602 +
                     C51009 * C610 + C22820 * C603 + C51025 * C611) *
                        C50778 +
                    (C22822 * C597 + C22817 * C605 + C22821 * C598 +
                     C51009 * C606 + C22820 * C599 + C51025 * C607) *
                        C121) *
                       C50866 +
                   ((C23351 + C23350 + C23349) * C50778 +
                    (C23348 + C23347 + C23346) * C121) *
                       C22818) *
                      C50878 * C1274) *
                     C50721)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                     C51009 * C130 + C22822 * C124 + C22817 * C131) *
                        C377 +
                    (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                     C51009 * C144 + C22822 * C135 + C22817 * C145) *
                        C50983 -
                    (C22822 * C380 + C22817 * C386 + C22821 * C381 +
                     C51009 * C387 + C22820 * C382 + C51025 * C388) *
                        C378 -
                    (C22822 * C390 + C22817 * C398 + C22821 * C391 +
                     C51009 * C399 + C22820 * C392 + C51025 * C400) *
                        C50790) *
                       C22818 +
                   ((C23006 + C23007 + C23008) * C377 +
                    (C23009 + C23010 + C23011) * C50983 -
                    (C23638 + C23639 + C23640) * C378 -
                    (C23641 + C23642 + C23643) * C50790) *
                       C50866) *
                      C50878 * C1169 +
                  (((C23640 + C23639 + C23638) * C378 -
                    ((C23011 + C23010 + C23009) * C50983 +
                     (C23008 + C23007 + C23006) * C377) +
                    (C23643 + C23642 + C23641) * C50790) *
                       C22818 +
                   ((C23644 + C23645 + C23646) * C378 -
                    ((C23340 + C23341 + C23342) * C50983 +
                     (C23343 + C23344 + C23345) * C377) +
                    (C23647 + C23648 + C23649) * C50790) *
                       C50866) *
                      C50878 * C50764) *
                     C1275 +
                 ((((C22820 * C381 + C51025 * C387 + C22821 * C380 +
                     C51009 * C386 + C22822 * C379 + C22817 * C385) *
                        C378 -
                    ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                      C51009 * C145 + C22820 * C134 + C51025 * C144) *
                         C50983 +
                     (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                      C51009 * C131 + C22820 * C123 + C51025 * C130) *
                         C377) +
                    (C22820 * C391 + C51025 * C399 + C22821 * C390 +
                     C51009 * C398 + C22822 * C389 + C22817 * C397) *
                        C50790) *
                       C22818 +
                   ((C24556 + C24557 + C24558) * C378 -
                    ((C23017 + C23016 + C23015) * C50983 +
                     (C23014 + C23013 + C23012) * C377) +
                    (C24559 + C24560 + C24561) * C50790) *
                       C50866) *
                      C50878 * C1169 +
                  (((C23012 + C23013 + C23014) * C377 +
                    (C23015 + C23016 + C23017) * C50983 -
                    (C24558 + C24557 + C24556) * C378 -
                    (C24561 + C24560 + C24559) * C50790) *
                       C22818 +
                   ((C23346 + C23347 + C23348) * C377 +
                    (C23349 + C23350 + C23351) * C50983 -
                    (C22822 * C715 + C22817 * C727 + C22821 * C716 +
                     C51009 * C728 + C22820 * C717 + C51025 * C729) *
                        C378 -
                    (C22822 * C731 + C22817 * C739 + C22821 * C732 +
                     C51009 * C740 + C22820 * C733 + C51025 * C741) *
                        C50790) *
                       C50866) *
                      C50878 * C50764) *
                     C50721)) /
               (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                     C51009 * C130 + C22822 * C124 + C22817 * C131) *
                        C1511 +
                    (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                     C51009 * C144 + C22822 * C135 + C22817 * C145) *
                        C1509 -
                    (C22822 * C380 + C22817 * C386 + C22821 * C381 +
                     C51009 * C387 + C22820 * C382 + C51025 * C388) *
                        C1512 -
                    (C22822 * C390 + C22817 * C398 + C22821 * C391 +
                     C51009 * C399 + C22820 * C392 + C51025 * C400) *
                        C50790) *
                       C22818 +
                   ((C23006 + C23007 + C23008) * C1511 +
                    (C23009 + C23010 + C23011) * C1509 -
                    (C23638 + C23639 + C23640) * C1512 -
                    (C23641 + C23642 + C23643) * C50790) *
                       C50866) *
                      C50878 * C1169 +
                  (((C23640 + C23639 + C23638) * C1512 -
                    ((C23011 + C23010 + C23009) * C1509 +
                     (C23008 + C23007 + C23006) * C1511) +
                    (C23643 + C23642 + C23641) * C50790) *
                       C22818 +
                   ((C23644 + C23645 + C23646) * C1512 -
                    ((C23340 + C23341 + C23342) * C1509 +
                     (C23343 + C23344 + C23345) * C1511) +
                    (C23647 + C23648 + C23649) * C50790) *
                       C50866) *
                      C50878 * C50764) *
                     C50974 +
                 ((((C22820 * C381 + C51025 * C387 + C22821 * C380 +
                     C51009 * C386 + C22822 * C379 + C22817 * C385) *
                        C1512 -
                    ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                      C51009 * C145 + C22820 * C134 + C51025 * C144) *
                         C1509 +
                     (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                      C51009 * C131 + C22820 * C123 + C51025 * C130) *
                         C1511) +
                    (C22820 * C391 + C51025 * C399 + C22821 * C390 +
                     C51009 * C398 + C22822 * C389 + C22817 * C397) *
                        C50790) *
                       C22818 +
                   ((C24556 + C24557 + C24558) * C1512 -
                    ((C23017 + C23016 + C23015) * C1509 +
                     (C23014 + C23013 + C23012) * C1511) +
                    (C24559 + C24560 + C24561) * C50790) *
                       C50866) *
                      C50878 * C1169 +
                  (((C23012 + C23013 + C23014) * C1511 +
                    (C23015 + C23016 + C23017) * C1509 -
                    (C24558 + C24557 + C24556) * C1512 -
                    (C24561 + C24560 + C24559) * C50790) *
                       C22818 +
                   ((C23346 + C23347 + C23348) * C1511 +
                    (C23349 + C23350 + C23351) * C1509 -
                    (C22822 * C715 + C22817 * C727 + C22821 * C716 +
                     C51009 * C728 + C22820 * C717 + C51025 * C729) *
                        C1512 -
                    (C22822 * C731 + C22817 * C739 + C22821 * C732 +
                     C51009 * C740 + C22820 * C733 + C51025 * C741) *
                        C50790) *
                       C50866) *
                      C50878 * C50764) *
                     C50721)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                    C51009 * C130 + C22822 * C124 + C22817 * C131) *
                       C1511 +
                   (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                    C51009 * C144 + C22822 * C135 + C22817 * C145) *
                       C1509 -
                   (C22822 * C380 + C22817 * C386 + C22821 * C381 +
                    C51009 * C387 + C22820 * C382 + C51025 * C388) *
                       C1512 -
                   (C22822 * C390 + C22817 * C398 + C22821 * C391 +
                    C51009 * C399 + C22820 * C392 + C51025 * C400) *
                       C50790) *
                      C22818 +
                  ((C23006 + C23007 + C23008) * C1511 +
                   (C23009 + C23010 + C23011) * C1509 -
                   (C23638 + C23639 + C23640) * C1512 -
                   (C23641 + C23642 + C23643) * C50790) *
                      C50866) *
                     C50878 * C51027 +
                 (((C23640 + C23639 + C23638) * C1512 -
                   ((C23011 + C23010 + C23009) * C1509 +
                    (C23008 + C23007 + C23006) * C1511) +
                   (C23643 + C23642 + C23641) * C50790) *
                      C22818 +
                  ((C23644 + C23645 + C23646) * C1512 -
                   ((C23340 + C23341 + C23342) * C1509 +
                    (C23343 + C23344 + C23345) * C1511) +
                   (C23647 + C23648 + C23649) * C50790) *
                      C50866) *
                     C50878 * C51015 +
                 (((C23345 + C23344 + C23343) * C1511 +
                   (C23342 + C23341 + C23340) * C1509 -
                   (C23646 + C23645 + C23644) * C1512 -
                   (C23649 + C23648 + C23647) * C50790) *
                      C22818 +
                  ((C23462 + C23463 + C23464) * C1511 +
                   (C23465 + C23466 + C23467) * C1509 -
                   (C22822 * C2981 + C22817 * C2984 + C22821 * C2982 +
                    C51009 * C2985 + C22820 * C2983 + C51025 * C2986) *
                       C1512 -
                   (C22822 * C2987 + C22817 * C2990 + C22821 * C2988 +
                    C51009 * C2991 + C22820 * C2989 + C51025 * C2992) *
                       C50790) *
                      C50866) *
                     C50878 * C1274) *
                C50716) /
               (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                    C51009 * C130 + C22822 * C124 + C22817 * C131) *
                       C1744 +
                   (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                    C51009 * C144 + C22822 * C135 + C22817 * C145) *
                       C51028 -
                   (C22822 * C380 + C22817 * C386 + C22821 * C381 +
                    C51009 * C387 + C22820 * C382 + C51025 * C388) *
                       C1745 -
                   (C22822 * C390 + C22817 * C398 + C22821 * C391 +
                    C51009 * C399 + C22820 * C392 + C51025 * C400) *
                       C51018 +
                   (C22820 * C847 + C51025 * C852 + C22821 * C848 +
                    C51009 * C853 + C22822 * C849 + C22817 * C854) *
                       C1746 +
                   (C22820 * C856 + C51025 * C862 + C22821 * C857 +
                    C51009 * C863 + C22822 * C858 + C22817 * C864) *
                       C1743) *
                      C22818 +
                  ((C23006 + C23007 + C23008) * C1744 +
                   (C23009 + C23010 + C23011) * C51028 -
                   (C23638 + C23639 + C23640) * C1745 -
                   (C23641 + C23642 + C23643) * C51018 +
                   (C23954 + C23955 + C23956) * C1746 +
                   (C23957 + C23958 + C23959) * C1743) *
                      C50866) *
                     C50878 * C1169 +
                 (((C23640 + C23639 + C23638) * C1745 -
                   ((C23011 + C23010 + C23009) * C51028 +
                    (C23008 + C23007 + C23006) * C1744) +
                   (C23643 + C23642 + C23641) * C51018 -
                   (C23956 + C23955 + C23954) * C1746 -
                   (C23959 + C23958 + C23957) * C1743) *
                      C22818 +
                  ((C23644 + C23645 + C23646) * C1745 -
                   ((C23340 + C23341 + C23342) * C51028 +
                    (C23343 + C23344 + C23345) * C1744) +
                   (C23647 + C23648 + C23649) * C51018 -
                   (C22822 * C3321 + C22817 * C3324 + C22821 * C3322 +
                    C51009 * C3325 + C22820 * C3323 + C51025 * C3326) *
                       C1746 -
                   (C22822 * C3327 + C22817 * C3330 + C22821 * C3328 +
                    C51009 * C3331 + C22820 * C3329 + C51025 * C3332) *
                       C1743) *
                      C50866) *
                     C50878 * C50764) *
                C50716) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                     C51009 * C130 + C22822 * C124 + C22817 * C131) *
                        C121 +
                    (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                     C51009 * C144 + C22822 * C135 + C22817 * C145) *
                        C50778) *
                       C22818 +
                   ((C23006 + C23007 + C23008) * C121 +
                    (C23009 + C23010 + C23011) * C50778) *
                       C50866) *
                      C50878 * C501 -
                  (((C23340 + C23341 + C23342) * C50778 +
                    (C23343 + C23344 + C23345) * C121) *
                       C50866 +
                   ((C23011 + C23010 + C23009) * C50778 +
                    (C23008 + C23007 + C23006) * C121) *
                       C22818) *
                      C50878 * C502 +
                  (((C23345 + C23344 + C23343) * C121 +
                    (C23342 + C23341 + C23340) * C50778) *
                       C22818 +
                   ((C22820 * C600 + C51025 * C608 + C22821 * C599 +
                     C51009 * C607 + C22822 * C598 + C22817 * C606) *
                        C121 +
                    (C22820 * C604 + C51025 * C612 + C22821 * C603 +
                     C51009 * C611 + C22822 * C602 + C22817 * C610) *
                        C50778) *
                       C50866) *
                      C50878 * C503) *
                     C50974 +
                 ((((C23012 + C23013 + C23014) * C121 +
                    (C23015 + C23016 + C23017) * C50778) *
                       C22818 +
                   ((C23346 + C23347 + C23348) * C121 +
                    (C23349 + C23350 + C23351) * C50778) *
                       C50866) *
                      C50878 * C502 -
                  (((C23017 + C23016 + C23015) * C50778 +
                    (C23014 + C23013 + C23012) * C121) *
                       C50866 +
                   ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                     C51009 * C145 + C22820 * C134 + C51025 * C144) *
                        C50778 +
                    (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                     C51009 * C131 + C22820 * C123 + C51025 * C130) *
                        C121) *
                       C22818) *
                      C50878 * C501 -
                  (((C22822 * C601 + C22817 * C609 + C22821 * C602 +
                     C51009 * C610 + C22820 * C603 + C51025 * C611) *
                        C50778 +
                    (C22822 * C597 + C22817 * C605 + C22821 * C598 +
                     C51009 * C606 + C22820 * C599 + C51025 * C607) *
                        C121) *
                       C50866 +
                   ((C23351 + C23350 + C23349) * C50778 +
                    (C23348 + C23347 + C23346) * C121) *
                       C22818) *
                      C50878 * C503) *
                     C50721)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                    C51009 * C130 + C22822 * C124 + C22817 * C131) *
                       C121 +
                   (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                    C51009 * C144 + C22822 * C135 + C22817 * C145) *
                       C50778) *
                      C22818 +
                  ((C22820 * C256 + C51025 * C266 + C22821 * C255 +
                    C51009 * C265 + C22822 * C254 + C22817 * C264) *
                       C121 +
                   (C22820 * C262 + C51025 * C274 + C22821 * C261 +
                    C51009 * C273 + C22822 * C260 + C22817 * C272) *
                       C50778) *
                      C50866) *
                     C50878 * C50748 * C113 -
                 (((C22822 * C259 + C22817 * C271 + C22821 * C260 +
                    C51009 * C272 + C22820 * C261 + C51025 * C273) *
                       C50778 +
                   (C22822 * C253 + C22817 * C263 + C22821 * C254 +
                    C51009 * C264 + C22820 * C255 + C51025 * C265) *
                       C121) *
                      C50866 +
                  ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                    C51009 * C145 + C22820 * C134 + C51025 * C144) *
                       C50778 +
                   (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                    C51009 * C131 + C22820 * C123 + C51025 * C130) *
                       C121) *
                      C22818) *
                     C50878 * C50748 * C114 +
                 (((C22820 * C124 + C51025 * C131 + C22821 * C125 +
                    C51009 * C132 + C22822 * C126 + C22817 * C138) *
                       C121 +
                   (C22820 * C135 + C51025 * C145 + C22821 * C136 +
                    C51009 * C146 + C22822 * C137 + C22817 * C147) *
                       C50778) *
                      C22818 +
                  ((C22820 * C254 + C51025 * C264 + C22821 * C253 +
                    C51009 * C263 + C22822 * C257 + C22817 * C267) *
                       C121 +
                   (C22820 * C260 + C51025 * C272 + C22821 * C259 +
                    C51009 * C271 + C22822 * C268 + C22817 * C275) *
                       C50778) *
                      C50866) *
                     C50878 * C50748 * C115 -
                 (((C22822 * C269 + C22817 * C276 + C22821 * C268 +
                    C51009 * C275 + C22820 * C259 + C51025 * C271) *
                       C50778 +
                   (C22822 * C258 + C22817 * C270 + C22821 * C257 +
                    C51009 * C267 + C22820 * C253 + C51025 * C263) *
                       C121) *
                      C50866 +
                  ((C22822 * C140 + C22817 * C148 + C22821 * C137 +
                    C51009 * C147 + C22820 * C136 + C51025 * C146) *
                       C50778 +
                   (C22822 * C127 + C22817 * C139 + C22821 * C126 +
                    C51009 * C138 + C22820 * C125 + C51025 * C132) *
                       C121) *
                      C22818) *
                     C50878 * C50748 * C116)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                    C51009 * C130 + C22822 * C124 + C22817 * C131) *
                       C844 +
                   (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                    C51009 * C144 + C22822 * C135 + C22817 * C145) *
                       C841 -
                   (C22822 * C380 + C22817 * C386 + C22821 * C381 +
                    C51009 * C387 + C22820 * C382 + C51025 * C388) *
                       C845 -
                   (C22822 * C390 + C22817 * C398 + C22821 * C391 +
                    C51009 * C399 + C22820 * C392 + C51025 * C400) *
                       C842 +
                   (C22820 * C847 + C51025 * C852 + C22821 * C848 +
                    C51009 * C853 + C22822 * C849 + C22817 * C854) *
                       C846 +
                   (C22820 * C856 + C51025 * C862 + C22821 * C857 +
                    C51009 * C863 + C22822 * C858 + C22817 * C864) *
                       C843) *
                      C22818 +
                  ((C23006 + C23007 + C23008) * C844 +
                   (C23009 + C23010 + C23011) * C841 -
                   (C23638 + C23639 + C23640) * C845 -
                   (C23641 + C23642 + C23643) * C842 +
                   (C22820 * C968 + C51025 * C972 + C22821 * C967 +
                    C51009 * C971 + C22822 * C966 + C22817 * C970) *
                       C846 +
                   (C22820 * C976 + C51025 * C980 + C22821 * C975 +
                    C51009 * C979 + C22822 * C974 + C22817 * C978) *
                       C843) *
                      C50866) *
                     C50878 * C50748 * C50974 +
                 (((C22820 * C381 + C51025 * C387 + C22821 * C380 +
                    C51009 * C386 + C22822 * C379 + C22817 * C385) *
                       C845 -
                   ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                     C51009 * C145 + C22820 * C134 + C51025 * C144) *
                        C841 +
                    (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                     C51009 * C131 + C22820 * C123 + C51025 * C130) *
                        C844) +
                   (C22820 * C391 + C51025 * C399 + C22821 * C390 +
                    C51009 * C398 + C22822 * C389 + C22817 * C397) *
                       C842 -
                   (C22822 * C850 + C22817 * C855 + C22821 * C849 +
                    C51009 * C854 + C22820 * C848 + C51025 * C853) *
                       C846 -
                   (C22822 * C859 + C22817 * C865 + C22821 * C858 +
                    C51009 * C864 + C22820 * C857 + C51025 * C863) *
                       C843) *
                      C22818 +
                  ((C22820 * C712 + C51025 * C720 + C22821 * C713 +
                    C51009 * C721 + C22822 * C714 + C22817 * C722) *
                       C845 -
                   ((C23017 + C23016 + C23015) * C841 +
                    (C23014 + C23013 + C23012) * C844) +
                   (C22820 * C724 + C51025 * C736 + C22821 * C725 +
                    C51009 * C737 + C22822 * C726 + C22817 * C738) *
                       C842 -
                   (C22822 * C965 + C22817 * C969 + C22821 * C966 +
                    C51009 * C970 + C22820 * C967 + C51025 * C971) *
                       C846 -
                   (C22822 * C973 + C22817 * C977 + C22821 * C974 +
                    C51009 * C978 + C22820 * C975 + C51025 * C979) *
                       C843) *
                      C50866) *
                     C50878 * C50748 * C50721)) /
                   (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                    C51009 * C130 + C22822 * C124 + C22817 * C131) *
                       C121 +
                   (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                    C51009 * C144 + C22822 * C135 + C22817 * C145) *
                       C50778) *
                      C22818 +
                  ((C23006 + C23007 + C23008) * C121 +
                   (C23009 + C23010 + C23011) * C50778) *
                      C50866) *
                     C50878 * C592 -
                 (((C23340 + C23341 + C23342) * C50778 +
                   (C23343 + C23344 + C23345) * C121) *
                      C50866 +
                  ((C23011 + C23010 + C23009) * C50778 +
                   (C23008 + C23007 + C23006) * C121) *
                      C22818) *
                     C50878 * C593 +
                 (((C23345 + C23344 + C23343) * C121 +
                   (C23342 + C23341 + C23340) * C50778) *
                      C22818 +
                  ((C23462 + C23463 + C23464) * C121 +
                   (C23465 + C23466 + C23467) * C50778) *
                      C50866) *
                     C50878 * C594 -
                 (((C22822 * C2808 + C22817 * C2814 + C22821 * C2809 +
                    C51009 * C2815 + C22820 * C2810 + C51025 * C2816) *
                       C50778 +
                   (C22822 * C2805 + C22817 * C2811 + C22821 * C2806 +
                    C51009 * C2812 + C22820 * C2807 + C51025 * C2813) *
                       C121) *
                      C50866 +
                  ((C23467 + C23466 + C23465) * C50778 +
                   (C23464 + C23463 + C23462) * C121) *
                      C22818) *
                     C50878 * C595) *
                C50716) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                     C51009 * C130 + C22822 * C124 + C22817 * C131) *
                        C121 +
                    (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                     C51009 * C144 + C22822 * C135 + C22817 * C145) *
                        C50778) *
                       C22818 +
                   ((C23006 + C23007 + C23008) * C121 +
                    (C23009 + C23010 + C23011) * C50778) *
                       C50866) *
                      C50878 * C50981 -
                  (((C22822 * C517 + C22817 * C523 + C22821 * C516 +
                     C51009 * C522 + C22820 * C515 + C51025 * C521) *
                        C50778 +
                    (C22822 * C508 + C22817 * C513 + C22821 * C507 +
                     C51009 * C512 + C22820 * C506 + C51025 * C511) *
                        C121) *
                       C50866 +
                   ((C23011 + C23010 + C23009) * C50778 +
                    (C23008 + C23007 + C23006) * C121) *
                       C22818) *
                      C50878 * C50764) *
                     C250 +
                 ((((C23012 + C23013 + C23014) * C121 +
                    (C23015 + C23016 + C23017) * C50778) *
                       C22818 +
                   ((C22820 * C507 + C51025 * C512 + C22821 * C508 +
                     C51009 * C513 + C22822 * C509 + C22817 * C514) *
                        C121 +
                    (C22820 * C516 + C51025 * C522 + C22821 * C517 +
                     C51009 * C523 + C22822 * C518 + C22817 * C524) *
                        C50778) *
                       C50866) *
                      C50878 * C50764 -
                  (((C23017 + C23016 + C23015) * C50778 +
                    (C23014 + C23013 + C23012) * C121) *
                       C50866 +
                   ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                     C51009 * C145 + C22820 * C134 + C51025 * C144) *
                        C50778 +
                    (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                     C51009 * C131 + C22820 * C123 + C51025 * C130) *
                        C121) *
                       C22818) *
                      C50878 * C50981) *
                     C251 +
                 ((((C22820 * C124 + C51025 * C131 + C22821 * C125 +
                     C51009 * C132 + C22822 * C126 + C22817 * C138) *
                        C121 +
                    (C22820 * C135 + C51025 * C145 + C22821 * C136 +
                     C51009 * C146 + C22822 * C137 + C22817 * C147) *
                        C50778) *
                       C22818 +
                   ((C23018 + C23019 + C23020) * C121 +
                    (C23021 + C23022 + C23023) * C50778) *
                       C50866) *
                      C50878 * C50981 -
                  (((C22822 * C519 + C22817 * C525 + C22821 * C518 +
                     C51009 * C524 + C22820 * C517 + C51025 * C523) *
                        C50778 +
                    (C22822 * C510 + C22817 * C520 + C22821 * C509 +
                     C51009 * C514 + C22820 * C508 + C51025 * C513) *
                        C121) *
                       C50866 +
                   ((C23023 + C23022 + C23021) * C50778 +
                    (C23020 + C23019 + C23018) * C121) *
                       C22818) *
                      C50878 * C50764) *
                     C252)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                    C51009 * C130 + C22822 * C124 + C22817 * C131) *
                       C844 +
                   (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                    C51009 * C144 + C22822 * C135 + C22817 * C145) *
                       C841 -
                   (C22822 * C380 + C22817 * C386 + C22821 * C381 +
                    C51009 * C387 + C22820 * C382 + C51025 * C388) *
                       C845 -
                   (C22822 * C390 + C22817 * C398 + C22821 * C391 +
                    C51009 * C399 + C22820 * C392 + C51025 * C400) *
                       C842 +
                   (C22820 * C847 + C51025 * C852 + C22821 * C848 +
                    C51009 * C853 + C22822 * C849 + C22817 * C854) *
                       C846 +
                   (C22820 * C856 + C51025 * C862 + C22821 * C857 +
                    C51009 * C863 + C22822 * C858 + C22817 * C864) *
                       C843) *
                      C22818 +
                  ((C23006 + C23007 + C23008) * C844 +
                   (C23009 + C23010 + C23011) * C841 -
                   (C23638 + C23639 + C23640) * C845 -
                   (C23641 + C23642 + C23643) * C842 +
                   (C23954 + C23955 + C23956) * C846 +
                   (C23957 + C23958 + C23959) * C843) *
                      C50866) *
                     C50878 * C50981 +
                 (((C23640 + C23639 + C23638) * C845 -
                   ((C23011 + C23010 + C23009) * C841 +
                    (C23008 + C23007 + C23006) * C844) +
                   (C23643 + C23642 + C23641) * C842 -
                   (C23956 + C23955 + C23954) * C846 -
                   (C23959 + C23958 + C23957) * C843) *
                      C22818 +
                  ((C23644 + C23645 + C23646) * C845 -
                   ((C23340 + C23341 + C23342) * C841 +
                    (C23343 + C23344 + C23345) * C844) +
                   (C23647 + C23648 + C23649) * C842 -
                   (C22822 * C3321 + C22817 * C3324 + C22821 * C3322 +
                    C51009 * C3325 + C22820 * C3323 + C51025 * C3326) *
                       C846 -
                   (C22822 * C3327 + C22817 * C3330 + C22821 * C3328 +
                    C51009 * C3331 + C22820 * C3329 + C51025 * C3332) *
                       C843) *
                      C50866) *
                     C50878 * C50764) *
                C50716) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                    C51009 * C130 + C22822 * C124 + C22817 * C131) *
                       C377 +
                   (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                    C51009 * C144 + C22822 * C135 + C22817 * C145) *
                       C50983 -
                   (C22822 * C380 + C22817 * C386 + C22821 * C381 +
                    C51009 * C387 + C22820 * C382 + C51025 * C388) *
                       C378 -
                   (C22822 * C390 + C22817 * C398 + C22821 * C391 +
                    C51009 * C399 + C22820 * C392 + C51025 * C400) *
                       C50790) *
                      C22818 +
                  ((C23006 + C23007 + C23008) * C377 +
                   (C23009 + C23010 + C23011) * C50983 -
                   (C23638 + C23639 + C23640) * C378 -
                   (C23641 + C23642 + C23643) * C50790) *
                      C50866) *
                     C50878 * C501 +
                 (((C23640 + C23639 + C23638) * C378 -
                   ((C23011 + C23010 + C23009) * C50983 +
                    (C23008 + C23007 + C23006) * C377) +
                   (C23643 + C23642 + C23641) * C50790) *
                      C22818 +
                  ((C23644 + C23645 + C23646) * C378 -
                   ((C23340 + C23341 + C23342) * C50983 +
                    (C23343 + C23344 + C23345) * C377) +
                   (C23647 + C23648 + C23649) * C50790) *
                      C50866) *
                     C50878 * C502 +
                 (((C23345 + C23344 + C23343) * C377 +
                   (C23342 + C23341 + C23340) * C50983 -
                   (C23646 + C23645 + C23644) * C378 -
                   (C23649 + C23648 + C23647) * C50790) *
                      C22818 +
                  ((C23462 + C23463 + C23464) * C377 +
                   (C23465 + C23466 + C23467) * C50983 -
                   (C22822 * C2981 + C22817 * C2984 + C22821 * C2982 +
                    C51009 * C2985 + C22820 * C2983 + C51025 * C2986) *
                       C378 -
                   (C22822 * C2987 + C22817 * C2990 + C22821 * C2988 +
                    C51009 * C2991 + C22820 * C2989 + C51025 * C2992) *
                       C50790) *
                      C50866) *
                     C50878 * C503) *
                C50716) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                    C51009 * C130 + C22822 * C124 + C22817 * C131) *
                       C377 +
                   (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                    C51009 * C144 + C22822 * C135 + C22817 * C145) *
                       C50983 -
                   (C22822 * C380 + C22817 * C386 + C22821 * C381 +
                    C51009 * C387 + C22820 * C382 + C51025 * C388) *
                       C378 -
                   (C22822 * C390 + C22817 * C398 + C22821 * C391 +
                    C51009 * C399 + C22820 * C392 + C51025 * C400) *
                       C50790) *
                      C22818 +
                  ((C23006 + C23007 + C23008) * C377 +
                   (C23009 + C23010 + C23011) * C50983 -
                   (C22822 * C713 + C22817 * C721 + C22821 * C712 +
                    C51009 * C720 + C22820 * C711 + C51025 * C719) *
                       C378 -
                   (C22822 * C725 + C22817 * C737 + C22821 * C724 +
                    C51009 * C736 + C22820 * C723 + C51025 * C735) *
                       C50790) *
                      C50866) *
                     C50878 * C50748 * C250 +
                 (((C22820 * C381 + C51025 * C387 + C22821 * C380 +
                    C51009 * C386 + C22822 * C379 + C22817 * C385) *
                       C378 -
                   ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                     C51009 * C145 + C22820 * C134 + C51025 * C144) *
                        C50983 +
                    (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                     C51009 * C131 + C22820 * C123 + C51025 * C130) *
                        C377) +
                   (C22820 * C391 + C51025 * C399 + C22821 * C390 +
                    C51009 * C398 + C22822 * C389 + C22817 * C397) *
                       C50790) *
                      C22818 +
                  ((C22820 * C712 + C51025 * C720 + C22821 * C713 +
                    C51009 * C721 + C22822 * C714 + C22817 * C722) *
                       C378 -
                   ((C23017 + C23016 + C23015) * C50983 +
                    (C23014 + C23013 + C23012) * C377) +
                   (C22820 * C724 + C51025 * C736 + C22821 * C725 +
                    C51009 * C737 + C22822 * C726 + C22817 * C738) *
                       C50790) *
                      C50866) *
                     C50878 * C50748 * C251 +
                 (((C22820 * C124 + C51025 * C131 + C22821 * C125 +
                    C51009 * C132 + C22822 * C126 + C22817 * C138) *
                       C377 +
                   (C22820 * C135 + C51025 * C145 + C22821 * C136 +
                    C51009 * C146 + C22822 * C137 + C22817 * C147) *
                       C50983 -
                   (C22822 * C383 + C22817 * C393 + C22821 * C379 +
                    C51009 * C385 + C22820 * C380 + C51025 * C386) *
                       C378 -
                   (C22822 * C394 + C22817 * C401 + C22821 * C389 +
                    C51009 * C397 + C22820 * C390 + C51025 * C398) *
                       C50790) *
                      C22818 +
                  ((C23018 + C23019 + C23020) * C377 +
                   (C23021 + C23022 + C23023) * C50983 -
                   (C22822 * C1407 + C22817 * C1408 + C22821 * C714 +
                    C51009 * C722 + C22820 * C713 + C51025 * C721) *
                       C378 -
                   (C22822 * C1409 + C22817 * C1410 + C22821 * C726 +
                    C51009 * C738 + C22820 * C725 + C51025 * C737) *
                       C50790) *
                      C50866) *
                     C50878 * C50748 * C252)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                   C51009 * C130 + C22822 * C124 + C22817 * C131) *
                      C1051 +
                  (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                   C51009 * C144 + C22822 * C135 + C22817 * C145) *
                      C1047 -
                  (C22822 * C380 + C22817 * C386 + C22821 * C381 +
                   C51009 * C387 + C22820 * C382 + C51025 * C388) *
                      C1052 -
                  (C22822 * C390 + C22817 * C398 + C22821 * C391 +
                   C51009 * C399 + C22820 * C392 + C51025 * C400) *
                      C1048 +
                  (C22820 * C847 + C51025 * C852 + C22821 * C848 +
                   C51009 * C853 + C22822 * C849 + C22817 * C854) *
                      C1053 +
                  (C22820 * C856 + C51025 * C862 + C22821 * C857 +
                   C51009 * C863 + C22822 * C858 + C22817 * C864) *
                      C1049 -
                  (C22822 * C1056 + C22817 * C1060 + C22821 * C1057 +
                   C51009 * C1061 + C22820 * C1058 + C51025 * C1062) *
                      C1054 -
                  (C22822 * C1064 + C22817 * C1068 + C22821 * C1065 +
                   C51009 * C1069 + C22820 * C1066 + C51025 * C1070) *
                      C1050) *
                     C22818 +
                 ((C23006 + C23007 + C23008) * C1051 +
                  (C23009 + C23010 + C23011) * C1047 -
                  (C23638 + C23639 + C23640) * C1052 -
                  (C23641 + C23642 + C23643) * C1048 +
                  (C23954 + C23955 + C23956) * C1053 +
                  (C23957 + C23958 + C23959) * C1049 -
                  (C22822 * C3449 + C22817 * C3452 + C22821 * C3450 +
                   C51009 * C3453 + C22820 * C3451 + C51025 * C3454) *
                      C1054 -
                  (C22822 * C3455 + C22817 * C3458 + C22821 * C3456 +
                   C51009 * C3459 + C22820 * C3457 + C51025 * C3460) *
                      C1050) *
                     C50866) *
                C50878 * C50748 * C50716) /
                   (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                    C51009 * C130 + C22822 * C124 + C22817 * C131) *
                       C1511 +
                   (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                    C51009 * C144 + C22822 * C135 + C22817 * C145) *
                       C1509 -
                   (C22822 * C380 + C22817 * C386 + C22821 * C381 +
                    C51009 * C387 + C22820 * C382 + C51025 * C388) *
                       C1512 -
                   (C22822 * C390 + C22817 * C398 + C22821 * C391 +
                    C51009 * C399 + C22820 * C392 + C51025 * C400) *
                       C50790) *
                      C22818 +
                  ((C23006 + C23007 + C23008) * C1511 +
                   (C23009 + C23010 + C23011) * C1509 -
                   (C23638 + C23639 + C23640) * C1512 -
                   (C23641 + C23642 + C23643) * C50790) *
                      C50866) *
                     C50878 * C50748 * C51026 +
                 (((C22820 * C381 + C51025 * C387 + C22821 * C380 +
                    C51009 * C386 + C22822 * C379 + C22817 * C385) *
                       C1512 -
                   ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                     C51009 * C145 + C22820 * C134 + C51025 * C144) *
                        C1509 +
                    (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                     C51009 * C131 + C22820 * C123 + C51025 * C130) *
                        C1511) +
                   (C22820 * C391 + C51025 * C399 + C22821 * C390 +
                    C51009 * C398 + C22822 * C389 + C22817 * C397) *
                       C50790) *
                      C22818 +
                  ((C24556 + C24557 + C24558) * C1512 -
                   ((C23017 + C23016 + C23015) * C1509 +
                    (C23014 + C23013 + C23012) * C1511) +
                   (C24559 + C24560 + C24561) * C50790) *
                      C50866) *
                     C50878 * C50748 * C51012 +
                 (((C22820 * C124 + C51025 * C131 + C22821 * C125 +
                    C51009 * C132 + C22822 * C126 + C22817 * C138) *
                       C1511 +
                   (C22820 * C135 + C51025 * C145 + C22821 * C136 +
                    C51009 * C146 + C22822 * C137 + C22817 * C147) *
                       C1509 -
                   (C22822 * C383 + C22817 * C393 + C22821 * C379 +
                    C51009 * C385 + C22820 * C380 + C51025 * C386) *
                       C1512 -
                   (C22822 * C394 + C22817 * C401 + C22821 * C389 +
                    C51009 * C397 + C22820 * C390 + C51025 * C398) *
                       C50790) *
                      C22818 +
                  ((C23018 + C23019 + C23020) * C1511 +
                   (C23021 + C23022 + C23023) * C1509 -
                   (C22822 * C1407 + C22817 * C1408 + C22821 * C714 +
                    C51009 * C722 + C22820 * C713 + C51025 * C721) *
                       C1512 -
                   (C22822 * C1409 + C22817 * C1410 + C22821 * C726 +
                    C51009 * C738 + C22820 * C725 + C51025 * C737) *
                       C50790) *
                      C50866) *
                     C50878 * C50748 * C1173)) /
               (p * q * std::sqrt(p + q));
    d2ee[10] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                      C51009 * C130 + C22822 * C124 + C22817 * C131) *
                         C1511 +
                     (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                      C51009 * C144 + C22822 * C135 + C22817 * C145) *
                         C1509 -
                     (C22822 * C380 + C22817 * C386 + C22821 * C381 +
                      C51009 * C387 + C22820 * C382 + C51025 * C388) *
                         C1512 -
                     (C22822 * C390 + C22817 * C398 + C22821 * C391 +
                      C51009 * C399 + C22820 * C392 + C51025 * C400) *
                         C50790) *
                        C22818 +
                    ((C23006 + C23007 + C23008) * C1511 +
                     (C23009 + C23010 + C23011) * C1509 -
                     (C23638 + C23639 + C23640) * C1512 -
                     (C23641 + C23642 + C23643) * C50790) *
                        C50866) *
                       C50878 * C50981 +
                   (((C23640 + C23639 + C23638) * C1512 -
                     ((C23011 + C23010 + C23009) * C1509 +
                      (C23008 + C23007 + C23006) * C1511) +
                     (C23643 + C23642 + C23641) * C50790) *
                        C22818 +
                    ((C23644 + C23645 + C23646) * C1512 -
                     ((C23340 + C23341 + C23342) * C1509 +
                      (C23343 + C23344 + C23345) * C1511) +
                     (C23647 + C23648 + C23649) * C50790) *
                        C50866) *
                       C50878 * C50764) *
                      C1275 +
                  ((((C22820 * C381 + C51025 * C387 + C22821 * C380 +
                      C51009 * C386 + C22822 * C379 + C22817 * C385) *
                         C1512 -
                     ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                       C51009 * C145 + C22820 * C134 + C51025 * C144) *
                          C1509 +
                      (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                       C51009 * C131 + C22820 * C123 + C51025 * C130) *
                          C1511) +
                     (C22820 * C391 + C51025 * C399 + C22821 * C390 +
                      C51009 * C398 + C22822 * C389 + C22817 * C397) *
                         C50790) *
                        C22818 +
                    ((C24556 + C24557 + C24558) * C1512 -
                     ((C23017 + C23016 + C23015) * C1509 +
                      (C23014 + C23013 + C23012) * C1511) +
                     (C24559 + C24560 + C24561) * C50790) *
                        C50866) *
                       C50878 * C50981 +
                   (((C23012 + C23013 + C23014) * C1511 +
                     (C23015 + C23016 + C23017) * C1509 -
                     (C24558 + C24557 + C24556) * C1512 -
                     (C24561 + C24560 + C24559) * C50790) *
                        C22818 +
                    ((C23346 + C23347 + C23348) * C1511 +
                     (C23349 + C23350 + C23351) * C1509 -
                     (C22822 * C715 + C22817 * C727 + C22821 * C716 +
                      C51009 * C728 + C22820 * C717 + C51025 * C729) *
                         C1512 -
                     (C22822 * C731 + C22817 * C739 + C22821 * C732 +
                      C51009 * C740 + C22820 * C733 + C51025 * C741) *
                         C50790) *
                        C50866) *
                       C50878 * C50764) *
                      C50721)) /
                (p * q * std::sqrt(p + q));
    d2ee[11] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                     C51009 * C130 + C22822 * C124 + C22817 * C131) *
                        C1744 +
                    (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                     C51009 * C144 + C22822 * C135 + C22817 * C145) *
                        C51028 -
                    (C22822 * C380 + C22817 * C386 + C22821 * C381 +
                     C51009 * C387 + C22820 * C382 + C51025 * C388) *
                        C1745 -
                    (C22822 * C390 + C22817 * C398 + C22821 * C391 +
                     C51009 * C399 + C22820 * C392 + C51025 * C400) *
                        C51018 +
                    (C22820 * C847 + C51025 * C852 + C22821 * C848 +
                     C51009 * C853 + C22822 * C849 + C22817 * C854) *
                        C1746 +
                    (C22820 * C856 + C51025 * C862 + C22821 * C857 +
                     C51009 * C863 + C22822 * C858 + C22817 * C864) *
                        C1743) *
                       C22818 +
                   ((C23006 + C23007 + C23008) * C1744 +
                    (C23009 + C23010 + C23011) * C51028 -
                    (C23638 + C23639 + C23640) * C1745 -
                    (C23641 + C23642 + C23643) * C51018 +
                    (C23954 + C23955 + C23956) * C1746 +
                    (C23957 + C23958 + C23959) * C1743) *
                       C50866) *
                      C50878 * C50748 * C1275 +
                  (((C22820 * C381 + C51025 * C387 + C22821 * C380 +
                     C51009 * C386 + C22822 * C379 + C22817 * C385) *
                        C1745 -
                    ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                      C51009 * C145 + C22820 * C134 + C51025 * C144) *
                         C51028 +
                     (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                      C51009 * C131 + C22820 * C123 + C51025 * C130) *
                         C1744) +
                    (C22820 * C391 + C51025 * C399 + C22821 * C390 +
                     C51009 * C398 + C22822 * C389 + C22817 * C397) *
                        C51018 -
                    (C22822 * C850 + C22817 * C855 + C22821 * C849 +
                     C51009 * C854 + C22820 * C848 + C51025 * C853) *
                        C1746 -
                    (C22822 * C859 + C22817 * C865 + C22821 * C858 +
                     C51009 * C864 + C22820 * C857 + C51025 * C863) *
                        C1743) *
                       C22818 +
                   ((C24556 + C24557 + C24558) * C1745 -
                    ((C23017 + C23016 + C23015) * C51028 +
                     (C23014 + C23013 + C23012) * C1744) +
                    (C24559 + C24560 + C24561) * C51018 -
                    (C22822 * C965 + C22817 * C969 + C22821 * C966 +
                     C51009 * C970 + C22820 * C967 + C51025 * C971) *
                        C1746 -
                    (C22822 * C973 + C22817 * C977 + C22821 * C974 +
                     C51009 * C978 + C22820 * C975 + C51025 * C979) *
                        C1743) *
                       C50866) *
                      C50878 * C50748 * C50721)) /
                (p * q * std::sqrt(p + q));
    d2ee[12] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                     C51009 * C130 + C22822 * C124 + C22817 * C131) *
                        C121 +
                    (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                     C51009 * C144 + C22822 * C135 + C22817 * C145) *
                        C50778) *
                       C22818 +
                   ((C22820 * C256 + C51025 * C266 + C22821 * C255 +
                     C51009 * C265 + C22822 * C254 + C22817 * C264) *
                        C121 +
                    (C22820 * C262 + C51025 * C274 + C22821 * C261 +
                     C51009 * C273 + C22822 * C260 + C22817 * C272) *
                        C50778) *
                       C50866) *
                      C50878 * C50748 * C113 -
                  (((C22822 * C259 + C22817 * C271 + C22821 * C260 +
                     C51009 * C272 + C22820 * C261 + C51025 * C273) *
                        C50778 +
                    (C22822 * C253 + C22817 * C263 + C22821 * C254 +
                     C51009 * C264 + C22820 * C255 + C51025 * C265) *
                        C121) *
                       C50866 +
                   ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                     C51009 * C145 + C22820 * C134 + C51025 * C144) *
                        C50778 +
                    (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                     C51009 * C131 + C22820 * C123 + C51025 * C130) *
                        C121) *
                       C22818) *
                      C50878 * C50748 * C114 +
                  (((C22820 * C124 + C51025 * C131 + C22821 * C125 +
                     C51009 * C132 + C22822 * C126 + C22817 * C138) *
                        C121 +
                    (C22820 * C135 + C51025 * C145 + C22821 * C136 +
                     C51009 * C146 + C22822 * C137 + C22817 * C147) *
                        C50778) *
                       C22818 +
                   ((C22820 * C254 + C51025 * C264 + C22821 * C253 +
                     C51009 * C263 + C22822 * C257 + C22817 * C267) *
                        C121 +
                    (C22820 * C260 + C51025 * C272 + C22821 * C259 +
                     C51009 * C271 + C22822 * C268 + C22817 * C275) *
                        C50778) *
                       C50866) *
                      C50878 * C50748 * C115 -
                  (((C22822 * C269 + C22817 * C276 + C22821 * C268 +
                     C51009 * C275 + C22820 * C259 + C51025 * C271) *
                        C50778 +
                    (C22822 * C258 + C22817 * C270 + C22821 * C257 +
                     C51009 * C267 + C22820 * C253 + C51025 * C263) *
                        C121) *
                       C50866 +
                   ((C22822 * C140 + C22817 * C148 + C22821 * C137 +
                     C51009 * C147 + C22820 * C136 + C51025 * C146) *
                        C50778 +
                    (C22822 * C127 + C22817 * C139 + C22821 * C126 +
                     C51009 * C138 + C22820 * C125 + C51025 * C132) *
                        C121) *
                       C22818) *
                      C50878 * C50748 * C116)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                      C51009 * C130 + C22822 * C124 + C22817 * C131) *
                         C121 +
                     (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                      C51009 * C144 + C22822 * C135 + C22817 * C145) *
                         C50778) *
                        C22818 +
                    ((C23006 + C23007 + C23008) * C121 +
                     (C23009 + C23010 + C23011) * C50778) *
                        C50866) *
                       C50878 * C501 -
                   (((C23340 + C23341 + C23342) * C50778 +
                     (C23343 + C23344 + C23345) * C121) *
                        C50866 +
                    ((C23011 + C23010 + C23009) * C50778 +
                     (C23008 + C23007 + C23006) * C121) *
                        C22818) *
                       C50878 * C502 +
                   (((C23345 + C23344 + C23343) * C121 +
                     (C23342 + C23341 + C23340) * C50778) *
                        C22818 +
                    ((C22820 * C600 + C51025 * C608 + C22821 * C599 +
                      C51009 * C607 + C22822 * C598 + C22817 * C606) *
                         C121 +
                     (C22820 * C604 + C51025 * C612 + C22821 * C603 +
                      C51009 * C611 + C22822 * C602 + C22817 * C610) *
                         C50778) *
                        C50866) *
                       C50878 * C503) *
                      C50974 +
                  ((((C23012 + C23013 + C23014) * C121 +
                     (C23015 + C23016 + C23017) * C50778) *
                        C22818 +
                    ((C23346 + C23347 + C23348) * C121 +
                     (C23349 + C23350 + C23351) * C50778) *
                        C50866) *
                       C50878 * C502 -
                   (((C23017 + C23016 + C23015) * C50778 +
                     (C23014 + C23013 + C23012) * C121) *
                        C50866 +
                    ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                      C51009 * C145 + C22820 * C134 + C51025 * C144) *
                         C50778 +
                     (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                      C51009 * C131 + C22820 * C123 + C51025 * C130) *
                         C121) *
                        C22818) *
                       C50878 * C501 -
                   (((C22822 * C601 + C22817 * C609 + C22821 * C602 +
                      C51009 * C610 + C22820 * C603 + C51025 * C611) *
                         C50778 +
                     (C22822 * C597 + C22817 * C605 + C22821 * C598 +
                      C51009 * C606 + C22820 * C599 + C51025 * C607) *
                         C121) *
                        C50866 +
                    ((C23351 + C23350 + C23349) * C50778 +
                     (C23348 + C23347 + C23346) * C121) *
                        C22818) *
                       C50878 * C503) *
                      C50721)) /
                    (p * q * std::sqrt(p + q));
    d2ee[13] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                      C51009 * C130 + C22822 * C124 + C22817 * C131) *
                         C121 +
                     (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                      C51009 * C144 + C22822 * C135 + C22817 * C145) *
                         C50778) *
                        C22818 +
                    ((C23006 + C23007 + C23008) * C121 +
                     (C23009 + C23010 + C23011) * C50778) *
                        C50866) *
                       C50878 * C50981 -
                   (((C22822 * C517 + C22817 * C523 + C22821 * C516 +
                      C51009 * C522 + C22820 * C515 + C51025 * C521) *
                         C50778 +
                     (C22822 * C508 + C22817 * C513 + C22821 * C507 +
                      C51009 * C512 + C22820 * C506 + C51025 * C511) *
                         C121) *
                        C50866 +
                    ((C23011 + C23010 + C23009) * C50778 +
                     (C23008 + C23007 + C23006) * C121) *
                        C22818) *
                       C50878 * C50764) *
                      C250 +
                  ((((C23012 + C23013 + C23014) * C121 +
                     (C23015 + C23016 + C23017) * C50778) *
                        C22818 +
                    ((C22820 * C507 + C51025 * C512 + C22821 * C508 +
                      C51009 * C513 + C22822 * C509 + C22817 * C514) *
                         C121 +
                     (C22820 * C516 + C51025 * C522 + C22821 * C517 +
                      C51009 * C523 + C22822 * C518 + C22817 * C524) *
                         C50778) *
                        C50866) *
                       C50878 * C50764 -
                   (((C23017 + C23016 + C23015) * C50778 +
                     (C23014 + C23013 + C23012) * C121) *
                        C50866 +
                    ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                      C51009 * C145 + C22820 * C134 + C51025 * C144) *
                         C50778 +
                     (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                      C51009 * C131 + C22820 * C123 + C51025 * C130) *
                         C121) *
                        C22818) *
                       C50878 * C50981) *
                      C251 +
                  ((((C22820 * C124 + C51025 * C131 + C22821 * C125 +
                      C51009 * C132 + C22822 * C126 + C22817 * C138) *
                         C121 +
                     (C22820 * C135 + C51025 * C145 + C22821 * C136 +
                      C51009 * C146 + C22822 * C137 + C22817 * C147) *
                         C50778) *
                        C22818 +
                    ((C23018 + C23019 + C23020) * C121 +
                     (C23021 + C23022 + C23023) * C50778) *
                        C50866) *
                       C50878 * C50981 -
                   (((C22822 * C519 + C22817 * C525 + C22821 * C518 +
                      C51009 * C524 + C22820 * C517 + C51025 * C523) *
                         C50778 +
                     (C22822 * C510 + C22817 * C520 + C22821 * C509 +
                      C51009 * C514 + C22820 * C508 + C51025 * C513) *
                         C121) *
                        C50866 +
                    ((C23023 + C23022 + C23021) * C50778 +
                     (C23020 + C23019 + C23018) * C121) *
                        C22818) *
                       C50878 * C50764) *
                      C252)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                     C51009 * C130 + C22822 * C124 + C22817 * C131) *
                        C121 +
                    (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                     C51009 * C144 + C22822 * C135 + C22817 * C145) *
                        C50778) *
                       C22818 +
                   ((C23006 + C23007 + C23008) * C121 +
                    (C23009 + C23010 + C23011) * C50778) *
                       C50866) *
                      C50878 * C592 -
                  (((C23340 + C23341 + C23342) * C50778 +
                    (C23343 + C23344 + C23345) * C121) *
                       C50866 +
                   ((C23011 + C23010 + C23009) * C50778 +
                    (C23008 + C23007 + C23006) * C121) *
                       C22818) *
                      C50878 * C593 +
                  (((C23345 + C23344 + C23343) * C121 +
                    (C23342 + C23341 + C23340) * C50778) *
                       C22818 +
                   ((C23462 + C23463 + C23464) * C121 +
                    (C23465 + C23466 + C23467) * C50778) *
                       C50866) *
                      C50878 * C594 -
                  (((C22822 * C2808 + C22817 * C2814 + C22821 * C2809 +
                     C51009 * C2815 + C22820 * C2810 + C51025 * C2816) *
                        C50778 +
                    (C22822 * C2805 + C22817 * C2811 + C22821 * C2806 +
                     C51009 * C2812 + C22820 * C2807 + C51025 * C2813) *
                        C121) *
                       C50866 +
                   ((C23467 + C23466 + C23465) * C50778 +
                    (C23464 + C23463 + C23462) * C121) *
                       C22818) *
                      C50878 * C595) *
                 C50716) /
                    (p * q * std::sqrt(p + q));
    d2ee[14] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                     C51009 * C130 + C22822 * C124 + C22817 * C131) *
                        C377 +
                    (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                     C51009 * C144 + C22822 * C135 + C22817 * C145) *
                        C50983 -
                    (C22822 * C380 + C22817 * C386 + C22821 * C381 +
                     C51009 * C387 + C22820 * C382 + C51025 * C388) *
                        C378 -
                    (C22822 * C390 + C22817 * C398 + C22821 * C391 +
                     C51009 * C399 + C22820 * C392 + C51025 * C400) *
                        C50790) *
                       C22818 +
                   ((C23006 + C23007 + C23008) * C377 +
                    (C23009 + C23010 + C23011) * C50983 -
                    (C22822 * C713 + C22817 * C721 + C22821 * C712 +
                     C51009 * C720 + C22820 * C711 + C51025 * C719) *
                        C378 -
                    (C22822 * C725 + C22817 * C737 + C22821 * C724 +
                     C51009 * C736 + C22820 * C723 + C51025 * C735) *
                        C50790) *
                       C50866) *
                      C50878 * C50748 * C250 +
                  (((C22820 * C381 + C51025 * C387 + C22821 * C380 +
                     C51009 * C386 + C22822 * C379 + C22817 * C385) *
                        C378 -
                    ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                      C51009 * C145 + C22820 * C134 + C51025 * C144) *
                         C50983 +
                     (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                      C51009 * C131 + C22820 * C123 + C51025 * C130) *
                         C377) +
                    (C22820 * C391 + C51025 * C399 + C22821 * C390 +
                     C51009 * C398 + C22822 * C389 + C22817 * C397) *
                        C50790) *
                       C22818 +
                   ((C22820 * C712 + C51025 * C720 + C22821 * C713 +
                     C51009 * C721 + C22822 * C714 + C22817 * C722) *
                        C378 -
                    ((C23017 + C23016 + C23015) * C50983 +
                     (C23014 + C23013 + C23012) * C377) +
                    (C22820 * C724 + C51025 * C736 + C22821 * C725 +
                     C51009 * C737 + C22822 * C726 + C22817 * C738) *
                        C50790) *
                       C50866) *
                      C50878 * C50748 * C251 +
                  (((C22820 * C124 + C51025 * C131 + C22821 * C125 +
                     C51009 * C132 + C22822 * C126 + C22817 * C138) *
                        C377 +
                    (C22820 * C135 + C51025 * C145 + C22821 * C136 +
                     C51009 * C146 + C22822 * C137 + C22817 * C147) *
                        C50983 -
                    (C22822 * C383 + C22817 * C393 + C22821 * C379 +
                     C51009 * C385 + C22820 * C380 + C51025 * C386) *
                        C378 -
                    (C22822 * C394 + C22817 * C401 + C22821 * C389 +
                     C51009 * C397 + C22820 * C390 + C51025 * C398) *
                        C50790) *
                       C22818 +
                   ((C23018 + C23019 + C23020) * C377 +
                    (C23021 + C23022 + C23023) * C50983 -
                    (C22822 * C1407 + C22817 * C1408 + C22821 * C714 +
                     C51009 * C722 + C22820 * C713 + C51025 * C721) *
                        C378 -
                    (C22822 * C1409 + C22817 * C1410 + C22821 * C726 +
                     C51009 * C738 + C22820 * C725 + C51025 * C737) *
                        C50790) *
                       C50866) *
                      C50878 * C50748 * C252)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                     C51009 * C130 + C22822 * C124 + C22817 * C131) *
                        C377 +
                    (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                     C51009 * C144 + C22822 * C135 + C22817 * C145) *
                        C50983 -
                    (C22822 * C380 + C22817 * C386 + C22821 * C381 +
                     C51009 * C387 + C22820 * C382 + C51025 * C388) *
                        C378 -
                    (C22822 * C390 + C22817 * C398 + C22821 * C391 +
                     C51009 * C399 + C22820 * C392 + C51025 * C400) *
                        C50790) *
                       C22818 +
                   ((C23006 + C23007 + C23008) * C377 +
                    (C23009 + C23010 + C23011) * C50983 -
                    (C23638 + C23639 + C23640) * C378 -
                    (C23641 + C23642 + C23643) * C50790) *
                       C50866) *
                      C50878 * C501 +
                  (((C23640 + C23639 + C23638) * C378 -
                    ((C23011 + C23010 + C23009) * C50983 +
                     (C23008 + C23007 + C23006) * C377) +
                    (C23643 + C23642 + C23641) * C50790) *
                       C22818 +
                   ((C23644 + C23645 + C23646) * C378 -
                    ((C23340 + C23341 + C23342) * C50983 +
                     (C23343 + C23344 + C23345) * C377) +
                    (C23647 + C23648 + C23649) * C50790) *
                       C50866) *
                      C50878 * C502 +
                  (((C23345 + C23344 + C23343) * C377 +
                    (C23342 + C23341 + C23340) * C50983 -
                    (C23646 + C23645 + C23644) * C378 -
                    (C23649 + C23648 + C23647) * C50790) *
                       C22818 +
                   ((C23462 + C23463 + C23464) * C377 +
                    (C23465 + C23466 + C23467) * C50983 -
                    (C22822 * C2981 + C22817 * C2984 + C22821 * C2982 +
                     C51009 * C2985 + C22820 * C2983 + C51025 * C2986) *
                        C378 -
                    (C22822 * C2987 + C22817 * C2990 + C22821 * C2988 +
                     C51009 * C2991 + C22820 * C2989 + C51025 * C2992) *
                        C50790) *
                       C50866) *
                      C50878 * C503) *
                 C50716) /
                    (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C51029 +
            ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C51021 +
            C26181 * C25635) *
               C50878 * C1169 -
           (C26297 * C25635 +
            ((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C51021 +
            ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C51029) *
               C50878 * C50764) *
              C51026 +
          ((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C51029 +
            ((C25845 + C25846) * C121 + (C25847 + C25848) * C50778) * C51021 +
            ((C26175 + C26176) * C121 + (C26177 + C26178) * C50778) * C25635) *
               C50878 * C50764 -
           (C26182 * C25635 +
            ((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C51021 +
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50778 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C121) *
                C51029) *
               C50878 * C1169) *
              C51012 +
          ((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                 C121 +
             (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                 C50778) *
                C51029 +
            ((C25849 + C25850) * C121 + (C25851 + C25852) * C50778) * C51021 +
            ((C25853 + C25854) * C121 + (C25855 + C25856) * C50778) * C25635) *
               C50878 * C1169 -
           (((C25637 * C601 + C50693 * C609 + C25636 * C602 + C25631 * C610) *
                 C50778 +
             (C25637 * C597 + C50693 * C605 + C25636 * C598 + C25631 * C606) *
                 C121) *
                C25635 +
            ((C25856 + C25855) * C50778 + (C25854 + C25853) * C121) * C51021 +
            ((C25852 + C25851) * C50778 + (C25850 + C25849) * C121) * C51029) *
               C50878 * C50764) *
              C1173)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C51029 +
            ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C51021 +
            C26181 * C25635) *
               C50878 * C51027 -
           (C26297 * C25635 +
            ((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C51021 +
            ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C51029) *
               C50878 * C51015 +
           (C26181 * C51029 +
            ((C26174 + C26173) * C121 + (C26172 + C26171) * C50778) * C51021 +
            ((C26293 + C26294) * C121 + (C26295 + C26296) * C50778) * C25635) *
               C50878 * C1274) *
              C1275 +
          ((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C51029 +
            ((C25845 + C25846) * C121 + (C25847 + C25848) * C50778) * C51021 +
            ((C26175 + C26176) * C121 + (C26177 + C26178) * C50778) * C25635) *
               C50878 * C51015 -
           (C26182 * C25635 +
            ((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C51021 +
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50778 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C121) *
                C51029) *
               C50878 * C51027 -
           (((C25637 * C2808 + C50693 * C2814 + C25636 * C2809 +
              C25631 * C2815) *
                 C50778 +
             (C25637 * C2805 + C50693 * C2811 + C25636 * C2806 +
              C25631 * C2812) *
                 C121) *
                C25635 +
            ((C26178 + C26177) * C50778 + (C26176 + C26175) * C121) * C51021 +
            C26182 * C51029) *
               C50878 * C1274) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C377 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50983 -
             (C25637 * C381 + C50693 * C387 + C25636 * C382 + C25631 * C388) *
                 C378 -
             (C25637 * C391 + C50693 * C399 + C25636 * C392 + C25631 * C400) *
                 C50790) *
                C51029 +
            ((C25833 + C25834) * C377 + (C25835 + C25836) * C50983 -
             (C26470 + C26471) * C378 - (C26472 + C26473) * C50790) *
                C51021 +
            C26488 * C25635) *
               C50878 * C1169 +
           (((C26471 + C26470) * C378 -
             ((C25836 + C25835) * C50983 + (C25834 + C25833) * C377) +
             (C26473 + C26472) * C50790) *
                C51029 +
            ((C26476 + C26475) * C378 -
             ((C25840 + C25839) * C50983 + (C25838 + C25837) * C377) +
             (C26478 + C26477) * C50790) *
                C51021 +
            ((C26479 + C26480) * C378 - (C26281 * C50983 + C26282 * C377) +
             (C26481 + C26482) * C50790) *
                C25635) *
               C50878 * C50764) *
              C1275 +
          ((((C25636 * C381 + C25631 * C387 + C25637 * C380 + C50693 * C386) *
                 C378 -
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C50983 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C377) +
             (C25636 * C391 + C25631 * C399 + C25637 * C390 + C50693 * C398) *
                 C50790) *
                C51029 +
            ((C27405 + C27406) * C378 -
             ((C25844 + C25843) * C50983 + (C25842 + C25841) * C377) +
             (C27407 + C27408) * C50790) *
                C51021 +
            ((C27409 + C27410) * C378 - (C26167 * C50983 + C26168 * C377) +
             (C27411 + C27412) * C50790) *
                C25635) *
               C50878 * C1169 +
           (((C25841 + C25842) * C377 + (C25843 + C25844) * C50983 -
             (C27406 + C27405) * C378 - (C27408 + C27407) * C50790) *
                C51029 +
            ((C25845 + C25846) * C377 + (C25847 + C25848) * C50983 -
             (C27410 + C27409) * C378 - (C27412 + C27411) * C50790) *
                C51021 +
            ((C26175 + C26176) * C377 + (C26177 + C26178) * C50983 -
             (C25637 * C2981 + C50693 * C2984 + C25636 * C2982 +
              C25631 * C2985) *
                 C378 -
             (C25637 * C2987 + C50693 * C2990 + C25636 * C2988 +
              C25631 * C2991) *
                 C50790) *
                C25635) *
               C50878 * C50764) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C1511 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C1509 -
             (C25637 * C381 + C50693 * C387 + C25636 * C382 + C25631 * C388) *
                 C1512 -
             (C25637 * C391 + C50693 * C399 + C25636 * C392 + C25631 * C400) *
                 C50790) *
                C51029 +
            ((C25833 + C25834) * C1511 + (C25835 + C25836) * C1509 -
             (C26470 + C26471) * C1512 - (C26472 + C26473) * C50790) *
                C51021 +
            (C26149 * C1511 + C26150 * C1509 - C26483 * C1512 -
             C26484 * C50790) *
                C25635) *
               C50878 * C1169 +
           (((C26471 + C26470) * C1512 -
             ((C25836 + C25835) * C1509 + (C25834 + C25833) * C1511) +
             (C26473 + C26472) * C50790) *
                C51029 +
            ((C26476 + C26475) * C1512 -
             ((C25840 + C25839) * C1509 + (C25838 + C25837) * C1511) +
             (C26478 + C26477) * C50790) *
                C51021 +
            ((C26479 + C26480) * C1512 - (C26281 * C1509 + C26282 * C1511) +
             (C26481 + C26482) * C50790) *
                C25635) *
               C50878 * C50764) *
              C50974 +
          ((((C25636 * C381 + C25631 * C387 + C25637 * C380 + C50693 * C386) *
                 C1512 -
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C1509 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C1511) +
             (C25636 * C391 + C25631 * C399 + C25637 * C390 + C50693 * C398) *
                 C50790) *
                C51029 +
            ((C27405 + C27406) * C1512 -
             ((C25844 + C25843) * C1509 + (C25842 + C25841) * C1511) +
             (C27407 + C27408) * C50790) *
                C51021 +
            ((C27409 + C27410) * C1512 - (C26167 * C1509 + C26168 * C1511) +
             (C27411 + C27412) * C50790) *
                C25635) *
               C50878 * C1169 +
           (((C25841 + C25842) * C1511 + (C25843 + C25844) * C1509 -
             (C27406 + C27405) * C1512 - (C27408 + C27407) * C50790) *
                C51029 +
            ((C25845 + C25846) * C1511 + (C25847 + C25848) * C1509 -
             (C27410 + C27409) * C1512 - (C27412 + C27411) * C50790) *
                C51021 +
            ((C26175 + C26176) * C1511 + (C26177 + C26178) * C1509 -
             (C25637 * C2981 + C50693 * C2984 + C25636 * C2982 +
              C25631 * C2985) *
                 C1512 -
             (C25637 * C2987 + C50693 * C2990 + C25636 * C2988 +
              C25631 * C2991) *
                 C50790) *
                C25635) *
               C50878 * C50764) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C1511 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C1509 -
            (C25637 * C381 + C50693 * C387 + C25636 * C382 + C25631 * C388) *
                C1512 -
            (C25637 * C391 + C50693 * C399 + C25636 * C392 + C25631 * C400) *
                C50790) *
               C51029 +
           ((C25833 + C25834) * C1511 + (C25835 + C25836) * C1509 -
            (C26470 + C26471) * C1512 - (C26472 + C26473) * C50790) *
               C51021 +
           C28245 * C25635) *
              C50878 * C51027 +
          (((C26471 + C26470) * C1512 -
            ((C25836 + C25835) * C1509 + (C25834 + C25833) * C1511) +
            (C26473 + C26472) * C50790) *
               C51029 +
           ((C26476 + C26475) * C1512 -
            ((C25840 + C25839) * C1509 + (C25838 + C25837) * C1511) +
            (C26478 + C26477) * C50790) *
               C51021 +
           ((C26479 + C26480) * C1512 - (C26281 * C1509 + C26282 * C1511) +
            (C26481 + C26482) * C50790) *
               C25635) *
              C50878 * C51015 +
          (C28245 * C51029 +
           ((C26174 + C26173) * C1511 + (C26172 + C26171) * C1509 -
            (C26480 + C26479) * C1512 - (C26482 + C26481) * C50790) *
               C51021 +
           ((C26293 + C26294) * C1511 + (C26295 + C26296) * C1509 -
            (C25637 * C8605 + C50693 * C8607 + C25636 * C8606 +
             C25631 * C8608) *
                C1512 -
            (C25637 * C8609 + C50693 * C8611 + C25636 * C8610 +
             C25631 * C8612) *
                C50790) *
               C25635) *
              C50878 * C1274) *
         C50716) /
        (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C1744 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C51028 -
            (C25637 * C381 + C50693 * C387 + C25636 * C382 + C25631 * C388) *
                C1745 -
            (C25637 * C391 + C50693 * C399 + C25636 * C392 + C25631 * C400) *
                C51018 +
            (C25636 * C847 + C25631 * C852 + C25637 * C848 + C50693 * C853) *
                C1746 +
            (C25636 * C856 + C25631 * C862 + C25637 * C857 + C50693 * C863) *
                C1743) *
               C51029 +
           ((C25833 + C25834) * C1744 + (C25835 + C25836) * C51028 -
            (C26470 + C26471) * C1745 - (C26472 + C26473) * C51018 +
            (C26797 + C26798) * C1746 + (C26799 + C26800) * C1743) *
               C51021 +
           (C26149 * C1744 + C26150 * C51028 - C26483 * C1745 -
            C26484 * C51018 + (C26801 + C26802) * C1746 +
            (C26803 + C26804) * C1743) *
               C25635) *
              C50878 * C1169 +
          (((C26471 + C26470) * C1745 -
            ((C25836 + C25835) * C51028 + (C25834 + C25833) * C1744) +
            (C26473 + C26472) * C51018 - (C26798 + C26797) * C1746 -
            (C26800 + C26799) * C1743) *
               C51029 +
           ((C26476 + C26475) * C1745 -
            ((C25840 + C25839) * C51028 + (C25838 + C25837) * C1744) +
            (C26478 + C26477) * C51018 - (C26802 + C26801) * C1746 -
            (C26804 + C26803) * C1743) *
               C51021 +
           ((C26479 + C26480) * C1745 - (C26281 * C51028 + C26282 * C1744) +
            (C26481 + C26482) * C51018 -
            (C25637 * C8950 + C50693 * C8952 + C25636 * C8951 +
             C25631 * C8953) *
                C1746 -
            (C25637 * C8954 + C50693 * C8956 + C25636 * C8955 +
             C25631 * C8957) *
                C1743) *
               C25635) *
              C50878 * C50764) *
         C50716) /
        (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C51029 +
            ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C51021 +
            C26181 * C25635) *
               C50878 * C501 -
           (((C26171 + C26172) * C50778 + (C26173 + C26174) * C121) * C25635 +
            ((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C51021 +
            ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C51029) *
               C50878 * C502 +
           (C26181 * C51029 +
            ((C26174 + C26173) * C121 + (C26172 + C26171) * C50778) * C51021 +
            ((C25636 * C2807 + C25631 * C2813 + C25637 * C2806 +
              C50693 * C2812) *
                 C121 +
             (C25636 * C2810 + C25631 * C2816 + C25637 * C2809 +
              C50693 * C2815) *
                 C50778) *
                C25635) *
               C50878 * C503) *
              C50974 +
          ((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C51029 +
            ((C25845 + C25846) * C121 + (C25847 + C25848) * C50778) * C51021 +
            ((C26175 + C26176) * C121 + (C26177 + C26178) * C50778) * C25635) *
               C50878 * C502 -
           (C26182 * C25635 +
            ((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C51021 +
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50778 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C121) *
                C51029) *
               C50878 * C501 -
           (((C25637 * C2808 + C50693 * C2814 + C25636 * C2809 +
              C25631 * C2815) *
                 C50778 +
             (C25637 * C2805 + C50693 * C2811 + C25636 * C2806 +
              C25631 * C2812) *
                 C121) *
                C25635 +
            ((C26178 + C26177) * C50778 + (C26176 + C26175) * C121) * C51021 +
            C26182 * C51029) *
               C50878 * C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C121 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C50778) *
               C51029 +
           ((C25636 * C256 + C25631 * C266 + C25637 * C255 + C50693 * C265) *
                C121 +
            (C25636 * C262 + C25631 * C274 + C25637 * C261 + C50693 * C273) *
                C50778) *
               C51021 +
           ((C25636 * C506 + C25631 * C511 + C25637 * C507 + C50693 * C512) *
                C121 +
            (C25636 * C515 + C25631 * C521 + C25637 * C516 + C50693 * C522) *
                C50778) *
               C25635) *
              C50878 * C50748 * C113 -
          (((C25637 * C517 + C50693 * C523 + C25636 * C516 + C25631 * C522) *
                C50778 +
            (C25637 * C508 + C50693 * C513 + C25636 * C507 + C25631 * C512) *
                C121) *
               C25635 +
           ((C25637 * C260 + C50693 * C272 + C25636 * C261 + C25631 * C273) *
                C50778 +
            (C25637 * C254 + C50693 * C264 + C25636 * C255 + C25631 * C265) *
                C121) *
               C51021 +
           ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                C50778 +
            (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                C121) *
               C51029) *
              C50878 * C50748 * C114 +
          (((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                C121 +
            (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                C50778) *
               C51029 +
           ((C25636 * C254 + C25631 * C264 + C25637 * C253 + C50693 * C263) *
                C121 +
            (C25636 * C260 + C25631 * C272 + C25637 * C259 + C50693 * C271) *
                C50778) *
               C51021 +
           ((C25636 * C508 + C25631 * C513 + C25637 * C509 + C50693 * C514) *
                C121 +
            (C25636 * C517 + C25631 * C523 + C25637 * C518 + C50693 * C524) *
                C50778) *
               C25635) *
              C50878 * C50748 * C115 -
          (((C25637 * C519 + C50693 * C525 + C25636 * C518 + C25631 * C524) *
                C50778 +
            (C25637 * C510 + C50693 * C520 + C25636 * C509 + C25631 * C514) *
                C121) *
               C25635 +
           ((C25637 * C268 + C50693 * C275 + C25636 * C259 + C25631 * C271) *
                C50778 +
            (C25637 * C257 + C50693 * C267 + C25636 * C253 + C25631 * C263) *
                C121) *
               C51021 +
           ((C25637 * C137 + C50693 * C147 + C25636 * C136 + C25631 * C146) *
                C50778 +
            (C25637 * C126 + C50693 * C138 + C25636 * C125 + C25631 * C132) *
                C121) *
               C51029) *
              C50878 * C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C844 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C841 -
            (C25637 * C381 + C50693 * C387 + C25636 * C382 + C25631 * C388) *
                C845 -
            (C25637 * C391 + C50693 * C399 + C25636 * C392 + C25631 * C400) *
                C842 +
            (C25636 * C847 + C25631 * C852 + C25637 * C848 + C50693 * C853) *
                C846 +
            (C25636 * C856 + C25631 * C862 + C25637 * C857 + C50693 * C863) *
                C843) *
               C51029 +
           ((C25833 + C25834) * C844 + (C25835 + C25836) * C841 -
            (C26470 + C26471) * C845 - (C26472 + C26473) * C842 +
            (C25636 * C968 + C25631 * C972 + C25637 * C967 + C50693 * C971) *
                C846 +
            (C25636 * C976 + C25631 * C980 + C25637 * C975 + C50693 * C979) *
                C843) *
               C51021 +
           (C26149 * C844 + C26150 * C841 - C26483 * C845 - C26484 * C842 +
            (C25636 * C3323 + C25631 * C3326 + C25637 * C3322 +
             C50693 * C3325) *
                C846 +
            (C25636 * C3329 + C25631 * C3332 + C25637 * C3328 +
             C50693 * C3331) *
                C843) *
               C25635) *
              C50878 * C50748 * C50974 +
          (((C25636 * C381 + C25631 * C387 + C25637 * C380 + C50693 * C386) *
                C845 -
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C841 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C844) +
            (C25636 * C391 + C25631 * C399 + C25637 * C390 + C50693 * C398) *
                C842 -
            (C25637 * C849 + C50693 * C854 + C25636 * C848 + C25631 * C853) *
                C846 -
            (C25637 * C858 + C50693 * C864 + C25636 * C857 + C25631 * C863) *
                C843) *
               C51029 +
           ((C25636 * C712 + C25631 * C720 + C25637 * C713 + C50693 * C721) *
                C845 -
            ((C25844 + C25843) * C841 + (C25842 + C25841) * C844) +
            (C25636 * C724 + C25631 * C736 + C25637 * C725 + C50693 * C737) *
                C842 -
            (C25637 * C966 + C50693 * C970 + C25636 * C967 + C25631 * C971) *
                C846 -
            (C25637 * C974 + C50693 * C978 + C25636 * C975 + C25631 * C979) *
                C843) *
               C51021 +
           ((C25636 * C717 + C25631 * C729 + C25637 * C716 + C50693 * C728) *
                C845 -
            (C26167 * C841 + C26168 * C844) +
            (C25636 * C733 + C25631 * C741 + C25637 * C732 + C50693 * C740) *
                C842 -
            (C25637 * C3321 + C50693 * C3324 + C25636 * C3322 +
             C25631 * C3325) *
                C846 -
            (C25637 * C3327 + C50693 * C3330 + C25636 * C3328 +
             C25631 * C3331) *
                C843) *
               C25635) *
              C50878 * C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C121 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C50778) *
               C51029 +
           ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C51021 +
           C26181 * C25635) *
              C50878 * C592 -
          (C26297 * C25635 +
           ((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C51021 +
           ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C51029) *
              C50878 * C593 +
          (C26181 * C51029 +
           ((C26174 + C26173) * C121 + (C26172 + C26171) * C50778) * C51021 +
           ((C26293 + C26294) * C121 + (C26295 + C26296) * C50778) * C25635) *
              C50878 * C594 -
          (((C25637 * C8436 + C50693 * C8440 + C25636 * C8437 +
             C25631 * C8441) *
                C50778 +
            (C25637 * C8434 + C50693 * C8438 + C25636 * C8435 +
             C25631 * C8439) *
                C121) *
               C25635 +
           ((C26296 + C26295) * C50778 + (C26294 + C26293) * C121) * C51021 +
           C26297 * C51029) *
              C50878 * C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C51029 +
            ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C51021 +
            ((C25837 + C25838) * C121 + (C25839 + C25840) * C50778) * C25635) *
               C50878 * C50981 -
           (((C25637 * C603 + C50693 * C611 + C25636 * C604 + C25631 * C612) *
                 C50778 +
             (C25637 * C599 + C50693 * C607 + C25636 * C600 + C25631 * C608) *
                 C121) *
                C25635 +
            ((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C51021 +
            ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C51029) *
               C50878 * C50764) *
              C250 +
          ((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C51029 +
            ((C25845 + C25846) * C121 + (C25847 + C25848) * C50778) * C51021 +
            ((C25636 * C599 + C25631 * C607 + C25637 * C598 + C50693 * C606) *
                 C121 +
             (C25636 * C603 + C25631 * C611 + C25637 * C602 + C50693 * C610) *
                 C50778) *
                C25635) *
               C50878 * C50764 -
           (((C25848 + C25847) * C50778 + (C25846 + C25845) * C121) * C25635 +
            ((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C51021 +
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50778 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C121) *
                C51029) *
               C50878 * C50981) *
              C251 +
          ((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                 C121 +
             (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                 C50778) *
                C51029 +
            ((C25849 + C25850) * C121 + (C25851 + C25852) * C50778) * C51021 +
            ((C25853 + C25854) * C121 + (C25855 + C25856) * C50778) * C25635) *
               C50878 * C50981 -
           (((C25637 * C601 + C50693 * C609 + C25636 * C602 + C25631 * C610) *
                 C50778 +
             (C25637 * C597 + C50693 * C605 + C25636 * C598 + C25631 * C606) *
                 C121) *
                C25635 +
            ((C25856 + C25855) * C50778 + (C25854 + C25853) * C121) * C51021 +
            ((C25852 + C25851) * C50778 + (C25850 + C25849) * C121) * C51029) *
               C50878 * C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C844 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C841 -
            (C25637 * C381 + C50693 * C387 + C25636 * C382 + C25631 * C388) *
                C845 -
            (C25637 * C391 + C50693 * C399 + C25636 * C392 + C25631 * C400) *
                C842 +
            (C25636 * C847 + C25631 * C852 + C25637 * C848 + C50693 * C853) *
                C846 +
            (C25636 * C856 + C25631 * C862 + C25637 * C857 + C50693 * C863) *
                C843) *
               C51029 +
           ((C25833 + C25834) * C844 + (C25835 + C25836) * C841 -
            (C26470 + C26471) * C845 - (C26472 + C26473) * C842 +
            (C26797 + C26798) * C846 + (C26799 + C26800) * C843) *
               C51021 +
           (C26149 * C844 + C26150 * C841 - C26483 * C845 - C26484 * C842 +
            (C26801 + C26802) * C846 + (C26803 + C26804) * C843) *
               C25635) *
              C50878 * C50981 +
          (((C26471 + C26470) * C845 -
            ((C25836 + C25835) * C841 + (C25834 + C25833) * C844) +
            (C26473 + C26472) * C842 - (C26798 + C26797) * C846 -
            (C26800 + C26799) * C843) *
               C51029 +
           ((C26476 + C26475) * C845 -
            ((C25840 + C25839) * C841 + (C25838 + C25837) * C844) +
            (C26478 + C26477) * C842 - (C26802 + C26801) * C846 -
            (C26804 + C26803) * C843) *
               C51021 +
           ((C26479 + C26480) * C845 - (C26281 * C841 + C26282 * C844) +
            (C26481 + C26482) * C842 -
            (C25637 * C8950 + C50693 * C8952 + C25636 * C8951 +
             C25631 * C8953) *
                C846 -
            (C25637 * C8954 + C50693 * C8956 + C25636 * C8955 +
             C25631 * C8957) *
                C843) *
               C25635) *
              C50878 * C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C377 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C50983 -
            (C25637 * C381 + C50693 * C387 + C25636 * C382 + C25631 * C388) *
                C378 -
            (C25637 * C391 + C50693 * C399 + C25636 * C392 + C25631 * C400) *
                C50790) *
               C51029 +
           ((C25833 + C25834) * C377 + (C25835 + C25836) * C50983 -
            (C26470 + C26471) * C378 - (C26472 + C26473) * C50790) *
               C51021 +
           C26488 * C25635) *
              C50878 * C501 +
          (((C26471 + C26470) * C378 -
            ((C25836 + C25835) * C50983 + (C25834 + C25833) * C377) +
            (C26473 + C26472) * C50790) *
               C51029 +
           ((C26476 + C26475) * C378 -
            ((C25840 + C25839) * C50983 + (C25838 + C25837) * C377) +
            (C26478 + C26477) * C50790) *
               C51021 +
           ((C26479 + C26480) * C378 - (C26281 * C50983 + C26282 * C377) +
            (C26481 + C26482) * C50790) *
               C25635) *
              C50878 * C502 +
          (C26488 * C51029 +
           ((C26174 + C26173) * C377 + (C26172 + C26171) * C50983 -
            (C26480 + C26479) * C378 - (C26482 + C26481) * C50790) *
               C51021 +
           ((C26293 + C26294) * C377 + (C26295 + C26296) * C50983 -
            (C25637 * C8605 + C50693 * C8607 + C25636 * C8606 +
             C25631 * C8608) *
                C378 -
            (C25637 * C8609 + C50693 * C8611 + C25636 * C8610 +
             C25631 * C8612) *
                C50790) *
               C25635) *
              C50878 * C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C377 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C50983 -
            (C25637 * C381 + C50693 * C387 + C25636 * C382 + C25631 * C388) *
                C378 -
            (C25637 * C391 + C50693 * C399 + C25636 * C392 + C25631 * C400) *
                C50790) *
               C51029 +
           ((C25833 + C25834) * C377 + (C25835 + C25836) * C50983 -
            (C25637 * C712 + C50693 * C720 + C25636 * C711 + C25631 * C719) *
                C378 -
            (C25637 * C724 + C50693 * C736 + C25636 * C723 + C25631 * C735) *
                C50790) *
               C51021 +
           ((C25837 + C25838) * C377 + (C25839 + C25840) * C50983 -
            (C25637 * C717 + C50693 * C729 + C25636 * C718 + C25631 * C730) *
                C378 -
            (C25637 * C733 + C50693 * C741 + C25636 * C734 + C25631 * C742) *
                C50790) *
               C25635) *
              C50878 * C50748 * C250 +
          (((C25636 * C381 + C25631 * C387 + C25637 * C380 + C50693 * C386) *
                C378 -
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50983 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C377) +
            (C25636 * C391 + C25631 * C399 + C25637 * C390 + C50693 * C398) *
                C50790) *
               C51029 +
           ((C25636 * C712 + C25631 * C720 + C25637 * C713 + C50693 * C721) *
                C378 -
            ((C25844 + C25843) * C50983 + (C25842 + C25841) * C377) +
            (C25636 * C724 + C25631 * C736 + C25637 * C725 + C50693 * C737) *
                C50790) *
               C51021 +
           ((C25636 * C717 + C25631 * C729 + C25637 * C716 + C50693 * C728) *
                C378 -
            ((C25848 + C25847) * C50983 + (C25846 + C25845) * C377) +
            (C25636 * C733 + C25631 * C741 + C25637 * C732 + C50693 * C740) *
                C50790) *
               C25635) *
              C50878 * C50748 * C251 +
          (((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                C377 +
            (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                C50983 -
            (C25637 * C379 + C50693 * C385 + C25636 * C380 + C25631 * C386) *
                C378 -
            (C25637 * C389 + C50693 * C397 + C25636 * C390 + C25631 * C398) *
                C50790) *
               C51029 +
           ((C25849 + C25850) * C377 + (C25851 + C25852) * C50983 -
            (C25637 * C714 + C50693 * C722 + C25636 * C713 + C25631 * C721) *
                C378 -
            (C25637 * C726 + C50693 * C738 + C25636 * C725 + C25631 * C737) *
                C50790) *
               C51021 +
           ((C25853 + C25854) * C377 + (C25855 + C25856) * C50983 -
            (C25637 * C715 + C50693 * C727 + C25636 * C716 + C25631 * C728) *
                C378 -
            (C25637 * C731 + C50693 * C739 + C25636 * C732 + C25631 * C740) *
                C50790) *
               C25635) *
              C50878 * C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
               C1051 +
           (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
               C1047 -
           (C25637 * C381 + C50693 * C387 + C25636 * C382 + C25631 * C388) *
               C1052 -
           (C25637 * C391 + C50693 * C399 + C25636 * C392 + C25631 * C400) *
               C1048 +
           (C25636 * C847 + C25631 * C852 + C25637 * C848 + C50693 * C853) *
               C1053 +
           (C25636 * C856 + C25631 * C862 + C25637 * C857 + C50693 * C863) *
               C1049 -
           (C25637 * C1057 + C50693 * C1061 + C25636 * C1058 + C25631 * C1062) *
               C1054 -
           (C25637 * C1065 + C50693 * C1069 + C25636 * C1066 + C25631 * C1070) *
               C1050) *
              C51029 +
          ((C25833 + C25834) * C1051 + (C25835 + C25836) * C1047 -
           (C26470 + C26471) * C1052 - (C26472 + C26473) * C1048 +
           (C26797 + C26798) * C1053 + (C26799 + C26800) * C1049 -
           (C25637 * C3450 + C50693 * C3453 + C25636 * C3451 + C25631 * C3454) *
               C1054 -
           (C25637 * C3456 + C50693 * C3459 + C25636 * C3457 + C25631 * C3460) *
               C1050) *
              C51021 +
          (C26149 * C1051 + C26150 * C1047 - C26483 * C1052 - C26484 * C1048 +
           (C26801 + C26802) * C1053 + (C26803 + C26804) * C1049 -
           (C25637 * C9080 + C50693 * C9082 + C25636 * C9081 + C25631 * C9083) *
               C1054 -
           (C25637 * C9084 + C50693 * C9086 + C25636 * C9085 + C25631 * C9087) *
               C1050) *
              C25635) *
         C50878 * C50748 * C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C1511 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C1509 -
            (C25637 * C381 + C50693 * C387 + C25636 * C382 + C25631 * C388) *
                C1512 -
            (C25637 * C391 + C50693 * C399 + C25636 * C392 + C25631 * C400) *
                C50790) *
               C51029 +
           ((C25833 + C25834) * C1511 + (C25835 + C25836) * C1509 -
            (C26470 + C26471) * C1512 - (C26472 + C26473) * C50790) *
               C51021 +
           (C26149 * C1511 + C26150 * C1509 - C26483 * C1512 -
            C26484 * C50790) *
               C25635) *
              C50878 * C50748 * C51026 +
          (((C25636 * C381 + C25631 * C387 + C25637 * C380 + C50693 * C386) *
                C1512 -
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C1509 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C1511) +
            (C25636 * C391 + C25631 * C399 + C25637 * C390 + C50693 * C398) *
                C50790) *
               C51029 +
           ((C27405 + C27406) * C1512 -
            ((C25844 + C25843) * C1509 + (C25842 + C25841) * C1511) +
            (C27407 + C27408) * C50790) *
               C51021 +
           ((C27409 + C27410) * C1512 - (C26167 * C1509 + C26168 * C1511) +
            (C27411 + C27412) * C50790) *
               C25635) *
              C50878 * C50748 * C51012 +
          (((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                C1511 +
            (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                C1509 -
            (C25637 * C379 + C50693 * C385 + C25636 * C380 + C25631 * C386) *
                C1512 -
            (C25637 * C389 + C50693 * C397 + C25636 * C390 + C25631 * C398) *
                C50790) *
               C51029 +
           ((C25849 + C25850) * C1511 + (C25851 + C25852) * C1509 -
            (C25637 * C714 + C50693 * C722 + C25636 * C713 + C25631 * C721) *
                C1512 -
            (C25637 * C726 + C50693 * C738 + C25636 * C725 + C25631 * C737) *
                C50790) *
               C51021 +
           ((C25853 + C25854) * C1511 + (C25855 + C25856) * C1509 -
            (C25637 * C715 + C50693 * C727 + C25636 * C716 + C25631 * C728) *
                C1512 -
            (C25637 * C731 + C50693 * C739 + C25636 * C732 + C25631 * C740) *
                C50790) *
               C25635) *
              C50878 * C50748 * C1173)) /
        (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C1511 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C1509 -
             (C25637 * C381 + C50693 * C387 + C25636 * C382 + C25631 * C388) *
                 C1512 -
             (C25637 * C391 + C50693 * C399 + C25636 * C392 + C25631 * C400) *
                 C50790) *
                C51029 +
            ((C25833 + C25834) * C1511 + (C25835 + C25836) * C1509 -
             (C26470 + C26471) * C1512 - (C26472 + C26473) * C50790) *
                C51021 +
            (C26149 * C1511 + C26150 * C1509 - C26483 * C1512 -
             C26484 * C50790) *
                C25635) *
               C50878 * C50981 +
           (((C26471 + C26470) * C1512 -
             ((C25836 + C25835) * C1509 + (C25834 + C25833) * C1511) +
             (C26473 + C26472) * C50790) *
                C51029 +
            ((C26476 + C26475) * C1512 -
             ((C25840 + C25839) * C1509 + (C25838 + C25837) * C1511) +
             (C26478 + C26477) * C50790) *
                C51021 +
            ((C26479 + C26480) * C1512 - (C26281 * C1509 + C26282 * C1511) +
             (C26481 + C26482) * C50790) *
                C25635) *
               C50878 * C50764) *
              C1275 +
          ((((C25636 * C381 + C25631 * C387 + C25637 * C380 + C50693 * C386) *
                 C1512 -
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C1509 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C1511) +
             (C25636 * C391 + C25631 * C399 + C25637 * C390 + C50693 * C398) *
                 C50790) *
                C51029 +
            ((C27405 + C27406) * C1512 -
             ((C25844 + C25843) * C1509 + (C25842 + C25841) * C1511) +
             (C27407 + C27408) * C50790) *
                C51021 +
            ((C27409 + C27410) * C1512 - (C26167 * C1509 + C26168 * C1511) +
             (C27411 + C27412) * C50790) *
                C25635) *
               C50878 * C50981 +
           (((C25841 + C25842) * C1511 + (C25843 + C25844) * C1509 -
             (C27406 + C27405) * C1512 - (C27408 + C27407) * C50790) *
                C51029 +
            ((C25845 + C25846) * C1511 + (C25847 + C25848) * C1509 -
             (C27410 + C27409) * C1512 - (C27412 + C27411) * C50790) *
                C51021 +
            ((C26175 + C26176) * C1511 + (C26177 + C26178) * C1509 -
             (C25637 * C2981 + C50693 * C2984 + C25636 * C2982 +
              C25631 * C2985) *
                 C1512 -
             (C25637 * C2987 + C50693 * C2990 + C25636 * C2988 +
              C25631 * C2991) *
                 C50790) *
                C25635) *
               C50878 * C50764) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C1744 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C51028 -
            (C25637 * C381 + C50693 * C387 + C25636 * C382 + C25631 * C388) *
                C1745 -
            (C25637 * C391 + C50693 * C399 + C25636 * C392 + C25631 * C400) *
                C51018 +
            (C25636 * C847 + C25631 * C852 + C25637 * C848 + C50693 * C853) *
                C1746 +
            (C25636 * C856 + C25631 * C862 + C25637 * C857 + C50693 * C863) *
                C1743) *
               C51029 +
           ((C25833 + C25834) * C1744 + (C25835 + C25836) * C51028 -
            (C26470 + C26471) * C1745 - (C26472 + C26473) * C51018 +
            (C26797 + C26798) * C1746 + (C26799 + C26800) * C1743) *
               C51021 +
           (C26149 * C1744 + C26150 * C51028 - C26483 * C1745 -
            C26484 * C51018 + (C26801 + C26802) * C1746 +
            (C26803 + C26804) * C1743) *
               C25635) *
              C50878 * C50748 * C1275 +
          (((C25636 * C381 + C25631 * C387 + C25637 * C380 + C50693 * C386) *
                C1745 -
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C51028 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C1744) +
            (C25636 * C391 + C25631 * C399 + C25637 * C390 + C50693 * C398) *
                C51018 -
            (C25637 * C849 + C50693 * C854 + C25636 * C848 + C25631 * C853) *
                C1746 -
            (C25637 * C858 + C50693 * C864 + C25636 * C857 + C25631 * C863) *
                C1743) *
               C51029 +
           ((C27405 + C27406) * C1745 -
            ((C25844 + C25843) * C51028 + (C25842 + C25841) * C1744) +
            (C27407 + C27408) * C51018 -
            (C25637 * C966 + C50693 * C970 + C25636 * C967 + C25631 * C971) *
                C1746 -
            (C25637 * C974 + C50693 * C978 + C25636 * C975 + C25631 * C979) *
                C1743) *
               C51021 +
           ((C27409 + C27410) * C1745 - (C26167 * C51028 + C26168 * C1744) +
            (C27411 + C27412) * C51018 -
            (C25637 * C3321 + C50693 * C3324 + C25636 * C3322 +
             C25631 * C3325) *
                C1746 -
            (C25637 * C3327 + C50693 * C3330 + C25636 * C3328 +
             C25631 * C3331) *
                C1743) *
               C25635) *
              C50878 * C50748 * C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C121 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C50778) *
               C51029 +
           ((C25636 * C256 + C25631 * C266 + C25637 * C255 + C50693 * C265) *
                C121 +
            (C25636 * C262 + C25631 * C274 + C25637 * C261 + C50693 * C273) *
                C50778) *
               C51021 +
           ((C25636 * C506 + C25631 * C511 + C25637 * C507 + C50693 * C512) *
                C121 +
            (C25636 * C515 + C25631 * C521 + C25637 * C516 + C50693 * C522) *
                C50778) *
               C25635) *
              C50878 * C50748 * C113 -
          (((C25637 * C517 + C50693 * C523 + C25636 * C516 + C25631 * C522) *
                C50778 +
            (C25637 * C508 + C50693 * C513 + C25636 * C507 + C25631 * C512) *
                C121) *
               C25635 +
           ((C25637 * C260 + C50693 * C272 + C25636 * C261 + C25631 * C273) *
                C50778 +
            (C25637 * C254 + C50693 * C264 + C25636 * C255 + C25631 * C265) *
                C121) *
               C51021 +
           ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                C50778 +
            (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                C121) *
               C51029) *
              C50878 * C50748 * C114 +
          (((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                C121 +
            (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                C50778) *
               C51029 +
           ((C25636 * C254 + C25631 * C264 + C25637 * C253 + C50693 * C263) *
                C121 +
            (C25636 * C260 + C25631 * C272 + C25637 * C259 + C50693 * C271) *
                C50778) *
               C51021 +
           ((C25636 * C508 + C25631 * C513 + C25637 * C509 + C50693 * C514) *
                C121 +
            (C25636 * C517 + C25631 * C523 + C25637 * C518 + C50693 * C524) *
                C50778) *
               C25635) *
              C50878 * C50748 * C115 -
          (((C25637 * C519 + C50693 * C525 + C25636 * C518 + C25631 * C524) *
                C50778 +
            (C25637 * C510 + C50693 * C520 + C25636 * C509 + C25631 * C514) *
                C121) *
               C25635 +
           ((C25637 * C268 + C50693 * C275 + C25636 * C259 + C25631 * C271) *
                C50778 +
            (C25637 * C257 + C50693 * C267 + C25636 * C253 + C25631 * C263) *
                C121) *
               C51021 +
           ((C25637 * C137 + C50693 * C147 + C25636 * C136 + C25631 * C146) *
                C50778 +
            (C25637 * C126 + C50693 * C138 + C25636 * C125 + C25631 * C132) *
                C121) *
               C51029) *
              C50878 * C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C51029 +
            ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C51021 +
            C26181 * C25635) *
               C50878 * C501 -
           (((C26171 + C26172) * C50778 + (C26173 + C26174) * C121) * C25635 +
            ((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C51021 +
            ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C51029) *
               C50878 * C502 +
           (C26181 * C51029 +
            ((C26174 + C26173) * C121 + (C26172 + C26171) * C50778) * C51021 +
            ((C25636 * C2807 + C25631 * C2813 + C25637 * C2806 +
              C50693 * C2812) *
                 C121 +
             (C25636 * C2810 + C25631 * C2816 + C25637 * C2809 +
              C50693 * C2815) *
                 C50778) *
                C25635) *
               C50878 * C503) *
              C50974 +
          ((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C51029 +
            ((C25845 + C25846) * C121 + (C25847 + C25848) * C50778) * C51021 +
            ((C26175 + C26176) * C121 + (C26177 + C26178) * C50778) * C25635) *
               C50878 * C502 -
           (C26182 * C25635 +
            ((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C51021 +
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50778 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C121) *
                C51029) *
               C50878 * C501 -
           (((C25637 * C2808 + C50693 * C2814 + C25636 * C2809 +
              C25631 * C2815) *
                 C50778 +
             (C25637 * C2805 + C50693 * C2811 + C25636 * C2806 +
              C25631 * C2812) *
                 C121) *
                C25635 +
            ((C26178 + C26177) * C50778 + (C26176 + C26175) * C121) * C51021 +
            C26182 * C51029) *
               C50878 * C503) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C51029 +
            ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C51021 +
            ((C25837 + C25838) * C121 + (C25839 + C25840) * C50778) * C25635) *
               C50878 * C50981 -
           (((C25637 * C603 + C50693 * C611 + C25636 * C604 + C25631 * C612) *
                 C50778 +
             (C25637 * C599 + C50693 * C607 + C25636 * C600 + C25631 * C608) *
                 C121) *
                C25635 +
            ((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C51021 +
            ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C51029) *
               C50878 * C50764) *
              C250 +
          ((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C51029 +
            ((C25845 + C25846) * C121 + (C25847 + C25848) * C50778) * C51021 +
            ((C25636 * C599 + C25631 * C607 + C25637 * C598 + C50693 * C606) *
                 C121 +
             (C25636 * C603 + C25631 * C611 + C25637 * C602 + C50693 * C610) *
                 C50778) *
                C25635) *
               C50878 * C50764 -
           (((C25848 + C25847) * C50778 + (C25846 + C25845) * C121) * C25635 +
            ((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C51021 +
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50778 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C121) *
                C51029) *
               C50878 * C50981) *
              C251 +
          ((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                 C121 +
             (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                 C50778) *
                C51029 +
            ((C25849 + C25850) * C121 + (C25851 + C25852) * C50778) * C51021 +
            ((C25853 + C25854) * C121 + (C25855 + C25856) * C50778) * C25635) *
               C50878 * C50981 -
           (((C25637 * C601 + C50693 * C609 + C25636 * C602 + C25631 * C610) *
                 C50778 +
             (C25637 * C597 + C50693 * C605 + C25636 * C598 + C25631 * C606) *
                 C121) *
                C25635 +
            ((C25856 + C25855) * C50778 + (C25854 + C25853) * C121) * C51021 +
            ((C25852 + C25851) * C50778 + (C25850 + C25849) * C121) * C51029) *
               C50878 * C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C121 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C50778) *
               C51029 +
           ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C51021 +
           C26181 * C25635) *
              C50878 * C592 -
          (C26297 * C25635 +
           ((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C51021 +
           ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C51029) *
              C50878 * C593 +
          (C26181 * C51029 +
           ((C26174 + C26173) * C121 + (C26172 + C26171) * C50778) * C51021 +
           ((C26293 + C26294) * C121 + (C26295 + C26296) * C50778) * C25635) *
              C50878 * C594 -
          (((C25637 * C8436 + C50693 * C8440 + C25636 * C8437 +
             C25631 * C8441) *
                C50778 +
            (C25637 * C8434 + C50693 * C8438 + C25636 * C8435 +
             C25631 * C8439) *
                C121) *
               C25635 +
           ((C26296 + C26295) * C50778 + (C26294 + C26293) * C121) * C51021 +
           C26297 * C51029) *
              C50878 * C595) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C377 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C50983 -
            (C25637 * C381 + C50693 * C387 + C25636 * C382 + C25631 * C388) *
                C378 -
            (C25637 * C391 + C50693 * C399 + C25636 * C392 + C25631 * C400) *
                C50790) *
               C51029 +
           ((C25833 + C25834) * C377 + (C25835 + C25836) * C50983 -
            (C25637 * C712 + C50693 * C720 + C25636 * C711 + C25631 * C719) *
                C378 -
            (C25637 * C724 + C50693 * C736 + C25636 * C723 + C25631 * C735) *
                C50790) *
               C51021 +
           ((C25837 + C25838) * C377 + (C25839 + C25840) * C50983 -
            (C25637 * C717 + C50693 * C729 + C25636 * C718 + C25631 * C730) *
                C378 -
            (C25637 * C733 + C50693 * C741 + C25636 * C734 + C25631 * C742) *
                C50790) *
               C25635) *
              C50878 * C50748 * C250 +
          (((C25636 * C381 + C25631 * C387 + C25637 * C380 + C50693 * C386) *
                C378 -
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50983 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C377) +
            (C25636 * C391 + C25631 * C399 + C25637 * C390 + C50693 * C398) *
                C50790) *
               C51029 +
           ((C25636 * C712 + C25631 * C720 + C25637 * C713 + C50693 * C721) *
                C378 -
            ((C25844 + C25843) * C50983 + (C25842 + C25841) * C377) +
            (C25636 * C724 + C25631 * C736 + C25637 * C725 + C50693 * C737) *
                C50790) *
               C51021 +
           ((C25636 * C717 + C25631 * C729 + C25637 * C716 + C50693 * C728) *
                C378 -
            ((C25848 + C25847) * C50983 + (C25846 + C25845) * C377) +
            (C25636 * C733 + C25631 * C741 + C25637 * C732 + C50693 * C740) *
                C50790) *
               C25635) *
              C50878 * C50748 * C251 +
          (((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                C377 +
            (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                C50983 -
            (C25637 * C379 + C50693 * C385 + C25636 * C380 + C25631 * C386) *
                C378 -
            (C25637 * C389 + C50693 * C397 + C25636 * C390 + C25631 * C398) *
                C50790) *
               C51029 +
           ((C25849 + C25850) * C377 + (C25851 + C25852) * C50983 -
            (C25637 * C714 + C50693 * C722 + C25636 * C713 + C25631 * C721) *
                C378 -
            (C25637 * C726 + C50693 * C738 + C25636 * C725 + C25631 * C737) *
                C50790) *
               C51021 +
           ((C25853 + C25854) * C377 + (C25855 + C25856) * C50983 -
            (C25637 * C715 + C50693 * C727 + C25636 * C716 + C25631 * C728) *
                C378 -
            (C25637 * C731 + C50693 * C739 + C25636 * C732 + C25631 * C740) *
                C50790) *
               C25635) *
              C50878 * C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C377 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C50983 -
            (C25637 * C381 + C50693 * C387 + C25636 * C382 + C25631 * C388) *
                C378 -
            (C25637 * C391 + C50693 * C399 + C25636 * C392 + C25631 * C400) *
                C50790) *
               C51029 +
           ((C25833 + C25834) * C377 + (C25835 + C25836) * C50983 -
            (C26470 + C26471) * C378 - (C26472 + C26473) * C50790) *
               C51021 +
           C26488 * C25635) *
              C50878 * C501 +
          (((C26471 + C26470) * C378 -
            ((C25836 + C25835) * C50983 + (C25834 + C25833) * C377) +
            (C26473 + C26472) * C50790) *
               C51029 +
           ((C26476 + C26475) * C378 -
            ((C25840 + C25839) * C50983 + (C25838 + C25837) * C377) +
            (C26478 + C26477) * C50790) *
               C51021 +
           ((C26479 + C26480) * C378 - (C26281 * C50983 + C26282 * C377) +
            (C26481 + C26482) * C50790) *
               C25635) *
              C50878 * C502 +
          (C26488 * C51029 +
           ((C26174 + C26173) * C377 + (C26172 + C26171) * C50983 -
            (C26480 + C26479) * C378 - (C26482 + C26481) * C50790) *
               C51021 +
           ((C26293 + C26294) * C377 + (C26295 + C26296) * C50983 -
            (C25637 * C8605 + C50693 * C8607 + C25636 * C8606 +
             C25631 * C8608) *
                C378 -
            (C25637 * C8609 + C50693 * C8611 + C25636 * C8610 +
             C25631 * C8612) *
                C50790) *
               C25635) *
              C50878 * C503) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                  C121 +
              (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                  C50778) *
                 C22818 +
             ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
                C50996 +
            (((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C22818 +
             (C29478 * C121 + C29479 * C50778) * C50866) *
                C50890) *
               C1169 -
           (((C26484 * C50778 + C26483 * C121) * C50866 +
             (C29477 * C50778 + C29476 * C121) * C22818) *
                C50890 +
            (((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C50866 +
             ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C22818) *
                C50996) *
               C50764) *
              C51026 +
          (((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C22818 +
             ((C25845 + C25846) * C121 + (C25847 + C25848) * C50778) * C50866) *
                C50996 +
            (((C27405 + C27406) * C121 + (C27407 + C27408) * C50778) * C22818 +
             ((C27409 + C27410) * C121 + (C27411 + C27412) * C50778) * C50866) *
                C50890) *
               C50764 -
           ((((C27408 + C27407) * C50778 + (C27406 + C27405) * C121) * C50866 +
             ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C22818) *
                C50890 +
            (((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C50866 +
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C50778 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C121) *
                 C22818) *
                C50996) *
               C1169) *
              C51012 +
          (((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                  C121 +
              (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                  C50778) *
                 C22818 +
             ((C25849 + C25850) * C121 + (C25851 + C25852) * C50778) * C50866) *
                C50996 +
            (((C28955 + C28954) * C121 + (C28957 + C28956) * C50778) * C22818 +
             ((C28724 + C28725) * C121 + (C28726 + C28727) * C50778) * C50866) *
                C50890) *
               C1169 -
           ((((C25637 * C731 + C50693 * C739 + C25636 * C732 + C25631 * C740) *
                  C50778 +
              (C25637 * C715 + C50693 * C727 + C25636 * C716 + C25631 * C728) *
                  C121) *
                 C50866 +
             ((C28727 + C28726) * C50778 + (C28725 + C28724) * C121) * C22818) *
                C50890 +
            (((C25856 + C25855) * C50778 + (C25854 + C25853) * C121) * C50866 +
             ((C25852 + C25851) * C50778 + (C25850 + C25849) * C121) * C22818) *
                C50996) *
               C50764) *
              C1173)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                  C121 +
              (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                  C50778) *
                 C22818 +
             ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
                C50996 +
            (((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C22818 +
             (C29478 * C121 + C29479 * C50778) * C50866) *
                C50890) *
               C51027 -
           (((C26484 * C50778 + C26483 * C121) * C50866 +
             (C29477 * C50778 + C29476 * C121) * C22818) *
                C50890 +
            (((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C50866 +
             ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C22818) *
                C50996) *
               C51015 +
           ((C26181 * C22818 +
             ((C26174 + C26173) * C121 + (C26172 + C26171) * C50778) * C50866) *
                C50996 +
            ((C29480 * C121 + C29481 * C50778) * C22818 +
             ((C26479 + C26480) * C121 + (C26481 + C26482) * C50778) * C50866) *
                C50890) *
               C1274) *
              C1275 +
          (((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C22818 +
             ((C25845 + C25846) * C121 + (C25847 + C25848) * C50778) * C50866) *
                C50996 +
            (((C27405 + C27406) * C121 + (C27407 + C27408) * C50778) * C22818 +
             ((C27409 + C27410) * C121 + (C27411 + C27412) * C50778) * C50866) *
                C50890) *
               C51015 -
           ((((C27408 + C27407) * C50778 + (C27406 + C27405) * C121) * C50866 +
             ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C22818) *
                C50890 +
            (((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C50866 +
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C50778 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C121) *
                 C22818) *
                C50996) *
               C51027 -
           ((((C25637 * C2987 + C50693 * C2990 + C25636 * C2988 +
               C25631 * C2991) *
                  C50778 +
              (C25637 * C2981 + C50693 * C2984 + C25636 * C2982 +
               C25631 * C2985) *
                  C121) *
                 C50866 +
             ((C27412 + C27411) * C50778 + (C27410 + C27409) * C121) * C22818) *
                C50890 +
            (((C26178 + C26177) * C50778 + (C26176 + C26175) * C121) * C50866 +
             C26182 * C22818) *
                C50996) *
               C1274) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                  C377 +
              (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                  C50983 -
              (C28946 + C28947) * C378 - (C28948 + C28949) * C50790) *
                 C22818 +
             ((C25833 + C25834) * C377 + (C25835 + C25836) * C50983 -
              C29476 * C378 - C29477 * C50790) *
                 C50866) *
                C50996 +
            (((C28947 + C28946) * C377 + (C28949 + C28948) * C50983 -
              (C29701 + C29700) * C378 - (C29703 + C29702) * C50790) *
                 C22818 +
             (C29478 * C377 + C29479 * C50983 - C29908 * C378 -
              C29909 * C50790) *
                 C50866) *
                C50890) *
               C1169 +
           (((C29478 * C378 -
              ((C25836 + C25835) * C50983 + (C25834 + C25833) * C377) +
              C29479 * C50790) *
                 C22818 +
             (C29480 * C378 -
              ((C25840 + C25839) * C50983 + (C25838 + C25837) * C377) +
              C29481 * C50790) *
                 C50866) *
                C50996 +
            ((C29906 * C378 - (C29477 * C50983 + C29476 * C377) +
              C29907 * C50790) *
                 C22818 +
             ((C26801 + C26802) * C378 - (C26484 * C50983 + C26483 * C377) +
              (C26803 + C26804) * C50790) *
                 C50866) *
                C50890) *
               C50764) *
              C1275 +
          (((((C28950 + C28951) * C378 -
              ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                   C50983 +
               (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                   C377) +
              (C28952 + C28953) * C50790) *
                 C22818 +
             (C30710 * C378 -
              ((C25844 + C25843) * C50983 + (C25842 + C25841) * C377) +
              C30711 * C50790) *
                 C50866) *
                C50996 +
            (((C29705 + C29704) * C378 -
              ((C28953 + C28952) * C50983 + (C28951 + C28950) * C377) +
              (C29707 + C29706) * C50790) *
                 C22818 +
             ((C29709 + C29708) * C378 - (C30712 * C50983 + C30713 * C377) +
              (C29711 + C29710) * C50790) *
                 C50866) *
                C50890) *
               C1169 +
           ((((C25841 + C25842) * C377 + (C25843 + C25844) * C50983 -
              C30713 * C378 - C30712 * C50790) *
                 C22818 +
             ((C25845 + C25846) * C377 + (C25847 + C25848) * C50983 -
              (C27410 + C27409) * C378 - (C27412 + C27411) * C50790) *
                 C50866) *
                C50996 +
            ((C30710 * C377 + C30711 * C50983 - (C29708 + C29709) * C378 -
              (C29710 + C29711) * C50790) *
                 C22818 +
             ((C27409 + C27410) * C377 + (C27411 + C27412) * C50983 -
              (C25637 * C3321 + C50693 * C3324 + C25636 * C3322 +
               C25631 * C3325) *
                  C378 -
              (C25637 * C3327 + C50693 * C3330 + C25636 * C3328 +
               C25631 * C3331) *
                  C50790) *
                 C50866) *
                C50890) *
               C50764) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                  C1511 +
              (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                  C1509 -
              (C28946 + C28947) * C1512 - (C28948 + C28949) * C50790) *
                 C22818 +
             ((C25833 + C25834) * C1511 + (C25835 + C25836) * C1509 -
              C29476 * C1512 - C29477 * C50790) *
                 C50866) *
                C50996 +
            (((C28947 + C28946) * C1511 + (C28949 + C28948) * C1509 -
              (C29701 + C29700) * C1512 - (C29703 + C29702) * C50790) *
                 C22818 +
             (C29478 * C1511 + C29479 * C1509 - C29908 * C1512 -
              C29909 * C50790) *
                 C50866) *
                C50890) *
               C1169 +
           (((C29478 * C1512 -
              ((C25836 + C25835) * C1509 + (C25834 + C25833) * C1511) +
              C29479 * C50790) *
                 C22818 +
             (C29480 * C1512 -
              ((C25840 + C25839) * C1509 + (C25838 + C25837) * C1511) +
              C29481 * C50790) *
                 C50866) *
                C50996 +
            ((C29906 * C1512 - (C29477 * C1509 + C29476 * C1511) +
              C29907 * C50790) *
                 C22818 +
             ((C26801 + C26802) * C1512 - (C26484 * C1509 + C26483 * C1511) +
              (C26803 + C26804) * C50790) *
                 C50866) *
                C50890) *
               C50764) *
              C50974 +
          (((((C28950 + C28951) * C1512 -
              ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                   C1509 +
               (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                   C1511) +
              (C28952 + C28953) * C50790) *
                 C22818 +
             (C30710 * C1512 -
              ((C25844 + C25843) * C1509 + (C25842 + C25841) * C1511) +
              C30711 * C50790) *
                 C50866) *
                C50996 +
            (((C29705 + C29704) * C1512 -
              ((C28953 + C28952) * C1509 + (C28951 + C28950) * C1511) +
              (C29707 + C29706) * C50790) *
                 C22818 +
             ((C29709 + C29708) * C1512 - (C30712 * C1509 + C30713 * C1511) +
              (C29711 + C29710) * C50790) *
                 C50866) *
                C50890) *
               C1169 +
           ((((C25841 + C25842) * C1511 + (C25843 + C25844) * C1509 -
              C30713 * C1512 - C30712 * C50790) *
                 C22818 +
             ((C25845 + C25846) * C1511 + (C25847 + C25848) * C1509 -
              (C27410 + C27409) * C1512 - (C27412 + C27411) * C50790) *
                 C50866) *
                C50996 +
            ((C30710 * C1511 + C30711 * C1509 - (C29708 + C29709) * C1512 -
              (C29710 + C29711) * C50790) *
                 C22818 +
             ((C27409 + C27410) * C1511 + (C27411 + C27412) * C1509 -
              (C25637 * C3321 + C50693 * C3324 + C25636 * C3322 +
               C25631 * C3325) *
                  C1512 -
              (C25637 * C3327 + C50693 * C3330 + C25636 * C3328 +
               C25631 * C3331) *
                  C50790) *
                 C50866) *
                C50890) *
               C50764) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C1511 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C1509 -
             (C28946 + C28947) * C1512 - (C28948 + C28949) * C50790) *
                C22818 +
            ((C25833 + C25834) * C1511 + (C25835 + C25836) * C1509 -
             C29476 * C1512 - C29477 * C50790) *
                C50866) *
               C50996 +
           (((C28947 + C28946) * C1511 + (C28949 + C28948) * C1509 -
             (C29701 + C29700) * C1512 - (C29703 + C29702) * C50790) *
                C22818 +
            (C29478 * C1511 + C29479 * C1509 - C29908 * C1512 -
             C29909 * C50790) *
                C50866) *
               C50890) *
              C51027 +
          (((C29478 * C1512 -
             ((C25836 + C25835) * C1509 + (C25834 + C25833) * C1511) +
             C29479 * C50790) *
                C22818 +
            (C29480 * C1512 -
             ((C25840 + C25839) * C1509 + (C25838 + C25837) * C1511) +
             C29481 * C50790) *
                C50866) *
               C50996 +
           ((C29906 * C1512 - (C29477 * C1509 + C29476 * C1511) +
             C29907 * C50790) *
                C22818 +
            ((C26801 + C26802) * C1512 - (C26484 * C1509 + C26483 * C1511) +
             (C26803 + C26804) * C50790) *
                C50866) *
               C50890) *
              C51015 +
          ((C28245 * C22818 +
            ((C26174 + C26173) * C1511 + (C26172 + C26171) * C1509 -
             (C26480 + C26479) * C1512 - (C26482 + C26481) * C50790) *
                C50866) *
               C50996 +
           ((C29480 * C1511 + C29481 * C1509 - (C26802 + C26801) * C1512 -
             (C26804 + C26803) * C50790) *
                C22818 +
            ((C26479 + C26480) * C1511 + (C26481 + C26482) * C1509 -
             (C25637 * C8950 + C50693 * C8952 + C25636 * C8951 +
              C25631 * C8953) *
                 C1512 -
             (C25637 * C8954 + C50693 * C8956 + C25636 * C8955 +
              C25631 * C8957) *
                 C50790) *
                C50866) *
               C50890) *
              C1274) *
         C50716) /
        (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C1744 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C51028 -
             (C28946 + C28947) * C1745 - (C28948 + C28949) * C51018 +
             (C29700 + C29701) * C1746 + (C29702 + C29703) * C1743) *
                C22818 +
            ((C25833 + C25834) * C1744 + (C25835 + C25836) * C51028 -
             C29476 * C1745 - C29477 * C51018 + C29906 * C1746 +
             C29907 * C1743) *
                C50866) *
               C50996 +
           (((C28947 + C28946) * C1744 + (C28949 + C28948) * C51028 -
             (C29701 + C29700) * C1745 - (C29703 + C29702) * C51018 +
             (C30061 + C30060) * C1746 + (C30063 + C30062) * C1743) *
                C22818 +
            (C29478 * C1744 + C29479 * C51028 - C29908 * C1745 -
             C29909 * C51018 + (C29918 + C29919) * C1746 +
             (C29920 + C29921) * C1743) *
                C50866) *
               C50890) *
              C1169 +
          (((C29478 * C1745 -
             ((C25836 + C25835) * C51028 + (C25834 + C25833) * C1744) +
             C29479 * C51018 - C29908 * C1746 - C29909 * C1743) *
                C22818 +
            (C29480 * C1745 -
             ((C25840 + C25839) * C51028 + (C25838 + C25837) * C1744) +
             C29481 * C51018 - (C26802 + C26801) * C1746 -
             (C26804 + C26803) * C1743) *
                C50866) *
               C50996 +
           ((C29906 * C1745 - (C29477 * C51028 + C29476 * C1744) +
             C29907 * C51018 - (C29919 + C29918) * C1746 -
             (C29921 + C29920) * C1743) *
                C22818 +
            ((C26801 + C26802) * C1745 - (C26484 * C51028 + C26483 * C1744) +
             (C26803 + C26804) * C51018 -
             (C25637 * C9080 + C50693 * C9082 + C25636 * C9081 +
              C25631 * C9083) *
                 C1746 -
             (C25637 * C9084 + C50693 * C9086 + C25636 * C9085 +
              C25631 * C9087) *
                 C1743) *
                C50866) *
               C50890) *
              C50764) *
         C50716) /
        (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                  C121 +
              (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                  C50778) *
                 C22818 +
             ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
                C50996 +
            (((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C22818 +
             ((C26471 + C26470) * C121 + (C26473 + C26472) * C50778) * C50866) *
                C50890) *
               C501 -
           (((C26484 * C50778 + C26483 * C121) * C50866 +
             ((C26472 + C26473) * C50778 + (C26470 + C26471) * C121) * C22818) *
                C50890 +
            (((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C50866 +
             ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C22818) *
                C50996) *
               C502 +
           ((C26181 * C22818 +
             ((C26174 + C26173) * C121 + (C26172 + C26171) * C50778) * C50866) *
                C50996 +
            (((C26476 + C26475) * C121 + (C26478 + C26477) * C50778) * C22818 +
             ((C26479 + C26480) * C121 + (C26481 + C26482) * C50778) * C50866) *
                C50890) *
               C503) *
              C50974 +
          (((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C22818 +
             ((C25845 + C25846) * C121 + (C25847 + C25848) * C50778) * C50866) *
                C50996 +
            (((C27405 + C27406) * C121 + (C27407 + C27408) * C50778) * C22818 +
             ((C27409 + C27410) * C121 + (C27411 + C27412) * C50778) * C50866) *
                C50890) *
               C502 -
           ((((C27408 + C27407) * C50778 + (C27406 + C27405) * C121) * C50866 +
             ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C22818) *
                C50890 +
            (((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C50866 +
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C50778 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C121) *
                 C22818) *
                C50996) *
               C501 -
           ((((C25637 * C2987 + C50693 * C2990 + C25636 * C2988 +
               C25631 * C2991) *
                  C50778 +
              (C25637 * C2981 + C50693 * C2984 + C25636 * C2982 +
               C25631 * C2985) *
                  C121) *
                 C50866 +
             ((C27412 + C27411) * C50778 + (C27410 + C27409) * C121) * C22818) *
                C50890 +
            (((C26178 + C26177) * C50778 + (C26176 + C26175) * C121) * C50866 +
             C26182 * C22818) *
                C50996) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C22818 +
            ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
               C50996 +
           (((C25636 * C382 + C25631 * C388 + C25637 * C381 + C50693 * C387) *
                 C121 +
             (C25636 * C392 + C25631 * C400 + C25637 * C391 + C50693 * C399) *
                 C50778) *
                C22818 +
            ((C26471 + C26470) * C121 + (C26473 + C26472) * C50778) * C50866) *
               C50890) *
              C50748 * C113 -
          ((((C27408 + C27407) * C50778 + (C27406 + C27405) * C121) * C50866 +
            ((C25637 * C390 + C50693 * C398 + C25636 * C391 + C25631 * C399) *
                 C50778 +
             (C25637 * C380 + C50693 * C386 + C25636 * C381 + C25631 * C387) *
                 C121) *
                C22818) *
               C50890 +
           (((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C50866 +
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50778 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C121) *
                C22818) *
               C50996) *
              C50748 * C114 +
          ((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                 C121 +
             (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                 C50778) *
                C22818 +
            ((C25849 + C25850) * C121 + (C25851 + C25852) * C50778) * C50866) *
               C50996 +
           (((C25636 * C380 + C25631 * C386 + C25637 * C379 + C50693 * C385) *
                 C121 +
             (C25636 * C390 + C25631 * C398 + C25637 * C389 + C50693 * C397) *
                 C50778) *
                C22818 +
            ((C25636 * C713 + C25631 * C721 + C25637 * C714 + C50693 * C722) *
                 C121 +
             (C25636 * C725 + C25631 * C737 + C25637 * C726 + C50693 * C738) *
                 C50778) *
                C50866) *
               C50890) *
              C50748 * C115 -
          ((((C25637 * C1409 + C50693 * C1410 + C25636 * C726 + C25631 * C738) *
                 C50778 +
             (C25637 * C1407 + C50693 * C1408 + C25636 * C714 + C25631 * C722) *
                 C121) *
                C50866 +
            ((C25637 * C394 + C50693 * C401 + C25636 * C389 + C25631 * C397) *
                 C50778 +
             (C25637 * C383 + C50693 * C393 + C25636 * C379 + C25631 * C385) *
                 C121) *
                C22818) *
               C50890 +
           (((C25637 * C268 + C50693 * C275 + C25636 * C259 + C25631 * C271) *
                 C50778 +
             (C25637 * C257 + C50693 * C267 + C25636 * C253 + C25631 * C263) *
                 C121) *
                C50866 +
            ((C25637 * C137 + C50693 * C147 + C25636 * C136 + C25631 * C146) *
                 C50778 +
             (C25637 * C126 + C50693 * C138 + C25636 * C125 + C25631 * C132) *
                 C121) *
                C22818) *
               C50996) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C844 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C841 -
             (C28946 + C28947) * C845 - (C28948 + C28949) * C842 +
             (C29700 + C29701) * C846 + (C29702 + C29703) * C843) *
                C22818 +
            ((C25833 + C25834) * C844 + (C25835 + C25836) * C841 -
             C29476 * C845 - C29477 * C842 + (C26797 + C26798) * C846 +
             (C26799 + C26800) * C843) *
                C50866) *
               C50996 +
           (((C28947 + C28946) * C844 + (C28949 + C28948) * C841 -
             (C29701 + C29700) * C845 - (C29703 + C29702) * C842 +
             (C25636 * C1058 + C25631 * C1062 + C25637 * C1057 +
              C50693 * C1061) *
                 C846 +
             (C25636 * C1066 + C25631 * C1070 + C25637 * C1065 +
              C50693 * C1069) *
                 C843) *
                C22818 +
            (C29478 * C844 + C29479 * C841 - (C26798 + C26797) * C845 -
             (C26800 + C26799) * C842 +
             (C25636 * C3451 + C25631 * C3454 + C25637 * C3450 +
              C50693 * C3453) *
                 C846 +
             (C25636 * C3457 + C25631 * C3460 + C25637 * C3456 +
              C50693 * C3459) *
                 C843) *
                C50866) *
               C50890) *
              C50748 * C50974 +
          ((((C28950 + C28951) * C845 -
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C841 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C844) +
             (C28952 + C28953) * C842 - (C29704 + C29705) * C846 -
             (C29706 + C29707) * C843) *
                C22818 +
            ((C27405 + C27406) * C845 -
             ((C25844 + C25843) * C841 + (C25842 + C25841) * C844) +
             (C27407 + C27408) * C842 - (C29708 + C29709) * C846 -
             (C29710 + C29711) * C843) *
                C50866) *
               C50996 +
           (((C29705 + C29704) * C845 -
             ((C28953 + C28952) * C841 + (C28951 + C28950) * C844) +
             (C29707 + C29706) * C842 -
             (C25637 * C1056 + C50693 * C1060 + C25636 * C1057 +
              C25631 * C1061) *
                 C846 -
             (C25637 * C1064 + C50693 * C1068 + C25636 * C1065 +
              C25631 * C1069) *
                 C843) *
                C22818 +
            ((C29709 + C29708) * C845 -
             ((C27408 + C27407) * C841 + (C27406 + C27405) * C844) +
             (C29711 + C29710) * C842 -
             (C25637 * C3449 + C50693 * C3452 + C25636 * C3450 +
              C25631 * C3453) *
                 C846 -
             (C25637 * C3455 + C50693 * C3458 + C25636 * C3456 +
              C25631 * C3459) *
                 C843) *
                C50866) *
               C50890) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C22818 +
            ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
               C50996 +
           (((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C22818 +
            ((C26471 + C26470) * C121 + (C26473 + C26472) * C50778) * C50866) *
               C50890) *
              C592 -
          (((C26484 * C50778 + C26483 * C121) * C50866 +
            ((C26472 + C26473) * C50778 + (C26470 + C26471) * C121) * C22818) *
               C50890 +
           (((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C50866 +
            ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C22818) *
               C50996) *
              C593 +
          ((C26181 * C22818 +
            ((C26174 + C26173) * C121 + (C26172 + C26171) * C50778) * C50866) *
               C50996 +
           (((C26476 + C26475) * C121 + (C26478 + C26477) * C50778) * C22818 +
            ((C26479 + C26480) * C121 + (C26481 + C26482) * C50778) * C50866) *
               C50890) *
              C594 -
          ((((C25637 * C8609 + C50693 * C8611 + C25636 * C8610 +
              C25631 * C8612) *
                 C50778 +
             (C25637 * C8605 + C50693 * C8607 + C25636 * C8606 +
              C25631 * C8608) *
                 C121) *
                C50866 +
            ((C26482 + C26481) * C50778 + (C26480 + C26479) * C121) * C22818) *
               C50890 +
           (((C26296 + C26295) * C50778 + (C26294 + C26293) * C121) * C50866 +
            C26297 * C22818) *
               C50996) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                  C121 +
              (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                  C50778) *
                 C22818 +
             ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
                C50996 +
            (((C25636 * C382 + C25631 * C388 + C25637 * C381 + C50693 * C387) *
                  C121 +
              (C25636 * C392 + C25631 * C400 + C25637 * C391 + C50693 * C399) *
                  C50778) *
                 C22818 +
             ((C26471 + C26470) * C121 + (C26473 + C26472) * C50778) * C50866) *
                C50890) *
               C50981 -
           (((C26484 * C50778 + C26483 * C121) * C50866 +
             ((C26472 + C26473) * C50778 + (C26470 + C26471) * C121) * C22818) *
                C50890 +
            (((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C50866 +
             ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C22818) *
                C50996) *
               C50764) *
              C250 +
          (((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C22818 +
             ((C25845 + C25846) * C121 + (C25847 + C25848) * C50778) * C50866) *
                C50996 +
            (((C27405 + C27406) * C121 + (C27407 + C27408) * C50778) * C22818 +
             ((C27409 + C27410) * C121 + (C27411 + C27412) * C50778) * C50866) *
                C50890) *
               C50764 -
           ((((C27408 + C27407) * C50778 + (C27406 + C27405) * C121) * C50866 +
             ((C25637 * C390 + C50693 * C398 + C25636 * C391 + C25631 * C399) *
                  C50778 +
              (C25637 * C380 + C50693 * C386 + C25636 * C381 + C25631 * C387) *
                  C121) *
                 C22818) *
                C50890 +
            (((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C50866 +
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C50778 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C121) *
                 C22818) *
                C50996) *
               C50981) *
              C251 +
          (((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                  C121 +
              (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                  C50778) *
                 C22818 +
             ((C25849 + C25850) * C121 + (C25851 + C25852) * C50778) * C50866) *
                C50996 +
            (((C25636 * C380 + C25631 * C386 + C25637 * C379 + C50693 * C385) *
                  C121 +
              (C25636 * C390 + C25631 * C398 + C25637 * C389 + C50693 * C397) *
                  C50778) *
                 C22818 +
             ((C28724 + C28725) * C121 + (C28726 + C28727) * C50778) * C50866) *
                C50890) *
               C50981 -
           ((((C25637 * C731 + C50693 * C739 + C25636 * C732 + C25631 * C740) *
                  C50778 +
              (C25637 * C715 + C50693 * C727 + C25636 * C716 + C25631 * C728) *
                  C121) *
                 C50866 +
             ((C28727 + C28726) * C50778 + (C28725 + C28724) * C121) * C22818) *
                C50890 +
            (((C25856 + C25855) * C50778 + (C25854 + C25853) * C121) * C50866 +
             ((C25852 + C25851) * C50778 + (C25850 + C25849) * C121) * C22818) *
                C50996) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C844 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C841 -
             (C28946 + C28947) * C845 - (C28948 + C28949) * C842 +
             (C29700 + C29701) * C846 + (C29702 + C29703) * C843) *
                C22818 +
            ((C25833 + C25834) * C844 + (C25835 + C25836) * C841 -
             C29476 * C845 - C29477 * C842 + C29906 * C846 + C29907 * C843) *
                C50866) *
               C50996 +
           (((C28947 + C28946) * C844 + (C28949 + C28948) * C841 -
             (C29701 + C29700) * C845 - (C29703 + C29702) * C842 +
             (C25636 * C1058 + C25631 * C1062 + C25637 * C1057 +
              C50693 * C1061) *
                 C846 +
             (C25636 * C1066 + C25631 * C1070 + C25637 * C1065 +
              C50693 * C1069) *
                 C843) *
                C22818 +
            (C29478 * C844 + C29479 * C841 - C29908 * C845 - C29909 * C842 +
             (C29918 + C29919) * C846 + (C29920 + C29921) * C843) *
                C50866) *
               C50890) *
              C50981 +
          (((C29478 * C845 -
             ((C25836 + C25835) * C841 + (C25834 + C25833) * C844) +
             C29479 * C842 - C29908 * C846 - C29909 * C843) *
                C22818 +
            (C29480 * C845 -
             ((C25840 + C25839) * C841 + (C25838 + C25837) * C844) +
             C29481 * C842 - (C26802 + C26801) * C846 -
             (C26804 + C26803) * C843) *
                C50866) *
               C50996 +
           ((C29906 * C845 - (C29477 * C841 + C29476 * C844) + C29907 * C842 -
             (C29919 + C29918) * C846 - (C29921 + C29920) * C843) *
                C22818 +
            ((C26801 + C26802) * C845 - (C26484 * C841 + C26483 * C844) +
             (C26803 + C26804) * C842 -
             (C25637 * C9080 + C50693 * C9082 + C25636 * C9081 +
              C25631 * C9083) *
                 C846 -
             (C25637 * C9084 + C50693 * C9086 + C25636 * C9085 +
              C25631 * C9087) *
                 C843) *
                C50866) *
               C50890) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C377 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50983 -
             (C28946 + C28947) * C378 - (C28948 + C28949) * C50790) *
                C22818 +
            ((C25833 + C25834) * C377 + (C25835 + C25836) * C50983 -
             C29476 * C378 - C29477 * C50790) *
                C50866) *
               C50996 +
           (((C28947 + C28946) * C377 + (C28949 + C28948) * C50983 -
             (C25637 * C848 + C50693 * C853 + C25636 * C847 + C25631 * C852) *
                 C378 -
             (C25637 * C857 + C50693 * C863 + C25636 * C856 + C25631 * C862) *
                 C50790) *
                C22818 +
            (C29478 * C377 + C29479 * C50983 - (C26798 + C26797) * C378 -
             (C26800 + C26799) * C50790) *
                C50866) *
               C50890) *
              C501 +
          (((C29478 * C378 -
             ((C25836 + C25835) * C50983 + (C25834 + C25833) * C377) +
             C29479 * C50790) *
                C22818 +
            (C29480 * C378 -
             ((C25840 + C25839) * C50983 + (C25838 + C25837) * C377) +
             C29481 * C50790) *
                C50866) *
               C50996 +
           (((C26797 + C26798) * C378 - (C29477 * C50983 + C29476 * C377) +
             (C26799 + C26800) * C50790) *
                C22818 +
            ((C26801 + C26802) * C378 - (C26484 * C50983 + C26483 * C377) +
             (C26803 + C26804) * C50790) *
                C50866) *
               C50890) *
              C502 +
          ((C26488 * C22818 +
            ((C26174 + C26173) * C377 + (C26172 + C26171) * C50983 -
             (C26480 + C26479) * C378 - (C26482 + C26481) * C50790) *
                C50866) *
               C50996 +
           ((C29480 * C377 + C29481 * C50983 - (C26802 + C26801) * C378 -
             (C26804 + C26803) * C50790) *
                C22818 +
            ((C26479 + C26480) * C377 + (C26481 + C26482) * C50983 -
             (C25637 * C8950 + C50693 * C8952 + C25636 * C8951 +
              C25631 * C8953) *
                 C378 -
             (C25637 * C8954 + C50693 * C8956 + C25636 * C8955 +
              C25631 * C8957) *
                 C50790) *
                C50866) *
               C50890) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C377 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50983 -
             (C28946 + C28947) * C378 - (C28948 + C28949) * C50790) *
                C22818 +
            ((C25833 + C25834) * C377 + (C25835 + C25836) * C50983 -
             (C26470 + C26471) * C378 - (C26472 + C26473) * C50790) *
                C50866) *
               C50996 +
           (((C28947 + C28946) * C377 + (C28949 + C28948) * C50983 -
             (C25637 * C848 + C50693 * C853 + C25636 * C847 + C25631 * C852) *
                 C378 -
             (C25637 * C857 + C50693 * C863 + C25636 * C856 + C25631 * C862) *
                 C50790) *
                C22818 +
            ((C26471 + C26470) * C377 + (C26473 + C26472) * C50983 -
             (C26798 + C26797) * C378 - (C26800 + C26799) * C50790) *
                C50866) *
               C50890) *
              C50748 * C250 +
          ((((C28950 + C28951) * C378 -
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C50983 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C377) +
             (C28952 + C28953) * C50790) *
                C22818 +
            ((C27405 + C27406) * C378 -
             ((C25844 + C25843) * C50983 + (C25842 + C25841) * C377) +
             (C27407 + C27408) * C50790) *
                C50866) *
               C50996 +
           (((C25636 * C848 + C25631 * C853 + C25637 * C849 + C50693 * C854) *
                 C378 -
             ((C28953 + C28952) * C50983 + (C28951 + C28950) * C377) +
             (C25636 * C857 + C25631 * C863 + C25637 * C858 + C50693 * C864) *
                 C50790) *
                C22818 +
            ((C25636 * C967 + C25631 * C971 + C25637 * C966 + C50693 * C970) *
                 C378 -
             ((C27408 + C27407) * C50983 + (C27406 + C27405) * C377) +
             (C25636 * C975 + C25631 * C979 + C25637 * C974 + C50693 * C978) *
                 C50790) *
                C50866) *
               C50890) *
              C50748 * C251 +
          ((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                 C377 +
             (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                 C50983 -
             (C28954 + C28955) * C378 - (C28956 + C28957) * C50790) *
                C22818 +
            ((C25849 + C25850) * C377 + (C25851 + C25852) * C50983 -
             (C28725 + C28724) * C378 - (C28727 + C28726) * C50790) *
                C50866) *
               C50996 +
           (((C28955 + C28954) * C377 + (C28957 + C28956) * C50983 -
             (C25637 * C850 + C50693 * C855 + C25636 * C849 + C25631 * C854) *
                 C378 -
             (C25637 * C859 + C50693 * C865 + C25636 * C858 + C25631 * C864) *
                 C50790) *
                C22818 +
            ((C28724 + C28725) * C377 + (C28726 + C28727) * C50983 -
             (C25637 * C965 + C50693 * C969 + C25636 * C966 + C25631 * C970) *
                 C378 -
             (C25637 * C973 + C50693 * C977 + C25636 * C974 + C25631 * C978) *
                 C50790) *
                C50866) *
               C50890) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C1051 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C1047 -
            (C28946 + C28947) * C1052 - (C28948 + C28949) * C1048 +
            (C29700 + C29701) * C1053 + (C29702 + C29703) * C1049 -
            (C30060 + C30061) * C1054 - (C30062 + C30063) * C1050) *
               C22818 +
           ((C25833 + C25834) * C1051 + (C25835 + C25836) * C1047 -
            C29476 * C1052 - C29477 * C1048 + C29906 * C1053 + C29907 * C1049 -
            (C29919 + C29918) * C1054 - (C29921 + C29920) * C1050) *
               C50866) *
              C50996 +
          (((C28947 + C28946) * C1051 + (C28949 + C28948) * C1047 -
            (C29701 + C29700) * C1052 - (C29703 + C29702) * C1048 +
            (C30061 + C30060) * C1053 + (C30063 + C30062) * C1049 -
            (C25637 * C6200 + C50693 * C6203 + C25636 * C6201 +
             C25631 * C6204) *
                C1054 -
            (C25637 * C6206 + C50693 * C6209 + C25636 * C6207 +
             C25631 * C6210) *
                C1050) *
               C22818 +
           (C29478 * C1051 + C29479 * C1047 - C29908 * C1052 - C29909 * C1048 +
            (C29918 + C29919) * C1053 + (C29920 + C29921) * C1049 -
            (C25637 * C16603 + C50693 * C16604 + C25636 * C13913 +
             C25631 * C13915) *
                C1054 -
            (C25637 * C16605 + C50693 * C16606 + C25636 * C13916 +
             C25631 * C13919) *
                C1050) *
               C50866) *
              C50890) *
         C50748 * C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C1511 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C1509 -
             (C28946 + C28947) * C1512 - (C28948 + C28949) * C50790) *
                C22818 +
            ((C25833 + C25834) * C1511 + (C25835 + C25836) * C1509 -
             C29476 * C1512 - C29477 * C50790) *
                C50866) *
               C50996 +
           (((C28947 + C28946) * C1511 + (C28949 + C28948) * C1509 -
             (C29701 + C29700) * C1512 - (C29703 + C29702) * C50790) *
                C22818 +
            (C29478 * C1511 + C29479 * C1509 - C29908 * C1512 -
             C29909 * C50790) *
                C50866) *
               C50890) *
              C50748 * C51026 +
          ((((C28950 + C28951) * C1512 -
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C1509 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C1511) +
             (C28952 + C28953) * C50790) *
                C22818 +
            (C30710 * C1512 -
             ((C25844 + C25843) * C1509 + (C25842 + C25841) * C1511) +
             C30711 * C50790) *
                C50866) *
               C50996 +
           (((C29705 + C29704) * C1512 -
             ((C28953 + C28952) * C1509 + (C28951 + C28950) * C1511) +
             (C29707 + C29706) * C50790) *
                C22818 +
            ((C29709 + C29708) * C1512 - (C30712 * C1509 + C30713 * C1511) +
             (C29711 + C29710) * C50790) *
                C50866) *
               C50890) *
              C50748 * C51012 +
          ((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                 C1511 +
             (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                 C1509 -
             (C28954 + C28955) * C1512 - (C28956 + C28957) * C50790) *
                C22818 +
            ((C25849 + C25850) * C1511 + (C25851 + C25852) * C1509 -
             (C28725 + C28724) * C1512 - (C28727 + C28726) * C50790) *
                C50866) *
               C50996 +
           (((C28955 + C28954) * C1511 + (C28957 + C28956) * C1509 -
             (C25637 * C850 + C50693 * C855 + C25636 * C849 + C25631 * C854) *
                 C1512 -
             (C25637 * C859 + C50693 * C865 + C25636 * C858 + C25631 * C864) *
                 C50790) *
                C22818 +
            ((C28724 + C28725) * C1511 + (C28726 + C28727) * C1509 -
             (C25637 * C965 + C50693 * C969 + C25636 * C966 + C25631 * C970) *
                 C1512 -
             (C25637 * C973 + C50693 * C977 + C25636 * C974 + C25631 * C978) *
                 C50790) *
                C50866) *
               C50890) *
              C50748 * C1173)) /
        (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                  C1511 +
              (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                  C1509 -
              (C28946 + C28947) * C1512 - (C28948 + C28949) * C50790) *
                 C22818 +
             ((C25833 + C25834) * C1511 + (C25835 + C25836) * C1509 -
              C29476 * C1512 - C29477 * C50790) *
                 C50866) *
                C50996 +
            (((C28947 + C28946) * C1511 + (C28949 + C28948) * C1509 -
              (C29701 + C29700) * C1512 - (C29703 + C29702) * C50790) *
                 C22818 +
             (C29478 * C1511 + C29479 * C1509 - C29908 * C1512 -
              C29909 * C50790) *
                 C50866) *
                C50890) *
               C50981 +
           (((C29478 * C1512 -
              ((C25836 + C25835) * C1509 + (C25834 + C25833) * C1511) +
              C29479 * C50790) *
                 C22818 +
             (C29480 * C1512 -
              ((C25840 + C25839) * C1509 + (C25838 + C25837) * C1511) +
              C29481 * C50790) *
                 C50866) *
                C50996 +
            ((C29906 * C1512 - (C29477 * C1509 + C29476 * C1511) +
              C29907 * C50790) *
                 C22818 +
             ((C26801 + C26802) * C1512 - (C26484 * C1509 + C26483 * C1511) +
              (C26803 + C26804) * C50790) *
                 C50866) *
                C50890) *
               C50764) *
              C1275 +
          (((((C28950 + C28951) * C1512 -
              ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                   C1509 +
               (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                   C1511) +
              (C28952 + C28953) * C50790) *
                 C22818 +
             (C30710 * C1512 -
              ((C25844 + C25843) * C1509 + (C25842 + C25841) * C1511) +
              C30711 * C50790) *
                 C50866) *
                C50996 +
            (((C29705 + C29704) * C1512 -
              ((C28953 + C28952) * C1509 + (C28951 + C28950) * C1511) +
              (C29707 + C29706) * C50790) *
                 C22818 +
             ((C29709 + C29708) * C1512 - (C30712 * C1509 + C30713 * C1511) +
              (C29711 + C29710) * C50790) *
                 C50866) *
                C50890) *
               C50981 +
           ((((C25841 + C25842) * C1511 + (C25843 + C25844) * C1509 -
              C30713 * C1512 - C30712 * C50790) *
                 C22818 +
             ((C25845 + C25846) * C1511 + (C25847 + C25848) * C1509 -
              (C27410 + C27409) * C1512 - (C27412 + C27411) * C50790) *
                 C50866) *
                C50996 +
            ((C30710 * C1511 + C30711 * C1509 - (C29708 + C29709) * C1512 -
              (C29710 + C29711) * C50790) *
                 C22818 +
             ((C27409 + C27410) * C1511 + (C27411 + C27412) * C1509 -
              (C25637 * C3321 + C50693 * C3324 + C25636 * C3322 +
               C25631 * C3325) *
                  C1512 -
              (C25637 * C3327 + C50693 * C3330 + C25636 * C3328 +
               C25631 * C3331) *
                  C50790) *
                 C50866) *
                C50890) *
               C50764) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C1744 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C51028 -
             (C28946 + C28947) * C1745 - (C28948 + C28949) * C51018 +
             (C29700 + C29701) * C1746 + (C29702 + C29703) * C1743) *
                C22818 +
            ((C25833 + C25834) * C1744 + (C25835 + C25836) * C51028 -
             C29476 * C1745 - C29477 * C51018 + C29906 * C1746 +
             C29907 * C1743) *
                C50866) *
               C50996 +
           (((C28947 + C28946) * C1744 + (C28949 + C28948) * C51028 -
             (C29701 + C29700) * C1745 - (C29703 + C29702) * C51018 +
             (C30061 + C30060) * C1746 + (C30063 + C30062) * C1743) *
                C22818 +
            (C29478 * C1744 + C29479 * C51028 - C29908 * C1745 -
             C29909 * C51018 + (C29918 + C29919) * C1746 +
             (C29920 + C29921) * C1743) *
                C50866) *
               C50890) *
              C50748 * C1275 +
          ((((C28950 + C28951) * C1745 -
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C51028 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C1744) +
             (C28952 + C28953) * C51018 - (C29704 + C29705) * C1746 -
             (C29706 + C29707) * C1743) *
                C22818 +
            (C30710 * C1745 -
             ((C25844 + C25843) * C51028 + (C25842 + C25841) * C1744) +
             C30711 * C51018 - (C29708 + C29709) * C1746 -
             (C29710 + C29711) * C1743) *
                C50866) *
               C50996 +
           (((C29705 + C29704) * C1745 -
             ((C28953 + C28952) * C51028 + (C28951 + C28950) * C1744) +
             (C29707 + C29706) * C51018 -
             (C25637 * C1056 + C50693 * C1060 + C25636 * C1057 +
              C25631 * C1061) *
                 C1746 -
             (C25637 * C1064 + C50693 * C1068 + C25636 * C1065 +
              C25631 * C1069) *
                 C1743) *
                C22818 +
            ((C29709 + C29708) * C1745 - (C30712 * C51028 + C30713 * C1744) +
             (C29711 + C29710) * C51018 -
             (C25637 * C3449 + C50693 * C3452 + C25636 * C3450 +
              C25631 * C3453) *
                 C1746 -
             (C25637 * C3455 + C50693 * C3458 + C25636 * C3456 +
              C25631 * C3459) *
                 C1743) *
                C50866) *
               C50890) *
              C50748 * C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C22818 +
            ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
               C50996 +
           (((C25636 * C382 + C25631 * C388 + C25637 * C381 + C50693 * C387) *
                 C121 +
             (C25636 * C392 + C25631 * C400 + C25637 * C391 + C50693 * C399) *
                 C50778) *
                C22818 +
            ((C26471 + C26470) * C121 + (C26473 + C26472) * C50778) * C50866) *
               C50890) *
              C50748 * C113 -
          ((((C27408 + C27407) * C50778 + (C27406 + C27405) * C121) * C50866 +
            ((C25637 * C390 + C50693 * C398 + C25636 * C391 + C25631 * C399) *
                 C50778 +
             (C25637 * C380 + C50693 * C386 + C25636 * C381 + C25631 * C387) *
                 C121) *
                C22818) *
               C50890 +
           (((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C50866 +
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50778 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C121) *
                C22818) *
               C50996) *
              C50748 * C114 +
          ((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                 C121 +
             (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                 C50778) *
                C22818 +
            ((C25849 + C25850) * C121 + (C25851 + C25852) * C50778) * C50866) *
               C50996 +
           (((C25636 * C380 + C25631 * C386 + C25637 * C379 + C50693 * C385) *
                 C121 +
             (C25636 * C390 + C25631 * C398 + C25637 * C389 + C50693 * C397) *
                 C50778) *
                C22818 +
            ((C25636 * C713 + C25631 * C721 + C25637 * C714 + C50693 * C722) *
                 C121 +
             (C25636 * C725 + C25631 * C737 + C25637 * C726 + C50693 * C738) *
                 C50778) *
                C50866) *
               C50890) *
              C50748 * C115 -
          ((((C25637 * C1409 + C50693 * C1410 + C25636 * C726 + C25631 * C738) *
                 C50778 +
             (C25637 * C1407 + C50693 * C1408 + C25636 * C714 + C25631 * C722) *
                 C121) *
                C50866 +
            ((C25637 * C394 + C50693 * C401 + C25636 * C389 + C25631 * C397) *
                 C50778 +
             (C25637 * C383 + C50693 * C393 + C25636 * C379 + C25631 * C385) *
                 C121) *
                C22818) *
               C50890 +
           (((C25637 * C268 + C50693 * C275 + C25636 * C259 + C25631 * C271) *
                 C50778 +
             (C25637 * C257 + C50693 * C267 + C25636 * C253 + C25631 * C263) *
                 C121) *
                C50866 +
            ((C25637 * C137 + C50693 * C147 + C25636 * C136 + C25631 * C146) *
                 C50778 +
             (C25637 * C126 + C50693 * C138 + C25636 * C125 + C25631 * C132) *
                 C121) *
                C22818) *
               C50996) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                  C121 +
              (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                  C50778) *
                 C22818 +
             ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
                C50996 +
            (((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C22818 +
             ((C26471 + C26470) * C121 + (C26473 + C26472) * C50778) * C50866) *
                C50890) *
               C501 -
           (((C26484 * C50778 + C26483 * C121) * C50866 +
             ((C26472 + C26473) * C50778 + (C26470 + C26471) * C121) * C22818) *
                C50890 +
            (((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C50866 +
             ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C22818) *
                C50996) *
               C502 +
           ((C26181 * C22818 +
             ((C26174 + C26173) * C121 + (C26172 + C26171) * C50778) * C50866) *
                C50996 +
            (((C26476 + C26475) * C121 + (C26478 + C26477) * C50778) * C22818 +
             ((C26479 + C26480) * C121 + (C26481 + C26482) * C50778) * C50866) *
                C50890) *
               C503) *
              C50974 +
          (((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C22818 +
             ((C25845 + C25846) * C121 + (C25847 + C25848) * C50778) * C50866) *
                C50996 +
            (((C27405 + C27406) * C121 + (C27407 + C27408) * C50778) * C22818 +
             ((C27409 + C27410) * C121 + (C27411 + C27412) * C50778) * C50866) *
                C50890) *
               C502 -
           ((((C27408 + C27407) * C50778 + (C27406 + C27405) * C121) * C50866 +
             ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C22818) *
                C50890 +
            (((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C50866 +
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C50778 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C121) *
                 C22818) *
                C50996) *
               C501 -
           ((((C25637 * C2987 + C50693 * C2990 + C25636 * C2988 +
               C25631 * C2991) *
                  C50778 +
              (C25637 * C2981 + C50693 * C2984 + C25636 * C2982 +
               C25631 * C2985) *
                  C121) *
                 C50866 +
             ((C27412 + C27411) * C50778 + (C27410 + C27409) * C121) * C22818) *
                C50890 +
            (((C26178 + C26177) * C50778 + (C26176 + C26175) * C121) * C50866 +
             C26182 * C22818) *
                C50996) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                  C121 +
              (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                  C50778) *
                 C22818 +
             ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
                C50996 +
            (((C25636 * C382 + C25631 * C388 + C25637 * C381 + C50693 * C387) *
                  C121 +
              (C25636 * C392 + C25631 * C400 + C25637 * C391 + C50693 * C399) *
                  C50778) *
                 C22818 +
             ((C26471 + C26470) * C121 + (C26473 + C26472) * C50778) * C50866) *
                C50890) *
               C50981 -
           (((C26484 * C50778 + C26483 * C121) * C50866 +
             ((C26472 + C26473) * C50778 + (C26470 + C26471) * C121) * C22818) *
                C50890 +
            (((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C50866 +
             ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C22818) *
                C50996) *
               C50764) *
              C250 +
          (((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C22818 +
             ((C25845 + C25846) * C121 + (C25847 + C25848) * C50778) * C50866) *
                C50996 +
            (((C27405 + C27406) * C121 + (C27407 + C27408) * C50778) * C22818 +
             ((C27409 + C27410) * C121 + (C27411 + C27412) * C50778) * C50866) *
                C50890) *
               C50764 -
           ((((C27408 + C27407) * C50778 + (C27406 + C27405) * C121) * C50866 +
             ((C25637 * C390 + C50693 * C398 + C25636 * C391 + C25631 * C399) *
                  C50778 +
              (C25637 * C380 + C50693 * C386 + C25636 * C381 + C25631 * C387) *
                  C121) *
                 C22818) *
                C50890 +
            (((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C50866 +
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C50778 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C121) *
                 C22818) *
                C50996) *
               C50981) *
              C251 +
          (((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                  C121 +
              (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                  C50778) *
                 C22818 +
             ((C25849 + C25850) * C121 + (C25851 + C25852) * C50778) * C50866) *
                C50996 +
            (((C25636 * C380 + C25631 * C386 + C25637 * C379 + C50693 * C385) *
                  C121 +
              (C25636 * C390 + C25631 * C398 + C25637 * C389 + C50693 * C397) *
                  C50778) *
                 C22818 +
             ((C28724 + C28725) * C121 + (C28726 + C28727) * C50778) * C50866) *
                C50890) *
               C50981 -
           ((((C25637 * C731 + C50693 * C739 + C25636 * C732 + C25631 * C740) *
                  C50778 +
              (C25637 * C715 + C50693 * C727 + C25636 * C716 + C25631 * C728) *
                  C121) *
                 C50866 +
             ((C28727 + C28726) * C50778 + (C28725 + C28724) * C121) * C22818) *
                C50890 +
            (((C25856 + C25855) * C50778 + (C25854 + C25853) * C121) * C50866 +
             ((C25852 + C25851) * C50778 + (C25850 + C25849) * C121) * C22818) *
                C50996) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C22818 +
            ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
               C50996 +
           (((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C22818 +
            ((C26471 + C26470) * C121 + (C26473 + C26472) * C50778) * C50866) *
               C50890) *
              C592 -
          (((C26484 * C50778 + C26483 * C121) * C50866 +
            ((C26472 + C26473) * C50778 + (C26470 + C26471) * C121) * C22818) *
               C50890 +
           (((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C50866 +
            ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C22818) *
               C50996) *
              C593 +
          ((C26181 * C22818 +
            ((C26174 + C26173) * C121 + (C26172 + C26171) * C50778) * C50866) *
               C50996 +
           (((C26476 + C26475) * C121 + (C26478 + C26477) * C50778) * C22818 +
            ((C26479 + C26480) * C121 + (C26481 + C26482) * C50778) * C50866) *
               C50890) *
              C594 -
          ((((C25637 * C8609 + C50693 * C8611 + C25636 * C8610 +
              C25631 * C8612) *
                 C50778 +
             (C25637 * C8605 + C50693 * C8607 + C25636 * C8606 +
              C25631 * C8608) *
                 C121) *
                C50866 +
            ((C26482 + C26481) * C50778 + (C26480 + C26479) * C121) * C22818) *
               C50890 +
           (((C26296 + C26295) * C50778 + (C26294 + C26293) * C121) * C50866 +
            C26297 * C22818) *
               C50996) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C377 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50983 -
             (C28946 + C28947) * C378 - (C28948 + C28949) * C50790) *
                C22818 +
            ((C25833 + C25834) * C377 + (C25835 + C25836) * C50983 -
             (C26470 + C26471) * C378 - (C26472 + C26473) * C50790) *
                C50866) *
               C50996 +
           (((C28947 + C28946) * C377 + (C28949 + C28948) * C50983 -
             (C25637 * C848 + C50693 * C853 + C25636 * C847 + C25631 * C852) *
                 C378 -
             (C25637 * C857 + C50693 * C863 + C25636 * C856 + C25631 * C862) *
                 C50790) *
                C22818 +
            ((C26471 + C26470) * C377 + (C26473 + C26472) * C50983 -
             (C26798 + C26797) * C378 - (C26800 + C26799) * C50790) *
                C50866) *
               C50890) *
              C50748 * C250 +
          ((((C28950 + C28951) * C378 -
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C50983 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C377) +
             (C28952 + C28953) * C50790) *
                C22818 +
            ((C27405 + C27406) * C378 -
             ((C25844 + C25843) * C50983 + (C25842 + C25841) * C377) +
             (C27407 + C27408) * C50790) *
                C50866) *
               C50996 +
           (((C25636 * C848 + C25631 * C853 + C25637 * C849 + C50693 * C854) *
                 C378 -
             ((C28953 + C28952) * C50983 + (C28951 + C28950) * C377) +
             (C25636 * C857 + C25631 * C863 + C25637 * C858 + C50693 * C864) *
                 C50790) *
                C22818 +
            ((C25636 * C967 + C25631 * C971 + C25637 * C966 + C50693 * C970) *
                 C378 -
             ((C27408 + C27407) * C50983 + (C27406 + C27405) * C377) +
             (C25636 * C975 + C25631 * C979 + C25637 * C974 + C50693 * C978) *
                 C50790) *
                C50866) *
               C50890) *
              C50748 * C251 +
          ((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                 C377 +
             (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                 C50983 -
             (C28954 + C28955) * C378 - (C28956 + C28957) * C50790) *
                C22818 +
            ((C25849 + C25850) * C377 + (C25851 + C25852) * C50983 -
             (C28725 + C28724) * C378 - (C28727 + C28726) * C50790) *
                C50866) *
               C50996 +
           (((C28955 + C28954) * C377 + (C28957 + C28956) * C50983 -
             (C25637 * C850 + C50693 * C855 + C25636 * C849 + C25631 * C854) *
                 C378 -
             (C25637 * C859 + C50693 * C865 + C25636 * C858 + C25631 * C864) *
                 C50790) *
                C22818 +
            ((C28724 + C28725) * C377 + (C28726 + C28727) * C50983 -
             (C25637 * C965 + C50693 * C969 + C25636 * C966 + C25631 * C970) *
                 C378 -
             (C25637 * C973 + C50693 * C977 + C25636 * C974 + C25631 * C978) *
                 C50790) *
                C50866) *
               C50890) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C377 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50983 -
             (C28946 + C28947) * C378 - (C28948 + C28949) * C50790) *
                C22818 +
            ((C25833 + C25834) * C377 + (C25835 + C25836) * C50983 -
             C29476 * C378 - C29477 * C50790) *
                C50866) *
               C50996 +
           (((C28947 + C28946) * C377 + (C28949 + C28948) * C50983 -
             (C25637 * C848 + C50693 * C853 + C25636 * C847 + C25631 * C852) *
                 C378 -
             (C25637 * C857 + C50693 * C863 + C25636 * C856 + C25631 * C862) *
                 C50790) *
                C22818 +
            (C29478 * C377 + C29479 * C50983 - (C26798 + C26797) * C378 -
             (C26800 + C26799) * C50790) *
                C50866) *
               C50890) *
              C501 +
          (((C29478 * C378 -
             ((C25836 + C25835) * C50983 + (C25834 + C25833) * C377) +
             C29479 * C50790) *
                C22818 +
            (C29480 * C378 -
             ((C25840 + C25839) * C50983 + (C25838 + C25837) * C377) +
             C29481 * C50790) *
                C50866) *
               C50996 +
           (((C26797 + C26798) * C378 - (C29477 * C50983 + C29476 * C377) +
             (C26799 + C26800) * C50790) *
                C22818 +
            ((C26801 + C26802) * C378 - (C26484 * C50983 + C26483 * C377) +
             (C26803 + C26804) * C50790) *
                C50866) *
               C50890) *
              C502 +
          ((C26488 * C22818 +
            ((C26174 + C26173) * C377 + (C26172 + C26171) * C50983 -
             (C26480 + C26479) * C378 - (C26482 + C26481) * C50790) *
                C50866) *
               C50996 +
           ((C29480 * C377 + C29481 * C50983 - (C26802 + C26801) * C378 -
             (C26804 + C26803) * C50790) *
                C22818 +
            ((C26479 + C26480) * C377 + (C26481 + C26482) * C50983 -
             (C25637 * C8950 + C50693 * C8952 + C25636 * C8951 +
              C25631 * C8953) *
                 C378 -
             (C25637 * C8954 + C50693 * C8956 + C25636 * C8955 +
              C25631 * C8957) *
                 C50790) *
                C50866) *
               C50890) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                  C121 +
              (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                  C50778) *
                 C22818 +
             ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C50866) *
                C32103 +
            (((C15871 + C15870) * C121 + (C15873 + C15872) * C50778) * C22818 +
             (C41959 * C121 + C41960 * C50778) * C50866) *
                C50890) *
               C1169 -
           (((C8654 * C50778 + C8653 * C121) * C50866 +
             (C41958 * C50778 + C41957 * C121) * C22818) *
                C50890 +
            (((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C50866 +
             ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C22818) *
                C32103) *
               C50764) *
              C51026 +
          (((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C22818 +
             ((C7999 + C8000) * C121 + (C8001 + C8002) * C50778) * C50866) *
                C32103 +
            (((C9591 + C9592) * C121 + (C9593 + C9594) * C50778) * C22818 +
             ((C9595 + C9596) * C121 + (C9597 + C9598) * C50778) * C50866) *
                C50890) *
               C50764 -
           ((((C9594 + C9593) * C50778 + (C9592 + C9591) * C121) * C50866 +
             ((C15881 + C15880) * C50778 + (C15879 + C15878) * C121) * C22818) *
                C50890 +
            (((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C50866 +
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C50778 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C121) *
                 C22818) *
                C32103) *
               C1169) *
              C51012 +
          (((((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                  C121 +
              (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                  C50778) *
                 C22818 +
             ((C8003 + C8004) * C121 + (C8005 + C8006) * C50778) * C50866) *
                C32103 +
            (((C15887 + C15886) * C121 + (C15889 + C15888) * C50778) * C22818 +
             ((C41241 + C41242) * C121 + (C41243 + C41244) * C50778) * C50866) *
                C50890) *
               C1169 -
           ((((C49711 * C731 + C50693 * C739 + C49718 * C732 + C50967 * C740) *
                  C50778 +
              (C49711 * C715 + C50693 * C727 + C49718 * C716 + C50967 * C728) *
                  C121) *
                 C50866 +
             ((C41244 + C41243) * C50778 + (C41242 + C41241) * C121) * C22818) *
                C50890 +
            (((C8010 + C8009) * C50778 + (C8008 + C8007) * C121) * C50866 +
             ((C8006 + C8005) * C50778 + (C8004 + C8003) * C121) * C22818) *
                C32103) *
               C50764) *
              C1173)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                  C121 +
              (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                  C50778) *
                 C22818 +
             ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C50866) *
                C32103 +
            (((C15871 + C15870) * C121 + (C15873 + C15872) * C50778) * C22818 +
             (C41959 * C121 + C41960 * C50778) * C50866) *
                C50890) *
               C51027 -
           (((C8654 * C50778 + C8653 * C121) * C50866 +
             (C41958 * C50778 + C41957 * C121) * C22818) *
                C50890 +
            (((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C50866 +
             ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C22818) *
                C32103) *
               C51015 +
           ((C8335 * C22818 +
             ((C8328 + C8327) * C121 + (C8326 + C8325) * C50778) * C50866) *
                C32103 +
            ((C41961 * C121 + C41962 * C50778) * C22818 +
             ((C8649 + C8650) * C121 + (C8651 + C8652) * C50778) * C50866) *
                C50890) *
               C1274) *
              C1275 +
          (((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C22818 +
             ((C7999 + C8000) * C121 + (C8001 + C8002) * C50778) * C50866) *
                C32103 +
            (((C9591 + C9592) * C121 + (C9593 + C9594) * C50778) * C22818 +
             ((C9595 + C9596) * C121 + (C9597 + C9598) * C50778) * C50866) *
                C50890) *
               C51015 -
           ((((C9594 + C9593) * C50778 + (C9592 + C9591) * C121) * C50866 +
             ((C15881 + C15880) * C50778 + (C15879 + C15878) * C121) * C22818) *
                C50890 +
            (((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C50866 +
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C50778 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C121) *
                 C22818) *
                C32103) *
               C51027 -
           ((((C49711 * C2987 + C50693 * C2990 + C49718 * C2988 +
               C50967 * C2991) *
                  C50778 +
              (C49711 * C2981 + C50693 * C2984 + C49718 * C2982 +
               C50967 * C2985) *
                  C121) *
                 C50866 +
             ((C9598 + C9597) * C50778 + (C9596 + C9595) * C121) * C22818) *
                C50890 +
            (((C8332 + C8331) * C50778 + (C8330 + C8329) * C121) * C50866 +
             C8336 * C22818) *
                C32103) *
               C1274) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                  C377 +
              (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                  C50983 -
              (C15870 + C15871) * C378 - (C15872 + C15873) * C50790) *
                 C22818 +
             ((C7987 + C7988) * C377 + (C7989 + C7990) * C50983 -
              C41957 * C378 - C41958 * C50790) *
                 C50866) *
                C32103 +
            (((C15871 + C15870) * C377 + (C15873 + C15872) * C50983 -
              (C15874 + C15875) * C378 - (C15876 + C15877) * C50790) *
                 C22818 +
             (C41959 * C377 + C41960 * C50983 - C16608 * C378 -
              C16609 * C50790) *
                 C50866) *
                C50890) *
               C1169 +
           (((C41959 * C378 -
              ((C7990 + C7989) * C50983 + (C7988 + C7987) * C377) +
              C41960 * C50790) *
                 C22818 +
             (C41961 * C378 -
              ((C7994 + C7993) * C50983 + (C7992 + C7991) * C377) +
              C41962 * C50790) *
                 C50866) *
                C32103 +
            ((C42351 * C378 - (C41958 * C50983 + C41957 * C377) +
              C42352 * C50790) *
                 C22818 +
             ((C8979 + C8980) * C378 - (C8654 * C50983 + C8653 * C377) +
              (C8981 + C8982) * C50790) *
                 C50866) *
                C50890) *
               C50764) *
              C1275 +
          (((((C15878 + C15879) * C378 -
              ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                   C50983 +
               (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                   C377) +
              (C15880 + C15881) * C50790) *
                 C22818 +
             (C43129 * C378 -
              ((C7998 + C7997) * C50983 + (C7996 + C7995) * C377) +
              C43130 * C50790) *
                 C50866) *
                C32103 +
            (((C15882 + C15883) * C378 -
              ((C15881 + C15880) * C50983 + (C15879 + C15878) * C377) +
              (C15884 + C15885) * C50790) *
                 C22818 +
             ((C17237 + C17236) * C378 - (C43131 * C50983 + C43132 * C377) +
              (C17239 + C17238) * C50790) *
                 C50866) *
                C50890) *
               C1169 +
           ((((C7995 + C7996) * C377 + (C7997 + C7998) * C50983 -
              C43132 * C378 - C43131 * C50790) *
                 C22818 +
             ((C7999 + C8000) * C377 + (C8001 + C8002) * C50983 -
              (C9596 + C9595) * C378 - (C9598 + C9597) * C50790) *
                 C50866) *
                C32103 +
            ((C43129 * C377 + C43130 * C50983 - (C17236 + C17237) * C378 -
              (C17238 + C17239) * C50790) *
                 C22818 +
             ((C9595 + C9596) * C377 + (C9597 + C9598) * C50983 -
              (C49711 * C3321 + C50693 * C3324 + C49718 * C3322 +
               C50967 * C3325) *
                  C378 -
              (C49711 * C3327 + C50693 * C3330 + C49718 * C3328 +
               C50967 * C3331) *
                  C50790) *
                 C50866) *
                C50890) *
               C50764) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                  C1511 +
              (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                  C1509 -
              (C15870 + C15871) * C1512 - (C15872 + C15873) * C50790) *
                 C22818 +
             ((C7987 + C7988) * C1511 + (C7989 + C7990) * C1509 -
              C41957 * C1512 - C41958 * C50790) *
                 C50866) *
                C32103 +
            (((C15871 + C15870) * C1511 + (C15873 + C15872) * C1509 -
              (C15874 + C15875) * C1512 - (C15876 + C15877) * C50790) *
                 C22818 +
             (C41959 * C1511 + C41960 * C1509 - C16608 * C1512 -
              C16609 * C50790) *
                 C50866) *
                C50890) *
               C1169 +
           (((C41959 * C1512 -
              ((C7990 + C7989) * C1509 + (C7988 + C7987) * C1511) +
              C41960 * C50790) *
                 C22818 +
             (C41961 * C1512 -
              ((C7994 + C7993) * C1509 + (C7992 + C7991) * C1511) +
              C41962 * C50790) *
                 C50866) *
                C32103 +
            ((C42351 * C1512 - (C41958 * C1509 + C41957 * C1511) +
              C42352 * C50790) *
                 C22818 +
             ((C8979 + C8980) * C1512 - (C8654 * C1509 + C8653 * C1511) +
              (C8981 + C8982) * C50790) *
                 C50866) *
                C50890) *
               C50764) *
              C50974 +
          (((((C15878 + C15879) * C1512 -
              ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                   C1509 +
               (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                   C1511) +
              (C15880 + C15881) * C50790) *
                 C22818 +
             (C43129 * C1512 -
              ((C7998 + C7997) * C1509 + (C7996 + C7995) * C1511) +
              C43130 * C50790) *
                 C50866) *
                C32103 +
            (((C15882 + C15883) * C1512 -
              ((C15881 + C15880) * C1509 + (C15879 + C15878) * C1511) +
              (C15884 + C15885) * C50790) *
                 C22818 +
             ((C17237 + C17236) * C1512 - (C43131 * C1509 + C43132 * C1511) +
              (C17239 + C17238) * C50790) *
                 C50866) *
                C50890) *
               C1169 +
           ((((C7995 + C7996) * C1511 + (C7997 + C7998) * C1509 -
              C43132 * C1512 - C43131 * C50790) *
                 C22818 +
             ((C7999 + C8000) * C1511 + (C8001 + C8002) * C1509 -
              (C9596 + C9595) * C1512 - (C9598 + C9597) * C50790) *
                 C50866) *
                C32103 +
            ((C43129 * C1511 + C43130 * C1509 - (C17236 + C17237) * C1512 -
              (C17238 + C17239) * C50790) *
                 C22818 +
             ((C9595 + C9596) * C1511 + (C9597 + C9598) * C1509 -
              (C49711 * C3321 + C50693 * C3324 + C49718 * C3322 +
               C50967 * C3325) *
                  C1512 -
              (C49711 * C3327 + C50693 * C3330 + C49718 * C3328 +
               C50967 * C3331) *
                  C50790) *
                 C50866) *
                C50890) *
               C50764) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C1511 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C1509 -
             (C15870 + C15871) * C1512 - (C15872 + C15873) * C50790) *
                C22818 +
            ((C7987 + C7988) * C1511 + (C7989 + C7990) * C1509 -
             C41957 * C1512 - C41958 * C50790) *
                C50866) *
               C32103 +
           (((C15871 + C15870) * C1511 + (C15873 + C15872) * C1509 -
             (C15874 + C15875) * C1512 - (C15876 + C15877) * C50790) *
                C22818 +
            (C41959 * C1511 + C41960 * C1509 - C16608 * C1512 -
             C16609 * C50790) *
                C50866) *
               C50890) *
              C51027 +
          (((C41959 * C1512 -
             ((C7990 + C7989) * C1509 + (C7988 + C7987) * C1511) +
             C41960 * C50790) *
                C22818 +
            (C41961 * C1512 -
             ((C7994 + C7993) * C1509 + (C7992 + C7991) * C1511) +
             C41962 * C50790) *
                C50866) *
               C32103 +
           ((C42351 * C1512 - (C41958 * C1509 + C41957 * C1511) +
             C42352 * C50790) *
                C22818 +
            ((C8979 + C8980) * C1512 - (C8654 * C1509 + C8653 * C1511) +
             (C8981 + C8982) * C50790) *
                C50866) *
               C50890) *
              C51015 +
          ((C10431 * C22818 +
            ((C8328 + C8327) * C1511 + (C8326 + C8325) * C1509 -
             (C8650 + C8649) * C1512 - (C8652 + C8651) * C50790) *
                C50866) *
               C32103 +
           ((C41961 * C1511 + C41962 * C1509 - (C8980 + C8979) * C1512 -
             (C8982 + C8981) * C50790) *
                C22818 +
            ((C8649 + C8650) * C1511 + (C8651 + C8652) * C1509 -
             (C49711 * C8950 + C50693 * C8952 + C49718 * C8951 +
              C50967 * C8953) *
                 C1512 -
             (C49711 * C8954 + C50693 * C8956 + C49718 * C8955 +
              C50967 * C8957) *
                 C50790) *
                C50866) *
               C50890) *
              C1274) *
         C50716) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C1744 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C51028 -
             (C15870 + C15871) * C1745 - (C15872 + C15873) * C51018 +
             C16430 * C1746 + C16431 * C1743) *
                C22818 +
            ((C7987 + C7988) * C1744 + (C7989 + C7990) * C51028 -
             C41957 * C1745 - C41958 * C51018 + C42351 * C1746 +
             C42352 * C1743) *
                C50866) *
               C32103 +
           (((C15871 + C15870) * C1744 + (C15873 + C15872) * C51028 -
             (C15874 + C15875) * C1745 - (C15876 + C15877) * C51018 +
             (C16450 + C16451) * C1746 + (C16452 + C16453) * C1743) *
                C22818 +
            (C41959 * C1744 + C41960 * C51028 - C16608 * C1745 -
             C16609 * C51018 + (C16619 + C16618) * C1746 +
             (C16621 + C16620) * C1743) *
                C50866) *
               C50890) *
              C1169 +
          (((C41959 * C1745 -
             ((C7990 + C7989) * C51028 + (C7988 + C7987) * C1744) +
             C41960 * C51018 - C16608 * C1746 - C16609 * C1743) *
                C22818 +
            (C41961 * C1745 -
             ((C7994 + C7993) * C51028 + (C7992 + C7991) * C1744) +
             C41962 * C51018 - (C8980 + C8979) * C1746 -
             (C8982 + C8981) * C1743) *
                C50866) *
               C32103 +
           ((C42351 * C1745 - (C41958 * C51028 + C41957 * C1744) +
             C42352 * C51018 - (C16618 + C16619) * C1746 -
             (C16620 + C16621) * C1743) *
                C22818 +
            ((C8979 + C8980) * C1745 - (C8654 * C51028 + C8653 * C1744) +
             (C8981 + C8982) * C51018 -
             (C49711 * C9080 + C50693 * C9082 + C49718 * C9081 +
              C50967 * C9083) *
                 C1746 -
             (C49711 * C9084 + C50693 * C9086 + C49718 * C9085 +
              C50967 * C9087) *
                 C1743) *
                C50866) *
               C50890) *
              C50764) *
         C50716) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                  C121 +
              (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                  C50778) *
                 C22818 +
             ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C50866) *
                C32103 +
            (((C15871 + C15870) * C121 + (C15873 + C15872) * C50778) * C22818 +
             ((C8641 + C8640) * C121 + (C8643 + C8642) * C50778) * C50866) *
                C50890) *
               C501 -
           (((C8654 * C50778 + C8653 * C121) * C50866 +
             ((C8642 + C8643) * C50778 + (C8640 + C8641) * C121) * C22818) *
                C50890 +
            (((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C50866 +
             ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C22818) *
                C32103) *
               C502 +
           ((C8335 * C22818 +
             ((C8328 + C8327) * C121 + (C8326 + C8325) * C50778) * C50866) *
                C32103 +
            (((C8646 + C8645) * C121 + (C8648 + C8647) * C50778) * C22818 +
             ((C8649 + C8650) * C121 + (C8651 + C8652) * C50778) * C50866) *
                C50890) *
               C503) *
              C50974 +
          (((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C22818 +
             ((C7999 + C8000) * C121 + (C8001 + C8002) * C50778) * C50866) *
                C32103 +
            (((C9591 + C9592) * C121 + (C9593 + C9594) * C50778) * C22818 +
             ((C9595 + C9596) * C121 + (C9597 + C9598) * C50778) * C50866) *
                C50890) *
               C502 -
           ((((C9594 + C9593) * C50778 + (C9592 + C9591) * C121) * C50866 +
             ((C15881 + C15880) * C50778 + (C15879 + C15878) * C121) * C22818) *
                C50890 +
            (((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C50866 +
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C50778 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C121) *
                 C22818) *
                C32103) *
               C501 -
           ((((C49711 * C2987 + C50693 * C2990 + C49718 * C2988 +
               C50967 * C2991) *
                  C50778 +
              (C49711 * C2981 + C50693 * C2984 + C49718 * C2982 +
               C50967 * C2985) *
                  C121) *
                 C50866 +
             ((C9598 + C9597) * C50778 + (C9596 + C9595) * C121) * C22818) *
                C50890 +
            (((C8332 + C8331) * C50778 + (C8330 + C8329) * C121) * C50866 +
             C8336 * C22818) *
                C32103) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C22818 +
            ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C50866) *
               C32103 +
           (((C15871 + C15870) * C121 + (C15873 + C15872) * C50778) * C22818 +
            ((C8641 + C8640) * C121 + (C8643 + C8642) * C50778) * C50866) *
               C50890) *
              C50748 * C113 -
          ((((C9594 + C9593) * C50778 + (C9592 + C9591) * C121) * C50866 +
            ((C15881 + C15880) * C50778 + (C15879 + C15878) * C121) * C22818) *
               C50890 +
           (((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C50866 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C22818) *
               C32103) *
              C50748 * C114 +
          ((((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                 C121 +
             (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                 C50778) *
                C22818 +
            ((C8003 + C8004) * C121 + (C8005 + C8006) * C50778) * C50866) *
               C32103 +
           (((C15887 + C15886) * C121 + (C15889 + C15888) * C50778) * C22818 +
            ((C49718 * C713 + C50967 * C721 + C49711 * C714 + C50693 * C722) *
                 C121 +
             (C49718 * C725 + C50967 * C737 + C49711 * C726 + C50693 * C738) *
                 C50778) *
                C50866) *
               C50890) *
              C50748 * C115 -
          ((((C49711 * C1409 + C50693 * C1410 + C49718 * C726 + C50967 * C738) *
                 C50778 +
             (C49711 * C1407 + C50693 * C1408 + C49718 * C714 + C50967 * C722) *
                 C121) *
                C50866 +
            ((C49711 * C394 + C50693 * C401 + C49718 * C389 + C50967 * C397) *
                 C50778 +
             (C49711 * C383 + C50693 * C393 + C49718 * C379 + C50967 * C385) *
                 C121) *
                C22818) *
               C50890 +
           (((C49711 * C268 + C50693 * C275 + C49718 * C259 + C50967 * C271) *
                 C50778 +
             (C49711 * C257 + C50693 * C267 + C49718 * C253 + C50967 * C263) *
                 C121) *
                C50866 +
            ((C49711 * C137 + C50693 * C147 + C49718 * C136 + C50967 * C146) *
                 C50778 +
             (C49711 * C126 + C50693 * C138 + C49718 * C125 + C50967 * C132) *
                 C121) *
                C22818) *
               C32103) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C844 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C841 -
             (C15870 + C15871) * C845 - (C15872 + C15873) * C842 +
             C16430 * C846 + C16431 * C843) *
                C22818 +
            ((C7987 + C7988) * C844 + (C7989 + C7990) * C841 - C41957 * C845 -
             C41958 * C842 + (C8975 + C8976) * C846 + (C8977 + C8978) * C843) *
                C50866) *
               C32103 +
           (((C15871 + C15870) * C844 + (C15873 + C15872) * C841 -
             (C15874 + C15875) * C845 - (C15876 + C15877) * C842 +
             (C16450 + C16451) * C846 + (C16452 + C16453) * C843) *
                C22818 +
            (C41959 * C844 + C41960 * C841 - C16608 * C845 - C16609 * C842 +
             (C16619 + C16618) * C846 + (C16621 + C16620) * C843) *
                C50866) *
               C50890) *
              C50748 * C50974 +
          ((((C15878 + C15879) * C845 -
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C841 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C844) +
             (C15880 + C15881) * C842 - C16440 * C846 - C16441 * C843) *
                C22818 +
            ((C9591 + C9592) * C845 -
             ((C7998 + C7997) * C841 + (C7996 + C7995) * C844) +
             (C9593 + C9594) * C842 - (C17236 + C17237) * C846 -
             (C17238 + C17239) * C843) *
                C50866) *
               C32103 +
           (((C15882 + C15883) * C845 -
             ((C15881 + C15880) * C841 + (C15879 + C15878) * C844) +
             (C15884 + C15885) * C842 - (C16454 + C16455) * C846 -
             (C16456 + C16457) * C843) *
                C22818 +
            ((C17237 + C17236) * C845 -
             ((C9594 + C9593) * C841 + (C9592 + C9591) * C844) +
             (C17239 + C17238) * C842 -
             (C49711 * C3449 + C50693 * C3452 + C49718 * C3450 +
              C50967 * C3453) *
                 C846 -
             (C49711 * C3455 + C50693 * C3458 + C49718 * C3456 +
              C50967 * C3459) *
                 C843) *
                C50866) *
               C50890) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C22818 +
            ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C50866) *
               C32103 +
           (((C15871 + C15870) * C121 + (C15873 + C15872) * C50778) * C22818 +
            ((C8641 + C8640) * C121 + (C8643 + C8642) * C50778) * C50866) *
               C50890) *
              C592 -
          (((C8654 * C50778 + C8653 * C121) * C50866 +
            ((C8642 + C8643) * C50778 + (C8640 + C8641) * C121) * C22818) *
               C50890 +
           (((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C50866 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C22818) *
               C32103) *
              C593 +
          ((C8335 * C22818 +
            ((C8328 + C8327) * C121 + (C8326 + C8325) * C50778) * C50866) *
               C32103 +
           (((C8646 + C8645) * C121 + (C8648 + C8647) * C50778) * C22818 +
            ((C8649 + C8650) * C121 + (C8651 + C8652) * C50778) * C50866) *
               C50890) *
              C594 -
          ((((C49711 * C8609 + C50693 * C8611 + C49718 * C8610 +
              C50967 * C8612) *
                 C50778 +
             (C49711 * C8605 + C50693 * C8607 + C49718 * C8606 +
              C50967 * C8608) *
                 C121) *
                C50866 +
            ((C8652 + C8651) * C50778 + (C8650 + C8649) * C121) * C22818) *
               C50890 +
           (((C8458 + C8457) * C50778 + (C8456 + C8455) * C121) * C50866 +
            C8459 * C22818) *
               C32103) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                  C121 +
              (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                  C50778) *
                 C22818 +
             ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C50866) *
                C32103 +
            (((C15871 + C15870) * C121 + (C15873 + C15872) * C50778) * C22818 +
             ((C8641 + C8640) * C121 + (C8643 + C8642) * C50778) * C50866) *
                C50890) *
               C50981 -
           (((C8654 * C50778 + C8653 * C121) * C50866 +
             ((C8642 + C8643) * C50778 + (C8640 + C8641) * C121) * C22818) *
                C50890 +
            (((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C50866 +
             ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C22818) *
                C32103) *
               C50764) *
              C250 +
          (((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C22818 +
             ((C7999 + C8000) * C121 + (C8001 + C8002) * C50778) * C50866) *
                C32103 +
            (((C9591 + C9592) * C121 + (C9593 + C9594) * C50778) * C22818 +
             ((C9595 + C9596) * C121 + (C9597 + C9598) * C50778) * C50866) *
                C50890) *
               C50764 -
           ((((C9594 + C9593) * C50778 + (C9592 + C9591) * C121) * C50866 +
             ((C15881 + C15880) * C50778 + (C15879 + C15878) * C121) * C22818) *
                C50890 +
            (((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C50866 +
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C50778 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C121) *
                 C22818) *
                C32103) *
               C50981) *
              C251 +
          (((((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                  C121 +
              (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                  C50778) *
                 C22818 +
             ((C8003 + C8004) * C121 + (C8005 + C8006) * C50778) * C50866) *
                C32103 +
            (((C15887 + C15886) * C121 + (C15889 + C15888) * C50778) * C22818 +
             ((C41241 + C41242) * C121 + (C41243 + C41244) * C50778) * C50866) *
                C50890) *
               C50981 -
           ((((C49711 * C731 + C50693 * C739 + C49718 * C732 + C50967 * C740) *
                  C50778 +
              (C49711 * C715 + C50693 * C727 + C49718 * C716 + C50967 * C728) *
                  C121) *
                 C50866 +
             ((C41244 + C41243) * C50778 + (C41242 + C41241) * C121) * C22818) *
                C50890 +
            (((C8010 + C8009) * C50778 + (C8008 + C8007) * C121) * C50866 +
             ((C8006 + C8005) * C50778 + (C8004 + C8003) * C121) * C22818) *
                C32103) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C844 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C841 -
             (C15870 + C15871) * C845 - (C15872 + C15873) * C842 +
             C16430 * C846 + C16431 * C843) *
                C22818 +
            ((C7987 + C7988) * C844 + (C7989 + C7990) * C841 - C41957 * C845 -
             C41958 * C842 + C42351 * C846 + C42352 * C843) *
                C50866) *
               C32103 +
           (((C15871 + C15870) * C844 + (C15873 + C15872) * C841 -
             (C15874 + C15875) * C845 - (C15876 + C15877) * C842 +
             (C16450 + C16451) * C846 + (C16452 + C16453) * C843) *
                C22818 +
            (C41959 * C844 + C41960 * C841 - C16608 * C845 - C16609 * C842 +
             (C16619 + C16618) * C846 + (C16621 + C16620) * C843) *
                C50866) *
               C50890) *
              C50981 +
          (((C41959 * C845 - ((C7990 + C7989) * C841 + (C7988 + C7987) * C844) +
             C41960 * C842 - C16608 * C846 - C16609 * C843) *
                C22818 +
            (C41961 * C845 - ((C7994 + C7993) * C841 + (C7992 + C7991) * C844) +
             C41962 * C842 - (C8980 + C8979) * C846 - (C8982 + C8981) * C843) *
                C50866) *
               C32103 +
           ((C42351 * C845 - (C41958 * C841 + C41957 * C844) + C42352 * C842 -
             (C16618 + C16619) * C846 - (C16620 + C16621) * C843) *
                C22818 +
            ((C8979 + C8980) * C845 - (C8654 * C841 + C8653 * C844) +
             (C8981 + C8982) * C842 -
             (C49711 * C9080 + C50693 * C9082 + C49718 * C9081 +
              C50967 * C9083) *
                 C846 -
             (C49711 * C9084 + C50693 * C9086 + C49718 * C9085 +
              C50967 * C9087) *
                 C843) *
                C50866) *
               C50890) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C377 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50983 -
             (C15870 + C15871) * C378 - (C15872 + C15873) * C50790) *
                C22818 +
            ((C7987 + C7988) * C377 + (C7989 + C7990) * C50983 - C41957 * C378 -
             C41958 * C50790) *
                C50866) *
               C32103 +
           (((C15871 + C15870) * C377 + (C15873 + C15872) * C50983 -
             (C15874 + C15875) * C378 - (C15876 + C15877) * C50790) *
                C22818 +
            (C41959 * C377 + C41960 * C50983 - C16608 * C378 -
             C16609 * C50790) *
                C50866) *
               C50890) *
              C501 +
          (((C41959 * C378 -
             ((C7990 + C7989) * C50983 + (C7988 + C7987) * C377) +
             C41960 * C50790) *
                C22818 +
            (C41961 * C378 -
             ((C7994 + C7993) * C50983 + (C7992 + C7991) * C377) +
             C41962 * C50790) *
                C50866) *
               C32103 +
           (((C8975 + C8976) * C378 - (C41958 * C50983 + C41957 * C377) +
             (C8977 + C8978) * C50790) *
                C22818 +
            ((C8979 + C8980) * C378 - (C8654 * C50983 + C8653 * C377) +
             (C8981 + C8982) * C50790) *
                C50866) *
               C50890) *
              C502 +
          ((C8658 * C22818 +
            ((C8328 + C8327) * C377 + (C8326 + C8325) * C50983 -
             (C8650 + C8649) * C378 - (C8652 + C8651) * C50790) *
                C50866) *
               C32103 +
           ((C41961 * C377 + C41962 * C50983 - (C8980 + C8979) * C378 -
             (C8982 + C8981) * C50790) *
                C22818 +
            ((C8649 + C8650) * C377 + (C8651 + C8652) * C50983 -
             (C49711 * C8950 + C50693 * C8952 + C49718 * C8951 +
              C50967 * C8953) *
                 C378 -
             (C49711 * C8954 + C50693 * C8956 + C49718 * C8955 +
              C50967 * C8957) *
                 C50790) *
                C50866) *
               C50890) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C377 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50983 -
             (C15870 + C15871) * C378 - (C15872 + C15873) * C50790) *
                C22818 +
            ((C7987 + C7988) * C377 + (C7989 + C7990) * C50983 -
             (C8640 + C8641) * C378 - (C8642 + C8643) * C50790) *
                C50866) *
               C32103 +
           (((C15871 + C15870) * C377 + (C15873 + C15872) * C50983 -
             (C15874 + C15875) * C378 - (C15876 + C15877) * C50790) *
                C22818 +
            ((C8641 + C8640) * C377 + (C8643 + C8642) * C50983 - C16608 * C378 -
             C16609 * C50790) *
                C50866) *
               C50890) *
              C50748 * C250 +
          ((((C15878 + C15879) * C378 -
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C50983 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C377) +
             (C15880 + C15881) * C50790) *
                C22818 +
            ((C9591 + C9592) * C378 -
             ((C7998 + C7997) * C50983 + (C7996 + C7995) * C377) +
             (C9593 + C9594) * C50790) *
                C50866) *
               C32103 +
           (((C15882 + C15883) * C378 -
             ((C15881 + C15880) * C50983 + (C15879 + C15878) * C377) +
             (C15884 + C15885) * C50790) *
                C22818 +
            ((C17237 + C17236) * C378 -
             ((C9594 + C9593) * C50983 + (C9592 + C9591) * C377) +
             (C17239 + C17238) * C50790) *
                C50866) *
               C50890) *
              C50748 * C251 +
          ((((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                 C377 +
             (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                 C50983 -
             (C15886 + C15887) * C378 - (C15888 + C15889) * C50790) *
                C22818 +
            ((C8003 + C8004) * C377 + (C8005 + C8006) * C50983 -
             (C41242 + C41241) * C378 - (C41244 + C41243) * C50790) *
                C50866) *
               C32103 +
           (((C15887 + C15886) * C377 + (C15889 + C15888) * C50983 -
             (C15890 + C15891) * C378 - (C15892 + C15893) * C50790) *
                C22818 +
            ((C41241 + C41242) * C377 + (C41243 + C41244) * C50983 -
             (C49711 * C965 + C50693 * C969 + C49718 * C966 + C50967 * C970) *
                 C378 -
             (C49711 * C973 + C50693 * C977 + C49718 * C974 + C50967 * C978) *
                 C50790) *
                C50866) *
               C50890) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C1051 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C1047 -
            (C15870 + C15871) * C1052 - (C15872 + C15873) * C1048 +
            C16430 * C1053 + C16431 * C1049 - C16728 * C1054 - C16729 * C1050) *
               C22818 +
           ((C7987 + C7988) * C1051 + (C7989 + C7990) * C1047 - C41957 * C1052 -
            C41958 * C1048 + C42351 * C1053 + C42352 * C1049 -
            (C16618 + C16619) * C1054 - (C16620 + C16621) * C1050) *
               C50866) *
              C32103 +
          (((C15871 + C15870) * C1051 + (C15873 + C15872) * C1047 -
            (C15874 + C15875) * C1052 - (C15876 + C15877) * C1048 +
            (C16450 + C16451) * C1053 + (C16452 + C16453) * C1049 -
            (C16738 + C16739) * C1054 - (C16740 + C16741) * C1050) *
               C22818 +
           (C41959 * C1051 + C41960 * C1047 - C16608 * C1052 - C16609 * C1048 +
            (C16619 + C16618) * C1053 + (C16621 + C16620) * C1049 -
            (C49711 * C16603 + C50693 * C16604 + C49718 * C13913 +
             C50967 * C13915) *
                C1054 -
            (C49711 * C16605 + C50693 * C16606 + C49718 * C13916 +
             C50967 * C13919) *
                C1050) *
               C50866) *
              C50890) *
         C50748 * C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C1511 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C1509 -
             (C15870 + C15871) * C1512 - (C15872 + C15873) * C50790) *
                C22818 +
            ((C7987 + C7988) * C1511 + (C7989 + C7990) * C1509 -
             C41957 * C1512 - C41958 * C50790) *
                C50866) *
               C32103 +
           (((C15871 + C15870) * C1511 + (C15873 + C15872) * C1509 -
             (C15874 + C15875) * C1512 - (C15876 + C15877) * C50790) *
                C22818 +
            (C41959 * C1511 + C41960 * C1509 - C16608 * C1512 -
             C16609 * C50790) *
                C50866) *
               C50890) *
              C50748 * C51026 +
          ((((C15878 + C15879) * C1512 -
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C1509 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C1511) +
             (C15880 + C15881) * C50790) *
                C22818 +
            (C43129 * C1512 -
             ((C7998 + C7997) * C1509 + (C7996 + C7995) * C1511) +
             C43130 * C50790) *
                C50866) *
               C32103 +
           (((C15882 + C15883) * C1512 -
             ((C15881 + C15880) * C1509 + (C15879 + C15878) * C1511) +
             (C15884 + C15885) * C50790) *
                C22818 +
            ((C17237 + C17236) * C1512 - (C43131 * C1509 + C43132 * C1511) +
             (C17239 + C17238) * C50790) *
                C50866) *
               C50890) *
              C50748 * C51012 +
          ((((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                 C1511 +
             (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                 C1509 -
             (C15886 + C15887) * C1512 - (C15888 + C15889) * C50790) *
                C22818 +
            ((C8003 + C8004) * C1511 + (C8005 + C8006) * C1509 -
             (C41242 + C41241) * C1512 - (C41244 + C41243) * C50790) *
                C50866) *
               C32103 +
           (((C15887 + C15886) * C1511 + (C15889 + C15888) * C1509 -
             (C15890 + C15891) * C1512 - (C15892 + C15893) * C50790) *
                C22818 +
            ((C41241 + C41242) * C1511 + (C41243 + C41244) * C1509 -
             (C49711 * C965 + C50693 * C969 + C49718 * C966 + C50967 * C970) *
                 C1512 -
             (C49711 * C973 + C50693 * C977 + C49718 * C974 + C50967 * C978) *
                 C50790) *
                C50866) *
               C50890) *
              C50748 * C1173)) /
        (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                  C1511 +
              (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                  C1509 -
              (C15870 + C15871) * C1512 - (C15872 + C15873) * C50790) *
                 C22818 +
             ((C7987 + C7988) * C1511 + (C7989 + C7990) * C1509 -
              C41957 * C1512 - C41958 * C50790) *
                 C50866) *
                C32103 +
            (((C15871 + C15870) * C1511 + (C15873 + C15872) * C1509 -
              (C15874 + C15875) * C1512 - (C15876 + C15877) * C50790) *
                 C22818 +
             (C41959 * C1511 + C41960 * C1509 - C16608 * C1512 -
              C16609 * C50790) *
                 C50866) *
                C50890) *
               C50981 +
           (((C41959 * C1512 -
              ((C7990 + C7989) * C1509 + (C7988 + C7987) * C1511) +
              C41960 * C50790) *
                 C22818 +
             (C41961 * C1512 -
              ((C7994 + C7993) * C1509 + (C7992 + C7991) * C1511) +
              C41962 * C50790) *
                 C50866) *
                C32103 +
            ((C42351 * C1512 - (C41958 * C1509 + C41957 * C1511) +
              C42352 * C50790) *
                 C22818 +
             ((C8979 + C8980) * C1512 - (C8654 * C1509 + C8653 * C1511) +
              (C8981 + C8982) * C50790) *
                 C50866) *
                C50890) *
               C50764) *
              C1275 +
          (((((C15878 + C15879) * C1512 -
              ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                   C1509 +
               (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                   C1511) +
              (C15880 + C15881) * C50790) *
                 C22818 +
             (C43129 * C1512 -
              ((C7998 + C7997) * C1509 + (C7996 + C7995) * C1511) +
              C43130 * C50790) *
                 C50866) *
                C32103 +
            (((C15882 + C15883) * C1512 -
              ((C15881 + C15880) * C1509 + (C15879 + C15878) * C1511) +
              (C15884 + C15885) * C50790) *
                 C22818 +
             ((C17237 + C17236) * C1512 - (C43131 * C1509 + C43132 * C1511) +
              (C17239 + C17238) * C50790) *
                 C50866) *
                C50890) *
               C50981 +
           ((((C7995 + C7996) * C1511 + (C7997 + C7998) * C1509 -
              C43132 * C1512 - C43131 * C50790) *
                 C22818 +
             ((C7999 + C8000) * C1511 + (C8001 + C8002) * C1509 -
              (C9596 + C9595) * C1512 - (C9598 + C9597) * C50790) *
                 C50866) *
                C32103 +
            ((C43129 * C1511 + C43130 * C1509 - (C17236 + C17237) * C1512 -
              (C17238 + C17239) * C50790) *
                 C22818 +
             ((C9595 + C9596) * C1511 + (C9597 + C9598) * C1509 -
              (C49711 * C3321 + C50693 * C3324 + C49718 * C3322 +
               C50967 * C3325) *
                  C1512 -
              (C49711 * C3327 + C50693 * C3330 + C49718 * C3328 +
               C50967 * C3331) *
                  C50790) *
                 C50866) *
                C50890) *
               C50764) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C1744 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C51028 -
             (C15870 + C15871) * C1745 - (C15872 + C15873) * C51018 +
             C16430 * C1746 + C16431 * C1743) *
                C22818 +
            ((C7987 + C7988) * C1744 + (C7989 + C7990) * C51028 -
             C41957 * C1745 - C41958 * C51018 + C42351 * C1746 +
             C42352 * C1743) *
                C50866) *
               C32103 +
           (((C15871 + C15870) * C1744 + (C15873 + C15872) * C51028 -
             (C15874 + C15875) * C1745 - (C15876 + C15877) * C51018 +
             (C16450 + C16451) * C1746 + (C16452 + C16453) * C1743) *
                C22818 +
            (C41959 * C1744 + C41960 * C51028 - C16608 * C1745 -
             C16609 * C51018 + (C16619 + C16618) * C1746 +
             (C16621 + C16620) * C1743) *
                C50866) *
               C50890) *
              C50748 * C1275 +
          ((((C15878 + C15879) * C1745 -
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C51028 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C1744) +
             (C15880 + C15881) * C51018 - C16440 * C1746 - C16441 * C1743) *
                C22818 +
            (C43129 * C1745 -
             ((C7998 + C7997) * C51028 + (C7996 + C7995) * C1744) +
             C43130 * C51018 - (C17236 + C17237) * C1746 -
             (C17238 + C17239) * C1743) *
                C50866) *
               C32103 +
           (((C15882 + C15883) * C1745 -
             ((C15881 + C15880) * C51028 + (C15879 + C15878) * C1744) +
             (C15884 + C15885) * C51018 - (C16454 + C16455) * C1746 -
             (C16456 + C16457) * C1743) *
                C22818 +
            ((C17237 + C17236) * C1745 - (C43131 * C51028 + C43132 * C1744) +
             (C17239 + C17238) * C51018 -
             (C49711 * C3449 + C50693 * C3452 + C49718 * C3450 +
              C50967 * C3453) *
                 C1746 -
             (C49711 * C3455 + C50693 * C3458 + C49718 * C3456 +
              C50967 * C3459) *
                 C1743) *
                C50866) *
               C50890) *
              C50748 * C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C22818 +
            ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C50866) *
               C32103 +
           (((C15871 + C15870) * C121 + (C15873 + C15872) * C50778) * C22818 +
            ((C8641 + C8640) * C121 + (C8643 + C8642) * C50778) * C50866) *
               C50890) *
              C50748 * C113 -
          ((((C9594 + C9593) * C50778 + (C9592 + C9591) * C121) * C50866 +
            ((C15881 + C15880) * C50778 + (C15879 + C15878) * C121) * C22818) *
               C50890 +
           (((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C50866 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C22818) *
               C32103) *
              C50748 * C114 +
          ((((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                 C121 +
             (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                 C50778) *
                C22818 +
            ((C8003 + C8004) * C121 + (C8005 + C8006) * C50778) * C50866) *
               C32103 +
           (((C15887 + C15886) * C121 + (C15889 + C15888) * C50778) * C22818 +
            ((C49718 * C713 + C50967 * C721 + C49711 * C714 + C50693 * C722) *
                 C121 +
             (C49718 * C725 + C50967 * C737 + C49711 * C726 + C50693 * C738) *
                 C50778) *
                C50866) *
               C50890) *
              C50748 * C115 -
          ((((C49711 * C1409 + C50693 * C1410 + C49718 * C726 + C50967 * C738) *
                 C50778 +
             (C49711 * C1407 + C50693 * C1408 + C49718 * C714 + C50967 * C722) *
                 C121) *
                C50866 +
            ((C49711 * C394 + C50693 * C401 + C49718 * C389 + C50967 * C397) *
                 C50778 +
             (C49711 * C383 + C50693 * C393 + C49718 * C379 + C50967 * C385) *
                 C121) *
                C22818) *
               C50890 +
           (((C49711 * C268 + C50693 * C275 + C49718 * C259 + C50967 * C271) *
                 C50778 +
             (C49711 * C257 + C50693 * C267 + C49718 * C253 + C50967 * C263) *
                 C121) *
                C50866 +
            ((C49711 * C137 + C50693 * C147 + C49718 * C136 + C50967 * C146) *
                 C50778 +
             (C49711 * C126 + C50693 * C138 + C49718 * C125 + C50967 * C132) *
                 C121) *
                C22818) *
               C32103) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                  C121 +
              (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                  C50778) *
                 C22818 +
             ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C50866) *
                C32103 +
            (((C15871 + C15870) * C121 + (C15873 + C15872) * C50778) * C22818 +
             ((C8641 + C8640) * C121 + (C8643 + C8642) * C50778) * C50866) *
                C50890) *
               C501 -
           (((C8654 * C50778 + C8653 * C121) * C50866 +
             ((C8642 + C8643) * C50778 + (C8640 + C8641) * C121) * C22818) *
                C50890 +
            (((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C50866 +
             ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C22818) *
                C32103) *
               C502 +
           ((C8335 * C22818 +
             ((C8328 + C8327) * C121 + (C8326 + C8325) * C50778) * C50866) *
                C32103 +
            (((C8646 + C8645) * C121 + (C8648 + C8647) * C50778) * C22818 +
             ((C8649 + C8650) * C121 + (C8651 + C8652) * C50778) * C50866) *
                C50890) *
               C503) *
              C50974 +
          (((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C22818 +
             ((C7999 + C8000) * C121 + (C8001 + C8002) * C50778) * C50866) *
                C32103 +
            (((C9591 + C9592) * C121 + (C9593 + C9594) * C50778) * C22818 +
             ((C9595 + C9596) * C121 + (C9597 + C9598) * C50778) * C50866) *
                C50890) *
               C502 -
           ((((C9594 + C9593) * C50778 + (C9592 + C9591) * C121) * C50866 +
             ((C15881 + C15880) * C50778 + (C15879 + C15878) * C121) * C22818) *
                C50890 +
            (((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C50866 +
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C50778 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C121) *
                 C22818) *
                C32103) *
               C501 -
           ((((C49711 * C2987 + C50693 * C2990 + C49718 * C2988 +
               C50967 * C2991) *
                  C50778 +
              (C49711 * C2981 + C50693 * C2984 + C49718 * C2982 +
               C50967 * C2985) *
                  C121) *
                 C50866 +
             ((C9598 + C9597) * C50778 + (C9596 + C9595) * C121) * C22818) *
                C50890 +
            (((C8332 + C8331) * C50778 + (C8330 + C8329) * C121) * C50866 +
             C8336 * C22818) *
                C32103) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                  C121 +
              (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                  C50778) *
                 C22818 +
             ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C50866) *
                C32103 +
            (((C15871 + C15870) * C121 + (C15873 + C15872) * C50778) * C22818 +
             ((C8641 + C8640) * C121 + (C8643 + C8642) * C50778) * C50866) *
                C50890) *
               C50981 -
           (((C8654 * C50778 + C8653 * C121) * C50866 +
             ((C8642 + C8643) * C50778 + (C8640 + C8641) * C121) * C22818) *
                C50890 +
            (((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C50866 +
             ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C22818) *
                C32103) *
               C50764) *
              C250 +
          (((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C22818 +
             ((C7999 + C8000) * C121 + (C8001 + C8002) * C50778) * C50866) *
                C32103 +
            (((C9591 + C9592) * C121 + (C9593 + C9594) * C50778) * C22818 +
             ((C9595 + C9596) * C121 + (C9597 + C9598) * C50778) * C50866) *
                C50890) *
               C50764 -
           ((((C9594 + C9593) * C50778 + (C9592 + C9591) * C121) * C50866 +
             ((C15881 + C15880) * C50778 + (C15879 + C15878) * C121) * C22818) *
                C50890 +
            (((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C50866 +
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C50778 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C121) *
                 C22818) *
                C32103) *
               C50981) *
              C251 +
          (((((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                  C121 +
              (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                  C50778) *
                 C22818 +
             ((C8003 + C8004) * C121 + (C8005 + C8006) * C50778) * C50866) *
                C32103 +
            (((C15887 + C15886) * C121 + (C15889 + C15888) * C50778) * C22818 +
             ((C41241 + C41242) * C121 + (C41243 + C41244) * C50778) * C50866) *
                C50890) *
               C50981 -
           ((((C49711 * C731 + C50693 * C739 + C49718 * C732 + C50967 * C740) *
                  C50778 +
              (C49711 * C715 + C50693 * C727 + C49718 * C716 + C50967 * C728) *
                  C121) *
                 C50866 +
             ((C41244 + C41243) * C50778 + (C41242 + C41241) * C121) * C22818) *
                C50890 +
            (((C8010 + C8009) * C50778 + (C8008 + C8007) * C121) * C50866 +
             ((C8006 + C8005) * C50778 + (C8004 + C8003) * C121) * C22818) *
                C32103) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C22818 +
            ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C50866) *
               C32103 +
           (((C15871 + C15870) * C121 + (C15873 + C15872) * C50778) * C22818 +
            ((C8641 + C8640) * C121 + (C8643 + C8642) * C50778) * C50866) *
               C50890) *
              C592 -
          (((C8654 * C50778 + C8653 * C121) * C50866 +
            ((C8642 + C8643) * C50778 + (C8640 + C8641) * C121) * C22818) *
               C50890 +
           (((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C50866 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C22818) *
               C32103) *
              C593 +
          ((C8335 * C22818 +
            ((C8328 + C8327) * C121 + (C8326 + C8325) * C50778) * C50866) *
               C32103 +
           (((C8646 + C8645) * C121 + (C8648 + C8647) * C50778) * C22818 +
            ((C8649 + C8650) * C121 + (C8651 + C8652) * C50778) * C50866) *
               C50890) *
              C594 -
          ((((C49711 * C8609 + C50693 * C8611 + C49718 * C8610 +
              C50967 * C8612) *
                 C50778 +
             (C49711 * C8605 + C50693 * C8607 + C49718 * C8606 +
              C50967 * C8608) *
                 C121) *
                C50866 +
            ((C8652 + C8651) * C50778 + (C8650 + C8649) * C121) * C22818) *
               C50890 +
           (((C8458 + C8457) * C50778 + (C8456 + C8455) * C121) * C50866 +
            C8459 * C22818) *
               C32103) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C377 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50983 -
             (C15870 + C15871) * C378 - (C15872 + C15873) * C50790) *
                C22818 +
            ((C7987 + C7988) * C377 + (C7989 + C7990) * C50983 -
             (C8640 + C8641) * C378 - (C8642 + C8643) * C50790) *
                C50866) *
               C32103 +
           (((C15871 + C15870) * C377 + (C15873 + C15872) * C50983 -
             (C15874 + C15875) * C378 - (C15876 + C15877) * C50790) *
                C22818 +
            ((C8641 + C8640) * C377 + (C8643 + C8642) * C50983 - C16608 * C378 -
             C16609 * C50790) *
                C50866) *
               C50890) *
              C50748 * C250 +
          ((((C15878 + C15879) * C378 -
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C50983 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C377) +
             (C15880 + C15881) * C50790) *
                C22818 +
            ((C9591 + C9592) * C378 -
             ((C7998 + C7997) * C50983 + (C7996 + C7995) * C377) +
             (C9593 + C9594) * C50790) *
                C50866) *
               C32103 +
           (((C15882 + C15883) * C378 -
             ((C15881 + C15880) * C50983 + (C15879 + C15878) * C377) +
             (C15884 + C15885) * C50790) *
                C22818 +
            ((C17237 + C17236) * C378 -
             ((C9594 + C9593) * C50983 + (C9592 + C9591) * C377) +
             (C17239 + C17238) * C50790) *
                C50866) *
               C50890) *
              C50748 * C251 +
          ((((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                 C377 +
             (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                 C50983 -
             (C15886 + C15887) * C378 - (C15888 + C15889) * C50790) *
                C22818 +
            ((C8003 + C8004) * C377 + (C8005 + C8006) * C50983 -
             (C41242 + C41241) * C378 - (C41244 + C41243) * C50790) *
                C50866) *
               C32103 +
           (((C15887 + C15886) * C377 + (C15889 + C15888) * C50983 -
             (C15890 + C15891) * C378 - (C15892 + C15893) * C50790) *
                C22818 +
            ((C41241 + C41242) * C377 + (C41243 + C41244) * C50983 -
             (C49711 * C965 + C50693 * C969 + C49718 * C966 + C50967 * C970) *
                 C378 -
             (C49711 * C973 + C50693 * C977 + C49718 * C974 + C50967 * C978) *
                 C50790) *
                C50866) *
               C50890) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C377 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50983 -
             (C15870 + C15871) * C378 - (C15872 + C15873) * C50790) *
                C22818 +
            ((C7987 + C7988) * C377 + (C7989 + C7990) * C50983 - C41957 * C378 -
             C41958 * C50790) *
                C50866) *
               C32103 +
           (((C15871 + C15870) * C377 + (C15873 + C15872) * C50983 -
             (C15874 + C15875) * C378 - (C15876 + C15877) * C50790) *
                C22818 +
            (C41959 * C377 + C41960 * C50983 - C16608 * C378 -
             C16609 * C50790) *
                C50866) *
               C50890) *
              C501 +
          (((C41959 * C378 -
             ((C7990 + C7989) * C50983 + (C7988 + C7987) * C377) +
             C41960 * C50790) *
                C22818 +
            (C41961 * C378 -
             ((C7994 + C7993) * C50983 + (C7992 + C7991) * C377) +
             C41962 * C50790) *
                C50866) *
               C32103 +
           (((C8975 + C8976) * C378 - (C41958 * C50983 + C41957 * C377) +
             (C8977 + C8978) * C50790) *
                C22818 +
            ((C8979 + C8980) * C378 - (C8654 * C50983 + C8653 * C377) +
             (C8981 + C8982) * C50790) *
                C50866) *
               C50890) *
              C502 +
          ((C8658 * C22818 +
            ((C8328 + C8327) * C377 + (C8326 + C8325) * C50983 -
             (C8650 + C8649) * C378 - (C8652 + C8651) * C50790) *
                C50866) *
               C32103 +
           ((C41961 * C377 + C41962 * C50983 - (C8980 + C8979) * C378 -
             (C8982 + C8981) * C50790) *
                C22818 +
            ((C8649 + C8650) * C377 + (C8651 + C8652) * C50983 -
             (C49711 * C8950 + C50693 * C8952 + C49718 * C8951 +
              C50967 * C8953) *
                 C378 -
             (C49711 * C8954 + C50693 * C8956 + C49718 * C8955 +
              C50967 * C8957) *
                 C50790) *
                C50866) *
               C50890) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[60] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C10648 * C122 + C50688 * C129) * C121 +
                      (C10648 * C133 + C50688 * C143) * C50778) *
                         C51029 +
                     (C10802 + C10803) * C51021 + C11016 * C25635) *
                        C32103 +
                    ((C13056 * C121 + C13057 * C50778) * C51029 +
                     (C12874 + C12875) * C51021 + C13208 * C25635) *
                        C50890) *
                       C1169 -
                   ((C13312 * C25635 + (C12877 + C12876) * C51021 +
                     (C12875 + C12874) * C51029) *
                        C50890 +
                    (C11107 * C25635 + (C10805 + C10804) * C51021 +
                     (C10803 + C10802) * C51029) *
                        C32103) *
                       C50764) *
                      C51026 +
                  ((((C10808 + C10809) * C51029 + (C10810 + C10811) * C51021 +
                     (C10812 + C10813) * C25635) *
                        C32103 +
                    ((C12878 + C12879) * C51029 + (C12880 + C12881) * C51021 +
                     (C13211 + C13212) * C25635) *
                        C50890) *
                       C50764 -
                   ((C13213 * C25635 + (C12879 + C12878) * C51021 +
                     (C13059 * C50778 + C13058 * C121) * C51029) *
                        C50890 +
                    (C11027 * C25635 + (C10809 + C10808) * C51021 +
                     ((C10648 * C134 + C50688 * C144) * C50778 +
                      (C10648 * C123 + C50688 * C130) * C121) *
                         C51029) *
                        C32103) *
                       C1169) *
                      C51012 +
                  (((((C10648 * C124 + C50688 * C131) * C121 +
                      (C10648 * C135 + C50688 * C145) * C50778) *
                         C51029 +
                     (C10814 + C10815) * C51021 + (C10816 + C10817) * C25635) *
                        C32103 +
                    ((C13060 * C121 + C13061 * C50778) * C51029 +
                     (C12894 + C12895) * C51021 + (C12896 + C12897) * C25635) *
                        C50890) *
                       C1169 -
                   ((((C10648 * C2987 + C50688 * C2990) * C50778 +
                      (C10648 * C2981 + C50688 * C2984) * C121) *
                         C25635 +
                     (C12897 + C12896) * C51021 + (C12895 + C12894) * C51029) *
                        C50890 +
                    ((C10819 + C10818) * C25635 + (C10817 + C10816) * C51021 +
                     (C10815 + C10814) * C51029) *
                        C32103) *
                       C50764) *
                      C1173)) /
                (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C51029 +
             (C10802 + C10803) * C51021 + C11016 * C25635) *
                C32103 +
            ((C13056 * C121 + C13057 * C50778) * C51029 +
             (C12874 + C12875) * C51021 + C13208 * C25635) *
                C50890) *
               C51027 -
           ((C13312 * C25635 + (C12877 + C12876) * C51021 +
             (C12875 + C12874) * C51029) *
                C50890 +
            (C11107 * C25635 + (C10805 + C10804) * C51021 +
             (C10803 + C10802) * C51029) *
                C32103) *
               C51015 +
           ((C11016 * C51029 + C11017 * C51021 + (C11033 + C11032) * C25635) *
                C32103 +
            (C13208 * C51029 + (C13210 + C13209) * C51021 +
             (C13313 + C13314) * C25635) *
                C50890) *
               C1274) *
              C1275 +
          ((((C10808 + C10809) * C51029 + (C10810 + C10811) * C51021 +
             (C10812 + C10813) * C25635) *
                C32103 +
            ((C12878 + C12879) * C51029 + (C12880 + C12881) * C51021 +
             (C13211 + C13212) * C25635) *
                C50890) *
               C51015 -
           ((C13213 * C25635 + (C12879 + C12878) * C51021 +
             (C13059 * C50778 + C13058 * C121) * C51029) *
                C50890 +
            (C11027 * C25635 + (C10809 + C10808) * C51021 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C51029) *
                C32103) *
               C51027 -
           ((((C10648 * C8609 + C50688 * C8611) * C50778 +
              (C10648 * C8605 + C50688 * C8607) * C121) *
                 C25635 +
             (C13212 + C13211) * C51021 + C13213 * C51029) *
                C50890 +
            ((C11035 + C11034) * C25635 + C11026 * C51021 + C11027 * C51029) *
                C32103) *
               C1274) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C377 +
              (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
              C13057 * C50790) *
                 C51029 +
             (C11218 + C11219 - C11252 - C11253) * C51021 + C11262 * C25635) *
                C32103 +
            ((C13056 * C377 + C13057 * C50983 - C13638 * C378 -
              C13639 * C50790) *
                 C51029 +
             (C13461 + C13462 - C13463 - C13464) * C51021 + C13475 * C25635) *
                C50890) *
               C1169 +
           (((C11252 - (C11219 + C11218) + C11253) * C51029 +
             (C11254 - (C11225 + C11224) + C11255) * C51021 +
             (C11256 - (C11231 + C11230) + C11257) * C25635) *
                C32103 +
            ((C13463 - (C13462 + C13461) + C13464) * C51029 +
             (C13467 - (C13466 + C13465) + C13468) * C51021 +
             (C13469 - (C13470 + C13471) + C13472) * C25635) *
                C50890) *
               C50764) *
              C1275 +
          ((((C13058 * C378 -
              ((C10648 * C134 + C50688 * C144) * C50983 +
               (C10648 * C123 + C50688 * C130) * C377) +
              C13059 * C50790) *
                 C51029 +
             (C11920 - (C11898 + C11899) + C11921) * C51021 +
             (C11922 - (C11904 + C11905) + C11923) * C25635) *
                C32103 +
            ((C13640 * C378 - (C13059 * C50983 + C13058 * C377) +
              C13641 * C50790) *
                 C51029 +
             (C14414 - (C14415 + C14416) + C14417) * C51021 +
             (C14418 - (C14419 + C14420) + C14421) * C25635) *
                C50890) *
               C1169 +
           (((C11899 + C11898 - C11920 - C11921) * C51029 +
             (C11905 + C11904 - C11922 - C11923) * C51021 +
             (C11911 + C11910 - C11924 - C11925) * C25635) *
                C32103 +
            ((C14416 + C14415 - C14414 - C14417) * C51029 +
             (C14420 + C14419 - C14418 - C14421) * C51021 +
             (C11918 * C377 + C11919 * C50983 -
              (C10648 * C8950 + C50688 * C8952) * C378 -
              (C10648 * C8954 + C50688 * C8956) * C50790) *
                 C25635) *
                C50890) *
               C50764) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C1511 +
              (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
              C13057 * C50790) *
                 C51029 +
             (C12154 + C12155 - C12156 - C12157) * C51021 + C12512 * C25635) *
                C32103 +
            ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
              C13639 * C50790) *
                 C51029 +
             (C14762 + C14763 - C14764 - C14765) * C51021 + C15270 * C25635) *
                C50890) *
               C1169 +
           (((C12156 - (C12155 + C12154) + C12157) * C51029 +
             (C12160 - (C12159 + C12158) + C12161) * C51021 +
             (C12164 - (C12163 + C12162) + C12165) * C25635) *
                C32103 +
            ((C14764 - (C14763 + C14762) + C14765) * C51029 +
             (C14768 - (C14767 + C14766) + C14769) * C51021 +
             (C15265 - (C15266 + C15267) + C15268) * C25635) *
                C50890) *
               C50764) *
              C50974 +
          ((((C13058 * C1512 -
              ((C10648 * C134 + C50688 * C144) * C1509 +
               (C10648 * C123 + C50688 * C130) * C1511) +
              C13059 * C50790) *
                 C51029 +
             (C12166 - (C12167 + C12168) + C12169) * C51021 +
             (C12170 - (C12171 + C12172) + C12173) * C25635) *
                C32103 +
            ((C13640 * C1512 - (C13059 * C1509 + C13058 * C1511) +
              C13641 * C50790) *
                 C51029 +
             (C14770 - (C14771 + C14772) + C14773) * C51021 +
             (C14774 - (C14775 + C14776) + C14777) * C25635) *
                C50890) *
               C1169 +
           (((C12168 + C12167 - C12166 - C12169) * C51029 +
             (C12172 + C12171 - C12170 - C12173) * C51021 +
             (C12176 + C12175 - C12174 - C12177) * C25635) *
                C32103 +
            ((C14772 + C14771 - C14770 - C14773) * C51029 +
             (C14776 + C14775 - C14774 - C14777) * C51021 +
             (C11918 * C1511 + C11919 * C1509 -
              (C10648 * C8950 + C50688 * C8952) * C1512 -
              (C10648 * C8954 + C50688 * C8956) * C50790) *
                 C25635) *
                C50890) *
               C50764) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1511 +
             (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
             C13057 * C50790) *
                C51029 +
            (C12154 + C12155 - C12156 - C12157) * C51021 + C12512 * C25635) *
               C32103 +
           ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
             C13639 * C50790) *
                C51029 +
            (C14762 + C14763 - C14764 - C14765) * C51021 + C15270 * C25635) *
               C50890) *
              C51027 +
          (((C12156 - (C12155 + C12154) + C12157) * C51029 +
            (C12160 - (C12159 + C12158) + C12161) * C51021 +
            (C12164 - (C12163 + C12162) + C12165) * C25635) *
               C32103 +
           ((C14764 - (C14763 + C14762) + C14765) * C51029 +
            (C14768 - (C14767 + C14766) + C14769) * C51021 +
            (C15265 - (C15266 + C15267) + C15268) * C25635) *
               C50890) *
              C51015 +
          ((C12512 * C51029 + C12513 * C51021 +
            (C12508 + C12507 - C12506 - C12509) * C25635) *
               C32103 +
           (C15270 * C51029 + (C15267 + C15266 - C15265 - C15268) * C51021 +
            (C11250 * C1511 + C11251 * C1509 -
             (C10648 * C11459 + C50688 * C11460) * C1512 -
             (C10648 * C11461 + C50688 * C11462) * C50790) *
                C25635) *
               C50890) *
              C1274) *
         C50716) /
        (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1744 +
             (C10648 * C133 + C50688 * C143) * C51028 - C13056 * C1745 -
             C13057 * C51018 + C13638 * C1746 + C13639 * C1743) *
                C51029 +
            (C12612 + C12613 - C12614 - C12615 + C12616 + C12617) * C51021 +
            (C12618 + C12619 - C12620 - C12621 + C12622 + C12623) * C25635) *
               C32103 +
           ((C13056 * C1744 + C13057 * C51028 - C13638 * C1745 -
             C13639 * C51018 + C13926 * C1746 + C13927 * C1743) *
                C51029 +
            (C15417 + C15418 - C15419 - C15420 + C15421 + C15422) * C51021 +
            (C15423 + C15424 - C15425 - C15426 + C15427 + C15428) * C25635) *
               C50890) *
              C1169 +
          (((C12614 - (C12613 + C12612) + C12615 - C12616 - C12617) * C51029 +
            (C12620 - (C12619 + C12618) + C12621 - C12622 - C12623) * C51021 +
            (C12626 - (C12625 + C12624) + C12627 - C12628 - C12629) * C25635) *
               C32103 +
           ((C15419 - (C15418 + C15417) + C15420 - C15421 - C15422) * C51029 +
            (C15425 - (C15424 + C15423) + C15426 - C15427 - C15428) * C51021 +
            (C11492 * C1745 - (C11249 * C51028 + C11248 * C1744) +
             C11493 * C51018 - (C10648 * C11565 + C50688 * C11566) * C1746 -
             (C10648 * C11567 + C50688 * C11568) * C1743) *
                C25635) *
               C50890) *
              C50764) *
         C50716) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C51029 +
             (C10802 + C10803) * C51021 + C11016 * C25635) *
                C32103 +
            ((C13056 * C121 + C13057 * C50778) * C51029 +
             (C12874 + C12875) * C51021 + C13208 * C25635) *
                C50890) *
               C501 -
           ((C13312 * C25635 + (C12877 + C12876) * C51021 +
             (C12875 + C12874) * C51029) *
                C50890 +
            (C11107 * C25635 + (C10805 + C10804) * C51021 +
             (C10803 + C10802) * C51029) *
                C32103) *
               C502 +
           ((C11016 * C51029 + C11017 * C51021 + (C11033 + C11032) * C25635) *
                C32103 +
            (C13208 * C51029 + (C13210 + C13209) * C51021 +
             (C13313 + C13314) * C25635) *
                C50890) *
               C503) *
              C50974 +
          ((((C10808 + C10809) * C51029 + (C10810 + C10811) * C51021 +
             (C10812 + C10813) * C25635) *
                C32103 +
            ((C12878 + C12879) * C51029 + (C12880 + C12881) * C51021 +
             (C13211 + C13212) * C25635) *
                C50890) *
               C502 -
           ((C13213 * C25635 + (C12879 + C12878) * C51021 +
             (C13059 * C50778 + C13058 * C121) * C51029) *
                C50890 +
            (C11027 * C25635 + (C10809 + C10808) * C51021 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C51029) *
                C32103) *
               C501 -
           ((((C10648 * C8609 + C50688 * C8611) * C50778 +
              (C10648 * C8605 + C50688 * C8607) * C121) *
                 C25635 +
             (C13212 + C13211) * C51021 + C13213 * C51029) *
                C50890 +
            ((C11035 + C11034) * C25635 + C11026 * C51021 + C11027 * C51029) *
                C32103) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C51029 +
            (C10802 + C10803) * C51021 + C11016 * C25635) *
               C32103 +
           ((C13056 * C121 + C13057 * C50778) * C51029 +
            (C12874 + C12875) * C51021 + C13208 * C25635) *
               C50890) *
              C50748 * C113 -
          ((C13213 * C25635 + (C12879 + C12878) * C51021 +
            (C13059 * C50778 + C13058 * C121) * C51029) *
               C50890 +
           (C11027 * C25635 + (C10809 + C10808) * C51021 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C51029) *
               C32103) *
              C50748 * C114 +
          ((((C10648 * C124 + C50688 * C131) * C121 +
             (C10648 * C135 + C50688 * C145) * C50778) *
                C51029 +
            (C10814 + C10815) * C51021 + (C10816 + C10817) * C25635) *
               C32103 +
           ((C13060 * C121 + C13061 * C50778) * C51029 +
            (C12894 + C12895) * C51021 + (C12896 + C12897) * C25635) *
               C50890) *
              C50748 * C115 -
          ((((C10648 * C731 + C50688 * C739) * C50778 +
             (C10648 * C715 + C50688 * C727) * C121) *
                C25635 +
            ((C10648 * C726 + C50688 * C738) * C50778 +
             (C10648 * C714 + C50688 * C722) * C121) *
                C51021 +
            ((C10648 * C389 + C50688 * C397) * C50778 +
             (C10648 * C379 + C50688 * C385) * C121) *
                C51029) *
               C50890 +
           (((C10648 * C518 + C50688 * C524) * C50778 +
             (C10648 * C509 + C50688 * C514) * C121) *
                C25635 +
            ((C10648 * C259 + C50688 * C271) * C50778 +
             (C10648 * C253 + C50688 * C263) * C121) *
                C51021 +
            ((C10648 * C136 + C50688 * C146) * C50778 +
             (C10648 * C125 + C50688 * C132) * C121) *
                C51029) *
               C32103) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C844 +
             (C10648 * C133 + C50688 * C143) * C841 - C13056 * C845 -
             C13057 * C842 + C13638 * C846 + C13639 * C843) *
                C51029 +
            (C11464 + C11465 - C11466 - C11467 + C11494 + C11495) * C51021 +
            (C11472 + C11473 - C11474 - C11475 + C11496 + C11497) * C25635) *
               C32103 +
           ((C13056 * C844 + C13057 * C841 - C13638 * C845 - C13639 * C842 +
             C13926 * C846 + C13927 * C843) *
                C51029 +
            (C13792 + C13793 - C13794 - C13795 + C13812 + C13813) * C51021 +
            (C13800 + C13801 - C13802 - C13803 + C13814 + C13815) * C25635) *
               C50890) *
              C50748 * C50974 +
          (((C13058 * C845 -
             ((C10648 * C134 + C50688 * C144) * C841 +
              (C10648 * C123 + C50688 * C130) * C844) +
             C13059 * C842 - C13640 * C846 - C13641 * C843) *
                C51029 +
            (C11914 * C845 - (C10791 * C841 + C10790 * C844) + C11915 * C842 -
             C13642 * C846 - C13643 * C843) *
                C51021 +
            (C11916 * C845 - (C10793 * C841 + C10792 * C844) + C11917 * C842 -
             C13644 * C846 - C13645 * C843) *
                C25635) *
               C32103 +
           ((C13640 * C845 - (C13059 * C841 + C13058 * C844) + C13641 * C842 -
             C19178 * C846 - C19179 * C843) *
                C51029 +
            (C13642 * C845 - (C11915 * C841 + C11914 * C844) + C13643 * C842 -
             C19180 * C846 - C19181 * C843) *
                C51021 +
            (C13644 * C845 - (C11917 * C841 + C11916 * C844) + C13645 * C842 -
             (C10648 * C9080 + C50688 * C9082) * C846 -
             (C10648 * C9084 + C50688 * C9086) * C843) *
                C25635) *
               C50890) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C51029 +
            (C10802 + C10803) * C51021 + C11016 * C25635) *
               C32103 +
           ((C13056 * C121 + C13057 * C50778) * C51029 +
            (C12874 + C12875) * C51021 + C13208 * C25635) *
               C50890) *
              C592 -
          ((C13312 * C25635 + (C12877 + C12876) * C51021 +
            (C12875 + C12874) * C51029) *
               C50890 +
           (C11107 * C25635 + (C10805 + C10804) * C51021 +
            (C10803 + C10802) * C51029) *
               C32103) *
              C593 +
          ((C11016 * C51029 + C11017 * C51021 + (C11033 + C11032) * C25635) *
               C32103 +
           (C13208 * C51029 + (C13210 + C13209) * C51021 +
            (C13313 + C13314) * C25635) *
               C50890) *
              C594 -
          ((((C10648 * C11215 + C50688 * C11216) * C50778 +
             (C10648 * C11213 + C50688 * C11214) * C121) *
                C25635 +
            (C13314 + C13313) * C51021 + C13312 * C51029) *
               C50890 +
           ((C11115 + C11114) * C25635 + C11106 * C51021 + C11107 * C51029) *
               C32103) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C51029 +
             (C10802 + C10803) * C51021 + C11016 * C25635) *
                C32103 +
            ((C13056 * C121 + C13057 * C50778) * C51029 +
             (C12874 + C12875) * C51021 + C13208 * C25635) *
                C50890) *
               C50981 -
           ((C13312 * C25635 + (C12877 + C12876) * C51021 +
             (C12875 + C12874) * C51029) *
                C50890 +
            (C11107 * C25635 + (C10805 + C10804) * C51021 +
             (C10803 + C10802) * C51029) *
                C32103) *
               C50764) *
              C250 +
          ((((C10808 + C10809) * C51029 + (C10810 + C10811) * C51021 +
             (C10812 + C10813) * C25635) *
                C32103 +
            ((C12878 + C12879) * C51029 + (C12880 + C12881) * C51021 +
             (C13211 + C13212) * C25635) *
                C50890) *
               C50764 -
           ((C13213 * C25635 + (C12879 + C12878) * C51021 +
             (C13059 * C50778 + C13058 * C121) * C51029) *
                C50890 +
            (C11027 * C25635 + (C10809 + C10808) * C51021 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C51029) *
                C32103) *
               C50981) *
              C251 +
          (((((C10648 * C124 + C50688 * C131) * C121 +
              (C10648 * C135 + C50688 * C145) * C50778) *
                 C51029 +
             (C10814 + C10815) * C51021 + (C10816 + C10817) * C25635) *
                C32103 +
            ((C13060 * C121 + C13061 * C50778) * C51029 +
             (C12894 + C12895) * C51021 + (C12896 + C12897) * C25635) *
                C50890) *
               C50981 -
           ((((C10648 * C2987 + C50688 * C2990) * C50778 +
              (C10648 * C2981 + C50688 * C2984) * C121) *
                 C25635 +
             (C12897 + C12896) * C51021 + (C12895 + C12894) * C51029) *
                C50890 +
            ((C10819 + C10818) * C25635 + (C10817 + C10816) * C51021 +
             (C10815 + C10814) * C51029) *
                C32103) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C844 +
             (C10648 * C133 + C50688 * C143) * C841 - C13056 * C845 -
             C13057 * C842 + C13638 * C846 + C13639 * C843) *
                C51029 +
            (C11464 + C11465 - C11466 - C11467 + C11494 + C11495) * C51021 +
            (C11472 + C11473 - C11474 - C11475 + C11496 + C11497) * C25635) *
               C32103 +
           ((C13056 * C844 + C13057 * C841 - C13638 * C845 - C13639 * C842 +
             C13926 * C846 + C13927 * C843) *
                C51029 +
            (C13792 + C13793 - C13794 - C13795 + C13812 + C13813) * C51021 +
            (C13800 + C13801 - C13802 - C13803 + C13814 + C13815) * C25635) *
               C50890) *
              C50981 +
          (((C11466 - (C11465 + C11464) + C11467 - C11494 - C11495) * C51029 +
            (C11474 - (C11473 + C11472) + C11475 - C11496 - C11497) * C51021 +
            (C11482 - (C11481 + C11480) + C11483 - C11498 - C11499) * C25635) *
               C32103 +
           ((C13794 - (C13793 + C13792) + C13795 - C13812 - C13813) * C51029 +
            (C13802 - (C13801 + C13800) + C13803 - C13814 - C13815) * C51021 +
            (C11492 * C845 - (C11249 * C841 + C11248 * C844) + C11493 * C842 -
             (C10648 * C11565 + C50688 * C11566) * C846 -
             (C10648 * C11567 + C50688 * C11568) * C843) *
                C25635) *
               C50890) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C51029 +
            (C11218 + C11219 - C11252 - C11253) * C51021 + C11262 * C25635) *
               C32103 +
           ((C13056 * C377 + C13057 * C50983 - C13638 * C378 -
             C13639 * C50790) *
                C51029 +
            (C13461 + C13462 - C13463 - C13464) * C51021 + C13475 * C25635) *
               C50890) *
              C501 +
          (((C11252 - (C11219 + C11218) + C11253) * C51029 +
            (C11254 - (C11225 + C11224) + C11255) * C51021 +
            (C11256 - (C11231 + C11230) + C11257) * C25635) *
               C32103 +
           ((C13463 - (C13462 + C13461) + C13464) * C51029 +
            (C13467 - (C13466 + C13465) + C13468) * C51021 +
            (C13469 - (C13470 + C13471) + C13472) * C25635) *
               C50890) *
              C502 +
          ((C11262 * C51029 + C11263 * C51021 +
            (C11239 + C11238 - C11258 - C11259) * C25635) *
               C32103 +
           (C13475 * C51029 + (C13471 + C13470 - C13469 - C13472) * C51021 +
            (C11250 * C377 + C11251 * C50983 -
             (C10648 * C11459 + C50688 * C11460) * C378 -
             (C10648 * C11461 + C50688 * C11462) * C50790) *
                C25635) *
               C50890) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C51029 +
            (C11218 + C11219 - C11252 - C11253) * C51021 + C11262 * C25635) *
               C32103 +
           ((C13056 * C377 + C13057 * C50983 - C13638 * C378 -
             C13639 * C50790) *
                C51029 +
            (C13461 + C13462 - C13463 - C13464) * C51021 + C13475 * C25635) *
               C50890) *
              C50748 * C250 +
          (((C13058 * C378 -
             ((C10648 * C134 + C50688 * C144) * C50983 +
              (C10648 * C123 + C50688 * C130) * C377) +
             C13059 * C50790) *
                C51029 +
            (C11920 - (C11898 + C11899) + C11921) * C51021 +
            (C11922 - (C11904 + C11905) + C11923) * C25635) *
               C32103 +
           ((C13640 * C378 - (C13059 * C50983 + C13058 * C377) +
             C13641 * C50790) *
                C51029 +
            (C14414 - (C14415 + C14416) + C14417) * C51021 +
            (C14418 - (C14419 + C14420) + C14421) * C25635) *
               C50890) *
              C50748 * C251 +
          ((((C10648 * C124 + C50688 * C131) * C377 +
             (C10648 * C135 + C50688 * C145) * C50983 - C13060 * C378 -
             C13061 * C50790) *
                C51029 +
            (C10796 * C377 + C10797 * C50983 - C12890 * C378 -
             C12891 * C50790) *
                C51021 +
            (C10798 * C377 + C10799 * C50983 - C12892 * C378 -
             C12893 * C50790) *
                C25635) *
               C32103 +
           ((C13060 * C377 + C13061 * C50983 - C18618 * C378 -
             C18619 * C50790) *
                C51029 +
            (C12890 * C377 + C12891 * C50983 - C18464 * C378 -
             C18465 * C50790) *
                C51021 +
            (C12892 * C377 + C12893 * C50983 -
             (C10648 * C3321 + C50688 * C3324) * C378 -
             (C10648 * C3327 + C50688 * C3330) * C50790) *
                C25635) *
               C50890) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C1051 +
            (C10648 * C133 + C50688 * C143) * C1047 - C13056 * C1052 -
            C13057 * C1048 + C13638 * C1053 + C13639 * C1049 - C13926 * C1054 -
            C13927 * C1050) *
               C51029 +
           (C10784 * C1051 + C10785 * C1047 - C11242 * C1052 - C11243 * C1048 +
            C11488 * C1053 + C11489 * C1049 - C13808 * C1054 - C13809 * C1050) *
               C51021 +
           (C10786 * C1051 + C10787 * C1047 - C11245 * C1052 - C11246 * C1048 +
            C11490 * C1053 + C11491 * C1049 - C13810 * C1054 - C13811 * C1050) *
               C25635) *
              C32103 +
          ((C13056 * C1051 + C13057 * C1047 - C13638 * C1052 - C13639 * C1048 +
            C13926 * C1053 + C13927 * C1049 - C19446 * C1054 - C19447 * C1050) *
               C51029 +
           (C11242 * C1051 + C11243 * C1047 - C11488 * C1052 - C11489 * C1048 +
            C13808 * C1053 + C13809 * C1049 - C19336 * C1054 - C19337 * C1050) *
               C51021 +
           (C11245 * C1051 + C11246 * C1047 - C11490 * C1052 - C11491 * C1048 +
            C13810 * C1053 + C13811 * C1049 -
            (C10648 * C13914 + C50688 * C13917) * C1054 -
            (C10648 * C13918 + C50688 * C13920) * C1050) *
               C25635) *
              C50890) *
         C50748 * C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1511 +
             (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
             C13057 * C50790) *
                C51029 +
            (C12154 + C12155 - C12156 - C12157) * C51021 + C12512 * C25635) *
               C32103 +
           ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
             C13639 * C50790) *
                C51029 +
            (C14762 + C14763 - C14764 - C14765) * C51021 + C15270 * C25635) *
               C50890) *
              C50748 * C51026 +
          (((C13058 * C1512 -
             ((C10648 * C134 + C50688 * C144) * C1509 +
              (C10648 * C123 + C50688 * C130) * C1511) +
             C13059 * C50790) *
                C51029 +
            (C12166 - (C12167 + C12168) + C12169) * C51021 +
            (C12170 - (C12171 + C12172) + C12173) * C25635) *
               C32103 +
           ((C13640 * C1512 - (C13059 * C1509 + C13058 * C1511) +
             C13641 * C50790) *
                C51029 +
            (C14770 - (C14771 + C14772) + C14773) * C51021 +
            (C14774 - (C14775 + C14776) + C14777) * C25635) *
               C50890) *
              C50748 * C51012 +
          ((((C10648 * C124 + C50688 * C131) * C1511 +
             (C10648 * C135 + C50688 * C145) * C1509 - C13060 * C1512 -
             C13061 * C50790) *
                C51029 +
            (C10796 * C1511 + C10797 * C1509 - C12890 * C1512 -
             C12891 * C50790) *
                C51021 +
            (C10798 * C1511 + C10799 * C1509 - C12892 * C1512 -
             C12893 * C50790) *
                C25635) *
               C32103 +
           ((C13060 * C1511 + C13061 * C1509 - C18618 * C1512 -
             C18619 * C50790) *
                C51029 +
            (C12890 * C1511 + C12891 * C1509 - C18464 * C1512 -
             C18465 * C50790) *
                C51021 +
            (C12892 * C1511 + C12893 * C1509 -
             (C10648 * C3321 + C50688 * C3324) * C1512 -
             (C10648 * C3327 + C50688 * C3330) * C50790) *
                C25635) *
               C50890) *
              C50748 * C1173)) /
        (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C1511 +
              (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
              C13057 * C50790) *
                 C51029 +
             (C12154 + C12155 - C12156 - C12157) * C51021 + C12512 * C25635) *
                C32103 +
            ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
              C13639 * C50790) *
                 C51029 +
             (C14762 + C14763 - C14764 - C14765) * C51021 + C15270 * C25635) *
                C50890) *
               C50981 +
           (((C12156 - (C12155 + C12154) + C12157) * C51029 +
             (C12160 - (C12159 + C12158) + C12161) * C51021 +
             (C12164 - (C12163 + C12162) + C12165) * C25635) *
                C32103 +
            ((C14764 - (C14763 + C14762) + C14765) * C51029 +
             (C14768 - (C14767 + C14766) + C14769) * C51021 +
             (C15265 - (C15266 + C15267) + C15268) * C25635) *
                C50890) *
               C50764) *
              C1275 +
          ((((C13058 * C1512 -
              ((C10648 * C134 + C50688 * C144) * C1509 +
               (C10648 * C123 + C50688 * C130) * C1511) +
              C13059 * C50790) *
                 C51029 +
             (C12166 - (C12167 + C12168) + C12169) * C51021 +
             (C12170 - (C12171 + C12172) + C12173) * C25635) *
                C32103 +
            ((C13640 * C1512 - (C13059 * C1509 + C13058 * C1511) +
              C13641 * C50790) *
                 C51029 +
             (C14770 - (C14771 + C14772) + C14773) * C51021 +
             (C14774 - (C14775 + C14776) + C14777) * C25635) *
                C50890) *
               C50981 +
           (((C12168 + C12167 - C12166 - C12169) * C51029 +
             (C12172 + C12171 - C12170 - C12173) * C51021 +
             (C12176 + C12175 - C12174 - C12177) * C25635) *
                C32103 +
            ((C14772 + C14771 - C14770 - C14773) * C51029 +
             (C14776 + C14775 - C14774 - C14777) * C51021 +
             (C11918 * C1511 + C11919 * C1509 -
              (C10648 * C8950 + C50688 * C8952) * C1512 -
              (C10648 * C8954 + C50688 * C8956) * C50790) *
                 C25635) *
                C50890) *
               C50764) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1744 +
             (C10648 * C133 + C50688 * C143) * C51028 - C13056 * C1745 -
             C13057 * C51018 + C13638 * C1746 + C13639 * C1743) *
                C51029 +
            (C12612 + C12613 - C12614 - C12615 + C12616 + C12617) * C51021 +
            (C12618 + C12619 - C12620 - C12621 + C12622 + C12623) * C25635) *
               C32103 +
           ((C13056 * C1744 + C13057 * C51028 - C13638 * C1745 -
             C13639 * C51018 + C13926 * C1746 + C13927 * C1743) *
                C51029 +
            (C15417 + C15418 - C15419 - C15420 + C15421 + C15422) * C51021 +
            (C15423 + C15424 - C15425 - C15426 + C15427 + C15428) * C25635) *
               C50890) *
              C50748 * C1275 +
          (((C13058 * C1745 -
             ((C10648 * C134 + C50688 * C144) * C51028 +
              (C10648 * C123 + C50688 * C130) * C1744) +
             C13059 * C51018 - C13640 * C1746 - C13641 * C1743) *
                C51029 +
            (C11914 * C1745 - (C10791 * C51028 + C10790 * C1744) +
             C11915 * C51018 - C13642 * C1746 - C13643 * C1743) *
                C51021 +
            (C11916 * C1745 - (C10793 * C51028 + C10792 * C1744) +
             C11917 * C51018 - C13644 * C1746 - C13645 * C1743) *
                C25635) *
               C32103 +
           ((C13640 * C1745 - (C13059 * C51028 + C13058 * C1744) +
             C13641 * C51018 - C19178 * C1746 - C19179 * C1743) *
                C51029 +
            (C13642 * C1745 - (C11915 * C51028 + C11914 * C1744) +
             C13643 * C51018 - C19180 * C1746 - C19181 * C1743) *
                C51021 +
            (C13644 * C1745 - (C11917 * C51028 + C11916 * C1744) +
             C13645 * C51018 - (C10648 * C9080 + C50688 * C9082) * C1746 -
             (C10648 * C9084 + C50688 * C9086) * C1743) *
                C25635) *
               C50890) *
              C50748 * C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C51029 +
            (C10802 + C10803) * C51021 + C11016 * C25635) *
               C32103 +
           ((C13056 * C121 + C13057 * C50778) * C51029 +
            (C12874 + C12875) * C51021 + C13208 * C25635) *
               C50890) *
              C50748 * C113 -
          ((C13213 * C25635 + (C12879 + C12878) * C51021 +
            (C13059 * C50778 + C13058 * C121) * C51029) *
               C50890 +
           (C11027 * C25635 + (C10809 + C10808) * C51021 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C51029) *
               C32103) *
              C50748 * C114 +
          ((((C10648 * C124 + C50688 * C131) * C121 +
             (C10648 * C135 + C50688 * C145) * C50778) *
                C51029 +
            (C10814 + C10815) * C51021 + (C10816 + C10817) * C25635) *
               C32103 +
           ((C13060 * C121 + C13061 * C50778) * C51029 +
            (C12894 + C12895) * C51021 + (C12896 + C12897) * C25635) *
               C50890) *
              C50748 * C115 -
          ((((C10648 * C731 + C50688 * C739) * C50778 +
             (C10648 * C715 + C50688 * C727) * C121) *
                C25635 +
            ((C10648 * C726 + C50688 * C738) * C50778 +
             (C10648 * C714 + C50688 * C722) * C121) *
                C51021 +
            ((C10648 * C389 + C50688 * C397) * C50778 +
             (C10648 * C379 + C50688 * C385) * C121) *
                C51029) *
               C50890 +
           (((C10648 * C518 + C50688 * C524) * C50778 +
             (C10648 * C509 + C50688 * C514) * C121) *
                C25635 +
            ((C10648 * C259 + C50688 * C271) * C50778 +
             (C10648 * C253 + C50688 * C263) * C121) *
                C51021 +
            ((C10648 * C136 + C50688 * C146) * C50778 +
             (C10648 * C125 + C50688 * C132) * C121) *
                C51029) *
               C32103) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C51029 +
             (C10802 + C10803) * C51021 + C11016 * C25635) *
                C32103 +
            ((C13056 * C121 + C13057 * C50778) * C51029 +
             (C12874 + C12875) * C51021 + C13208 * C25635) *
                C50890) *
               C501 -
           ((C13312 * C25635 + (C12877 + C12876) * C51021 +
             (C12875 + C12874) * C51029) *
                C50890 +
            (C11107 * C25635 + (C10805 + C10804) * C51021 +
             (C10803 + C10802) * C51029) *
                C32103) *
               C502 +
           ((C11016 * C51029 + C11017 * C51021 + (C11033 + C11032) * C25635) *
                C32103 +
            (C13208 * C51029 + (C13210 + C13209) * C51021 +
             (C13313 + C13314) * C25635) *
                C50890) *
               C503) *
              C50974 +
          ((((C10808 + C10809) * C51029 + (C10810 + C10811) * C51021 +
             (C10812 + C10813) * C25635) *
                C32103 +
            ((C12878 + C12879) * C51029 + (C12880 + C12881) * C51021 +
             (C13211 + C13212) * C25635) *
                C50890) *
               C502 -
           ((C13213 * C25635 + (C12879 + C12878) * C51021 +
             (C13059 * C50778 + C13058 * C121) * C51029) *
                C50890 +
            (C11027 * C25635 + (C10809 + C10808) * C51021 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C51029) *
                C32103) *
               C501 -
           ((((C10648 * C8609 + C50688 * C8611) * C50778 +
              (C10648 * C8605 + C50688 * C8607) * C121) *
                 C25635 +
             (C13212 + C13211) * C51021 + C13213 * C51029) *
                C50890 +
            ((C11035 + C11034) * C25635 + C11026 * C51021 + C11027 * C51029) *
                C32103) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C51029 +
             (C10802 + C10803) * C51021 + C11016 * C25635) *
                C32103 +
            ((C13056 * C121 + C13057 * C50778) * C51029 +
             (C12874 + C12875) * C51021 + C13208 * C25635) *
                C50890) *
               C50981 -
           ((C13312 * C25635 + (C12877 + C12876) * C51021 +
             (C12875 + C12874) * C51029) *
                C50890 +
            (C11107 * C25635 + (C10805 + C10804) * C51021 +
             (C10803 + C10802) * C51029) *
                C32103) *
               C50764) *
              C250 +
          ((((C10808 + C10809) * C51029 + (C10810 + C10811) * C51021 +
             (C10812 + C10813) * C25635) *
                C32103 +
            ((C12878 + C12879) * C51029 + (C12880 + C12881) * C51021 +
             (C13211 + C13212) * C25635) *
                C50890) *
               C50764 -
           ((C13213 * C25635 + (C12879 + C12878) * C51021 +
             (C13059 * C50778 + C13058 * C121) * C51029) *
                C50890 +
            (C11027 * C25635 + (C10809 + C10808) * C51021 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C51029) *
                C32103) *
               C50981) *
              C251 +
          (((((C10648 * C124 + C50688 * C131) * C121 +
              (C10648 * C135 + C50688 * C145) * C50778) *
                 C51029 +
             (C10814 + C10815) * C51021 + (C10816 + C10817) * C25635) *
                C32103 +
            ((C13060 * C121 + C13061 * C50778) * C51029 +
             (C12894 + C12895) * C51021 + (C12896 + C12897) * C25635) *
                C50890) *
               C50981 -
           ((((C10648 * C2987 + C50688 * C2990) * C50778 +
              (C10648 * C2981 + C50688 * C2984) * C121) *
                 C25635 +
             (C12897 + C12896) * C51021 + (C12895 + C12894) * C51029) *
                C50890 +
            ((C10819 + C10818) * C25635 + (C10817 + C10816) * C51021 +
             (C10815 + C10814) * C51029) *
                C32103) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C51029 +
            (C10802 + C10803) * C51021 + C11016 * C25635) *
               C32103 +
           ((C13056 * C121 + C13057 * C50778) * C51029 +
            (C12874 + C12875) * C51021 + C13208 * C25635) *
               C50890) *
              C592 -
          ((C13312 * C25635 + (C12877 + C12876) * C51021 +
            (C12875 + C12874) * C51029) *
               C50890 +
           (C11107 * C25635 + (C10805 + C10804) * C51021 +
            (C10803 + C10802) * C51029) *
               C32103) *
              C593 +
          ((C11016 * C51029 + C11017 * C51021 + (C11033 + C11032) * C25635) *
               C32103 +
           (C13208 * C51029 + (C13210 + C13209) * C51021 +
            (C13313 + C13314) * C25635) *
               C50890) *
              C594 -
          ((((C10648 * C11215 + C50688 * C11216) * C50778 +
             (C10648 * C11213 + C50688 * C11214) * C121) *
                C25635 +
            (C13314 + C13313) * C51021 + C13312 * C51029) *
               C50890 +
           ((C11115 + C11114) * C25635 + C11106 * C51021 + C11107 * C51029) *
               C32103) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C51029 +
            (C11218 + C11219 - C11252 - C11253) * C51021 + C11262 * C25635) *
               C32103 +
           ((C13056 * C377 + C13057 * C50983 - C13638 * C378 -
             C13639 * C50790) *
                C51029 +
            (C13461 + C13462 - C13463 - C13464) * C51021 + C13475 * C25635) *
               C50890) *
              C50748 * C250 +
          (((C13058 * C378 -
             ((C10648 * C134 + C50688 * C144) * C50983 +
              (C10648 * C123 + C50688 * C130) * C377) +
             C13059 * C50790) *
                C51029 +
            (C11920 - (C11898 + C11899) + C11921) * C51021 +
            (C11922 - (C11904 + C11905) + C11923) * C25635) *
               C32103 +
           ((C13640 * C378 - (C13059 * C50983 + C13058 * C377) +
             C13641 * C50790) *
                C51029 +
            (C14414 - (C14415 + C14416) + C14417) * C51021 +
            (C14418 - (C14419 + C14420) + C14421) * C25635) *
               C50890) *
              C50748 * C251 +
          ((((C10648 * C124 + C50688 * C131) * C377 +
             (C10648 * C135 + C50688 * C145) * C50983 - C13060 * C378 -
             C13061 * C50790) *
                C51029 +
            (C10796 * C377 + C10797 * C50983 - C12890 * C378 -
             C12891 * C50790) *
                C51021 +
            (C10798 * C377 + C10799 * C50983 - C12892 * C378 -
             C12893 * C50790) *
                C25635) *
               C32103 +
           ((C13060 * C377 + C13061 * C50983 - C18618 * C378 -
             C18619 * C50790) *
                C51029 +
            (C12890 * C377 + C12891 * C50983 - C18464 * C378 -
             C18465 * C50790) *
                C51021 +
            (C12892 * C377 + C12893 * C50983 -
             (C10648 * C3321 + C50688 * C3324) * C378 -
             (C10648 * C3327 + C50688 * C3330) * C50790) *
                C25635) *
               C50890) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C51029 +
            (C11218 + C11219 - C11252 - C11253) * C51021 + C11262 * C25635) *
               C32103 +
           ((C13056 * C377 + C13057 * C50983 - C13638 * C378 -
             C13639 * C50790) *
                C51029 +
            (C13461 + C13462 - C13463 - C13464) * C51021 + C13475 * C25635) *
               C50890) *
              C501 +
          (((C11252 - (C11219 + C11218) + C11253) * C51029 +
            (C11254 - (C11225 + C11224) + C11255) * C51021 +
            (C11256 - (C11231 + C11230) + C11257) * C25635) *
               C32103 +
           ((C13463 - (C13462 + C13461) + C13464) * C51029 +
            (C13467 - (C13466 + C13465) + C13468) * C51021 +
            (C13469 - (C13470 + C13471) + C13472) * C25635) *
               C50890) *
              C502 +
          ((C11262 * C51029 + C11263 * C51021 +
            (C11239 + C11238 - C11258 - C11259) * C25635) *
               C32103 +
           (C13475 * C51029 + (C13471 + C13470 - C13469 - C13472) * C51021 +
            (C11250 * C377 + C11251 * C50983 -
             (C10648 * C11459 + C50688 * C11460) * C378 -
             (C10648 * C11461 + C50688 * C11462) * C50790) *
                C25635) *
               C50890) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C22818 +
             (C10802 + C10803) * C50866) *
                C51030 +
            ((C13056 * C121 + C13057 * C50778) * C22818 +
             (C12874 + C12875) * C50866) *
                C51024 +
            ((C13638 * C121 + C13639 * C50778) * C22818 +
             (C18456 + C18457) * C50866) *
                C38335) *
               C1169 -
           (((C18766 + C18767) * C50866 + (C18457 + C18456) * C22818) * C38335 +
            ((C12877 + C12876) * C50866 + (C12875 + C12874) * C22818) * C51024 +
            ((C10805 + C10804) * C50866 + (C10803 + C10802) * C22818) *
                C51030) *
               C50764) *
              C51026 +
          ((((C10808 + C10809) * C22818 + (C10810 + C10811) * C50866) * C51030 +
            ((C12878 + C12879) * C22818 + (C12880 + C12881) * C50866) * C51024 +
            ((C18458 + C18459) * C22818 + (C18768 + C18769) * C50866) *
                C38335) *
               C50764 -
           (((C18459 + C18458) * C50866 +
             (C13641 * C50778 + C13640 * C121) * C22818) *
                C38335 +
            ((C12879 + C12878) * C50866 +
             (C13059 * C50778 + C13058 * C121) * C22818) *
                C51024 +
            ((C10809 + C10808) * C50866 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C22818) *
                C51030) *
               C1169) *
              C51012 +
          (((((C10648 * C124 + C50688 * C131) * C121 +
              (C10648 * C135 + C50688 * C145) * C50778) *
                 C22818 +
             (C10814 + C10815) * C50866) *
                C51030 +
            ((C13060 * C121 + C13061 * C50778) * C22818 +
             (C12894 + C12895) * C50866) *
                C51024 +
            ((C18618 * C121 + C18619 * C50778) * C22818 +
             (C18466 + C18467) * C50866) *
                C38335) *
               C1169 -
           ((((C10648 * C3327 + C50688 * C3330) * C50778 +
              (C10648 * C3321 + C50688 * C3324) * C121) *
                 C50866 +
             (C18467 + C18466) * C22818) *
                C38335 +
            ((C12897 + C12896) * C50866 + (C12895 + C12894) * C22818) * C51024 +
            ((C10817 + C10816) * C50866 + (C10815 + C10814) * C22818) *
                C51030) *
               C50764) *
              C1173)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C22818 +
             (C10802 + C10803) * C50866) *
                C51030 +
            ((C13056 * C121 + C13057 * C50778) * C22818 +
             (C12874 + C12875) * C50866) *
                C51024 +
            ((C13638 * C121 + C13639 * C50778) * C22818 +
             (C18456 + C18457) * C50866) *
                C38335) *
               C51027 -
           (((C18766 + C18767) * C50866 + (C18457 + C18456) * C22818) * C38335 +
            ((C12877 + C12876) * C50866 + (C12875 + C12874) * C22818) * C51024 +
            ((C10805 + C10804) * C50866 + (C10803 + C10802) * C22818) *
                C51030) *
               C51015 +
           ((C11016 * C22818 + C11017 * C50866) * C51030 +
            (C13208 * C22818 + (C13210 + C13209) * C50866) * C51024 +
            ((C18767 + C18766) * C22818 + (C18868 + C18869) * C50866) *
                C38335) *
               C1274) *
              C1275 +
          ((((C10808 + C10809) * C22818 + (C10810 + C10811) * C50866) * C51030 +
            ((C12878 + C12879) * C22818 + (C12880 + C12881) * C50866) * C51024 +
            ((C18458 + C18459) * C22818 + (C18768 + C18769) * C50866) *
                C38335) *
               C51015 -
           (((C18459 + C18458) * C50866 +
             (C13641 * C50778 + C13640 * C121) * C22818) *
                C38335 +
            ((C12879 + C12878) * C50866 +
             (C13059 * C50778 + C13058 * C121) * C22818) *
                C51024 +
            ((C10809 + C10808) * C50866 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C22818) *
                C51030) *
               C51027 -
           ((((C10648 * C8954 + C50688 * C8956) * C50778 +
              (C10648 * C8950 + C50688 * C8952) * C121) *
                 C50866 +
             (C18769 + C18768) * C22818) *
                C38335 +
            ((C13212 + C13211) * C50866 + C13213 * C22818) * C51024 +
            (C11026 * C50866 + C11027 * C22818) * C51030) *
               C1274) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C10648 * C122 + C50688 * C129) * C377 +
                      (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
                      C13057 * C50790) *
                         C22818 +
                     (C11218 + C11219 - C11252 - C11253) * C50866) *
                        C51030 +
                    ((C13056 * C377 + C13057 * C50983 - C13638 * C378 -
                      C13639 * C50790) *
                         C22818 +
                     (C13461 + C13462 - C13463 - C13464) * C50866) *
                        C51024 +
                    ((C13638 * C377 + C13639 * C50983 - C13926 * C378 -
                      C13927 * C50790) *
                         C22818 +
                     (C19016 + C19017 - C19018 - C19019) * C50866) *
                        C38335) *
                       C1169 +
                   (((C11252 - (C11219 + C11218) + C11253) * C22818 +
                     (C11254 - (C11225 + C11224) + C11255) * C50866) *
                        C51030 +
                    ((C13463 - (C13462 + C13461) + C13464) * C22818 +
                     (C13467 - (C13466 + C13465) + C13468) * C50866) *
                        C51024 +
                    ((C19018 - (C19017 + C19016) + C19019) * C22818 +
                     (C19020 - (C19021 + C19022) + C19023) * C50866) *
                        C38335) *
                       C50764) *
                      C1275 +
                  ((((C13058 * C378 -
                      ((C10648 * C134 + C50688 * C144) * C50983 +
                       (C10648 * C123 + C50688 * C130) * C377) +
                      C13059 * C50790) *
                         C22818 +
                     (C11920 - (C11898 + C11899) + C11921) * C50866) *
                        C51030 +
                    ((C13640 * C378 - (C13059 * C50983 + C13058 * C377) +
                      C13641 * C50790) *
                         C22818 +
                     (C14414 - (C14415 + C14416) + C14417) * C50866) *
                        C51024 +
                    ((C19178 * C378 - (C13641 * C50983 + C13640 * C377) +
                      C19179 * C50790) *
                         C22818 +
                     (C19934 - (C19935 + C19936) + C19937) * C50866) *
                        C38335) *
                       C1169 +
                   (((C11899 + C11898 - C11920 - C11921) * C22818 +
                     (C11905 + C11904 - C11922 - C11923) * C50866) *
                        C51030 +
                    ((C14416 + C14415 - C14414 - C14417) * C22818 +
                     (C14420 + C14419 - C14418 - C14421) * C50866) *
                        C51024 +
                    ((C19936 + C19935 - C19934 - C19937) * C22818 +
                     (C13644 * C377 + C13645 * C50983 -
                      (C10648 * C9080 + C50688 * C9082) * C378 -
                      (C10648 * C9084 + C50688 * C9086) * C50790) *
                         C50866) *
                        C38335) *
                       C50764) *
                      C50721)) /
                (p * q * std::sqrt(p + q));
    d2ee[78] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C10648 * C122 + C50688 * C129) * C1511 +
                      (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
                      C13057 * C50790) *
                         C22818 +
                     (C12154 + C12155 - C12156 - C12157) * C50866) *
                        C51030 +
                    ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
                      C13639 * C50790) *
                         C22818 +
                     (C14762 + C14763 - C14764 - C14765) * C50866) *
                        C51024 +
                    ((C13638 * C1511 + C13639 * C1509 - C13926 * C1512 -
                      C13927 * C50790) *
                         C22818 +
                     (C20278 + C20279 - C20280 - C20281) * C50866) *
                        C38335) *
                       C1169 +
                   (((C12156 - (C12155 + C12154) + C12157) * C22818 +
                     (C12160 - (C12159 + C12158) + C12161) * C50866) *
                        C51030 +
                    ((C14764 - (C14763 + C14762) + C14765) * C22818 +
                     (C14768 - (C14767 + C14766) + C14769) * C50866) *
                        C51024 +
                    ((C20280 - (C20279 + C20278) + C20281) * C22818 +
                     (C20772 - (C20773 + C20774) + C20775) * C50866) *
                        C38335) *
                       C50764) *
                      C50974 +
                  ((((C13058 * C1512 -
                      ((C10648 * C134 + C50688 * C144) * C1509 +
                       (C10648 * C123 + C50688 * C130) * C1511) +
                      C13059 * C50790) *
                         C22818 +
                     (C12166 - (C12167 + C12168) + C12169) * C50866) *
                        C51030 +
                    ((C13640 * C1512 - (C13059 * C1509 + C13058 * C1511) +
                      C13641 * C50790) *
                         C22818 +
                     (C14770 - (C14771 + C14772) + C14773) * C50866) *
                        C51024 +
                    ((C19178 * C1512 - (C13641 * C1509 + C13640 * C1511) +
                      C19179 * C50790) *
                         C22818 +
                     (C20282 - (C20283 + C20284) + C20285) * C50866) *
                        C38335) *
                       C1169 +
                   (((C12168 + C12167 - C12166 - C12169) * C22818 +
                     (C12172 + C12171 - C12170 - C12173) * C50866) *
                        C51030 +
                    ((C14772 + C14771 - C14770 - C14773) * C22818 +
                     (C14776 + C14775 - C14774 - C14777) * C50866) *
                        C51024 +
                    ((C20284 + C20283 - C20282 - C20285) * C22818 +
                     (C13644 * C1511 + C13645 * C1509 -
                      (C10648 * C9080 + C50688 * C9082) * C1512 -
                      (C10648 * C9084 + C50688 * C9086) * C50790) *
                         C50866) *
                        C38335) *
                       C50764) *
                      C50721)) /
                (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1511 +
             (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
             C13057 * C50790) *
                C22818 +
            (C12154 + C12155 - C12156 - C12157) * C50866) *
               C51030 +
           ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
             C13639 * C50790) *
                C22818 +
            (C14762 + C14763 - C14764 - C14765) * C50866) *
               C51024 +
           ((C13638 * C1511 + C13639 * C1509 - C13926 * C1512 -
             C13927 * C50790) *
                C22818 +
            (C20278 + C20279 - C20280 - C20281) * C50866) *
               C38335) *
              C51027 +
          (((C12156 - (C12155 + C12154) + C12157) * C22818 +
            (C12160 - (C12159 + C12158) + C12161) * C50866) *
               C51030 +
           ((C14764 - (C14763 + C14762) + C14765) * C22818 +
            (C14768 - (C14767 + C14766) + C14769) * C50866) *
               C51024 +
           ((C20280 - (C20279 + C20278) + C20281) * C22818 +
            (C20772 - (C20773 + C20774) + C20775) * C50866) *
               C38335) *
              C51015 +
          ((C12512 * C22818 + C12513 * C50866) * C51030 +
           (C15270 * C22818 + (C15267 + C15266 - C15265 - C15268) * C50866) *
               C51024 +
           ((C20774 + C20773 - C20772 - C20775) * C22818 +
            (C11492 * C1511 + C11493 * C1509 -
             (C10648 * C11565 + C50688 * C11566) * C1512 -
             (C10648 * C11567 + C50688 * C11568) * C50790) *
                C50866) *
               C38335) *
              C1274) *
         C50716) /
        (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1744 +
             (C10648 * C133 + C50688 * C143) * C51028 - C13056 * C1745 -
             C13057 * C51018 + C13638 * C1746 + C13639 * C1743) *
                C22818 +
            (C12612 + C12613 - C12614 - C12615 + C12616 + C12617) * C50866) *
               C51030 +
           ((C13056 * C1744 + C13057 * C51028 - C13638 * C1745 -
             C13639 * C51018 + C13926 * C1746 + C13927 * C1743) *
                C22818 +
            (C15417 + C15418 - C15419 - C15420 + C15421 + C15422) * C50866) *
               C51024 +
           ((C13638 * C1744 + C13639 * C51028 - C13926 * C1745 -
             C13927 * C51018 + C19446 * C1746 + C19447 * C1743) *
                C22818 +
            (C20922 + C20923 - C20924 - C20925 + C20926 + C20927) * C50866) *
               C38335) *
              C1169 +
          (((C12614 - (C12613 + C12612) + C12615 - C12616 - C12617) * C22818 +
            (C12620 - (C12619 + C12618) + C12621 - C12622 - C12623) * C50866) *
               C51030 +
           ((C15419 - (C15418 + C15417) + C15420 - C15421 - C15422) * C22818 +
            (C15425 - (C15424 + C15423) + C15426 - C15427 - C15428) * C50866) *
               C51024 +
           ((C20924 - (C20923 + C20922) + C20925 - C20926 - C20927) * C22818 +
            (C13810 * C1745 - (C11491 * C51028 + C11490 * C1744) +
             C13811 * C51018 - (C10648 * C13914 + C50688 * C13917) * C1746 -
             (C10648 * C13918 + C50688 * C13920) * C1743) *
                C50866) *
               C38335) *
              C50764) *
         C50716) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C22818 +
             (C10802 + C10803) * C50866) *
                C51030 +
            ((C13056 * C121 + C13057 * C50778) * C22818 +
             (C12874 + C12875) * C50866) *
                C51024 +
            ((C13638 * C121 + C13639 * C50778) * C22818 +
             (C18456 + C18457) * C50866) *
                C38335) *
               C501 -
           (((C18766 + C18767) * C50866 + (C18457 + C18456) * C22818) * C38335 +
            ((C12877 + C12876) * C50866 + (C12875 + C12874) * C22818) * C51024 +
            ((C10805 + C10804) * C50866 + (C10803 + C10802) * C22818) *
                C51030) *
               C502 +
           ((C11016 * C22818 + C11017 * C50866) * C51030 +
            (C13208 * C22818 + (C13210 + C13209) * C50866) * C51024 +
            ((C18767 + C18766) * C22818 + (C18868 + C18869) * C50866) *
                C38335) *
               C503) *
              C50974 +
          ((((C10808 + C10809) * C22818 + (C10810 + C10811) * C50866) * C51030 +
            ((C12878 + C12879) * C22818 + (C12880 + C12881) * C50866) * C51024 +
            ((C18458 + C18459) * C22818 + (C18768 + C18769) * C50866) *
                C38335) *
               C502 -
           (((C18459 + C18458) * C50866 +
             (C13641 * C50778 + C13640 * C121) * C22818) *
                C38335 +
            ((C12879 + C12878) * C50866 +
             (C13059 * C50778 + C13058 * C121) * C22818) *
                C51024 +
            ((C10809 + C10808) * C50866 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C22818) *
                C51030) *
               C501 -
           ((((C10648 * C8954 + C50688 * C8956) * C50778 +
              (C10648 * C8950 + C50688 * C8952) * C121) *
                 C50866 +
             (C18769 + C18768) * C22818) *
                C38335 +
            ((C13212 + C13211) * C50866 + C13213 * C22818) * C51024 +
            (C11026 * C50866 + C11027 * C22818) * C51030) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C22818 +
            (C10802 + C10803) * C50866) *
               C51030 +
           ((C13056 * C121 + C13057 * C50778) * C22818 +
            (C12874 + C12875) * C50866) *
               C51024 +
           ((C13638 * C121 + C13639 * C50778) * C22818 +
            (C18456 + C18457) * C50866) *
               C38335) *
              C50748 * C113 -
          (((C18459 + C18458) * C50866 +
            (C13641 * C50778 + C13640 * C121) * C22818) *
               C38335 +
           ((C12879 + C12878) * C50866 +
            (C13059 * C50778 + C13058 * C121) * C22818) *
               C51024 +
           ((C10809 + C10808) * C50866 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C22818) *
               C51030) *
              C50748 * C114 +
          ((((C10648 * C124 + C50688 * C131) * C121 +
             (C10648 * C135 + C50688 * C145) * C50778) *
                C22818 +
            (C10814 + C10815) * C50866) *
               C51030 +
           ((C13060 * C121 + C13061 * C50778) * C22818 +
            (C12894 + C12895) * C50866) *
               C51024 +
           ((C18618 * C121 + C18619 * C50778) * C22818 +
            (C18466 + C18467) * C50866) *
               C38335) *
              C50748 * C115 -
          ((((C10648 * C973 + C50688 * C977) * C50778 +
             (C10648 * C965 + C50688 * C969) * C121) *
                C50866 +
            ((C10648 * C859 + C50688 * C865) * C50778 +
             (C10648 * C850 + C50688 * C855) * C121) *
                C22818) *
               C38335 +
           (((C10648 * C726 + C50688 * C738) * C50778 +
             (C10648 * C714 + C50688 * C722) * C121) *
                C50866 +
            ((C10648 * C389 + C50688 * C397) * C50778 +
             (C10648 * C379 + C50688 * C385) * C121) *
                C22818) *
               C51024 +
           (((C10648 * C259 + C50688 * C271) * C50778 +
             (C10648 * C253 + C50688 * C263) * C121) *
                C50866 +
            ((C10648 * C136 + C50688 * C146) * C50778 +
             (C10648 * C125 + C50688 * C132) * C121) *
                C22818) *
               C51030) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C844 +
             (C10648 * C133 + C50688 * C143) * C841 - C13056 * C845 -
             C13057 * C842 + C13638 * C846 + C13639 * C843) *
                C22818 +
            (C11464 + C11465 - C11466 - C11467 + C11494 + C11495) * C50866) *
               C51030 +
           ((C13056 * C844 + C13057 * C841 - C13638 * C845 - C13639 * C842 +
             C13926 * C846 + C13927 * C843) *
                C22818 +
            (C13792 + C13793 - C13794 - C13795 + C13812 + C13813) * C50866) *
               C51024 +
           ((C13638 * C844 + C13639 * C841 - C13926 * C845 - C13927 * C842 +
             C19446 * C846 + C19447 * C843) *
                C22818 +
            (C19328 + C19329 - C19330 - C19331 + C19338 + C19339) * C50866) *
               C38335) *
              C50748 * C50974 +
          (((C13058 * C845 -
             ((C10648 * C134 + C50688 * C144) * C841 +
              (C10648 * C123 + C50688 * C130) * C844) +
             C13059 * C842 - C13640 * C846 - C13641 * C843) *
                C22818 +
            (C11914 * C845 - (C10791 * C841 + C10790 * C844) + C11915 * C842 -
             C13642 * C846 - C13643 * C843) *
                C50866) *
               C51030 +
           ((C13640 * C845 - (C13059 * C841 + C13058 * C844) + C13641 * C842 -
             C19178 * C846 - C19179 * C843) *
                C22818 +
            (C13642 * C845 - (C11915 * C841 + C11914 * C844) + C13643 * C842 -
             C19180 * C846 - C19181 * C843) *
                C50866) *
               C51024 +
           ((C19178 * C845 - (C13641 * C841 + C13640 * C844) + C19179 * C842 -
             C21564 * C846 - C21565 * C843) *
                C22818 +
            (C19180 * C845 - (C13643 * C841 + C13642 * C844) + C19181 * C842 -
             (C10648 * C16603 + C50688 * C16604) * C846 -
             (C10648 * C16605 + C50688 * C16606) * C843) *
                C50866) *
               C38335) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C22818 +
            (C10802 + C10803) * C50866) *
               C51030 +
           ((C13056 * C121 + C13057 * C50778) * C22818 +
            (C12874 + C12875) * C50866) *
               C51024 +
           ((C13638 * C121 + C13639 * C50778) * C22818 +
            (C18456 + C18457) * C50866) *
               C38335) *
              C592 -
          (((C18766 + C18767) * C50866 + (C18457 + C18456) * C22818) * C38335 +
           ((C12877 + C12876) * C50866 + (C12875 + C12874) * C22818) * C51024 +
           ((C10805 + C10804) * C50866 + (C10803 + C10802) * C22818) * C51030) *
              C593 +
          ((C11016 * C22818 + C11017 * C50866) * C51030 +
           (C13208 * C22818 + (C13210 + C13209) * C50866) * C51024 +
           ((C18767 + C18766) * C22818 + (C18868 + C18869) * C50866) * C38335) *
              C594 -
          ((((C10648 * C11461 + C50688 * C11462) * C50778 +
             (C10648 * C11459 + C50688 * C11460) * C121) *
                C50866 +
            (C18869 + C18868) * C22818) *
               C38335 +
           ((C13314 + C13313) * C50866 + C13312 * C22818) * C51024 +
           (C11106 * C50866 + C11107 * C22818) * C51030) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C22818 +
             (C10802 + C10803) * C50866) *
                C51030 +
            ((C13056 * C121 + C13057 * C50778) * C22818 +
             (C12874 + C12875) * C50866) *
                C51024 +
            ((C13638 * C121 + C13639 * C50778) * C22818 +
             (C18456 + C18457) * C50866) *
                C38335) *
               C50981 -
           (((C18766 + C18767) * C50866 + (C18457 + C18456) * C22818) * C38335 +
            ((C12877 + C12876) * C50866 + (C12875 + C12874) * C22818) * C51024 +
            ((C10805 + C10804) * C50866 + (C10803 + C10802) * C22818) *
                C51030) *
               C50764) *
              C250 +
          ((((C10808 + C10809) * C22818 + (C10810 + C10811) * C50866) * C51030 +
            ((C12878 + C12879) * C22818 + (C12880 + C12881) * C50866) * C51024 +
            ((C18458 + C18459) * C22818 + (C18768 + C18769) * C50866) *
                C38335) *
               C50764 -
           (((C18459 + C18458) * C50866 +
             (C13641 * C50778 + C13640 * C121) * C22818) *
                C38335 +
            ((C12879 + C12878) * C50866 +
             (C13059 * C50778 + C13058 * C121) * C22818) *
                C51024 +
            ((C10809 + C10808) * C50866 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C22818) *
                C51030) *
               C50981) *
              C251 +
          (((((C10648 * C124 + C50688 * C131) * C121 +
              (C10648 * C135 + C50688 * C145) * C50778) *
                 C22818 +
             (C10814 + C10815) * C50866) *
                C51030 +
            ((C13060 * C121 + C13061 * C50778) * C22818 +
             (C12894 + C12895) * C50866) *
                C51024 +
            ((C18618 * C121 + C18619 * C50778) * C22818 +
             (C18466 + C18467) * C50866) *
                C38335) *
               C50981 -
           ((((C10648 * C3327 + C50688 * C3330) * C50778 +
              (C10648 * C3321 + C50688 * C3324) * C121) *
                 C50866 +
             (C18467 + C18466) * C22818) *
                C38335 +
            ((C12897 + C12896) * C50866 + (C12895 + C12894) * C22818) * C51024 +
            ((C10817 + C10816) * C50866 + (C10815 + C10814) * C22818) *
                C51030) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C844 +
             (C10648 * C133 + C50688 * C143) * C841 - C13056 * C845 -
             C13057 * C842 + C13638 * C846 + C13639 * C843) *
                C22818 +
            (C11464 + C11465 - C11466 - C11467 + C11494 + C11495) * C50866) *
               C51030 +
           ((C13056 * C844 + C13057 * C841 - C13638 * C845 - C13639 * C842 +
             C13926 * C846 + C13927 * C843) *
                C22818 +
            (C13792 + C13793 - C13794 - C13795 + C13812 + C13813) * C50866) *
               C51024 +
           ((C13638 * C844 + C13639 * C841 - C13926 * C845 - C13927 * C842 +
             C19446 * C846 + C19447 * C843) *
                C22818 +
            (C19328 + C19329 - C19330 - C19331 + C19338 + C19339) * C50866) *
               C38335) *
              C50981 +
          (((C11466 - (C11465 + C11464) + C11467 - C11494 - C11495) * C22818 +
            (C11474 - (C11473 + C11472) + C11475 - C11496 - C11497) * C50866) *
               C51030 +
           ((C13794 - (C13793 + C13792) + C13795 - C13812 - C13813) * C22818 +
            (C13802 - (C13801 + C13800) + C13803 - C13814 - C13815) * C50866) *
               C51024 +
           ((C19330 - (C19329 + C19328) + C19331 - C19338 - C19339) * C22818 +
            (C13810 * C845 - (C11491 * C841 + C11490 * C844) + C13811 * C842 -
             (C10648 * C13914 + C50688 * C13917) * C846 -
             (C10648 * C13918 + C50688 * C13920) * C843) *
                C50866) *
               C38335) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C22818 +
            (C11218 + C11219 - C11252 - C11253) * C50866) *
               C51030 +
           ((C13056 * C377 + C13057 * C50983 - C13638 * C378 -
             C13639 * C50790) *
                C22818 +
            (C13461 + C13462 - C13463 - C13464) * C50866) *
               C51024 +
           ((C13638 * C377 + C13639 * C50983 - C13926 * C378 -
             C13927 * C50790) *
                C22818 +
            (C19016 + C19017 - C19018 - C19019) * C50866) *
               C38335) *
              C501 +
          (((C11252 - (C11219 + C11218) + C11253) * C22818 +
            (C11254 - (C11225 + C11224) + C11255) * C50866) *
               C51030 +
           ((C13463 - (C13462 + C13461) + C13464) * C22818 +
            (C13467 - (C13466 + C13465) + C13468) * C50866) *
               C51024 +
           ((C19018 - (C19017 + C19016) + C19019) * C22818 +
            (C19020 - (C19021 + C19022) + C19023) * C50866) *
               C38335) *
              C502 +
          ((C11262 * C22818 + C11263 * C50866) * C51030 +
           (C13475 * C22818 + (C13471 + C13470 - C13469 - C13472) * C50866) *
               C51024 +
           ((C19022 + C19021 - C19020 - C19023) * C22818 +
            (C11492 * C377 + C11493 * C50983 -
             (C10648 * C11565 + C50688 * C11566) * C378 -
             (C10648 * C11567 + C50688 * C11568) * C50790) *
                C50866) *
               C38335) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C22818 +
            (C11218 + C11219 - C11252 - C11253) * C50866) *
               C51030 +
           ((C13056 * C377 + C13057 * C50983 - C13638 * C378 -
             C13639 * C50790) *
                C22818 +
            (C13461 + C13462 - C13463 - C13464) * C50866) *
               C51024 +
           ((C13638 * C377 + C13639 * C50983 - C13926 * C378 -
             C13927 * C50790) *
                C22818 +
            (C19016 + C19017 - C19018 - C19019) * C50866) *
               C38335) *
              C50748 * C250 +
          (((C13058 * C378 -
             ((C10648 * C134 + C50688 * C144) * C50983 +
              (C10648 * C123 + C50688 * C130) * C377) +
             C13059 * C50790) *
                C22818 +
            (C11920 - (C11898 + C11899) + C11921) * C50866) *
               C51030 +
           ((C13640 * C378 - (C13059 * C50983 + C13058 * C377) +
             C13641 * C50790) *
                C22818 +
            (C14414 - (C14415 + C14416) + C14417) * C50866) *
               C51024 +
           ((C19178 * C378 - (C13641 * C50983 + C13640 * C377) +
             C19179 * C50790) *
                C22818 +
            (C19934 - (C19935 + C19936) + C19937) * C50866) *
               C38335) *
              C50748 * C251 +
          ((((C10648 * C124 + C50688 * C131) * C377 +
             (C10648 * C135 + C50688 * C145) * C50983 - C13060 * C378 -
             C13061 * C50790) *
                C22818 +
            (C10796 * C377 + C10797 * C50983 - C12890 * C378 -
             C12891 * C50790) *
                C50866) *
               C51030 +
           ((C13060 * C377 + C13061 * C50983 - C18618 * C378 -
             C18619 * C50790) *
                C22818 +
            (C12890 * C377 + C12891 * C50983 - C18464 * C378 -
             C18465 * C50790) *
                C50866) *
               C51024 +
           ((C18618 * C377 + C18619 * C50983 - C21198 * C378 -
             C21199 * C50790) *
                C22818 +
            (C18464 * C377 + C18465 * C50983 -
             (C10648 * C3449 + C50688 * C3452) * C378 -
             (C10648 * C3455 + C50688 * C3458) * C50790) *
                C50866) *
               C38335) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C1051 +
            (C10648 * C133 + C50688 * C143) * C1047 - C13056 * C1052 -
            C13057 * C1048 + C13638 * C1053 + C13639 * C1049 - C13926 * C1054 -
            C13927 * C1050) *
               C22818 +
           (C10784 * C1051 + C10785 * C1047 - C11242 * C1052 - C11243 * C1048 +
            C11488 * C1053 + C11489 * C1049 - C13808 * C1054 - C13809 * C1050) *
               C50866) *
              C51030 +
          ((C13056 * C1051 + C13057 * C1047 - C13638 * C1052 - C13639 * C1048 +
            C13926 * C1053 + C13927 * C1049 - C19446 * C1054 - C19447 * C1050) *
               C22818 +
           (C11242 * C1051 + C11243 * C1047 - C11488 * C1052 - C11489 * C1048 +
            C13808 * C1053 + C13809 * C1049 - C19336 * C1054 - C19337 * C1050) *
               C50866) *
              C51024 +
          ((C13638 * C1051 + C13639 * C1047 - C13926 * C1052 - C13927 * C1048 +
            C19446 * C1053 + C19447 * C1049 - C21738 * C1054 - C21739 * C1050) *
               C22818 +
           (C11488 * C1051 + C11489 * C1047 - C13808 * C1052 - C13809 * C1048 +
            C19336 * C1053 + C19337 * C1049 -
            (C10648 * C19437 + C50688 * C19438) * C1054 -
            (C10648 * C19439 + C50688 * C19440) * C1050) *
               C50866) *
              C38335) *
         C50748 * C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[84] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C10648 * C122 + C50688 * C129) * C1511 +
                     (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
                     C13057 * C50790) *
                        C22818 +
                    (C12154 + C12155 - C12156 - C12157) * C50866) *
                       C51030 +
                   ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
                     C13639 * C50790) *
                        C22818 +
                    (C14762 + C14763 - C14764 - C14765) * C50866) *
                       C51024 +
                   ((C13638 * C1511 + C13639 * C1509 - C13926 * C1512 -
                     C13927 * C50790) *
                        C22818 +
                    (C20278 + C20279 - C20280 - C20281) * C50866) *
                       C38335) *
                      C50748 * C51026 +
                  (((C13058 * C1512 -
                     ((C10648 * C134 + C50688 * C144) * C1509 +
                      (C10648 * C123 + C50688 * C130) * C1511) +
                     C13059 * C50790) *
                        C22818 +
                    (C12166 - (C12167 + C12168) + C12169) * C50866) *
                       C51030 +
                   ((C13640 * C1512 - (C13059 * C1509 + C13058 * C1511) +
                     C13641 * C50790) *
                        C22818 +
                    (C14770 - (C14771 + C14772) + C14773) * C50866) *
                       C51024 +
                   ((C19178 * C1512 - (C13641 * C1509 + C13640 * C1511) +
                     C19179 * C50790) *
                        C22818 +
                    (C20282 - (C20283 + C20284) + C20285) * C50866) *
                       C38335) *
                      C50748 * C51012 +
                  ((((C10648 * C124 + C50688 * C131) * C1511 +
                     (C10648 * C135 + C50688 * C145) * C1509 - C13060 * C1512 -
                     C13061 * C50790) *
                        C22818 +
                    (C10796 * C1511 + C10797 * C1509 - C12890 * C1512 -
                     C12891 * C50790) *
                        C50866) *
                       C51030 +
                   ((C13060 * C1511 + C13061 * C1509 - C18618 * C1512 -
                     C18619 * C50790) *
                        C22818 +
                    (C12890 * C1511 + C12891 * C1509 - C18464 * C1512 -
                     C18465 * C50790) *
                        C50866) *
                       C51024 +
                   ((C18618 * C1511 + C18619 * C1509 - C21198 * C1512 -
                     C21199 * C50790) *
                        C22818 +
                    (C18464 * C1511 + C18465 * C1509 -
                     (C10648 * C3449 + C50688 * C3452) * C1512 -
                     (C10648 * C3455 + C50688 * C3458) * C50790) *
                        C50866) *
                       C38335) *
                      C50748 * C1173)) /
                (p * q * std::sqrt(p + q));
    d2ee[85] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C10648 * C122 + C50688 * C129) * C1511 +
                      (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
                      C13057 * C50790) *
                         C22818 +
                     (C12154 + C12155 - C12156 - C12157) * C50866) *
                        C51030 +
                    ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
                      C13639 * C50790) *
                         C22818 +
                     (C14762 + C14763 - C14764 - C14765) * C50866) *
                        C51024 +
                    ((C13638 * C1511 + C13639 * C1509 - C13926 * C1512 -
                      C13927 * C50790) *
                         C22818 +
                     (C20278 + C20279 - C20280 - C20281) * C50866) *
                        C38335) *
                       C50981 +
                   (((C12156 - (C12155 + C12154) + C12157) * C22818 +
                     (C12160 - (C12159 + C12158) + C12161) * C50866) *
                        C51030 +
                    ((C14764 - (C14763 + C14762) + C14765) * C22818 +
                     (C14768 - (C14767 + C14766) + C14769) * C50866) *
                        C51024 +
                    ((C20280 - (C20279 + C20278) + C20281) * C22818 +
                     (C20772 - (C20773 + C20774) + C20775) * C50866) *
                        C38335) *
                       C50764) *
                      C1275 +
                  ((((C13058 * C1512 -
                      ((C10648 * C134 + C50688 * C144) * C1509 +
                       (C10648 * C123 + C50688 * C130) * C1511) +
                      C13059 * C50790) *
                         C22818 +
                     (C12166 - (C12167 + C12168) + C12169) * C50866) *
                        C51030 +
                    ((C13640 * C1512 - (C13059 * C1509 + C13058 * C1511) +
                      C13641 * C50790) *
                         C22818 +
                     (C14770 - (C14771 + C14772) + C14773) * C50866) *
                        C51024 +
                    ((C19178 * C1512 - (C13641 * C1509 + C13640 * C1511) +
                      C19179 * C50790) *
                         C22818 +
                     (C20282 - (C20283 + C20284) + C20285) * C50866) *
                        C38335) *
                       C50981 +
                   (((C12168 + C12167 - C12166 - C12169) * C22818 +
                     (C12172 + C12171 - C12170 - C12173) * C50866) *
                        C51030 +
                    ((C14772 + C14771 - C14770 - C14773) * C22818 +
                     (C14776 + C14775 - C14774 - C14777) * C50866) *
                        C51024 +
                    ((C20284 + C20283 - C20282 - C20285) * C22818 +
                     (C13644 * C1511 + C13645 * C1509 -
                      (C10648 * C9080 + C50688 * C9082) * C1512 -
                      (C10648 * C9084 + C50688 * C9086) * C50790) *
                         C50866) *
                        C38335) *
                       C50764) *
                      C50721)) /
                (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1744 +
             (C10648 * C133 + C50688 * C143) * C51028 - C13056 * C1745 -
             C13057 * C51018 + C13638 * C1746 + C13639 * C1743) *
                C22818 +
            (C12612 + C12613 - C12614 - C12615 + C12616 + C12617) * C50866) *
               C51030 +
           ((C13056 * C1744 + C13057 * C51028 - C13638 * C1745 -
             C13639 * C51018 + C13926 * C1746 + C13927 * C1743) *
                C22818 +
            (C15417 + C15418 - C15419 - C15420 + C15421 + C15422) * C50866) *
               C51024 +
           ((C13638 * C1744 + C13639 * C51028 - C13926 * C1745 -
             C13927 * C51018 + C19446 * C1746 + C19447 * C1743) *
                C22818 +
            (C20922 + C20923 - C20924 - C20925 + C20926 + C20927) * C50866) *
               C38335) *
              C50748 * C1275 +
          (((C13058 * C1745 -
             ((C10648 * C134 + C50688 * C144) * C51028 +
              (C10648 * C123 + C50688 * C130) * C1744) +
             C13059 * C51018 - C13640 * C1746 - C13641 * C1743) *
                C22818 +
            (C11914 * C1745 - (C10791 * C51028 + C10790 * C1744) +
             C11915 * C51018 - C13642 * C1746 - C13643 * C1743) *
                C50866) *
               C51030 +
           ((C13640 * C1745 - (C13059 * C51028 + C13058 * C1744) +
             C13641 * C51018 - C19178 * C1746 - C19179 * C1743) *
                C22818 +
            (C13642 * C1745 - (C11915 * C51028 + C11914 * C1744) +
             C13643 * C51018 - C19180 * C1746 - C19181 * C1743) *
                C50866) *
               C51024 +
           ((C19178 * C1745 - (C13641 * C51028 + C13640 * C1744) +
             C19179 * C51018 - C21564 * C1746 - C21565 * C1743) *
                C22818 +
            (C19180 * C1745 - (C13643 * C51028 + C13642 * C1744) +
             C19181 * C51018 - (C10648 * C16603 + C50688 * C16604) * C1746 -
             (C10648 * C16605 + C50688 * C16606) * C1743) *
                C50866) *
               C38335) *
              C50748 * C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C22818 +
            (C10802 + C10803) * C50866) *
               C51030 +
           ((C13056 * C121 + C13057 * C50778) * C22818 +
            (C12874 + C12875) * C50866) *
               C51024 +
           ((C13638 * C121 + C13639 * C50778) * C22818 +
            (C18456 + C18457) * C50866) *
               C38335) *
              C50748 * C113 -
          (((C18459 + C18458) * C50866 +
            (C13641 * C50778 + C13640 * C121) * C22818) *
               C38335 +
           ((C12879 + C12878) * C50866 +
            (C13059 * C50778 + C13058 * C121) * C22818) *
               C51024 +
           ((C10809 + C10808) * C50866 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C22818) *
               C51030) *
              C50748 * C114 +
          ((((C10648 * C124 + C50688 * C131) * C121 +
             (C10648 * C135 + C50688 * C145) * C50778) *
                C22818 +
            (C10814 + C10815) * C50866) *
               C51030 +
           ((C13060 * C121 + C13061 * C50778) * C22818 +
            (C12894 + C12895) * C50866) *
               C51024 +
           ((C18618 * C121 + C18619 * C50778) * C22818 +
            (C18466 + C18467) * C50866) *
               C38335) *
              C50748 * C115 -
          ((((C10648 * C973 + C50688 * C977) * C50778 +
             (C10648 * C965 + C50688 * C969) * C121) *
                C50866 +
            ((C10648 * C859 + C50688 * C865) * C50778 +
             (C10648 * C850 + C50688 * C855) * C121) *
                C22818) *
               C38335 +
           (((C10648 * C726 + C50688 * C738) * C50778 +
             (C10648 * C714 + C50688 * C722) * C121) *
                C50866 +
            ((C10648 * C389 + C50688 * C397) * C50778 +
             (C10648 * C379 + C50688 * C385) * C121) *
                C22818) *
               C51024 +
           (((C10648 * C259 + C50688 * C271) * C50778 +
             (C10648 * C253 + C50688 * C263) * C121) *
                C50866 +
            ((C10648 * C136 + C50688 * C146) * C50778 +
             (C10648 * C125 + C50688 * C132) * C121) *
                C22818) *
               C51030) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C22818 +
             (C10802 + C10803) * C50866) *
                C51030 +
            ((C13056 * C121 + C13057 * C50778) * C22818 +
             (C12874 + C12875) * C50866) *
                C51024 +
            ((C13638 * C121 + C13639 * C50778) * C22818 +
             (C18456 + C18457) * C50866) *
                C38335) *
               C501 -
           (((C18766 + C18767) * C50866 + (C18457 + C18456) * C22818) * C38335 +
            ((C12877 + C12876) * C50866 + (C12875 + C12874) * C22818) * C51024 +
            ((C10805 + C10804) * C50866 + (C10803 + C10802) * C22818) *
                C51030) *
               C502 +
           ((C11016 * C22818 + C11017 * C50866) * C51030 +
            (C13208 * C22818 + (C13210 + C13209) * C50866) * C51024 +
            ((C18767 + C18766) * C22818 + (C18868 + C18869) * C50866) *
                C38335) *
               C503) *
              C50974 +
          ((((C10808 + C10809) * C22818 + (C10810 + C10811) * C50866) * C51030 +
            ((C12878 + C12879) * C22818 + (C12880 + C12881) * C50866) * C51024 +
            ((C18458 + C18459) * C22818 + (C18768 + C18769) * C50866) *
                C38335) *
               C502 -
           (((C18459 + C18458) * C50866 +
             (C13641 * C50778 + C13640 * C121) * C22818) *
                C38335 +
            ((C12879 + C12878) * C50866 +
             (C13059 * C50778 + C13058 * C121) * C22818) *
                C51024 +
            ((C10809 + C10808) * C50866 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C22818) *
                C51030) *
               C501 -
           ((((C10648 * C8954 + C50688 * C8956) * C50778 +
              (C10648 * C8950 + C50688 * C8952) * C121) *
                 C50866 +
             (C18769 + C18768) * C22818) *
                C38335 +
            ((C13212 + C13211) * C50866 + C13213 * C22818) * C51024 +
            (C11026 * C50866 + C11027 * C22818) * C51030) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C22818 +
             (C10802 + C10803) * C50866) *
                C51030 +
            ((C13056 * C121 + C13057 * C50778) * C22818 +
             (C12874 + C12875) * C50866) *
                C51024 +
            ((C13638 * C121 + C13639 * C50778) * C22818 +
             (C18456 + C18457) * C50866) *
                C38335) *
               C50981 -
           (((C18766 + C18767) * C50866 + (C18457 + C18456) * C22818) * C38335 +
            ((C12877 + C12876) * C50866 + (C12875 + C12874) * C22818) * C51024 +
            ((C10805 + C10804) * C50866 + (C10803 + C10802) * C22818) *
                C51030) *
               C50764) *
              C250 +
          ((((C10808 + C10809) * C22818 + (C10810 + C10811) * C50866) * C51030 +
            ((C12878 + C12879) * C22818 + (C12880 + C12881) * C50866) * C51024 +
            ((C18458 + C18459) * C22818 + (C18768 + C18769) * C50866) *
                C38335) *
               C50764 -
           (((C18459 + C18458) * C50866 +
             (C13641 * C50778 + C13640 * C121) * C22818) *
                C38335 +
            ((C12879 + C12878) * C50866 +
             (C13059 * C50778 + C13058 * C121) * C22818) *
                C51024 +
            ((C10809 + C10808) * C50866 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C22818) *
                C51030) *
               C50981) *
              C251 +
          (((((C10648 * C124 + C50688 * C131) * C121 +
              (C10648 * C135 + C50688 * C145) * C50778) *
                 C22818 +
             (C10814 + C10815) * C50866) *
                C51030 +
            ((C13060 * C121 + C13061 * C50778) * C22818 +
             (C12894 + C12895) * C50866) *
                C51024 +
            ((C18618 * C121 + C18619 * C50778) * C22818 +
             (C18466 + C18467) * C50866) *
                C38335) *
               C50981 -
           ((((C10648 * C3327 + C50688 * C3330) * C50778 +
              (C10648 * C3321 + C50688 * C3324) * C121) *
                 C50866 +
             (C18467 + C18466) * C22818) *
                C38335 +
            ((C12897 + C12896) * C50866 + (C12895 + C12894) * C22818) * C51024 +
            ((C10817 + C10816) * C50866 + (C10815 + C10814) * C22818) *
                C51030) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C22818 +
            (C10802 + C10803) * C50866) *
               C51030 +
           ((C13056 * C121 + C13057 * C50778) * C22818 +
            (C12874 + C12875) * C50866) *
               C51024 +
           ((C13638 * C121 + C13639 * C50778) * C22818 +
            (C18456 + C18457) * C50866) *
               C38335) *
              C592 -
          (((C18766 + C18767) * C50866 + (C18457 + C18456) * C22818) * C38335 +
           ((C12877 + C12876) * C50866 + (C12875 + C12874) * C22818) * C51024 +
           ((C10805 + C10804) * C50866 + (C10803 + C10802) * C22818) * C51030) *
              C593 +
          ((C11016 * C22818 + C11017 * C50866) * C51030 +
           (C13208 * C22818 + (C13210 + C13209) * C50866) * C51024 +
           ((C18767 + C18766) * C22818 + (C18868 + C18869) * C50866) * C38335) *
              C594 -
          ((((C10648 * C11461 + C50688 * C11462) * C50778 +
             (C10648 * C11459 + C50688 * C11460) * C121) *
                C50866 +
            (C18869 + C18868) * C22818) *
               C38335 +
           ((C13314 + C13313) * C50866 + C13312 * C22818) * C51024 +
           (C11106 * C50866 + C11107 * C22818) * C51030) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C22818 +
            (C11218 + C11219 - C11252 - C11253) * C50866) *
               C51030 +
           ((C13056 * C377 + C13057 * C50983 - C13638 * C378 -
             C13639 * C50790) *
                C22818 +
            (C13461 + C13462 - C13463 - C13464) * C50866) *
               C51024 +
           ((C13638 * C377 + C13639 * C50983 - C13926 * C378 -
             C13927 * C50790) *
                C22818 +
            (C19016 + C19017 - C19018 - C19019) * C50866) *
               C38335) *
              C50748 * C250 +
          (((C13058 * C378 -
             ((C10648 * C134 + C50688 * C144) * C50983 +
              (C10648 * C123 + C50688 * C130) * C377) +
             C13059 * C50790) *
                C22818 +
            (C11920 - (C11898 + C11899) + C11921) * C50866) *
               C51030 +
           ((C13640 * C378 - (C13059 * C50983 + C13058 * C377) +
             C13641 * C50790) *
                C22818 +
            (C14414 - (C14415 + C14416) + C14417) * C50866) *
               C51024 +
           ((C19178 * C378 - (C13641 * C50983 + C13640 * C377) +
             C19179 * C50790) *
                C22818 +
            (C19934 - (C19935 + C19936) + C19937) * C50866) *
               C38335) *
              C50748 * C251 +
          ((((C10648 * C124 + C50688 * C131) * C377 +
             (C10648 * C135 + C50688 * C145) * C50983 - C13060 * C378 -
             C13061 * C50790) *
                C22818 +
            (C10796 * C377 + C10797 * C50983 - C12890 * C378 -
             C12891 * C50790) *
                C50866) *
               C51030 +
           ((C13060 * C377 + C13061 * C50983 - C18618 * C378 -
             C18619 * C50790) *
                C22818 +
            (C12890 * C377 + C12891 * C50983 - C18464 * C378 -
             C18465 * C50790) *
                C50866) *
               C51024 +
           ((C18618 * C377 + C18619 * C50983 - C21198 * C378 -
             C21199 * C50790) *
                C22818 +
            (C18464 * C377 + C18465 * C50983 -
             (C10648 * C3449 + C50688 * C3452) * C378 -
             (C10648 * C3455 + C50688 * C3458) * C50790) *
                C50866) *
               C38335) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C22818 +
            (C11218 + C11219 - C11252 - C11253) * C50866) *
               C51030 +
           ((C13056 * C377 + C13057 * C50983 - C13638 * C378 -
             C13639 * C50790) *
                C22818 +
            (C13461 + C13462 - C13463 - C13464) * C50866) *
               C51024 +
           ((C13638 * C377 + C13639 * C50983 - C13926 * C378 -
             C13927 * C50790) *
                C22818 +
            (C19016 + C19017 - C19018 - C19019) * C50866) *
               C38335) *
              C501 +
          (((C11252 - (C11219 + C11218) + C11253) * C22818 +
            (C11254 - (C11225 + C11224) + C11255) * C50866) *
               C51030 +
           ((C13463 - (C13462 + C13461) + C13464) * C22818 +
            (C13467 - (C13466 + C13465) + C13468) * C50866) *
               C51024 +
           ((C19018 - (C19017 + C19016) + C19019) * C22818 +
            (C19020 - (C19021 + C19022) + C19023) * C50866) *
               C38335) *
              C502 +
          ((C11262 * C22818 + C11263 * C50866) * C51030 +
           (C13475 * C22818 + (C13471 + C13470 - C13469 - C13472) * C50866) *
               C51024 +
           ((C19022 + C19021 - C19020 - C19023) * C22818 +
            (C11492 * C377 + C11493 * C50983 -
             (C10648 * C11565 + C50688 * C11566) * C378 -
             (C10648 * C11567 + C50688 * C11568) * C50790) *
                C50866) *
               C38335) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C7787 +
            ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C7788 +
            C8335 * C7789) *
               C50878 * C1169 -
           (C8459 * C7789 +
            ((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C7788 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C7787) *
               C50878 * C50764) *
              C51026 +
          ((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C7787 +
            ((C7999 + C8000) * C121 + (C8001 + C8002) * C50778) * C7788 +
            ((C8329 + C8330) * C121 + (C8331 + C8332) * C50778) * C7789) *
               C50878 * C50764 -
           (C8336 * C7789 +
            ((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C7788 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C7787) *
               C50878 * C1169) *
              C51012 +
          ((((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                 C121 +
             (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                 C50778) *
                C7787 +
            ((C8003 + C8004) * C121 + (C8005 + C8006) * C50778) * C7788 +
            ((C8007 + C8008) * C121 + (C8009 + C8010) * C50778) * C7789) *
               C50878 * C1169 -
           (((C49711 * C601 + C50693 * C609 + C49718 * C602 + C50967 * C610) *
                 C50778 +
             (C49711 * C597 + C50693 * C605 + C49718 * C598 + C50967 * C606) *
                 C121) *
                C7789 +
            ((C8010 + C8009) * C50778 + (C8008 + C8007) * C121) * C7788 +
            ((C8006 + C8005) * C50778 + (C8004 + C8003) * C121) * C7787) *
               C50878 * C50764) *
              C1173)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50778) *
               C50852 * C50878 * C1169 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C50778 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C121) *
               C50852 * C50878 * C50764) *
              C51026 +
          (((C117 * C255 + C105 * C265 + C118 * C254 + C106 * C264 +
             C119 * C253 + C107 * C263 + C120 * C257 + C108 * C267) *
                C121 +
            (C117 * C261 + C105 * C273 + C118 * C260 + C106 * C272 +
             C119 * C259 + C107 * C271 + C120 * C268 + C108 * C275) *
                C50778) *
               C50852 * C50878 * C50764 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50778 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50852 * C50878 * C1169) *
              C51012 +
          (((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50778) *
               C50852 * C50878 * C1169 -
           ((C120 * C269 + C108 * C276 + C119 * C268 + C107 * C275 +
             C118 * C259 + C106 * C271 + C117 * C260 + C105 * C272) *
                C50778 +
            (C120 * C258 + C108 * C270 + C119 * C257 + C107 * C267 +
             C118 * C253 + C106 * C263 + C117 * C254 + C105 * C264) *
                C121) *
               C50852 * C50878 * C50764) *
              C1173)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C50852 * C15526 +
            ((C15871 + C15870) * C121 + (C15873 + C15872) * C50778) * C50852 *
                C15527 +
            (C16430 * C121 + C16431 * C50778) * C50852 * C15528) *
               C1169 -
           ((C16609 * C50778 + C16608 * C121) * C50852 * C15528 +
            ((C8642 + C8643) * C50778 + (C8640 + C8641) * C121) * C50852 *
                C15527 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C50852 *
                C15526) *
               C50764) *
              C51026 +
          ((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C50852 *
                C15526 +
            ((C9591 + C9592) * C121 + (C9593 + C9594) * C50778) * C50852 *
                C15527 +
            ((C49718 * C967 + C50967 * C971 + C49711 * C966 + C50693 * C970) *
                 C121 +
             (C49718 * C975 + C50967 * C979 + C49711 * C974 + C50693 * C978) *
                 C50778) *
                C50852 * C15528) *
               C50764 -
           ((C16441 * C50778 + C16440 * C121) * C50852 * C15528 +
            ((C15881 + C15880) * C50778 + (C15879 + C15878) * C121) * C50852 *
                C15527 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C50852 * C15526) *
               C1169) *
              C51012 +
          ((((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                 C121 +
             (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                 C50778) *
                C50852 * C15526 +
            ((C15887 + C15886) * C121 + (C15889 + C15888) * C50778) * C50852 *
                C15527 +
            ((C15891 + C15890) * C121 + (C15893 + C15892) * C50778) * C50852 *
                C15528) *
               C1169 -
           (((C49711 * C973 + C50693 * C977 + C49718 * C974 + C50967 * C978) *
                 C50778 +
             (C49711 * C965 + C50693 * C969 + C49718 * C966 + C50967 * C970) *
                 C121) *
                C50852 * C15528 +
            ((C49711 * C726 + C50693 * C738 + C49718 * C725 + C50967 * C737) *
                 C50778 +
             (C49711 * C714 + C50693 * C722 + C49718 * C713 + C50967 * C721) *
                 C121) *
                C50852 * C15527 +
            ((C8006 + C8005) * C50778 + (C8004 + C8003) * C121) * C50852 *
                C15526) *
               C50764) *
              C1173)) /
            (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C7787 +
            ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C7788 +
            C8335 * C7789) *
               C50878 * C51027 -
           (C8459 * C7789 +
            ((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C7788 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C7787) *
               C50878 * C51015 +
           (C8335 * C7787 +
            ((C8328 + C8327) * C121 + (C8326 + C8325) * C50778) * C7788 +
            ((C8455 + C8456) * C121 + (C8457 + C8458) * C50778) * C7789) *
               C50878 * C1274) *
              C1275 +
          ((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C7787 +
            ((C7999 + C8000) * C121 + (C8001 + C8002) * C50778) * C7788 +
            ((C8329 + C8330) * C121 + (C8331 + C8332) * C50778) * C7789) *
               C50878 * C51015 -
           (C8336 * C7789 +
            ((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C7788 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C7787) *
               C50878 * C51027 -
           (((C49711 * C2808 + C50693 * C2814 + C49718 * C2809 +
              C50967 * C2815) *
                 C50778 +
             (C49711 * C2805 + C50693 * C2811 + C49718 * C2806 +
              C50967 * C2812) *
                 C121) *
                C7789 +
            ((C8332 + C8331) * C50778 + (C8330 + C8329) * C121) * C7788 +
            C8336 * C7787) *
               C50878 * C1274) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50778) *
               C50852 * C50878 * C51027 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C50778 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C121) *
               C50852 * C50878 * C51015 +
           ((C117 * C506 + C105 * C511 + C118 * C507 + C106 * C512 +
             C119 * C508 + C107 * C513 + C120 * C509 + C108 * C514) *
                C121 +
            (C117 * C515 + C105 * C521 + C118 * C516 + C106 * C522 +
             C119 * C517 + C107 * C523 + C120 * C518 + C108 * C524) *
                C50778) *
               C50852 * C50878 * C1274) *
              C1275 +
          (((C117 * C255 + C105 * C265 + C118 * C254 + C106 * C264 +
             C119 * C253 + C107 * C263 + C120 * C257 + C108 * C267) *
                C121 +
            (C117 * C261 + C105 * C273 + C118 * C260 + C106 * C272 +
             C119 * C259 + C107 * C271 + C120 * C268 + C108 * C275) *
                C50778) *
               C50852 * C50878 * C51015 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50778 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50852 * C50878 * C51027 -
           ((C120 * C519 + C108 * C525 + C119 * C518 + C107 * C524 +
             C118 * C517 + C106 * C523 + C117 * C516 + C105 * C522) *
                C50778 +
            (C120 * C510 + C108 * C520 + C119 * C509 + C107 * C514 +
             C118 * C508 + C106 * C513 + C117 * C507 + C105 * C512) *
                C121) *
               C50852 * C50878 * C1274) *
              C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C50852 * C15526 +
            ((C15871 + C15870) * C121 + (C15873 + C15872) * C50778) * C50852 *
                C15527 +
            (C16430 * C121 + C16431 * C50778) * C50852 * C15528) *
               C51027 -
           ((C16609 * C50778 + C16608 * C121) * C50852 * C15528 +
            ((C8642 + C8643) * C50778 + (C8640 + C8641) * C121) * C50852 *
                C15527 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C50852 *
                C15526) *
               C51015 +
           (C8335 * C50852 * C15526 +
            ((C8646 + C8645) * C121 + (C8648 + C8647) * C50778) * C50852 *
                C15527 +
            ((C8979 + C8980) * C121 + (C8981 + C8982) * C50778) * C50852 *
                C15528) *
               C1274) *
              C1275 +
          ((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C50852 *
                C15526 +
            ((C9591 + C9592) * C121 + (C9593 + C9594) * C50778) * C50852 *
                C15527 +
            ((C49718 * C967 + C50967 * C971 + C49711 * C966 + C50693 * C970) *
                 C121 +
             (C49718 * C975 + C50967 * C979 + C49711 * C974 + C50693 * C978) *
                 C50778) *
                C50852 * C15528) *
               C51015 -
           ((C16441 * C50778 + C16440 * C121) * C50852 * C15528 +
            ((C15881 + C15880) * C50778 + (C15879 + C15878) * C121) * C50852 *
                C15527 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C50852 * C15526) *
               C51027 -
           (((C49711 * C3327 + C50693 * C3330 + C49718 * C3328 +
              C50967 * C3331) *
                 C50778 +
             (C49711 * C3321 + C50693 * C3324 + C49718 * C3322 +
              C50967 * C3325) *
                 C121) *
                C50852 * C15528 +
            ((C9598 + C9597) * C50778 + (C9596 + C9595) * C121) * C50852 *
                C15527 +
            C8336 * C50852 * C15526) *
               C1274) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C377 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50983 -
             (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                 C378 -
             (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                 C50790) *
                C7787 +
            ((C7987 + C7988) * C377 + (C7989 + C7990) * C50983 -
             (C8640 + C8641) * C378 - (C8642 + C8643) * C50790) *
                C7788 +
            C8658 * C7789) *
               C50878 * C1169 +
           (((C8641 + C8640) * C378 -
             ((C7990 + C7989) * C50983 + (C7988 + C7987) * C377) +
             (C8643 + C8642) * C50790) *
                C7787 +
            ((C8646 + C8645) * C378 -
             ((C7994 + C7993) * C50983 + (C7992 + C7991) * C377) +
             (C8648 + C8647) * C50790) *
                C7788 +
            ((C8649 + C8650) * C378 - (C8443 * C50983 + C8444 * C377) +
             (C8651 + C8652) * C50790) *
                C7789) *
               C50878 * C50764) *
              C1275 +
          ((((C49718 * C381 + C50967 * C387 + C49711 * C380 + C50693 * C386) *
                 C378 -
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C50983 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C377) +
             (C49718 * C391 + C50967 * C399 + C49711 * C390 + C50693 * C398) *
                 C50790) *
                C7787 +
            ((C9591 + C9592) * C378 -
             ((C7998 + C7997) * C50983 + (C7996 + C7995) * C377) +
             (C9593 + C9594) * C50790) *
                C7788 +
            ((C9595 + C9596) * C378 - (C8321 * C50983 + C8322 * C377) +
             (C9597 + C9598) * C50790) *
                C7789) *
               C50878 * C1169 +
           (((C7995 + C7996) * C377 + (C7997 + C7998) * C50983 -
             (C9592 + C9591) * C378 - (C9594 + C9593) * C50790) *
                C7787 +
            ((C7999 + C8000) * C377 + (C8001 + C8002) * C50983 -
             (C9596 + C9595) * C378 - (C9598 + C9597) * C50790) *
                C7788 +
            ((C8329 + C8330) * C377 + (C8331 + C8332) * C50983 -
             (C49711 * C2981 + C50693 * C2984 + C49718 * C2982 +
              C50967 * C2985) *
                 C378 -
             (C49711 * C2987 + C50693 * C2990 + C49718 * C2988 +
              C50967 * C2991) *
                 C50790) *
                C7789) *
               C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C377 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50983 -
            (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
             C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
                C378 -
            (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
             C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
                C50790) *
               C50852 * C50878 * C1169 +
           ((C117 * C711 + C105 * C719 + C118 * C712 + C106 * C720 +
             C119 * C713 + C107 * C721 + C120 * C714 + C108 * C722) *
                C378 -
            ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
              C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                 C50983 +
             (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
              C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                 C377) +
            (C117 * C723 + C105 * C735 + C118 * C724 + C106 * C736 +
             C119 * C725 + C107 * C737 + C120 * C726 + C108 * C738) *
                C50790) *
               C50852 * C50878 * C50764) *
              C1275 +
          (((C117 * C381 + C105 * C387 + C118 * C380 + C106 * C386 +
             C119 * C379 + C107 * C385 + C120 * C383 + C108 * C393) *
                C378 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C50983 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C377) +
            (C117 * C391 + C105 * C399 + C118 * C390 + C106 * C398 +
             C119 * C389 + C107 * C397 + C120 * C394 + C108 * C401) *
                C50790) *
               C50852 * C50878 * C1169 +
           ((C117 * C255 + C105 * C265 + C118 * C254 + C106 * C264 +
             C119 * C253 + C107 * C263 + C120 * C257 + C108 * C267) *
                C377 +
            (C117 * C261 + C105 * C273 + C118 * C260 + C106 * C272 +
             C119 * C259 + C107 * C271 + C120 * C268 + C108 * C275) *
                C50983 -
            (C120 * C1407 + C108 * C1408 + C119 * C714 + C107 * C722 +
             C118 * C713 + C106 * C721 + C117 * C712 + C105 * C720) *
                C378 -
            (C120 * C1409 + C108 * C1410 + C119 * C726 + C107 * C738 +
             C118 * C725 + C106 * C737 + C117 * C724 + C105 * C736) *
                C50790) *
               C50852 * C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C377 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50983 -
             (C15870 + C15871) * C378 - (C15872 + C15873) * C50790) *
                C50852 * C15526 +
            ((C15871 + C15870) * C377 + (C15873 + C15872) * C50983 -
             (C15874 + C15875) * C378 - (C15876 + C15877) * C50790) *
                C50852 * C15527 +
            (C16430 * C377 + C16431 * C50983 - C16728 * C378 -
             C16729 * C50790) *
                C50852 * C15528) *
               C1169 +
           (((C8641 + C8640) * C378 -
             ((C7990 + C7989) * C50983 + (C7988 + C7987) * C377) +
             (C8643 + C8642) * C50790) *
                C50852 * C15526 +
            ((C8975 + C8976) * C378 -
             ((C8642 + C8643) * C50983 + (C8640 + C8641) * C377) +
             (C8977 + C8978) * C50790) *
                C50852 * C15527 +
            ((C16619 + C16618) * C378 - (C16609 * C50983 + C16608 * C377) +
             (C16621 + C16620) * C50790) *
                C50852 * C15528) *
               C50764) *
              C1275 +
          ((((C15878 + C15879) * C378 -
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C50983 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C377) +
             (C15880 + C15881) * C50790) *
                C50852 * C15526 +
            ((C15882 + C15883) * C378 -
             ((C15881 + C15880) * C50983 + (C15879 + C15878) * C377) +
             (C15884 + C15885) * C50790) *
                C50852 * C15527 +
            ((C16455 + C16454) * C378 - (C16441 * C50983 + C16440 * C377) +
             (C16457 + C16456) * C50790) *
                C50852 * C15528) *
               C1169 +
           (((C7995 + C7996) * C377 + (C7997 + C7998) * C50983 -
             (C9592 + C9591) * C378 - (C9594 + C9593) * C50790) *
                C50852 * C15526 +
            ((C9591 + C9592) * C377 + (C9593 + C9594) * C50983 -
             (C17236 + C17237) * C378 - (C17238 + C17239) * C50790) *
                C50852 * C15527 +
            ((C17237 + C17236) * C377 + (C17239 + C17238) * C50983 -
             (C49711 * C3449 + C50693 * C3452 + C49718 * C3450 +
              C50967 * C3453) *
                 C378 -
             (C49711 * C3455 + C50693 * C3458 + C49718 * C3456 +
              C50967 * C3459) *
                 C50790) *
                C50852 * C15528) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C1511 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C1509 -
             (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                 C1512 -
             (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                 C50790) *
                C7787 +
            ((C7987 + C7988) * C1511 + (C7989 + C7990) * C1509 -
             (C8640 + C8641) * C1512 - (C8642 + C8643) * C50790) *
                C7788 +
            (C8303 * C1511 + C8304 * C1509 - C8653 * C1512 - C8654 * C50790) *
                C7789) *
               C50878 * C1169 +
           (((C8641 + C8640) * C1512 -
             ((C7990 + C7989) * C1509 + (C7988 + C7987) * C1511) +
             (C8643 + C8642) * C50790) *
                C7787 +
            ((C8646 + C8645) * C1512 -
             ((C7994 + C7993) * C1509 + (C7992 + C7991) * C1511) +
             (C8648 + C8647) * C50790) *
                C7788 +
            ((C8649 + C8650) * C1512 - (C8443 * C1509 + C8444 * C1511) +
             (C8651 + C8652) * C50790) *
                C7789) *
               C50878 * C50764) *
              C50974 +
          ((((C49718 * C381 + C50967 * C387 + C49711 * C380 + C50693 * C386) *
                 C1512 -
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C1509 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C1511) +
             (C49718 * C391 + C50967 * C399 + C49711 * C390 + C50693 * C398) *
                 C50790) *
                C7787 +
            ((C9591 + C9592) * C1512 -
             ((C7998 + C7997) * C1509 + (C7996 + C7995) * C1511) +
             (C9593 + C9594) * C50790) *
                C7788 +
            ((C9595 + C9596) * C1512 - (C8321 * C1509 + C8322 * C1511) +
             (C9597 + C9598) * C50790) *
                C7789) *
               C50878 * C1169 +
           (((C7995 + C7996) * C1511 + (C7997 + C7998) * C1509 -
             (C9592 + C9591) * C1512 - (C9594 + C9593) * C50790) *
                C7787 +
            ((C7999 + C8000) * C1511 + (C8001 + C8002) * C1509 -
             (C9596 + C9595) * C1512 - (C9598 + C9597) * C50790) *
                C7788 +
            ((C8329 + C8330) * C1511 + (C8331 + C8332) * C1509 -
             (C49711 * C2981 + C50693 * C2984 + C49718 * C2982 +
              C50967 * C2985) *
                 C1512 -
             (C49711 * C2987 + C50693 * C2990 + C49718 * C2988 +
              C50967 * C2991) *
                 C50790) *
                C7789) *
               C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C1511 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C1509 -
            (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
             C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
                C1512 -
            (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
             C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
                C50790) *
               C50852 * C50878 * C1169 +
           ((C117 * C711 + C105 * C719 + C118 * C712 + C106 * C720 +
             C119 * C713 + C107 * C721 + C120 * C714 + C108 * C722) *
                C1512 -
            ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
              C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                 C1509 +
             (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
              C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                 C1511) +
            (C117 * C723 + C105 * C735 + C118 * C724 + C106 * C736 +
             C119 * C725 + C107 * C737 + C120 * C726 + C108 * C738) *
                C50790) *
               C50852 * C50878 * C50764) *
              C50974 +
          (((C117 * C381 + C105 * C387 + C118 * C380 + C106 * C386 +
             C119 * C379 + C107 * C385 + C120 * C383 + C108 * C393) *
                C1512 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C1509 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C1511) +
            (C117 * C391 + C105 * C399 + C118 * C390 + C106 * C398 +
             C119 * C389 + C107 * C397 + C120 * C394 + C108 * C401) *
                C50790) *
               C50852 * C50878 * C1169 +
           ((C117 * C255 + C105 * C265 + C118 * C254 + C106 * C264 +
             C119 * C253 + C107 * C263 + C120 * C257 + C108 * C267) *
                C1511 +
            (C117 * C261 + C105 * C273 + C118 * C260 + C106 * C272 +
             C119 * C259 + C107 * C271 + C120 * C268 + C108 * C275) *
                C1509 -
            (C120 * C1407 + C108 * C1408 + C119 * C714 + C107 * C722 +
             C118 * C713 + C106 * C721 + C117 * C712 + C105 * C720) *
                C1512 -
            (C120 * C1409 + C108 * C1410 + C119 * C726 + C107 * C738 +
             C118 * C725 + C106 * C737 + C117 * C724 + C105 * C736) *
                C50790) *
               C50852 * C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C1511 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C1509 -
             (C15870 + C15871) * C1512 - (C15872 + C15873) * C50790) *
                C50852 * C15526 +
            ((C15871 + C15870) * C1511 + (C15873 + C15872) * C1509 -
             (C15874 + C15875) * C1512 - (C15876 + C15877) * C50790) *
                C50852 * C15527 +
            (C16430 * C1511 + C16431 * C1509 - C16728 * C1512 -
             C16729 * C50790) *
                C50852 * C15528) *
               C1169 +
           (((C8641 + C8640) * C1512 -
             ((C7990 + C7989) * C1509 + (C7988 + C7987) * C1511) +
             (C8643 + C8642) * C50790) *
                C50852 * C15526 +
            ((C8975 + C8976) * C1512 -
             ((C8642 + C8643) * C1509 + (C8640 + C8641) * C1511) +
             (C8977 + C8978) * C50790) *
                C50852 * C15527 +
            ((C16619 + C16618) * C1512 - (C16609 * C1509 + C16608 * C1511) +
             (C16621 + C16620) * C50790) *
                C50852 * C15528) *
               C50764) *
              C50974 +
          ((((C15878 + C15879) * C1512 -
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C1509 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C1511) +
             (C15880 + C15881) * C50790) *
                C50852 * C15526 +
            ((C15882 + C15883) * C1512 -
             ((C15881 + C15880) * C1509 + (C15879 + C15878) * C1511) +
             (C15884 + C15885) * C50790) *
                C50852 * C15527 +
            ((C16455 + C16454) * C1512 - (C16441 * C1509 + C16440 * C1511) +
             (C16457 + C16456) * C50790) *
                C50852 * C15528) *
               C1169 +
           (((C7995 + C7996) * C1511 + (C7997 + C7998) * C1509 -
             (C9592 + C9591) * C1512 - (C9594 + C9593) * C50790) *
                C50852 * C15526 +
            ((C9591 + C9592) * C1511 + (C9593 + C9594) * C1509 -
             (C17236 + C17237) * C1512 - (C17238 + C17239) * C50790) *
                C50852 * C15527 +
            ((C17237 + C17236) * C1511 + (C17239 + C17238) * C1509 -
             (C49711 * C3449 + C50693 * C3452 + C49718 * C3450 +
              C50967 * C3453) *
                 C1512 -
             (C49711 * C3455 + C50693 * C3458 + C49718 * C3456 +
              C50967 * C3459) *
                 C50790) *
                C50852 * C15528) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C1511 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C1509 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C1512 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C50790) *
               C7787 +
           ((C7987 + C7988) * C1511 + (C7989 + C7990) * C1509 -
            (C8640 + C8641) * C1512 - (C8642 + C8643) * C50790) *
               C7788 +
           C10431 * C7789) *
              C50878 * C51027 +
          (((C8641 + C8640) * C1512 -
            ((C7990 + C7989) * C1509 + (C7988 + C7987) * C1511) +
            (C8643 + C8642) * C50790) *
               C7787 +
           ((C8646 + C8645) * C1512 -
            ((C7994 + C7993) * C1509 + (C7992 + C7991) * C1511) +
            (C8648 + C8647) * C50790) *
               C7788 +
           ((C8649 + C8650) * C1512 - (C8443 * C1509 + C8444 * C1511) +
            (C8651 + C8652) * C50790) *
               C7789) *
              C50878 * C51015 +
          (C10431 * C7787 +
           ((C8328 + C8327) * C1511 + (C8326 + C8325) * C1509 -
            (C8650 + C8649) * C1512 - (C8652 + C8651) * C50790) *
               C7788 +
           ((C8455 + C8456) * C1511 + (C8457 + C8458) * C1509 -
            (C49711 * C8605 + C50693 * C8607 + C49718 * C8606 +
             C50967 * C8608) *
                C1512 -
            (C49711 * C8609 + C50693 * C8611 + C49718 * C8610 +
             C50967 * C8612) *
                C50790) *
               C7789) *
              C50878 * C1274) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1511 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C1509 -
           (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
            C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
               C1512 -
           (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
            C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
               C50790) *
              C50852 * C50878 * C51027 +
          ((C117 * C711 + C105 * C719 + C118 * C712 + C106 * C720 +
            C119 * C713 + C107 * C721 + C120 * C714 + C108 * C722) *
               C1512 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C1509 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C1511) +
           (C117 * C723 + C105 * C735 + C118 * C724 + C106 * C736 +
            C119 * C725 + C107 * C737 + C120 * C726 + C108 * C738) *
               C50790) *
              C50852 * C50878 * C51015 +
          ((C117 * C506 + C105 * C511 + C118 * C507 + C106 * C512 +
            C119 * C508 + C107 * C513 + C120 * C509 + C108 * C514) *
               C1511 +
           (C117 * C515 + C105 * C521 + C118 * C516 + C106 * C522 +
            C119 * C517 + C107 * C523 + C120 * C518 + C108 * C524) *
               C1509 -
           (C120 * C715 + C108 * C727 + C119 * C716 + C107 * C728 +
            C118 * C717 + C106 * C729 + C117 * C718 + C105 * C730) *
               C1512 -
           (C120 * C731 + C108 * C739 + C119 * C732 + C107 * C740 +
            C118 * C733 + C106 * C741 + C117 * C734 + C105 * C742) *
               C50790) *
              C50852 * C50878 * C1274) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C1511 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C1509 -
            (C15870 + C15871) * C1512 - (C15872 + C15873) * C50790) *
               C50852 * C15526 +
           ((C15871 + C15870) * C1511 + (C15873 + C15872) * C1509 -
            (C15874 + C15875) * C1512 - (C15876 + C15877) * C50790) *
               C50852 * C15527 +
           (C16430 * C1511 + C16431 * C1509 - C16728 * C1512 -
            C16729 * C50790) *
               C50852 * C15528) *
              C51027 +
          (((C8641 + C8640) * C1512 -
            ((C7990 + C7989) * C1509 + (C7988 + C7987) * C1511) +
            (C8643 + C8642) * C50790) *
               C50852 * C15526 +
           ((C8975 + C8976) * C1512 -
            ((C8642 + C8643) * C1509 + (C8640 + C8641) * C1511) +
            (C8977 + C8978) * C50790) *
               C50852 * C15527 +
           ((C16619 + C16618) * C1512 - (C16609 * C1509 + C16608 * C1511) +
            (C16621 + C16620) * C50790) *
               C50852 * C15528) *
              C51015 +
          (C10431 * C50852 * C15526 +
           ((C8646 + C8645) * C1511 + (C8648 + C8647) * C1509 -
            (C8980 + C8979) * C1512 - (C8982 + C8981) * C50790) *
               C50852 * C15527 +
           ((C8979 + C8980) * C1511 + (C8981 + C8982) * C1509 -
            (C49711 * C9080 + C50693 * C9082 + C49718 * C9081 +
             C50967 * C9083) *
                C1512 -
            (C49711 * C9084 + C50693 * C9086 + C49718 * C9085 +
             C50967 * C9087) *
                C50790) *
               C50852 * C15528) *
              C1274) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C1744 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C51028 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C1745 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C51018 +
            (C49718 * C847 + C50967 * C852 + C49711 * C848 + C50693 * C853) *
                C1746 +
            (C49718 * C856 + C50967 * C862 + C49711 * C857 + C50693 * C863) *
                C1743) *
               C7787 +
           ((C7987 + C7988) * C1744 + (C7989 + C7990) * C51028 -
            (C8640 + C8641) * C1745 - (C8642 + C8643) * C51018 +
            (C8975 + C8976) * C1746 + (C8977 + C8978) * C1743) *
               C7788 +
           (C8303 * C1744 + C8304 * C51028 - C8653 * C1745 - C8654 * C51018 +
            (C8979 + C8980) * C1746 + (C8981 + C8982) * C1743) *
               C7789) *
              C50878 * C1169 +
          (((C8641 + C8640) * C1745 -
            ((C7990 + C7989) * C51028 + (C7988 + C7987) * C1744) +
            (C8643 + C8642) * C51018 - (C8976 + C8975) * C1746 -
            (C8978 + C8977) * C1743) *
               C7787 +
           ((C8646 + C8645) * C1745 -
            ((C7994 + C7993) * C51028 + (C7992 + C7991) * C1744) +
            (C8648 + C8647) * C51018 - (C8980 + C8979) * C1746 -
            (C8982 + C8981) * C1743) *
               C7788 +
           ((C8649 + C8650) * C1745 - (C8443 * C51028 + C8444 * C1744) +
            (C8651 + C8652) * C51018 -
            (C49711 * C8950 + C50693 * C8952 + C49718 * C8951 +
             C50967 * C8953) *
                C1746 -
            (C49711 * C8954 + C50693 * C8956 + C49718 * C8955 +
             C50967 * C8957) *
                C1743) *
               C7789) *
              C50878 * C50764) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1744 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C51028 -
           (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
            C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
               C1745 -
           (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
            C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
               C51018 +
           (C117 * C847 + C105 * C852 + C118 * C848 + C106 * C853 +
            C119 * C849 + C107 * C854 + C120 * C850 + C108 * C855) *
               C1746 +
           (C117 * C856 + C105 * C862 + C118 * C857 + C106 * C863 +
            C119 * C858 + C107 * C864 + C120 * C859 + C108 * C865) *
               C1743) *
              C50852 * C50878 * C1169 +
          ((C117 * C711 + C105 * C719 + C118 * C712 + C106 * C720 +
            C119 * C713 + C107 * C721 + C120 * C714 + C108 * C722) *
               C1745 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C51028 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C1744) +
           (C117 * C723 + C105 * C735 + C118 * C724 + C106 * C736 +
            C119 * C725 + C107 * C737 + C120 * C726 + C108 * C738) *
               C51018 -
           (C120 * C965 + C108 * C969 + C119 * C966 + C107 * C970 +
            C118 * C967 + C106 * C971 + C117 * C968 + C105 * C972) *
               C1746 -
           (C120 * C973 + C108 * C977 + C119 * C974 + C107 * C978 +
            C118 * C975 + C106 * C979 + C117 * C976 + C105 * C980) *
               C1743) *
              C50852 * C50878 * C50764) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C1744 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C51028 -
            (C15870 + C15871) * C1745 - (C15872 + C15873) * C51018 +
            C16430 * C1746 + C16431 * C1743) *
               C50852 * C15526 +
           ((C15871 + C15870) * C1744 + (C15873 + C15872) * C51028 -
            (C15874 + C15875) * C1745 - (C15876 + C15877) * C51018 +
            (C16450 + C16451) * C1746 + (C16452 + C16453) * C1743) *
               C50852 * C15527 +
           (C16430 * C1744 + C16431 * C51028 - C16728 * C1745 -
            C16729 * C51018 + (C16739 + C16738) * C1746 +
            (C16741 + C16740) * C1743) *
               C50852 * C15528) *
              C1169 +
          (((C8641 + C8640) * C1745 -
            ((C7990 + C7989) * C51028 + (C7988 + C7987) * C1744) +
            (C8643 + C8642) * C51018 - C16608 * C1746 - C16609 * C1743) *
               C50852 * C15526 +
           ((C8975 + C8976) * C1745 -
            ((C8642 + C8643) * C51028 + (C8640 + C8641) * C1744) +
            (C8977 + C8978) * C51018 - (C16618 + C16619) * C1746 -
            (C16620 + C16621) * C1743) *
               C50852 * C15527 +
           ((C16619 + C16618) * C1745 - (C16609 * C51028 + C16608 * C1744) +
            (C16621 + C16620) * C51018 -
            (C49711 * C16603 + C50693 * C16604 + C49718 * C13913 +
             C50967 * C13915) *
                C1746 -
            (C49711 * C16605 + C50693 * C16606 + C49718 * C13916 +
             C50967 * C13919) *
                C1743) *
               C50852 * C15528) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                   C121 +
               (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                   C50778) *
                  C50852 * C50878 * C50748 * C113 -
              ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
                C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                   C50778 +
               (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
                C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                   C121) *
                  C50852 * C50878 * C50748 * C114 +
              ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
                C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                   C121 +
               (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
                C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                   C50778) *
                  C50852 * C50878 * C50748 * C115 -
              ((C120 * C141 + C108 * C149 + C119 * C140 + C107 * C148 +
                C118 * C137 + C106 * C147 + C117 * C136 + C105 * C146) *
                   C50778 +
               (C120 * C128 + C108 * C142 + C119 * C127 + C107 * C139 +
                C118 * C126 + C106 * C138 + C117 * C125 + C105 * C132) *
                   C121) *
                  C50852 * C50878 * C50748 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                 C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                    C121 +
                (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                 C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                    C50778) *
                   C50852 * C50878 * C501 -
               ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
                 C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                    C50778 +
                (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
                 C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                    C121) *
                   C50852 * C50878 * C502 +
               ((C117 * C506 + C105 * C511 + C118 * C507 + C106 * C512 +
                 C119 * C508 + C107 * C513 + C120 * C509 + C108 * C514) *
                    C121 +
                (C117 * C515 + C105 * C521 + C118 * C516 + C106 * C522 +
                 C119 * C517 + C107 * C523 + C120 * C518 + C108 * C524) *
                    C50778) *
                   C50852 * C50878 * C503) *
                  C50974 +
              (((C117 * C255 + C105 * C265 + C118 * C254 + C106 * C264 +
                 C119 * C253 + C107 * C263 + C120 * C257 + C108 * C267) *
                    C121 +
                (C117 * C261 + C105 * C273 + C118 * C260 + C106 * C272 +
                 C119 * C259 + C107 * C271 + C120 * C268 + C108 * C275) *
                    C50778) *
                   C50852 * C50878 * C502 -
               ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
                 C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                    C50778 +
                (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
                 C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                    C121) *
                   C50852 * C50878 * C501 -
               ((C120 * C519 + C108 * C525 + C119 * C518 + C107 * C524 +
                 C118 * C517 + C106 * C523 + C117 * C516 + C105 * C522) *
                    C50778 +
                (C120 * C510 + C108 * C520 + C119 * C509 + C107 * C514 +
                 C118 * C508 + C106 * C513 + C117 * C507 + C105 * C512) *
                    C121) *
                   C50852 * C50878 * C503) *
                  C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C844 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C841 -
           (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
            C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
               C845 -
           (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
            C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
               C842 +
           (C117 * C847 + C105 * C852 + C118 * C848 + C106 * C853 +
            C119 * C849 + C107 * C854 + C120 * C850 + C108 * C855) *
               C846 +
           (C117 * C856 + C105 * C862 + C118 * C857 + C106 * C863 +
            C119 * C858 + C107 * C864 + C120 * C859 + C108 * C865) *
               C843) *
              C50852 * C50878 * C50748 * C50974 +
          ((C117 * C381 + C105 * C387 + C118 * C380 + C106 * C386 +
            C119 * C379 + C107 * C385 + C120 * C383 + C108 * C393) *
               C845 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C841 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C844) +
           (C117 * C391 + C105 * C399 + C118 * C390 + C106 * C398 +
            C119 * C389 + C107 * C397 + C120 * C394 + C108 * C401) *
               C842 -
           (C120 * C851 + C108 * C860 + C119 * C850 + C107 * C855 +
            C118 * C849 + C106 * C854 + C117 * C848 + C105 * C853) *
               C846 -
           (C120 * C861 + C108 * C866 + C119 * C859 + C107 * C865 +
            C118 * C858 + C106 * C864 + C117 * C857 + C105 * C863) *
               C843) *
              C50852 * C50878 * C50748 * C50721)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C121 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50778) *
               C7787 +
           ((C49718 * C256 + C50967 * C266 + C49711 * C255 + C50693 * C265) *
                C121 +
            (C49718 * C262 + C50967 * C274 + C49711 * C261 + C50693 * C273) *
                C50778) *
               C7788 +
           ((C49718 * C506 + C50967 * C511 + C49711 * C507 + C50693 * C512) *
                C121 +
            (C49718 * C515 + C50967 * C521 + C49711 * C516 + C50693 * C522) *
                C50778) *
               C7789) *
              C50878 * C50748 * C113 -
          (((C49711 * C517 + C50693 * C523 + C49718 * C516 + C50967 * C522) *
                C50778 +
            (C49711 * C508 + C50693 * C513 + C49718 * C507 + C50967 * C512) *
                C121) *
               C7789 +
           ((C49711 * C260 + C50693 * C272 + C49718 * C261 + C50967 * C273) *
                C50778 +
            (C49711 * C254 + C50693 * C264 + C49718 * C255 + C50967 * C265) *
                C121) *
               C7788 +
           ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                C50778 +
            (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                C121) *
               C7787) *
              C50878 * C50748 * C114 +
          (((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                C121 +
            (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                C50778) *
               C7787 +
           ((C49718 * C254 + C50967 * C264 + C49711 * C253 + C50693 * C263) *
                C121 +
            (C49718 * C260 + C50967 * C272 + C49711 * C259 + C50693 * C271) *
                C50778) *
               C7788 +
           ((C49718 * C508 + C50967 * C513 + C49711 * C509 + C50693 * C514) *
                C121 +
            (C49718 * C517 + C50967 * C523 + C49711 * C518 + C50693 * C524) *
                C50778) *
               C7789) *
              C50878 * C50748 * C115 -
          (((C49711 * C519 + C50693 * C525 + C49718 * C518 + C50967 * C524) *
                C50778 +
            (C49711 * C510 + C50693 * C520 + C49718 * C509 + C50967 * C514) *
                C121) *
               C7789 +
           ((C49711 * C268 + C50693 * C275 + C49718 * C259 + C50967 * C271) *
                C50778 +
            (C49711 * C257 + C50693 * C267 + C49718 * C253 + C50967 * C263) *
                C121) *
               C7788 +
           ((C49711 * C137 + C50693 * C147 + C49718 * C136 + C50967 * C146) *
                C50778 +
            (C49711 * C126 + C50693 * C138 + C49718 * C125 + C50967 * C132) *
                C121) *
               C7787) *
              C50878 * C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C7787 +
            ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C7788 +
            C8335 * C7789) *
               C50878 * C501 -
           (((C8325 + C8326) * C50778 + (C8327 + C8328) * C121) * C7789 +
            ((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C7788 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C7787) *
               C50878 * C502 +
           (C8335 * C7787 +
            ((C8328 + C8327) * C121 + (C8326 + C8325) * C50778) * C7788 +
            ((C49718 * C2807 + C50967 * C2813 + C49711 * C2806 +
              C50693 * C2812) *
                 C121 +
             (C49718 * C2810 + C50967 * C2816 + C49711 * C2809 +
              C50693 * C2815) *
                 C50778) *
                C7789) *
               C50878 * C503) *
              C50974 +
          ((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C7787 +
            ((C7999 + C8000) * C121 + (C8001 + C8002) * C50778) * C7788 +
            ((C8329 + C8330) * C121 + (C8331 + C8332) * C50778) * C7789) *
               C50878 * C502 -
           (C8336 * C7789 +
            ((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C7788 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C7787) *
               C50878 * C501 -
           (((C49711 * C2808 + C50693 * C2814 + C49718 * C2809 +
              C50967 * C2815) *
                 C50778 +
             (C49711 * C2805 + C50693 * C2811 + C49718 * C2806 +
              C50967 * C2812) *
                 C121) *
                C7789 +
            ((C8332 + C8331) * C50778 + (C8330 + C8329) * C121) * C7788 +
            C8336 * C7787) *
               C50878 * C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C844 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C841 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C845 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C842 +
            (C49718 * C847 + C50967 * C852 + C49711 * C848 + C50693 * C853) *
                C846 +
            (C49718 * C856 + C50967 * C862 + C49711 * C857 + C50693 * C863) *
                C843) *
               C7787 +
           ((C7987 + C7988) * C844 + (C7989 + C7990) * C841 -
            (C8640 + C8641) * C845 - (C8642 + C8643) * C842 +
            (C49718 * C968 + C50967 * C972 + C49711 * C967 + C50693 * C971) *
                C846 +
            (C49718 * C976 + C50967 * C980 + C49711 * C975 + C50693 * C979) *
                C843) *
               C7788 +
           (C8303 * C844 + C8304 * C841 - C8653 * C845 - C8654 * C842 +
            (C49718 * C3323 + C50967 * C3326 + C49711 * C3322 +
             C50693 * C3325) *
                C846 +
            (C49718 * C3329 + C50967 * C3332 + C49711 * C3328 +
             C50693 * C3331) *
                C843) *
               C7789) *
              C50878 * C50748 * C50974 +
          (((C49718 * C381 + C50967 * C387 + C49711 * C380 + C50693 * C386) *
                C845 -
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C841 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C844) +
            (C49718 * C391 + C50967 * C399 + C49711 * C390 + C50693 * C398) *
                C842 -
            (C49711 * C849 + C50693 * C854 + C49718 * C848 + C50967 * C853) *
                C846 -
            (C49711 * C858 + C50693 * C864 + C49718 * C857 + C50967 * C863) *
                C843) *
               C7787 +
           ((C49718 * C712 + C50967 * C720 + C49711 * C713 + C50693 * C721) *
                C845 -
            ((C7998 + C7997) * C841 + (C7996 + C7995) * C844) +
            (C49718 * C724 + C50967 * C736 + C49711 * C725 + C50693 * C737) *
                C842 -
            (C49711 * C966 + C50693 * C970 + C49718 * C967 + C50967 * C971) *
                C846 -
            (C49711 * C974 + C50693 * C978 + C49718 * C975 + C50967 * C979) *
                C843) *
               C7788 +
           ((C49718 * C717 + C50967 * C729 + C49711 * C716 + C50693 * C728) *
                C845 -
            (C8321 * C841 + C8322 * C844) +
            (C49718 * C733 + C50967 * C741 + C49711 * C732 + C50693 * C740) *
                C842 -
            (C49711 * C3321 + C50693 * C3324 + C49718 * C3322 +
             C50967 * C3325) *
                C846 -
            (C49711 * C3327 + C50693 * C3330 + C49718 * C3328 +
             C50967 * C3331) *
                C843) *
               C7789) *
              C50878 * C50748 * C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C121 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50778) *
               C50852 * C15526 +
           ((C49718 * C382 + C50967 * C388 + C49711 * C381 + C50693 * C387) *
                C121 +
            (C49718 * C392 + C50967 * C400 + C49711 * C391 + C50693 * C399) *
                C50778) *
               C50852 * C15527 +
           ((C49718 * C847 + C50967 * C852 + C49711 * C848 + C50693 * C853) *
                C121 +
            (C49718 * C856 + C50967 * C862 + C49711 * C857 + C50693 * C863) *
                C50778) *
               C50852 * C15528) *
              C50748 * C113 -
          (((C49711 * C858 + C50693 * C864 + C49718 * C857 + C50967 * C863) *
                C50778 +
            (C49711 * C849 + C50693 * C854 + C49718 * C848 + C50967 * C853) *
                C121) *
               C50852 * C15528 +
           ((C49711 * C390 + C50693 * C398 + C49718 * C391 + C50967 * C399) *
                C50778 +
            (C49711 * C380 + C50693 * C386 + C49718 * C381 + C50967 * C387) *
                C121) *
               C50852 * C15527 +
           ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                C50778 +
            (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                C121) *
               C50852 * C15526) *
              C50748 * C114 +
          (((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                C121 +
            (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                C50778) *
               C50852 * C15526 +
           ((C49718 * C380 + C50967 * C386 + C49711 * C379 + C50693 * C385) *
                C121 +
            (C49718 * C390 + C50967 * C398 + C49711 * C389 + C50693 * C397) *
                C50778) *
               C50852 * C15527 +
           ((C49718 * C849 + C50967 * C854 + C49711 * C850 + C50693 * C855) *
                C121 +
            (C49718 * C858 + C50967 * C864 + C49711 * C859 + C50693 * C865) *
                C50778) *
               C50852 * C15528) *
              C50748 * C115 -
          (((C49711 * C861 + C50693 * C866 + C49718 * C859 + C50967 * C865) *
                C50778 +
            (C49711 * C851 + C50693 * C860 + C49718 * C850 + C50967 * C855) *
                C121) *
               C50852 * C15528 +
           ((C49711 * C394 + C50693 * C401 + C49718 * C389 + C50967 * C397) *
                C50778 +
            (C49711 * C383 + C50693 * C393 + C49718 * C379 + C50967 * C385) *
                C121) *
               C50852 * C15527 +
           ((C49711 * C137 + C50693 * C147 + C49718 * C136 + C50967 * C146) *
                C50778 +
            (C49711 * C126 + C50693 * C138 + C49718 * C125 + C50967 * C132) *
                C121) *
               C50852 * C15526) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C50852 * C15526 +
            ((C15871 + C15870) * C121 + (C15873 + C15872) * C50778) * C50852 *
                C15527 +
            ((C15875 + C15874) * C121 + (C15877 + C15876) * C50778) * C50852 *
                C15528) *
               C501 -
           (((C8978 + C8977) * C50778 + (C8976 + C8975) * C121) * C50852 *
                C15528 +
            ((C8642 + C8643) * C50778 + (C8640 + C8641) * C121) * C50852 *
                C15527 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C50852 *
                C15526) *
               C502 +
           (C8335 * C50852 * C15526 +
            ((C8646 + C8645) * C121 + (C8648 + C8647) * C50778) * C50852 *
                C15527 +
            ((C8979 + C8980) * C121 + (C8981 + C8982) * C50778) * C50852 *
                C15528) *
               C503) *
              C50974 +
          ((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C50852 *
                C15526 +
            ((C9591 + C9592) * C121 + (C9593 + C9594) * C50778) * C50852 *
                C15527 +
            ((C49718 * C967 + C50967 * C971 + C49711 * C966 + C50693 * C970) *
                 C121 +
             (C49718 * C975 + C50967 * C979 + C49711 * C974 + C50693 * C978) *
                 C50778) *
                C50852 * C15528) *
               C502 -
           (((C15885 + C15884) * C50778 + (C15883 + C15882) * C121) * C50852 *
                C15528 +
            ((C15881 + C15880) * C50778 + (C15879 + C15878) * C121) * C50852 *
                C15527 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C50852 * C15526) *
               C501 -
           (((C49711 * C3327 + C50693 * C3330 + C49718 * C3328 +
              C50967 * C3331) *
                 C50778 +
             (C49711 * C3321 + C50693 * C3324 + C49718 * C3322 +
              C50967 * C3325) *
                 C121) *
                C50852 * C15528 +
            ((C9598 + C9597) * C50778 + (C9596 + C9595) * C121) * C50852 *
                C15527 +
            C8336 * C50852 * C15526) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C844 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C841 -
            (C15870 + C15871) * C845 - (C15872 + C15873) * C842 +
            C16430 * C846 + C16431 * C843) *
               C50852 * C15526 +
           ((C15871 + C15870) * C844 + (C15873 + C15872) * C841 -
            (C15874 + C15875) * C845 - (C15876 + C15877) * C842 +
            (C16450 + C16451) * C846 + (C16452 + C16453) * C843) *
               C50852 * C15527 +
           (C16430 * C844 + C16431 * C841 - (C16451 + C16450) * C845 -
            (C16453 + C16452) * C842 +
            (C49718 * C6201 + C50967 * C6204 + C49711 * C6200 +
             C50693 * C6203) *
                C846 +
            (C49718 * C6207 + C50967 * C6210 + C49711 * C6206 +
             C50693 * C6209) *
                C843) *
               C50852 * C15528) *
              C50748 * C50974 +
          (((C15878 + C15879) * C845 -
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C841 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C844) +
            (C15880 + C15881) * C842 - C16440 * C846 - C16441 * C843) *
               C50852 * C15526 +
           ((C15882 + C15883) * C845 -
            ((C15881 + C15880) * C841 + (C15879 + C15878) * C844) +
            (C15884 + C15885) * C842 - (C16454 + C16455) * C846 -
            (C16456 + C16457) * C843) *
               C50852 * C15527 +
           ((C16455 + C16454) * C845 - (C16441 * C841 + C16440 * C844) +
            (C16457 + C16456) * C842 -
            (C49711 * C6199 + C50693 * C6202 + C49718 * C6200 +
             C50967 * C6203) *
                C846 -
            (C49711 * C6205 + C50693 * C6208 + C49718 * C6206 +
             C50967 * C6209) *
                C843) *
               C50852 * C15528) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                 C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                    C121 +
                (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                 C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                    C50778) *
                   C50852 * C50878 * C50981 -
               ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
                 C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                    C50778 +
                (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
                 C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                    C121) *
                   C50852 * C50878 * C50764) *
                  C250 +
              (((C117 * C255 + C105 * C265 + C118 * C254 + C106 * C264 +
                 C119 * C253 + C107 * C263 + C120 * C257 + C108 * C267) *
                    C121 +
                (C117 * C261 + C105 * C273 + C118 * C260 + C106 * C272 +
                 C119 * C259 + C107 * C271 + C120 * C268 + C108 * C275) *
                    C50778) *
                   C50852 * C50878 * C50764 -
               ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
                 C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                    C50778 +
                (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
                 C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                    C121) *
                   C50852 * C50878 * C50981) *
                  C251 +
              (((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
                 C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                    C121 +
                (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
                 C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                    C50778) *
                   C50852 * C50878 * C50981 -
               ((C120 * C269 + C108 * C276 + C119 * C268 + C107 * C275 +
                 C118 * C259 + C106 * C271 + C117 * C260 + C105 * C272) *
                    C50778 +
                (C120 * C258 + C108 * C270 + C119 * C257 + C107 * C267 +
                 C118 * C253 + C106 * C263 + C117 * C254 + C105 * C264) *
                    C121) *
                   C50852 * C50878 * C50764) *
                  C252) +
         0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                   C121 +
               (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                   C50778) *
                  C50852 * C50878 * C592 -
              ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
                C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                   C50778 +
               (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
                C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                   C121) *
                  C50852 * C50878 * C593 +
              ((C117 * C506 + C105 * C511 + C118 * C507 + C106 * C512 +
                C119 * C508 + C107 * C513 + C120 * C509 + C108 * C514) *
                   C121 +
               (C117 * C515 + C105 * C521 + C118 * C516 + C106 * C522 +
                C119 * C517 + C107 * C523 + C120 * C518 + C108 * C524) *
                   C50778) *
                  C50852 * C50878 * C594 -
              ((C120 * C601 + C108 * C609 + C119 * C602 + C107 * C610 +
                C118 * C603 + C106 * C611 + C117 * C604 + C105 * C612) *
                   C50778 +
               (C120 * C597 + C108 * C605 + C119 * C598 + C107 * C606 +
                C118 * C599 + C106 * C607 + C117 * C600 + C105 * C608) *
                   C121) *
                  C50852 * C50878 * C595) *
             C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C844 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C841 -
           (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
            C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
               C845 -
           (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
            C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
               C842 +
           (C117 * C847 + C105 * C852 + C118 * C848 + C106 * C853 +
            C119 * C849 + C107 * C854 + C120 * C850 + C108 * C855) *
               C846 +
           (C117 * C856 + C105 * C862 + C118 * C857 + C106 * C863 +
            C119 * C858 + C107 * C864 + C120 * C859 + C108 * C865) *
               C843) *
              C50852 * C50878 * C50981 +
          ((C117 * C711 + C105 * C719 + C118 * C712 + C106 * C720 +
            C119 * C713 + C107 * C721 + C120 * C714 + C108 * C722) *
               C845 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C841 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C844) +
           (C117 * C723 + C105 * C735 + C118 * C724 + C106 * C736 +
            C119 * C725 + C107 * C737 + C120 * C726 + C108 * C738) *
               C842 -
           (C120 * C965 + C108 * C969 + C119 * C966 + C107 * C970 +
            C118 * C967 + C106 * C971 + C117 * C968 + C105 * C972) *
               C846 -
           (C120 * C973 + C108 * C977 + C119 * C974 + C107 * C978 +
            C118 * C975 + C106 * C979 + C117 * C976 + C105 * C980) *
               C843) *
              C50852 * C50878 * C50764) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C7787 +
            ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C7788 +
            ((C7991 + C7992) * C121 + (C7993 + C7994) * C50778) * C7789) *
               C50878 * C50981 -
           (((C49711 * C603 + C50693 * C611 + C49718 * C604 + C50967 * C612) *
                 C50778 +
             (C49711 * C599 + C50693 * C607 + C49718 * C600 + C50967 * C608) *
                 C121) *
                C7789 +
            ((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C7788 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C7787) *
               C50878 * C50764) *
              C250 +
          ((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C7787 +
            ((C7999 + C8000) * C121 + (C8001 + C8002) * C50778) * C7788 +
            ((C49718 * C599 + C50967 * C607 + C49711 * C598 + C50693 * C606) *
                 C121 +
             (C49718 * C603 + C50967 * C611 + C49711 * C602 + C50693 * C610) *
                 C50778) *
                C7789) *
               C50878 * C50764 -
           (((C8002 + C8001) * C50778 + (C8000 + C7999) * C121) * C7789 +
            ((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C7788 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C7787) *
               C50878 * C50981) *
              C251 +
          ((((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                 C121 +
             (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                 C50778) *
                C7787 +
            ((C8003 + C8004) * C121 + (C8005 + C8006) * C50778) * C7788 +
            ((C8007 + C8008) * C121 + (C8009 + C8010) * C50778) * C7789) *
               C50878 * C50981 -
           (((C49711 * C601 + C50693 * C609 + C49718 * C602 + C50967 * C610) *
                 C50778 +
             (C49711 * C597 + C50693 * C605 + C49718 * C598 + C50967 * C606) *
                 C121) *
                C7789 +
            ((C8010 + C8009) * C50778 + (C8008 + C8007) * C121) * C7788 +
            ((C8006 + C8005) * C50778 + (C8004 + C8003) * C121) * C7787) *
               C50878 * C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C121 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50778) *
               C7787 +
           ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C7788 +
           C8335 * C7789) *
              C50878 * C592 -
          (C8459 * C7789 +
           ((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C7788 +
           ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C7787) *
              C50878 * C593 +
          (C8335 * C7787 +
           ((C8328 + C8327) * C121 + (C8326 + C8325) * C50778) * C7788 +
           ((C8455 + C8456) * C121 + (C8457 + C8458) * C50778) * C7789) *
              C50878 * C594 -
          (((C49711 * C8436 + C50693 * C8440 + C49718 * C8437 +
             C50967 * C8441) *
                C50778 +
            (C49711 * C8434 + C50693 * C8438 + C49718 * C8435 +
             C50967 * C8439) *
                C121) *
               C7789 +
           ((C8458 + C8457) * C50778 + (C8456 + C8455) * C121) * C7788 +
           C8459 * C7787) *
              C50878 * C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C844 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C841 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C845 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C842 +
            (C49718 * C847 + C50967 * C852 + C49711 * C848 + C50693 * C853) *
                C846 +
            (C49718 * C856 + C50967 * C862 + C49711 * C857 + C50693 * C863) *
                C843) *
               C7787 +
           ((C7987 + C7988) * C844 + (C7989 + C7990) * C841 -
            (C8640 + C8641) * C845 - (C8642 + C8643) * C842 +
            (C8975 + C8976) * C846 + (C8977 + C8978) * C843) *
               C7788 +
           (C8303 * C844 + C8304 * C841 - C8653 * C845 - C8654 * C842 +
            (C8979 + C8980) * C846 + (C8981 + C8982) * C843) *
               C7789) *
              C50878 * C50981 +
          (((C8641 + C8640) * C845 -
            ((C7990 + C7989) * C841 + (C7988 + C7987) * C844) +
            (C8643 + C8642) * C842 - (C8976 + C8975) * C846 -
            (C8978 + C8977) * C843) *
               C7787 +
           ((C8646 + C8645) * C845 -
            ((C7994 + C7993) * C841 + (C7992 + C7991) * C844) +
            (C8648 + C8647) * C842 - (C8980 + C8979) * C846 -
            (C8982 + C8981) * C843) *
               C7788 +
           ((C8649 + C8650) * C845 - (C8443 * C841 + C8444 * C844) +
            (C8651 + C8652) * C842 -
            (C49711 * C8950 + C50693 * C8952 + C49718 * C8951 +
             C50967 * C8953) *
                C846 -
            (C49711 * C8954 + C50693 * C8956 + C49718 * C8955 +
             C50967 * C8957) *
                C843) *
               C7789) *
              C50878 * C50764) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C50852 * C15526 +
            ((C49718 * C382 + C50967 * C388 + C49711 * C381 + C50693 * C387) *
                 C121 +
             (C49718 * C392 + C50967 * C400 + C49711 * C391 + C50693 * C399) *
                 C50778) *
                C50852 * C15527 +
            ((C49718 * C847 + C50967 * C852 + C49711 * C848 + C50693 * C853) *
                 C121 +
             (C49718 * C856 + C50967 * C862 + C49711 * C857 + C50693 * C863) *
                 C50778) *
                C50852 * C15528) *
               C50981 -
           (((C8978 + C8977) * C50778 + (C8976 + C8975) * C121) * C50852 *
                C15528 +
            ((C8642 + C8643) * C50778 + (C8640 + C8641) * C121) * C50852 *
                C15527 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C50852 *
                C15526) *
               C50764) *
              C250 +
          ((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C50852 *
                C15526 +
            ((C9591 + C9592) * C121 + (C9593 + C9594) * C50778) * C50852 *
                C15527 +
            ((C49718 * C967 + C50967 * C971 + C49711 * C966 + C50693 * C970) *
                 C121 +
             (C49718 * C975 + C50967 * C979 + C49711 * C974 + C50693 * C978) *
                 C50778) *
                C50852 * C15528) *
               C50764 -
           (((C49711 * C858 + C50693 * C864 + C49718 * C857 + C50967 * C863) *
                 C50778 +
             (C49711 * C849 + C50693 * C854 + C49718 * C848 + C50967 * C853) *
                 C121) *
                C50852 * C15528 +
            ((C49711 * C390 + C50693 * C398 + C49718 * C391 + C50967 * C399) *
                 C50778 +
             (C49711 * C380 + C50693 * C386 + C49718 * C381 + C50967 * C387) *
                 C121) *
                C50852 * C15527 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C50852 * C15526) *
               C50981) *
              C251 +
          ((((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                 C121 +
             (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                 C50778) *
                C50852 * C15526 +
            ((C49718 * C380 + C50967 * C386 + C49711 * C379 + C50693 * C385) *
                 C121 +
             (C49718 * C390 + C50967 * C398 + C49711 * C389 + C50693 * C397) *
                 C50778) *
                C50852 * C15527 +
            ((C49718 * C849 + C50967 * C854 + C49711 * C850 + C50693 * C855) *
                 C121 +
             (C49718 * C858 + C50967 * C864 + C49711 * C859 + C50693 * C865) *
                 C50778) *
                C50852 * C15528) *
               C50981 -
           (((C49711 * C973 + C50693 * C977 + C49718 * C974 + C50967 * C978) *
                 C50778 +
             (C49711 * C965 + C50693 * C969 + C49718 * C966 + C50967 * C970) *
                 C121) *
                C50852 * C15528 +
            ((C49711 * C726 + C50693 * C738 + C49718 * C725 + C50967 * C737) *
                 C50778 +
             (C49711 * C714 + C50693 * C722 + C49718 * C713 + C50967 * C721) *
                 C121) *
                C50852 * C15527 +
            ((C8006 + C8005) * C50778 + (C8004 + C8003) * C121) * C50852 *
                C15526) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C121 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50778) *
               C50852 * C15526 +
           ((C15871 + C15870) * C121 + (C15873 + C15872) * C50778) * C50852 *
               C15527 +
           ((C15875 + C15874) * C121 + (C15877 + C15876) * C50778) * C50852 *
               C15528) *
              C592 -
          (((C8978 + C8977) * C50778 + (C8976 + C8975) * C121) * C50852 *
               C15528 +
           ((C8642 + C8643) * C50778 + (C8640 + C8641) * C121) * C50852 *
               C15527 +
           ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C50852 *
               C15526) *
              C593 +
          (C8335 * C50852 * C15526 +
           ((C8646 + C8645) * C121 + (C8648 + C8647) * C50778) * C50852 *
               C15527 +
           ((C8979 + C8980) * C121 + (C8981 + C8982) * C50778) * C50852 *
               C15528) *
              C594 -
          (((C49711 * C8954 + C50693 * C8956 + C49718 * C8955 +
             C50967 * C8957) *
                C50778 +
            (C49711 * C8950 + C50693 * C8952 + C49718 * C8951 +
             C50967 * C8953) *
                C121) *
               C50852 * C15528 +
           ((C8652 + C8651) * C50778 + (C8650 + C8649) * C121) * C50852 *
               C15527 +
           C8459 * C50852 * C15526) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C844 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C841 -
            (C15870 + C15871) * C845 - (C15872 + C15873) * C842 +
            C16430 * C846 + C16431 * C843) *
               C50852 * C15526 +
           ((C15871 + C15870) * C844 + (C15873 + C15872) * C841 -
            (C15874 + C15875) * C845 - (C15876 + C15877) * C842 +
            (C16450 + C16451) * C846 + (C16452 + C16453) * C843) *
               C50852 * C15527 +
           (C16430 * C844 + C16431 * C841 - (C16451 + C16450) * C845 -
            (C16453 + C16452) * C842 +
            (C49718 * C6201 + C50967 * C6204 + C49711 * C6200 +
             C50693 * C6203) *
                C846 +
            (C49718 * C6207 + C50967 * C6210 + C49711 * C6206 +
             C50693 * C6209) *
                C843) *
               C50852 * C15528) *
              C50981 +
          (((C8641 + C8640) * C845 -
            ((C7990 + C7989) * C841 + (C7988 + C7987) * C844) +
            (C8643 + C8642) * C842 - C16608 * C846 - C16609 * C843) *
               C50852 * C15526 +
           ((C8975 + C8976) * C845 -
            ((C8642 + C8643) * C841 + (C8640 + C8641) * C844) +
            (C8977 + C8978) * C842 - (C16618 + C16619) * C846 -
            (C16620 + C16621) * C843) *
               C50852 * C15527 +
           ((C16619 + C16618) * C845 - (C16609 * C841 + C16608 * C844) +
            (C16621 + C16620) * C842 -
            (C49711 * C16603 + C50693 * C16604 + C49718 * C13913 +
             C50967 * C13915) *
                C846 -
            (C49711 * C16605 + C50693 * C16606 + C49718 * C13916 +
             C50967 * C13919) *
                C843) *
               C50852 * C15528) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                   C377 +
               (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                   C50983 -
               (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
                C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
                   C378 -
               (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
                C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
                   C50790) *
                  C50852 * C50878 * C50748 * C250 +
              ((C117 * C381 + C105 * C387 + C118 * C380 + C106 * C386 +
                C119 * C379 + C107 * C385 + C120 * C383 + C108 * C393) *
                   C378 -
               ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
                 C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                    C50983 +
                (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
                 C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                    C377) +
               (C117 * C391 + C105 * C399 + C118 * C390 + C106 * C398 +
                C119 * C389 + C107 * C397 + C120 * C394 + C108 * C401) *
                   C50790) *
                  C50852 * C50878 * C50748 * C251 +
              ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
                C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                   C377 +
               (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
                C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                   C50983 -
               (C120 * C384 + C108 * C395 + C119 * C383 + C107 * C393 +
                C118 * C379 + C106 * C385 + C117 * C380 + C105 * C386) *
                   C378 -
               (C120 * C396 + C108 * C402 + C119 * C394 + C107 * C401 +
                C118 * C389 + C106 * C397 + C117 * C390 + C105 * C398) *
                   C50790) *
                  C50852 * C50878 * C50748 * C252) +
         0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                   C377 +
               (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                   C50983 -
               (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
                C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
                   C378 -
               (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
                C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
                   C50790) *
                  C50852 * C50878 * C501 +
              ((C117 * C711 + C105 * C719 + C118 * C712 + C106 * C720 +
                C119 * C713 + C107 * C721 + C120 * C714 + C108 * C722) *
                   C378 -
               ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
                 C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                    C50983 +
                (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
                 C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                    C377) +
               (C117 * C723 + C105 * C735 + C118 * C724 + C106 * C736 +
                C119 * C725 + C107 * C737 + C120 * C726 + C108 * C738) *
                   C50790) *
                  C50852 * C50878 * C502 +
              ((C117 * C506 + C105 * C511 + C118 * C507 + C106 * C512 +
                C119 * C508 + C107 * C513 + C120 * C509 + C108 * C514) *
                   C377 +
               (C117 * C515 + C105 * C521 + C118 * C516 + C106 * C522 +
                C119 * C517 + C107 * C523 + C120 * C518 + C108 * C524) *
                   C50983 -
               (C120 * C715 + C108 * C727 + C119 * C716 + C107 * C728 +
                C118 * C717 + C106 * C729 + C117 * C718 + C105 * C730) *
                   C378 -
               (C120 * C731 + C108 * C739 + C119 * C732 + C107 * C740 +
                C118 * C733 + C106 * C741 + C117 * C734 + C105 * C742) *
                   C50790) *
                  C50852 * C50878 * C503) *
             C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 + C119 * C124 +
           C107 * C131 + C120 * C125 + C108 * C132) *
              C1051 +
          (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 + C119 * C135 +
           C107 * C145 + C120 * C136 + C108 * C146) *
              C1047 -
          (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 + C118 * C381 +
           C106 * C387 + C117 * C382 + C105 * C388) *
              C1052 -
          (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 + C118 * C391 +
           C106 * C399 + C117 * C392 + C105 * C400) *
              C1048 +
          (C117 * C847 + C105 * C852 + C118 * C848 + C106 * C853 + C119 * C849 +
           C107 * C854 + C120 * C850 + C108 * C855) *
              C1053 +
          (C117 * C856 + C105 * C862 + C118 * C857 + C106 * C863 + C119 * C858 +
           C107 * C864 + C120 * C859 + C108 * C865) *
              C1049 -
          (C120 * C1055 + C108 * C1059 + C119 * C1056 + C107 * C1060 +
           C118 * C1057 + C106 * C1061 + C117 * C1058 + C105 * C1062) *
              C1054 -
          (C120 * C1063 + C108 * C1067 + C119 * C1064 + C107 * C1068 +
           C118 * C1065 + C106 * C1069 + C117 * C1066 + C105 * C1070) *
              C1050) *
         C50852 * C50878 * C50748 * C50716) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C377 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50983 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C378 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C50790) *
               C7787 +
           ((C7987 + C7988) * C377 + (C7989 + C7990) * C50983 -
            (C49711 * C712 + C50693 * C720 + C49718 * C711 + C50967 * C719) *
                C378 -
            (C49711 * C724 + C50693 * C736 + C49718 * C723 + C50967 * C735) *
                C50790) *
               C7788 +
           ((C7991 + C7992) * C377 + (C7993 + C7994) * C50983 -
            (C49711 * C717 + C50693 * C729 + C49718 * C718 + C50967 * C730) *
                C378 -
            (C49711 * C733 + C50693 * C741 + C49718 * C734 + C50967 * C742) *
                C50790) *
               C7789) *
              C50878 * C50748 * C250 +
          (((C49718 * C381 + C50967 * C387 + C49711 * C380 + C50693 * C386) *
                C378 -
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50983 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C377) +
            (C49718 * C391 + C50967 * C399 + C49711 * C390 + C50693 * C398) *
                C50790) *
               C7787 +
           ((C49718 * C712 + C50967 * C720 + C49711 * C713 + C50693 * C721) *
                C378 -
            ((C7998 + C7997) * C50983 + (C7996 + C7995) * C377) +
            (C49718 * C724 + C50967 * C736 + C49711 * C725 + C50693 * C737) *
                C50790) *
               C7788 +
           ((C49718 * C717 + C50967 * C729 + C49711 * C716 + C50693 * C728) *
                C378 -
            ((C8002 + C8001) * C50983 + (C8000 + C7999) * C377) +
            (C49718 * C733 + C50967 * C741 + C49711 * C732 + C50693 * C740) *
                C50790) *
               C7789) *
              C50878 * C50748 * C251 +
          (((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                C377 +
            (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                C50983 -
            (C49711 * C379 + C50693 * C385 + C49718 * C380 + C50967 * C386) *
                C378 -
            (C49711 * C389 + C50693 * C397 + C49718 * C390 + C50967 * C398) *
                C50790) *
               C7787 +
           ((C8003 + C8004) * C377 + (C8005 + C8006) * C50983 -
            (C49711 * C714 + C50693 * C722 + C49718 * C713 + C50967 * C721) *
                C378 -
            (C49711 * C726 + C50693 * C738 + C49718 * C725 + C50967 * C737) *
                C50790) *
               C7788 +
           ((C8007 + C8008) * C377 + (C8009 + C8010) * C50983 -
            (C49711 * C715 + C50693 * C727 + C49718 * C716 + C50967 * C728) *
                C378 -
            (C49711 * C731 + C50693 * C739 + C49718 * C732 + C50967 * C740) *
                C50790) *
               C7789) *
              C50878 * C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C377 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50983 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C378 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C50790) *
               C7787 +
           ((C7987 + C7988) * C377 + (C7989 + C7990) * C50983 -
            (C8640 + C8641) * C378 - (C8642 + C8643) * C50790) *
               C7788 +
           C8658 * C7789) *
              C50878 * C501 +
          (((C8641 + C8640) * C378 -
            ((C7990 + C7989) * C50983 + (C7988 + C7987) * C377) +
            (C8643 + C8642) * C50790) *
               C7787 +
           ((C8646 + C8645) * C378 -
            ((C7994 + C7993) * C50983 + (C7992 + C7991) * C377) +
            (C8648 + C8647) * C50790) *
               C7788 +
           ((C8649 + C8650) * C378 - (C8443 * C50983 + C8444 * C377) +
            (C8651 + C8652) * C50790) *
               C7789) *
              C50878 * C502 +
          (C8658 * C7787 +
           ((C8328 + C8327) * C377 + (C8326 + C8325) * C50983 -
            (C8650 + C8649) * C378 - (C8652 + C8651) * C50790) *
               C7788 +
           ((C8455 + C8456) * C377 + (C8457 + C8458) * C50983 -
            (C49711 * C8605 + C50693 * C8607 + C49718 * C8606 +
             C50967 * C8608) *
                C378 -
            (C49711 * C8609 + C50693 * C8611 + C49718 * C8610 +
             C50967 * C8612) *
                C50790) *
               C7789) *
              C50878 * C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
               C1051 +
           (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
               C1047 -
           (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
               C1052 -
           (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
               C1048 +
           (C49718 * C847 + C50967 * C852 + C49711 * C848 + C50693 * C853) *
               C1053 +
           (C49718 * C856 + C50967 * C862 + C49711 * C857 + C50693 * C863) *
               C1049 -
           (C49711 * C1057 + C50693 * C1061 + C49718 * C1058 + C50967 * C1062) *
               C1054 -
           (C49711 * C1065 + C50693 * C1069 + C49718 * C1066 + C50967 * C1070) *
               C1050) *
              C7787 +
          ((C7987 + C7988) * C1051 + (C7989 + C7990) * C1047 -
           (C8640 + C8641) * C1052 - (C8642 + C8643) * C1048 +
           (C8975 + C8976) * C1053 + (C8977 + C8978) * C1049 -
           (C49711 * C3450 + C50693 * C3453 + C49718 * C3451 + C50967 * C3454) *
               C1054 -
           (C49711 * C3456 + C50693 * C3459 + C49718 * C3457 + C50967 * C3460) *
               C1050) *
              C7788 +
          (C8303 * C1051 + C8304 * C1047 - C8653 * C1052 - C8654 * C1048 +
           (C8979 + C8980) * C1053 + (C8981 + C8982) * C1049 -
           (C49711 * C9080 + C50693 * C9082 + C49718 * C9081 + C50967 * C9083) *
               C1054 -
           (C49711 * C9084 + C50693 * C9086 + C49718 * C9085 + C50967 * C9087) *
               C1050) *
              C7789) *
         C50878 * C50748 * C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C377 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50983 -
            (C15870 + C15871) * C378 - (C15872 + C15873) * C50790) *
               C50852 * C15526 +
           ((C15871 + C15870) * C377 + (C15873 + C15872) * C50983 -
            (C15874 + C15875) * C378 - (C15876 + C15877) * C50790) *
               C50852 * C15527 +
           ((C15875 + C15874) * C377 + (C15877 + C15876) * C50983 -
            (C49711 * C1057 + C50693 * C1061 + C49718 * C1058 +
             C50967 * C1062) *
                C378 -
            (C49711 * C1065 + C50693 * C1069 + C49718 * C1066 +
             C50967 * C1070) *
                C50790) *
               C50852 * C15528) *
              C50748 * C250 +
          (((C15878 + C15879) * C378 -
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50983 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C377) +
            (C15880 + C15881) * C50790) *
               C50852 * C15526 +
           ((C15882 + C15883) * C378 -
            ((C15881 + C15880) * C50983 + (C15879 + C15878) * C377) +
            (C15884 + C15885) * C50790) *
               C50852 * C15527 +
           ((C49718 * C1057 + C50967 * C1061 + C49711 * C1056 +
             C50693 * C1060) *
                C378 -
            ((C15885 + C15884) * C50983 + (C15883 + C15882) * C377) +
            (C49718 * C1065 + C50967 * C1069 + C49711 * C1064 +
             C50693 * C1068) *
                C50790) *
               C50852 * C15528) *
              C50748 * C251 +
          (((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                C377 +
            (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                C50983 -
            (C15886 + C15887) * C378 - (C15888 + C15889) * C50790) *
               C50852 * C15526 +
           ((C15887 + C15886) * C377 + (C15889 + C15888) * C50983 -
            (C15890 + C15891) * C378 - (C15892 + C15893) * C50790) *
               C50852 * C15527 +
           ((C15891 + C15890) * C377 + (C15893 + C15892) * C50983 -
            (C49711 * C1055 + C50693 * C1059 + C49718 * C1056 +
             C50967 * C1060) *
                C378 -
            (C49711 * C1063 + C50693 * C1067 + C49718 * C1064 +
             C50967 * C1068) *
                C50790) *
               C50852 * C15528) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C377 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50983 -
            (C15870 + C15871) * C378 - (C15872 + C15873) * C50790) *
               C50852 * C15526 +
           ((C15871 + C15870) * C377 + (C15873 + C15872) * C50983 -
            (C15874 + C15875) * C378 - (C15876 + C15877) * C50790) *
               C50852 * C15527 +
           ((C15875 + C15874) * C377 + (C15877 + C15876) * C50983 -
            (C49711 * C1057 + C50693 * C1061 + C49718 * C1058 +
             C50967 * C1062) *
                C378 -
            (C49711 * C1065 + C50693 * C1069 + C49718 * C1066 +
             C50967 * C1070) *
                C50790) *
               C50852 * C15528) *
              C501 +
          (((C8641 + C8640) * C378 -
            ((C7990 + C7989) * C50983 + (C7988 + C7987) * C377) +
            (C8643 + C8642) * C50790) *
               C50852 * C15526 +
           ((C8975 + C8976) * C378 -
            ((C8642 + C8643) * C50983 + (C8640 + C8641) * C377) +
            (C8977 + C8978) * C50790) *
               C50852 * C15527 +
           ((C49718 * C3451 + C50967 * C3454 + C49711 * C3450 +
             C50693 * C3453) *
                C378 -
            ((C8978 + C8977) * C50983 + (C8976 + C8975) * C377) +
            (C49718 * C3457 + C50967 * C3460 + C49711 * C3456 +
             C50693 * C3459) *
                C50790) *
               C50852 * C15528) *
              C502 +
          (C8658 * C50852 * C15526 +
           ((C8646 + C8645) * C377 + (C8648 + C8647) * C50983 -
            (C8980 + C8979) * C378 - (C8982 + C8981) * C50790) *
               C50852 * C15527 +
           ((C8979 + C8980) * C377 + (C8981 + C8982) * C50983 -
            (C49711 * C9080 + C50693 * C9082 + C49718 * C9081 +
             C50967 * C9083) *
                C378 -
            (C49711 * C9084 + C50693 * C9086 + C49718 * C9085 +
             C50967 * C9087) *
                C50790) *
               C50852 * C15528) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
               C1051 +
           (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
               C1047 -
           (C15870 + C15871) * C1052 - (C15872 + C15873) * C1048 +
           C16430 * C1053 + C16431 * C1049 - C16728 * C1054 - C16729 * C1050) *
              C50852 * C15526 +
          ((C15871 + C15870) * C1051 + (C15873 + C15872) * C1047 -
           (C15874 + C15875) * C1052 - (C15876 + C15877) * C1048 +
           (C16450 + C16451) * C1053 + (C16452 + C16453) * C1049 -
           (C16738 + C16739) * C1054 - (C16740 + C16741) * C1050) *
              C50852 * C15527 +
          (C16430 * C1051 + C16431 * C1047 - C16728 * C1052 - C16729 * C1048 +
           (C16739 + C16738) * C1053 + (C16741 + C16740) * C1049 -
           (C49711 * C16719 + C50693 * C16721 + C49718 * C16720 +
            C50967 * C16722) *
               C1054 -
           (C49711 * C16723 + C50693 * C16725 + C49718 * C16724 +
            C50967 * C16726) *
               C1050) *
              C50852 * C15528) *
         C50748 * C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C1511 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C1509 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C1512 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C50790) *
               C7787 +
           ((C7987 + C7988) * C1511 + (C7989 + C7990) * C1509 -
            (C8640 + C8641) * C1512 - (C8642 + C8643) * C50790) *
               C7788 +
           (C8303 * C1511 + C8304 * C1509 - C8653 * C1512 - C8654 * C50790) *
               C7789) *
              C50878 * C50748 * C51026 +
          (((C49718 * C381 + C50967 * C387 + C49711 * C380 + C50693 * C386) *
                C1512 -
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C1509 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C1511) +
            (C49718 * C391 + C50967 * C399 + C49711 * C390 + C50693 * C398) *
                C50790) *
               C7787 +
           ((C9591 + C9592) * C1512 -
            ((C7998 + C7997) * C1509 + (C7996 + C7995) * C1511) +
            (C9593 + C9594) * C50790) *
               C7788 +
           ((C9595 + C9596) * C1512 - (C8321 * C1509 + C8322 * C1511) +
            (C9597 + C9598) * C50790) *
               C7789) *
              C50878 * C50748 * C51012 +
          (((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                C1511 +
            (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                C1509 -
            (C49711 * C379 + C50693 * C385 + C49718 * C380 + C50967 * C386) *
                C1512 -
            (C49711 * C389 + C50693 * C397 + C49718 * C390 + C50967 * C398) *
                C50790) *
               C7787 +
           ((C8003 + C8004) * C1511 + (C8005 + C8006) * C1509 -
            (C49711 * C714 + C50693 * C722 + C49718 * C713 + C50967 * C721) *
                C1512 -
            (C49711 * C726 + C50693 * C738 + C49718 * C725 + C50967 * C737) *
                C50790) *
               C7788 +
           ((C8007 + C8008) * C1511 + (C8009 + C8010) * C1509 -
            (C49711 * C715 + C50693 * C727 + C49718 * C716 + C50967 * C728) *
                C1512 -
            (C49711 * C731 + C50693 * C739 + C49718 * C732 + C50967 * C740) *
                C50790) *
               C7789) *
              C50878 * C50748 * C1173)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1511 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C1509 -
           (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
            C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
               C1512 -
           (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
            C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
               C50790) *
              C50852 * C50878 * C50748 * C51026 +
          ((C117 * C381 + C105 * C387 + C118 * C380 + C106 * C386 +
            C119 * C379 + C107 * C385 + C120 * C383 + C108 * C393) *
               C1512 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C1509 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C1511) +
           (C117 * C391 + C105 * C399 + C118 * C390 + C106 * C398 +
            C119 * C389 + C107 * C397 + C120 * C394 + C108 * C401) *
               C50790) *
              C50852 * C50878 * C50748 * C51012 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C1511 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C1509 -
           (C120 * C384 + C108 * C395 + C119 * C383 + C107 * C393 +
            C118 * C379 + C106 * C385 + C117 * C380 + C105 * C386) *
               C1512 -
           (C120 * C396 + C108 * C402 + C119 * C394 + C107 * C401 +
            C118 * C389 + C106 * C397 + C117 * C390 + C105 * C398) *
               C50790) *
              C50852 * C50878 * C50748 * C1173)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C1511 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C1509 -
            (C15870 + C15871) * C1512 - (C15872 + C15873) * C50790) *
               C50852 * C15526 +
           ((C15871 + C15870) * C1511 + (C15873 + C15872) * C1509 -
            (C15874 + C15875) * C1512 - (C15876 + C15877) * C50790) *
               C50852 * C15527 +
           (C16430 * C1511 + C16431 * C1509 - C16728 * C1512 -
            C16729 * C50790) *
               C50852 * C15528) *
              C50748 * C51026 +
          (((C15878 + C15879) * C1512 -
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C1509 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C1511) +
            (C15880 + C15881) * C50790) *
               C50852 * C15526 +
           ((C15882 + C15883) * C1512 -
            ((C15881 + C15880) * C1509 + (C15879 + C15878) * C1511) +
            (C15884 + C15885) * C50790) *
               C50852 * C15527 +
           ((C16455 + C16454) * C1512 - (C16441 * C1509 + C16440 * C1511) +
            (C16457 + C16456) * C50790) *
               C50852 * C15528) *
              C50748 * C51012 +
          (((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                C1511 +
            (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                C1509 -
            (C15886 + C15887) * C1512 - (C15888 + C15889) * C50790) *
               C50852 * C15526 +
           ((C15887 + C15886) * C1511 + (C15889 + C15888) * C1509 -
            (C15890 + C15891) * C1512 - (C15892 + C15893) * C50790) *
               C50852 * C15527 +
           ((C15891 + C15890) * C1511 + (C15893 + C15892) * C1509 -
            (C49711 * C1055 + C50693 * C1059 + C49718 * C1056 +
             C50967 * C1060) *
                C1512 -
            (C49711 * C1063 + C50693 * C1067 + C49718 * C1064 +
             C50967 * C1068) *
                C50790) *
               C50852 * C15528) *
              C50748 * C1173)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C1511 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C1509 -
             (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                 C1512 -
             (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                 C50790) *
                C7787 +
            ((C7987 + C7988) * C1511 + (C7989 + C7990) * C1509 -
             (C8640 + C8641) * C1512 - (C8642 + C8643) * C50790) *
                C7788 +
            (C8303 * C1511 + C8304 * C1509 - C8653 * C1512 - C8654 * C50790) *
                C7789) *
               C50878 * C50981 +
           (((C8641 + C8640) * C1512 -
             ((C7990 + C7989) * C1509 + (C7988 + C7987) * C1511) +
             (C8643 + C8642) * C50790) *
                C7787 +
            ((C8646 + C8645) * C1512 -
             ((C7994 + C7993) * C1509 + (C7992 + C7991) * C1511) +
             (C8648 + C8647) * C50790) *
                C7788 +
            ((C8649 + C8650) * C1512 - (C8443 * C1509 + C8444 * C1511) +
             (C8651 + C8652) * C50790) *
                C7789) *
               C50878 * C50764) *
              C1275 +
          ((((C49718 * C381 + C50967 * C387 + C49711 * C380 + C50693 * C386) *
                 C1512 -
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C1509 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C1511) +
             (C49718 * C391 + C50967 * C399 + C49711 * C390 + C50693 * C398) *
                 C50790) *
                C7787 +
            ((C9591 + C9592) * C1512 -
             ((C7998 + C7997) * C1509 + (C7996 + C7995) * C1511) +
             (C9593 + C9594) * C50790) *
                C7788 +
            ((C9595 + C9596) * C1512 - (C8321 * C1509 + C8322 * C1511) +
             (C9597 + C9598) * C50790) *
                C7789) *
               C50878 * C50981 +
           (((C7995 + C7996) * C1511 + (C7997 + C7998) * C1509 -
             (C9592 + C9591) * C1512 - (C9594 + C9593) * C50790) *
                C7787 +
            ((C7999 + C8000) * C1511 + (C8001 + C8002) * C1509 -
             (C9596 + C9595) * C1512 - (C9598 + C9597) * C50790) *
                C7788 +
            ((C8329 + C8330) * C1511 + (C8331 + C8332) * C1509 -
             (C49711 * C2981 + C50693 * C2984 + C49718 * C2982 +
              C50967 * C2985) *
                 C1512 -
             (C49711 * C2987 + C50693 * C2990 + C49718 * C2988 +
              C50967 * C2991) *
                 C50790) *
                C7789) *
               C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C1511 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C1509 -
            (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
             C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
                C1512 -
            (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
             C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
                C50790) *
               C50852 * C50878 * C50981 +
           ((C117 * C711 + C105 * C719 + C118 * C712 + C106 * C720 +
             C119 * C713 + C107 * C721 + C120 * C714 + C108 * C722) *
                C1512 -
            ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
              C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                 C1509 +
             (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
              C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                 C1511) +
            (C117 * C723 + C105 * C735 + C118 * C724 + C106 * C736 +
             C119 * C725 + C107 * C737 + C120 * C726 + C108 * C738) *
                C50790) *
               C50852 * C50878 * C50764) *
              C1275 +
          (((C117 * C381 + C105 * C387 + C118 * C380 + C106 * C386 +
             C119 * C379 + C107 * C385 + C120 * C383 + C108 * C393) *
                C1512 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C1509 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C1511) +
            (C117 * C391 + C105 * C399 + C118 * C390 + C106 * C398 +
             C119 * C389 + C107 * C397 + C120 * C394 + C108 * C401) *
                C50790) *
               C50852 * C50878 * C50981 +
           ((C117 * C255 + C105 * C265 + C118 * C254 + C106 * C264 +
             C119 * C253 + C107 * C263 + C120 * C257 + C108 * C267) *
                C1511 +
            (C117 * C261 + C105 * C273 + C118 * C260 + C106 * C272 +
             C119 * C259 + C107 * C271 + C120 * C268 + C108 * C275) *
                C1509 -
            (C120 * C1407 + C108 * C1408 + C119 * C714 + C107 * C722 +
             C118 * C713 + C106 * C721 + C117 * C712 + C105 * C720) *
                C1512 -
            (C120 * C1409 + C108 * C1410 + C119 * C726 + C107 * C738 +
             C118 * C725 + C106 * C737 + C117 * C724 + C105 * C736) *
                C50790) *
               C50852 * C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C1511 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C1509 -
             (C15870 + C15871) * C1512 - (C15872 + C15873) * C50790) *
                C50852 * C15526 +
            ((C15871 + C15870) * C1511 + (C15873 + C15872) * C1509 -
             (C15874 + C15875) * C1512 - (C15876 + C15877) * C50790) *
                C50852 * C15527 +
            (C16430 * C1511 + C16431 * C1509 - C16728 * C1512 -
             C16729 * C50790) *
                C50852 * C15528) *
               C50981 +
           (((C8641 + C8640) * C1512 -
             ((C7990 + C7989) * C1509 + (C7988 + C7987) * C1511) +
             (C8643 + C8642) * C50790) *
                C50852 * C15526 +
            ((C8975 + C8976) * C1512 -
             ((C8642 + C8643) * C1509 + (C8640 + C8641) * C1511) +
             (C8977 + C8978) * C50790) *
                C50852 * C15527 +
            ((C16619 + C16618) * C1512 - (C16609 * C1509 + C16608 * C1511) +
             (C16621 + C16620) * C50790) *
                C50852 * C15528) *
               C50764) *
              C1275 +
          ((((C15878 + C15879) * C1512 -
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C1509 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C1511) +
             (C15880 + C15881) * C50790) *
                C50852 * C15526 +
            ((C15882 + C15883) * C1512 -
             ((C15881 + C15880) * C1509 + (C15879 + C15878) * C1511) +
             (C15884 + C15885) * C50790) *
                C50852 * C15527 +
            ((C16455 + C16454) * C1512 - (C16441 * C1509 + C16440 * C1511) +
             (C16457 + C16456) * C50790) *
                C50852 * C15528) *
               C50981 +
           (((C7995 + C7996) * C1511 + (C7997 + C7998) * C1509 -
             (C9592 + C9591) * C1512 - (C9594 + C9593) * C50790) *
                C50852 * C15526 +
            ((C9591 + C9592) * C1511 + (C9593 + C9594) * C1509 -
             (C17236 + C17237) * C1512 - (C17238 + C17239) * C50790) *
                C50852 * C15527 +
            ((C17237 + C17236) * C1511 + (C17239 + C17238) * C1509 -
             (C49711 * C3449 + C50693 * C3452 + C49718 * C3450 +
              C50967 * C3453) *
                 C1512 -
             (C49711 * C3455 + C50693 * C3458 + C49718 * C3456 +
              C50967 * C3459) *
                 C50790) *
                C50852 * C15528) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C1744 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C51028 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C1745 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C51018 +
            (C49718 * C847 + C50967 * C852 + C49711 * C848 + C50693 * C853) *
                C1746 +
            (C49718 * C856 + C50967 * C862 + C49711 * C857 + C50693 * C863) *
                C1743) *
               C7787 +
           ((C7987 + C7988) * C1744 + (C7989 + C7990) * C51028 -
            (C8640 + C8641) * C1745 - (C8642 + C8643) * C51018 +
            (C8975 + C8976) * C1746 + (C8977 + C8978) * C1743) *
               C7788 +
           (C8303 * C1744 + C8304 * C51028 - C8653 * C1745 - C8654 * C51018 +
            (C8979 + C8980) * C1746 + (C8981 + C8982) * C1743) *
               C7789) *
              C50878 * C50748 * C1275 +
          (((C49718 * C381 + C50967 * C387 + C49711 * C380 + C50693 * C386) *
                C1745 -
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C51028 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C1744) +
            (C49718 * C391 + C50967 * C399 + C49711 * C390 + C50693 * C398) *
                C51018 -
            (C49711 * C849 + C50693 * C854 + C49718 * C848 + C50967 * C853) *
                C1746 -
            (C49711 * C858 + C50693 * C864 + C49718 * C857 + C50967 * C863) *
                C1743) *
               C7787 +
           ((C9591 + C9592) * C1745 -
            ((C7998 + C7997) * C51028 + (C7996 + C7995) * C1744) +
            (C9593 + C9594) * C51018 -
            (C49711 * C966 + C50693 * C970 + C49718 * C967 + C50967 * C971) *
                C1746 -
            (C49711 * C974 + C50693 * C978 + C49718 * C975 + C50967 * C979) *
                C1743) *
               C7788 +
           ((C9595 + C9596) * C1745 - (C8321 * C51028 + C8322 * C1744) +
            (C9597 + C9598) * C51018 -
            (C49711 * C3321 + C50693 * C3324 + C49718 * C3322 +
             C50967 * C3325) *
                C1746 -
            (C49711 * C3327 + C50693 * C3330 + C49718 * C3328 +
             C50967 * C3331) *
                C1743) *
               C7789) *
              C50878 * C50748 * C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1744 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C51028 -
           (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
            C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
               C1745 -
           (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
            C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
               C51018 +
           (C117 * C847 + C105 * C852 + C118 * C848 + C106 * C853 +
            C119 * C849 + C107 * C854 + C120 * C850 + C108 * C855) *
               C1746 +
           (C117 * C856 + C105 * C862 + C118 * C857 + C106 * C863 +
            C119 * C858 + C107 * C864 + C120 * C859 + C108 * C865) *
               C1743) *
              C50852 * C50878 * C50748 * C1275 +
          ((C117 * C381 + C105 * C387 + C118 * C380 + C106 * C386 +
            C119 * C379 + C107 * C385 + C120 * C383 + C108 * C393) *
               C1745 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C51028 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C1744) +
           (C117 * C391 + C105 * C399 + C118 * C390 + C106 * C398 +
            C119 * C389 + C107 * C397 + C120 * C394 + C108 * C401) *
               C51018 -
           (C120 * C851 + C108 * C860 + C119 * C850 + C107 * C855 +
            C118 * C849 + C106 * C854 + C117 * C848 + C105 * C853) *
               C1746 -
           (C120 * C861 + C108 * C866 + C119 * C859 + C107 * C865 +
            C118 * C858 + C106 * C864 + C117 * C857 + C105 * C863) *
               C1743) *
              C50852 * C50878 * C50748 * C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C1744 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C51028 -
            (C15870 + C15871) * C1745 - (C15872 + C15873) * C51018 +
            C16430 * C1746 + C16431 * C1743) *
               C50852 * C15526 +
           ((C15871 + C15870) * C1744 + (C15873 + C15872) * C51028 -
            (C15874 + C15875) * C1745 - (C15876 + C15877) * C51018 +
            (C16450 + C16451) * C1746 + (C16452 + C16453) * C1743) *
               C50852 * C15527 +
           (C16430 * C1744 + C16431 * C51028 - C16728 * C1745 -
            C16729 * C51018 + (C16739 + C16738) * C1746 +
            (C16741 + C16740) * C1743) *
               C50852 * C15528) *
              C50748 * C1275 +
          (((C15878 + C15879) * C1745 -
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C51028 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C1744) +
            (C15880 + C15881) * C51018 - C16440 * C1746 - C16441 * C1743) *
               C50852 * C15526 +
           ((C15882 + C15883) * C1745 -
            ((C15881 + C15880) * C51028 + (C15879 + C15878) * C1744) +
            (C15884 + C15885) * C51018 - (C16454 + C16455) * C1746 -
            (C16456 + C16457) * C1743) *
               C50852 * C15527 +
           ((C16455 + C16454) * C1745 - (C16441 * C51028 + C16440 * C1744) +
            (C16457 + C16456) * C51018 -
            (C49711 * C6199 + C50693 * C6202 + C49718 * C6200 +
             C50967 * C6203) *
                C1746 -
            (C49711 * C6205 + C50693 * C6208 + C49718 * C6206 +
             C50967 * C6209) *
                C1743) *
               C50852 * C15528) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50778) *
               C50852 * C50878 * C501 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C50778 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C121) *
               C50852 * C50878 * C502 +
           ((C117 * C506 + C105 * C511 + C118 * C507 + C106 * C512 +
             C119 * C508 + C107 * C513 + C120 * C509 + C108 * C514) *
                C121 +
            (C117 * C515 + C105 * C521 + C118 * C516 + C106 * C522 +
             C119 * C517 + C107 * C523 + C120 * C518 + C108 * C524) *
                C50778) *
               C50852 * C50878 * C503) *
              C50974 +
          (((C117 * C255 + C105 * C265 + C118 * C254 + C106 * C264 +
             C119 * C253 + C107 * C263 + C120 * C257 + C108 * C267) *
                C121 +
            (C117 * C261 + C105 * C273 + C118 * C260 + C106 * C272 +
             C119 * C259 + C107 * C271 + C120 * C268 + C108 * C275) *
                C50778) *
               C50852 * C50878 * C502 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50778 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50852 * C50878 * C501 -
           ((C120 * C519 + C108 * C525 + C119 * C518 + C107 * C524 +
             C118 * C517 + C106 * C523 + C117 * C516 + C105 * C522) *
                C50778 +
            (C120 * C510 + C108 * C520 + C119 * C509 + C107 * C514 +
             C118 * C508 + C106 * C513 + C117 * C507 + C105 * C512) *
                C121) *
               C50852 * C50878 * C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50778) *
              C50852 * C50878 * C50748 * C113 -
          ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
            C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
               C50778 +
           (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
            C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
               C121) *
              C50852 * C50878 * C50748 * C114 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C121 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50778) *
              C50852 * C50878 * C50748 * C115 -
          ((C120 * C141 + C108 * C149 + C119 * C140 + C107 * C148 +
            C118 * C137 + C106 * C147 + C117 * C136 + C105 * C146) *
               C50778 +
           (C120 * C128 + C108 * C142 + C119 * C127 + C107 * C139 +
            C118 * C126 + C106 * C138 + C117 * C125 + C105 * C132) *
               C121) *
              C50852 * C50878 * C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C121 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50778) *
               C7787 +
           ((C49718 * C256 + C50967 * C266 + C49711 * C255 + C50693 * C265) *
                C121 +
            (C49718 * C262 + C50967 * C274 + C49711 * C261 + C50693 * C273) *
                C50778) *
               C7788 +
           ((C49718 * C506 + C50967 * C511 + C49711 * C507 + C50693 * C512) *
                C121 +
            (C49718 * C515 + C50967 * C521 + C49711 * C516 + C50693 * C522) *
                C50778) *
               C7789) *
              C50878 * C50748 * C113 -
          (((C49711 * C517 + C50693 * C523 + C49718 * C516 + C50967 * C522) *
                C50778 +
            (C49711 * C508 + C50693 * C513 + C49718 * C507 + C50967 * C512) *
                C121) *
               C7789 +
           ((C49711 * C260 + C50693 * C272 + C49718 * C261 + C50967 * C273) *
                C50778 +
            (C49711 * C254 + C50693 * C264 + C49718 * C255 + C50967 * C265) *
                C121) *
               C7788 +
           ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                C50778 +
            (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                C121) *
               C7787) *
              C50878 * C50748 * C114 +
          (((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                C121 +
            (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                C50778) *
               C7787 +
           ((C49718 * C254 + C50967 * C264 + C49711 * C253 + C50693 * C263) *
                C121 +
            (C49718 * C260 + C50967 * C272 + C49711 * C259 + C50693 * C271) *
                C50778) *
               C7788 +
           ((C49718 * C508 + C50967 * C513 + C49711 * C509 + C50693 * C514) *
                C121 +
            (C49718 * C517 + C50967 * C523 + C49711 * C518 + C50693 * C524) *
                C50778) *
               C7789) *
              C50878 * C50748 * C115 -
          (((C49711 * C519 + C50693 * C525 + C49718 * C518 + C50967 * C524) *
                C50778 +
            (C49711 * C510 + C50693 * C520 + C49718 * C509 + C50967 * C514) *
                C121) *
               C7789 +
           ((C49711 * C268 + C50693 * C275 + C49718 * C259 + C50967 * C271) *
                C50778 +
            (C49711 * C257 + C50693 * C267 + C49718 * C253 + C50967 * C263) *
                C121) *
               C7788 +
           ((C49711 * C137 + C50693 * C147 + C49718 * C136 + C50967 * C146) *
                C50778 +
            (C49711 * C126 + C50693 * C138 + C49718 * C125 + C50967 * C132) *
                C121) *
               C7787) *
              C50878 * C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C7787 +
            ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C7788 +
            C8335 * C7789) *
               C50878 * C501 -
           (((C8325 + C8326) * C50778 + (C8327 + C8328) * C121) * C7789 +
            ((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C7788 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C7787) *
               C50878 * C502 +
           (C8335 * C7787 +
            ((C8328 + C8327) * C121 + (C8326 + C8325) * C50778) * C7788 +
            ((C49718 * C2807 + C50967 * C2813 + C49711 * C2806 +
              C50693 * C2812) *
                 C121 +
             (C49718 * C2810 + C50967 * C2816 + C49711 * C2809 +
              C50693 * C2815) *
                 C50778) *
                C7789) *
               C50878 * C503) *
              C50974 +
          ((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C7787 +
            ((C7999 + C8000) * C121 + (C8001 + C8002) * C50778) * C7788 +
            ((C8329 + C8330) * C121 + (C8331 + C8332) * C50778) * C7789) *
               C50878 * C502 -
           (C8336 * C7789 +
            ((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C7788 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C7787) *
               C50878 * C501 -
           (((C49711 * C2808 + C50693 * C2814 + C49718 * C2809 +
              C50967 * C2815) *
                 C50778 +
             (C49711 * C2805 + C50693 * C2811 + C49718 * C2806 +
              C50967 * C2812) *
                 C121) *
                C7789 +
            ((C8332 + C8331) * C50778 + (C8330 + C8329) * C121) * C7788 +
            C8336 * C7787) *
               C50878 * C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C121 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50778) *
               C50852 * C15526 +
           ((C49718 * C382 + C50967 * C388 + C49711 * C381 + C50693 * C387) *
                C121 +
            (C49718 * C392 + C50967 * C400 + C49711 * C391 + C50693 * C399) *
                C50778) *
               C50852 * C15527 +
           ((C49718 * C847 + C50967 * C852 + C49711 * C848 + C50693 * C853) *
                C121 +
            (C49718 * C856 + C50967 * C862 + C49711 * C857 + C50693 * C863) *
                C50778) *
               C50852 * C15528) *
              C50748 * C113 -
          (((C49711 * C858 + C50693 * C864 + C49718 * C857 + C50967 * C863) *
                C50778 +
            (C49711 * C849 + C50693 * C854 + C49718 * C848 + C50967 * C853) *
                C121) *
               C50852 * C15528 +
           ((C49711 * C390 + C50693 * C398 + C49718 * C391 + C50967 * C399) *
                C50778 +
            (C49711 * C380 + C50693 * C386 + C49718 * C381 + C50967 * C387) *
                C121) *
               C50852 * C15527 +
           ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                C50778 +
            (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                C121) *
               C50852 * C15526) *
              C50748 * C114 +
          (((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                C121 +
            (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                C50778) *
               C50852 * C15526 +
           ((C49718 * C380 + C50967 * C386 + C49711 * C379 + C50693 * C385) *
                C121 +
            (C49718 * C390 + C50967 * C398 + C49711 * C389 + C50693 * C397) *
                C50778) *
               C50852 * C15527 +
           ((C49718 * C849 + C50967 * C854 + C49711 * C850 + C50693 * C855) *
                C121 +
            (C49718 * C858 + C50967 * C864 + C49711 * C859 + C50693 * C865) *
                C50778) *
               C50852 * C15528) *
              C50748 * C115 -
          (((C49711 * C861 + C50693 * C866 + C49718 * C859 + C50967 * C865) *
                C50778 +
            (C49711 * C851 + C50693 * C860 + C49718 * C850 + C50967 * C855) *
                C121) *
               C50852 * C15528 +
           ((C49711 * C394 + C50693 * C401 + C49718 * C389 + C50967 * C397) *
                C50778 +
            (C49711 * C383 + C50693 * C393 + C49718 * C379 + C50967 * C385) *
                C121) *
               C50852 * C15527 +
           ((C49711 * C137 + C50693 * C147 + C49718 * C136 + C50967 * C146) *
                C50778 +
            (C49711 * C126 + C50693 * C138 + C49718 * C125 + C50967 * C132) *
                C121) *
               C50852 * C15526) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C50852 * C15526 +
            ((C15871 + C15870) * C121 + (C15873 + C15872) * C50778) * C50852 *
                C15527 +
            ((C15875 + C15874) * C121 + (C15877 + C15876) * C50778) * C50852 *
                C15528) *
               C501 -
           (((C8978 + C8977) * C50778 + (C8976 + C8975) * C121) * C50852 *
                C15528 +
            ((C8642 + C8643) * C50778 + (C8640 + C8641) * C121) * C50852 *
                C15527 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C50852 *
                C15526) *
               C502 +
           (C8335 * C50852 * C15526 +
            ((C8646 + C8645) * C121 + (C8648 + C8647) * C50778) * C50852 *
                C15527 +
            ((C8979 + C8980) * C121 + (C8981 + C8982) * C50778) * C50852 *
                C15528) *
               C503) *
              C50974 +
          ((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C50852 *
                C15526 +
            ((C9591 + C9592) * C121 + (C9593 + C9594) * C50778) * C50852 *
                C15527 +
            ((C49718 * C967 + C50967 * C971 + C49711 * C966 + C50693 * C970) *
                 C121 +
             (C49718 * C975 + C50967 * C979 + C49711 * C974 + C50693 * C978) *
                 C50778) *
                C50852 * C15528) *
               C502 -
           (((C15885 + C15884) * C50778 + (C15883 + C15882) * C121) * C50852 *
                C15528 +
            ((C15881 + C15880) * C50778 + (C15879 + C15878) * C121) * C50852 *
                C15527 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C50852 * C15526) *
               C501 -
           (((C49711 * C3327 + C50693 * C3330 + C49718 * C3328 +
              C50967 * C3331) *
                 C50778 +
             (C49711 * C3321 + C50693 * C3324 + C49718 * C3322 +
              C50967 * C3325) *
                 C121) *
                C50852 * C15528 +
            ((C9598 + C9597) * C50778 + (C9596 + C9595) * C121) * C50852 *
                C15527 +
            C8336 * C50852 * C15526) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50778) *
              C50852 * C50878 * C592 -
          ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
            C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
               C50778 +
           (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
            C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
               C121) *
              C50852 * C50878 * C593 +
          ((C117 * C506 + C105 * C511 + C118 * C507 + C106 * C512 +
            C119 * C508 + C107 * C513 + C120 * C509 + C108 * C514) *
               C121 +
           (C117 * C515 + C105 * C521 + C118 * C516 + C106 * C522 +
            C119 * C517 + C107 * C523 + C120 * C518 + C108 * C524) *
               C50778) *
              C50852 * C50878 * C594 -
          ((C120 * C601 + C108 * C609 + C119 * C602 + C107 * C610 +
            C118 * C603 + C106 * C611 + C117 * C604 + C105 * C612) *
               C50778 +
           (C120 * C597 + C108 * C605 + C119 * C598 + C107 * C606 +
            C118 * C599 + C106 * C607 + C117 * C600 + C105 * C608) *
               C121) *
              C50852 * C50878 * C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50778) *
               C50852 * C50878 * C50981 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C50778 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C121) *
               C50852 * C50878 * C50764) *
              C250 +
          (((C117 * C255 + C105 * C265 + C118 * C254 + C106 * C264 +
             C119 * C253 + C107 * C263 + C120 * C257 + C108 * C267) *
                C121 +
            (C117 * C261 + C105 * C273 + C118 * C260 + C106 * C272 +
             C119 * C259 + C107 * C271 + C120 * C268 + C108 * C275) *
                C50778) *
               C50852 * C50878 * C50764 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50778 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50852 * C50878 * C50981) *
              C251 +
          (((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50778) *
               C50852 * C50878 * C50981 -
           ((C120 * C269 + C108 * C276 + C119 * C268 + C107 * C275 +
             C118 * C259 + C106 * C271 + C117 * C260 + C105 * C272) *
                C50778 +
            (C120 * C258 + C108 * C270 + C119 * C257 + C107 * C267 +
             C118 * C253 + C106 * C263 + C117 * C254 + C105 * C264) *
                C121) *
               C50852 * C50878 * C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C7787 +
            ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C7788 +
            ((C7991 + C7992) * C121 + (C7993 + C7994) * C50778) * C7789) *
               C50878 * C50981 -
           (((C49711 * C603 + C50693 * C611 + C49718 * C604 + C50967 * C612) *
                 C50778 +
             (C49711 * C599 + C50693 * C607 + C49718 * C600 + C50967 * C608) *
                 C121) *
                C7789 +
            ((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C7788 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C7787) *
               C50878 * C50764) *
              C250 +
          ((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C7787 +
            ((C7999 + C8000) * C121 + (C8001 + C8002) * C50778) * C7788 +
            ((C49718 * C599 + C50967 * C607 + C49711 * C598 + C50693 * C606) *
                 C121 +
             (C49718 * C603 + C50967 * C611 + C49711 * C602 + C50693 * C610) *
                 C50778) *
                C7789) *
               C50878 * C50764 -
           (((C8002 + C8001) * C50778 + (C8000 + C7999) * C121) * C7789 +
            ((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C7788 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C7787) *
               C50878 * C50981) *
              C251 +
          ((((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                 C121 +
             (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                 C50778) *
                C7787 +
            ((C8003 + C8004) * C121 + (C8005 + C8006) * C50778) * C7788 +
            ((C8007 + C8008) * C121 + (C8009 + C8010) * C50778) * C7789) *
               C50878 * C50981 -
           (((C49711 * C601 + C50693 * C609 + C49718 * C602 + C50967 * C610) *
                 C50778 +
             (C49711 * C597 + C50693 * C605 + C49718 * C598 + C50967 * C606) *
                 C121) *
                C7789 +
            ((C8010 + C8009) * C50778 + (C8008 + C8007) * C121) * C7788 +
            ((C8006 + C8005) * C50778 + (C8004 + C8003) * C121) * C7787) *
               C50878 * C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C121 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50778) *
               C7787 +
           ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C7788 +
           C8335 * C7789) *
              C50878 * C592 -
          (C8459 * C7789 +
           ((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C7788 +
           ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C7787) *
              C50878 * C593 +
          (C8335 * C7787 +
           ((C8328 + C8327) * C121 + (C8326 + C8325) * C50778) * C7788 +
           ((C8455 + C8456) * C121 + (C8457 + C8458) * C50778) * C7789) *
              C50878 * C594 -
          (((C49711 * C8436 + C50693 * C8440 + C49718 * C8437 +
             C50967 * C8441) *
                C50778 +
            (C49711 * C8434 + C50693 * C8438 + C49718 * C8435 +
             C50967 * C8439) *
                C121) *
               C7789 +
           ((C8458 + C8457) * C50778 + (C8456 + C8455) * C121) * C7788 +
           C8459 * C7787) *
              C50878 * C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C50852 * C15526 +
            ((C49718 * C382 + C50967 * C388 + C49711 * C381 + C50693 * C387) *
                 C121 +
             (C49718 * C392 + C50967 * C400 + C49711 * C391 + C50693 * C399) *
                 C50778) *
                C50852 * C15527 +
            ((C49718 * C847 + C50967 * C852 + C49711 * C848 + C50693 * C853) *
                 C121 +
             (C49718 * C856 + C50967 * C862 + C49711 * C857 + C50693 * C863) *
                 C50778) *
                C50852 * C15528) *
               C50981 -
           (((C8978 + C8977) * C50778 + (C8976 + C8975) * C121) * C50852 *
                C15528 +
            ((C8642 + C8643) * C50778 + (C8640 + C8641) * C121) * C50852 *
                C15527 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C50852 *
                C15526) *
               C50764) *
              C250 +
          ((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C50852 *
                C15526 +
            ((C9591 + C9592) * C121 + (C9593 + C9594) * C50778) * C50852 *
                C15527 +
            ((C49718 * C967 + C50967 * C971 + C49711 * C966 + C50693 * C970) *
                 C121 +
             (C49718 * C975 + C50967 * C979 + C49711 * C974 + C50693 * C978) *
                 C50778) *
                C50852 * C15528) *
               C50764 -
           (((C49711 * C858 + C50693 * C864 + C49718 * C857 + C50967 * C863) *
                 C50778 +
             (C49711 * C849 + C50693 * C854 + C49718 * C848 + C50967 * C853) *
                 C121) *
                C50852 * C15528 +
            ((C49711 * C390 + C50693 * C398 + C49718 * C391 + C50967 * C399) *
                 C50778 +
             (C49711 * C380 + C50693 * C386 + C49718 * C381 + C50967 * C387) *
                 C121) *
                C50852 * C15527 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C50852 * C15526) *
               C50981) *
              C251 +
          ((((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                 C121 +
             (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                 C50778) *
                C50852 * C15526 +
            ((C49718 * C380 + C50967 * C386 + C49711 * C379 + C50693 * C385) *
                 C121 +
             (C49718 * C390 + C50967 * C398 + C49711 * C389 + C50693 * C397) *
                 C50778) *
                C50852 * C15527 +
            ((C49718 * C849 + C50967 * C854 + C49711 * C850 + C50693 * C855) *
                 C121 +
             (C49718 * C858 + C50967 * C864 + C49711 * C859 + C50693 * C865) *
                 C50778) *
                C50852 * C15528) *
               C50981 -
           (((C49711 * C973 + C50693 * C977 + C49718 * C974 + C50967 * C978) *
                 C50778 +
             (C49711 * C965 + C50693 * C969 + C49718 * C966 + C50967 * C970) *
                 C121) *
                C50852 * C15528 +
            ((C49711 * C726 + C50693 * C738 + C49718 * C725 + C50967 * C737) *
                 C50778 +
             (C49711 * C714 + C50693 * C722 + C49718 * C713 + C50967 * C721) *
                 C121) *
                C50852 * C15527 +
            ((C8006 + C8005) * C50778 + (C8004 + C8003) * C121) * C50852 *
                C15526) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C121 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50778) *
               C50852 * C15526 +
           ((C15871 + C15870) * C121 + (C15873 + C15872) * C50778) * C50852 *
               C15527 +
           ((C15875 + C15874) * C121 + (C15877 + C15876) * C50778) * C50852 *
               C15528) *
              C592 -
          (((C8978 + C8977) * C50778 + (C8976 + C8975) * C121) * C50852 *
               C15528 +
           ((C8642 + C8643) * C50778 + (C8640 + C8641) * C121) * C50852 *
               C15527 +
           ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C50852 *
               C15526) *
              C593 +
          (C8335 * C50852 * C15526 +
           ((C8646 + C8645) * C121 + (C8648 + C8647) * C50778) * C50852 *
               C15527 +
           ((C8979 + C8980) * C121 + (C8981 + C8982) * C50778) * C50852 *
               C15528) *
              C594 -
          (((C49711 * C8954 + C50693 * C8956 + C49718 * C8955 +
             C50967 * C8957) *
                C50778 +
            (C49711 * C8950 + C50693 * C8952 + C49718 * C8951 +
             C50967 * C8953) *
                C121) *
               C50852 * C15528 +
           ((C8652 + C8651) * C50778 + (C8650 + C8649) * C121) * C50852 *
               C15527 +
           C8459 * C50852 * C15526) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C377 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50983 -
           (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
            C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
               C378 -
           (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
            C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
               C50790) *
              C50852 * C50878 * C501 +
          ((C117 * C711 + C105 * C719 + C118 * C712 + C106 * C720 +
            C119 * C713 + C107 * C721 + C120 * C714 + C108 * C722) *
               C378 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C50983 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C377) +
           (C117 * C723 + C105 * C735 + C118 * C724 + C106 * C736 +
            C119 * C725 + C107 * C737 + C120 * C726 + C108 * C738) *
               C50790) *
              C50852 * C50878 * C502 +
          ((C117 * C506 + C105 * C511 + C118 * C507 + C106 * C512 +
            C119 * C508 + C107 * C513 + C120 * C509 + C108 * C514) *
               C377 +
           (C117 * C515 + C105 * C521 + C118 * C516 + C106 * C522 +
            C119 * C517 + C107 * C523 + C120 * C518 + C108 * C524) *
               C50983 -
           (C120 * C715 + C108 * C727 + C119 * C716 + C107 * C728 +
            C118 * C717 + C106 * C729 + C117 * C718 + C105 * C730) *
               C378 -
           (C120 * C731 + C108 * C739 + C119 * C732 + C107 * C740 +
            C118 * C733 + C106 * C741 + C117 * C734 + C105 * C742) *
               C50790) *
              C50852 * C50878 * C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C377 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50983 -
           (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
            C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
               C378 -
           (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
            C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
               C50790) *
              C50852 * C50878 * C50748 * C250 +
          ((C117 * C381 + C105 * C387 + C118 * C380 + C106 * C386 +
            C119 * C379 + C107 * C385 + C120 * C383 + C108 * C393) *
               C378 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50983 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C377) +
           (C117 * C391 + C105 * C399 + C118 * C390 + C106 * C398 +
            C119 * C389 + C107 * C397 + C120 * C394 + C108 * C401) *
               C50790) *
              C50852 * C50878 * C50748 * C251 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C377 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50983 -
           (C120 * C384 + C108 * C395 + C119 * C383 + C107 * C393 +
            C118 * C379 + C106 * C385 + C117 * C380 + C105 * C386) *
               C378 -
           (C120 * C396 + C108 * C402 + C119 * C394 + C107 * C401 +
            C118 * C389 + C106 * C397 + C117 * C390 + C105 * C398) *
               C50790) *
              C50852 * C50878 * C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C377 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50983 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C378 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C50790) *
               C7787 +
           ((C7987 + C7988) * C377 + (C7989 + C7990) * C50983 -
            (C49711 * C712 + C50693 * C720 + C49718 * C711 + C50967 * C719) *
                C378 -
            (C49711 * C724 + C50693 * C736 + C49718 * C723 + C50967 * C735) *
                C50790) *
               C7788 +
           ((C7991 + C7992) * C377 + (C7993 + C7994) * C50983 -
            (C49711 * C717 + C50693 * C729 + C49718 * C718 + C50967 * C730) *
                C378 -
            (C49711 * C733 + C50693 * C741 + C49718 * C734 + C50967 * C742) *
                C50790) *
               C7789) *
              C50878 * C50748 * C250 +
          (((C49718 * C381 + C50967 * C387 + C49711 * C380 + C50693 * C386) *
                C378 -
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50983 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C377) +
            (C49718 * C391 + C50967 * C399 + C49711 * C390 + C50693 * C398) *
                C50790) *
               C7787 +
           ((C49718 * C712 + C50967 * C720 + C49711 * C713 + C50693 * C721) *
                C378 -
            ((C7998 + C7997) * C50983 + (C7996 + C7995) * C377) +
            (C49718 * C724 + C50967 * C736 + C49711 * C725 + C50693 * C737) *
                C50790) *
               C7788 +
           ((C49718 * C717 + C50967 * C729 + C49711 * C716 + C50693 * C728) *
                C378 -
            ((C8002 + C8001) * C50983 + (C8000 + C7999) * C377) +
            (C49718 * C733 + C50967 * C741 + C49711 * C732 + C50693 * C740) *
                C50790) *
               C7789) *
              C50878 * C50748 * C251 +
          (((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                C377 +
            (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                C50983 -
            (C49711 * C379 + C50693 * C385 + C49718 * C380 + C50967 * C386) *
                C378 -
            (C49711 * C389 + C50693 * C397 + C49718 * C390 + C50967 * C398) *
                C50790) *
               C7787 +
           ((C8003 + C8004) * C377 + (C8005 + C8006) * C50983 -
            (C49711 * C714 + C50693 * C722 + C49718 * C713 + C50967 * C721) *
                C378 -
            (C49711 * C726 + C50693 * C738 + C49718 * C725 + C50967 * C737) *
                C50790) *
               C7788 +
           ((C8007 + C8008) * C377 + (C8009 + C8010) * C50983 -
            (C49711 * C715 + C50693 * C727 + C49718 * C716 + C50967 * C728) *
                C378 -
            (C49711 * C731 + C50693 * C739 + C49718 * C732 + C50967 * C740) *
                C50790) *
               C7789) *
              C50878 * C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C377 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50983 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C378 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C50790) *
               C7787 +
           ((C7987 + C7988) * C377 + (C7989 + C7990) * C50983 -
            (C8640 + C8641) * C378 - (C8642 + C8643) * C50790) *
               C7788 +
           C8658 * C7789) *
              C50878 * C501 +
          (((C8641 + C8640) * C378 -
            ((C7990 + C7989) * C50983 + (C7988 + C7987) * C377) +
            (C8643 + C8642) * C50790) *
               C7787 +
           ((C8646 + C8645) * C378 -
            ((C7994 + C7993) * C50983 + (C7992 + C7991) * C377) +
            (C8648 + C8647) * C50790) *
               C7788 +
           ((C8649 + C8650) * C378 - (C8443 * C50983 + C8444 * C377) +
            (C8651 + C8652) * C50790) *
               C7789) *
              C50878 * C502 +
          (C8658 * C7787 +
           ((C8328 + C8327) * C377 + (C8326 + C8325) * C50983 -
            (C8650 + C8649) * C378 - (C8652 + C8651) * C50790) *
               C7788 +
           ((C8455 + C8456) * C377 + (C8457 + C8458) * C50983 -
            (C49711 * C8605 + C50693 * C8607 + C49718 * C8606 +
             C50967 * C8608) *
                C378 -
            (C49711 * C8609 + C50693 * C8611 + C49718 * C8610 +
             C50967 * C8612) *
                C50790) *
               C7789) *
              C50878 * C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C377 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50983 -
            (C15870 + C15871) * C378 - (C15872 + C15873) * C50790) *
               C50852 * C15526 +
           ((C15871 + C15870) * C377 + (C15873 + C15872) * C50983 -
            (C15874 + C15875) * C378 - (C15876 + C15877) * C50790) *
               C50852 * C15527 +
           ((C15875 + C15874) * C377 + (C15877 + C15876) * C50983 -
            (C49711 * C1057 + C50693 * C1061 + C49718 * C1058 +
             C50967 * C1062) *
                C378 -
            (C49711 * C1065 + C50693 * C1069 + C49718 * C1066 +
             C50967 * C1070) *
                C50790) *
               C50852 * C15528) *
              C50748 * C250 +
          (((C15878 + C15879) * C378 -
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50983 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C377) +
            (C15880 + C15881) * C50790) *
               C50852 * C15526 +
           ((C15882 + C15883) * C378 -
            ((C15881 + C15880) * C50983 + (C15879 + C15878) * C377) +
            (C15884 + C15885) * C50790) *
               C50852 * C15527 +
           ((C49718 * C1057 + C50967 * C1061 + C49711 * C1056 +
             C50693 * C1060) *
                C378 -
            ((C15885 + C15884) * C50983 + (C15883 + C15882) * C377) +
            (C49718 * C1065 + C50967 * C1069 + C49711 * C1064 +
             C50693 * C1068) *
                C50790) *
               C50852 * C15528) *
              C50748 * C251 +
          (((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                C377 +
            (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                C50983 -
            (C15886 + C15887) * C378 - (C15888 + C15889) * C50790) *
               C50852 * C15526 +
           ((C15887 + C15886) * C377 + (C15889 + C15888) * C50983 -
            (C15890 + C15891) * C378 - (C15892 + C15893) * C50790) *
               C50852 * C15527 +
           ((C15891 + C15890) * C377 + (C15893 + C15892) * C50983 -
            (C49711 * C1055 + C50693 * C1059 + C49718 * C1056 +
             C50967 * C1060) *
                C378 -
            (C49711 * C1063 + C50693 * C1067 + C49718 * C1064 +
             C50967 * C1068) *
                C50790) *
               C50852 * C15528) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C377 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50983 -
            (C15870 + C15871) * C378 - (C15872 + C15873) * C50790) *
               C50852 * C15526 +
           ((C15871 + C15870) * C377 + (C15873 + C15872) * C50983 -
            (C15874 + C15875) * C378 - (C15876 + C15877) * C50790) *
               C50852 * C15527 +
           ((C15875 + C15874) * C377 + (C15877 + C15876) * C50983 -
            (C49711 * C1057 + C50693 * C1061 + C49718 * C1058 +
             C50967 * C1062) *
                C378 -
            (C49711 * C1065 + C50693 * C1069 + C49718 * C1066 +
             C50967 * C1070) *
                C50790) *
               C50852 * C15528) *
              C501 +
          (((C8641 + C8640) * C378 -
            ((C7990 + C7989) * C50983 + (C7988 + C7987) * C377) +
            (C8643 + C8642) * C50790) *
               C50852 * C15526 +
           ((C8975 + C8976) * C378 -
            ((C8642 + C8643) * C50983 + (C8640 + C8641) * C377) +
            (C8977 + C8978) * C50790) *
               C50852 * C15527 +
           ((C49718 * C3451 + C50967 * C3454 + C49711 * C3450 +
             C50693 * C3453) *
                C378 -
            ((C8978 + C8977) * C50983 + (C8976 + C8975) * C377) +
            (C49718 * C3457 + C50967 * C3460 + C49711 * C3456 +
             C50693 * C3459) *
                C50790) *
               C50852 * C15528) *
              C502 +
          (C8658 * C50852 * C15526 +
           ((C8646 + C8645) * C377 + (C8648 + C8647) * C50983 -
            (C8980 + C8979) * C378 - (C8982 + C8981) * C50790) *
               C50852 * C15527 +
           ((C8979 + C8980) * C377 + (C8981 + C8982) * C50983 -
            (C49711 * C9080 + C50693 * C9082 + C49718 * C9081 +
             C50967 * C9083) *
                C378 -
            (C49711 * C9084 + C50693 * C9086 + C49718 * C9085 +
             C50967 * C9087) *
                C50790) *
               C50852 * C15528) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C10644 +
            (C10802 + C10803) * C10645 + C11016 * C10646 + C11017 * C10647) *
               C50878 * C1169 -
           (C11106 * C10647 + C11107 * C10646 + (C10805 + C10804) * C10645 +
            (C10803 + C10802) * C10644) *
               C50878 * C50764) *
              C51026 +
          (((C10808 + C10809) * C10644 + (C10810 + C10811) * C10645 +
            (C10812 + C10813) * C10646 + (C11034 + C11035) * C10647) *
               C50878 * C50764 -
           (C11026 * C10647 + C11027 * C10646 + (C10809 + C10808) * C10645 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C10644) *
               C50878 * C1169) *
              C51012 +
          ((((C10648 * C124 + C50688 * C131) * C121 +
             (C10648 * C135 + C50688 * C145) * C50778) *
                C10644 +
            (C10814 + C10815) * C10645 + (C10816 + C10817) * C10646 +
            (C10818 + C10819) * C10647) *
               C50878 * C1169 -
           (((C10648 * C2808 + C50688 * C2814) * C50778 +
             (C10648 * C2805 + C50688 * C2811) * C121) *
                C10647 +
            (C10819 + C10818) * C10646 + (C10817 + C10816) * C10645 +
            (C10815 + C10814) * C10644) *
               C50878 * C50764) *
              C1173)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50778) *
                C50995 +
            ((C2362 + C2363 + C2364) * C121 +
             (C2365 + C2366 + C2367) * C50778) *
                C50866) *
               C50878 * C1169 -
           (((C2696 + C2697 + C2698) * C50778 +
             (C2699 + C2700 + C2701) * C121) *
                C50866 +
            ((C2367 + C2366 + C2365) * C50778 +
             (C2364 + C2363 + C2362) * C121) *
                C50995) *
               C50878 * C50764) *
              C51026 +
          ((((C2368 + C2369 + C2370) * C121 +
             (C2371 + C2372 + C2373) * C50778) *
                C50995 +
            ((C2702 + C2703 + C2704) * C121 +
             (C2705 + C2706 + C2707) * C50778) *
                C50866) *
               C50878 * C50764 -
           (((C2373 + C2372 + C2371) * C50778 +
             (C2370 + C2369 + C2368) * C121) *
                C50866 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50778 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50995) *
               C50878 * C1169) *
              C51012 +
          ((((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
              C2178 * C126 + C2173 * C138) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
              C2178 * C137 + C2173 * C147) *
                 C50778) *
                C50995 +
            ((C2374 + C2375 + C2376) * C121 +
             (C2377 + C2378 + C2379) * C50778) *
                C50866) *
               C50878 * C1169 -
           (((C2178 * C519 + C2173 * C525 + C2177 * C518 + C2172 * C524 +
              C2176 * C517 + C2171 * C523) *
                 C50778 +
             (C2178 * C510 + C2173 * C520 + C2177 * C509 + C2172 * C514 +
              C2176 * C508 + C2171 * C513) *
                 C121) *
                C50866 +
            ((C2379 + C2378 + C2377) * C50778 +
             (C2376 + C2375 + C2374) * C121) *
                C50995) *
               C50878 * C50764) *
              C1173)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C50995 +
             (C10802 + C10803) * C50866) *
                C15526 +
            ((C13056 * C121 + C13057 * C50778) * C50995 +
             (C12874 + C12875) * C50866) *
                C15527 +
            ((C13638 * C121 + C13639 * C50778) * C50995 +
             (C18456 + C18457) * C50866) *
                C15528) *
               C1169 -
           (((C18766 + C18767) * C50866 + (C18457 + C18456) * C50995) * C15528 +
            ((C12877 + C12876) * C50866 + (C12875 + C12874) * C50995) * C15527 +
            ((C10805 + C10804) * C50866 + (C10803 + C10802) * C50995) *
                C15526) *
               C50764) *
              C51026 +
          ((((C10808 + C10809) * C50995 + (C10810 + C10811) * C50866) * C15526 +
            ((C12878 + C12879) * C50995 + (C12880 + C12881) * C50866) * C15527 +
            ((C18458 + C18459) * C50995 + (C18768 + C18769) * C50866) *
                C15528) *
               C50764 -
           (((C18459 + C18458) * C50866 +
             (C13641 * C50778 + C13640 * C121) * C50995) *
                C15528 +
            ((C12879 + C12878) * C50866 +
             (C13059 * C50778 + C13058 * C121) * C50995) *
                C15527 +
            ((C10809 + C10808) * C50866 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C50995) *
                C15526) *
               C1169) *
              C51012 +
          (((((C10648 * C124 + C50688 * C131) * C121 +
              (C10648 * C135 + C50688 * C145) * C50778) *
                 C50995 +
             (C10814 + C10815) * C50866) *
                C15526 +
            ((C13060 * C121 + C13061 * C50778) * C50995 +
             (C12894 + C12895) * C50866) *
                C15527 +
            ((C18618 * C121 + C18619 * C50778) * C50995 +
             (C18466 + C18467) * C50866) *
                C15528) *
               C1169 -
           ((((C10648 * C3327 + C50688 * C3330) * C50778 +
              (C10648 * C3321 + C50688 * C3324) * C121) *
                 C50866 +
             (C18467 + C18466) * C50995) *
                C15528 +
            ((C12897 + C12896) * C50866 + (C12895 + C12894) * C50995) * C15527 +
            ((C10817 + C10816) * C50866 + (C10815 + C10814) * C50995) *
                C15526) *
               C50764) *
              C1173)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C10644 +
            (C10802 + C10803) * C10645 + C11016 * C10646 + C11017 * C10647) *
               C50878 * C51027 -
           (C11106 * C10647 + C11107 * C10646 + (C10805 + C10804) * C10645 +
            (C10803 + C10802) * C10644) *
               C50878 * C51015 +
           (C11016 * C10644 + C11017 * C10645 + (C11033 + C11032) * C10646 +
            (C11114 + C11115) * C10647) *
               C50878 * C1274) *
              C1275 +
          (((C10808 + C10809) * C10644 + (C10810 + C10811) * C10645 +
            (C10812 + C10813) * C10646 + (C11034 + C11035) * C10647) *
               C50878 * C51015 -
           (C11026 * C10647 + C11027 * C10646 + (C10809 + C10808) * C10645 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C10644) *
               C50878 * C51027 -
           (((C10648 * C8436 + C50688 * C8440) * C50778 +
             (C10648 * C8434 + C50688 * C8438) * C121) *
                C10647 +
            (C11035 + C11034) * C10646 + C11026 * C10645 + C11027 * C10644) *
               C50878 * C1274) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50778) *
                C50995 +
            ((C2362 + C2363 + C2364) * C121 +
             (C2365 + C2366 + C2367) * C50778) *
                C50866) *
               C50878 * C51027 -
           (((C2696 + C2697 + C2698) * C50778 +
             (C2699 + C2700 + C2701) * C121) *
                C50866 +
            ((C2367 + C2366 + C2365) * C50778 +
             (C2364 + C2363 + C2362) * C121) *
                C50995) *
               C50878 * C51015 +
           (((C2701 + C2700 + C2699) * C121 +
             (C2698 + C2697 + C2696) * C50778) *
                C50995 +
            ((C2830 + C2831 + C2832) * C121 +
             (C2833 + C2834 + C2835) * C50778) *
                C50866) *
               C50878 * C1274) *
              C1275 +
          ((((C2368 + C2369 + C2370) * C121 +
             (C2371 + C2372 + C2373) * C50778) *
                C50995 +
            ((C2702 + C2703 + C2704) * C121 +
             (C2705 + C2706 + C2707) * C50778) *
                C50866) *
               C50878 * C51015 -
           (((C2373 + C2372 + C2371) * C50778 +
             (C2370 + C2369 + C2368) * C121) *
                C50866 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50778 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50995) *
               C50878 * C51027 -
           (((C2178 * C601 + C2173 * C609 + C2177 * C602 + C2172 * C610 +
              C2176 * C603 + C2171 * C611) *
                 C50778 +
             (C2178 * C597 + C2173 * C605 + C2177 * C598 + C2172 * C606 +
              C2176 * C599 + C2171 * C607) *
                 C121) *
                C50866 +
            ((C2707 + C2706 + C2705) * C50778 +
             (C2704 + C2703 + C2702) * C121) *
                C50995) *
               C50878 * C1274) *
              C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C50995 +
             (C10802 + C10803) * C50866) *
                C15526 +
            ((C13056 * C121 + C13057 * C50778) * C50995 +
             (C12874 + C12875) * C50866) *
                C15527 +
            ((C13638 * C121 + C13639 * C50778) * C50995 +
             (C18456 + C18457) * C50866) *
                C15528) *
               C51027 -
           (((C18766 + C18767) * C50866 + (C18457 + C18456) * C50995) * C15528 +
            ((C12877 + C12876) * C50866 + (C12875 + C12874) * C50995) * C15527 +
            ((C10805 + C10804) * C50866 + (C10803 + C10802) * C50995) *
                C15526) *
               C51015 +
           ((C11016 * C50995 + C11017 * C50866) * C15526 +
            (C13208 * C50995 + (C13210 + C13209) * C50866) * C15527 +
            ((C18767 + C18766) * C50995 + (C18868 + C18869) * C50866) *
                C15528) *
               C1274) *
              C1275 +
          ((((C10808 + C10809) * C50995 + (C10810 + C10811) * C50866) * C15526 +
            ((C12878 + C12879) * C50995 + (C12880 + C12881) * C50866) * C15527 +
            ((C18458 + C18459) * C50995 + (C18768 + C18769) * C50866) *
                C15528) *
               C51015 -
           (((C18459 + C18458) * C50866 +
             (C13641 * C50778 + C13640 * C121) * C50995) *
                C15528 +
            ((C12879 + C12878) * C50866 +
             (C13059 * C50778 + C13058 * C121) * C50995) *
                C15527 +
            ((C10809 + C10808) * C50866 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C50995) *
                C15526) *
               C51027 -
           ((((C10648 * C8954 + C50688 * C8956) * C50778 +
              (C10648 * C8950 + C50688 * C8952) * C121) *
                 C50866 +
             (C18769 + C18768) * C50995) *
                C15528 +
            ((C13212 + C13211) * C50866 + C13213 * C50995) * C15527 +
            (C11026 * C50866 + C11027 * C50995) * C15526) *
               C1274) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 -
             (C10648 * C382 + C50688 * C388) * C378 -
             (C10648 * C392 + C50688 * C400) * C50790) *
                C10644 +
            (C11218 + C11219 - C11252 - C11253) * C10645 + C11262 * C10646 +
            C11263 * C10647) *
               C50878 * C1169 +
           ((C11252 - (C11219 + C11218) + C11253) * C10644 +
            (C11254 - (C11225 + C11224) + C11255) * C10645 +
            (C11256 - (C11231 + C11230) + C11257) * C10646 +
            (C11258 - (C11238 + C11239) + C11259) * C10647) *
               C50878 * C50764) *
              C1275 +
          ((((C10648 * C381 + C50688 * C387) * C378 -
             ((C10648 * C134 + C50688 * C144) * C50983 +
              (C10648 * C123 + C50688 * C130) * C377) +
             (C10648 * C391 + C50688 * C399) * C50790) *
                C10644 +
            (C11920 - (C11898 + C11899) + C11921) * C10645 +
            (C11922 - (C11904 + C11905) + C11923) * C10646 +
            (C11924 - (C11910 + C11911) + C11925) * C10647) *
               C50878 * C1169 +
           ((C11899 + C11898 - C11920 - C11921) * C10644 +
            (C11905 + C11904 - C11922 - C11923) * C10645 +
            (C11911 + C11910 - C11924 - C11925) * C10646 +
            (C11030 * C377 + C11031 * C50983 -
             (C10648 * C8605 + C50688 * C8607) * C378 -
             (C10648 * C8609 + C50688 * C8611) * C50790) *
                C10647) *
               C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C377 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50983 -
             (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
              C2176 * C382 + C2171 * C388) *
                 C378 -
             (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
              C2176 * C392 + C2171 * C400) *
                 C50790) *
                C50995 +
            ((C2362 + C2363 + C2364) * C377 + (C2365 + C2366 + C2367) * C50983 -
             (C3018 + C3019 + C3020) * C378 -
             (C3021 + C3022 + C3023) * C50790) *
                C50866) *
               C50878 * C1169 +
           (((C3020 + C3019 + C3018) * C378 -
             ((C2367 + C2366 + C2365) * C50983 +
              (C2364 + C2363 + C2362) * C377) +
             (C3023 + C3022 + C3021) * C50790) *
                C50995 +
            ((C3024 + C3025 + C3026) * C378 -
             ((C2696 + C2697 + C2698) * C50983 +
              (C2699 + C2700 + C2701) * C377) +
             (C3027 + C3028 + C3029) * C50790) *
                C50866) *
               C50878 * C50764) *
              C1275 +
          ((((C2176 * C381 + C2171 * C387 + C2177 * C380 + C2172 * C386 +
              C2178 * C379 + C2173 * C385) *
                 C378 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C50983 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C377) +
             (C2176 * C391 + C2171 * C399 + C2177 * C390 + C2172 * C398 +
              C2178 * C389 + C2173 * C397) *
                 C50790) *
                C50995 +
            ((C3960 + C3961 + C3962) * C378 -
             ((C2373 + C2372 + C2371) * C50983 +
              (C2370 + C2369 + C2368) * C377) +
             (C3963 + C3964 + C3965) * C50790) *
                C50866) *
               C50878 * C1169 +
           (((C2368 + C2369 + C2370) * C377 + (C2371 + C2372 + C2373) * C50983 -
             (C3962 + C3961 + C3960) * C378 -
             (C3965 + C3964 + C3963) * C50790) *
                C50995 +
            ((C2702 + C2703 + C2704) * C377 + (C2705 + C2706 + C2707) * C50983 -
             (C2178 * C715 + C2173 * C727 + C2177 * C716 + C2172 * C728 +
              C2176 * C717 + C2171 * C729) *
                 C378 -
             (C2178 * C731 + C2173 * C739 + C2177 * C732 + C2172 * C740 +
              C2176 * C733 + C2171 * C741) *
                 C50790) *
                C50866) *
               C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C377 +
              (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
              C13057 * C50790) *
                 C50995 +
             (C11218 + C11219 - C11252 - C11253) * C50866) *
                C15526 +
            ((C13056 * C377 + C13057 * C50983 - C13638 * C378 -
              C13639 * C50790) *
                 C50995 +
             (C13461 + C13462 - C13463 - C13464) * C50866) *
                C15527 +
            ((C13638 * C377 + C13639 * C50983 - C13926 * C378 -
              C13927 * C50790) *
                 C50995 +
             (C19016 + C19017 - C19018 - C19019) * C50866) *
                C15528) *
               C1169 +
           (((C11252 - (C11219 + C11218) + C11253) * C50995 +
             (C11254 - (C11225 + C11224) + C11255) * C50866) *
                C15526 +
            ((C13463 - (C13462 + C13461) + C13464) * C50995 +
             (C13467 - (C13466 + C13465) + C13468) * C50866) *
                C15527 +
            ((C19018 - (C19017 + C19016) + C19019) * C50995 +
             (C19020 - (C19021 + C19022) + C19023) * C50866) *
                C15528) *
               C50764) *
              C1275 +
          ((((C13058 * C378 -
              ((C10648 * C134 + C50688 * C144) * C50983 +
               (C10648 * C123 + C50688 * C130) * C377) +
              C13059 * C50790) *
                 C50995 +
             (C11920 - (C11898 + C11899) + C11921) * C50866) *
                C15526 +
            ((C13640 * C378 - (C13059 * C50983 + C13058 * C377) +
              C13641 * C50790) *
                 C50995 +
             (C14414 - (C14415 + C14416) + C14417) * C50866) *
                C15527 +
            ((C19178 * C378 - (C13641 * C50983 + C13640 * C377) +
              C19179 * C50790) *
                 C50995 +
             (C19934 - (C19935 + C19936) + C19937) * C50866) *
                C15528) *
               C1169 +
           (((C11899 + C11898 - C11920 - C11921) * C50995 +
             (C11905 + C11904 - C11922 - C11923) * C50866) *
                C15526 +
            ((C14416 + C14415 - C14414 - C14417) * C50995 +
             (C14420 + C14419 - C14418 - C14421) * C50866) *
                C15527 +
            ((C19936 + C19935 - C19934 - C19937) * C50995 +
             (C13644 * C377 + C13645 * C50983 -
              (C10648 * C9080 + C50688 * C9082) * C378 -
              (C10648 * C9084 + C50688 * C9086) * C50790) *
                 C50866) *
                C15528) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1511 +
             (C10648 * C133 + C50688 * C143) * C1509 -
             (C10648 * C382 + C50688 * C388) * C1512 -
             (C10648 * C392 + C50688 * C400) * C50790) *
                C10644 +
            (C12154 + C12155 - C12156 - C12157) * C10645 +
            (C12158 + C12159 - C12160 - C12161) * C10646 +
            (C12162 + C12163 - C12164 - C12165) * C10647) *
               C50878 * C1169 +
           ((C12156 - (C12155 + C12154) + C12157) * C10644 +
            (C12160 - (C12159 + C12158) + C12161) * C10645 +
            (C12164 - (C12163 + C12162) + C12165) * C10646 +
            (C11250 * C1512 - (C11028 * C1509 + C11029 * C1511) +
             C11251 * C50790) *
                C10647) *
               C50878 * C50764) *
              C50974 +
          ((((C10648 * C381 + C50688 * C387) * C1512 -
             ((C10648 * C134 + C50688 * C144) * C1509 +
              (C10648 * C123 + C50688 * C130) * C1511) +
             (C10648 * C391 + C50688 * C399) * C50790) *
                C10644 +
            (C12166 - (C12167 + C12168) + C12169) * C10645 +
            (C12170 - (C12171 + C12172) + C12173) * C10646 +
            (C12174 - (C12175 + C12176) + C12177) * C10647) *
               C50878 * C1169 +
           ((C12168 + C12167 - C12166 - C12169) * C10644 +
            (C12172 + C12171 - C12170 - C12173) * C10645 +
            (C12176 + C12175 - C12174 - C12177) * C10646 +
            (C11030 * C1511 + C11031 * C1509 -
             (C10648 * C8605 + C50688 * C8607) * C1512 -
             (C10648 * C8609 + C50688 * C8611) * C50790) *
                C10647) *
               C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C1511 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C1509 -
             (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
              C2176 * C382 + C2171 * C388) *
                 C1512 -
             (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
              C2176 * C392 + C2171 * C400) *
                 C50790) *
                C50995 +
            ((C2362 + C2363 + C2364) * C1511 + (C2365 + C2366 + C2367) * C1509 -
             (C3018 + C3019 + C3020) * C1512 -
             (C3021 + C3022 + C3023) * C50790) *
                C50866) *
               C50878 * C1169 +
           (((C3020 + C3019 + C3018) * C1512 -
             ((C2367 + C2366 + C2365) * C1509 +
              (C2364 + C2363 + C2362) * C1511) +
             (C3023 + C3022 + C3021) * C50790) *
                C50995 +
            ((C3024 + C3025 + C3026) * C1512 -
             ((C2696 + C2697 + C2698) * C1509 +
              (C2699 + C2700 + C2701) * C1511) +
             (C3027 + C3028 + C3029) * C50790) *
                C50866) *
               C50878 * C50764) *
              C50974 +
          ((((C2176 * C381 + C2171 * C387 + C2177 * C380 + C2172 * C386 +
              C2178 * C379 + C2173 * C385) *
                 C1512 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C1509 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C1511) +
             (C2176 * C391 + C2171 * C399 + C2177 * C390 + C2172 * C398 +
              C2178 * C389 + C2173 * C397) *
                 C50790) *
                C50995 +
            ((C3960 + C3961 + C3962) * C1512 -
             ((C2373 + C2372 + C2371) * C1509 +
              (C2370 + C2369 + C2368) * C1511) +
             (C3963 + C3964 + C3965) * C50790) *
                C50866) *
               C50878 * C1169 +
           (((C2368 + C2369 + C2370) * C1511 + (C2371 + C2372 + C2373) * C1509 -
             (C3962 + C3961 + C3960) * C1512 -
             (C3965 + C3964 + C3963) * C50790) *
                C50995 +
            ((C2702 + C2703 + C2704) * C1511 + (C2705 + C2706 + C2707) * C1509 -
             (C2178 * C715 + C2173 * C727 + C2177 * C716 + C2172 * C728 +
              C2176 * C717 + C2171 * C729) *
                 C1512 -
             (C2178 * C731 + C2173 * C739 + C2177 * C732 + C2172 * C740 +
              C2176 * C733 + C2171 * C741) *
                 C50790) *
                C50866) *
               C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C1511 +
              (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
              C13057 * C50790) *
                 C50995 +
             (C12154 + C12155 - C12156 - C12157) * C50866) *
                C15526 +
            ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
              C13639 * C50790) *
                 C50995 +
             (C14762 + C14763 - C14764 - C14765) * C50866) *
                C15527 +
            ((C13638 * C1511 + C13639 * C1509 - C13926 * C1512 -
              C13927 * C50790) *
                 C50995 +
             (C20278 + C20279 - C20280 - C20281) * C50866) *
                C15528) *
               C1169 +
           (((C12156 - (C12155 + C12154) + C12157) * C50995 +
             (C12160 - (C12159 + C12158) + C12161) * C50866) *
                C15526 +
            ((C14764 - (C14763 + C14762) + C14765) * C50995 +
             (C14768 - (C14767 + C14766) + C14769) * C50866) *
                C15527 +
            ((C20280 - (C20279 + C20278) + C20281) * C50995 +
             (C13810 * C1512 - (C11491 * C1509 + C11490 * C1511) +
              C13811 * C50790) *
                 C50866) *
                C15528) *
               C50764) *
              C50974 +
          ((((C13058 * C1512 -
              ((C10648 * C134 + C50688 * C144) * C1509 +
               (C10648 * C123 + C50688 * C130) * C1511) +
              C13059 * C50790) *
                 C50995 +
             (C12166 - (C12167 + C12168) + C12169) * C50866) *
                C15526 +
            ((C13640 * C1512 - (C13059 * C1509 + C13058 * C1511) +
              C13641 * C50790) *
                 C50995 +
             (C14770 - (C14771 + C14772) + C14773) * C50866) *
                C15527 +
            ((C19178 * C1512 - (C13641 * C1509 + C13640 * C1511) +
              C19179 * C50790) *
                 C50995 +
             (C20282 - (C20283 + C20284) + C20285) * C50866) *
                C15528) *
               C1169 +
           (((C12168 + C12167 - C12166 - C12169) * C50995 +
             (C12172 + C12171 - C12170 - C12173) * C50866) *
                C15526 +
            ((C14772 + C14771 - C14770 - C14773) * C50995 +
             (C14776 + C14775 - C14774 - C14777) * C50866) *
                C15527 +
            ((C20284 + C20283 - C20282 - C20285) * C50995 +
             (C13644 * C1511 + C13645 * C1509 -
              (C10648 * C9080 + C50688 * C9082) * C1512 -
              (C10648 * C9084 + C50688 * C9086) * C50790) *
                 C50866) *
                C15528) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C1511 +
            (C10648 * C133 + C50688 * C143) * C1509 -
            (C10648 * C382 + C50688 * C388) * C1512 -
            (C10648 * C392 + C50688 * C400) * C50790) *
               C10644 +
           (C12154 + C12155 - C12156 - C12157) * C10645 + C12512 * C10646 +
           C12513 * C10647) *
              C50878 * C51027 +
          ((C12156 - (C12155 + C12154) + C12157) * C10644 +
           (C12160 - (C12159 + C12158) + C12161) * C10645 +
           (C12164 - (C12163 + C12162) + C12165) * C10646 +
           (C12506 - (C12507 + C12508) + C12509) * C10647) *
              C50878 * C51015 +
          (C12512 * C10644 + C12513 * C10645 +
           (C12508 + C12507 - C12506 - C12509) * C10646 +
           (C11112 * C1511 + C11113 * C1509 -
            (C10648 * C11213 + C50688 * C11214) * C1512 -
            (C10648 * C11215 + C50688 * C11216) * C50790) *
               C10647) *
              C50878 * C1274) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1511 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C1509 -
            (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
             C2176 * C382 + C2171 * C388) *
                C1512 -
            (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
             C2176 * C392 + C2171 * C400) *
                C50790) *
               C50995 +
           ((C2362 + C2363 + C2364) * C1511 + (C2365 + C2366 + C2367) * C1509 -
            (C3018 + C3019 + C3020) * C1512 -
            (C3021 + C3022 + C3023) * C50790) *
               C50866) *
              C50878 * C51027 +
          (((C3020 + C3019 + C3018) * C1512 -
            ((C2367 + C2366 + C2365) * C1509 +
             (C2364 + C2363 + C2362) * C1511) +
            (C3023 + C3022 + C3021) * C50790) *
               C50995 +
           ((C3024 + C3025 + C3026) * C1512 -
            ((C2696 + C2697 + C2698) * C1509 +
             (C2699 + C2700 + C2701) * C1511) +
            (C3027 + C3028 + C3029) * C50790) *
               C50866) *
              C50878 * C51015 +
          (((C2701 + C2700 + C2699) * C1511 + (C2698 + C2697 + C2696) * C1509 -
            (C3026 + C3025 + C3024) * C1512 -
            (C3029 + C3028 + C3027) * C50790) *
               C50995 +
           ((C2830 + C2831 + C2832) * C1511 + (C2833 + C2834 + C2835) * C1509 -
            (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
             C2176 * C2983 + C2171 * C2986) *
                C1512 -
            (C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
             C2176 * C2989 + C2171 * C2992) *
                C50790) *
               C50866) *
              C50878 * C1274) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1511 +
             (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
             C13057 * C50790) *
                C50995 +
            (C12154 + C12155 - C12156 - C12157) * C50866) *
               C15526 +
           ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
             C13639 * C50790) *
                C50995 +
            (C14762 + C14763 - C14764 - C14765) * C50866) *
               C15527 +
           ((C13638 * C1511 + C13639 * C1509 - C13926 * C1512 -
             C13927 * C50790) *
                C50995 +
            (C20278 + C20279 - C20280 - C20281) * C50866) *
               C15528) *
              C51027 +
          (((C12156 - (C12155 + C12154) + C12157) * C50995 +
            (C12160 - (C12159 + C12158) + C12161) * C50866) *
               C15526 +
           ((C14764 - (C14763 + C14762) + C14765) * C50995 +
            (C14768 - (C14767 + C14766) + C14769) * C50866) *
               C15527 +
           ((C20280 - (C20279 + C20278) + C20281) * C50995 +
            (C20772 - (C20773 + C20774) + C20775) * C50866) *
               C15528) *
              C51015 +
          ((C12512 * C50995 + C12513 * C50866) * C15526 +
           (C15270 * C50995 + (C15267 + C15266 - C15265 - C15268) * C50866) *
               C15527 +
           ((C20774 + C20773 - C20772 - C20775) * C50995 +
            (C11492 * C1511 + C11493 * C1509 -
             (C10648 * C11565 + C50688 * C11566) * C1512 -
             (C10648 * C11567 + C50688 * C11568) * C50790) *
                C50866) *
               C15528) *
              C1274) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C1744 +
            (C10648 * C133 + C50688 * C143) * C51028 -
            (C10648 * C382 + C50688 * C388) * C1745 -
            (C10648 * C392 + C50688 * C400) * C51018 +
            (C10648 * C847 + C50688 * C852) * C1746 +
            (C10648 * C856 + C50688 * C862) * C1743) *
               C10644 +
           (C12612 + C12613 - C12614 - C12615 + C12616 + C12617) * C10645 +
           (C12618 + C12619 - C12620 - C12621 + C12622 + C12623) * C10646 +
           (C12624 + C12625 - C12626 - C12627 + C12628 + C12629) * C10647) *
              C50878 * C1169 +
          ((C12614 - (C12613 + C12612) + C12615 - C12616 - C12617) * C10644 +
           (C12620 - (C12619 + C12618) + C12621 - C12622 - C12623) * C10645 +
           (C12626 - (C12625 + C12624) + C12627 - C12628 - C12629) * C10646 +
           (C11250 * C1745 - (C11028 * C51028 + C11029 * C1744) +
            C11251 * C51018 - (C10648 * C11459 + C50688 * C11460) * C1746 -
            (C10648 * C11461 + C50688 * C11462) * C1743) *
               C10647) *
              C50878 * C50764) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1744 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C51028 -
            (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
             C2176 * C382 + C2171 * C388) *
                C1745 -
            (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
             C2176 * C392 + C2171 * C400) *
                C51018 +
            (C2176 * C847 + C2171 * C852 + C2177 * C848 + C2172 * C853 +
             C2178 * C849 + C2173 * C854) *
                C1746 +
            (C2176 * C856 + C2171 * C862 + C2177 * C857 + C2172 * C863 +
             C2178 * C858 + C2173 * C864) *
                C1743) *
               C50995 +
           ((C2362 + C2363 + C2364) * C1744 + (C2365 + C2366 + C2367) * C51028 -
            (C3018 + C3019 + C3020) * C1745 - (C3021 + C3022 + C3023) * C51018 +
            (C3346 + C3347 + C3348) * C1746 + (C3349 + C3350 + C3351) * C1743) *
               C50866) *
              C50878 * C1169 +
          (((C3020 + C3019 + C3018) * C1745 -
            ((C2367 + C2366 + C2365) * C51028 +
             (C2364 + C2363 + C2362) * C1744) +
            (C3023 + C3022 + C3021) * C51018 - (C3348 + C3347 + C3346) * C1746 -
            (C3351 + C3350 + C3349) * C1743) *
               C50995 +
           ((C3024 + C3025 + C3026) * C1745 -
            ((C2696 + C2697 + C2698) * C51028 +
             (C2699 + C2700 + C2701) * C1744) +
            (C3027 + C3028 + C3029) * C51018 -
            (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
             C2176 * C3323 + C2171 * C3326) *
                C1746 -
            (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
             C2176 * C3329 + C2171 * C3332) *
                C1743) *
               C50866) *
              C50878 * C50764) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1744 +
             (C10648 * C133 + C50688 * C143) * C51028 - C13056 * C1745 -
             C13057 * C51018 + C13638 * C1746 + C13639 * C1743) *
                C50995 +
            (C12612 + C12613 - C12614 - C12615 + C12616 + C12617) * C50866) *
               C15526 +
           ((C13056 * C1744 + C13057 * C51028 - C13638 * C1745 -
             C13639 * C51018 + C13926 * C1746 + C13927 * C1743) *
                C50995 +
            (C15417 + C15418 - C15419 - C15420 + C15421 + C15422) * C50866) *
               C15527 +
           ((C13638 * C1744 + C13639 * C51028 - C13926 * C1745 -
             C13927 * C51018 + C19446 * C1746 + C19447 * C1743) *
                C50995 +
            (C20922 + C20923 - C20924 - C20925 + C20926 + C20927) * C50866) *
               C15528) *
              C1169 +
          (((C12614 - (C12613 + C12612) + C12615 - C12616 - C12617) * C50995 +
            (C12620 - (C12619 + C12618) + C12621 - C12622 - C12623) * C50866) *
               C15526 +
           ((C15419 - (C15418 + C15417) + C15420 - C15421 - C15422) * C50995 +
            (C15425 - (C15424 + C15423) + C15426 - C15427 - C15428) * C50866) *
               C15527 +
           ((C20924 - (C20923 + C20922) + C20925 - C20926 - C20927) * C50995 +
            (C13810 * C1745 - (C11491 * C51028 + C11490 * C1744) +
             C13811 * C51018 - (C10648 * C13914 + C50688 * C13917) * C1746 -
             (C10648 * C13918 + C50688 * C13920) * C1743) *
                C50866) *
               C15528) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                 C2178 * C124 + C2173 * C131) *
                    C121 +
                (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                 C2178 * C135 + C2173 * C145) *
                    C50778) *
                   C50995 +
               ((C2176 * C256 + C2171 * C266 + C2177 * C255 + C2172 * C265 +
                 C2178 * C254 + C2173 * C264) *
                    C121 +
                (C2176 * C262 + C2171 * C274 + C2177 * C261 + C2172 * C273 +
                 C2178 * C260 + C2173 * C272) *
                    C50778) *
                   C50866) *
                  C50878 * C50748 * C113 -
              (((C2178 * C259 + C2173 * C271 + C2177 * C260 + C2172 * C272 +
                 C2176 * C261 + C2171 * C273) *
                    C50778 +
                (C2178 * C253 + C2173 * C263 + C2177 * C254 + C2172 * C264 +
                 C2176 * C255 + C2171 * C265) *
                    C121) *
                   C50866 +
               ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
                 C2176 * C134 + C2171 * C144) *
                    C50778 +
                (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
                 C2176 * C123 + C2171 * C130) *
                    C121) *
                   C50995) *
                  C50878 * C50748 * C114 +
              (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
                 C2178 * C126 + C2173 * C138) *
                    C121 +
                (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
                 C2178 * C137 + C2173 * C147) *
                    C50778) *
                   C50995 +
               ((C2176 * C254 + C2171 * C264 + C2177 * C253 + C2172 * C263 +
                 C2178 * C257 + C2173 * C267) *
                    C121 +
                (C2176 * C260 + C2171 * C272 + C2177 * C259 + C2172 * C271 +
                 C2178 * C268 + C2173 * C275) *
                    C50778) *
                   C50866) *
                  C50878 * C50748 * C115 -
              (((C2178 * C269 + C2173 * C276 + C2177 * C268 + C2172 * C275 +
                 C2176 * C259 + C2171 * C271) *
                    C50778 +
                (C2178 * C258 + C2173 * C270 + C2177 * C257 + C2172 * C267 +
                 C2176 * C253 + C2171 * C263) *
                    C121) *
                   C50866 +
               ((C2178 * C140 + C2173 * C148 + C2177 * C137 + C2172 * C147 +
                 C2176 * C136 + C2171 * C146) *
                    C50778 +
                (C2178 * C127 + C2173 * C139 + C2177 * C126 + C2172 * C138 +
                 C2176 * C125 + C2171 * C132) *
                    C121) *
                   C50995) *
                  C50878 * C50748 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                  C2178 * C124 + C2173 * C131) *
                     C121 +
                 (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                  C2178 * C135 + C2173 * C145) *
                     C50778) *
                    C50995 +
                ((C2362 + C2363 + C2364) * C121 +
                 (C2365 + C2366 + C2367) * C50778) *
                    C50866) *
                   C50878 * C501 -
               (((C2696 + C2697 + C2698) * C50778 +
                 (C2699 + C2700 + C2701) * C121) *
                    C50866 +
                ((C2367 + C2366 + C2365) * C50778 +
                 (C2364 + C2363 + C2362) * C121) *
                    C50995) *
                   C50878 * C502 +
               (((C2701 + C2700 + C2699) * C121 +
                 (C2698 + C2697 + C2696) * C50778) *
                    C50995 +
                ((C2176 * C600 + C2171 * C608 + C2177 * C599 + C2172 * C607 +
                  C2178 * C598 + C2173 * C606) *
                     C121 +
                 (C2176 * C604 + C2171 * C612 + C2177 * C603 + C2172 * C611 +
                  C2178 * C602 + C2173 * C610) *
                     C50778) *
                    C50866) *
                   C50878 * C503) *
                  C50974 +
              ((((C2368 + C2369 + C2370) * C121 +
                 (C2371 + C2372 + C2373) * C50778) *
                    C50995 +
                ((C2702 + C2703 + C2704) * C121 +
                 (C2705 + C2706 + C2707) * C50778) *
                    C50866) *
                   C50878 * C502 -
               (((C2373 + C2372 + C2371) * C50778 +
                 (C2370 + C2369 + C2368) * C121) *
                    C50866 +
                ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
                  C2176 * C134 + C2171 * C144) *
                     C50778 +
                 (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
                  C2176 * C123 + C2171 * C130) *
                     C121) *
                    C50995) *
                   C50878 * C501 -
               (((C2178 * C601 + C2173 * C609 + C2177 * C602 + C2172 * C610 +
                  C2176 * C603 + C2171 * C611) *
                     C50778 +
                 (C2178 * C597 + C2173 * C605 + C2177 * C598 + C2172 * C606 +
                  C2176 * C599 + C2171 * C607) *
                     C121) *
                    C50866 +
                ((C2707 + C2706 + C2705) * C50778 +
                 (C2704 + C2703 + C2702) * C121) *
                    C50995) *
                   C50878 * C503) *
                  C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C844 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C841 -
            (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
             C2176 * C382 + C2171 * C388) *
                C845 -
            (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
             C2176 * C392 + C2171 * C400) *
                C842 +
            (C2176 * C847 + C2171 * C852 + C2177 * C848 + C2172 * C853 +
             C2178 * C849 + C2173 * C854) *
                C846 +
            (C2176 * C856 + C2171 * C862 + C2177 * C857 + C2172 * C863 +
             C2178 * C858 + C2173 * C864) *
                C843) *
               C50995 +
           ((C2362 + C2363 + C2364) * C844 + (C2365 + C2366 + C2367) * C841 -
            (C3018 + C3019 + C3020) * C845 - (C3021 + C3022 + C3023) * C842 +
            (C2176 * C968 + C2171 * C972 + C2177 * C967 + C2172 * C971 +
             C2178 * C966 + C2173 * C970) *
                C846 +
            (C2176 * C976 + C2171 * C980 + C2177 * C975 + C2172 * C979 +
             C2178 * C974 + C2173 * C978) *
                C843) *
               C50866) *
              C50878 * C50748 * C50974 +
          (((C2176 * C381 + C2171 * C387 + C2177 * C380 + C2172 * C386 +
             C2178 * C379 + C2173 * C385) *
                C845 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C841 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C844) +
            (C2176 * C391 + C2171 * C399 + C2177 * C390 + C2172 * C398 +
             C2178 * C389 + C2173 * C397) *
                C842 -
            (C2178 * C850 + C2173 * C855 + C2177 * C849 + C2172 * C854 +
             C2176 * C848 + C2171 * C853) *
                C846 -
            (C2178 * C859 + C2173 * C865 + C2177 * C858 + C2172 * C864 +
             C2176 * C857 + C2171 * C863) *
                C843) *
               C50995 +
           ((C2176 * C712 + C2171 * C720 + C2177 * C713 + C2172 * C721 +
             C2178 * C714 + C2173 * C722) *
                C845 -
            ((C2373 + C2372 + C2371) * C841 + (C2370 + C2369 + C2368) * C844) +
            (C2176 * C724 + C2171 * C736 + C2177 * C725 + C2172 * C737 +
             C2178 * C726 + C2173 * C738) *
                C842 -
            (C2178 * C965 + C2173 * C969 + C2177 * C966 + C2172 * C970 +
             C2176 * C967 + C2171 * C971) *
                C846 -
            (C2178 * C973 + C2173 * C977 + C2177 * C974 + C2172 * C978 +
             C2176 * C975 + C2171 * C979) *
                C843) *
               C50866) *
              C50878 * C50748 * C50721)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C121 +
            (C10648 * C133 + C50688 * C143) * C50778) *
               C10644 +
           ((C10648 * C256 + C50688 * C266) * C121 +
            (C10648 * C262 + C50688 * C274) * C50778) *
               C10645 +
           ((C10648 * C506 + C50688 * C511) * C121 +
            (C10648 * C515 + C50688 * C521) * C50778) *
               C10646 +
           ((C10648 * C600 + C50688 * C608) * C121 +
            (C10648 * C604 + C50688 * C612) * C50778) *
               C10647) *
              C50878 * C50748 * C113 -
          (((C10648 * C603 + C50688 * C611) * C50778 +
            (C10648 * C599 + C50688 * C607) * C121) *
               C10647 +
           ((C10648 * C516 + C50688 * C522) * C50778 +
            (C10648 * C507 + C50688 * C512) * C121) *
               C10646 +
           ((C10648 * C261 + C50688 * C273) * C50778 +
            (C10648 * C255 + C50688 * C265) * C121) *
               C10645 +
           ((C10648 * C134 + C50688 * C144) * C50778 +
            (C10648 * C123 + C50688 * C130) * C121) *
               C10644) *
              C50878 * C50748 * C114 +
          (((C10648 * C124 + C50688 * C131) * C121 +
            (C10648 * C135 + C50688 * C145) * C50778) *
               C10644 +
           ((C10648 * C254 + C50688 * C264) * C121 +
            (C10648 * C260 + C50688 * C272) * C50778) *
               C10645 +
           ((C10648 * C508 + C50688 * C513) * C121 +
            (C10648 * C517 + C50688 * C523) * C50778) *
               C10646 +
           ((C10648 * C598 + C50688 * C606) * C121 +
            (C10648 * C602 + C50688 * C610) * C50778) *
               C10647) *
              C50878 * C50748 * C115 -
          (((C10648 * C601 + C50688 * C609) * C50778 +
            (C10648 * C597 + C50688 * C605) * C121) *
               C10647 +
           ((C10648 * C518 + C50688 * C524) * C50778 +
            (C10648 * C509 + C50688 * C514) * C121) *
               C10646 +
           ((C10648 * C259 + C50688 * C271) * C50778 +
            (C10648 * C253 + C50688 * C263) * C121) *
               C10645 +
           ((C10648 * C136 + C50688 * C146) * C50778 +
            (C10648 * C125 + C50688 * C132) * C121) *
               C10644) *
              C50878 * C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C10644 +
            (C10802 + C10803) * C10645 + C11016 * C10646 + C11017 * C10647) *
               C50878 * C501 -
           ((C11032 + C11033) * C10647 + (C10807 + C10806) * C10646 +
            (C10805 + C10804) * C10645 + (C10803 + C10802) * C10644) *
               C50878 * C502 +
           (C11016 * C10644 + C11017 * C10645 + (C11033 + C11032) * C10646 +
            ((C10648 * C8435 + C50688 * C8439) * C121 +
             (C10648 * C8437 + C50688 * C8441) * C50778) *
                C10647) *
               C50878 * C503) *
              C50974 +
          (((C10808 + C10809) * C10644 + (C10810 + C10811) * C10645 +
            (C10812 + C10813) * C10646 + (C11034 + C11035) * C10647) *
               C50878 * C502 -
           (C11026 * C10647 + C11027 * C10646 + (C10809 + C10808) * C10645 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C10644) *
               C50878 * C501 -
           (((C10648 * C8436 + C50688 * C8440) * C50778 +
             (C10648 * C8434 + C50688 * C8438) * C121) *
                C10647 +
            (C11035 + C11034) * C10646 + C11026 * C10645 + C11027 * C10644) *
               C50878 * C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C844 +
            (C10648 * C133 + C50688 * C143) * C841 -
            (C10648 * C382 + C50688 * C388) * C845 -
            (C10648 * C392 + C50688 * C400) * C842 +
            (C10648 * C847 + C50688 * C852) * C846 +
            (C10648 * C856 + C50688 * C862) * C843) *
               C10644 +
           (C10784 * C844 + C10785 * C841 - C11242 * C845 - C11243 * C842 +
            (C10648 * C968 + C50688 * C972) * C846 +
            (C10648 * C976 + C50688 * C980) * C843) *
               C10645 +
           (C10786 * C844 + C10787 * C841 - C11245 * C845 - C11246 * C842 +
            (C10648 * C3323 + C50688 * C3326) * C846 +
            (C10648 * C3329 + C50688 * C3332) * C843) *
               C10646 +
           (C10788 * C844 + C10789 * C841 - C11248 * C845 - C11249 * C842 +
            (C10648 * C8951 + C50688 * C8953) * C846 +
            (C10648 * C8955 + C50688 * C8957) * C843) *
               C10647) *
              C50878 * C50748 * C50974 +
          (((C10648 * C381 + C50688 * C387) * C845 -
            ((C10648 * C134 + C50688 * C144) * C841 +
             (C10648 * C123 + C50688 * C130) * C844) +
            (C10648 * C391 + C50688 * C399) * C842 -
            (C10648 * C848 + C50688 * C853) * C846 -
            (C10648 * C857 + C50688 * C863) * C843) *
               C10644 +
           ((C10648 * C712 + C50688 * C720) * C845 -
            (C10791 * C841 + C10790 * C844) +
            (C10648 * C724 + C50688 * C736) * C842 -
            (C10648 * C967 + C50688 * C971) * C846 -
            (C10648 * C975 + C50688 * C979) * C843) *
               C10645 +
           ((C10648 * C717 + C50688 * C729) * C845 -
            (C10793 * C841 + C10792 * C844) +
            (C10648 * C733 + C50688 * C741) * C842 -
            (C10648 * C3322 + C50688 * C3325) * C846 -
            (C10648 * C3328 + C50688 * C3331) * C843) *
               C10646 +
           ((C10648 * C2982 + C50688 * C2985) * C845 -
            (C10795 * C841 + C10794 * C844) +
            (C10648 * C2988 + C50688 * C2991) * C842 -
            (C10648 * C8950 + C50688 * C8952) * C846 -
            (C10648 * C8954 + C50688 * C8956) * C843) *
               C10647) *
              C50878 * C50748 * C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C10648 * C122 + C50688 * C129) * C121 +
                                 (C10648 * C133 + C50688 * C143) * C50778) *
                                    C50995 +
                                (C10802 + C10803) * C50866) *
                                   C15526 +
                               ((C13056 * C121 + C13057 * C50778) * C50995 +
                                (C12874 + C12875) * C50866) *
                                   C15527 +
                               ((C13638 * C121 + C13639 * C50778) * C50995 +
                                (C11488 * C121 + C11489 * C50778) * C50866) *
                                   C15528) *
                                  C50748 * C113 -
                              (((C13643 * C50778 + C13642 * C121) * C50866 +
                                (C13641 * C50778 + C13640 * C121) * C50995) *
                                   C15528 +
                               ((C12879 + C12878) * C50866 +
                                (C13059 * C50778 + C13058 * C121) * C50995) *
                                   C15527 +
                               ((C10809 + C10808) * C50866 +
                                ((C10648 * C134 + C50688 * C144) * C50778 +
                                 (C10648 * C123 + C50688 * C130) * C121) *
                                    C50995) *
                                   C15526) *
                                  C50748 * C114 +
                              ((((C10648 * C124 + C50688 * C131) * C121 +
                                 (C10648 * C135 + C50688 * C145) * C50778) *
                                    C50995 +
                                (C10814 + C10815) * C50866) *
                                   C15526 +
                               ((C13060 * C121 + C13061 * C50778) * C50995 +
                                (C12894 + C12895) * C50866) *
                                   C15527 +
                               (((C10648 * C849 + C50688 * C854) * C121 +
                                 (C10648 * C858 + C50688 * C864) * C50778) *
                                    C50995 +
                                ((C10648 * C966 + C50688 * C970) * C121 +
                                 (C10648 * C974 + C50688 * C978) * C50778) *
                                    C50866) *
                                   C15528) *
                                  C50748 * C115 -
                              ((((C10648 * C973 + C50688 * C977) * C50778 +
                                 (C10648 * C965 + C50688 * C969) * C121) *
                                    C50866 +
                                ((C10648 * C859 + C50688 * C865) * C50778 +
                                 (C10648 * C850 + C50688 * C855) * C121) *
                                    C50995) *
                                   C15528 +
                               (((C10648 * C726 + C50688 * C738) * C50778 +
                                 (C10648 * C714 + C50688 * C722) * C121) *
                                    C50866 +
                                ((C10648 * C389 + C50688 * C397) * C50778 +
                                 (C10648 * C379 + C50688 * C385) * C121) *
                                    C50995) *
                                   C15527 +
                               (((C10648 * C259 + C50688 * C271) * C50778 +
                                 (C10648 * C253 + C50688 * C263) * C121) *
                                    C50866 +
                                ((C10648 * C136 + C50688 * C146) * C50778 +
                                 (C10648 * C125 + C50688 * C132) * C121) *
                                    C50995) *
                                   C15526) *
                                  C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C50995 +
             (C10802 + C10803) * C50866) *
                C15526 +
            ((C13056 * C121 + C13057 * C50778) * C50995 +
             (C12874 + C12875) * C50866) *
                C15527 +
            ((C13638 * C121 + C13639 * C50778) * C50995 +
             (C18456 + C18457) * C50866) *
                C15528) *
               C501 -
           (((C18766 + C18767) * C50866 + (C18457 + C18456) * C50995) * C15528 +
            ((C12877 + C12876) * C50866 + (C12875 + C12874) * C50995) * C15527 +
            ((C10805 + C10804) * C50866 + (C10803 + C10802) * C50995) *
                C15526) *
               C502 +
           ((C11016 * C50995 + C11017 * C50866) * C15526 +
            (C13208 * C50995 + (C13210 + C13209) * C50866) * C15527 +
            ((C18767 + C18766) * C50995 +
             (C11492 * C121 + C11493 * C50778) * C50866) *
                C15528) *
               C503) *
              C50974 +
          ((((C10808 + C10809) * C50995 + (C10810 + C10811) * C50866) * C15526 +
            ((C12878 + C12879) * C50995 + (C12880 + C12881) * C50866) * C15527 +
            ((C18458 + C18459) * C50995 + (C18768 + C18769) * C50866) *
                C15528) *
               C502 -
           (((C18459 + C18458) * C50866 +
             (C13641 * C50778 + C13640 * C121) * C50995) *
                C15528 +
            ((C12879 + C12878) * C50866 +
             (C13059 * C50778 + C13058 * C121) * C50995) *
                C15527 +
            ((C10809 + C10808) * C50866 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C50995) *
                C15526) *
               C501 -
           ((((C10648 * C8954 + C50688 * C8956) * C50778 +
              (C10648 * C8950 + C50688 * C8952) * C121) *
                 C50866 +
             (C18769 + C18768) * C50995) *
                C15528 +
            ((C13212 + C13211) * C50866 + C13213 * C50995) * C15527 +
            (C11026 * C50866 + C11027 * C50995) * C15526) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C844 +
             (C10648 * C133 + C50688 * C143) * C841 - C13056 * C845 -
             C13057 * C842 + C13638 * C846 + C13639 * C843) *
                C50995 +
            (C11464 + C11465 - C11466 - C11467 + C11494 + C11495) * C50866) *
               C15526 +
           ((C13056 * C844 + C13057 * C841 - C13638 * C845 - C13639 * C842 +
             C13926 * C846 + C13927 * C843) *
                C50995 +
            (C13792 + C13793 - C13794 - C13795 + C13812 + C13813) * C50866) *
               C15527 +
           ((C13638 * C844 + C13639 * C841 - C13926 * C845 - C13927 * C842 +
             (C10648 * C6201 + C50688 * C6204) * C846 +
             (C10648 * C6207 + C50688 * C6210) * C843) *
                C50995 +
            (C11488 * C844 + C11489 * C841 - C13808 * C845 - C13809 * C842 +
             (C10648 * C13913 + C50688 * C13915) * C846 +
             (C10648 * C13916 + C50688 * C13919) * C843) *
                C50866) *
               C15528) *
              C50748 * C50974 +
          (((C13058 * C845 -
             ((C10648 * C134 + C50688 * C144) * C841 +
              (C10648 * C123 + C50688 * C130) * C844) +
             C13059 * C842 - C13640 * C846 - C13641 * C843) *
                C50995 +
            (C11914 * C845 - (C10791 * C841 + C10790 * C844) + C11915 * C842 -
             C13642 * C846 - C13643 * C843) *
                C50866) *
               C15526 +
           ((C13640 * C845 - (C13059 * C841 + C13058 * C844) + C13641 * C842 -
             C19178 * C846 - C19179 * C843) *
                C50995 +
            (C13642 * C845 - (C11915 * C841 + C11914 * C844) + C13643 * C842 -
             C19180 * C846 - C19181 * C843) *
                C50866) *
               C15527 +
           ((C19178 * C845 - (C13641 * C841 + C13640 * C844) + C19179 * C842 -
             (C10648 * C6200 + C50688 * C6203) * C846 -
             (C10648 * C6206 + C50688 * C6209) * C843) *
                C50995 +
            (C19180 * C845 - (C13643 * C841 + C13642 * C844) + C19181 * C842 -
             (C10648 * C16603 + C50688 * C16604) * C846 -
             (C10648 * C16605 + C50688 * C16606) * C843) *
                C50866) *
               C15528) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                  C2178 * C124 + C2173 * C131) *
                     C121 +
                 (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                  C2178 * C135 + C2173 * C145) *
                     C50778) *
                    C50995 +
                ((C2362 + C2363 + C2364) * C121 +
                 (C2365 + C2366 + C2367) * C50778) *
                    C50866) *
                   C50878 * C50981 -
               (((C2178 * C517 + C2173 * C523 + C2177 * C516 + C2172 * C522 +
                  C2176 * C515 + C2171 * C521) *
                     C50778 +
                 (C2178 * C508 + C2173 * C513 + C2177 * C507 + C2172 * C512 +
                  C2176 * C506 + C2171 * C511) *
                     C121) *
                    C50866 +
                ((C2367 + C2366 + C2365) * C50778 +
                 (C2364 + C2363 + C2362) * C121) *
                    C50995) *
                   C50878 * C50764) *
                  C250 +
              ((((C2368 + C2369 + C2370) * C121 +
                 (C2371 + C2372 + C2373) * C50778) *
                    C50995 +
                ((C2176 * C507 + C2171 * C512 + C2177 * C508 + C2172 * C513 +
                  C2178 * C509 + C2173 * C514) *
                     C121 +
                 (C2176 * C516 + C2171 * C522 + C2177 * C517 + C2172 * C523 +
                  C2178 * C518 + C2173 * C524) *
                     C50778) *
                    C50866) *
                   C50878 * C50764 -
               (((C2373 + C2372 + C2371) * C50778 +
                 (C2370 + C2369 + C2368) * C121) *
                    C50866 +
                ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
                  C2176 * C134 + C2171 * C144) *
                     C50778 +
                 (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
                  C2176 * C123 + C2171 * C130) *
                     C121) *
                    C50995) *
                   C50878 * C50981) *
                  C251 +
              ((((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
                  C2178 * C126 + C2173 * C138) *
                     C121 +
                 (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
                  C2178 * C137 + C2173 * C147) *
                     C50778) *
                    C50995 +
                ((C2374 + C2375 + C2376) * C121 +
                 (C2377 + C2378 + C2379) * C50778) *
                    C50866) *
                   C50878 * C50981 -
               (((C2178 * C519 + C2173 * C525 + C2177 * C518 + C2172 * C524 +
                  C2176 * C517 + C2171 * C523) *
                     C50778 +
                 (C2178 * C510 + C2173 * C520 + C2177 * C509 + C2172 * C514 +
                  C2176 * C508 + C2171 * C513) *
                     C121) *
                    C50866 +
                ((C2379 + C2378 + C2377) * C50778 +
                 (C2376 + C2375 + C2374) * C121) *
                    C50995) *
                   C50878 * C50764) *
                  C252) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                 C2178 * C124 + C2173 * C131) *
                    C121 +
                (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                 C2178 * C135 + C2173 * C145) *
                    C50778) *
                   C50995 +
               ((C2362 + C2363 + C2364) * C121 +
                (C2365 + C2366 + C2367) * C50778) *
                   C50866) *
                  C50878 * C592 -
              (((C2696 + C2697 + C2698) * C50778 +
                (C2699 + C2700 + C2701) * C121) *
                   C50866 +
               ((C2367 + C2366 + C2365) * C50778 +
                (C2364 + C2363 + C2362) * C121) *
                   C50995) *
                  C50878 * C593 +
              (((C2701 + C2700 + C2699) * C121 +
                (C2698 + C2697 + C2696) * C50778) *
                   C50995 +
               ((C2830 + C2831 + C2832) * C121 +
                (C2833 + C2834 + C2835) * C50778) *
                   C50866) *
                  C50878 * C594 -
              (((C2178 * C2808 + C2173 * C2814 + C2177 * C2809 + C2172 * C2815 +
                 C2176 * C2810 + C2171 * C2816) *
                    C50778 +
                (C2178 * C2805 + C2173 * C2811 + C2177 * C2806 + C2172 * C2812 +
                 C2176 * C2807 + C2171 * C2813) *
                    C121) *
                   C50866 +
               ((C2835 + C2834 + C2833) * C50778 +
                (C2832 + C2831 + C2830) * C121) *
                   C50995) *
                  C50878 * C595) *
             C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C844 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C841 -
            (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
             C2176 * C382 + C2171 * C388) *
                C845 -
            (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
             C2176 * C392 + C2171 * C400) *
                C842 +
            (C2176 * C847 + C2171 * C852 + C2177 * C848 + C2172 * C853 +
             C2178 * C849 + C2173 * C854) *
                C846 +
            (C2176 * C856 + C2171 * C862 + C2177 * C857 + C2172 * C863 +
             C2178 * C858 + C2173 * C864) *
                C843) *
               C50995 +
           ((C2362 + C2363 + C2364) * C844 + (C2365 + C2366 + C2367) * C841 -
            (C3018 + C3019 + C3020) * C845 - (C3021 + C3022 + C3023) * C842 +
            (C3346 + C3347 + C3348) * C846 + (C3349 + C3350 + C3351) * C843) *
               C50866) *
              C50878 * C50981 +
          (((C3020 + C3019 + C3018) * C845 -
            ((C2367 + C2366 + C2365) * C841 + (C2364 + C2363 + C2362) * C844) +
            (C3023 + C3022 + C3021) * C842 - (C3348 + C3347 + C3346) * C846 -
            (C3351 + C3350 + C3349) * C843) *
               C50995 +
           ((C3024 + C3025 + C3026) * C845 -
            ((C2696 + C2697 + C2698) * C841 + (C2699 + C2700 + C2701) * C844) +
            (C3027 + C3028 + C3029) * C842 -
            (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
             C2176 * C3323 + C2171 * C3326) *
                C846 -
            (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
             C2176 * C3329 + C2171 * C3332) *
                C843) *
               C50866) *
              C50878 * C50764) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C10644 +
            (C10802 + C10803) * C10645 + (C10804 + C10805) * C10646 +
            (C10806 + C10807) * C10647) *
               C50878 * C50981 -
           (((C10648 * C2810 + C50688 * C2816) * C50778 +
             (C10648 * C2807 + C50688 * C2813) * C121) *
                C10647 +
            (C10807 + C10806) * C10646 + (C10805 + C10804) * C10645 +
            (C10803 + C10802) * C10644) *
               C50878 * C50764) *
              C250 +
          (((C10808 + C10809) * C10644 + (C10810 + C10811) * C10645 +
            (C10812 + C10813) * C10646 +
            ((C10648 * C2806 + C50688 * C2812) * C121 +
             (C10648 * C2809 + C50688 * C2815) * C50778) *
                C10647) *
               C50878 * C50764 -
           ((C10813 + C10812) * C10647 + (C10811 + C10810) * C10646 +
            (C10809 + C10808) * C10645 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C10644) *
               C50878 * C50981) *
              C251 +
          ((((C10648 * C124 + C50688 * C131) * C121 +
             (C10648 * C135 + C50688 * C145) * C50778) *
                C10644 +
            (C10814 + C10815) * C10645 + (C10816 + C10817) * C10646 +
            (C10818 + C10819) * C10647) *
               C50878 * C50981 -
           (((C10648 * C2808 + C50688 * C2814) * C50778 +
             (C10648 * C2805 + C50688 * C2811) * C121) *
                C10647 +
            (C10819 + C10818) * C10646 + (C10817 + C10816) * C10645 +
            (C10815 + C10814) * C10644) *
               C50878 * C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C121 +
            (C10648 * C133 + C50688 * C143) * C50778) *
               C10644 +
           (C10802 + C10803) * C10645 + C11016 * C10646 + C11017 * C10647) *
              C50878 * C592 -
          (C11106 * C10647 + C11107 * C10646 + (C10805 + C10804) * C10645 +
           (C10803 + C10802) * C10644) *
              C50878 * C593 +
          (C11016 * C10644 + C11017 * C10645 + (C11033 + C11032) * C10646 +
           (C11114 + C11115) * C10647) *
              C50878 * C594 -
          (((C10648 * C11102 + C50688 * C11104) * C50778 +
            (C10648 * C11101 + C50688 * C11103) * C121) *
               C10647 +
           (C11115 + C11114) * C10646 + C11106 * C10645 + C11107 * C10644) *
              C50878 * C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C844 +
            (C10648 * C133 + C50688 * C143) * C841 -
            (C10648 * C382 + C50688 * C388) * C845 -
            (C10648 * C392 + C50688 * C400) * C842 +
            (C10648 * C847 + C50688 * C852) * C846 +
            (C10648 * C856 + C50688 * C862) * C843) *
               C10644 +
           (C11464 + C11465 - C11466 - C11467 + C11494 + C11495) * C10645 +
           (C11472 + C11473 - C11474 - C11475 + C11496 + C11497) * C10646 +
           (C11480 + C11481 - C11482 - C11483 + C11498 + C11499) * C10647) *
              C50878 * C50981 +
          ((C11466 - (C11465 + C11464) + C11467 - C11494 - C11495) * C10644 +
           (C11474 - (C11473 + C11472) + C11475 - C11496 - C11497) * C10645 +
           (C11482 - (C11481 + C11480) + C11483 - C11498 - C11499) * C10646 +
           (C11250 * C845 - (C11028 * C841 + C11029 * C844) + C11251 * C842 -
            (C10648 * C11459 + C50688 * C11460) * C846 -
            (C10648 * C11461 + C50688 * C11462) * C843) *
               C10647) *
              C50878 * C50764) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C50995 +
             (C10802 + C10803) * C50866) *
                C15526 +
            ((C13056 * C121 + C13057 * C50778) * C50995 +
             (C12874 + C12875) * C50866) *
                C15527 +
            ((C13638 * C121 + C13639 * C50778) * C50995 +
             (C18456 + C18457) * C50866) *
                C15528) *
               C50981 -
           (((C11491 * C50778 + C11490 * C121) * C50866 +
             (C18457 + C18456) * C50995) *
                C15528 +
            ((C12877 + C12876) * C50866 + (C12875 + C12874) * C50995) * C15527 +
            ((C10805 + C10804) * C50866 + (C10803 + C10802) * C50995) *
                C15526) *
               C50764) *
              C250 +
          ((((C10808 + C10809) * C50995 + (C10810 + C10811) * C50866) * C15526 +
            ((C12878 + C12879) * C50995 + (C12880 + C12881) * C50866) * C15527 +
            ((C18458 + C18459) * C50995 +
             (C13644 * C121 + C13645 * C50778) * C50866) *
                C15528) *
               C50764 -
           (((C18459 + C18458) * C50866 +
             (C13641 * C50778 + C13640 * C121) * C50995) *
                C15528 +
            ((C12879 + C12878) * C50866 +
             (C13059 * C50778 + C13058 * C121) * C50995) *
                C15527 +
            ((C10809 + C10808) * C50866 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C50995) *
                C15526) *
               C50981) *
              C251 +
          (((((C10648 * C124 + C50688 * C131) * C121 +
              (C10648 * C135 + C50688 * C145) * C50778) *
                 C50995 +
             (C10814 + C10815) * C50866) *
                C15526 +
            ((C13060 * C121 + C13061 * C50778) * C50995 +
             (C12894 + C12895) * C50866) *
                C15527 +
            (((C10648 * C849 + C50688 * C854) * C121 +
              (C10648 * C858 + C50688 * C864) * C50778) *
                 C50995 +
             (C18466 + C18467) * C50866) *
                C15528) *
               C50981 -
           ((((C10648 * C3327 + C50688 * C3330) * C50778 +
              (C10648 * C3321 + C50688 * C3324) * C121) *
                 C50866 +
             (C18467 + C18466) * C50995) *
                C15528 +
            ((C12897 + C12896) * C50866 + (C12895 + C12894) * C50995) * C15527 +
            ((C10817 + C10816) * C50866 + (C10815 + C10814) * C50995) *
                C15526) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C50995 +
            (C10802 + C10803) * C50866) *
               C15526 +
           ((C13056 * C121 + C13057 * C50778) * C50995 +
            (C12874 + C12875) * C50866) *
               C15527 +
           ((C13638 * C121 + C13639 * C50778) * C50995 +
            (C18456 + C18457) * C50866) *
               C15528) *
              C592 -
          (((C18766 + C18767) * C50866 + (C18457 + C18456) * C50995) * C15528 +
           ((C12877 + C12876) * C50866 + (C12875 + C12874) * C50995) * C15527 +
           ((C10805 + C10804) * C50866 + (C10803 + C10802) * C50995) * C15526) *
              C593 +
          ((C11016 * C50995 + C11017 * C50866) * C15526 +
           (C13208 * C50995 + (C13210 + C13209) * C50866) * C15527 +
           ((C18767 + C18766) * C50995 + (C18868 + C18869) * C50866) * C15528) *
              C594 -
          ((((C10648 * C11461 + C50688 * C11462) * C50778 +
             (C10648 * C11459 + C50688 * C11460) * C121) *
                C50866 +
            (C18869 + C18868) * C50995) *
               C15528 +
           ((C13314 + C13313) * C50866 + C13312 * C50995) * C15527 +
           (C11106 * C50866 + C11107 * C50995) * C15526) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C844 +
             (C10648 * C133 + C50688 * C143) * C841 - C13056 * C845 -
             C13057 * C842 + C13638 * C846 + C13639 * C843) *
                C50995 +
            (C11464 + C11465 - C11466 - C11467 + C11494 + C11495) * C50866) *
               C15526 +
           ((C13056 * C844 + C13057 * C841 - C13638 * C845 - C13639 * C842 +
             C13926 * C846 + C13927 * C843) *
                C50995 +
            (C13792 + C13793 - C13794 - C13795 + C13812 + C13813) * C50866) *
               C15527 +
           ((C13638 * C844 + C13639 * C841 - C13926 * C845 - C13927 * C842 +
             (C10648 * C6201 + C50688 * C6204) * C846 +
             (C10648 * C6207 + C50688 * C6210) * C843) *
                C50995 +
            (C19328 + C19329 - C19330 - C19331 + C19338 + C19339) * C50866) *
               C15528) *
              C50981 +
          (((C11466 - (C11465 + C11464) + C11467 - C11494 - C11495) * C50995 +
            (C11474 - (C11473 + C11472) + C11475 - C11496 - C11497) * C50866) *
               C15526 +
           ((C13794 - (C13793 + C13792) + C13795 - C13812 - C13813) * C50995 +
            (C13802 - (C13801 + C13800) + C13803 - C13814 - C13815) * C50866) *
               C15527 +
           ((C19330 - (C19329 + C19328) + C19331 - C19338 - C19339) * C50995 +
            (C13810 * C845 - (C11491 * C841 + C11490 * C844) + C13811 * C842 -
             (C10648 * C13914 + C50688 * C13917) * C846 -
             (C10648 * C13918 + C50688 * C13920) * C843) *
                C50866) *
               C15528) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                 C2178 * C124 + C2173 * C131) *
                    C377 +
                (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                 C2178 * C135 + C2173 * C145) *
                    C50983 -
                (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
                 C2176 * C382 + C2171 * C388) *
                    C378 -
                (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
                 C2176 * C392 + C2171 * C400) *
                    C50790) *
                   C50995 +
               ((C2362 + C2363 + C2364) * C377 +
                (C2365 + C2366 + C2367) * C50983 -
                (C2178 * C713 + C2173 * C721 + C2177 * C712 + C2172 * C720 +
                 C2176 * C711 + C2171 * C719) *
                    C378 -
                (C2178 * C725 + C2173 * C737 + C2177 * C724 + C2172 * C736 +
                 C2176 * C723 + C2171 * C735) *
                    C50790) *
                   C50866) *
                  C50878 * C50748 * C250 +
              (((C2176 * C381 + C2171 * C387 + C2177 * C380 + C2172 * C386 +
                 C2178 * C379 + C2173 * C385) *
                    C378 -
                ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
                  C2176 * C134 + C2171 * C144) *
                     C50983 +
                 (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
                  C2176 * C123 + C2171 * C130) *
                     C377) +
                (C2176 * C391 + C2171 * C399 + C2177 * C390 + C2172 * C398 +
                 C2178 * C389 + C2173 * C397) *
                    C50790) *
                   C50995 +
               ((C2176 * C712 + C2171 * C720 + C2177 * C713 + C2172 * C721 +
                 C2178 * C714 + C2173 * C722) *
                    C378 -
                ((C2373 + C2372 + C2371) * C50983 +
                 (C2370 + C2369 + C2368) * C377) +
                (C2176 * C724 + C2171 * C736 + C2177 * C725 + C2172 * C737 +
                 C2178 * C726 + C2173 * C738) *
                    C50790) *
                   C50866) *
                  C50878 * C50748 * C251 +
              (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
                 C2178 * C126 + C2173 * C138) *
                    C377 +
                (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
                 C2178 * C137 + C2173 * C147) *
                    C50983 -
                (C2178 * C383 + C2173 * C393 + C2177 * C379 + C2172 * C385 +
                 C2176 * C380 + C2171 * C386) *
                    C378 -
                (C2178 * C394 + C2173 * C401 + C2177 * C389 + C2172 * C397 +
                 C2176 * C390 + C2171 * C398) *
                    C50790) *
                   C50995 +
               ((C2374 + C2375 + C2376) * C377 +
                (C2377 + C2378 + C2379) * C50983 -
                (C2178 * C1407 + C2173 * C1408 + C2177 * C714 + C2172 * C722 +
                 C2176 * C713 + C2171 * C721) *
                    C378 -
                (C2178 * C1409 + C2173 * C1410 + C2177 * C726 + C2172 * C738 +
                 C2176 * C725 + C2171 * C737) *
                    C50790) *
                   C50866) *
                  C50878 * C50748 * C252) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                 C2178 * C124 + C2173 * C131) *
                    C377 +
                (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                 C2178 * C135 + C2173 * C145) *
                    C50983 -
                (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
                 C2176 * C382 + C2171 * C388) *
                    C378 -
                (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
                 C2176 * C392 + C2171 * C400) *
                    C50790) *
                   C50995 +
               ((C2362 + C2363 + C2364) * C377 +
                (C2365 + C2366 + C2367) * C50983 -
                (C3018 + C3019 + C3020) * C378 -
                (C3021 + C3022 + C3023) * C50790) *
                   C50866) *
                  C50878 * C501 +
              (((C3020 + C3019 + C3018) * C378 -
                ((C2367 + C2366 + C2365) * C50983 +
                 (C2364 + C2363 + C2362) * C377) +
                (C3023 + C3022 + C3021) * C50790) *
                   C50995 +
               ((C3024 + C3025 + C3026) * C378 -
                ((C2696 + C2697 + C2698) * C50983 +
                 (C2699 + C2700 + C2701) * C377) +
                (C3027 + C3028 + C3029) * C50790) *
                   C50866) *
                  C50878 * C502 +
              (((C2701 + C2700 + C2699) * C377 +
                (C2698 + C2697 + C2696) * C50983 -
                (C3026 + C3025 + C3024) * C378 -
                (C3029 + C3028 + C3027) * C50790) *
                   C50995 +
               ((C2830 + C2831 + C2832) * C377 +
                (C2833 + C2834 + C2835) * C50983 -
                (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
                 C2176 * C2983 + C2171 * C2986) *
                    C378 -
                (C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
                 C2176 * C2989 + C2171 * C2992) *
                    C50790) *
                   C50866) *
                  C50878 * C503) *
             C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
            C2178 * C124 + C2173 * C131) *
               C1051 +
           (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
            C2178 * C135 + C2173 * C145) *
               C1047 -
           (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
            C2176 * C382 + C2171 * C388) *
               C1052 -
           (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
            C2176 * C392 + C2171 * C400) *
               C1048 +
           (C2176 * C847 + C2171 * C852 + C2177 * C848 + C2172 * C853 +
            C2178 * C849 + C2173 * C854) *
               C1053 +
           (C2176 * C856 + C2171 * C862 + C2177 * C857 + C2172 * C863 +
            C2178 * C858 + C2173 * C864) *
               C1049 -
           (C2178 * C1056 + C2173 * C1060 + C2177 * C1057 + C2172 * C1061 +
            C2176 * C1058 + C2171 * C1062) *
               C1054 -
           (C2178 * C1064 + C2173 * C1068 + C2177 * C1065 + C2172 * C1069 +
            C2176 * C1066 + C2171 * C1070) *
               C1050) *
              C50995 +
          ((C2362 + C2363 + C2364) * C1051 + (C2365 + C2366 + C2367) * C1047 -
           (C3018 + C3019 + C3020) * C1052 - (C3021 + C3022 + C3023) * C1048 +
           (C3346 + C3347 + C3348) * C1053 + (C3349 + C3350 + C3351) * C1049 -
           (C2178 * C3449 + C2173 * C3452 + C2177 * C3450 + C2172 * C3453 +
            C2176 * C3451 + C2171 * C3454) *
               C1054 -
           (C2178 * C3455 + C2173 * C3458 + C2177 * C3456 + C2172 * C3459 +
            C2176 * C3457 + C2171 * C3460) *
               C1050) *
              C50866) *
         C50878 * C50748 * C50716) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C377 +
            (C10648 * C133 + C50688 * C143) * C50983 -
            (C10648 * C382 + C50688 * C388) * C378 -
            (C10648 * C392 + C50688 * C400) * C50790) *
               C10644 +
           (C10784 * C377 + C10785 * C50983 -
            (C10648 * C711 + C50688 * C719) * C378 -
            (C10648 * C723 + C50688 * C735) * C50790) *
               C10645 +
           (C10786 * C377 + C10787 * C50983 -
            (C10648 * C718 + C50688 * C730) * C378 -
            (C10648 * C734 + C50688 * C742) * C50790) *
               C10646 +
           (C10788 * C377 + C10789 * C50983 -
            (C10648 * C2983 + C50688 * C2986) * C378 -
            (C10648 * C2989 + C50688 * C2992) * C50790) *
               C10647) *
              C50878 * C50748 * C250 +
          (((C10648 * C381 + C50688 * C387) * C378 -
            ((C10648 * C134 + C50688 * C144) * C50983 +
             (C10648 * C123 + C50688 * C130) * C377) +
            (C10648 * C391 + C50688 * C399) * C50790) *
               C10644 +
           ((C10648 * C712 + C50688 * C720) * C378 -
            (C10791 * C50983 + C10790 * C377) +
            (C10648 * C724 + C50688 * C736) * C50790) *
               C10645 +
           ((C10648 * C717 + C50688 * C729) * C378 -
            (C10793 * C50983 + C10792 * C377) +
            (C10648 * C733 + C50688 * C741) * C50790) *
               C10646 +
           ((C10648 * C2982 + C50688 * C2985) * C378 -
            (C10795 * C50983 + C10794 * C377) +
            (C10648 * C2988 + C50688 * C2991) * C50790) *
               C10647) *
              C50878 * C50748 * C251 +
          (((C10648 * C124 + C50688 * C131) * C377 +
            (C10648 * C135 + C50688 * C145) * C50983 -
            (C10648 * C380 + C50688 * C386) * C378 -
            (C10648 * C390 + C50688 * C398) * C50790) *
               C10644 +
           (C10796 * C377 + C10797 * C50983 -
            (C10648 * C713 + C50688 * C721) * C378 -
            (C10648 * C725 + C50688 * C737) * C50790) *
               C10645 +
           (C10798 * C377 + C10799 * C50983 -
            (C10648 * C716 + C50688 * C728) * C378 -
            (C10648 * C732 + C50688 * C740) * C50790) *
               C10646 +
           (C10800 * C377 + C10801 * C50983 -
            (C10648 * C2981 + C50688 * C2984) * C378 -
            (C10648 * C2987 + C50688 * C2990) * C50790) *
               C10647) *
              C50878 * C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C377 +
            (C10648 * C133 + C50688 * C143) * C50983 -
            (C10648 * C382 + C50688 * C388) * C378 -
            (C10648 * C392 + C50688 * C400) * C50790) *
               C10644 +
           (C11218 + C11219 - C11252 - C11253) * C10645 + C11262 * C10646 +
           C11263 * C10647) *
              C50878 * C501 +
          ((C11252 - (C11219 + C11218) + C11253) * C10644 +
           (C11254 - (C11225 + C11224) + C11255) * C10645 +
           (C11256 - (C11231 + C11230) + C11257) * C10646 +
           (C11258 - (C11238 + C11239) + C11259) * C10647) *
              C50878 * C502 +
          (C11262 * C10644 + C11263 * C10645 +
           (C11239 + C11238 - C11258 - C11259) * C10646 +
           (C11112 * C377 + C11113 * C50983 -
            (C10648 * C11213 + C50688 * C11214) * C378 -
            (C10648 * C11215 + C50688 * C11216) * C50790) *
               C10647) *
              C50878 * C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C10648 * C122 + C50688 * C129) * C1051 +
           (C10648 * C133 + C50688 * C143) * C1047 -
           (C10648 * C382 + C50688 * C388) * C1052 -
           (C10648 * C392 + C50688 * C400) * C1048 +
           (C10648 * C847 + C50688 * C852) * C1053 +
           (C10648 * C856 + C50688 * C862) * C1049 -
           (C10648 * C1058 + C50688 * C1062) * C1054 -
           (C10648 * C1066 + C50688 * C1070) * C1050) *
              C10644 +
          (C10784 * C1051 + C10785 * C1047 - C11242 * C1052 - C11243 * C1048 +
           C11488 * C1053 + C11489 * C1049 -
           (C10648 * C3451 + C50688 * C3454) * C1054 -
           (C10648 * C3457 + C50688 * C3460) * C1050) *
              C10645 +
          (C10786 * C1051 + C10787 * C1047 - C11245 * C1052 - C11246 * C1048 +
           C11490 * C1053 + C11491 * C1049 -
           (C10648 * C9081 + C50688 * C9083) * C1054 -
           (C10648 * C9085 + C50688 * C9087) * C1050) *
              C10646 +
          (C10788 * C1051 + C10789 * C1047 - C11248 * C1052 - C11249 * C1048 +
           C11492 * C1053 + C11493 * C1049 -
           (C10648 * C11565 + C50688 * C11566) * C1054 -
           (C10648 * C11567 + C50688 * C11568) * C1050) *
              C10647) *
         C50878 * C50748 * C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C50995 +
            (C11218 + C11219 - C11252 - C11253) * C50866) *
               C15526 +
           ((C13056 * C377 + C13057 * C50983 - C13638 * C378 -
             C13639 * C50790) *
                C50995 +
            (C13461 + C13462 - C13463 - C13464) * C50866) *
               C15527 +
           ((C13638 * C377 + C13639 * C50983 - C13926 * C378 -
             C13927 * C50790) *
                C50995 +
            (C11488 * C377 + C11489 * C50983 - C13808 * C378 -
             C13809 * C50790) *
                C50866) *
               C15528) *
              C50748 * C250 +
          (((C13058 * C378 -
             ((C10648 * C134 + C50688 * C144) * C50983 +
              (C10648 * C123 + C50688 * C130) * C377) +
             C13059 * C50790) *
                C50995 +
            (C11920 - (C11898 + C11899) + C11921) * C50866) *
               C15526 +
           ((C13640 * C378 - (C13059 * C50983 + C13058 * C377) +
             C13641 * C50790) *
                C50995 +
            (C14414 - (C14415 + C14416) + C14417) * C50866) *
               C15527 +
           (((C10648 * C1057 + C50688 * C1061) * C378 -
             (C13641 * C50983 + C13640 * C377) +
             (C10648 * C1065 + C50688 * C1069) * C50790) *
                C50995 +
            ((C10648 * C3450 + C50688 * C3453) * C378 -
             (C13643 * C50983 + C13642 * C377) +
             (C10648 * C3456 + C50688 * C3459) * C50790) *
                C50866) *
               C15528) *
              C50748 * C251 +
          ((((C10648 * C124 + C50688 * C131) * C377 +
             (C10648 * C135 + C50688 * C145) * C50983 - C13060 * C378 -
             C13061 * C50790) *
                C50995 +
            (C10796 * C377 + C10797 * C50983 - C12890 * C378 -
             C12891 * C50790) *
                C50866) *
               C15526 +
           ((C13060 * C377 + C13061 * C50983 - C18618 * C378 -
             C18619 * C50790) *
                C50995 +
            (C12890 * C377 + C12891 * C50983 - C18464 * C378 -
             C18465 * C50790) *
                C50866) *
               C15527 +
           ((C18618 * C377 + C18619 * C50983 -
             (C10648 * C1056 + C50688 * C1060) * C378 -
             (C10648 * C1064 + C50688 * C1068) * C50790) *
                C50995 +
            (C18464 * C377 + C18465 * C50983 -
             (C10648 * C3449 + C50688 * C3452) * C378 -
             (C10648 * C3455 + C50688 * C3458) * C50790) *
                C50866) *
               C15528) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C50995 +
            (C11218 + C11219 - C11252 - C11253) * C50866) *
               C15526 +
           ((C13056 * C377 + C13057 * C50983 - C13638 * C378 -
             C13639 * C50790) *
                C50995 +
            (C13461 + C13462 - C13463 - C13464) * C50866) *
               C15527 +
           ((C13638 * C377 + C13639 * C50983 - C13926 * C378 -
             C13927 * C50790) *
                C50995 +
            (C19016 + C19017 - C19018 - C19019) * C50866) *
               C15528) *
              C501 +
          (((C11252 - (C11219 + C11218) + C11253) * C50995 +
            (C11254 - (C11225 + C11224) + C11255) * C50866) *
               C15526 +
           ((C13463 - (C13462 + C13461) + C13464) * C50995 +
            (C13467 - (C13466 + C13465) + C13468) * C50866) *
               C15527 +
           ((C19018 - (C19017 + C19016) + C19019) * C50995 +
            (C19020 - (C19021 + C19022) + C19023) * C50866) *
               C15528) *
              C502 +
          ((C11262 * C50995 + C11263 * C50866) * C15526 +
           (C13475 * C50995 + (C13471 + C13470 - C13469 - C13472) * C50866) *
               C15527 +
           ((C19022 + C19021 - C19020 - C19023) * C50995 +
            (C11492 * C377 + C11493 * C50983 -
             (C10648 * C11565 + C50688 * C11566) * C378 -
             (C10648 * C11567 + C50688 * C11568) * C50790) *
                C50866) *
               C15528) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C1051 +
            (C10648 * C133 + C50688 * C143) * C1047 - C13056 * C1052 -
            C13057 * C1048 + C13638 * C1053 + C13639 * C1049 - C13926 * C1054 -
            C13927 * C1050) *
               C50995 +
           (C10784 * C1051 + C10785 * C1047 - C11242 * C1052 - C11243 * C1048 +
            C11488 * C1053 + C11489 * C1049 - C13808 * C1054 - C13809 * C1050) *
               C50866) *
              C15526 +
          ((C13056 * C1051 + C13057 * C1047 - C13638 * C1052 - C13639 * C1048 +
            C13926 * C1053 + C13927 * C1049 - C19446 * C1054 - C19447 * C1050) *
               C50995 +
           (C11242 * C1051 + C11243 * C1047 - C11488 * C1052 - C11489 * C1048 +
            C13808 * C1053 + C13809 * C1049 - C19336 * C1054 - C19337 * C1050) *
               C50866) *
              C15527 +
          ((C13638 * C1051 + C13639 * C1047 - C13926 * C1052 - C13927 * C1048 +
            C19446 * C1053 + C19447 * C1049 -
            (C10648 * C16720 + C50688 * C16722) * C1054 -
            (C10648 * C16724 + C50688 * C16726) * C1050) *
               C50995 +
           (C11488 * C1051 + C11489 * C1047 - C13808 * C1052 - C13809 * C1048 +
            C19336 * C1053 + C19337 * C1049 -
            (C10648 * C19437 + C50688 * C19438) * C1054 -
            (C10648 * C19439 + C50688 * C19440) * C1050) *
               C50866) *
              C15528) *
         C50748 * C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C1511 +
            (C10648 * C133 + C50688 * C143) * C1509 -
            (C10648 * C382 + C50688 * C388) * C1512 -
            (C10648 * C392 + C50688 * C400) * C50790) *
               C10644 +
           (C10784 * C1511 + C10785 * C1509 - C11242 * C1512 -
            C11243 * C50790) *
               C10645 +
           (C10786 * C1511 + C10787 * C1509 - C11245 * C1512 -
            C11246 * C50790) *
               C10646 +
           (C10788 * C1511 + C10789 * C1509 - C11248 * C1512 -
            C11249 * C50790) *
               C10647) *
              C50878 * C50748 * C51026 +
          (((C10648 * C381 + C50688 * C387) * C1512 -
            ((C10648 * C134 + C50688 * C144) * C1509 +
             (C10648 * C123 + C50688 * C130) * C1511) +
            (C10648 * C391 + C50688 * C399) * C50790) *
               C10644 +
           (C11914 * C1512 - (C10791 * C1509 + C10790 * C1511) +
            C11915 * C50790) *
               C10645 +
           (C11916 * C1512 - (C10793 * C1509 + C10792 * C1511) +
            C11917 * C50790) *
               C10646 +
           (C11918 * C1512 - (C10795 * C1509 + C10794 * C1511) +
            C11919 * C50790) *
               C10647) *
              C50878 * C50748 * C51012 +
          (((C10648 * C124 + C50688 * C131) * C1511 +
            (C10648 * C135 + C50688 * C145) * C1509 -
            (C10648 * C380 + C50688 * C386) * C1512 -
            (C10648 * C390 + C50688 * C398) * C50790) *
               C10644 +
           (C10796 * C1511 + C10797 * C1509 -
            (C10648 * C713 + C50688 * C721) * C1512 -
            (C10648 * C725 + C50688 * C737) * C50790) *
               C10645 +
           (C10798 * C1511 + C10799 * C1509 -
            (C10648 * C716 + C50688 * C728) * C1512 -
            (C10648 * C732 + C50688 * C740) * C50790) *
               C10646 +
           (C10800 * C1511 + C10801 * C1509 -
            (C10648 * C2981 + C50688 * C2984) * C1512 -
            (C10648 * C2987 + C50688 * C2990) * C50790) *
               C10647) *
              C50878 * C50748 * C1173)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1511 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C1509 -
            (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
             C2176 * C382 + C2171 * C388) *
                C1512 -
            (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
             C2176 * C392 + C2171 * C400) *
                C50790) *
               C50995 +
           ((C2362 + C2363 + C2364) * C1511 + (C2365 + C2366 + C2367) * C1509 -
            (C3018 + C3019 + C3020) * C1512 -
            (C3021 + C3022 + C3023) * C50790) *
               C50866) *
              C50878 * C50748 * C51026 +
          (((C2176 * C381 + C2171 * C387 + C2177 * C380 + C2172 * C386 +
             C2178 * C379 + C2173 * C385) *
                C1512 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C1509 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C1511) +
            (C2176 * C391 + C2171 * C399 + C2177 * C390 + C2172 * C398 +
             C2178 * C389 + C2173 * C397) *
                C50790) *
               C50995 +
           ((C3960 + C3961 + C3962) * C1512 -
            ((C2373 + C2372 + C2371) * C1509 +
             (C2370 + C2369 + C2368) * C1511) +
            (C3963 + C3964 + C3965) * C50790) *
               C50866) *
              C50878 * C50748 * C51012 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C1511 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C1509 -
            (C2178 * C383 + C2173 * C393 + C2177 * C379 + C2172 * C385 +
             C2176 * C380 + C2171 * C386) *
                C1512 -
            (C2178 * C394 + C2173 * C401 + C2177 * C389 + C2172 * C397 +
             C2176 * C390 + C2171 * C398) *
                C50790) *
               C50995 +
           ((C2374 + C2375 + C2376) * C1511 + (C2377 + C2378 + C2379) * C1509 -
            (C2178 * C1407 + C2173 * C1408 + C2177 * C714 + C2172 * C722 +
             C2176 * C713 + C2171 * C721) *
                C1512 -
            (C2178 * C1409 + C2173 * C1410 + C2177 * C726 + C2172 * C738 +
             C2176 * C725 + C2171 * C737) *
                C50790) *
               C50866) *
              C50878 * C50748 * C1173)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1511 +
             (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
             C13057 * C50790) *
                C50995 +
            (C12154 + C12155 - C12156 - C12157) * C50866) *
               C15526 +
           ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
             C13639 * C50790) *
                C50995 +
            (C14762 + C14763 - C14764 - C14765) * C50866) *
               C15527 +
           ((C13638 * C1511 + C13639 * C1509 - C13926 * C1512 -
             C13927 * C50790) *
                C50995 +
            (C11488 * C1511 + C11489 * C1509 - C13808 * C1512 -
             C13809 * C50790) *
                C50866) *
               C15528) *
              C50748 * C51026 +
          (((C13058 * C1512 -
             ((C10648 * C134 + C50688 * C144) * C1509 +
              (C10648 * C123 + C50688 * C130) * C1511) +
             C13059 * C50790) *
                C50995 +
            (C12166 - (C12167 + C12168) + C12169) * C50866) *
               C15526 +
           ((C13640 * C1512 - (C13059 * C1509 + C13058 * C1511) +
             C13641 * C50790) *
                C50995 +
            (C14770 - (C14771 + C14772) + C14773) * C50866) *
               C15527 +
           ((C19178 * C1512 - (C13641 * C1509 + C13640 * C1511) +
             C19179 * C50790) *
                C50995 +
            (C19180 * C1512 - (C13643 * C1509 + C13642 * C1511) +
             C19181 * C50790) *
                C50866) *
               C15528) *
              C50748 * C51012 +
          ((((C10648 * C124 + C50688 * C131) * C1511 +
             (C10648 * C135 + C50688 * C145) * C1509 - C13060 * C1512 -
             C13061 * C50790) *
                C50995 +
            (C10796 * C1511 + C10797 * C1509 - C12890 * C1512 -
             C12891 * C50790) *
                C50866) *
               C15526 +
           ((C13060 * C1511 + C13061 * C1509 - C18618 * C1512 -
             C18619 * C50790) *
                C50995 +
            (C12890 * C1511 + C12891 * C1509 - C18464 * C1512 -
             C18465 * C50790) *
                C50866) *
               C15527 +
           ((C18618 * C1511 + C18619 * C1509 -
             (C10648 * C1056 + C50688 * C1060) * C1512 -
             (C10648 * C1064 + C50688 * C1068) * C50790) *
                C50995 +
            (C18464 * C1511 + C18465 * C1509 -
             (C10648 * C3449 + C50688 * C3452) * C1512 -
             (C10648 * C3455 + C50688 * C3458) * C50790) *
                C50866) *
               C15528) *
              C50748 * C1173)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1511 +
             (C10648 * C133 + C50688 * C143) * C1509 -
             (C10648 * C382 + C50688 * C388) * C1512 -
             (C10648 * C392 + C50688 * C400) * C50790) *
                C10644 +
            (C12154 + C12155 - C12156 - C12157) * C10645 +
            (C12158 + C12159 - C12160 - C12161) * C10646 +
            (C12162 + C12163 - C12164 - C12165) * C10647) *
               C50878 * C50981 +
           ((C12156 - (C12155 + C12154) + C12157) * C10644 +
            (C12160 - (C12159 + C12158) + C12161) * C10645 +
            (C12164 - (C12163 + C12162) + C12165) * C10646 +
            (C11250 * C1512 - (C11028 * C1509 + C11029 * C1511) +
             C11251 * C50790) *
                C10647) *
               C50878 * C50764) *
              C1275 +
          ((((C10648 * C381 + C50688 * C387) * C1512 -
             ((C10648 * C134 + C50688 * C144) * C1509 +
              (C10648 * C123 + C50688 * C130) * C1511) +
             (C10648 * C391 + C50688 * C399) * C50790) *
                C10644 +
            (C12166 - (C12167 + C12168) + C12169) * C10645 +
            (C12170 - (C12171 + C12172) + C12173) * C10646 +
            (C12174 - (C12175 + C12176) + C12177) * C10647) *
               C50878 * C50981 +
           ((C12168 + C12167 - C12166 - C12169) * C10644 +
            (C12172 + C12171 - C12170 - C12173) * C10645 +
            (C12176 + C12175 - C12174 - C12177) * C10646 +
            (C11030 * C1511 + C11031 * C1509 -
             (C10648 * C8605 + C50688 * C8607) * C1512 -
             (C10648 * C8609 + C50688 * C8611) * C50790) *
                C10647) *
               C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C1511 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C1509 -
             (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
              C2176 * C382 + C2171 * C388) *
                 C1512 -
             (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
              C2176 * C392 + C2171 * C400) *
                 C50790) *
                C50995 +
            ((C2362 + C2363 + C2364) * C1511 + (C2365 + C2366 + C2367) * C1509 -
             (C3018 + C3019 + C3020) * C1512 -
             (C3021 + C3022 + C3023) * C50790) *
                C50866) *
               C50878 * C50981 +
           (((C3020 + C3019 + C3018) * C1512 -
             ((C2367 + C2366 + C2365) * C1509 +
              (C2364 + C2363 + C2362) * C1511) +
             (C3023 + C3022 + C3021) * C50790) *
                C50995 +
            ((C3024 + C3025 + C3026) * C1512 -
             ((C2696 + C2697 + C2698) * C1509 +
              (C2699 + C2700 + C2701) * C1511) +
             (C3027 + C3028 + C3029) * C50790) *
                C50866) *
               C50878 * C50764) *
              C1275 +
          ((((C2176 * C381 + C2171 * C387 + C2177 * C380 + C2172 * C386 +
              C2178 * C379 + C2173 * C385) *
                 C1512 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C1509 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C1511) +
             (C2176 * C391 + C2171 * C399 + C2177 * C390 + C2172 * C398 +
              C2178 * C389 + C2173 * C397) *
                 C50790) *
                C50995 +
            ((C3960 + C3961 + C3962) * C1512 -
             ((C2373 + C2372 + C2371) * C1509 +
              (C2370 + C2369 + C2368) * C1511) +
             (C3963 + C3964 + C3965) * C50790) *
                C50866) *
               C50878 * C50981 +
           (((C2368 + C2369 + C2370) * C1511 + (C2371 + C2372 + C2373) * C1509 -
             (C3962 + C3961 + C3960) * C1512 -
             (C3965 + C3964 + C3963) * C50790) *
                C50995 +
            ((C2702 + C2703 + C2704) * C1511 + (C2705 + C2706 + C2707) * C1509 -
             (C2178 * C715 + C2173 * C727 + C2177 * C716 + C2172 * C728 +
              C2176 * C717 + C2171 * C729) *
                 C1512 -
             (C2178 * C731 + C2173 * C739 + C2177 * C732 + C2172 * C740 +
              C2176 * C733 + C2171 * C741) *
                 C50790) *
                C50866) *
               C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C1511 +
              (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
              C13057 * C50790) *
                 C50995 +
             (C12154 + C12155 - C12156 - C12157) * C50866) *
                C15526 +
            ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
              C13639 * C50790) *
                 C50995 +
             (C14762 + C14763 - C14764 - C14765) * C50866) *
                C15527 +
            ((C13638 * C1511 + C13639 * C1509 - C13926 * C1512 -
              C13927 * C50790) *
                 C50995 +
             (C20278 + C20279 - C20280 - C20281) * C50866) *
                C15528) *
               C50981 +
           (((C12156 - (C12155 + C12154) + C12157) * C50995 +
             (C12160 - (C12159 + C12158) + C12161) * C50866) *
                C15526 +
            ((C14764 - (C14763 + C14762) + C14765) * C50995 +
             (C14768 - (C14767 + C14766) + C14769) * C50866) *
                C15527 +
            ((C20280 - (C20279 + C20278) + C20281) * C50995 +
             (C13810 * C1512 - (C11491 * C1509 + C11490 * C1511) +
              C13811 * C50790) *
                 C50866) *
                C15528) *
               C50764) *
              C1275 +
          ((((C13058 * C1512 -
              ((C10648 * C134 + C50688 * C144) * C1509 +
               (C10648 * C123 + C50688 * C130) * C1511) +
              C13059 * C50790) *
                 C50995 +
             (C12166 - (C12167 + C12168) + C12169) * C50866) *
                C15526 +
            ((C13640 * C1512 - (C13059 * C1509 + C13058 * C1511) +
              C13641 * C50790) *
                 C50995 +
             (C14770 - (C14771 + C14772) + C14773) * C50866) *
                C15527 +
            ((C19178 * C1512 - (C13641 * C1509 + C13640 * C1511) +
              C19179 * C50790) *
                 C50995 +
             (C20282 - (C20283 + C20284) + C20285) * C50866) *
                C15528) *
               C50981 +
           (((C12168 + C12167 - C12166 - C12169) * C50995 +
             (C12172 + C12171 - C12170 - C12173) * C50866) *
                C15526 +
            ((C14772 + C14771 - C14770 - C14773) * C50995 +
             (C14776 + C14775 - C14774 - C14777) * C50866) *
                C15527 +
            ((C20284 + C20283 - C20282 - C20285) * C50995 +
             (C13644 * C1511 + C13645 * C1509 -
              (C10648 * C9080 + C50688 * C9082) * C1512 -
              (C10648 * C9084 + C50688 * C9086) * C50790) *
                 C50866) *
                C15528) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C1744 +
            (C10648 * C133 + C50688 * C143) * C51028 -
            (C10648 * C382 + C50688 * C388) * C1745 -
            (C10648 * C392 + C50688 * C400) * C51018 +
            (C10648 * C847 + C50688 * C852) * C1746 +
            (C10648 * C856 + C50688 * C862) * C1743) *
               C10644 +
           (C10784 * C1744 + C10785 * C51028 - C11242 * C1745 -
            C11243 * C51018 + C11488 * C1746 + C11489 * C1743) *
               C10645 +
           (C10786 * C1744 + C10787 * C51028 - C11245 * C1745 -
            C11246 * C51018 + C11490 * C1746 + C11491 * C1743) *
               C10646 +
           (C10788 * C1744 + C10789 * C51028 - C11248 * C1745 -
            C11249 * C51018 + C11492 * C1746 + C11493 * C1743) *
               C10647) *
              C50878 * C50748 * C1275 +
          (((C10648 * C381 + C50688 * C387) * C1745 -
            ((C10648 * C134 + C50688 * C144) * C51028 +
             (C10648 * C123 + C50688 * C130) * C1744) +
            (C10648 * C391 + C50688 * C399) * C51018 -
            (C10648 * C848 + C50688 * C853) * C1746 -
            (C10648 * C857 + C50688 * C863) * C1743) *
               C10644 +
           (C11914 * C1745 - (C10791 * C51028 + C10790 * C1744) +
            C11915 * C51018 - (C10648 * C967 + C50688 * C971) * C1746 -
            (C10648 * C975 + C50688 * C979) * C1743) *
               C10645 +
           (C11916 * C1745 - (C10793 * C51028 + C10792 * C1744) +
            C11917 * C51018 - (C10648 * C3322 + C50688 * C3325) * C1746 -
            (C10648 * C3328 + C50688 * C3331) * C1743) *
               C10646 +
           (C11918 * C1745 - (C10795 * C51028 + C10794 * C1744) +
            C11919 * C51018 - (C10648 * C8950 + C50688 * C8952) * C1746 -
            (C10648 * C8954 + C50688 * C8956) * C1743) *
               C10647) *
              C50878 * C50748 * C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1744 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C51028 -
            (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
             C2176 * C382 + C2171 * C388) *
                C1745 -
            (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
             C2176 * C392 + C2171 * C400) *
                C51018 +
            (C2176 * C847 + C2171 * C852 + C2177 * C848 + C2172 * C853 +
             C2178 * C849 + C2173 * C854) *
                C1746 +
            (C2176 * C856 + C2171 * C862 + C2177 * C857 + C2172 * C863 +
             C2178 * C858 + C2173 * C864) *
                C1743) *
               C50995 +
           ((C2362 + C2363 + C2364) * C1744 + (C2365 + C2366 + C2367) * C51028 -
            (C3018 + C3019 + C3020) * C1745 - (C3021 + C3022 + C3023) * C51018 +
            (C3346 + C3347 + C3348) * C1746 + (C3349 + C3350 + C3351) * C1743) *
               C50866) *
              C50878 * C50748 * C1275 +
          (((C2176 * C381 + C2171 * C387 + C2177 * C380 + C2172 * C386 +
             C2178 * C379 + C2173 * C385) *
                C1745 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C51028 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C1744) +
            (C2176 * C391 + C2171 * C399 + C2177 * C390 + C2172 * C398 +
             C2178 * C389 + C2173 * C397) *
                C51018 -
            (C2178 * C850 + C2173 * C855 + C2177 * C849 + C2172 * C854 +
             C2176 * C848 + C2171 * C853) *
                C1746 -
            (C2178 * C859 + C2173 * C865 + C2177 * C858 + C2172 * C864 +
             C2176 * C857 + C2171 * C863) *
                C1743) *
               C50995 +
           ((C3960 + C3961 + C3962) * C1745 -
            ((C2373 + C2372 + C2371) * C51028 +
             (C2370 + C2369 + C2368) * C1744) +
            (C3963 + C3964 + C3965) * C51018 -
            (C2178 * C965 + C2173 * C969 + C2177 * C966 + C2172 * C970 +
             C2176 * C967 + C2171 * C971) *
                C1746 -
            (C2178 * C973 + C2173 * C977 + C2177 * C974 + C2172 * C978 +
             C2176 * C975 + C2171 * C979) *
                C1743) *
               C50866) *
              C50878 * C50748 * C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1744 +
             (C10648 * C133 + C50688 * C143) * C51028 - C13056 * C1745 -
             C13057 * C51018 + C13638 * C1746 + C13639 * C1743) *
                C50995 +
            (C12612 + C12613 - C12614 - C12615 + C12616 + C12617) * C50866) *
               C15526 +
           ((C13056 * C1744 + C13057 * C51028 - C13638 * C1745 -
             C13639 * C51018 + C13926 * C1746 + C13927 * C1743) *
                C50995 +
            (C15417 + C15418 - C15419 - C15420 + C15421 + C15422) * C50866) *
               C15527 +
           ((C13638 * C1744 + C13639 * C51028 - C13926 * C1745 -
             C13927 * C51018 + C19446 * C1746 + C19447 * C1743) *
                C50995 +
            (C11488 * C1744 + C11489 * C51028 - C13808 * C1745 -
             C13809 * C51018 + C19336 * C1746 + C19337 * C1743) *
                C50866) *
               C15528) *
              C50748 * C1275 +
          (((C13058 * C1745 -
             ((C10648 * C134 + C50688 * C144) * C51028 +
              (C10648 * C123 + C50688 * C130) * C1744) +
             C13059 * C51018 - C13640 * C1746 - C13641 * C1743) *
                C50995 +
            (C11914 * C1745 - (C10791 * C51028 + C10790 * C1744) +
             C11915 * C51018 - C13642 * C1746 - C13643 * C1743) *
                C50866) *
               C15526 +
           ((C13640 * C1745 - (C13059 * C51028 + C13058 * C1744) +
             C13641 * C51018 - C19178 * C1746 - C19179 * C1743) *
                C50995 +
            (C13642 * C1745 - (C11915 * C51028 + C11914 * C1744) +
             C13643 * C51018 - C19180 * C1746 - C19181 * C1743) *
                C50866) *
               C15527 +
           ((C19178 * C1745 - (C13641 * C51028 + C13640 * C1744) +
             C19179 * C51018 - (C10648 * C6200 + C50688 * C6203) * C1746 -
             (C10648 * C6206 + C50688 * C6209) * C1743) *
                C50995 +
            (C19180 * C1745 - (C13643 * C51028 + C13642 * C1744) +
             C19181 * C51018 - (C10648 * C16603 + C50688 * C16604) * C1746 -
             (C10648 * C16605 + C50688 * C16606) * C1743) *
                C50866) *
               C15528) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50778) *
                C50995 +
            ((C2362 + C2363 + C2364) * C121 +
             (C2365 + C2366 + C2367) * C50778) *
                C50866) *
               C50878 * C501 -
           (((C2696 + C2697 + C2698) * C50778 +
             (C2699 + C2700 + C2701) * C121) *
                C50866 +
            ((C2367 + C2366 + C2365) * C50778 +
             (C2364 + C2363 + C2362) * C121) *
                C50995) *
               C50878 * C502 +
           (((C2701 + C2700 + C2699) * C121 +
             (C2698 + C2697 + C2696) * C50778) *
                C50995 +
            ((C2176 * C600 + C2171 * C608 + C2177 * C599 + C2172 * C607 +
              C2178 * C598 + C2173 * C606) *
                 C121 +
             (C2176 * C604 + C2171 * C612 + C2177 * C603 + C2172 * C611 +
              C2178 * C602 + C2173 * C610) *
                 C50778) *
                C50866) *
               C50878 * C503) *
              C50974 +
          ((((C2368 + C2369 + C2370) * C121 +
             (C2371 + C2372 + C2373) * C50778) *
                C50995 +
            ((C2702 + C2703 + C2704) * C121 +
             (C2705 + C2706 + C2707) * C50778) *
                C50866) *
               C50878 * C502 -
           (((C2373 + C2372 + C2371) * C50778 +
             (C2370 + C2369 + C2368) * C121) *
                C50866 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50778 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50995) *
               C50878 * C501 -
           (((C2178 * C601 + C2173 * C609 + C2177 * C602 + C2172 * C610 +
              C2176 * C603 + C2171 * C611) *
                 C50778 +
             (C2178 * C597 + C2173 * C605 + C2177 * C598 + C2172 * C606 +
              C2176 * C599 + C2171 * C607) *
                 C121) *
                C50866 +
            ((C2707 + C2706 + C2705) * C50778 +
             (C2704 + C2703 + C2702) * C121) *
                C50995) *
               C50878 * C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50778) *
               C50995 +
           ((C2176 * C256 + C2171 * C266 + C2177 * C255 + C2172 * C265 +
             C2178 * C254 + C2173 * C264) *
                C121 +
            (C2176 * C262 + C2171 * C274 + C2177 * C261 + C2172 * C273 +
             C2178 * C260 + C2173 * C272) *
                C50778) *
               C50866) *
              C50878 * C50748 * C113 -
          (((C2178 * C259 + C2173 * C271 + C2177 * C260 + C2172 * C272 +
             C2176 * C261 + C2171 * C273) *
                C50778 +
            (C2178 * C253 + C2173 * C263 + C2177 * C254 + C2172 * C264 +
             C2176 * C255 + C2171 * C265) *
                C121) *
               C50866 +
           ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
             C2176 * C134 + C2171 * C144) *
                C50778 +
            (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
             C2176 * C123 + C2171 * C130) *
                C121) *
               C50995) *
              C50878 * C50748 * C114 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C121 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50778) *
               C50995 +
           ((C2176 * C254 + C2171 * C264 + C2177 * C253 + C2172 * C263 +
             C2178 * C257 + C2173 * C267) *
                C121 +
            (C2176 * C260 + C2171 * C272 + C2177 * C259 + C2172 * C271 +
             C2178 * C268 + C2173 * C275) *
                C50778) *
               C50866) *
              C50878 * C50748 * C115 -
          (((C2178 * C269 + C2173 * C276 + C2177 * C268 + C2172 * C275 +
             C2176 * C259 + C2171 * C271) *
                C50778 +
            (C2178 * C258 + C2173 * C270 + C2177 * C257 + C2172 * C267 +
             C2176 * C253 + C2171 * C263) *
                C121) *
               C50866 +
           ((C2178 * C140 + C2173 * C148 + C2177 * C137 + C2172 * C147 +
             C2176 * C136 + C2171 * C146) *
                C50778 +
            (C2178 * C127 + C2173 * C139 + C2177 * C126 + C2172 * C138 +
             C2176 * C125 + C2171 * C132) *
                C121) *
               C50995) *
              C50878 * C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C121 +
            (C10648 * C133 + C50688 * C143) * C50778) *
               C10644 +
           ((C10648 * C256 + C50688 * C266) * C121 +
            (C10648 * C262 + C50688 * C274) * C50778) *
               C10645 +
           ((C10648 * C506 + C50688 * C511) * C121 +
            (C10648 * C515 + C50688 * C521) * C50778) *
               C10646 +
           ((C10648 * C600 + C50688 * C608) * C121 +
            (C10648 * C604 + C50688 * C612) * C50778) *
               C10647) *
              C50878 * C50748 * C113 -
          (((C10648 * C603 + C50688 * C611) * C50778 +
            (C10648 * C599 + C50688 * C607) * C121) *
               C10647 +
           ((C10648 * C516 + C50688 * C522) * C50778 +
            (C10648 * C507 + C50688 * C512) * C121) *
               C10646 +
           ((C10648 * C261 + C50688 * C273) * C50778 +
            (C10648 * C255 + C50688 * C265) * C121) *
               C10645 +
           ((C10648 * C134 + C50688 * C144) * C50778 +
            (C10648 * C123 + C50688 * C130) * C121) *
               C10644) *
              C50878 * C50748 * C114 +
          (((C10648 * C124 + C50688 * C131) * C121 +
            (C10648 * C135 + C50688 * C145) * C50778) *
               C10644 +
           ((C10648 * C254 + C50688 * C264) * C121 +
            (C10648 * C260 + C50688 * C272) * C50778) *
               C10645 +
           ((C10648 * C508 + C50688 * C513) * C121 +
            (C10648 * C517 + C50688 * C523) * C50778) *
               C10646 +
           ((C10648 * C598 + C50688 * C606) * C121 +
            (C10648 * C602 + C50688 * C610) * C50778) *
               C10647) *
              C50878 * C50748 * C115 -
          (((C10648 * C601 + C50688 * C609) * C50778 +
            (C10648 * C597 + C50688 * C605) * C121) *
               C10647 +
           ((C10648 * C518 + C50688 * C524) * C50778 +
            (C10648 * C509 + C50688 * C514) * C121) *
               C10646 +
           ((C10648 * C259 + C50688 * C271) * C50778 +
            (C10648 * C253 + C50688 * C263) * C121) *
               C10645 +
           ((C10648 * C136 + C50688 * C146) * C50778 +
            (C10648 * C125 + C50688 * C132) * C121) *
               C10644) *
              C50878 * C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C10644 +
            (C10802 + C10803) * C10645 + C11016 * C10646 + C11017 * C10647) *
               C50878 * C501 -
           ((C11032 + C11033) * C10647 + (C10807 + C10806) * C10646 +
            (C10805 + C10804) * C10645 + (C10803 + C10802) * C10644) *
               C50878 * C502 +
           (C11016 * C10644 + C11017 * C10645 + (C11033 + C11032) * C10646 +
            ((C10648 * C8435 + C50688 * C8439) * C121 +
             (C10648 * C8437 + C50688 * C8441) * C50778) *
                C10647) *
               C50878 * C503) *
              C50974 +
          (((C10808 + C10809) * C10644 + (C10810 + C10811) * C10645 +
            (C10812 + C10813) * C10646 + (C11034 + C11035) * C10647) *
               C50878 * C502 -
           (C11026 * C10647 + C11027 * C10646 + (C10809 + C10808) * C10645 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C10644) *
               C50878 * C501 -
           (((C10648 * C8436 + C50688 * C8440) * C50778 +
             (C10648 * C8434 + C50688 * C8438) * C121) *
                C10647 +
            (C11035 + C11034) * C10646 + C11026 * C10645 + C11027 * C10644) *
               C50878 * C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C50995 +
            (C10802 + C10803) * C50866) *
               C15526 +
           ((C13056 * C121 + C13057 * C50778) * C50995 +
            (C12874 + C12875) * C50866) *
               C15527 +
           ((C13638 * C121 + C13639 * C50778) * C50995 +
            (C11488 * C121 + C11489 * C50778) * C50866) *
               C15528) *
              C50748 * C113 -
          (((C13643 * C50778 + C13642 * C121) * C50866 +
            (C13641 * C50778 + C13640 * C121) * C50995) *
               C15528 +
           ((C12879 + C12878) * C50866 +
            (C13059 * C50778 + C13058 * C121) * C50995) *
               C15527 +
           ((C10809 + C10808) * C50866 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C50995) *
               C15526) *
              C50748 * C114 +
          ((((C10648 * C124 + C50688 * C131) * C121 +
             (C10648 * C135 + C50688 * C145) * C50778) *
                C50995 +
            (C10814 + C10815) * C50866) *
               C15526 +
           ((C13060 * C121 + C13061 * C50778) * C50995 +
            (C12894 + C12895) * C50866) *
               C15527 +
           (((C10648 * C849 + C50688 * C854) * C121 +
             (C10648 * C858 + C50688 * C864) * C50778) *
                C50995 +
            ((C10648 * C966 + C50688 * C970) * C121 +
             (C10648 * C974 + C50688 * C978) * C50778) *
                C50866) *
               C15528) *
              C50748 * C115 -
          ((((C10648 * C973 + C50688 * C977) * C50778 +
             (C10648 * C965 + C50688 * C969) * C121) *
                C50866 +
            ((C10648 * C859 + C50688 * C865) * C50778 +
             (C10648 * C850 + C50688 * C855) * C121) *
                C50995) *
               C15528 +
           (((C10648 * C726 + C50688 * C738) * C50778 +
             (C10648 * C714 + C50688 * C722) * C121) *
                C50866 +
            ((C10648 * C389 + C50688 * C397) * C50778 +
             (C10648 * C379 + C50688 * C385) * C121) *
                C50995) *
               C15527 +
           (((C10648 * C259 + C50688 * C271) * C50778 +
             (C10648 * C253 + C50688 * C263) * C121) *
                C50866 +
            ((C10648 * C136 + C50688 * C146) * C50778 +
             (C10648 * C125 + C50688 * C132) * C121) *
                C50995) *
               C15526) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C50995 +
             (C10802 + C10803) * C50866) *
                C15526 +
            ((C13056 * C121 + C13057 * C50778) * C50995 +
             (C12874 + C12875) * C50866) *
                C15527 +
            ((C13638 * C121 + C13639 * C50778) * C50995 +
             (C18456 + C18457) * C50866) *
                C15528) *
               C501 -
           (((C18766 + C18767) * C50866 + (C18457 + C18456) * C50995) * C15528 +
            ((C12877 + C12876) * C50866 + (C12875 + C12874) * C50995) * C15527 +
            ((C10805 + C10804) * C50866 + (C10803 + C10802) * C50995) *
                C15526) *
               C502 +
           ((C11016 * C50995 + C11017 * C50866) * C15526 +
            (C13208 * C50995 + (C13210 + C13209) * C50866) * C15527 +
            ((C18767 + C18766) * C50995 +
             (C11492 * C121 + C11493 * C50778) * C50866) *
                C15528) *
               C503) *
              C50974 +
          ((((C10808 + C10809) * C50995 + (C10810 + C10811) * C50866) * C15526 +
            ((C12878 + C12879) * C50995 + (C12880 + C12881) * C50866) * C15527 +
            ((C18458 + C18459) * C50995 + (C18768 + C18769) * C50866) *
                C15528) *
               C502 -
           (((C18459 + C18458) * C50866 +
             (C13641 * C50778 + C13640 * C121) * C50995) *
                C15528 +
            ((C12879 + C12878) * C50866 +
             (C13059 * C50778 + C13058 * C121) * C50995) *
                C15527 +
            ((C10809 + C10808) * C50866 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C50995) *
                C15526) *
               C501 -
           ((((C10648 * C8954 + C50688 * C8956) * C50778 +
              (C10648 * C8950 + C50688 * C8952) * C121) *
                 C50866 +
             (C18769 + C18768) * C50995) *
                C15528 +
            ((C13212 + C13211) * C50866 + C13213 * C50995) * C15527 +
            (C11026 * C50866 + C11027 * C50995) * C15526) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50778) *
               C50995 +
           ((C2362 + C2363 + C2364) * C121 + (C2365 + C2366 + C2367) * C50778) *
               C50866) *
              C50878 * C592 -
          (((C2696 + C2697 + C2698) * C50778 + (C2699 + C2700 + C2701) * C121) *
               C50866 +
           ((C2367 + C2366 + C2365) * C50778 + (C2364 + C2363 + C2362) * C121) *
               C50995) *
              C50878 * C593 +
          (((C2701 + C2700 + C2699) * C121 + (C2698 + C2697 + C2696) * C50778) *
               C50995 +
           ((C2830 + C2831 + C2832) * C121 + (C2833 + C2834 + C2835) * C50778) *
               C50866) *
              C50878 * C594 -
          (((C2178 * C2808 + C2173 * C2814 + C2177 * C2809 + C2172 * C2815 +
             C2176 * C2810 + C2171 * C2816) *
                C50778 +
            (C2178 * C2805 + C2173 * C2811 + C2177 * C2806 + C2172 * C2812 +
             C2176 * C2807 + C2171 * C2813) *
                C121) *
               C50866 +
           ((C2835 + C2834 + C2833) * C50778 + (C2832 + C2831 + C2830) * C121) *
               C50995) *
              C50878 * C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50778) *
                C50995 +
            ((C2362 + C2363 + C2364) * C121 +
             (C2365 + C2366 + C2367) * C50778) *
                C50866) *
               C50878 * C50981 -
           (((C2178 * C517 + C2173 * C523 + C2177 * C516 + C2172 * C522 +
              C2176 * C515 + C2171 * C521) *
                 C50778 +
             (C2178 * C508 + C2173 * C513 + C2177 * C507 + C2172 * C512 +
              C2176 * C506 + C2171 * C511) *
                 C121) *
                C50866 +
            ((C2367 + C2366 + C2365) * C50778 +
             (C2364 + C2363 + C2362) * C121) *
                C50995) *
               C50878 * C50764) *
              C250 +
          ((((C2368 + C2369 + C2370) * C121 +
             (C2371 + C2372 + C2373) * C50778) *
                C50995 +
            ((C2176 * C507 + C2171 * C512 + C2177 * C508 + C2172 * C513 +
              C2178 * C509 + C2173 * C514) *
                 C121 +
             (C2176 * C516 + C2171 * C522 + C2177 * C517 + C2172 * C523 +
              C2178 * C518 + C2173 * C524) *
                 C50778) *
                C50866) *
               C50878 * C50764 -
           (((C2373 + C2372 + C2371) * C50778 +
             (C2370 + C2369 + C2368) * C121) *
                C50866 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50778 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50995) *
               C50878 * C50981) *
              C251 +
          ((((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
              C2178 * C126 + C2173 * C138) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
              C2178 * C137 + C2173 * C147) *
                 C50778) *
                C50995 +
            ((C2374 + C2375 + C2376) * C121 +
             (C2377 + C2378 + C2379) * C50778) *
                C50866) *
               C50878 * C50981 -
           (((C2178 * C519 + C2173 * C525 + C2177 * C518 + C2172 * C524 +
              C2176 * C517 + C2171 * C523) *
                 C50778 +
             (C2178 * C510 + C2173 * C520 + C2177 * C509 + C2172 * C514 +
              C2176 * C508 + C2171 * C513) *
                 C121) *
                C50866 +
            ((C2379 + C2378 + C2377) * C50778 +
             (C2376 + C2375 + C2374) * C121) *
                C50995) *
               C50878 * C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C10644 +
            (C10802 + C10803) * C10645 + (C10804 + C10805) * C10646 +
            (C10806 + C10807) * C10647) *
               C50878 * C50981 -
           (((C10648 * C2810 + C50688 * C2816) * C50778 +
             (C10648 * C2807 + C50688 * C2813) * C121) *
                C10647 +
            (C10807 + C10806) * C10646 + (C10805 + C10804) * C10645 +
            (C10803 + C10802) * C10644) *
               C50878 * C50764) *
              C250 +
          (((C10808 + C10809) * C10644 + (C10810 + C10811) * C10645 +
            (C10812 + C10813) * C10646 +
            ((C10648 * C2806 + C50688 * C2812) * C121 +
             (C10648 * C2809 + C50688 * C2815) * C50778) *
                C10647) *
               C50878 * C50764 -
           ((C10813 + C10812) * C10647 + (C10811 + C10810) * C10646 +
            (C10809 + C10808) * C10645 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C10644) *
               C50878 * C50981) *
              C251 +
          ((((C10648 * C124 + C50688 * C131) * C121 +
             (C10648 * C135 + C50688 * C145) * C50778) *
                C10644 +
            (C10814 + C10815) * C10645 + (C10816 + C10817) * C10646 +
            (C10818 + C10819) * C10647) *
               C50878 * C50981 -
           (((C10648 * C2808 + C50688 * C2814) * C50778 +
             (C10648 * C2805 + C50688 * C2811) * C121) *
                C10647 +
            (C10819 + C10818) * C10646 + (C10817 + C10816) * C10645 +
            (C10815 + C10814) * C10644) *
               C50878 * C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C121 +
            (C10648 * C133 + C50688 * C143) * C50778) *
               C10644 +
           (C10802 + C10803) * C10645 + C11016 * C10646 + C11017 * C10647) *
              C50878 * C592 -
          (C11106 * C10647 + C11107 * C10646 + (C10805 + C10804) * C10645 +
           (C10803 + C10802) * C10644) *
              C50878 * C593 +
          (C11016 * C10644 + C11017 * C10645 + (C11033 + C11032) * C10646 +
           (C11114 + C11115) * C10647) *
              C50878 * C594 -
          (((C10648 * C11102 + C50688 * C11104) * C50778 +
            (C10648 * C11101 + C50688 * C11103) * C121) *
               C10647 +
           (C11115 + C11114) * C10646 + C11106 * C10645 + C11107 * C10644) *
              C50878 * C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C50995 +
             (C10802 + C10803) * C50866) *
                C15526 +
            ((C13056 * C121 + C13057 * C50778) * C50995 +
             (C12874 + C12875) * C50866) *
                C15527 +
            ((C13638 * C121 + C13639 * C50778) * C50995 +
             (C18456 + C18457) * C50866) *
                C15528) *
               C50981 -
           (((C11491 * C50778 + C11490 * C121) * C50866 +
             (C18457 + C18456) * C50995) *
                C15528 +
            ((C12877 + C12876) * C50866 + (C12875 + C12874) * C50995) * C15527 +
            ((C10805 + C10804) * C50866 + (C10803 + C10802) * C50995) *
                C15526) *
               C50764) *
              C250 +
          ((((C10808 + C10809) * C50995 + (C10810 + C10811) * C50866) * C15526 +
            ((C12878 + C12879) * C50995 + (C12880 + C12881) * C50866) * C15527 +
            ((C18458 + C18459) * C50995 +
             (C13644 * C121 + C13645 * C50778) * C50866) *
                C15528) *
               C50764 -
           (((C18459 + C18458) * C50866 +
             (C13641 * C50778 + C13640 * C121) * C50995) *
                C15528 +
            ((C12879 + C12878) * C50866 +
             (C13059 * C50778 + C13058 * C121) * C50995) *
                C15527 +
            ((C10809 + C10808) * C50866 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C50995) *
                C15526) *
               C50981) *
              C251 +
          (((((C10648 * C124 + C50688 * C131) * C121 +
              (C10648 * C135 + C50688 * C145) * C50778) *
                 C50995 +
             (C10814 + C10815) * C50866) *
                C15526 +
            ((C13060 * C121 + C13061 * C50778) * C50995 +
             (C12894 + C12895) * C50866) *
                C15527 +
            (((C10648 * C849 + C50688 * C854) * C121 +
              (C10648 * C858 + C50688 * C864) * C50778) *
                 C50995 +
             (C18466 + C18467) * C50866) *
                C15528) *
               C50981 -
           ((((C10648 * C3327 + C50688 * C3330) * C50778 +
              (C10648 * C3321 + C50688 * C3324) * C121) *
                 C50866 +
             (C18467 + C18466) * C50995) *
                C15528 +
            ((C12897 + C12896) * C50866 + (C12895 + C12894) * C50995) * C15527 +
            ((C10817 + C10816) * C50866 + (C10815 + C10814) * C50995) *
                C15526) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C50995 +
            (C10802 + C10803) * C50866) *
               C15526 +
           ((C13056 * C121 + C13057 * C50778) * C50995 +
            (C12874 + C12875) * C50866) *
               C15527 +
           ((C13638 * C121 + C13639 * C50778) * C50995 +
            (C18456 + C18457) * C50866) *
               C15528) *
              C592 -
          (((C18766 + C18767) * C50866 + (C18457 + C18456) * C50995) * C15528 +
           ((C12877 + C12876) * C50866 + (C12875 + C12874) * C50995) * C15527 +
           ((C10805 + C10804) * C50866 + (C10803 + C10802) * C50995) * C15526) *
              C593 +
          ((C11016 * C50995 + C11017 * C50866) * C15526 +
           (C13208 * C50995 + (C13210 + C13209) * C50866) * C15527 +
           ((C18767 + C18766) * C50995 + (C18868 + C18869) * C50866) * C15528) *
              C594 -
          ((((C10648 * C11461 + C50688 * C11462) * C50778 +
             (C10648 * C11459 + C50688 * C11460) * C121) *
                C50866 +
            (C18869 + C18868) * C50995) *
               C15528 +
           ((C13314 + C13313) * C50866 + C13312 * C50995) * C15527 +
           (C11106 * C50866 + C11107 * C50995) * C15526) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C377 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50983 -
            (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
             C2176 * C382 + C2171 * C388) *
                C378 -
            (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
             C2176 * C392 + C2171 * C400) *
                C50790) *
               C50995 +
           ((C2362 + C2363 + C2364) * C377 + (C2365 + C2366 + C2367) * C50983 -
            (C3018 + C3019 + C3020) * C378 - (C3021 + C3022 + C3023) * C50790) *
               C50866) *
              C50878 * C501 +
          (((C3020 + C3019 + C3018) * C378 -
            ((C2367 + C2366 + C2365) * C50983 +
             (C2364 + C2363 + C2362) * C377) +
            (C3023 + C3022 + C3021) * C50790) *
               C50995 +
           ((C3024 + C3025 + C3026) * C378 -
            ((C2696 + C2697 + C2698) * C50983 +
             (C2699 + C2700 + C2701) * C377) +
            (C3027 + C3028 + C3029) * C50790) *
               C50866) *
              C50878 * C502 +
          (((C2701 + C2700 + C2699) * C377 + (C2698 + C2697 + C2696) * C50983 -
            (C3026 + C3025 + C3024) * C378 - (C3029 + C3028 + C3027) * C50790) *
               C50995 +
           ((C2830 + C2831 + C2832) * C377 + (C2833 + C2834 + C2835) * C50983 -
            (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
             C2176 * C2983 + C2171 * C2986) *
                C378 -
            (C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
             C2176 * C2989 + C2171 * C2992) *
                C50790) *
               C50866) *
              C50878 * C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C377 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50983 -
            (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
             C2176 * C382 + C2171 * C388) *
                C378 -
            (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
             C2176 * C392 + C2171 * C400) *
                C50790) *
               C50995 +
           ((C2362 + C2363 + C2364) * C377 + (C2365 + C2366 + C2367) * C50983 -
            (C2178 * C713 + C2173 * C721 + C2177 * C712 + C2172 * C720 +
             C2176 * C711 + C2171 * C719) *
                C378 -
            (C2178 * C725 + C2173 * C737 + C2177 * C724 + C2172 * C736 +
             C2176 * C723 + C2171 * C735) *
                C50790) *
               C50866) *
              C50878 * C50748 * C250 +
          (((C2176 * C381 + C2171 * C387 + C2177 * C380 + C2172 * C386 +
             C2178 * C379 + C2173 * C385) *
                C378 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50983 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C377) +
            (C2176 * C391 + C2171 * C399 + C2177 * C390 + C2172 * C398 +
             C2178 * C389 + C2173 * C397) *
                C50790) *
               C50995 +
           ((C2176 * C712 + C2171 * C720 + C2177 * C713 + C2172 * C721 +
             C2178 * C714 + C2173 * C722) *
                C378 -
            ((C2373 + C2372 + C2371) * C50983 +
             (C2370 + C2369 + C2368) * C377) +
            (C2176 * C724 + C2171 * C736 + C2177 * C725 + C2172 * C737 +
             C2178 * C726 + C2173 * C738) *
                C50790) *
               C50866) *
              C50878 * C50748 * C251 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C377 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50983 -
            (C2178 * C383 + C2173 * C393 + C2177 * C379 + C2172 * C385 +
             C2176 * C380 + C2171 * C386) *
                C378 -
            (C2178 * C394 + C2173 * C401 + C2177 * C389 + C2172 * C397 +
             C2176 * C390 + C2171 * C398) *
                C50790) *
               C50995 +
           ((C2374 + C2375 + C2376) * C377 + (C2377 + C2378 + C2379) * C50983 -
            (C2178 * C1407 + C2173 * C1408 + C2177 * C714 + C2172 * C722 +
             C2176 * C713 + C2171 * C721) *
                C378 -
            (C2178 * C1409 + C2173 * C1410 + C2177 * C726 + C2172 * C738 +
             C2176 * C725 + C2171 * C737) *
                C50790) *
               C50866) *
              C50878 * C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C377 +
            (C10648 * C133 + C50688 * C143) * C50983 -
            (C10648 * C382 + C50688 * C388) * C378 -
            (C10648 * C392 + C50688 * C400) * C50790) *
               C10644 +
           (C10784 * C377 + C10785 * C50983 -
            (C10648 * C711 + C50688 * C719) * C378 -
            (C10648 * C723 + C50688 * C735) * C50790) *
               C10645 +
           (C10786 * C377 + C10787 * C50983 -
            (C10648 * C718 + C50688 * C730) * C378 -
            (C10648 * C734 + C50688 * C742) * C50790) *
               C10646 +
           (C10788 * C377 + C10789 * C50983 -
            (C10648 * C2983 + C50688 * C2986) * C378 -
            (C10648 * C2989 + C50688 * C2992) * C50790) *
               C10647) *
              C50878 * C50748 * C250 +
          (((C10648 * C381 + C50688 * C387) * C378 -
            ((C10648 * C134 + C50688 * C144) * C50983 +
             (C10648 * C123 + C50688 * C130) * C377) +
            (C10648 * C391 + C50688 * C399) * C50790) *
               C10644 +
           ((C10648 * C712 + C50688 * C720) * C378 -
            (C10791 * C50983 + C10790 * C377) +
            (C10648 * C724 + C50688 * C736) * C50790) *
               C10645 +
           ((C10648 * C717 + C50688 * C729) * C378 -
            (C10793 * C50983 + C10792 * C377) +
            (C10648 * C733 + C50688 * C741) * C50790) *
               C10646 +
           ((C10648 * C2982 + C50688 * C2985) * C378 -
            (C10795 * C50983 + C10794 * C377) +
            (C10648 * C2988 + C50688 * C2991) * C50790) *
               C10647) *
              C50878 * C50748 * C251 +
          (((C10648 * C124 + C50688 * C131) * C377 +
            (C10648 * C135 + C50688 * C145) * C50983 -
            (C10648 * C380 + C50688 * C386) * C378 -
            (C10648 * C390 + C50688 * C398) * C50790) *
               C10644 +
           (C10796 * C377 + C10797 * C50983 -
            (C10648 * C713 + C50688 * C721) * C378 -
            (C10648 * C725 + C50688 * C737) * C50790) *
               C10645 +
           (C10798 * C377 + C10799 * C50983 -
            (C10648 * C716 + C50688 * C728) * C378 -
            (C10648 * C732 + C50688 * C740) * C50790) *
               C10646 +
           (C10800 * C377 + C10801 * C50983 -
            (C10648 * C2981 + C50688 * C2984) * C378 -
            (C10648 * C2987 + C50688 * C2990) * C50790) *
               C10647) *
              C50878 * C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C377 +
            (C10648 * C133 + C50688 * C143) * C50983 -
            (C10648 * C382 + C50688 * C388) * C378 -
            (C10648 * C392 + C50688 * C400) * C50790) *
               C10644 +
           (C11218 + C11219 - C11252 - C11253) * C10645 + C11262 * C10646 +
           C11263 * C10647) *
              C50878 * C501 +
          ((C11252 - (C11219 + C11218) + C11253) * C10644 +
           (C11254 - (C11225 + C11224) + C11255) * C10645 +
           (C11256 - (C11231 + C11230) + C11257) * C10646 +
           (C11258 - (C11238 + C11239) + C11259) * C10647) *
              C50878 * C502 +
          (C11262 * C10644 + C11263 * C10645 +
           (C11239 + C11238 - C11258 - C11259) * C10646 +
           (C11112 * C377 + C11113 * C50983 -
            (C10648 * C11213 + C50688 * C11214) * C378 -
            (C10648 * C11215 + C50688 * C11216) * C50790) *
               C10647) *
              C50878 * C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C50995 +
            (C11218 + C11219 - C11252 - C11253) * C50866) *
               C15526 +
           ((C13056 * C377 + C13057 * C50983 - C13638 * C378 -
             C13639 * C50790) *
                C50995 +
            (C13461 + C13462 - C13463 - C13464) * C50866) *
               C15527 +
           ((C13638 * C377 + C13639 * C50983 - C13926 * C378 -
             C13927 * C50790) *
                C50995 +
            (C11488 * C377 + C11489 * C50983 - C13808 * C378 -
             C13809 * C50790) *
                C50866) *
               C15528) *
              C50748 * C250 +
          (((C13058 * C378 -
             ((C10648 * C134 + C50688 * C144) * C50983 +
              (C10648 * C123 + C50688 * C130) * C377) +
             C13059 * C50790) *
                C50995 +
            (C11920 - (C11898 + C11899) + C11921) * C50866) *
               C15526 +
           ((C13640 * C378 - (C13059 * C50983 + C13058 * C377) +
             C13641 * C50790) *
                C50995 +
            (C14414 - (C14415 + C14416) + C14417) * C50866) *
               C15527 +
           (((C10648 * C1057 + C50688 * C1061) * C378 -
             (C13641 * C50983 + C13640 * C377) +
             (C10648 * C1065 + C50688 * C1069) * C50790) *
                C50995 +
            ((C10648 * C3450 + C50688 * C3453) * C378 -
             (C13643 * C50983 + C13642 * C377) +
             (C10648 * C3456 + C50688 * C3459) * C50790) *
                C50866) *
               C15528) *
              C50748 * C251 +
          ((((C10648 * C124 + C50688 * C131) * C377 +
             (C10648 * C135 + C50688 * C145) * C50983 - C13060 * C378 -
             C13061 * C50790) *
                C50995 +
            (C10796 * C377 + C10797 * C50983 - C12890 * C378 -
             C12891 * C50790) *
                C50866) *
               C15526 +
           ((C13060 * C377 + C13061 * C50983 - C18618 * C378 -
             C18619 * C50790) *
                C50995 +
            (C12890 * C377 + C12891 * C50983 - C18464 * C378 -
             C18465 * C50790) *
                C50866) *
               C15527 +
           ((C18618 * C377 + C18619 * C50983 -
             (C10648 * C1056 + C50688 * C1060) * C378 -
             (C10648 * C1064 + C50688 * C1068) * C50790) *
                C50995 +
            (C18464 * C377 + C18465 * C50983 -
             (C10648 * C3449 + C50688 * C3452) * C378 -
             (C10648 * C3455 + C50688 * C3458) * C50790) *
                C50866) *
               C15528) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C50995 +
            (C11218 + C11219 - C11252 - C11253) * C50866) *
               C15526 +
           ((C13056 * C377 + C13057 * C50983 - C13638 * C378 -
             C13639 * C50790) *
                C50995 +
            (C13461 + C13462 - C13463 - C13464) * C50866) *
               C15527 +
           ((C13638 * C377 + C13639 * C50983 - C13926 * C378 -
             C13927 * C50790) *
                C50995 +
            (C19016 + C19017 - C19018 - C19019) * C50866) *
               C15528) *
              C501 +
          (((C11252 - (C11219 + C11218) + C11253) * C50995 +
            (C11254 - (C11225 + C11224) + C11255) * C50866) *
               C15526 +
           ((C13463 - (C13462 + C13461) + C13464) * C50995 +
            (C13467 - (C13466 + C13465) + C13468) * C50866) *
               C15527 +
           ((C19018 - (C19017 + C19016) + C19019) * C50995 +
            (C19020 - (C19021 + C19022) + C19023) * C50866) *
               C15528) *
              C502 +
          ((C11262 * C50995 + C11263 * C50866) * C15526 +
           (C13475 * C50995 + (C13471 + C13470 - C13469 - C13472) * C50866) *
               C15527 +
           ((C19022 + C19021 - C19020 - C19023) * C50995 +
            (C11492 * C377 + C11493 * C50983 -
             (C10648 * C11565 + C50688 * C11566) * C378 -
             (C10648 * C11567 + C50688 * C11568) * C50790) *
                C50866) *
               C15528) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[120] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C10648 * C122 + C50688 * C129) * C121 +
                       (C10648 * C133 + C50688 * C143) * C50778) *
                          C7787 +
                      (C10802 + C10803) * C7788 + C11016 * C7789) *
                         C50996 +
                     ((C13056 * C121 + C13057 * C50778) * C7787 +
                      (C12874 + C12875) * C7788 + C13208 * C7789) *
                         C50890) *
                        C1169 -
                    ((C13312 * C7789 + (C12877 + C12876) * C7788 +
                      (C12875 + C12874) * C7787) *
                         C50890 +
                     (C11107 * C7789 + (C10805 + C10804) * C7788 +
                      (C10803 + C10802) * C7787) *
                         C50996) *
                        C50764) *
                       C51026 +
                   ((((C10808 + C10809) * C7787 + (C10810 + C10811) * C7788 +
                      (C10812 + C10813) * C7789) *
                         C50996 +
                     ((C12878 + C12879) * C7787 + (C12880 + C12881) * C7788 +
                      (C13211 + C13212) * C7789) *
                         C50890) *
                        C50764 -
                    ((C13213 * C7789 + (C12879 + C12878) * C7788 +
                      (C13059 * C50778 + C13058 * C121) * C7787) *
                         C50890 +
                     (C11027 * C7789 + (C10809 + C10808) * C7788 +
                      ((C10648 * C134 + C50688 * C144) * C50778 +
                       (C10648 * C123 + C50688 * C130) * C121) *
                          C7787) *
                         C50996) *
                        C1169) *
                       C51012 +
                   (((((C10648 * C124 + C50688 * C131) * C121 +
                       (C10648 * C135 + C50688 * C145) * C50778) *
                          C7787 +
                      (C10814 + C10815) * C7788 + (C10816 + C10817) * C7789) *
                         C50996 +
                     ((C13060 * C121 + C13061 * C50778) * C7787 +
                      (C12894 + C12895) * C7788 + (C12896 + C12897) * C7789) *
                         C50890) *
                        C1169 -
                    ((((C10648 * C2987 + C50688 * C2990) * C50778 +
                       (C10648 * C2981 + C50688 * C2984) * C121) *
                          C7789 +
                      (C12897 + C12896) * C7788 + (C12895 + C12894) * C7787) *
                         C50890 +
                     ((C10819 + C10818) * C7789 + (C10817 + C10816) * C7788 +
                      (C10815 + C10814) * C7787) *
                         C50996) *
                        C50764) *
                       C1173)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C2176 * C122 + C2171 * C129 + C2177 * C123 +
                       C2172 * C130 + C2178 * C124 + C2173 * C131) *
                          C121 +
                      (C2176 * C133 + C2171 * C143 + C2177 * C134 +
                       C2172 * C144 + C2178 * C135 + C2173 * C145) *
                          C50778) *
                         C50852 * C50996 +
                     ((C5368 + C5367 + C5366) * C121 +
                      (C5371 + C5370 + C5369) * C50778) *
                         C50852 * C50890) *
                        C1169 -
                    (((C3021 + C3022 + C3023) * C50778 +
                      (C3018 + C3019 + C3020) * C121) *
                         C50852 * C50890 +
                     ((C2367 + C2366 + C2365) * C50778 +
                      (C2364 + C2363 + C2362) * C121) *
                         C50852 * C50996) *
                        C50764) *
                       C51026 +
                   ((((C2368 + C2369 + C2370) * C121 +
                      (C2371 + C2372 + C2373) * C50778) *
                         C50852 * C50996 +
                     ((C3960 + C3961 + C3962) * C121 +
                      (C3963 + C3964 + C3965) * C50778) *
                         C50852 * C50890) *
                        C50764 -
                    (((C5377 + C5376 + C5375) * C50778 +
                      (C5374 + C5373 + C5372) * C121) *
                         C50852 * C50890 +
                     ((C2178 * C136 + C2173 * C146 + C2177 * C135 +
                       C2172 * C145 + C2176 * C134 + C2171 * C144) *
                          C50778 +
                      (C2178 * C125 + C2173 * C132 + C2177 * C124 +
                       C2172 * C131 + C2176 * C123 + C2171 * C130) *
                          C121) *
                         C50852 * C50996) *
                        C1169) *
                       C51012 +
                   ((((C2176 * C124 + C2171 * C131 + C2177 * C125 +
                       C2172 * C132 + C2178 * C126 + C2173 * C138) *
                          C121 +
                      (C2176 * C135 + C2171 * C145 + C2177 * C136 +
                       C2172 * C146 + C2178 * C137 + C2173 * C147) *
                          C50778) *
                         C50852 * C50996 +
                     ((C5380 + C5379 + C5378) * C121 +
                      (C5383 + C5382 + C5381) * C50778) *
                         C50852 * C50890) *
                        C1169 -
                    (((C2178 * C1409 + C2173 * C1410 + C2177 * C726 +
                       C2172 * C738 + C2176 * C725 + C2171 * C737) *
                          C50778 +
                      (C2178 * C1407 + C2173 * C1408 + C2177 * C714 +
                       C2172 * C722 + C2176 * C713 + C2171 * C721) *
                          C121) *
                         C50852 * C50890 +
                     ((C2379 + C2378 + C2377) * C50778 +
                      (C2376 + C2375 + C2374) * C121) *
                         C50852 * C50996) *
                        C50764) *
                       C1173)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C10648 * C122 + C50688 * C129) * C121 +
                      (C10648 * C133 + C50688 * C143) * C50778) *
                         C50852 * C20993 +
                     (C13056 * C121 + C13057 * C50778) * C50852 * C20994 +
                     (C13638 * C121 + C13639 * C50778) * C50852 * C20995 +
                     (C13926 * C121 + C13927 * C50778) * C50852 * C20996) *
                        C1169 -
                    ((C13809 * C50778 + C13808 * C121) * C50852 * C20996 +
                     (C18457 + C18456) * C50852 * C20995 +
                     (C12875 + C12874) * C50852 * C20994 +
                     (C10803 + C10802) * C50852 * C20993) *
                        C50764) *
                       C51026 +
                   (((C10808 + C10809) * C50852 * C20993 +
                     (C12878 + C12879) * C50852 * C20994 +
                     (C18458 + C18459) * C50852 * C20995 +
                     (C19180 * C121 + C19181 * C50778) * C50852 * C20996) *
                        C50764 -
                    ((C19179 * C50778 + C19178 * C121) * C50852 * C20996 +
                     (C13641 * C50778 + C13640 * C121) * C50852 * C20995 +
                     (C13059 * C50778 + C13058 * C121) * C50852 * C20994 +
                     ((C10648 * C134 + C50688 * C144) * C50778 +
                      (C10648 * C123 + C50688 * C130) * C121) *
                         C50852 * C20993) *
                        C1169) *
                       C51012 +
                   ((((C10648 * C124 + C50688 * C131) * C121 +
                      (C10648 * C135 + C50688 * C145) * C50778) *
                         C50852 * C20993 +
                     (C13060 * C121 + C13061 * C50778) * C50852 * C20994 +
                     (C18618 * C121 + C18619 * C50778) * C50852 * C20995 +
                     (C21198 * C121 + C21199 * C50778) * C50852 * C20996) *
                        C1169 -
                    (((C10648 * C3455 + C50688 * C3458) * C50778 +
                      (C10648 * C3449 + C50688 * C3452) * C121) *
                         C50852 * C20996 +
                     (C18467 + C18466) * C50852 * C20995 +
                     (C12895 + C12894) * C50852 * C20994 +
                     (C10815 + C10814) * C50852 * C20993) *
                        C50764) *
                       C1173)) /
                     (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C7787 +
             (C10802 + C10803) * C7788 + C11016 * C7789) *
                C50996 +
            ((C13056 * C121 + C13057 * C50778) * C7787 +
             (C12874 + C12875) * C7788 + C13208 * C7789) *
                C50890) *
               C51027 -
           ((C13312 * C7789 + (C12877 + C12876) * C7788 +
             (C12875 + C12874) * C7787) *
                C50890 +
            (C11107 * C7789 + (C10805 + C10804) * C7788 +
             (C10803 + C10802) * C7787) *
                C50996) *
               C51015 +
           ((C11016 * C7787 + C11017 * C7788 + (C11033 + C11032) * C7789) *
                C50996 +
            (C13208 * C7787 + (C13210 + C13209) * C7788 +
             (C13313 + C13314) * C7789) *
                C50890) *
               C1274) *
              C1275 +
          ((((C10808 + C10809) * C7787 + (C10810 + C10811) * C7788 +
             (C10812 + C10813) * C7789) *
                C50996 +
            ((C12878 + C12879) * C7787 + (C12880 + C12881) * C7788 +
             (C13211 + C13212) * C7789) *
                C50890) *
               C51015 -
           ((C13213 * C7789 + (C12879 + C12878) * C7788 +
             (C13059 * C50778 + C13058 * C121) * C7787) *
                C50890 +
            (C11027 * C7789 + (C10809 + C10808) * C7788 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C7787) *
                C50996) *
               C51027 -
           ((((C10648 * C8609 + C50688 * C8611) * C50778 +
              (C10648 * C8605 + C50688 * C8607) * C121) *
                 C7789 +
             (C13212 + C13211) * C7788 + C13213 * C7787) *
                C50890 +
            ((C11035 + C11034) * C7789 + C11026 * C7788 + C11027 * C7787) *
                C50996) *
               C1274) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50778) *
                C50852 * C50996 +
            ((C5368 + C5367 + C5366) * C121 +
             (C5371 + C5370 + C5369) * C50778) *
                C50852 * C50890) *
               C51027 -
           (((C3021 + C3022 + C3023) * C50778 +
             (C3018 + C3019 + C3020) * C121) *
                C50852 * C50890 +
            ((C2367 + C2366 + C2365) * C50778 +
             (C2364 + C2363 + C2362) * C121) *
                C50852 * C50996) *
               C51015 +
           (((C2701 + C2700 + C2699) * C121 +
             (C2698 + C2697 + C2696) * C50778) *
                C50852 * C50996 +
            ((C3024 + C3025 + C3026) * C121 +
             (C3027 + C3028 + C3029) * C50778) *
                C50852 * C50890) *
               C1274) *
              C1275 +
          ((((C2368 + C2369 + C2370) * C121 +
             (C2371 + C2372 + C2373) * C50778) *
                C50852 * C50996 +
            ((C3960 + C3961 + C3962) * C121 +
             (C3963 + C3964 + C3965) * C50778) *
                C50852 * C50890) *
               C51015 -
           (((C5377 + C5376 + C5375) * C50778 +
             (C5374 + C5373 + C5372) * C121) *
                C50852 * C50890 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50778 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50852 * C50996) *
               C51027 -
           (((C2178 * C731 + C2173 * C739 + C2177 * C732 + C2172 * C740 +
              C2176 * C733 + C2171 * C741) *
                 C50778 +
             (C2178 * C715 + C2173 * C727 + C2177 * C716 + C2172 * C728 +
              C2176 * C717 + C2171 * C729) *
                 C121) *
                C50852 * C50890 +
            ((C2707 + C2706 + C2705) * C50778 +
             (C2704 + C2703 + C2702) * C121) *
                C50852 * C50996) *
               C1274) *
              C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C50852 * C20993 +
            (C13056 * C121 + C13057 * C50778) * C50852 * C20994 +
            (C13638 * C121 + C13639 * C50778) * C50852 * C20995 +
            (C13926 * C121 + C13927 * C50778) * C50852 * C20996) *
               C51027 -
           ((C13809 * C50778 + C13808 * C121) * C50852 * C20996 +
            (C18457 + C18456) * C50852 * C20995 +
            (C12875 + C12874) * C50852 * C20994 +
            (C10803 + C10802) * C50852 * C20993) *
               C51015 +
           (C11016 * C50852 * C20993 + C13208 * C50852 * C20994 +
            (C18767 + C18766) * C50852 * C20995 +
            (C13810 * C121 + C13811 * C50778) * C50852 * C20996) *
               C1274) *
              C1275 +
          (((C10808 + C10809) * C50852 * C20993 +
            (C12878 + C12879) * C50852 * C20994 +
            (C18458 + C18459) * C50852 * C20995 +
            (C19180 * C121 + C19181 * C50778) * C50852 * C20996) *
               C51015 -
           ((C19179 * C50778 + C19178 * C121) * C50852 * C20996 +
            (C13641 * C50778 + C13640 * C121) * C50852 * C20995 +
            (C13059 * C50778 + C13058 * C121) * C50852 * C20994 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C50852 * C20993) *
               C51027 -
           (((C10648 * C9084 + C50688 * C9086) * C50778 +
             (C10648 * C9080 + C50688 * C9082) * C121) *
                C50852 * C20996 +
            (C18769 + C18768) * C50852 * C20995 + C13213 * C50852 * C20994 +
            C11027 * C50852 * C20993) *
               C1274) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C377 +
              (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
              C13057 * C50790) *
                 C7787 +
             (C11218 + C11219 - C11252 - C11253) * C7788 + C11262 * C7789) *
                C50996 +
            ((C13056 * C377 + C13057 * C50983 - C13638 * C378 -
              C13639 * C50790) *
                 C7787 +
             (C13461 + C13462 - C13463 - C13464) * C7788 + C13475 * C7789) *
                C50890) *
               C1169 +
           (((C11252 - (C11219 + C11218) + C11253) * C7787 +
             (C11254 - (C11225 + C11224) + C11255) * C7788 +
             (C11256 - (C11231 + C11230) + C11257) * C7789) *
                C50996 +
            ((C13463 - (C13462 + C13461) + C13464) * C7787 +
             (C13467 - (C13466 + C13465) + C13468) * C7788 +
             (C13469 - (C13470 + C13471) + C13472) * C7789) *
                C50890) *
               C50764) *
              C1275 +
          ((((C13058 * C378 -
              ((C10648 * C134 + C50688 * C144) * C50983 +
               (C10648 * C123 + C50688 * C130) * C377) +
              C13059 * C50790) *
                 C7787 +
             (C11920 - (C11898 + C11899) + C11921) * C7788 +
             (C11922 - (C11904 + C11905) + C11923) * C7789) *
                C50996 +
            ((C13640 * C378 - (C13059 * C50983 + C13058 * C377) +
              C13641 * C50790) *
                 C7787 +
             (C14414 - (C14415 + C14416) + C14417) * C7788 +
             (C14418 - (C14419 + C14420) + C14421) * C7789) *
                C50890) *
               C1169 +
           (((C11899 + C11898 - C11920 - C11921) * C7787 +
             (C11905 + C11904 - C11922 - C11923) * C7788 +
             (C11911 + C11910 - C11924 - C11925) * C7789) *
                C50996 +
            ((C14416 + C14415 - C14414 - C14417) * C7787 +
             (C14420 + C14419 - C14418 - C14421) * C7788 +
             (C11918 * C377 + C11919 * C50983 -
              (C10648 * C8950 + C50688 * C8952) * C378 -
              (C10648 * C8954 + C50688 * C8956) * C50790) *
                 C7789) *
                C50890) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C377 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50983 -
             (C5366 + C5367 + C5368) * C378 -
             (C5369 + C5370 + C5371) * C50790) *
                C50852 * C50996 +
            ((C5368 + C5367 + C5366) * C377 + (C5371 + C5370 + C5369) * C50983 -
             (C5946 + C5945 + C5944) * C378 -
             (C5949 + C5948 + C5947) * C50790) *
                C50852 * C50890) *
               C1169 +
           (((C3020 + C3019 + C3018) * C378 -
             ((C2367 + C2366 + C2365) * C50983 +
              (C2364 + C2363 + C2362) * C377) +
             (C3023 + C3022 + C3021) * C50790) *
                C50852 * C50996 +
            ((C3346 + C3347 + C3348) * C378 -
             ((C3021 + C3022 + C3023) * C50983 +
              (C3018 + C3019 + C3020) * C377) +
             (C3349 + C3350 + C3351) * C50790) *
                C50852 * C50890) *
               C50764) *
              C1275 +
          ((((C5372 + C5373 + C5374) * C378 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C50983 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C377) +
             (C5375 + C5376 + C5377) * C50790) *
                C50852 * C50996 +
            ((C5952 + C5951 + C5950) * C378 -
             ((C5377 + C5376 + C5375) * C50983 +
              (C5374 + C5373 + C5372) * C377) +
             (C5955 + C5954 + C5953) * C50790) *
                C50852 * C50890) *
               C1169 +
           (((C2368 + C2369 + C2370) * C377 + (C2371 + C2372 + C2373) * C50983 -
             (C3962 + C3961 + C3960) * C378 -
             (C3965 + C3964 + C3963) * C50790) *
                C50852 * C50996 +
            ((C3960 + C3961 + C3962) * C377 + (C3963 + C3964 + C3965) * C50983 -
             (C2178 * C965 + C2173 * C969 + C2177 * C966 + C2172 * C970 +
              C2176 * C967 + C2171 * C971) *
                 C378 -
             (C2178 * C973 + C2173 * C977 + C2177 * C974 + C2172 * C978 +
              C2176 * C975 + C2171 * C979) *
                 C50790) *
                C50852 * C50890) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C50852 * C20993 +
            (C13056 * C377 + C13057 * C50983 - C13638 * C378 -
             C13639 * C50790) *
                C50852 * C20994 +
            (C13638 * C377 + C13639 * C50983 - C13926 * C378 -
             C13927 * C50790) *
                C50852 * C20995 +
            (C13926 * C377 + C13927 * C50983 - C19446 * C378 -
             C19447 * C50790) *
                C50852 * C20996) *
               C1169 +
           ((C11252 - (C11219 + C11218) + C11253) * C50852 * C20993 +
            (C13463 - (C13462 + C13461) + C13464) * C50852 * C20994 +
            (C19018 - (C19017 + C19016) + C19019) * C50852 * C20995 +
            (C19336 * C378 - (C13809 * C50983 + C13808 * C377) +
             C19337 * C50790) *
                C50852 * C20996) *
               C50764) *
              C1275 +
          (((C13058 * C378 -
             ((C10648 * C134 + C50688 * C144) * C50983 +
              (C10648 * C123 + C50688 * C130) * C377) +
             C13059 * C50790) *
                C50852 * C20993 +
            (C13640 * C378 - (C13059 * C50983 + C13058 * C377) +
             C13641 * C50790) *
                C50852 * C20994 +
            (C19178 * C378 - (C13641 * C50983 + C13640 * C377) +
             C19179 * C50790) *
                C50852 * C20995 +
            (C21564 * C378 - (C19179 * C50983 + C19178 * C377) +
             C21565 * C50790) *
                C50852 * C20996) *
               C1169 +
           ((C11899 + C11898 - C11920 - C11921) * C50852 * C20993 +
            (C14416 + C14415 - C14414 - C14417) * C50852 * C20994 +
            (C19936 + C19935 - C19934 - C19937) * C50852 * C20995 +
            (C19180 * C377 + C19181 * C50983 -
             (C10648 * C16603 + C50688 * C16604) * C378 -
             (C10648 * C16605 + C50688 * C16606) * C50790) *
                C50852 * C20996) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C1511 +
              (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
              C13057 * C50790) *
                 C7787 +
             (C12154 + C12155 - C12156 - C12157) * C7788 + C12512 * C7789) *
                C50996 +
            ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
              C13639 * C50790) *
                 C7787 +
             (C14762 + C14763 - C14764 - C14765) * C7788 +
             (C14766 + C14767 - C14768 - C14769) * C7789) *
                C50890) *
               C1169 +
           (((C12156 - (C12155 + C12154) + C12157) * C7787 +
             (C12160 - (C12159 + C12158) + C12161) * C7788 +
             (C12164 - (C12163 + C12162) + C12165) * C7789) *
                C50996 +
            ((C14764 - (C14763 + C14762) + C14765) * C7787 +
             (C14768 - (C14767 + C14766) + C14769) * C7788 +
             (C11492 * C1512 - (C11249 * C1509 + C11248 * C1511) +
              C11493 * C50790) *
                 C7789) *
                C50890) *
               C50764) *
              C50974 +
          ((((C13058 * C1512 -
              ((C10648 * C134 + C50688 * C144) * C1509 +
               (C10648 * C123 + C50688 * C130) * C1511) +
              C13059 * C50790) *
                 C7787 +
             (C12166 - (C12167 + C12168) + C12169) * C7788 +
             (C12170 - (C12171 + C12172) + C12173) * C7789) *
                C50996 +
            ((C13640 * C1512 - (C13059 * C1509 + C13058 * C1511) +
              C13641 * C50790) *
                 C7787 +
             (C14770 - (C14771 + C14772) + C14773) * C7788 +
             (C14774 - (C14775 + C14776) + C14777) * C7789) *
                C50890) *
               C1169 +
           (((C12168 + C12167 - C12166 - C12169) * C7787 +
             (C12172 + C12171 - C12170 - C12173) * C7788 +
             (C12176 + C12175 - C12174 - C12177) * C7789) *
                C50996 +
            ((C14772 + C14771 - C14770 - C14773) * C7787 +
             (C14776 + C14775 - C14774 - C14777) * C7788 +
             (C11918 * C1511 + C11919 * C1509 -
              (C10648 * C8950 + C50688 * C8952) * C1512 -
              (C10648 * C8954 + C50688 * C8956) * C50790) *
                 C7789) *
                C50890) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C1511 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C1509 -
             (C5366 + C5367 + C5368) * C1512 -
             (C5369 + C5370 + C5371) * C50790) *
                C50852 * C50996 +
            ((C5368 + C5367 + C5366) * C1511 + (C5371 + C5370 + C5369) * C1509 -
             (C5946 + C5945 + C5944) * C1512 -
             (C5949 + C5948 + C5947) * C50790) *
                C50852 * C50890) *
               C1169 +
           (((C3020 + C3019 + C3018) * C1512 -
             ((C2367 + C2366 + C2365) * C1509 +
              (C2364 + C2363 + C2362) * C1511) +
             (C3023 + C3022 + C3021) * C50790) *
                C50852 * C50996 +
            ((C3346 + C3347 + C3348) * C1512 -
             ((C3021 + C3022 + C3023) * C1509 +
              (C3018 + C3019 + C3020) * C1511) +
             (C3349 + C3350 + C3351) * C50790) *
                C50852 * C50890) *
               C50764) *
              C50974 +
          ((((C5372 + C5373 + C5374) * C1512 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C1509 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C1511) +
             (C5375 + C5376 + C5377) * C50790) *
                C50852 * C50996 +
            ((C5952 + C5951 + C5950) * C1512 -
             ((C5377 + C5376 + C5375) * C1509 +
              (C5374 + C5373 + C5372) * C1511) +
             (C5955 + C5954 + C5953) * C50790) *
                C50852 * C50890) *
               C1169 +
           (((C2368 + C2369 + C2370) * C1511 + (C2371 + C2372 + C2373) * C1509 -
             (C3962 + C3961 + C3960) * C1512 -
             (C3965 + C3964 + C3963) * C50790) *
                C50852 * C50996 +
            ((C3960 + C3961 + C3962) * C1511 + (C3963 + C3964 + C3965) * C1509 -
             (C2178 * C965 + C2173 * C969 + C2177 * C966 + C2172 * C970 +
              C2176 * C967 + C2171 * C971) *
                 C1512 -
             (C2178 * C973 + C2173 * C977 + C2177 * C974 + C2172 * C978 +
              C2176 * C975 + C2171 * C979) *
                 C50790) *
                C50852 * C50890) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1511 +
             (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
             C13057 * C50790) *
                C50852 * C20993 +
            (C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
             C13639 * C50790) *
                C50852 * C20994 +
            (C13638 * C1511 + C13639 * C1509 - C13926 * C1512 -
             C13927 * C50790) *
                C50852 * C20995 +
            (C13926 * C1511 + C13927 * C1509 - C19446 * C1512 -
             C19447 * C50790) *
                C50852 * C20996) *
               C1169 +
           ((C12156 - (C12155 + C12154) + C12157) * C50852 * C20993 +
            (C14764 - (C14763 + C14762) + C14765) * C50852 * C20994 +
            (C20280 - (C20279 + C20278) + C20281) * C50852 * C20995 +
            (C19336 * C1512 - (C13809 * C1509 + C13808 * C1511) +
             C19337 * C50790) *
                C50852 * C20996) *
               C50764) *
              C50974 +
          (((C13058 * C1512 -
             ((C10648 * C134 + C50688 * C144) * C1509 +
              (C10648 * C123 + C50688 * C130) * C1511) +
             C13059 * C50790) *
                C50852 * C20993 +
            (C13640 * C1512 - (C13059 * C1509 + C13058 * C1511) +
             C13641 * C50790) *
                C50852 * C20994 +
            (C19178 * C1512 - (C13641 * C1509 + C13640 * C1511) +
             C19179 * C50790) *
                C50852 * C20995 +
            (C21564 * C1512 - (C19179 * C1509 + C19178 * C1511) +
             C21565 * C50790) *
                C50852 * C20996) *
               C1169 +
           ((C12168 + C12167 - C12166 - C12169) * C50852 * C20993 +
            (C14772 + C14771 - C14770 - C14773) * C50852 * C20994 +
            (C20284 + C20283 - C20282 - C20285) * C50852 * C20995 +
            (C19180 * C1511 + C19181 * C1509 -
             (C10648 * C16603 + C50688 * C16604) * C1512 -
             (C10648 * C16605 + C50688 * C16606) * C50790) *
                C50852 * C20996) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1511 +
             (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
             C13057 * C50790) *
                C7787 +
            (C12154 + C12155 - C12156 - C12157) * C7788 + C12512 * C7789) *
               C50996 +
           ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
             C13639 * C50790) *
                C7787 +
            (C14762 + C14763 - C14764 - C14765) * C7788 + C15270 * C7789) *
               C50890) *
              C51027 +
          (((C12156 - (C12155 + C12154) + C12157) * C7787 +
            (C12160 - (C12159 + C12158) + C12161) * C7788 +
            (C12164 - (C12163 + C12162) + C12165) * C7789) *
               C50996 +
           ((C14764 - (C14763 + C14762) + C14765) * C7787 +
            (C14768 - (C14767 + C14766) + C14769) * C7788 +
            (C15265 - (C15266 + C15267) + C15268) * C7789) *
               C50890) *
              C51015 +
          ((C12512 * C7787 + C12513 * C7788 +
            (C12508 + C12507 - C12506 - C12509) * C7789) *
               C50996 +
           (C15270 * C7787 + (C15267 + C15266 - C15265 - C15268) * C7788 +
            (C11250 * C1511 + C11251 * C1509 -
             (C10648 * C11459 + C50688 * C11460) * C1512 -
             (C10648 * C11461 + C50688 * C11462) * C50790) *
                C7789) *
               C50890) *
              C1274) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1511 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C1509 -
            (C5366 + C5367 + C5368) * C1512 -
            (C5369 + C5370 + C5371) * C50790) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C1511 + (C5371 + C5370 + C5369) * C1509 -
            (C5946 + C5945 + C5944) * C1512 -
            (C5949 + C5948 + C5947) * C50790) *
               C50852 * C50890) *
              C51027 +
          (((C3020 + C3019 + C3018) * C1512 -
            ((C2367 + C2366 + C2365) * C1509 +
             (C2364 + C2363 + C2362) * C1511) +
            (C3023 + C3022 + C3021) * C50790) *
               C50852 * C50996 +
           ((C3346 + C3347 + C3348) * C1512 -
            ((C3021 + C3022 + C3023) * C1509 +
             (C3018 + C3019 + C3020) * C1511) +
            (C3349 + C3350 + C3351) * C50790) *
               C50852 * C50890) *
              C51015 +
          (((C2701 + C2700 + C2699) * C1511 + (C2698 + C2697 + C2696) * C1509 -
            (C3026 + C3025 + C3024) * C1512 -
            (C3029 + C3028 + C3027) * C50790) *
               C50852 * C50996 +
           ((C3024 + C3025 + C3026) * C1511 + (C3027 + C3028 + C3029) * C1509 -
            (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
             C2176 * C3323 + C2171 * C3326) *
                C1512 -
            (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
             C2176 * C3329 + C2171 * C3332) *
                C50790) *
               C50852 * C50890) *
              C1274) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C1511 +
            (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
            C13057 * C50790) *
               C50852 * C20993 +
           (C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
            C13639 * C50790) *
               C50852 * C20994 +
           (C13638 * C1511 + C13639 * C1509 - C13926 * C1512 -
            C13927 * C50790) *
               C50852 * C20995 +
           (C13926 * C1511 + C13927 * C1509 - C19446 * C1512 -
            C19447 * C50790) *
               C50852 * C20996) *
              C51027 +
          ((C12156 - (C12155 + C12154) + C12157) * C50852 * C20993 +
           (C14764 - (C14763 + C14762) + C14765) * C50852 * C20994 +
           (C20280 - (C20279 + C20278) + C20281) * C50852 * C20995 +
           (C19336 * C1512 - (C13809 * C1509 + C13808 * C1511) +
            C19337 * C50790) *
               C50852 * C20996) *
              C51015 +
          (C12512 * C50852 * C20993 + C15270 * C50852 * C20994 +
           (C20774 + C20773 - C20772 - C20775) * C50852 * C20995 +
           (C13810 * C1511 + C13811 * C1509 -
            (C10648 * C13914 + C50688 * C13917) * C1512 -
            (C10648 * C13918 + C50688 * C13920) * C50790) *
               C50852 * C20996) *
              C1274) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1744 +
             (C10648 * C133 + C50688 * C143) * C51028 - C13056 * C1745 -
             C13057 * C51018 + C13638 * C1746 + C13639 * C1743) *
                C7787 +
            (C12612 + C12613 - C12614 - C12615 + C12616 + C12617) * C7788 +
            (C12618 + C12619 - C12620 - C12621 + C12622 + C12623) * C7789) *
               C50996 +
           ((C13056 * C1744 + C13057 * C51028 - C13638 * C1745 -
             C13639 * C51018 + C13926 * C1746 + C13927 * C1743) *
                C7787 +
            (C15417 + C15418 - C15419 - C15420 + C15421 + C15422) * C7788 +
            (C15423 + C15424 - C15425 - C15426 + C15427 + C15428) * C7789) *
               C50890) *
              C1169 +
          (((C12614 - (C12613 + C12612) + C12615 - C12616 - C12617) * C7787 +
            (C12620 - (C12619 + C12618) + C12621 - C12622 - C12623) * C7788 +
            (C12626 - (C12625 + C12624) + C12627 - C12628 - C12629) * C7789) *
               C50996 +
           ((C15419 - (C15418 + C15417) + C15420 - C15421 - C15422) * C7787 +
            (C15425 - (C15424 + C15423) + C15426 - C15427 - C15428) * C7788 +
            (C11492 * C1745 - (C11249 * C51028 + C11248 * C1744) +
             C11493 * C51018 - (C10648 * C11565 + C50688 * C11566) * C1746 -
             (C10648 * C11567 + C50688 * C11568) * C1743) *
                C7789) *
               C50890) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1744 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C51028 -
            (C5366 + C5367 + C5368) * C1745 - (C5369 + C5370 + C5371) * C51018 +
            (C5944 + C5945 + C5946) * C1746 + (C5947 + C5948 + C5949) * C1743) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C1744 + (C5371 + C5370 + C5369) * C51028 -
            (C5946 + C5945 + C5944) * C1745 - (C5949 + C5948 + C5947) * C51018 +
            (C6226 + C6225 + C6224) * C1746 + (C6229 + C6228 + C6227) * C1743) *
               C50852 * C50890) *
              C1169 +
          (((C3020 + C3019 + C3018) * C1745 -
            ((C2367 + C2366 + C2365) * C51028 +
             (C2364 + C2363 + C2362) * C1744) +
            (C3023 + C3022 + C3021) * C51018 - (C3348 + C3347 + C3346) * C1746 -
            (C3351 + C3350 + C3349) * C1743) *
               C50852 * C50996 +
           ((C3346 + C3347 + C3348) * C1745 -
            ((C3021 + C3022 + C3023) * C51028 +
             (C3018 + C3019 + C3020) * C1744) +
            (C3349 + C3350 + C3351) * C51018 -
            (C2178 * C3449 + C2173 * C3452 + C2177 * C3450 + C2172 * C3453 +
             C2176 * C3451 + C2171 * C3454) *
                C1746 -
            (C2178 * C3455 + C2173 * C3458 + C2177 * C3456 + C2172 * C3459 +
             C2176 * C3457 + C2171 * C3460) *
                C1743) *
               C50852 * C50890) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C1744 +
            (C10648 * C133 + C50688 * C143) * C51028 - C13056 * C1745 -
            C13057 * C51018 + C13638 * C1746 + C13639 * C1743) *
               C50852 * C20993 +
           (C13056 * C1744 + C13057 * C51028 - C13638 * C1745 -
            C13639 * C51018 + C13926 * C1746 + C13927 * C1743) *
               C50852 * C20994 +
           (C13638 * C1744 + C13639 * C51028 - C13926 * C1745 -
            C13927 * C51018 + C19446 * C1746 + C19447 * C1743) *
               C50852 * C20995 +
           (C13926 * C1744 + C13927 * C51028 - C19446 * C1745 -
            C19447 * C51018 + C21738 * C1746 + C21739 * C1743) *
               C50852 * C20996) *
              C1169 +
          ((C12614 - (C12613 + C12612) + C12615 - C12616 - C12617) * C50852 *
               C20993 +
           (C15419 - (C15418 + C15417) + C15420 - C15421 - C15422) * C50852 *
               C20994 +
           (C20924 - (C20923 + C20922) + C20925 - C20926 - C20927) * C50852 *
               C20995 +
           (C19336 * C1745 - (C13809 * C51028 + C13808 * C1744) +
            C19337 * C51018 - (C10648 * C19437 + C50688 * C19438) * C1746 -
            (C10648 * C19439 + C50688 * C19440) * C1743) *
               C50852 * C20996) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                 C2178 * C124 + C2173 * C131) *
                    C121 +
                (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                 C2178 * C135 + C2173 * C145) *
                    C50778) *
                   C50852 * C50996 +
               ((C2176 * C382 + C2171 * C388 + C2177 * C381 + C2172 * C387 +
                 C2178 * C380 + C2173 * C386) *
                    C121 +
                (C2176 * C392 + C2171 * C400 + C2177 * C391 + C2172 * C399 +
                 C2178 * C390 + C2173 * C398) *
                    C50778) *
                   C50852 * C50890) *
                  C50748 * C113 -
              (((C2178 * C389 + C2173 * C397 + C2177 * C390 + C2172 * C398 +
                 C2176 * C391 + C2171 * C399) *
                    C50778 +
                (C2178 * C379 + C2173 * C385 + C2177 * C380 + C2172 * C386 +
                 C2176 * C381 + C2171 * C387) *
                    C121) *
                   C50852 * C50890 +
               ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
                 C2176 * C134 + C2171 * C144) *
                    C50778 +
                (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
                 C2176 * C123 + C2171 * C130) *
                    C121) *
                   C50852 * C50996) *
                  C50748 * C114 +
              (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
                 C2178 * C126 + C2173 * C138) *
                    C121 +
                (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
                 C2178 * C137 + C2173 * C147) *
                    C50778) *
                   C50852 * C50996 +
               ((C2176 * C380 + C2171 * C386 + C2177 * C379 + C2172 * C385 +
                 C2178 * C383 + C2173 * C393) *
                    C121 +
                (C2176 * C390 + C2171 * C398 + C2177 * C389 + C2172 * C397 +
                 C2178 * C394 + C2173 * C401) *
                    C50778) *
                   C50852 * C50890) *
                  C50748 * C115 -
              (((C2178 * C396 + C2173 * C402 + C2177 * C394 + C2172 * C401 +
                 C2176 * C389 + C2171 * C397) *
                    C50778 +
                (C2178 * C384 + C2173 * C395 + C2177 * C383 + C2172 * C393 +
                 C2176 * C379 + C2171 * C385) *
                    C121) *
                   C50852 * C50890 +
               ((C2178 * C140 + C2173 * C148 + C2177 * C137 + C2172 * C147 +
                 C2176 * C136 + C2171 * C146) *
                    C50778 +
                (C2178 * C127 + C2173 * C139 + C2177 * C126 + C2172 * C138 +
                 C2176 * C125 + C2171 * C132) *
                    C121) *
                   C50852 * C50996) *
                  C50748 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                  C2178 * C124 + C2173 * C131) *
                     C121 +
                 (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                  C2178 * C135 + C2173 * C145) *
                     C50778) *
                    C50852 * C50996 +
                ((C5368 + C5367 + C5366) * C121 +
                 (C5371 + C5370 + C5369) * C50778) *
                    C50852 * C50890) *
                   C501 -
               (((C3021 + C3022 + C3023) * C50778 +
                 (C3018 + C3019 + C3020) * C121) *
                    C50852 * C50890 +
                ((C2367 + C2366 + C2365) * C50778 +
                 (C2364 + C2363 + C2362) * C121) *
                    C50852 * C50996) *
                   C502 +
               (((C2701 + C2700 + C2699) * C121 +
                 (C2698 + C2697 + C2696) * C50778) *
                    C50852 * C50996 +
                ((C3024 + C3025 + C3026) * C121 +
                 (C3027 + C3028 + C3029) * C50778) *
                    C50852 * C50890) *
                   C503) *
                  C50974 +
              ((((C2368 + C2369 + C2370) * C121 +
                 (C2371 + C2372 + C2373) * C50778) *
                    C50852 * C50996 +
                ((C3960 + C3961 + C3962) * C121 +
                 (C3963 + C3964 + C3965) * C50778) *
                    C50852 * C50890) *
                   C502 -
               (((C5377 + C5376 + C5375) * C50778 +
                 (C5374 + C5373 + C5372) * C121) *
                    C50852 * C50890 +
                ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
                  C2176 * C134 + C2171 * C144) *
                     C50778 +
                 (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
                  C2176 * C123 + C2171 * C130) *
                     C121) *
                    C50852 * C50996) *
                   C501 -
               (((C2178 * C731 + C2173 * C739 + C2177 * C732 + C2172 * C740 +
                  C2176 * C733 + C2171 * C741) *
                     C50778 +
                 (C2178 * C715 + C2173 * C727 + C2177 * C716 + C2172 * C728 +
                  C2176 * C717 + C2171 * C729) *
                     C121) *
                    C50852 * C50890 +
                ((C2707 + C2706 + C2705) * C50778 +
                 (C2704 + C2703 + C2702) * C121) *
                    C50852 * C50996) *
                   C503) *
                  C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C844 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C841 -
            (C5366 + C5367 + C5368) * C845 - (C5369 + C5370 + C5371) * C842 +
            (C5944 + C5945 + C5946) * C846 + (C5947 + C5948 + C5949) * C843) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C844 + (C5371 + C5370 + C5369) * C841 -
            (C5946 + C5945 + C5944) * C845 - (C5949 + C5948 + C5947) * C842 +
            (C2176 * C1058 + C2171 * C1062 + C2177 * C1057 + C2172 * C1061 +
             C2178 * C1056 + C2173 * C1060) *
                C846 +
            (C2176 * C1066 + C2171 * C1070 + C2177 * C1065 + C2172 * C1069 +
             C2178 * C1064 + C2173 * C1068) *
                C843) *
               C50852 * C50890) *
              C50748 * C50974 +
          (((C5372 + C5373 + C5374) * C845 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C841 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C844) +
            (C5375 + C5376 + C5377) * C842 - (C5950 + C5951 + C5952) * C846 -
            (C5953 + C5954 + C5955) * C843) *
               C50852 * C50996 +
           ((C5952 + C5951 + C5950) * C845 -
            ((C5377 + C5376 + C5375) * C841 + (C5374 + C5373 + C5372) * C844) +
            (C5955 + C5954 + C5953) * C842 -
            (C2178 * C1055 + C2173 * C1059 + C2177 * C1056 + C2172 * C1060 +
             C2176 * C1057 + C2171 * C1061) *
                C846 -
            (C2178 * C1063 + C2173 * C1067 + C2177 * C1064 + C2172 * C1068 +
             C2176 * C1065 + C2171 * C1069) *
                C843) *
               C50852 * C50890) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C7787 +
            (C10802 + C10803) * C7788 + C11016 * C7789) *
               C50996 +
           (((C10648 * C382 + C50688 * C388) * C121 +
             (C10648 * C392 + C50688 * C400) * C50778) *
                C7787 +
            (C11242 * C121 + C11243 * C50778) * C7788 +
            (C11245 * C121 + C11246 * C50778) * C7789) *
               C50890) *
              C50748 * C113 -
          (((C11917 * C50778 + C11916 * C121) * C7789 +
            (C11915 * C50778 + C11914 * C121) * C7788 +
            ((C10648 * C391 + C50688 * C399) * C50778 +
             (C10648 * C381 + C50688 * C387) * C121) *
                C7787) *
               C50890 +
           (C11027 * C7789 + (C10809 + C10808) * C7788 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C7787) *
               C50996) *
              C50748 * C114 +
          ((((C10648 * C124 + C50688 * C131) * C121 +
             (C10648 * C135 + C50688 * C145) * C50778) *
                C7787 +
            (C10814 + C10815) * C7788 + (C10816 + C10817) * C7789) *
               C50996 +
           (((C10648 * C380 + C50688 * C386) * C121 +
             (C10648 * C390 + C50688 * C398) * C50778) *
                C7787 +
            ((C10648 * C713 + C50688 * C721) * C121 +
             (C10648 * C725 + C50688 * C737) * C50778) *
                C7788 +
            ((C10648 * C716 + C50688 * C728) * C121 +
             (C10648 * C732 + C50688 * C740) * C50778) *
                C7789) *
               C50890) *
              C50748 * C115 -
          ((((C10648 * C731 + C50688 * C739) * C50778 +
             (C10648 * C715 + C50688 * C727) * C121) *
                C7789 +
            ((C10648 * C726 + C50688 * C738) * C50778 +
             (C10648 * C714 + C50688 * C722) * C121) *
                C7788 +
            ((C10648 * C389 + C50688 * C397) * C50778 +
             (C10648 * C379 + C50688 * C385) * C121) *
                C7787) *
               C50890 +
           (((C10648 * C518 + C50688 * C524) * C50778 +
             (C10648 * C509 + C50688 * C514) * C121) *
                C7789 +
            ((C10648 * C259 + C50688 * C271) * C50778 +
             (C10648 * C253 + C50688 * C263) * C121) *
                C7788 +
            ((C10648 * C136 + C50688 * C146) * C50778 +
             (C10648 * C125 + C50688 * C132) * C121) *
                C7787) *
               C50996) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C7787 +
             (C10802 + C10803) * C7788 + C11016 * C7789) *
                C50996 +
            ((C13056 * C121 + C13057 * C50778) * C7787 +
             (C12874 + C12875) * C7788 + C13208 * C7789) *
                C50890) *
               C501 -
           (((C13209 + C13210) * C7789 + (C12877 + C12876) * C7788 +
             (C12875 + C12874) * C7787) *
                C50890 +
            (C11107 * C7789 + (C10805 + C10804) * C7788 +
             (C10803 + C10802) * C7787) *
                C50996) *
               C502 +
           ((C11016 * C7787 + C11017 * C7788 + (C11033 + C11032) * C7789) *
                C50996 +
            (C13208 * C7787 + (C13210 + C13209) * C7788 +
             (C11250 * C121 + C11251 * C50778) * C7789) *
                C50890) *
               C503) *
              C50974 +
          ((((C10808 + C10809) * C7787 + (C10810 + C10811) * C7788 +
             (C10812 + C10813) * C7789) *
                C50996 +
            ((C12878 + C12879) * C7787 + (C12880 + C12881) * C7788 +
             (C13211 + C13212) * C7789) *
                C50890) *
               C502 -
           ((C13213 * C7789 + (C12879 + C12878) * C7788 +
             (C13059 * C50778 + C13058 * C121) * C7787) *
                C50890 +
            (C11027 * C7789 + (C10809 + C10808) * C7788 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C7787) *
                C50996) *
               C501 -
           ((((C10648 * C8609 + C50688 * C8611) * C50778 +
              (C10648 * C8605 + C50688 * C8607) * C121) *
                 C7789 +
             (C13212 + C13211) * C7788 + C13213 * C7787) *
                C50890 +
            ((C11035 + C11034) * C7789 + C11026 * C7788 + C11027 * C7787) *
                C50996) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C844 +
             (C10648 * C133 + C50688 * C143) * C841 - C13056 * C845 -
             C13057 * C842 + C13638 * C846 + C13639 * C843) *
                C7787 +
            (C11464 + C11465 - C11466 - C11467 + C11494 + C11495) * C7788 +
            (C11472 + C11473 - C11474 - C11475 + C11496 + C11497) * C7789) *
               C50996 +
           ((C13056 * C844 + C13057 * C841 - C13638 * C845 - C13639 * C842 +
             (C10648 * C1058 + C50688 * C1062) * C846 +
             (C10648 * C1066 + C50688 * C1070) * C843) *
                C7787 +
            (C11242 * C844 + C11243 * C841 - C11488 * C845 - C11489 * C842 +
             (C10648 * C3451 + C50688 * C3454) * C846 +
             (C10648 * C3457 + C50688 * C3460) * C843) *
                C7788 +
            (C11245 * C844 + C11246 * C841 - C11490 * C845 - C11491 * C842 +
             (C10648 * C9081 + C50688 * C9083) * C846 +
             (C10648 * C9085 + C50688 * C9087) * C843) *
                C7789) *
               C50890) *
              C50748 * C50974 +
          (((C13058 * C845 -
             ((C10648 * C134 + C50688 * C144) * C841 +
              (C10648 * C123 + C50688 * C130) * C844) +
             C13059 * C842 - C13640 * C846 - C13641 * C843) *
                C7787 +
            (C11914 * C845 - (C10791 * C841 + C10790 * C844) + C11915 * C842 -
             C13642 * C846 - C13643 * C843) *
                C7788 +
            (C11916 * C845 - (C10793 * C841 + C10792 * C844) + C11917 * C842 -
             C13644 * C846 - C13645 * C843) *
                C7789) *
               C50996 +
           ((C13640 * C845 - (C13059 * C841 + C13058 * C844) + C13641 * C842 -
             (C10648 * C1057 + C50688 * C1061) * C846 -
             (C10648 * C1065 + C50688 * C1069) * C843) *
                C7787 +
            (C13642 * C845 - (C11915 * C841 + C11914 * C844) + C13643 * C842 -
             (C10648 * C3450 + C50688 * C3453) * C846 -
             (C10648 * C3456 + C50688 * C3459) * C843) *
                C7788 +
            (C13644 * C845 - (C11917 * C841 + C11916 * C844) + C13645 * C842 -
             (C10648 * C9080 + C50688 * C9082) * C846 -
             (C10648 * C9084 + C50688 * C9086) * C843) *
                C7789) *
               C50890) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C121 +
            (C10648 * C133 + C50688 * C143) * C50778) *
               C50852 * C20993 +
           (C13056 * C121 + C13057 * C50778) * C50852 * C20994 +
           (C13638 * C121 + C13639 * C50778) * C50852 * C20995 +
           (C13926 * C121 + C13927 * C50778) * C50852 * C20996) *
              C50748 * C113 -
          ((C19179 * C50778 + C19178 * C121) * C50852 * C20996 +
           (C13641 * C50778 + C13640 * C121) * C50852 * C20995 +
           (C13059 * C50778 + C13058 * C121) * C50852 * C20994 +
           ((C10648 * C134 + C50688 * C144) * C50778 +
            (C10648 * C123 + C50688 * C130) * C121) *
               C50852 * C20993) *
              C50748 * C114 +
          (((C10648 * C124 + C50688 * C131) * C121 +
            (C10648 * C135 + C50688 * C145) * C50778) *
               C50852 * C20993 +
           (C13060 * C121 + C13061 * C50778) * C50852 * C20994 +
           (C18618 * C121 + C18619 * C50778) * C50852 * C20995 +
           ((C10648 * C1056 + C50688 * C1060) * C121 +
            (C10648 * C1064 + C50688 * C1068) * C50778) *
               C50852 * C20996) *
              C50748 * C115 -
          (((C10648 * C1063 + C50688 * C1067) * C50778 +
            (C10648 * C1055 + C50688 * C1059) * C121) *
               C50852 * C20996 +
           ((C10648 * C859 + C50688 * C865) * C50778 +
            (C10648 * C850 + C50688 * C855) * C121) *
               C50852 * C20995 +
           ((C10648 * C389 + C50688 * C397) * C50778 +
            (C10648 * C379 + C50688 * C385) * C121) *
               C50852 * C20994 +
           ((C10648 * C136 + C50688 * C146) * C50778 +
            (C10648 * C125 + C50688 * C132) * C121) *
               C50852 * C20993) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C50852 * C20993 +
            (C13056 * C121 + C13057 * C50778) * C50852 * C20994 +
            (C13638 * C121 + C13639 * C50778) * C50852 * C20995 +
            (C13926 * C121 + C13927 * C50778) * C50852 * C20996) *
               C501 -
           ((C13809 * C50778 + C13808 * C121) * C50852 * C20996 +
            (C18457 + C18456) * C50852 * C20995 +
            (C12875 + C12874) * C50852 * C20994 +
            (C10803 + C10802) * C50852 * C20993) *
               C502 +
           (C11016 * C50852 * C20993 + C13208 * C50852 * C20994 +
            (C18767 + C18766) * C50852 * C20995 +
            (C13810 * C121 + C13811 * C50778) * C50852 * C20996) *
               C503) *
              C50974 +
          (((C10808 + C10809) * C50852 * C20993 +
            (C12878 + C12879) * C50852 * C20994 +
            (C18458 + C18459) * C50852 * C20995 +
            (C19180 * C121 + C19181 * C50778) * C50852 * C20996) *
               C502 -
           ((C19179 * C50778 + C19178 * C121) * C50852 * C20996 +
            (C13641 * C50778 + C13640 * C121) * C50852 * C20995 +
            (C13059 * C50778 + C13058 * C121) * C50852 * C20994 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C50852 * C20993) *
               C501 -
           (((C10648 * C9084 + C50688 * C9086) * C50778 +
             (C10648 * C9080 + C50688 * C9082) * C121) *
                C50852 * C20996 +
            (C18769 + C18768) * C50852 * C20995 + C13213 * C50852 * C20994 +
            C11027 * C50852 * C20993) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C844 +
            (C10648 * C133 + C50688 * C143) * C841 - C13056 * C845 -
            C13057 * C842 + C13638 * C846 + C13639 * C843) *
               C50852 * C20993 +
           (C13056 * C844 + C13057 * C841 - C13638 * C845 - C13639 * C842 +
            C13926 * C846 + C13927 * C843) *
               C50852 * C20994 +
           (C13638 * C844 + C13639 * C841 - C13926 * C845 - C13927 * C842 +
            C19446 * C846 + C19447 * C843) *
               C50852 * C20995 +
           (C13926 * C844 + C13927 * C841 - C19446 * C845 - C19447 * C842 +
            (C10648 * C16720 + C50688 * C16722) * C846 +
            (C10648 * C16724 + C50688 * C16726) * C843) *
               C50852 * C20996) *
              C50748 * C50974 +
          ((C13058 * C845 -
            ((C10648 * C134 + C50688 * C144) * C841 +
             (C10648 * C123 + C50688 * C130) * C844) +
            C13059 * C842 - C13640 * C846 - C13641 * C843) *
               C50852 * C20993 +
           (C13640 * C845 - (C13059 * C841 + C13058 * C844) + C13641 * C842 -
            C19178 * C846 - C19179 * C843) *
               C50852 * C20994 +
           (C19178 * C845 - (C13641 * C841 + C13640 * C844) + C19179 * C842 -
            C21564 * C846 - C21565 * C843) *
               C50852 * C20995 +
           (C21564 * C845 - (C19179 * C841 + C19178 * C844) + C21565 * C842 -
            (C10648 * C16719 + C50688 * C16721) * C846 -
            (C10648 * C16723 + C50688 * C16725) * C843) *
               C50852 * C20996) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                  C2178 * C124 + C2173 * C131) *
                     C121 +
                 (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                  C2178 * C135 + C2173 * C145) *
                     C50778) *
                    C50852 * C50996 +
                ((C2176 * C382 + C2171 * C388 + C2177 * C381 + C2172 * C387 +
                  C2178 * C380 + C2173 * C386) *
                     C121 +
                 (C2176 * C392 + C2171 * C400 + C2177 * C391 + C2172 * C399 +
                  C2178 * C390 + C2173 * C398) *
                     C50778) *
                    C50852 * C50890) *
                   C50981 -
               (((C3021 + C3022 + C3023) * C50778 +
                 (C3018 + C3019 + C3020) * C121) *
                    C50852 * C50890 +
                ((C2367 + C2366 + C2365) * C50778 +
                 (C2364 + C2363 + C2362) * C121) *
                    C50852 * C50996) *
                   C50764) *
                  C250 +
              ((((C2368 + C2369 + C2370) * C121 +
                 (C2371 + C2372 + C2373) * C50778) *
                    C50852 * C50996 +
                ((C3960 + C3961 + C3962) * C121 +
                 (C3963 + C3964 + C3965) * C50778) *
                    C50852 * C50890) *
                   C50764 -
               (((C2178 * C389 + C2173 * C397 + C2177 * C390 + C2172 * C398 +
                  C2176 * C391 + C2171 * C399) *
                     C50778 +
                 (C2178 * C379 + C2173 * C385 + C2177 * C380 + C2172 * C386 +
                  C2176 * C381 + C2171 * C387) *
                     C121) *
                    C50852 * C50890 +
                ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
                  C2176 * C134 + C2171 * C144) *
                     C50778 +
                 (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
                  C2176 * C123 + C2171 * C130) *
                     C121) *
                    C50852 * C50996) *
                   C50981) *
                  C251 +
              ((((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
                  C2178 * C126 + C2173 * C138) *
                     C121 +
                 (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
                  C2178 * C137 + C2173 * C147) *
                     C50778) *
                    C50852 * C50996 +
                ((C2176 * C380 + C2171 * C386 + C2177 * C379 + C2172 * C385 +
                  C2178 * C383 + C2173 * C393) *
                     C121 +
                 (C2176 * C390 + C2171 * C398 + C2177 * C389 + C2172 * C397 +
                  C2178 * C394 + C2173 * C401) *
                     C50778) *
                    C50852 * C50890) *
                   C50981 -
               (((C2178 * C1409 + C2173 * C1410 + C2177 * C726 + C2172 * C738 +
                  C2176 * C725 + C2171 * C737) *
                     C50778 +
                 (C2178 * C1407 + C2173 * C1408 + C2177 * C714 + C2172 * C722 +
                  C2176 * C713 + C2171 * C721) *
                     C121) *
                    C50852 * C50890 +
                ((C2379 + C2378 + C2377) * C50778 +
                 (C2376 + C2375 + C2374) * C121) *
                    C50852 * C50996) *
                   C50764) *
                  C252) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                 C2178 * C124 + C2173 * C131) *
                    C121 +
                (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                 C2178 * C135 + C2173 * C145) *
                    C50778) *
                   C50852 * C50996 +
               ((C5368 + C5367 + C5366) * C121 +
                (C5371 + C5370 + C5369) * C50778) *
                   C50852 * C50890) *
                  C592 -
              (((C3021 + C3022 + C3023) * C50778 +
                (C3018 + C3019 + C3020) * C121) *
                   C50852 * C50890 +
               ((C2367 + C2366 + C2365) * C50778 +
                (C2364 + C2363 + C2362) * C121) *
                   C50852 * C50996) *
                  C593 +
              (((C2701 + C2700 + C2699) * C121 +
                (C2698 + C2697 + C2696) * C50778) *
                   C50852 * C50996 +
               ((C3024 + C3025 + C3026) * C121 +
                (C3027 + C3028 + C3029) * C50778) *
                   C50852 * C50890) *
                  C594 -
              (((C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
                 C2176 * C2989 + C2171 * C2992) *
                    C50778 +
                (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
                 C2176 * C2983 + C2171 * C2986) *
                    C121) *
                   C50852 * C50890 +
               ((C2835 + C2834 + C2833) * C50778 +
                (C2832 + C2831 + C2830) * C121) *
                   C50852 * C50996) *
                  C595) *
             C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C844 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C841 -
            (C5366 + C5367 + C5368) * C845 - (C5369 + C5370 + C5371) * C842 +
            (C5944 + C5945 + C5946) * C846 + (C5947 + C5948 + C5949) * C843) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C844 + (C5371 + C5370 + C5369) * C841 -
            (C5946 + C5945 + C5944) * C845 - (C5949 + C5948 + C5947) * C842 +
            (C2176 * C1058 + C2171 * C1062 + C2177 * C1057 + C2172 * C1061 +
             C2178 * C1056 + C2173 * C1060) *
                C846 +
            (C2176 * C1066 + C2171 * C1070 + C2177 * C1065 + C2172 * C1069 +
             C2178 * C1064 + C2173 * C1068) *
                C843) *
               C50852 * C50890) *
              C50981 +
          (((C3020 + C3019 + C3018) * C845 -
            ((C2367 + C2366 + C2365) * C841 + (C2364 + C2363 + C2362) * C844) +
            (C3023 + C3022 + C3021) * C842 - (C3348 + C3347 + C3346) * C846 -
            (C3351 + C3350 + C3349) * C843) *
               C50852 * C50996 +
           ((C3346 + C3347 + C3348) * C845 -
            ((C3021 + C3022 + C3023) * C841 + (C3018 + C3019 + C3020) * C844) +
            (C3349 + C3350 + C3351) * C842 -
            (C2178 * C3449 + C2173 * C3452 + C2177 * C3450 + C2172 * C3453 +
             C2176 * C3451 + C2171 * C3454) *
                C846 -
            (C2178 * C3455 + C2173 * C3458 + C2177 * C3456 + C2172 * C3459 +
             C2176 * C3457 + C2171 * C3460) *
                C843) *
               C50852 * C50890) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C7787 +
             (C10802 + C10803) * C7788 + C11016 * C7789) *
                C50996 +
            (((C10648 * C382 + C50688 * C388) * C121 +
              (C10648 * C392 + C50688 * C400) * C50778) *
                 C7787 +
             (C12874 + C12875) * C7788 + (C12876 + C12877) * C7789) *
                C50890) *
               C50981 -
           (((C11249 * C50778 + C11248 * C121) * C7789 +
             (C12877 + C12876) * C7788 + (C12875 + C12874) * C7787) *
                C50890 +
            (C11107 * C7789 + (C10805 + C10804) * C7788 +
             (C10803 + C10802) * C7787) *
                C50996) *
               C50764) *
              C250 +
          ((((C10808 + C10809) * C7787 + (C10810 + C10811) * C7788 +
             (C10812 + C10813) * C7789) *
                C50996 +
            ((C12878 + C12879) * C7787 + (C12880 + C12881) * C7788 +
             (C11918 * C121 + C11919 * C50778) * C7789) *
                C50890) *
               C50764 -
           (((C12881 + C12880) * C7789 + (C12879 + C12878) * C7788 +
             ((C10648 * C391 + C50688 * C399) * C50778 +
              (C10648 * C381 + C50688 * C387) * C121) *
                 C7787) *
                C50890 +
            (C11027 * C7789 + (C10809 + C10808) * C7788 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C7787) *
                C50996) *
               C50981) *
              C251 +
          (((((C10648 * C124 + C50688 * C131) * C121 +
              (C10648 * C135 + C50688 * C145) * C50778) *
                 C7787 +
             (C10814 + C10815) * C7788 + (C10816 + C10817) * C7789) *
                C50996 +
            (((C10648 * C380 + C50688 * C386) * C121 +
              (C10648 * C390 + C50688 * C398) * C50778) *
                 C7787 +
             (C12894 + C12895) * C7788 + (C12896 + C12897) * C7789) *
                C50890) *
               C50981 -
           ((((C10648 * C2987 + C50688 * C2990) * C50778 +
              (C10648 * C2981 + C50688 * C2984) * C121) *
                 C7789 +
             (C12897 + C12896) * C7788 + (C12895 + C12894) * C7787) *
                C50890 +
            ((C10819 + C10818) * C7789 + (C10817 + C10816) * C7788 +
             (C10815 + C10814) * C7787) *
                C50996) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C7787 +
            (C10802 + C10803) * C7788 + C11016 * C7789) *
               C50996 +
           ((C13056 * C121 + C13057 * C50778) * C7787 +
            (C12874 + C12875) * C7788 + C13208 * C7789) *
               C50890) *
              C592 -
          ((C13312 * C7789 + (C12877 + C12876) * C7788 +
            (C12875 + C12874) * C7787) *
               C50890 +
           (C11107 * C7789 + (C10805 + C10804) * C7788 +
            (C10803 + C10802) * C7787) *
               C50996) *
              C593 +
          ((C11016 * C7787 + C11017 * C7788 + (C11033 + C11032) * C7789) *
               C50996 +
           (C13208 * C7787 + (C13210 + C13209) * C7788 +
            (C13313 + C13314) * C7789) *
               C50890) *
              C594 -
          ((((C10648 * C11215 + C50688 * C11216) * C50778 +
             (C10648 * C11213 + C50688 * C11214) * C121) *
                C7789 +
            (C13314 + C13313) * C7788 + C13312 * C7787) *
               C50890 +
           ((C11115 + C11114) * C7789 + C11106 * C7788 + C11107 * C7787) *
               C50996) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C844 +
             (C10648 * C133 + C50688 * C143) * C841 - C13056 * C845 -
             C13057 * C842 + C13638 * C846 + C13639 * C843) *
                C7787 +
            (C11464 + C11465 - C11466 - C11467 + C11494 + C11495) * C7788 +
            (C11472 + C11473 - C11474 - C11475 + C11496 + C11497) * C7789) *
               C50996 +
           ((C13056 * C844 + C13057 * C841 - C13638 * C845 - C13639 * C842 +
             (C10648 * C1058 + C50688 * C1062) * C846 +
             (C10648 * C1066 + C50688 * C1070) * C843) *
                C7787 +
            (C13792 + C13793 - C13794 - C13795 + C13812 + C13813) * C7788 +
            (C13800 + C13801 - C13802 - C13803 + C13814 + C13815) * C7789) *
               C50890) *
              C50981 +
          (((C11466 - (C11465 + C11464) + C11467 - C11494 - C11495) * C7787 +
            (C11474 - (C11473 + C11472) + C11475 - C11496 - C11497) * C7788 +
            (C11482 - (C11481 + C11480) + C11483 - C11498 - C11499) * C7789) *
               C50996 +
           ((C13794 - (C13793 + C13792) + C13795 - C13812 - C13813) * C7787 +
            (C13802 - (C13801 + C13800) + C13803 - C13814 - C13815) * C7788 +
            (C11492 * C845 - (C11249 * C841 + C11248 * C844) + C11493 * C842 -
             (C10648 * C11565 + C50688 * C11566) * C846 -
             (C10648 * C11567 + C50688 * C11568) * C843) *
                C7789) *
               C50890) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C50852 * C20993 +
            (C13056 * C121 + C13057 * C50778) * C50852 * C20994 +
            (C13638 * C121 + C13639 * C50778) * C50852 * C20995 +
            (C13926 * C121 + C13927 * C50778) * C50852 * C20996) *
               C50981 -
           ((C13809 * C50778 + C13808 * C121) * C50852 * C20996 +
            (C18457 + C18456) * C50852 * C20995 +
            (C12875 + C12874) * C50852 * C20994 +
            (C10803 + C10802) * C50852 * C20993) *
               C50764) *
              C250 +
          (((C10808 + C10809) * C50852 * C20993 +
            (C12878 + C12879) * C50852 * C20994 +
            (C18458 + C18459) * C50852 * C20995 +
            (C19180 * C121 + C19181 * C50778) * C50852 * C20996) *
               C50764 -
           ((C19179 * C50778 + C19178 * C121) * C50852 * C20996 +
            (C13641 * C50778 + C13640 * C121) * C50852 * C20995 +
            (C13059 * C50778 + C13058 * C121) * C50852 * C20994 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C50852 * C20993) *
               C50981) *
              C251 +
          ((((C10648 * C124 + C50688 * C131) * C121 +
             (C10648 * C135 + C50688 * C145) * C50778) *
                C50852 * C20993 +
            (C13060 * C121 + C13061 * C50778) * C50852 * C20994 +
            (C18618 * C121 + C18619 * C50778) * C50852 * C20995 +
            ((C10648 * C1056 + C50688 * C1060) * C121 +
             (C10648 * C1064 + C50688 * C1068) * C50778) *
                C50852 * C20996) *
               C50981 -
           (((C10648 * C3455 + C50688 * C3458) * C50778 +
             (C10648 * C3449 + C50688 * C3452) * C121) *
                C50852 * C20996 +
            (C18467 + C18466) * C50852 * C20995 +
            (C12895 + C12894) * C50852 * C20994 +
            (C10815 + C10814) * C50852 * C20993) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C121 +
            (C10648 * C133 + C50688 * C143) * C50778) *
               C50852 * C20993 +
           (C13056 * C121 + C13057 * C50778) * C50852 * C20994 +
           (C13638 * C121 + C13639 * C50778) * C50852 * C20995 +
           (C13926 * C121 + C13927 * C50778) * C50852 * C20996) *
              C592 -
          ((C13809 * C50778 + C13808 * C121) * C50852 * C20996 +
           (C18457 + C18456) * C50852 * C20995 +
           (C12875 + C12874) * C50852 * C20994 +
           (C10803 + C10802) * C50852 * C20993) *
              C593 +
          (C11016 * C50852 * C20993 + C13208 * C50852 * C20994 +
           (C18767 + C18766) * C50852 * C20995 +
           (C13810 * C121 + C13811 * C50778) * C50852 * C20996) *
              C594 -
          (((C10648 * C11567 + C50688 * C11568) * C50778 +
            (C10648 * C11565 + C50688 * C11566) * C121) *
               C50852 * C20996 +
           (C18869 + C18868) * C50852 * C20995 + C13312 * C50852 * C20994 +
           C11107 * C50852 * C20993) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C844 +
            (C10648 * C133 + C50688 * C143) * C841 - C13056 * C845 -
            C13057 * C842 + C13638 * C846 + C13639 * C843) *
               C50852 * C20993 +
           (C13056 * C844 + C13057 * C841 - C13638 * C845 - C13639 * C842 +
            C13926 * C846 + C13927 * C843) *
               C50852 * C20994 +
           (C13638 * C844 + C13639 * C841 - C13926 * C845 - C13927 * C842 +
            C19446 * C846 + C19447 * C843) *
               C50852 * C20995 +
           (C13926 * C844 + C13927 * C841 - C19446 * C845 - C19447 * C842 +
            (C10648 * C16720 + C50688 * C16722) * C846 +
            (C10648 * C16724 + C50688 * C16726) * C843) *
               C50852 * C20996) *
              C50981 +
          ((C11466 - (C11465 + C11464) + C11467 - C11494 - C11495) * C50852 *
               C20993 +
           (C13794 - (C13793 + C13792) + C13795 - C13812 - C13813) * C50852 *
               C20994 +
           (C19330 - (C19329 + C19328) + C19331 - C19338 - C19339) * C50852 *
               C20995 +
           (C19336 * C845 - (C13809 * C841 + C13808 * C844) + C19337 * C842 -
            (C10648 * C19437 + C50688 * C19438) * C846 -
            (C10648 * C19439 + C50688 * C19440) * C843) *
               C50852 * C20996) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                 C2178 * C124 + C2173 * C131) *
                    C377 +
                (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                 C2178 * C135 + C2173 * C145) *
                    C50983 -
                (C5366 + C5367 + C5368) * C378 -
                (C5369 + C5370 + C5371) * C50790) *
                   C50852 * C50996 +
               ((C5368 + C5367 + C5366) * C377 +
                (C5371 + C5370 + C5369) * C50983 -
                (C2178 * C849 + C2173 * C854 + C2177 * C848 + C2172 * C853 +
                 C2176 * C847 + C2171 * C852) *
                    C378 -
                (C2178 * C858 + C2173 * C864 + C2177 * C857 + C2172 * C863 +
                 C2176 * C856 + C2171 * C862) *
                    C50790) *
                   C50852 * C50890) *
                  C50748 * C250 +
              (((C5372 + C5373 + C5374) * C378 -
                ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
                  C2176 * C134 + C2171 * C144) *
                     C50983 +
                 (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
                  C2176 * C123 + C2171 * C130) *
                     C377) +
                (C5375 + C5376 + C5377) * C50790) *
                   C50852 * C50996 +
               ((C2176 * C848 + C2171 * C853 + C2177 * C849 + C2172 * C854 +
                 C2178 * C850 + C2173 * C855) *
                    C378 -
                ((C5377 + C5376 + C5375) * C50983 +
                 (C5374 + C5373 + C5372) * C377) +
                (C2176 * C857 + C2171 * C863 + C2177 * C858 + C2172 * C864 +
                 C2178 * C859 + C2173 * C865) *
                    C50790) *
                   C50852 * C50890) *
                  C50748 * C251 +
              (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
                 C2178 * C126 + C2173 * C138) *
                    C377 +
                (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
                 C2178 * C137 + C2173 * C147) *
                    C50983 -
                (C5378 + C5379 + C5380) * C378 -
                (C5381 + C5382 + C5383) * C50790) *
                   C50852 * C50996 +
               ((C5380 + C5379 + C5378) * C377 +
                (C5383 + C5382 + C5381) * C50983 -
                (C2178 * C851 + C2173 * C860 + C2177 * C850 + C2172 * C855 +
                 C2176 * C849 + C2171 * C854) *
                    C378 -
                (C2178 * C861 + C2173 * C866 + C2177 * C859 + C2172 * C865 +
                 C2176 * C858 + C2171 * C864) *
                    C50790) *
                   C50852 * C50890) *
                  C50748 * C252) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
                 C2178 * C124 + C2173 * C131) *
                    C377 +
                (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
                 C2178 * C135 + C2173 * C145) *
                    C50983 -
                (C5366 + C5367 + C5368) * C378 -
                (C5369 + C5370 + C5371) * C50790) *
                   C50852 * C50996 +
               ((C5368 + C5367 + C5366) * C377 +
                (C5371 + C5370 + C5369) * C50983 -
                (C2178 * C849 + C2173 * C854 + C2177 * C848 + C2172 * C853 +
                 C2176 * C847 + C2171 * C852) *
                    C378 -
                (C2178 * C858 + C2173 * C864 + C2177 * C857 + C2172 * C863 +
                 C2176 * C856 + C2171 * C862) *
                    C50790) *
                   C50852 * C50890) *
                  C501 +
              (((C3020 + C3019 + C3018) * C378 -
                ((C2367 + C2366 + C2365) * C50983 +
                 (C2364 + C2363 + C2362) * C377) +
                (C3023 + C3022 + C3021) * C50790) *
                   C50852 * C50996 +
               ((C3346 + C3347 + C3348) * C378 -
                ((C3021 + C3022 + C3023) * C50983 +
                 (C3018 + C3019 + C3020) * C377) +
                (C3349 + C3350 + C3351) * C50790) *
                   C50852 * C50890) *
                  C502 +
              (((C2701 + C2700 + C2699) * C377 +
                (C2698 + C2697 + C2696) * C50983 -
                (C3026 + C3025 + C3024) * C378 -
                (C3029 + C3028 + C3027) * C50790) *
                   C50852 * C50996 +
               ((C3024 + C3025 + C3026) * C377 +
                (C3027 + C3028 + C3029) * C50983 -
                (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
                 C2176 * C3323 + C2171 * C3326) *
                    C378 -
                (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
                 C2176 * C3329 + C2171 * C3332) *
                    C50790) *
                   C50852 * C50890) *
                  C503) *
             C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
            C2178 * C124 + C2173 * C131) *
               C1051 +
           (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
            C2178 * C135 + C2173 * C145) *
               C1047 -
           (C5366 + C5367 + C5368) * C1052 - (C5369 + C5370 + C5371) * C1048 +
           (C5944 + C5945 + C5946) * C1053 + (C5947 + C5948 + C5949) * C1049 -
           (C6224 + C6225 + C6226) * C1054 - (C6227 + C6228 + C6229) * C1050) *
              C50852 * C50996 +
          ((C5368 + C5367 + C5366) * C1051 + (C5371 + C5370 + C5369) * C1047 -
           (C5946 + C5945 + C5944) * C1052 - (C5949 + C5948 + C5947) * C1048 +
           (C6226 + C6225 + C6224) * C1053 + (C6229 + C6228 + C6227) * C1049 -
           (C2178 * C6199 + C2173 * C6202 + C2177 * C6200 + C2172 * C6203 +
            C2176 * C6201 + C2171 * C6204) *
               C1054 -
           (C2178 * C6205 + C2173 * C6208 + C2177 * C6206 + C2172 * C6209 +
            C2176 * C6207 + C2171 * C6210) *
               C1050) *
              C50852 * C50890) *
         C50748 * C50716) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C7787 +
            (C11218 + C11219 - C11252 - C11253) * C7788 + C11262 * C7789) *
               C50996 +
           ((C13056 * C377 + C13057 * C50983 -
             (C10648 * C847 + C50688 * C852) * C378 -
             (C10648 * C856 + C50688 * C862) * C50790) *
                C7787 +
            (C11242 * C377 + C11243 * C50983 - C11488 * C378 -
             C11489 * C50790) *
                C7788 +
            (C11245 * C377 + C11246 * C50983 - C11490 * C378 -
             C11491 * C50790) *
                C7789) *
               C50890) *
              C50748 * C250 +
          (((C13058 * C378 -
             ((C10648 * C134 + C50688 * C144) * C50983 +
              (C10648 * C123 + C50688 * C130) * C377) +
             C13059 * C50790) *
                C7787 +
            (C11920 - (C11898 + C11899) + C11921) * C7788 +
            (C11922 - (C11904 + C11905) + C11923) * C7789) *
               C50996 +
           (((C10648 * C848 + C50688 * C853) * C378 -
             (C13059 * C50983 + C13058 * C377) +
             (C10648 * C857 + C50688 * C863) * C50790) *
                C7787 +
            ((C10648 * C967 + C50688 * C971) * C378 -
             (C11915 * C50983 + C11914 * C377) +
             (C10648 * C975 + C50688 * C979) * C50790) *
                C7788 +
            ((C10648 * C3322 + C50688 * C3325) * C378 -
             (C11917 * C50983 + C11916 * C377) +
             (C10648 * C3328 + C50688 * C3331) * C50790) *
                C7789) *
               C50890) *
              C50748 * C251 +
          ((((C10648 * C124 + C50688 * C131) * C377 +
             (C10648 * C135 + C50688 * C145) * C50983 - C13060 * C378 -
             C13061 * C50790) *
                C7787 +
            (C10796 * C377 + C10797 * C50983 - C12890 * C378 -
             C12891 * C50790) *
                C7788 +
            (C10798 * C377 + C10799 * C50983 - C12892 * C378 -
             C12893 * C50790) *
                C7789) *
               C50996 +
           ((C13060 * C377 + C13061 * C50983 -
             (C10648 * C849 + C50688 * C854) * C378 -
             (C10648 * C858 + C50688 * C864) * C50790) *
                C7787 +
            (C12890 * C377 + C12891 * C50983 -
             (C10648 * C966 + C50688 * C970) * C378 -
             (C10648 * C974 + C50688 * C978) * C50790) *
                C7788 +
            (C12892 * C377 + C12893 * C50983 -
             (C10648 * C3321 + C50688 * C3324) * C378 -
             (C10648 * C3327 + C50688 * C3330) * C50790) *
                C7789) *
               C50890) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C7787 +
            (C11218 + C11219 - C11252 - C11253) * C7788 + C11262 * C7789) *
               C50996 +
           ((C13056 * C377 + C13057 * C50983 -
             (C10648 * C847 + C50688 * C852) * C378 -
             (C10648 * C856 + C50688 * C862) * C50790) *
                C7787 +
            (C13461 + C13462 - C13463 - C13464) * C7788 + C13475 * C7789) *
               C50890) *
              C501 +
          (((C11252 - (C11219 + C11218) + C11253) * C7787 +
            (C11254 - (C11225 + C11224) + C11255) * C7788 +
            (C11256 - (C11231 + C11230) + C11257) * C7789) *
               C50996 +
           ((C13463 - (C13462 + C13461) + C13464) * C7787 +
            (C13467 - (C13466 + C13465) + C13468) * C7788 +
            (C13469 - (C13470 + C13471) + C13472) * C7789) *
               C50890) *
              C502 +
          ((C11262 * C7787 + C11263 * C7788 +
            (C11239 + C11238 - C11258 - C11259) * C7789) *
               C50996 +
           (C13475 * C7787 + (C13471 + C13470 - C13469 - C13472) * C7788 +
            (C11250 * C377 + C11251 * C50983 -
             (C10648 * C11459 + C50688 * C11460) * C378 -
             (C10648 * C11461 + C50688 * C11462) * C50790) *
                C7789) *
               C50890) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C1051 +
            (C10648 * C133 + C50688 * C143) * C1047 - C13056 * C1052 -
            C13057 * C1048 + C13638 * C1053 + C13639 * C1049 - C13926 * C1054 -
            C13927 * C1050) *
               C7787 +
           (C10784 * C1051 + C10785 * C1047 - C11242 * C1052 - C11243 * C1048 +
            C11488 * C1053 + C11489 * C1049 - C13808 * C1054 - C13809 * C1050) *
               C7788 +
           (C10786 * C1051 + C10787 * C1047 - C11245 * C1052 - C11246 * C1048 +
            C11490 * C1053 + C11491 * C1049 - C13810 * C1054 - C13811 * C1050) *
               C7789) *
              C50996 +
          ((C13056 * C1051 + C13057 * C1047 - C13638 * C1052 - C13639 * C1048 +
            C13926 * C1053 + C13927 * C1049 -
            (C10648 * C6201 + C50688 * C6204) * C1054 -
            (C10648 * C6207 + C50688 * C6210) * C1050) *
               C7787 +
           (C11242 * C1051 + C11243 * C1047 - C11488 * C1052 - C11489 * C1048 +
            C13808 * C1053 + C13809 * C1049 -
            (C10648 * C13913 + C50688 * C13915) * C1054 -
            (C10648 * C13916 + C50688 * C13919) * C1050) *
               C7788 +
           (C11245 * C1051 + C11246 * C1047 - C11490 * C1052 - C11491 * C1048 +
            C13810 * C1053 + C13811 * C1049 -
            (C10648 * C13914 + C50688 * C13917) * C1054 -
            (C10648 * C13918 + C50688 * C13920) * C1050) *
               C7789) *
              C50890) *
         C50748 * C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C377 +
            (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
            C13057 * C50790) *
               C50852 * C20993 +
           (C13056 * C377 + C13057 * C50983 - C13638 * C378 - C13639 * C50790) *
               C50852 * C20994 +
           (C13638 * C377 + C13639 * C50983 - C13926 * C378 - C13927 * C50790) *
               C50852 * C20995 +
           (C13926 * C377 + C13927 * C50983 - C19446 * C378 - C19447 * C50790) *
               C50852 * C20996) *
              C50748 * C250 +
          ((C13058 * C378 -
            ((C10648 * C134 + C50688 * C144) * C50983 +
             (C10648 * C123 + C50688 * C130) * C377) +
            C13059 * C50790) *
               C50852 * C20993 +
           (C13640 * C378 - (C13059 * C50983 + C13058 * C377) +
            C13641 * C50790) *
               C50852 * C20994 +
           (C19178 * C378 - (C13641 * C50983 + C13640 * C377) +
            C19179 * C50790) *
               C50852 * C20995 +
           ((C10648 * C6200 + C50688 * C6203) * C378 -
            (C19179 * C50983 + C19178 * C377) +
            (C10648 * C6206 + C50688 * C6209) * C50790) *
               C50852 * C20996) *
              C50748 * C251 +
          (((C10648 * C124 + C50688 * C131) * C377 +
            (C10648 * C135 + C50688 * C145) * C50983 - C13060 * C378 -
            C13061 * C50790) *
               C50852 * C20993 +
           (C13060 * C377 + C13061 * C50983 - C18618 * C378 - C18619 * C50790) *
               C50852 * C20994 +
           (C18618 * C377 + C18619 * C50983 - C21198 * C378 - C21199 * C50790) *
               C50852 * C20995 +
           (C21198 * C377 + C21199 * C50983 -
            (C10648 * C6199 + C50688 * C6202) * C378 -
            (C10648 * C6205 + C50688 * C6208) * C50790) *
               C50852 * C20996) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C377 +
            (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
            C13057 * C50790) *
               C50852 * C20993 +
           (C13056 * C377 + C13057 * C50983 - C13638 * C378 - C13639 * C50790) *
               C50852 * C20994 +
           (C13638 * C377 + C13639 * C50983 - C13926 * C378 - C13927 * C50790) *
               C50852 * C20995 +
           (C13926 * C377 + C13927 * C50983 - C19446 * C378 - C19447 * C50790) *
               C50852 * C20996) *
              C501 +
          ((C11252 - (C11219 + C11218) + C11253) * C50852 * C20993 +
           (C13463 - (C13462 + C13461) + C13464) * C50852 * C20994 +
           (C19018 - (C19017 + C19016) + C19019) * C50852 * C20995 +
           (C19336 * C378 - (C13809 * C50983 + C13808 * C377) +
            C19337 * C50790) *
               C50852 * C20996) *
              C502 +
          (C11262 * C50852 * C20993 + C13475 * C50852 * C20994 +
           (C19022 + C19021 - C19020 - C19023) * C50852 * C20995 +
           (C13810 * C377 + C13811 * C50983 -
            (C10648 * C13914 + C50688 * C13917) * C378 -
            (C10648 * C13918 + C50688 * C13920) * C50790) *
               C50852 * C20996) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C10648 * C122 + C50688 * C129) * C1051 +
           (C10648 * C133 + C50688 * C143) * C1047 - C13056 * C1052 -
           C13057 * C1048 + C13638 * C1053 + C13639 * C1049 - C13926 * C1054 -
           C13927 * C1050) *
              C50852 * C20993 +
          (C13056 * C1051 + C13057 * C1047 - C13638 * C1052 - C13639 * C1048 +
           C13926 * C1053 + C13927 * C1049 - C19446 * C1054 - C19447 * C1050) *
              C50852 * C20994 +
          (C13638 * C1051 + C13639 * C1047 - C13926 * C1052 - C13927 * C1048 +
           C19446 * C1053 + C19447 * C1049 - C21738 * C1054 - C21739 * C1050) *
              C50852 * C20995 +
          (C13926 * C1051 + C13927 * C1047 - C19446 * C1052 - C19447 * C1048 +
           C21738 * C1053 + C21739 * C1049 -
           (C10648 * C21729 + C50688 * C21730) * C1054 -
           (C10648 * C21731 + C50688 * C21732) * C1050) *
              C50852 * C20996) *
         C50748 * C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1511 +
             (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
             C13057 * C50790) *
                C7787 +
            (C12154 + C12155 - C12156 - C12157) * C7788 + C12512 * C7789) *
               C50996 +
           ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
             C13639 * C50790) *
                C7787 +
            (C11242 * C1511 + C11243 * C1509 - C11488 * C1512 -
             C11489 * C50790) *
                C7788 +
            (C11245 * C1511 + C11246 * C1509 - C11490 * C1512 -
             C11491 * C50790) *
                C7789) *
               C50890) *
              C50748 * C51026 +
          (((C13058 * C1512 -
             ((C10648 * C134 + C50688 * C144) * C1509 +
              (C10648 * C123 + C50688 * C130) * C1511) +
             C13059 * C50790) *
                C7787 +
            (C12166 - (C12167 + C12168) + C12169) * C7788 +
            (C12170 - (C12171 + C12172) + C12173) * C7789) *
               C50996 +
           ((C13640 * C1512 - (C13059 * C1509 + C13058 * C1511) +
             C13641 * C50790) *
                C7787 +
            (C13642 * C1512 - (C11915 * C1509 + C11914 * C1511) +
             C13643 * C50790) *
                C7788 +
            (C13644 * C1512 - (C11917 * C1509 + C11916 * C1511) +
             C13645 * C50790) *
                C7789) *
               C50890) *
              C50748 * C51012 +
          ((((C10648 * C124 + C50688 * C131) * C1511 +
             (C10648 * C135 + C50688 * C145) * C1509 - C13060 * C1512 -
             C13061 * C50790) *
                C7787 +
            (C10796 * C1511 + C10797 * C1509 - C12890 * C1512 -
             C12891 * C50790) *
                C7788 +
            (C10798 * C1511 + C10799 * C1509 - C12892 * C1512 -
             C12893 * C50790) *
                C7789) *
               C50996 +
           ((C13060 * C1511 + C13061 * C1509 -
             (C10648 * C849 + C50688 * C854) * C1512 -
             (C10648 * C858 + C50688 * C864) * C50790) *
                C7787 +
            (C12890 * C1511 + C12891 * C1509 -
             (C10648 * C966 + C50688 * C970) * C1512 -
             (C10648 * C974 + C50688 * C978) * C50790) *
                C7788 +
            (C12892 * C1511 + C12893 * C1509 -
             (C10648 * C3321 + C50688 * C3324) * C1512 -
             (C10648 * C3327 + C50688 * C3330) * C50790) *
                C7789) *
               C50890) *
              C50748 * C1173)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1511 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C1509 -
            (C5366 + C5367 + C5368) * C1512 -
            (C5369 + C5370 + C5371) * C50790) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C1511 + (C5371 + C5370 + C5369) * C1509 -
            (C5946 + C5945 + C5944) * C1512 -
            (C5949 + C5948 + C5947) * C50790) *
               C50852 * C50890) *
              C50748 * C51026 +
          (((C5372 + C5373 + C5374) * C1512 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C1509 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C1511) +
            (C5375 + C5376 + C5377) * C50790) *
               C50852 * C50996 +
           ((C5952 + C5951 + C5950) * C1512 -
            ((C5377 + C5376 + C5375) * C1509 +
             (C5374 + C5373 + C5372) * C1511) +
            (C5955 + C5954 + C5953) * C50790) *
               C50852 * C50890) *
              C50748 * C51012 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C1511 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C1509 -
            (C5378 + C5379 + C5380) * C1512 -
            (C5381 + C5382 + C5383) * C50790) *
               C50852 * C50996 +
           ((C5380 + C5379 + C5378) * C1511 + (C5383 + C5382 + C5381) * C1509 -
            (C2178 * C851 + C2173 * C860 + C2177 * C850 + C2172 * C855 +
             C2176 * C849 + C2171 * C854) *
                C1512 -
            (C2178 * C861 + C2173 * C866 + C2177 * C859 + C2172 * C865 +
             C2176 * C858 + C2171 * C864) *
                C50790) *
               C50852 * C50890) *
              C50748 * C1173)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C1511 +
            (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
            C13057 * C50790) *
               C50852 * C20993 +
           (C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
            C13639 * C50790) *
               C50852 * C20994 +
           (C13638 * C1511 + C13639 * C1509 - C13926 * C1512 -
            C13927 * C50790) *
               C50852 * C20995 +
           (C13926 * C1511 + C13927 * C1509 - C19446 * C1512 -
            C19447 * C50790) *
               C50852 * C20996) *
              C50748 * C51026 +
          ((C13058 * C1512 -
            ((C10648 * C134 + C50688 * C144) * C1509 +
             (C10648 * C123 + C50688 * C130) * C1511) +
            C13059 * C50790) *
               C50852 * C20993 +
           (C13640 * C1512 - (C13059 * C1509 + C13058 * C1511) +
            C13641 * C50790) *
               C50852 * C20994 +
           (C19178 * C1512 - (C13641 * C1509 + C13640 * C1511) +
            C19179 * C50790) *
               C50852 * C20995 +
           (C21564 * C1512 - (C19179 * C1509 + C19178 * C1511) +
            C21565 * C50790) *
               C50852 * C20996) *
              C50748 * C51012 +
          (((C10648 * C124 + C50688 * C131) * C1511 +
            (C10648 * C135 + C50688 * C145) * C1509 - C13060 * C1512 -
            C13061 * C50790) *
               C50852 * C20993 +
           (C13060 * C1511 + C13061 * C1509 - C18618 * C1512 -
            C18619 * C50790) *
               C50852 * C20994 +
           (C18618 * C1511 + C18619 * C1509 - C21198 * C1512 -
            C21199 * C50790) *
               C50852 * C20995 +
           (C21198 * C1511 + C21199 * C1509 -
            (C10648 * C6199 + C50688 * C6202) * C1512 -
            (C10648 * C6205 + C50688 * C6208) * C50790) *
               C50852 * C20996) *
              C50748 * C1173)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C1511 +
              (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
              C13057 * C50790) *
                 C7787 +
             (C12154 + C12155 - C12156 - C12157) * C7788 + C12512 * C7789) *
                C50996 +
            ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
              C13639 * C50790) *
                 C7787 +
             (C14762 + C14763 - C14764 - C14765) * C7788 +
             (C14766 + C14767 - C14768 - C14769) * C7789) *
                C50890) *
               C50981 +
           (((C12156 - (C12155 + C12154) + C12157) * C7787 +
             (C12160 - (C12159 + C12158) + C12161) * C7788 +
             (C12164 - (C12163 + C12162) + C12165) * C7789) *
                C50996 +
            ((C14764 - (C14763 + C14762) + C14765) * C7787 +
             (C14768 - (C14767 + C14766) + C14769) * C7788 +
             (C11492 * C1512 - (C11249 * C1509 + C11248 * C1511) +
              C11493 * C50790) *
                 C7789) *
                C50890) *
               C50764) *
              C1275 +
          ((((C13058 * C1512 -
              ((C10648 * C134 + C50688 * C144) * C1509 +
               (C10648 * C123 + C50688 * C130) * C1511) +
              C13059 * C50790) *
                 C7787 +
             (C12166 - (C12167 + C12168) + C12169) * C7788 +
             (C12170 - (C12171 + C12172) + C12173) * C7789) *
                C50996 +
            ((C13640 * C1512 - (C13059 * C1509 + C13058 * C1511) +
              C13641 * C50790) *
                 C7787 +
             (C14770 - (C14771 + C14772) + C14773) * C7788 +
             (C14774 - (C14775 + C14776) + C14777) * C7789) *
                C50890) *
               C50981 +
           (((C12168 + C12167 - C12166 - C12169) * C7787 +
             (C12172 + C12171 - C12170 - C12173) * C7788 +
             (C12176 + C12175 - C12174 - C12177) * C7789) *
                C50996 +
            ((C14772 + C14771 - C14770 - C14773) * C7787 +
             (C14776 + C14775 - C14774 - C14777) * C7788 +
             (C11918 * C1511 + C11919 * C1509 -
              (C10648 * C8950 + C50688 * C8952) * C1512 -
              (C10648 * C8954 + C50688 * C8956) * C50790) *
                 C7789) *
                C50890) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C1511 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C1509 -
             (C5366 + C5367 + C5368) * C1512 -
             (C5369 + C5370 + C5371) * C50790) *
                C50852 * C50996 +
            ((C5368 + C5367 + C5366) * C1511 + (C5371 + C5370 + C5369) * C1509 -
             (C5946 + C5945 + C5944) * C1512 -
             (C5949 + C5948 + C5947) * C50790) *
                C50852 * C50890) *
               C50981 +
           (((C3020 + C3019 + C3018) * C1512 -
             ((C2367 + C2366 + C2365) * C1509 +
              (C2364 + C2363 + C2362) * C1511) +
             (C3023 + C3022 + C3021) * C50790) *
                C50852 * C50996 +
            ((C3346 + C3347 + C3348) * C1512 -
             ((C3021 + C3022 + C3023) * C1509 +
              (C3018 + C3019 + C3020) * C1511) +
             (C3349 + C3350 + C3351) * C50790) *
                C50852 * C50890) *
               C50764) *
              C1275 +
          ((((C5372 + C5373 + C5374) * C1512 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C1509 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C1511) +
             (C5375 + C5376 + C5377) * C50790) *
                C50852 * C50996 +
            ((C5952 + C5951 + C5950) * C1512 -
             ((C5377 + C5376 + C5375) * C1509 +
              (C5374 + C5373 + C5372) * C1511) +
             (C5955 + C5954 + C5953) * C50790) *
                C50852 * C50890) *
               C50981 +
           (((C2368 + C2369 + C2370) * C1511 + (C2371 + C2372 + C2373) * C1509 -
             (C3962 + C3961 + C3960) * C1512 -
             (C3965 + C3964 + C3963) * C50790) *
                C50852 * C50996 +
            ((C3960 + C3961 + C3962) * C1511 + (C3963 + C3964 + C3965) * C1509 -
             (C2178 * C965 + C2173 * C969 + C2177 * C966 + C2172 * C970 +
              C2176 * C967 + C2171 * C971) *
                 C1512 -
             (C2178 * C973 + C2173 * C977 + C2177 * C974 + C2172 * C978 +
              C2176 * C975 + C2171 * C979) *
                 C50790) *
                C50852 * C50890) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1511 +
             (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
             C13057 * C50790) *
                C50852 * C20993 +
            (C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
             C13639 * C50790) *
                C50852 * C20994 +
            (C13638 * C1511 + C13639 * C1509 - C13926 * C1512 -
             C13927 * C50790) *
                C50852 * C20995 +
            (C13926 * C1511 + C13927 * C1509 - C19446 * C1512 -
             C19447 * C50790) *
                C50852 * C20996) *
               C50981 +
           ((C12156 - (C12155 + C12154) + C12157) * C50852 * C20993 +
            (C14764 - (C14763 + C14762) + C14765) * C50852 * C20994 +
            (C20280 - (C20279 + C20278) + C20281) * C50852 * C20995 +
            (C19336 * C1512 - (C13809 * C1509 + C13808 * C1511) +
             C19337 * C50790) *
                C50852 * C20996) *
               C50764) *
              C1275 +
          (((C13058 * C1512 -
             ((C10648 * C134 + C50688 * C144) * C1509 +
              (C10648 * C123 + C50688 * C130) * C1511) +
             C13059 * C50790) *
                C50852 * C20993 +
            (C13640 * C1512 - (C13059 * C1509 + C13058 * C1511) +
             C13641 * C50790) *
                C50852 * C20994 +
            (C19178 * C1512 - (C13641 * C1509 + C13640 * C1511) +
             C19179 * C50790) *
                C50852 * C20995 +
            (C21564 * C1512 - (C19179 * C1509 + C19178 * C1511) +
             C21565 * C50790) *
                C50852 * C20996) *
               C50981 +
           ((C12168 + C12167 - C12166 - C12169) * C50852 * C20993 +
            (C14772 + C14771 - C14770 - C14773) * C50852 * C20994 +
            (C20284 + C20283 - C20282 - C20285) * C50852 * C20995 +
            (C19180 * C1511 + C19181 * C1509 -
             (C10648 * C16603 + C50688 * C16604) * C1512 -
             (C10648 * C16605 + C50688 * C16606) * C50790) *
                C50852 * C20996) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1744 +
             (C10648 * C133 + C50688 * C143) * C51028 - C13056 * C1745 -
             C13057 * C51018 + C13638 * C1746 + C13639 * C1743) *
                C7787 +
            (C12612 + C12613 - C12614 - C12615 + C12616 + C12617) * C7788 +
            (C12618 + C12619 - C12620 - C12621 + C12622 + C12623) * C7789) *
               C50996 +
           ((C13056 * C1744 + C13057 * C51028 - C13638 * C1745 -
             C13639 * C51018 + C13926 * C1746 + C13927 * C1743) *
                C7787 +
            (C11242 * C1744 + C11243 * C51028 - C11488 * C1745 -
             C11489 * C51018 + C13808 * C1746 + C13809 * C1743) *
                C7788 +
            (C11245 * C1744 + C11246 * C51028 - C11490 * C1745 -
             C11491 * C51018 + C13810 * C1746 + C13811 * C1743) *
                C7789) *
               C50890) *
              C50748 * C1275 +
          (((C13058 * C1745 -
             ((C10648 * C134 + C50688 * C144) * C51028 +
              (C10648 * C123 + C50688 * C130) * C1744) +
             C13059 * C51018 - C13640 * C1746 - C13641 * C1743) *
                C7787 +
            (C11914 * C1745 - (C10791 * C51028 + C10790 * C1744) +
             C11915 * C51018 - C13642 * C1746 - C13643 * C1743) *
                C7788 +
            (C11916 * C1745 - (C10793 * C51028 + C10792 * C1744) +
             C11917 * C51018 - C13644 * C1746 - C13645 * C1743) *
                C7789) *
               C50996 +
           ((C13640 * C1745 - (C13059 * C51028 + C13058 * C1744) +
             C13641 * C51018 - (C10648 * C1057 + C50688 * C1061) * C1746 -
             (C10648 * C1065 + C50688 * C1069) * C1743) *
                C7787 +
            (C13642 * C1745 - (C11915 * C51028 + C11914 * C1744) +
             C13643 * C51018 - (C10648 * C3450 + C50688 * C3453) * C1746 -
             (C10648 * C3456 + C50688 * C3459) * C1743) *
                C7788 +
            (C13644 * C1745 - (C11917 * C51028 + C11916 * C1744) +
             C13645 * C51018 - (C10648 * C9080 + C50688 * C9082) * C1746 -
             (C10648 * C9084 + C50688 * C9086) * C1743) *
                C7789) *
               C50890) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1744 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C51028 -
            (C5366 + C5367 + C5368) * C1745 - (C5369 + C5370 + C5371) * C51018 +
            (C5944 + C5945 + C5946) * C1746 + (C5947 + C5948 + C5949) * C1743) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C1744 + (C5371 + C5370 + C5369) * C51028 -
            (C5946 + C5945 + C5944) * C1745 - (C5949 + C5948 + C5947) * C51018 +
            (C6226 + C6225 + C6224) * C1746 + (C6229 + C6228 + C6227) * C1743) *
               C50852 * C50890) *
              C50748 * C1275 +
          (((C5372 + C5373 + C5374) * C1745 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C51028 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C1744) +
            (C5375 + C5376 + C5377) * C51018 - (C5950 + C5951 + C5952) * C1746 -
            (C5953 + C5954 + C5955) * C1743) *
               C50852 * C50996 +
           ((C5952 + C5951 + C5950) * C1745 -
            ((C5377 + C5376 + C5375) * C51028 +
             (C5374 + C5373 + C5372) * C1744) +
            (C5955 + C5954 + C5953) * C51018 -
            (C2178 * C1055 + C2173 * C1059 + C2177 * C1056 + C2172 * C1060 +
             C2176 * C1057 + C2171 * C1061) *
                C1746 -
            (C2178 * C1063 + C2173 * C1067 + C2177 * C1064 + C2172 * C1068 +
             C2176 * C1065 + C2171 * C1069) *
                C1743) *
               C50852 * C50890) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C1744 +
            (C10648 * C133 + C50688 * C143) * C51028 - C13056 * C1745 -
            C13057 * C51018 + C13638 * C1746 + C13639 * C1743) *
               C50852 * C20993 +
           (C13056 * C1744 + C13057 * C51028 - C13638 * C1745 -
            C13639 * C51018 + C13926 * C1746 + C13927 * C1743) *
               C50852 * C20994 +
           (C13638 * C1744 + C13639 * C51028 - C13926 * C1745 -
            C13927 * C51018 + C19446 * C1746 + C19447 * C1743) *
               C50852 * C20995 +
           (C13926 * C1744 + C13927 * C51028 - C19446 * C1745 -
            C19447 * C51018 + C21738 * C1746 + C21739 * C1743) *
               C50852 * C20996) *
              C50748 * C1275 +
          ((C13058 * C1745 -
            ((C10648 * C134 + C50688 * C144) * C51028 +
             (C10648 * C123 + C50688 * C130) * C1744) +
            C13059 * C51018 - C13640 * C1746 - C13641 * C1743) *
               C50852 * C20993 +
           (C13640 * C1745 - (C13059 * C51028 + C13058 * C1744) +
            C13641 * C51018 - C19178 * C1746 - C19179 * C1743) *
               C50852 * C20994 +
           (C19178 * C1745 - (C13641 * C51028 + C13640 * C1744) +
            C19179 * C51018 - C21564 * C1746 - C21565 * C1743) *
               C50852 * C20995 +
           (C21564 * C1745 - (C19179 * C51028 + C19178 * C1744) +
            C21565 * C51018 - (C10648 * C16719 + C50688 * C16721) * C1746 -
            (C10648 * C16723 + C50688 * C16725) * C1743) *
               C50852 * C20996) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50778) *
                C50852 * C50996 +
            ((C5368 + C5367 + C5366) * C121 +
             (C5371 + C5370 + C5369) * C50778) *
                C50852 * C50890) *
               C501 -
           (((C3021 + C3022 + C3023) * C50778 +
             (C3018 + C3019 + C3020) * C121) *
                C50852 * C50890 +
            ((C2367 + C2366 + C2365) * C50778 +
             (C2364 + C2363 + C2362) * C121) *
                C50852 * C50996) *
               C502 +
           (((C2701 + C2700 + C2699) * C121 +
             (C2698 + C2697 + C2696) * C50778) *
                C50852 * C50996 +
            ((C3024 + C3025 + C3026) * C121 +
             (C3027 + C3028 + C3029) * C50778) *
                C50852 * C50890) *
               C503) *
              C50974 +
          ((((C2368 + C2369 + C2370) * C121 +
             (C2371 + C2372 + C2373) * C50778) *
                C50852 * C50996 +
            ((C3960 + C3961 + C3962) * C121 +
             (C3963 + C3964 + C3965) * C50778) *
                C50852 * C50890) *
               C502 -
           (((C5377 + C5376 + C5375) * C50778 +
             (C5374 + C5373 + C5372) * C121) *
                C50852 * C50890 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50778 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50852 * C50996) *
               C501 -
           (((C2178 * C731 + C2173 * C739 + C2177 * C732 + C2172 * C740 +
              C2176 * C733 + C2171 * C741) *
                 C50778 +
             (C2178 * C715 + C2173 * C727 + C2177 * C716 + C2172 * C728 +
              C2176 * C717 + C2171 * C729) *
                 C121) *
                C50852 * C50890 +
            ((C2707 + C2706 + C2705) * C50778 +
             (C2704 + C2703 + C2702) * C121) *
                C50852 * C50996) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50778) *
               C50852 * C50996 +
           ((C2176 * C382 + C2171 * C388 + C2177 * C381 + C2172 * C387 +
             C2178 * C380 + C2173 * C386) *
                C121 +
            (C2176 * C392 + C2171 * C400 + C2177 * C391 + C2172 * C399 +
             C2178 * C390 + C2173 * C398) *
                C50778) *
               C50852 * C50890) *
              C50748 * C113 -
          (((C2178 * C389 + C2173 * C397 + C2177 * C390 + C2172 * C398 +
             C2176 * C391 + C2171 * C399) *
                C50778 +
            (C2178 * C379 + C2173 * C385 + C2177 * C380 + C2172 * C386 +
             C2176 * C381 + C2171 * C387) *
                C121) *
               C50852 * C50890 +
           ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
             C2176 * C134 + C2171 * C144) *
                C50778 +
            (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
             C2176 * C123 + C2171 * C130) *
                C121) *
               C50852 * C50996) *
              C50748 * C114 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C121 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50778) *
               C50852 * C50996 +
           ((C2176 * C380 + C2171 * C386 + C2177 * C379 + C2172 * C385 +
             C2178 * C383 + C2173 * C393) *
                C121 +
            (C2176 * C390 + C2171 * C398 + C2177 * C389 + C2172 * C397 +
             C2178 * C394 + C2173 * C401) *
                C50778) *
               C50852 * C50890) *
              C50748 * C115 -
          (((C2178 * C396 + C2173 * C402 + C2177 * C394 + C2172 * C401 +
             C2176 * C389 + C2171 * C397) *
                C50778 +
            (C2178 * C384 + C2173 * C395 + C2177 * C383 + C2172 * C393 +
             C2176 * C379 + C2171 * C385) *
                C121) *
               C50852 * C50890 +
           ((C2178 * C140 + C2173 * C148 + C2177 * C137 + C2172 * C147 +
             C2176 * C136 + C2171 * C146) *
                C50778 +
            (C2178 * C127 + C2173 * C139 + C2177 * C126 + C2172 * C138 +
             C2176 * C125 + C2171 * C132) *
                C121) *
               C50852 * C50996) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C7787 +
            (C10802 + C10803) * C7788 + C11016 * C7789) *
               C50996 +
           (((C10648 * C382 + C50688 * C388) * C121 +
             (C10648 * C392 + C50688 * C400) * C50778) *
                C7787 +
            (C11242 * C121 + C11243 * C50778) * C7788 +
            (C11245 * C121 + C11246 * C50778) * C7789) *
               C50890) *
              C50748 * C113 -
          (((C11917 * C50778 + C11916 * C121) * C7789 +
            (C11915 * C50778 + C11914 * C121) * C7788 +
            ((C10648 * C391 + C50688 * C399) * C50778 +
             (C10648 * C381 + C50688 * C387) * C121) *
                C7787) *
               C50890 +
           (C11027 * C7789 + (C10809 + C10808) * C7788 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C7787) *
               C50996) *
              C50748 * C114 +
          ((((C10648 * C124 + C50688 * C131) * C121 +
             (C10648 * C135 + C50688 * C145) * C50778) *
                C7787 +
            (C10814 + C10815) * C7788 + (C10816 + C10817) * C7789) *
               C50996 +
           (((C10648 * C380 + C50688 * C386) * C121 +
             (C10648 * C390 + C50688 * C398) * C50778) *
                C7787 +
            ((C10648 * C713 + C50688 * C721) * C121 +
             (C10648 * C725 + C50688 * C737) * C50778) *
                C7788 +
            ((C10648 * C716 + C50688 * C728) * C121 +
             (C10648 * C732 + C50688 * C740) * C50778) *
                C7789) *
               C50890) *
              C50748 * C115 -
          ((((C10648 * C731 + C50688 * C739) * C50778 +
             (C10648 * C715 + C50688 * C727) * C121) *
                C7789 +
            ((C10648 * C726 + C50688 * C738) * C50778 +
             (C10648 * C714 + C50688 * C722) * C121) *
                C7788 +
            ((C10648 * C389 + C50688 * C397) * C50778 +
             (C10648 * C379 + C50688 * C385) * C121) *
                C7787) *
               C50890 +
           (((C10648 * C518 + C50688 * C524) * C50778 +
             (C10648 * C509 + C50688 * C514) * C121) *
                C7789 +
            ((C10648 * C259 + C50688 * C271) * C50778 +
             (C10648 * C253 + C50688 * C263) * C121) *
                C7788 +
            ((C10648 * C136 + C50688 * C146) * C50778 +
             (C10648 * C125 + C50688 * C132) * C121) *
                C7787) *
               C50996) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C7787 +
             (C10802 + C10803) * C7788 + C11016 * C7789) *
                C50996 +
            ((C13056 * C121 + C13057 * C50778) * C7787 +
             (C12874 + C12875) * C7788 + C13208 * C7789) *
                C50890) *
               C501 -
           (((C13209 + C13210) * C7789 + (C12877 + C12876) * C7788 +
             (C12875 + C12874) * C7787) *
                C50890 +
            (C11107 * C7789 + (C10805 + C10804) * C7788 +
             (C10803 + C10802) * C7787) *
                C50996) *
               C502 +
           ((C11016 * C7787 + C11017 * C7788 + (C11033 + C11032) * C7789) *
                C50996 +
            (C13208 * C7787 + (C13210 + C13209) * C7788 +
             (C11250 * C121 + C11251 * C50778) * C7789) *
                C50890) *
               C503) *
              C50974 +
          ((((C10808 + C10809) * C7787 + (C10810 + C10811) * C7788 +
             (C10812 + C10813) * C7789) *
                C50996 +
            ((C12878 + C12879) * C7787 + (C12880 + C12881) * C7788 +
             (C13211 + C13212) * C7789) *
                C50890) *
               C502 -
           ((C13213 * C7789 + (C12879 + C12878) * C7788 +
             (C13059 * C50778 + C13058 * C121) * C7787) *
                C50890 +
            (C11027 * C7789 + (C10809 + C10808) * C7788 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C7787) *
                C50996) *
               C501 -
           ((((C10648 * C8609 + C50688 * C8611) * C50778 +
              (C10648 * C8605 + C50688 * C8607) * C121) *
                 C7789 +
             (C13212 + C13211) * C7788 + C13213 * C7787) *
                C50890 +
            ((C11035 + C11034) * C7789 + C11026 * C7788 + C11027 * C7787) *
                C50996) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C121 +
            (C10648 * C133 + C50688 * C143) * C50778) *
               C50852 * C20993 +
           (C13056 * C121 + C13057 * C50778) * C50852 * C20994 +
           (C13638 * C121 + C13639 * C50778) * C50852 * C20995 +
           (C13926 * C121 + C13927 * C50778) * C50852 * C20996) *
              C50748 * C113 -
          ((C19179 * C50778 + C19178 * C121) * C50852 * C20996 +
           (C13641 * C50778 + C13640 * C121) * C50852 * C20995 +
           (C13059 * C50778 + C13058 * C121) * C50852 * C20994 +
           ((C10648 * C134 + C50688 * C144) * C50778 +
            (C10648 * C123 + C50688 * C130) * C121) *
               C50852 * C20993) *
              C50748 * C114 +
          (((C10648 * C124 + C50688 * C131) * C121 +
            (C10648 * C135 + C50688 * C145) * C50778) *
               C50852 * C20993 +
           (C13060 * C121 + C13061 * C50778) * C50852 * C20994 +
           (C18618 * C121 + C18619 * C50778) * C50852 * C20995 +
           ((C10648 * C1056 + C50688 * C1060) * C121 +
            (C10648 * C1064 + C50688 * C1068) * C50778) *
               C50852 * C20996) *
              C50748 * C115 -
          (((C10648 * C1063 + C50688 * C1067) * C50778 +
            (C10648 * C1055 + C50688 * C1059) * C121) *
               C50852 * C20996 +
           ((C10648 * C859 + C50688 * C865) * C50778 +
            (C10648 * C850 + C50688 * C855) * C121) *
               C50852 * C20995 +
           ((C10648 * C389 + C50688 * C397) * C50778 +
            (C10648 * C379 + C50688 * C385) * C121) *
               C50852 * C20994 +
           ((C10648 * C136 + C50688 * C146) * C50778 +
            (C10648 * C125 + C50688 * C132) * C121) *
               C50852 * C20993) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C50852 * C20993 +
            (C13056 * C121 + C13057 * C50778) * C50852 * C20994 +
            (C13638 * C121 + C13639 * C50778) * C50852 * C20995 +
            (C13926 * C121 + C13927 * C50778) * C50852 * C20996) *
               C501 -
           ((C13809 * C50778 + C13808 * C121) * C50852 * C20996 +
            (C18457 + C18456) * C50852 * C20995 +
            (C12875 + C12874) * C50852 * C20994 +
            (C10803 + C10802) * C50852 * C20993) *
               C502 +
           (C11016 * C50852 * C20993 + C13208 * C50852 * C20994 +
            (C18767 + C18766) * C50852 * C20995 +
            (C13810 * C121 + C13811 * C50778) * C50852 * C20996) *
               C503) *
              C50974 +
          (((C10808 + C10809) * C50852 * C20993 +
            (C12878 + C12879) * C50852 * C20994 +
            (C18458 + C18459) * C50852 * C20995 +
            (C19180 * C121 + C19181 * C50778) * C50852 * C20996) *
               C502 -
           ((C19179 * C50778 + C19178 * C121) * C50852 * C20996 +
            (C13641 * C50778 + C13640 * C121) * C50852 * C20995 +
            (C13059 * C50778 + C13058 * C121) * C50852 * C20994 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C50852 * C20993) *
               C501 -
           (((C10648 * C9084 + C50688 * C9086) * C50778 +
             (C10648 * C9080 + C50688 * C9082) * C121) *
                C50852 * C20996 +
            (C18769 + C18768) * C50852 * C20995 + C13213 * C50852 * C20994 +
            C11027 * C50852 * C20993) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50778) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C121 + (C5371 + C5370 + C5369) * C50778) *
               C50852 * C50890) *
              C592 -
          (((C3021 + C3022 + C3023) * C50778 + (C3018 + C3019 + C3020) * C121) *
               C50852 * C50890 +
           ((C2367 + C2366 + C2365) * C50778 + (C2364 + C2363 + C2362) * C121) *
               C50852 * C50996) *
              C593 +
          (((C2701 + C2700 + C2699) * C121 + (C2698 + C2697 + C2696) * C50778) *
               C50852 * C50996 +
           ((C3024 + C3025 + C3026) * C121 + (C3027 + C3028 + C3029) * C50778) *
               C50852 * C50890) *
              C594 -
          (((C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
             C2176 * C2989 + C2171 * C2992) *
                C50778 +
            (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
             C2176 * C2983 + C2171 * C2986) *
                C121) *
               C50852 * C50890 +
           ((C2835 + C2834 + C2833) * C50778 + (C2832 + C2831 + C2830) * C121) *
               C50852 * C50996) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50778) *
                C50852 * C50996 +
            ((C2176 * C382 + C2171 * C388 + C2177 * C381 + C2172 * C387 +
              C2178 * C380 + C2173 * C386) *
                 C121 +
             (C2176 * C392 + C2171 * C400 + C2177 * C391 + C2172 * C399 +
              C2178 * C390 + C2173 * C398) *
                 C50778) *
                C50852 * C50890) *
               C50981 -
           (((C3021 + C3022 + C3023) * C50778 +
             (C3018 + C3019 + C3020) * C121) *
                C50852 * C50890 +
            ((C2367 + C2366 + C2365) * C50778 +
             (C2364 + C2363 + C2362) * C121) *
                C50852 * C50996) *
               C50764) *
              C250 +
          ((((C2368 + C2369 + C2370) * C121 +
             (C2371 + C2372 + C2373) * C50778) *
                C50852 * C50996 +
            ((C3960 + C3961 + C3962) * C121 +
             (C3963 + C3964 + C3965) * C50778) *
                C50852 * C50890) *
               C50764 -
           (((C2178 * C389 + C2173 * C397 + C2177 * C390 + C2172 * C398 +
              C2176 * C391 + C2171 * C399) *
                 C50778 +
             (C2178 * C379 + C2173 * C385 + C2177 * C380 + C2172 * C386 +
              C2176 * C381 + C2171 * C387) *
                 C121) *
                C50852 * C50890 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50778 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50852 * C50996) *
               C50981) *
              C251 +
          ((((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
              C2178 * C126 + C2173 * C138) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
              C2178 * C137 + C2173 * C147) *
                 C50778) *
                C50852 * C50996 +
            ((C2176 * C380 + C2171 * C386 + C2177 * C379 + C2172 * C385 +
              C2178 * C383 + C2173 * C393) *
                 C121 +
             (C2176 * C390 + C2171 * C398 + C2177 * C389 + C2172 * C397 +
              C2178 * C394 + C2173 * C401) *
                 C50778) *
                C50852 * C50890) *
               C50981 -
           (((C2178 * C1409 + C2173 * C1410 + C2177 * C726 + C2172 * C738 +
              C2176 * C725 + C2171 * C737) *
                 C50778 +
             (C2178 * C1407 + C2173 * C1408 + C2177 * C714 + C2172 * C722 +
              C2176 * C713 + C2171 * C721) *
                 C121) *
                C50852 * C50890 +
            ((C2379 + C2378 + C2377) * C50778 +
             (C2376 + C2375 + C2374) * C121) *
                C50852 * C50996) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C7787 +
             (C10802 + C10803) * C7788 + C11016 * C7789) *
                C50996 +
            (((C10648 * C382 + C50688 * C388) * C121 +
              (C10648 * C392 + C50688 * C400) * C50778) *
                 C7787 +
             (C12874 + C12875) * C7788 + (C12876 + C12877) * C7789) *
                C50890) *
               C50981 -
           (((C11249 * C50778 + C11248 * C121) * C7789 +
             (C12877 + C12876) * C7788 + (C12875 + C12874) * C7787) *
                C50890 +
            (C11107 * C7789 + (C10805 + C10804) * C7788 +
             (C10803 + C10802) * C7787) *
                C50996) *
               C50764) *
              C250 +
          ((((C10808 + C10809) * C7787 + (C10810 + C10811) * C7788 +
             (C10812 + C10813) * C7789) *
                C50996 +
            ((C12878 + C12879) * C7787 + (C12880 + C12881) * C7788 +
             (C11918 * C121 + C11919 * C50778) * C7789) *
                C50890) *
               C50764 -
           (((C12881 + C12880) * C7789 + (C12879 + C12878) * C7788 +
             ((C10648 * C391 + C50688 * C399) * C50778 +
              (C10648 * C381 + C50688 * C387) * C121) *
                 C7787) *
                C50890 +
            (C11027 * C7789 + (C10809 + C10808) * C7788 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C7787) *
                C50996) *
               C50981) *
              C251 +
          (((((C10648 * C124 + C50688 * C131) * C121 +
              (C10648 * C135 + C50688 * C145) * C50778) *
                 C7787 +
             (C10814 + C10815) * C7788 + (C10816 + C10817) * C7789) *
                C50996 +
            (((C10648 * C380 + C50688 * C386) * C121 +
              (C10648 * C390 + C50688 * C398) * C50778) *
                 C7787 +
             (C12894 + C12895) * C7788 + (C12896 + C12897) * C7789) *
                C50890) *
               C50981 -
           ((((C10648 * C2987 + C50688 * C2990) * C50778 +
              (C10648 * C2981 + C50688 * C2984) * C121) *
                 C7789 +
             (C12897 + C12896) * C7788 + (C12895 + C12894) * C7787) *
                C50890 +
            ((C10819 + C10818) * C7789 + (C10817 + C10816) * C7788 +
             (C10815 + C10814) * C7787) *
                C50996) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C7787 +
            (C10802 + C10803) * C7788 + C11016 * C7789) *
               C50996 +
           ((C13056 * C121 + C13057 * C50778) * C7787 +
            (C12874 + C12875) * C7788 + C13208 * C7789) *
               C50890) *
              C592 -
          ((C13312 * C7789 + (C12877 + C12876) * C7788 +
            (C12875 + C12874) * C7787) *
               C50890 +
           (C11107 * C7789 + (C10805 + C10804) * C7788 +
            (C10803 + C10802) * C7787) *
               C50996) *
              C593 +
          ((C11016 * C7787 + C11017 * C7788 + (C11033 + C11032) * C7789) *
               C50996 +
           (C13208 * C7787 + (C13210 + C13209) * C7788 +
            (C13313 + C13314) * C7789) *
               C50890) *
              C594 -
          ((((C10648 * C11215 + C50688 * C11216) * C50778 +
             (C10648 * C11213 + C50688 * C11214) * C121) *
                C7789 +
            (C13314 + C13313) * C7788 + C13312 * C7787) *
               C50890 +
           ((C11115 + C11114) * C7789 + C11106 * C7788 + C11107 * C7787) *
               C50996) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C50852 * C20993 +
            (C13056 * C121 + C13057 * C50778) * C50852 * C20994 +
            (C13638 * C121 + C13639 * C50778) * C50852 * C20995 +
            (C13926 * C121 + C13927 * C50778) * C50852 * C20996) *
               C50981 -
           ((C13809 * C50778 + C13808 * C121) * C50852 * C20996 +
            (C18457 + C18456) * C50852 * C20995 +
            (C12875 + C12874) * C50852 * C20994 +
            (C10803 + C10802) * C50852 * C20993) *
               C50764) *
              C250 +
          (((C10808 + C10809) * C50852 * C20993 +
            (C12878 + C12879) * C50852 * C20994 +
            (C18458 + C18459) * C50852 * C20995 +
            (C19180 * C121 + C19181 * C50778) * C50852 * C20996) *
               C50764 -
           ((C19179 * C50778 + C19178 * C121) * C50852 * C20996 +
            (C13641 * C50778 + C13640 * C121) * C50852 * C20995 +
            (C13059 * C50778 + C13058 * C121) * C50852 * C20994 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C50852 * C20993) *
               C50981) *
              C251 +
          ((((C10648 * C124 + C50688 * C131) * C121 +
             (C10648 * C135 + C50688 * C145) * C50778) *
                C50852 * C20993 +
            (C13060 * C121 + C13061 * C50778) * C50852 * C20994 +
            (C18618 * C121 + C18619 * C50778) * C50852 * C20995 +
            ((C10648 * C1056 + C50688 * C1060) * C121 +
             (C10648 * C1064 + C50688 * C1068) * C50778) *
                C50852 * C20996) *
               C50981 -
           (((C10648 * C3455 + C50688 * C3458) * C50778 +
             (C10648 * C3449 + C50688 * C3452) * C121) *
                C50852 * C20996 +
            (C18467 + C18466) * C50852 * C20995 +
            (C12895 + C12894) * C50852 * C20994 +
            (C10815 + C10814) * C50852 * C20993) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C121 +
            (C10648 * C133 + C50688 * C143) * C50778) *
               C50852 * C20993 +
           (C13056 * C121 + C13057 * C50778) * C50852 * C20994 +
           (C13638 * C121 + C13639 * C50778) * C50852 * C20995 +
           (C13926 * C121 + C13927 * C50778) * C50852 * C20996) *
              C592 -
          ((C13809 * C50778 + C13808 * C121) * C50852 * C20996 +
           (C18457 + C18456) * C50852 * C20995 +
           (C12875 + C12874) * C50852 * C20994 +
           (C10803 + C10802) * C50852 * C20993) *
              C593 +
          (C11016 * C50852 * C20993 + C13208 * C50852 * C20994 +
           (C18767 + C18766) * C50852 * C20995 +
           (C13810 * C121 + C13811 * C50778) * C50852 * C20996) *
              C594 -
          (((C10648 * C11567 + C50688 * C11568) * C50778 +
            (C10648 * C11565 + C50688 * C11566) * C121) *
               C50852 * C20996 +
           (C18869 + C18868) * C50852 * C20995 + C13312 * C50852 * C20994 +
           C11107 * C50852 * C20993) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C377 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50983 -
            (C5366 + C5367 + C5368) * C378 - (C5369 + C5370 + C5371) * C50790) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C377 + (C5371 + C5370 + C5369) * C50983 -
            (C2178 * C849 + C2173 * C854 + C2177 * C848 + C2172 * C853 +
             C2176 * C847 + C2171 * C852) *
                C378 -
            (C2178 * C858 + C2173 * C864 + C2177 * C857 + C2172 * C863 +
             C2176 * C856 + C2171 * C862) *
                C50790) *
               C50852 * C50890) *
              C501 +
          (((C3020 + C3019 + C3018) * C378 -
            ((C2367 + C2366 + C2365) * C50983 +
             (C2364 + C2363 + C2362) * C377) +
            (C3023 + C3022 + C3021) * C50790) *
               C50852 * C50996 +
           ((C3346 + C3347 + C3348) * C378 -
            ((C3021 + C3022 + C3023) * C50983 +
             (C3018 + C3019 + C3020) * C377) +
            (C3349 + C3350 + C3351) * C50790) *
               C50852 * C50890) *
              C502 +
          (((C2701 + C2700 + C2699) * C377 + (C2698 + C2697 + C2696) * C50983 -
            (C3026 + C3025 + C3024) * C378 - (C3029 + C3028 + C3027) * C50790) *
               C50852 * C50996 +
           ((C3024 + C3025 + C3026) * C377 + (C3027 + C3028 + C3029) * C50983 -
            (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
             C2176 * C3323 + C2171 * C3326) *
                C378 -
            (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
             C2176 * C3329 + C2171 * C3332) *
                C50790) *
               C50852 * C50890) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C377 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50983 -
            (C5366 + C5367 + C5368) * C378 - (C5369 + C5370 + C5371) * C50790) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C377 + (C5371 + C5370 + C5369) * C50983 -
            (C2178 * C849 + C2173 * C854 + C2177 * C848 + C2172 * C853 +
             C2176 * C847 + C2171 * C852) *
                C378 -
            (C2178 * C858 + C2173 * C864 + C2177 * C857 + C2172 * C863 +
             C2176 * C856 + C2171 * C862) *
                C50790) *
               C50852 * C50890) *
              C50748 * C250 +
          (((C5372 + C5373 + C5374) * C378 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50983 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C377) +
            (C5375 + C5376 + C5377) * C50790) *
               C50852 * C50996 +
           ((C2176 * C848 + C2171 * C853 + C2177 * C849 + C2172 * C854 +
             C2178 * C850 + C2173 * C855) *
                C378 -
            ((C5377 + C5376 + C5375) * C50983 +
             (C5374 + C5373 + C5372) * C377) +
            (C2176 * C857 + C2171 * C863 + C2177 * C858 + C2172 * C864 +
             C2178 * C859 + C2173 * C865) *
                C50790) *
               C50852 * C50890) *
              C50748 * C251 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C377 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50983 -
            (C5378 + C5379 + C5380) * C378 - (C5381 + C5382 + C5383) * C50790) *
               C50852 * C50996 +
           ((C5380 + C5379 + C5378) * C377 + (C5383 + C5382 + C5381) * C50983 -
            (C2178 * C851 + C2173 * C860 + C2177 * C850 + C2172 * C855 +
             C2176 * C849 + C2171 * C854) *
                C378 -
            (C2178 * C861 + C2173 * C866 + C2177 * C859 + C2172 * C865 +
             C2176 * C858 + C2171 * C864) *
                C50790) *
               C50852 * C50890) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C7787 +
            (C11218 + C11219 - C11252 - C11253) * C7788 + C11262 * C7789) *
               C50996 +
           ((C13056 * C377 + C13057 * C50983 -
             (C10648 * C847 + C50688 * C852) * C378 -
             (C10648 * C856 + C50688 * C862) * C50790) *
                C7787 +
            (C11242 * C377 + C11243 * C50983 - C11488 * C378 -
             C11489 * C50790) *
                C7788 +
            (C11245 * C377 + C11246 * C50983 - C11490 * C378 -
             C11491 * C50790) *
                C7789) *
               C50890) *
              C50748 * C250 +
          (((C13058 * C378 -
             ((C10648 * C134 + C50688 * C144) * C50983 +
              (C10648 * C123 + C50688 * C130) * C377) +
             C13059 * C50790) *
                C7787 +
            (C11920 - (C11898 + C11899) + C11921) * C7788 +
            (C11922 - (C11904 + C11905) + C11923) * C7789) *
               C50996 +
           (((C10648 * C848 + C50688 * C853) * C378 -
             (C13059 * C50983 + C13058 * C377) +
             (C10648 * C857 + C50688 * C863) * C50790) *
                C7787 +
            ((C10648 * C967 + C50688 * C971) * C378 -
             (C11915 * C50983 + C11914 * C377) +
             (C10648 * C975 + C50688 * C979) * C50790) *
                C7788 +
            ((C10648 * C3322 + C50688 * C3325) * C378 -
             (C11917 * C50983 + C11916 * C377) +
             (C10648 * C3328 + C50688 * C3331) * C50790) *
                C7789) *
               C50890) *
              C50748 * C251 +
          ((((C10648 * C124 + C50688 * C131) * C377 +
             (C10648 * C135 + C50688 * C145) * C50983 - C13060 * C378 -
             C13061 * C50790) *
                C7787 +
            (C10796 * C377 + C10797 * C50983 - C12890 * C378 -
             C12891 * C50790) *
                C7788 +
            (C10798 * C377 + C10799 * C50983 - C12892 * C378 -
             C12893 * C50790) *
                C7789) *
               C50996 +
           ((C13060 * C377 + C13061 * C50983 -
             (C10648 * C849 + C50688 * C854) * C378 -
             (C10648 * C858 + C50688 * C864) * C50790) *
                C7787 +
            (C12890 * C377 + C12891 * C50983 -
             (C10648 * C966 + C50688 * C970) * C378 -
             (C10648 * C974 + C50688 * C978) * C50790) *
                C7788 +
            (C12892 * C377 + C12893 * C50983 -
             (C10648 * C3321 + C50688 * C3324) * C378 -
             (C10648 * C3327 + C50688 * C3330) * C50790) *
                C7789) *
               C50890) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C7787 +
            (C11218 + C11219 - C11252 - C11253) * C7788 + C11262 * C7789) *
               C50996 +
           ((C13056 * C377 + C13057 * C50983 -
             (C10648 * C847 + C50688 * C852) * C378 -
             (C10648 * C856 + C50688 * C862) * C50790) *
                C7787 +
            (C13461 + C13462 - C13463 - C13464) * C7788 + C13475 * C7789) *
               C50890) *
              C501 +
          (((C11252 - (C11219 + C11218) + C11253) * C7787 +
            (C11254 - (C11225 + C11224) + C11255) * C7788 +
            (C11256 - (C11231 + C11230) + C11257) * C7789) *
               C50996 +
           ((C13463 - (C13462 + C13461) + C13464) * C7787 +
            (C13467 - (C13466 + C13465) + C13468) * C7788 +
            (C13469 - (C13470 + C13471) + C13472) * C7789) *
               C50890) *
              C502 +
          ((C11262 * C7787 + C11263 * C7788 +
            (C11239 + C11238 - C11258 - C11259) * C7789) *
               C50996 +
           (C13475 * C7787 + (C13471 + C13470 - C13469 - C13472) * C7788 +
            (C11250 * C377 + C11251 * C50983 -
             (C10648 * C11459 + C50688 * C11460) * C378 -
             (C10648 * C11461 + C50688 * C11462) * C50790) *
                C7789) *
               C50890) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C377 +
            (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
            C13057 * C50790) *
               C50852 * C20993 +
           (C13056 * C377 + C13057 * C50983 - C13638 * C378 - C13639 * C50790) *
               C50852 * C20994 +
           (C13638 * C377 + C13639 * C50983 - C13926 * C378 - C13927 * C50790) *
               C50852 * C20995 +
           (C13926 * C377 + C13927 * C50983 - C19446 * C378 - C19447 * C50790) *
               C50852 * C20996) *
              C50748 * C250 +
          ((C13058 * C378 -
            ((C10648 * C134 + C50688 * C144) * C50983 +
             (C10648 * C123 + C50688 * C130) * C377) +
            C13059 * C50790) *
               C50852 * C20993 +
           (C13640 * C378 - (C13059 * C50983 + C13058 * C377) +
            C13641 * C50790) *
               C50852 * C20994 +
           (C19178 * C378 - (C13641 * C50983 + C13640 * C377) +
            C19179 * C50790) *
               C50852 * C20995 +
           ((C10648 * C6200 + C50688 * C6203) * C378 -
            (C19179 * C50983 + C19178 * C377) +
            (C10648 * C6206 + C50688 * C6209) * C50790) *
               C50852 * C20996) *
              C50748 * C251 +
          (((C10648 * C124 + C50688 * C131) * C377 +
            (C10648 * C135 + C50688 * C145) * C50983 - C13060 * C378 -
            C13061 * C50790) *
               C50852 * C20993 +
           (C13060 * C377 + C13061 * C50983 - C18618 * C378 - C18619 * C50790) *
               C50852 * C20994 +
           (C18618 * C377 + C18619 * C50983 - C21198 * C378 - C21199 * C50790) *
               C50852 * C20995 +
           (C21198 * C377 + C21199 * C50983 -
            (C10648 * C6199 + C50688 * C6202) * C378 -
            (C10648 * C6205 + C50688 * C6208) * C50790) *
               C50852 * C20996) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C377 +
            (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
            C13057 * C50790) *
               C50852 * C20993 +
           (C13056 * C377 + C13057 * C50983 - C13638 * C378 - C13639 * C50790) *
               C50852 * C20994 +
           (C13638 * C377 + C13639 * C50983 - C13926 * C378 - C13927 * C50790) *
               C50852 * C20995 +
           (C13926 * C377 + C13927 * C50983 - C19446 * C378 - C19447 * C50790) *
               C50852 * C20996) *
              C501 +
          ((C11252 - (C11219 + C11218) + C11253) * C50852 * C20993 +
           (C13463 - (C13462 + C13461) + C13464) * C50852 * C20994 +
           (C19018 - (C19017 + C19016) + C19019) * C50852 * C20995 +
           (C19336 * C378 - (C13809 * C50983 + C13808 * C377) +
            C19337 * C50790) *
               C50852 * C20996) *
              C502 +
          (C11262 * C50852 * C20993 + C13475 * C50852 * C20994 +
           (C19022 + C19021 - C19020 - C19023) * C50852 * C20995 +
           (C13810 * C377 + C13811 * C50983 -
            (C10648 * C13914 + C50688 * C13917) * C378 -
            (C10648 * C13918 + C50688 * C13920) * C50790) *
               C50852 * C20996) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[135] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                       C51009 * C130 + C22822 * C124 + C22817 * C131) *
                          C121 +
                      (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                       C51009 * C144 + C22822 * C135 + C22817 * C145) *
                          C50778) *
                         C50852 * C32103 +
                     ((C32436 + C32435 + C32434) * C121 +
                      (C32439 + C32438 + C32437) * C50778) *
                         C50852 * C50890) *
                        C1169 -
                    (((C23641 + C23642 + C23643) * C50778 +
                      (C23638 + C23639 + C23640) * C121) *
                         C50852 * C50890 +
                     ((C23011 + C23010 + C23009) * C50778 +
                      (C23008 + C23007 + C23006) * C121) *
                         C50852 * C32103) *
                        C50764) *
                       C51026 +
                   ((((C23012 + C23013 + C23014) * C121 +
                      (C23015 + C23016 + C23017) * C50778) *
                         C50852 * C32103 +
                     ((C24556 + C24557 + C24558) * C121 +
                      (C24559 + C24560 + C24561) * C50778) *
                         C50852 * C50890) *
                        C50764 -
                    (((C32445 + C32444 + C32443) * C50778 +
                      (C32442 + C32441 + C32440) * C121) *
                         C50852 * C50890 +
                     ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                       C51009 * C145 + C22820 * C134 + C51025 * C144) *
                          C50778 +
                      (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                       C51009 * C131 + C22820 * C123 + C51025 * C130) *
                          C121) *
                         C50852 * C32103) *
                        C1169) *
                       C51012 +
                   ((((C22820 * C124 + C51025 * C131 + C22821 * C125 +
                       C51009 * C132 + C22822 * C126 + C22817 * C138) *
                          C121 +
                      (C22820 * C135 + C51025 * C145 + C22821 * C136 +
                       C51009 * C146 + C22822 * C137 + C22817 * C147) *
                          C50778) *
                         C50852 * C32103 +
                     ((C32448 + C32447 + C32446) * C121 +
                      (C32451 + C32450 + C32449) * C50778) *
                         C50852 * C50890) *
                        C1169 -
                    (((C22822 * C1409 + C22817 * C1410 + C22821 * C726 +
                       C51009 * C738 + C22820 * C725 + C51025 * C737) *
                          C50778 +
                      (C22822 * C1407 + C22817 * C1408 + C22821 * C714 +
                       C51009 * C722 + C22820 * C713 + C51025 * C721) *
                          C121) *
                         C50852 * C50890 +
                     ((C23023 + C23022 + C23021) * C50778 +
                      (C23020 + C23019 + C23018) * C121) *
                         C50852 * C32103) *
                        C50764) *
                       C1173)) /
                 (p * q * std::sqrt(p + q));
    d2ee[136] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                       C51009 * C130 + C22822 * C124 + C22817 * C131) *
                          C121 +
                      (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                       C51009 * C144 + C22822 * C135 + C22817 * C145) *
                          C50778) *
                         C50852 * C32103 +
                     ((C32436 + C32435 + C32434) * C121 +
                      (C32439 + C32438 + C32437) * C50778) *
                         C50852 * C50890) *
                        C51027 -
                    (((C23641 + C23642 + C23643) * C50778 +
                      (C23638 + C23639 + C23640) * C121) *
                         C50852 * C50890 +
                     ((C23011 + C23010 + C23009) * C50778 +
                      (C23008 + C23007 + C23006) * C121) *
                         C50852 * C32103) *
                        C51015 +
                    (((C23345 + C23344 + C23343) * C121 +
                      (C23342 + C23341 + C23340) * C50778) *
                         C50852 * C32103 +
                     ((C23644 + C23645 + C23646) * C121 +
                      (C23647 + C23648 + C23649) * C50778) *
                         C50852 * C50890) *
                        C1274) *
                       C1275 +
                   ((((C23012 + C23013 + C23014) * C121 +
                      (C23015 + C23016 + C23017) * C50778) *
                         C50852 * C32103 +
                     ((C24556 + C24557 + C24558) * C121 +
                      (C24559 + C24560 + C24561) * C50778) *
                         C50852 * C50890) *
                        C51015 -
                    (((C32445 + C32444 + C32443) * C50778 +
                      (C32442 + C32441 + C32440) * C121) *
                         C50852 * C50890 +
                     ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                       C51009 * C145 + C22820 * C134 + C51025 * C144) *
                          C50778 +
                      (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                       C51009 * C131 + C22820 * C123 + C51025 * C130) *
                          C121) *
                         C50852 * C32103) *
                        C51027 -
                    (((C22822 * C731 + C22817 * C739 + C22821 * C732 +
                       C51009 * C740 + C22820 * C733 + C51025 * C741) *
                          C50778 +
                      (C22822 * C715 + C22817 * C727 + C22821 * C716 +
                       C51009 * C728 + C22820 * C717 + C51025 * C729) *
                          C121) *
                         C50852 * C50890 +
                     ((C23351 + C23350 + C23349) * C50778 +
                      (C23348 + C23347 + C23346) * C121) *
                         C50852 * C32103) *
                        C1274) *
                       C50721)) /
                 (p * q * std::sqrt(p + q));
    d2ee[137] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                       C51009 * C130 + C22822 * C124 + C22817 * C131) *
                          C377 +
                      (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                       C51009 * C144 + C22822 * C135 + C22817 * C145) *
                          C50983 -
                      (C32434 + C32435 + C32436) * C378 -
                      (C32437 + C32438 + C32439) * C50790) *
                         C50852 * C32103 +
                     ((C32436 + C32435 + C32434) * C377 +
                      (C32439 + C32438 + C32437) * C50983 -
                      (C33014 + C33013 + C33012) * C378 -
                      (C33017 + C33016 + C33015) * C50790) *
                         C50852 * C50890) *
                        C1169 +
                    (((C23640 + C23639 + C23638) * C378 -
                      ((C23011 + C23010 + C23009) * C50983 +
                       (C23008 + C23007 + C23006) * C377) +
                      (C23643 + C23642 + C23641) * C50790) *
                         C50852 * C32103 +
                     ((C23954 + C23955 + C23956) * C378 -
                      ((C23641 + C23642 + C23643) * C50983 +
                       (C23638 + C23639 + C23640) * C377) +
                      (C23957 + C23958 + C23959) * C50790) *
                         C50852 * C50890) *
                        C50764) *
                       C1275 +
                   ((((C32440 + C32441 + C32442) * C378 -
                      ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                        C51009 * C145 + C22820 * C134 + C51025 * C144) *
                           C50983 +
                       (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                        C51009 * C131 + C22820 * C123 + C51025 * C130) *
                           C377) +
                      (C32443 + C32444 + C32445) * C50790) *
                         C50852 * C32103 +
                     ((C33020 + C33019 + C33018) * C378 -
                      ((C32445 + C32444 + C32443) * C50983 +
                       (C32442 + C32441 + C32440) * C377) +
                      (C33023 + C33022 + C33021) * C50790) *
                         C50852 * C50890) *
                        C1169 +
                    (((C23012 + C23013 + C23014) * C377 +
                      (C23015 + C23016 + C23017) * C50983 -
                      (C24558 + C24557 + C24556) * C378 -
                      (C24561 + C24560 + C24559) * C50790) *
                         C50852 * C32103 +
                     ((C24556 + C24557 + C24558) * C377 +
                      (C24559 + C24560 + C24561) * C50983 -
                      (C22822 * C965 + C22817 * C969 + C22821 * C966 +
                       C51009 * C970 + C22820 * C967 + C51025 * C971) *
                          C378 -
                      (C22822 * C973 + C22817 * C977 + C22821 * C974 +
                       C51009 * C978 + C22820 * C975 + C51025 * C979) *
                          C50790) *
                         C50852 * C50890) *
                        C50764) *
                       C50721)) /
                 (p * q * std::sqrt(p + q));
    d2ee[138] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                       C51009 * C130 + C22822 * C124 + C22817 * C131) *
                          C1511 +
                      (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                       C51009 * C144 + C22822 * C135 + C22817 * C145) *
                          C1509 -
                      (C32434 + C32435 + C32436) * C1512 -
                      (C32437 + C32438 + C32439) * C50790) *
                         C50852 * C32103 +
                     ((C32436 + C32435 + C32434) * C1511 +
                      (C32439 + C32438 + C32437) * C1509 -
                      (C33014 + C33013 + C33012) * C1512 -
                      (C33017 + C33016 + C33015) * C50790) *
                         C50852 * C50890) *
                        C1169 +
                    (((C23640 + C23639 + C23638) * C1512 -
                      ((C23011 + C23010 + C23009) * C1509 +
                       (C23008 + C23007 + C23006) * C1511) +
                      (C23643 + C23642 + C23641) * C50790) *
                         C50852 * C32103 +
                     ((C23954 + C23955 + C23956) * C1512 -
                      ((C23641 + C23642 + C23643) * C1509 +
                       (C23638 + C23639 + C23640) * C1511) +
                      (C23957 + C23958 + C23959) * C50790) *
                         C50852 * C50890) *
                        C50764) *
                       C50974 +
                   ((((C32440 + C32441 + C32442) * C1512 -
                      ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                        C51009 * C145 + C22820 * C134 + C51025 * C144) *
                           C1509 +
                       (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                        C51009 * C131 + C22820 * C123 + C51025 * C130) *
                           C1511) +
                      (C32443 + C32444 + C32445) * C50790) *
                         C50852 * C32103 +
                     ((C33020 + C33019 + C33018) * C1512 -
                      ((C32445 + C32444 + C32443) * C1509 +
                       (C32442 + C32441 + C32440) * C1511) +
                      (C33023 + C33022 + C33021) * C50790) *
                         C50852 * C50890) *
                        C1169 +
                    (((C23012 + C23013 + C23014) * C1511 +
                      (C23015 + C23016 + C23017) * C1509 -
                      (C24558 + C24557 + C24556) * C1512 -
                      (C24561 + C24560 + C24559) * C50790) *
                         C50852 * C32103 +
                     ((C24556 + C24557 + C24558) * C1511 +
                      (C24559 + C24560 + C24561) * C1509 -
                      (C22822 * C965 + C22817 * C969 + C22821 * C966 +
                       C51009 * C970 + C22820 * C967 + C51025 * C971) *
                          C1512 -
                      (C22822 * C973 + C22817 * C977 + C22821 * C974 +
                       C51009 * C978 + C22820 * C975 + C51025 * C979) *
                          C50790) *
                         C50852 * C50890) *
                        C50764) *
                       C50721)) /
                 (p * q * std::sqrt(p + q));
    d2ee[139] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                      C51009 * C130 + C22822 * C124 + C22817 * C131) *
                         C1511 +
                     (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                      C51009 * C144 + C22822 * C135 + C22817 * C145) *
                         C1509 -
                     (C32434 + C32435 + C32436) * C1512 -
                     (C32437 + C32438 + C32439) * C50790) *
                        C50852 * C32103 +
                    ((C32436 + C32435 + C32434) * C1511 +
                     (C32439 + C32438 + C32437) * C1509 -
                     (C33014 + C33013 + C33012) * C1512 -
                     (C33017 + C33016 + C33015) * C50790) *
                        C50852 * C50890) *
                       C51027 +
                   (((C23640 + C23639 + C23638) * C1512 -
                     ((C23011 + C23010 + C23009) * C1509 +
                      (C23008 + C23007 + C23006) * C1511) +
                     (C23643 + C23642 + C23641) * C50790) *
                        C50852 * C32103 +
                    ((C23954 + C23955 + C23956) * C1512 -
                     ((C23641 + C23642 + C23643) * C1509 +
                      (C23638 + C23639 + C23640) * C1511) +
                     (C23957 + C23958 + C23959) * C50790) *
                        C50852 * C50890) *
                       C51015 +
                   (((C23345 + C23344 + C23343) * C1511 +
                     (C23342 + C23341 + C23340) * C1509 -
                     (C23646 + C23645 + C23644) * C1512 -
                     (C23649 + C23648 + C23647) * C50790) *
                        C50852 * C32103 +
                    ((C23644 + C23645 + C23646) * C1511 +
                     (C23647 + C23648 + C23649) * C1509 -
                     (C22822 * C3321 + C22817 * C3324 + C22821 * C3322 +
                      C51009 * C3325 + C22820 * C3323 + C51025 * C3326) *
                         C1512 -
                     (C22822 * C3327 + C22817 * C3330 + C22821 * C3328 +
                      C51009 * C3331 + C22820 * C3329 + C51025 * C3332) *
                         C50790) *
                        C50852 * C50890) *
                       C1274) *
                  C50716) /
                 (p * q * std::sqrt(p + q));
    d2ee[140] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                      C51009 * C130 + C22822 * C124 + C22817 * C131) *
                         C1744 +
                     (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                      C51009 * C144 + C22822 * C135 + C22817 * C145) *
                         C51028 -
                     (C32434 + C32435 + C32436) * C1745 -
                     (C32437 + C32438 + C32439) * C51018 +
                     (C33012 + C33013 + C33014) * C1746 +
                     (C33015 + C33016 + C33017) * C1743) *
                        C50852 * C32103 +
                    ((C32436 + C32435 + C32434) * C1744 +
                     (C32439 + C32438 + C32437) * C51028 -
                     (C33014 + C33013 + C33012) * C1745 -
                     (C33017 + C33016 + C33015) * C51018 +
                     (C33282 + C33281 + C33280) * C1746 +
                     (C33285 + C33284 + C33283) * C1743) *
                        C50852 * C50890) *
                       C1169 +
                   (((C23640 + C23639 + C23638) * C1745 -
                     ((C23011 + C23010 + C23009) * C51028 +
                      (C23008 + C23007 + C23006) * C1744) +
                     (C23643 + C23642 + C23641) * C51018 -
                     (C23956 + C23955 + C23954) * C1746 -
                     (C23959 + C23958 + C23957) * C1743) *
                        C50852 * C32103 +
                    ((C23954 + C23955 + C23956) * C1745 -
                     ((C23641 + C23642 + C23643) * C51028 +
                      (C23638 + C23639 + C23640) * C1744) +
                     (C23957 + C23958 + C23959) * C51018 -
                     (C22822 * C3449 + C22817 * C3452 + C22821 * C3450 +
                      C51009 * C3453 + C22820 * C3451 + C51025 * C3454) *
                         C1746 -
                     (C22822 * C3455 + C22817 * C3458 + C22821 * C3456 +
                      C51009 * C3459 + C22820 * C3457 + C51025 * C3460) *
                         C1743) *
                        C50852 * C50890) *
                       C50764) *
                  C50716) /
                 (p * q * std::sqrt(p + q));
    d2ee[141] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                       C51009 * C130 + C22822 * C124 + C22817 * C131) *
                          C121 +
                      (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                       C51009 * C144 + C22822 * C135 + C22817 * C145) *
                          C50778) *
                         C50852 * C32103 +
                     ((C32436 + C32435 + C32434) * C121 +
                      (C32439 + C32438 + C32437) * C50778) *
                         C50852 * C50890) *
                        C501 -
                    (((C23641 + C23642 + C23643) * C50778 +
                      (C23638 + C23639 + C23640) * C121) *
                         C50852 * C50890 +
                     ((C23011 + C23010 + C23009) * C50778 +
                      (C23008 + C23007 + C23006) * C121) *
                         C50852 * C32103) *
                        C502 +
                    (((C23345 + C23344 + C23343) * C121 +
                      (C23342 + C23341 + C23340) * C50778) *
                         C50852 * C32103 +
                     ((C23644 + C23645 + C23646) * C121 +
                      (C23647 + C23648 + C23649) * C50778) *
                         C50852 * C50890) *
                        C503) *
                       C50974 +
                   ((((C23012 + C23013 + C23014) * C121 +
                      (C23015 + C23016 + C23017) * C50778) *
                         C50852 * C32103 +
                     ((C24556 + C24557 + C24558) * C121 +
                      (C24559 + C24560 + C24561) * C50778) *
                         C50852 * C50890) *
                        C502 -
                    (((C32445 + C32444 + C32443) * C50778 +
                      (C32442 + C32441 + C32440) * C121) *
                         C50852 * C50890 +
                     ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                       C51009 * C145 + C22820 * C134 + C51025 * C144) *
                          C50778 +
                      (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                       C51009 * C131 + C22820 * C123 + C51025 * C130) *
                          C121) *
                         C50852 * C32103) *
                        C501 -
                    (((C22822 * C731 + C22817 * C739 + C22821 * C732 +
                       C51009 * C740 + C22820 * C733 + C51025 * C741) *
                          C50778 +
                      (C22822 * C715 + C22817 * C727 + C22821 * C716 +
                       C51009 * C728 + C22820 * C717 + C51025 * C729) *
                          C121) *
                         C50852 * C50890 +
                     ((C23351 + C23350 + C23349) * C50778 +
                      (C23348 + C23347 + C23346) * C121) *
                         C50852 * C32103) *
                        C503) *
                       C50721)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                      C51009 * C130 + C22822 * C124 + C22817 * C131) *
                         C121 +
                     (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                      C51009 * C144 + C22822 * C135 + C22817 * C145) *
                         C50778) *
                        C50852 * C32103 +
                    ((C22820 * C382 + C51025 * C388 + C22821 * C381 +
                      C51009 * C387 + C22822 * C380 + C22817 * C386) *
                         C121 +
                     (C22820 * C392 + C51025 * C400 + C22821 * C391 +
                      C51009 * C399 + C22822 * C390 + C22817 * C398) *
                         C50778) *
                        C50852 * C50890) *
                       C50748 * C113 -
                   (((C22822 * C389 + C22817 * C397 + C22821 * C390 +
                      C51009 * C398 + C22820 * C391 + C51025 * C399) *
                         C50778 +
                     (C22822 * C379 + C22817 * C385 + C22821 * C380 +
                      C51009 * C386 + C22820 * C381 + C51025 * C387) *
                         C121) *
                        C50852 * C50890 +
                    ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                      C51009 * C145 + C22820 * C134 + C51025 * C144) *
                         C50778 +
                     (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                      C51009 * C131 + C22820 * C123 + C51025 * C130) *
                         C121) *
                        C50852 * C32103) *
                       C50748 * C114 +
                   (((C22820 * C124 + C51025 * C131 + C22821 * C125 +
                      C51009 * C132 + C22822 * C126 + C22817 * C138) *
                         C121 +
                     (C22820 * C135 + C51025 * C145 + C22821 * C136 +
                      C51009 * C146 + C22822 * C137 + C22817 * C147) *
                         C50778) *
                        C50852 * C32103 +
                    ((C22820 * C380 + C51025 * C386 + C22821 * C379 +
                      C51009 * C385 + C22822 * C383 + C22817 * C393) *
                         C121 +
                     (C22820 * C390 + C51025 * C398 + C22821 * C389 +
                      C51009 * C397 + C22822 * C394 + C22817 * C401) *
                         C50778) *
                        C50852 * C50890) *
                       C50748 * C115 -
                   (((C22822 * C396 + C22817 * C402 + C22821 * C394 +
                      C51009 * C401 + C22820 * C389 + C51025 * C397) *
                         C50778 +
                     (C22822 * C384 + C22817 * C395 + C22821 * C383 +
                      C51009 * C393 + C22820 * C379 + C51025 * C385) *
                         C121) *
                        C50852 * C50890 +
                    ((C22822 * C140 + C22817 * C148 + C22821 * C137 +
                      C51009 * C147 + C22820 * C136 + C51025 * C146) *
                         C50778 +
                     (C22822 * C127 + C22817 * C139 + C22821 * C126 +
                      C51009 * C138 + C22820 * C125 + C51025 * C132) *
                         C121) *
                        C50852 * C32103) *
                       C50748 * C116)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                      C51009 * C130 + C22822 * C124 + C22817 * C131) *
                         C844 +
                     (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                      C51009 * C144 + C22822 * C135 + C22817 * C145) *
                         C841 -
                     (C32434 + C32435 + C32436) * C845 -
                     (C32437 + C32438 + C32439) * C842 +
                     (C33012 + C33013 + C33014) * C846 +
                     (C33015 + C33016 + C33017) * C843) *
                        C50852 * C32103 +
                    ((C32436 + C32435 + C32434) * C844 +
                     (C32439 + C32438 + C32437) * C841 -
                     (C33014 + C33013 + C33012) * C845 -
                     (C33017 + C33016 + C33015) * C842 +
                     (C22820 * C1058 + C51025 * C1062 + C22821 * C1057 +
                      C51009 * C1061 + C22822 * C1056 + C22817 * C1060) *
                         C846 +
                     (C22820 * C1066 + C51025 * C1070 + C22821 * C1065 +
                      C51009 * C1069 + C22822 * C1064 + C22817 * C1068) *
                         C843) *
                        C50852 * C50890) *
                       C50748 * C50974 +
                   (((C32440 + C32441 + C32442) * C845 -
                     ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                       C51009 * C145 + C22820 * C134 + C51025 * C144) *
                          C841 +
                      (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                       C51009 * C131 + C22820 * C123 + C51025 * C130) *
                          C844) +
                     (C32443 + C32444 + C32445) * C842 -
                     (C33018 + C33019 + C33020) * C846 -
                     (C33021 + C33022 + C33023) * C843) *
                        C50852 * C32103 +
                    ((C33020 + C33019 + C33018) * C845 -
                     ((C32445 + C32444 + C32443) * C841 +
                      (C32442 + C32441 + C32440) * C844) +
                     (C33023 + C33022 + C33021) * C842 -
                     (C22822 * C1055 + C22817 * C1059 + C22821 * C1056 +
                      C51009 * C1060 + C22820 * C1057 + C51025 * C1061) *
                         C846 -
                     (C22822 * C1063 + C22817 * C1067 + C22821 * C1064 +
                      C51009 * C1068 + C22820 * C1065 + C51025 * C1069) *
                         C843) *
                        C50852 * C50890) *
                       C50748 * C50721)) /
                     (p * q * std::sqrt(p + q));
    d2ee[142] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                      C51009 * C130 + C22822 * C124 + C22817 * C131) *
                         C121 +
                     (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                      C51009 * C144 + C22822 * C135 + C22817 * C145) *
                         C50778) *
                        C50852 * C32103 +
                    ((C32436 + C32435 + C32434) * C121 +
                     (C32439 + C32438 + C32437) * C50778) *
                        C50852 * C50890) *
                       C592 -
                   (((C23641 + C23642 + C23643) * C50778 +
                     (C23638 + C23639 + C23640) * C121) *
                        C50852 * C50890 +
                    ((C23011 + C23010 + C23009) * C50778 +
                     (C23008 + C23007 + C23006) * C121) *
                        C50852 * C32103) *
                       C593 +
                   (((C23345 + C23344 + C23343) * C121 +
                     (C23342 + C23341 + C23340) * C50778) *
                        C50852 * C32103 +
                    ((C23644 + C23645 + C23646) * C121 +
                     (C23647 + C23648 + C23649) * C50778) *
                        C50852 * C50890) *
                       C594 -
                   (((C22822 * C2987 + C22817 * C2990 + C22821 * C2988 +
                      C51009 * C2991 + C22820 * C2989 + C51025 * C2992) *
                         C50778 +
                     (C22822 * C2981 + C22817 * C2984 + C22821 * C2982 +
                      C51009 * C2985 + C22820 * C2983 + C51025 * C2986) *
                         C121) *
                        C50852 * C50890 +
                    ((C23467 + C23466 + C23465) * C50778 +
                     (C23464 + C23463 + C23462) * C121) *
                        C50852 * C32103) *
                       C595) *
                  C50716) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                       C51009 * C130 + C22822 * C124 + C22817 * C131) *
                          C121 +
                      (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                       C51009 * C144 + C22822 * C135 + C22817 * C145) *
                          C50778) *
                         C50852 * C32103 +
                     ((C22820 * C382 + C51025 * C388 + C22821 * C381 +
                       C51009 * C387 + C22822 * C380 + C22817 * C386) *
                          C121 +
                      (C22820 * C392 + C51025 * C400 + C22821 * C391 +
                       C51009 * C399 + C22822 * C390 + C22817 * C398) *
                          C50778) *
                         C50852 * C50890) *
                        C50981 -
                    (((C23641 + C23642 + C23643) * C50778 +
                      (C23638 + C23639 + C23640) * C121) *
                         C50852 * C50890 +
                     ((C23011 + C23010 + C23009) * C50778 +
                      (C23008 + C23007 + C23006) * C121) *
                         C50852 * C32103) *
                        C50764) *
                       C250 +
                   ((((C23012 + C23013 + C23014) * C121 +
                      (C23015 + C23016 + C23017) * C50778) *
                         C50852 * C32103 +
                     ((C24556 + C24557 + C24558) * C121 +
                      (C24559 + C24560 + C24561) * C50778) *
                         C50852 * C50890) *
                        C50764 -
                    (((C22822 * C389 + C22817 * C397 + C22821 * C390 +
                       C51009 * C398 + C22820 * C391 + C51025 * C399) *
                          C50778 +
                      (C22822 * C379 + C22817 * C385 + C22821 * C380 +
                       C51009 * C386 + C22820 * C381 + C51025 * C387) *
                          C121) *
                         C50852 * C50890 +
                     ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                       C51009 * C145 + C22820 * C134 + C51025 * C144) *
                          C50778 +
                      (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                       C51009 * C131 + C22820 * C123 + C51025 * C130) *
                          C121) *
                         C50852 * C32103) *
                        C50981) *
                       C251 +
                   ((((C22820 * C124 + C51025 * C131 + C22821 * C125 +
                       C51009 * C132 + C22822 * C126 + C22817 * C138) *
                          C121 +
                      (C22820 * C135 + C51025 * C145 + C22821 * C136 +
                       C51009 * C146 + C22822 * C137 + C22817 * C147) *
                          C50778) *
                         C50852 * C32103 +
                     ((C22820 * C380 + C51025 * C386 + C22821 * C379 +
                       C51009 * C385 + C22822 * C383 + C22817 * C393) *
                          C121 +
                      (C22820 * C390 + C51025 * C398 + C22821 * C389 +
                       C51009 * C397 + C22822 * C394 + C22817 * C401) *
                          C50778) *
                         C50852 * C50890) *
                        C50981 -
                    (((C22822 * C1409 + C22817 * C1410 + C22821 * C726 +
                       C51009 * C738 + C22820 * C725 + C51025 * C737) *
                          C50778 +
                      (C22822 * C1407 + C22817 * C1408 + C22821 * C714 +
                       C51009 * C722 + C22820 * C713 + C51025 * C721) *
                          C121) *
                         C50852 * C50890 +
                     ((C23023 + C23022 + C23021) * C50778 +
                      (C23020 + C23019 + C23018) * C121) *
                         C50852 * C32103) *
                        C50764) *
                       C252)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                      C51009 * C130 + C22822 * C124 + C22817 * C131) *
                         C844 +
                     (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                      C51009 * C144 + C22822 * C135 + C22817 * C145) *
                         C841 -
                     (C32434 + C32435 + C32436) * C845 -
                     (C32437 + C32438 + C32439) * C842 +
                     (C33012 + C33013 + C33014) * C846 +
                     (C33015 + C33016 + C33017) * C843) *
                        C50852 * C32103 +
                    ((C32436 + C32435 + C32434) * C844 +
                     (C32439 + C32438 + C32437) * C841 -
                     (C33014 + C33013 + C33012) * C845 -
                     (C33017 + C33016 + C33015) * C842 +
                     (C22820 * C1058 + C51025 * C1062 + C22821 * C1057 +
                      C51009 * C1061 + C22822 * C1056 + C22817 * C1060) *
                         C846 +
                     (C22820 * C1066 + C51025 * C1070 + C22821 * C1065 +
                      C51009 * C1069 + C22822 * C1064 + C22817 * C1068) *
                         C843) *
                        C50852 * C50890) *
                       C50981 +
                   (((C23640 + C23639 + C23638) * C845 -
                     ((C23011 + C23010 + C23009) * C841 +
                      (C23008 + C23007 + C23006) * C844) +
                     (C23643 + C23642 + C23641) * C842 -
                     (C23956 + C23955 + C23954) * C846 -
                     (C23959 + C23958 + C23957) * C843) *
                        C50852 * C32103 +
                    ((C23954 + C23955 + C23956) * C845 -
                     ((C23641 + C23642 + C23643) * C841 +
                      (C23638 + C23639 + C23640) * C844) +
                     (C23957 + C23958 + C23959) * C842 -
                     (C22822 * C3449 + C22817 * C3452 + C22821 * C3450 +
                      C51009 * C3453 + C22820 * C3451 + C51025 * C3454) *
                         C846 -
                     (C22822 * C3455 + C22817 * C3458 + C22821 * C3456 +
                      C51009 * C3459 + C22820 * C3457 + C51025 * C3460) *
                         C843) *
                        C50852 * C50890) *
                       C50764) *
                  C50716) /
                     (p * q * std::sqrt(p + q));
    d2ee[143] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                      C51009 * C130 + C22822 * C124 + C22817 * C131) *
                         C377 +
                     (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                      C51009 * C144 + C22822 * C135 + C22817 * C145) *
                         C50983 -
                     (C32434 + C32435 + C32436) * C378 -
                     (C32437 + C32438 + C32439) * C50790) *
                        C50852 * C32103 +
                    ((C32436 + C32435 + C32434) * C377 +
                     (C32439 + C32438 + C32437) * C50983 -
                     (C22822 * C849 + C22817 * C854 + C22821 * C848 +
                      C51009 * C853 + C22820 * C847 + C51025 * C852) *
                         C378 -
                     (C22822 * C858 + C22817 * C864 + C22821 * C857 +
                      C51009 * C863 + C22820 * C856 + C51025 * C862) *
                         C50790) *
                        C50852 * C50890) *
                       C501 +
                   (((C23640 + C23639 + C23638) * C378 -
                     ((C23011 + C23010 + C23009) * C50983 +
                      (C23008 + C23007 + C23006) * C377) +
                     (C23643 + C23642 + C23641) * C50790) *
                        C50852 * C32103 +
                    ((C23954 + C23955 + C23956) * C378 -
                     ((C23641 + C23642 + C23643) * C50983 +
                      (C23638 + C23639 + C23640) * C377) +
                     (C23957 + C23958 + C23959) * C50790) *
                        C50852 * C50890) *
                       C502 +
                   (((C23345 + C23344 + C23343) * C377 +
                     (C23342 + C23341 + C23340) * C50983 -
                     (C23646 + C23645 + C23644) * C378 -
                     (C23649 + C23648 + C23647) * C50790) *
                        C50852 * C32103 +
                    ((C23644 + C23645 + C23646) * C377 +
                     (C23647 + C23648 + C23649) * C50983 -
                     (C22822 * C3321 + C22817 * C3324 + C22821 * C3322 +
                      C51009 * C3325 + C22820 * C3323 + C51025 * C3326) *
                         C378 -
                     (C22822 * C3327 + C22817 * C3330 + C22821 * C3328 +
                      C51009 * C3331 + C22820 * C3329 + C51025 * C3332) *
                         C50790) *
                        C50852 * C50890) *
                       C503) *
                  C50716) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                      C51009 * C130 + C22822 * C124 + C22817 * C131) *
                         C377 +
                     (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                      C51009 * C144 + C22822 * C135 + C22817 * C145) *
                         C50983 -
                     (C32434 + C32435 + C32436) * C378 -
                     (C32437 + C32438 + C32439) * C50790) *
                        C50852 * C32103 +
                    ((C32436 + C32435 + C32434) * C377 +
                     (C32439 + C32438 + C32437) * C50983 -
                     (C22822 * C849 + C22817 * C854 + C22821 * C848 +
                      C51009 * C853 + C22820 * C847 + C51025 * C852) *
                         C378 -
                     (C22822 * C858 + C22817 * C864 + C22821 * C857 +
                      C51009 * C863 + C22820 * C856 + C51025 * C862) *
                         C50790) *
                        C50852 * C50890) *
                       C50748 * C250 +
                   (((C32440 + C32441 + C32442) * C378 -
                     ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                       C51009 * C145 + C22820 * C134 + C51025 * C144) *
                          C50983 +
                      (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                       C51009 * C131 + C22820 * C123 + C51025 * C130) *
                          C377) +
                     (C32443 + C32444 + C32445) * C50790) *
                        C50852 * C32103 +
                    ((C22820 * C848 + C51025 * C853 + C22821 * C849 +
                      C51009 * C854 + C22822 * C850 + C22817 * C855) *
                         C378 -
                     ((C32445 + C32444 + C32443) * C50983 +
                      (C32442 + C32441 + C32440) * C377) +
                     (C22820 * C857 + C51025 * C863 + C22821 * C858 +
                      C51009 * C864 + C22822 * C859 + C22817 * C865) *
                         C50790) *
                        C50852 * C50890) *
                       C50748 * C251 +
                   (((C22820 * C124 + C51025 * C131 + C22821 * C125 +
                      C51009 * C132 + C22822 * C126 + C22817 * C138) *
                         C377 +
                     (C22820 * C135 + C51025 * C145 + C22821 * C136 +
                      C51009 * C146 + C22822 * C137 + C22817 * C147) *
                         C50983 -
                     (C32446 + C32447 + C32448) * C378 -
                     (C32449 + C32450 + C32451) * C50790) *
                        C50852 * C32103 +
                    ((C32448 + C32447 + C32446) * C377 +
                     (C32451 + C32450 + C32449) * C50983 -
                     (C22822 * C851 + C22817 * C860 + C22821 * C850 +
                      C51009 * C855 + C22820 * C849 + C51025 * C854) *
                         C378 -
                     (C22822 * C861 + C22817 * C866 + C22821 * C859 +
                      C51009 * C865 + C22820 * C858 + C51025 * C864) *
                         C50790) *
                        C50852 * C50890) *
                       C50748 * C252)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                     C51009 * C130 + C22822 * C124 + C22817 * C131) *
                        C1051 +
                    (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                     C51009 * C144 + C22822 * C135 + C22817 * C145) *
                        C1047 -
                    (C32434 + C32435 + C32436) * C1052 -
                    (C32437 + C32438 + C32439) * C1048 +
                    (C33012 + C33013 + C33014) * C1053 +
                    (C33015 + C33016 + C33017) * C1049 -
                    (C33280 + C33281 + C33282) * C1054 -
                    (C33283 + C33284 + C33285) * C1050) *
                       C50852 * C32103 +
                   ((C32436 + C32435 + C32434) * C1051 +
                    (C32439 + C32438 + C32437) * C1047 -
                    (C33014 + C33013 + C33012) * C1052 -
                    (C33017 + C33016 + C33015) * C1048 +
                    (C33282 + C33281 + C33280) * C1053 +
                    (C33285 + C33284 + C33283) * C1049 -
                    (C22822 * C6199 + C22817 * C6202 + C22821 * C6200 +
                     C51009 * C6203 + C22820 * C6201 + C51025 * C6204) *
                        C1054 -
                    (C22822 * C6205 + C22817 * C6208 + C22821 * C6206 +
                     C51009 * C6209 + C22820 * C6207 + C51025 * C6210) *
                        C1050) *
                       C50852 * C50890) *
                  C50748 * C50716) /
                     (p * q * std::sqrt(p + q));
    d2ee[144] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                      C51009 * C130 + C22822 * C124 + C22817 * C131) *
                         C1511 +
                     (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                      C51009 * C144 + C22822 * C135 + C22817 * C145) *
                         C1509 -
                     (C32434 + C32435 + C32436) * C1512 -
                     (C32437 + C32438 + C32439) * C50790) *
                        C50852 * C32103 +
                    ((C32436 + C32435 + C32434) * C1511 +
                     (C32439 + C32438 + C32437) * C1509 -
                     (C33014 + C33013 + C33012) * C1512 -
                     (C33017 + C33016 + C33015) * C50790) *
                        C50852 * C50890) *
                       C50748 * C51026 +
                   (((C32440 + C32441 + C32442) * C1512 -
                     ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                       C51009 * C145 + C22820 * C134 + C51025 * C144) *
                          C1509 +
                      (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                       C51009 * C131 + C22820 * C123 + C51025 * C130) *
                          C1511) +
                     (C32443 + C32444 + C32445) * C50790) *
                        C50852 * C32103 +
                    ((C33020 + C33019 + C33018) * C1512 -
                     ((C32445 + C32444 + C32443) * C1509 +
                      (C32442 + C32441 + C32440) * C1511) +
                     (C33023 + C33022 + C33021) * C50790) *
                        C50852 * C50890) *
                       C50748 * C51012 +
                   (((C22820 * C124 + C51025 * C131 + C22821 * C125 +
                      C51009 * C132 + C22822 * C126 + C22817 * C138) *
                         C1511 +
                     (C22820 * C135 + C51025 * C145 + C22821 * C136 +
                      C51009 * C146 + C22822 * C137 + C22817 * C147) *
                         C1509 -
                     (C32446 + C32447 + C32448) * C1512 -
                     (C32449 + C32450 + C32451) * C50790) *
                        C50852 * C32103 +
                    ((C32448 + C32447 + C32446) * C1511 +
                     (C32451 + C32450 + C32449) * C1509 -
                     (C22822 * C851 + C22817 * C860 + C22821 * C850 +
                      C51009 * C855 + C22820 * C849 + C51025 * C854) *
                         C1512 -
                     (C22822 * C861 + C22817 * C866 + C22821 * C859 +
                      C51009 * C865 + C22820 * C858 + C51025 * C864) *
                         C50790) *
                        C50852 * C50890) *
                       C50748 * C1173)) /
                 (p * q * std::sqrt(p + q));
    d2ee[145] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                       C51009 * C130 + C22822 * C124 + C22817 * C131) *
                          C1511 +
                      (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                       C51009 * C144 + C22822 * C135 + C22817 * C145) *
                          C1509 -
                      (C32434 + C32435 + C32436) * C1512 -
                      (C32437 + C32438 + C32439) * C50790) *
                         C50852 * C32103 +
                     ((C32436 + C32435 + C32434) * C1511 +
                      (C32439 + C32438 + C32437) * C1509 -
                      (C33014 + C33013 + C33012) * C1512 -
                      (C33017 + C33016 + C33015) * C50790) *
                         C50852 * C50890) *
                        C50981 +
                    (((C23640 + C23639 + C23638) * C1512 -
                      ((C23011 + C23010 + C23009) * C1509 +
                       (C23008 + C23007 + C23006) * C1511) +
                      (C23643 + C23642 + C23641) * C50790) *
                         C50852 * C32103 +
                     ((C23954 + C23955 + C23956) * C1512 -
                      ((C23641 + C23642 + C23643) * C1509 +
                       (C23638 + C23639 + C23640) * C1511) +
                      (C23957 + C23958 + C23959) * C50790) *
                         C50852 * C50890) *
                        C50764) *
                       C1275 +
                   ((((C32440 + C32441 + C32442) * C1512 -
                      ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                        C51009 * C145 + C22820 * C134 + C51025 * C144) *
                           C1509 +
                       (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                        C51009 * C131 + C22820 * C123 + C51025 * C130) *
                           C1511) +
                      (C32443 + C32444 + C32445) * C50790) *
                         C50852 * C32103 +
                     ((C33020 + C33019 + C33018) * C1512 -
                      ((C32445 + C32444 + C32443) * C1509 +
                       (C32442 + C32441 + C32440) * C1511) +
                      (C33023 + C33022 + C33021) * C50790) *
                         C50852 * C50890) *
                        C50981 +
                    (((C23012 + C23013 + C23014) * C1511 +
                      (C23015 + C23016 + C23017) * C1509 -
                      (C24558 + C24557 + C24556) * C1512 -
                      (C24561 + C24560 + C24559) * C50790) *
                         C50852 * C32103 +
                     ((C24556 + C24557 + C24558) * C1511 +
                      (C24559 + C24560 + C24561) * C1509 -
                      (C22822 * C965 + C22817 * C969 + C22821 * C966 +
                       C51009 * C970 + C22820 * C967 + C51025 * C971) *
                          C1512 -
                      (C22822 * C973 + C22817 * C977 + C22821 * C974 +
                       C51009 * C978 + C22820 * C975 + C51025 * C979) *
                          C50790) *
                         C50852 * C50890) *
                        C50764) *
                       C50721)) /
                 (p * q * std::sqrt(p + q));
    d2ee[146] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                      C51009 * C130 + C22822 * C124 + C22817 * C131) *
                         C1744 +
                     (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                      C51009 * C144 + C22822 * C135 + C22817 * C145) *
                         C51028 -
                     (C32434 + C32435 + C32436) * C1745 -
                     (C32437 + C32438 + C32439) * C51018 +
                     (C33012 + C33013 + C33014) * C1746 +
                     (C33015 + C33016 + C33017) * C1743) *
                        C50852 * C32103 +
                    ((C32436 + C32435 + C32434) * C1744 +
                     (C32439 + C32438 + C32437) * C51028 -
                     (C33014 + C33013 + C33012) * C1745 -
                     (C33017 + C33016 + C33015) * C51018 +
                     (C33282 + C33281 + C33280) * C1746 +
                     (C33285 + C33284 + C33283) * C1743) *
                        C50852 * C50890) *
                       C50748 * C1275 +
                   (((C32440 + C32441 + C32442) * C1745 -
                     ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                       C51009 * C145 + C22820 * C134 + C51025 * C144) *
                          C51028 +
                      (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                       C51009 * C131 + C22820 * C123 + C51025 * C130) *
                          C1744) +
                     (C32443 + C32444 + C32445) * C51018 -
                     (C33018 + C33019 + C33020) * C1746 -
                     (C33021 + C33022 + C33023) * C1743) *
                        C50852 * C32103 +
                    ((C33020 + C33019 + C33018) * C1745 -
                     ((C32445 + C32444 + C32443) * C51028 +
                      (C32442 + C32441 + C32440) * C1744) +
                     (C33023 + C33022 + C33021) * C51018 -
                     (C22822 * C1055 + C22817 * C1059 + C22821 * C1056 +
                      C51009 * C1060 + C22820 * C1057 + C51025 * C1061) *
                         C1746 -
                     (C22822 * C1063 + C22817 * C1067 + C22821 * C1064 +
                      C51009 * C1068 + C22820 * C1065 + C51025 * C1069) *
                         C1743) *
                        C50852 * C50890) *
                       C50748 * C50721)) /
                 (p * q * std::sqrt(p + q));
    d2ee[147] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                      C51009 * C130 + C22822 * C124 + C22817 * C131) *
                         C121 +
                     (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                      C51009 * C144 + C22822 * C135 + C22817 * C145) *
                         C50778) *
                        C50852 * C32103 +
                    ((C22820 * C382 + C51025 * C388 + C22821 * C381 +
                      C51009 * C387 + C22822 * C380 + C22817 * C386) *
                         C121 +
                     (C22820 * C392 + C51025 * C400 + C22821 * C391 +
                      C51009 * C399 + C22822 * C390 + C22817 * C398) *
                         C50778) *
                        C50852 * C50890) *
                       C50748 * C113 -
                   (((C22822 * C389 + C22817 * C397 + C22821 * C390 +
                      C51009 * C398 + C22820 * C391 + C51025 * C399) *
                         C50778 +
                     (C22822 * C379 + C22817 * C385 + C22821 * C380 +
                      C51009 * C386 + C22820 * C381 + C51025 * C387) *
                         C121) *
                        C50852 * C50890 +
                    ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                      C51009 * C145 + C22820 * C134 + C51025 * C144) *
                         C50778 +
                     (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                      C51009 * C131 + C22820 * C123 + C51025 * C130) *
                         C121) *
                        C50852 * C32103) *
                       C50748 * C114 +
                   (((C22820 * C124 + C51025 * C131 + C22821 * C125 +
                      C51009 * C132 + C22822 * C126 + C22817 * C138) *
                         C121 +
                     (C22820 * C135 + C51025 * C145 + C22821 * C136 +
                      C51009 * C146 + C22822 * C137 + C22817 * C147) *
                         C50778) *
                        C50852 * C32103 +
                    ((C22820 * C380 + C51025 * C386 + C22821 * C379 +
                      C51009 * C385 + C22822 * C383 + C22817 * C393) *
                         C121 +
                     (C22820 * C390 + C51025 * C398 + C22821 * C389 +
                      C51009 * C397 + C22822 * C394 + C22817 * C401) *
                         C50778) *
                        C50852 * C50890) *
                       C50748 * C115 -
                   (((C22822 * C396 + C22817 * C402 + C22821 * C394 +
                      C51009 * C401 + C22820 * C389 + C51025 * C397) *
                         C50778 +
                     (C22822 * C384 + C22817 * C395 + C22821 * C383 +
                      C51009 * C393 + C22820 * C379 + C51025 * C385) *
                         C121) *
                        C50852 * C50890 +
                    ((C22822 * C140 + C22817 * C148 + C22821 * C137 +
                      C51009 * C147 + C22820 * C136 + C51025 * C146) *
                         C50778 +
                     (C22822 * C127 + C22817 * C139 + C22821 * C126 +
                      C51009 * C138 + C22820 * C125 + C51025 * C132) *
                         C121) *
                        C50852 * C32103) *
                       C50748 * C116)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                       C51009 * C130 + C22822 * C124 + C22817 * C131) *
                          C121 +
                      (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                       C51009 * C144 + C22822 * C135 + C22817 * C145) *
                          C50778) *
                         C50852 * C32103 +
                     ((C32436 + C32435 + C32434) * C121 +
                      (C32439 + C32438 + C32437) * C50778) *
                         C50852 * C50890) *
                        C501 -
                    (((C23641 + C23642 + C23643) * C50778 +
                      (C23638 + C23639 + C23640) * C121) *
                         C50852 * C50890 +
                     ((C23011 + C23010 + C23009) * C50778 +
                      (C23008 + C23007 + C23006) * C121) *
                         C50852 * C32103) *
                        C502 +
                    (((C23345 + C23344 + C23343) * C121 +
                      (C23342 + C23341 + C23340) * C50778) *
                         C50852 * C32103 +
                     ((C23644 + C23645 + C23646) * C121 +
                      (C23647 + C23648 + C23649) * C50778) *
                         C50852 * C50890) *
                        C503) *
                       C50974 +
                   ((((C23012 + C23013 + C23014) * C121 +
                      (C23015 + C23016 + C23017) * C50778) *
                         C50852 * C32103 +
                     ((C24556 + C24557 + C24558) * C121 +
                      (C24559 + C24560 + C24561) * C50778) *
                         C50852 * C50890) *
                        C502 -
                    (((C32445 + C32444 + C32443) * C50778 +
                      (C32442 + C32441 + C32440) * C121) *
                         C50852 * C50890 +
                     ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                       C51009 * C145 + C22820 * C134 + C51025 * C144) *
                          C50778 +
                      (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                       C51009 * C131 + C22820 * C123 + C51025 * C130) *
                          C121) *
                         C50852 * C32103) *
                        C501 -
                    (((C22822 * C731 + C22817 * C739 + C22821 * C732 +
                       C51009 * C740 + C22820 * C733 + C51025 * C741) *
                          C50778 +
                      (C22822 * C715 + C22817 * C727 + C22821 * C716 +
                       C51009 * C728 + C22820 * C717 + C51025 * C729) *
                          C121) *
                         C50852 * C50890 +
                     ((C23351 + C23350 + C23349) * C50778 +
                      (C23348 + C23347 + C23346) * C121) *
                         C50852 * C32103) *
                        C503) *
                       C50721)) /
                     (p * q * std::sqrt(p + q));
    d2ee[148] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                       C51009 * C130 + C22822 * C124 + C22817 * C131) *
                          C121 +
                      (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                       C51009 * C144 + C22822 * C135 + C22817 * C145) *
                          C50778) *
                         C50852 * C32103 +
                     ((C22820 * C382 + C51025 * C388 + C22821 * C381 +
                       C51009 * C387 + C22822 * C380 + C22817 * C386) *
                          C121 +
                      (C22820 * C392 + C51025 * C400 + C22821 * C391 +
                       C51009 * C399 + C22822 * C390 + C22817 * C398) *
                          C50778) *
                         C50852 * C50890) *
                        C50981 -
                    (((C23641 + C23642 + C23643) * C50778 +
                      (C23638 + C23639 + C23640) * C121) *
                         C50852 * C50890 +
                     ((C23011 + C23010 + C23009) * C50778 +
                      (C23008 + C23007 + C23006) * C121) *
                         C50852 * C32103) *
                        C50764) *
                       C250 +
                   ((((C23012 + C23013 + C23014) * C121 +
                      (C23015 + C23016 + C23017) * C50778) *
                         C50852 * C32103 +
                     ((C24556 + C24557 + C24558) * C121 +
                      (C24559 + C24560 + C24561) * C50778) *
                         C50852 * C50890) *
                        C50764 -
                    (((C22822 * C389 + C22817 * C397 + C22821 * C390 +
                       C51009 * C398 + C22820 * C391 + C51025 * C399) *
                          C50778 +
                      (C22822 * C379 + C22817 * C385 + C22821 * C380 +
                       C51009 * C386 + C22820 * C381 + C51025 * C387) *
                          C121) *
                         C50852 * C50890 +
                     ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                       C51009 * C145 + C22820 * C134 + C51025 * C144) *
                          C50778 +
                      (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                       C51009 * C131 + C22820 * C123 + C51025 * C130) *
                          C121) *
                         C50852 * C32103) *
                        C50981) *
                       C251 +
                   ((((C22820 * C124 + C51025 * C131 + C22821 * C125 +
                       C51009 * C132 + C22822 * C126 + C22817 * C138) *
                          C121 +
                      (C22820 * C135 + C51025 * C145 + C22821 * C136 +
                       C51009 * C146 + C22822 * C137 + C22817 * C147) *
                          C50778) *
                         C50852 * C32103 +
                     ((C22820 * C380 + C51025 * C386 + C22821 * C379 +
                       C51009 * C385 + C22822 * C383 + C22817 * C393) *
                          C121 +
                      (C22820 * C390 + C51025 * C398 + C22821 * C389 +
                       C51009 * C397 + C22822 * C394 + C22817 * C401) *
                          C50778) *
                         C50852 * C50890) *
                        C50981 -
                    (((C22822 * C1409 + C22817 * C1410 + C22821 * C726 +
                       C51009 * C738 + C22820 * C725 + C51025 * C737) *
                          C50778 +
                      (C22822 * C1407 + C22817 * C1408 + C22821 * C714 +
                       C51009 * C722 + C22820 * C713 + C51025 * C721) *
                          C121) *
                         C50852 * C50890 +
                     ((C23023 + C23022 + C23021) * C50778 +
                      (C23020 + C23019 + C23018) * C121) *
                         C50852 * C32103) *
                        C50764) *
                       C252)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                      C51009 * C130 + C22822 * C124 + C22817 * C131) *
                         C121 +
                     (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                      C51009 * C144 + C22822 * C135 + C22817 * C145) *
                         C50778) *
                        C50852 * C32103 +
                    ((C32436 + C32435 + C32434) * C121 +
                     (C32439 + C32438 + C32437) * C50778) *
                        C50852 * C50890) *
                       C592 -
                   (((C23641 + C23642 + C23643) * C50778 +
                     (C23638 + C23639 + C23640) * C121) *
                        C50852 * C50890 +
                    ((C23011 + C23010 + C23009) * C50778 +
                     (C23008 + C23007 + C23006) * C121) *
                        C50852 * C32103) *
                       C593 +
                   (((C23345 + C23344 + C23343) * C121 +
                     (C23342 + C23341 + C23340) * C50778) *
                        C50852 * C32103 +
                    ((C23644 + C23645 + C23646) * C121 +
                     (C23647 + C23648 + C23649) * C50778) *
                        C50852 * C50890) *
                       C594 -
                   (((C22822 * C2987 + C22817 * C2990 + C22821 * C2988 +
                      C51009 * C2991 + C22820 * C2989 + C51025 * C2992) *
                         C50778 +
                     (C22822 * C2981 + C22817 * C2984 + C22821 * C2982 +
                      C51009 * C2985 + C22820 * C2983 + C51025 * C2986) *
                         C121) *
                        C50852 * C50890 +
                    ((C23467 + C23466 + C23465) * C50778 +
                     (C23464 + C23463 + C23462) * C121) *
                        C50852 * C32103) *
                       C595) *
                  C50716) /
                     (p * q * std::sqrt(p + q));
    d2ee[149] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                      C51009 * C130 + C22822 * C124 + C22817 * C131) *
                         C377 +
                     (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                      C51009 * C144 + C22822 * C135 + C22817 * C145) *
                         C50983 -
                     (C32434 + C32435 + C32436) * C378 -
                     (C32437 + C32438 + C32439) * C50790) *
                        C50852 * C32103 +
                    ((C32436 + C32435 + C32434) * C377 +
                     (C32439 + C32438 + C32437) * C50983 -
                     (C22822 * C849 + C22817 * C854 + C22821 * C848 +
                      C51009 * C853 + C22820 * C847 + C51025 * C852) *
                         C378 -
                     (C22822 * C858 + C22817 * C864 + C22821 * C857 +
                      C51009 * C863 + C22820 * C856 + C51025 * C862) *
                         C50790) *
                        C50852 * C50890) *
                       C50748 * C250 +
                   (((C32440 + C32441 + C32442) * C378 -
                     ((C22822 * C136 + C22817 * C146 + C22821 * C135 +
                       C51009 * C145 + C22820 * C134 + C51025 * C144) *
                          C50983 +
                      (C22822 * C125 + C22817 * C132 + C22821 * C124 +
                       C51009 * C131 + C22820 * C123 + C51025 * C130) *
                          C377) +
                     (C32443 + C32444 + C32445) * C50790) *
                        C50852 * C32103 +
                    ((C22820 * C848 + C51025 * C853 + C22821 * C849 +
                      C51009 * C854 + C22822 * C850 + C22817 * C855) *
                         C378 -
                     ((C32445 + C32444 + C32443) * C50983 +
                      (C32442 + C32441 + C32440) * C377) +
                     (C22820 * C857 + C51025 * C863 + C22821 * C858 +
                      C51009 * C864 + C22822 * C859 + C22817 * C865) *
                         C50790) *
                        C50852 * C50890) *
                       C50748 * C251 +
                   (((C22820 * C124 + C51025 * C131 + C22821 * C125 +
                      C51009 * C132 + C22822 * C126 + C22817 * C138) *
                         C377 +
                     (C22820 * C135 + C51025 * C145 + C22821 * C136 +
                      C51009 * C146 + C22822 * C137 + C22817 * C147) *
                         C50983 -
                     (C32446 + C32447 + C32448) * C378 -
                     (C32449 + C32450 + C32451) * C50790) *
                        C50852 * C32103 +
                    ((C32448 + C32447 + C32446) * C377 +
                     (C32451 + C32450 + C32449) * C50983 -
                     (C22822 * C851 + C22817 * C860 + C22821 * C850 +
                      C51009 * C855 + C22820 * C849 + C51025 * C854) *
                         C378 -
                     (C22822 * C861 + C22817 * C866 + C22821 * C859 +
                      C51009 * C865 + C22820 * C858 + C51025 * C864) *
                         C50790) *
                        C50852 * C50890) *
                       C50748 * C252)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22820 * C122 + C51025 * C129 + C22821 * C123 +
                      C51009 * C130 + C22822 * C124 + C22817 * C131) *
                         C377 +
                     (C22820 * C133 + C51025 * C143 + C22821 * C134 +
                      C51009 * C144 + C22822 * C135 + C22817 * C145) *
                         C50983 -
                     (C32434 + C32435 + C32436) * C378 -
                     (C32437 + C32438 + C32439) * C50790) *
                        C50852 * C32103 +
                    ((C32436 + C32435 + C32434) * C377 +
                     (C32439 + C32438 + C32437) * C50983 -
                     (C22822 * C849 + C22817 * C854 + C22821 * C848 +
                      C51009 * C853 + C22820 * C847 + C51025 * C852) *
                         C378 -
                     (C22822 * C858 + C22817 * C864 + C22821 * C857 +
                      C51009 * C863 + C22820 * C856 + C51025 * C862) *
                         C50790) *
                        C50852 * C50890) *
                       C501 +
                   (((C23640 + C23639 + C23638) * C378 -
                     ((C23011 + C23010 + C23009) * C50983 +
                      (C23008 + C23007 + C23006) * C377) +
                     (C23643 + C23642 + C23641) * C50790) *
                        C50852 * C32103 +
                    ((C23954 + C23955 + C23956) * C378 -
                     ((C23641 + C23642 + C23643) * C50983 +
                      (C23638 + C23639 + C23640) * C377) +
                     (C23957 + C23958 + C23959) * C50790) *
                        C50852 * C50890) *
                       C502 +
                   (((C23345 + C23344 + C23343) * C377 +
                     (C23342 + C23341 + C23340) * C50983 -
                     (C23646 + C23645 + C23644) * C378 -
                     (C23649 + C23648 + C23647) * C50790) *
                        C50852 * C32103 +
                    ((C23644 + C23645 + C23646) * C377 +
                     (C23647 + C23648 + C23649) * C50983 -
                     (C22822 * C3321 + C22817 * C3324 + C22821 * C3322 +
                      C51009 * C3325 + C22820 * C3323 + C51025 * C3326) *
                         C378 -
                     (C22822 * C3327 + C22817 * C3330 + C22821 * C3328 +
                      C51009 * C3331 + C22820 * C3329 + C51025 * C3332) *
                         C50790) *
                        C50852 * C50890) *
                       C503) *
                  C50716) /
                     (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                  C121 +
              (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                  C50778) *
                 C50995 +
             ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
                C32103 +
            (((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50995 +
             (C29478 * C121 + C29479 * C50778) * C50866) *
                C50890) *
               C1169 -
           (((C26484 * C50778 + C26483 * C121) * C50866 +
             (C29477 * C50778 + C29476 * C121) * C50995) *
                C50890 +
            (((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C50866 +
             ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C50995) *
                C32103) *
               C50764) *
              C51026 +
          (((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C50995 +
             ((C25845 + C25846) * C121 + (C25847 + C25848) * C50778) * C50866) *
                C32103 +
            ((C30710 * C121 + C30711 * C50778) * C50995 +
             ((C27409 + C27410) * C121 + (C27411 + C27412) * C50778) * C50866) *
                C50890) *
               C50764 -
           (((C30712 * C50778 + C30713 * C121) * C50866 +
             ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C50995) *
                C50890 +
            (((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C50866 +
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C50778 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C121) *
                 C50995) *
                C32103) *
               C1169) *
              C51012 +
          (((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                  C121 +
              (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                  C50778) *
                 C50995 +
             ((C25849 + C25850) * C121 + (C25851 + C25852) * C50778) * C50866) *
                C32103 +
            (((C28955 + C28954) * C121 + (C28957 + C28956) * C50778) * C50995 +
             ((C28724 + C28725) * C121 + (C28726 + C28727) * C50778) * C50866) *
                C50890) *
               C1169 -
           ((((C25637 * C731 + C50693 * C739 + C25636 * C732 + C25631 * C740) *
                  C50778 +
              (C25637 * C715 + C50693 * C727 + C25636 * C716 + C25631 * C728) *
                  C121) *
                 C50866 +
             ((C28727 + C28726) * C50778 + (C28725 + C28724) * C121) * C50995) *
                C50890 +
            (((C25856 + C25855) * C50778 + (C25854 + C25853) * C121) * C50866 +
             ((C25852 + C25851) * C50778 + (C25850 + C25849) * C121) * C50995) *
                C32103) *
               C50764) *
              C1173)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                  C121 +
              (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                  C50778) *
                 C50995 +
             ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
                C32103 +
            (((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50995 +
             (C29478 * C121 + C29479 * C50778) * C50866) *
                C50890) *
               C51027 -
           (((C26484 * C50778 + C26483 * C121) * C50866 +
             (C29477 * C50778 + C29476 * C121) * C50995) *
                C50890 +
            (((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C50866 +
             ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C50995) *
                C32103) *
               C51015 +
           ((C26181 * C50995 +
             ((C26174 + C26173) * C121 + (C26172 + C26171) * C50778) * C50866) *
                C32103 +
            ((C29480 * C121 + C29481 * C50778) * C50995 +
             ((C26479 + C26480) * C121 + (C26481 + C26482) * C50778) * C50866) *
                C50890) *
               C1274) *
              C1275 +
          (((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C50995 +
             ((C25845 + C25846) * C121 + (C25847 + C25848) * C50778) * C50866) *
                C32103 +
            ((C30710 * C121 + C30711 * C50778) * C50995 +
             ((C27409 + C27410) * C121 + (C27411 + C27412) * C50778) * C50866) *
                C50890) *
               C51015 -
           (((C30712 * C50778 + C30713 * C121) * C50866 +
             ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C50995) *
                C50890 +
            (((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C50866 +
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C50778 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C121) *
                 C50995) *
                C32103) *
               C51027 -
           ((((C25637 * C2987 + C50693 * C2990 + C25636 * C2988 +
               C25631 * C2991) *
                  C50778 +
              (C25637 * C2981 + C50693 * C2984 + C25636 * C2982 +
               C25631 * C2985) *
                  C121) *
                 C50866 +
             ((C27412 + C27411) * C50778 + (C27410 + C27409) * C121) * C50995) *
                C50890 +
            (((C26178 + C26177) * C50778 + (C26176 + C26175) * C121) * C50866 +
             C26182 * C50995) *
                C32103) *
               C1274) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                  C377 +
              (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                  C50983 -
              (C28946 + C28947) * C378 - (C28948 + C28949) * C50790) *
                 C50995 +
             ((C25833 + C25834) * C377 + (C25835 + C25836) * C50983 -
              C29476 * C378 - C29477 * C50790) *
                 C50866) *
                C32103 +
            (((C28947 + C28946) * C377 + (C28949 + C28948) * C50983 -
              (C29701 + C29700) * C378 - (C29703 + C29702) * C50790) *
                 C50995 +
             (C29478 * C377 + C29479 * C50983 - C29908 * C378 -
              C29909 * C50790) *
                 C50866) *
                C50890) *
               C1169 +
           (((C29478 * C378 -
              ((C25836 + C25835) * C50983 + (C25834 + C25833) * C377) +
              C29479 * C50790) *
                 C50995 +
             (C29480 * C378 -
              ((C25840 + C25839) * C50983 + (C25838 + C25837) * C377) +
              C29481 * C50790) *
                 C50866) *
                C32103 +
            ((C29906 * C378 - (C29477 * C50983 + C29476 * C377) +
              C29907 * C50790) *
                 C50995 +
             ((C26801 + C26802) * C378 - (C26484 * C50983 + C26483 * C377) +
              (C26803 + C26804) * C50790) *
                 C50866) *
                C50890) *
               C50764) *
              C1275 +
          (((((C28950 + C28951) * C378 -
              ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                   C50983 +
               (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                   C377) +
              (C28952 + C28953) * C50790) *
                 C50995 +
             (C30710 * C378 -
              ((C25844 + C25843) * C50983 + (C25842 + C25841) * C377) +
              C30711 * C50790) *
                 C50866) *
                C32103 +
            (((C29705 + C29704) * C378 -
              ((C28953 + C28952) * C50983 + (C28951 + C28950) * C377) +
              (C29707 + C29706) * C50790) *
                 C50995 +
             ((C29709 + C29708) * C378 - (C30712 * C50983 + C30713 * C377) +
              (C29711 + C29710) * C50790) *
                 C50866) *
                C50890) *
               C1169 +
           ((((C25841 + C25842) * C377 + (C25843 + C25844) * C50983 -
              C30713 * C378 - C30712 * C50790) *
                 C50995 +
             ((C25845 + C25846) * C377 + (C25847 + C25848) * C50983 -
              (C27410 + C27409) * C378 - (C27412 + C27411) * C50790) *
                 C50866) *
                C32103 +
            ((C30710 * C377 + C30711 * C50983 - (C29708 + C29709) * C378 -
              (C29710 + C29711) * C50790) *
                 C50995 +
             ((C27409 + C27410) * C377 + (C27411 + C27412) * C50983 -
              (C25637 * C3321 + C50693 * C3324 + C25636 * C3322 +
               C25631 * C3325) *
                  C378 -
              (C25637 * C3327 + C50693 * C3330 + C25636 * C3328 +
               C25631 * C3331) *
                  C50790) *
                 C50866) *
                C50890) *
               C50764) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                  C1511 +
              (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                  C1509 -
              (C28946 + C28947) * C1512 - (C28948 + C28949) * C50790) *
                 C50995 +
             ((C25833 + C25834) * C1511 + (C25835 + C25836) * C1509 -
              C29476 * C1512 - C29477 * C50790) *
                 C50866) *
                C32103 +
            (((C28947 + C28946) * C1511 + (C28949 + C28948) * C1509 -
              (C29701 + C29700) * C1512 - (C29703 + C29702) * C50790) *
                 C50995 +
             (C29478 * C1511 + C29479 * C1509 - C29908 * C1512 -
              C29909 * C50790) *
                 C50866) *
                C50890) *
               C1169 +
           (((C29478 * C1512 -
              ((C25836 + C25835) * C1509 + (C25834 + C25833) * C1511) +
              C29479 * C50790) *
                 C50995 +
             (C29480 * C1512 -
              ((C25840 + C25839) * C1509 + (C25838 + C25837) * C1511) +
              C29481 * C50790) *
                 C50866) *
                C32103 +
            ((C29906 * C1512 - (C29477 * C1509 + C29476 * C1511) +
              C29907 * C50790) *
                 C50995 +
             ((C26801 + C26802) * C1512 - (C26484 * C1509 + C26483 * C1511) +
              (C26803 + C26804) * C50790) *
                 C50866) *
                C50890) *
               C50764) *
              C50974 +
          (((((C28950 + C28951) * C1512 -
              ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                   C1509 +
               (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                   C1511) +
              (C28952 + C28953) * C50790) *
                 C50995 +
             (C30710 * C1512 -
              ((C25844 + C25843) * C1509 + (C25842 + C25841) * C1511) +
              C30711 * C50790) *
                 C50866) *
                C32103 +
            (((C29705 + C29704) * C1512 -
              ((C28953 + C28952) * C1509 + (C28951 + C28950) * C1511) +
              (C29707 + C29706) * C50790) *
                 C50995 +
             ((C29709 + C29708) * C1512 - (C30712 * C1509 + C30713 * C1511) +
              (C29711 + C29710) * C50790) *
                 C50866) *
                C50890) *
               C1169 +
           ((((C25841 + C25842) * C1511 + (C25843 + C25844) * C1509 -
              C30713 * C1512 - C30712 * C50790) *
                 C50995 +
             ((C25845 + C25846) * C1511 + (C25847 + C25848) * C1509 -
              (C27410 + C27409) * C1512 - (C27412 + C27411) * C50790) *
                 C50866) *
                C32103 +
            ((C30710 * C1511 + C30711 * C1509 - (C29708 + C29709) * C1512 -
              (C29710 + C29711) * C50790) *
                 C50995 +
             ((C27409 + C27410) * C1511 + (C27411 + C27412) * C1509 -
              (C25637 * C3321 + C50693 * C3324 + C25636 * C3322 +
               C25631 * C3325) *
                  C1512 -
              (C25637 * C3327 + C50693 * C3330 + C25636 * C3328 +
               C25631 * C3331) *
                  C50790) *
                 C50866) *
                C50890) *
               C50764) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C1511 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C1509 -
             (C28946 + C28947) * C1512 - (C28948 + C28949) * C50790) *
                C50995 +
            ((C25833 + C25834) * C1511 + (C25835 + C25836) * C1509 -
             C29476 * C1512 - C29477 * C50790) *
                C50866) *
               C32103 +
           (((C28947 + C28946) * C1511 + (C28949 + C28948) * C1509 -
             (C29701 + C29700) * C1512 - (C29703 + C29702) * C50790) *
                C50995 +
            (C29478 * C1511 + C29479 * C1509 - C29908 * C1512 -
             C29909 * C50790) *
                C50866) *
               C50890) *
              C51027 +
          (((C29478 * C1512 -
             ((C25836 + C25835) * C1509 + (C25834 + C25833) * C1511) +
             C29479 * C50790) *
                C50995 +
            (C29480 * C1512 -
             ((C25840 + C25839) * C1509 + (C25838 + C25837) * C1511) +
             C29481 * C50790) *
                C50866) *
               C32103 +
           ((C29906 * C1512 - (C29477 * C1509 + C29476 * C1511) +
             C29907 * C50790) *
                C50995 +
            ((C26801 + C26802) * C1512 - (C26484 * C1509 + C26483 * C1511) +
             (C26803 + C26804) * C50790) *
                C50866) *
               C50890) *
              C51015 +
          ((C28245 * C50995 +
            ((C26174 + C26173) * C1511 + (C26172 + C26171) * C1509 -
             (C26480 + C26479) * C1512 - (C26482 + C26481) * C50790) *
                C50866) *
               C32103 +
           ((C29480 * C1511 + C29481 * C1509 - (C26802 + C26801) * C1512 -
             (C26804 + C26803) * C50790) *
                C50995 +
            ((C26479 + C26480) * C1511 + (C26481 + C26482) * C1509 -
             (C25637 * C8950 + C50693 * C8952 + C25636 * C8951 +
              C25631 * C8953) *
                 C1512 -
             (C25637 * C8954 + C50693 * C8956 + C25636 * C8955 +
              C25631 * C8957) *
                 C50790) *
                C50866) *
               C50890) *
              C1274) *
         C50716) /
        (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C1744 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C51028 -
             (C28946 + C28947) * C1745 - (C28948 + C28949) * C51018 +
             (C29700 + C29701) * C1746 + (C29702 + C29703) * C1743) *
                C50995 +
            ((C25833 + C25834) * C1744 + (C25835 + C25836) * C51028 -
             C29476 * C1745 - C29477 * C51018 + C29906 * C1746 +
             C29907 * C1743) *
                C50866) *
               C32103 +
           (((C28947 + C28946) * C1744 + (C28949 + C28948) * C51028 -
             (C29701 + C29700) * C1745 - (C29703 + C29702) * C51018 +
             (C30061 + C30060) * C1746 + (C30063 + C30062) * C1743) *
                C50995 +
            (C29478 * C1744 + C29479 * C51028 - C29908 * C1745 -
             C29909 * C51018 + (C29918 + C29919) * C1746 +
             (C29920 + C29921) * C1743) *
                C50866) *
               C50890) *
              C1169 +
          (((C29478 * C1745 -
             ((C25836 + C25835) * C51028 + (C25834 + C25833) * C1744) +
             C29479 * C51018 - C29908 * C1746 - C29909 * C1743) *
                C50995 +
            (C29480 * C1745 -
             ((C25840 + C25839) * C51028 + (C25838 + C25837) * C1744) +
             C29481 * C51018 - (C26802 + C26801) * C1746 -
             (C26804 + C26803) * C1743) *
                C50866) *
               C32103 +
           ((C29906 * C1745 - (C29477 * C51028 + C29476 * C1744) +
             C29907 * C51018 - (C29919 + C29918) * C1746 -
             (C29921 + C29920) * C1743) *
                C50995 +
            ((C26801 + C26802) * C1745 - (C26484 * C51028 + C26483 * C1744) +
             (C26803 + C26804) * C51018 -
             (C25637 * C9080 + C50693 * C9082 + C25636 * C9081 +
              C25631 * C9083) *
                 C1746 -
             (C25637 * C9084 + C50693 * C9086 + C25636 * C9085 +
              C25631 * C9087) *
                 C1743) *
                C50866) *
               C50890) *
              C50764) *
         C50716) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                  C121 +
              (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                  C50778) *
                 C50995 +
             ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
                C32103 +
            (((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50995 +
             (C29478 * C121 + C29479 * C50778) * C50866) *
                C50890) *
               C501 -
           (((C26484 * C50778 + C26483 * C121) * C50866 +
             (C29477 * C50778 + C29476 * C121) * C50995) *
                C50890 +
            (((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C50866 +
             ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C50995) *
                C32103) *
               C502 +
           ((C26181 * C50995 +
             ((C26174 + C26173) * C121 + (C26172 + C26171) * C50778) * C50866) *
                C32103 +
            ((C29480 * C121 + C29481 * C50778) * C50995 +
             ((C26479 + C26480) * C121 + (C26481 + C26482) * C50778) * C50866) *
                C50890) *
               C503) *
              C50974 +
          (((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C50995 +
             ((C25845 + C25846) * C121 + (C25847 + C25848) * C50778) * C50866) *
                C32103 +
            ((C30710 * C121 + C30711 * C50778) * C50995 +
             ((C27409 + C27410) * C121 + (C27411 + C27412) * C50778) * C50866) *
                C50890) *
               C502 -
           (((C30712 * C50778 + C30713 * C121) * C50866 +
             ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C50995) *
                C50890 +
            (((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C50866 +
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C50778 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C121) *
                 C50995) *
                C32103) *
               C501 -
           ((((C25637 * C2987 + C50693 * C2990 + C25636 * C2988 +
               C25631 * C2991) *
                  C50778 +
              (C25637 * C2981 + C50693 * C2984 + C25636 * C2982 +
               C25631 * C2985) *
                  C121) *
                 C50866 +
             ((C27412 + C27411) * C50778 + (C27410 + C27409) * C121) * C50995) *
                C50890 +
            (((C26178 + C26177) * C50778 + (C26176 + C26175) * C121) * C50866 +
             C26182 * C50995) *
                C32103) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C50995 +
            ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
               C32103 +
           (((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50995 +
            (C29478 * C121 + C29479 * C50778) * C50866) *
               C50890) *
              C50748 * C113 -
          (((C30712 * C50778 + C30713 * C121) * C50866 +
            ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C50995) *
               C50890 +
           (((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C50866 +
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50778 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C121) *
                C50995) *
               C32103) *
              C50748 * C114 +
          ((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                 C121 +
             (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                 C50778) *
                C50995 +
            ((C25849 + C25850) * C121 + (C25851 + C25852) * C50778) * C50866) *
               C32103 +
           (((C28955 + C28954) * C121 + (C28957 + C28956) * C50778) * C50995 +
            ((C28724 + C28725) * C121 + (C28726 + C28727) * C50778) * C50866) *
               C50890) *
              C50748 * C115 -
          ((((C25637 * C1409 + C50693 * C1410 + C25636 * C726 + C25631 * C738) *
                 C50778 +
             (C25637 * C1407 + C50693 * C1408 + C25636 * C714 + C25631 * C722) *
                 C121) *
                C50866 +
            ((C25637 * C394 + C50693 * C401 + C25636 * C389 + C25631 * C397) *
                 C50778 +
             (C25637 * C383 + C50693 * C393 + C25636 * C379 + C25631 * C385) *
                 C121) *
                C50995) *
               C50890 +
           (((C25637 * C268 + C50693 * C275 + C25636 * C259 + C25631 * C271) *
                 C50778 +
             (C25637 * C257 + C50693 * C267 + C25636 * C253 + C25631 * C263) *
                 C121) *
                C50866 +
            ((C25637 * C137 + C50693 * C147 + C25636 * C136 + C25631 * C146) *
                 C50778 +
             (C25637 * C126 + C50693 * C138 + C25636 * C125 + C25631 * C132) *
                 C121) *
                C50995) *
               C32103) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C844 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C841 -
             (C28946 + C28947) * C845 - (C28948 + C28949) * C842 +
             (C29700 + C29701) * C846 + (C29702 + C29703) * C843) *
                C50995 +
            ((C25833 + C25834) * C844 + (C25835 + C25836) * C841 -
             C29476 * C845 - C29477 * C842 + C29906 * C846 + C29907 * C843) *
                C50866) *
               C32103 +
           (((C28947 + C28946) * C844 + (C28949 + C28948) * C841 -
             (C29701 + C29700) * C845 - (C29703 + C29702) * C842 +
             (C30061 + C30060) * C846 + (C30063 + C30062) * C843) *
                C50995 +
            (C29478 * C844 + C29479 * C841 - C29908 * C845 - C29909 * C842 +
             (C29918 + C29919) * C846 + (C29920 + C29921) * C843) *
                C50866) *
               C50890) *
              C50748 * C50974 +
          ((((C28950 + C28951) * C845 -
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C841 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C844) +
             (C28952 + C28953) * C842 - (C29704 + C29705) * C846 -
             (C29706 + C29707) * C843) *
                C50995 +
            (C30710 * C845 -
             ((C25844 + C25843) * C841 + (C25842 + C25841) * C844) +
             C30711 * C842 - (C29708 + C29709) * C846 -
             (C29710 + C29711) * C843) *
                C50866) *
               C32103 +
           (((C29705 + C29704) * C845 -
             ((C28953 + C28952) * C841 + (C28951 + C28950) * C844) +
             (C29707 + C29706) * C842 -
             (C25637 * C1056 + C50693 * C1060 + C25636 * C1057 +
              C25631 * C1061) *
                 C846 -
             (C25637 * C1064 + C50693 * C1068 + C25636 * C1065 +
              C25631 * C1069) *
                 C843) *
                C50995 +
            ((C29709 + C29708) * C845 - (C30712 * C841 + C30713 * C844) +
             (C29711 + C29710) * C842 -
             (C25637 * C3449 + C50693 * C3452 + C25636 * C3450 +
              C25631 * C3453) *
                 C846 -
             (C25637 * C3455 + C50693 * C3458 + C25636 * C3456 +
              C25631 * C3459) *
                 C843) *
                C50866) *
               C50890) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C50995 +
            ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
               C32103 +
           (((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50995 +
            (C29478 * C121 + C29479 * C50778) * C50866) *
               C50890) *
              C592 -
          (((C26484 * C50778 + C26483 * C121) * C50866 +
            (C29477 * C50778 + C29476 * C121) * C50995) *
               C50890 +
           (((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C50866 +
            ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C50995) *
               C32103) *
              C593 +
          ((C26181 * C50995 +
            ((C26174 + C26173) * C121 + (C26172 + C26171) * C50778) * C50866) *
               C32103 +
           ((C29480 * C121 + C29481 * C50778) * C50995 +
            ((C26479 + C26480) * C121 + (C26481 + C26482) * C50778) * C50866) *
               C50890) *
              C594 -
          ((((C25637 * C8609 + C50693 * C8611 + C25636 * C8610 +
              C25631 * C8612) *
                 C50778 +
             (C25637 * C8605 + C50693 * C8607 + C25636 * C8606 +
              C25631 * C8608) *
                 C121) *
                C50866 +
            ((C26482 + C26481) * C50778 + (C26480 + C26479) * C121) * C50995) *
               C50890 +
           (((C26296 + C26295) * C50778 + (C26294 + C26293) * C121) * C50866 +
            C26297 * C50995) *
               C32103) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                  C121 +
              (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                  C50778) *
                 C50995 +
             ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
                C32103 +
            (((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50995 +
             (C29478 * C121 + C29479 * C50778) * C50866) *
                C50890) *
               C50981 -
           (((C26484 * C50778 + C26483 * C121) * C50866 +
             (C29477 * C50778 + C29476 * C121) * C50995) *
                C50890 +
            (((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C50866 +
             ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C50995) *
                C32103) *
               C50764) *
              C250 +
          (((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C50995 +
             ((C25845 + C25846) * C121 + (C25847 + C25848) * C50778) * C50866) *
                C32103 +
            ((C30710 * C121 + C30711 * C50778) * C50995 +
             ((C27409 + C27410) * C121 + (C27411 + C27412) * C50778) * C50866) *
                C50890) *
               C50764 -
           (((C30712 * C50778 + C30713 * C121) * C50866 +
             ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C50995) *
                C50890 +
            (((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C50866 +
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C50778 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C121) *
                 C50995) *
                C32103) *
               C50981) *
              C251 +
          (((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                  C121 +
              (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                  C50778) *
                 C50995 +
             ((C25849 + C25850) * C121 + (C25851 + C25852) * C50778) * C50866) *
                C32103 +
            (((C28955 + C28954) * C121 + (C28957 + C28956) * C50778) * C50995 +
             ((C28724 + C28725) * C121 + (C28726 + C28727) * C50778) * C50866) *
                C50890) *
               C50981 -
           ((((C25637 * C731 + C50693 * C739 + C25636 * C732 + C25631 * C740) *
                  C50778 +
              (C25637 * C715 + C50693 * C727 + C25636 * C716 + C25631 * C728) *
                  C121) *
                 C50866 +
             ((C28727 + C28726) * C50778 + (C28725 + C28724) * C121) * C50995) *
                C50890 +
            (((C25856 + C25855) * C50778 + (C25854 + C25853) * C121) * C50866 +
             ((C25852 + C25851) * C50778 + (C25850 + C25849) * C121) * C50995) *
                C32103) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C844 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C841 -
             (C28946 + C28947) * C845 - (C28948 + C28949) * C842 +
             (C29700 + C29701) * C846 + (C29702 + C29703) * C843) *
                C50995 +
            ((C25833 + C25834) * C844 + (C25835 + C25836) * C841 -
             C29476 * C845 - C29477 * C842 + C29906 * C846 + C29907 * C843) *
                C50866) *
               C32103 +
           (((C28947 + C28946) * C844 + (C28949 + C28948) * C841 -
             (C29701 + C29700) * C845 - (C29703 + C29702) * C842 +
             (C30061 + C30060) * C846 + (C30063 + C30062) * C843) *
                C50995 +
            (C29478 * C844 + C29479 * C841 - C29908 * C845 - C29909 * C842 +
             (C29918 + C29919) * C846 + (C29920 + C29921) * C843) *
                C50866) *
               C50890) *
              C50981 +
          (((C29478 * C845 -
             ((C25836 + C25835) * C841 + (C25834 + C25833) * C844) +
             C29479 * C842 - C29908 * C846 - C29909 * C843) *
                C50995 +
            (C29480 * C845 -
             ((C25840 + C25839) * C841 + (C25838 + C25837) * C844) +
             C29481 * C842 - (C26802 + C26801) * C846 -
             (C26804 + C26803) * C843) *
                C50866) *
               C32103 +
           ((C29906 * C845 - (C29477 * C841 + C29476 * C844) + C29907 * C842 -
             (C29919 + C29918) * C846 - (C29921 + C29920) * C843) *
                C50995 +
            ((C26801 + C26802) * C845 - (C26484 * C841 + C26483 * C844) +
             (C26803 + C26804) * C842 -
             (C25637 * C9080 + C50693 * C9082 + C25636 * C9081 +
              C25631 * C9083) *
                 C846 -
             (C25637 * C9084 + C50693 * C9086 + C25636 * C9085 +
              C25631 * C9087) *
                 C843) *
                C50866) *
               C50890) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C377 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50983 -
             (C28946 + C28947) * C378 - (C28948 + C28949) * C50790) *
                C50995 +
            ((C25833 + C25834) * C377 + (C25835 + C25836) * C50983 -
             C29476 * C378 - C29477 * C50790) *
                C50866) *
               C32103 +
           (((C28947 + C28946) * C377 + (C28949 + C28948) * C50983 -
             (C29701 + C29700) * C378 - (C29703 + C29702) * C50790) *
                C50995 +
            (C29478 * C377 + C29479 * C50983 - C29908 * C378 -
             C29909 * C50790) *
                C50866) *
               C50890) *
              C501 +
          (((C29478 * C378 -
             ((C25836 + C25835) * C50983 + (C25834 + C25833) * C377) +
             C29479 * C50790) *
                C50995 +
            (C29480 * C378 -
             ((C25840 + C25839) * C50983 + (C25838 + C25837) * C377) +
             C29481 * C50790) *
                C50866) *
               C32103 +
           ((C29906 * C378 - (C29477 * C50983 + C29476 * C377) +
             C29907 * C50790) *
                C50995 +
            ((C26801 + C26802) * C378 - (C26484 * C50983 + C26483 * C377) +
             (C26803 + C26804) * C50790) *
                C50866) *
               C50890) *
              C502 +
          ((C26488 * C50995 +
            ((C26174 + C26173) * C377 + (C26172 + C26171) * C50983 -
             (C26480 + C26479) * C378 - (C26482 + C26481) * C50790) *
                C50866) *
               C32103 +
           ((C29480 * C377 + C29481 * C50983 - (C26802 + C26801) * C378 -
             (C26804 + C26803) * C50790) *
                C50995 +
            ((C26479 + C26480) * C377 + (C26481 + C26482) * C50983 -
             (C25637 * C8950 + C50693 * C8952 + C25636 * C8951 +
              C25631 * C8953) *
                 C378 -
             (C25637 * C8954 + C50693 * C8956 + C25636 * C8955 +
              C25631 * C8957) *
                 C50790) *
                C50866) *
               C50890) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C377 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50983 -
             (C28946 + C28947) * C378 - (C28948 + C28949) * C50790) *
                C50995 +
            ((C25833 + C25834) * C377 + (C25835 + C25836) * C50983 -
             C29476 * C378 - C29477 * C50790) *
                C50866) *
               C32103 +
           (((C28947 + C28946) * C377 + (C28949 + C28948) * C50983 -
             (C29701 + C29700) * C378 - (C29703 + C29702) * C50790) *
                C50995 +
            (C29478 * C377 + C29479 * C50983 - C29908 * C378 -
             C29909 * C50790) *
                C50866) *
               C50890) *
              C50748 * C250 +
          ((((C28950 + C28951) * C378 -
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C50983 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C377) +
             (C28952 + C28953) * C50790) *
                C50995 +
            (C30710 * C378 -
             ((C25844 + C25843) * C50983 + (C25842 + C25841) * C377) +
             C30711 * C50790) *
                C50866) *
               C32103 +
           (((C29705 + C29704) * C378 -
             ((C28953 + C28952) * C50983 + (C28951 + C28950) * C377) +
             (C29707 + C29706) * C50790) *
                C50995 +
            ((C29709 + C29708) * C378 - (C30712 * C50983 + C30713 * C377) +
             (C29711 + C29710) * C50790) *
                C50866) *
               C50890) *
              C50748 * C251 +
          ((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                 C377 +
             (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                 C50983 -
             (C28954 + C28955) * C378 - (C28956 + C28957) * C50790) *
                C50995 +
            ((C25849 + C25850) * C377 + (C25851 + C25852) * C50983 -
             (C28725 + C28724) * C378 - (C28727 + C28726) * C50790) *
                C50866) *
               C32103 +
           (((C28955 + C28954) * C377 + (C28957 + C28956) * C50983 -
             (C25637 * C850 + C50693 * C855 + C25636 * C849 + C25631 * C854) *
                 C378 -
             (C25637 * C859 + C50693 * C865 + C25636 * C858 + C25631 * C864) *
                 C50790) *
                C50995 +
            ((C28724 + C28725) * C377 + (C28726 + C28727) * C50983 -
             (C25637 * C965 + C50693 * C969 + C25636 * C966 + C25631 * C970) *
                 C378 -
             (C25637 * C973 + C50693 * C977 + C25636 * C974 + C25631 * C978) *
                 C50790) *
                C50866) *
               C50890) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C1051 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C1047 -
            (C28946 + C28947) * C1052 - (C28948 + C28949) * C1048 +
            (C29700 + C29701) * C1053 + (C29702 + C29703) * C1049 -
            (C30060 + C30061) * C1054 - (C30062 + C30063) * C1050) *
               C50995 +
           ((C25833 + C25834) * C1051 + (C25835 + C25836) * C1047 -
            C29476 * C1052 - C29477 * C1048 + C29906 * C1053 + C29907 * C1049 -
            (C29919 + C29918) * C1054 - (C29921 + C29920) * C1050) *
               C50866) *
              C32103 +
          (((C28947 + C28946) * C1051 + (C28949 + C28948) * C1047 -
            (C29701 + C29700) * C1052 - (C29703 + C29702) * C1048 +
            (C30061 + C30060) * C1053 + (C30063 + C30062) * C1049 -
            (C25637 * C6200 + C50693 * C6203 + C25636 * C6201 +
             C25631 * C6204) *
                C1054 -
            (C25637 * C6206 + C50693 * C6209 + C25636 * C6207 +
             C25631 * C6210) *
                C1050) *
               C50995 +
           (C29478 * C1051 + C29479 * C1047 - C29908 * C1052 - C29909 * C1048 +
            (C29918 + C29919) * C1053 + (C29920 + C29921) * C1049 -
            (C25637 * C16603 + C50693 * C16604 + C25636 * C13913 +
             C25631 * C13915) *
                C1054 -
            (C25637 * C16605 + C50693 * C16606 + C25636 * C13916 +
             C25631 * C13919) *
                C1050) *
               C50866) *
              C50890) *
         C50748 * C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C1511 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C1509 -
             (C28946 + C28947) * C1512 - (C28948 + C28949) * C50790) *
                C50995 +
            ((C25833 + C25834) * C1511 + (C25835 + C25836) * C1509 -
             C29476 * C1512 - C29477 * C50790) *
                C50866) *
               C32103 +
           (((C28947 + C28946) * C1511 + (C28949 + C28948) * C1509 -
             (C29701 + C29700) * C1512 - (C29703 + C29702) * C50790) *
                C50995 +
            (C29478 * C1511 + C29479 * C1509 - C29908 * C1512 -
             C29909 * C50790) *
                C50866) *
               C50890) *
              C50748 * C51026 +
          ((((C28950 + C28951) * C1512 -
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C1509 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C1511) +
             (C28952 + C28953) * C50790) *
                C50995 +
            (C30710 * C1512 -
             ((C25844 + C25843) * C1509 + (C25842 + C25841) * C1511) +
             C30711 * C50790) *
                C50866) *
               C32103 +
           (((C29705 + C29704) * C1512 -
             ((C28953 + C28952) * C1509 + (C28951 + C28950) * C1511) +
             (C29707 + C29706) * C50790) *
                C50995 +
            ((C29709 + C29708) * C1512 - (C30712 * C1509 + C30713 * C1511) +
             (C29711 + C29710) * C50790) *
                C50866) *
               C50890) *
              C50748 * C51012 +
          ((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                 C1511 +
             (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                 C1509 -
             (C28954 + C28955) * C1512 - (C28956 + C28957) * C50790) *
                C50995 +
            ((C25849 + C25850) * C1511 + (C25851 + C25852) * C1509 -
             (C28725 + C28724) * C1512 - (C28727 + C28726) * C50790) *
                C50866) *
               C32103 +
           (((C28955 + C28954) * C1511 + (C28957 + C28956) * C1509 -
             (C25637 * C850 + C50693 * C855 + C25636 * C849 + C25631 * C854) *
                 C1512 -
             (C25637 * C859 + C50693 * C865 + C25636 * C858 + C25631 * C864) *
                 C50790) *
                C50995 +
            ((C28724 + C28725) * C1511 + (C28726 + C28727) * C1509 -
             (C25637 * C965 + C50693 * C969 + C25636 * C966 + C25631 * C970) *
                 C1512 -
             (C25637 * C973 + C50693 * C977 + C25636 * C974 + C25631 * C978) *
                 C50790) *
                C50866) *
               C50890) *
              C50748 * C1173)) /
        (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                  C1511 +
              (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                  C1509 -
              (C28946 + C28947) * C1512 - (C28948 + C28949) * C50790) *
                 C50995 +
             ((C25833 + C25834) * C1511 + (C25835 + C25836) * C1509 -
              C29476 * C1512 - C29477 * C50790) *
                 C50866) *
                C32103 +
            (((C28947 + C28946) * C1511 + (C28949 + C28948) * C1509 -
              (C29701 + C29700) * C1512 - (C29703 + C29702) * C50790) *
                 C50995 +
             (C29478 * C1511 + C29479 * C1509 - C29908 * C1512 -
              C29909 * C50790) *
                 C50866) *
                C50890) *
               C50981 +
           (((C29478 * C1512 -
              ((C25836 + C25835) * C1509 + (C25834 + C25833) * C1511) +
              C29479 * C50790) *
                 C50995 +
             (C29480 * C1512 -
              ((C25840 + C25839) * C1509 + (C25838 + C25837) * C1511) +
              C29481 * C50790) *
                 C50866) *
                C32103 +
            ((C29906 * C1512 - (C29477 * C1509 + C29476 * C1511) +
              C29907 * C50790) *
                 C50995 +
             ((C26801 + C26802) * C1512 - (C26484 * C1509 + C26483 * C1511) +
              (C26803 + C26804) * C50790) *
                 C50866) *
                C50890) *
               C50764) *
              C1275 +
          (((((C28950 + C28951) * C1512 -
              ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                   C1509 +
               (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                   C1511) +
              (C28952 + C28953) * C50790) *
                 C50995 +
             (C30710 * C1512 -
              ((C25844 + C25843) * C1509 + (C25842 + C25841) * C1511) +
              C30711 * C50790) *
                 C50866) *
                C32103 +
            (((C29705 + C29704) * C1512 -
              ((C28953 + C28952) * C1509 + (C28951 + C28950) * C1511) +
              (C29707 + C29706) * C50790) *
                 C50995 +
             ((C29709 + C29708) * C1512 - (C30712 * C1509 + C30713 * C1511) +
              (C29711 + C29710) * C50790) *
                 C50866) *
                C50890) *
               C50981 +
           ((((C25841 + C25842) * C1511 + (C25843 + C25844) * C1509 -
              C30713 * C1512 - C30712 * C50790) *
                 C50995 +
             ((C25845 + C25846) * C1511 + (C25847 + C25848) * C1509 -
              (C27410 + C27409) * C1512 - (C27412 + C27411) * C50790) *
                 C50866) *
                C32103 +
            ((C30710 * C1511 + C30711 * C1509 - (C29708 + C29709) * C1512 -
              (C29710 + C29711) * C50790) *
                 C50995 +
             ((C27409 + C27410) * C1511 + (C27411 + C27412) * C1509 -
              (C25637 * C3321 + C50693 * C3324 + C25636 * C3322 +
               C25631 * C3325) *
                  C1512 -
              (C25637 * C3327 + C50693 * C3330 + C25636 * C3328 +
               C25631 * C3331) *
                  C50790) *
                 C50866) *
                C50890) *
               C50764) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C1744 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C51028 -
             (C28946 + C28947) * C1745 - (C28948 + C28949) * C51018 +
             (C29700 + C29701) * C1746 + (C29702 + C29703) * C1743) *
                C50995 +
            ((C25833 + C25834) * C1744 + (C25835 + C25836) * C51028 -
             C29476 * C1745 - C29477 * C51018 + C29906 * C1746 +
             C29907 * C1743) *
                C50866) *
               C32103 +
           (((C28947 + C28946) * C1744 + (C28949 + C28948) * C51028 -
             (C29701 + C29700) * C1745 - (C29703 + C29702) * C51018 +
             (C30061 + C30060) * C1746 + (C30063 + C30062) * C1743) *
                C50995 +
            (C29478 * C1744 + C29479 * C51028 - C29908 * C1745 -
             C29909 * C51018 + (C29918 + C29919) * C1746 +
             (C29920 + C29921) * C1743) *
                C50866) *
               C50890) *
              C50748 * C1275 +
          ((((C28950 + C28951) * C1745 -
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C51028 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C1744) +
             (C28952 + C28953) * C51018 - (C29704 + C29705) * C1746 -
             (C29706 + C29707) * C1743) *
                C50995 +
            (C30710 * C1745 -
             ((C25844 + C25843) * C51028 + (C25842 + C25841) * C1744) +
             C30711 * C51018 - (C29708 + C29709) * C1746 -
             (C29710 + C29711) * C1743) *
                C50866) *
               C32103 +
           (((C29705 + C29704) * C1745 -
             ((C28953 + C28952) * C51028 + (C28951 + C28950) * C1744) +
             (C29707 + C29706) * C51018 -
             (C25637 * C1056 + C50693 * C1060 + C25636 * C1057 +
              C25631 * C1061) *
                 C1746 -
             (C25637 * C1064 + C50693 * C1068 + C25636 * C1065 +
              C25631 * C1069) *
                 C1743) *
                C50995 +
            ((C29709 + C29708) * C1745 - (C30712 * C51028 + C30713 * C1744) +
             (C29711 + C29710) * C51018 -
             (C25637 * C3449 + C50693 * C3452 + C25636 * C3450 +
              C25631 * C3453) *
                 C1746 -
             (C25637 * C3455 + C50693 * C3458 + C25636 * C3456 +
              C25631 * C3459) *
                 C1743) *
                C50866) *
               C50890) *
              C50748 * C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C50995 +
            ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
               C32103 +
           (((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50995 +
            (C29478 * C121 + C29479 * C50778) * C50866) *
               C50890) *
              C50748 * C113 -
          (((C30712 * C50778 + C30713 * C121) * C50866 +
            ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C50995) *
               C50890 +
           (((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C50866 +
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50778 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C121) *
                C50995) *
               C32103) *
              C50748 * C114 +
          ((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                 C121 +
             (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                 C50778) *
                C50995 +
            ((C25849 + C25850) * C121 + (C25851 + C25852) * C50778) * C50866) *
               C32103 +
           (((C28955 + C28954) * C121 + (C28957 + C28956) * C50778) * C50995 +
            ((C28724 + C28725) * C121 + (C28726 + C28727) * C50778) * C50866) *
               C50890) *
              C50748 * C115 -
          ((((C25637 * C1409 + C50693 * C1410 + C25636 * C726 + C25631 * C738) *
                 C50778 +
             (C25637 * C1407 + C50693 * C1408 + C25636 * C714 + C25631 * C722) *
                 C121) *
                C50866 +
            ((C25637 * C394 + C50693 * C401 + C25636 * C389 + C25631 * C397) *
                 C50778 +
             (C25637 * C383 + C50693 * C393 + C25636 * C379 + C25631 * C385) *
                 C121) *
                C50995) *
               C50890 +
           (((C25637 * C268 + C50693 * C275 + C25636 * C259 + C25631 * C271) *
                 C50778 +
             (C25637 * C257 + C50693 * C267 + C25636 * C253 + C25631 * C263) *
                 C121) *
                C50866 +
            ((C25637 * C137 + C50693 * C147 + C25636 * C136 + C25631 * C146) *
                 C50778 +
             (C25637 * C126 + C50693 * C138 + C25636 * C125 + C25631 * C132) *
                 C121) *
                C50995) *
               C32103) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                  C121 +
              (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                  C50778) *
                 C50995 +
             ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
                C32103 +
            (((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50995 +
             (C29478 * C121 + C29479 * C50778) * C50866) *
                C50890) *
               C501 -
           (((C26484 * C50778 + C26483 * C121) * C50866 +
             (C29477 * C50778 + C29476 * C121) * C50995) *
                C50890 +
            (((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C50866 +
             ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C50995) *
                C32103) *
               C502 +
           ((C26181 * C50995 +
             ((C26174 + C26173) * C121 + (C26172 + C26171) * C50778) * C50866) *
                C32103 +
            ((C29480 * C121 + C29481 * C50778) * C50995 +
             ((C26479 + C26480) * C121 + (C26481 + C26482) * C50778) * C50866) *
                C50890) *
               C503) *
              C50974 +
          (((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C50995 +
             ((C25845 + C25846) * C121 + (C25847 + C25848) * C50778) * C50866) *
                C32103 +
            ((C30710 * C121 + C30711 * C50778) * C50995 +
             ((C27409 + C27410) * C121 + (C27411 + C27412) * C50778) * C50866) *
                C50890) *
               C502 -
           (((C30712 * C50778 + C30713 * C121) * C50866 +
             ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C50995) *
                C50890 +
            (((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C50866 +
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C50778 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C121) *
                 C50995) *
                C32103) *
               C501 -
           ((((C25637 * C2987 + C50693 * C2990 + C25636 * C2988 +
               C25631 * C2991) *
                  C50778 +
              (C25637 * C2981 + C50693 * C2984 + C25636 * C2982 +
               C25631 * C2985) *
                  C121) *
                 C50866 +
             ((C27412 + C27411) * C50778 + (C27410 + C27409) * C121) * C50995) *
                C50890 +
            (((C26178 + C26177) * C50778 + (C26176 + C26175) * C121) * C50866 +
             C26182 * C50995) *
                C32103) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                  C121 +
              (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                  C50778) *
                 C50995 +
             ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
                C32103 +
            (((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50995 +
             (C29478 * C121 + C29479 * C50778) * C50866) *
                C50890) *
               C50981 -
           (((C26484 * C50778 + C26483 * C121) * C50866 +
             (C29477 * C50778 + C29476 * C121) * C50995) *
                C50890 +
            (((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C50866 +
             ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C50995) *
                C32103) *
               C50764) *
              C250 +
          (((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C50995 +
             ((C25845 + C25846) * C121 + (C25847 + C25848) * C50778) * C50866) *
                C32103 +
            ((C30710 * C121 + C30711 * C50778) * C50995 +
             ((C27409 + C27410) * C121 + (C27411 + C27412) * C50778) * C50866) *
                C50890) *
               C50764 -
           (((C30712 * C50778 + C30713 * C121) * C50866 +
             ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C50995) *
                C50890 +
            (((C25844 + C25843) * C50778 + (C25842 + C25841) * C121) * C50866 +
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C50778 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C121) *
                 C50995) *
                C32103) *
               C50981) *
              C251 +
          (((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                  C121 +
              (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                  C50778) *
                 C50995 +
             ((C25849 + C25850) * C121 + (C25851 + C25852) * C50778) * C50866) *
                C32103 +
            (((C28955 + C28954) * C121 + (C28957 + C28956) * C50778) * C50995 +
             ((C28724 + C28725) * C121 + (C28726 + C28727) * C50778) * C50866) *
                C50890) *
               C50981 -
           ((((C25637 * C731 + C50693 * C739 + C25636 * C732 + C25631 * C740) *
                  C50778 +
              (C25637 * C715 + C50693 * C727 + C25636 * C716 + C25631 * C728) *
                  C121) *
                 C50866 +
             ((C28727 + C28726) * C50778 + (C28725 + C28724) * C121) * C50995) *
                C50890 +
            (((C25856 + C25855) * C50778 + (C25854 + C25853) * C121) * C50866 +
             ((C25852 + C25851) * C50778 + (C25850 + C25849) * C121) * C50995) *
                C32103) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C50995 +
            ((C25833 + C25834) * C121 + (C25835 + C25836) * C50778) * C50866) *
               C32103 +
           (((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50995 +
            (C29478 * C121 + C29479 * C50778) * C50866) *
               C50890) *
              C592 -
          (((C26484 * C50778 + C26483 * C121) * C50866 +
            (C29477 * C50778 + C29476 * C121) * C50995) *
               C50890 +
           (((C25840 + C25839) * C50778 + (C25838 + C25837) * C121) * C50866 +
            ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C50995) *
               C32103) *
              C593 +
          ((C26181 * C50995 +
            ((C26174 + C26173) * C121 + (C26172 + C26171) * C50778) * C50866) *
               C32103 +
           ((C29480 * C121 + C29481 * C50778) * C50995 +
            ((C26479 + C26480) * C121 + (C26481 + C26482) * C50778) * C50866) *
               C50890) *
              C594 -
          ((((C25637 * C8609 + C50693 * C8611 + C25636 * C8610 +
              C25631 * C8612) *
                 C50778 +
             (C25637 * C8605 + C50693 * C8607 + C25636 * C8606 +
              C25631 * C8608) *
                 C121) *
                C50866 +
            ((C26482 + C26481) * C50778 + (C26480 + C26479) * C121) * C50995) *
               C50890 +
           (((C26296 + C26295) * C50778 + (C26294 + C26293) * C121) * C50866 +
            C26297 * C50995) *
               C32103) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C377 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50983 -
             (C28946 + C28947) * C378 - (C28948 + C28949) * C50790) *
                C50995 +
            ((C25833 + C25834) * C377 + (C25835 + C25836) * C50983 -
             C29476 * C378 - C29477 * C50790) *
                C50866) *
               C32103 +
           (((C28947 + C28946) * C377 + (C28949 + C28948) * C50983 -
             (C29701 + C29700) * C378 - (C29703 + C29702) * C50790) *
                C50995 +
            (C29478 * C377 + C29479 * C50983 - C29908 * C378 -
             C29909 * C50790) *
                C50866) *
               C50890) *
              C50748 * C250 +
          ((((C28950 + C28951) * C378 -
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C50983 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C377) +
             (C28952 + C28953) * C50790) *
                C50995 +
            (C30710 * C378 -
             ((C25844 + C25843) * C50983 + (C25842 + C25841) * C377) +
             C30711 * C50790) *
                C50866) *
               C32103 +
           (((C29705 + C29704) * C378 -
             ((C28953 + C28952) * C50983 + (C28951 + C28950) * C377) +
             (C29707 + C29706) * C50790) *
                C50995 +
            ((C29709 + C29708) * C378 - (C30712 * C50983 + C30713 * C377) +
             (C29711 + C29710) * C50790) *
                C50866) *
               C50890) *
              C50748 * C251 +
          ((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                 C377 +
             (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                 C50983 -
             (C28954 + C28955) * C378 - (C28956 + C28957) * C50790) *
                C50995 +
            ((C25849 + C25850) * C377 + (C25851 + C25852) * C50983 -
             (C28725 + C28724) * C378 - (C28727 + C28726) * C50790) *
                C50866) *
               C32103 +
           (((C28955 + C28954) * C377 + (C28957 + C28956) * C50983 -
             (C25637 * C850 + C50693 * C855 + C25636 * C849 + C25631 * C854) *
                 C378 -
             (C25637 * C859 + C50693 * C865 + C25636 * C858 + C25631 * C864) *
                 C50790) *
                C50995 +
            ((C28724 + C28725) * C377 + (C28726 + C28727) * C50983 -
             (C25637 * C965 + C50693 * C969 + C25636 * C966 + C25631 * C970) *
                 C378 -
             (C25637 * C973 + C50693 * C977 + C25636 * C974 + C25631 * C978) *
                 C50790) *
                C50866) *
               C50890) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C377 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50983 -
             (C28946 + C28947) * C378 - (C28948 + C28949) * C50790) *
                C50995 +
            ((C25833 + C25834) * C377 + (C25835 + C25836) * C50983 -
             C29476 * C378 - C29477 * C50790) *
                C50866) *
               C32103 +
           (((C28947 + C28946) * C377 + (C28949 + C28948) * C50983 -
             (C29701 + C29700) * C378 - (C29703 + C29702) * C50790) *
                C50995 +
            (C29478 * C377 + C29479 * C50983 - C29908 * C378 -
             C29909 * C50790) *
                C50866) *
               C50890) *
              C501 +
          (((C29478 * C378 -
             ((C25836 + C25835) * C50983 + (C25834 + C25833) * C377) +
             C29479 * C50790) *
                C50995 +
            (C29480 * C378 -
             ((C25840 + C25839) * C50983 + (C25838 + C25837) * C377) +
             C29481 * C50790) *
                C50866) *
               C32103 +
           ((C29906 * C378 - (C29477 * C50983 + C29476 * C377) +
             C29907 * C50790) *
                C50995 +
            ((C26801 + C26802) * C378 - (C26484 * C50983 + C26483 * C377) +
             (C26803 + C26804) * C50790) *
                C50866) *
               C50890) *
              C502 +
          ((C26488 * C50995 +
            ((C26174 + C26173) * C377 + (C26172 + C26171) * C50983 -
             (C26480 + C26479) * C378 - (C26482 + C26481) * C50790) *
                C50866) *
               C32103 +
           ((C29480 * C377 + C29481 * C50983 - (C26802 + C26801) * C378 -
             (C26804 + C26803) * C50790) *
                C50995 +
            ((C26479 + C26480) * C377 + (C26481 + C26482) * C50983 -
             (C25637 * C8950 + C50693 * C8952 + C25636 * C8951 +
              C25631 * C8953) *
                 C378 -
             (C25637 * C8954 + C50693 * C8956 + C25636 * C8955 +
              C25631 * C8957) *
                 C50790) *
                C50866) *
               C50890) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C50852 * C51030 +
            ((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50852 *
                C51024 +
            (C39177 * C121 + C39178 * C50778) * C50852 * C38335) *
               C1169 -
           ((C29909 * C50778 + C29908 * C121) * C50852 * C38335 +
            (C29477 * C50778 + C29476 * C121) * C50852 * C51024 +
            ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C50852 *
                C51030) *
               C50764) *
              C51026 +
          ((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C50852 *
                C51030 +
            (C30710 * C121 + C30711 * C50778) * C50852 * C51024 +
            ((C29709 + C29708) * C121 + (C29711 + C29710) * C50778) * C50852 *
                C38335) *
               C50764 -
           ((C39180 * C50778 + C39179 * C121) * C50852 * C38335 +
            ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C50852 *
                C51024 +
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50778 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C121) *
                C50852 * C51030) *
               C1169) *
              C51012 +
          ((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                 C121 +
             (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                 C50778) *
                C50852 * C51030 +
            ((C28955 + C28954) * C121 + (C28957 + C28956) * C50778) * C50852 *
                C51024 +
            ((C38638 + C38637) * C121 + (C38640 + C38639) * C50778) * C50852 *
                C38335) *
               C1169 -
           (((C25637 * C973 + C50693 * C977 + C25636 * C974 + C25631 * C978) *
                 C50778 +
             (C25637 * C965 + C50693 * C969 + C25636 * C966 + C25631 * C970) *
                 C121) *
                C50852 * C38335 +
            ((C28727 + C28726) * C50778 + (C28725 + C28724) * C121) * C50852 *
                C51024 +
            ((C25852 + C25851) * C50778 + (C25850 + C25849) * C121) * C50852 *
                C51030) *
               C50764) *
              C1173)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C50852 * C51030 +
            ((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50852 *
                C51024 +
            (C39177 * C121 + C39178 * C50778) * C50852 * C38335) *
               C51027 -
           ((C29909 * C50778 + C29908 * C121) * C50852 * C38335 +
            (C29477 * C50778 + C29476 * C121) * C50852 * C51024 +
            ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C50852 *
                C51030) *
               C51015 +
           (C26181 * C50852 * C51030 +
            (C29480 * C121 + C29481 * C50778) * C50852 * C51024 +
            ((C26801 + C26802) * C121 + (C26803 + C26804) * C50778) * C50852 *
                C38335) *
               C1274) *
              C1275 +
          ((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C50852 *
                C51030 +
            (C30710 * C121 + C30711 * C50778) * C50852 * C51024 +
            ((C29709 + C29708) * C121 + (C29711 + C29710) * C50778) * C50852 *
                C38335) *
               C51015 -
           ((C39180 * C50778 + C39179 * C121) * C50852 * C38335 +
            ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C50852 *
                C51024 +
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50778 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C121) *
                C50852 * C51030) *
               C51027 -
           (((C25637 * C3327 + C50693 * C3330 + C25636 * C3328 +
              C25631 * C3331) *
                 C50778 +
             (C25637 * C3321 + C50693 * C3324 + C25636 * C3322 +
              C25631 * C3325) *
                 C121) *
                C50852 * C38335 +
            ((C27412 + C27411) * C50778 + (C27410 + C27409) * C121) * C50852 *
                C51024 +
            C26182 * C50852 * C51030) *
               C1274) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C377 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50983 -
             (C28946 + C28947) * C378 - (C28948 + C28949) * C50790) *
                C50852 * C51030 +
            ((C28947 + C28946) * C377 + (C28949 + C28948) * C50983 -
             (C29701 + C29700) * C378 - (C29703 + C29702) * C50790) *
                C50852 * C51024 +
            (C39177 * C377 + C39178 * C50983 - C39437 * C378 -
             C39438 * C50790) *
                C50852 * C38335) *
               C1169 +
           ((C29478 * C378 -
             ((C25836 + C25835) * C50983 + (C25834 + C25833) * C377) +
             C29479 * C50790) *
                C50852 * C51030 +
            (C29906 * C378 - (C29477 * C50983 + C29476 * C377) +
             C29907 * C50790) *
                C50852 * C51024 +
            ((C29918 + C29919) * C378 - (C29909 * C50983 + C29908 * C377) +
             (C29920 + C29921) * C50790) *
                C50852 * C38335) *
               C50764) *
              C1275 +
          ((((C28950 + C28951) * C378 -
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C50983 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C377) +
             (C28952 + C28953) * C50790) *
                C50852 * C51030 +
            ((C29705 + C29704) * C378 -
             ((C28953 + C28952) * C50983 + (C28951 + C28950) * C377) +
             (C29707 + C29706) * C50790) *
                C50852 * C51024 +
            ((C39190 + C39189) * C378 - (C39180 * C50983 + C39179 * C377) +
             (C39192 + C39191) * C50790) *
                C50852 * C38335) *
               C1169 +
           (((C25841 + C25842) * C377 + (C25843 + C25844) * C50983 -
             C30713 * C378 - C30712 * C50790) *
                C50852 * C51030 +
            (C30710 * C377 + C30711 * C50983 - (C29708 + C29709) * C378 -
             (C29710 + C29711) * C50790) *
                C50852 * C51024 +
            ((C29709 + C29708) * C377 + (C29711 + C29710) * C50983 -
             (C25637 * C3449 + C50693 * C3452 + C25636 * C3450 +
              C25631 * C3453) *
                 C378 -
             (C25637 * C3455 + C50693 * C3458 + C25636 * C3456 +
              C25631 * C3459) *
                 C50790) *
                C50852 * C38335) *
               C50764) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C1511 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C1509 -
             (C28946 + C28947) * C1512 - (C28948 + C28949) * C50790) *
                C50852 * C51030 +
            ((C28947 + C28946) * C1511 + (C28949 + C28948) * C1509 -
             (C29701 + C29700) * C1512 - (C29703 + C29702) * C50790) *
                C50852 * C51024 +
            (C39177 * C1511 + C39178 * C1509 - C39437 * C1512 -
             C39438 * C50790) *
                C50852 * C38335) *
               C1169 +
           ((C29478 * C1512 -
             ((C25836 + C25835) * C1509 + (C25834 + C25833) * C1511) +
             C29479 * C50790) *
                C50852 * C51030 +
            (C29906 * C1512 - (C29477 * C1509 + C29476 * C1511) +
             C29907 * C50790) *
                C50852 * C51024 +
            ((C29918 + C29919) * C1512 - (C29909 * C1509 + C29908 * C1511) +
             (C29920 + C29921) * C50790) *
                C50852 * C38335) *
               C50764) *
              C50974 +
          ((((C28950 + C28951) * C1512 -
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C1509 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C1511) +
             (C28952 + C28953) * C50790) *
                C50852 * C51030 +
            ((C29705 + C29704) * C1512 -
             ((C28953 + C28952) * C1509 + (C28951 + C28950) * C1511) +
             (C29707 + C29706) * C50790) *
                C50852 * C51024 +
            ((C39190 + C39189) * C1512 - (C39180 * C1509 + C39179 * C1511) +
             (C39192 + C39191) * C50790) *
                C50852 * C38335) *
               C1169 +
           (((C25841 + C25842) * C1511 + (C25843 + C25844) * C1509 -
             C30713 * C1512 - C30712 * C50790) *
                C50852 * C51030 +
            (C30710 * C1511 + C30711 * C1509 - (C29708 + C29709) * C1512 -
             (C29710 + C29711) * C50790) *
                C50852 * C51024 +
            ((C29709 + C29708) * C1511 + (C29711 + C29710) * C1509 -
             (C25637 * C3449 + C50693 * C3452 + C25636 * C3450 +
              C25631 * C3453) *
                 C1512 -
             (C25637 * C3455 + C50693 * C3458 + C25636 * C3456 +
              C25631 * C3459) *
                 C50790) *
                C50852 * C38335) *
               C50764) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C1511 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C1509 -
            (C28946 + C28947) * C1512 - (C28948 + C28949) * C50790) *
               C50852 * C51030 +
           ((C28947 + C28946) * C1511 + (C28949 + C28948) * C1509 -
            (C29701 + C29700) * C1512 - (C29703 + C29702) * C50790) *
               C50852 * C51024 +
           (C39177 * C1511 + C39178 * C1509 - C39437 * C1512 -
            C39438 * C50790) *
               C50852 * C38335) *
              C51027 +
          ((C29478 * C1512 -
            ((C25836 + C25835) * C1509 + (C25834 + C25833) * C1511) +
            C29479 * C50790) *
               C50852 * C51030 +
           (C29906 * C1512 - (C29477 * C1509 + C29476 * C1511) +
            C29907 * C50790) *
               C50852 * C51024 +
           ((C29918 + C29919) * C1512 - (C29909 * C1509 + C29908 * C1511) +
            (C29920 + C29921) * C50790) *
               C50852 * C38335) *
              C51015 +
          (C28245 * C50852 * C51030 +
           (C29480 * C1511 + C29481 * C1509 - (C26802 + C26801) * C1512 -
            (C26804 + C26803) * C50790) *
               C50852 * C51024 +
           ((C26801 + C26802) * C1511 + (C26803 + C26804) * C1509 -
            (C25637 * C9080 + C50693 * C9082 + C25636 * C9081 +
             C25631 * C9083) *
                C1512 -
            (C25637 * C9084 + C50693 * C9086 + C25636 * C9085 +
             C25631 * C9087) *
                C50790) *
               C50852 * C38335) *
              C1274) *
         C50716) /
        (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C1744 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C51028 -
            (C28946 + C28947) * C1745 - (C28948 + C28949) * C51018 +
            C39177 * C1746 + C39178 * C1743) *
               C50852 * C51030 +
           ((C28947 + C28946) * C1744 + (C28949 + C28948) * C51028 -
            (C29701 + C29700) * C1745 - (C29703 + C29702) * C51018 +
            (C30061 + C30060) * C1746 + (C30063 + C30062) * C1743) *
               C50852 * C51024 +
           (C39177 * C1744 + C39178 * C51028 - C39437 * C1745 -
            C39438 * C51018 + (C39448 + C39447) * C1746 +
            (C39450 + C39449) * C1743) *
               C50852 * C38335) *
              C1169 +
          ((C29478 * C1745 -
            ((C25836 + C25835) * C51028 + (C25834 + C25833) * C1744) +
            C29479 * C51018 - C29908 * C1746 - C29909 * C1743) *
               C50852 * C51030 +
           (C29906 * C1745 - (C29477 * C51028 + C29476 * C1744) +
            C29907 * C51018 - (C29919 + C29918) * C1746 -
            (C29921 + C29920) * C1743) *
               C50852 * C51024 +
           ((C29918 + C29919) * C1745 - (C29909 * C51028 + C29908 * C1744) +
            (C29920 + C29921) * C51018 -
            (C25637 * C16603 + C50693 * C16604 + C25636 * C13913 +
             C25631 * C13915) *
                C1746 -
            (C25637 * C16605 + C50693 * C16606 + C25636 * C13916 +
             C25631 * C13919) *
                C1743) *
               C50852 * C38335) *
              C50764) *
         C50716) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C50852 * C51030 +
            ((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50852 *
                C51024 +
            ((C29700 + C29701) * C121 + (C29702 + C29703) * C50778) * C50852 *
                C38335) *
               C501 -
           ((C29909 * C50778 + C29908 * C121) * C50852 * C38335 +
            (C29477 * C50778 + C29476 * C121) * C50852 * C51024 +
            ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C50852 *
                C51030) *
               C502 +
           (C26181 * C50852 * C51030 +
            (C29480 * C121 + C29481 * C50778) * C50852 * C51024 +
            ((C26801 + C26802) * C121 + (C26803 + C26804) * C50778) * C50852 *
                C38335) *
               C503) *
              C50974 +
          ((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C50852 *
                C51030 +
            (C30710 * C121 + C30711 * C50778) * C50852 * C51024 +
            ((C29709 + C29708) * C121 + (C29711 + C29710) * C50778) * C50852 *
                C38335) *
               C502 -
           (((C29706 + C29707) * C50778 + (C29704 + C29705) * C121) * C50852 *
                C38335 +
            ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C50852 *
                C51024 +
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50778 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C121) *
                C50852 * C51030) *
               C501 -
           (((C25637 * C3327 + C50693 * C3330 + C25636 * C3328 +
              C25631 * C3331) *
                 C50778 +
             (C25637 * C3321 + C50693 * C3324 + C25636 * C3322 +
              C25631 * C3325) *
                 C121) *
                C50852 * C38335 +
            ((C27412 + C27411) * C50778 + (C27410 + C27409) * C121) * C50852 *
                C51024 +
            C26182 * C50852 * C51030) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C121 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C50778) *
               C50852 * C51030 +
           ((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50852 *
               C51024 +
           ((C29700 + C29701) * C121 + (C29702 + C29703) * C50778) * C50852 *
               C38335) *
              C50748 * C113 -
          (((C29706 + C29707) * C50778 + (C29704 + C29705) * C121) * C50852 *
               C38335 +
           ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C50852 *
               C51024 +
           ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                C50778 +
            (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                C121) *
               C50852 * C51030) *
              C50748 * C114 +
          (((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                C121 +
            (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                C50778) *
               C50852 * C51030 +
           ((C28955 + C28954) * C121 + (C28957 + C28956) * C50778) * C50852 *
               C51024 +
           ((C25636 * C849 + C25631 * C854 + C25637 * C850 + C50693 * C855) *
                C121 +
            (C25636 * C858 + C25631 * C864 + C25637 * C859 + C50693 * C865) *
                C50778) *
               C50852 * C38335) *
              C50748 * C115 -
          (((C25637 * C861 + C50693 * C866 + C25636 * C859 + C25631 * C865) *
                C50778 +
            (C25637 * C851 + C50693 * C860 + C25636 * C850 + C25631 * C855) *
                C121) *
               C50852 * C38335 +
           ((C25637 * C394 + C50693 * C401 + C25636 * C389 + C25631 * C397) *
                C50778 +
            (C25637 * C383 + C50693 * C393 + C25636 * C379 + C25631 * C385) *
                C121) *
               C50852 * C51024 +
           ((C25637 * C137 + C50693 * C147 + C25636 * C136 + C25631 * C146) *
                C50778 +
            (C25637 * C126 + C50693 * C138 + C25636 * C125 + C25631 * C132) *
                C121) *
               C50852 * C51030) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C844 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C841 -
            (C28946 + C28947) * C845 - (C28948 + C28949) * C842 +
            C39177 * C846 + C39178 * C843) *
               C50852 * C51030 +
           ((C28947 + C28946) * C844 + (C28949 + C28948) * C841 -
            (C29701 + C29700) * C845 - (C29703 + C29702) * C842 +
            (C30061 + C30060) * C846 + (C30063 + C30062) * C843) *
               C50852 * C51024 +
           (C39177 * C844 + C39178 * C841 - (C30060 + C30061) * C845 -
            (C30062 + C30063) * C842 +
            (C25636 * C6201 + C25631 * C6204 + C25637 * C6200 +
             C50693 * C6203) *
                C846 +
            (C25636 * C6207 + C25631 * C6210 + C25637 * C6206 +
             C50693 * C6209) *
                C843) *
               C50852 * C38335) *
              C50748 * C50974 +
          (((C28950 + C28951) * C845 -
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C841 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C844) +
            (C28952 + C28953) * C842 - C39179 * C846 - C39180 * C843) *
               C50852 * C51030 +
           ((C29705 + C29704) * C845 -
            ((C28953 + C28952) * C841 + (C28951 + C28950) * C844) +
            (C29707 + C29706) * C842 - (C39189 + C39190) * C846 -
            (C39191 + C39192) * C843) *
               C50852 * C51024 +
           ((C39190 + C39189) * C845 - (C39180 * C841 + C39179 * C844) +
            (C39192 + C39191) * C842 -
            (C25637 * C6199 + C50693 * C6202 + C25636 * C6200 +
             C25631 * C6203) *
                C846 -
            (C25637 * C6205 + C50693 * C6208 + C25636 * C6206 +
             C25631 * C6209) *
                C843) *
               C50852 * C38335) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C121 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C50778) *
               C50852 * C51030 +
           ((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50852 *
               C51024 +
           ((C29700 + C29701) * C121 + (C29702 + C29703) * C50778) * C50852 *
               C38335) *
              C592 -
          ((C29909 * C50778 + C29908 * C121) * C50852 * C38335 +
           (C29477 * C50778 + C29476 * C121) * C50852 * C51024 +
           ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C50852 *
               C51030) *
              C593 +
          (C26181 * C50852 * C51030 +
           (C29480 * C121 + C29481 * C50778) * C50852 * C51024 +
           ((C26801 + C26802) * C121 + (C26803 + C26804) * C50778) * C50852 *
               C38335) *
              C594 -
          (((C25637 * C8954 + C50693 * C8956 + C25636 * C8955 +
             C25631 * C8957) *
                C50778 +
            (C25637 * C8950 + C50693 * C8952 + C25636 * C8951 +
             C25631 * C8953) *
                C121) *
               C50852 * C38335 +
           ((C26482 + C26481) * C50778 + (C26480 + C26479) * C121) * C50852 *
               C51024 +
           C26297 * C50852 * C51030) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C50852 * C51030 +
            ((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50852 *
                C51024 +
            ((C29700 + C29701) * C121 + (C29702 + C29703) * C50778) * C50852 *
                C38335) *
               C50981 -
           ((C29909 * C50778 + C29908 * C121) * C50852 * C38335 +
            (C29477 * C50778 + C29476 * C121) * C50852 * C51024 +
            ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C50852 *
                C51030) *
               C50764) *
              C250 +
          ((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C50852 *
                C51030 +
            (C30710 * C121 + C30711 * C50778) * C50852 * C51024 +
            ((C29709 + C29708) * C121 + (C29711 + C29710) * C50778) * C50852 *
                C38335) *
               C50764 -
           (((C29706 + C29707) * C50778 + (C29704 + C29705) * C121) * C50852 *
                C38335 +
            ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C50852 *
                C51024 +
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50778 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C121) *
                C50852 * C51030) *
               C50981) *
              C251 +
          ((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                 C121 +
             (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                 C50778) *
                C50852 * C51030 +
            ((C28955 + C28954) * C121 + (C28957 + C28956) * C50778) * C50852 *
                C51024 +
            ((C25636 * C849 + C25631 * C854 + C25637 * C850 + C50693 * C855) *
                 C121 +
             (C25636 * C858 + C25631 * C864 + C25637 * C859 + C50693 * C865) *
                 C50778) *
                C50852 * C38335) *
               C50981 -
           (((C25637 * C973 + C50693 * C977 + C25636 * C974 + C25631 * C978) *
                 C50778 +
             (C25637 * C965 + C50693 * C969 + C25636 * C966 + C25631 * C970) *
                 C121) *
                C50852 * C38335 +
            ((C28727 + C28726) * C50778 + (C28725 + C28724) * C121) * C50852 *
                C51024 +
            ((C25852 + C25851) * C50778 + (C25850 + C25849) * C121) * C50852 *
                C51030) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C844 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C841 -
            (C28946 + C28947) * C845 - (C28948 + C28949) * C842 +
            C39177 * C846 + C39178 * C843) *
               C50852 * C51030 +
           ((C28947 + C28946) * C844 + (C28949 + C28948) * C841 -
            (C29701 + C29700) * C845 - (C29703 + C29702) * C842 +
            (C30061 + C30060) * C846 + (C30063 + C30062) * C843) *
               C50852 * C51024 +
           (C39177 * C844 + C39178 * C841 - (C30060 + C30061) * C845 -
            (C30062 + C30063) * C842 +
            (C25636 * C6201 + C25631 * C6204 + C25637 * C6200 +
             C50693 * C6203) *
                C846 +
            (C25636 * C6207 + C25631 * C6210 + C25637 * C6206 +
             C50693 * C6209) *
                C843) *
               C50852 * C38335) *
              C50981 +
          ((C29478 * C845 -
            ((C25836 + C25835) * C841 + (C25834 + C25833) * C844) +
            C29479 * C842 - C29908 * C846 - C29909 * C843) *
               C50852 * C51030 +
           (C29906 * C845 - (C29477 * C841 + C29476 * C844) + C29907 * C842 -
            (C29919 + C29918) * C846 - (C29921 + C29920) * C843) *
               C50852 * C51024 +
           ((C29918 + C29919) * C845 - (C29909 * C841 + C29908 * C844) +
            (C29920 + C29921) * C842 -
            (C25637 * C16603 + C50693 * C16604 + C25636 * C13913 +
             C25631 * C13915) *
                C846 -
            (C25637 * C16605 + C50693 * C16606 + C25636 * C13916 +
             C25631 * C13919) *
                C843) *
               C50852 * C38335) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C377 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C50983 -
            (C28946 + C28947) * C378 - (C28948 + C28949) * C50790) *
               C50852 * C51030 +
           ((C28947 + C28946) * C377 + (C28949 + C28948) * C50983 -
            (C29701 + C29700) * C378 - (C29703 + C29702) * C50790) *
               C50852 * C51024 +
           ((C29700 + C29701) * C377 + (C29702 + C29703) * C50983 -
            (C30060 + C30061) * C378 - (C30062 + C30063) * C50790) *
               C50852 * C38335) *
              C501 +
          ((C29478 * C378 -
            ((C25836 + C25835) * C50983 + (C25834 + C25833) * C377) +
            C29479 * C50790) *
               C50852 * C51030 +
           (C29906 * C378 - (C29477 * C50983 + C29476 * C377) +
            C29907 * C50790) *
               C50852 * C51024 +
           ((C29918 + C29919) * C378 - (C29909 * C50983 + C29908 * C377) +
            (C29920 + C29921) * C50790) *
               C50852 * C38335) *
              C502 +
          (C26488 * C50852 * C51030 +
           (C29480 * C377 + C29481 * C50983 - (C26802 + C26801) * C378 -
            (C26804 + C26803) * C50790) *
               C50852 * C51024 +
           ((C26801 + C26802) * C377 + (C26803 + C26804) * C50983 -
            (C25637 * C9080 + C50693 * C9082 + C25636 * C9081 +
             C25631 * C9083) *
                C378 -
            (C25637 * C9084 + C50693 * C9086 + C25636 * C9085 +
             C25631 * C9087) *
                C50790) *
               C50852 * C38335) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C377 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C50983 -
            (C28946 + C28947) * C378 - (C28948 + C28949) * C50790) *
               C50852 * C51030 +
           ((C28947 + C28946) * C377 + (C28949 + C28948) * C50983 -
            (C29701 + C29700) * C378 - (C29703 + C29702) * C50790) *
               C50852 * C51024 +
           ((C29700 + C29701) * C377 + (C29702 + C29703) * C50983 -
            (C30060 + C30061) * C378 - (C30062 + C30063) * C50790) *
               C50852 * C38335) *
              C50748 * C250 +
          (((C28950 + C28951) * C378 -
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50983 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C377) +
            (C28952 + C28953) * C50790) *
               C50852 * C51030 +
           ((C29705 + C29704) * C378 -
            ((C28953 + C28952) * C50983 + (C28951 + C28950) * C377) +
            (C29707 + C29706) * C50790) *
               C50852 * C51024 +
           ((C25636 * C1057 + C25631 * C1061 + C25637 * C1056 +
             C50693 * C1060) *
                C378 -
            ((C29706 + C29707) * C50983 + (C29704 + C29705) * C377) +
            (C25636 * C1065 + C25631 * C1069 + C25637 * C1064 +
             C50693 * C1068) *
                C50790) *
               C50852 * C38335) *
              C50748 * C251 +
          (((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                C377 +
            (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                C50983 -
            (C28954 + C28955) * C378 - (C28956 + C28957) * C50790) *
               C50852 * C51030 +
           ((C28955 + C28954) * C377 + (C28957 + C28956) * C50983 -
            (C38637 + C38638) * C378 - (C38639 + C38640) * C50790) *
               C50852 * C51024 +
           ((C38638 + C38637) * C377 + (C38640 + C38639) * C50983 -
            (C25637 * C1055 + C50693 * C1059 + C25636 * C1056 +
             C25631 * C1060) *
                C378 -
            (C25637 * C1063 + C50693 * C1067 + C25636 * C1064 +
             C25631 * C1068) *
                C50790) *
               C50852 * C38335) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
               C1051 +
           (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
               C1047 -
           (C28946 + C28947) * C1052 - (C28948 + C28949) * C1048 +
           C39177 * C1053 + C39178 * C1049 - C39437 * C1054 - C39438 * C1050) *
              C50852 * C51030 +
          ((C28947 + C28946) * C1051 + (C28949 + C28948) * C1047 -
           (C29701 + C29700) * C1052 - (C29703 + C29702) * C1048 +
           (C30061 + C30060) * C1053 + (C30063 + C30062) * C1049 -
           (C39447 + C39448) * C1054 - (C39449 + C39450) * C1050) *
              C50852 * C51024 +
          (C39177 * C1051 + C39178 * C1047 - C39437 * C1052 - C39438 * C1048 +
           (C39448 + C39447) * C1053 + (C39450 + C39449) * C1049 -
           (C25637 * C16719 + C50693 * C16721 + C25636 * C16720 +
            C25631 * C16722) *
               C1054 -
           (C25637 * C16723 + C50693 * C16725 + C25636 * C16724 +
            C25631 * C16726) *
               C1050) *
              C50852 * C38335) *
         C50748 * C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C1511 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C1509 -
            (C28946 + C28947) * C1512 - (C28948 + C28949) * C50790) *
               C50852 * C51030 +
           ((C28947 + C28946) * C1511 + (C28949 + C28948) * C1509 -
            (C29701 + C29700) * C1512 - (C29703 + C29702) * C50790) *
               C50852 * C51024 +
           (C39177 * C1511 + C39178 * C1509 - C39437 * C1512 -
            C39438 * C50790) *
               C50852 * C38335) *
              C50748 * C51026 +
          (((C28950 + C28951) * C1512 -
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C1509 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C1511) +
            (C28952 + C28953) * C50790) *
               C50852 * C51030 +
           ((C29705 + C29704) * C1512 -
            ((C28953 + C28952) * C1509 + (C28951 + C28950) * C1511) +
            (C29707 + C29706) * C50790) *
               C50852 * C51024 +
           ((C39190 + C39189) * C1512 - (C39180 * C1509 + C39179 * C1511) +
            (C39192 + C39191) * C50790) *
               C50852 * C38335) *
              C50748 * C51012 +
          (((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                C1511 +
            (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                C1509 -
            (C28954 + C28955) * C1512 - (C28956 + C28957) * C50790) *
               C50852 * C51030 +
           ((C28955 + C28954) * C1511 + (C28957 + C28956) * C1509 -
            (C38637 + C38638) * C1512 - (C38639 + C38640) * C50790) *
               C50852 * C51024 +
           ((C38638 + C38637) * C1511 + (C38640 + C38639) * C1509 -
            (C25637 * C1055 + C50693 * C1059 + C25636 * C1056 +
             C25631 * C1060) *
                C1512 -
            (C25637 * C1063 + C50693 * C1067 + C25636 * C1064 +
             C25631 * C1068) *
                C50790) *
               C50852 * C38335) *
              C50748 * C1173)) /
        (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C1511 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C1509 -
             (C28946 + C28947) * C1512 - (C28948 + C28949) * C50790) *
                C50852 * C51030 +
            ((C28947 + C28946) * C1511 + (C28949 + C28948) * C1509 -
             (C29701 + C29700) * C1512 - (C29703 + C29702) * C50790) *
                C50852 * C51024 +
            (C39177 * C1511 + C39178 * C1509 - C39437 * C1512 -
             C39438 * C50790) *
                C50852 * C38335) *
               C50981 +
           ((C29478 * C1512 -
             ((C25836 + C25835) * C1509 + (C25834 + C25833) * C1511) +
             C29479 * C50790) *
                C50852 * C51030 +
            (C29906 * C1512 - (C29477 * C1509 + C29476 * C1511) +
             C29907 * C50790) *
                C50852 * C51024 +
            ((C29918 + C29919) * C1512 - (C29909 * C1509 + C29908 * C1511) +
             (C29920 + C29921) * C50790) *
                C50852 * C38335) *
               C50764) *
              C1275 +
          ((((C28950 + C28951) * C1512 -
             ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                  C1509 +
              (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                  C1511) +
             (C28952 + C28953) * C50790) *
                C50852 * C51030 +
            ((C29705 + C29704) * C1512 -
             ((C28953 + C28952) * C1509 + (C28951 + C28950) * C1511) +
             (C29707 + C29706) * C50790) *
                C50852 * C51024 +
            ((C39190 + C39189) * C1512 - (C39180 * C1509 + C39179 * C1511) +
             (C39192 + C39191) * C50790) *
                C50852 * C38335) *
               C50981 +
           (((C25841 + C25842) * C1511 + (C25843 + C25844) * C1509 -
             C30713 * C1512 - C30712 * C50790) *
                C50852 * C51030 +
            (C30710 * C1511 + C30711 * C1509 - (C29708 + C29709) * C1512 -
             (C29710 + C29711) * C50790) *
                C50852 * C51024 +
            ((C29709 + C29708) * C1511 + (C29711 + C29710) * C1509 -
             (C25637 * C3449 + C50693 * C3452 + C25636 * C3450 +
              C25631 * C3453) *
                 C1512 -
             (C25637 * C3455 + C50693 * C3458 + C25636 * C3456 +
              C25631 * C3459) *
                 C50790) *
                C50852 * C38335) *
               C50764) *
              C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C1744 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C51028 -
            (C28946 + C28947) * C1745 - (C28948 + C28949) * C51018 +
            C39177 * C1746 + C39178 * C1743) *
               C50852 * C51030 +
           ((C28947 + C28946) * C1744 + (C28949 + C28948) * C51028 -
            (C29701 + C29700) * C1745 - (C29703 + C29702) * C51018 +
            (C30061 + C30060) * C1746 + (C30063 + C30062) * C1743) *
               C50852 * C51024 +
           (C39177 * C1744 + C39178 * C51028 - C39437 * C1745 -
            C39438 * C51018 + (C39448 + C39447) * C1746 +
            (C39450 + C39449) * C1743) *
               C50852 * C38335) *
              C50748 * C1275 +
          (((C28950 + C28951) * C1745 -
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C51028 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C1744) +
            (C28952 + C28953) * C51018 - C39179 * C1746 - C39180 * C1743) *
               C50852 * C51030 +
           ((C29705 + C29704) * C1745 -
            ((C28953 + C28952) * C51028 + (C28951 + C28950) * C1744) +
            (C29707 + C29706) * C51018 - (C39189 + C39190) * C1746 -
            (C39191 + C39192) * C1743) *
               C50852 * C51024 +
           ((C39190 + C39189) * C1745 - (C39180 * C51028 + C39179 * C1744) +
            (C39192 + C39191) * C51018 -
            (C25637 * C6199 + C50693 * C6202 + C25636 * C6200 +
             C25631 * C6203) *
                C1746 -
            (C25637 * C6205 + C50693 * C6208 + C25636 * C6206 +
             C25631 * C6209) *
                C1743) *
               C50852 * C38335) *
              C50748 * C50721)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C121 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C50778) *
               C50852 * C51030 +
           ((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50852 *
               C51024 +
           ((C29700 + C29701) * C121 + (C29702 + C29703) * C50778) * C50852 *
               C38335) *
              C50748 * C113 -
          (((C29706 + C29707) * C50778 + (C29704 + C29705) * C121) * C50852 *
               C38335 +
           ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C50852 *
               C51024 +
           ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                C50778 +
            (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                C121) *
               C50852 * C51030) *
              C50748 * C114 +
          (((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                C121 +
            (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                C50778) *
               C50852 * C51030 +
           ((C28955 + C28954) * C121 + (C28957 + C28956) * C50778) * C50852 *
               C51024 +
           ((C25636 * C849 + C25631 * C854 + C25637 * C850 + C50693 * C855) *
                C121 +
            (C25636 * C858 + C25631 * C864 + C25637 * C859 + C50693 * C865) *
                C50778) *
               C50852 * C38335) *
              C50748 * C115 -
          (((C25637 * C861 + C50693 * C866 + C25636 * C859 + C25631 * C865) *
                C50778 +
            (C25637 * C851 + C50693 * C860 + C25636 * C850 + C25631 * C855) *
                C121) *
               C50852 * C38335 +
           ((C25637 * C394 + C50693 * C401 + C25636 * C389 + C25631 * C397) *
                C50778 +
            (C25637 * C383 + C50693 * C393 + C25636 * C379 + C25631 * C385) *
                C121) *
               C50852 * C51024 +
           ((C25637 * C137 + C50693 * C147 + C25636 * C136 + C25631 * C146) *
                C50778 +
            (C25637 * C126 + C50693 * C138 + C25636 * C125 + C25631 * C132) *
                C121) *
               C50852 * C51030) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C50852 * C51030 +
            ((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50852 *
                C51024 +
            ((C29700 + C29701) * C121 + (C29702 + C29703) * C50778) * C50852 *
                C38335) *
               C501 -
           ((C29909 * C50778 + C29908 * C121) * C50852 * C38335 +
            (C29477 * C50778 + C29476 * C121) * C50852 * C51024 +
            ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C50852 *
                C51030) *
               C502 +
           (C26181 * C50852 * C51030 +
            (C29480 * C121 + C29481 * C50778) * C50852 * C51024 +
            ((C26801 + C26802) * C121 + (C26803 + C26804) * C50778) * C50852 *
                C38335) *
               C503) *
              C50974 +
          ((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C50852 *
                C51030 +
            (C30710 * C121 + C30711 * C50778) * C50852 * C51024 +
            ((C29709 + C29708) * C121 + (C29711 + C29710) * C50778) * C50852 *
                C38335) *
               C502 -
           (((C29706 + C29707) * C50778 + (C29704 + C29705) * C121) * C50852 *
                C38335 +
            ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C50852 *
                C51024 +
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50778 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C121) *
                C50852 * C51030) *
               C501 -
           (((C25637 * C3327 + C50693 * C3330 + C25636 * C3328 +
              C25631 * C3331) *
                 C50778 +
             (C25637 * C3321 + C50693 * C3324 + C25636 * C3322 +
              C25631 * C3325) *
                 C121) *
                C50852 * C38335 +
            ((C27412 + C27411) * C50778 + (C27410 + C27409) * C121) * C50852 *
                C51024 +
            C26182 * C50852 * C51030) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                 C121 +
             (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                 C50778) *
                C50852 * C51030 +
            ((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50852 *
                C51024 +
            ((C29700 + C29701) * C121 + (C29702 + C29703) * C50778) * C50852 *
                C38335) *
               C50981 -
           ((C29909 * C50778 + C29908 * C121) * C50852 * C38335 +
            (C29477 * C50778 + C29476 * C121) * C50852 * C51024 +
            ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C50852 *
                C51030) *
               C50764) *
              C250 +
          ((((C25841 + C25842) * C121 + (C25843 + C25844) * C50778) * C50852 *
                C51030 +
            (C30710 * C121 + C30711 * C50778) * C50852 * C51024 +
            ((C29709 + C29708) * C121 + (C29711 + C29710) * C50778) * C50852 *
                C38335) *
               C50764 -
           (((C29706 + C29707) * C50778 + (C29704 + C29705) * C121) * C50852 *
                C38335 +
            ((C28953 + C28952) * C50778 + (C28951 + C28950) * C121) * C50852 *
                C51024 +
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50778 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C121) *
                C50852 * C51030) *
               C50981) *
              C251 +
          ((((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                 C121 +
             (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                 C50778) *
                C50852 * C51030 +
            ((C28955 + C28954) * C121 + (C28957 + C28956) * C50778) * C50852 *
                C51024 +
            ((C25636 * C849 + C25631 * C854 + C25637 * C850 + C50693 * C855) *
                 C121 +
             (C25636 * C858 + C25631 * C864 + C25637 * C859 + C50693 * C865) *
                 C50778) *
                C50852 * C38335) *
               C50981 -
           (((C25637 * C973 + C50693 * C977 + C25636 * C974 + C25631 * C978) *
                 C50778 +
             (C25637 * C965 + C50693 * C969 + C25636 * C966 + C25631 * C970) *
                 C121) *
                C50852 * C38335 +
            ((C28727 + C28726) * C50778 + (C28725 + C28724) * C121) * C50852 *
                C51024 +
            ((C25852 + C25851) * C50778 + (C25850 + C25849) * C121) * C50852 *
                C51030) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C121 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C50778) *
               C50852 * C51030 +
           ((C28947 + C28946) * C121 + (C28949 + C28948) * C50778) * C50852 *
               C51024 +
           ((C29700 + C29701) * C121 + (C29702 + C29703) * C50778) * C50852 *
               C38335) *
              C592 -
          ((C29909 * C50778 + C29908 * C121) * C50852 * C38335 +
           (C29477 * C50778 + C29476 * C121) * C50852 * C51024 +
           ((C25836 + C25835) * C50778 + (C25834 + C25833) * C121) * C50852 *
               C51030) *
              C593 +
          (C26181 * C50852 * C51030 +
           (C29480 * C121 + C29481 * C50778) * C50852 * C51024 +
           ((C26801 + C26802) * C121 + (C26803 + C26804) * C50778) * C50852 *
               C38335) *
              C594 -
          (((C25637 * C8954 + C50693 * C8956 + C25636 * C8955 +
             C25631 * C8957) *
                C50778 +
            (C25637 * C8950 + C50693 * C8952 + C25636 * C8951 +
             C25631 * C8953) *
                C121) *
               C50852 * C38335 +
           ((C26482 + C26481) * C50778 + (C26480 + C26479) * C121) * C50852 *
               C51024 +
           C26297 * C50852 * C51030) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C377 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C50983 -
            (C28946 + C28947) * C378 - (C28948 + C28949) * C50790) *
               C50852 * C51030 +
           ((C28947 + C28946) * C377 + (C28949 + C28948) * C50983 -
            (C29701 + C29700) * C378 - (C29703 + C29702) * C50790) *
               C50852 * C51024 +
           ((C29700 + C29701) * C377 + (C29702 + C29703) * C50983 -
            (C30060 + C30061) * C378 - (C30062 + C30063) * C50790) *
               C50852 * C38335) *
              C50748 * C250 +
          (((C28950 + C28951) * C378 -
            ((C25637 * C135 + C50693 * C145 + C25636 * C134 + C25631 * C144) *
                 C50983 +
             (C25637 * C124 + C50693 * C131 + C25636 * C123 + C25631 * C130) *
                 C377) +
            (C28952 + C28953) * C50790) *
               C50852 * C51030 +
           ((C29705 + C29704) * C378 -
            ((C28953 + C28952) * C50983 + (C28951 + C28950) * C377) +
            (C29707 + C29706) * C50790) *
               C50852 * C51024 +
           ((C25636 * C1057 + C25631 * C1061 + C25637 * C1056 +
             C50693 * C1060) *
                C378 -
            ((C29706 + C29707) * C50983 + (C29704 + C29705) * C377) +
            (C25636 * C1065 + C25631 * C1069 + C25637 * C1064 +
             C50693 * C1068) *
                C50790) *
               C50852 * C38335) *
              C50748 * C251 +
          (((C25636 * C124 + C25631 * C131 + C25637 * C125 + C50693 * C132) *
                C377 +
            (C25636 * C135 + C25631 * C145 + C25637 * C136 + C50693 * C146) *
                C50983 -
            (C28954 + C28955) * C378 - (C28956 + C28957) * C50790) *
               C50852 * C51030 +
           ((C28955 + C28954) * C377 + (C28957 + C28956) * C50983 -
            (C38637 + C38638) * C378 - (C38639 + C38640) * C50790) *
               C50852 * C51024 +
           ((C38638 + C38637) * C377 + (C38640 + C38639) * C50983 -
            (C25637 * C1055 + C50693 * C1059 + C25636 * C1056 +
             C25631 * C1060) *
                C378 -
            (C25637 * C1063 + C50693 * C1067 + C25636 * C1064 +
             C25631 * C1068) *
                C50790) *
               C50852 * C38335) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C25636 * C122 + C25631 * C129 + C25637 * C123 + C50693 * C130) *
                C377 +
            (C25636 * C133 + C25631 * C143 + C25637 * C134 + C50693 * C144) *
                C50983 -
            (C28946 + C28947) * C378 - (C28948 + C28949) * C50790) *
               C50852 * C51030 +
           ((C28947 + C28946) * C377 + (C28949 + C28948) * C50983 -
            (C29701 + C29700) * C378 - (C29703 + C29702) * C50790) *
               C50852 * C51024 +
           ((C29700 + C29701) * C377 + (C29702 + C29703) * C50983 -
            (C30060 + C30061) * C378 - (C30062 + C30063) * C50790) *
               C50852 * C38335) *
              C501 +
          ((C29478 * C378 -
            ((C25836 + C25835) * C50983 + (C25834 + C25833) * C377) +
            C29479 * C50790) *
               C50852 * C51030 +
           (C29906 * C378 - (C29477 * C50983 + C29476 * C377) +
            C29907 * C50790) *
               C50852 * C51024 +
           ((C29918 + C29919) * C378 - (C29909 * C50983 + C29908 * C377) +
            (C29920 + C29921) * C50790) *
               C50852 * C38335) *
              C502 +
          (C26488 * C50852 * C51030 +
           (C29480 * C377 + C29481 * C50983 - (C26802 + C26801) * C378 -
            (C26804 + C26803) * C50790) *
               C50852 * C51024 +
           ((C26801 + C26802) * C377 + (C26803 + C26804) * C50983 -
            (C25637 * C9080 + C50693 * C9082 + C25636 * C9081 +
             C25631 * C9083) *
                C378 -
            (C25637 * C9084 + C50693 * C9086 + C25636 * C9085 +
             C25631 * C9087) *
                C50790) *
               C50852 * C38335) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50778) *
               C50852 * C50878 * C1169 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C50778 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C121) *
               C50852 * C50878 * C50764) *
              C51026 +
          (((C117 * C255 + C105 * C265 + C118 * C254 + C106 * C264 +
             C119 * C253 + C107 * C263 + C120 * C257 + C108 * C267) *
                C121 +
            (C117 * C261 + C105 * C273 + C118 * C260 + C106 * C272 +
             C119 * C259 + C107 * C271 + C120 * C268 + C108 * C275) *
                C50778) *
               C50852 * C50878 * C50764 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50778 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50852 * C50878 * C1169) *
              C51012 +
          (((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50778) *
               C50852 * C50878 * C1169 -
           ((C120 * C269 + C108 * C276 + C119 * C268 + C107 * C275 +
             C118 * C259 + C106 * C271 + C117 * C260 + C105 * C272) *
                C50778 +
            (C120 * C258 + C108 * C270 + C119 * C257 + C107 * C267 +
             C118 * C253 + C106 * C263 + C117 * C254 + C105 * C264) *
                C121) *
               C50852 * C50878 * C50764) *
              C1173)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C7787 +
            ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C7788 +
            C8335 * C7789) *
               C50878 * C1169 -
           (C8459 * C7789 +
            ((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C7788 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C7787) *
               C50878 * C50764) *
              C51026 +
          ((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C7787 +
            ((C7999 + C8000) * C121 + (C8001 + C8002) * C50778) * C7788 +
            ((C8329 + C8330) * C121 + (C8331 + C8332) * C50778) * C7789) *
               C50878 * C50764 -
           (C8336 * C7789 +
            ((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C7788 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C7787) *
               C50878 * C1169) *
              C51012 +
          ((((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                 C121 +
             (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                 C50778) *
                C7787 +
            ((C8003 + C8004) * C121 + (C8005 + C8006) * C50778) * C7788 +
            ((C8007 + C8008) * C121 + (C8009 + C8010) * C50778) * C7789) *
               C50878 * C1169 -
           (((C49711 * C601 + C50693 * C609 + C49718 * C602 + C50967 * C610) *
                 C50778 +
             (C49711 * C597 + C50693 * C605 + C49718 * C598 + C50967 * C606) *
                 C121) *
                C7789 +
            ((C8010 + C8009) * C50778 + (C8008 + C8007) * C121) * C7788 +
            ((C8006 + C8005) * C50778 + (C8004 + C8003) * C121) * C7787) *
               C50878 * C50764) *
              C1173)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50778) *
               C50852 * C50878 * C51027 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C50778 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C121) *
               C50852 * C50878 * C51015 +
           ((C117 * C506 + C105 * C511 + C118 * C507 + C106 * C512 +
             C119 * C508 + C107 * C513 + C120 * C509 + C108 * C514) *
                C121 +
            (C117 * C515 + C105 * C521 + C118 * C516 + C106 * C522 +
             C119 * C517 + C107 * C523 + C120 * C518 + C108 * C524) *
                C50778) *
               C50852 * C50878 * C1274) *
              C1275 +
          (((C117 * C255 + C105 * C265 + C118 * C254 + C106 * C264 +
             C119 * C253 + C107 * C263 + C120 * C257 + C108 * C267) *
                C121 +
            (C117 * C261 + C105 * C273 + C118 * C260 + C106 * C272 +
             C119 * C259 + C107 * C271 + C120 * C268 + C108 * C275) *
                C50778) *
               C50852 * C50878 * C51015 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50778 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50852 * C50878 * C51027 -
           ((C120 * C519 + C108 * C525 + C119 * C518 + C107 * C524 +
             C118 * C517 + C106 * C523 + C117 * C516 + C105 * C522) *
                C50778 +
            (C120 * C510 + C108 * C520 + C119 * C509 + C107 * C514 +
             C118 * C508 + C106 * C513 + C117 * C507 + C105 * C512) *
                C121) *
               C50852 * C50878 * C1274) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C7787 +
            ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C7788 +
            C8335 * C7789) *
               C50878 * C51027 -
           (C8459 * C7789 +
            ((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C7788 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C7787) *
               C50878 * C51015 +
           (C8335 * C7787 +
            ((C8328 + C8327) * C121 + (C8326 + C8325) * C50778) * C7788 +
            ((C8455 + C8456) * C121 + (C8457 + C8458) * C50778) * C7789) *
               C50878 * C1274) *
              C1275 +
          ((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C7787 +
            ((C7999 + C8000) * C121 + (C8001 + C8002) * C50778) * C7788 +
            ((C8329 + C8330) * C121 + (C8331 + C8332) * C50778) * C7789) *
               C50878 * C51015 -
           (C8336 * C7789 +
            ((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C7788 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C7787) *
               C50878 * C51027 -
           (((C49711 * C2808 + C50693 * C2814 + C49718 * C2809 +
              C50967 * C2815) *
                 C50778 +
             (C49711 * C2805 + C50693 * C2811 + C49718 * C2806 +
              C50967 * C2812) *
                 C121) *
                C7789 +
            ((C8332 + C8331) * C50778 + (C8330 + C8329) * C121) * C7788 +
            C8336 * C7787) *
               C50878 * C1274) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C377 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50983 -
            (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
             C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
                C378 -
            (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
             C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
                C50790) *
               C50852 * C50878 * C1169 +
           ((C117 * C711 + C105 * C719 + C118 * C712 + C106 * C720 +
             C119 * C713 + C107 * C721 + C120 * C714 + C108 * C722) *
                C378 -
            ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
              C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                 C50983 +
             (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
              C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                 C377) +
            (C117 * C723 + C105 * C735 + C118 * C724 + C106 * C736 +
             C119 * C725 + C107 * C737 + C120 * C726 + C108 * C738) *
                C50790) *
               C50852 * C50878 * C50764) *
              C1275 +
          (((C117 * C381 + C105 * C387 + C118 * C380 + C106 * C386 +
             C119 * C379 + C107 * C385 + C120 * C383 + C108 * C393) *
                C378 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C50983 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C377) +
            (C117 * C391 + C105 * C399 + C118 * C390 + C106 * C398 +
             C119 * C389 + C107 * C397 + C120 * C394 + C108 * C401) *
                C50790) *
               C50852 * C50878 * C1169 +
           ((C117 * C255 + C105 * C265 + C118 * C254 + C106 * C264 +
             C119 * C253 + C107 * C263 + C120 * C257 + C108 * C267) *
                C377 +
            (C117 * C261 + C105 * C273 + C118 * C260 + C106 * C272 +
             C119 * C259 + C107 * C271 + C120 * C268 + C108 * C275) *
                C50983 -
            (C120 * C1407 + C108 * C1408 + C119 * C714 + C107 * C722 +
             C118 * C713 + C106 * C721 + C117 * C712 + C105 * C720) *
                C378 -
            (C120 * C1409 + C108 * C1410 + C119 * C726 + C107 * C738 +
             C118 * C725 + C106 * C737 + C117 * C724 + C105 * C736) *
                C50790) *
               C50852 * C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C377 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50983 -
             (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                 C378 -
             (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                 C50790) *
                C7787 +
            ((C7987 + C7988) * C377 + (C7989 + C7990) * C50983 -
             (C8640 + C8641) * C378 - (C8642 + C8643) * C50790) *
                C7788 +
            C8658 * C7789) *
               C50878 * C1169 +
           (((C8641 + C8640) * C378 -
             ((C7990 + C7989) * C50983 + (C7988 + C7987) * C377) +
             (C8643 + C8642) * C50790) *
                C7787 +
            ((C8646 + C8645) * C378 -
             ((C7994 + C7993) * C50983 + (C7992 + C7991) * C377) +
             (C8648 + C8647) * C50790) *
                C7788 +
            ((C8649 + C8650) * C378 - (C8443 * C50983 + C8444 * C377) +
             (C8651 + C8652) * C50790) *
                C7789) *
               C50878 * C50764) *
              C1275 +
          ((((C49718 * C381 + C50967 * C387 + C49711 * C380 + C50693 * C386) *
                 C378 -
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C50983 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C377) +
             (C49718 * C391 + C50967 * C399 + C49711 * C390 + C50693 * C398) *
                 C50790) *
                C7787 +
            ((C9591 + C9592) * C378 -
             ((C7998 + C7997) * C50983 + (C7996 + C7995) * C377) +
             (C9593 + C9594) * C50790) *
                C7788 +
            ((C9595 + C9596) * C378 - (C8321 * C50983 + C8322 * C377) +
             (C9597 + C9598) * C50790) *
                C7789) *
               C50878 * C1169 +
           (((C7995 + C7996) * C377 + (C7997 + C7998) * C50983 -
             (C9592 + C9591) * C378 - (C9594 + C9593) * C50790) *
                C7787 +
            ((C7999 + C8000) * C377 + (C8001 + C8002) * C50983 -
             (C9596 + C9595) * C378 - (C9598 + C9597) * C50790) *
                C7788 +
            ((C8329 + C8330) * C377 + (C8331 + C8332) * C50983 -
             (C49711 * C2981 + C50693 * C2984 + C49718 * C2982 +
              C50967 * C2985) *
                 C378 -
             (C49711 * C2987 + C50693 * C2990 + C49718 * C2988 +
              C50967 * C2991) *
                 C50790) *
                C7789) *
               C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C1511 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C1509 -
            (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
             C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
                C1512 -
            (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
             C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
                C50790) *
               C50852 * C50878 * C1169 +
           ((C117 * C711 + C105 * C719 + C118 * C712 + C106 * C720 +
             C119 * C713 + C107 * C721 + C120 * C714 + C108 * C722) *
                C1512 -
            ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
              C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                 C1509 +
             (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
              C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                 C1511) +
            (C117 * C723 + C105 * C735 + C118 * C724 + C106 * C736 +
             C119 * C725 + C107 * C737 + C120 * C726 + C108 * C738) *
                C50790) *
               C50852 * C50878 * C50764) *
              C50974 +
          (((C117 * C381 + C105 * C387 + C118 * C380 + C106 * C386 +
             C119 * C379 + C107 * C385 + C120 * C383 + C108 * C393) *
                C1512 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C1509 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C1511) +
            (C117 * C391 + C105 * C399 + C118 * C390 + C106 * C398 +
             C119 * C389 + C107 * C397 + C120 * C394 + C108 * C401) *
                C50790) *
               C50852 * C50878 * C1169 +
           ((C117 * C255 + C105 * C265 + C118 * C254 + C106 * C264 +
             C119 * C253 + C107 * C263 + C120 * C257 + C108 * C267) *
                C1511 +
            (C117 * C261 + C105 * C273 + C118 * C260 + C106 * C272 +
             C119 * C259 + C107 * C271 + C120 * C268 + C108 * C275) *
                C1509 -
            (C120 * C1407 + C108 * C1408 + C119 * C714 + C107 * C722 +
             C118 * C713 + C106 * C721 + C117 * C712 + C105 * C720) *
                C1512 -
            (C120 * C1409 + C108 * C1410 + C119 * C726 + C107 * C738 +
             C118 * C725 + C106 * C737 + C117 * C724 + C105 * C736) *
                C50790) *
               C50852 * C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C1511 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C1509 -
             (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                 C1512 -
             (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                 C50790) *
                C7787 +
            ((C7987 + C7988) * C1511 + (C7989 + C7990) * C1509 -
             (C8640 + C8641) * C1512 - (C8642 + C8643) * C50790) *
                C7788 +
            (C8303 * C1511 + C8304 * C1509 - C8653 * C1512 - C8654 * C50790) *
                C7789) *
               C50878 * C1169 +
           (((C8641 + C8640) * C1512 -
             ((C7990 + C7989) * C1509 + (C7988 + C7987) * C1511) +
             (C8643 + C8642) * C50790) *
                C7787 +
            ((C8646 + C8645) * C1512 -
             ((C7994 + C7993) * C1509 + (C7992 + C7991) * C1511) +
             (C8648 + C8647) * C50790) *
                C7788 +
            ((C8649 + C8650) * C1512 - (C8443 * C1509 + C8444 * C1511) +
             (C8651 + C8652) * C50790) *
                C7789) *
               C50878 * C50764) *
              C50974 +
          ((((C49718 * C381 + C50967 * C387 + C49711 * C380 + C50693 * C386) *
                 C1512 -
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C1509 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C1511) +
             (C49718 * C391 + C50967 * C399 + C49711 * C390 + C50693 * C398) *
                 C50790) *
                C7787 +
            ((C9591 + C9592) * C1512 -
             ((C7998 + C7997) * C1509 + (C7996 + C7995) * C1511) +
             (C9593 + C9594) * C50790) *
                C7788 +
            ((C9595 + C9596) * C1512 - (C8321 * C1509 + C8322 * C1511) +
             (C9597 + C9598) * C50790) *
                C7789) *
               C50878 * C1169 +
           (((C7995 + C7996) * C1511 + (C7997 + C7998) * C1509 -
             (C9592 + C9591) * C1512 - (C9594 + C9593) * C50790) *
                C7787 +
            ((C7999 + C8000) * C1511 + (C8001 + C8002) * C1509 -
             (C9596 + C9595) * C1512 - (C9598 + C9597) * C50790) *
                C7788 +
            ((C8329 + C8330) * C1511 + (C8331 + C8332) * C1509 -
             (C49711 * C2981 + C50693 * C2984 + C49718 * C2982 +
              C50967 * C2985) *
                 C1512 -
             (C49711 * C2987 + C50693 * C2990 + C49718 * C2988 +
              C50967 * C2991) *
                 C50790) *
                C7789) *
               C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1511 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C1509 -
           (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
            C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
               C1512 -
           (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
            C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
               C50790) *
              C50852 * C50878 * C51027 +
          ((C117 * C711 + C105 * C719 + C118 * C712 + C106 * C720 +
            C119 * C713 + C107 * C721 + C120 * C714 + C108 * C722) *
               C1512 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C1509 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C1511) +
           (C117 * C723 + C105 * C735 + C118 * C724 + C106 * C736 +
            C119 * C725 + C107 * C737 + C120 * C726 + C108 * C738) *
               C50790) *
              C50852 * C50878 * C51015 +
          ((C117 * C506 + C105 * C511 + C118 * C507 + C106 * C512 +
            C119 * C508 + C107 * C513 + C120 * C509 + C108 * C514) *
               C1511 +
           (C117 * C515 + C105 * C521 + C118 * C516 + C106 * C522 +
            C119 * C517 + C107 * C523 + C120 * C518 + C108 * C524) *
               C1509 -
           (C120 * C715 + C108 * C727 + C119 * C716 + C107 * C728 +
            C118 * C717 + C106 * C729 + C117 * C718 + C105 * C730) *
               C1512 -
           (C120 * C731 + C108 * C739 + C119 * C732 + C107 * C740 +
            C118 * C733 + C106 * C741 + C117 * C734 + C105 * C742) *
               C50790) *
              C50852 * C50878 * C1274) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C1511 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C1509 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C1512 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C50790) *
               C7787 +
           ((C7987 + C7988) * C1511 + (C7989 + C7990) * C1509 -
            (C8640 + C8641) * C1512 - (C8642 + C8643) * C50790) *
               C7788 +
           C10431 * C7789) *
              C50878 * C51027 +
          (((C8641 + C8640) * C1512 -
            ((C7990 + C7989) * C1509 + (C7988 + C7987) * C1511) +
            (C8643 + C8642) * C50790) *
               C7787 +
           ((C8646 + C8645) * C1512 -
            ((C7994 + C7993) * C1509 + (C7992 + C7991) * C1511) +
            (C8648 + C8647) * C50790) *
               C7788 +
           ((C8649 + C8650) * C1512 - (C8443 * C1509 + C8444 * C1511) +
            (C8651 + C8652) * C50790) *
               C7789) *
              C50878 * C51015 +
          (C10431 * C7787 +
           ((C8328 + C8327) * C1511 + (C8326 + C8325) * C1509 -
            (C8650 + C8649) * C1512 - (C8652 + C8651) * C50790) *
               C7788 +
           ((C8455 + C8456) * C1511 + (C8457 + C8458) * C1509 -
            (C49711 * C8605 + C50693 * C8607 + C49718 * C8606 +
             C50967 * C8608) *
                C1512 -
            (C49711 * C8609 + C50693 * C8611 + C49718 * C8610 +
             C50967 * C8612) *
                C50790) *
               C7789) *
              C50878 * C1274) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1744 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C51028 -
           (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
            C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
               C1745 -
           (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
            C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
               C51018 +
           (C117 * C847 + C105 * C852 + C118 * C848 + C106 * C853 +
            C119 * C849 + C107 * C854 + C120 * C850 + C108 * C855) *
               C1746 +
           (C117 * C856 + C105 * C862 + C118 * C857 + C106 * C863 +
            C119 * C858 + C107 * C864 + C120 * C859 + C108 * C865) *
               C1743) *
              C50852 * C50878 * C1169 +
          ((C117 * C711 + C105 * C719 + C118 * C712 + C106 * C720 +
            C119 * C713 + C107 * C721 + C120 * C714 + C108 * C722) *
               C1745 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C51028 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C1744) +
           (C117 * C723 + C105 * C735 + C118 * C724 + C106 * C736 +
            C119 * C725 + C107 * C737 + C120 * C726 + C108 * C738) *
               C51018 -
           (C120 * C965 + C108 * C969 + C119 * C966 + C107 * C970 +
            C118 * C967 + C106 * C971 + C117 * C968 + C105 * C972) *
               C1746 -
           (C120 * C973 + C108 * C977 + C119 * C974 + C107 * C978 +
            C118 * C975 + C106 * C979 + C117 * C976 + C105 * C980) *
               C1743) *
              C50852 * C50878 * C50764) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C1744 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C51028 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C1745 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C51018 +
            (C49718 * C847 + C50967 * C852 + C49711 * C848 + C50693 * C853) *
                C1746 +
            (C49718 * C856 + C50967 * C862 + C49711 * C857 + C50693 * C863) *
                C1743) *
               C7787 +
           ((C7987 + C7988) * C1744 + (C7989 + C7990) * C51028 -
            (C8640 + C8641) * C1745 - (C8642 + C8643) * C51018 +
            (C8975 + C8976) * C1746 + (C8977 + C8978) * C1743) *
               C7788 +
           (C8303 * C1744 + C8304 * C51028 - C8653 * C1745 - C8654 * C51018 +
            (C8979 + C8980) * C1746 + (C8981 + C8982) * C1743) *
               C7789) *
              C50878 * C1169 +
          (((C8641 + C8640) * C1745 -
            ((C7990 + C7989) * C51028 + (C7988 + C7987) * C1744) +
            (C8643 + C8642) * C51018 - (C8976 + C8975) * C1746 -
            (C8978 + C8977) * C1743) *
               C7787 +
           ((C8646 + C8645) * C1745 -
            ((C7994 + C7993) * C51028 + (C7992 + C7991) * C1744) +
            (C8648 + C8647) * C51018 - (C8980 + C8979) * C1746 -
            (C8982 + C8981) * C1743) *
               C7788 +
           ((C8649 + C8650) * C1745 - (C8443 * C51028 + C8444 * C1744) +
            (C8651 + C8652) * C51018 -
            (C49711 * C8950 + C50693 * C8952 + C49718 * C8951 +
             C50967 * C8953) *
                C1746 -
            (C49711 * C8954 + C50693 * C8956 + C49718 * C8955 +
             C50967 * C8957) *
                C1743) *
               C7789) *
              C50878 * C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50778) *
               C50852 * C50878 * C501 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C50778 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C121) *
               C50852 * C50878 * C502 +
           ((C117 * C506 + C105 * C511 + C118 * C507 + C106 * C512 +
             C119 * C508 + C107 * C513 + C120 * C509 + C108 * C514) *
                C121 +
            (C117 * C515 + C105 * C521 + C118 * C516 + C106 * C522 +
             C119 * C517 + C107 * C523 + C120 * C518 + C108 * C524) *
                C50778) *
               C50852 * C50878 * C503) *
              C50974 +
          (((C117 * C255 + C105 * C265 + C118 * C254 + C106 * C264 +
             C119 * C253 + C107 * C263 + C120 * C257 + C108 * C267) *
                C121 +
            (C117 * C261 + C105 * C273 + C118 * C260 + C106 * C272 +
             C119 * C259 + C107 * C271 + C120 * C268 + C108 * C275) *
                C50778) *
               C50852 * C50878 * C502 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50778 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50852 * C50878 * C501 -
           ((C120 * C519 + C108 * C525 + C119 * C518 + C107 * C524 +
             C118 * C517 + C106 * C523 + C117 * C516 + C105 * C522) *
                C50778 +
            (C120 * C510 + C108 * C520 + C119 * C509 + C107 * C514 +
             C118 * C508 + C106 * C513 + C117 * C507 + C105 * C512) *
                C121) *
               C50852 * C50878 * C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50778) *
              C50852 * C50878 * C50748 * C113 -
          ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
            C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
               C50778 +
           (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
            C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
               C121) *
              C50852 * C50878 * C50748 * C114 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C121 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50778) *
              C50852 * C50878 * C50748 * C115 -
          ((C120 * C141 + C108 * C149 + C119 * C140 + C107 * C148 +
            C118 * C137 + C106 * C147 + C117 * C136 + C105 * C146) *
               C50778 +
           (C120 * C128 + C108 * C142 + C119 * C127 + C107 * C139 +
            C118 * C126 + C106 * C138 + C117 * C125 + C105 * C132) *
               C121) *
              C50852 * C50878 * C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C844 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C841 -
           (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
            C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
               C845 -
           (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
            C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
               C842 +
           (C117 * C847 + C105 * C852 + C118 * C848 + C106 * C853 +
            C119 * C849 + C107 * C854 + C120 * C850 + C108 * C855) *
               C846 +
           (C117 * C856 + C105 * C862 + C118 * C857 + C106 * C863 +
            C119 * C858 + C107 * C864 + C120 * C859 + C108 * C865) *
               C843) *
              C50852 * C50878 * C50748 * C50974 +
          ((C117 * C381 + C105 * C387 + C118 * C380 + C106 * C386 +
            C119 * C379 + C107 * C385 + C120 * C383 + C108 * C393) *
               C845 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C841 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C844) +
           (C117 * C391 + C105 * C399 + C118 * C390 + C106 * C398 +
            C119 * C389 + C107 * C397 + C120 * C394 + C108 * C401) *
               C842 -
           (C120 * C851 + C108 * C860 + C119 * C850 + C107 * C855 +
            C118 * C849 + C106 * C854 + C117 * C848 + C105 * C853) *
               C846 -
           (C120 * C861 + C108 * C866 + C119 * C859 + C107 * C865 +
            C118 * C858 + C106 * C864 + C117 * C857 + C105 * C863) *
               C843) *
              C50852 * C50878 * C50748 * C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C121 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50778) *
               C7787 +
           ((C49718 * C256 + C50967 * C266 + C49711 * C255 + C50693 * C265) *
                C121 +
            (C49718 * C262 + C50967 * C274 + C49711 * C261 + C50693 * C273) *
                C50778) *
               C7788 +
           ((C49718 * C506 + C50967 * C511 + C49711 * C507 + C50693 * C512) *
                C121 +
            (C49718 * C515 + C50967 * C521 + C49711 * C516 + C50693 * C522) *
                C50778) *
               C7789) *
              C50878 * C50748 * C113 -
          (((C49711 * C517 + C50693 * C523 + C49718 * C516 + C50967 * C522) *
                C50778 +
            (C49711 * C508 + C50693 * C513 + C49718 * C507 + C50967 * C512) *
                C121) *
               C7789 +
           ((C49711 * C260 + C50693 * C272 + C49718 * C261 + C50967 * C273) *
                C50778 +
            (C49711 * C254 + C50693 * C264 + C49718 * C255 + C50967 * C265) *
                C121) *
               C7788 +
           ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                C50778 +
            (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                C121) *
               C7787) *
              C50878 * C50748 * C114 +
          (((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                C121 +
            (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                C50778) *
               C7787 +
           ((C49718 * C254 + C50967 * C264 + C49711 * C253 + C50693 * C263) *
                C121 +
            (C49718 * C260 + C50967 * C272 + C49711 * C259 + C50693 * C271) *
                C50778) *
               C7788 +
           ((C49718 * C508 + C50967 * C513 + C49711 * C509 + C50693 * C514) *
                C121 +
            (C49718 * C517 + C50967 * C523 + C49711 * C518 + C50693 * C524) *
                C50778) *
               C7789) *
              C50878 * C50748 * C115 -
          (((C49711 * C519 + C50693 * C525 + C49718 * C518 + C50967 * C524) *
                C50778 +
            (C49711 * C510 + C50693 * C520 + C49718 * C509 + C50967 * C514) *
                C121) *
               C7789 +
           ((C49711 * C268 + C50693 * C275 + C49718 * C259 + C50967 * C271) *
                C50778 +
            (C49711 * C257 + C50693 * C267 + C49718 * C253 + C50967 * C263) *
                C121) *
               C7788 +
           ((C49711 * C137 + C50693 * C147 + C49718 * C136 + C50967 * C146) *
                C50778 +
            (C49711 * C126 + C50693 * C138 + C49718 * C125 + C50967 * C132) *
                C121) *
               C7787) *
              C50878 * C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C7787 +
            ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C7788 +
            C8335 * C7789) *
               C50878 * C501 -
           (((C8325 + C8326) * C50778 + (C8327 + C8328) * C121) * C7789 +
            ((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C7788 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C7787) *
               C50878 * C502 +
           (C8335 * C7787 +
            ((C8328 + C8327) * C121 + (C8326 + C8325) * C50778) * C7788 +
            ((C49718 * C2807 + C50967 * C2813 + C49711 * C2806 +
              C50693 * C2812) *
                 C121 +
             (C49718 * C2810 + C50967 * C2816 + C49711 * C2809 +
              C50693 * C2815) *
                 C50778) *
                C7789) *
               C50878 * C503) *
              C50974 +
          ((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C7787 +
            ((C7999 + C8000) * C121 + (C8001 + C8002) * C50778) * C7788 +
            ((C8329 + C8330) * C121 + (C8331 + C8332) * C50778) * C7789) *
               C50878 * C502 -
           (C8336 * C7789 +
            ((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C7788 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C7787) *
               C50878 * C501 -
           (((C49711 * C2808 + C50693 * C2814 + C49718 * C2809 +
              C50967 * C2815) *
                 C50778 +
             (C49711 * C2805 + C50693 * C2811 + C49718 * C2806 +
              C50967 * C2812) *
                 C121) *
                C7789 +
            ((C8332 + C8331) * C50778 + (C8330 + C8329) * C121) * C7788 +
            C8336 * C7787) *
               C50878 * C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C844 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C841 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C845 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C842 +
            (C49718 * C847 + C50967 * C852 + C49711 * C848 + C50693 * C853) *
                C846 +
            (C49718 * C856 + C50967 * C862 + C49711 * C857 + C50693 * C863) *
                C843) *
               C7787 +
           ((C7987 + C7988) * C844 + (C7989 + C7990) * C841 -
            (C8640 + C8641) * C845 - (C8642 + C8643) * C842 +
            (C49718 * C968 + C50967 * C972 + C49711 * C967 + C50693 * C971) *
                C846 +
            (C49718 * C976 + C50967 * C980 + C49711 * C975 + C50693 * C979) *
                C843) *
               C7788 +
           (C8303 * C844 + C8304 * C841 - C8653 * C845 - C8654 * C842 +
            (C49718 * C3323 + C50967 * C3326 + C49711 * C3322 +
             C50693 * C3325) *
                C846 +
            (C49718 * C3329 + C50967 * C3332 + C49711 * C3328 +
             C50693 * C3331) *
                C843) *
               C7789) *
              C50878 * C50748 * C50974 +
          (((C49718 * C381 + C50967 * C387 + C49711 * C380 + C50693 * C386) *
                C845 -
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C841 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C844) +
            (C49718 * C391 + C50967 * C399 + C49711 * C390 + C50693 * C398) *
                C842 -
            (C49711 * C849 + C50693 * C854 + C49718 * C848 + C50967 * C853) *
                C846 -
            (C49711 * C858 + C50693 * C864 + C49718 * C857 + C50967 * C863) *
                C843) *
               C7787 +
           ((C49718 * C712 + C50967 * C720 + C49711 * C713 + C50693 * C721) *
                C845 -
            ((C7998 + C7997) * C841 + (C7996 + C7995) * C844) +
            (C49718 * C724 + C50967 * C736 + C49711 * C725 + C50693 * C737) *
                C842 -
            (C49711 * C966 + C50693 * C970 + C49718 * C967 + C50967 * C971) *
                C846 -
            (C49711 * C974 + C50693 * C978 + C49718 * C975 + C50967 * C979) *
                C843) *
               C7788 +
           ((C49718 * C717 + C50967 * C729 + C49711 * C716 + C50693 * C728) *
                C845 -
            (C8321 * C841 + C8322 * C844) +
            (C49718 * C733 + C50967 * C741 + C49711 * C732 + C50693 * C740) *
                C842 -
            (C49711 * C3321 + C50693 * C3324 + C49718 * C3322 +
             C50967 * C3325) *
                C846 -
            (C49711 * C3327 + C50693 * C3330 + C49718 * C3328 +
             C50967 * C3331) *
                C843) *
               C7789) *
              C50878 * C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50778) *
              C50852 * C50878 * C592 -
          ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
            C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
               C50778 +
           (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
            C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
               C121) *
              C50852 * C50878 * C593 +
          ((C117 * C506 + C105 * C511 + C118 * C507 + C106 * C512 +
            C119 * C508 + C107 * C513 + C120 * C509 + C108 * C514) *
               C121 +
           (C117 * C515 + C105 * C521 + C118 * C516 + C106 * C522 +
            C119 * C517 + C107 * C523 + C120 * C518 + C108 * C524) *
               C50778) *
              C50852 * C50878 * C594 -
          ((C120 * C601 + C108 * C609 + C119 * C602 + C107 * C610 +
            C118 * C603 + C106 * C611 + C117 * C604 + C105 * C612) *
               C50778 +
           (C120 * C597 + C108 * C605 + C119 * C598 + C107 * C606 +
            C118 * C599 + C106 * C607 + C117 * C600 + C105 * C608) *
               C121) *
              C50852 * C50878 * C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50778) *
               C50852 * C50878 * C50981 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C50778 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C121) *
               C50852 * C50878 * C50764) *
              C250 +
          (((C117 * C255 + C105 * C265 + C118 * C254 + C106 * C264 +
             C119 * C253 + C107 * C263 + C120 * C257 + C108 * C267) *
                C121 +
            (C117 * C261 + C105 * C273 + C118 * C260 + C106 * C272 +
             C119 * C259 + C107 * C271 + C120 * C268 + C108 * C275) *
                C50778) *
               C50852 * C50878 * C50764 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50778 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50852 * C50878 * C50981) *
              C251 +
          (((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50778) *
               C50852 * C50878 * C50981 -
           ((C120 * C269 + C108 * C276 + C119 * C268 + C107 * C275 +
             C118 * C259 + C106 * C271 + C117 * C260 + C105 * C272) *
                C50778 +
            (C120 * C258 + C108 * C270 + C119 * C257 + C107 * C267 +
             C118 * C253 + C106 * C263 + C117 * C254 + C105 * C264) *
                C121) *
               C50852 * C50878 * C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C844 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C841 -
           (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
            C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
               C845 -
           (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
            C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
               C842 +
           (C117 * C847 + C105 * C852 + C118 * C848 + C106 * C853 +
            C119 * C849 + C107 * C854 + C120 * C850 + C108 * C855) *
               C846 +
           (C117 * C856 + C105 * C862 + C118 * C857 + C106 * C863 +
            C119 * C858 + C107 * C864 + C120 * C859 + C108 * C865) *
               C843) *
              C50852 * C50878 * C50981 +
          ((C117 * C711 + C105 * C719 + C118 * C712 + C106 * C720 +
            C119 * C713 + C107 * C721 + C120 * C714 + C108 * C722) *
               C845 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C841 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C844) +
           (C117 * C723 + C105 * C735 + C118 * C724 + C106 * C736 +
            C119 * C725 + C107 * C737 + C120 * C726 + C108 * C738) *
               C842 -
           (C120 * C965 + C108 * C969 + C119 * C966 + C107 * C970 +
            C118 * C967 + C106 * C971 + C117 * C968 + C105 * C972) *
               C846 -
           (C120 * C973 + C108 * C977 + C119 * C974 + C107 * C978 +
            C118 * C975 + C106 * C979 + C117 * C976 + C105 * C980) *
               C843) *
              C50852 * C50878 * C50764) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C7787 +
            ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C7788 +
            ((C7991 + C7992) * C121 + (C7993 + C7994) * C50778) * C7789) *
               C50878 * C50981 -
           (((C49711 * C603 + C50693 * C611 + C49718 * C604 + C50967 * C612) *
                 C50778 +
             (C49711 * C599 + C50693 * C607 + C49718 * C600 + C50967 * C608) *
                 C121) *
                C7789 +
            ((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C7788 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C7787) *
               C50878 * C50764) *
              C250 +
          ((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C7787 +
            ((C7999 + C8000) * C121 + (C8001 + C8002) * C50778) * C7788 +
            ((C49718 * C599 + C50967 * C607 + C49711 * C598 + C50693 * C606) *
                 C121 +
             (C49718 * C603 + C50967 * C611 + C49711 * C602 + C50693 * C610) *
                 C50778) *
                C7789) *
               C50878 * C50764 -
           (((C8002 + C8001) * C50778 + (C8000 + C7999) * C121) * C7789 +
            ((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C7788 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C7787) *
               C50878 * C50981) *
              C251 +
          ((((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                 C121 +
             (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                 C50778) *
                C7787 +
            ((C8003 + C8004) * C121 + (C8005 + C8006) * C50778) * C7788 +
            ((C8007 + C8008) * C121 + (C8009 + C8010) * C50778) * C7789) *
               C50878 * C50981 -
           (((C49711 * C601 + C50693 * C609 + C49718 * C602 + C50967 * C610) *
                 C50778 +
             (C49711 * C597 + C50693 * C605 + C49718 * C598 + C50967 * C606) *
                 C121) *
                C7789 +
            ((C8010 + C8009) * C50778 + (C8008 + C8007) * C121) * C7788 +
            ((C8006 + C8005) * C50778 + (C8004 + C8003) * C121) * C7787) *
               C50878 * C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C121 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50778) *
               C7787 +
           ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C7788 +
           C8335 * C7789) *
              C50878 * C592 -
          (C8459 * C7789 +
           ((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C7788 +
           ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C7787) *
              C50878 * C593 +
          (C8335 * C7787 +
           ((C8328 + C8327) * C121 + (C8326 + C8325) * C50778) * C7788 +
           ((C8455 + C8456) * C121 + (C8457 + C8458) * C50778) * C7789) *
              C50878 * C594 -
          (((C49711 * C8436 + C50693 * C8440 + C49718 * C8437 +
             C50967 * C8441) *
                C50778 +
            (C49711 * C8434 + C50693 * C8438 + C49718 * C8435 +
             C50967 * C8439) *
                C121) *
               C7789 +
           ((C8458 + C8457) * C50778 + (C8456 + C8455) * C121) * C7788 +
           C8459 * C7787) *
              C50878 * C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C844 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C841 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C845 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C842 +
            (C49718 * C847 + C50967 * C852 + C49711 * C848 + C50693 * C853) *
                C846 +
            (C49718 * C856 + C50967 * C862 + C49711 * C857 + C50693 * C863) *
                C843) *
               C7787 +
           ((C7987 + C7988) * C844 + (C7989 + C7990) * C841 -
            (C8640 + C8641) * C845 - (C8642 + C8643) * C842 +
            (C8975 + C8976) * C846 + (C8977 + C8978) * C843) *
               C7788 +
           (C8303 * C844 + C8304 * C841 - C8653 * C845 - C8654 * C842 +
            (C8979 + C8980) * C846 + (C8981 + C8982) * C843) *
               C7789) *
              C50878 * C50981 +
          (((C8641 + C8640) * C845 -
            ((C7990 + C7989) * C841 + (C7988 + C7987) * C844) +
            (C8643 + C8642) * C842 - (C8976 + C8975) * C846 -
            (C8978 + C8977) * C843) *
               C7787 +
           ((C8646 + C8645) * C845 -
            ((C7994 + C7993) * C841 + (C7992 + C7991) * C844) +
            (C8648 + C8647) * C842 - (C8980 + C8979) * C846 -
            (C8982 + C8981) * C843) *
               C7788 +
           ((C8649 + C8650) * C845 - (C8443 * C841 + C8444 * C844) +
            (C8651 + C8652) * C842 -
            (C49711 * C8950 + C50693 * C8952 + C49718 * C8951 +
             C50967 * C8953) *
                C846 -
            (C49711 * C8954 + C50693 * C8956 + C49718 * C8955 +
             C50967 * C8957) *
                C843) *
               C7789) *
              C50878 * C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C377 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50983 -
           (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
            C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
               C378 -
           (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
            C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
               C50790) *
              C50852 * C50878 * C501 +
          ((C117 * C711 + C105 * C719 + C118 * C712 + C106 * C720 +
            C119 * C713 + C107 * C721 + C120 * C714 + C108 * C722) *
               C378 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C50983 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C377) +
           (C117 * C723 + C105 * C735 + C118 * C724 + C106 * C736 +
            C119 * C725 + C107 * C737 + C120 * C726 + C108 * C738) *
               C50790) *
              C50852 * C50878 * C502 +
          ((C117 * C506 + C105 * C511 + C118 * C507 + C106 * C512 +
            C119 * C508 + C107 * C513 + C120 * C509 + C108 * C514) *
               C377 +
           (C117 * C515 + C105 * C521 + C118 * C516 + C106 * C522 +
            C119 * C517 + C107 * C523 + C120 * C518 + C108 * C524) *
               C50983 -
           (C120 * C715 + C108 * C727 + C119 * C716 + C107 * C728 +
            C118 * C717 + C106 * C729 + C117 * C718 + C105 * C730) *
               C378 -
           (C120 * C731 + C108 * C739 + C119 * C732 + C107 * C740 +
            C118 * C733 + C106 * C741 + C117 * C734 + C105 * C742) *
               C50790) *
              C50852 * C50878 * C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C377 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50983 -
           (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
            C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
               C378 -
           (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
            C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
               C50790) *
              C50852 * C50878 * C50748 * C250 +
          ((C117 * C381 + C105 * C387 + C118 * C380 + C106 * C386 +
            C119 * C379 + C107 * C385 + C120 * C383 + C108 * C393) *
               C378 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50983 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C377) +
           (C117 * C391 + C105 * C399 + C118 * C390 + C106 * C398 +
            C119 * C389 + C107 * C397 + C120 * C394 + C108 * C401) *
               C50790) *
              C50852 * C50878 * C50748 * C251 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C377 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50983 -
           (C120 * C384 + C108 * C395 + C119 * C383 + C107 * C393 +
            C118 * C379 + C106 * C385 + C117 * C380 + C105 * C386) *
               C378 -
           (C120 * C396 + C108 * C402 + C119 * C394 + C107 * C401 +
            C118 * C389 + C106 * C397 + C117 * C390 + C105 * C398) *
               C50790) *
              C50852 * C50878 * C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 + C119 * C124 +
           C107 * C131 + C120 * C125 + C108 * C132) *
              C1051 +
          (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 + C119 * C135 +
           C107 * C145 + C120 * C136 + C108 * C146) *
              C1047 -
          (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 + C118 * C381 +
           C106 * C387 + C117 * C382 + C105 * C388) *
              C1052 -
          (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 + C118 * C391 +
           C106 * C399 + C117 * C392 + C105 * C400) *
              C1048 +
          (C117 * C847 + C105 * C852 + C118 * C848 + C106 * C853 + C119 * C849 +
           C107 * C854 + C120 * C850 + C108 * C855) *
              C1053 +
          (C117 * C856 + C105 * C862 + C118 * C857 + C106 * C863 + C119 * C858 +
           C107 * C864 + C120 * C859 + C108 * C865) *
              C1049 -
          (C120 * C1055 + C108 * C1059 + C119 * C1056 + C107 * C1060 +
           C118 * C1057 + C106 * C1061 + C117 * C1058 + C105 * C1062) *
              C1054 -
          (C120 * C1063 + C108 * C1067 + C119 * C1064 + C107 * C1068 +
           C118 * C1065 + C106 * C1069 + C117 * C1066 + C105 * C1070) *
              C1050) *
         C50852 * C50878 * C50748 * C50716) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C377 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50983 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C378 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C50790) *
               C7787 +
           ((C7987 + C7988) * C377 + (C7989 + C7990) * C50983 -
            (C49711 * C712 + C50693 * C720 + C49718 * C711 + C50967 * C719) *
                C378 -
            (C49711 * C724 + C50693 * C736 + C49718 * C723 + C50967 * C735) *
                C50790) *
               C7788 +
           ((C7991 + C7992) * C377 + (C7993 + C7994) * C50983 -
            (C49711 * C717 + C50693 * C729 + C49718 * C718 + C50967 * C730) *
                C378 -
            (C49711 * C733 + C50693 * C741 + C49718 * C734 + C50967 * C742) *
                C50790) *
               C7789) *
              C50878 * C50748 * C250 +
          (((C49718 * C381 + C50967 * C387 + C49711 * C380 + C50693 * C386) *
                C378 -
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50983 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C377) +
            (C49718 * C391 + C50967 * C399 + C49711 * C390 + C50693 * C398) *
                C50790) *
               C7787 +
           ((C49718 * C712 + C50967 * C720 + C49711 * C713 + C50693 * C721) *
                C378 -
            ((C7998 + C7997) * C50983 + (C7996 + C7995) * C377) +
            (C49718 * C724 + C50967 * C736 + C49711 * C725 + C50693 * C737) *
                C50790) *
               C7788 +
           ((C49718 * C717 + C50967 * C729 + C49711 * C716 + C50693 * C728) *
                C378 -
            ((C8002 + C8001) * C50983 + (C8000 + C7999) * C377) +
            (C49718 * C733 + C50967 * C741 + C49711 * C732 + C50693 * C740) *
                C50790) *
               C7789) *
              C50878 * C50748 * C251 +
          (((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                C377 +
            (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                C50983 -
            (C49711 * C379 + C50693 * C385 + C49718 * C380 + C50967 * C386) *
                C378 -
            (C49711 * C389 + C50693 * C397 + C49718 * C390 + C50967 * C398) *
                C50790) *
               C7787 +
           ((C8003 + C8004) * C377 + (C8005 + C8006) * C50983 -
            (C49711 * C714 + C50693 * C722 + C49718 * C713 + C50967 * C721) *
                C378 -
            (C49711 * C726 + C50693 * C738 + C49718 * C725 + C50967 * C737) *
                C50790) *
               C7788 +
           ((C8007 + C8008) * C377 + (C8009 + C8010) * C50983 -
            (C49711 * C715 + C50693 * C727 + C49718 * C716 + C50967 * C728) *
                C378 -
            (C49711 * C731 + C50693 * C739 + C49718 * C732 + C50967 * C740) *
                C50790) *
               C7789) *
              C50878 * C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C377 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50983 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C378 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C50790) *
               C7787 +
           ((C7987 + C7988) * C377 + (C7989 + C7990) * C50983 -
            (C8640 + C8641) * C378 - (C8642 + C8643) * C50790) *
               C7788 +
           C8658 * C7789) *
              C50878 * C501 +
          (((C8641 + C8640) * C378 -
            ((C7990 + C7989) * C50983 + (C7988 + C7987) * C377) +
            (C8643 + C8642) * C50790) *
               C7787 +
           ((C8646 + C8645) * C378 -
            ((C7994 + C7993) * C50983 + (C7992 + C7991) * C377) +
            (C8648 + C8647) * C50790) *
               C7788 +
           ((C8649 + C8650) * C378 - (C8443 * C50983 + C8444 * C377) +
            (C8651 + C8652) * C50790) *
               C7789) *
              C50878 * C502 +
          (C8658 * C7787 +
           ((C8328 + C8327) * C377 + (C8326 + C8325) * C50983 -
            (C8650 + C8649) * C378 - (C8652 + C8651) * C50790) *
               C7788 +
           ((C8455 + C8456) * C377 + (C8457 + C8458) * C50983 -
            (C49711 * C8605 + C50693 * C8607 + C49718 * C8606 +
             C50967 * C8608) *
                C378 -
            (C49711 * C8609 + C50693 * C8611 + C49718 * C8610 +
             C50967 * C8612) *
                C50790) *
               C7789) *
              C50878 * C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
               C1051 +
           (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
               C1047 -
           (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
               C1052 -
           (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
               C1048 +
           (C49718 * C847 + C50967 * C852 + C49711 * C848 + C50693 * C853) *
               C1053 +
           (C49718 * C856 + C50967 * C862 + C49711 * C857 + C50693 * C863) *
               C1049 -
           (C49711 * C1057 + C50693 * C1061 + C49718 * C1058 + C50967 * C1062) *
               C1054 -
           (C49711 * C1065 + C50693 * C1069 + C49718 * C1066 + C50967 * C1070) *
               C1050) *
              C7787 +
          ((C7987 + C7988) * C1051 + (C7989 + C7990) * C1047 -
           (C8640 + C8641) * C1052 - (C8642 + C8643) * C1048 +
           (C8975 + C8976) * C1053 + (C8977 + C8978) * C1049 -
           (C49711 * C3450 + C50693 * C3453 + C49718 * C3451 + C50967 * C3454) *
               C1054 -
           (C49711 * C3456 + C50693 * C3459 + C49718 * C3457 + C50967 * C3460) *
               C1050) *
              C7788 +
          (C8303 * C1051 + C8304 * C1047 - C8653 * C1052 - C8654 * C1048 +
           (C8979 + C8980) * C1053 + (C8981 + C8982) * C1049 -
           (C49711 * C9080 + C50693 * C9082 + C49718 * C9081 + C50967 * C9083) *
               C1054 -
           (C49711 * C9084 + C50693 * C9086 + C49718 * C9085 + C50967 * C9087) *
               C1050) *
              C7789) *
         C50878 * C50748 * C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1511 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C1509 -
           (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
            C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
               C1512 -
           (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
            C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
               C50790) *
              C50852 * C50878 * C50748 * C51026 +
          ((C117 * C381 + C105 * C387 + C118 * C380 + C106 * C386 +
            C119 * C379 + C107 * C385 + C120 * C383 + C108 * C393) *
               C1512 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C1509 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C1511) +
           (C117 * C391 + C105 * C399 + C118 * C390 + C106 * C398 +
            C119 * C389 + C107 * C397 + C120 * C394 + C108 * C401) *
               C50790) *
              C50852 * C50878 * C50748 * C51012 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C1511 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C1509 -
           (C120 * C384 + C108 * C395 + C119 * C383 + C107 * C393 +
            C118 * C379 + C106 * C385 + C117 * C380 + C105 * C386) *
               C1512 -
           (C120 * C396 + C108 * C402 + C119 * C394 + C107 * C401 +
            C118 * C389 + C106 * C397 + C117 * C390 + C105 * C398) *
               C50790) *
              C50852 * C50878 * C50748 * C1173)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C1511 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C1509 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C1512 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C50790) *
               C7787 +
           ((C7987 + C7988) * C1511 + (C7989 + C7990) * C1509 -
            (C8640 + C8641) * C1512 - (C8642 + C8643) * C50790) *
               C7788 +
           (C8303 * C1511 + C8304 * C1509 - C8653 * C1512 - C8654 * C50790) *
               C7789) *
              C50878 * C50748 * C51026 +
          (((C49718 * C381 + C50967 * C387 + C49711 * C380 + C50693 * C386) *
                C1512 -
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C1509 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C1511) +
            (C49718 * C391 + C50967 * C399 + C49711 * C390 + C50693 * C398) *
                C50790) *
               C7787 +
           ((C9591 + C9592) * C1512 -
            ((C7998 + C7997) * C1509 + (C7996 + C7995) * C1511) +
            (C9593 + C9594) * C50790) *
               C7788 +
           ((C9595 + C9596) * C1512 - (C8321 * C1509 + C8322 * C1511) +
            (C9597 + C9598) * C50790) *
               C7789) *
              C50878 * C50748 * C51012 +
          (((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                C1511 +
            (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                C1509 -
            (C49711 * C379 + C50693 * C385 + C49718 * C380 + C50967 * C386) *
                C1512 -
            (C49711 * C389 + C50693 * C397 + C49718 * C390 + C50967 * C398) *
                C50790) *
               C7787 +
           ((C8003 + C8004) * C1511 + (C8005 + C8006) * C1509 -
            (C49711 * C714 + C50693 * C722 + C49718 * C713 + C50967 * C721) *
                C1512 -
            (C49711 * C726 + C50693 * C738 + C49718 * C725 + C50967 * C737) *
                C50790) *
               C7788 +
           ((C8007 + C8008) * C1511 + (C8009 + C8010) * C1509 -
            (C49711 * C715 + C50693 * C727 + C49718 * C716 + C50967 * C728) *
                C1512 -
            (C49711 * C731 + C50693 * C739 + C49718 * C732 + C50967 * C740) *
                C50790) *
               C7789) *
              C50878 * C50748 * C1173)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C1511 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C1509 -
            (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
             C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
                C1512 -
            (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
             C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
                C50790) *
               C50852 * C50878 * C50981 +
           ((C117 * C711 + C105 * C719 + C118 * C712 + C106 * C720 +
             C119 * C713 + C107 * C721 + C120 * C714 + C108 * C722) *
                C1512 -
            ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
              C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                 C1509 +
             (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
              C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                 C1511) +
            (C117 * C723 + C105 * C735 + C118 * C724 + C106 * C736 +
             C119 * C725 + C107 * C737 + C120 * C726 + C108 * C738) *
                C50790) *
               C50852 * C50878 * C50764) *
              C1275 +
          (((C117 * C381 + C105 * C387 + C118 * C380 + C106 * C386 +
             C119 * C379 + C107 * C385 + C120 * C383 + C108 * C393) *
                C1512 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C1509 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C1511) +
            (C117 * C391 + C105 * C399 + C118 * C390 + C106 * C398 +
             C119 * C389 + C107 * C397 + C120 * C394 + C108 * C401) *
                C50790) *
               C50852 * C50878 * C50981 +
           ((C117 * C255 + C105 * C265 + C118 * C254 + C106 * C264 +
             C119 * C253 + C107 * C263 + C120 * C257 + C108 * C267) *
                C1511 +
            (C117 * C261 + C105 * C273 + C118 * C260 + C106 * C272 +
             C119 * C259 + C107 * C271 + C120 * C268 + C108 * C275) *
                C1509 -
            (C120 * C1407 + C108 * C1408 + C119 * C714 + C107 * C722 +
             C118 * C713 + C106 * C721 + C117 * C712 + C105 * C720) *
                C1512 -
            (C120 * C1409 + C108 * C1410 + C119 * C726 + C107 * C738 +
             C118 * C725 + C106 * C737 + C117 * C724 + C105 * C736) *
                C50790) *
               C50852 * C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C1511 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C1509 -
             (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                 C1512 -
             (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                 C50790) *
                C7787 +
            ((C7987 + C7988) * C1511 + (C7989 + C7990) * C1509 -
             (C8640 + C8641) * C1512 - (C8642 + C8643) * C50790) *
                C7788 +
            (C8303 * C1511 + C8304 * C1509 - C8653 * C1512 - C8654 * C50790) *
                C7789) *
               C50878 * C50981 +
           (((C8641 + C8640) * C1512 -
             ((C7990 + C7989) * C1509 + (C7988 + C7987) * C1511) +
             (C8643 + C8642) * C50790) *
                C7787 +
            ((C8646 + C8645) * C1512 -
             ((C7994 + C7993) * C1509 + (C7992 + C7991) * C1511) +
             (C8648 + C8647) * C50790) *
                C7788 +
            ((C8649 + C8650) * C1512 - (C8443 * C1509 + C8444 * C1511) +
             (C8651 + C8652) * C50790) *
                C7789) *
               C50878 * C50764) *
              C1275 +
          ((((C49718 * C381 + C50967 * C387 + C49711 * C380 + C50693 * C386) *
                 C1512 -
             ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                  C1509 +
              (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                  C1511) +
             (C49718 * C391 + C50967 * C399 + C49711 * C390 + C50693 * C398) *
                 C50790) *
                C7787 +
            ((C9591 + C9592) * C1512 -
             ((C7998 + C7997) * C1509 + (C7996 + C7995) * C1511) +
             (C9593 + C9594) * C50790) *
                C7788 +
            ((C9595 + C9596) * C1512 - (C8321 * C1509 + C8322 * C1511) +
             (C9597 + C9598) * C50790) *
                C7789) *
               C50878 * C50981 +
           (((C7995 + C7996) * C1511 + (C7997 + C7998) * C1509 -
             (C9592 + C9591) * C1512 - (C9594 + C9593) * C50790) *
                C7787 +
            ((C7999 + C8000) * C1511 + (C8001 + C8002) * C1509 -
             (C9596 + C9595) * C1512 - (C9598 + C9597) * C50790) *
                C7788 +
            ((C8329 + C8330) * C1511 + (C8331 + C8332) * C1509 -
             (C49711 * C2981 + C50693 * C2984 + C49718 * C2982 +
              C50967 * C2985) *
                 C1512 -
             (C49711 * C2987 + C50693 * C2990 + C49718 * C2988 +
              C50967 * C2991) *
                 C50790) *
                C7789) *
               C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C1744 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C51028 -
           (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
            C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
               C1745 -
           (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
            C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
               C51018 +
           (C117 * C847 + C105 * C852 + C118 * C848 + C106 * C853 +
            C119 * C849 + C107 * C854 + C120 * C850 + C108 * C855) *
               C1746 +
           (C117 * C856 + C105 * C862 + C118 * C857 + C106 * C863 +
            C119 * C858 + C107 * C864 + C120 * C859 + C108 * C865) *
               C1743) *
              C50852 * C50878 * C50748 * C1275 +
          ((C117 * C381 + C105 * C387 + C118 * C380 + C106 * C386 +
            C119 * C379 + C107 * C385 + C120 * C383 + C108 * C393) *
               C1745 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C51028 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C1744) +
           (C117 * C391 + C105 * C399 + C118 * C390 + C106 * C398 +
            C119 * C389 + C107 * C397 + C120 * C394 + C108 * C401) *
               C51018 -
           (C120 * C851 + C108 * C860 + C119 * C850 + C107 * C855 +
            C118 * C849 + C106 * C854 + C117 * C848 + C105 * C853) *
               C1746 -
           (C120 * C861 + C108 * C866 + C119 * C859 + C107 * C865 +
            C118 * C858 + C106 * C864 + C117 * C857 + C105 * C863) *
               C1743) *
              C50852 * C50878 * C50748 * C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C1744 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C51028 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C1745 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C51018 +
            (C49718 * C847 + C50967 * C852 + C49711 * C848 + C50693 * C853) *
                C1746 +
            (C49718 * C856 + C50967 * C862 + C49711 * C857 + C50693 * C863) *
                C1743) *
               C7787 +
           ((C7987 + C7988) * C1744 + (C7989 + C7990) * C51028 -
            (C8640 + C8641) * C1745 - (C8642 + C8643) * C51018 +
            (C8975 + C8976) * C1746 + (C8977 + C8978) * C1743) *
               C7788 +
           (C8303 * C1744 + C8304 * C51028 - C8653 * C1745 - C8654 * C51018 +
            (C8979 + C8980) * C1746 + (C8981 + C8982) * C1743) *
               C7789) *
              C50878 * C50748 * C1275 +
          (((C49718 * C381 + C50967 * C387 + C49711 * C380 + C50693 * C386) *
                C1745 -
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C51028 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C1744) +
            (C49718 * C391 + C50967 * C399 + C49711 * C390 + C50693 * C398) *
                C51018 -
            (C49711 * C849 + C50693 * C854 + C49718 * C848 + C50967 * C853) *
                C1746 -
            (C49711 * C858 + C50693 * C864 + C49718 * C857 + C50967 * C863) *
                C1743) *
               C7787 +
           ((C9591 + C9592) * C1745 -
            ((C7998 + C7997) * C51028 + (C7996 + C7995) * C1744) +
            (C9593 + C9594) * C51018 -
            (C49711 * C966 + C50693 * C970 + C49718 * C967 + C50967 * C971) *
                C1746 -
            (C49711 * C974 + C50693 * C978 + C49718 * C975 + C50967 * C979) *
                C1743) *
               C7788 +
           ((C9595 + C9596) * C1745 - (C8321 * C51028 + C8322 * C1744) +
            (C9597 + C9598) * C51018 -
            (C49711 * C3321 + C50693 * C3324 + C49718 * C3322 +
             C50967 * C3325) *
                C1746 -
            (C49711 * C3327 + C50693 * C3330 + C49718 * C3328 +
             C50967 * C3331) *
                C1743) *
               C7789) *
              C50878 * C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50778) *
              C50852 * C50878 * C50748 * C113 -
          ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
            C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
               C50778 +
           (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
            C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
               C121) *
              C50852 * C50878 * C50748 * C114 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C121 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50778) *
              C50852 * C50878 * C50748 * C115 -
          ((C120 * C141 + C108 * C149 + C119 * C140 + C107 * C148 +
            C118 * C137 + C106 * C147 + C117 * C136 + C105 * C146) *
               C50778 +
           (C120 * C128 + C108 * C142 + C119 * C127 + C107 * C139 +
            C118 * C126 + C106 * C138 + C117 * C125 + C105 * C132) *
               C121) *
              C50852 * C50878 * C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50778) *
               C50852 * C50878 * C501 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C50778 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C121) *
               C50852 * C50878 * C502 +
           ((C117 * C506 + C105 * C511 + C118 * C507 + C106 * C512 +
             C119 * C508 + C107 * C513 + C120 * C509 + C108 * C514) *
                C121 +
            (C117 * C515 + C105 * C521 + C118 * C516 + C106 * C522 +
             C119 * C517 + C107 * C523 + C120 * C518 + C108 * C524) *
                C50778) *
               C50852 * C50878 * C503) *
              C50974 +
          (((C117 * C255 + C105 * C265 + C118 * C254 + C106 * C264 +
             C119 * C253 + C107 * C263 + C120 * C257 + C108 * C267) *
                C121 +
            (C117 * C261 + C105 * C273 + C118 * C260 + C106 * C272 +
             C119 * C259 + C107 * C271 + C120 * C268 + C108 * C275) *
                C50778) *
               C50852 * C50878 * C502 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50778 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50852 * C50878 * C501 -
           ((C120 * C519 + C108 * C525 + C119 * C518 + C107 * C524 +
             C118 * C517 + C106 * C523 + C117 * C516 + C105 * C522) *
                C50778 +
            (C120 * C510 + C108 * C520 + C119 * C509 + C107 * C514 +
             C118 * C508 + C106 * C513 + C117 * C507 + C105 * C512) *
                C121) *
               C50852 * C50878 * C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C121 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50778) *
               C7787 +
           ((C49718 * C256 + C50967 * C266 + C49711 * C255 + C50693 * C265) *
                C121 +
            (C49718 * C262 + C50967 * C274 + C49711 * C261 + C50693 * C273) *
                C50778) *
               C7788 +
           ((C49718 * C506 + C50967 * C511 + C49711 * C507 + C50693 * C512) *
                C121 +
            (C49718 * C515 + C50967 * C521 + C49711 * C516 + C50693 * C522) *
                C50778) *
               C7789) *
              C50878 * C50748 * C113 -
          (((C49711 * C517 + C50693 * C523 + C49718 * C516 + C50967 * C522) *
                C50778 +
            (C49711 * C508 + C50693 * C513 + C49718 * C507 + C50967 * C512) *
                C121) *
               C7789 +
           ((C49711 * C260 + C50693 * C272 + C49718 * C261 + C50967 * C273) *
                C50778 +
            (C49711 * C254 + C50693 * C264 + C49718 * C255 + C50967 * C265) *
                C121) *
               C7788 +
           ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                C50778 +
            (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                C121) *
               C7787) *
              C50878 * C50748 * C114 +
          (((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                C121 +
            (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                C50778) *
               C7787 +
           ((C49718 * C254 + C50967 * C264 + C49711 * C253 + C50693 * C263) *
                C121 +
            (C49718 * C260 + C50967 * C272 + C49711 * C259 + C50693 * C271) *
                C50778) *
               C7788 +
           ((C49718 * C508 + C50967 * C513 + C49711 * C509 + C50693 * C514) *
                C121 +
            (C49718 * C517 + C50967 * C523 + C49711 * C518 + C50693 * C524) *
                C50778) *
               C7789) *
              C50878 * C50748 * C115 -
          (((C49711 * C519 + C50693 * C525 + C49718 * C518 + C50967 * C524) *
                C50778 +
            (C49711 * C510 + C50693 * C520 + C49718 * C509 + C50967 * C514) *
                C121) *
               C7789 +
           ((C49711 * C268 + C50693 * C275 + C49718 * C259 + C50967 * C271) *
                C50778 +
            (C49711 * C257 + C50693 * C267 + C49718 * C253 + C50967 * C263) *
                C121) *
               C7788 +
           ((C49711 * C137 + C50693 * C147 + C49718 * C136 + C50967 * C146) *
                C50778 +
            (C49711 * C126 + C50693 * C138 + C49718 * C125 + C50967 * C132) *
                C121) *
               C7787) *
              C50878 * C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C7787 +
            ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C7788 +
            C8335 * C7789) *
               C50878 * C501 -
           (((C8325 + C8326) * C50778 + (C8327 + C8328) * C121) * C7789 +
            ((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C7788 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C7787) *
               C50878 * C502 +
           (C8335 * C7787 +
            ((C8328 + C8327) * C121 + (C8326 + C8325) * C50778) * C7788 +
            ((C49718 * C2807 + C50967 * C2813 + C49711 * C2806 +
              C50693 * C2812) *
                 C121 +
             (C49718 * C2810 + C50967 * C2816 + C49711 * C2809 +
              C50693 * C2815) *
                 C50778) *
                C7789) *
               C50878 * C503) *
              C50974 +
          ((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C7787 +
            ((C7999 + C8000) * C121 + (C8001 + C8002) * C50778) * C7788 +
            ((C8329 + C8330) * C121 + (C8331 + C8332) * C50778) * C7789) *
               C50878 * C502 -
           (C8336 * C7789 +
            ((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C7788 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C7787) *
               C50878 * C501 -
           (((C49711 * C2808 + C50693 * C2814 + C49718 * C2809 +
              C50967 * C2815) *
                 C50778 +
             (C49711 * C2805 + C50693 * C2811 + C49718 * C2806 +
              C50967 * C2812) *
                 C121) *
                C7789 +
            ((C8332 + C8331) * C50778 + (C8330 + C8329) * C121) * C7788 +
            C8336 * C7787) *
               C50878 * C503) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50778) *
               C50852 * C50878 * C50981 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C50778 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C121) *
               C50852 * C50878 * C50764) *
              C250 +
          (((C117 * C255 + C105 * C265 + C118 * C254 + C106 * C264 +
             C119 * C253 + C107 * C263 + C120 * C257 + C108 * C267) *
                C121 +
            (C117 * C261 + C105 * C273 + C118 * C260 + C106 * C272 +
             C119 * C259 + C107 * C271 + C120 * C268 + C108 * C275) *
                C50778) *
               C50852 * C50878 * C50764 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50778 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50852 * C50878 * C50981) *
              C251 +
          (((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50778) *
               C50852 * C50878 * C50981 -
           ((C120 * C269 + C108 * C276 + C119 * C268 + C107 * C275 +
             C118 * C259 + C106 * C271 + C117 * C260 + C105 * C272) *
                C50778 +
            (C120 * C258 + C108 * C270 + C119 * C257 + C107 * C267 +
             C118 * C253 + C106 * C263 + C117 * C254 + C105 * C264) *
                C121) *
               C50852 * C50878 * C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50778) *
              C50852 * C50878 * C592 -
          ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
            C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
               C50778 +
           (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
            C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
               C121) *
              C50852 * C50878 * C593 +
          ((C117 * C506 + C105 * C511 + C118 * C507 + C106 * C512 +
            C119 * C508 + C107 * C513 + C120 * C509 + C108 * C514) *
               C121 +
           (C117 * C515 + C105 * C521 + C118 * C516 + C106 * C522 +
            C119 * C517 + C107 * C523 + C120 * C518 + C108 * C524) *
               C50778) *
              C50852 * C50878 * C594 -
          ((C120 * C601 + C108 * C609 + C119 * C602 + C107 * C610 +
            C118 * C603 + C106 * C611 + C117 * C604 + C105 * C612) *
               C50778 +
           (C120 * C597 + C108 * C605 + C119 * C598 + C107 * C606 +
            C118 * C599 + C106 * C607 + C117 * C600 + C105 * C608) *
               C121) *
              C50852 * C50878 * C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                 C121 +
             (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                 C50778) *
                C7787 +
            ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C7788 +
            ((C7991 + C7992) * C121 + (C7993 + C7994) * C50778) * C7789) *
               C50878 * C50981 -
           (((C49711 * C603 + C50693 * C611 + C49718 * C604 + C50967 * C612) *
                 C50778 +
             (C49711 * C599 + C50693 * C607 + C49718 * C600 + C50967 * C608) *
                 C121) *
                C7789 +
            ((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C7788 +
            ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C7787) *
               C50878 * C50764) *
              C250 +
          ((((C7995 + C7996) * C121 + (C7997 + C7998) * C50778) * C7787 +
            ((C7999 + C8000) * C121 + (C8001 + C8002) * C50778) * C7788 +
            ((C49718 * C599 + C50967 * C607 + C49711 * C598 + C50693 * C606) *
                 C121 +
             (C49718 * C603 + C50967 * C611 + C49711 * C602 + C50693 * C610) *
                 C50778) *
                C7789) *
               C50878 * C50764 -
           (((C8002 + C8001) * C50778 + (C8000 + C7999) * C121) * C7789 +
            ((C7998 + C7997) * C50778 + (C7996 + C7995) * C121) * C7788 +
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50778 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C121) *
                C7787) *
               C50878 * C50981) *
              C251 +
          ((((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                 C121 +
             (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                 C50778) *
                C7787 +
            ((C8003 + C8004) * C121 + (C8005 + C8006) * C50778) * C7788 +
            ((C8007 + C8008) * C121 + (C8009 + C8010) * C50778) * C7789) *
               C50878 * C50981 -
           (((C49711 * C601 + C50693 * C609 + C49718 * C602 + C50967 * C610) *
                 C50778 +
             (C49711 * C597 + C50693 * C605 + C49718 * C598 + C50967 * C606) *
                 C121) *
                C7789 +
            ((C8010 + C8009) * C50778 + (C8008 + C8007) * C121) * C7788 +
            ((C8006 + C8005) * C50778 + (C8004 + C8003) * C121) * C7787) *
               C50878 * C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C121 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50778) *
               C7787 +
           ((C7987 + C7988) * C121 + (C7989 + C7990) * C50778) * C7788 +
           C8335 * C7789) *
              C50878 * C592 -
          (C8459 * C7789 +
           ((C7994 + C7993) * C50778 + (C7992 + C7991) * C121) * C7788 +
           ((C7990 + C7989) * C50778 + (C7988 + C7987) * C121) * C7787) *
              C50878 * C593 +
          (C8335 * C7787 +
           ((C8328 + C8327) * C121 + (C8326 + C8325) * C50778) * C7788 +
           ((C8455 + C8456) * C121 + (C8457 + C8458) * C50778) * C7789) *
              C50878 * C594 -
          (((C49711 * C8436 + C50693 * C8440 + C49718 * C8437 +
             C50967 * C8441) *
                C50778 +
            (C49711 * C8434 + C50693 * C8438 + C49718 * C8435 +
             C50967 * C8439) *
                C121) *
               C7789 +
           ((C8458 + C8457) * C50778 + (C8456 + C8455) * C121) * C7788 +
           C8459 * C7787) *
              C50878 * C595) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C377 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50983 -
           (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
            C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
               C378 -
           (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
            C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
               C50790) *
              C50852 * C50878 * C50748 * C250 +
          ((C117 * C381 + C105 * C387 + C118 * C380 + C106 * C386 +
            C119 * C379 + C107 * C385 + C120 * C383 + C108 * C393) *
               C378 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50983 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C377) +
           (C117 * C391 + C105 * C399 + C118 * C390 + C106 * C398 +
            C119 * C389 + C107 * C397 + C120 * C394 + C108 * C401) *
               C50790) *
              C50852 * C50878 * C50748 * C251 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C377 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50983 -
           (C120 * C384 + C108 * C395 + C119 * C383 + C107 * C393 +
            C118 * C379 + C106 * C385 + C117 * C380 + C105 * C386) *
               C378 -
           (C120 * C396 + C108 * C402 + C119 * C394 + C107 * C401 +
            C118 * C389 + C106 * C397 + C117 * C390 + C105 * C398) *
               C50790) *
              C50852 * C50878 * C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C377 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50983 -
           (C120 * C379 + C108 * C385 + C119 * C380 + C107 * C386 +
            C118 * C381 + C106 * C387 + C117 * C382 + C105 * C388) *
               C378 -
           (C120 * C389 + C108 * C397 + C119 * C390 + C107 * C398 +
            C118 * C391 + C106 * C399 + C117 * C392 + C105 * C400) *
               C50790) *
              C50852 * C50878 * C501 +
          ((C117 * C711 + C105 * C719 + C118 * C712 + C106 * C720 +
            C119 * C713 + C107 * C721 + C120 * C714 + C108 * C722) *
               C378 -
           ((C120 * C259 + C108 * C271 + C119 * C260 + C107 * C272 +
             C118 * C261 + C106 * C273 + C117 * C262 + C105 * C274) *
                C50983 +
            (C120 * C253 + C108 * C263 + C119 * C254 + C107 * C264 +
             C118 * C255 + C106 * C265 + C117 * C256 + C105 * C266) *
                C377) +
           (C117 * C723 + C105 * C735 + C118 * C724 + C106 * C736 +
            C119 * C725 + C107 * C737 + C120 * C726 + C108 * C738) *
               C50790) *
              C50852 * C50878 * C502 +
          ((C117 * C506 + C105 * C511 + C118 * C507 + C106 * C512 +
            C119 * C508 + C107 * C513 + C120 * C509 + C108 * C514) *
               C377 +
           (C117 * C515 + C105 * C521 + C118 * C516 + C106 * C522 +
            C119 * C517 + C107 * C523 + C120 * C518 + C108 * C524) *
               C50983 -
           (C120 * C715 + C108 * C727 + C119 * C716 + C107 * C728 +
            C118 * C717 + C106 * C729 + C117 * C718 + C105 * C730) *
               C378 -
           (C120 * C731 + C108 * C739 + C119 * C732 + C107 * C740 +
            C118 * C733 + C106 * C741 + C117 * C734 + C105 * C742) *
               C50790) *
              C50852 * C50878 * C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C377 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50983 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C378 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C50790) *
               C7787 +
           ((C7987 + C7988) * C377 + (C7989 + C7990) * C50983 -
            (C49711 * C712 + C50693 * C720 + C49718 * C711 + C50967 * C719) *
                C378 -
            (C49711 * C724 + C50693 * C736 + C49718 * C723 + C50967 * C735) *
                C50790) *
               C7788 +
           ((C7991 + C7992) * C377 + (C7993 + C7994) * C50983 -
            (C49711 * C717 + C50693 * C729 + C49718 * C718 + C50967 * C730) *
                C378 -
            (C49711 * C733 + C50693 * C741 + C49718 * C734 + C50967 * C742) *
                C50790) *
               C7789) *
              C50878 * C50748 * C250 +
          (((C49718 * C381 + C50967 * C387 + C49711 * C380 + C50693 * C386) *
                C378 -
            ((C49711 * C135 + C50693 * C145 + C49718 * C134 + C50967 * C144) *
                 C50983 +
             (C49711 * C124 + C50693 * C131 + C49718 * C123 + C50967 * C130) *
                 C377) +
            (C49718 * C391 + C50967 * C399 + C49711 * C390 + C50693 * C398) *
                C50790) *
               C7787 +
           ((C49718 * C712 + C50967 * C720 + C49711 * C713 + C50693 * C721) *
                C378 -
            ((C7998 + C7997) * C50983 + (C7996 + C7995) * C377) +
            (C49718 * C724 + C50967 * C736 + C49711 * C725 + C50693 * C737) *
                C50790) *
               C7788 +
           ((C49718 * C717 + C50967 * C729 + C49711 * C716 + C50693 * C728) *
                C378 -
            ((C8002 + C8001) * C50983 + (C8000 + C7999) * C377) +
            (C49718 * C733 + C50967 * C741 + C49711 * C732 + C50693 * C740) *
                C50790) *
               C7789) *
              C50878 * C50748 * C251 +
          (((C49718 * C124 + C50967 * C131 + C49711 * C125 + C50693 * C132) *
                C377 +
            (C49718 * C135 + C50967 * C145 + C49711 * C136 + C50693 * C146) *
                C50983 -
            (C49711 * C379 + C50693 * C385 + C49718 * C380 + C50967 * C386) *
                C378 -
            (C49711 * C389 + C50693 * C397 + C49718 * C390 + C50967 * C398) *
                C50790) *
               C7787 +
           ((C8003 + C8004) * C377 + (C8005 + C8006) * C50983 -
            (C49711 * C714 + C50693 * C722 + C49718 * C713 + C50967 * C721) *
                C378 -
            (C49711 * C726 + C50693 * C738 + C49718 * C725 + C50967 * C737) *
                C50790) *
               C7788 +
           ((C8007 + C8008) * C377 + (C8009 + C8010) * C50983 -
            (C49711 * C715 + C50693 * C727 + C49718 * C716 + C50967 * C728) *
                C378 -
            (C49711 * C731 + C50693 * C739 + C49718 * C732 + C50967 * C740) *
                C50790) *
               C7789) *
              C50878 * C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C49718 * C122 + C50967 * C129 + C49711 * C123 + C50693 * C130) *
                C377 +
            (C49718 * C133 + C50967 * C143 + C49711 * C134 + C50693 * C144) *
                C50983 -
            (C49711 * C381 + C50693 * C387 + C49718 * C382 + C50967 * C388) *
                C378 -
            (C49711 * C391 + C50693 * C399 + C49718 * C392 + C50967 * C400) *
                C50790) *
               C7787 +
           ((C7987 + C7988) * C377 + (C7989 + C7990) * C50983 -
            (C8640 + C8641) * C378 - (C8642 + C8643) * C50790) *
               C7788 +
           C8658 * C7789) *
              C50878 * C501 +
          (((C8641 + C8640) * C378 -
            ((C7990 + C7989) * C50983 + (C7988 + C7987) * C377) +
            (C8643 + C8642) * C50790) *
               C7787 +
           ((C8646 + C8645) * C378 -
            ((C7994 + C7993) * C50983 + (C7992 + C7991) * C377) +
            (C8648 + C8647) * C50790) *
               C7788 +
           ((C8649 + C8650) * C378 - (C8443 * C50983 + C8444 * C377) +
            (C8651 + C8652) * C50790) *
               C7789) *
              C50878 * C502 +
          (C8658 * C7787 +
           ((C8328 + C8327) * C377 + (C8326 + C8325) * C50983 -
            (C8650 + C8649) * C378 - (C8652 + C8651) * C50790) *
               C7788 +
           ((C8455 + C8456) * C377 + (C8457 + C8458) * C50983 -
            (C49711 * C8605 + C50693 * C8607 + C49718 * C8606 +
             C50967 * C8608) *
                C378 -
            (C49711 * C8609 + C50693 * C8611 + C49718 * C8610 +
             C50967 * C8612) *
                C50790) *
               C7789) *
              C50878 * C503) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50778) *
                C50995 +
            ((C2362 + C2363 + C2364) * C121 +
             (C2365 + C2366 + C2367) * C50778) *
                C50866) *
               C50878 * C1169 -
           (((C2696 + C2697 + C2698) * C50778 +
             (C2699 + C2700 + C2701) * C121) *
                C50866 +
            ((C2367 + C2366 + C2365) * C50778 +
             (C2364 + C2363 + C2362) * C121) *
                C50995) *
               C50878 * C50764) *
              C51026 +
          ((((C2368 + C2369 + C2370) * C121 +
             (C2371 + C2372 + C2373) * C50778) *
                C50995 +
            ((C2702 + C2703 + C2704) * C121 +
             (C2705 + C2706 + C2707) * C50778) *
                C50866) *
               C50878 * C50764 -
           (((C2373 + C2372 + C2371) * C50778 +
             (C2370 + C2369 + C2368) * C121) *
                C50866 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50778 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50995) *
               C50878 * C1169) *
              C51012 +
          ((((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
              C2178 * C126 + C2173 * C138) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
              C2178 * C137 + C2173 * C147) *
                 C50778) *
                C50995 +
            ((C2374 + C2375 + C2376) * C121 +
             (C2377 + C2378 + C2379) * C50778) *
                C50866) *
               C50878 * C1169 -
           (((C2178 * C519 + C2173 * C525 + C2177 * C518 + C2172 * C524 +
              C2176 * C517 + C2171 * C523) *
                 C50778 +
             (C2178 * C510 + C2173 * C520 + C2177 * C509 + C2172 * C514 +
              C2176 * C508 + C2171 * C513) *
                 C121) *
                C50866 +
            ((C2379 + C2378 + C2377) * C50778 +
             (C2376 + C2375 + C2374) * C121) *
                C50995) *
               C50878 * C50764) *
              C1173)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C10644 +
            (C10802 + C10803) * C10645 + C11016 * C10646 + C11017 * C10647) *
               C50878 * C1169 -
           (C11106 * C10647 + C11107 * C10646 + (C10805 + C10804) * C10645 +
            (C10803 + C10802) * C10644) *
               C50878 * C50764) *
              C51026 +
          (((C10808 + C10809) * C10644 + (C10810 + C10811) * C10645 +
            (C10812 + C10813) * C10646 + (C11034 + C11035) * C10647) *
               C50878 * C50764 -
           (C11026 * C10647 + C11027 * C10646 + (C10809 + C10808) * C10645 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C10644) *
               C50878 * C1169) *
              C51012 +
          ((((C10648 * C124 + C50688 * C131) * C121 +
             (C10648 * C135 + C50688 * C145) * C50778) *
                C10644 +
            (C10814 + C10815) * C10645 + (C10816 + C10817) * C10646 +
            (C10818 + C10819) * C10647) *
               C50878 * C1169 -
           (((C10648 * C2808 + C50688 * C2814) * C50778 +
             (C10648 * C2805 + C50688 * C2811) * C121) *
                C10647 +
            (C10819 + C10818) * C10646 + (C10817 + C10816) * C10645 +
            (C10815 + C10814) * C10644) *
               C50878 * C50764) *
              C1173)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50778) *
                C50995 +
            ((C2362 + C2363 + C2364) * C121 +
             (C2365 + C2366 + C2367) * C50778) *
                C50866) *
               C50878 * C51027 -
           (((C2696 + C2697 + C2698) * C50778 +
             (C2699 + C2700 + C2701) * C121) *
                C50866 +
            ((C2367 + C2366 + C2365) * C50778 +
             (C2364 + C2363 + C2362) * C121) *
                C50995) *
               C50878 * C51015 +
           (((C2701 + C2700 + C2699) * C121 +
             (C2698 + C2697 + C2696) * C50778) *
                C50995 +
            ((C2830 + C2831 + C2832) * C121 +
             (C2833 + C2834 + C2835) * C50778) *
                C50866) *
               C50878 * C1274) *
              C1275 +
          ((((C2368 + C2369 + C2370) * C121 +
             (C2371 + C2372 + C2373) * C50778) *
                C50995 +
            ((C2702 + C2703 + C2704) * C121 +
             (C2705 + C2706 + C2707) * C50778) *
                C50866) *
               C50878 * C51015 -
           (((C2373 + C2372 + C2371) * C50778 +
             (C2370 + C2369 + C2368) * C121) *
                C50866 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50778 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50995) *
               C50878 * C51027 -
           (((C2178 * C601 + C2173 * C609 + C2177 * C602 + C2172 * C610 +
              C2176 * C603 + C2171 * C611) *
                 C50778 +
             (C2178 * C597 + C2173 * C605 + C2177 * C598 + C2172 * C606 +
              C2176 * C599 + C2171 * C607) *
                 C121) *
                C50866 +
            ((C2707 + C2706 + C2705) * C50778 +
             (C2704 + C2703 + C2702) * C121) *
                C50995) *
               C50878 * C1274) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C10644 +
            (C10802 + C10803) * C10645 + C11016 * C10646 + C11017 * C10647) *
               C50878 * C51027 -
           (C11106 * C10647 + C11107 * C10646 + (C10805 + C10804) * C10645 +
            (C10803 + C10802) * C10644) *
               C50878 * C51015 +
           (C11016 * C10644 + C11017 * C10645 + (C11033 + C11032) * C10646 +
            (C11114 + C11115) * C10647) *
               C50878 * C1274) *
              C1275 +
          (((C10808 + C10809) * C10644 + (C10810 + C10811) * C10645 +
            (C10812 + C10813) * C10646 + (C11034 + C11035) * C10647) *
               C50878 * C51015 -
           (C11026 * C10647 + C11027 * C10646 + (C10809 + C10808) * C10645 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C10644) *
               C50878 * C51027 -
           (((C10648 * C8436 + C50688 * C8440) * C50778 +
             (C10648 * C8434 + C50688 * C8438) * C121) *
                C10647 +
            (C11035 + C11034) * C10646 + C11026 * C10645 + C11027 * C10644) *
               C50878 * C1274) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C377 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50983 -
             (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
              C2176 * C382 + C2171 * C388) *
                 C378 -
             (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
              C2176 * C392 + C2171 * C400) *
                 C50790) *
                C50995 +
            ((C2362 + C2363 + C2364) * C377 + (C2365 + C2366 + C2367) * C50983 -
             (C3018 + C3019 + C3020) * C378 -
             (C3021 + C3022 + C3023) * C50790) *
                C50866) *
               C50878 * C1169 +
           (((C3020 + C3019 + C3018) * C378 -
             ((C2367 + C2366 + C2365) * C50983 +
              (C2364 + C2363 + C2362) * C377) +
             (C3023 + C3022 + C3021) * C50790) *
                C50995 +
            ((C3024 + C3025 + C3026) * C378 -
             ((C2696 + C2697 + C2698) * C50983 +
              (C2699 + C2700 + C2701) * C377) +
             (C3027 + C3028 + C3029) * C50790) *
                C50866) *
               C50878 * C50764) *
              C1275 +
          ((((C2176 * C381 + C2171 * C387 + C2177 * C380 + C2172 * C386 +
              C2178 * C379 + C2173 * C385) *
                 C378 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C50983 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C377) +
             (C2176 * C391 + C2171 * C399 + C2177 * C390 + C2172 * C398 +
              C2178 * C389 + C2173 * C397) *
                 C50790) *
                C50995 +
            ((C3960 + C3961 + C3962) * C378 -
             ((C2373 + C2372 + C2371) * C50983 +
              (C2370 + C2369 + C2368) * C377) +
             (C3963 + C3964 + C3965) * C50790) *
                C50866) *
               C50878 * C1169 +
           (((C2368 + C2369 + C2370) * C377 + (C2371 + C2372 + C2373) * C50983 -
             (C3962 + C3961 + C3960) * C378 -
             (C3965 + C3964 + C3963) * C50790) *
                C50995 +
            ((C2702 + C2703 + C2704) * C377 + (C2705 + C2706 + C2707) * C50983 -
             (C2178 * C715 + C2173 * C727 + C2177 * C716 + C2172 * C728 +
              C2176 * C717 + C2171 * C729) *
                 C378 -
             (C2178 * C731 + C2173 * C739 + C2177 * C732 + C2172 * C740 +
              C2176 * C733 + C2171 * C741) *
                 C50790) *
                C50866) *
               C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 -
             (C10648 * C382 + C50688 * C388) * C378 -
             (C10648 * C392 + C50688 * C400) * C50790) *
                C10644 +
            (C11218 + C11219 - C11252 - C11253) * C10645 + C11262 * C10646 +
            C11263 * C10647) *
               C50878 * C1169 +
           ((C11252 - (C11219 + C11218) + C11253) * C10644 +
            (C11254 - (C11225 + C11224) + C11255) * C10645 +
            (C11256 - (C11231 + C11230) + C11257) * C10646 +
            (C11258 - (C11238 + C11239) + C11259) * C10647) *
               C50878 * C50764) *
              C1275 +
          ((((C10648 * C381 + C50688 * C387) * C378 -
             ((C10648 * C134 + C50688 * C144) * C50983 +
              (C10648 * C123 + C50688 * C130) * C377) +
             (C10648 * C391 + C50688 * C399) * C50790) *
                C10644 +
            (C11920 - (C11898 + C11899) + C11921) * C10645 +
            (C11922 - (C11904 + C11905) + C11923) * C10646 +
            (C11924 - (C11910 + C11911) + C11925) * C10647) *
               C50878 * C1169 +
           ((C11899 + C11898 - C11920 - C11921) * C10644 +
            (C11905 + C11904 - C11922 - C11923) * C10645 +
            (C11911 + C11910 - C11924 - C11925) * C10646 +
            (C11030 * C377 + C11031 * C50983 -
             (C10648 * C8605 + C50688 * C8607) * C378 -
             (C10648 * C8609 + C50688 * C8611) * C50790) *
                C10647) *
               C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C1511 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C1509 -
             (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
              C2176 * C382 + C2171 * C388) *
                 C1512 -
             (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
              C2176 * C392 + C2171 * C400) *
                 C50790) *
                C50995 +
            ((C2362 + C2363 + C2364) * C1511 + (C2365 + C2366 + C2367) * C1509 -
             (C3018 + C3019 + C3020) * C1512 -
             (C3021 + C3022 + C3023) * C50790) *
                C50866) *
               C50878 * C1169 +
           (((C3020 + C3019 + C3018) * C1512 -
             ((C2367 + C2366 + C2365) * C1509 +
              (C2364 + C2363 + C2362) * C1511) +
             (C3023 + C3022 + C3021) * C50790) *
                C50995 +
            ((C3024 + C3025 + C3026) * C1512 -
             ((C2696 + C2697 + C2698) * C1509 +
              (C2699 + C2700 + C2701) * C1511) +
             (C3027 + C3028 + C3029) * C50790) *
                C50866) *
               C50878 * C50764) *
              C50974 +
          ((((C2176 * C381 + C2171 * C387 + C2177 * C380 + C2172 * C386 +
              C2178 * C379 + C2173 * C385) *
                 C1512 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C1509 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C1511) +
             (C2176 * C391 + C2171 * C399 + C2177 * C390 + C2172 * C398 +
              C2178 * C389 + C2173 * C397) *
                 C50790) *
                C50995 +
            ((C3960 + C3961 + C3962) * C1512 -
             ((C2373 + C2372 + C2371) * C1509 +
              (C2370 + C2369 + C2368) * C1511) +
             (C3963 + C3964 + C3965) * C50790) *
                C50866) *
               C50878 * C1169 +
           (((C2368 + C2369 + C2370) * C1511 + (C2371 + C2372 + C2373) * C1509 -
             (C3962 + C3961 + C3960) * C1512 -
             (C3965 + C3964 + C3963) * C50790) *
                C50995 +
            ((C2702 + C2703 + C2704) * C1511 + (C2705 + C2706 + C2707) * C1509 -
             (C2178 * C715 + C2173 * C727 + C2177 * C716 + C2172 * C728 +
              C2176 * C717 + C2171 * C729) *
                 C1512 -
             (C2178 * C731 + C2173 * C739 + C2177 * C732 + C2172 * C740 +
              C2176 * C733 + C2171 * C741) *
                 C50790) *
                C50866) *
               C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1511 +
             (C10648 * C133 + C50688 * C143) * C1509 -
             (C10648 * C382 + C50688 * C388) * C1512 -
             (C10648 * C392 + C50688 * C400) * C50790) *
                C10644 +
            (C12154 + C12155 - C12156 - C12157) * C10645 +
            (C12158 + C12159 - C12160 - C12161) * C10646 +
            (C12162 + C12163 - C12164 - C12165) * C10647) *
               C50878 * C1169 +
           ((C12156 - (C12155 + C12154) + C12157) * C10644 +
            (C12160 - (C12159 + C12158) + C12161) * C10645 +
            (C12164 - (C12163 + C12162) + C12165) * C10646 +
            (C11250 * C1512 - (C11028 * C1509 + C11029 * C1511) +
             C11251 * C50790) *
                C10647) *
               C50878 * C50764) *
              C50974 +
          ((((C10648 * C381 + C50688 * C387) * C1512 -
             ((C10648 * C134 + C50688 * C144) * C1509 +
              (C10648 * C123 + C50688 * C130) * C1511) +
             (C10648 * C391 + C50688 * C399) * C50790) *
                C10644 +
            (C12166 - (C12167 + C12168) + C12169) * C10645 +
            (C12170 - (C12171 + C12172) + C12173) * C10646 +
            (C12174 - (C12175 + C12176) + C12177) * C10647) *
               C50878 * C1169 +
           ((C12168 + C12167 - C12166 - C12169) * C10644 +
            (C12172 + C12171 - C12170 - C12173) * C10645 +
            (C12176 + C12175 - C12174 - C12177) * C10646 +
            (C11030 * C1511 + C11031 * C1509 -
             (C10648 * C8605 + C50688 * C8607) * C1512 -
             (C10648 * C8609 + C50688 * C8611) * C50790) *
                C10647) *
               C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1511 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C1509 -
            (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
             C2176 * C382 + C2171 * C388) *
                C1512 -
            (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
             C2176 * C392 + C2171 * C400) *
                C50790) *
               C50995 +
           ((C2362 + C2363 + C2364) * C1511 + (C2365 + C2366 + C2367) * C1509 -
            (C3018 + C3019 + C3020) * C1512 -
            (C3021 + C3022 + C3023) * C50790) *
               C50866) *
              C50878 * C51027 +
          (((C3020 + C3019 + C3018) * C1512 -
            ((C2367 + C2366 + C2365) * C1509 +
             (C2364 + C2363 + C2362) * C1511) +
            (C3023 + C3022 + C3021) * C50790) *
               C50995 +
           ((C3024 + C3025 + C3026) * C1512 -
            ((C2696 + C2697 + C2698) * C1509 +
             (C2699 + C2700 + C2701) * C1511) +
            (C3027 + C3028 + C3029) * C50790) *
               C50866) *
              C50878 * C51015 +
          (((C2701 + C2700 + C2699) * C1511 + (C2698 + C2697 + C2696) * C1509 -
            (C3026 + C3025 + C3024) * C1512 -
            (C3029 + C3028 + C3027) * C50790) *
               C50995 +
           ((C2830 + C2831 + C2832) * C1511 + (C2833 + C2834 + C2835) * C1509 -
            (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
             C2176 * C2983 + C2171 * C2986) *
                C1512 -
            (C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
             C2176 * C2989 + C2171 * C2992) *
                C50790) *
               C50866) *
              C50878 * C1274) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C1511 +
            (C10648 * C133 + C50688 * C143) * C1509 -
            (C10648 * C382 + C50688 * C388) * C1512 -
            (C10648 * C392 + C50688 * C400) * C50790) *
               C10644 +
           (C12154 + C12155 - C12156 - C12157) * C10645 + C12512 * C10646 +
           C12513 * C10647) *
              C50878 * C51027 +
          ((C12156 - (C12155 + C12154) + C12157) * C10644 +
           (C12160 - (C12159 + C12158) + C12161) * C10645 +
           (C12164 - (C12163 + C12162) + C12165) * C10646 +
           (C12506 - (C12507 + C12508) + C12509) * C10647) *
              C50878 * C51015 +
          (C12512 * C10644 + C12513 * C10645 +
           (C12508 + C12507 - C12506 - C12509) * C10646 +
           (C11112 * C1511 + C11113 * C1509 -
            (C10648 * C11213 + C50688 * C11214) * C1512 -
            (C10648 * C11215 + C50688 * C11216) * C50790) *
               C10647) *
              C50878 * C1274) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1744 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C51028 -
            (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
             C2176 * C382 + C2171 * C388) *
                C1745 -
            (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
             C2176 * C392 + C2171 * C400) *
                C51018 +
            (C2176 * C847 + C2171 * C852 + C2177 * C848 + C2172 * C853 +
             C2178 * C849 + C2173 * C854) *
                C1746 +
            (C2176 * C856 + C2171 * C862 + C2177 * C857 + C2172 * C863 +
             C2178 * C858 + C2173 * C864) *
                C1743) *
               C50995 +
           ((C2362 + C2363 + C2364) * C1744 + (C2365 + C2366 + C2367) * C51028 -
            (C3018 + C3019 + C3020) * C1745 - (C3021 + C3022 + C3023) * C51018 +
            (C3346 + C3347 + C3348) * C1746 + (C3349 + C3350 + C3351) * C1743) *
               C50866) *
              C50878 * C1169 +
          (((C3020 + C3019 + C3018) * C1745 -
            ((C2367 + C2366 + C2365) * C51028 +
             (C2364 + C2363 + C2362) * C1744) +
            (C3023 + C3022 + C3021) * C51018 - (C3348 + C3347 + C3346) * C1746 -
            (C3351 + C3350 + C3349) * C1743) *
               C50995 +
           ((C3024 + C3025 + C3026) * C1745 -
            ((C2696 + C2697 + C2698) * C51028 +
             (C2699 + C2700 + C2701) * C1744) +
            (C3027 + C3028 + C3029) * C51018 -
            (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
             C2176 * C3323 + C2171 * C3326) *
                C1746 -
            (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
             C2176 * C3329 + C2171 * C3332) *
                C1743) *
               C50866) *
              C50878 * C50764) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C1744 +
            (C10648 * C133 + C50688 * C143) * C51028 -
            (C10648 * C382 + C50688 * C388) * C1745 -
            (C10648 * C392 + C50688 * C400) * C51018 +
            (C10648 * C847 + C50688 * C852) * C1746 +
            (C10648 * C856 + C50688 * C862) * C1743) *
               C10644 +
           (C12612 + C12613 - C12614 - C12615 + C12616 + C12617) * C10645 +
           (C12618 + C12619 - C12620 - C12621 + C12622 + C12623) * C10646 +
           (C12624 + C12625 - C12626 - C12627 + C12628 + C12629) * C10647) *
              C50878 * C1169 +
          ((C12614 - (C12613 + C12612) + C12615 - C12616 - C12617) * C10644 +
           (C12620 - (C12619 + C12618) + C12621 - C12622 - C12623) * C10645 +
           (C12626 - (C12625 + C12624) + C12627 - C12628 - C12629) * C10646 +
           (C11250 * C1745 - (C11028 * C51028 + C11029 * C1744) +
            C11251 * C51018 - (C10648 * C11459 + C50688 * C11460) * C1746 -
            (C10648 * C11461 + C50688 * C11462) * C1743) *
               C10647) *
              C50878 * C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50778) *
                C50995 +
            ((C2362 + C2363 + C2364) * C121 +
             (C2365 + C2366 + C2367) * C50778) *
                C50866) *
               C50878 * C501 -
           (((C2696 + C2697 + C2698) * C50778 +
             (C2699 + C2700 + C2701) * C121) *
                C50866 +
            ((C2367 + C2366 + C2365) * C50778 +
             (C2364 + C2363 + C2362) * C121) *
                C50995) *
               C50878 * C502 +
           (((C2701 + C2700 + C2699) * C121 +
             (C2698 + C2697 + C2696) * C50778) *
                C50995 +
            ((C2176 * C600 + C2171 * C608 + C2177 * C599 + C2172 * C607 +
              C2178 * C598 + C2173 * C606) *
                 C121 +
             (C2176 * C604 + C2171 * C612 + C2177 * C603 + C2172 * C611 +
              C2178 * C602 + C2173 * C610) *
                 C50778) *
                C50866) *
               C50878 * C503) *
              C50974 +
          ((((C2368 + C2369 + C2370) * C121 +
             (C2371 + C2372 + C2373) * C50778) *
                C50995 +
            ((C2702 + C2703 + C2704) * C121 +
             (C2705 + C2706 + C2707) * C50778) *
                C50866) *
               C50878 * C502 -
           (((C2373 + C2372 + C2371) * C50778 +
             (C2370 + C2369 + C2368) * C121) *
                C50866 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50778 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50995) *
               C50878 * C501 -
           (((C2178 * C601 + C2173 * C609 + C2177 * C602 + C2172 * C610 +
              C2176 * C603 + C2171 * C611) *
                 C50778 +
             (C2178 * C597 + C2173 * C605 + C2177 * C598 + C2172 * C606 +
              C2176 * C599 + C2171 * C607) *
                 C121) *
                C50866 +
            ((C2707 + C2706 + C2705) * C50778 +
             (C2704 + C2703 + C2702) * C121) *
                C50995) *
               C50878 * C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50778) *
               C50995 +
           ((C2176 * C256 + C2171 * C266 + C2177 * C255 + C2172 * C265 +
             C2178 * C254 + C2173 * C264) *
                C121 +
            (C2176 * C262 + C2171 * C274 + C2177 * C261 + C2172 * C273 +
             C2178 * C260 + C2173 * C272) *
                C50778) *
               C50866) *
              C50878 * C50748 * C113 -
          (((C2178 * C259 + C2173 * C271 + C2177 * C260 + C2172 * C272 +
             C2176 * C261 + C2171 * C273) *
                C50778 +
            (C2178 * C253 + C2173 * C263 + C2177 * C254 + C2172 * C264 +
             C2176 * C255 + C2171 * C265) *
                C121) *
               C50866 +
           ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
             C2176 * C134 + C2171 * C144) *
                C50778 +
            (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
             C2176 * C123 + C2171 * C130) *
                C121) *
               C50995) *
              C50878 * C50748 * C114 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C121 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50778) *
               C50995 +
           ((C2176 * C254 + C2171 * C264 + C2177 * C253 + C2172 * C263 +
             C2178 * C257 + C2173 * C267) *
                C121 +
            (C2176 * C260 + C2171 * C272 + C2177 * C259 + C2172 * C271 +
             C2178 * C268 + C2173 * C275) *
                C50778) *
               C50866) *
              C50878 * C50748 * C115 -
          (((C2178 * C269 + C2173 * C276 + C2177 * C268 + C2172 * C275 +
             C2176 * C259 + C2171 * C271) *
                C50778 +
            (C2178 * C258 + C2173 * C270 + C2177 * C257 + C2172 * C267 +
             C2176 * C253 + C2171 * C263) *
                C121) *
               C50866 +
           ((C2178 * C140 + C2173 * C148 + C2177 * C137 + C2172 * C147 +
             C2176 * C136 + C2171 * C146) *
                C50778 +
            (C2178 * C127 + C2173 * C139 + C2177 * C126 + C2172 * C138 +
             C2176 * C125 + C2171 * C132) *
                C121) *
               C50995) *
              C50878 * C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C844 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C841 -
            (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
             C2176 * C382 + C2171 * C388) *
                C845 -
            (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
             C2176 * C392 + C2171 * C400) *
                C842 +
            (C2176 * C847 + C2171 * C852 + C2177 * C848 + C2172 * C853 +
             C2178 * C849 + C2173 * C854) *
                C846 +
            (C2176 * C856 + C2171 * C862 + C2177 * C857 + C2172 * C863 +
             C2178 * C858 + C2173 * C864) *
                C843) *
               C50995 +
           ((C2362 + C2363 + C2364) * C844 + (C2365 + C2366 + C2367) * C841 -
            (C3018 + C3019 + C3020) * C845 - (C3021 + C3022 + C3023) * C842 +
            (C2176 * C968 + C2171 * C972 + C2177 * C967 + C2172 * C971 +
             C2178 * C966 + C2173 * C970) *
                C846 +
            (C2176 * C976 + C2171 * C980 + C2177 * C975 + C2172 * C979 +
             C2178 * C974 + C2173 * C978) *
                C843) *
               C50866) *
              C50878 * C50748 * C50974 +
          (((C2176 * C381 + C2171 * C387 + C2177 * C380 + C2172 * C386 +
             C2178 * C379 + C2173 * C385) *
                C845 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C841 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C844) +
            (C2176 * C391 + C2171 * C399 + C2177 * C390 + C2172 * C398 +
             C2178 * C389 + C2173 * C397) *
                C842 -
            (C2178 * C850 + C2173 * C855 + C2177 * C849 + C2172 * C854 +
             C2176 * C848 + C2171 * C853) *
                C846 -
            (C2178 * C859 + C2173 * C865 + C2177 * C858 + C2172 * C864 +
             C2176 * C857 + C2171 * C863) *
                C843) *
               C50995 +
           ((C2176 * C712 + C2171 * C720 + C2177 * C713 + C2172 * C721 +
             C2178 * C714 + C2173 * C722) *
                C845 -
            ((C2373 + C2372 + C2371) * C841 + (C2370 + C2369 + C2368) * C844) +
            (C2176 * C724 + C2171 * C736 + C2177 * C725 + C2172 * C737 +
             C2178 * C726 + C2173 * C738) *
                C842 -
            (C2178 * C965 + C2173 * C969 + C2177 * C966 + C2172 * C970 +
             C2176 * C967 + C2171 * C971) *
                C846 -
            (C2178 * C973 + C2173 * C977 + C2177 * C974 + C2172 * C978 +
             C2176 * C975 + C2171 * C979) *
                C843) *
               C50866) *
              C50878 * C50748 * C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C121 +
            (C10648 * C133 + C50688 * C143) * C50778) *
               C10644 +
           ((C10648 * C256 + C50688 * C266) * C121 +
            (C10648 * C262 + C50688 * C274) * C50778) *
               C10645 +
           ((C10648 * C506 + C50688 * C511) * C121 +
            (C10648 * C515 + C50688 * C521) * C50778) *
               C10646 +
           ((C10648 * C600 + C50688 * C608) * C121 +
            (C10648 * C604 + C50688 * C612) * C50778) *
               C10647) *
              C50878 * C50748 * C113 -
          (((C10648 * C603 + C50688 * C611) * C50778 +
            (C10648 * C599 + C50688 * C607) * C121) *
               C10647 +
           ((C10648 * C516 + C50688 * C522) * C50778 +
            (C10648 * C507 + C50688 * C512) * C121) *
               C10646 +
           ((C10648 * C261 + C50688 * C273) * C50778 +
            (C10648 * C255 + C50688 * C265) * C121) *
               C10645 +
           ((C10648 * C134 + C50688 * C144) * C50778 +
            (C10648 * C123 + C50688 * C130) * C121) *
               C10644) *
              C50878 * C50748 * C114 +
          (((C10648 * C124 + C50688 * C131) * C121 +
            (C10648 * C135 + C50688 * C145) * C50778) *
               C10644 +
           ((C10648 * C254 + C50688 * C264) * C121 +
            (C10648 * C260 + C50688 * C272) * C50778) *
               C10645 +
           ((C10648 * C508 + C50688 * C513) * C121 +
            (C10648 * C517 + C50688 * C523) * C50778) *
               C10646 +
           ((C10648 * C598 + C50688 * C606) * C121 +
            (C10648 * C602 + C50688 * C610) * C50778) *
               C10647) *
              C50878 * C50748 * C115 -
          (((C10648 * C601 + C50688 * C609) * C50778 +
            (C10648 * C597 + C50688 * C605) * C121) *
               C10647 +
           ((C10648 * C518 + C50688 * C524) * C50778 +
            (C10648 * C509 + C50688 * C514) * C121) *
               C10646 +
           ((C10648 * C259 + C50688 * C271) * C50778 +
            (C10648 * C253 + C50688 * C263) * C121) *
               C10645 +
           ((C10648 * C136 + C50688 * C146) * C50778 +
            (C10648 * C125 + C50688 * C132) * C121) *
               C10644) *
              C50878 * C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C10644 +
            (C10802 + C10803) * C10645 + C11016 * C10646 + C11017 * C10647) *
               C50878 * C501 -
           ((C11032 + C11033) * C10647 + (C10807 + C10806) * C10646 +
            (C10805 + C10804) * C10645 + (C10803 + C10802) * C10644) *
               C50878 * C502 +
           (C11016 * C10644 + C11017 * C10645 + (C11033 + C11032) * C10646 +
            ((C10648 * C8435 + C50688 * C8439) * C121 +
             (C10648 * C8437 + C50688 * C8441) * C50778) *
                C10647) *
               C50878 * C503) *
              C50974 +
          (((C10808 + C10809) * C10644 + (C10810 + C10811) * C10645 +
            (C10812 + C10813) * C10646 + (C11034 + C11035) * C10647) *
               C50878 * C502 -
           (C11026 * C10647 + C11027 * C10646 + (C10809 + C10808) * C10645 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C10644) *
               C50878 * C501 -
           (((C10648 * C8436 + C50688 * C8440) * C50778 +
             (C10648 * C8434 + C50688 * C8438) * C121) *
                C10647 +
            (C11035 + C11034) * C10646 + C11026 * C10645 + C11027 * C10644) *
               C50878 * C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C844 +
            (C10648 * C133 + C50688 * C143) * C841 -
            (C10648 * C382 + C50688 * C388) * C845 -
            (C10648 * C392 + C50688 * C400) * C842 +
            (C10648 * C847 + C50688 * C852) * C846 +
            (C10648 * C856 + C50688 * C862) * C843) *
               C10644 +
           (C10784 * C844 + C10785 * C841 - C11242 * C845 - C11243 * C842 +
            (C10648 * C968 + C50688 * C972) * C846 +
            (C10648 * C976 + C50688 * C980) * C843) *
               C10645 +
           (C10786 * C844 + C10787 * C841 - C11245 * C845 - C11246 * C842 +
            (C10648 * C3323 + C50688 * C3326) * C846 +
            (C10648 * C3329 + C50688 * C3332) * C843) *
               C10646 +
           (C10788 * C844 + C10789 * C841 - C11248 * C845 - C11249 * C842 +
            (C10648 * C8951 + C50688 * C8953) * C846 +
            (C10648 * C8955 + C50688 * C8957) * C843) *
               C10647) *
              C50878 * C50748 * C50974 +
          (((C10648 * C381 + C50688 * C387) * C845 -
            ((C10648 * C134 + C50688 * C144) * C841 +
             (C10648 * C123 + C50688 * C130) * C844) +
            (C10648 * C391 + C50688 * C399) * C842 -
            (C10648 * C848 + C50688 * C853) * C846 -
            (C10648 * C857 + C50688 * C863) * C843) *
               C10644 +
           ((C10648 * C712 + C50688 * C720) * C845 -
            (C10791 * C841 + C10790 * C844) +
            (C10648 * C724 + C50688 * C736) * C842 -
            (C10648 * C967 + C50688 * C971) * C846 -
            (C10648 * C975 + C50688 * C979) * C843) *
               C10645 +
           ((C10648 * C717 + C50688 * C729) * C845 -
            (C10793 * C841 + C10792 * C844) +
            (C10648 * C733 + C50688 * C741) * C842 -
            (C10648 * C3322 + C50688 * C3325) * C846 -
            (C10648 * C3328 + C50688 * C3331) * C843) *
               C10646 +
           ((C10648 * C2982 + C50688 * C2985) * C845 -
            (C10795 * C841 + C10794 * C844) +
            (C10648 * C2988 + C50688 * C2991) * C842 -
            (C10648 * C8950 + C50688 * C8952) * C846 -
            (C10648 * C8954 + C50688 * C8956) * C843) *
               C10647) *
              C50878 * C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50778) *
               C50995 +
           ((C2362 + C2363 + C2364) * C121 + (C2365 + C2366 + C2367) * C50778) *
               C50866) *
              C50878 * C592 -
          (((C2696 + C2697 + C2698) * C50778 + (C2699 + C2700 + C2701) * C121) *
               C50866 +
           ((C2367 + C2366 + C2365) * C50778 + (C2364 + C2363 + C2362) * C121) *
               C50995) *
              C50878 * C593 +
          (((C2701 + C2700 + C2699) * C121 + (C2698 + C2697 + C2696) * C50778) *
               C50995 +
           ((C2830 + C2831 + C2832) * C121 + (C2833 + C2834 + C2835) * C50778) *
               C50866) *
              C50878 * C594 -
          (((C2178 * C2808 + C2173 * C2814 + C2177 * C2809 + C2172 * C2815 +
             C2176 * C2810 + C2171 * C2816) *
                C50778 +
            (C2178 * C2805 + C2173 * C2811 + C2177 * C2806 + C2172 * C2812 +
             C2176 * C2807 + C2171 * C2813) *
                C121) *
               C50866 +
           ((C2835 + C2834 + C2833) * C50778 + (C2832 + C2831 + C2830) * C121) *
               C50995) *
              C50878 * C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50778) *
                C50995 +
            ((C2362 + C2363 + C2364) * C121 +
             (C2365 + C2366 + C2367) * C50778) *
                C50866) *
               C50878 * C50981 -
           (((C2178 * C517 + C2173 * C523 + C2177 * C516 + C2172 * C522 +
              C2176 * C515 + C2171 * C521) *
                 C50778 +
             (C2178 * C508 + C2173 * C513 + C2177 * C507 + C2172 * C512 +
              C2176 * C506 + C2171 * C511) *
                 C121) *
                C50866 +
            ((C2367 + C2366 + C2365) * C50778 +
             (C2364 + C2363 + C2362) * C121) *
                C50995) *
               C50878 * C50764) *
              C250 +
          ((((C2368 + C2369 + C2370) * C121 +
             (C2371 + C2372 + C2373) * C50778) *
                C50995 +
            ((C2176 * C507 + C2171 * C512 + C2177 * C508 + C2172 * C513 +
              C2178 * C509 + C2173 * C514) *
                 C121 +
             (C2176 * C516 + C2171 * C522 + C2177 * C517 + C2172 * C523 +
              C2178 * C518 + C2173 * C524) *
                 C50778) *
                C50866) *
               C50878 * C50764 -
           (((C2373 + C2372 + C2371) * C50778 +
             (C2370 + C2369 + C2368) * C121) *
                C50866 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50778 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50995) *
               C50878 * C50981) *
              C251 +
          ((((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
              C2178 * C126 + C2173 * C138) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
              C2178 * C137 + C2173 * C147) *
                 C50778) *
                C50995 +
            ((C2374 + C2375 + C2376) * C121 +
             (C2377 + C2378 + C2379) * C50778) *
                C50866) *
               C50878 * C50981 -
           (((C2178 * C519 + C2173 * C525 + C2177 * C518 + C2172 * C524 +
              C2176 * C517 + C2171 * C523) *
                 C50778 +
             (C2178 * C510 + C2173 * C520 + C2177 * C509 + C2172 * C514 +
              C2176 * C508 + C2171 * C513) *
                 C121) *
                C50866 +
            ((C2379 + C2378 + C2377) * C50778 +
             (C2376 + C2375 + C2374) * C121) *
                C50995) *
               C50878 * C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C844 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C841 -
            (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
             C2176 * C382 + C2171 * C388) *
                C845 -
            (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
             C2176 * C392 + C2171 * C400) *
                C842 +
            (C2176 * C847 + C2171 * C852 + C2177 * C848 + C2172 * C853 +
             C2178 * C849 + C2173 * C854) *
                C846 +
            (C2176 * C856 + C2171 * C862 + C2177 * C857 + C2172 * C863 +
             C2178 * C858 + C2173 * C864) *
                C843) *
               C50995 +
           ((C2362 + C2363 + C2364) * C844 + (C2365 + C2366 + C2367) * C841 -
            (C3018 + C3019 + C3020) * C845 - (C3021 + C3022 + C3023) * C842 +
            (C3346 + C3347 + C3348) * C846 + (C3349 + C3350 + C3351) * C843) *
               C50866) *
              C50878 * C50981 +
          (((C3020 + C3019 + C3018) * C845 -
            ((C2367 + C2366 + C2365) * C841 + (C2364 + C2363 + C2362) * C844) +
            (C3023 + C3022 + C3021) * C842 - (C3348 + C3347 + C3346) * C846 -
            (C3351 + C3350 + C3349) * C843) *
               C50995 +
           ((C3024 + C3025 + C3026) * C845 -
            ((C2696 + C2697 + C2698) * C841 + (C2699 + C2700 + C2701) * C844) +
            (C3027 + C3028 + C3029) * C842 -
            (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
             C2176 * C3323 + C2171 * C3326) *
                C846 -
            (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
             C2176 * C3329 + C2171 * C3332) *
                C843) *
               C50866) *
              C50878 * C50764) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C10644 +
            (C10802 + C10803) * C10645 + (C10804 + C10805) * C10646 +
            (C10806 + C10807) * C10647) *
               C50878 * C50981 -
           (((C10648 * C2810 + C50688 * C2816) * C50778 +
             (C10648 * C2807 + C50688 * C2813) * C121) *
                C10647 +
            (C10807 + C10806) * C10646 + (C10805 + C10804) * C10645 +
            (C10803 + C10802) * C10644) *
               C50878 * C50764) *
              C250 +
          (((C10808 + C10809) * C10644 + (C10810 + C10811) * C10645 +
            (C10812 + C10813) * C10646 +
            ((C10648 * C2806 + C50688 * C2812) * C121 +
             (C10648 * C2809 + C50688 * C2815) * C50778) *
                C10647) *
               C50878 * C50764 -
           ((C10813 + C10812) * C10647 + (C10811 + C10810) * C10646 +
            (C10809 + C10808) * C10645 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C10644) *
               C50878 * C50981) *
              C251 +
          ((((C10648 * C124 + C50688 * C131) * C121 +
             (C10648 * C135 + C50688 * C145) * C50778) *
                C10644 +
            (C10814 + C10815) * C10645 + (C10816 + C10817) * C10646 +
            (C10818 + C10819) * C10647) *
               C50878 * C50981 -
           (((C10648 * C2808 + C50688 * C2814) * C50778 +
             (C10648 * C2805 + C50688 * C2811) * C121) *
                C10647 +
            (C10819 + C10818) * C10646 + (C10817 + C10816) * C10645 +
            (C10815 + C10814) * C10644) *
               C50878 * C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C121 +
            (C10648 * C133 + C50688 * C143) * C50778) *
               C10644 +
           (C10802 + C10803) * C10645 + C11016 * C10646 + C11017 * C10647) *
              C50878 * C592 -
          (C11106 * C10647 + C11107 * C10646 + (C10805 + C10804) * C10645 +
           (C10803 + C10802) * C10644) *
              C50878 * C593 +
          (C11016 * C10644 + C11017 * C10645 + (C11033 + C11032) * C10646 +
           (C11114 + C11115) * C10647) *
              C50878 * C594 -
          (((C10648 * C11102 + C50688 * C11104) * C50778 +
            (C10648 * C11101 + C50688 * C11103) * C121) *
               C10647 +
           (C11115 + C11114) * C10646 + C11106 * C10645 + C11107 * C10644) *
              C50878 * C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C844 +
            (C10648 * C133 + C50688 * C143) * C841 -
            (C10648 * C382 + C50688 * C388) * C845 -
            (C10648 * C392 + C50688 * C400) * C842 +
            (C10648 * C847 + C50688 * C852) * C846 +
            (C10648 * C856 + C50688 * C862) * C843) *
               C10644 +
           (C11464 + C11465 - C11466 - C11467 + C11494 + C11495) * C10645 +
           (C11472 + C11473 - C11474 - C11475 + C11496 + C11497) * C10646 +
           (C11480 + C11481 - C11482 - C11483 + C11498 + C11499) * C10647) *
              C50878 * C50981 +
          ((C11466 - (C11465 + C11464) + C11467 - C11494 - C11495) * C10644 +
           (C11474 - (C11473 + C11472) + C11475 - C11496 - C11497) * C10645 +
           (C11482 - (C11481 + C11480) + C11483 - C11498 - C11499) * C10646 +
           (C11250 * C845 - (C11028 * C841 + C11029 * C844) + C11251 * C842 -
            (C10648 * C11459 + C50688 * C11460) * C846 -
            (C10648 * C11461 + C50688 * C11462) * C843) *
               C10647) *
              C50878 * C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C377 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50983 -
            (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
             C2176 * C382 + C2171 * C388) *
                C378 -
            (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
             C2176 * C392 + C2171 * C400) *
                C50790) *
               C50995 +
           ((C2362 + C2363 + C2364) * C377 + (C2365 + C2366 + C2367) * C50983 -
            (C3018 + C3019 + C3020) * C378 - (C3021 + C3022 + C3023) * C50790) *
               C50866) *
              C50878 * C501 +
          (((C3020 + C3019 + C3018) * C378 -
            ((C2367 + C2366 + C2365) * C50983 +
             (C2364 + C2363 + C2362) * C377) +
            (C3023 + C3022 + C3021) * C50790) *
               C50995 +
           ((C3024 + C3025 + C3026) * C378 -
            ((C2696 + C2697 + C2698) * C50983 +
             (C2699 + C2700 + C2701) * C377) +
            (C3027 + C3028 + C3029) * C50790) *
               C50866) *
              C50878 * C502 +
          (((C2701 + C2700 + C2699) * C377 + (C2698 + C2697 + C2696) * C50983 -
            (C3026 + C3025 + C3024) * C378 - (C3029 + C3028 + C3027) * C50790) *
               C50995 +
           ((C2830 + C2831 + C2832) * C377 + (C2833 + C2834 + C2835) * C50983 -
            (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
             C2176 * C2983 + C2171 * C2986) *
                C378 -
            (C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
             C2176 * C2989 + C2171 * C2992) *
                C50790) *
               C50866) *
              C50878 * C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C377 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50983 -
            (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
             C2176 * C382 + C2171 * C388) *
                C378 -
            (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
             C2176 * C392 + C2171 * C400) *
                C50790) *
               C50995 +
           ((C2362 + C2363 + C2364) * C377 + (C2365 + C2366 + C2367) * C50983 -
            (C2178 * C713 + C2173 * C721 + C2177 * C712 + C2172 * C720 +
             C2176 * C711 + C2171 * C719) *
                C378 -
            (C2178 * C725 + C2173 * C737 + C2177 * C724 + C2172 * C736 +
             C2176 * C723 + C2171 * C735) *
                C50790) *
               C50866) *
              C50878 * C50748 * C250 +
          (((C2176 * C381 + C2171 * C387 + C2177 * C380 + C2172 * C386 +
             C2178 * C379 + C2173 * C385) *
                C378 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50983 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C377) +
            (C2176 * C391 + C2171 * C399 + C2177 * C390 + C2172 * C398 +
             C2178 * C389 + C2173 * C397) *
                C50790) *
               C50995 +
           ((C2176 * C712 + C2171 * C720 + C2177 * C713 + C2172 * C721 +
             C2178 * C714 + C2173 * C722) *
                C378 -
            ((C2373 + C2372 + C2371) * C50983 +
             (C2370 + C2369 + C2368) * C377) +
            (C2176 * C724 + C2171 * C736 + C2177 * C725 + C2172 * C737 +
             C2178 * C726 + C2173 * C738) *
                C50790) *
               C50866) *
              C50878 * C50748 * C251 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C377 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50983 -
            (C2178 * C383 + C2173 * C393 + C2177 * C379 + C2172 * C385 +
             C2176 * C380 + C2171 * C386) *
                C378 -
            (C2178 * C394 + C2173 * C401 + C2177 * C389 + C2172 * C397 +
             C2176 * C390 + C2171 * C398) *
                C50790) *
               C50995 +
           ((C2374 + C2375 + C2376) * C377 + (C2377 + C2378 + C2379) * C50983 -
            (C2178 * C1407 + C2173 * C1408 + C2177 * C714 + C2172 * C722 +
             C2176 * C713 + C2171 * C721) *
                C378 -
            (C2178 * C1409 + C2173 * C1410 + C2177 * C726 + C2172 * C738 +
             C2176 * C725 + C2171 * C737) *
                C50790) *
               C50866) *
              C50878 * C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
            C2178 * C124 + C2173 * C131) *
               C1051 +
           (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
            C2178 * C135 + C2173 * C145) *
               C1047 -
           (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
            C2176 * C382 + C2171 * C388) *
               C1052 -
           (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
            C2176 * C392 + C2171 * C400) *
               C1048 +
           (C2176 * C847 + C2171 * C852 + C2177 * C848 + C2172 * C853 +
            C2178 * C849 + C2173 * C854) *
               C1053 +
           (C2176 * C856 + C2171 * C862 + C2177 * C857 + C2172 * C863 +
            C2178 * C858 + C2173 * C864) *
               C1049 -
           (C2178 * C1056 + C2173 * C1060 + C2177 * C1057 + C2172 * C1061 +
            C2176 * C1058 + C2171 * C1062) *
               C1054 -
           (C2178 * C1064 + C2173 * C1068 + C2177 * C1065 + C2172 * C1069 +
            C2176 * C1066 + C2171 * C1070) *
               C1050) *
              C50995 +
          ((C2362 + C2363 + C2364) * C1051 + (C2365 + C2366 + C2367) * C1047 -
           (C3018 + C3019 + C3020) * C1052 - (C3021 + C3022 + C3023) * C1048 +
           (C3346 + C3347 + C3348) * C1053 + (C3349 + C3350 + C3351) * C1049 -
           (C2178 * C3449 + C2173 * C3452 + C2177 * C3450 + C2172 * C3453 +
            C2176 * C3451 + C2171 * C3454) *
               C1054 -
           (C2178 * C3455 + C2173 * C3458 + C2177 * C3456 + C2172 * C3459 +
            C2176 * C3457 + C2171 * C3460) *
               C1050) *
              C50866) *
         C50878 * C50748 * C50716) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C377 +
            (C10648 * C133 + C50688 * C143) * C50983 -
            (C10648 * C382 + C50688 * C388) * C378 -
            (C10648 * C392 + C50688 * C400) * C50790) *
               C10644 +
           (C10784 * C377 + C10785 * C50983 -
            (C10648 * C711 + C50688 * C719) * C378 -
            (C10648 * C723 + C50688 * C735) * C50790) *
               C10645 +
           (C10786 * C377 + C10787 * C50983 -
            (C10648 * C718 + C50688 * C730) * C378 -
            (C10648 * C734 + C50688 * C742) * C50790) *
               C10646 +
           (C10788 * C377 + C10789 * C50983 -
            (C10648 * C2983 + C50688 * C2986) * C378 -
            (C10648 * C2989 + C50688 * C2992) * C50790) *
               C10647) *
              C50878 * C50748 * C250 +
          (((C10648 * C381 + C50688 * C387) * C378 -
            ((C10648 * C134 + C50688 * C144) * C50983 +
             (C10648 * C123 + C50688 * C130) * C377) +
            (C10648 * C391 + C50688 * C399) * C50790) *
               C10644 +
           ((C10648 * C712 + C50688 * C720) * C378 -
            (C10791 * C50983 + C10790 * C377) +
            (C10648 * C724 + C50688 * C736) * C50790) *
               C10645 +
           ((C10648 * C717 + C50688 * C729) * C378 -
            (C10793 * C50983 + C10792 * C377) +
            (C10648 * C733 + C50688 * C741) * C50790) *
               C10646 +
           ((C10648 * C2982 + C50688 * C2985) * C378 -
            (C10795 * C50983 + C10794 * C377) +
            (C10648 * C2988 + C50688 * C2991) * C50790) *
               C10647) *
              C50878 * C50748 * C251 +
          (((C10648 * C124 + C50688 * C131) * C377 +
            (C10648 * C135 + C50688 * C145) * C50983 -
            (C10648 * C380 + C50688 * C386) * C378 -
            (C10648 * C390 + C50688 * C398) * C50790) *
               C10644 +
           (C10796 * C377 + C10797 * C50983 -
            (C10648 * C713 + C50688 * C721) * C378 -
            (C10648 * C725 + C50688 * C737) * C50790) *
               C10645 +
           (C10798 * C377 + C10799 * C50983 -
            (C10648 * C716 + C50688 * C728) * C378 -
            (C10648 * C732 + C50688 * C740) * C50790) *
               C10646 +
           (C10800 * C377 + C10801 * C50983 -
            (C10648 * C2981 + C50688 * C2984) * C378 -
            (C10648 * C2987 + C50688 * C2990) * C50790) *
               C10647) *
              C50878 * C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C377 +
            (C10648 * C133 + C50688 * C143) * C50983 -
            (C10648 * C382 + C50688 * C388) * C378 -
            (C10648 * C392 + C50688 * C400) * C50790) *
               C10644 +
           (C11218 + C11219 - C11252 - C11253) * C10645 + C11262 * C10646 +
           C11263 * C10647) *
              C50878 * C501 +
          ((C11252 - (C11219 + C11218) + C11253) * C10644 +
           (C11254 - (C11225 + C11224) + C11255) * C10645 +
           (C11256 - (C11231 + C11230) + C11257) * C10646 +
           (C11258 - (C11238 + C11239) + C11259) * C10647) *
              C50878 * C502 +
          (C11262 * C10644 + C11263 * C10645 +
           (C11239 + C11238 - C11258 - C11259) * C10646 +
           (C11112 * C377 + C11113 * C50983 -
            (C10648 * C11213 + C50688 * C11214) * C378 -
            (C10648 * C11215 + C50688 * C11216) * C50790) *
               C10647) *
              C50878 * C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10648 * C122 + C50688 * C129) * C1051 +
           (C10648 * C133 + C50688 * C143) * C1047 -
           (C10648 * C382 + C50688 * C388) * C1052 -
           (C10648 * C392 + C50688 * C400) * C1048 +
           (C10648 * C847 + C50688 * C852) * C1053 +
           (C10648 * C856 + C50688 * C862) * C1049 -
           (C10648 * C1058 + C50688 * C1062) * C1054 -
           (C10648 * C1066 + C50688 * C1070) * C1050) *
              C10644 +
          (C10784 * C1051 + C10785 * C1047 - C11242 * C1052 - C11243 * C1048 +
           C11488 * C1053 + C11489 * C1049 -
           (C10648 * C3451 + C50688 * C3454) * C1054 -
           (C10648 * C3457 + C50688 * C3460) * C1050) *
              C10645 +
          (C10786 * C1051 + C10787 * C1047 - C11245 * C1052 - C11246 * C1048 +
           C11490 * C1053 + C11491 * C1049 -
           (C10648 * C9081 + C50688 * C9083) * C1054 -
           (C10648 * C9085 + C50688 * C9087) * C1050) *
              C10646 +
          (C10788 * C1051 + C10789 * C1047 - C11248 * C1052 - C11249 * C1048 +
           C11492 * C1053 + C11493 * C1049 -
           (C10648 * C11565 + C50688 * C11566) * C1054 -
           (C10648 * C11567 + C50688 * C11568) * C1050) *
              C10647) *
         C50878 * C50748 * C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1511 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C1509 -
            (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
             C2176 * C382 + C2171 * C388) *
                C1512 -
            (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
             C2176 * C392 + C2171 * C400) *
                C50790) *
               C50995 +
           ((C2362 + C2363 + C2364) * C1511 + (C2365 + C2366 + C2367) * C1509 -
            (C3018 + C3019 + C3020) * C1512 -
            (C3021 + C3022 + C3023) * C50790) *
               C50866) *
              C50878 * C50748 * C51026 +
          (((C2176 * C381 + C2171 * C387 + C2177 * C380 + C2172 * C386 +
             C2178 * C379 + C2173 * C385) *
                C1512 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C1509 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C1511) +
            (C2176 * C391 + C2171 * C399 + C2177 * C390 + C2172 * C398 +
             C2178 * C389 + C2173 * C397) *
                C50790) *
               C50995 +
           ((C3960 + C3961 + C3962) * C1512 -
            ((C2373 + C2372 + C2371) * C1509 +
             (C2370 + C2369 + C2368) * C1511) +
            (C3963 + C3964 + C3965) * C50790) *
               C50866) *
              C50878 * C50748 * C51012 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C1511 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C1509 -
            (C2178 * C383 + C2173 * C393 + C2177 * C379 + C2172 * C385 +
             C2176 * C380 + C2171 * C386) *
                C1512 -
            (C2178 * C394 + C2173 * C401 + C2177 * C389 + C2172 * C397 +
             C2176 * C390 + C2171 * C398) *
                C50790) *
               C50995 +
           ((C2374 + C2375 + C2376) * C1511 + (C2377 + C2378 + C2379) * C1509 -
            (C2178 * C1407 + C2173 * C1408 + C2177 * C714 + C2172 * C722 +
             C2176 * C713 + C2171 * C721) *
                C1512 -
            (C2178 * C1409 + C2173 * C1410 + C2177 * C726 + C2172 * C738 +
             C2176 * C725 + C2171 * C737) *
                C50790) *
               C50866) *
              C50878 * C50748 * C1173)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C1511 +
            (C10648 * C133 + C50688 * C143) * C1509 -
            (C10648 * C382 + C50688 * C388) * C1512 -
            (C10648 * C392 + C50688 * C400) * C50790) *
               C10644 +
           (C10784 * C1511 + C10785 * C1509 - C11242 * C1512 -
            C11243 * C50790) *
               C10645 +
           (C10786 * C1511 + C10787 * C1509 - C11245 * C1512 -
            C11246 * C50790) *
               C10646 +
           (C10788 * C1511 + C10789 * C1509 - C11248 * C1512 -
            C11249 * C50790) *
               C10647) *
              C50878 * C50748 * C51026 +
          (((C10648 * C381 + C50688 * C387) * C1512 -
            ((C10648 * C134 + C50688 * C144) * C1509 +
             (C10648 * C123 + C50688 * C130) * C1511) +
            (C10648 * C391 + C50688 * C399) * C50790) *
               C10644 +
           (C11914 * C1512 - (C10791 * C1509 + C10790 * C1511) +
            C11915 * C50790) *
               C10645 +
           (C11916 * C1512 - (C10793 * C1509 + C10792 * C1511) +
            C11917 * C50790) *
               C10646 +
           (C11918 * C1512 - (C10795 * C1509 + C10794 * C1511) +
            C11919 * C50790) *
               C10647) *
              C50878 * C50748 * C51012 +
          (((C10648 * C124 + C50688 * C131) * C1511 +
            (C10648 * C135 + C50688 * C145) * C1509 -
            (C10648 * C380 + C50688 * C386) * C1512 -
            (C10648 * C390 + C50688 * C398) * C50790) *
               C10644 +
           (C10796 * C1511 + C10797 * C1509 -
            (C10648 * C713 + C50688 * C721) * C1512 -
            (C10648 * C725 + C50688 * C737) * C50790) *
               C10645 +
           (C10798 * C1511 + C10799 * C1509 -
            (C10648 * C716 + C50688 * C728) * C1512 -
            (C10648 * C732 + C50688 * C740) * C50790) *
               C10646 +
           (C10800 * C1511 + C10801 * C1509 -
            (C10648 * C2981 + C50688 * C2984) * C1512 -
            (C10648 * C2987 + C50688 * C2990) * C50790) *
               C10647) *
              C50878 * C50748 * C1173)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C1511 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C1509 -
             (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
              C2176 * C382 + C2171 * C388) *
                 C1512 -
             (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
              C2176 * C392 + C2171 * C400) *
                 C50790) *
                C50995 +
            ((C2362 + C2363 + C2364) * C1511 + (C2365 + C2366 + C2367) * C1509 -
             (C3018 + C3019 + C3020) * C1512 -
             (C3021 + C3022 + C3023) * C50790) *
                C50866) *
               C50878 * C50981 +
           (((C3020 + C3019 + C3018) * C1512 -
             ((C2367 + C2366 + C2365) * C1509 +
              (C2364 + C2363 + C2362) * C1511) +
             (C3023 + C3022 + C3021) * C50790) *
                C50995 +
            ((C3024 + C3025 + C3026) * C1512 -
             ((C2696 + C2697 + C2698) * C1509 +
              (C2699 + C2700 + C2701) * C1511) +
             (C3027 + C3028 + C3029) * C50790) *
                C50866) *
               C50878 * C50764) *
              C1275 +
          ((((C2176 * C381 + C2171 * C387 + C2177 * C380 + C2172 * C386 +
              C2178 * C379 + C2173 * C385) *
                 C1512 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C1509 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C1511) +
             (C2176 * C391 + C2171 * C399 + C2177 * C390 + C2172 * C398 +
              C2178 * C389 + C2173 * C397) *
                 C50790) *
                C50995 +
            ((C3960 + C3961 + C3962) * C1512 -
             ((C2373 + C2372 + C2371) * C1509 +
              (C2370 + C2369 + C2368) * C1511) +
             (C3963 + C3964 + C3965) * C50790) *
                C50866) *
               C50878 * C50981 +
           (((C2368 + C2369 + C2370) * C1511 + (C2371 + C2372 + C2373) * C1509 -
             (C3962 + C3961 + C3960) * C1512 -
             (C3965 + C3964 + C3963) * C50790) *
                C50995 +
            ((C2702 + C2703 + C2704) * C1511 + (C2705 + C2706 + C2707) * C1509 -
             (C2178 * C715 + C2173 * C727 + C2177 * C716 + C2172 * C728 +
              C2176 * C717 + C2171 * C729) *
                 C1512 -
             (C2178 * C731 + C2173 * C739 + C2177 * C732 + C2172 * C740 +
              C2176 * C733 + C2171 * C741) *
                 C50790) *
                C50866) *
               C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1511 +
             (C10648 * C133 + C50688 * C143) * C1509 -
             (C10648 * C382 + C50688 * C388) * C1512 -
             (C10648 * C392 + C50688 * C400) * C50790) *
                C10644 +
            (C12154 + C12155 - C12156 - C12157) * C10645 +
            (C12158 + C12159 - C12160 - C12161) * C10646 +
            (C12162 + C12163 - C12164 - C12165) * C10647) *
               C50878 * C50981 +
           ((C12156 - (C12155 + C12154) + C12157) * C10644 +
            (C12160 - (C12159 + C12158) + C12161) * C10645 +
            (C12164 - (C12163 + C12162) + C12165) * C10646 +
            (C11250 * C1512 - (C11028 * C1509 + C11029 * C1511) +
             C11251 * C50790) *
                C10647) *
               C50878 * C50764) *
              C1275 +
          ((((C10648 * C381 + C50688 * C387) * C1512 -
             ((C10648 * C134 + C50688 * C144) * C1509 +
              (C10648 * C123 + C50688 * C130) * C1511) +
             (C10648 * C391 + C50688 * C399) * C50790) *
                C10644 +
            (C12166 - (C12167 + C12168) + C12169) * C10645 +
            (C12170 - (C12171 + C12172) + C12173) * C10646 +
            (C12174 - (C12175 + C12176) + C12177) * C10647) *
               C50878 * C50981 +
           ((C12168 + C12167 - C12166 - C12169) * C10644 +
            (C12172 + C12171 - C12170 - C12173) * C10645 +
            (C12176 + C12175 - C12174 - C12177) * C10646 +
            (C11030 * C1511 + C11031 * C1509 -
             (C10648 * C8605 + C50688 * C8607) * C1512 -
             (C10648 * C8609 + C50688 * C8611) * C50790) *
                C10647) *
               C50878 * C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1744 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C51028 -
            (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
             C2176 * C382 + C2171 * C388) *
                C1745 -
            (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
             C2176 * C392 + C2171 * C400) *
                C51018 +
            (C2176 * C847 + C2171 * C852 + C2177 * C848 + C2172 * C853 +
             C2178 * C849 + C2173 * C854) *
                C1746 +
            (C2176 * C856 + C2171 * C862 + C2177 * C857 + C2172 * C863 +
             C2178 * C858 + C2173 * C864) *
                C1743) *
               C50995 +
           ((C2362 + C2363 + C2364) * C1744 + (C2365 + C2366 + C2367) * C51028 -
            (C3018 + C3019 + C3020) * C1745 - (C3021 + C3022 + C3023) * C51018 +
            (C3346 + C3347 + C3348) * C1746 + (C3349 + C3350 + C3351) * C1743) *
               C50866) *
              C50878 * C50748 * C1275 +
          (((C2176 * C381 + C2171 * C387 + C2177 * C380 + C2172 * C386 +
             C2178 * C379 + C2173 * C385) *
                C1745 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C51028 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C1744) +
            (C2176 * C391 + C2171 * C399 + C2177 * C390 + C2172 * C398 +
             C2178 * C389 + C2173 * C397) *
                C51018 -
            (C2178 * C850 + C2173 * C855 + C2177 * C849 + C2172 * C854 +
             C2176 * C848 + C2171 * C853) *
                C1746 -
            (C2178 * C859 + C2173 * C865 + C2177 * C858 + C2172 * C864 +
             C2176 * C857 + C2171 * C863) *
                C1743) *
               C50995 +
           ((C3960 + C3961 + C3962) * C1745 -
            ((C2373 + C2372 + C2371) * C51028 +
             (C2370 + C2369 + C2368) * C1744) +
            (C3963 + C3964 + C3965) * C51018 -
            (C2178 * C965 + C2173 * C969 + C2177 * C966 + C2172 * C970 +
             C2176 * C967 + C2171 * C971) *
                C1746 -
            (C2178 * C973 + C2173 * C977 + C2177 * C974 + C2172 * C978 +
             C2176 * C975 + C2171 * C979) *
                C1743) *
               C50866) *
              C50878 * C50748 * C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C1744 +
            (C10648 * C133 + C50688 * C143) * C51028 -
            (C10648 * C382 + C50688 * C388) * C1745 -
            (C10648 * C392 + C50688 * C400) * C51018 +
            (C10648 * C847 + C50688 * C852) * C1746 +
            (C10648 * C856 + C50688 * C862) * C1743) *
               C10644 +
           (C10784 * C1744 + C10785 * C51028 - C11242 * C1745 -
            C11243 * C51018 + C11488 * C1746 + C11489 * C1743) *
               C10645 +
           (C10786 * C1744 + C10787 * C51028 - C11245 * C1745 -
            C11246 * C51018 + C11490 * C1746 + C11491 * C1743) *
               C10646 +
           (C10788 * C1744 + C10789 * C51028 - C11248 * C1745 -
            C11249 * C51018 + C11492 * C1746 + C11493 * C1743) *
               C10647) *
              C50878 * C50748 * C1275 +
          (((C10648 * C381 + C50688 * C387) * C1745 -
            ((C10648 * C134 + C50688 * C144) * C51028 +
             (C10648 * C123 + C50688 * C130) * C1744) +
            (C10648 * C391 + C50688 * C399) * C51018 -
            (C10648 * C848 + C50688 * C853) * C1746 -
            (C10648 * C857 + C50688 * C863) * C1743) *
               C10644 +
           (C11914 * C1745 - (C10791 * C51028 + C10790 * C1744) +
            C11915 * C51018 - (C10648 * C967 + C50688 * C971) * C1746 -
            (C10648 * C975 + C50688 * C979) * C1743) *
               C10645 +
           (C11916 * C1745 - (C10793 * C51028 + C10792 * C1744) +
            C11917 * C51018 - (C10648 * C3322 + C50688 * C3325) * C1746 -
            (C10648 * C3328 + C50688 * C3331) * C1743) *
               C10646 +
           (C11918 * C1745 - (C10795 * C51028 + C10794 * C1744) +
            C11919 * C51018 - (C10648 * C8950 + C50688 * C8952) * C1746 -
            (C10648 * C8954 + C50688 * C8956) * C1743) *
               C10647) *
              C50878 * C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50778) *
               C50995 +
           ((C2176 * C256 + C2171 * C266 + C2177 * C255 + C2172 * C265 +
             C2178 * C254 + C2173 * C264) *
                C121 +
            (C2176 * C262 + C2171 * C274 + C2177 * C261 + C2172 * C273 +
             C2178 * C260 + C2173 * C272) *
                C50778) *
               C50866) *
              C50878 * C50748 * C113 -
          (((C2178 * C259 + C2173 * C271 + C2177 * C260 + C2172 * C272 +
             C2176 * C261 + C2171 * C273) *
                C50778 +
            (C2178 * C253 + C2173 * C263 + C2177 * C254 + C2172 * C264 +
             C2176 * C255 + C2171 * C265) *
                C121) *
               C50866 +
           ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
             C2176 * C134 + C2171 * C144) *
                C50778 +
            (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
             C2176 * C123 + C2171 * C130) *
                C121) *
               C50995) *
              C50878 * C50748 * C114 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C121 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50778) *
               C50995 +
           ((C2176 * C254 + C2171 * C264 + C2177 * C253 + C2172 * C263 +
             C2178 * C257 + C2173 * C267) *
                C121 +
            (C2176 * C260 + C2171 * C272 + C2177 * C259 + C2172 * C271 +
             C2178 * C268 + C2173 * C275) *
                C50778) *
               C50866) *
              C50878 * C50748 * C115 -
          (((C2178 * C269 + C2173 * C276 + C2177 * C268 + C2172 * C275 +
             C2176 * C259 + C2171 * C271) *
                C50778 +
            (C2178 * C258 + C2173 * C270 + C2177 * C257 + C2172 * C267 +
             C2176 * C253 + C2171 * C263) *
                C121) *
               C50866 +
           ((C2178 * C140 + C2173 * C148 + C2177 * C137 + C2172 * C147 +
             C2176 * C136 + C2171 * C146) *
                C50778 +
            (C2178 * C127 + C2173 * C139 + C2177 * C126 + C2172 * C138 +
             C2176 * C125 + C2171 * C132) *
                C121) *
               C50995) *
              C50878 * C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50778) *
                C50995 +
            ((C2362 + C2363 + C2364) * C121 +
             (C2365 + C2366 + C2367) * C50778) *
                C50866) *
               C50878 * C501 -
           (((C2696 + C2697 + C2698) * C50778 +
             (C2699 + C2700 + C2701) * C121) *
                C50866 +
            ((C2367 + C2366 + C2365) * C50778 +
             (C2364 + C2363 + C2362) * C121) *
                C50995) *
               C50878 * C502 +
           (((C2701 + C2700 + C2699) * C121 +
             (C2698 + C2697 + C2696) * C50778) *
                C50995 +
            ((C2176 * C600 + C2171 * C608 + C2177 * C599 + C2172 * C607 +
              C2178 * C598 + C2173 * C606) *
                 C121 +
             (C2176 * C604 + C2171 * C612 + C2177 * C603 + C2172 * C611 +
              C2178 * C602 + C2173 * C610) *
                 C50778) *
                C50866) *
               C50878 * C503) *
              C50974 +
          ((((C2368 + C2369 + C2370) * C121 +
             (C2371 + C2372 + C2373) * C50778) *
                C50995 +
            ((C2702 + C2703 + C2704) * C121 +
             (C2705 + C2706 + C2707) * C50778) *
                C50866) *
               C50878 * C502 -
           (((C2373 + C2372 + C2371) * C50778 +
             (C2370 + C2369 + C2368) * C121) *
                C50866 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50778 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50995) *
               C50878 * C501 -
           (((C2178 * C601 + C2173 * C609 + C2177 * C602 + C2172 * C610 +
              C2176 * C603 + C2171 * C611) *
                 C50778 +
             (C2178 * C597 + C2173 * C605 + C2177 * C598 + C2172 * C606 +
              C2176 * C599 + C2171 * C607) *
                 C121) *
                C50866 +
            ((C2707 + C2706 + C2705) * C50778 +
             (C2704 + C2703 + C2702) * C121) *
                C50995) *
               C50878 * C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C121 +
            (C10648 * C133 + C50688 * C143) * C50778) *
               C10644 +
           ((C10648 * C256 + C50688 * C266) * C121 +
            (C10648 * C262 + C50688 * C274) * C50778) *
               C10645 +
           ((C10648 * C506 + C50688 * C511) * C121 +
            (C10648 * C515 + C50688 * C521) * C50778) *
               C10646 +
           ((C10648 * C600 + C50688 * C608) * C121 +
            (C10648 * C604 + C50688 * C612) * C50778) *
               C10647) *
              C50878 * C50748 * C113 -
          (((C10648 * C603 + C50688 * C611) * C50778 +
            (C10648 * C599 + C50688 * C607) * C121) *
               C10647 +
           ((C10648 * C516 + C50688 * C522) * C50778 +
            (C10648 * C507 + C50688 * C512) * C121) *
               C10646 +
           ((C10648 * C261 + C50688 * C273) * C50778 +
            (C10648 * C255 + C50688 * C265) * C121) *
               C10645 +
           ((C10648 * C134 + C50688 * C144) * C50778 +
            (C10648 * C123 + C50688 * C130) * C121) *
               C10644) *
              C50878 * C50748 * C114 +
          (((C10648 * C124 + C50688 * C131) * C121 +
            (C10648 * C135 + C50688 * C145) * C50778) *
               C10644 +
           ((C10648 * C254 + C50688 * C264) * C121 +
            (C10648 * C260 + C50688 * C272) * C50778) *
               C10645 +
           ((C10648 * C508 + C50688 * C513) * C121 +
            (C10648 * C517 + C50688 * C523) * C50778) *
               C10646 +
           ((C10648 * C598 + C50688 * C606) * C121 +
            (C10648 * C602 + C50688 * C610) * C50778) *
               C10647) *
              C50878 * C50748 * C115 -
          (((C10648 * C601 + C50688 * C609) * C50778 +
            (C10648 * C597 + C50688 * C605) * C121) *
               C10647 +
           ((C10648 * C518 + C50688 * C524) * C50778 +
            (C10648 * C509 + C50688 * C514) * C121) *
               C10646 +
           ((C10648 * C259 + C50688 * C271) * C50778 +
            (C10648 * C253 + C50688 * C263) * C121) *
               C10645 +
           ((C10648 * C136 + C50688 * C146) * C50778 +
            (C10648 * C125 + C50688 * C132) * C121) *
               C10644) *
              C50878 * C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C10644 +
            (C10802 + C10803) * C10645 + C11016 * C10646 + C11017 * C10647) *
               C50878 * C501 -
           ((C11032 + C11033) * C10647 + (C10807 + C10806) * C10646 +
            (C10805 + C10804) * C10645 + (C10803 + C10802) * C10644) *
               C50878 * C502 +
           (C11016 * C10644 + C11017 * C10645 + (C11033 + C11032) * C10646 +
            ((C10648 * C8435 + C50688 * C8439) * C121 +
             (C10648 * C8437 + C50688 * C8441) * C50778) *
                C10647) *
               C50878 * C503) *
              C50974 +
          (((C10808 + C10809) * C10644 + (C10810 + C10811) * C10645 +
            (C10812 + C10813) * C10646 + (C11034 + C11035) * C10647) *
               C50878 * C502 -
           (C11026 * C10647 + C11027 * C10646 + (C10809 + C10808) * C10645 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C10644) *
               C50878 * C501 -
           (((C10648 * C8436 + C50688 * C8440) * C50778 +
             (C10648 * C8434 + C50688 * C8438) * C121) *
                C10647 +
            (C11035 + C11034) * C10646 + C11026 * C10645 + C11027 * C10644) *
               C50878 * C503) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50778) *
                C50995 +
            ((C2362 + C2363 + C2364) * C121 +
             (C2365 + C2366 + C2367) * C50778) *
                C50866) *
               C50878 * C50981 -
           (((C2178 * C517 + C2173 * C523 + C2177 * C516 + C2172 * C522 +
              C2176 * C515 + C2171 * C521) *
                 C50778 +
             (C2178 * C508 + C2173 * C513 + C2177 * C507 + C2172 * C512 +
              C2176 * C506 + C2171 * C511) *
                 C121) *
                C50866 +
            ((C2367 + C2366 + C2365) * C50778 +
             (C2364 + C2363 + C2362) * C121) *
                C50995) *
               C50878 * C50764) *
              C250 +
          ((((C2368 + C2369 + C2370) * C121 +
             (C2371 + C2372 + C2373) * C50778) *
                C50995 +
            ((C2176 * C507 + C2171 * C512 + C2177 * C508 + C2172 * C513 +
              C2178 * C509 + C2173 * C514) *
                 C121 +
             (C2176 * C516 + C2171 * C522 + C2177 * C517 + C2172 * C523 +
              C2178 * C518 + C2173 * C524) *
                 C50778) *
                C50866) *
               C50878 * C50764 -
           (((C2373 + C2372 + C2371) * C50778 +
             (C2370 + C2369 + C2368) * C121) *
                C50866 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50778 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50995) *
               C50878 * C50981) *
              C251 +
          ((((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
              C2178 * C126 + C2173 * C138) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
              C2178 * C137 + C2173 * C147) *
                 C50778) *
                C50995 +
            ((C2374 + C2375 + C2376) * C121 +
             (C2377 + C2378 + C2379) * C50778) *
                C50866) *
               C50878 * C50981 -
           (((C2178 * C519 + C2173 * C525 + C2177 * C518 + C2172 * C524 +
              C2176 * C517 + C2171 * C523) *
                 C50778 +
             (C2178 * C510 + C2173 * C520 + C2177 * C509 + C2172 * C514 +
              C2176 * C508 + C2171 * C513) *
                 C121) *
                C50866 +
            ((C2379 + C2378 + C2377) * C50778 +
             (C2376 + C2375 + C2374) * C121) *
                C50995) *
               C50878 * C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50778) *
               C50995 +
           ((C2362 + C2363 + C2364) * C121 + (C2365 + C2366 + C2367) * C50778) *
               C50866) *
              C50878 * C592 -
          (((C2696 + C2697 + C2698) * C50778 + (C2699 + C2700 + C2701) * C121) *
               C50866 +
           ((C2367 + C2366 + C2365) * C50778 + (C2364 + C2363 + C2362) * C121) *
               C50995) *
              C50878 * C593 +
          (((C2701 + C2700 + C2699) * C121 + (C2698 + C2697 + C2696) * C50778) *
               C50995 +
           ((C2830 + C2831 + C2832) * C121 + (C2833 + C2834 + C2835) * C50778) *
               C50866) *
              C50878 * C594 -
          (((C2178 * C2808 + C2173 * C2814 + C2177 * C2809 + C2172 * C2815 +
             C2176 * C2810 + C2171 * C2816) *
                C50778 +
            (C2178 * C2805 + C2173 * C2811 + C2177 * C2806 + C2172 * C2812 +
             C2176 * C2807 + C2171 * C2813) *
                C121) *
               C50866 +
           ((C2835 + C2834 + C2833) * C50778 + (C2832 + C2831 + C2830) * C121) *
               C50995) *
              C50878 * C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C10644 +
            (C10802 + C10803) * C10645 + (C10804 + C10805) * C10646 +
            (C10806 + C10807) * C10647) *
               C50878 * C50981 -
           (((C10648 * C2810 + C50688 * C2816) * C50778 +
             (C10648 * C2807 + C50688 * C2813) * C121) *
                C10647 +
            (C10807 + C10806) * C10646 + (C10805 + C10804) * C10645 +
            (C10803 + C10802) * C10644) *
               C50878 * C50764) *
              C250 +
          (((C10808 + C10809) * C10644 + (C10810 + C10811) * C10645 +
            (C10812 + C10813) * C10646 +
            ((C10648 * C2806 + C50688 * C2812) * C121 +
             (C10648 * C2809 + C50688 * C2815) * C50778) *
                C10647) *
               C50878 * C50764 -
           ((C10813 + C10812) * C10647 + (C10811 + C10810) * C10646 +
            (C10809 + C10808) * C10645 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C10644) *
               C50878 * C50981) *
              C251 +
          ((((C10648 * C124 + C50688 * C131) * C121 +
             (C10648 * C135 + C50688 * C145) * C50778) *
                C10644 +
            (C10814 + C10815) * C10645 + (C10816 + C10817) * C10646 +
            (C10818 + C10819) * C10647) *
               C50878 * C50981 -
           (((C10648 * C2808 + C50688 * C2814) * C50778 +
             (C10648 * C2805 + C50688 * C2811) * C121) *
                C10647 +
            (C10819 + C10818) * C10646 + (C10817 + C10816) * C10645 +
            (C10815 + C10814) * C10644) *
               C50878 * C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C121 +
            (C10648 * C133 + C50688 * C143) * C50778) *
               C10644 +
           (C10802 + C10803) * C10645 + C11016 * C10646 + C11017 * C10647) *
              C50878 * C592 -
          (C11106 * C10647 + C11107 * C10646 + (C10805 + C10804) * C10645 +
           (C10803 + C10802) * C10644) *
              C50878 * C593 +
          (C11016 * C10644 + C11017 * C10645 + (C11033 + C11032) * C10646 +
           (C11114 + C11115) * C10647) *
              C50878 * C594 -
          (((C10648 * C11102 + C50688 * C11104) * C50778 +
            (C10648 * C11101 + C50688 * C11103) * C121) *
               C10647 +
           (C11115 + C11114) * C10646 + C11106 * C10645 + C11107 * C10644) *
              C50878 * C595) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C377 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50983 -
            (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
             C2176 * C382 + C2171 * C388) *
                C378 -
            (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
             C2176 * C392 + C2171 * C400) *
                C50790) *
               C50995 +
           ((C2362 + C2363 + C2364) * C377 + (C2365 + C2366 + C2367) * C50983 -
            (C2178 * C713 + C2173 * C721 + C2177 * C712 + C2172 * C720 +
             C2176 * C711 + C2171 * C719) *
                C378 -
            (C2178 * C725 + C2173 * C737 + C2177 * C724 + C2172 * C736 +
             C2176 * C723 + C2171 * C735) *
                C50790) *
               C50866) *
              C50878 * C50748 * C250 +
          (((C2176 * C381 + C2171 * C387 + C2177 * C380 + C2172 * C386 +
             C2178 * C379 + C2173 * C385) *
                C378 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50983 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C377) +
            (C2176 * C391 + C2171 * C399 + C2177 * C390 + C2172 * C398 +
             C2178 * C389 + C2173 * C397) *
                C50790) *
               C50995 +
           ((C2176 * C712 + C2171 * C720 + C2177 * C713 + C2172 * C721 +
             C2178 * C714 + C2173 * C722) *
                C378 -
            ((C2373 + C2372 + C2371) * C50983 +
             (C2370 + C2369 + C2368) * C377) +
            (C2176 * C724 + C2171 * C736 + C2177 * C725 + C2172 * C737 +
             C2178 * C726 + C2173 * C738) *
                C50790) *
               C50866) *
              C50878 * C50748 * C251 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C377 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50983 -
            (C2178 * C383 + C2173 * C393 + C2177 * C379 + C2172 * C385 +
             C2176 * C380 + C2171 * C386) *
                C378 -
            (C2178 * C394 + C2173 * C401 + C2177 * C389 + C2172 * C397 +
             C2176 * C390 + C2171 * C398) *
                C50790) *
               C50995 +
           ((C2374 + C2375 + C2376) * C377 + (C2377 + C2378 + C2379) * C50983 -
            (C2178 * C1407 + C2173 * C1408 + C2177 * C714 + C2172 * C722 +
             C2176 * C713 + C2171 * C721) *
                C378 -
            (C2178 * C1409 + C2173 * C1410 + C2177 * C726 + C2172 * C738 +
             C2176 * C725 + C2171 * C737) *
                C50790) *
               C50866) *
              C50878 * C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C377 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50983 -
            (C2178 * C380 + C2173 * C386 + C2177 * C381 + C2172 * C387 +
             C2176 * C382 + C2171 * C388) *
                C378 -
            (C2178 * C390 + C2173 * C398 + C2177 * C391 + C2172 * C399 +
             C2176 * C392 + C2171 * C400) *
                C50790) *
               C50995 +
           ((C2362 + C2363 + C2364) * C377 + (C2365 + C2366 + C2367) * C50983 -
            (C3018 + C3019 + C3020) * C378 - (C3021 + C3022 + C3023) * C50790) *
               C50866) *
              C50878 * C501 +
          (((C3020 + C3019 + C3018) * C378 -
            ((C2367 + C2366 + C2365) * C50983 +
             (C2364 + C2363 + C2362) * C377) +
            (C3023 + C3022 + C3021) * C50790) *
               C50995 +
           ((C3024 + C3025 + C3026) * C378 -
            ((C2696 + C2697 + C2698) * C50983 +
             (C2699 + C2700 + C2701) * C377) +
            (C3027 + C3028 + C3029) * C50790) *
               C50866) *
              C50878 * C502 +
          (((C2701 + C2700 + C2699) * C377 + (C2698 + C2697 + C2696) * C50983 -
            (C3026 + C3025 + C3024) * C378 - (C3029 + C3028 + C3027) * C50790) *
               C50995 +
           ((C2830 + C2831 + C2832) * C377 + (C2833 + C2834 + C2835) * C50983 -
            (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
             C2176 * C2983 + C2171 * C2986) *
                C378 -
            (C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
             C2176 * C2989 + C2171 * C2992) *
                C50790) *
               C50866) *
              C50878 * C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C377 +
            (C10648 * C133 + C50688 * C143) * C50983 -
            (C10648 * C382 + C50688 * C388) * C378 -
            (C10648 * C392 + C50688 * C400) * C50790) *
               C10644 +
           (C10784 * C377 + C10785 * C50983 -
            (C10648 * C711 + C50688 * C719) * C378 -
            (C10648 * C723 + C50688 * C735) * C50790) *
               C10645 +
           (C10786 * C377 + C10787 * C50983 -
            (C10648 * C718 + C50688 * C730) * C378 -
            (C10648 * C734 + C50688 * C742) * C50790) *
               C10646 +
           (C10788 * C377 + C10789 * C50983 -
            (C10648 * C2983 + C50688 * C2986) * C378 -
            (C10648 * C2989 + C50688 * C2992) * C50790) *
               C10647) *
              C50878 * C50748 * C250 +
          (((C10648 * C381 + C50688 * C387) * C378 -
            ((C10648 * C134 + C50688 * C144) * C50983 +
             (C10648 * C123 + C50688 * C130) * C377) +
            (C10648 * C391 + C50688 * C399) * C50790) *
               C10644 +
           ((C10648 * C712 + C50688 * C720) * C378 -
            (C10791 * C50983 + C10790 * C377) +
            (C10648 * C724 + C50688 * C736) * C50790) *
               C10645 +
           ((C10648 * C717 + C50688 * C729) * C378 -
            (C10793 * C50983 + C10792 * C377) +
            (C10648 * C733 + C50688 * C741) * C50790) *
               C10646 +
           ((C10648 * C2982 + C50688 * C2985) * C378 -
            (C10795 * C50983 + C10794 * C377) +
            (C10648 * C2988 + C50688 * C2991) * C50790) *
               C10647) *
              C50878 * C50748 * C251 +
          (((C10648 * C124 + C50688 * C131) * C377 +
            (C10648 * C135 + C50688 * C145) * C50983 -
            (C10648 * C380 + C50688 * C386) * C378 -
            (C10648 * C390 + C50688 * C398) * C50790) *
               C10644 +
           (C10796 * C377 + C10797 * C50983 -
            (C10648 * C713 + C50688 * C721) * C378 -
            (C10648 * C725 + C50688 * C737) * C50790) *
               C10645 +
           (C10798 * C377 + C10799 * C50983 -
            (C10648 * C716 + C50688 * C728) * C378 -
            (C10648 * C732 + C50688 * C740) * C50790) *
               C10646 +
           (C10800 * C377 + C10801 * C50983 -
            (C10648 * C2981 + C50688 * C2984) * C378 -
            (C10648 * C2987 + C50688 * C2990) * C50790) *
               C10647) *
              C50878 * C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C377 +
            (C10648 * C133 + C50688 * C143) * C50983 -
            (C10648 * C382 + C50688 * C388) * C378 -
            (C10648 * C392 + C50688 * C400) * C50790) *
               C10644 +
           (C11218 + C11219 - C11252 - C11253) * C10645 + C11262 * C10646 +
           C11263 * C10647) *
              C50878 * C501 +
          ((C11252 - (C11219 + C11218) + C11253) * C10644 +
           (C11254 - (C11225 + C11224) + C11255) * C10645 +
           (C11256 - (C11231 + C11230) + C11257) * C10646 +
           (C11258 - (C11238 + C11239) + C11259) * C10647) *
              C50878 * C502 +
          (C11262 * C10644 + C11263 * C10645 +
           (C11239 + C11238 - C11258 - C11259) * C10646 +
           (C11112 * C377 + C11113 * C50983 -
            (C10648 * C11213 + C50688 * C11214) * C378 -
            (C10648 * C11215 + C50688 * C11216) * C50790) *
               C10647) *
              C50878 * C503) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[210] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C2176 * C122 + C2171 * C129 + C2177 * C123 +
                       C2172 * C130 + C2178 * C124 + C2173 * C131) *
                          C121 +
                      (C2176 * C133 + C2171 * C143 + C2177 * C134 +
                       C2172 * C144 + C2178 * C135 + C2173 * C145) *
                          C50778) *
                         C50852 * C50996 +
                     ((C5368 + C5367 + C5366) * C121 +
                      (C5371 + C5370 + C5369) * C50778) *
                         C50852 * C50890) *
                        C1169 -
                    (((C3021 + C3022 + C3023) * C50778 +
                      (C3018 + C3019 + C3020) * C121) *
                         C50852 * C50890 +
                     ((C2367 + C2366 + C2365) * C50778 +
                      (C2364 + C2363 + C2362) * C121) *
                         C50852 * C50996) *
                        C50764) *
                       C51026 +
                   ((((C2368 + C2369 + C2370) * C121 +
                      (C2371 + C2372 + C2373) * C50778) *
                         C50852 * C50996 +
                     ((C3960 + C3961 + C3962) * C121 +
                      (C3963 + C3964 + C3965) * C50778) *
                         C50852 * C50890) *
                        C50764 -
                    (((C5377 + C5376 + C5375) * C50778 +
                      (C5374 + C5373 + C5372) * C121) *
                         C50852 * C50890 +
                     ((C2178 * C136 + C2173 * C146 + C2177 * C135 +
                       C2172 * C145 + C2176 * C134 + C2171 * C144) *
                          C50778 +
                      (C2178 * C125 + C2173 * C132 + C2177 * C124 +
                       C2172 * C131 + C2176 * C123 + C2171 * C130) *
                          C121) *
                         C50852 * C50996) *
                        C1169) *
                       C51012 +
                   ((((C2176 * C124 + C2171 * C131 + C2177 * C125 +
                       C2172 * C132 + C2178 * C126 + C2173 * C138) *
                          C121 +
                      (C2176 * C135 + C2171 * C145 + C2177 * C136 +
                       C2172 * C146 + C2178 * C137 + C2173 * C147) *
                          C50778) *
                         C50852 * C50996 +
                     ((C5380 + C5379 + C5378) * C121 +
                      (C5383 + C5382 + C5381) * C50778) *
                         C50852 * C50890) *
                        C1169 -
                    (((C2178 * C1409 + C2173 * C1410 + C2177 * C726 +
                       C2172 * C738 + C2176 * C725 + C2171 * C737) *
                          C50778 +
                      (C2178 * C1407 + C2173 * C1408 + C2177 * C714 +
                       C2172 * C722 + C2176 * C713 + C2171 * C721) *
                          C121) *
                         C50852 * C50890 +
                     ((C2379 + C2378 + C2377) * C50778 +
                      (C2376 + C2375 + C2374) * C121) *
                         C50852 * C50996) *
                        C50764) *
                       C1173)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C10648 * C122 + C50688 * C129) * C121 +
                       (C10648 * C133 + C50688 * C143) * C50778) *
                          C7787 +
                      (C10802 + C10803) * C7788 + C11016 * C7789) *
                         C50996 +
                     ((C13056 * C121 + C13057 * C50778) * C7787 +
                      (C12874 + C12875) * C7788 + C13208 * C7789) *
                         C50890) *
                        C1169 -
                    ((C13312 * C7789 + (C12877 + C12876) * C7788 +
                      (C12875 + C12874) * C7787) *
                         C50890 +
                     (C11107 * C7789 + (C10805 + C10804) * C7788 +
                      (C10803 + C10802) * C7787) *
                         C50996) *
                        C50764) *
                       C51026 +
                   ((((C10808 + C10809) * C7787 + (C10810 + C10811) * C7788 +
                      (C10812 + C10813) * C7789) *
                         C50996 +
                     ((C12878 + C12879) * C7787 + (C12880 + C12881) * C7788 +
                      (C13211 + C13212) * C7789) *
                         C50890) *
                        C50764 -
                    ((C13213 * C7789 + (C12879 + C12878) * C7788 +
                      (C13059 * C50778 + C13058 * C121) * C7787) *
                         C50890 +
                     (C11027 * C7789 + (C10809 + C10808) * C7788 +
                      ((C10648 * C134 + C50688 * C144) * C50778 +
                       (C10648 * C123 + C50688 * C130) * C121) *
                          C7787) *
                         C50996) *
                        C1169) *
                       C51012 +
                   (((((C10648 * C124 + C50688 * C131) * C121 +
                       (C10648 * C135 + C50688 * C145) * C50778) *
                          C7787 +
                      (C10814 + C10815) * C7788 + (C10816 + C10817) * C7789) *
                         C50996 +
                     ((C13060 * C121 + C13061 * C50778) * C7787 +
                      (C12894 + C12895) * C7788 + (C12896 + C12897) * C7789) *
                         C50890) *
                        C1169 -
                    ((((C10648 * C2987 + C50688 * C2990) * C50778 +
                       (C10648 * C2981 + C50688 * C2984) * C121) *
                          C7789 +
                      (C12897 + C12896) * C7788 + (C12895 + C12894) * C7787) *
                         C50890 +
                     ((C10819 + C10818) * C7789 + (C10817 + C10816) * C7788 +
                      (C10815 + C10814) * C7787) *
                         C50996) *
                        C50764) *
                       C1173)) /
                     (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50778) *
                C50852 * C50996 +
            ((C5368 + C5367 + C5366) * C121 +
             (C5371 + C5370 + C5369) * C50778) *
                C50852 * C50890) *
               C51027 -
           (((C3021 + C3022 + C3023) * C50778 +
             (C3018 + C3019 + C3020) * C121) *
                C50852 * C50890 +
            ((C2367 + C2366 + C2365) * C50778 +
             (C2364 + C2363 + C2362) * C121) *
                C50852 * C50996) *
               C51015 +
           (((C2701 + C2700 + C2699) * C121 +
             (C2698 + C2697 + C2696) * C50778) *
                C50852 * C50996 +
            ((C3024 + C3025 + C3026) * C121 +
             (C3027 + C3028 + C3029) * C50778) *
                C50852 * C50890) *
               C1274) *
              C1275 +
          ((((C2368 + C2369 + C2370) * C121 +
             (C2371 + C2372 + C2373) * C50778) *
                C50852 * C50996 +
            ((C3960 + C3961 + C3962) * C121 +
             (C3963 + C3964 + C3965) * C50778) *
                C50852 * C50890) *
               C51015 -
           (((C5377 + C5376 + C5375) * C50778 +
             (C5374 + C5373 + C5372) * C121) *
                C50852 * C50890 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50778 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50852 * C50996) *
               C51027 -
           (((C2178 * C731 + C2173 * C739 + C2177 * C732 + C2172 * C740 +
              C2176 * C733 + C2171 * C741) *
                 C50778 +
             (C2178 * C715 + C2173 * C727 + C2177 * C716 + C2172 * C728 +
              C2176 * C717 + C2171 * C729) *
                 C121) *
                C50852 * C50890 +
            ((C2707 + C2706 + C2705) * C50778 +
             (C2704 + C2703 + C2702) * C121) *
                C50852 * C50996) *
               C1274) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C7787 +
             (C10802 + C10803) * C7788 + C11016 * C7789) *
                C50996 +
            ((C13056 * C121 + C13057 * C50778) * C7787 +
             (C12874 + C12875) * C7788 + C13208 * C7789) *
                C50890) *
               C51027 -
           ((C13312 * C7789 + (C12877 + C12876) * C7788 +
             (C12875 + C12874) * C7787) *
                C50890 +
            (C11107 * C7789 + (C10805 + C10804) * C7788 +
             (C10803 + C10802) * C7787) *
                C50996) *
               C51015 +
           ((C11016 * C7787 + C11017 * C7788 + (C11033 + C11032) * C7789) *
                C50996 +
            (C13208 * C7787 + (C13210 + C13209) * C7788 +
             (C13313 + C13314) * C7789) *
                C50890) *
               C1274) *
              C1275 +
          ((((C10808 + C10809) * C7787 + (C10810 + C10811) * C7788 +
             (C10812 + C10813) * C7789) *
                C50996 +
            ((C12878 + C12879) * C7787 + (C12880 + C12881) * C7788 +
             (C13211 + C13212) * C7789) *
                C50890) *
               C51015 -
           ((C13213 * C7789 + (C12879 + C12878) * C7788 +
             (C13059 * C50778 + C13058 * C121) * C7787) *
                C50890 +
            (C11027 * C7789 + (C10809 + C10808) * C7788 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C7787) *
                C50996) *
               C51027 -
           ((((C10648 * C8609 + C50688 * C8611) * C50778 +
              (C10648 * C8605 + C50688 * C8607) * C121) *
                 C7789 +
             (C13212 + C13211) * C7788 + C13213 * C7787) *
                C50890 +
            ((C11035 + C11034) * C7789 + C11026 * C7788 + C11027 * C7787) *
                C50996) *
               C1274) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C377 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50983 -
             (C5366 + C5367 + C5368) * C378 -
             (C5369 + C5370 + C5371) * C50790) *
                C50852 * C50996 +
            ((C5368 + C5367 + C5366) * C377 + (C5371 + C5370 + C5369) * C50983 -
             (C5946 + C5945 + C5944) * C378 -
             (C5949 + C5948 + C5947) * C50790) *
                C50852 * C50890) *
               C1169 +
           (((C3020 + C3019 + C3018) * C378 -
             ((C2367 + C2366 + C2365) * C50983 +
              (C2364 + C2363 + C2362) * C377) +
             (C3023 + C3022 + C3021) * C50790) *
                C50852 * C50996 +
            ((C3346 + C3347 + C3348) * C378 -
             ((C3021 + C3022 + C3023) * C50983 +
              (C3018 + C3019 + C3020) * C377) +
             (C3349 + C3350 + C3351) * C50790) *
                C50852 * C50890) *
               C50764) *
              C1275 +
          ((((C5372 + C5373 + C5374) * C378 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C50983 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C377) +
             (C5375 + C5376 + C5377) * C50790) *
                C50852 * C50996 +
            ((C5952 + C5951 + C5950) * C378 -
             ((C5377 + C5376 + C5375) * C50983 +
              (C5374 + C5373 + C5372) * C377) +
             (C5955 + C5954 + C5953) * C50790) *
                C50852 * C50890) *
               C1169 +
           (((C2368 + C2369 + C2370) * C377 + (C2371 + C2372 + C2373) * C50983 -
             (C3962 + C3961 + C3960) * C378 -
             (C3965 + C3964 + C3963) * C50790) *
                C50852 * C50996 +
            ((C3960 + C3961 + C3962) * C377 + (C3963 + C3964 + C3965) * C50983 -
             (C2178 * C965 + C2173 * C969 + C2177 * C966 + C2172 * C970 +
              C2176 * C967 + C2171 * C971) *
                 C378 -
             (C2178 * C973 + C2173 * C977 + C2177 * C974 + C2172 * C978 +
              C2176 * C975 + C2171 * C979) *
                 C50790) *
                C50852 * C50890) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C377 +
              (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
              C13057 * C50790) *
                 C7787 +
             (C11218 + C11219 - C11252 - C11253) * C7788 + C11262 * C7789) *
                C50996 +
            ((C13056 * C377 + C13057 * C50983 - C13638 * C378 -
              C13639 * C50790) *
                 C7787 +
             (C13461 + C13462 - C13463 - C13464) * C7788 + C13475 * C7789) *
                C50890) *
               C1169 +
           (((C11252 - (C11219 + C11218) + C11253) * C7787 +
             (C11254 - (C11225 + C11224) + C11255) * C7788 +
             (C11256 - (C11231 + C11230) + C11257) * C7789) *
                C50996 +
            ((C13463 - (C13462 + C13461) + C13464) * C7787 +
             (C13467 - (C13466 + C13465) + C13468) * C7788 +
             (C13469 - (C13470 + C13471) + C13472) * C7789) *
                C50890) *
               C50764) *
              C1275 +
          ((((C13058 * C378 -
              ((C10648 * C134 + C50688 * C144) * C50983 +
               (C10648 * C123 + C50688 * C130) * C377) +
              C13059 * C50790) *
                 C7787 +
             (C11920 - (C11898 + C11899) + C11921) * C7788 +
             (C11922 - (C11904 + C11905) + C11923) * C7789) *
                C50996 +
            ((C13640 * C378 - (C13059 * C50983 + C13058 * C377) +
              C13641 * C50790) *
                 C7787 +
             (C14414 - (C14415 + C14416) + C14417) * C7788 +
             (C14418 - (C14419 + C14420) + C14421) * C7789) *
                C50890) *
               C1169 +
           (((C11899 + C11898 - C11920 - C11921) * C7787 +
             (C11905 + C11904 - C11922 - C11923) * C7788 +
             (C11911 + C11910 - C11924 - C11925) * C7789) *
                C50996 +
            ((C14416 + C14415 - C14414 - C14417) * C7787 +
             (C14420 + C14419 - C14418 - C14421) * C7788 +
             (C11918 * C377 + C11919 * C50983 -
              (C10648 * C8950 + C50688 * C8952) * C378 -
              (C10648 * C8954 + C50688 * C8956) * C50790) *
                 C7789) *
                C50890) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C1511 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C1509 -
             (C5366 + C5367 + C5368) * C1512 -
             (C5369 + C5370 + C5371) * C50790) *
                C50852 * C50996 +
            ((C5368 + C5367 + C5366) * C1511 + (C5371 + C5370 + C5369) * C1509 -
             (C5946 + C5945 + C5944) * C1512 -
             (C5949 + C5948 + C5947) * C50790) *
                C50852 * C50890) *
               C1169 +
           (((C3020 + C3019 + C3018) * C1512 -
             ((C2367 + C2366 + C2365) * C1509 +
              (C2364 + C2363 + C2362) * C1511) +
             (C3023 + C3022 + C3021) * C50790) *
                C50852 * C50996 +
            ((C3346 + C3347 + C3348) * C1512 -
             ((C3021 + C3022 + C3023) * C1509 +
              (C3018 + C3019 + C3020) * C1511) +
             (C3349 + C3350 + C3351) * C50790) *
                C50852 * C50890) *
               C50764) *
              C50974 +
          ((((C5372 + C5373 + C5374) * C1512 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C1509 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C1511) +
             (C5375 + C5376 + C5377) * C50790) *
                C50852 * C50996 +
            ((C5952 + C5951 + C5950) * C1512 -
             ((C5377 + C5376 + C5375) * C1509 +
              (C5374 + C5373 + C5372) * C1511) +
             (C5955 + C5954 + C5953) * C50790) *
                C50852 * C50890) *
               C1169 +
           (((C2368 + C2369 + C2370) * C1511 + (C2371 + C2372 + C2373) * C1509 -
             (C3962 + C3961 + C3960) * C1512 -
             (C3965 + C3964 + C3963) * C50790) *
                C50852 * C50996 +
            ((C3960 + C3961 + C3962) * C1511 + (C3963 + C3964 + C3965) * C1509 -
             (C2178 * C965 + C2173 * C969 + C2177 * C966 + C2172 * C970 +
              C2176 * C967 + C2171 * C971) *
                 C1512 -
             (C2178 * C973 + C2173 * C977 + C2177 * C974 + C2172 * C978 +
              C2176 * C975 + C2171 * C979) *
                 C50790) *
                C50852 * C50890) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C1511 +
              (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
              C13057 * C50790) *
                 C7787 +
             (C12154 + C12155 - C12156 - C12157) * C7788 + C12512 * C7789) *
                C50996 +
            ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
              C13639 * C50790) *
                 C7787 +
             (C14762 + C14763 - C14764 - C14765) * C7788 +
             (C14766 + C14767 - C14768 - C14769) * C7789) *
                C50890) *
               C1169 +
           (((C12156 - (C12155 + C12154) + C12157) * C7787 +
             (C12160 - (C12159 + C12158) + C12161) * C7788 +
             (C12164 - (C12163 + C12162) + C12165) * C7789) *
                C50996 +
            ((C14764 - (C14763 + C14762) + C14765) * C7787 +
             (C14768 - (C14767 + C14766) + C14769) * C7788 +
             (C11492 * C1512 - (C11249 * C1509 + C11248 * C1511) +
              C11493 * C50790) *
                 C7789) *
                C50890) *
               C50764) *
              C50974 +
          ((((C13058 * C1512 -
              ((C10648 * C134 + C50688 * C144) * C1509 +
               (C10648 * C123 + C50688 * C130) * C1511) +
              C13059 * C50790) *
                 C7787 +
             (C12166 - (C12167 + C12168) + C12169) * C7788 +
             (C12170 - (C12171 + C12172) + C12173) * C7789) *
                C50996 +
            ((C13640 * C1512 - (C13059 * C1509 + C13058 * C1511) +
              C13641 * C50790) *
                 C7787 +
             (C14770 - (C14771 + C14772) + C14773) * C7788 +
             (C14774 - (C14775 + C14776) + C14777) * C7789) *
                C50890) *
               C1169 +
           (((C12168 + C12167 - C12166 - C12169) * C7787 +
             (C12172 + C12171 - C12170 - C12173) * C7788 +
             (C12176 + C12175 - C12174 - C12177) * C7789) *
                C50996 +
            ((C14772 + C14771 - C14770 - C14773) * C7787 +
             (C14776 + C14775 - C14774 - C14777) * C7788 +
             (C11918 * C1511 + C11919 * C1509 -
              (C10648 * C8950 + C50688 * C8952) * C1512 -
              (C10648 * C8954 + C50688 * C8956) * C50790) *
                 C7789) *
                C50890) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1511 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C1509 -
            (C5366 + C5367 + C5368) * C1512 -
            (C5369 + C5370 + C5371) * C50790) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C1511 + (C5371 + C5370 + C5369) * C1509 -
            (C5946 + C5945 + C5944) * C1512 -
            (C5949 + C5948 + C5947) * C50790) *
               C50852 * C50890) *
              C51027 +
          (((C3020 + C3019 + C3018) * C1512 -
            ((C2367 + C2366 + C2365) * C1509 +
             (C2364 + C2363 + C2362) * C1511) +
            (C3023 + C3022 + C3021) * C50790) *
               C50852 * C50996 +
           ((C3346 + C3347 + C3348) * C1512 -
            ((C3021 + C3022 + C3023) * C1509 +
             (C3018 + C3019 + C3020) * C1511) +
            (C3349 + C3350 + C3351) * C50790) *
               C50852 * C50890) *
              C51015 +
          (((C2701 + C2700 + C2699) * C1511 + (C2698 + C2697 + C2696) * C1509 -
            (C3026 + C3025 + C3024) * C1512 -
            (C3029 + C3028 + C3027) * C50790) *
               C50852 * C50996 +
           ((C3024 + C3025 + C3026) * C1511 + (C3027 + C3028 + C3029) * C1509 -
            (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
             C2176 * C3323 + C2171 * C3326) *
                C1512 -
            (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
             C2176 * C3329 + C2171 * C3332) *
                C50790) *
               C50852 * C50890) *
              C1274) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1511 +
             (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
             C13057 * C50790) *
                C7787 +
            (C12154 + C12155 - C12156 - C12157) * C7788 + C12512 * C7789) *
               C50996 +
           ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
             C13639 * C50790) *
                C7787 +
            (C14762 + C14763 - C14764 - C14765) * C7788 + C15270 * C7789) *
               C50890) *
              C51027 +
          (((C12156 - (C12155 + C12154) + C12157) * C7787 +
            (C12160 - (C12159 + C12158) + C12161) * C7788 +
            (C12164 - (C12163 + C12162) + C12165) * C7789) *
               C50996 +
           ((C14764 - (C14763 + C14762) + C14765) * C7787 +
            (C14768 - (C14767 + C14766) + C14769) * C7788 +
            (C15265 - (C15266 + C15267) + C15268) * C7789) *
               C50890) *
              C51015 +
          ((C12512 * C7787 + C12513 * C7788 +
            (C12508 + C12507 - C12506 - C12509) * C7789) *
               C50996 +
           (C15270 * C7787 + (C15267 + C15266 - C15265 - C15268) * C7788 +
            (C11250 * C1511 + C11251 * C1509 -
             (C10648 * C11459 + C50688 * C11460) * C1512 -
             (C10648 * C11461 + C50688 * C11462) * C50790) *
                C7789) *
               C50890) *
              C1274) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1744 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C51028 -
            (C5366 + C5367 + C5368) * C1745 - (C5369 + C5370 + C5371) * C51018 +
            (C5944 + C5945 + C5946) * C1746 + (C5947 + C5948 + C5949) * C1743) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C1744 + (C5371 + C5370 + C5369) * C51028 -
            (C5946 + C5945 + C5944) * C1745 - (C5949 + C5948 + C5947) * C51018 +
            (C6226 + C6225 + C6224) * C1746 + (C6229 + C6228 + C6227) * C1743) *
               C50852 * C50890) *
              C1169 +
          (((C3020 + C3019 + C3018) * C1745 -
            ((C2367 + C2366 + C2365) * C51028 +
             (C2364 + C2363 + C2362) * C1744) +
            (C3023 + C3022 + C3021) * C51018 - (C3348 + C3347 + C3346) * C1746 -
            (C3351 + C3350 + C3349) * C1743) *
               C50852 * C50996 +
           ((C3346 + C3347 + C3348) * C1745 -
            ((C3021 + C3022 + C3023) * C51028 +
             (C3018 + C3019 + C3020) * C1744) +
            (C3349 + C3350 + C3351) * C51018 -
            (C2178 * C3449 + C2173 * C3452 + C2177 * C3450 + C2172 * C3453 +
             C2176 * C3451 + C2171 * C3454) *
                C1746 -
            (C2178 * C3455 + C2173 * C3458 + C2177 * C3456 + C2172 * C3459 +
             C2176 * C3457 + C2171 * C3460) *
                C1743) *
               C50852 * C50890) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1744 +
             (C10648 * C133 + C50688 * C143) * C51028 - C13056 * C1745 -
             C13057 * C51018 + C13638 * C1746 + C13639 * C1743) *
                C7787 +
            (C12612 + C12613 - C12614 - C12615 + C12616 + C12617) * C7788 +
            (C12618 + C12619 - C12620 - C12621 + C12622 + C12623) * C7789) *
               C50996 +
           ((C13056 * C1744 + C13057 * C51028 - C13638 * C1745 -
             C13639 * C51018 + C13926 * C1746 + C13927 * C1743) *
                C7787 +
            (C15417 + C15418 - C15419 - C15420 + C15421 + C15422) * C7788 +
            (C15423 + C15424 - C15425 - C15426 + C15427 + C15428) * C7789) *
               C50890) *
              C1169 +
          (((C12614 - (C12613 + C12612) + C12615 - C12616 - C12617) * C7787 +
            (C12620 - (C12619 + C12618) + C12621 - C12622 - C12623) * C7788 +
            (C12626 - (C12625 + C12624) + C12627 - C12628 - C12629) * C7789) *
               C50996 +
           ((C15419 - (C15418 + C15417) + C15420 - C15421 - C15422) * C7787 +
            (C15425 - (C15424 + C15423) + C15426 - C15427 - C15428) * C7788 +
            (C11492 * C1745 - (C11249 * C51028 + C11248 * C1744) +
             C11493 * C51018 - (C10648 * C11565 + C50688 * C11566) * C1746 -
             (C10648 * C11567 + C50688 * C11568) * C1743) *
                C7789) *
               C50890) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50778) *
                C50852 * C50996 +
            ((C5368 + C5367 + C5366) * C121 +
             (C5371 + C5370 + C5369) * C50778) *
                C50852 * C50890) *
               C501 -
           (((C3021 + C3022 + C3023) * C50778 +
             (C3018 + C3019 + C3020) * C121) *
                C50852 * C50890 +
            ((C2367 + C2366 + C2365) * C50778 +
             (C2364 + C2363 + C2362) * C121) *
                C50852 * C50996) *
               C502 +
           (((C2701 + C2700 + C2699) * C121 +
             (C2698 + C2697 + C2696) * C50778) *
                C50852 * C50996 +
            ((C3024 + C3025 + C3026) * C121 +
             (C3027 + C3028 + C3029) * C50778) *
                C50852 * C50890) *
               C503) *
              C50974 +
          ((((C2368 + C2369 + C2370) * C121 +
             (C2371 + C2372 + C2373) * C50778) *
                C50852 * C50996 +
            ((C3960 + C3961 + C3962) * C121 +
             (C3963 + C3964 + C3965) * C50778) *
                C50852 * C50890) *
               C502 -
           (((C5377 + C5376 + C5375) * C50778 +
             (C5374 + C5373 + C5372) * C121) *
                C50852 * C50890 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50778 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50852 * C50996) *
               C501 -
           (((C2178 * C731 + C2173 * C739 + C2177 * C732 + C2172 * C740 +
              C2176 * C733 + C2171 * C741) *
                 C50778 +
             (C2178 * C715 + C2173 * C727 + C2177 * C716 + C2172 * C728 +
              C2176 * C717 + C2171 * C729) *
                 C121) *
                C50852 * C50890 +
            ((C2707 + C2706 + C2705) * C50778 +
             (C2704 + C2703 + C2702) * C121) *
                C50852 * C50996) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50778) *
               C50852 * C50996 +
           ((C2176 * C382 + C2171 * C388 + C2177 * C381 + C2172 * C387 +
             C2178 * C380 + C2173 * C386) *
                C121 +
            (C2176 * C392 + C2171 * C400 + C2177 * C391 + C2172 * C399 +
             C2178 * C390 + C2173 * C398) *
                C50778) *
               C50852 * C50890) *
              C50748 * C113 -
          (((C2178 * C389 + C2173 * C397 + C2177 * C390 + C2172 * C398 +
             C2176 * C391 + C2171 * C399) *
                C50778 +
            (C2178 * C379 + C2173 * C385 + C2177 * C380 + C2172 * C386 +
             C2176 * C381 + C2171 * C387) *
                C121) *
               C50852 * C50890 +
           ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
             C2176 * C134 + C2171 * C144) *
                C50778 +
            (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
             C2176 * C123 + C2171 * C130) *
                C121) *
               C50852 * C50996) *
              C50748 * C114 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C121 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50778) *
               C50852 * C50996 +
           ((C2176 * C380 + C2171 * C386 + C2177 * C379 + C2172 * C385 +
             C2178 * C383 + C2173 * C393) *
                C121 +
            (C2176 * C390 + C2171 * C398 + C2177 * C389 + C2172 * C397 +
             C2178 * C394 + C2173 * C401) *
                C50778) *
               C50852 * C50890) *
              C50748 * C115 -
          (((C2178 * C396 + C2173 * C402 + C2177 * C394 + C2172 * C401 +
             C2176 * C389 + C2171 * C397) *
                C50778 +
            (C2178 * C384 + C2173 * C395 + C2177 * C383 + C2172 * C393 +
             C2176 * C379 + C2171 * C385) *
                C121) *
               C50852 * C50890 +
           ((C2178 * C140 + C2173 * C148 + C2177 * C137 + C2172 * C147 +
             C2176 * C136 + C2171 * C146) *
                C50778 +
            (C2178 * C127 + C2173 * C139 + C2177 * C126 + C2172 * C138 +
             C2176 * C125 + C2171 * C132) *
                C121) *
               C50852 * C50996) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C844 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C841 -
            (C5366 + C5367 + C5368) * C845 - (C5369 + C5370 + C5371) * C842 +
            (C5944 + C5945 + C5946) * C846 + (C5947 + C5948 + C5949) * C843) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C844 + (C5371 + C5370 + C5369) * C841 -
            (C5946 + C5945 + C5944) * C845 - (C5949 + C5948 + C5947) * C842 +
            (C2176 * C1058 + C2171 * C1062 + C2177 * C1057 + C2172 * C1061 +
             C2178 * C1056 + C2173 * C1060) *
                C846 +
            (C2176 * C1066 + C2171 * C1070 + C2177 * C1065 + C2172 * C1069 +
             C2178 * C1064 + C2173 * C1068) *
                C843) *
               C50852 * C50890) *
              C50748 * C50974 +
          (((C5372 + C5373 + C5374) * C845 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C841 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C844) +
            (C5375 + C5376 + C5377) * C842 - (C5950 + C5951 + C5952) * C846 -
            (C5953 + C5954 + C5955) * C843) *
               C50852 * C50996 +
           ((C5952 + C5951 + C5950) * C845 -
            ((C5377 + C5376 + C5375) * C841 + (C5374 + C5373 + C5372) * C844) +
            (C5955 + C5954 + C5953) * C842 -
            (C2178 * C1055 + C2173 * C1059 + C2177 * C1056 + C2172 * C1060 +
             C2176 * C1057 + C2171 * C1061) *
                C846 -
            (C2178 * C1063 + C2173 * C1067 + C2177 * C1064 + C2172 * C1068 +
             C2176 * C1065 + C2171 * C1069) *
                C843) *
               C50852 * C50890) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C7787 +
            (C10802 + C10803) * C7788 + C11016 * C7789) *
               C50996 +
           (((C10648 * C382 + C50688 * C388) * C121 +
             (C10648 * C392 + C50688 * C400) * C50778) *
                C7787 +
            (C11242 * C121 + C11243 * C50778) * C7788 +
            (C11245 * C121 + C11246 * C50778) * C7789) *
               C50890) *
              C50748 * C113 -
          (((C11917 * C50778 + C11916 * C121) * C7789 +
            (C11915 * C50778 + C11914 * C121) * C7788 +
            ((C10648 * C391 + C50688 * C399) * C50778 +
             (C10648 * C381 + C50688 * C387) * C121) *
                C7787) *
               C50890 +
           (C11027 * C7789 + (C10809 + C10808) * C7788 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C7787) *
               C50996) *
              C50748 * C114 +
          ((((C10648 * C124 + C50688 * C131) * C121 +
             (C10648 * C135 + C50688 * C145) * C50778) *
                C7787 +
            (C10814 + C10815) * C7788 + (C10816 + C10817) * C7789) *
               C50996 +
           (((C10648 * C380 + C50688 * C386) * C121 +
             (C10648 * C390 + C50688 * C398) * C50778) *
                C7787 +
            ((C10648 * C713 + C50688 * C721) * C121 +
             (C10648 * C725 + C50688 * C737) * C50778) *
                C7788 +
            ((C10648 * C716 + C50688 * C728) * C121 +
             (C10648 * C732 + C50688 * C740) * C50778) *
                C7789) *
               C50890) *
              C50748 * C115 -
          ((((C10648 * C731 + C50688 * C739) * C50778 +
             (C10648 * C715 + C50688 * C727) * C121) *
                C7789 +
            ((C10648 * C726 + C50688 * C738) * C50778 +
             (C10648 * C714 + C50688 * C722) * C121) *
                C7788 +
            ((C10648 * C389 + C50688 * C397) * C50778 +
             (C10648 * C379 + C50688 * C385) * C121) *
                C7787) *
               C50890 +
           (((C10648 * C518 + C50688 * C524) * C50778 +
             (C10648 * C509 + C50688 * C514) * C121) *
                C7789 +
            ((C10648 * C259 + C50688 * C271) * C50778 +
             (C10648 * C253 + C50688 * C263) * C121) *
                C7788 +
            ((C10648 * C136 + C50688 * C146) * C50778 +
             (C10648 * C125 + C50688 * C132) * C121) *
                C7787) *
               C50996) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C7787 +
             (C10802 + C10803) * C7788 + C11016 * C7789) *
                C50996 +
            ((C13056 * C121 + C13057 * C50778) * C7787 +
             (C12874 + C12875) * C7788 + C13208 * C7789) *
                C50890) *
               C501 -
           (((C13209 + C13210) * C7789 + (C12877 + C12876) * C7788 +
             (C12875 + C12874) * C7787) *
                C50890 +
            (C11107 * C7789 + (C10805 + C10804) * C7788 +
             (C10803 + C10802) * C7787) *
                C50996) *
               C502 +
           ((C11016 * C7787 + C11017 * C7788 + (C11033 + C11032) * C7789) *
                C50996 +
            (C13208 * C7787 + (C13210 + C13209) * C7788 +
             (C11250 * C121 + C11251 * C50778) * C7789) *
                C50890) *
               C503) *
              C50974 +
          ((((C10808 + C10809) * C7787 + (C10810 + C10811) * C7788 +
             (C10812 + C10813) * C7789) *
                C50996 +
            ((C12878 + C12879) * C7787 + (C12880 + C12881) * C7788 +
             (C13211 + C13212) * C7789) *
                C50890) *
               C502 -
           ((C13213 * C7789 + (C12879 + C12878) * C7788 +
             (C13059 * C50778 + C13058 * C121) * C7787) *
                C50890 +
            (C11027 * C7789 + (C10809 + C10808) * C7788 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C7787) *
                C50996) *
               C501 -
           ((((C10648 * C8609 + C50688 * C8611) * C50778 +
              (C10648 * C8605 + C50688 * C8607) * C121) *
                 C7789 +
             (C13212 + C13211) * C7788 + C13213 * C7787) *
                C50890 +
            ((C11035 + C11034) * C7789 + C11026 * C7788 + C11027 * C7787) *
                C50996) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C844 +
             (C10648 * C133 + C50688 * C143) * C841 - C13056 * C845 -
             C13057 * C842 + C13638 * C846 + C13639 * C843) *
                C7787 +
            (C11464 + C11465 - C11466 - C11467 + C11494 + C11495) * C7788 +
            (C11472 + C11473 - C11474 - C11475 + C11496 + C11497) * C7789) *
               C50996 +
           ((C13056 * C844 + C13057 * C841 - C13638 * C845 - C13639 * C842 +
             (C10648 * C1058 + C50688 * C1062) * C846 +
             (C10648 * C1066 + C50688 * C1070) * C843) *
                C7787 +
            (C11242 * C844 + C11243 * C841 - C11488 * C845 - C11489 * C842 +
             (C10648 * C3451 + C50688 * C3454) * C846 +
             (C10648 * C3457 + C50688 * C3460) * C843) *
                C7788 +
            (C11245 * C844 + C11246 * C841 - C11490 * C845 - C11491 * C842 +
             (C10648 * C9081 + C50688 * C9083) * C846 +
             (C10648 * C9085 + C50688 * C9087) * C843) *
                C7789) *
               C50890) *
              C50748 * C50974 +
          (((C13058 * C845 -
             ((C10648 * C134 + C50688 * C144) * C841 +
              (C10648 * C123 + C50688 * C130) * C844) +
             C13059 * C842 - C13640 * C846 - C13641 * C843) *
                C7787 +
            (C11914 * C845 - (C10791 * C841 + C10790 * C844) + C11915 * C842 -
             C13642 * C846 - C13643 * C843) *
                C7788 +
            (C11916 * C845 - (C10793 * C841 + C10792 * C844) + C11917 * C842 -
             C13644 * C846 - C13645 * C843) *
                C7789) *
               C50996 +
           ((C13640 * C845 - (C13059 * C841 + C13058 * C844) + C13641 * C842 -
             (C10648 * C1057 + C50688 * C1061) * C846 -
             (C10648 * C1065 + C50688 * C1069) * C843) *
                C7787 +
            (C13642 * C845 - (C11915 * C841 + C11914 * C844) + C13643 * C842 -
             (C10648 * C3450 + C50688 * C3453) * C846 -
             (C10648 * C3456 + C50688 * C3459) * C843) *
                C7788 +
            (C13644 * C845 - (C11917 * C841 + C11916 * C844) + C13645 * C842 -
             (C10648 * C9080 + C50688 * C9082) * C846 -
             (C10648 * C9084 + C50688 * C9086) * C843) *
                C7789) *
               C50890) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50778) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C121 + (C5371 + C5370 + C5369) * C50778) *
               C50852 * C50890) *
              C592 -
          (((C3021 + C3022 + C3023) * C50778 + (C3018 + C3019 + C3020) * C121) *
               C50852 * C50890 +
           ((C2367 + C2366 + C2365) * C50778 + (C2364 + C2363 + C2362) * C121) *
               C50852 * C50996) *
              C593 +
          (((C2701 + C2700 + C2699) * C121 + (C2698 + C2697 + C2696) * C50778) *
               C50852 * C50996 +
           ((C3024 + C3025 + C3026) * C121 + (C3027 + C3028 + C3029) * C50778) *
               C50852 * C50890) *
              C594 -
          (((C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
             C2176 * C2989 + C2171 * C2992) *
                C50778 +
            (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
             C2176 * C2983 + C2171 * C2986) *
                C121) *
               C50852 * C50890 +
           ((C2835 + C2834 + C2833) * C50778 + (C2832 + C2831 + C2830) * C121) *
               C50852 * C50996) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50778) *
                C50852 * C50996 +
            ((C2176 * C382 + C2171 * C388 + C2177 * C381 + C2172 * C387 +
              C2178 * C380 + C2173 * C386) *
                 C121 +
             (C2176 * C392 + C2171 * C400 + C2177 * C391 + C2172 * C399 +
              C2178 * C390 + C2173 * C398) *
                 C50778) *
                C50852 * C50890) *
               C50981 -
           (((C3021 + C3022 + C3023) * C50778 +
             (C3018 + C3019 + C3020) * C121) *
                C50852 * C50890 +
            ((C2367 + C2366 + C2365) * C50778 +
             (C2364 + C2363 + C2362) * C121) *
                C50852 * C50996) *
               C50764) *
              C250 +
          ((((C2368 + C2369 + C2370) * C121 +
             (C2371 + C2372 + C2373) * C50778) *
                C50852 * C50996 +
            ((C3960 + C3961 + C3962) * C121 +
             (C3963 + C3964 + C3965) * C50778) *
                C50852 * C50890) *
               C50764 -
           (((C2178 * C389 + C2173 * C397 + C2177 * C390 + C2172 * C398 +
              C2176 * C391 + C2171 * C399) *
                 C50778 +
             (C2178 * C379 + C2173 * C385 + C2177 * C380 + C2172 * C386 +
              C2176 * C381 + C2171 * C387) *
                 C121) *
                C50852 * C50890 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50778 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50852 * C50996) *
               C50981) *
              C251 +
          ((((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
              C2178 * C126 + C2173 * C138) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
              C2178 * C137 + C2173 * C147) *
                 C50778) *
                C50852 * C50996 +
            ((C2176 * C380 + C2171 * C386 + C2177 * C379 + C2172 * C385 +
              C2178 * C383 + C2173 * C393) *
                 C121 +
             (C2176 * C390 + C2171 * C398 + C2177 * C389 + C2172 * C397 +
              C2178 * C394 + C2173 * C401) *
                 C50778) *
                C50852 * C50890) *
               C50981 -
           (((C2178 * C1409 + C2173 * C1410 + C2177 * C726 + C2172 * C738 +
              C2176 * C725 + C2171 * C737) *
                 C50778 +
             (C2178 * C1407 + C2173 * C1408 + C2177 * C714 + C2172 * C722 +
              C2176 * C713 + C2171 * C721) *
                 C121) *
                C50852 * C50890 +
            ((C2379 + C2378 + C2377) * C50778 +
             (C2376 + C2375 + C2374) * C121) *
                C50852 * C50996) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C844 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C841 -
            (C5366 + C5367 + C5368) * C845 - (C5369 + C5370 + C5371) * C842 +
            (C5944 + C5945 + C5946) * C846 + (C5947 + C5948 + C5949) * C843) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C844 + (C5371 + C5370 + C5369) * C841 -
            (C5946 + C5945 + C5944) * C845 - (C5949 + C5948 + C5947) * C842 +
            (C2176 * C1058 + C2171 * C1062 + C2177 * C1057 + C2172 * C1061 +
             C2178 * C1056 + C2173 * C1060) *
                C846 +
            (C2176 * C1066 + C2171 * C1070 + C2177 * C1065 + C2172 * C1069 +
             C2178 * C1064 + C2173 * C1068) *
                C843) *
               C50852 * C50890) *
              C50981 +
          (((C3020 + C3019 + C3018) * C845 -
            ((C2367 + C2366 + C2365) * C841 + (C2364 + C2363 + C2362) * C844) +
            (C3023 + C3022 + C3021) * C842 - (C3348 + C3347 + C3346) * C846 -
            (C3351 + C3350 + C3349) * C843) *
               C50852 * C50996 +
           ((C3346 + C3347 + C3348) * C845 -
            ((C3021 + C3022 + C3023) * C841 + (C3018 + C3019 + C3020) * C844) +
            (C3349 + C3350 + C3351) * C842 -
            (C2178 * C3449 + C2173 * C3452 + C2177 * C3450 + C2172 * C3453 +
             C2176 * C3451 + C2171 * C3454) *
                C846 -
            (C2178 * C3455 + C2173 * C3458 + C2177 * C3456 + C2172 * C3459 +
             C2176 * C3457 + C2171 * C3460) *
                C843) *
               C50852 * C50890) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C7787 +
             (C10802 + C10803) * C7788 + C11016 * C7789) *
                C50996 +
            (((C10648 * C382 + C50688 * C388) * C121 +
              (C10648 * C392 + C50688 * C400) * C50778) *
                 C7787 +
             (C12874 + C12875) * C7788 + (C12876 + C12877) * C7789) *
                C50890) *
               C50981 -
           (((C11249 * C50778 + C11248 * C121) * C7789 +
             (C12877 + C12876) * C7788 + (C12875 + C12874) * C7787) *
                C50890 +
            (C11107 * C7789 + (C10805 + C10804) * C7788 +
             (C10803 + C10802) * C7787) *
                C50996) *
               C50764) *
              C250 +
          ((((C10808 + C10809) * C7787 + (C10810 + C10811) * C7788 +
             (C10812 + C10813) * C7789) *
                C50996 +
            ((C12878 + C12879) * C7787 + (C12880 + C12881) * C7788 +
             (C11918 * C121 + C11919 * C50778) * C7789) *
                C50890) *
               C50764 -
           (((C12881 + C12880) * C7789 + (C12879 + C12878) * C7788 +
             ((C10648 * C391 + C50688 * C399) * C50778 +
              (C10648 * C381 + C50688 * C387) * C121) *
                 C7787) *
                C50890 +
            (C11027 * C7789 + (C10809 + C10808) * C7788 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C7787) *
                C50996) *
               C50981) *
              C251 +
          (((((C10648 * C124 + C50688 * C131) * C121 +
              (C10648 * C135 + C50688 * C145) * C50778) *
                 C7787 +
             (C10814 + C10815) * C7788 + (C10816 + C10817) * C7789) *
                C50996 +
            (((C10648 * C380 + C50688 * C386) * C121 +
              (C10648 * C390 + C50688 * C398) * C50778) *
                 C7787 +
             (C12894 + C12895) * C7788 + (C12896 + C12897) * C7789) *
                C50890) *
               C50981 -
           ((((C10648 * C2987 + C50688 * C2990) * C50778 +
              (C10648 * C2981 + C50688 * C2984) * C121) *
                 C7789 +
             (C12897 + C12896) * C7788 + (C12895 + C12894) * C7787) *
                C50890 +
            ((C10819 + C10818) * C7789 + (C10817 + C10816) * C7788 +
             (C10815 + C10814) * C7787) *
                C50996) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C7787 +
            (C10802 + C10803) * C7788 + C11016 * C7789) *
               C50996 +
           ((C13056 * C121 + C13057 * C50778) * C7787 +
            (C12874 + C12875) * C7788 + C13208 * C7789) *
               C50890) *
              C592 -
          ((C13312 * C7789 + (C12877 + C12876) * C7788 +
            (C12875 + C12874) * C7787) *
               C50890 +
           (C11107 * C7789 + (C10805 + C10804) * C7788 +
            (C10803 + C10802) * C7787) *
               C50996) *
              C593 +
          ((C11016 * C7787 + C11017 * C7788 + (C11033 + C11032) * C7789) *
               C50996 +
           (C13208 * C7787 + (C13210 + C13209) * C7788 +
            (C13313 + C13314) * C7789) *
               C50890) *
              C594 -
          ((((C10648 * C11215 + C50688 * C11216) * C50778 +
             (C10648 * C11213 + C50688 * C11214) * C121) *
                C7789 +
            (C13314 + C13313) * C7788 + C13312 * C7787) *
               C50890 +
           ((C11115 + C11114) * C7789 + C11106 * C7788 + C11107 * C7787) *
               C50996) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C844 +
             (C10648 * C133 + C50688 * C143) * C841 - C13056 * C845 -
             C13057 * C842 + C13638 * C846 + C13639 * C843) *
                C7787 +
            (C11464 + C11465 - C11466 - C11467 + C11494 + C11495) * C7788 +
            (C11472 + C11473 - C11474 - C11475 + C11496 + C11497) * C7789) *
               C50996 +
           ((C13056 * C844 + C13057 * C841 - C13638 * C845 - C13639 * C842 +
             (C10648 * C1058 + C50688 * C1062) * C846 +
             (C10648 * C1066 + C50688 * C1070) * C843) *
                C7787 +
            (C13792 + C13793 - C13794 - C13795 + C13812 + C13813) * C7788 +
            (C13800 + C13801 - C13802 - C13803 + C13814 + C13815) * C7789) *
               C50890) *
              C50981 +
          (((C11466 - (C11465 + C11464) + C11467 - C11494 - C11495) * C7787 +
            (C11474 - (C11473 + C11472) + C11475 - C11496 - C11497) * C7788 +
            (C11482 - (C11481 + C11480) + C11483 - C11498 - C11499) * C7789) *
               C50996 +
           ((C13794 - (C13793 + C13792) + C13795 - C13812 - C13813) * C7787 +
            (C13802 - (C13801 + C13800) + C13803 - C13814 - C13815) * C7788 +
            (C11492 * C845 - (C11249 * C841 + C11248 * C844) + C11493 * C842 -
             (C10648 * C11565 + C50688 * C11566) * C846 -
             (C10648 * C11567 + C50688 * C11568) * C843) *
                C7789) *
               C50890) *
              C50764) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C377 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50983 -
            (C5366 + C5367 + C5368) * C378 - (C5369 + C5370 + C5371) * C50790) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C377 + (C5371 + C5370 + C5369) * C50983 -
            (C2178 * C849 + C2173 * C854 + C2177 * C848 + C2172 * C853 +
             C2176 * C847 + C2171 * C852) *
                C378 -
            (C2178 * C858 + C2173 * C864 + C2177 * C857 + C2172 * C863 +
             C2176 * C856 + C2171 * C862) *
                C50790) *
               C50852 * C50890) *
              C501 +
          (((C3020 + C3019 + C3018) * C378 -
            ((C2367 + C2366 + C2365) * C50983 +
             (C2364 + C2363 + C2362) * C377) +
            (C3023 + C3022 + C3021) * C50790) *
               C50852 * C50996 +
           ((C3346 + C3347 + C3348) * C378 -
            ((C3021 + C3022 + C3023) * C50983 +
             (C3018 + C3019 + C3020) * C377) +
            (C3349 + C3350 + C3351) * C50790) *
               C50852 * C50890) *
              C502 +
          (((C2701 + C2700 + C2699) * C377 + (C2698 + C2697 + C2696) * C50983 -
            (C3026 + C3025 + C3024) * C378 - (C3029 + C3028 + C3027) * C50790) *
               C50852 * C50996 +
           ((C3024 + C3025 + C3026) * C377 + (C3027 + C3028 + C3029) * C50983 -
            (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
             C2176 * C3323 + C2171 * C3326) *
                C378 -
            (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
             C2176 * C3329 + C2171 * C3332) *
                C50790) *
               C50852 * C50890) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C377 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50983 -
            (C5366 + C5367 + C5368) * C378 - (C5369 + C5370 + C5371) * C50790) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C377 + (C5371 + C5370 + C5369) * C50983 -
            (C2178 * C849 + C2173 * C854 + C2177 * C848 + C2172 * C853 +
             C2176 * C847 + C2171 * C852) *
                C378 -
            (C2178 * C858 + C2173 * C864 + C2177 * C857 + C2172 * C863 +
             C2176 * C856 + C2171 * C862) *
                C50790) *
               C50852 * C50890) *
              C50748 * C250 +
          (((C5372 + C5373 + C5374) * C378 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50983 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C377) +
            (C5375 + C5376 + C5377) * C50790) *
               C50852 * C50996 +
           ((C2176 * C848 + C2171 * C853 + C2177 * C849 + C2172 * C854 +
             C2178 * C850 + C2173 * C855) *
                C378 -
            ((C5377 + C5376 + C5375) * C50983 +
             (C5374 + C5373 + C5372) * C377) +
            (C2176 * C857 + C2171 * C863 + C2177 * C858 + C2172 * C864 +
             C2178 * C859 + C2173 * C865) *
                C50790) *
               C50852 * C50890) *
              C50748 * C251 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C377 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50983 -
            (C5378 + C5379 + C5380) * C378 - (C5381 + C5382 + C5383) * C50790) *
               C50852 * C50996 +
           ((C5380 + C5379 + C5378) * C377 + (C5383 + C5382 + C5381) * C50983 -
            (C2178 * C851 + C2173 * C860 + C2177 * C850 + C2172 * C855 +
             C2176 * C849 + C2171 * C854) *
                C378 -
            (C2178 * C861 + C2173 * C866 + C2177 * C859 + C2172 * C865 +
             C2176 * C858 + C2171 * C864) *
                C50790) *
               C50852 * C50890) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
            C2178 * C124 + C2173 * C131) *
               C1051 +
           (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
            C2178 * C135 + C2173 * C145) *
               C1047 -
           (C5366 + C5367 + C5368) * C1052 - (C5369 + C5370 + C5371) * C1048 +
           (C5944 + C5945 + C5946) * C1053 + (C5947 + C5948 + C5949) * C1049 -
           (C6224 + C6225 + C6226) * C1054 - (C6227 + C6228 + C6229) * C1050) *
              C50852 * C50996 +
          ((C5368 + C5367 + C5366) * C1051 + (C5371 + C5370 + C5369) * C1047 -
           (C5946 + C5945 + C5944) * C1052 - (C5949 + C5948 + C5947) * C1048 +
           (C6226 + C6225 + C6224) * C1053 + (C6229 + C6228 + C6227) * C1049 -
           (C2178 * C6199 + C2173 * C6202 + C2177 * C6200 + C2172 * C6203 +
            C2176 * C6201 + C2171 * C6204) *
               C1054 -
           (C2178 * C6205 + C2173 * C6208 + C2177 * C6206 + C2172 * C6209 +
            C2176 * C6207 + C2171 * C6210) *
               C1050) *
              C50852 * C50890) *
         C50748 * C50716) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C7787 +
            (C11218 + C11219 - C11252 - C11253) * C7788 + C11262 * C7789) *
               C50996 +
           ((C13056 * C377 + C13057 * C50983 -
             (C10648 * C847 + C50688 * C852) * C378 -
             (C10648 * C856 + C50688 * C862) * C50790) *
                C7787 +
            (C11242 * C377 + C11243 * C50983 - C11488 * C378 -
             C11489 * C50790) *
                C7788 +
            (C11245 * C377 + C11246 * C50983 - C11490 * C378 -
             C11491 * C50790) *
                C7789) *
               C50890) *
              C50748 * C250 +
          (((C13058 * C378 -
             ((C10648 * C134 + C50688 * C144) * C50983 +
              (C10648 * C123 + C50688 * C130) * C377) +
             C13059 * C50790) *
                C7787 +
            (C11920 - (C11898 + C11899) + C11921) * C7788 +
            (C11922 - (C11904 + C11905) + C11923) * C7789) *
               C50996 +
           (((C10648 * C848 + C50688 * C853) * C378 -
             (C13059 * C50983 + C13058 * C377) +
             (C10648 * C857 + C50688 * C863) * C50790) *
                C7787 +
            ((C10648 * C967 + C50688 * C971) * C378 -
             (C11915 * C50983 + C11914 * C377) +
             (C10648 * C975 + C50688 * C979) * C50790) *
                C7788 +
            ((C10648 * C3322 + C50688 * C3325) * C378 -
             (C11917 * C50983 + C11916 * C377) +
             (C10648 * C3328 + C50688 * C3331) * C50790) *
                C7789) *
               C50890) *
              C50748 * C251 +
          ((((C10648 * C124 + C50688 * C131) * C377 +
             (C10648 * C135 + C50688 * C145) * C50983 - C13060 * C378 -
             C13061 * C50790) *
                C7787 +
            (C10796 * C377 + C10797 * C50983 - C12890 * C378 -
             C12891 * C50790) *
                C7788 +
            (C10798 * C377 + C10799 * C50983 - C12892 * C378 -
             C12893 * C50790) *
                C7789) *
               C50996 +
           ((C13060 * C377 + C13061 * C50983 -
             (C10648 * C849 + C50688 * C854) * C378 -
             (C10648 * C858 + C50688 * C864) * C50790) *
                C7787 +
            (C12890 * C377 + C12891 * C50983 -
             (C10648 * C966 + C50688 * C970) * C378 -
             (C10648 * C974 + C50688 * C978) * C50790) *
                C7788 +
            (C12892 * C377 + C12893 * C50983 -
             (C10648 * C3321 + C50688 * C3324) * C378 -
             (C10648 * C3327 + C50688 * C3330) * C50790) *
                C7789) *
               C50890) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C7787 +
            (C11218 + C11219 - C11252 - C11253) * C7788 + C11262 * C7789) *
               C50996 +
           ((C13056 * C377 + C13057 * C50983 -
             (C10648 * C847 + C50688 * C852) * C378 -
             (C10648 * C856 + C50688 * C862) * C50790) *
                C7787 +
            (C13461 + C13462 - C13463 - C13464) * C7788 + C13475 * C7789) *
               C50890) *
              C501 +
          (((C11252 - (C11219 + C11218) + C11253) * C7787 +
            (C11254 - (C11225 + C11224) + C11255) * C7788 +
            (C11256 - (C11231 + C11230) + C11257) * C7789) *
               C50996 +
           ((C13463 - (C13462 + C13461) + C13464) * C7787 +
            (C13467 - (C13466 + C13465) + C13468) * C7788 +
            (C13469 - (C13470 + C13471) + C13472) * C7789) *
               C50890) *
              C502 +
          ((C11262 * C7787 + C11263 * C7788 +
            (C11239 + C11238 - C11258 - C11259) * C7789) *
               C50996 +
           (C13475 * C7787 + (C13471 + C13470 - C13469 - C13472) * C7788 +
            (C11250 * C377 + C11251 * C50983 -
             (C10648 * C11459 + C50688 * C11460) * C378 -
             (C10648 * C11461 + C50688 * C11462) * C50790) *
                C7789) *
               C50890) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10648 * C122 + C50688 * C129) * C1051 +
            (C10648 * C133 + C50688 * C143) * C1047 - C13056 * C1052 -
            C13057 * C1048 + C13638 * C1053 + C13639 * C1049 - C13926 * C1054 -
            C13927 * C1050) *
               C7787 +
           (C10784 * C1051 + C10785 * C1047 - C11242 * C1052 - C11243 * C1048 +
            C11488 * C1053 + C11489 * C1049 - C13808 * C1054 - C13809 * C1050) *
               C7788 +
           (C10786 * C1051 + C10787 * C1047 - C11245 * C1052 - C11246 * C1048 +
            C11490 * C1053 + C11491 * C1049 - C13810 * C1054 - C13811 * C1050) *
               C7789) *
              C50996 +
          ((C13056 * C1051 + C13057 * C1047 - C13638 * C1052 - C13639 * C1048 +
            C13926 * C1053 + C13927 * C1049 -
            (C10648 * C6201 + C50688 * C6204) * C1054 -
            (C10648 * C6207 + C50688 * C6210) * C1050) *
               C7787 +
           (C11242 * C1051 + C11243 * C1047 - C11488 * C1052 - C11489 * C1048 +
            C13808 * C1053 + C13809 * C1049 -
            (C10648 * C13913 + C50688 * C13915) * C1054 -
            (C10648 * C13916 + C50688 * C13919) * C1050) *
               C7788 +
           (C11245 * C1051 + C11246 * C1047 - C11490 * C1052 - C11491 * C1048 +
            C13810 * C1053 + C13811 * C1049 -
            (C10648 * C13914 + C50688 * C13917) * C1054 -
            (C10648 * C13918 + C50688 * C13920) * C1050) *
               C7789) *
              C50890) *
         C50748 * C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1511 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C1509 -
            (C5366 + C5367 + C5368) * C1512 -
            (C5369 + C5370 + C5371) * C50790) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C1511 + (C5371 + C5370 + C5369) * C1509 -
            (C5946 + C5945 + C5944) * C1512 -
            (C5949 + C5948 + C5947) * C50790) *
               C50852 * C50890) *
              C50748 * C51026 +
          (((C5372 + C5373 + C5374) * C1512 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C1509 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C1511) +
            (C5375 + C5376 + C5377) * C50790) *
               C50852 * C50996 +
           ((C5952 + C5951 + C5950) * C1512 -
            ((C5377 + C5376 + C5375) * C1509 +
             (C5374 + C5373 + C5372) * C1511) +
            (C5955 + C5954 + C5953) * C50790) *
               C50852 * C50890) *
              C50748 * C51012 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C1511 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C1509 -
            (C5378 + C5379 + C5380) * C1512 -
            (C5381 + C5382 + C5383) * C50790) *
               C50852 * C50996 +
           ((C5380 + C5379 + C5378) * C1511 + (C5383 + C5382 + C5381) * C1509 -
            (C2178 * C851 + C2173 * C860 + C2177 * C850 + C2172 * C855 +
             C2176 * C849 + C2171 * C854) *
                C1512 -
            (C2178 * C861 + C2173 * C866 + C2177 * C859 + C2172 * C865 +
             C2176 * C858 + C2171 * C864) *
                C50790) *
               C50852 * C50890) *
              C50748 * C1173)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1511 +
             (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
             C13057 * C50790) *
                C7787 +
            (C12154 + C12155 - C12156 - C12157) * C7788 + C12512 * C7789) *
               C50996 +
           ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
             C13639 * C50790) *
                C7787 +
            (C11242 * C1511 + C11243 * C1509 - C11488 * C1512 -
             C11489 * C50790) *
                C7788 +
            (C11245 * C1511 + C11246 * C1509 - C11490 * C1512 -
             C11491 * C50790) *
                C7789) *
               C50890) *
              C50748 * C51026 +
          (((C13058 * C1512 -
             ((C10648 * C134 + C50688 * C144) * C1509 +
              (C10648 * C123 + C50688 * C130) * C1511) +
             C13059 * C50790) *
                C7787 +
            (C12166 - (C12167 + C12168) + C12169) * C7788 +
            (C12170 - (C12171 + C12172) + C12173) * C7789) *
               C50996 +
           ((C13640 * C1512 - (C13059 * C1509 + C13058 * C1511) +
             C13641 * C50790) *
                C7787 +
            (C13642 * C1512 - (C11915 * C1509 + C11914 * C1511) +
             C13643 * C50790) *
                C7788 +
            (C13644 * C1512 - (C11917 * C1509 + C11916 * C1511) +
             C13645 * C50790) *
                C7789) *
               C50890) *
              C50748 * C51012 +
          ((((C10648 * C124 + C50688 * C131) * C1511 +
             (C10648 * C135 + C50688 * C145) * C1509 - C13060 * C1512 -
             C13061 * C50790) *
                C7787 +
            (C10796 * C1511 + C10797 * C1509 - C12890 * C1512 -
             C12891 * C50790) *
                C7788 +
            (C10798 * C1511 + C10799 * C1509 - C12892 * C1512 -
             C12893 * C50790) *
                C7789) *
               C50996 +
           ((C13060 * C1511 + C13061 * C1509 -
             (C10648 * C849 + C50688 * C854) * C1512 -
             (C10648 * C858 + C50688 * C864) * C50790) *
                C7787 +
            (C12890 * C1511 + C12891 * C1509 -
             (C10648 * C966 + C50688 * C970) * C1512 -
             (C10648 * C974 + C50688 * C978) * C50790) *
                C7788 +
            (C12892 * C1511 + C12893 * C1509 -
             (C10648 * C3321 + C50688 * C3324) * C1512 -
             (C10648 * C3327 + C50688 * C3330) * C50790) *
                C7789) *
               C50890) *
              C50748 * C1173)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C1511 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C1509 -
             (C5366 + C5367 + C5368) * C1512 -
             (C5369 + C5370 + C5371) * C50790) *
                C50852 * C50996 +
            ((C5368 + C5367 + C5366) * C1511 + (C5371 + C5370 + C5369) * C1509 -
             (C5946 + C5945 + C5944) * C1512 -
             (C5949 + C5948 + C5947) * C50790) *
                C50852 * C50890) *
               C50981 +
           (((C3020 + C3019 + C3018) * C1512 -
             ((C2367 + C2366 + C2365) * C1509 +
              (C2364 + C2363 + C2362) * C1511) +
             (C3023 + C3022 + C3021) * C50790) *
                C50852 * C50996 +
            ((C3346 + C3347 + C3348) * C1512 -
             ((C3021 + C3022 + C3023) * C1509 +
              (C3018 + C3019 + C3020) * C1511) +
             (C3349 + C3350 + C3351) * C50790) *
                C50852 * C50890) *
               C50764) *
              C1275 +
          ((((C5372 + C5373 + C5374) * C1512 -
             ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
               C2176 * C134 + C2171 * C144) *
                  C1509 +
              (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
               C2176 * C123 + C2171 * C130) *
                  C1511) +
             (C5375 + C5376 + C5377) * C50790) *
                C50852 * C50996 +
            ((C5952 + C5951 + C5950) * C1512 -
             ((C5377 + C5376 + C5375) * C1509 +
              (C5374 + C5373 + C5372) * C1511) +
             (C5955 + C5954 + C5953) * C50790) *
                C50852 * C50890) *
               C50981 +
           (((C2368 + C2369 + C2370) * C1511 + (C2371 + C2372 + C2373) * C1509 -
             (C3962 + C3961 + C3960) * C1512 -
             (C3965 + C3964 + C3963) * C50790) *
                C50852 * C50996 +
            ((C3960 + C3961 + C3962) * C1511 + (C3963 + C3964 + C3965) * C1509 -
             (C2178 * C965 + C2173 * C969 + C2177 * C966 + C2172 * C970 +
              C2176 * C967 + C2171 * C971) *
                 C1512 -
             (C2178 * C973 + C2173 * C977 + C2177 * C974 + C2172 * C978 +
              C2176 * C975 + C2171 * C979) *
                 C50790) *
                C50852 * C50890) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C1511 +
              (C10648 * C133 + C50688 * C143) * C1509 - C13056 * C1512 -
              C13057 * C50790) *
                 C7787 +
             (C12154 + C12155 - C12156 - C12157) * C7788 + C12512 * C7789) *
                C50996 +
            ((C13056 * C1511 + C13057 * C1509 - C13638 * C1512 -
              C13639 * C50790) *
                 C7787 +
             (C14762 + C14763 - C14764 - C14765) * C7788 +
             (C14766 + C14767 - C14768 - C14769) * C7789) *
                C50890) *
               C50981 +
           (((C12156 - (C12155 + C12154) + C12157) * C7787 +
             (C12160 - (C12159 + C12158) + C12161) * C7788 +
             (C12164 - (C12163 + C12162) + C12165) * C7789) *
                C50996 +
            ((C14764 - (C14763 + C14762) + C14765) * C7787 +
             (C14768 - (C14767 + C14766) + C14769) * C7788 +
             (C11492 * C1512 - (C11249 * C1509 + C11248 * C1511) +
              C11493 * C50790) *
                 C7789) *
                C50890) *
               C50764) *
              C1275 +
          ((((C13058 * C1512 -
              ((C10648 * C134 + C50688 * C144) * C1509 +
               (C10648 * C123 + C50688 * C130) * C1511) +
              C13059 * C50790) *
                 C7787 +
             (C12166 - (C12167 + C12168) + C12169) * C7788 +
             (C12170 - (C12171 + C12172) + C12173) * C7789) *
                C50996 +
            ((C13640 * C1512 - (C13059 * C1509 + C13058 * C1511) +
              C13641 * C50790) *
                 C7787 +
             (C14770 - (C14771 + C14772) + C14773) * C7788 +
             (C14774 - (C14775 + C14776) + C14777) * C7789) *
                C50890) *
               C50981 +
           (((C12168 + C12167 - C12166 - C12169) * C7787 +
             (C12172 + C12171 - C12170 - C12173) * C7788 +
             (C12176 + C12175 - C12174 - C12177) * C7789) *
                C50996 +
            ((C14772 + C14771 - C14770 - C14773) * C7787 +
             (C14776 + C14775 - C14774 - C14777) * C7788 +
             (C11918 * C1511 + C11919 * C1509 -
              (C10648 * C8950 + C50688 * C8952) * C1512 -
              (C10648 * C8954 + C50688 * C8956) * C50790) *
                 C7789) *
                C50890) *
               C50764) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C1744 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C51028 -
            (C5366 + C5367 + C5368) * C1745 - (C5369 + C5370 + C5371) * C51018 +
            (C5944 + C5945 + C5946) * C1746 + (C5947 + C5948 + C5949) * C1743) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C1744 + (C5371 + C5370 + C5369) * C51028 -
            (C5946 + C5945 + C5944) * C1745 - (C5949 + C5948 + C5947) * C51018 +
            (C6226 + C6225 + C6224) * C1746 + (C6229 + C6228 + C6227) * C1743) *
               C50852 * C50890) *
              C50748 * C1275 +
          (((C5372 + C5373 + C5374) * C1745 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C51028 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C1744) +
            (C5375 + C5376 + C5377) * C51018 - (C5950 + C5951 + C5952) * C1746 -
            (C5953 + C5954 + C5955) * C1743) *
               C50852 * C50996 +
           ((C5952 + C5951 + C5950) * C1745 -
            ((C5377 + C5376 + C5375) * C51028 +
             (C5374 + C5373 + C5372) * C1744) +
            (C5955 + C5954 + C5953) * C51018 -
            (C2178 * C1055 + C2173 * C1059 + C2177 * C1056 + C2172 * C1060 +
             C2176 * C1057 + C2171 * C1061) *
                C1746 -
            (C2178 * C1063 + C2173 * C1067 + C2177 * C1064 + C2172 * C1068 +
             C2176 * C1065 + C2171 * C1069) *
                C1743) *
               C50852 * C50890) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C1744 +
             (C10648 * C133 + C50688 * C143) * C51028 - C13056 * C1745 -
             C13057 * C51018 + C13638 * C1746 + C13639 * C1743) *
                C7787 +
            (C12612 + C12613 - C12614 - C12615 + C12616 + C12617) * C7788 +
            (C12618 + C12619 - C12620 - C12621 + C12622 + C12623) * C7789) *
               C50996 +
           ((C13056 * C1744 + C13057 * C51028 - C13638 * C1745 -
             C13639 * C51018 + C13926 * C1746 + C13927 * C1743) *
                C7787 +
            (C11242 * C1744 + C11243 * C51028 - C11488 * C1745 -
             C11489 * C51018 + C13808 * C1746 + C13809 * C1743) *
                C7788 +
            (C11245 * C1744 + C11246 * C51028 - C11490 * C1745 -
             C11491 * C51018 + C13810 * C1746 + C13811 * C1743) *
                C7789) *
               C50890) *
              C50748 * C1275 +
          (((C13058 * C1745 -
             ((C10648 * C134 + C50688 * C144) * C51028 +
              (C10648 * C123 + C50688 * C130) * C1744) +
             C13059 * C51018 - C13640 * C1746 - C13641 * C1743) *
                C7787 +
            (C11914 * C1745 - (C10791 * C51028 + C10790 * C1744) +
             C11915 * C51018 - C13642 * C1746 - C13643 * C1743) *
                C7788 +
            (C11916 * C1745 - (C10793 * C51028 + C10792 * C1744) +
             C11917 * C51018 - C13644 * C1746 - C13645 * C1743) *
                C7789) *
               C50996 +
           ((C13640 * C1745 - (C13059 * C51028 + C13058 * C1744) +
             C13641 * C51018 - (C10648 * C1057 + C50688 * C1061) * C1746 -
             (C10648 * C1065 + C50688 * C1069) * C1743) *
                C7787 +
            (C13642 * C1745 - (C11915 * C51028 + C11914 * C1744) +
             C13643 * C51018 - (C10648 * C3450 + C50688 * C3453) * C1746 -
             (C10648 * C3456 + C50688 * C3459) * C1743) *
                C7788 +
            (C13644 * C1745 - (C11917 * C51028 + C11916 * C1744) +
             C13645 * C51018 - (C10648 * C9080 + C50688 * C9082) * C1746 -
             (C10648 * C9084 + C50688 * C9086) * C1743) *
                C7789) *
               C50890) *
              C50748 * C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50778) *
               C50852 * C50996 +
           ((C2176 * C382 + C2171 * C388 + C2177 * C381 + C2172 * C387 +
             C2178 * C380 + C2173 * C386) *
                C121 +
            (C2176 * C392 + C2171 * C400 + C2177 * C391 + C2172 * C399 +
             C2178 * C390 + C2173 * C398) *
                C50778) *
               C50852 * C50890) *
              C50748 * C113 -
          (((C2178 * C389 + C2173 * C397 + C2177 * C390 + C2172 * C398 +
             C2176 * C391 + C2171 * C399) *
                C50778 +
            (C2178 * C379 + C2173 * C385 + C2177 * C380 + C2172 * C386 +
             C2176 * C381 + C2171 * C387) *
                C121) *
               C50852 * C50890 +
           ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
             C2176 * C134 + C2171 * C144) *
                C50778 +
            (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
             C2176 * C123 + C2171 * C130) *
                C121) *
               C50852 * C50996) *
              C50748 * C114 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C121 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50778) *
               C50852 * C50996 +
           ((C2176 * C380 + C2171 * C386 + C2177 * C379 + C2172 * C385 +
             C2178 * C383 + C2173 * C393) *
                C121 +
            (C2176 * C390 + C2171 * C398 + C2177 * C389 + C2172 * C397 +
             C2178 * C394 + C2173 * C401) *
                C50778) *
               C50852 * C50890) *
              C50748 * C115 -
          (((C2178 * C396 + C2173 * C402 + C2177 * C394 + C2172 * C401 +
             C2176 * C389 + C2171 * C397) *
                C50778 +
            (C2178 * C384 + C2173 * C395 + C2177 * C383 + C2172 * C393 +
             C2176 * C379 + C2171 * C385) *
                C121) *
               C50852 * C50890 +
           ((C2178 * C140 + C2173 * C148 + C2177 * C137 + C2172 * C147 +
             C2176 * C136 + C2171 * C146) *
                C50778 +
            (C2178 * C127 + C2173 * C139 + C2177 * C126 + C2172 * C138 +
             C2176 * C125 + C2171 * C132) *
                C121) *
               C50852 * C50996) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50778) *
                C50852 * C50996 +
            ((C5368 + C5367 + C5366) * C121 +
             (C5371 + C5370 + C5369) * C50778) *
                C50852 * C50890) *
               C501 -
           (((C3021 + C3022 + C3023) * C50778 +
             (C3018 + C3019 + C3020) * C121) *
                C50852 * C50890 +
            ((C2367 + C2366 + C2365) * C50778 +
             (C2364 + C2363 + C2362) * C121) *
                C50852 * C50996) *
               C502 +
           (((C2701 + C2700 + C2699) * C121 +
             (C2698 + C2697 + C2696) * C50778) *
                C50852 * C50996 +
            ((C3024 + C3025 + C3026) * C121 +
             (C3027 + C3028 + C3029) * C50778) *
                C50852 * C50890) *
               C503) *
              C50974 +
          ((((C2368 + C2369 + C2370) * C121 +
             (C2371 + C2372 + C2373) * C50778) *
                C50852 * C50996 +
            ((C3960 + C3961 + C3962) * C121 +
             (C3963 + C3964 + C3965) * C50778) *
                C50852 * C50890) *
               C502 -
           (((C5377 + C5376 + C5375) * C50778 +
             (C5374 + C5373 + C5372) * C121) *
                C50852 * C50890 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50778 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50852 * C50996) *
               C501 -
           (((C2178 * C731 + C2173 * C739 + C2177 * C732 + C2172 * C740 +
              C2176 * C733 + C2171 * C741) *
                 C50778 +
             (C2178 * C715 + C2173 * C727 + C2177 * C716 + C2172 * C728 +
              C2176 * C717 + C2171 * C729) *
                 C121) *
                C50852 * C50890 +
            ((C2707 + C2706 + C2705) * C50778 +
             (C2704 + C2703 + C2702) * C121) *
                C50852 * C50996) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C7787 +
            (C10802 + C10803) * C7788 + C11016 * C7789) *
               C50996 +
           (((C10648 * C382 + C50688 * C388) * C121 +
             (C10648 * C392 + C50688 * C400) * C50778) *
                C7787 +
            (C11242 * C121 + C11243 * C50778) * C7788 +
            (C11245 * C121 + C11246 * C50778) * C7789) *
               C50890) *
              C50748 * C113 -
          (((C11917 * C50778 + C11916 * C121) * C7789 +
            (C11915 * C50778 + C11914 * C121) * C7788 +
            ((C10648 * C391 + C50688 * C399) * C50778 +
             (C10648 * C381 + C50688 * C387) * C121) *
                C7787) *
               C50890 +
           (C11027 * C7789 + (C10809 + C10808) * C7788 +
            ((C10648 * C134 + C50688 * C144) * C50778 +
             (C10648 * C123 + C50688 * C130) * C121) *
                C7787) *
               C50996) *
              C50748 * C114 +
          ((((C10648 * C124 + C50688 * C131) * C121 +
             (C10648 * C135 + C50688 * C145) * C50778) *
                C7787 +
            (C10814 + C10815) * C7788 + (C10816 + C10817) * C7789) *
               C50996 +
           (((C10648 * C380 + C50688 * C386) * C121 +
             (C10648 * C390 + C50688 * C398) * C50778) *
                C7787 +
            ((C10648 * C713 + C50688 * C721) * C121 +
             (C10648 * C725 + C50688 * C737) * C50778) *
                C7788 +
            ((C10648 * C716 + C50688 * C728) * C121 +
             (C10648 * C732 + C50688 * C740) * C50778) *
                C7789) *
               C50890) *
              C50748 * C115 -
          ((((C10648 * C731 + C50688 * C739) * C50778 +
             (C10648 * C715 + C50688 * C727) * C121) *
                C7789 +
            ((C10648 * C726 + C50688 * C738) * C50778 +
             (C10648 * C714 + C50688 * C722) * C121) *
                C7788 +
            ((C10648 * C389 + C50688 * C397) * C50778 +
             (C10648 * C379 + C50688 * C385) * C121) *
                C7787) *
               C50890 +
           (((C10648 * C518 + C50688 * C524) * C50778 +
             (C10648 * C509 + C50688 * C514) * C121) *
                C7789 +
            ((C10648 * C259 + C50688 * C271) * C50778 +
             (C10648 * C253 + C50688 * C263) * C121) *
                C7788 +
            ((C10648 * C136 + C50688 * C146) * C50778 +
             (C10648 * C125 + C50688 * C132) * C121) *
                C7787) *
               C50996) *
              C50748 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C7787 +
             (C10802 + C10803) * C7788 + C11016 * C7789) *
                C50996 +
            ((C13056 * C121 + C13057 * C50778) * C7787 +
             (C12874 + C12875) * C7788 + C13208 * C7789) *
                C50890) *
               C501 -
           (((C13209 + C13210) * C7789 + (C12877 + C12876) * C7788 +
             (C12875 + C12874) * C7787) *
                C50890 +
            (C11107 * C7789 + (C10805 + C10804) * C7788 +
             (C10803 + C10802) * C7787) *
                C50996) *
               C502 +
           ((C11016 * C7787 + C11017 * C7788 + (C11033 + C11032) * C7789) *
                C50996 +
            (C13208 * C7787 + (C13210 + C13209) * C7788 +
             (C11250 * C121 + C11251 * C50778) * C7789) *
                C50890) *
               C503) *
              C50974 +
          ((((C10808 + C10809) * C7787 + (C10810 + C10811) * C7788 +
             (C10812 + C10813) * C7789) *
                C50996 +
            ((C12878 + C12879) * C7787 + (C12880 + C12881) * C7788 +
             (C13211 + C13212) * C7789) *
                C50890) *
               C502 -
           ((C13213 * C7789 + (C12879 + C12878) * C7788 +
             (C13059 * C50778 + C13058 * C121) * C7787) *
                C50890 +
            (C11027 * C7789 + (C10809 + C10808) * C7788 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C7787) *
                C50996) *
               C501 -
           ((((C10648 * C8609 + C50688 * C8611) * C50778 +
              (C10648 * C8605 + C50688 * C8607) * C121) *
                 C7789 +
             (C13212 + C13211) * C7788 + C13213 * C7787) *
                C50890 +
            ((C11035 + C11034) * C7789 + C11026 * C7788 + C11027 * C7787) *
                C50996) *
               C503) *
              C50721)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
              C2178 * C124 + C2173 * C131) *
                 C121 +
             (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
              C2178 * C135 + C2173 * C145) *
                 C50778) *
                C50852 * C50996 +
            ((C2176 * C382 + C2171 * C388 + C2177 * C381 + C2172 * C387 +
              C2178 * C380 + C2173 * C386) *
                 C121 +
             (C2176 * C392 + C2171 * C400 + C2177 * C391 + C2172 * C399 +
              C2178 * C390 + C2173 * C398) *
                 C50778) *
                C50852 * C50890) *
               C50981 -
           (((C3021 + C3022 + C3023) * C50778 +
             (C3018 + C3019 + C3020) * C121) *
                C50852 * C50890 +
            ((C2367 + C2366 + C2365) * C50778 +
             (C2364 + C2363 + C2362) * C121) *
                C50852 * C50996) *
               C50764) *
              C250 +
          ((((C2368 + C2369 + C2370) * C121 +
             (C2371 + C2372 + C2373) * C50778) *
                C50852 * C50996 +
            ((C3960 + C3961 + C3962) * C121 +
             (C3963 + C3964 + C3965) * C50778) *
                C50852 * C50890) *
               C50764 -
           (((C2178 * C389 + C2173 * C397 + C2177 * C390 + C2172 * C398 +
              C2176 * C391 + C2171 * C399) *
                 C50778 +
             (C2178 * C379 + C2173 * C385 + C2177 * C380 + C2172 * C386 +
              C2176 * C381 + C2171 * C387) *
                 C121) *
                C50852 * C50890 +
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50778 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C121) *
                C50852 * C50996) *
               C50981) *
              C251 +
          ((((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
              C2178 * C126 + C2173 * C138) *
                 C121 +
             (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
              C2178 * C137 + C2173 * C147) *
                 C50778) *
                C50852 * C50996 +
            ((C2176 * C380 + C2171 * C386 + C2177 * C379 + C2172 * C385 +
              C2178 * C383 + C2173 * C393) *
                 C121 +
             (C2176 * C390 + C2171 * C398 + C2177 * C389 + C2172 * C397 +
              C2178 * C394 + C2173 * C401) *
                 C50778) *
                C50852 * C50890) *
               C50981 -
           (((C2178 * C1409 + C2173 * C1410 + C2177 * C726 + C2172 * C738 +
              C2176 * C725 + C2171 * C737) *
                 C50778 +
             (C2178 * C1407 + C2173 * C1408 + C2177 * C714 + C2172 * C722 +
              C2176 * C713 + C2171 * C721) *
                 C121) *
                C50852 * C50890 +
            ((C2379 + C2378 + C2377) * C50778 +
             (C2376 + C2375 + C2374) * C121) *
                C50852 * C50996) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C121 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50778) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C121 + (C5371 + C5370 + C5369) * C50778) *
               C50852 * C50890) *
              C592 -
          (((C3021 + C3022 + C3023) * C50778 + (C3018 + C3019 + C3020) * C121) *
               C50852 * C50890 +
           ((C2367 + C2366 + C2365) * C50778 + (C2364 + C2363 + C2362) * C121) *
               C50852 * C50996) *
              C593 +
          (((C2701 + C2700 + C2699) * C121 + (C2698 + C2697 + C2696) * C50778) *
               C50852 * C50996 +
           ((C3024 + C3025 + C3026) * C121 + (C3027 + C3028 + C3029) * C50778) *
               C50852 * C50890) *
              C594 -
          (((C2178 * C2987 + C2173 * C2990 + C2177 * C2988 + C2172 * C2991 +
             C2176 * C2989 + C2171 * C2992) *
                C50778 +
            (C2178 * C2981 + C2173 * C2984 + C2177 * C2982 + C2172 * C2985 +
             C2176 * C2983 + C2171 * C2986) *
                C121) *
               C50852 * C50890 +
           ((C2835 + C2834 + C2833) * C50778 + (C2832 + C2831 + C2830) * C121) *
               C50852 * C50996) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C10648 * C122 + C50688 * C129) * C121 +
              (C10648 * C133 + C50688 * C143) * C50778) *
                 C7787 +
             (C10802 + C10803) * C7788 + C11016 * C7789) *
                C50996 +
            (((C10648 * C382 + C50688 * C388) * C121 +
              (C10648 * C392 + C50688 * C400) * C50778) *
                 C7787 +
             (C12874 + C12875) * C7788 + (C12876 + C12877) * C7789) *
                C50890) *
               C50981 -
           (((C11249 * C50778 + C11248 * C121) * C7789 +
             (C12877 + C12876) * C7788 + (C12875 + C12874) * C7787) *
                C50890 +
            (C11107 * C7789 + (C10805 + C10804) * C7788 +
             (C10803 + C10802) * C7787) *
                C50996) *
               C50764) *
              C250 +
          ((((C10808 + C10809) * C7787 + (C10810 + C10811) * C7788 +
             (C10812 + C10813) * C7789) *
                C50996 +
            ((C12878 + C12879) * C7787 + (C12880 + C12881) * C7788 +
             (C11918 * C121 + C11919 * C50778) * C7789) *
                C50890) *
               C50764 -
           (((C12881 + C12880) * C7789 + (C12879 + C12878) * C7788 +
             ((C10648 * C391 + C50688 * C399) * C50778 +
              (C10648 * C381 + C50688 * C387) * C121) *
                 C7787) *
                C50890 +
            (C11027 * C7789 + (C10809 + C10808) * C7788 +
             ((C10648 * C134 + C50688 * C144) * C50778 +
              (C10648 * C123 + C50688 * C130) * C121) *
                 C7787) *
                C50996) *
               C50981) *
              C251 +
          (((((C10648 * C124 + C50688 * C131) * C121 +
              (C10648 * C135 + C50688 * C145) * C50778) *
                 C7787 +
             (C10814 + C10815) * C7788 + (C10816 + C10817) * C7789) *
                C50996 +
            (((C10648 * C380 + C50688 * C386) * C121 +
              (C10648 * C390 + C50688 * C398) * C50778) *
                 C7787 +
             (C12894 + C12895) * C7788 + (C12896 + C12897) * C7789) *
                C50890) *
               C50981 -
           ((((C10648 * C2987 + C50688 * C2990) * C50778 +
              (C10648 * C2981 + C50688 * C2984) * C121) *
                 C7789 +
             (C12897 + C12896) * C7788 + (C12895 + C12894) * C7787) *
                C50890 +
            ((C10819 + C10818) * C7789 + (C10817 + C10816) * C7788 +
             (C10815 + C10814) * C7787) *
                C50996) *
               C50764) *
              C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C121 +
             (C10648 * C133 + C50688 * C143) * C50778) *
                C7787 +
            (C10802 + C10803) * C7788 + C11016 * C7789) *
               C50996 +
           ((C13056 * C121 + C13057 * C50778) * C7787 +
            (C12874 + C12875) * C7788 + C13208 * C7789) *
               C50890) *
              C592 -
          ((C13312 * C7789 + (C12877 + C12876) * C7788 +
            (C12875 + C12874) * C7787) *
               C50890 +
           (C11107 * C7789 + (C10805 + C10804) * C7788 +
            (C10803 + C10802) * C7787) *
               C50996) *
              C593 +
          ((C11016 * C7787 + C11017 * C7788 + (C11033 + C11032) * C7789) *
               C50996 +
           (C13208 * C7787 + (C13210 + C13209) * C7788 +
            (C13313 + C13314) * C7789) *
               C50890) *
              C594 -
          ((((C10648 * C11215 + C50688 * C11216) * C50778 +
             (C10648 * C11213 + C50688 * C11214) * C121) *
                C7789 +
            (C13314 + C13313) * C7788 + C13312 * C7787) *
               C50890 +
           ((C11115 + C11114) * C7789 + C11106 * C7788 + C11107 * C7787) *
               C50996) *
              C595) *
         C50716) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C377 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50983 -
            (C5366 + C5367 + C5368) * C378 - (C5369 + C5370 + C5371) * C50790) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C377 + (C5371 + C5370 + C5369) * C50983 -
            (C2178 * C849 + C2173 * C854 + C2177 * C848 + C2172 * C853 +
             C2176 * C847 + C2171 * C852) *
                C378 -
            (C2178 * C858 + C2173 * C864 + C2177 * C857 + C2172 * C863 +
             C2176 * C856 + C2171 * C862) *
                C50790) *
               C50852 * C50890) *
              C50748 * C250 +
          (((C5372 + C5373 + C5374) * C378 -
            ((C2178 * C136 + C2173 * C146 + C2177 * C135 + C2172 * C145 +
              C2176 * C134 + C2171 * C144) *
                 C50983 +
             (C2178 * C125 + C2173 * C132 + C2177 * C124 + C2172 * C131 +
              C2176 * C123 + C2171 * C130) *
                 C377) +
            (C5375 + C5376 + C5377) * C50790) *
               C50852 * C50996 +
           ((C2176 * C848 + C2171 * C853 + C2177 * C849 + C2172 * C854 +
             C2178 * C850 + C2173 * C855) *
                C378 -
            ((C5377 + C5376 + C5375) * C50983 +
             (C5374 + C5373 + C5372) * C377) +
            (C2176 * C857 + C2171 * C863 + C2177 * C858 + C2172 * C864 +
             C2178 * C859 + C2173 * C865) *
                C50790) *
               C50852 * C50890) *
              C50748 * C251 +
          (((C2176 * C124 + C2171 * C131 + C2177 * C125 + C2172 * C132 +
             C2178 * C126 + C2173 * C138) *
                C377 +
            (C2176 * C135 + C2171 * C145 + C2177 * C136 + C2172 * C146 +
             C2178 * C137 + C2173 * C147) *
                C50983 -
            (C5378 + C5379 + C5380) * C378 - (C5381 + C5382 + C5383) * C50790) *
               C50852 * C50996 +
           ((C5380 + C5379 + C5378) * C377 + (C5383 + C5382 + C5381) * C50983 -
            (C2178 * C851 + C2173 * C860 + C2177 * C850 + C2172 * C855 +
             C2176 * C849 + C2171 * C854) *
                C378 -
            (C2178 * C861 + C2173 * C866 + C2177 * C859 + C2172 * C865 +
             C2176 * C858 + C2171 * C864) *
                C50790) *
               C50852 * C50890) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2176 * C122 + C2171 * C129 + C2177 * C123 + C2172 * C130 +
             C2178 * C124 + C2173 * C131) *
                C377 +
            (C2176 * C133 + C2171 * C143 + C2177 * C134 + C2172 * C144 +
             C2178 * C135 + C2173 * C145) *
                C50983 -
            (C5366 + C5367 + C5368) * C378 - (C5369 + C5370 + C5371) * C50790) *
               C50852 * C50996 +
           ((C5368 + C5367 + C5366) * C377 + (C5371 + C5370 + C5369) * C50983 -
            (C2178 * C849 + C2173 * C854 + C2177 * C848 + C2172 * C853 +
             C2176 * C847 + C2171 * C852) *
                C378 -
            (C2178 * C858 + C2173 * C864 + C2177 * C857 + C2172 * C863 +
             C2176 * C856 + C2171 * C862) *
                C50790) *
               C50852 * C50890) *
              C501 +
          (((C3020 + C3019 + C3018) * C378 -
            ((C2367 + C2366 + C2365) * C50983 +
             (C2364 + C2363 + C2362) * C377) +
            (C3023 + C3022 + C3021) * C50790) *
               C50852 * C50996 +
           ((C3346 + C3347 + C3348) * C378 -
            ((C3021 + C3022 + C3023) * C50983 +
             (C3018 + C3019 + C3020) * C377) +
            (C3349 + C3350 + C3351) * C50790) *
               C50852 * C50890) *
              C502 +
          (((C2701 + C2700 + C2699) * C377 + (C2698 + C2697 + C2696) * C50983 -
            (C3026 + C3025 + C3024) * C378 - (C3029 + C3028 + C3027) * C50790) *
               C50852 * C50996 +
           ((C3024 + C3025 + C3026) * C377 + (C3027 + C3028 + C3029) * C50983 -
            (C2178 * C3321 + C2173 * C3324 + C2177 * C3322 + C2172 * C3325 +
             C2176 * C3323 + C2171 * C3326) *
                C378 -
            (C2178 * C3327 + C2173 * C3330 + C2177 * C3328 + C2172 * C3331 +
             C2176 * C3329 + C2171 * C3332) *
                C50790) *
               C50852 * C50890) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C7787 +
            (C11218 + C11219 - C11252 - C11253) * C7788 + C11262 * C7789) *
               C50996 +
           ((C13056 * C377 + C13057 * C50983 -
             (C10648 * C847 + C50688 * C852) * C378 -
             (C10648 * C856 + C50688 * C862) * C50790) *
                C7787 +
            (C11242 * C377 + C11243 * C50983 - C11488 * C378 -
             C11489 * C50790) *
                C7788 +
            (C11245 * C377 + C11246 * C50983 - C11490 * C378 -
             C11491 * C50790) *
                C7789) *
               C50890) *
              C50748 * C250 +
          (((C13058 * C378 -
             ((C10648 * C134 + C50688 * C144) * C50983 +
              (C10648 * C123 + C50688 * C130) * C377) +
             C13059 * C50790) *
                C7787 +
            (C11920 - (C11898 + C11899) + C11921) * C7788 +
            (C11922 - (C11904 + C11905) + C11923) * C7789) *
               C50996 +
           (((C10648 * C848 + C50688 * C853) * C378 -
             (C13059 * C50983 + C13058 * C377) +
             (C10648 * C857 + C50688 * C863) * C50790) *
                C7787 +
            ((C10648 * C967 + C50688 * C971) * C378 -
             (C11915 * C50983 + C11914 * C377) +
             (C10648 * C975 + C50688 * C979) * C50790) *
                C7788 +
            ((C10648 * C3322 + C50688 * C3325) * C378 -
             (C11917 * C50983 + C11916 * C377) +
             (C10648 * C3328 + C50688 * C3331) * C50790) *
                C7789) *
               C50890) *
              C50748 * C251 +
          ((((C10648 * C124 + C50688 * C131) * C377 +
             (C10648 * C135 + C50688 * C145) * C50983 - C13060 * C378 -
             C13061 * C50790) *
                C7787 +
            (C10796 * C377 + C10797 * C50983 - C12890 * C378 -
             C12891 * C50790) *
                C7788 +
            (C10798 * C377 + C10799 * C50983 - C12892 * C378 -
             C12893 * C50790) *
                C7789) *
               C50996 +
           ((C13060 * C377 + C13061 * C50983 -
             (C10648 * C849 + C50688 * C854) * C378 -
             (C10648 * C858 + C50688 * C864) * C50790) *
                C7787 +
            (C12890 * C377 + C12891 * C50983 -
             (C10648 * C966 + C50688 * C970) * C378 -
             (C10648 * C974 + C50688 * C978) * C50790) *
                C7788 +
            (C12892 * C377 + C12893 * C50983 -
             (C10648 * C3321 + C50688 * C3324) * C378 -
             (C10648 * C3327 + C50688 * C3330) * C50790) *
                C7789) *
               C50890) *
              C50748 * C252)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10648 * C122 + C50688 * C129) * C377 +
             (C10648 * C133 + C50688 * C143) * C50983 - C13056 * C378 -
             C13057 * C50790) *
                C7787 +
            (C11218 + C11219 - C11252 - C11253) * C7788 + C11262 * C7789) *
               C50996 +
           ((C13056 * C377 + C13057 * C50983 -
             (C10648 * C847 + C50688 * C852) * C378 -
             (C10648 * C856 + C50688 * C862) * C50790) *
                C7787 +
            (C13461 + C13462 - C13463 - C13464) * C7788 + C13475 * C7789) *
               C50890) *
              C501 +
          (((C11252 - (C11219 + C11218) + C11253) * C7787 +
            (C11254 - (C11225 + C11224) + C11255) * C7788 +
            (C11256 - (C11231 + C11230) + C11257) * C7789) *
               C50996 +
           ((C13463 - (C13462 + C13461) + C13464) * C7787 +
            (C13467 - (C13466 + C13465) + C13468) * C7788 +
            (C13469 - (C13470 + C13471) + C13472) * C7789) *
               C50890) *
              C502 +
          ((C11262 * C7787 + C11263 * C7788 +
            (C11239 + C11238 - C11258 - C11259) * C7789) *
               C50996 +
           (C13475 * C7787 + (C13471 + C13470 - C13469 - C13472) * C7788 +
            (C11250 * C377 + C11251 * C50983 -
             (C10648 * C11459 + C50688 * C11460) * C378 -
             (C10648 * C11461 + C50688 * C11462) * C50790) *
                C7789) *
               C50890) *
              C503) *
         C50716) /
            (p * q * std::sqrt(p + q));
}
