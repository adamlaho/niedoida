/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_dpdp_AC_yx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2121_13_21(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49697 = 0 * ce;
    const double C49696 = ce * de;
    const double C49695 = 0 * de;
    const double C49694 = ce + de;
    const double C49693 = 0 * de;
    const double C49692 = xC - xD;
    const double C49756 = ae + be;
    const double C49755 = yA - yB;
    const double C49766 = ae * be;
    const double C49765 = 0 * be;
    const double C49784 = 0 * ae;
    const double C49780 = 0 * be;
    const double C49824 = yP - yQ;
    const double C49823 = p + q;
    const double C49822 = p * q;
    const double C49821 = xP - xQ;
    const double C49829 = bs[3];
    const double C49840 = bs[4];
    const double C49848 = bs[5];
    const double C49867 = bs[6];
    const double C49897 = bs[7];
    const double C50022 = zP - zQ;
    const double C50239 = bs[2];
    const double C122 = bs[0];
    const double C50622 = xA - xB;
    const double C50652 = yC - yD;
    const double C50657 = zC - zD;
    const double C50756 = zA - zB;
    const double C49702 = C49697 / C49694;
    const double C49699 = 2 * C49694;
    const double C49698 = std::pow(C49694, 2);
    const double C49701 = C49696 * C49692;
    const double C49700 = C49692 * C49695;
    const double C50603 = C49692 * de;
    const double C50602 = C49692 * ce;
    const double C50601 = std::pow(C49692, 2);
    const double C49764 = 2 * C49756;
    const double C49781 = std::pow(C49756, 2);
    const double C49832 = C49694 * C49756;
    const double C143 = (-(std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                           (yP - yQ) * (xP - xQ) * ae * ce) /
                         C49694) /
                        C49756;
    const double C50761 = std::pow(C49755, 2);
    const double C50777 = C49755 * be;
    const double C50776 = C49755 * ae;
    const double C49767 = C49766 * C49755;
    const double C49782 = C49755 * C49765;
    const double C49788 = C49784 / C49756;
    const double C49830 = C49824 * ae;
    const double C50049 = std::pow(C49824, 2);
    const double C49825 = 2 * C49822;
    const double C49831 = C49824 * C49821;
    const double C49850 = std::pow(C49821, 2);
    const double C49931 = C49821 * ce;
    const double C50036 = std::pow(C50022, 2);
    const double C50625 = C50622 * be;
    const double C50624 = C50622 * ae;
    const double C50623 = std::pow(C50622, 2);
    const double C50666 = std::pow(C50652, 2);
    const double C50680 = C50652 * de;
    const double C50679 = C50652 * ce;
    const double C50692 = std::pow(C50657, 2);
    const double C50704 = C50657 * de;
    const double C50703 = C50657 * ce;
    const double C50791 = std::pow(C50756, 2);
    const double C50803 = C50756 * be;
    const double C50802 = C50756 * ae;
    const double C50611 = std::pow(C49699, -1);
    const double C50898 = std::pow(C49699, -2);
    const double C49703 = 2 * C49698;
    const double C50890 = 4 * C49698;
    const double C49704 = C49700 / C49694;
    const double C50604 = C50601 * C49696;
    const double C50633 = std::pow(C49764, -1);
    const double C50912 = std::pow(C49764, -2);
    const double C49785 = 2 * C49781;
    const double C50897 = 4 * C49781;
    const double C50762 = C50761 * C49766;
    const double C49786 = C49782 / C49756;
    const double C49834 = C49829 * C49830;
    const double C49842 = C49840 * C49830;
    const double C49853 = C49848 * C49830;
    const double C49873 = C49867 * C49830;
    const double C49905 = C49897 * C49830;
    const double C49826 = C49825 / C49823;
    const double C129 = (-(bs[1] * C49830 * C49825) / C49823) / C49756;
    const double C123 = -(C49821 * bs[1] * C49825) / C49823;
    const double C287 = -(C49824 * bs[1] * C49825) / C49823;
    const double C435 = -(C50022 * bs[1] * C49825) / C49823;
    const double C49835 = C49831 * ae;
    const double C49934 = C49840 * C49931;
    const double C49938 = C49848 * C49931;
    const double C49948 = C49867 * C49931;
    const double C49971 = C49829 * C49931;
    const double C49994 = C49897 * C49931;
    const double C130 = (bs[1] * C49931 * C49825) / (C49823 * C49694);
    const double C50626 = C50623 * C49766;
    const double C50667 = C50666 * C49696;
    const double C50693 = C50692 * C49696;
    const double C50792 = C50791 * C49766;
    const double C49709 = C49695 / C49703;
    const double C49707 = C49693 / C49703;
    const double C49706 = 0 - C49704;
    const double C50605 = C50604 / C49694;
    const double C49793 = C49765 / C49785;
    const double C49791 = C49780 / C49785;
    const double C50763 = C50762 / C49756;
    const double C49790 = 0 - C49786;
    const double C49828 = -C49826;
    const double C49839 = std::pow(C49826, 4);
    const double C49866 = std::pow(C49826, 6);
    const double C144 =
        (-(C49821 * std::pow(-C49826, 3) * bs[3] * C49824 * C49821 * ae * ce) /
         C49694) /
            C49756 -
        (std::pow(C49826, 2) * bs[2] * C49824 * ae * ce) / (C49694 * C49756);
    const double C50240 = std::pow(C49826, 2);
    const double C131 =
        (C49821 * std::pow(C49826, 2) * bs[2] * C49830) / C49756;
    const double C132 =
        (ce * bs[1] * C49825) / (C49823 * C49694) -
        (C49821 * std::pow(C49826, 2) * bs[2] * C49931) / C49694;
    const double C49837 = C49835 * ce;
    const double C50627 = C50626 / C49756;
    const double C50668 = C50667 / C49694;
    const double C50694 = C50693 / C49694;
    const double C50793 = C50792 / C49756;
    const double C49711 = C49706 * ce;
    const double C50606 = -C50605;
    const double C50764 = -C50763;
    const double C49795 = C49790 * ae;
    const double C49833 = std::pow(C49828, 3);
    const double C49847 = std::pow(C49828, 5);
    const double C49896 = std::pow(C49828, 7);
    const double C49844 = C49839 * C49842;
    const double C49935 = C49840 * C49839;
    const double C49936 = C49839 * C49934;
    const double C49876 = C49866 * C49873;
    const double C49951 = C49867 * C49866;
    const double C49952 = C49866 * C49948;
    const double C50241 = C50239 * C50240;
    const double C293 = -(C49824 * C50240 * C50239 * C49931) / C49694;
    const double C294 = (C49824 * C50240 * C50239 * C49830) / C49756 -
                        (ae * bs[1] * C49825) / (C49823 * C49756);
    const double C441 = -(C50022 * C50240 * C50239 * C49931) / C49694;
    const double C442 = (C50022 * C50240 * C50239 * C49830) / C49756;
    const double C49841 = C49840 * C49837;
    const double C49851 = C49848 * C49837;
    const double C49870 = C49867 * C49837;
    const double C49902 = C49897 * C49837;
    const double C50628 = -C50627;
    const double C50669 = -C50668;
    const double C50695 = -C50694;
    const double C50794 = -C50793;
    const double C49714 = C49711 / C49694;
    const double C50607 = std::exp(C50606);
    const double C50765 = std::exp(C50764);
    const double C49797 = C49795 / C49756;
    const double C49836 = C49833 * C49834;
    const double C49932 = C49829 * C49833;
    const double C49972 = C49833 * C49971;
    const double C304 =
        (-(C49824 * C49833 * C49829 * C49837) / C49694) / C49756 -
        (ae * std::pow(C49826, 2) * bs[2] * C49821 * ce) / C49832;
    const double C452 =
        (-((zP - zQ) * C49833 * C49829 * C49837) / C49694) / C49756;
    const double C49855 = C49847 * C49853;
    const double C49941 = C49848 * C49847;
    const double C49942 = C49847 * C49938;
    const double C49909 = C49896 * C49905;
    const double C50001 = C49896 * C49994;
    const double C49849 = C49844 * ce;
    const double C49846 = C49821 * C49844;
    const double C50363 = C49824 * C49844;
    const double C49940 = C49821 * C49935;
    const double C49939 = C49935 * ce;
    const double C50247 = C49935 * C49850;
    const double C50366 = C49935 * C50049;
    const double C50412 = C49824 * C49935;
    const double C50411 = C49935 * ae;
    const double C50585 = C49935 * C50036;
    const double C50591 = C50022 * C49935;
    const double C49974 = C49821 * C49936;
    const double C50065 = ae * C49936;
    const double C50063 = C49824 * C49936;
    const double C49879 = C49876 * C49850;
    const double C49898 = C49876 * ce;
    const double C49894 = C49821 * C49876;
    const double C50438 = C49824 * C49876;
    const double C50496 = C49876 * C50036;
    const double C49954 = C49951 * C49850;
    const double C49996 = C49821 * C49951;
    const double C49995 = C49951 * ce;
    const double C50442 = C49951 * C50049;
    const double C49956 = C49821 * C49952;
    const double C50110 = C49952 * C50049;
    const double C50162 = ae * C49952;
    const double C50160 = C49824 * C49952;
    const double C50194 = C50022 * C49952;
    const double C50211 = C49952 * C50036;
    const double C124 = C50241 * C49850 - (bs[1] * C49825) / C49823;
    const double C286 = C49824 * C49821 * C50241;
    const double C434 = C50022 * C49821 * C50241;
    const double C587 = C50241 * C50049 - (bs[1] * C49825) / C49823;
    const double C811 = C50022 * C49824 * C50241;
    const double C944 = C50241 * C50036 - (bs[1] * C49825) / C49823;
    const double C49843 = C49839 * C49841;
    const double C49854 = C49847 * C49851;
    const double C49875 = C49866 * C49870;
    const double C49908 = C49896 * C49902;
    const double C50629 = std::exp(C50628);
    const double C50670 = std::exp(C50669);
    const double C50696 = std::exp(C50695);
    const double C50795 = std::exp(C50794);
    const double C49716 = C49714 - C49707;
    const double C49705 = C49701 * C50607;
    const double C50608 = C50607 * C50602;
    const double C50612 = C50611 * C50607;
    const double C50886 = C50607 / C49699;
    const double C50885 = C50607 * C50603;
    const double C280 = C50898 * C50607;
    const double C154 = C50765 * C144;
    const double C152 = C50765 * C131;
    const double C5479 = C50765 * C442;
    const double C49768 = C49767 * C50765;
    const double C117 = -(2 * ae * be * (yA - yB) * C50765) / (ae + be);
    const double C2305 =
        ((C50765 - (C49755 * 2 * ae * be * C49755 * C50765) / C49756) * ae) /
            C49756 -
        (0 * be) / (2 * std::pow(C49756, 2));
    const double C2306 =
        (0 * ae) / C49756 - (ae * be * C49755 * C50765) / std::pow(C49756, 2);
    const double C50778 = C50765 * C50776;
    const double C50781 = C50633 * C50765;
    const double C50915 = C50765 * C50777;
    const double C50914 = C50765 / C49764;
    const double C8043 = C50912 * C50765;
    const double C49799 = C49797 - C49791;
    const double C145 =
        (-(C49821 * C49836 * ce) / C49694) / C49756 -
        (C49833 * C49829 * C49837) / C49832 +
        C49821 * ((-(C49821 * std::pow(C49826, 4) * bs[4] * C49837) / C49694) /
                      C49756 -
                  (C49836 * ce) / C49832);
    const double C133 =
        (std::pow(C49826, 2) * bs[2] * C49830 + C49836 * C49850) / C49756;
    const double C135 =
        (2 * C49821 * C49836 + C49821 * (C49836 + C49844 * C49850)) / C49756;
    const double C292 =
        (C49824 * C49821 * C49836 + C49821 * C50241 * ae) / C49756;
    const double C440 = (C50022 * C49821 * C49836) / C49756;
    const double C444 = (C50022 * (C49836 + C49844 * C49850)) / C49756;
    const double C592 =
        (C50240 * C50239 * C49830 + C49824 * (C49824 * C49836 + C50241 * ae) +
         C49824 * C50241 * ae) /
        C49756;
    const double C819 = (C50022 * (C49824 * C49836 + C50241 * ae)) / C49756;
    const double C949 = (C50240 * C50239 * C49830 + C49836 * C50036) / C49756;
    const double C1177 =
        (2 * C50022 * C49836 + C50022 * (C49836 + C49844 * C50036)) / C49756;
    const double C49975 = C49932 * ce;
    const double C50246 = C49821 * C49932;
    const double C50365 = C49824 * C49932;
    const double C50364 = C49932 * ae;
    const double C296 = (C49824 * (C49836 + C49844 * C49850) +
                         (C50241 + C49932 * C49850) * ae) /
                        C49756;
    const double C708 =
        (2 * (C49824 * C49836 + C50241 * ae) +
         C49824 * (C49836 + C49824 * (C49824 * C49844 + C49932 * ae) +
                   C49824 * C49932 * ae) +
         (C50241 + C49932 * C50049) * ae) /
        C49756;
    const double C834 =
        (C50022 * (C49836 + C49824 * (C49824 * C49844 + C49932 * ae) +
                   C49824 * C49932 * ae)) /
        C49756;
    const double C1091 = (C49824 * C49836 + C50241 * ae +
                          (C49824 * C49844 + C49932 * ae) * C50036) /
                         C49756;
    const double C125 =
        2 * C49821 * C50241 + C49821 * (C50241 + C49932 * C49850);
    const double C288 = C49824 * (C50241 + C49932 * C49850);
    const double C436 = C50022 * (C50241 + C49932 * C49850);
    const double C700 =
        2 * C49824 * C50241 + C49824 * (C50241 + C49932 * C50049);
    const double C818 = C50022 * (C50241 + C49932 * C50049);
    const double C1169 =
        2 * C50022 * C50241 + C50022 * (C50241 + C49932 * C50036);
    const double C6397 =
        3 * (C50241 + C49932 * C50036) +
        C50022 * (2 * C50022 * C49932 + C50022 * (C49932 + C49935 * C50036));
    const double C134 = -(C49821 * (C49821 * C49972 + C50241 * ce) +
                          C50240 * C50239 * C49931 + C49821 * C50241 * ce) /
                        C49694;
    const double C295 = -(C49824 * (C49821 * C49972 + C50241 * ce)) / C49694;
    const double C443 = -(C50022 * (C49821 * C49972 + C50241 * ce)) / C49694;
    const double C593 = -(C49972 * C50049 + C50240 * C50239 * C49931) / C49694;
    const double C707 = (-2 * C49824 * C49972) / C49694 -
                        (C49824 * (C49936 * C50049 + C49972)) / C49694;
    const double C820 = -(C50022 * C49824 * C49972) / C49694;
    const double C833 = -(C50022 * (C49936 * C50049 + C49972)) / C49694;
    const double C950 = -(C49972 * C50036 + C50240 * C50239 * C49931) / C49694;
    const double C1176 = (-2 * C50022 * C49972) / C49694 -
                         (C50022 * (C49936 * C50036 + C49972)) / C49694;
    const double C5481 = C50765 * C452;
    const double C49857 = C49855 * C49850;
    const double C49868 = C49855 * ce;
    const double C49864 = C49821 * C49855;
    const double C50410 = C49824 * C49855;
    const double C50480 = C49855 * C50036;
    const double C50495 = C50022 * C49855;
    const double C6403 =
        (3 * (C49836 + C49844 * C50036) +
         C50022 * (2 * C50022 * C49844 + C50022 * (C49844 + C49855 * C50036))) /
        C49756;
    const double C49943 = C49941 * C49850;
    const double C49950 = C49821 * C49941;
    const double C49949 = C49941 * ce;
    const double C50413 = C49941 * C50049;
    const double C50440 = C49824 * C49941;
    const double C50439 = C49941 * ae;
    const double C50592 = C49941 * C50036;
    const double C49944 = C49821 * C49942;
    const double C50066 = C49942 * C50049;
    const double C50109 = ae * C49942;
    const double C50107 = C49824 * C49942;
    const double C50138 = C50022 * C49942;
    const double C50477 = C49942 * C50036;
    const double C6402 =
        (-3 * (C49936 * C50036 + C49972)) / C49694 +
        C50022 * ((-2 * C50022 * C49936) / C49694 -
                  (C50022 * (C49942 * C50036 + C49936)) / C49694);
    const double C49912 = C49909 * C49850;
    const double C50005 = C49821 * C50001;
    const double C50164 = C50001 * C50049;
    const double C49852 = C49849 / C49832;
    const double C951 = (C49821 * C49836 + C49846 * C50036) / C49756;
    const double C49979 = C49940 * ce;
    const double C50251 = 2 * C49940;
    const double C50357 = C49824 * C49940;
    const double C50356 = C49940 * ae;
    const double C50248 = C49932 + C50247;
    const double C50368 = C49932 + C50366;
    const double C50417 = 2 * C50412;
    const double C50415 = C50412 * ae;
    const double C50586 = C49932 + C50585;
    const double C50593 = 2 * C50591;
    const double C50068 = C50065 / C49832;
    const double C1090 = -(C50063 * C50036 + C49824 * C49972) / C49694;
    const double C49882 = C49855 + C49879;
    const double C49903 = C49898 / C49832;
    const double C49904 = 2 * C49894;
    const double C49901 = C49894 * ce;
    const double C50395 = C49824 * C49894;
    const double C50474 = C49894 * C50036;
    const double C50498 = C49855 + C50496;
    const double C49957 = C49941 + C49954;
    const double C50002 = C49996 * ce;
    const double C50398 = C49996 * C50049;
    const double C50446 = C49941 + C50442;
    const double C50115 = C50110 + C49942;
    const double C50168 = C50162 / C49832;
    const double C50170 = -2 * C50160;
    const double C50166 = ae * C50160;
    const double C50191 = C50022 * C50160;
    const double C50483 = C50160 * C50036;
    const double C50197 = ae * C50194;
    const double C50213 = C50211 + C49942;
    const double C146 =
        2 * ((-(C49821 * C49843) / C49694) / C49756 - (C49836 * ce) / C49832) -
        ((C49836 + C49844 * std::pow(C49821, 2)) * ce) / C49832 +
        C49821 *
            ((-(C49821 * C49844 * ce) / C49694) / C49756 - C49843 / C49832 +
             C49821 *
                 ((-(C49821 * std::pow(C49828, 5) * bs[5] * C49837) / C49694) /
                      C49756 -
                  (C49844 * ce) / C49832));
    const double C305 = C49824 * ((-(C49821 * C49843) / C49694) / C49756 -
                                  (C49836 * ce) / C49832) -
                        (ae * (C49821 * C49833 * C49829 * C49821 * ce +
                               bs[2] * std::pow(C49826, 2) * ce)) /
                            C49832;
    const double C453 = (zP - zQ) * ((-(C49821 * C49843) / C49694) / C49756 -
                                     (C49836 * ce) / C49832);
    const double C602 = (-(ae * C49824 * C49972) / C49694) / C49756 -
                        (C49833 * C49829 * C49837) / C49832 +
                        C49824 * ((-(C49824 * C49843) / C49694) / C49756 -
                                  (ae * C49972) / C49832);
    const double C835 = (-(C49824 * C50022 * C49843) / C49694) / C49756 -
                        (ae * C50022 * C49972) / C49832;
    const double C959 = (-(C49843 * std::pow(C50022, 2)) / C49694) / C49756 -
                        (C49833 * C49829 * C49837) / C49832;
    const double C49856 = C49821 * C49854;
    const double C49865 = C49854 / C49832;
    const double C50064 = C49824 * C49854;
    const double C50078 = C50022 * C49854;
    const double C712 =
        2 * ((-(C49824 * C49843) / C49694) / C49756 - (ae * C49972) / C49832) -
        (ae * (C49936 * std::pow(C49824, 2) + C49972)) / C49832 +
        C49824 *
            ((-(ae * C49824 * C49936) / C49694) / C49756 - C49843 / C49832 +
             C49824 * ((-(C49824 * C49854) / C49694) / C49756 -
                       (ae * C49936) / C49832));
    const double C842 =
        (-(ae * C50022 * C49824 * C49936) / C49694) / C49756 -
        (C50022 * C49843) / C49832 +
        C49824 * ((-(C49824 * C50022 * C49854) / C49694) / C49756 -
                  (ae * C50022 * C49936) / C49832);
    const double C1095 =
        C49824 * ((-(C49854 * C50036) / C49694) / C49756 - C49843 / C49832) -
        (ae * (C49936 * C50036 + C49972)) / C49832;
    const double C1181 =
        (-2 * C50022 * C49843) / C49832 +
        C50022 * ((-(C49854 * C50036) / C49694) / C49756 - C49843 / C49832);
    const double C49878 = C49821 * C49875;
    const double C49895 = C49875 / C49832;
    const double C50108 = C49824 * C49875;
    const double C50137 = C50022 * C49875;
    const double C50150 = C49875 * C50036;
    const double C49911 = C49821 * C49908;
    const double C50161 = C49824 * C49908;
    const double C50193 = C50022 * C49908;
    const double C50210 = C49908 * C50036;
    const double C50630 = C50629 * C50624;
    const double C50634 = C50633 * C50629;
    const double C50893 = C50629 / C49764;
    const double C50892 = C50629 * C50625;
    const double C2304 = C50912 * C50629;
    const double C50681 = C50670 * C50679;
    const double C50684 = C50611 * C50670;
    const double C50902 = C50670 * C50680;
    const double C50901 = C50670 / C49699;
    const double C584 = C50898 * C50670;
    const double C50705 = C50696 * C50703;
    const double C50708 = C50611 * C50696;
    const double C50907 = C50696 * C50704;
    const double C50906 = C50696 / C49699;
    const double C943 = C50898 * C50696;
    const double C50804 = C50795 * C50802;
    const double C50807 = C50633 * C50795;
    const double C50920 = C50795 * C50803;
    const double C50919 = C50795 / C49764;
    const double C15424 = C50912 * C50795;
    const double C49710 = C49705 / C49698;
    const double C49708 = 2 * C49705;
    const double C50888 = C50608 / C49703;
    const double C50887 = C50608 * C50603;
    const double C50884 = C50608 / C49694;
    const double C50615 = C50612 * C50603;
    const double C109 = C50612 / C50890;
    const double C1282 = C50612 / C49699;
    const double C278 = (C50607 * std::pow(C50603, 2)) / C49698 + C50886;
    const double C50924 = C50885 / C49694;
    const double C279 = (-2 * C50611 * C50885) / C49694;
    const double C49769 = 2 * C49768;
    const double C49789 = C49768 / C49781;
    const double C155 = C117 * C124;
    const double C153 = C117 * C132;
    const double C151 = C117 * C123;
    const double C311 = C117 * C286;
    const double C459 = C117 * C434;
    const double C5480 = C117 * C441;
    const double C5478 = C117 * C435;
    const double C5910 = C117 * C811;
    const double C6095 = C117 * C944;
    const double C2316 = C2305 * C124;
    const double C2314 = C2305 * C132;
    const double C2310 = C2305 * C123;
    const double C2506 = C2305 * C286;
    const double C2690 = C2305 * C434;
    const double C18488 = C2305 * C944;
    const double C18484 = C2305 * C441;
    const double C18480 = C2305 * C435;
    const double C18894 = C2305 * C811;
    const double C2308 = C2306 * C286;
    const double C18482 = C2306 * C811;
    const double C50917 = C50778 / C49785;
    const double C50916 = C50778 * C50777;
    const double C50911 = C50778 / C49756;
    const double C50784 = C50781 * C50777;
    const double C10860 = C50781 / C50897;
    const double C25652 = C50781 / C49764;
    const double C50936 = C50915 / C49756;
    const double C8042 = (-2 * C50633 * C50915) / C49756;
    const double C8041 = (C50765 * std::pow(C50777, 2)) / C49781 + C50914;
    const double C158 = C50765 * C145;
    const double C156 = C50765 * C133;
    const double C160 = C50765 * C135;
    const double C312 = C50765 * C292;
    const double C2309 = C50781 * C292;
    const double C22824 = C50781 * C292;
    const double C460 = C50765 * C440;
    const double C464 = C50765 * C444;
    const double C5911 = C50765 * C819;
    const double C18483 = C50781 * C819;
    const double C28890 = C50781 * C819;
    const double C6096 = C50765 * C949;
    const double C6409 = C50765 * C1177;
    const double C49976 = C49974 + C49975;
    const double C594 =
        (C49821 * C49836 + C49824 * (C49824 * C49846 + C50246 * ae) +
         C49824 * C50246 * ae) /
        C49756;
    const double C821 = (C50022 * (C49824 * C49846 + C50246 * ae)) / C49756;
    const double C588 = C49821 * C50241 + C50246 * C50049;
    const double C699 =
        2 * C49824 * C50246 + C49824 * (C50246 + C49940 * C50049);
    const double C812 = C50022 * C49824 * C50246;
    const double C817 = C50022 * (C50246 + C49940 * C50049);
    const double C945 = C49821 * C50241 + C50246 * C50036;
    const double C1168 =
        2 * C50022 * C50246 + C50022 * (C50246 + C49940 * C50036);
    const double C1083 = C49824 * C50241 + C50365 * C50036;
    const double C3593 =
        2 * C50022 * C50365 + C50022 * (C50365 + C50412 * C50036);
    const double C50367 = C50363 + C50364;
    const double C316 = C50765 * C296;
    const double C2319 = C50781 * C296;
    const double C22834 = C50781 * C296;
    const double C5919 = C50765 * C834;
    const double C12976 = C8043 * C834;
    const double C18897 = C50781 * C834;
    const double C29438 = C50781 * C834;
    const double C6275 = C50765 * C1091;
    const double C18491 = C50781 * C1091;
    const double C29659 = C50781 * C1091;
    const double C159 = C117 * C125;
    const double C2326 = C2305 * C125;
    const double C315 = C117 * C288;
    const double C2318 = C2306 * C288;
    const double C2516 = C2305 * C288;
    const double C463 = C117 * C436;
    const double C2700 = C2305 * C436;
    const double C5918 = C117 * C818;
    const double C18910 = C2305 * C818;
    const double C18896 = C2306 * C818;
    const double C6408 = C117 * C1169;
    const double C19102 = C2305 * C1169;
    const double C16580 = C117 * C6397;
    const double C19393 = C2305 * C6397;
    const double C157 = C117 * C134;
    const double C2320 = C2305 * C134;
    const double C313 = C117 * C295;
    const double C2312 = C2306 * C295;
    const double C2510 = C2305 * C295;
    const double C461 = C117 * C443;
    const double C2694 = C2305 * C443;
    const double C5912 = C117 * C820;
    const double C18486 = C2306 * C820;
    const double C18898 = C2305 * C820;
    const double C5920 = C117 * C833;
    const double C18914 = C2305 * C833;
    const double C18900 = C2306 * C833;
    const double C6093 = C117 * C950;
    const double C18492 = C2305 * C950;
    const double C6410 = C117 * C1176;
    const double C19098 = C2305 * C1176;
    const double C49859 = C49844 + C49857;
    const double C49871 = C49868 / C49832;
    const double C49872 = 2 * C49864;
    const double C49869 = C49864 * ce;
    const double C50355 = C49824 * C49864;
    const double C706 =
        (2 * (C49824 * C49846 + C50246 * ae) +
         C49824 * (C49846 + C49824 * (C49824 * C49864 + C49940 * ae) +
                   C49824 * C49940 * ae) +
         (C50246 + C49940 * C50049) * ae) /
        C49756;
    const double C832 =
        (C50022 * (C49846 + C49824 * (C49824 * C49864 + C49940 * ae) +
                   C49824 * C49940 * ae)) /
        C49756;
    const double C1089 = (C49824 * C49846 + C50246 * ae +
                          (C49824 * C49864 + C49940 * ae) * C50036) /
                         C49756;
    const double C1175 =
        (2 * C50022 * C49846 + C50022 * (C49846 + C49864 * C50036)) / C49756;
    const double C6401 =
        (3 * (C49846 + C49864 * C50036) +
         C50022 * (2 * C50022 * C49864 + C50022 * (C49864 + C49894 * C50036))) /
        C49756;
    const double C50414 = C50410 + C50411;
    const double C50481 = C49844 + C50480;
    const double C50497 = 2 * C50495;
    const double C16581 = C50765 * C6403;
    const double C49945 = C49935 + C49943;
    const double C49955 = 2 * C49950;
    const double C49953 = C49950 * ce;
    const double C50358 = C49950 * C50049;
    const double C50397 = C49824 * C49950;
    const double C50396 = C49950 * ae;
    const double C50582 = C49950 * C50036;
    const double C6396 =
        3 * (C50246 + C49940 * C50036) +
        C50022 * (2 * C50022 * C49940 + C50022 * (C49940 + C49950 * C50036));
    const double C49958 = C49956 + C49949;
    const double C50416 = C49935 + C50413;
    const double C50447 = 2 * C50440;
    const double C50445 = C50440 * ae;
    const double C50588 = C50440 * C50036;
    const double C13841 =
        3 * (C50365 + C50412 * C50036) +
        C50022 * (2 * C50022 * C50412 + C50022 * (C50412 + C50440 * C50036));
    const double C50444 = C50438 + C50439;
    const double C50594 = C49935 + C50592;
    const double C49946 = C49944 + C49939;
    const double C50069 = C50066 + C49936;
    const double C50113 = C50109 / C49832;
    const double C50114 = -2 * C50107;
    const double C50111 = ae * C50107;
    const double C3598 = (-2 * C50022 * C50063) / C49694 -
                         (C50022 * (C50107 * C50036 + C50063)) / C49694;
    const double C13843 =
        (-3 * (C50107 * C50036 + C50063)) / C49694 +
        C50022 * ((-2 * C50022 * C50107) / C49694 -
                  (C50022 * (C50160 * C50036 + C50107)) / C49694);
    const double C50140 = ae * C50138;
    const double C50489 = -2 * C50138;
    const double C50478 = C50477 + C49936;
    const double C16582 = C117 * C6402;
    const double C19397 = C2305 * C6402;
    const double C49915 = C49876 + C49912;
    const double C50006 = C50005 + C49995;
    const double C50171 = C50164 + C49952;
    const double C966 = C50765 * C951;
    const double C1082 = C49824 * C50246 + C50357 * C50036;
    const double C126 = 3 * (C50241 + C49932 * C49850) +
                        C49821 * (2 * C50246 + C49821 * C50248);
    const double C289 = C49824 * (2 * C50246 + C49821 * C50248);
    const double C437 = C50022 * (2 * C50246 + C49821 * C50248);
    const double C589 = C50241 + C49932 * C49850 + C50248 * C50049;
    const double C813 = C50022 * C49824 * C50248;
    const double C946 = C50241 + C49932 * C49850 + C50248 * C50036;
    const double C2997 = 3 * (C50241 + C49932 * C50049) +
                         C49824 * (2 * C50365 + C49824 * C50368);
    const double C3155 = C50022 * (2 * C50365 + C49824 * C50368);
    const double C3483 = C50241 + C49932 * C50049 + C50368 * C50036;
    const double C16570 =
        4 * (2 * C50022 * C49932 + C50022 * C50586) +
        C50022 * (3 * C50586 + C50022 * (2 * C50022 * C49935 +
                                         C50022 * (C49935 + C49941 * C50036)));
    const double C6276 = C117 * C1090;
    const double C18494 = C2306 * C1090;
    const double C18906 = C2305 * C1090;
    const double C49885 = C49821 * C49882;
    const double C49899 = 3 * C49882;
    const double C49893 = C49882 * ce;
    const double C50347 = C49824 * C49882;
    const double C49907 = C49901 / C49694;
    const double C50475 = C49864 + C50474;
    const double C50499 = C50022 * C50498;
    const double C49959 = C49821 * C49957;
    const double C49997 = C49957 * ce;
    const double C50350 = C49957 * C50049;
    const double C50401 = C49950 + C50398;
    const double C50449 = C49824 * C50446;
    const double C50119 = C49824 * C50115;
    const double C50163 = -3 * C50115;
    const double C50159 = ae * C50115;
    const double C50175 = C50170 / C49694;
    const double C50173 = C50166 / C49694;
    const double C50195 = ae * C50191;
    const double C50484 = C50483 + C50107;
    const double C50200 = C50197 / C49832;
    const double C50215 = ae * C50213;
    const double C50490 = C50022 * C50213;
    const double C162 = C50765 * C146;
    const double C314 = C50765 * C305;
    const double C2313 = C50781 * C305;
    const double C22828 = C50781 * C305;
    const double C462 = C50765 * C453;
    const double C5913 = C50765 * C835;
    const double C18487 = C50781 * C835;
    const double C28894 = C50781 * C835;
    const double C6094 = C50765 * C959;
    const double C49858 = C49856 / C49694;
    const double C3492 =
        (-(C49854 * C50036) / C49694) / C49756 - C49843 / C49832 -
        (ae * (C49824 * C49942 * C50036 + C50063)) / C49832 +
        C49824 * (C49824 * ((-(C49875 * C50036) / C49694) / C49756 - C49865) -
                  (ae * (C49942 * C50036 + C49936)) / C49832);
    const double C50067 = C50064 / C49694;
    const double C3602 =
        (((-2 * C50022 * C49936) / C49694 -
          (C50022 * (C49942 * C50036 + C49936)) / C49694) *
         ae) /
            C49756 +
        C49824 * ((-2 * C50078) / C49832 +
                  C50022 * ((-(C49875 * C50036) / C49694) / C49756 - C49865));
    const double C6406 =
        3 * ((-(C49854 * C50036) / C49694) / C49756 - C49843 / C49832) +
        C50022 * ((-2 * C50078) / C49832 +
                  C50022 * ((-(C49875 * C50036) / C49694) / C49756 - C49865));
    const double C5921 = C50765 * C842;
    const double C12982 = C8043 * C842;
    const double C18901 = C50781 * C842;
    const double C29442 = C50781 * C842;
    const double C6277 = C50765 * C1095;
    const double C18495 = C50781 * C1095;
    const double C29655 = C50781 * C1095;
    const double C6411 = C50765 * C1181;
    const double C49881 = C49878 / C49694;
    const double C50112 = C50108 / C49694;
    const double C50139 = C49824 * C50137;
    const double C50192 = C50137 / C49832;
    const double C50222 = -2 * C50137;
    const double C50151 = C50150 / C49694;
    const double C49914 = C49911 / C49694;
    const double C50167 = C50161 / C49694;
    const double C50196 = C49824 * C50193;
    const double C50212 = C50210 / C49694;
    const double C50895 = C50630 / C49785;
    const double C50894 = C50630 * C50625;
    const double C50891 = C50630 / C49756;
    const double C50637 = C50634 * C50625;
    const double C114 = C50634 / C50897;
    const double C22819 = C50634 / C49764;
    const double C2302 = (C50629 * std::pow(C50625, 2)) / C49781 + C50893;
    const double C50927 = C50892 / C49756;
    const double C2303 = (-2 * C50633 * C50892) / C49756;
    const double C50904 = C50681 / C49703;
    const double C50903 = C50681 * C50680;
    const double C50899 = C50681 / C49694;
    const double C50687 = C50684 * C50680;
    const double C695 = C50684 / C50890;
    const double C1390 = C50684 / C49699;
    const double C50930 = C50902 / C49694;
    const double C583 = (-2 * C50611 * C50902) / C49694;
    const double C582 = (C50670 * std::pow(C50680, 2)) / C49698 + C50901;
    const double C50909 = C50705 / C49703;
    const double C50908 = C50705 * C50704;
    const double C50900 = C50705 / C49694;
    const double C50711 = C50708 * C50704;
    const double C1165 = C50708 / C50890;
    const double C1875 = C50708 / C49699;
    const double C50933 = C50907 / C49694;
    const double C942 = (-2 * C50611 * C50907) / C49694;
    const double C941 = (C50696 * std::pow(C50704, 2)) / C49698 + C50906;
    const double C50922 = C50804 / C49785;
    const double C50921 = C50804 * C50803;
    const double C50913 = C50804 / C49756;
    const double C50810 = C50807 * C50803;
    const double C20953 = C50807 / C50897;
    const double C38228 = C50807 / C49764;
    const double C50939 = C50920 / C49756;
    const double C15423 = (-2 * C50633 * C50920) / C49756;
    const double C15422 = (C50795 * std::pow(C50803, 2)) / C49781 + C50919;
    const double C49713 = C49702 - C49710;
    const double C49712 = C49692 * C49708;
    const double C285 =
        ((-C49708 / C49694) / C49699 - (0 * de) / C49694) / C49699 -
        (0 * de) / C49694;
    const double C696 = -C49708 / C49694;
    const double C1392 = (-C49708 / C49694) / C49699 - (0 * de) / C49694;
    const double C50925 = C50887 / C49698;
    const double C50889 = C50615 / C49694;
    const double C1386 = -C50924;
    const double C49783 = C49755 * C49769;
    const double C8047 =
        ((-C49765 / C49756) / C49764 -
         ((C50765 - (C49755 * C49769) / C49756) * be) / C49756) /
            C49764 -
        ((C49755 * ((-C49769 / C49756) / C49764 - (0 * be) / C49756) + C50781) *
         be) /
            C49756;
    const double C8048 =
        ((-C49769 / C49756) / C49764 - (0 * be) / C49756) / C49764 -
        (0 * be) / C49756;
    const double C22821 = (-C49769 / C49756) / C49764 - (0 * be) / C49756;
    const double C49794 = C49788 - C49789;
    const double C172 = C153 + C154;
    const double C171 = C151 + C152;
    const double C5499 = C5480 + C5481;
    const double C5498 = C5478 + C5479;
    const double C50937 = C50916 / C49781;
    const double C2331 = C50911 * C146;
    const double C2327 = C50911 * C135;
    const double C2321 = C50911 * C145;
    const double C2317 = C50911 * C133;
    const double C2315 = C50911 * C144;
    const double C2311 = C50911 * C131;
    const double C2517 = C50911 * C296;
    const double C2511 = C50911 * C305;
    const double C2507 = C50911 * C292;
    const double C2701 = C50911 * C444;
    const double C2695 = C50911 * C453;
    const double C2691 = C50911 * C440;
    const double C3315 = C50911 * C951;
    const double C18493 = C50911 * C959;
    const double C18489 = C50911 * C949;
    const double C18485 = C50911 * C452;
    const double C18481 = C50911 * C442;
    const double C18915 = C50911 * C842;
    const double C18911 = C50911 * C834;
    const double C18907 = C50911 * C1095;
    const double C18903 = C50911 * C1091;
    const double C18899 = C50911 * C835;
    const double C18895 = C50911 * C819;
    const double C19103 = C50911 * C1177;
    const double C19099 = C50911 * C1181;
    const double C19394 = C50911 * C6403;
    const double C50918 = C50784 / C49756;
    const double C44653 = C25652 * C842;
    const double C44647 = C25652 * C834;
    const double C22815 = -C50936;
    const double C8065 = C8042 * C296;
    const double C8059 = C8042 * C305;
    const double C8053 = C8042 * C292;
    const double C12980 = C8042 * C835;
    const double C12974 = C8042 * C819;
    const double C13388 = C8042 * C842;
    const double C13382 = C8042 * C834;
    const double C13570 = C8042 * C1091;
    const double C13564 = C8042 * C1095;
    const double C8085 = C8041 * C146;
    const double C8079 = C8041 * C135;
    const double C8069 = C8041 * C145;
    const double C8063 = C8041 * C133;
    const double C8061 = C8041 * C144;
    const double C8055 = C8041 * C131;
    const double C8267 = C8041 * C296;
    const double C8257 = C8041 * C305;
    const double C8251 = C8041 * C292;
    const double C8449 = C8041 * C444;
    const double C8439 = C8041 * C453;
    const double C8433 = C8041 * C440;
    const double C9043 = C8041 * C951;
    const double C12978 = C8041 * C452;
    const double C12972 = C8041 * C442;
    const double C13398 = C8041 * C842;
    const double C13392 = C8041 * C834;
    const double C13386 = C8041 * C835;
    const double C13380 = C8041 * C819;
    const double C13572 = C8041 * C949;
    const double C13566 = C8041 * C959;
    const double C13732 = C8041 * C1095;
    const double C13726 = C8041 * C1091;
    const double C13856 = C8041 * C1181;
    const double C13850 = C8041 * C1177;
    const double C173 = C155 + C156;
    const double C327 = C311 + C312;
    const double C2340 = C2308 + C2309;
    const double C475 = C459 + C460;
    const double C5926 = C5910 + C5911;
    const double C18497 = C18482 + C18483;
    const double C6115 = C6095 + C6096;
    const double C136 =
        (-2 * (C49821 * C49972 + C50241 * ce)) / C49694 -
        (C49821 * (C49821 * C49976 + C49972 + C49821 * C49932 * ce)) / C49694 -
        ((C50241 + C49932 * C49850) * ce) / C49694;
    const double C297 =
        -(C49824 * (C49821 * C49976 + C49972 + C50246 * ce)) / C49694;
    const double C445 =
        -(C50022 * (C49821 * C49976 + C49972 + C50246 * ce)) / C49694;
    const double C595 =
        -(C49976 * C50049 + C49821 * C49972 + C50241 * ce) / C49694;
    const double C822 = -(C50022 * C49824 * C49976) / C49694;
    const double C952 =
        -(C49976 * C50036 + C49821 * C49972 + C50241 * ce) / C49694;
    const double C609 = C50765 * C594;
    const double C2509 = C50781 * C594;
    const double C2877 = C50911 * C594;
    const double C8051 = C8043 * C594;
    const double C8253 = C8042 * C594;
    const double C8619 = C8041 * C594;
    const double C23024 = C50781 * C594;
    const double C25660 = C25652 * C594;
    const double C1529 = C50765 * C821;
    const double C2693 = C50781 * C821;
    const double C4093 = C50911 * C821;
    const double C8435 = C8042 * C821;
    const double C9807 = C8041 * C821;
    const double C23208 = C50781 * C821;
    const double C608 = C117 * C588;
    const double C2508 = C2306 * C588;
    const double C2876 = C2305 * C588;
    const double C2874 = C2306 * C699;
    const double C1528 = C117 * C812;
    const double C2692 = C2306 * C812;
    const double C4092 = C2305 * C812;
    const double C4090 = C2306 * C817;
    const double C5648 = C117 * C817;
    const double C35333 = C2305 * C817;
    const double C965 = C117 * C945;
    const double C3314 = C2305 * C945;
    const double C6106 = C117 * C1168;
    const double C19092 = C2305 * C1168;
    const double C6274 = C117 * C1083;
    const double C18490 = C2306 * C1083;
    const double C18902 = C2305 * C1083;
    const double C16454 = C117 * C3593;
    const double C19100 = C2306 * C3593;
    const double C19271 = C2305 * C3593;
    const double C3003 =
        (3 * (C49836 + C49824 * C50367 + C50365 * ae) +
         C49824 * (2 * C50367 +
                   C49824 * (C49844 + C49824 * (C49824 * C49855 + C49935 * ae) +
                             C49824 * C49935 * ae) +
                   C50368 * ae) +
         (2 * C50365 + C49824 * C50368) * ae) /
        C49756;
    const double C3161 =
        (C50022 * (2 * C50367 +
                   C49824 * (C49844 + C49824 * (C49824 * C49855 + C49935 * ae) +
                             C49824 * C49935 * ae) +
                   C50368 * ae)) /
        C49756;
    const double C3489 = (C49836 + C49824 * C50367 + C50365 * ae +
                          (C49844 + C49824 * (C49824 * C49855 + C49935 * ae) +
                           C49824 * C49935 * ae) *
                              C50036) /
                         C49756;
    const double C3599 =
        (2 * C50022 * C50367 +
         C50022 * (C50367 + (C49824 * C49855 + C49935 * ae) * C50036)) /
        C49756;
    const double C175 = C159 + C160;
    const double C329 = C315 + C316;
    const double C2345 = C2318 + C2319;
    const double C477 = C463 + C464;
    const double C5928 = C5918 + C5919;
    const double C18927 = C18896 + C18897;
    const double C6416 = C6408 + C6409;
    const double C174 = C157 + C158;
    const double C137 = (3 * (C49836 + C49844 * C49850) +
                         C49821 * (2 * C49846 + C49821 * C49859)) /
                        C49756;
    const double C298 = (C49824 * (2 * C49846 + C49821 * C49859) +
                         (2 * C50246 + C49821 * C50248) * ae) /
                        C49756;
    const double C446 = (C50022 * (2 * C49846 + C49821 * C49859)) / C49756;
    const double C596 =
        (C49836 + C49844 * C49850 + C49824 * (C49824 * C49859 + C50248 * ae) +
         C49824 * C50248 * ae) /
        C49756;
    const double C823 = (C50022 * (C49824 * C49859 + C50248 * ae)) / C49756;
    const double C953 = (C49836 + C49844 * C49850 + C49859 * C50036) / C49756;
    const double C1173 =
        (2 * C50022 * C49859 + C50022 * (C49859 + C49882 * C50036)) / C49756;
    const double C49874 = C49869 / C49694;
    const double C50359 = C50355 + C50356;
    const double C2875 = C50781 * C706;
    const double C8255 = C8043 * C706;
    const double C8617 = C8042 * C706;
    const double C23390 = C50781 * C706;
    const double C25864 = C25652 * C706;
    const double C4091 = C50781 * C832;
    const double C5649 = C50765 * C832;
    const double C8437 = C8043 * C832;
    const double C9805 = C8042 * C832;
    const double C24558 = C50781 * C832;
    const double C26046 = C25652 * C832;
    const double C35334 = C50911 * C832;
    const double C3313 = C50781 * C1089;
    const double C6279 = C50765 * C1089;
    const double C9041 = C8042 * C1089;
    const double C19895 = C50911 * C1089;
    const double C23804 = C50781 * C1089;
    const double C6107 = C50765 * C1175;
    const double C19093 = C50911 * C1175;
    const double C16293 = C50765 * C6401;
    const double C50418 = C49824 * C50414;
    const double C50437 = 2 * C50414;
    const double C16574 =
        (4 * (2 * C50022 * C49844 + C50022 * C50481) +
         C50022 *
             (3 * C50481 + C50022 * (2 * C50022 * C49855 +
                                     C50022 * (C49855 + C49876 * C50036)))) /
        C49756;
    const double C16586 = C16580 + C16581;
    const double C49985 = C49945 * ce;
    const double C50252 = C49821 * C49945;
    const double C50256 = 3 * C49945;
    const double C50349 = C49824 * C49945;
    const double C50348 = C49945 * ae;
    const double C704 =
        (2 * (C49824 * C49859 + C50248 * ae) +
         C49824 * (C49859 + C49824 * (C49824 * C49882 + C49945 * ae) +
                   C49824 * C49945 * ae) +
         (C50248 + C49945 * C50049) * ae) /
        C49756;
    const double C830 =
        (C50022 * (C49859 + C49824 * (C49824 * C49882 + C49945 * ae) +
                   C49824 * C49945 * ae)) /
        C49756;
    const double C1087 = (C49824 * C49859 + C50248 * ae +
                          (C49824 * C49882 + C49945 * ae) * C50036) /
                         C49756;
    const double C698 =
        2 * C49824 * C50248 + C49824 * (C50248 + C49945 * C50049);
    const double C816 = C50022 * (C50248 + C49945 * C50049);
    const double C1167 =
        2 * C50022 * C50248 + C50022 * (C50248 + C49945 * C50036);
    const double C6395 =
        3 * (C50248 + C49945 * C50036) +
        C50022 * (2 * C50022 * C49945 + C50022 * (C49945 + C49957 * C50036));
    const double C50360 = C49940 + C50358;
    const double C50402 = 2 * C50397;
    const double C50400 = C50397 * ae;
    const double C3592 =
        2 * C50022 * C50357 + C50022 * (C50357 + C50397 * C50036);
    const double C16447 =
        3 * (C50357 + C50397 * C50036) +
        C50022 * (2 * C50022 * C50397 +
                  C50022 * (C50397 + C49824 * C49996 * C50036));
    const double C50399 = C50395 + C50396;
    const double C50583 = C49940 + C50582;
    const double C16292 = C117 * C6396;
    const double C49960 = C49821 * C49958;
    const double C49993 = -2 * C49958;
    const double C50058 = C49958 * C50049;
    const double C50091 = ae * C49958;
    const double C50089 = C49824 * C49958;
    const double C50131 = C50022 * C49958;
    const double C50471 = C49958 * C50036;
    const double C50419 = C49824 * C50416;
    const double C50443 = 3 * C50416;
    const double C50441 = C50416 * ae;
    const double C9308 =
        2 * C50022 * C50368 + C50022 * (C50368 + C50416 * C50036);
    const double C13840 =
        3 * (C50368 + C50416 * C50036) +
        C50022 * (2 * C50022 * C50416 + C50022 * (C50416 + C50446 * C50036));
    const double C50589 = C50412 + C50588;
    const double C19395 = C2306 * C13841;
    const double C21631 = C117 * C13841;
    const double C50448 = C49824 * C50444;
    const double C50486 = C50444 * C50036;
    const double C13845 =
        (3 * (C50367 + C50414 * C50036) +
         C50022 * (2 * C50022 * C50414 + C50022 * (C50414 + C50444 * C50036))) /
        C49756;
    const double C50595 = C50022 * C50594;
    const double C49978 = C49821 * C49946;
    const double C49983 = -2 * C49946;
    const double C50057 = ae * C49946;
    const double C50055 = C49824 * C49946;
    const double C705 = (-2 * C49824 * C49976) / C49694 -
                        (C49824 * (C49946 * C50049 + C49976)) / C49694;
    const double C831 = -(C50022 * (C49946 * C50049 + C49976)) / C49694;
    const double C1174 = (-2 * C50022 * C49976) / C49694 -
                         (C50022 * (C49946 * C50036 + C49976)) / C49694;
    const double C6400 =
        (-3 * (C49946 * C50036 + C49976)) / C49694 +
        C50022 * ((-2 * C50022 * C49946) / C49694 -
                  (C50022 * (C49958 * C50036 + C49946)) / C49694);
    const double C3164 =
        2 * ((-(C49824 * C50078) / C49694) / C49756 -
             (ae * C50022 * C49936) / C49832) -
        (ae * C50022 * C50069) / C49832 +
        C49824 * ((-(ae * C50022 * C49824 * C49942) / C49694) / C49756 -
                  C50078 / C49832 +
                  C49824 * ((-(C49824 * C50022 * C49875) / C49694) / C49756 -
                            (ae * C50022 * C49942) / C49832));
    const double C3002 =
        (-3 * (C49936 * C50049 + C49972)) / C49694 +
        C49824 * ((-2 * C50063) / C49694 - (C49824 * C50069) / C49694);
    const double C3160 =
        C50022 * ((-2 * C50063) / C49694 - (C49824 * C50069) / C49694);
    const double C3488 = -(C50069 * C50036 + C49936 * C50049 + C49972) / C49694;
    const double C9311 = (-2 * C50022 * C50069) / C49694 -
                         (C50022 * (C50115 * C50036 + C50069)) / C49694;
    const double C50118 = C50114 / C49694;
    const double C50116 = C50111 / C49694;
    const double C16456 = C117 * C3598;
    const double C19096 = C2306 * C3598;
    const double C19275 = C2305 * C3598;
    const double C19399 = C2306 * C13843;
    const double C21633 = C117 * C13843;
    const double C50142 = C50140 / C49832;
    const double C50491 = C50489 / C49694;
    const double C16573 =
        4 * ((-2 * C50022 * C49936) / C49694 - (C50022 * C50478) / C49694) +
        C50022 *
            ((-3 * C50478) / C49694 +
             C50022 * ((-2 * C50138) / C49694 - (C50022 * C50213) / C49694));
    const double C49918 = C49821 * C49915;
    const double C6399 =
        (3 * (C49859 + C49882 * C50036) +
         C50022 * (2 * C50022 * C49882 + C50022 * (C49882 + C49915 * C50036))) /
        C49756;
    const double C50007 = C49821 * C50006;
    const double C50092 = C50006 * C50049;
    const double C50176 = C49824 * C50171;
    const double C13842 =
        (-3 * (C50115 * C50036 + C50069)) / C49694 +
        C50022 * ((-2 * C50022 * C50115) / C49694 -
                  (C50022 * (C50171 * C50036 + C50115)) / C49694);
    const double C3312 = C2306 * C1082;
    const double C6278 = C117 * C1082;
    const double C19894 = C2305 * C1082;
    const double C163 = C117 * C126;
    const double C2334 = C2305 * C126;
    const double C319 = C117 * C289;
    const double C2324 = C2306 * C289;
    const double C2524 = C2305 * C289;
    const double C467 = C117 * C437;
    const double C2708 = C2305 * C437;
    const double C612 = C117 * C589;
    const double C2514 = C2306 * C589;
    const double C2884 = C2305 * C589;
    const double C1532 = C117 * C813;
    const double C2698 = C2306 * C813;
    const double C4100 = C2305 * C813;
    const double C969 = C117 * C946;
    const double C3322 = C2305 * C946;
    const double C18912 = C2306 * C3155;
    const double C16126 = C117 * C3483;
    const double C18918 = C2305 * C3483;
    const double C18904 = C2306 * C3483;
    const double C21711 = C117 * C16570;
    const double C49887 = C49872 + C49885;
    const double C49900 = C49893 / C49832;
    const double C49910 = -C49907;
    const double C16572 =
        (4 * (2 * C50022 * C49864 + C50022 * C50475) +
         C50022 * (3 * C50475 +
                   C50022 * (2 * C50022 * C49894 +
                             C50022 * (C49894 + C49821 * C49909 * C50036)))) /
        C49756;
    const double C50500 = C50497 + C50499;
    const double C49961 = C49955 + C49959;
    const double C50003 = C49997 / C49694;
    const double C50352 = C49945 + C50350;
    const double C50404 = C49824 * C50401;
    const double C50451 = C50447 + C50449;
    const double C50122 = C50119 / C49694;
    const double C50169 = C50163 / C49694;
    const double C50165 = C50159 / C49832;
    const double C50177 = -C50173;
    const double C50198 = C50195 / C49694;
    const double C19387 =
        4 * ((-2 * C50022 * C50107) / C49694 - (C50022 * C50484) / C49694) +
        C50022 * ((-3 * C50484) / C49694 +
                  C50022 * ((-2 * C50191) / C49694 -
                            (C50022 * (C49824 * C50001 * C50036 + C50160)) /
                                C49694));
    const double C50217 = C50215 / C49832;
    const double C50492 = C50490 / C49694;
    const double C328 = C313 + C314;
    const double C2342 = C2312 + C2313;
    const double C476 = C461 + C462;
    const double C5927 = C5912 + C5913;
    const double C18499 = C18486 + C18487;
    const double C6114 = C6093 + C6094;
    const double C49860 = -C49858;
    const double C13562 = C8043 * C3492;
    const double C13734 = C8042 * C3492;
    const double C16129 = C50765 * C3492;
    const double C18923 = C50911 * C3492;
    const double C18909 = C50781 * C3492;
    const double C29882 = C50781 * C3492;
    const double C45233 = C25652 * C3492;
    const double C50070 = -C50067;
    const double C13858 = C8042 * C3602;
    const double C16457 = C50765 * C3602;
    const double C19097 = C50781 * C3602;
    const double C19276 = C50911 * C3602;
    const double C30036 = C50781 * C3602;
    const double C16583 = C50765 * C6406;
    const double C19398 = C50911 * C6406;
    const double C5929 = C5920 + C5921;
    const double C18929 = C18900 + C18901;
    const double C6287 = C6276 + C6277;
    const double C18503 = C18494 + C18495;
    const double C6417 = C6410 + C6411;
    const double C49884 = -C49881;
    const double C50117 = -C50112;
    const double C50141 = C50139 / C49694;
    const double C50224 = C50222 / C49832;
    const double C50152 = -C50151;
    const double C49917 = -C49914;
    const double C50174 = -C50167;
    const double C50199 = C50196 / C49694;
    const double C50214 = -C50212;
    const double C50928 = C50894 / C49781;
    const double C50896 = C50637 / C49756;
    const double C25653 = -C50927;
    const double C50931 = C50903 / C49698;
    const double C50905 = C50687 / C49694;
    const double C1283 = -C50930;
    const double C50934 = C50908 / C49698;
    const double C50910 = C50711 / C49694;
    const double C1643 = -C50933;
    const double C50940 = C50921 / C49781;
    const double C50923 = C50810 / C49756;
    const double C32080 = -C50939;
    const double C121 =
        (C49713 / C49699 - (0 * de) / C49694) / C49699 - (0 * de) / C49694;
    const double C1287 = C49713 / C49699 - (0 * de) / C49694;
    const double C49715 = C49712 / C49694;
    const double C50942 = C50886 - C50925;
    const double C50926 = C50888 - C50889;
    const double C49787 = C49783 / C49756;
    const double C8076 = C8047 * C289;
    const double C8064 = C8047 * C288;
    const double C8058 = C8047 * C295;
    const double C8052 = C8047 * C286;
    const double C8264 = C8047 * C589;
    const double C8252 = C8047 * C588;
    const double C8446 = C8047 * C813;
    const double C8434 = C8047 * C812;
    const double C8616 = C8047 * C699;
    const double C9040 = C8047 * C1082;
    const double C9804 = C8047 * C817;
    const double C12979 = C8047 * C820;
    const double C12973 = C8047 * C811;
    const double C13393 = C8047 * C3155;
    const double C13387 = C8047 * C833;
    const double C13381 = C8047 * C818;
    const double C13569 = C8047 * C1083;
    const double C13563 = C8047 * C1090;
    const double C13727 = C8047 * C3483;
    const double C13857 = C8047 * C3598;
    const double C13851 = C8047 * C3593;
    const double C8066 = C8048 * C589;
    const double C8050 = C8048 * C588;
    const double C8254 = C8048 * C699;
    const double C8436 = C8048 * C817;
    const double C12981 = C8048 * C833;
    const double C12975 = C8048 * C818;
    const double C13383 = C8048 * C3155;
    const double C13567 = C8048 * C3483;
    const double C22839 = C22821 * C289;
    const double C22833 = C22821 * C288;
    const double C22827 = C22821 * C295;
    const double C22823 = C22821 * C286;
    const double C23029 = C22821 * C589;
    const double C23023 = C22821 * C588;
    const double C23213 = C22821 * C813;
    const double C23207 = C22821 * C812;
    const double C23389 = C22821 * C699;
    const double C23803 = C22821 * C1082;
    const double C24557 = C22821 * C817;
    const double C28893 = C22821 * C820;
    const double C28889 = C22821 * C811;
    const double C29445 = C22821 * C3155;
    const double C29441 = C22821 * C833;
    const double C29437 = C22821 * C818;
    const double C29658 = C22821 * C1083;
    const double C29654 = C22821 * C1090;
    const double C29877 = C22821 * C3483;
    const double C30035 = C22821 * C3598;
    const double C30031 = C22821 * C3593;
    const double C48207 = C22821 * C13843;
    const double C48203 = C22821 * C13841;
    const double C10865 =
        (C49794 / C49764 - (0 * be) / C49756) / C49764 - (0 * be) / C49756;
    const double C25657 = C49794 / C49764 - (0 * be) / C49756;
    const double C5501 = C5499 * C278;
    const double C5905 = C5499 * C50607;
    const double C6081 = C5499 * C50884;
    const double C6907 = C5499 * C1386;
    const double C5904 = C5498 * C696;
    const double C50946 = C50914 - C50937;
    const double C2349 = C2326 + C2327;
    const double C2346 = C2320 + C2321;
    const double C2344 = C2316 + C2317;
    const double C2343 = C2314 + C2315;
    const double C2341 = C2310 + C2311;
    const double C2535 = C2516 + C2517;
    const double C2532 = C2510 + C2511;
    const double C2530 = C2506 + C2507;
    const double C2719 = C2700 + C2701;
    const double C2716 = C2694 + C2695;
    const double C2714 = C2690 + C2691;
    const double C18502 = C18492 + C18493;
    const double C18500 = C18488 + C18489;
    const double C18498 = C18484 + C18485;
    const double C18496 = C18480 + C18481;
    const double C18936 = C18914 + C18915;
    const double C18934 = C18910 + C18911;
    const double C18932 = C18906 + C18907;
    const double C18928 = C18898 + C18899;
    const double C18926 = C18894 + C18895;
    const double C19117 = C19102 + C19103;
    const double C19115 = C19098 + C19099;
    const double C19403 = C19393 + C19394;
    const double C50938 = C50917 - C50918;
    const double C22846 = C22815 * C146;
    const double C22842 = C22815 * C135;
    const double C22836 = C22815 * C145;
    const double C22832 = C22815 * C133;
    const double C22830 = C22815 * C144;
    const double C22826 = C22815 * C131;
    const double C23032 = C22815 * C296;
    const double C23026 = C22815 * C305;
    const double C23022 = C22815 * C292;
    const double C23216 = C22815 * C444;
    const double C23210 = C22815 * C453;
    const double C23206 = C22815 * C440;
    const double C23392 = C22815 * C594;
    const double C23806 = C22815 * C951;
    const double C24560 = C22815 * C821;
    const double C28892 = C22815 * C452;
    const double C28888 = C22815 * C442;
    const double C29102 = C22815 * C832;
    const double C29448 = C22815 * C842;
    const double C29444 = C22815 * C834;
    const double C29440 = C22815 * C835;
    const double C29436 = C22815 * C819;
    const double C29668 = C22815 * C1175;
    const double C29661 = C22815 * C949;
    const double C29657 = C22815 * C959;
    const double C29884 = C22815 * C1089;
    const double C29880 = C22815 * C1095;
    const double C29876 = C22815 * C1091;
    const double C30034 = C22815 * C1181;
    const double C30030 = C22815 * C1177;
    const double C47773 = C22815 * C3492;
    const double C48088 = C22815 * C3602;
    const double C48206 = C22815 * C6406;
    const double C48202 = C22815 * C6403;
    const double C8046 =
        ((-(0 * be) / C49756) / C49764 -
         ((0 - (C49755 * C49765) / C49756) * be) / C49756) /
            C49764 -
        ((C49755 * ((-C49765 / C49756) / C49764 -
                    ((C50765 - (C49755 * C49769) / C49756) * be) / C49756) +
          C22815) *
         be) /
            C49756 +
        (-C49769 / C49756) / C49764 - (0 * be) / C49756;
    const double C5906 = C475 * C696;
    const double C6082 = C475 * C49713;
    const double C6908 = C475 * C1392;
    const double C5930 = C5926 * C696;
    const double C6273 = C6115 * C696;
    const double C161 = C117 * C136;
    const double C2330 = C2305 * C136;
    const double C317 = C117 * C297;
    const double C2322 = C2306 * C297;
    const double C2520 = C2305 * C297;
    const double C8070 = C8047 * C297;
    const double C22837 = C22821 * C297;
    const double C465 = C117 * C445;
    const double C2704 = C2305 * C445;
    const double C610 = C117 * C595;
    const double C2512 = C2306 * C595;
    const double C2880 = C2305 * C595;
    const double C8056 = C8048 * C595;
    const double C8258 = C8047 * C595;
    const double C23027 = C22821 * C595;
    const double C1530 = C117 * C822;
    const double C2696 = C2306 * C822;
    const double C4096 = C2305 * C822;
    const double C8440 = C8047 * C822;
    const double C23211 = C22821 * C822;
    const double C967 = C117 * C952;
    const double C3318 = C2305 * C952;
    const double C620 = C608 + C609;
    const double C2531 = C2508 + C2509;
    const double C2891 = C2876 + C2877;
    const double C1540 = C1528 + C1529;
    const double C2715 = C2692 + C2693;
    const double C4107 = C4092 + C4093;
    const double C977 = C965 + C966;
    const double C3329 = C3314 + C3315;
    const double C6286 = C6274 + C6275;
    const double C18501 = C18490 + C18491;
    const double C18930 = C18902 + C18903;
    const double C13394 = C8042 * C3161;
    const double C13384 = C8043 * C3161;
    const double C18913 = C50781 * C3161;
    const double C29446 = C50781 * C3161;
    const double C45055 = C25652 * C3161;
    const double C13568 = C8043 * C3489;
    const double C13728 = C8042 * C3489;
    const double C16127 = C50765 * C3489;
    const double C18919 = C50911 * C3489;
    const double C18905 = C50781 * C3489;
    const double C29878 = C50781 * C3489;
    const double C45239 = C25652 * C3489;
    const double C47769 = C22815 * C3489;
    const double C13852 = C8042 * C3599;
    const double C16455 = C50765 * C3599;
    const double C19101 = C50781 * C3599;
    const double C19272 = C50911 * C3599;
    const double C30032 = C50781 * C3599;
    const double C48084 = C22815 * C3599;
    const double C5484 = C477 * C285;
    const double C5908 = C477 * C696;
    const double C6086 = C477 * C49713;
    const double C6912 = C477 * C1392;
    const double C5932 = C5928 * C696;
    const double C6418 = C6416 * C696;
    const double C164 = C50765 * C137;
    const double C2335 = C50911 * C137;
    const double C22850 = C22815 * C137;
    const double C320 = C50765 * C298;
    const double C2325 = C50781 * C298;
    const double C2525 = C50911 * C298;
    const double C8077 = C8042 * C298;
    const double C22840 = C50781 * C298;
    const double C23040 = C22815 * C298;
    const double C468 = C50765 * C446;
    const double C2709 = C50911 * C446;
    const double C23224 = C22815 * C446;
    const double C613 = C50765 * C596;
    const double C2515 = C50781 * C596;
    const double C2885 = C50911 * C596;
    const double C8067 = C8043 * C596;
    const double C8265 = C8042 * C596;
    const double C23030 = C50781 * C596;
    const double C23400 = C22815 * C596;
    const double C25676 = C25652 * C596;
    const double C1533 = C50765 * C823;
    const double C2699 = C50781 * C823;
    const double C4101 = C50911 * C823;
    const double C8447 = C8042 * C823;
    const double C23214 = C50781 * C823;
    const double C24568 = C22815 * C823;
    const double C970 = C50765 * C953;
    const double C3323 = C50911 * C953;
    const double C23814 = C22815 * C953;
    const double C6111 = C50765 * C1173;
    const double C49877 = -C49874;
    const double C3487 = (C49846 + C49824 * C50359 + C50357 * ae +
                          (C49864 + C49824 * (C49824 * C49894 + C49950 * ae) +
                           C49824 * C49950 * ae) *
                              C50036) /
                         C49756;
    const double C3597 =
        (2 * C50022 * C50359 +
         C50022 * (C50359 + (C49824 * C49894 + C49950 * ae) * C50036)) /
        C49756;
    const double C2890 = C2874 + C2875;
    const double C4106 = C4090 + C4091;
    const double C5656 = C5648 + C5649;
    const double C35340 = C35333 + C35334;
    const double C6116 = C6106 + C6107;
    const double C19112 = C19092 + C19093;
    const double C50420 = C49844 + C50418;
    const double C21712 = C50765 * C16574;
    const double C16588 = C16586 * C696;
    const double C49988 = C49985 / C49694;
    const double C50253 = C50251 + C50252;
    const double C1081 = C49824 * C50248 + C50349 * C50036;
    const double C3591 =
        2 * C50022 * C50349 + C50022 * (C50349 + C49824 * C49957 * C50036);
    const double C50351 = C50347 + C50348;
    const double C2883 = C50781 * C704;
    const double C8263 = C8043 * C704;
    const double C23398 = C50781 * C704;
    const double C25872 = C25652 * C704;
    const double C4099 = C50781 * C830;
    const double C5653 = C50765 * C830;
    const double C8445 = C8043 * C830;
    const double C24566 = C50781 * C830;
    const double C26054 = C25652 * C830;
    const double C3321 = C50781 * C1087;
    const double C6283 = C50765 * C1087;
    const double C23812 = C50781 * C1087;
    const double C2882 = C2306 * C698;
    const double C8262 = C8048 * C698;
    const double C23397 = C22821 * C698;
    const double C4098 = C2306 * C816;
    const double C5652 = C117 * C816;
    const double C8444 = C8048 * C816;
    const double C24565 = C22821 * C816;
    const double C6110 = C117 * C1167;
    const double C3001 =
        (3 * (C49846 + C49824 * C50359 + C50357 * ae) +
         C49824 * (2 * C50359 +
                   C49824 * (C49864 + C49824 * (C49824 * C49894 + C49950 * ae) +
                             C49824 * C49950 * ae) +
                   C50360 * ae) +
         (2 * C50357 + C49824 * C50360) * ae) /
        C49756;
    const double C3159 =
        (C50022 * (2 * C50359 +
                   C49824 * (C49864 + C49824 * (C49824 * C49894 + C49950 * ae) +
                             C49824 * C49950 * ae) +
                   C50360 * ae)) /
        C49756;
    const double C2996 = 3 * (C50246 + C49940 * C50049) +
                         C49824 * (2 * C50357 + C49824 * C50360);
    const double C3154 = C50022 * (2 * C50357 + C49824 * C50360);
    const double C3482 = C50246 + C49940 * C50049 + C50360 * C50036;
    const double C9307 =
        2 * C50022 * C50360 + C50022 * (C50360 + C50401 * C50036);
    const double C16458 = C117 * C3592;
    const double C19094 = C2306 * C3592;
    const double C29665 = C22821 * C3592;
    const double C50403 = C49824 * C50399;
    const double C16449 =
        (3 * (C50359 + C50399 * C50036) +
         C50022 * (2 * C50022 * C50399 +
                   C50022 * (C50399 + (C49824 * C49821 * C49909 + C49996 * ae) *
                                          C50036))) /
        C49756;
    const double C16569 =
        4 * (2 * C50022 * C49940 + C50022 * C50583) +
        C50022 * (3 * C50583 + C50022 * (2 * C50022 * C49950 +
                                         C50022 * (C49950 + C49996 * C50036)));
    const double C16298 = C16292 + C16293;
    const double C49962 = C49960 + C49942;
    const double C50000 = C49993 / C49694;
    const double C50060 = C50058 + C49946;
    const double C50094 = C50091 / C49832;
    const double C50095 = -2 * C50089;
    const double C50093 = ae * C50089;
    const double C50133 = ae * C50131;
    const double C50472 = C50471 + C49946;
    const double C50421 = C50417 + C50419;
    const double C13853 = C8048 * C9308;
    const double C19273 = C2306 * C9308;
    const double C21419 = C117 * C9308;
    const double C48085 = C22821 * C9308;
    const double C19386 =
        4 * (2 * C50022 * C50412 + C50022 * C50589) +
        C50022 * (3 * C50589 +
                  C50022 * (2 * C50022 * C50440 +
                            C50022 * (C50440 + C49824 * C49951 * C50036)));
    const double C50450 = C49855 + C50448;
    const double C50487 = C50414 + C50486;
    const double C19396 = C50781 * C13845;
    const double C21632 = C50765 * C13845;
    const double C48204 = C50781 * C13845;
    const double C50596 = C50593 + C50595;
    const double C49980 = C49978 + C49936;
    const double C49986 = C49983 / C49694;
    const double C50059 = C50057 / C49832;
    const double C1088 = -(C50055 * C50036 + C49824 * C49976) / C49694;
    const double C3596 = (-2 * C50022 * C50055) / C49694 -
                         (C50022 * (C50089 * C50036 + C50055)) / C49694;
    const double C16448 =
        (-3 * (C50089 * C50036 + C50055)) / C49694 +
        C50022 * ((-2 * C50022 * C50089) / C49694 -
                  (C50022 * (C49824 * C50006 * C50036 + C50089)) / C49694);
    const double C2878 = C2306 * C705;
    const double C8260 = C8048 * C705;
    const double C8622 = C8047 * C705;
    const double C23393 = C22821 * C705;
    const double C4094 = C2306 * C831;
    const double C5650 = C117 * C831;
    const double C8442 = C8048 * C831;
    const double C9810 = C8047 * C831;
    const double C24561 = C22821 * C831;
    const double C35337 = C2305 * C831;
    const double C6108 = C117 * C1174;
    const double C19104 = C2305 * C1174;
    const double C16294 = C117 * C6400;
    const double C13400 = C8042 * C3164;
    const double C13390 = C8043 * C3164;
    const double C18917 = C50781 * C3164;
    const double C29450 = C50781 * C3164;
    const double C45061 = C25652 * C3164;
    const double C13399 = C8047 * C3160;
    const double C13389 = C8048 * C3160;
    const double C18916 = C2306 * C3160;
    const double C29449 = C22821 * C3160;
    const double C13561 = C8048 * C3488;
    const double C13733 = C8047 * C3488;
    const double C16128 = C117 * C3488;
    const double C18922 = C2305 * C3488;
    const double C18908 = C2306 * C3488;
    const double C29881 = C22821 * C3488;
    const double C13859 = C8048 * C9311;
    const double C19277 = C2306 * C9311;
    const double C21421 = C117 * C9311;
    const double C48089 = C22821 * C9311;
    const double C50120 = -C50116;
    const double C21713 = C117 * C16573;
    const double C49920 = C49904 + C49918;
    const double C50008 = C50007 + C49952;
    const double C50096 = C50092 + C49958;
    const double C50179 = C50176 / C49694;
    const double C3328 = C3312 + C3313;
    const double C6288 = C6278 + C6279;
    const double C19902 = C19894 + C19895;
    const double C139 = (4 * (2 * C49846 + C49821 * C49859) +
                         C49821 * (3 * C49859 + C49821 * C49887)) /
                        C49756;
    const double C448 = (C50022 * (3 * C49859 + C49821 * C49887)) / C49756;
    const double C955 =
        (2 * C49846 + C49821 * C49859 + C49887 * C50036) / C49756;
    const double C49913 = C49910 / C49756;
    const double C21707 =
        (5 * (3 * C50481 + C50022 * C50500) +
         C50022 * (4 * C50500 +
                   C50022 * (3 * C50498 +
                             C50022 * (2 * C50022 * C49876 +
                                       C50022 * (C49876 + C49909 * C50036))))) /
        C49756;
    const double C49998 = C49961 * ce;
    const double C50257 = C49821 * C49961;
    const double C2995 = 3 * (C50248 + C49945 * C50049) +
                         C49824 * (2 * C50349 + C49824 * C50352);
    const double C3153 = C50022 * (2 * C50349 + C49824 * C50352);
    const double C3481 = C50248 + C49945 * C50049 + C50352 * C50036;
    const double C50406 = C50402 + C50404;
    const double C50453 = C49824 * C50451;
    const double C50125 = C50118 - C50122;
    const double C50180 = C50177 / C49756;
    const double C50201 = -C50198;
    const double C50493 = C50491 - C50492;
    const double C5487 = C476 * C278;
    const double C5483 = C476 * C279;
    const double C5907 = C476 * C50607;
    const double C6085 = C476 * C50884;
    const double C6083 = C476 * C50612;
    const double C6911 = C476 * C1386;
    const double C6909 = C476 * C50612;
    const double C5931 = C5927 * C50607;
    const double C6919 = C5927 * C1386;
    const double C7641 = C5927 * C50884;
    const double C6120 = C6114 * C50884;
    const double C6272 = C6114 * C50607;
    const double C7435 = C6114 * C1386;
    const double C15719 = C6114 * C278;
    const double C49861 = C49860 / C49756;
    const double C50071 = C50070 / C49756;
    const double C16465 = C16456 + C16457;
    const double C19114 = C19096 + C19097;
    const double C19284 = C19275 + C19276;
    const double C16587 = C16582 + C16583;
    const double C19405 = C19397 + C19398;
    const double C5933 = C5929 * C50607;
    const double C6293 = C6287 * C50607;
    const double C17077 = C6287 * C1386;
    const double C17791 = C6287 * C50884;
    const double C6419 = C6417 * C50607;
    const double C16285 = C6417 * C50884;
    const double C17585 = C6417 * C1386;
    const double C21152 = C6417 * C278;
    const double C49886 = C49884 / C49756;
    const double C50121 = C50117 / C49756;
    const double C50143 = -C50141;
    const double C50153 = C50152 / C49756;
    const double C49919 = C49917 / C49756;
    const double C50178 = C50174 / C49756;
    const double C50202 = -C50199;
    const double C50216 = C50214 / C49756;
    const double C50943 = C50893 - C50928;
    const double C50929 = C50895 - C50896;
    const double C50944 = C50901 - C50931;
    const double C50932 = C50904 - C50905;
    const double C50945 = C50906 - C50934;
    const double C50935 = C50909 - C50910;
    const double C50947 = C50919 - C50940;
    const double C50941 = C50922 - C50923;
    const double C7080 = C477 * C1287;
    const double C49717 = C50607 - C49715;
    const double C7083 = C476 * C50942;
    const double C7077 = C5499 * C50942;
    const double C17231 = C6114 * C50942;
    const double C22148 = C6417 * C50942;
    const double C106 = (C50884 - C50924) / C49699 - (C50942 * C50603) / C49694;
    const double C7079 = C476 * C50926;
    const double C107 =
        (2 * C50612 + C50942) / C49699 - (C50926 * C50603) / C49694;
    const double C108 = C50926 / C49699 - C50615 / C49703;
    const double C49792 = C50765 - C49787;
    const double C8093 = C8064 + C8065;
    const double C8090 = C8058 + C8059;
    const double C8087 = C8052 + C8053;
    const double C8275 = C8252 + C8253;
    const double C8457 = C8434 + C8435;
    const double C8627 = C8616 + C8617;
    const double C9051 = C9040 + C9041;
    const double C9815 = C9804 + C9805;
    const double C12987 = C12979 + C12980;
    const double C12984 = C12973 + C12974;
    const double C13407 = C13387 + C13388;
    const double C13404 = C13381 + C13382;
    const double C13577 = C13569 + C13570;
    const double C13574 = C13563 + C13564;
    const double C13865 = C13857 + C13858;
    const double C8086 = C8050 + C8051;
    const double C8276 = C8254 + C8255;
    const double C8458 = C8436 + C8437;
    const double C12988 = C12981 + C12982;
    const double C12985 = C12975 + C12976;
    const double C22860 = C22833 + C22834;
    const double C22857 = C22827 + C22828;
    const double C22855 = C22823 + C22824;
    const double C23046 = C23023 + C23024;
    const double C23230 = C23207 + C23208;
    const double C23405 = C23389 + C23390;
    const double C23819 = C23803 + C23804;
    const double C24573 = C24557 + C24558;
    const double C28904 = C28893 + C28894;
    const double C28902 = C28889 + C28890;
    const double C29454 = C29441 + C29442;
    const double C29452 = C29437 + C29438;
    const double C29675 = C29658 + C29659;
    const double C29673 = C29654 + C29655;
    const double C30040 = C30035 + C30036;
    const double C25675 = C25657 * C589;
    const double C25665 = C25657 * C595;
    const double C25659 = C25657 * C588;
    const double C25871 = C25657 * C698;
    const double C25869 = C25657 * C705;
    const double C25863 = C25657 * C699;
    const double C26053 = C25657 * C816;
    const double C26051 = C25657 * C831;
    const double C26045 = C25657 * C817;
    const double C44652 = C25657 * C833;
    const double C44646 = C25657 * C818;
    const double C45060 = C25657 * C3160;
    const double C45054 = C25657 * C3155;
    const double C45238 = C25657 * C3483;
    const double C45232 = C25657 * C3488;
    const double C45522 = C25657 * C9311;
    const double C45516 = C25657 * C9308;
    const double C25694 = C50946 * C146;
    const double C25688 = C50946 * C135;
    const double C25678 = C50946 * C145;
    const double C25672 = C50946 * C133;
    const double C25670 = C50946 * C144;
    const double C25664 = C50946 * C131;
    const double C25876 = C50946 * C296;
    const double C25866 = C50946 * C305;
    const double C25860 = C50946 * C292;
    const double C26058 = C50946 * C444;
    const double C26048 = C50946 * C453;
    const double C26042 = C50946 * C440;
    const double C26228 = C50946 * C594;
    const double C26636 = C50946 * C951;
    const double C27384 = C50946 * C821;
    const double C44649 = C50946 * C452;
    const double C44643 = C50946 * C442;
    const double C45069 = C50946 * C842;
    const double C45063 = C50946 * C834;
    const double C45057 = C50946 * C835;
    const double C45051 = C50946 * C819;
    const double C45243 = C50946 * C949;
    const double C45237 = C50946 * C959;
    const double C45403 = C50946 * C1095;
    const double C45397 = C50946 * C1091;
    const double C45519 = C50946 * C1181;
    const double C45513 = C50946 * C1177;
    const double C10857 =
        (C50911 - C50936) / C49764 - (C50946 * C50777) / C49756;
    const double C2356 = C2344 + C2345;
    const double C19089 = C18502 + C18503;
    const double C25686 = C50938 * C298;
    const double C25674 = C50938 * C296;
    const double C25668 = C50938 * C305;
    const double C25662 = C50938 * C292;
    const double C25874 = C50938 * C596;
    const double C25862 = C50938 * C594;
    const double C26056 = C50938 * C823;
    const double C26044 = C50938 * C821;
    const double C26226 = C50938 * C706;
    const double C26634 = C50938 * C1089;
    const double C27382 = C50938 * C832;
    const double C44651 = C50938 * C835;
    const double C44645 = C50938 * C819;
    const double C45071 = C50938 * C3164;
    const double C45065 = C50938 * C3161;
    const double C45059 = C50938 * C842;
    const double C45053 = C50938 * C834;
    const double C45241 = C50938 * C1091;
    const double C45235 = C50938 * C1095;
    const double C45405 = C50938 * C3492;
    const double C45399 = C50938 * C3489;
    const double C45521 = C50938 * C3602;
    const double C45515 = C50938 * C3599;
    const double C10858 =
        (2 * C50781 + C50946) / C49764 - (C50938 * C50777) / C49756;
    const double C10859 = C50938 / C49764 - C50784 / C49785;
    const double C8084 = C8046 * C136;
    const double C8078 = C8046 * C125;
    const double C8068 = C8046 * C134;
    const double C8062 = C8046 * C124;
    const double C8060 = C8046 * C132;
    const double C8054 = C8046 * C123;
    const double C8272 = C8046 * C297;
    const double C8266 = C8046 * C288;
    const double C8256 = C8046 * C295;
    const double C8250 = C8046 * C286;
    const double C8454 = C8046 * C445;
    const double C8448 = C8046 * C436;
    const double C8438 = C8046 * C443;
    const double C8432 = C8046 * C434;
    const double C8624 = C8046 * C595;
    const double C8618 = C8046 * C588;
    const double C9048 = C8046 * C952;
    const double C9042 = C8046 * C945;
    const double C9812 = C8046 * C822;
    const double C9806 = C8046 * C812;
    const double C12977 = C8046 * C441;
    const double C12971 = C8046 * C435;
    const double C13397 = C8046 * C833;
    const double C13391 = C8046 * C818;
    const double C13385 = C8046 * C820;
    const double C13379 = C8046 * C811;
    const double C13571 = C8046 * C944;
    const double C13565 = C8046 * C950;
    const double C13731 = C8046 * C1090;
    const double C13725 = C8046 * C1083;
    const double C13855 = C8046 * C1176;
    const double C13849 = C8046 * C1169;
    const double C176 = C161 + C162;
    const double C2351 = C2330 + C2331;
    const double C5914 = C1540 * C696;
    const double C6918 = C1540 * C1392;
    const double C7640 = C1540 * C49713;
    const double C35135 = C2714 + C2715;
    const double C35131 = C2715 + C2714;
    const double C6092 = C977 * C49713;
    const double C6271 = C977 * C696;
    const double C7434 = C977 * C1392;
    const double C6292 = C6286 * C696;
    const double C19088 = C18500 + C18501;
    const double C13410 = C13393 + C13394;
    const double C13405 = C13383 + C13384;
    const double C18935 = C18912 + C18913;
    const double C29456 = C29445 + C29446;
    const double C13576 = C13567 + C13568;
    const double C13738 = C13727 + C13728;
    const double C16132 = C16126 + C16127;
    const double C18938 = C18918 + C18919;
    const double C18931 = C18904 + C18905;
    const double C29892 = C29877 + C29878;
    const double C13862 = C13851 + C13852;
    const double C16464 = C16454 + C16455;
    const double C19116 = C19100 + C19101;
    const double C19282 = C19271 + C19272;
    const double C30038 = C30031 + C30032;
    const double C177 = C163 + C164;
    const double C2353 = C2334 + C2335;
    const double C331 = C319 + C320;
    const double C2348 = C2324 + C2325;
    const double C2539 = C2524 + C2525;
    const double C8099 = C8076 + C8077;
    const double C22863 = C22839 + C22840;
    const double C479 = C467 + C468;
    const double C2723 = C2708 + C2709;
    const double C622 = C612 + C613;
    const double C2534 = C2514 + C2515;
    const double C2895 = C2884 + C2885;
    const double C8094 = C8066 + C8067;
    const double C8281 = C8264 + C8265;
    const double C23049 = C23029 + C23030;
    const double C1542 = C1532 + C1533;
    const double C2718 = C2698 + C2699;
    const double C4111 = C4100 + C4101;
    const double C8463 = C8446 + C8447;
    const double C23233 = C23213 + C23214;
    const double C979 = C969 + C970;
    const double C3333 = C3322 + C3323;
    const double C49880 = C49877 / C49756;
    const double C9039 = C8043 * C3487;
    const double C15877 = C50765 * C3487;
    const double C19897 = C50781 * C3487;
    const double C26632 = C25652 * C3487;
    const double C29886 = C50781 * C3487;
    const double C16459 = C50765 * C3597;
    const double C19095 = C50781 * C3597;
    const double C29666 = C50781 * C3597;
    const double C36836 = C4106 + C4107;
    const double C36833 = C4107 + C4106;
    const double C5922 = C5656 * C696;
    const double C6412 = C6116 * C696;
    const double C16284 = C6116 * C49713;
    const double C17584 = C6116 * C1392;
    const double C50422 = C50420 + C50415;
    const double C21715 = C21711 + C21712;
    const double C300 = (C49824 * (3 * C49859 + C49821 * C49887) +
                         (3 * C50248 + C49821 * C50253) * ae) /
                        C49756;
    const double C598 =
        (2 * C49846 + C49821 * C49859 +
         C49824 * (C49824 * C49887 + C50253 * ae) + C49824 * C50253 * ae) /
        C49756;
    const double C825 = (C50022 * (C49824 * C49887 + C50253 * ae)) / C49756;
    const double C127 = 4 * (2 * C50246 + C49821 * C50248) +
                        C49821 * (3 * C50248 + C49821 * C50253);
    const double C290 = C49824 * (3 * C50248 + C49821 * C50253);
    const double C438 = C50022 * (3 * C50248 + C49821 * C50253);
    const double C590 = 2 * C50246 + C49821 * C50248 + C50253 * C50049;
    const double C697 =
        2 * C49824 * C50253 + C49824 * (C50253 + C49961 * C50049);
    const double C814 = C50022 * C49824 * C50253;
    const double C815 = C50022 * (C50253 + C49961 * C50049);
    const double C947 = 2 * C50246 + C49821 * C50248 + C50253 * C50036;
    const double C1080 = C49824 * C50253 + C49824 * C49961 * C50036;
    const double C1166 =
        2 * C50022 * C50253 + C50022 * (C50253 + C49961 * C50036);
    const double C3320 = C2306 * C1081;
    const double C6282 = C117 * C1081;
    const double C23811 = C22821 * C1081;
    const double C2999 =
        (3 * (C49859 + C49824 * C50351 + C50349 * ae) +
         C49824 * (2 * C50351 +
                   C49824 * (C49882 + C49824 * (C49824 * C49915 + C49957 * ae) +
                             C49824 * C49957 * ae) +
                   C50352 * ae) +
         (2 * C50349 + C49824 * C50352) * ae) /
        C49756;
    const double C3157 =
        (C50022 * (2 * C50351 +
                   C49824 * (C49882 + C49824 * (C49824 * C49915 + C49957 * ae) +
                             C49824 * C49957 * ae) +
                   C50352 * ae)) /
        C49756;
    const double C3485 = (C49859 + C49824 * C50351 + C50349 * ae +
                          (C49882 + C49824 * (C49824 * C49915 + C49957 * ae) +
                           C49824 * C49957 * ae) *
                              C50036) /
                         C49756;
    const double C3595 =
        (2 * C50022 * C50351 +
         C50022 * (C50351 + (C49824 * C49915 + C49957 * ae) * C50036)) /
        C49756;
    const double C2894 = C2882 + C2883;
    const double C8280 = C8262 + C8263;
    const double C23409 = C23397 + C23398;
    const double C4110 = C4098 + C4099;
    const double C5658 = C5652 + C5653;
    const double C8462 = C8444 + C8445;
    const double C24577 = C24565 + C24566;
    const double C6118 = C6110 + C6111;
    const double C8615 = C8043 * C3001;
    const double C26224 = C25652 * C3001;
    const double C9803 = C8043 * C3159;
    const double C27380 = C25652 * C3159;
    const double C29100 = C50781 * C3159;
    const double C35332 = C50781 * C3159;
    const double C8614 = C8048 * C2996;
    const double C26223 = C25657 * C2996;
    const double C9802 = C8048 * C3154;
    const double C27379 = C25657 * C3154;
    const double C29099 = C22821 * C3154;
    const double C35331 = C2306 * C3154;
    const double C9038 = C8048 * C3482;
    const double C15876 = C117 * C3482;
    const double C19896 = C2306 * C3482;
    const double C26631 = C25657 * C3482;
    const double C29885 = C22821 * C3482;
    const double C50405 = C49864 + C50403;
    const double C16584 = C16298 * C696;
    const double C21526 = C16298 * C49713;
    const double C22382 = C16298 * C1392;
    const double C49963 = C49962 + C49953;
    const double C3000 =
        (-3 * (C49946 * C50049 + C49976)) / C49694 +
        C49824 * ((-2 * C50055) / C49694 - (C49824 * C50060) / C49694);
    const double C3158 =
        C50022 * ((-2 * C50055) / C49694 - (C49824 * C50060) / C49694);
    const double C3486 = -(C50060 * C50036 + C49946 * C50049 + C49976) / C49694;
    const double C50099 = C50095 / C49694;
    const double C50097 = C50093 / C49832;
    const double C50134 = C50133 / C49832;
    const double C16571 =
        4 * ((-2 * C50022 * C49946) / C49694 - (C50022 * C50472) / C49694) +
        C50022 * ((-3 * C50472) / C49694 +
                  C50022 * ((-2 * C50131) / C49694 -
                            (C50022 * (C50006 * C50036 + C49958)) / C49694));
    const double C8730 = 4 * (2 * C50365 + C49824 * C50368) +
                         C49824 * (3 * C50368 + C49824 * C50421);
    const double C8884 = C50022 * (3 * C50368 + C49824 * C50421);
    const double C9202 = 2 * C50365 + C49824 * C50368 + C50421 * C50036;
    const double C11598 =
        2 * C50022 * C50421 + C50022 * (C50421 + C50451 * C50036);
    const double C50452 = C50450 + C50445;
    const double C19388 =
        (4 * (2 * C50022 * C50414 + C50022 * C50487) +
         C50022 * (3 * C50487 + C50022 * (2 * C50022 * C50444 +
                                          C50022 * (C50444 + (C49824 * C49909 +
                                                              C49951 * ae) *
                                                                 C50036)))) /
        C49756;
    const double C19404 = C19395 + C19396;
    const double C21636 = C21631 + C21632;
    const double C48212 = C48203 + C48204;
    const double C21705 =
        5 * (3 * C50586 + C50022 * C50596) +
        C50022 * (4 * C50596 +
                  C50022 * (3 * C50594 +
                            C50022 * (2 * C50022 * C49941 +
                                      C50022 * (C49941 + C49951 * C50036))));
    const double C49981 = C49980 + C49979;
    const double C3316 = C2306 * C1088;
    const double C6280 = C117 * C1088;
    const double C9046 = C8047 * C1088;
    const double C19898 = C2305 * C1088;
    const double C23807 = C22821 * C1088;
    const double C16460 = C117 * C3596;
    const double C19106 = C2306 * C3596;
    const double C29669 = C22821 * C3596;
    const double C13413 = C13399 + C13400;
    const double C13408 = C13389 + C13390;
    const double C18937 = C18916 + C18917;
    const double C29458 = C29449 + C29450;
    const double C13573 = C13561 + C13562;
    const double C13741 = C13733 + C13734;
    const double C16133 = C16128 + C16129;
    const double C18940 = C18922 + C18923;
    const double C18933 = C18908 + C18909;
    const double C29894 = C29881 + C29882;
    const double C50123 = C50120 / C49756;
    const double C49922 = C49821 * C49920;
    const double C702 =
        (2 * (C49824 * C49887 + C50253 * ae) +
         C49824 * (C49887 + C49824 * (C49824 * C49920 + C49961 * ae) +
                   C49824 * C49961 * ae) +
         (C50253 + C49961 * C50049) * ae) /
        C49756;
    const double C828 =
        (C50022 * (C49887 + C49824 * (C49824 * C49920 + C49961 * ae) +
                   C49824 * C49961 * ae)) /
        C49756;
    const double C1085 = (C49824 * C49887 + C50253 * ae +
                          (C49824 * C49920 + C49961 * ae) * C50036) /
                         C49756;
    const double C1171 =
        (2 * C50022 * C49887 + C50022 * (C49887 + C49920 * C50036)) / C49756;
    const double C50009 = C50008 + C50002;
    const double C50100 = C49824 * C50096;
    const double C9309 = (-2 * C50022 * C50060) / C49694 -
                         (C50022 * (C50096 * C50036 + C50060)) / C49694;
    const double C50182 = C50175 - C50179;
    const double C19090 = C3328 + C3329;
    const double C35861 = C3329 + C3328;
    const double C6294 = C6288 * C696;
    const double C17076 = C6288 * C1392;
    const double C17790 = C6288 * C49713;
    const double C168 = C50765 * C139;
    const double C472 = C50765 * C448;
    const double C974 = C50765 * C955;
    const double C49916 = C49913 - C49895;
    const double C50004 = C49998 / C49694;
    const double C50258 = C50256 + C50257;
    const double C8729 = 4 * (2 * C50357 + C49824 * C50360) +
                         C49824 * (3 * C50360 + C49824 * C50406);
    const double C8883 = C50022 * (3 * C50360 + C49824 * C50406);
    const double C9201 = 2 * C50357 + C49824 * C50360 + C50406 * C50036;
    const double C50455 = C50443 + C50453;
    const double C8733 =
        4 * ((-2 * C50063) / C49694 - (C49824 * C50069) / C49694) +
        C49824 * ((-3 * C50069) / C49694 + C49824 * C50125);
    const double C8887 = C50022 * ((-3 * C50069) / C49694 + C49824 * C50125);
    const double C9205 =
        (-2 * C50063) / C49694 - (C49824 * C50069) / C49694 + C50125 * C50036;
    const double C50183 = C50180 - C49895;
    const double C50203 = C50201 / C49756;
    const double C21706 =
        5 * ((-3 * C50478) / C49694 + C50022 * C50493) +
        C50022 * (4 * C50493 +
                  C50022 * ((-3 * C50213) / C49694 +
                            C50022 * ((-2 * C50194) / C49694 -
                                      (C50022 * (C50001 * C50036 + C49952)) /
                                          C49694)));
    const double C16452 = C6273 + C6272;
    const double C49862 = C49861 - C49852;
    const double C50072 = C50071 - C50068;
    const double C16469 = C16465 * C50607;
    const double C22046 = C16465 * C1386;
    const double C22519 = C16465 * C50884;
    const double C19391 = C19114 + C19115;
    const double C16589 = C16587 * C50607;
    const double C21527 = C16587 * C50884;
    const double C22383 = C16587 * C1386;
    const double C16579 = C6419 + C6418;
    const double C21630 = C6418 + C6419;
    const double C49888 = C49886 - C49871;
    const double C50124 = C50121 - C50113;
    const double C50144 = C50143 / C49756;
    const double C50154 = C50153 - C49865;
    const double C49921 = C49919 - C49903;
    const double C50181 = C50178 - C50168;
    const double C50204 = C50202 / C49756;
    const double C50218 = C50216 - C49895;
    const double C111 = (C50891 - C50927) / C49764 - (C50943 * C50625) / C49756;
    const double C112 =
        (2 * C50634 + C50943) / C49764 - (C50929 * C50625) / C49756;
    const double C113 = C50929 / C49764 - C50637 / C49785;
    const double C692 = (C50899 - C50930) / C49699 - (C50944 * C50680) / C49694;
    const double C693 =
        (2 * C50684 + C50944) / C49699 - (C50932 * C50680) / C49694;
    const double C694 = C50932 / C49699 - C50687 / C49703;
    const double C1162 =
        (C50900 - C50933) / C49699 - (C50945 * C50704) / C49694;
    const double C1163 =
        (2 * C50708 + C50945) / C49699 - (C50935 * C50704) / C49694;
    const double C1164 = C50935 / C49699 - C50711 / C49703;
    const double C20950 =
        (C50913 - C50939) / C49764 - (C50947 * C50803) / C49756;
    const double C20951 =
        (2 * C50807 + C50947) / C49764 - (C50941 * C50803) / C49756;
    const double C20952 = C50941 / C49764 - C50810 / C49785;
    const double C49718 = C49717 * ce;
    const double C283 =
        ((-C49693 / C49694) / C49699 - (C49706 * de) / C49694) / C49699 -
        ((C49692 * ((-C49695 / C49694) / C49699 - (C49717 * de) / C49694) +
          C1386) *
         de) /
            C49694 +
        (-C49708 / C49694) / C49699 - (0 * de) / C49694;
    const double C284 =
        ((-C49695 / C49694) / C49699 - (C49717 * de) / C49694) / C49699 -
        ((C49692 * ((-C49708 / C49694) / C49699 - (0 * de) / C49694) + C50612) *
         de) /
            C49694;
    const double C1391 = (-C49695 / C49694) / C49699 - (C49717 * de) / C49694;
    const double C49796 = C49792 * ae;
    const double C22820 = (-C49765 / C49756) / C49764 - (C49792 * be) / C49756;
    const double C25703 = C25675 + C25676;
    const double C25695 = C25659 + C25660;
    const double C25889 = C25871 + C25872;
    const double C25885 = C25863 + C25864;
    const double C26071 = C26053 + C26054;
    const double C26067 = C26045 + C26046;
    const double C44659 = C44652 + C44653;
    const double C44656 = C44646 + C44647;
    const double C45079 = C45060 + C45061;
    const double C45076 = C45054 + C45055;
    const double C45247 = C45238 + C45239;
    const double C45244 = C45232 + C45233;
    const double C19109 = C19089 * C50884;
    const double C19270 = C19089 * C50607;
    const double C20393 = C19089 * C1386;
    const double C8103 = C8084 + C8085;
    const double C8100 = C8078 + C8079;
    const double C8095 = C8068 + C8069;
    const double C8092 = C8062 + C8063;
    const double C8091 = C8060 + C8061;
    const double C8088 = C8054 + C8055;
    const double C8282 = C8266 + C8267;
    const double C8277 = C8256 + C8257;
    const double C8274 = C8250 + C8251;
    const double C8464 = C8448 + C8449;
    const double C8459 = C8438 + C8439;
    const double C8456 = C8432 + C8433;
    const double C8628 = C8618 + C8619;
    const double C9052 = C9042 + C9043;
    const double C9816 = C9806 + C9807;
    const double C12986 = C12977 + C12978;
    const double C12983 = C12971 + C12972;
    const double C13412 = C13397 + C13398;
    const double C13409 = C13391 + C13392;
    const double C13406 = C13385 + C13386;
    const double C13403 = C13379 + C13380;
    const double C13578 = C13571 + C13572;
    const double C13575 = C13565 + C13566;
    const double C13740 = C13731 + C13732;
    const double C13737 = C13725 + C13726;
    const double C13864 = C13855 + C13856;
    const double C13861 = C13849 + C13850;
    const double C16463 = C6293 + C6292;
    const double C19269 = C19088 * C696;
    const double C16134 = C16132 * C696;
    const double C19280 = C18931 + C18930;
    const double C16468 = C16464 * C696;
    const double C19392 = C19116 + C19117;
    const double C2358 = C2348 + C2349;
    const double C5490 = C479 * C285;
    const double C6090 = C479 * C49713;
    const double C6916 = C479 * C1392;
    const double C7086 = C479 * C1287;
    const double C2542 = C2534 + C2535;
    const double C5916 = C1542 * C696;
    const double C6922 = C1542 * C1392;
    const double C7644 = C1542 * C49713;
    const double C2726 = C2718 + C2719;
    const double C35133 = C2719 + C2718;
    const double C6098 = C979 * C49713;
    const double C6269 = C979 * C696;
    const double C7438 = C979 * C1392;
    const double C15722 = C979 * C285;
    const double C17234 = C979 * C1287;
    const double C49883 = C49880 - C49865;
    const double C16466 = C16458 + C16459;
    const double C19113 = C19094 + C19095;
    const double C29677 = C29665 + C29666;
    const double C8734 =
        (4 * (2 * C50367 + C49824 * C50422 + C50368 * ae) +
         C49824 *
             (3 * C50422 +
              C49824 *
                  (2 * C50414 +
                   C49824 * (C49855 + C49824 * (C49824 * C49876 + C49941 * ae) +
                             C49824 * C49941 * ae) +
                   C50416 * ae) +
              C50421 * ae) +
         (3 * C50368 + C49824 * C50421) * ae) /
        C49756;
    const double C8888 =
        (C50022 *
         (3 * C50422 +
          C49824 *
              (2 * C50414 +
               C49824 * (C49855 + C49824 * (C49824 * C49876 + C49941 * ae) +
                         C49824 * C49941 * ae) +
               C50416 * ae) +
          C50421 * ae)) /
        C49756;
    const double C9206 =
        (2 * C50367 + C49824 * C50422 + C50368 * ae +
         (2 * C50414 +
          C49824 * (C49855 + C49824 * (C49824 * C49876 + C49941 * ae) +
                    C49824 * C49941 * ae) +
          C50416 * ae) *
             C50036) /
        C49756;
    const double C9312 =
        (2 * C50022 * C50422 +
         C50022 * (C50422 + (C49855 + C49824 * (C49824 * C49876 + C49941 * ae) +
                             C49824 * C49941 * ae) *
                                C50036)) /
        C49756;
    const double C21717 = C21715 * C696;
    const double C324 = C50765 * C300;
    const double C2333 = C50781 * C300;
    const double C22848 = C50781 * C300;
    const double C617 = C50765 * C598;
    const double C2523 = C50781 * C598;
    const double C8075 = C8043 * C598;
    const double C23038 = C50781 * C598;
    const double C25684 = C25652 * C598;
    const double C1537 = C50765 * C825;
    const double C2707 = C50781 * C825;
    const double C23222 = C50781 * C825;
    const double C167 = C117 * C127;
    const double C323 = C117 * C290;
    const double C2332 = C2306 * C290;
    const double C22847 = C22821 * C290;
    const double C471 = C117 * C438;
    const double C616 = C117 * C590;
    const double C2522 = C2306 * C590;
    const double C8074 = C8048 * C590;
    const double C23037 = C22821 * C590;
    const double C25683 = C25657 * C590;
    const double C1536 = C117 * C814;
    const double C2706 = C2306 * C814;
    const double C23221 = C22821 * C814;
    const double C973 = C117 * C947;
    const double C3332 = C3320 + C3321;
    const double C6290 = C6282 + C6283;
    const double C23823 = C23811 + C23812;
    const double C5924 = C5658 * C696;
    const double C6414 = C6118 * C696;
    const double C16288 = C6118 * C49713;
    const double C17588 = C6118 * C1392;
    const double C21155 = C6118 * C285;
    const double C22151 = C6118 * C1287;
    const double C8626 = C8614 + C8615;
    const double C26235 = C26223 + C26224;
    const double C9814 = C9802 + C9803;
    const double C27391 = C27379 + C27380;
    const double C29107 = C29099 + C29100;
    const double C35339 = C35331 + C35332;
    const double C9050 = C9038 + C9039;
    const double C15880 = C15876 + C15877;
    const double C19903 = C19896 + C19897;
    const double C26643 = C26631 + C26632;
    const double C29896 = C29885 + C29886;
    const double C50407 = C50405 + C50400;
    const double C49984 = C49821 * C49963;
    const double C49992 = -3 * C49963;
    const double C50048 = ae * C49963;
    const double C50046 = C49824 * C49963;
    const double C8620 = C8048 * C3000;
    const double C26229 = C25657 * C3000;
    const double C9808 = C8048 * C3158;
    const double C27385 = C25657 * C3158;
    const double C29103 = C22821 * C3158;
    const double C35335 = C2306 * C3158;
    const double C9044 = C8048 * C3486;
    const double C15878 = C117 * C3486;
    const double C19900 = C2306 * C3486;
    const double C26637 = C25657 * C3486;
    const double C29889 = C22821 * C3486;
    const double C13395 = C8048 * C8884;
    const double C45066 = C25657 * C8884;
    const double C13729 = C8048 * C9202;
    const double C18920 = C2306 * C9202;
    const double C45400 = C25657 * C9202;
    const double C47770 = C22821 * C9202;
    const double C50454 = C49824 * C50452;
    const double C13844 =
        (3 * (C50422 + C50452 * C50036) +
         C50022 *
             (2 * C50022 * C50452 +
              C50022 *
                  (C50452 + (C49876 + C49824 * (C49824 * C49909 + C49951 * ae) +
                             C49824 * C49951 * ae) *
                                C50036))) /
        C49756;
    const double C21638 = C21636 * C696;
    const double C138 =
        (-3 * (C49821 * C49976 + C49972 + C50246 * ce)) / C49694 +
        C49821 * ((-2 * C49976) / C49694 - (C49821 * C49981) / C49694 -
                  (C50248 * ce) / C49694) -
        ((2 * C50246 + C49821 * C50248) * ce) / C49694;
    const double C299 =
        C49824 * ((-2 * C49976) / C49694 - (C49821 * C49981) / C49694 -
                  (C50248 * ce) / C49694);
    const double C447 =
        C50022 * ((-2 * C49976) / C49694 - (C49821 * C49981) / C49694 -
                  (C50248 * ce) / C49694);
    const double C597 =
        -(C49981 * C50049 + C49821 * C49976 + C49972 + C50246 * ce) / C49694;
    const double C703 = (-2 * C49824 * C49981) / C49694 -
                        (C49824 * (C49963 * C50049 + C49981)) / C49694;
    const double C824 = -(C50022 * C49824 * C49981) / C49694;
    const double C829 = -(C50022 * (C49963 * C50049 + C49981)) / C49694;
    const double C954 =
        -(C49981 * C50036 + C49821 * C49976 + C49972 + C50246 * ce) / C49694;
    const double C1172 = (-2 * C50022 * C49981) / C49694 -
                         (C50022 * (C49963 * C50036 + C49981)) / C49694;
    const double C16135 = C16133 * C50607;
    const double C19279 = C18933 + C18932;
    const double C50126 = C50123 - C49865;
    const double C49924 = C49899 + C49922;
    const double C50010 = C49821 * C50009;
    const double C50051 = C50009 * C50049;
    const double C6398 =
        (-3 * (C49963 * C50036 + C49981)) / C49694 +
        C50022 * ((-2 * C50022 * C49963) / C49694 -
                  (C50022 * (C50009 * C50036 + C49963)) / C49694);
    const double C50103 = C50100 / C49694;
    const double C50185 = C49824 * C50182;
    const double C11599 =
        2 * C50022 * C50125 + C50022 * (C50125 + C50182 * C50036);
    const double C19110 = C19090 * C49713;
    const double C20394 = C19090 * C1392;
    const double C128 = 5 * (3 * C50248 + C49821 * C50253) +
                        C49821 * (4 * C50253 + C49821 * C50258);
    const double C291 = C49824 * (4 * C50253 + C49821 * C50258);
    const double C439 = C50022 * (4 * C50253 + C49821 * C50258);
    const double C591 = 3 * C50248 + C49821 * C50253 + C50258 * C50049;
    const double C948 = 3 * C50248 + C49821 * C50253 + C50258 * C50036;
    const double C1523 = C50022 * C49824 * C50258;
    const double C11226 = 5 * (3 * C50368 + C49824 * C50421) +
                          C49824 * (4 * C50421 + C49824 * C50455);
    const double C11328 = C50022 * (4 * C50421 + C49824 * C50455);
    const double C11528 = 3 * C50368 + C49824 * C50421 + C50455 * C50036;
    const double C13401 = C8048 * C8887;
    const double C45072 = C25657 * C8887;
    const double C13735 = C8048 * C9205;
    const double C18924 = C2306 * C9205;
    const double C45406 = C25657 * C9205;
    const double C47774 = C22821 * C9205;
    const double C50205 = C50203 - C50192;
    const double C147 =
        3 * ((-(C49846 * ce) / C49694) / C49756 - C49843 / C49832 +
             C49821 * C49862) -
        ((2 * C49846 + C49821 * C49859) * ce) / C49832 +
        C49821 *
            (2 * C49862 - (C49859 * ce) / C49832 +
             C49821 *
                 ((-(C49821 * C49855 * ce) / C49694) / C49756 -
                  C49854 / C49832 +
                  C49821 * ((-(C49821 * std::pow(C49826, 6) * bs[6] * C49837) /
                             C49694) /
                                C49756 -
                            (C49855 * ce) / C49832)));
    const double C306 =
        C49824 * ((-(C49846 * ce) / C49694) / C49756 - C49843 / C49832 +
                  C49821 * C49862) -
        (ae * (C49821 * (C49821 * C49839 * C49840 * C49931 + C49932 * ce) +
               C49833 * C49829 * C49931 + C49821 * C49932 * ce)) /
            C49832;
    const double C454 = (zP - zQ) * ((-(C49846 * ce) / C49694) / C49756 -
                                     C49843 / C49832 + C49821 * C49862);
    const double C603 = (-(C49821 * C49843) / C49694) / C49756 -
                        (C49836 * ce) / C49832 -
                        (ae * C49824 * C49976) / C49832 +
                        C49824 * (C49824 * C49862 - (ae * C49976) / C49832);
    const double C836 =
        C49824 * C50022 * C49862 - (ae * C50022 * C49976) / C49832;
    const double C960 = (-(C49821 * C49843) / C49694) / C49756 -
                        (C49836 * ce) / C49832 + C49862 * std::pow(C50022, 2);
    const double C3006 =
        3 * ((-(ae * C50063) / C49694) / C49756 - C49843 / C49832 +
             C49824 * C50072) +
        (((-2 * C50063) / C49694 - (C49824 * C50069) / C49694) * ae) / C49756 +
        C49824 *
            (2 * C50072 - (ae * C50069) / C49832 +
             C49824 * ((-(ae * C49824 * C49942) / C49694) / C49756 - C49865 +
                       C49824 * ((-(C49824 * C49875) / C49694) / C49756 -
                                 (ae * C49942) / C49832)));
    const double C19401 = C19391 * C50607;
    const double C21710 = C16589 + C16588;
    const double C49889 = C49821 * C49888;
    const double C49892 = 2 * C49888;
    const double C50056 = C49824 * C49888;
    const double C50076 = C50022 * C49888;
    const double C50101 = C49888 - C50097;
    const double C711 =
        2 * (C49824 * C49862 - (ae * C49976) / C49832) -
        (ae * (C49946 * std::pow(C49824, 2) + C49976)) / C49832 +
        C49824 * (C49862 - (ae * C49824 * C49946) / C49832 +
                  C49824 * (C49824 * C49888 - (ae * C49946) / C49832));
    const double C841 =
        C50022 * C49862 - (ae * C50022 * C49824 * C49946) / C49832 +
        C49824 * (C49824 * C50022 * C49888 - (ae * C50022 * C49946) / C49832);
    const double C1094 = C49824 * (C49862 + C49888 * C50036) -
                         (ae * (C49946 * C50036 + C49976)) / C49832;
    const double C1180 =
        2 * C50022 * C49862 + C50022 * (C49862 + C49888 * C50036);
    const double C50127 = C49824 * C50124;
    const double C50158 = 2 * C50124;
    const double C50145 = C50144 - C50142;
    const double C9208 =
        2 * (C49824 * C50154 - (ae * (C49942 * C50036 + C49936)) / C49832) -
        (ae * (C50115 * C50036 + C50069)) / C49832 +
        C49824 * (C50154 - (ae * (C49824 * C49952 * C50036 + C50107)) / C49832 +
                  C49824 * (C49824 * ((-(C49908 * C50036) / C49694) / C49756 -
                                      C49895) -
                            (ae * (C49952 * C50036 + C49942)) / C49832));
    const double C9314 =
        (-2 * C50078) / C49832 + C50022 * C50154 +
        (((-2 * C50022 * C50107) / C49694 -
          (C50022 * (C49824 * C49952 * C50036 + C50107)) / C49694) *
         ae) /
            C49756 +
        C49824 * ((((-2 * C50138) / C49694 -
                    (C50022 * (C49952 * C50036 + C49942)) / C49694) *
                   ae) /
                      C49756 +
                  C49824 * ((-2 * C50137) / C49832 +
                            C50022 * ((-(C49908 * C50036) / C49694) / C49756 -
                                      C49895)));
    const double C49923 = C49821 * C49921;
    const double C50090 = C49824 * C49921;
    const double C50130 = C50022 * C49921;
    const double C50147 = C49921 * C50036;
    const double C3491 = C49862 + C49888 * C50036 -
                         (ae * (C49824 * C49958 * C50036 + C50055)) / C49832 +
                         C49824 * (C49824 * (C49888 + C49921 * C50036) -
                                   (ae * (C49958 * C50036 + C49946)) / C49832);
    const double C50184 = C49824 * C50181;
    const double C50206 = C50204 - C50200;
    const double C50219 = C49824 * C50218;
    const double C50223 = C50022 * C50218;
    const double C49719 = C49718 / C49694;
    const double C5492 = C477 * C283;
    const double C5486 = C475 * C283;
    const double C5500 = C5498 * C283;
    const double C15724 = C977 * C283;
    const double C15718 = C6115 * C283;
    const double C21151 = C6416 * C283;
    const double C5494 = C479 * C284;
    const double C5488 = C477 * C284;
    const double C5482 = C475 * C284;
    const double C15726 = C979 * C284;
    const double C15720 = C977 * C284;
    const double C21153 = C6116 * C284;
    const double C6928 = C1542 * C1391;
    const double C6924 = C1540 * C1391;
    const double C6920 = C5926 * C1391;
    const double C6914 = C477 * C1391;
    const double C6910 = C475 * C1391;
    const double C6906 = C5498 * C1391;
    const double C7444 = C979 * C1391;
    const double C7440 = C977 * C1391;
    const double C7436 = C6115 * C1391;
    const double C17082 = C6288 * C1391;
    const double C17078 = C6286 * C1391;
    const double C17590 = C6116 * C1391;
    const double C17586 = C6416 * C1391;
    const double C20392 = C19088 * C1391;
    const double C22047 = C16464 * C1391;
    const double C22384 = C16586 * C1391;
    const double C49798 = C49796 / C49756;
    const double C22849 = C22820 * C126;
    const double C22845 = C22820 * C136;
    const double C22841 = C22820 * C125;
    const double C22835 = C22820 * C134;
    const double C22831 = C22820 * C124;
    const double C22829 = C22820 * C132;
    const double C22825 = C22820 * C123;
    const double C23039 = C22820 * C289;
    const double C23035 = C22820 * C297;
    const double C23031 = C22820 * C288;
    const double C23025 = C22820 * C295;
    const double C23021 = C22820 * C286;
    const double C23223 = C22820 * C437;
    const double C23219 = C22820 * C445;
    const double C23215 = C22820 * C436;
    const double C23209 = C22820 * C443;
    const double C23205 = C22820 * C434;
    const double C23399 = C22820 * C589;
    const double C23395 = C22820 * C595;
    const double C23391 = C22820 * C588;
    const double C23813 = C22820 * C946;
    const double C23809 = C22820 * C952;
    const double C23805 = C22820 * C945;
    const double C24567 = C22820 * C813;
    const double C24563 = C22820 * C822;
    const double C24559 = C22820 * C812;
    const double C28891 = C22820 * C441;
    const double C28887 = C22820 * C435;
    const double C29105 = C22820 * C831;
    const double C29101 = C22820 * C817;
    const double C29447 = C22820 * C833;
    const double C29443 = C22820 * C818;
    const double C29439 = C22820 * C820;
    const double C29435 = C22820 * C811;
    const double C29671 = C22820 * C1174;
    const double C29667 = C22820 * C1168;
    const double C29660 = C22820 * C944;
    const double C29656 = C22820 * C950;
    const double C29887 = C22820 * C1088;
    const double C29883 = C22820 * C1082;
    const double C29879 = C22820 * C1090;
    const double C29875 = C22820 * C1083;
    const double C30033 = C22820 * C1176;
    const double C30029 = C22820 * C1169;
    const double C47772 = C22820 * C3488;
    const double C47768 = C22820 * C3483;
    const double C48087 = C22820 * C3598;
    const double C48083 = C22820 * C3593;
    const double C48205 = C22820 * C6402;
    const double C48201 = C22820 * C6397;
    const double C19281 = C19269 + C19270;
    const double C19287 = C19280 * C696;
    const double C21635 = C16469 + C16468;
    const double C19402 = C19392 * C696;
    const double C16470 = C16466 * C696;
    const double C22045 = C16466 * C1392;
    const double C22518 = C16466 * C49713;
    const double C13396 = C8043 * C8888;
    const double C45067 = C25652 * C8888;
    const double C13730 = C8043 * C9206;
    const double C18921 = C50781 * C9206;
    const double C45401 = C25652 * C9206;
    const double C47771 = C50781 * C9206;
    const double C13854 = C8043 * C9312;
    const double C19274 = C50781 * C9312;
    const double C21420 = C50765 * C9312;
    const double C45517 = C25652 * C9312;
    const double C48086 = C50781 * C9312;
    const double C179 = C167 + C168;
    const double C333 = C323 + C324;
    const double C2352 = C2332 + C2333;
    const double C22867 = C22847 + C22848;
    const double C481 = C471 + C472;
    const double C624 = C616 + C617;
    const double C2538 = C2522 + C2523;
    const double C8098 = C8074 + C8075;
    const double C23053 = C23037 + C23038;
    const double C25707 = C25683 + C25684;
    const double C1544 = C1536 + C1537;
    const double C2722 = C2706 + C2707;
    const double C23237 = C23221 + C23222;
    const double C981 = C973 + C974;
    const double C6296 = C6290 * C696;
    const double C17080 = C6290 * C1392;
    const double C17794 = C6290 * C49713;
    const double C16130 = C15880 * C696;
    const double C8732 =
        (4 * (2 * C50359 + C49824 * C50407 + C50360 * ae) +
         C49824 * (3 * C50407 +
                   C49824 * (2 * C50399 +
                             C49824 * (C49894 +
                                       C49824 * (C49824 * C49821 * C49909 +
                                                 C49996 * ae) +
                                       C49824 * C49996 * ae) +
                             C50401 * ae) +
                   C50406 * ae) +
         (3 * C50360 + C49824 * C50406) * ae) /
        C49756;
    const double C8886 =
        (C50022 * (3 * C50407 +
                   C49824 * (2 * C50399 +
                             C49824 * (C49894 +
                                       C49824 * (C49824 * C49821 * C49909 +
                                                 C49996 * ae) +
                                       C49824 * C49996 * ae) +
                             C50401 * ae) +
                   C50406 * ae)) /
        C49756;
    const double C9204 =
        (2 * C50359 + C49824 * C50407 + C50360 * ae +
         (2 * C50399 +
          C49824 * (C49894 + C49824 * (C49824 * C49821 * C49909 + C49996 * ae) +
                    C49824 * C49996 * ae) +
          C50401 * ae) *
             C50036) /
        C49756;
    const double C9310 =
        (2 * C50022 * C50407 +
         C50022 * (C50407 +
                   (C49894 + C49824 * (C49824 * C49821 * C49909 + C49996 * ae) +
                    C49824 * C49996 * ae) *
                       C50036)) /
        C49756;
    const double C49987 = C49984 / C49694;
    const double C49999 = C49992 / C49694;
    const double C50050 = C50048 / C49832;
    const double C1086 = -(C50046 * C50036 + C49824 * C49981) / C49694;
    const double C3594 =
        (-2 * C50022 * C50046) / C49694 -
        (C50022 * (C49824 * C50009 * C50036 + C50046)) / C49694;
    const double C50456 = C50437 + C50454;
    const double C165 = C117 * C138;
    const double C2338 = C2305 * C138;
    const double C22853 = C22820 * C138;
    const double C321 = C117 * C299;
    const double C2328 = C2306 * C299;
    const double C2528 = C2305 * C299;
    const double C8082 = C8047 * C299;
    const double C22843 = C22821 * C299;
    const double C23043 = C22820 * C299;
    const double C469 = C117 * C447;
    const double C2712 = C2305 * C447;
    const double C23227 = C22820 * C447;
    const double C614 = C117 * C597;
    const double C2518 = C2306 * C597;
    const double C2888 = C2305 * C597;
    const double C8072 = C8048 * C597;
    const double C8270 = C8047 * C597;
    const double C23033 = C22821 * C597;
    const double C23403 = C22820 * C597;
    const double C25681 = C25657 * C597;
    const double C2886 = C2306 * C703;
    const double C8268 = C8048 * C703;
    const double C23401 = C22821 * C703;
    const double C25877 = C25657 * C703;
    const double C1534 = C117 * C824;
    const double C2702 = C2306 * C824;
    const double C4104 = C2305 * C824;
    const double C8452 = C8047 * C824;
    const double C23217 = C22821 * C824;
    const double C24571 = C22820 * C824;
    const double C4102 = C2306 * C829;
    const double C5654 = C117 * C829;
    const double C8450 = C8048 * C829;
    const double C24569 = C22821 * C829;
    const double C26059 = C25657 * C829;
    const double C971 = C117 * C954;
    const double C3326 = C2305 * C954;
    const double C23817 = C22820 * C954;
    const double C6112 = C117 * C1172;
    const double C19286 = C19279 * C50607;
    const double C141 = (5 * (3 * C49859 + C49821 * C49887) +
                         C49821 * (4 * C49887 + C49821 * C49924)) /
                        C49756;
    const double C302 = (C49824 * (4 * C49887 + C49821 * C49924) +
                         (4 * C50253 + C49821 * C50258) * ae) /
                        C49756;
    const double C450 = (C50022 * (4 * C49887 + C49821 * C49924)) / C49756;
    const double C600 =
        (3 * C49859 + C49821 * C49887 +
         C49824 * (C49824 * C49924 + C50258 * ae) + C49824 * C50258 * ae) /
        C49756;
    const double C957 =
        (3 * C49859 + C49821 * C49887 + C49924 * C50036) / C49756;
    const double C1524 = (C50022 * (C49824 * C49924 + C50258 * ae)) / C49756;
    const double C50011 = C50010 / C49694;
    const double C50053 = C50051 + C49963;
    const double C50105 = C50099 - C50103;
    const double C50187 = C50169 + C50185;
    const double C166 = C50765 * C147;
    const double C2339 = C50911 * C147;
    const double C22854 = C22815 * C147;
    const double C318 = C50765 * C306;
    const double C2323 = C50781 * C306;
    const double C2521 = C50911 * C306;
    const double C8071 = C8042 * C306;
    const double C8273 = C8041 * C306;
    const double C22838 = C50781 * C306;
    const double C23036 = C22815 * C306;
    const double C25680 = C50938 * C306;
    const double C25882 = C50946 * C306;
    const double C466 = C50765 * C454;
    const double C2705 = C50911 * C454;
    const double C8455 = C8041 * C454;
    const double C23220 = C22815 * C454;
    const double C26064 = C50946 * C454;
    const double C611 = C50765 * C603;
    const double C2513 = C50781 * C603;
    const double C2881 = C50911 * C603;
    const double C8057 = C8043 * C603;
    const double C8259 = C8042 * C603;
    const double C8625 = C8041 * C603;
    const double C23028 = C50781 * C603;
    const double C23396 = C22815 * C603;
    const double C25666 = C25652 * C603;
    const double C25868 = C50938 * C603;
    const double C26234 = C50946 * C603;
    const double C1531 = C50765 * C836;
    const double C2697 = C50781 * C836;
    const double C4097 = C50911 * C836;
    const double C8441 = C8042 * C836;
    const double C9813 = C8041 * C836;
    const double C23212 = C50781 * C836;
    const double C24564 = C22815 * C836;
    const double C26050 = C50938 * C836;
    const double C27390 = C50946 * C836;
    const double C968 = C50765 * C960;
    const double C3319 = C50911 * C960;
    const double C9049 = C8041 * C960;
    const double C23810 = C22815 * C960;
    const double C26642 = C50946 * C960;
    const double C49890 = C49883 + C49889;
    const double C49906 = C49892 - C49900;
    const double C50061 = C50056 - C50059;
    const double C3163 =
        2 * (C49824 * C50076 - (ae * C50022 * C49946) / C49832) -
        (ae * C50022 * C50060) / C49832 +
        C49824 * (C50076 - (ae * C50022 * C49824 * C49958) / C49832 +
                  C49824 * (C49824 * C50022 * C49921 -
                            (ae * C50022 * C49958) / C49832));
    const double C3601 =
        (((-2 * C50022 * C49946) / C49694 -
          (C50022 * (C49958 * C50036 + C49946)) / C49694) *
         ae) /
            C49756 +
        C49824 * (2 * C50076 + C50022 * (C49888 + C49921 * C50036));
    const double C6405 =
        3 * (C49862 + C49888 * C50036) +
        C50022 * (2 * C50076 + C50022 * (C49888 + C49921 * C50036));
    const double C2879 = C50781 * C711;
    const double C8261 = C8043 * C711;
    const double C8623 = C8042 * C711;
    const double C23394 = C50781 * C711;
    const double C25870 = C25652 * C711;
    const double C26232 = C50938 * C711;
    const double C4095 = C50781 * C841;
    const double C5651 = C50765 * C841;
    const double C8443 = C8043 * C841;
    const double C9811 = C8042 * C841;
    const double C24562 = C50781 * C841;
    const double C26052 = C25652 * C841;
    const double C27388 = C50938 * C841;
    const double C29106 = C22815 * C841;
    const double C35338 = C50911 * C841;
    const double C3317 = C50781 * C1094;
    const double C6281 = C50765 * C1094;
    const double C9047 = C8042 * C1094;
    const double C19899 = C50911 * C1094;
    const double C23808 = C50781 * C1094;
    const double C26640 = C50938 * C1094;
    const double C29888 = C22815 * C1094;
    const double C6109 = C50765 * C1180;
    const double C19105 = C50911 * C1180;
    const double C29672 = C22815 * C1180;
    const double C50128 = C50126 + C50127;
    const double C50172 = C50158 - C50165;
    const double C8890 =
        3 * ((-(ae * C50022 * C50107) / C49694) / C49756 - C50078 / C49832 +
             C49824 * C50145) +
        (C50022 * C50125 * ae) / C49756 +
        C49824 *
            (2 * C50145 - (ae * C50022 * C50115) / C49832 +
             C49824 *
                 ((-(ae * C50022 * C49824 * C49952) / C49694) / C49756 -
                  C50137 / C49832 +
                  C49824 * ((-(C49824 * C50022 * C49908) / C49694) / C49756 -
                            (ae * C50022 * C49952) / C49832)));
    const double C13736 = C8043 * C9208;
    const double C18925 = C50781 * C9208;
    const double C45407 = C25652 * C9208;
    const double C47775 = C50781 * C9208;
    const double C13860 = C8043 * C9314;
    const double C19278 = C50781 * C9314;
    const double C21422 = C50765 * C9314;
    const double C45523 = C25652 * C9314;
    const double C48090 = C50781 * C9314;
    const double C49925 = C49916 + C49923;
    const double C50098 = C50090 - C50094;
    const double C50132 = C49824 * C50130;
    const double C50148 = C49888 + C50147;
    const double C9045 = C8043 * C3491;
    const double C15879 = C50765 * C3491;
    const double C19901 = C50781 * C3491;
    const double C26638 = C25652 * C3491;
    const double C29890 = C50781 * C3491;
    const double C50186 = C50183 + C50184;
    const double C50207 = C49824 * C50206;
    const double C50220 = C50219 - C50217;
    const double C50225 = C50224 + C50223;
    const double C49720 = C49719 - C49709;
    const double C17582 = C7436 + C7435;
    const double C22381 = C17586 + C17585;
    const double C20396 = C20392 + C20393;
    const double C49800 = C49798 - C49793;
    const double C22868 = C22849 + C22850;
    const double C22866 = C22845 + C22846;
    const double C22864 = C22841 + C22842;
    const double C22861 = C22835 + C22836;
    const double C22859 = C22831 + C22832;
    const double C22858 = C22829 + C22830;
    const double C22856 = C22825 + C22826;
    const double C23054 = C23039 + C23040;
    const double C23050 = C23031 + C23032;
    const double C23047 = C23025 + C23026;
    const double C23045 = C23021 + C23022;
    const double C23238 = C23223 + C23224;
    const double C23234 = C23215 + C23216;
    const double C23231 = C23209 + C23210;
    const double C23229 = C23205 + C23206;
    const double C23410 = C23399 + C23400;
    const double C23406 = C23391 + C23392;
    const double C23824 = C23813 + C23814;
    const double C23820 = C23805 + C23806;
    const double C24578 = C24567 + C24568;
    const double C24574 = C24559 + C24560;
    const double C28903 = C28891 + C28892;
    const double C28901 = C28887 + C28888;
    const double C29108 = C29101 + C29102;
    const double C29457 = C29447 + C29448;
    const double C29455 = C29443 + C29444;
    const double C29453 = C29439 + C29440;
    const double C29451 = C29435 + C29436;
    const double C29678 = C29667 + C29668;
    const double C29676 = C29660 + C29661;
    const double C29674 = C29656 + C29657;
    const double C29895 = C29883 + C29884;
    const double C29893 = C29879 + C29880;
    const double C29891 = C29875 + C29876;
    const double C30039 = C30033 + C30034;
    const double C30037 = C30029 + C30030;
    const double C47778 = C47772 + C47773;
    const double C47776 = C47768 + C47769;
    const double C48096 = C48087 + C48088;
    const double C48094 = C48083 + C48084;
    const double C48213 = C48205 + C48206;
    const double C48211 = C48201 + C48202;
    const double C19407 = C19401 + C19402;
    const double C13411 = C13395 + C13396;
    const double C45082 = C45066 + C45067;
    const double C13739 = C13729 + C13730;
    const double C18939 = C18920 + C18921;
    const double C45410 = C45400 + C45401;
    const double C47777 = C47770 + C47771;
    const double C13863 = C13853 + C13854;
    const double C19283 = C19273 + C19274;
    const double C21423 = C21419 + C21420;
    const double C45526 = C45516 + C45517;
    const double C48095 = C48085 + C48086;
    const double C5496 = C481 * C285;
    const double C7092 = C481 * C1287;
    const double C6926 = C1544 * C1392;
    const double C7648 = C1544 * C49713;
    const double C6102 = C981 * C49713;
    const double C7442 = C981 * C1392;
    const double C15728 = C981 * C285;
    const double C17240 = C981 * C1287;
    const double C49989 = C49986 - C49987;
    const double C3324 = C2306 * C1086;
    const double C6284 = C117 * C1086;
    const double C23815 = C22821 * C1086;
    const double C50457 = C50456 + C50441;
    const double C19288 = C19286 + C19287;
    const double C50012 = C50000 - C50011;
    const double C2998 =
        (-3 * (C49963 * C50049 + C49981)) / C49694 +
        C49824 * ((-2 * C50046) / C49694 - (C49824 * C50053) / C49694);
    const double C3156 =
        C50022 * ((-2 * C50046) / C49694 - (C49824 * C50053) / C49694);
    const double C3484 = -(C50053 * C50036 + C49963 * C50049 + C49981) / C49694;
    const double C8731 =
        4 * ((-2 * C50055) / C49694 - (C49824 * C50060) / C49694) +
        C49824 * ((-3 * C50060) / C49694 + C49824 * C50105);
    const double C8885 = C50022 * ((-3 * C50060) / C49694 + C49824 * C50105);
    const double C9203 =
        (-2 * C50055) / C49694 - (C49824 * C50060) / C49694 + C50105 * C50036;
    const double C11227 = 5 * ((-3 * C50069) / C49694 + C49824 * C50125) +
                          C49824 * (4 * C50125 + C49824 * C50187);
    const double C11329 = C50022 * (4 * C50125 + C49824 * C50187);
    const double C11529 =
        (-3 * C50069) / C49694 + C49824 * C50125 + C50187 * C50036;
    const double C178 = C165 + C166;
    const double C2355 = C2338 + C2339;
    const double C22870 = C22853 + C22854;
    const double C330 = C317 + C318;
    const double C2347 = C2322 + C2323;
    const double C2537 = C2520 + C2521;
    const double C8096 = C8070 + C8071;
    const double C8285 = C8272 + C8273;
    const double C22862 = C22837 + C22838;
    const double C23052 = C23035 + C23036;
    const double C478 = C465 + C466;
    const double C2721 = C2704 + C2705;
    const double C8467 = C8454 + C8455;
    const double C23236 = C23219 + C23220;
    const double C621 = C610 + C611;
    const double C2533 = C2512 + C2513;
    const double C2893 = C2880 + C2881;
    const double C8089 = C8056 + C8057;
    const double C8278 = C8258 + C8259;
    const double C8631 = C8624 + C8625;
    const double C23048 = C23027 + C23028;
    const double C23408 = C23395 + C23396;
    const double C25698 = C25665 + C25666;
    const double C1541 = C1530 + C1531;
    const double C2717 = C2696 + C2697;
    const double C4109 = C4096 + C4097;
    const double C8460 = C8440 + C8441;
    const double C9819 = C9812 + C9813;
    const double C23232 = C23211 + C23212;
    const double C24576 = C24563 + C24564;
    const double C978 = C967 + C968;
    const double C3331 = C3318 + C3319;
    const double C9055 = C9048 + C9049;
    const double C23822 = C23809 + C23810;
    const double C148 =
        4 * (2 * C49862 - (C49859 * ce) / C49832 + C49821 * C49890) -
        ((3 * C49859 + C49821 * C49887) * ce) / C49832 +
        C49821 *
            (3 * C49890 - (C49887 * ce) / C49832 +
             C49821 * (2 * C49888 - (C49882 * ce) / C49832 +
                       C49821 * ((-(C49821 * C49876 * ce) / C49694) / C49756 -
                                 C49875 / C49832 +
                                 C49821 * ((-(C49821 * std::pow(C49828, 7) *
                                              bs[7] * C49837) /
                                            C49694) /
                                               C49756 -
                                           (C49876 * ce) / C49832))));
    const double C307 =
        (((-2 * (C49821 * C49936 + C49932 * ce)) / C49694 -
          (C49821 *
           (C49821 * (C49821 * C49847 * C49848 * C49931 + C49935 * ce) +
            C49936 + C49821 * C49935 * ce)) /
              C49694 -
          ((C49932 + C49935 * C49850) * ce) / C49694) *
         ae) /
            C49756 +
        C49824 * (2 * C49862 - (C49859 * ce) / C49832 + C49821 * C49890);
    const double C455 =
        (zP - zQ) * (2 * C49862 - (C49859 * ce) / C49832 + C49821 * C49890);
    const double C604 = (-(C49846 * ce) / C49694) / C49756 - C49843 / C49832 +
                        C49821 * C49862 - (ae * C49824 * C49981) / C49832 +
                        C49824 * (C49824 * C49890 - (ae * C49981) / C49832);
    const double C837 =
        C49824 * C50022 * C49890 - (ae * C50022 * C49981) / C49832;
    const double C961 = (-(C49846 * ce) / C49694) / C49756 - C49843 / C49832 +
                        C49821 * C49862 + C49890 * std::pow(C50022, 2);
    const double C3005 =
        3 * (C49862 - (ae * C50055) / C49832 + C49824 * C50061) +
        (((-2 * C50055) / C49694 - (C49824 * C50060) / C49694) * ae) / C49756 +
        C49824 *
            (2 * C50061 - (ae * C50060) / C49832 +
             C49824 * (C49888 - (ae * C49824 * C49958) / C49832 +
                       C49824 * (C49824 * C49921 - (ae * C49958) / C49832)));
    const double C9809 = C8043 * C3163;
    const double C27386 = C25652 * C3163;
    const double C29104 = C50781 * C3163;
    const double C35336 = C50781 * C3163;
    const double C16461 = C50765 * C3601;
    const double C19107 = C50781 * C3601;
    const double C29670 = C50781 * C3601;
    const double C16295 = C50765 * C6405;
    const double C2892 = C2878 + C2879;
    const double C8279 = C8260 + C8261;
    const double C8630 = C8622 + C8623;
    const double C23407 = C23393 + C23394;
    const double C25888 = C25869 + C25870;
    const double C4108 = C4094 + C4095;
    const double C5657 = C5650 + C5651;
    const double C8461 = C8442 + C8443;
    const double C9818 = C9810 + C9811;
    const double C24575 = C24561 + C24562;
    const double C26070 = C26051 + C26052;
    const double C29110 = C29105 + C29106;
    const double C35342 = C35337 + C35338;
    const double C3330 = C3316 + C3317;
    const double C6289 = C6280 + C6281;
    const double C9054 = C9046 + C9047;
    const double C19904 = C19898 + C19899;
    const double C23821 = C23807 + C23808;
    const double C29897 = C29887 + C29888;
    const double C6117 = C6108 + C6109;
    const double C19118 = C19104 + C19105;
    const double C29680 = C29671 + C29672;
    const double C8736 =
        4 * (2 * C50072 - (ae * C50069) / C49832 + C49824 * C50128) +
        (((-3 * C50069) / C49694 + C49824 * C50125) * ae) / C49756 +
        C49824 *
            (3 * C50128 + (C50125 * ae) / C49756 +
             C49824 *
                 (2 * C50124 - (ae * C50115) / C49832 +
                  C49824 *
                      ((-(ae * C49824 * C49952) / C49694) / C49756 - C49895 +
                       C49824 * ((-(C49824 * C49908) / C49694) / C49756 -
                                 (ae * C49952) / C49832))));
    const double C13402 = C8043 * C8890;
    const double C45073 = C25652 * C8890;
    const double C13742 = C13735 + C13736;
    const double C18941 = C18924 + C18925;
    const double C45413 = C45406 + C45407;
    const double C47779 = C47774 + C47775;
    const double C13866 = C13859 + C13860;
    const double C19285 = C19277 + C19278;
    const double C21424 = C21421 + C21422;
    const double C45529 = C45522 + C45523;
    const double C48097 = C48089 + C48090;
    const double C49926 = C49821 * C49925;
    const double C50047 = C49824 * C49925;
    const double C50074 = C50022 * C49925;
    const double C710 =
        2 * (C49824 * C49890 - (ae * C49981) / C49832) -
        (ae * (C49963 * std::pow(C49824, 2) + C49981)) / C49832 +
        C49824 * (C49890 - (ae * C49824 * C49963) / C49832 +
                  C49824 * (C49824 * C49925 - (ae * C49963) / C49832));
    const double C840 =
        C50022 * C49890 - (ae * C50022 * C49824 * C49963) / C49832 +
        C49824 * (C49824 * C50022 * C49925 - (ae * C50022 * C49963) / C49832);
    const double C1093 = C49824 * (C49890 + C49925 * C50036) -
                         (ae * (C49963 * C50036 + C49981)) / C49832;
    const double C1179 =
        2 * C50022 * C49890 + C50022 * (C49890 + C49925 * C50036);
    const double C3490 =
        C49890 + C49925 * C50036 -
        (ae * (C49824 * C50009 * C50036 + C50046)) / C49832 +
        C49824 *
            (C49824 *
                 (C49925 +
                  ((-(C49821 * C49909 * ce) / C49694) / C49756 -
                   C49908 / C49832 +
                   C49821 * ((-(C49821 * std::pow(C49826, 8) * bs[8] * C49837) /
                              C49694) /
                                 C49756 -
                             (C49909 * ce) / C49832)) *
                      C50036) -
             (ae * (C50009 * C50036 + C49963)) / C49832);
    const double C50102 = C49824 * C50098;
    const double C50135 = C50132 - C50134;
    const double C9207 =
        2 * (C49824 * C50148 - (ae * (C49958 * C50036 + C49946)) / C49832) -
        (ae * (C50096 * C50036 + C50060)) / C49832 +
        C49824 *
            (C50148 - (ae * (C49824 * C50006 * C50036 + C50089)) / C49832 +
             C49824 * (C49824 * (C49921 + ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49694) /
                                               C49756 -
                                           (C49909 * ce) / C49832) *
                                              C50036) -
                       (ae * (C50006 * C50036 + C49958)) / C49832));
    const double C9313 =
        2 * C50076 + C50022 * C50148 +
        (((-2 * C50022 * C50089) / C49694 -
          (C50022 * (C49824 * C50006 * C50036 + C50089)) / C49694) *
         ae) /
            C49756 +
        C49824 *
            ((((-2 * C50131) / C49694 -
               (C50022 * (C50006 * C50036 + C49958)) / C49694) *
              ae) /
                 C49756 +
             C49824 * (2 * C50130 +
                       C50022 * (C49921 + ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49694) /
                                               C49756 -
                                           (C49909 * ce) / C49832) *
                                              C50036)));
    const double C16450 =
        (((-3 * (C49958 * C50036 + C49946)) / C49694 +
          C50022 * ((-2 * C50131) / C49694 -
                    (C50022 * (C50006 * C50036 + C49958)) / C49694)) *
         ae) /
            C49756 +
        C49824 *
            (3 * C50148 +
             C50022 * (2 * C50130 +
                       C50022 * (C49921 + ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49694) /
                                               C49756 -
                                           (C49909 * ce) / C49832) *
                                              C50036)));
    const double C16575 =
        4 * (2 * C50076 + C50022 * C50148) +
        C50022 *
            (3 * C50148 +
             C50022 * (2 * C50130 +
                       C50022 * (C49921 + ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49694) /
                                               C49756 -
                                           (C49909 * ce) / C49832) *
                                              C50036)));
    const double C9053 = C9044 + C9045;
    const double C15881 = C15878 + C15879;
    const double C19905 = C19900 + C19901;
    const double C26646 = C26637 + C26638;
    const double C29898 = C29889 + C29890;
    const double C50188 = C49824 * C50186;
    const double C50208 = C50205 + C50207;
    const double C11531 =
        3 * (C50154 - (ae * (C50160 * C50036 + C50107)) / C49832 +
             C49824 * C50220) +
        ((C50125 + C50182 * C50036) * ae) / C49756 +
        C49824 *
            (2 * C50220 - (ae * (C50171 * C50036 + C50115)) / C49832 +
             C49824 *
                 (C50218 - (ae * (C49824 * C50001 * C50036 + C50160)) / C49832 +
                  C49824 * (C49824 * ((-(std::pow(C49826, 8) * bs[8] * C49837 *
                                         C50036) /
                                       C49694) /
                                          C49756 -
                                      C49908 / C49832) -
                            (ae * (C50001 * C50036 + C49952)) / C49832)));
    const double C11601 =
        2 * ((((-2 * C50138) / C49694 - (C50022 * C50213) / C49694) * ae) /
                 C49756 +
             C49824 * C50225) +
        (((-2 * C50022 * C50115) / C49694 -
          (C50022 * (C50171 * C50036 + C50115)) / C49694) *
         ae) /
            C49756 +
        C49824 * (C50225 +
                  (((-2 * C50191) / C49694 -
                    (C50022 * (C49824 * C50001 * C50036 + C50160)) / C49694) *
                   ae) /
                      C49756 +
                  C49824 * ((((-2 * C50194) / C49694 -
                              (C50022 * (C50001 * C50036 + C49952)) / C49694) *
                             ae) /
                                C49756 +
                            C49824 * ((-2 * C50193) / C49832 +
                                      C50022 * ((-(std::pow(C49826, 8) * bs[8] *
                                                   C49837 * C50036) /
                                                 C49694) /
                                                    C49756 -
                                                C49908 / C49832))));
    const double C13846 =
        3 * C50154 + C50022 * C50225 +
        (((-3 * (C50160 * C50036 + C50107)) / C49694 +
          C50022 * ((-2 * C50191) / C49694 -
                    (C50022 * (C49824 * C50001 * C50036 + C50160)) / C49694)) *
         ae) /
            C49756 +
        C49824 * ((((-3 * C50213) / C49694 +
                    C50022 * ((-2 * C50194) / C49694 -
                              (C50022 * (C50001 * C50036 + C49952)) / C49694)) *
                   ae) /
                      C49756 +
                  C49824 * (3 * C50218 +
                            C50022 * ((-2 * C50193) / C49832 +
                                      C50022 * ((-(std::pow(C49826, 8) * bs[8] *
                                                   C49837 * C50036) /
                                                 C49694) /
                                                    C49756 -
                                                C49908 / C49832))));
    const double C13847 =
        (((-3 * (C49942 * C50036 + C49936)) / C49694 +
          C50022 * ((-2 * C50138) / C49694 - (C50022 * C50213) / C49694)) *
         ae) /
            C49756 +
        C49824 * (3 * C50154 + C50022 * C50225);
    const double C16576 = 4 * ((-2 * C50078) / C49832 + C50022 * C50154) +
                          C50022 * (3 * C50154 + C50022 * C50225);
    const double C19389 =
        ((4 * ((-2 * C50138) / C49694 - (C50022 * C50213) / C49694) +
          C50022 *
              ((-3 * C50213) / C49694 +
               C50022 * ((-2 * C50194) / C49694 -
                         (C50022 * (C50001 * C50036 + C49952)) / C49694))) *
         ae) /
            C49756 +
        C49824 * (4 * C50225 +
                  C50022 * (3 * C50218 +
                            C50022 * ((-2 * C50193) / C49832 +
                                      C50022 * ((-(std::pow(C49826, 8) * bs[8] *
                                                   C49837 * C50036) /
                                                 C49694) /
                                                    C49756 -
                                                C49908 / C49832))));
    const double C21708 =
        5 * (3 * C50154 + C50022 * C50225) +
        C50022 * (4 * C50225 +
                  C50022 * (3 * C50218 +
                            C50022 * ((-2 * C50193) / C49832 +
                                      C50022 * ((-(std::pow(C49826, 8) * bs[8] *
                                                   C49837 * C50036) /
                                                 C49694) /
                                                    C49756 -
                                                C49908 / C49832))));
    const double C6104 = C979 * C49720;
    const double C6100 = C977 * C49720;
    const double C6088 = C477 * C49720;
    const double C6084 = C475 * C49720;
    const double C6080 = C5498 * C49720;
    const double C6121 = C6115 * C49720;
    const double C7650 = C1542 * C49720;
    const double C7646 = C1540 * C49720;
    const double C7642 = C5926 * C49720;
    const double C16290 = C6116 * C49720;
    const double C16286 = C6416 * C49720;
    const double C17796 = C6288 * C49720;
    const double C17792 = C6286 * C49720;
    const double C19108 = C19088 * C49720;
    const double C21528 = C16586 * C49720;
    const double C22520 = C16464 * C49720;
    const double C118 =
        ((((0 - (C49692 * C49693) / C49694) * ce) / C49694 - (0 * de) / C49703 +
          C49695 / C49694) /
             C49699 -
         ((C49692 * C49716 + 0) * de) / C49694) /
            C49699 -
        ((C49692 * (C49716 / C49699 -
                    ((C49692 * C49720 + C50884) * de) / C49694 + C49713) +
          C50942) *
         de) /
            C49694 +
        C49720 / C49699 - ((C49692 * C49713 + C50612) * de) / C49694;
    const double C119 =
        (C49716 / C49699 - ((C49692 * C49720 + C50884) * de) / C49694 +
         C49713) /
            C49699 -
        ((C49692 *
              (C49720 / C49699 - ((C49692 * C49713 + C50612) * de) / C49694) +
          C50926) *
         de) /
            C49694 +
        2 * (C49713 / C49699 - (0 * de) / C49694);
    const double C120 =
        (C49720 / C49699 - ((C49692 * C49713 + C50612) * de) / C49694) /
            C49699 -
        ((C49692 * (C49713 / C49699 - (0 * de) / C49694) + C1282) * de) /
            C49694;
    const double C1285 =
        C49716 / C49699 - ((C49692 * C49720 + C50884) * de) / C49694 + C49713;
    const double C1286 =
        C49720 / C49699 - ((C49692 * C49713 + C50612) * de) / C49694;
    const double C17592 = C17582 - C7434;
    const double C22386 = C22381 - C17584;
    const double C20397 = C20396 - C20394;
    const double C10862 =
        ((((0 - (C49755 * C49780) / C49756) * ae) / C49756 - (0 * be) / C49785 +
          C49765 / C49756) /
             C49764 -
         ((C49755 * C49799 + 0) * be) / C49756) /
            C49764 -
        ((C49755 * (C49799 / C49764 -
                    ((C49755 * C49800 + C50911) * be) / C49756 + C49794) +
          C50946) *
         be) /
            C49756 +
        C49800 / C49764 - ((C49755 * C49794 + C50781) * be) / C49756;
    const double C10863 =
        (C49799 / C49764 - ((C49755 * C49800 + C50911) * be) / C49756 +
         C49794) /
            C49764 -
        ((C49755 *
              (C49800 / C49764 - ((C49755 * C49794 + C50781) * be) / C49756) +
          C50938) *
         be) /
            C49756 +
        2 * (C49794 / C49764 - (0 * be) / C49756);
    const double C10864 =
        (C49800 / C49764 - ((C49755 * C49794 + C50781) * be) / C49756) /
            C49764 -
        ((C49755 * (C49794 / C49764 - (0 * be) / C49756) + C25652) * be) /
            C49756;
    const double C25655 =
        C49799 / C49764 - ((C49755 * C49800 + C50911) * be) / C49756 + C49794;
    const double C25656 =
        C49800 / C49764 - ((C49755 * C49794 + C50781) * be) / C49756;
    const double C22873 = C22863 + C22864;
    const double C22871 = C22859 + C22860;
    const double C23057 = C23049 + C23050;
    const double C23241 = C23233 + C23234;
    const double C28897 = C23234 + C23233;
    const double C28899 = C23229 + C23230;
    const double C28895 = C23230 + C23229;
    const double C29664 = C23819 + C23820;
    const double C29653 = C23820 + C23819;
    const double C30690 = C24573 + C24574;
    const double C30687 = C24574 + C24573;
    const double C47926 = C29676 + C29675;
    const double C47927 = C29674 + C29673;
    const double C48091 = C29894 + C29893;
    const double C48092 = C29892 + C29891;
    const double C48199 = C30040 + C30039;
    const double C48200 = C30038 + C30037;
    const double C21425 = C21423 * C696;
    const double C49990 = C49989 - C49988;
    const double C11228 =
        (5 * (3 * C50422 + C49824 * C50457 + C50421 * ae) +
         C49824 * (4 * C50457 +
                   C49824 * (3 * C50452 +
                             C49824 * (2 * C50444 +
                                       C49824 * (C49876 +
                                                 C49824 * (C49824 * C49909 +
                                                           C49951 * ae) +
                                                 C49824 * C49951 * ae) +
                                       C50446 * ae) +
                             C50451 * ae) +
                   C50455 * ae) +
         (4 * C50421 + C49824 * C50455) * ae) /
        C49756;
    const double C11330 =
        (C50022 *
         (4 * C50457 +
          C49824 *
              (3 * C50452 +
               C49824 * (2 * C50444 +
                         C49824 * (C49876 +
                                   C49824 * (C49824 * C49909 + C49951 * ae) +
                                   C49824 * C49951 * ae) +
                         C50446 * ae) +
               C50451 * ae) +
          C50455 * ae)) /
        C49756;
    const double C11530 =
        (3 * C50422 + C49824 * C50457 + C50421 * ae +
         (3 * C50452 +
          C49824 *
              (2 * C50444 +
               C49824 * (C49876 + C49824 * (C49824 * C49909 + C49951 * ae) +
                         C49824 * C49951 * ae) +
               C50446 * ae) +
          C50451 * ae) *
             C50036) /
        C49756;
    const double C11600 =
        (2 * C50022 * C50457 +
         C50022 *
             (C50457 +
              (2 * C50444 +
               C49824 * (C49876 + C49824 * (C49824 * C49909 + C49951 * ae) +
                         C49824 * C49951 * ae) +
               C50446 * ae) *
                  C50036)) /
        C49756;
    const double C50013 = C50012 - C50003;
    const double C2357 = C2346 + C2347;
    const double C22872 = C22861 + C22862;
    const double C5493 = C478 * C278;
    const double C5489 = C478 * C279;
    const double C5485 = C478 * C280;
    const double C5909 = C478 * C50607;
    const double C6089 = C478 * C50884;
    const double C6087 = C478 * C50612;
    const double C6915 = C478 * C1386;
    const double C6913 = C478 * C50612;
    const double C7089 = C478 * C50942;
    const double C7085 = C478 * C50926;
    const double C7081 = C478 * C1282;
    const double C5915 = C1541 * C50607;
    const double C6923 = C1541 * C1386;
    const double C6921 = C1541 * C50612;
    const double C7645 = C1541 * C50884;
    const double C7643 = C1541 * C50612;
    const double C35136 = C2716 + C2717;
    const double C35132 = C2717 + C2716;
    const double C28900 = C23231 + C23232;
    const double C28896 = C23232 + C23231;
    const double C6099 = C978 * C50884;
    const double C6097 = C978 * C50612;
    const double C6270 = C978 * C50607;
    const double C7439 = C978 * C1386;
    const double C7437 = C978 * C50612;
    const double C15725 = C978 * C278;
    const double C15721 = C978 * C279;
    const double C17237 = C978 * C50942;
    const double C17233 = C978 * C50926;
    const double C170 = C50765 * C148;
    const double C322 = C50765 * C307;
    const double C2329 = C50781 * C307;
    const double C2529 = C50911 * C307;
    const double C8083 = C8042 * C307;
    const double C22844 = C50781 * C307;
    const double C23044 = C22815 * C307;
    const double C25692 = C50938 * C307;
    const double C470 = C50765 * C455;
    const double C2713 = C50911 * C455;
    const double C23228 = C22815 * C455;
    const double C615 = C50765 * C604;
    const double C2519 = C50781 * C604;
    const double C2889 = C50911 * C604;
    const double C8073 = C8043 * C604;
    const double C8271 = C8042 * C604;
    const double C23034 = C50781 * C604;
    const double C23404 = C22815 * C604;
    const double C25682 = C25652 * C604;
    const double C25880 = C50938 * C604;
    const double C1535 = C50765 * C837;
    const double C2703 = C50781 * C837;
    const double C4105 = C50911 * C837;
    const double C8453 = C8042 * C837;
    const double C23218 = C50781 * C837;
    const double C24572 = C22815 * C837;
    const double C26062 = C50938 * C837;
    const double C972 = C50765 * C961;
    const double C3327 = C50911 * C961;
    const double C23818 = C22815 * C961;
    const double C8621 = C8043 * C3005;
    const double C26230 = C25652 * C3005;
    const double C9817 = C9808 + C9809;
    const double C27394 = C27385 + C27386;
    const double C29109 = C29103 + C29104;
    const double C35341 = C35335 + C35336;
    const double C16467 = C16460 + C16461;
    const double C19119 = C19106 + C19107;
    const double C29679 = C29669 + C29670;
    const double C16299 = C16294 + C16295;
    const double C36835 = C4108 + C4109;
    const double C36834 = C4109 + C4108;
    const double C5923 = C5657 * C50607;
    const double C30689 = C24575 + C24576;
    const double C30688 = C24576 + C24575;
    const double C19091 = C3330 + C3331;
    const double C35862 = C3331 + C3330;
    const double C6295 = C6289 * C50607;
    const double C17081 = C6289 * C1386;
    const double C17079 = C6289 * C50612;
    const double C17795 = C6289 * C50884;
    const double C17793 = C6289 * C50612;
    const double C29663 = C23821 + C23822;
    const double C29662 = C23822 + C23821;
    const double C6413 = C6117 * C50607;
    const double C16289 = C6117 * C50884;
    const double C16287 = C6117 * C50612;
    const double C17589 = C6117 * C1386;
    const double C17587 = C6117 * C50612;
    const double C21154 = C6117 * C279;
    const double C22150 = C6117 * C50926;
    const double C13414 = C13401 + C13402;
    const double C45085 = C45072 + C45073;
    const double C21426 = C21424 * C50607;
    const double C49927 = C49906 + C49926;
    const double C50052 = C50047 - C50050;
    const double C3162 =
        2 * (C49824 * C50074 - (ae * C50022 * C49963) / C49832) -
        (ae * C50022 * C50053) / C49832 +
        C49824 * (C50074 - (ae * C50022 * C49824 * C50009) / C49832 +
                  C49824 * (C49824 * C50022 *
                                ((-(C49821 * C49909 * ce) / C49694) / C49756 -
                                 C49908 / C49832 +
                                 C49821 * ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49694) /
                                               C49756 -
                                           (C49909 * ce) / C49832)) -
                            (ae * C50022 * C50009) / C49832));
    const double C3600 =
        (((-2 * C50022 * C49963) / C49694 -
          (C50022 * (C50009 * C50036 + C49963)) / C49694) *
         ae) /
            C49756 +
        C49824 *
            (2 * C50074 +
             C50022 *
                 (C49925 +
                  ((-(C49821 * C49909 * ce) / C49694) / C49756 -
                   C49908 / C49832 +
                   C49821 * ((-(C49821 * std::pow(C49826, 8) * bs[8] * C49837) /
                              C49694) /
                                 C49756 -
                             (C49909 * ce) / C49832)) *
                      C50036));
    const double C6404 =
        3 * (C49890 + C49925 * C50036) +
        C50022 *
            (2 * C50074 +
             C50022 *
                 (C49925 +
                  ((-(C49821 * C49909 * ce) / C49694) / C49756 -
                   C49908 / C49832 +
                   C49821 * ((-(C49821 * std::pow(C49826, 8) * bs[8] * C49837) /
                              C49694) /
                                 C49756 -
                             (C49909 * ce) / C49832)) *
                      C50036));
    const double C2887 = C50781 * C710;
    const double C8269 = C8043 * C710;
    const double C23402 = C50781 * C710;
    const double C25878 = C25652 * C710;
    const double C4103 = C50781 * C840;
    const double C5655 = C50765 * C840;
    const double C8451 = C8043 * C840;
    const double C24570 = C50781 * C840;
    const double C26060 = C25652 * C840;
    const double C3325 = C50781 * C1093;
    const double C6285 = C50765 * C1093;
    const double C23816 = C50781 * C1093;
    const double C6113 = C50765 * C1179;
    const double C50104 = C50101 + C50102;
    const double C8889 =
        3 * (C50076 - (ae * C50022 * C50089) / C49832 + C49824 * C50135) +
        (C50022 * C50105 * ae) / C49756 +
        C49824 * (2 * C50135 - (ae * C50022 * C50096) / C49832 +
                  C49824 * (C50130 - (ae * C50022 * C49824 * C50006) / C49832 +
                            C49824 * (C49824 * C50022 *
                                          ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49694) /
                                               C49756 -
                                           (C49909 * ce) / C49832) -
                                      (ae * C50022 * C50006) / C49832)));
    const double C16131 = C15881 * C50607;
    const double C50189 = C50172 + C50188;
    const double C11331 =
        4 * (2 * C50145 - (ae * C50022 * C50115) / C49832 + C49824 * C50208) +
        (C50022 * C50187 * ae) / C49756 +
        C49824 *
            (3 * C50208 + (C50022 * C50182 * ae) / C49756 +
             C49824 *
                 (2 * C50206 - (ae * C50022 * C50171) / C49832 +
                  C49824 *
                      ((-(ae * C50022 * C49824 * C50001) / C49694) / C49756 -
                       C50193 / C49832 +
                       C49824 * ((-(C49824 * C50022 * std::pow(C49826, 8) *
                                    bs[8] * C49837) /
                                  C49694) /
                                     C49756 -
                                 (ae * C50022 * C50001) / C49832))));
    const double C19400 = C50781 * C13847;
    const double C21634 = C50765 * C13847;
    const double C48208 = C50781 * C13847;
    const double C21714 = C50765 * C16576;
    const double C16282 = C6121 + C6120;
    const double C21525 = C16286 + C16285;
    const double C19120 = C19108 + C19109;
    const double C7088 = C477 * C1285;
    const double C7082 = C475 * C1285;
    const double C7076 = C5498 * C1285;
    const double C17236 = C977 * C1285;
    const double C17230 = C6115 * C1285;
    const double C22147 = C6416 * C1285;
    const double C7090 = C479 * C1286;
    const double C7084 = C477 * C1286;
    const double C7078 = C475 * C1286;
    const double C17238 = C979 * C1286;
    const double C17232 = C977 * C1286;
    const double C22149 = C6116 * C1286;
    const double C25693 = C25655 * C136;
    const double C25687 = C25655 * C125;
    const double C25677 = C25655 * C134;
    const double C25671 = C25655 * C124;
    const double C25669 = C25655 * C132;
    const double C25663 = C25655 * C123;
    const double C25881 = C25655 * C297;
    const double C25875 = C25655 * C288;
    const double C25865 = C25655 * C295;
    const double C25859 = C25655 * C286;
    const double C26063 = C25655 * C445;
    const double C26057 = C25655 * C436;
    const double C26047 = C25655 * C443;
    const double C26041 = C25655 * C434;
    const double C26233 = C25655 * C595;
    const double C26227 = C25655 * C588;
    const double C26641 = C25655 * C952;
    const double C26635 = C25655 * C945;
    const double C27389 = C25655 * C822;
    const double C27383 = C25655 * C812;
    const double C44648 = C25655 * C441;
    const double C44642 = C25655 * C435;
    const double C45068 = C25655 * C833;
    const double C45062 = C25655 * C818;
    const double C45056 = C25655 * C820;
    const double C45050 = C25655 * C811;
    const double C45242 = C25655 * C944;
    const double C45236 = C25655 * C950;
    const double C45402 = C25655 * C1090;
    const double C45396 = C25655 * C1083;
    const double C45518 = C25655 * C1176;
    const double C45512 = C25655 * C1169;
    const double C25691 = C25656 * C299;
    const double C25685 = C25656 * C289;
    const double C25679 = C25656 * C297;
    const double C25673 = C25656 * C288;
    const double C25667 = C25656 * C295;
    const double C25661 = C25656 * C286;
    const double C25879 = C25656 * C597;
    const double C25873 = C25656 * C589;
    const double C25867 = C25656 * C595;
    const double C25861 = C25656 * C588;
    const double C26061 = C25656 * C824;
    const double C26055 = C25656 * C813;
    const double C26049 = C25656 * C822;
    const double C26043 = C25656 * C812;
    const double C26231 = C25656 * C705;
    const double C26225 = C25656 * C699;
    const double C26639 = C25656 * C1088;
    const double C26633 = C25656 * C1082;
    const double C27387 = C25656 * C831;
    const double C27381 = C25656 * C817;
    const double C44650 = C25656 * C820;
    const double C44644 = C25656 * C811;
    const double C45070 = C25656 * C3160;
    const double C45064 = C25656 * C3155;
    const double C45058 = C25656 * C833;
    const double C45052 = C25656 * C818;
    const double C45240 = C25656 * C1083;
    const double C45234 = C25656 * C1090;
    const double C45404 = C25656 * C3488;
    const double C45398 = C25656 * C3483;
    const double C45520 = C25656 * C3598;
    const double C45514 = C25656 * C3593;
    const double C47928 = C29664 * C49713;
    const double C49190 = C29664 * C1392;
    const double C47930 = C47926 * C49720;
    const double C48081 = C47926 * C696;
    const double C49188 = C47926 * C1391;
    const double C47931 = C47927 * C50884;
    const double C48082 = C47927 * C50607;
    const double C49189 = C47927 * C1386;
    const double C48098 = C48091 * C50607;
    const double C48099 = C48092 * C696;
    const double C48209 = C48199 * C50607;
    const double C48210 = C48200 * C696;
    const double C140 =
        4 * ((-2 * C49976) / C49694 - (C49821 * C49981) / C49694 -
             (C50248 * ce) / C49694) +
        C49821 * ((-3 * C49981) / C49694 + C49821 * C49990 -
                  (C50253 * ce) / C49694) -
        ((3 * C50248 + C49821 * C50253) * ce) / C49694;
    const double C301 = C49824 * ((-3 * C49981) / C49694 + C49821 * C49990 -
                                  (C50253 * ce) / C49694);
    const double C449 = C50022 * ((-3 * C49981) / C49694 + C49821 * C49990 -
                                  (C50253 * ce) / C49694);
    const double C599 = (-2 * C49976) / C49694 - (C49821 * C49981) / C49694 -
                        (C50248 * ce) / C49694 + C49990 * C50049;
    const double C826 = C50022 * C49824 * C49990;
    const double C956 = (-2 * C49976) / C49694 - (C49821 * C49981) / C49694 -
                        (C50248 * ce) / C49694 + C49990 * C50036;
    const double C50014 = C49821 * C50013;
    const double C701 =
        2 * C49824 * C49990 + C49824 * (C49990 + C50013 * C50049);
    const double C827 = C50022 * (C49990 + C50013 * C50049);
    const double C1084 = C49824 * C49990 + C49824 * C50013 * C50036;
    const double C1170 =
        2 * C50022 * C49990 + C50022 * (C49990 + C50013 * C50036);
    const double C16283 = C6100 + C6099;
    const double C16453 = C6271 + C6270;
    const double C17583 = C7440 + C7439;
    const double C17594 = C17592 - C7437;
    const double C332 = C321 + C322;
    const double C2350 = C2328 + C2329;
    const double C2541 = C2528 + C2529;
    const double C8102 = C8082 + C8083;
    const double C22865 = C22843 + C22844;
    const double C23056 = C23043 + C23044;
    const double C480 = C469 + C470;
    const double C2725 = C2712 + C2713;
    const double C23240 = C23227 + C23228;
    const double C623 = C614 + C615;
    const double C2536 = C2518 + C2519;
    const double C2897 = C2888 + C2889;
    const double C8097 = C8072 + C8073;
    const double C8284 = C8270 + C8271;
    const double C23051 = C23033 + C23034;
    const double C23412 = C23403 + C23404;
    const double C25706 = C25681 + C25682;
    const double C1543 = C1534 + C1535;
    const double C2720 = C2702 + C2703;
    const double C4113 = C4104 + C4105;
    const double C8466 = C8452 + C8453;
    const double C23235 = C23217 + C23218;
    const double C24580 = C24571 + C24572;
    const double C980 = C971 + C972;
    const double C3335 = C3326 + C3327;
    const double C23826 = C23817 + C23818;
    const double C8629 = C8620 + C8621;
    const double C26238 = C26229 + C26230;
    const double C16471 = C16467 * C50607;
    const double C22048 = C16467 * C50612;
    const double C22521 = C16467 * C50612;
    const double C16585 = C16299 * C50607;
    const double C21529 = C16299 * C50612;
    const double C22385 = C16299 * C50612;
    const double C19111 = C19091 * C50612;
    const double C20395 = C19091 * C50612;
    const double C16462 = C6295 + C6294;
    const double C47929 = C29663 * C50612;
    const double C49191 = C29663 * C50612;
    const double C16578 = C6413 + C6412;
    const double C22387 = C22386 - C17587;
    const double C149 =
        5 * (3 * C49890 - (C49887 * ce) / C49832 + C49821 * C49927) -
        ((4 * C49887 + C49821 * C49924) * ce) / C49832 +
        C49821 *
            (4 * C49927 - (C49924 * ce) / C49832 +
             C49821 *
                 (3 * C49925 - (C49920 * ce) / C49832 +
                  C49821 *
                      (2 * C49921 - (C49915 * ce) / C49832 +
                       C49821 * ((-(C49821 * C49909 * ce) / C49694) / C49756 -
                                 C49908 / C49832 +
                                 C49821 * ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49694) /
                                               C49756 -
                                           (C49909 * ce) / C49832)))));
    const double C308 =
        (((-3 * (C49821 * C49946 + C49936 + C49940 * ce)) / C49694 +
          C49821 * ((-2 * C49946) / C49694 -
                    (C49821 * (C49821 * (C49821 * C49866 * C49867 * C49931 +
                                         C49941 * ce) +
                               C49942 + C49821 * C49941 * ce)) /
                        C49694 -
                    (C49945 * ce) / C49694) -
          ((2 * C49940 + C49821 * C49945) * ce) / C49694) *
         ae) /
            C49756 +
        C49824 * (3 * C49890 - (C49887 * ce) / C49832 + C49821 * C49927);
    const double C309 =
        ((4 * ((-2 * C49946) / C49694 - (C49821 * C49963) / C49694 -
               (C49945 * ce) / C49694) +
          C49821 * ((-3 * C49963) / C49694 +
                    C49821 * ((-2 * C49958) / C49694 -
                              (C49821 *
                               (C49821 * (C49821 * C49896 * C49897 * C49931 +
                                          C49951 * ce) +
                                C49952 + C49821 * C49951 * ce)) /
                                  C49694 -
                              (C49957 * ce) / C49694) -
                    (C49961 * ce) / C49694) -
          ((3 * C49945 + C49821 * C49961) * ce) / C49694) *
         ae) /
            C49756 +
        C49824 *
            (4 * C49927 - (C49924 * ce) / C49832 +
             C49821 *
                 (3 * C49925 - (C49920 * ce) / C49832 +
                  C49821 *
                      (2 * C49921 - (C49915 * ce) / C49832 +
                       C49821 * ((-(C49821 * C49909 * ce) / C49694) / C49756 -
                                 C49908 / C49832 +
                                 C49821 * ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49694) /
                                               C49756 -
                                           (C49909 * ce) / C49832)))));
    const double C456 =
        (zP - zQ) * (3 * C49890 - (C49887 * ce) / C49832 + C49821 * C49927);
    const double C457 =
        (zP - zQ) *
        (4 * C49927 - (C49924 * ce) / C49832 +
         C49821 *
             (3 * C49925 - (C49920 * ce) / C49832 +
              C49821 * (2 * C49921 - (C49915 * ce) / C49832 +
                        C49821 * ((-(C49821 * C49909 * ce) / C49694) / C49756 -
                                  C49908 / C49832 +
                                  C49821 * ((-(C49821 * std::pow(C49826, 8) *
                                               bs[8] * C49837) /
                                             C49694) /
                                                C49756 -
                                            (C49909 * ce) / C49832)))));
    const double C605 = 2 * C49862 - (C49859 * ce) / C49832 + C49821 * C49890 +
                        (C49824 * C49990 * ae) / C49756 +
                        C49824 * ((C49990 * ae) / C49756 + C49824 * C49927);
    const double C709 =
        2 * ((C49990 * ae) / C49756 + C49824 * C49927) +
        ((C49990 + C50013 * std::pow(C49824, 2)) * ae) / C49756 +
        C49824 *
            (C49927 + (C49824 * C50013 * ae) / C49756 +
             C49824 *
                 ((C50013 * ae) / C49756 +
                  C49824 *
                      (2 * C49921 - (C49915 * ce) / C49832 +
                       C49821 * ((-(C49821 * C49909 * ce) / C49694) / C49756 -
                                 C49908 / C49832 +
                                 C49821 * ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49694) /
                                               C49756 -
                                           (C49909 * ce) / C49832)))));
    const double C838 =
        (C50022 * C49990 * ae) / C49756 + C49824 * C50022 * C49927;
    const double C839 =
        C50022 * C49927 + (C50022 * C49824 * C50013 * ae) / C49756 +
        C49824 * ((C50022 * C50013 * ae) / C49756 +
                  C49824 * C50022 *
                      (2 * C49921 - (C49915 * ce) / C49832 +
                       C49821 * ((-(C49821 * C49909 * ce) / C49694) / C49756 -
                                 C49908 / C49832 +
                                 C49821 * ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49694) /
                                               C49756 -
                                           (C49909 * ce) / C49832))));
    const double C962 = 2 * C49862 - (C49859 * ce) / C49832 + C49821 * C49890 +
                        C49927 * std::pow(C50022, 2);
    const double C963 =
        3 * C49890 - (C49887 * ce) / C49832 + C49821 * C49927 +
        (3 * C49925 - (C49920 * ce) / C49832 +
         C49821 *
             (2 * C49921 - (C49915 * ce) / C49832 +
              C49821 *
                  ((-(C49821 * C49909 * ce) / C49694) / C49756 -
                   C49908 / C49832 +
                   C49821 * ((-(C49821 * std::pow(C49826, 8) * bs[8] * C49837) /
                              C49694) /
                                 C49756 -
                             (C49909 * ce) / C49832)))) *
            std::pow(C50022, 2);
    const double C1092 =
        ((C49990 + C50013 * C50036) * ae) / C49756 +
        C49824 *
            (C49927 +
             (2 * C49921 - (C49915 * ce) / C49832 +
              C49821 *
                  ((-(C49821 * C49909 * ce) / C49694) / C49756 -
                   C49908 / C49832 +
                   C49821 * ((-(C49821 * std::pow(C49826, 8) * bs[8] * C49837) /
                              C49694) /
                                 C49756 -
                             (C49909 * ce) / C49832))) *
                 C50036);
    const double C1178 =
        2 * C50022 * C49927 +
        C50022 *
            (C49927 +
             (2 * C49921 - (C49915 * ce) / C49832 +
              C49821 *
                  ((-(C49821 * C49909 * ce) / C49694) / C49756 -
                   C49908 / C49832 +
                   C49821 * ((-(C49821 * std::pow(C49826, 8) * bs[8] * C49837) /
                              C49694) /
                                 C49756 -
                             (C49909 * ce) / C49832))) *
                 C50036);
    const double C3004 =
        3 * (C49890 - (ae * C50046) / C49832 + C49824 * C50052) +
        (((-2 * C50046) / C49694 - (C49824 * C50053) / C49694) * ae) / C49756 +
        C49824 *
            (2 * C50052 - (ae * C50053) / C49832 +
             C49824 *
                 (C49925 - (ae * C49824 * C50009) / C49832 +
                  C49824 *
                      (C49824 * ((-(C49821 * C49909 * ce) / C49694) / C49756 -
                                 C49908 / C49832 +
                                 C49821 * ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49694) /
                                               C49756 -
                                           (C49909 * ce) / C49832)) -
                       (ae * C50009) / C49832)));
    const double C2896 = C2886 + C2887;
    const double C8283 = C8268 + C8269;
    const double C23411 = C23401 + C23402;
    const double C25892 = C25877 + C25878;
    const double C4112 = C4102 + C4103;
    const double C5659 = C5654 + C5655;
    const double C8465 = C8450 + C8451;
    const double C24579 = C24569 + C24570;
    const double C26074 = C26059 + C26060;
    const double C3334 = C3324 + C3325;
    const double C6291 = C6284 + C6285;
    const double C23825 = C23815 + C23816;
    const double C6119 = C6112 + C6113;
    const double C8735 =
        4 * (2 * C50061 - (ae * C50060) / C49832 + C49824 * C50104) +
        (((-3 * C50060) / C49694 + C49824 * C50105) * ae) / C49756 +
        C49824 *
            (3 * C50104 + (C50105 * ae) / C49756 +
             C49824 *
                 (2 * C50098 - (ae * C50096) / C49832 +
                  C49824 *
                      (C49921 - (ae * C49824 * C50006) / C49832 +
                       C49824 * (C49824 * ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49694) /
                                               C49756 -
                                           (C49909 * ce) / C49832) -
                                 (ae * C50006) / C49832))));
    const double C11229 =
        5 * (3 * C50128 + (C50125 * ae) / C49756 + C49824 * C50189) +
        ((4 * C50125 + C49824 * C50187) * ae) / C49756 +
        C49824 *
            (4 * C50189 + (C50187 * ae) / C49756 +
             C49824 *
                 (3 * C50186 + (C50182 * ae) / C49756 +
                  C49824 *
                      (2 * C50181 - (ae * C50171) / C49832 +
                       C49824 * ((-(ae * C49824 * C50001) / C49694) / C49756 -
                                 C49908 / C49832 +
                                 C49824 * ((-(C49824 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49694) /
                                               C49756 -
                                           (ae * C50001) / C49832)))));
    const double C19406 = C19399 + C19400;
    const double C21637 = C21633 + C21634;
    const double C48214 = C48207 + C48208;
    const double C21716 = C21713 + C21714;
    const double C16296 = C16282 - C6092;
    const double C21530 = C21525 - C16284;
    const double C19121 = C19120 - C19110;
    const double C25712 = C25693 + C25694;
    const double C25709 = C25687 + C25688;
    const double C25704 = C25677 + C25678;
    const double C25701 = C25671 + C25672;
    const double C25700 = C25669 + C25670;
    const double C25697 = C25663 + C25664;
    const double C25894 = C25881 + C25882;
    const double C25891 = C25875 + C25876;
    const double C25886 = C25865 + C25866;
    const double C25883 = C25859 + C25860;
    const double C26076 = C26063 + C26064;
    const double C26073 = C26057 + C26058;
    const double C26068 = C26047 + C26048;
    const double C26065 = C26041 + C26042;
    const double C26240 = C26233 + C26234;
    const double C26237 = C26227 + C26228;
    const double C26648 = C26641 + C26642;
    const double C26645 = C26635 + C26636;
    const double C27396 = C27389 + C27390;
    const double C27393 = C27383 + C27384;
    const double C44657 = C44648 + C44649;
    const double C44654 = C44642 + C44643;
    const double C45083 = C45068 + C45069;
    const double C45080 = C45062 + C45063;
    const double C45077 = C45056 + C45057;
    const double C45074 = C45050 + C45051;
    const double C45249 = C45242 + C45243;
    const double C45246 = C45236 + C45237;
    const double C45411 = C45402 + C45403;
    const double C45408 = C45396 + C45397;
    const double C45527 = C45518 + C45519;
    const double C45524 = C45512 + C45513;
    const double C25711 = C25691 + C25692;
    const double C25708 = C25685 + C25686;
    const double C25705 = C25679 + C25680;
    const double C25702 = C25673 + C25674;
    const double C25699 = C25667 + C25668;
    const double C25696 = C25661 + C25662;
    const double C25893 = C25879 + C25880;
    const double C25890 = C25873 + C25874;
    const double C25887 = C25867 + C25868;
    const double C25884 = C25861 + C25862;
    const double C26075 = C26061 + C26062;
    const double C26072 = C26055 + C26056;
    const double C26069 = C26049 + C26050;
    const double C26066 = C26043 + C26044;
    const double C26239 = C26231 + C26232;
    const double C26236 = C26225 + C26226;
    const double C26647 = C26639 + C26640;
    const double C26644 = C26633 + C26634;
    const double C27395 = C27387 + C27388;
    const double C27392 = C27381 + C27382;
    const double C44658 = C44650 + C44651;
    const double C44655 = C44644 + C44645;
    const double C45084 = C45070 + C45071;
    const double C45081 = C45064 + C45065;
    const double C45078 = C45058 + C45059;
    const double C45075 = C45052 + C45053;
    const double C45248 = C45240 + C45241;
    const double C45245 = C45234 + C45235;
    const double C45412 = C45404 + C45405;
    const double C45409 = C45398 + C45399;
    const double C45528 = C45520 + C45521;
    const double C45525 = C45514 + C45515;
    const double C47932 = C47930 + C47931;
    const double C48093 = C48081 + C48082;
    const double C49192 = C49188 + C49189;
    const double C48100 = C48098 + C48099;
    const double C48215 = C48209 + C48210;
    const double C169 = C117 * C140;
    const double C325 = C117 * C301;
    const double C2336 = C2306 * C301;
    const double C22851 = C22821 * C301;
    const double C473 = C117 * C449;
    const double C618 = C117 * C599;
    const double C2526 = C2306 * C599;
    const double C8080 = C8048 * C599;
    const double C23041 = C22821 * C599;
    const double C25689 = C25657 * C599;
    const double C1538 = C117 * C826;
    const double C2710 = C2306 * C826;
    const double C23225 = C22821 * C826;
    const double C975 = C117 * C956;
    const double C50015 = C49999 + C50014;
    const double C16297 = C16283 - C6098;
    const double C17593 = C17583 - C7438;
    const double C2359 = C2350 + C2351;
    const double C22874 = C22865 + C22866;
    const double C5495 = C480 * C279;
    const double C5491 = C480 * C280;
    const double C6091 = C480 * C50612;
    const double C6917 = C480 * C50612;
    const double C7091 = C480 * C50926;
    const double C7087 = C480 * C1282;
    const double C2543 = C2536 + C2537;
    const double C23058 = C23051 + C23052;
    const double C5917 = C1543 * C50607;
    const double C6927 = C1543 * C1386;
    const double C6925 = C1543 * C50612;
    const double C7649 = C1543 * C50884;
    const double C7647 = C1543 * C50612;
    const double C2727 = C2720 + C2721;
    const double C35134 = C2721 + C2720;
    const double C23242 = C23235 + C23236;
    const double C28898 = C23236 + C23235;
    const double C6103 = C980 * C50884;
    const double C6101 = C980 * C50612;
    const double C6268 = C980 * C50607;
    const double C7443 = C980 * C1386;
    const double C7441 = C980 * C50612;
    const double C15727 = C980 * C279;
    const double C15723 = C980 * C280;
    const double C17239 = C980 * C50926;
    const double C17235 = C980 * C1282;
    const double C20398 = C20397 - C20395;
    const double C326 = C50765 * C308;
    const double C2337 = C50781 * C308;
    const double C22852 = C50781 * C308;
    const double C474 = C50765 * C456;
    const double C619 = C50765 * C605;
    const double C2527 = C50781 * C605;
    const double C8081 = C8043 * C605;
    const double C23042 = C50781 * C605;
    const double C25690 = C25652 * C605;
    const double C1539 = C50765 * C838;
    const double C2711 = C50781 * C838;
    const double C23226 = C50781 * C838;
    const double C976 = C50765 * C962;
    const double C5925 = C5659 * C50607;
    const double C6297 = C6291 * C50607;
    const double C17083 = C6291 * C50612;
    const double C17797 = C6291 * C50612;
    const double C6415 = C6119 * C50607;
    const double C16291 = C6119 * C50612;
    const double C17591 = C6119 * C50612;
    const double C21156 = C6119 * C280;
    const double C22152 = C6119 * C1282;
    const double C21639 = C21637 * C50607;
    const double C21718 = C21716 * C50607;
    const double C16300 = C16296 - C6097;
    const double C21531 = C21530 - C16287;
    const double C19122 = C19121 - C19111;
    const double C47933 = C47932 - C47928;
    const double C49193 = C49192 - C49190;
    const double C180 = C169 + C170;
    const double C50016 = C50015 - C50004;
    const double C16301 = C16297 - C6101;
    const double C17595 = C17593 - C7441;
    const double C334 = C325 + C326;
    const double C2354 = C2336 + C2337;
    const double C22869 = C22851 + C22852;
    const double C482 = C473 + C474;
    const double C625 = C618 + C619;
    const double C2540 = C2526 + C2527;
    const double C8101 = C8080 + C8081;
    const double C23055 = C23041 + C23042;
    const double C25710 = C25689 + C25690;
    const double C1545 = C1538 + C1539;
    const double C2724 = C2710 + C2711;
    const double C23239 = C23225 + C23226;
    const double C982 = C975 + C976;
    const double C47934 = C47933 - C47929;
    const double C49194 = C49193 - C49191;
    const double C606 =
        3 * C49890 - (C49887 * ce) / C49832 + C49821 * C49927 +
        (C49824 * C50016 * ae) / C49756 +
        C49824 *
            ((C50016 * ae) / C49756 +
             C49824 *
                 (3 * C49925 - (C49920 * ce) / C49832 +
                  C49821 *
                      (2 * C49921 - (C49915 * ce) / C49832 +
                       C49821 * ((-(C49821 * C49909 * ce) / C49694) / C49756 -
                                 C49908 / C49832 +
                                 C49821 * ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49694) /
                                               C49756 -
                                           (C49909 * ce) / C49832)))));
    const double C1526 =
        (C50022 * C50016 * ae) / C49756 +
        C49824 * C50022 *
            (3 * C49925 - (C49920 * ce) / C49832 +
             C49821 * (2 * C49921 - (C49915 * ce) / C49832 +
                       C49821 * ((-(C49821 * C49909 * ce) / C49694) / C49756 -
                                 C49908 / C49832 +
                                 C49821 * ((-(C49821 * std::pow(C49826, 8) *
                                              bs[8] * C49837) /
                                            C49694) /
                                               C49756 -
                                           (C49909 * ce) / C49832))));
    const double C142 =
        5 * ((-3 * C49981) / C49694 + C49821 * C49990 -
             (C50253 * ce) / C49694) +
        C49821 * (4 * C49990 + C49821 * C50016 - (C50258 * ce) / C49694) -
        ((4 * C50253 + C49821 * C50258) * ce) / C49694;
    const double C303 =
        C49824 * (4 * C49990 + C49821 * C50016 - (C50258 * ce) / C49694);
    const double C451 =
        C50022 * (4 * C49990 + C49821 * C50016 - (C50258 * ce) / C49694);
    const double C601 = (-3 * C49981) / C49694 + C49821 * C49990 -
                        (C50253 * ce) / C49694 + C50016 * C50049;
    const double C958 = (-3 * C49981) / C49694 + C49821 * C49990 -
                        (C50253 * ce) / C49694 + C50016 * C50036;
    const double C1525 = C50022 * C49824 * C50016;
    const double C5497 = C482 * C280;
    const double C7093 = C482 * C1282;
    const double C6929 = C1545 * C50612;
    const double C7651 = C1545 * C50612;
    const double C6105 = C982 * C50612;
    const double C7445 = C982 * C50612;
    const double C15729 = C982 * C280;
    const double C17241 = C982 * C1282;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C1285 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C50942 -
            (C22855 + C22856) * C1286 - (C22857 + C22858) * C50926 +
            C22871 * C1287 + C22872 * C1282) *
               C50795 * C50943 +
           ((C22856 + C22855) * C1285 + (C22858 + C22857) * C50942 -
            (C22860 + C22859) * C1286 - (C22862 + C22861) * C50926 +
            (C22864 + C22863) * C1287 + (C22866 + C22865) * C1282) *
               C50795 * C50929 +
           (C22871 * C1285 + C22872 * C50942 - C22873 * C1286 -
            C22874 * C50926 + (C22868 + C22867) * C1287 +
            (C22870 + C22869) * C1282) *
               C50795 * C22819) *
              C50696 * C1283 +
          (((C23045 + C23046) * C1286 -
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50942 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C1285) +
            (C23047 + C23048) * C50926 - C23057 * C1287 - C23058 * C1282) *
               C50795 * C50943 +
           ((C23050 + C23049) * C1286 -
            ((C23048 + C23047) * C50942 + (C23046 + C23045) * C1285) +
            (C23052 + C23051) * C50926 - (C23053 + C23054) * C1287 -
            (C23055 + C23056) * C1282) *
               C50795 * C50929 +
           ((C23054 + C23053) * C1286 - (C23058 * C50942 + C23057 * C1285) +
            (C23056 + C23055) * C50926 -
            (C22821 * C591 + C50781 * C600 + C22820 * C290 + C22815 * C300) *
                C1287 -
            (C22821 * C601 + C50781 * C606 + C22820 * C301 + C22815 * C308) *
                C1282) *
               C50795 * C22819) *
              C50696 * C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C1391 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C1386 -
            (C22855 + C22856) * C1392 - (C22857 + C22858) * C50612) *
               C50795 * C50943 +
           ((C22856 + C22855) * C1391 + (C22858 + C22857) * C1386 -
            (C22860 + C22859) * C1392 - (C22862 + C22861) * C50612) *
               C50795 * C50929 +
           (C22871 * C1391 + C22872 * C1386 - C22873 * C1392 -
            C22874 * C50612) *
               C50795 * C22819) *
              C50696 * C50944 +
          (((C23045 + C23046) * C1392 -
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C1386 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C1391) +
            (C23047 + C23048) * C50612) *
               C50795 * C50943 +
           ((C23050 + C23049) * C1392 -
            ((C23048 + C23047) * C1386 + (C23046 + C23045) * C1391) +
            (C23052 + C23051) * C50612) *
               C50795 * C50929 +
           ((C23054 + C23053) * C1392 - (C23058 * C1386 + C23057 * C1391) +
            (C23056 + C23055) * C50612) *
               C50795 * C22819) *
              C50696 * C50932 +
          (((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                C1391 +
            (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                C1386 -
            (C23405 + C23406) * C1392 - (C23407 + C23408) * C50612) *
               C50795 * C50943 +
           ((C23406 + C23405) * C1391 + (C23408 + C23407) * C1386 -
            (C23409 + C23410) * C1392 - (C23411 + C23412) * C50612) *
               C50795 * C50929 +
           ((C23410 + C23409) * C1391 + (C23412 + C23411) * C1386 -
            (C22821 * C697 + C50781 * C702 + C22820 * C590 + C22815 * C598) *
                C1392 -
            (C22821 * C701 + C50781 * C709 + C22820 * C599 + C22815 * C605) *
                C50612) *
               C50795 * C22819) *
              C50696 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C1391 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C1386 -
             (C22855 + C22856) * C1392 - (C22857 + C22858) * C50612) *
                C50795 * C50943 +
            ((C22856 + C22855) * C1391 + (C22858 + C22857) * C1386 -
             (C22860 + C22859) * C1392 - (C22862 + C22861) * C50612) *
                C50795 * C50929 +
            (C22871 * C1391 + C22872 * C1386 - C22873 * C1392 -
             C22874 * C50612) *
                C50795 * C22819) *
               C50900 +
           (((C23229 + C23230) * C1392 -
             ((C22821 * C820 + C50781 * C835 + C22820 * C441 + C22815 * C452) *
                  C1386 +
              (C22821 * C811 + C50781 * C819 + C22820 * C435 + C22815 * C442) *
                  C1391) +
             (C23231 + C23232) * C50612) *
                C50795 * C50943 +
            ((C23234 + C23233) * C1392 -
             ((C23232 + C23231) * C1386 + (C23230 + C23229) * C1391) +
             (C23236 + C23235) * C50612) *
                C50795 * C50929 +
            ((C23238 + C23237) * C1392 - (C23242 * C1386 + C23241 * C1391) +
             (C23240 + C23239) * C50612) *
                C50795 * C22819) *
               C50708) *
              C1283 +
          ((((C23045 + C23046) * C1392 -
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C1386 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C1391) +
             (C23047 + C23048) * C50612) *
                C50795 * C50943 +
            ((C23050 + C23049) * C1392 -
             ((C23048 + C23047) * C1386 + (C23046 + C23045) * C1391) +
             (C23052 + C23051) * C50612) *
                C50795 * C50929 +
            ((C23054 + C23053) * C1392 - (C23058 * C1386 + C23057 * C1391) +
             (C23056 + C23055) * C50612) *
                C50795 * C22819) *
               C50900 +
           (((C22820 * C811 + C22815 * C819 + C22821 * C818 + C50781 * C834) *
                 C1391 +
             (C22820 * C820 + C22815 * C835 + C22821 * C833 + C50781 * C842) *
                 C1386 -
             (C24573 + C24574) * C1392 - (C24575 + C24576) * C50612) *
                C50795 * C50943 +
            ((C24574 + C24573) * C1391 + (C24576 + C24575) * C1386 -
             (C24577 + C24578) * C1392 - (C24579 + C24580) * C50612) *
                C50795 * C50929 +
            ((C24578 + C24577) * C1391 + (C24580 + C24579) * C1386 -
             (C22821 * C815 + C50781 * C828 + C22820 * C814 + C22815 * C825) *
                 C1392 -
             (C22821 * C827 + C50781 * C839 + C22820 * C826 + C22815 * C838) *
                 C50612) *
                C50795 * C22819) *
               C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C49720 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50884 -
             (C22855 + C22856) * C49713 - (C22857 + C22858) * C50612) *
                C50795 * C50943 +
            ((C22856 + C22855) * C49720 + (C22858 + C22857) * C50884 -
             (C22860 + C22859) * C49713 - (C22862 + C22861) * C50612) *
                C50795 * C50929 +
            (C22871 * C49720 + C22872 * C50884 - C22873 * C49713 -
             C22874 * C50612) *
                C50795 * C22819) *
               C1643 +
           (((C23229 + C23230) * C49713 -
             ((C22821 * C820 + C50781 * C835 + C22820 * C441 + C22815 * C452) *
                  C50884 +
              (C22821 * C811 + C50781 * C819 + C22820 * C435 + C22815 * C442) *
                  C49720) +
             (C23231 + C23232) * C50612) *
                C50795 * C50943 +
            ((C23234 + C23233) * C49713 -
             ((C23232 + C23231) * C50884 + (C23230 + C23229) * C49720) +
             (C23236 + C23235) * C50612) *
                C50795 * C50929 +
            ((C23238 + C23237) * C49713 - (C23242 * C50884 + C23241 * C49720) +
             (C23240 + C23239) * C50612) *
                C50795 * C22819) *
               C50708) *
              C1283 +
          ((((C23045 + C23046) * C49713 -
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C50884 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C49720) +
             (C23047 + C23048) * C50612) *
                C50795 * C50943 +
            ((C23050 + C23049) * C49713 -
             ((C23048 + C23047) * C50884 + (C23046 + C23045) * C49720) +
             (C23052 + C23051) * C50612) *
                C50795 * C50929 +
            ((C23054 + C23053) * C49713 - (C23058 * C50884 + C23057 * C49720) +
             (C23056 + C23055) * C50612) *
                C50795 * C22819) *
               C1643 +
           (((C22820 * C811 + C22815 * C819 + C22821 * C818 + C50781 * C834) *
                 C49720 +
             (C22820 * C820 + C22815 * C835 + C22821 * C833 + C50781 * C842) *
                 C50884 -
             (C24573 + C24574) * C49713 - (C24575 + C24576) * C50612) *
                C50795 * C50943 +
            ((C24574 + C24573) * C49720 + (C24576 + C24575) * C50884 -
             (C24577 + C24578) * C49713 - (C24579 + C24580) * C50612) *
                C50795 * C50929 +
            ((C24578 + C24577) * C49720 + (C24580 + C24579) * C50884 -
             (C22821 * C815 + C50781 * C828 + C22820 * C814 + C22815 * C825) *
                 C49713 -
             (C22821 * C827 + C50781 * C839 + C22820 * C826 + C22815 * C838) *
                 C50612) *
                C50795 * C22819) *
               C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C696 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50607) *
                C50795 * C50943 +
            ((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C50795 *
                C50929 +
            (C22871 * C696 + C22872 * C50607) * C50795 * C22819) *
               C1643 -
           ((C23242 * C50607 + C23241 * C696) * C50795 * C22819 +
            ((C23232 + C23231) * C50607 + (C23230 + C23229) * C696) * C50795 *
                C50929 +
            ((C22821 * C820 + C50781 * C835 + C22820 * C441 + C22815 * C452) *
                 C50607 +
             (C22821 * C811 + C50781 * C819 + C22820 * C435 + C22815 * C442) *
                 C696) *
                C50795 * C50943) *
               C50708) *
              C50944 +
          ((((C22820 * C811 + C22815 * C819 + C22821 * C818 + C50781 * C834) *
                 C696 +
             (C22820 * C820 + C22815 * C835 + C22821 * C833 + C50781 * C842) *
                 C50607) *
                C50795 * C50943 +
            ((C24574 + C24573) * C696 + (C24576 + C24575) * C50607) * C50795 *
                C50929 +
            ((C24578 + C24577) * C696 + (C24580 + C24579) * C50607) * C50795 *
                C22819) *
               C50708 -
           ((C23058 * C50607 + C23057 * C696) * C50795 * C22819 +
            ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C50795 *
                C50929 +
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50607 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C696) *
                C50795 * C50943) *
               C1643) *
              C50932 +
          ((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                 C696 +
             (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                 C50607) *
                C50795 * C50943 +
            ((C23406 + C23405) * C696 + (C23408 + C23407) * C50607) * C50795 *
                C50929 +
            ((C23410 + C23409) * C696 + (C23412 + C23411) * C50607) * C50795 *
                C22819) *
               C1643 -
           (((C22821 * C3156 + C50781 * C3162 + C22820 * C829 + C22815 * C840) *
                 C50607 +
             (C22821 * C3153 + C50781 * C3157 + C22820 * C816 + C22815 * C830) *
                 C696) *
                C50795 * C22819 +
            ((C22821 * C3158 + C50781 * C3163 + C22820 * C831 + C22815 * C841) *
                 C50607 +
             (C22821 * C3154 + C50781 * C3159 + C22820 * C817 + C22815 * C832) *
                 C696) *
                C50795 * C50929 +
            ((C22821 * C3160 + C50781 * C3164 + C22820 * C833 + C22815 * C842) *
                 C50607 +
             (C22821 * C3155 + C50781 * C3161 + C22820 * C818 + C22815 * C834) *
                 C696) *
                C50795 * C50943) *
               C50708) *
              C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C696 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50607) *
                C50795 * C50943 +
            ((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C50795 *
                C50929 +
            (C22871 * C696 + C22872 * C50607) * C50795 * C22819) *
               C50945 -
           ((C23242 * C50607 + C23241 * C696) * C50795 * C22819 +
            ((C23232 + C23231) * C50607 + (C23230 + C23229) * C696) * C50795 *
                C50929 +
            ((C22821 * C820 + C50781 * C835 + C22820 * C441 + C22815 * C452) *
                 C50607 +
             (C22821 * C811 + C50781 * C819 + C22820 * C435 + C22815 * C442) *
                 C696) *
                C50795 * C50943) *
               C50935 +
           (((C22820 * C944 + C22815 * C949 + C22821 * C1083 + C50781 * C1091) *
                 C696 +
             (C22820 * C950 + C22815 * C959 + C22821 * C1090 + C50781 * C1095) *
                 C50607) *
                C50795 * C50943 +
            ((C23820 + C23819) * C696 + (C23822 + C23821) * C50607) * C50795 *
                C50929 +
            ((C23824 + C23823) * C696 + (C23826 + C23825) * C50607) * C50795 *
                C22819) *
               C1875) *
              C1283 +
          ((((C22820 * C811 + C22815 * C819 + C22821 * C818 + C50781 * C834) *
                 C696 +
             (C22820 * C820 + C22815 * C835 + C22821 * C833 + C50781 * C842) *
                 C50607) *
                C50795 * C50943 +
            ((C24574 + C24573) * C696 + (C24576 + C24575) * C50607) * C50795 *
                C50929 +
            ((C24578 + C24577) * C696 + (C24580 + C24579) * C50607) * C50795 *
                C22819) *
               C50935 -
           ((C23058 * C50607 + C23057 * C696) * C50795 * C22819 +
            ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C50795 *
                C50929 +
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50607 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C696) *
                C50795 * C50943) *
               C50945 -
           (((C22821 * C3484 + C50781 * C3490 + C22820 * C1086 +
              C22815 * C1093) *
                 C50607 +
             (C22821 * C3481 + C50781 * C3485 + C22820 * C1081 +
              C22815 * C1087) *
                 C696) *
                C50795 * C22819 +
            ((C22821 * C3486 + C50781 * C3491 + C22820 * C1088 +
              C22815 * C1094) *
                 C50607 +
             (C22821 * C3482 + C50781 * C3487 + C22820 * C1082 +
              C22815 * C1089) *
                 C696) *
                C50795 * C50929 +
            ((C22821 * C3488 + C50781 * C3492 + C22820 * C1090 +
              C22815 * C1095) *
                 C50607 +
             (C22821 * C3483 + C50781 * C3489 + C22820 * C1083 +
              C22815 * C1091) *
                 C696) *
                C50795 * C50943) *
               C1875) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C49720 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C50884 -
            (C22855 + C22856) * C49713 - (C22857 + C22858) * C50612) *
               C50795 * C50943 +
           ((C22856 + C22855) * C49720 + (C22858 + C22857) * C50884 -
            (C22860 + C22859) * C49713 - (C22862 + C22861) * C50612) *
               C50795 * C50929 +
           (C22871 * C49720 + C22872 * C50884 - C22873 * C49713 -
            C22874 * C50612) *
               C50795 * C22819) *
              C50696 * C582 +
          (((C23045 + C23046) * C49713 -
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50884 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C49720) +
            (C23047 + C23048) * C50612) *
               C50795 * C50943 +
           ((C23050 + C23049) * C49713 -
            ((C23048 + C23047) * C50884 + (C23046 + C23045) * C49720) +
            (C23052 + C23051) * C50612) *
               C50795 * C50929 +
           ((C23054 + C23053) * C49713 - (C23058 * C50884 + C23057 * C49720) +
            (C23056 + C23055) * C50612) *
               C50795 * C22819) *
              C50696 * C583 +
          (((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                C49720 +
            (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                C50884 -
            (C23405 + C23406) * C49713 - (C23407 + C23408) * C50612) *
               C50795 * C50943 +
           ((C23406 + C23405) * C49720 + (C23408 + C23407) * C50884 -
            (C23409 + C23410) * C49713 - (C23411 + C23412) * C50612) *
               C50795 * C50929 +
           ((C23410 + C23409) * C49720 + (C23412 + C23411) * C50884 -
            (C22821 * C697 + C50781 * C702 + C22820 * C590 + C22815 * C598) *
                C49713 -
            (C22821 * C701 + C50781 * C709 + C22820 * C599 + C22815 * C605) *
                C50612) *
               C50795 * C22819) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
               C118 +
           (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
               C106 -
           (C22855 + C22856) * C119 - (C22857 + C22858) * C107 + C22871 * C120 +
           C22872 * C108 - C22873 * C121 - C22874 * C109) *
              C50795 * C50943 +
          ((C22856 + C22855) * C118 + (C22858 + C22857) * C106 -
           (C22860 + C22859) * C119 - (C22862 + C22861) * C107 +
           (C22864 + C22863) * C120 + (C22866 + C22865) * C108 -
           (C22867 + C22868) * C121 - (C22869 + C22870) * C109) *
              C50795 * C50929 +
          (C22871 * C118 + C22872 * C106 - C22873 * C119 - C22874 * C107 +
           (C22868 + C22867) * C120 + (C22870 + C22869) * C108 -
           (C22821 * C291 + C50781 * C302 + C22820 * C127 + C22815 * C139) *
               C121 -
           (C22821 * C303 + C50781 * C309 + C22820 * C140 + C22815 * C148) *
               C109) *
              C50795 * C22819) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C49720 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C50884 -
            (C22855 + C22856) * C49713 - (C22857 + C22858) * C50612) *
               C50795 * C50943 +
           ((C22856 + C22855) * C49720 + (C22858 + C22857) * C50884 -
            (C22860 + C22859) * C49713 - (C22862 + C22861) * C50612) *
               C50795 * C50929 +
           (C22871 * C49720 + C22872 * C50884 - C22873 * C49713 -
            C22874 * C50612) *
               C50795 * C22819) *
              C941 +
          (((C23229 + C23230) * C49713 -
            ((C22821 * C820 + C50781 * C835 + C22820 * C441 + C22815 * C452) *
                 C50884 +
             (C22821 * C811 + C50781 * C819 + C22820 * C435 + C22815 * C442) *
                 C49720) +
            (C23231 + C23232) * C50612) *
               C50795 * C50943 +
           ((C23234 + C23233) * C49713 -
            ((C23232 + C23231) * C50884 + (C23230 + C23229) * C49720) +
            (C23236 + C23235) * C50612) *
               C50795 * C50929 +
           ((C23238 + C23237) * C49713 - (C23242 * C50884 + C23241 * C49720) +
            (C23240 + C23239) * C50612) *
               C50795 * C22819) *
              C942 +
          (((C22820 * C944 + C22815 * C949 + C22821 * C1083 + C50781 * C1091) *
                C49720 +
            (C22820 * C950 + C22815 * C959 + C22821 * C1090 + C50781 * C1095) *
                C50884 -
            (C23819 + C23820) * C49713 - (C23821 + C23822) * C50612) *
               C50795 * C50943 +
           ((C23820 + C23819) * C49720 + (C23822 + C23821) * C50884 -
            (C23823 + C23824) * C49713 - (C23825 + C23826) * C50612) *
               C50795 * C50929 +
           ((C23824 + C23823) * C49720 + (C23826 + C23825) * C50884 -
            (C22821 * C1080 + C50781 * C1085 + C22820 * C947 + C22815 * C955) *
                C49713 -
            (C22821 * C1084 + C50781 * C1092 + C22820 * C956 + C22815 * C962) *
                C50612) *
               C50795 * C22819) *
              C943) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C696 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C50607) *
               C50795 * C50943 +
           ((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C50795 *
               C50929 +
           (C22871 * C696 + C22872 * C50607) * C50795 * C22819) *
              C50696 * C692 -
          ((C23058 * C50607 + C23057 * C696) * C50795 * C22819 +
           ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C50795 *
               C50929 +
           ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                C50607 +
            (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                C696) *
               C50795 * C50943) *
              C50696 * C693 +
          (((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                C696 +
            (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                C50607) *
               C50795 * C50943 +
           ((C23406 + C23405) * C696 + (C23408 + C23407) * C50607) * C50795 *
               C50929 +
           ((C23410 + C23409) * C696 + (C23412 + C23411) * C50607) * C50795 *
               C22819) *
              C50696 * C694 -
          (((C22821 * C2998 + C50781 * C3004 + C22820 * C703 + C22815 * C710) *
                C50607 +
            (C22821 * C2995 + C50781 * C2999 + C22820 * C698 + C22815 * C704) *
                C696) *
               C50795 * C22819 +
           ((C22821 * C3000 + C50781 * C3005 + C22820 * C705 + C22815 * C711) *
                C50607 +
            (C22821 * C2996 + C50781 * C3001 + C22820 * C699 + C22815 * C706) *
                C696) *
               C50795 * C50929 +
           ((C22821 * C3002 + C50781 * C3006 + C22820 * C707 + C22815 * C712) *
                C50607 +
            (C22821 * C2997 + C50781 * C3003 + C22820 * C700 + C22815 * C708) *
                C696) *
               C50795 * C50943) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C283 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C278 -
            (C22855 + C22856) * C284 - (C22857 + C22858) * C279 +
            C22871 * C285 + C22872 * C280) *
               C50795 * C50943 +
           ((C22856 + C22855) * C283 + (C22858 + C22857) * C278 -
            (C22860 + C22859) * C284 - (C22862 + C22861) * C279 +
            (C22864 + C22863) * C285 + (C22866 + C22865) * C280) *
               C50795 * C50929 +
           (C22871 * C283 + C22872 * C278 - C22873 * C284 - C22874 * C279 +
            (C22868 + C22867) * C285 + (C22870 + C22869) * C280) *
               C50795 * C22819) *
              C50696 * C50899 +
          (((C23045 + C23046) * C284 -
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C278 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C283) +
            (C23047 + C23048) * C279 - C23057 * C285 - C23058 * C280) *
               C50795 * C50943 +
           ((C23050 + C23049) * C284 -
            ((C23048 + C23047) * C278 + (C23046 + C23045) * C283) +
            (C23052 + C23051) * C279 - (C23053 + C23054) * C285 -
            (C23055 + C23056) * C280) *
               C50795 * C50929 +
           ((C23054 + C23053) * C284 - (C23058 * C278 + C23057 * C283) +
            (C23056 + C23055) * C279 -
            (C22821 * C591 + C50781 * C600 + C22820 * C290 + C22815 * C300) *
                C285 -
            (C22821 * C601 + C50781 * C606 + C22820 * C301 + C22815 * C308) *
                C280) *
               C50795 * C22819) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C696 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50607) *
                C50795 * C50943 +
            ((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C50795 *
                C50929 +
            (C22871 * C696 + C22872 * C50607) * C50795 * C22819) *
               C941 -
           ((C23242 * C50607 + C23241 * C696) * C50795 * C22819 +
            ((C23232 + C23231) * C50607 + (C23230 + C23229) * C696) * C50795 *
                C50929 +
            ((C22821 * C820 + C50781 * C835 + C22820 * C441 + C22815 * C452) *
                 C50607 +
             (C22821 * C811 + C50781 * C819 + C22820 * C435 + C22815 * C442) *
                 C696) *
                C50795 * C50943) *
               C942 +
           (((C22820 * C944 + C22815 * C949 + C22821 * C1083 + C50781 * C1091) *
                 C696 +
             (C22820 * C950 + C22815 * C959 + C22821 * C1090 + C50781 * C1095) *
                 C50607) *
                C50795 * C50943 +
            ((C23820 + C23819) * C696 + (C23822 + C23821) * C50607) * C50795 *
                C50929 +
            ((C23824 + C23823) * C696 + (C23826 + C23825) * C50607) * C50795 *
                C22819) *
               C943) *
              C50899 +
          ((((C22820 * C811 + C22815 * C819 + C22821 * C818 + C50781 * C834) *
                 C696 +
             (C22820 * C820 + C22815 * C835 + C22821 * C833 + C50781 * C842) *
                 C50607) *
                C50795 * C50943 +
            ((C22820 * C812 + C22815 * C821 + C22821 * C817 + C50781 * C832) *
                 C696 +
             (C22820 * C822 + C22815 * C836 + C22821 * C831 + C50781 * C841) *
                 C50607) *
                C50795 * C50929 +
            ((C22820 * C813 + C22815 * C823 + C22821 * C816 + C50781 * C830) *
                 C696 +
             (C22820 * C824 + C22815 * C837 + C22821 * C829 + C50781 * C840) *
                 C50607) *
                C50795 * C22819) *
               C942 -
           ((C23058 * C50607 + C23057 * C696) * C50795 * C22819 +
            ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C50795 *
                C50929 +
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50607 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C696) *
                C50795 * C50943) *
               C941 -
           (((C22821 * C3484 + C50781 * C3490 + C22820 * C1086 +
              C22815 * C1093) *
                 C50607 +
             (C22821 * C3481 + C50781 * C3485 + C22820 * C1081 +
              C22815 * C1087) *
                 C696) *
                C50795 * C22819 +
            ((C22821 * C3486 + C50781 * C3491 + C22820 * C1088 +
              C22815 * C1094) *
                 C50607 +
             (C22821 * C3482 + C50781 * C3487 + C22820 * C1082 +
              C22815 * C1089) *
                 C696) *
                C50795 * C50929 +
            ((C22821 * C3488 + C50781 * C3492 + C22820 * C1090 +
              C22815 * C1095) *
                 C50607 +
             (C22821 * C3483 + C50781 * C3489 + C22820 * C1083 +
              C22815 * C1091) *
                 C696) *
                C50795 * C50943) *
               C943) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C696 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50607) *
                C50795 * C50943 +
            ((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C50795 *
                C50929 +
            (C22871 * C696 + C22872 * C50607) * C50795 * C22819) *
               C50900 -
           ((C23242 * C50607 + C23241 * C696) * C50795 * C22819 +
            ((C23232 + C23231) * C50607 + (C23230 + C23229) * C696) * C50795 *
                C50929 +
            ((C22821 * C820 + C50781 * C835 + C22820 * C441 + C22815 * C452) *
                 C50607 +
             (C22821 * C811 + C50781 * C819 + C22820 * C435 + C22815 * C442) *
                 C696) *
                C50795 * C50943) *
               C50708) *
              C582 +
          ((((C22820 * C811 + C22815 * C819 + C22821 * C818 + C50781 * C834) *
                 C696 +
             (C22820 * C820 + C22815 * C835 + C22821 * C833 + C50781 * C842) *
                 C50607) *
                C50795 * C50943 +
            ((C22820 * C812 + C22815 * C821 + C22821 * C817 + C50781 * C832) *
                 C696 +
             (C22820 * C822 + C22815 * C836 + C22821 * C831 + C50781 * C841) *
                 C50607) *
                C50795 * C50929 +
            ((C22820 * C813 + C22815 * C823 + C22821 * C816 + C50781 * C830) *
                 C696 +
             (C22820 * C824 + C22815 * C837 + C22821 * C829 + C50781 * C840) *
                 C50607) *
                C50795 * C22819) *
               C50708 -
           ((C23058 * C50607 + C23057 * C696) * C50795 * C22819 +
            ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C50795 *
                C50929 +
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50607 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C696) *
                C50795 * C50943) *
               C50900) *
              C583 +
          ((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                 C696 +
             (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                 C50607) *
                C50795 * C50943 +
            ((C23406 + C23405) * C696 + (C23408 + C23407) * C50607) * C50795 *
                C50929 +
            ((C23410 + C23409) * C696 + (C23412 + C23411) * C50607) * C50795 *
                C22819) *
               C50900 -
           (((C22821 * C3156 + C50781 * C3162 + C22820 * C829 + C22815 * C840) *
                 C50607 +
             (C22821 * C3153 + C50781 * C3157 + C22820 * C816 + C22815 * C830) *
                 C696) *
                C50795 * C22819 +
            ((C22821 * C3158 + C50781 * C3163 + C22820 * C831 + C22815 * C841) *
                 C50607 +
             (C22821 * C3154 + C50781 * C3159 + C22820 * C817 + C22815 * C832) *
                 C696) *
                C50795 * C50929 +
            ((C22821 * C3160 + C50781 * C3164 + C22820 * C833 + C22815 * C842) *
                 C50607 +
             (C22821 * C3155 + C50781 * C3161 + C22820 * C818 + C22815 * C834) *
                 C696) *
                C50795 * C50943) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C283 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C278 -
            (C22855 + C22856) * C284 - (C22857 + C22858) * C279 +
            C22871 * C285 + C22872 * C280) *
               C50795 * C50943 +
           ((C22856 + C22855) * C283 + (C22858 + C22857) * C278 -
            (C22860 + C22859) * C284 - (C22862 + C22861) * C279 +
            (C22864 + C22863) * C285 + (C22866 + C22865) * C280) *
               C50795 * C50929 +
           (C22871 * C283 + C22872 * C278 - C22873 * C284 - C22874 * C279 +
            (C22868 + C22867) * C285 + (C22870 + C22869) * C280) *
               C50795 * C22819) *
              C50900 +
          (((C23229 + C23230) * C284 -
            ((C22821 * C820 + C50781 * C835 + C22820 * C441 + C22815 * C452) *
                 C278 +
             (C22821 * C811 + C50781 * C819 + C22820 * C435 + C22815 * C442) *
                 C283) +
            (C23231 + C23232) * C279 - C23241 * C285 - C23242 * C280) *
               C50795 * C50943 +
           ((C23234 + C23233) * C284 -
            ((C23232 + C23231) * C278 + (C23230 + C23229) * C283) +
            (C23236 + C23235) * C279 - (C23237 + C23238) * C285 -
            (C23239 + C23240) * C280) *
               C50795 * C50929 +
           ((C23238 + C23237) * C284 - (C23242 * C278 + C23241 * C283) +
            (C23240 + C23239) * C279 -
            (C22821 * C1523 + C50781 * C1524 + C22820 * C438 + C22815 * C448) *
                C285 -
            (C22821 * C1525 + C50781 * C1526 + C22820 * C449 + C22815 * C456) *
                C280) *
               C50795 * C22819) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C696 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C50607) *
               C50795 * C50943 +
           ((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C50795 *
               C50929 +
           (C22871 * C696 + C22872 * C50607) * C50795 * C22819) *
              C1162 -
          ((C23242 * C50607 + C23241 * C696) * C50795 * C22819 +
           ((C23232 + C23231) * C50607 + (C23230 + C23229) * C696) * C50795 *
               C50929 +
           ((C22821 * C820 + C50781 * C835 + C22820 * C441 + C22815 * C452) *
                C50607 +
            (C22821 * C811 + C50781 * C819 + C22820 * C435 + C22815 * C442) *
                C696) *
               C50795 * C50943) *
              C1163 +
          (((C22820 * C944 + C22815 * C949 + C22821 * C1083 + C50781 * C1091) *
                C696 +
            (C22820 * C950 + C22815 * C959 + C22821 * C1090 + C50781 * C1095) *
                C50607) *
               C50795 * C50943 +
           ((C23820 + C23819) * C696 + (C23822 + C23821) * C50607) * C50795 *
               C50929 +
           ((C23824 + C23823) * C696 + (C23826 + C23825) * C50607) * C50795 *
               C22819) *
              C1164 -
          (((C22821 * C3594 + C50781 * C3600 + C22820 * C1172 +
             C22815 * C1179) *
                C50607 +
            (C22821 * C3591 + C50781 * C3595 + C22820 * C1167 +
             C22815 * C1173) *
                C696) *
               C50795 * C22819 +
           ((C22821 * C3596 + C50781 * C3601 + C22820 * C1174 +
             C22815 * C1180) *
                C50607 +
            (C22821 * C3592 + C50781 * C3597 + C22820 * C1168 +
             C22815 * C1175) *
                C696) *
               C50795 * C50929 +
           ((C22821 * C3598 + C50781 * C3602 + C22820 * C1176 +
             C22815 * C1181) *
                C50607 +
            (C22821 * C3593 + C50781 * C3599 + C22820 * C1169 +
             C22815 * C1177) *
                C696) *
               C50795 * C50943) *
              C1165) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C1285 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C50942 -
            (C22855 + C22856) * C1286 - (C22857 + C22858) * C50926 +
            C22871 * C1287 + C22872 * C1282) *
               C50795 * C50943 +
           ((C22856 + C22855) * C1285 + (C22858 + C22857) * C50942 -
            (C22860 + C22859) * C1286 - (C22862 + C22861) * C50926 +
            (C22864 + C22863) * C1287 + (C22866 + C22865) * C1282) *
               C50795 * C50929 +
           (C22871 * C1285 + C22872 * C50942 - C22873 * C1286 -
            C22874 * C50926 + (C22868 + C22867) * C1287 +
            (C22870 + C22869) * C1282) *
               C50795 * C22819) *
              C1643 +
          (((C23229 + C23230) * C1286 -
            ((C22821 * C820 + C50781 * C835 + C22820 * C441 + C22815 * C452) *
                 C50942 +
             (C22821 * C811 + C50781 * C819 + C22820 * C435 + C22815 * C442) *
                 C1285) +
            (C23231 + C23232) * C50926 - C23241 * C1287 - C23242 * C1282) *
               C50795 * C50943 +
           ((C23234 + C23233) * C1286 -
            ((C23232 + C23231) * C50942 + (C23230 + C23229) * C1285) +
            (C23236 + C23235) * C50926 - (C23237 + C23238) * C1287 -
            (C23239 + C23240) * C1282) *
               C50795 * C50929 +
           ((C23238 + C23237) * C1286 - (C23242 * C50942 + C23241 * C1285) +
            (C23240 + C23239) * C50926 -
            (C22821 * C1523 + C50781 * C1524 + C22820 * C438 + C22815 * C448) *
                C1287 -
            (C22821 * C1525 + C50781 * C1526 + C22820 * C449 + C22815 * C456) *
                C1282) *
               C50795 * C22819) *
              C50708) *
         C50670) /
        (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C1391 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C1386 -
             (C22855 + C22856) * C1392 - (C22857 + C22858) * C50612) *
                C50795 * C50943 +
            ((C22856 + C22855) * C1391 + (C22858 + C22857) * C1386 -
             (C22860 + C22859) * C1392 - (C22862 + C22861) * C50612) *
                C50795 * C50929 +
            (C22871 * C1391 + C22872 * C1386 - C22873 * C1392 -
             C22874 * C50612) *
                C50795 * C22819) *
               C1643 +
           (((C23229 + C23230) * C1392 -
             ((C22821 * C820 + C50781 * C835 + C22820 * C441 + C22815 * C452) *
                  C1386 +
              (C22821 * C811 + C50781 * C819 + C22820 * C435 + C22815 * C442) *
                  C1391) +
             (C23231 + C23232) * C50612) *
                C50795 * C50943 +
            ((C23234 + C23233) * C1392 -
             ((C23232 + C23231) * C1386 + (C23230 + C23229) * C1391) +
             (C23236 + C23235) * C50612) *
                C50795 * C50929 +
            ((C23238 + C23237) * C1392 - (C23242 * C1386 + C23241 * C1391) +
             (C23240 + C23239) * C50612) *
                C50795 * C22819) *
               C50708) *
              C50899 +
          ((((C23045 + C23046) * C1392 -
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C1386 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C1391) +
             (C23047 + C23048) * C50612) *
                C50795 * C50943 +
            ((C23050 + C23049) * C1392 -
             ((C23048 + C23047) * C1386 + (C23046 + C23045) * C1391) +
             (C23052 + C23051) * C50612) *
                C50795 * C50929 +
            ((C23054 + C23053) * C1392 - (C23058 * C1386 + C23057 * C1391) +
             (C23056 + C23055) * C50612) *
                C50795 * C22819) *
               C1643 +
           (((C22820 * C811 + C22815 * C819 + C22821 * C818 + C50781 * C834) *
                 C1391 +
             (C22820 * C820 + C22815 * C835 + C22821 * C833 + C50781 * C842) *
                 C1386 -
             (C24573 + C24574) * C1392 - (C24575 + C24576) * C50612) *
                C50795 * C50943 +
            ((C24574 + C24573) * C1391 + (C24576 + C24575) * C1386 -
             (C24577 + C24578) * C1392 - (C24579 + C24580) * C50612) *
                C50795 * C50929 +
            ((C24578 + C24577) * C1391 + (C24580 + C24579) * C1386 -
             (C22821 * C815 + C50781 * C828 + C22820 * C814 + C22815 * C825) *
                 C1392 -
             (C22821 * C827 + C50781 * C839 + C22820 * C826 + C22815 * C838) *
                 C50612) *
                C50795 * C22819) *
               C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C1391 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C1386 -
            (C22855 + C22856) * C1392 - (C22857 + C22858) * C50612) *
               C50795 * C50943 +
           ((C22856 + C22855) * C1391 + (C22858 + C22857) * C1386 -
            (C22860 + C22859) * C1392 - (C22862 + C22861) * C50612) *
               C50795 * C50929 +
           (C22871 * C1391 + C22872 * C1386 - C22873 * C1392 -
            C22874 * C50612) *
               C50795 * C22819) *
              C50945 +
          (((C23229 + C23230) * C1392 -
            ((C22821 * C820 + C50781 * C835 + C22820 * C441 + C22815 * C452) *
                 C1386 +
             (C22821 * C811 + C50781 * C819 + C22820 * C435 + C22815 * C442) *
                 C1391) +
            (C23231 + C23232) * C50612) *
               C50795 * C50943 +
           ((C23234 + C23233) * C1392 -
            ((C23232 + C23231) * C1386 + (C23230 + C23229) * C1391) +
            (C23236 + C23235) * C50612) *
               C50795 * C50929 +
           ((C23238 + C23237) * C1392 - (C23242 * C1386 + C23241 * C1391) +
            (C23240 + C23239) * C50612) *
               C50795 * C22819) *
              C50935 +
          (((C22820 * C944 + C22815 * C949 + C22821 * C1083 + C50781 * C1091) *
                C1391 +
            (C22820 * C950 + C22815 * C959 + C22821 * C1090 + C50781 * C1095) *
                C1386 -
            (C23819 + C23820) * C1392 - (C23821 + C23822) * C50612) *
               C50795 * C50943 +
           ((C23820 + C23819) * C1391 + (C23822 + C23821) * C1386 -
            (C23823 + C23824) * C1392 - (C23825 + C23826) * C50612) *
               C50795 * C50929 +
           ((C23824 + C23823) * C1391 + (C23826 + C23825) * C1386 -
            (C22821 * C1080 + C50781 * C1085 + C22820 * C947 + C22815 * C955) *
                C1392 -
            (C22821 * C1084 + C50781 * C1092 + C22820 * C956 + C22815 * C962) *
                C50612) *
               C50795 * C22819) *
              C1875) *
         C50670) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
               C118 +
           (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
               C106 -
           (C22855 + C22856) * C119 - (C22857 + C22858) * C107 + C22871 * C120 +
           C22872 * C108 - C22873 * C121 - C22874 * C109) *
              C50795 * C50943 +
          ((C22856 + C22855) * C118 + (C22858 + C22857) * C106 -
           (C22860 + C22859) * C119 - (C22862 + C22861) * C107 +
           (C22864 + C22863) * C120 + (C22866 + C22865) * C108 -
           (C22867 + C22868) * C121 - (C22869 + C22870) * C109) *
              C50795 * C50929 +
          (C22871 * C118 + C22872 * C106 - C22873 * C119 - C22874 * C107 +
           (C22868 + C22867) * C120 + (C22870 + C22869) * C108 -
           (C22821 * C291 + C50781 * C302 + C22820 * C127 + C22815 * C139) *
               C121 -
           (C22821 * C303 + C50781 * C309 + C22820 * C140 + C22815 * C148) *
               C109) *
              C50795 * C22819) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C49720 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C50884 -
            (C22855 + C22856) * C49713 - (C22857 + C22858) * C50612) *
               C50795 * C50943 +
           ((C22856 + C22855) * C49720 + (C22858 + C22857) * C50884 -
            (C22860 + C22859) * C49713 - (C22862 + C22861) * C50612) *
               C50795 * C50929 +
           (C22871 * C49720 + C22872 * C50884 - C22873 * C49713 -
            C22874 * C50612) *
               C50795 * C22819) *
              C50696 * C582 +
          (((C23045 + C23046) * C49713 -
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50884 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C49720) +
            (C23047 + C23048) * C50612) *
               C50795 * C50943 +
           ((C23050 + C23049) * C49713 -
            ((C23048 + C23047) * C50884 + (C23046 + C23045) * C49720) +
            (C23052 + C23051) * C50612) *
               C50795 * C50929 +
           ((C23054 + C23053) * C49713 - (C23058 * C50884 + C23057 * C49720) +
            (C23056 + C23055) * C50612) *
               C50795 * C22819) *
              C50696 * C583 +
          (((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                C49720 +
            (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                C50884 -
            (C23405 + C23406) * C49713 - (C23407 + C23408) * C50612) *
               C50795 * C50943 +
           ((C23406 + C23405) * C49720 + (C23408 + C23407) * C50884 -
            (C23409 + C23410) * C49713 - (C23411 + C23412) * C50612) *
               C50795 * C50929 +
           ((C23410 + C23409) * C49720 + (C23412 + C23411) * C50884 -
            (C22821 * C697 + C50781 * C702 + C22820 * C590 + C22815 * C598) *
                C49713 -
            (C22821 * C701 + C50781 * C709 + C22820 * C599 + C22815 * C605) *
                C50612) *
               C50795 * C22819) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C283 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C278 -
            (C22855 + C22856) * C284 - (C22857 + C22858) * C279 +
            C22871 * C285 + C22872 * C280) *
               C50795 * C50943 +
           ((C22856 + C22855) * C283 + (C22858 + C22857) * C278 -
            (C22860 + C22859) * C284 - (C22862 + C22861) * C279 +
            (C22864 + C22863) * C285 + (C22866 + C22865) * C280) *
               C50795 * C50929 +
           (C22871 * C283 + C22872 * C278 - C22873 * C284 - C22874 * C279 +
            (C22868 + C22867) * C285 + (C22870 + C22869) * C280) *
               C50795 * C22819) *
              C50696 * C50899 +
          (((C23045 + C23046) * C284 -
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C278 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C283) +
            (C23047 + C23048) * C279 - C23057 * C285 - C23058 * C280) *
               C50795 * C50943 +
           ((C23050 + C23049) * C284 -
            ((C23048 + C23047) * C278 + (C23046 + C23045) * C283) +
            (C23052 + C23051) * C279 - (C23053 + C23054) * C285 -
            (C23055 + C23056) * C280) *
               C50795 * C50929 +
           ((C23054 + C23053) * C284 - (C23058 * C278 + C23057 * C283) +
            (C23056 + C23055) * C279 -
            (C22821 * C591 + C50781 * C600 + C22820 * C290 + C22815 * C300) *
                C285 -
            (C22821 * C601 + C50781 * C606 + C22820 * C301 + C22815 * C308) *
                C280) *
               C50795 * C22819) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C696 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C50607) *
               C50795 * C50943 +
           ((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C50795 *
               C50929 +
           (C22871 * C696 + C22872 * C50607) * C50795 * C22819) *
              C50696 * C692 -
          ((C23058 * C50607 + C23057 * C696) * C50795 * C22819 +
           ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C50795 *
               C50929 +
           ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                C50607 +
            (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                C696) *
               C50795 * C50943) *
              C50696 * C693 +
          (((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                C696 +
            (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                C50607) *
               C50795 * C50943 +
           ((C23406 + C23405) * C696 + (C23408 + C23407) * C50607) * C50795 *
               C50929 +
           ((C23410 + C23409) * C696 + (C23412 + C23411) * C50607) * C50795 *
               C22819) *
              C50696 * C694 -
          (((C22821 * C2998 + C50781 * C3004 + C22820 * C703 + C22815 * C710) *
                C50607 +
            (C22821 * C2995 + C50781 * C2999 + C22820 * C698 + C22815 * C704) *
                C696) *
               C50795 * C22819 +
           ((C22821 * C3000 + C50781 * C3005 + C22820 * C705 + C22815 * C711) *
                C50607 +
            (C22821 * C2996 + C50781 * C3001 + C22820 * C699 + C22815 * C706) *
                C696) *
               C50795 * C50929 +
           ((C22821 * C3002 + C50781 * C3006 + C22820 * C707 + C22815 * C712) *
                C50607 +
            (C22821 * C2997 + C50781 * C3003 + C22820 * C700 + C22815 * C708) *
                C696) *
               C50795 * C50943) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C283 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C278 -
            (C22855 + C22856) * C284 - (C22857 + C22858) * C279 +
            C22871 * C285 + C22872 * C280) *
               C50795 * C50943 +
           ((C22856 + C22855) * C283 + (C22858 + C22857) * C278 -
            (C22860 + C22859) * C284 - (C22862 + C22861) * C279 +
            (C22864 + C22863) * C285 + (C22866 + C22865) * C280) *
               C50795 * C50929 +
           (C22871 * C283 + C22872 * C278 - C22873 * C284 - C22874 * C279 +
            (C22868 + C22867) * C285 + (C22870 + C22869) * C280) *
               C50795 * C22819) *
              C50900 +
          (((C23229 + C23230) * C284 -
            ((C22821 * C820 + C50781 * C835 + C22820 * C441 + C22815 * C452) *
                 C278 +
             (C22821 * C811 + C50781 * C819 + C22820 * C435 + C22815 * C442) *
                 C283) +
            (C23231 + C23232) * C279 - C23241 * C285 - C23242 * C280) *
               C50795 * C50943 +
           ((C23234 + C23233) * C284 -
            ((C23232 + C23231) * C278 + (C23230 + C23229) * C283) +
            (C23236 + C23235) * C279 - (C23237 + C23238) * C285 -
            (C23239 + C23240) * C280) *
               C50795 * C50929 +
           ((C23238 + C23237) * C284 - (C23242 * C278 + C23241 * C283) +
            (C23240 + C23239) * C279 -
            (C22821 * C1523 + C50781 * C1524 + C22820 * C438 + C22815 * C448) *
                C285 -
            (C22821 * C1525 + C50781 * C1526 + C22820 * C449 + C22815 * C456) *
                C280) *
               C50795 * C22819) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C696 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50607) *
                C50795 * C50943 +
            ((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C50795 *
                C50929 +
            (C22871 * C696 + C22872 * C50607) * C50795 * C22819) *
               C50900 -
           ((C23242 * C50607 + C23241 * C696) * C50795 * C22819 +
            ((C23232 + C23231) * C50607 + (C23230 + C23229) * C696) * C50795 *
                C50929 +
            ((C22821 * C820 + C50781 * C835 + C22820 * C441 + C22815 * C452) *
                 C50607 +
             (C22821 * C811 + C50781 * C819 + C22820 * C435 + C22815 * C442) *
                 C696) *
                C50795 * C50943) *
               C50708) *
              C582 +
          ((((C22820 * C811 + C22815 * C819 + C22821 * C818 + C50781 * C834) *
                 C696 +
             (C22820 * C820 + C22815 * C835 + C22821 * C833 + C50781 * C842) *
                 C50607) *
                C50795 * C50943 +
            ((C22820 * C812 + C22815 * C821 + C22821 * C817 + C50781 * C832) *
                 C696 +
             (C22820 * C822 + C22815 * C836 + C22821 * C831 + C50781 * C841) *
                 C50607) *
                C50795 * C50929 +
            ((C22820 * C813 + C22815 * C823 + C22821 * C816 + C50781 * C830) *
                 C696 +
             (C22820 * C824 + C22815 * C837 + C22821 * C829 + C50781 * C840) *
                 C50607) *
                C50795 * C22819) *
               C50708 -
           ((C23058 * C50607 + C23057 * C696) * C50795 * C22819 +
            ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C50795 *
                C50929 +
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50607 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C696) *
                C50795 * C50943) *
               C50900) *
              C583 +
          ((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                 C696 +
             (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                 C50607) *
                C50795 * C50943 +
            ((C23406 + C23405) * C696 + (C23408 + C23407) * C50607) * C50795 *
                C50929 +
            ((C23410 + C23409) * C696 + (C23412 + C23411) * C50607) * C50795 *
                C22819) *
               C50900 -
           (((C22821 * C3156 + C50781 * C3162 + C22820 * C829 + C22815 * C840) *
                 C50607 +
             (C22821 * C3153 + C50781 * C3157 + C22820 * C816 + C22815 * C830) *
                 C696) *
                C50795 * C22819 +
            ((C22821 * C3158 + C50781 * C3163 + C22820 * C831 + C22815 * C841) *
                 C50607 +
             (C22821 * C3154 + C50781 * C3159 + C22820 * C817 + C22815 * C832) *
                 C696) *
                C50795 * C50929 +
            ((C22821 * C3160 + C50781 * C3164 + C22820 * C833 + C22815 * C842) *
                 C50607 +
             (C22821 * C3155 + C50781 * C3161 + C22820 * C818 + C22815 * C834) *
                 C696) *
                C50795 * C50943) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C1285 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C50942 -
                    (C25695 + C25696 + C25697) * C1286 -
                    (C25698 + C25699 + C25700) * C50926 +
                    (C25701 + C25702 + C25703) * C1287 +
                    (C25704 + C25705 + C25706) * C1282) *
                       C50795 * C25653 +
                   ((C25697 + C25696 + C25695) * C1285 +
                    (C25700 + C25699 + C25698) * C50942 -
                    (C25703 + C25702 + C25701) * C1286 -
                    (C25706 + C25705 + C25704) * C50926 +
                    (C25709 + C25708 + C25707) * C1287 +
                    (C25712 + C25711 + C25710) * C1282) *
                       C50795 * C50634) *
                      C50696 * C1283 +
                  (((C25883 + C25884 + C25885) * C1286 -
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C50942 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C1285) +
                    (C25886 + C25887 + C25888) * C50926 -
                    (C25889 + C25890 + C25891) * C1287 -
                    (C25892 + C25893 + C25894) * C1282) *
                       C50795 * C25653 +
                   ((C25891 + C25890 + C25889) * C1286 -
                    ((C25888 + C25887 + C25886) * C50942 +
                     (C25885 + C25884 + C25883) * C1285) +
                    (C25894 + C25893 + C25892) * C50926 -
                    (C25657 * C697 + C25652 * C702 + C25656 * C590 +
                     C50938 * C598 + C25655 * C289 + C50946 * C298) *
                        C1287 -
                    (C25657 * C701 + C25652 * C709 + C25656 * C599 +
                     C50938 * C605 + C25655 * C299 + C50946 * C307) *
                        C1282) *
                       C50795 * C50634) *
                      C50696 * C50684)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C1391 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C1386 -
                    (C25695 + C25696 + C25697) * C1392 -
                    (C25698 + C25699 + C25700) * C50612) *
                       C50795 * C25653 +
                   ((C25697 + C25696 + C25695) * C1391 +
                    (C25700 + C25699 + C25698) * C1386 -
                    (C25703 + C25702 + C25701) * C1392 -
                    (C25706 + C25705 + C25704) * C50612) *
                       C50795 * C50634) *
                      C50696 * C50944 +
                  (((C25883 + C25884 + C25885) * C1392 -
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C1386 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C1391) +
                    (C25886 + C25887 + C25888) * C50612) *
                       C50795 * C25653 +
                   ((C25891 + C25890 + C25889) * C1392 -
                    ((C25888 + C25887 + C25886) * C1386 +
                     (C25885 + C25884 + C25883) * C1391) +
                    (C25894 + C25893 + C25892) * C50612) *
                       C50795 * C50634) *
                      C50696 * C50932 +
                  (((C25655 * C587 + C50946 * C592 + C25656 * C700 +
                     C50938 * C708 + C25657 * C2997 + C25652 * C3003) *
                        C1391 +
                    (C25655 * C593 + C50946 * C602 + C25656 * C707 +
                     C50938 * C712 + C25657 * C3002 + C25652 * C3006) *
                        C1386 -
                    (C26235 + C26236 + C26237) * C1392 -
                    (C26238 + C26239 + C26240) * C50612) *
                       C50795 * C25653 +
                   ((C26237 + C26236 + C26235) * C1391 +
                    (C26240 + C26239 + C26238) * C1386 -
                    (C25657 * C2995 + C25652 * C2999 + C25656 * C698 +
                     C50938 * C704 + C25655 * C589 + C50946 * C596) *
                        C1392 -
                    (C25657 * C2998 + C25652 * C3004 + C25656 * C703 +
                     C50938 * C710 + C25655 * C597 + C50946 * C604) *
                        C50612) *
                       C50795 * C50634) *
                      C50696 * C1390)) /
                (p * q * std::sqrt(p + q));
    d2ee[17] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                      C50938 * C294 + C25657 * C587 + C25652 * C592) *
                         C1391 +
                     (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                      C50938 * C304 + C25657 * C593 + C25652 * C602) *
                         C1386 -
                     (C25695 + C25696 + C25697) * C1392 -
                     (C25698 + C25699 + C25700) * C50612) *
                        C50795 * C25653 +
                    ((C25697 + C25696 + C25695) * C1391 +
                     (C25700 + C25699 + C25698) * C1386 -
                     (C25703 + C25702 + C25701) * C1392 -
                     (C25706 + C25705 + C25704) * C50612) *
                        C50795 * C50634) *
                       C50900 +
                   (((C26065 + C26066 + C26067) * C1392 -
                     ((C25657 * C833 + C25652 * C842 + C25656 * C820 +
                       C50938 * C835 + C25655 * C441 + C50946 * C452) *
                          C1386 +
                      (C25657 * C818 + C25652 * C834 + C25656 * C811 +
                       C50938 * C819 + C25655 * C435 + C50946 * C442) *
                          C1391) +
                     (C26068 + C26069 + C26070) * C50612) *
                        C50795 * C25653 +
                    ((C26073 + C26072 + C26071) * C1392 -
                     ((C26070 + C26069 + C26068) * C1386 +
                      (C26067 + C26066 + C26065) * C1391) +
                     (C26076 + C26075 + C26074) * C50612) *
                        C50795 * C50634) *
                       C50708) *
                      C1283 +
                  ((((C25883 + C25884 + C25885) * C1392 -
                     ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                       C50938 * C602 + C25655 * C293 + C50946 * C304) *
                          C1386 +
                      (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                       C50938 * C592 + C25655 * C287 + C50946 * C294) *
                          C1391) +
                     (C25886 + C25887 + C25888) * C50612) *
                        C50795 * C25653 +
                    ((C25891 + C25890 + C25889) * C1392 -
                     ((C25888 + C25887 + C25886) * C1386 +
                      (C25885 + C25884 + C25883) * C1391) +
                     (C25894 + C25893 + C25892) * C50612) *
                        C50795 * C50634) *
                       C50900 +
                   (((C25655 * C811 + C50946 * C819 + C25656 * C818 +
                      C50938 * C834 + C25657 * C3155 + C25652 * C3161) *
                         C1391 +
                     (C25655 * C820 + C50946 * C835 + C25656 * C833 +
                      C50938 * C842 + C25657 * C3160 + C25652 * C3164) *
                         C1386 -
                     (C27391 + C27392 + C27393) * C1392 -
                     (C27394 + C27395 + C27396) * C50612) *
                        C50795 * C25653 +
                    ((C27393 + C27392 + C27391) * C1391 +
                     (C27396 + C27395 + C27394) * C1386 -
                     (C25657 * C3153 + C25652 * C3157 + C25656 * C816 +
                      C50938 * C830 + C25655 * C813 + C50946 * C823) *
                         C1392 -
                     (C25657 * C3156 + C25652 * C3162 + C25656 * C829 +
                      C50938 * C840 + C25655 * C824 + C50946 * C837) *
                         C50612) *
                        C50795 * C50634) *
                       C50708) *
                      C50684)) /
                (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                      C50938 * C294 + C25657 * C587 + C25652 * C592) *
                         C49720 +
                     (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                      C50938 * C304 + C25657 * C593 + C25652 * C602) *
                         C50884 -
                     (C25695 + C25696 + C25697) * C49713 -
                     (C25698 + C25699 + C25700) * C50612) *
                        C50795 * C25653 +
                    ((C25697 + C25696 + C25695) * C49720 +
                     (C25700 + C25699 + C25698) * C50884 -
                     (C25703 + C25702 + C25701) * C49713 -
                     (C25706 + C25705 + C25704) * C50612) *
                        C50795 * C50634) *
                       C1643 +
                   (((C26065 + C26066 + C26067) * C49713 -
                     ((C25657 * C833 + C25652 * C842 + C25656 * C820 +
                       C50938 * C835 + C25655 * C441 + C50946 * C452) *
                          C50884 +
                      (C25657 * C818 + C25652 * C834 + C25656 * C811 +
                       C50938 * C819 + C25655 * C435 + C50946 * C442) *
                          C49720) +
                     (C26068 + C26069 + C26070) * C50612) *
                        C50795 * C25653 +
                    ((C26073 + C26072 + C26071) * C49713 -
                     ((C26070 + C26069 + C26068) * C50884 +
                      (C26067 + C26066 + C26065) * C49720) +
                     (C26076 + C26075 + C26074) * C50612) *
                        C50795 * C50634) *
                       C50708) *
                      C1283 +
                  ((((C25883 + C25884 + C25885) * C49713 -
                     ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                       C50938 * C602 + C25655 * C293 + C50946 * C304) *
                          C50884 +
                      (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                       C50938 * C592 + C25655 * C287 + C50946 * C294) *
                          C49720) +
                     (C25886 + C25887 + C25888) * C50612) *
                        C50795 * C25653 +
                    ((C25891 + C25890 + C25889) * C49713 -
                     ((C25888 + C25887 + C25886) * C50884 +
                      (C25885 + C25884 + C25883) * C49720) +
                     (C25894 + C25893 + C25892) * C50612) *
                        C50795 * C50634) *
                       C1643 +
                   (((C25655 * C811 + C50946 * C819 + C25656 * C818 +
                      C50938 * C834 + C25657 * C3155 + C25652 * C3161) *
                         C49720 +
                     (C25655 * C820 + C50946 * C835 + C25656 * C833 +
                      C50938 * C842 + C25657 * C3160 + C25652 * C3164) *
                         C50884 -
                     (C27391 + C27392 + C27393) * C49713 -
                     (C27394 + C27395 + C27396) * C50612) *
                        C50795 * C25653 +
                    ((C27393 + C27392 + C27391) * C49720 +
                     (C27396 + C27395 + C27394) * C50884 -
                     (C25657 * C3153 + C25652 * C3157 + C25656 * C816 +
                      C50938 * C830 + C25655 * C813 + C50946 * C823) *
                         C49713 -
                     (C25657 * C3156 + C25652 * C3162 + C25656 * C829 +
                      C50938 * C840 + C25655 * C824 + C50946 * C837) *
                         C50612) *
                        C50795 * C50634) *
                       C50708) *
                      C50684)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                      C50938 * C294 + C25657 * C587 + C25652 * C592) *
                         C696 +
                     (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                      C50938 * C304 + C25657 * C593 + C25652 * C602) *
                         C50607) *
                        C50795 * C25653 +
                    ((C25697 + C25696 + C25695) * C696 +
                     (C25700 + C25699 + C25698) * C50607) *
                        C50795 * C50634) *
                       C1643 -
                   (((C26070 + C26069 + C26068) * C50607 +
                     (C26067 + C26066 + C26065) * C696) *
                        C50795 * C50634 +
                    ((C25657 * C833 + C25652 * C842 + C25656 * C820 +
                      C50938 * C835 + C25655 * C441 + C50946 * C452) *
                         C50607 +
                     (C25657 * C818 + C25652 * C834 + C25656 * C811 +
                      C50938 * C819 + C25655 * C435 + C50946 * C442) *
                         C696) *
                        C50795 * C25653) *
                       C50708) *
                      C50944 +
                  ((((C25655 * C811 + C50946 * C819 + C25656 * C818 +
                      C50938 * C834 + C25657 * C3155 + C25652 * C3161) *
                         C696 +
                     (C25655 * C820 + C50946 * C835 + C25656 * C833 +
                      C50938 * C842 + C25657 * C3160 + C25652 * C3164) *
                         C50607) *
                        C50795 * C25653 +
                    ((C27393 + C27392 + C27391) * C696 +
                     (C27396 + C27395 + C27394) * C50607) *
                        C50795 * C50634) *
                       C50708 -
                   (((C25888 + C25887 + C25886) * C50607 +
                     (C25885 + C25884 + C25883) * C696) *
                        C50795 * C50634 +
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C50607 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C696) *
                        C50795 * C25653) *
                       C1643) *
                      C50932 +
                  ((((C25655 * C587 + C50946 * C592 + C25656 * C700 +
                      C50938 * C708 + C25657 * C2997 + C25652 * C3003) *
                         C696 +
                     (C25655 * C593 + C50946 * C602 + C25656 * C707 +
                      C50938 * C712 + C25657 * C3002 + C25652 * C3006) *
                         C50607) *
                        C50795 * C25653 +
                    ((C26237 + C26236 + C26235) * C696 +
                     (C26240 + C26239 + C26238) * C50607) *
                        C50795 * C50634) *
                       C1643 -
                   (((C25657 * C8885 + C25652 * C8889 + C25656 * C3158 +
                      C50938 * C3163 + C25655 * C831 + C50946 * C841) *
                         C50607 +
                     (C25657 * C8883 + C25652 * C8886 + C25656 * C3154 +
                      C50938 * C3159 + C25655 * C817 + C50946 * C832) *
                         C696) *
                        C50795 * C50634 +
                    ((C25657 * C8887 + C25652 * C8890 + C25656 * C3160 +
                      C50938 * C3164 + C25655 * C833 + C50946 * C842) *
                         C50607 +
                     (C25657 * C8884 + C25652 * C8888 + C25656 * C3155 +
                      C50938 * C3161 + C25655 * C818 + C50946 * C834) *
                         C696) *
                        C50795 * C25653) *
                       C50708) *
                      C1390)) /
                (p * q * std::sqrt(p + q));
    d2ee[20] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                      C50938 * C294 + C25657 * C587 + C25652 * C592) *
                         C696 +
                     (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                      C50938 * C304 + C25657 * C593 + C25652 * C602) *
                         C50607) *
                        C50795 * C25653 +
                    ((C25697 + C25696 + C25695) * C696 +
                     (C25700 + C25699 + C25698) * C50607) *
                        C50795 * C50634) *
                       C50945 -
                   (((C26070 + C26069 + C26068) * C50607 +
                     (C26067 + C26066 + C26065) * C696) *
                        C50795 * C50634 +
                    ((C25657 * C833 + C25652 * C842 + C25656 * C820 +
                      C50938 * C835 + C25655 * C441 + C50946 * C452) *
                         C50607 +
                     (C25657 * C818 + C25652 * C834 + C25656 * C811 +
                      C50938 * C819 + C25655 * C435 + C50946 * C442) *
                         C696) *
                        C50795 * C25653) *
                       C50935 +
                   (((C25655 * C944 + C50946 * C949 + C25656 * C1083 +
                      C50938 * C1091 + C25657 * C3483 + C25652 * C3489) *
                         C696 +
                     (C25655 * C950 + C50946 * C959 + C25656 * C1090 +
                      C50938 * C1095 + C25657 * C3488 + C25652 * C3492) *
                         C50607) *
                        C50795 * C25653 +
                    ((C26645 + C26644 + C26643) * C696 +
                     (C26648 + C26647 + C26646) * C50607) *
                        C50795 * C50634) *
                       C1875) *
                      C1283 +
                  ((((C25655 * C811 + C50946 * C819 + C25656 * C818 +
                      C50938 * C834 + C25657 * C3155 + C25652 * C3161) *
                         C696 +
                     (C25655 * C820 + C50946 * C835 + C25656 * C833 +
                      C50938 * C842 + C25657 * C3160 + C25652 * C3164) *
                         C50607) *
                        C50795 * C25653 +
                    ((C27393 + C27392 + C27391) * C696 +
                     (C27396 + C27395 + C27394) * C50607) *
                        C50795 * C50634) *
                       C50935 -
                   (((C25888 + C25887 + C25886) * C50607 +
                     (C25885 + C25884 + C25883) * C696) *
                        C50795 * C50634 +
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C50607 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C696) *
                        C50795 * C25653) *
                       C50945 -
                   (((C25657 * C9203 + C25652 * C9207 + C25656 * C3486 +
                      C50938 * C3491 + C25655 * C1088 + C50946 * C1094) *
                         C50607 +
                     (C25657 * C9201 + C25652 * C9204 + C25656 * C3482 +
                      C50938 * C3487 + C25655 * C1082 + C50946 * C1089) *
                         C696) *
                        C50795 * C50634 +
                    ((C25657 * C9205 + C25652 * C9208 + C25656 * C3488 +
                      C50938 * C3492 + C25655 * C1090 + C50946 * C1095) *
                         C50607 +
                     (C25657 * C9202 + C25652 * C9206 + C25656 * C3483 +
                      C50938 * C3489 + C25655 * C1083 + C50946 * C1091) *
                         C696) *
                        C50795 * C25653) *
                       C1875) *
                      C50684)) /
                (p * q * std::sqrt(p + q));
    d2ee[21] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C49720 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C50884 -
                    (C25695 + C25696 + C25697) * C49713 -
                    (C25698 + C25699 + C25700) * C50612) *
                       C50795 * C25653 +
                   ((C25697 + C25696 + C25695) * C49720 +
                    (C25700 + C25699 + C25698) * C50884 -
                    (C25703 + C25702 + C25701) * C49713 -
                    (C25706 + C25705 + C25704) * C50612) *
                       C50795 * C50634) *
                      C50696 * C582 +
                  (((C25883 + C25884 + C25885) * C49713 -
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C50884 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C49720) +
                    (C25886 + C25887 + C25888) * C50612) *
                       C50795 * C25653 +
                   ((C25891 + C25890 + C25889) * C49713 -
                    ((C25888 + C25887 + C25886) * C50884 +
                     (C25885 + C25884 + C25883) * C49720) +
                    (C25894 + C25893 + C25892) * C50612) *
                       C50795 * C50634) *
                      C50696 * C583 +
                  (((C25655 * C587 + C50946 * C592 + C25656 * C700 +
                     C50938 * C708 + C25657 * C2997 + C25652 * C3003) *
                        C49720 +
                    (C25655 * C593 + C50946 * C602 + C25656 * C707 +
                     C50938 * C712 + C25657 * C3002 + C25652 * C3006) *
                        C50884 -
                    (C26235 + C26236 + C26237) * C49713 -
                    (C26238 + C26239 + C26240) * C50612) *
                       C50795 * C25653 +
                   ((C26237 + C26236 + C26235) * C49720 +
                    (C26240 + C26239 + C26238) * C50884 -
                    (C25657 * C2995 + C25652 * C2999 + C25656 * C698 +
                     C50938 * C704 + C25655 * C589 + C50946 * C596) *
                        C49713 -
                    (C25657 * C2998 + C25652 * C3004 + C25656 * C703 +
                     C50938 * C710 + C25655 * C597 + C50946 * C604) *
                        C50612) *
                       C50795 * C50634) *
                      C50696 * C584)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                    C50938 * C294 + C25657 * C587 + C25652 * C592) *
                       C118 +
                   (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                    C50938 * C304 + C25657 * C593 + C25652 * C602) *
                       C106 -
                   (C25695 + C25696 + C25697) * C119 -
                   (C25698 + C25699 + C25700) * C107 +
                   (C25701 + C25702 + C25703) * C120 +
                   (C25704 + C25705 + C25706) * C108 -
                   (C25707 + C25708 + C25709) * C121 -
                   (C25710 + C25711 + C25712) * C109) *
                      C50795 * C25653 +
                  ((C25697 + C25696 + C25695) * C118 +
                   (C25700 + C25699 + C25698) * C106 -
                   (C25703 + C25702 + C25701) * C119 -
                   (C25706 + C25705 + C25704) * C107 +
                   (C25709 + C25708 + C25707) * C120 +
                   (C25712 + C25711 + C25710) * C108 -
                   (C25657 * C591 + C25652 * C600 + C25656 * C290 +
                    C50938 * C300 + C25655 * C126 + C50946 * C137) *
                       C121 -
                   (C25657 * C601 + C25652 * C606 + C25656 * C301 +
                    C50938 * C308 + C25655 * C138 + C50946 * C147) *
                       C109) *
                      C50795 * C50634) *
                 C50696 * C50670) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C49720 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C50884 -
                    (C25695 + C25696 + C25697) * C49713 -
                    (C25698 + C25699 + C25700) * C50612) *
                       C50795 * C25653 +
                   ((C25697 + C25696 + C25695) * C49720 +
                    (C25700 + C25699 + C25698) * C50884 -
                    (C25703 + C25702 + C25701) * C49713 -
                    (C25706 + C25705 + C25704) * C50612) *
                       C50795 * C50634) *
                      C941 +
                  (((C26065 + C26066 + C26067) * C49713 -
                    ((C25657 * C833 + C25652 * C842 + C25656 * C820 +
                      C50938 * C835 + C25655 * C441 + C50946 * C452) *
                         C50884 +
                     (C25657 * C818 + C25652 * C834 + C25656 * C811 +
                      C50938 * C819 + C25655 * C435 + C50946 * C442) *
                         C49720) +
                    (C26068 + C26069 + C26070) * C50612) *
                       C50795 * C25653 +
                   ((C26073 + C26072 + C26071) * C49713 -
                    ((C26070 + C26069 + C26068) * C50884 +
                     (C26067 + C26066 + C26065) * C49720) +
                    (C26076 + C26075 + C26074) * C50612) *
                       C50795 * C50634) *
                      C942 +
                  (((C25655 * C944 + C50946 * C949 + C25656 * C1083 +
                     C50938 * C1091 + C25657 * C3483 + C25652 * C3489) *
                        C49720 +
                    (C25655 * C950 + C50946 * C959 + C25656 * C1090 +
                     C50938 * C1095 + C25657 * C3488 + C25652 * C3492) *
                        C50884 -
                    (C26643 + C26644 + C26645) * C49713 -
                    (C26646 + C26647 + C26648) * C50612) *
                       C50795 * C25653 +
                   ((C26645 + C26644 + C26643) * C49720 +
                    (C26648 + C26647 + C26646) * C50884 -
                    (C25657 * C3481 + C25652 * C3485 + C25656 * C1081 +
                     C50938 * C1087 + C25655 * C946 + C50946 * C953) *
                        C49713 -
                    (C25657 * C3484 + C25652 * C3490 + C25656 * C1086 +
                     C50938 * C1093 + C25655 * C954 + C50946 * C961) *
                        C50612) *
                       C50795 * C50634) *
                      C943) *
                 C50670) /
                    (p * q * std::sqrt(p + q));
    d2ee[22] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C696 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C50607) *
                       C50795 * C25653 +
                   ((C25697 + C25696 + C25695) * C696 +
                    (C25700 + C25699 + C25698) * C50607) *
                       C50795 * C50634) *
                      C50696 * C692 -
                  (((C25888 + C25887 + C25886) * C50607 +
                    (C25885 + C25884 + C25883) * C696) *
                       C50795 * C50634 +
                   ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                     C50938 * C602 + C25655 * C293 + C50946 * C304) *
                        C50607 +
                    (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                     C50938 * C592 + C25655 * C287 + C50946 * C294) *
                        C696) *
                       C50795 * C25653) *
                      C50696 * C693 +
                  (((C25655 * C587 + C50946 * C592 + C25656 * C700 +
                     C50938 * C708 + C25657 * C2997 + C25652 * C3003) *
                        C696 +
                    (C25655 * C593 + C50946 * C602 + C25656 * C707 +
                     C50938 * C712 + C25657 * C3002 + C25652 * C3006) *
                        C50607) *
                       C50795 * C25653 +
                   ((C26237 + C26236 + C26235) * C696 +
                    (C26240 + C26239 + C26238) * C50607) *
                       C50795 * C50634) *
                      C50696 * C694 -
                  (((C25657 * C8731 + C25652 * C8735 + C25656 * C3000 +
                     C50938 * C3005 + C25655 * C705 + C50946 * C711) *
                        C50607 +
                    (C25657 * C8729 + C25652 * C8732 + C25656 * C2996 +
                     C50938 * C3001 + C25655 * C699 + C50946 * C706) *
                        C696) *
                       C50795 * C50634 +
                   ((C25657 * C8733 + C25652 * C8736 + C25656 * C3002 +
                     C50938 * C3006 + C25655 * C707 + C50946 * C712) *
                        C50607 +
                    (C25657 * C8730 + C25652 * C8734 + C25656 * C2997 +
                     C50938 * C3003 + C25655 * C700 + C50946 * C708) *
                        C696) *
                       C50795 * C25653) *
                      C50696 * C695)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C283 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C278 -
                    (C25695 + C25696 + C25697) * C284 -
                    (C25698 + C25699 + C25700) * C279 +
                    (C25701 + C25702 + C25703) * C285 +
                    (C25704 + C25705 + C25706) * C280) *
                       C50795 * C25653 +
                   ((C25697 + C25696 + C25695) * C283 +
                    (C25700 + C25699 + C25698) * C278 -
                    (C25703 + C25702 + C25701) * C284 -
                    (C25706 + C25705 + C25704) * C279 +
                    (C25709 + C25708 + C25707) * C285 +
                    (C25712 + C25711 + C25710) * C280) *
                       C50795 * C50634) *
                      C50696 * C50899 +
                  (((C25883 + C25884 + C25885) * C284 -
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C278 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C283) +
                    (C25886 + C25887 + C25888) * C279 -
                    (C25889 + C25890 + C25891) * C285 -
                    (C25892 + C25893 + C25894) * C280) *
                       C50795 * C25653 +
                   ((C25891 + C25890 + C25889) * C284 -
                    ((C25888 + C25887 + C25886) * C278 +
                     (C25885 + C25884 + C25883) * C283) +
                    (C25894 + C25893 + C25892) * C279 -
                    (C25657 * C697 + C25652 * C702 + C25656 * C590 +
                     C50938 * C598 + C25655 * C289 + C50946 * C298) *
                        C285 -
                    (C25657 * C701 + C25652 * C709 + C25656 * C599 +
                     C50938 * C605 + C25655 * C299 + C50946 * C307) *
                        C280) *
                       C50795 * C50634) *
                      C50696 * C50684)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                      C50938 * C294 + C25657 * C587 + C25652 * C592) *
                         C696 +
                     (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                      C50938 * C304 + C25657 * C593 + C25652 * C602) *
                         C50607) *
                        C50795 * C25653 +
                    ((C25697 + C25696 + C25695) * C696 +
                     (C25700 + C25699 + C25698) * C50607) *
                        C50795 * C50634) *
                       C941 -
                   (((C26070 + C26069 + C26068) * C50607 +
                     (C26067 + C26066 + C26065) * C696) *
                        C50795 * C50634 +
                    ((C25657 * C833 + C25652 * C842 + C25656 * C820 +
                      C50938 * C835 + C25655 * C441 + C50946 * C452) *
                         C50607 +
                     (C25657 * C818 + C25652 * C834 + C25656 * C811 +
                      C50938 * C819 + C25655 * C435 + C50946 * C442) *
                         C696) *
                        C50795 * C25653) *
                       C942 +
                   (((C25655 * C944 + C50946 * C949 + C25656 * C1083 +
                      C50938 * C1091 + C25657 * C3483 + C25652 * C3489) *
                         C696 +
                     (C25655 * C950 + C50946 * C959 + C25656 * C1090 +
                      C50938 * C1095 + C25657 * C3488 + C25652 * C3492) *
                         C50607) *
                        C50795 * C25653 +
                    ((C26645 + C26644 + C26643) * C696 +
                     (C26648 + C26647 + C26646) * C50607) *
                        C50795 * C50634) *
                       C943) *
                      C50899 +
                  ((((C25655 * C811 + C50946 * C819 + C25656 * C818 +
                      C50938 * C834 + C25657 * C3155 + C25652 * C3161) *
                         C696 +
                     (C25655 * C820 + C50946 * C835 + C25656 * C833 +
                      C50938 * C842 + C25657 * C3160 + C25652 * C3164) *
                         C50607) *
                        C50795 * C25653 +
                    ((C25655 * C812 + C50946 * C821 + C25656 * C817 +
                      C50938 * C832 + C25657 * C3154 + C25652 * C3159) *
                         C696 +
                     (C25655 * C822 + C50946 * C836 + C25656 * C831 +
                      C50938 * C841 + C25657 * C3158 + C25652 * C3163) *
                         C50607) *
                        C50795 * C50634) *
                       C942 -
                   (((C25888 + C25887 + C25886) * C50607 +
                     (C25885 + C25884 + C25883) * C696) *
                        C50795 * C50634 +
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C50607 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C696) *
                        C50795 * C25653) *
                       C941 -
                   (((C25657 * C9203 + C25652 * C9207 + C25656 * C3486 +
                      C50938 * C3491 + C25655 * C1088 + C50946 * C1094) *
                         C50607 +
                     (C25657 * C9201 + C25652 * C9204 + C25656 * C3482 +
                      C50938 * C3487 + C25655 * C1082 + C50946 * C1089) *
                         C696) *
                        C50795 * C50634 +
                    ((C25657 * C9205 + C25652 * C9208 + C25656 * C3488 +
                      C50938 * C3492 + C25655 * C1090 + C50946 * C1095) *
                         C50607 +
                     (C25657 * C9202 + C25652 * C9206 + C25656 * C3483 +
                      C50938 * C3489 + C25655 * C1083 + C50946 * C1091) *
                         C696) *
                        C50795 * C25653) *
                       C943) *
                      C50684)) /
                    (p * q * std::sqrt(p + q));
    d2ee[23] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                      C50938 * C294 + C25657 * C587 + C25652 * C592) *
                         C696 +
                     (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                      C50938 * C304 + C25657 * C593 + C25652 * C602) *
                         C50607) *
                        C50795 * C25653 +
                    ((C25697 + C25696 + C25695) * C696 +
                     (C25700 + C25699 + C25698) * C50607) *
                        C50795 * C50634) *
                       C50900 -
                   (((C26070 + C26069 + C26068) * C50607 +
                     (C26067 + C26066 + C26065) * C696) *
                        C50795 * C50634 +
                    ((C25657 * C833 + C25652 * C842 + C25656 * C820 +
                      C50938 * C835 + C25655 * C441 + C50946 * C452) *
                         C50607 +
                     (C25657 * C818 + C25652 * C834 + C25656 * C811 +
                      C50938 * C819 + C25655 * C435 + C50946 * C442) *
                         C696) *
                        C50795 * C25653) *
                       C50708) *
                      C582 +
                  ((((C25655 * C811 + C50946 * C819 + C25656 * C818 +
                      C50938 * C834 + C25657 * C3155 + C25652 * C3161) *
                         C696 +
                     (C25655 * C820 + C50946 * C835 + C25656 * C833 +
                      C50938 * C842 + C25657 * C3160 + C25652 * C3164) *
                         C50607) *
                        C50795 * C25653 +
                    ((C25655 * C812 + C50946 * C821 + C25656 * C817 +
                      C50938 * C832 + C25657 * C3154 + C25652 * C3159) *
                         C696 +
                     (C25655 * C822 + C50946 * C836 + C25656 * C831 +
                      C50938 * C841 + C25657 * C3158 + C25652 * C3163) *
                         C50607) *
                        C50795 * C50634) *
                       C50708 -
                   (((C25888 + C25887 + C25886) * C50607 +
                     (C25885 + C25884 + C25883) * C696) *
                        C50795 * C50634 +
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C50607 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C696) *
                        C50795 * C25653) *
                       C50900) *
                      C583 +
                  ((((C25655 * C587 + C50946 * C592 + C25656 * C700 +
                      C50938 * C708 + C25657 * C2997 + C25652 * C3003) *
                         C696 +
                     (C25655 * C593 + C50946 * C602 + C25656 * C707 +
                      C50938 * C712 + C25657 * C3002 + C25652 * C3006) *
                         C50607) *
                        C50795 * C25653 +
                    ((C26237 + C26236 + C26235) * C696 +
                     (C26240 + C26239 + C26238) * C50607) *
                        C50795 * C50634) *
                       C50900 -
                   (((C25657 * C8885 + C25652 * C8889 + C25656 * C3158 +
                      C50938 * C3163 + C25655 * C831 + C50946 * C841) *
                         C50607 +
                     (C25657 * C8883 + C25652 * C8886 + C25656 * C3154 +
                      C50938 * C3159 + C25655 * C817 + C50946 * C832) *
                         C696) *
                        C50795 * C50634 +
                    ((C25657 * C8887 + C25652 * C8890 + C25656 * C3160 +
                      C50938 * C3164 + C25655 * C833 + C50946 * C842) *
                         C50607 +
                     (C25657 * C8884 + C25652 * C8888 + C25656 * C3155 +
                      C50938 * C3161 + C25655 * C818 + C50946 * C834) *
                         C696) *
                        C50795 * C25653) *
                       C50708) *
                      C584)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C283 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C278 -
                    (C25695 + C25696 + C25697) * C284 -
                    (C25698 + C25699 + C25700) * C279 +
                    (C25701 + C25702 + C25703) * C285 +
                    (C25704 + C25705 + C25706) * C280) *
                       C50795 * C25653 +
                   ((C25697 + C25696 + C25695) * C283 +
                    (C25700 + C25699 + C25698) * C278 -
                    (C25703 + C25702 + C25701) * C284 -
                    (C25706 + C25705 + C25704) * C279 +
                    (C25709 + C25708 + C25707) * C285 +
                    (C25712 + C25711 + C25710) * C280) *
                       C50795 * C50634) *
                      C50900 +
                  (((C26065 + C26066 + C26067) * C284 -
                    ((C25657 * C833 + C25652 * C842 + C25656 * C820 +
                      C50938 * C835 + C25655 * C441 + C50946 * C452) *
                         C278 +
                     (C25657 * C818 + C25652 * C834 + C25656 * C811 +
                      C50938 * C819 + C25655 * C435 + C50946 * C442) *
                         C283) +
                    (C26068 + C26069 + C26070) * C279 -
                    (C26071 + C26072 + C26073) * C285 -
                    (C26074 + C26075 + C26076) * C280) *
                       C50795 * C25653 +
                   ((C26073 + C26072 + C26071) * C284 -
                    ((C26070 + C26069 + C26068) * C278 +
                     (C26067 + C26066 + C26065) * C283) +
                    (C26076 + C26075 + C26074) * C279 -
                    (C25657 * C815 + C25652 * C828 + C25656 * C814 +
                     C50938 * C825 + C25655 * C437 + C50946 * C446) *
                        C285 -
                    (C25657 * C827 + C25652 * C839 + C25656 * C826 +
                     C50938 * C838 + C25655 * C447 + C50946 * C455) *
                        C280) *
                       C50795 * C50634) *
                      C50708) *
                 C50670) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C696 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C50607) *
                       C50795 * C25653 +
                   ((C25697 + C25696 + C25695) * C696 +
                    (C25700 + C25699 + C25698) * C50607) *
                       C50795 * C50634) *
                      C1162 -
                  (((C26070 + C26069 + C26068) * C50607 +
                    (C26067 + C26066 + C26065) * C696) *
                       C50795 * C50634 +
                   ((C25657 * C833 + C25652 * C842 + C25656 * C820 +
                     C50938 * C835 + C25655 * C441 + C50946 * C452) *
                        C50607 +
                    (C25657 * C818 + C25652 * C834 + C25656 * C811 +
                     C50938 * C819 + C25655 * C435 + C50946 * C442) *
                        C696) *
                       C50795 * C25653) *
                      C1163 +
                  (((C25655 * C944 + C50946 * C949 + C25656 * C1083 +
                     C50938 * C1091 + C25657 * C3483 + C25652 * C3489) *
                        C696 +
                    (C25655 * C950 + C50946 * C959 + C25656 * C1090 +
                     C50938 * C1095 + C25657 * C3488 + C25652 * C3492) *
                        C50607) *
                       C50795 * C25653 +
                   ((C26645 + C26644 + C26643) * C696 +
                    (C26648 + C26647 + C26646) * C50607) *
                       C50795 * C50634) *
                      C1164 -
                  (((C25657 * C9309 + C25652 * C9313 + C25656 * C3596 +
                     C50938 * C3601 + C25655 * C1174 + C50946 * C1180) *
                        C50607 +
                    (C25657 * C9307 + C25652 * C9310 + C25656 * C3592 +
                     C50938 * C3597 + C25655 * C1168 + C50946 * C1175) *
                        C696) *
                       C50795 * C50634 +
                   ((C25657 * C9311 + C25652 * C9314 + C25656 * C3598 +
                     C50938 * C3602 + C25655 * C1176 + C50946 * C1181) *
                        C50607 +
                    (C25657 * C9308 + C25652 * C9312 + C25656 * C3593 +
                     C50938 * C3599 + C25655 * C1169 + C50946 * C1177) *
                        C696) *
                       C50795 * C25653) *
                      C1165) *
                 C50670) /
                    (p * q * std::sqrt(p + q));
    d2ee[24] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C1285 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C50942 -
                    (C25695 + C25696 + C25697) * C1286 -
                    (C25698 + C25699 + C25700) * C50926 +
                    (C25701 + C25702 + C25703) * C1287 +
                    (C25704 + C25705 + C25706) * C1282) *
                       C50795 * C25653 +
                   ((C25697 + C25696 + C25695) * C1285 +
                    (C25700 + C25699 + C25698) * C50942 -
                    (C25703 + C25702 + C25701) * C1286 -
                    (C25706 + C25705 + C25704) * C50926 +
                    (C25709 + C25708 + C25707) * C1287 +
                    (C25712 + C25711 + C25710) * C1282) *
                       C50795 * C50634) *
                      C1643 +
                  (((C26065 + C26066 + C26067) * C1286 -
                    ((C25657 * C833 + C25652 * C842 + C25656 * C820 +
                      C50938 * C835 + C25655 * C441 + C50946 * C452) *
                         C50942 +
                     (C25657 * C818 + C25652 * C834 + C25656 * C811 +
                      C50938 * C819 + C25655 * C435 + C50946 * C442) *
                         C1285) +
                    (C26068 + C26069 + C26070) * C50926 -
                    (C26071 + C26072 + C26073) * C1287 -
                    (C26074 + C26075 + C26076) * C1282) *
                       C50795 * C25653 +
                   ((C26073 + C26072 + C26071) * C1286 -
                    ((C26070 + C26069 + C26068) * C50942 +
                     (C26067 + C26066 + C26065) * C1285) +
                    (C26076 + C26075 + C26074) * C50926 -
                    (C25657 * C815 + C25652 * C828 + C25656 * C814 +
                     C50938 * C825 + C25655 * C437 + C50946 * C446) *
                        C1287 -
                    (C25657 * C827 + C25652 * C839 + C25656 * C826 +
                     C50938 * C838 + C25655 * C447 + C50946 * C455) *
                        C1282) *
                       C50795 * C50634) *
                      C50708) *
                 C50670) /
                (p * q * std::sqrt(p + q));
    d2ee[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                      C50938 * C294 + C25657 * C587 + C25652 * C592) *
                         C1391 +
                     (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                      C50938 * C304 + C25657 * C593 + C25652 * C602) *
                         C1386 -
                     (C25695 + C25696 + C25697) * C1392 -
                     (C25698 + C25699 + C25700) * C50612) *
                        C50795 * C25653 +
                    ((C25697 + C25696 + C25695) * C1391 +
                     (C25700 + C25699 + C25698) * C1386 -
                     (C25703 + C25702 + C25701) * C1392 -
                     (C25706 + C25705 + C25704) * C50612) *
                        C50795 * C50634) *
                       C1643 +
                   (((C26065 + C26066 + C26067) * C1392 -
                     ((C25657 * C833 + C25652 * C842 + C25656 * C820 +
                       C50938 * C835 + C25655 * C441 + C50946 * C452) *
                          C1386 +
                      (C25657 * C818 + C25652 * C834 + C25656 * C811 +
                       C50938 * C819 + C25655 * C435 + C50946 * C442) *
                          C1391) +
                     (C26068 + C26069 + C26070) * C50612) *
                        C50795 * C25653 +
                    ((C26073 + C26072 + C26071) * C1392 -
                     ((C26070 + C26069 + C26068) * C1386 +
                      (C26067 + C26066 + C26065) * C1391) +
                     (C26076 + C26075 + C26074) * C50612) *
                        C50795 * C50634) *
                       C50708) *
                      C50899 +
                  ((((C25883 + C25884 + C25885) * C1392 -
                     ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                       C50938 * C602 + C25655 * C293 + C50946 * C304) *
                          C1386 +
                      (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                       C50938 * C592 + C25655 * C287 + C50946 * C294) *
                          C1391) +
                     (C25886 + C25887 + C25888) * C50612) *
                        C50795 * C25653 +
                    ((C25891 + C25890 + C25889) * C1392 -
                     ((C25888 + C25887 + C25886) * C1386 +
                      (C25885 + C25884 + C25883) * C1391) +
                     (C25894 + C25893 + C25892) * C50612) *
                        C50795 * C50634) *
                       C1643 +
                   (((C25655 * C811 + C50946 * C819 + C25656 * C818 +
                      C50938 * C834 + C25657 * C3155 + C25652 * C3161) *
                         C1391 +
                     (C25655 * C820 + C50946 * C835 + C25656 * C833 +
                      C50938 * C842 + C25657 * C3160 + C25652 * C3164) *
                         C1386 -
                     (C27391 + C27392 + C27393) * C1392 -
                     (C27394 + C27395 + C27396) * C50612) *
                        C50795 * C25653 +
                    ((C27393 + C27392 + C27391) * C1391 +
                     (C27396 + C27395 + C27394) * C1386 -
                     (C25657 * C3153 + C25652 * C3157 + C25656 * C816 +
                      C50938 * C830 + C25655 * C813 + C50946 * C823) *
                         C1392 -
                     (C25657 * C3156 + C25652 * C3162 + C25656 * C829 +
                      C50938 * C840 + C25655 * C824 + C50946 * C837) *
                         C50612) *
                        C50795 * C50634) *
                       C50708) *
                      C50684)) /
                (p * q * std::sqrt(p + q));
    d2ee[26] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C1391 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C1386 -
                    (C25695 + C25696 + C25697) * C1392 -
                    (C25698 + C25699 + C25700) * C50612) *
                       C50795 * C25653 +
                   ((C25697 + C25696 + C25695) * C1391 +
                    (C25700 + C25699 + C25698) * C1386 -
                    (C25703 + C25702 + C25701) * C1392 -
                    (C25706 + C25705 + C25704) * C50612) *
                       C50795 * C50634) *
                      C50945 +
                  (((C26065 + C26066 + C26067) * C1392 -
                    ((C25657 * C833 + C25652 * C842 + C25656 * C820 +
                      C50938 * C835 + C25655 * C441 + C50946 * C452) *
                         C1386 +
                     (C25657 * C818 + C25652 * C834 + C25656 * C811 +
                      C50938 * C819 + C25655 * C435 + C50946 * C442) *
                         C1391) +
                    (C26068 + C26069 + C26070) * C50612) *
                       C50795 * C25653 +
                   ((C26073 + C26072 + C26071) * C1392 -
                    ((C26070 + C26069 + C26068) * C1386 +
                     (C26067 + C26066 + C26065) * C1391) +
                    (C26076 + C26075 + C26074) * C50612) *
                       C50795 * C50634) *
                      C50935 +
                  (((C25655 * C944 + C50946 * C949 + C25656 * C1083 +
                     C50938 * C1091 + C25657 * C3483 + C25652 * C3489) *
                        C1391 +
                    (C25655 * C950 + C50946 * C959 + C25656 * C1090 +
                     C50938 * C1095 + C25657 * C3488 + C25652 * C3492) *
                        C1386 -
                    (C26643 + C26644 + C26645) * C1392 -
                    (C26646 + C26647 + C26648) * C50612) *
                       C50795 * C25653 +
                   ((C26645 + C26644 + C26643) * C1391 +
                    (C26648 + C26647 + C26646) * C1386 -
                    (C25657 * C3481 + C25652 * C3485 + C25656 * C1081 +
                     C50938 * C1087 + C25655 * C946 + C50946 * C953) *
                        C1392 -
                    (C25657 * C3484 + C25652 * C3490 + C25656 * C1086 +
                     C50938 * C1093 + C25655 * C954 + C50946 * C961) *
                        C50612) *
                       C50795 * C50634) *
                      C1875) *
                 C50670) /
                (p * q * std::sqrt(p + q));
    d2ee[27] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                    C50938 * C294 + C25657 * C587 + C25652 * C592) *
                       C118 +
                   (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                    C50938 * C304 + C25657 * C593 + C25652 * C602) *
                       C106 -
                   (C25695 + C25696 + C25697) * C119 -
                   (C25698 + C25699 + C25700) * C107 +
                   (C25701 + C25702 + C25703) * C120 +
                   (C25704 + C25705 + C25706) * C108 -
                   (C25707 + C25708 + C25709) * C121 -
                   (C25710 + C25711 + C25712) * C109) *
                      C50795 * C25653 +
                  ((C25697 + C25696 + C25695) * C118 +
                   (C25700 + C25699 + C25698) * C106 -
                   (C25703 + C25702 + C25701) * C119 -
                   (C25706 + C25705 + C25704) * C107 +
                   (C25709 + C25708 + C25707) * C120 +
                   (C25712 + C25711 + C25710) * C108 -
                   (C25657 * C591 + C25652 * C600 + C25656 * C290 +
                    C50938 * C300 + C25655 * C126 + C50946 * C137) *
                       C121 -
                   (C25657 * C601 + C25652 * C606 + C25656 * C301 +
                    C50938 * C308 + C25655 * C138 + C50946 * C147) *
                       C109) *
                      C50795 * C50634) *
                 C50696 * C50670) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C49720 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C50884 -
                    (C25695 + C25696 + C25697) * C49713 -
                    (C25698 + C25699 + C25700) * C50612) *
                       C50795 * C25653 +
                   ((C25697 + C25696 + C25695) * C49720 +
                    (C25700 + C25699 + C25698) * C50884 -
                    (C25703 + C25702 + C25701) * C49713 -
                    (C25706 + C25705 + C25704) * C50612) *
                       C50795 * C50634) *
                      C50696 * C582 +
                  (((C25883 + C25884 + C25885) * C49713 -
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C50884 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C49720) +
                    (C25886 + C25887 + C25888) * C50612) *
                       C50795 * C25653 +
                   ((C25891 + C25890 + C25889) * C49713 -
                    ((C25888 + C25887 + C25886) * C50884 +
                     (C25885 + C25884 + C25883) * C49720) +
                    (C25894 + C25893 + C25892) * C50612) *
                       C50795 * C50634) *
                      C50696 * C583 +
                  (((C25655 * C587 + C50946 * C592 + C25656 * C700 +
                     C50938 * C708 + C25657 * C2997 + C25652 * C3003) *
                        C49720 +
                    (C25655 * C593 + C50946 * C602 + C25656 * C707 +
                     C50938 * C712 + C25657 * C3002 + C25652 * C3006) *
                        C50884 -
                    (C26235 + C26236 + C26237) * C49713 -
                    (C26238 + C26239 + C26240) * C50612) *
                       C50795 * C25653 +
                   ((C26237 + C26236 + C26235) * C49720 +
                    (C26240 + C26239 + C26238) * C50884 -
                    (C25657 * C2995 + C25652 * C2999 + C25656 * C698 +
                     C50938 * C704 + C25655 * C589 + C50946 * C596) *
                        C49713 -
                    (C25657 * C2998 + C25652 * C3004 + C25656 * C703 +
                     C50938 * C710 + C25655 * C597 + C50946 * C604) *
                        C50612) *
                       C50795 * C50634) *
                      C50696 * C584)) /
                    (p * q * std::sqrt(p + q));
    d2ee[28] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C283 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C278 -
                    (C25695 + C25696 + C25697) * C284 -
                    (C25698 + C25699 + C25700) * C279 +
                    (C25701 + C25702 + C25703) * C285 +
                    (C25704 + C25705 + C25706) * C280) *
                       C50795 * C25653 +
                   ((C25697 + C25696 + C25695) * C283 +
                    (C25700 + C25699 + C25698) * C278 -
                    (C25703 + C25702 + C25701) * C284 -
                    (C25706 + C25705 + C25704) * C279 +
                    (C25709 + C25708 + C25707) * C285 +
                    (C25712 + C25711 + C25710) * C280) *
                       C50795 * C50634) *
                      C50696 * C50899 +
                  (((C25883 + C25884 + C25885) * C284 -
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C278 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C283) +
                    (C25886 + C25887 + C25888) * C279 -
                    (C25889 + C25890 + C25891) * C285 -
                    (C25892 + C25893 + C25894) * C280) *
                       C50795 * C25653 +
                   ((C25891 + C25890 + C25889) * C284 -
                    ((C25888 + C25887 + C25886) * C278 +
                     (C25885 + C25884 + C25883) * C283) +
                    (C25894 + C25893 + C25892) * C279 -
                    (C25657 * C697 + C25652 * C702 + C25656 * C590 +
                     C50938 * C598 + C25655 * C289 + C50946 * C298) *
                        C285 -
                    (C25657 * C701 + C25652 * C709 + C25656 * C599 +
                     C50938 * C605 + C25655 * C299 + C50946 * C307) *
                        C280) *
                       C50795 * C50634) *
                      C50696 * C50684)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C696 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C50607) *
                       C50795 * C25653 +
                   ((C25697 + C25696 + C25695) * C696 +
                    (C25700 + C25699 + C25698) * C50607) *
                       C50795 * C50634) *
                      C50696 * C692 -
                  (((C25888 + C25887 + C25886) * C50607 +
                    (C25885 + C25884 + C25883) * C696) *
                       C50795 * C50634 +
                   ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                     C50938 * C602 + C25655 * C293 + C50946 * C304) *
                        C50607 +
                    (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                     C50938 * C592 + C25655 * C287 + C50946 * C294) *
                        C696) *
                       C50795 * C25653) *
                      C50696 * C693 +
                  (((C25655 * C587 + C50946 * C592 + C25656 * C700 +
                     C50938 * C708 + C25657 * C2997 + C25652 * C3003) *
                        C696 +
                    (C25655 * C593 + C50946 * C602 + C25656 * C707 +
                     C50938 * C712 + C25657 * C3002 + C25652 * C3006) *
                        C50607) *
                       C50795 * C25653 +
                   ((C26237 + C26236 + C26235) * C696 +
                    (C26240 + C26239 + C26238) * C50607) *
                       C50795 * C50634) *
                      C50696 * C694 -
                  (((C25657 * C8731 + C25652 * C8735 + C25656 * C3000 +
                     C50938 * C3005 + C25655 * C705 + C50946 * C711) *
                        C50607 +
                    (C25657 * C8729 + C25652 * C8732 + C25656 * C2996 +
                     C50938 * C3001 + C25655 * C699 + C50946 * C706) *
                        C696) *
                       C50795 * C50634 +
                   ((C25657 * C8733 + C25652 * C8736 + C25656 * C3002 +
                     C50938 * C3006 + C25655 * C707 + C50946 * C712) *
                        C50607 +
                    (C25657 * C8730 + C25652 * C8734 + C25656 * C2997 +
                     C50938 * C3003 + C25655 * C700 + C50946 * C708) *
                        C696) *
                       C50795 * C25653) *
                      C50696 * C695)) /
                    (p * q * std::sqrt(p + q));
    d2ee[29] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C283 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C278 -
                    (C25695 + C25696 + C25697) * C284 -
                    (C25698 + C25699 + C25700) * C279 +
                    (C25701 + C25702 + C25703) * C285 +
                    (C25704 + C25705 + C25706) * C280) *
                       C50795 * C25653 +
                   ((C25697 + C25696 + C25695) * C283 +
                    (C25700 + C25699 + C25698) * C278 -
                    (C25703 + C25702 + C25701) * C284 -
                    (C25706 + C25705 + C25704) * C279 +
                    (C25709 + C25708 + C25707) * C285 +
                    (C25712 + C25711 + C25710) * C280) *
                       C50795 * C50634) *
                      C50900 +
                  (((C26065 + C26066 + C26067) * C284 -
                    ((C25657 * C833 + C25652 * C842 + C25656 * C820 +
                      C50938 * C835 + C25655 * C441 + C50946 * C452) *
                         C278 +
                     (C25657 * C818 + C25652 * C834 + C25656 * C811 +
                      C50938 * C819 + C25655 * C435 + C50946 * C442) *
                         C283) +
                    (C26068 + C26069 + C26070) * C279 -
                    (C26071 + C26072 + C26073) * C285 -
                    (C26074 + C26075 + C26076) * C280) *
                       C50795 * C25653 +
                   ((C26073 + C26072 + C26071) * C284 -
                    ((C26070 + C26069 + C26068) * C278 +
                     (C26067 + C26066 + C26065) * C283) +
                    (C26076 + C26075 + C26074) * C279 -
                    (C25657 * C815 + C25652 * C828 + C25656 * C814 +
                     C50938 * C825 + C25655 * C437 + C50946 * C446) *
                        C285 -
                    (C25657 * C827 + C25652 * C839 + C25656 * C826 +
                     C50938 * C838 + C25655 * C447 + C50946 * C455) *
                        C280) *
                       C50795 * C50634) *
                      C50708) *
                 C50670) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                      C50938 * C294 + C25657 * C587 + C25652 * C592) *
                         C696 +
                     (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                      C50938 * C304 + C25657 * C593 + C25652 * C602) *
                         C50607) *
                        C50795 * C25653 +
                    ((C25697 + C25696 + C25695) * C696 +
                     (C25700 + C25699 + C25698) * C50607) *
                        C50795 * C50634) *
                       C50900 -
                   (((C26070 + C26069 + C26068) * C50607 +
                     (C26067 + C26066 + C26065) * C696) *
                        C50795 * C50634 +
                    ((C25657 * C833 + C25652 * C842 + C25656 * C820 +
                      C50938 * C835 + C25655 * C441 + C50946 * C452) *
                         C50607 +
                     (C25657 * C818 + C25652 * C834 + C25656 * C811 +
                      C50938 * C819 + C25655 * C435 + C50946 * C442) *
                         C696) *
                        C50795 * C25653) *
                       C50708) *
                      C582 +
                  ((((C25655 * C811 + C50946 * C819 + C25656 * C818 +
                      C50938 * C834 + C25657 * C3155 + C25652 * C3161) *
                         C696 +
                     (C25655 * C820 + C50946 * C835 + C25656 * C833 +
                      C50938 * C842 + C25657 * C3160 + C25652 * C3164) *
                         C50607) *
                        C50795 * C25653 +
                    ((C25655 * C812 + C50946 * C821 + C25656 * C817 +
                      C50938 * C832 + C25657 * C3154 + C25652 * C3159) *
                         C696 +
                     (C25655 * C822 + C50946 * C836 + C25656 * C831 +
                      C50938 * C841 + C25657 * C3158 + C25652 * C3163) *
                         C50607) *
                        C50795 * C50634) *
                       C50708 -
                   (((C25888 + C25887 + C25886) * C50607 +
                     (C25885 + C25884 + C25883) * C696) *
                        C50795 * C50634 +
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C50607 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C696) *
                        C50795 * C25653) *
                       C50900) *
                      C583 +
                  ((((C25655 * C587 + C50946 * C592 + C25656 * C700 +
                      C50938 * C708 + C25657 * C2997 + C25652 * C3003) *
                         C696 +
                     (C25655 * C593 + C50946 * C602 + C25656 * C707 +
                      C50938 * C712 + C25657 * C3002 + C25652 * C3006) *
                         C50607) *
                        C50795 * C25653 +
                    ((C26237 + C26236 + C26235) * C696 +
                     (C26240 + C26239 + C26238) * C50607) *
                        C50795 * C50634) *
                       C50900 -
                   (((C25657 * C8885 + C25652 * C8889 + C25656 * C3158 +
                      C50938 * C3163 + C25655 * C831 + C50946 * C841) *
                         C50607 +
                     (C25657 * C8883 + C25652 * C8886 + C25656 * C3154 +
                      C50938 * C3159 + C25655 * C817 + C50946 * C832) *
                         C696) *
                        C50795 * C50634 +
                    ((C25657 * C8887 + C25652 * C8890 + C25656 * C3160 +
                      C50938 * C3164 + C25655 * C833 + C50946 * C842) *
                         C50607 +
                     (C25657 * C8884 + C25652 * C8888 + C25656 * C3155 +
                      C50938 * C3161 + C25655 * C818 + C50946 * C834) *
                         C696) *
                        C50795 * C25653) *
                       C50708) *
                      C584)) /
                    (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C1285 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50942 -
             (C22855 + C22856) * C1286 - (C22857 + C22858) * C50926 +
             C22871 * C1287 + C22872 * C1282) *
                C50913 +
            ((C28901 + C28902) * C1285 + (C28903 + C28904) * C50942 -
             C28895 * C1286 - C28896 * C50926 + C28897 * C1287 +
             C28898 * C1282) *
                C50807) *
               C25653 +
           (((C22856 + C22855) * C1285 + (C22858 + C22857) * C50942 -
             (C22860 + C22859) * C1286 - (C22862 + C22861) * C50926 +
             (C22864 + C22863) * C1287 + (C22866 + C22865) * C1282) *
                C50913 +
            (C28899 * C1285 + C28900 * C50942 - C23241 * C1286 -
             C23242 * C50926 + (C23238 + C23237) * C1287 +
             (C23240 + C23239) * C1282) *
                C50807) *
               C50634) *
              C50696 * C1283 +
          ((((C23045 + C23046) * C1286 -
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C50942 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C1285) +
             (C23047 + C23048) * C50926 - C23057 * C1287 - C23058 * C1282) *
                C50913 +
            ((C24574 + C24573) * C1286 -
             ((C29454 + C29453) * C50942 + (C29452 + C29451) * C1285) +
             (C24576 + C24575) * C50926 - (C24577 + C24578) * C1287 -
             (C24579 + C24580) * C1282) *
                C50807) *
               C25653 +
           (((C23050 + C23049) * C1286 -
             ((C23048 + C23047) * C50942 + (C23046 + C23045) * C1285) +
             (C23052 + C23051) * C50926 - (C23053 + C23054) * C1287 -
             (C23055 + C23056) * C1282) *
                C50913 +
            ((C24578 + C24577) * C1286 -
             ((C24575 + C24576) * C50942 + (C24573 + C24574) * C1285) +
             (C24580 + C24579) * C50926 -
             (C22821 * C815 + C50781 * C828 + C22820 * C814 + C22815 * C825) *
                 C1287 -
             (C22821 * C827 + C50781 * C839 + C22820 * C826 + C22815 * C838) *
                 C1282) *
                C50807) *
               C50634) *
              C50696 * C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C1391 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C1386 -
             (C22855 + C22856) * C1392 - (C22857 + C22858) * C50612) *
                C50913 +
            ((C28901 + C28902) * C1391 + (C28903 + C28904) * C1386 -
             C28895 * C1392 - C28896 * C50612) *
                C50807) *
               C25653 +
           (((C22856 + C22855) * C1391 + (C22858 + C22857) * C1386 -
             (C22860 + C22859) * C1392 - (C22862 + C22861) * C50612) *
                C50913 +
            (C28899 * C1391 + C28900 * C1386 - C23241 * C1392 -
             C23242 * C50612) *
                C50807) *
               C50634) *
              C50696 * C50944 +
          ((((C23045 + C23046) * C1392 -
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C1386 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C1391) +
             (C23047 + C23048) * C50612) *
                C50913 +
            ((C24574 + C24573) * C1392 -
             ((C29454 + C29453) * C1386 + (C29452 + C29451) * C1391) +
             (C24576 + C24575) * C50612) *
                C50807) *
               C25653 +
           (((C23050 + C23049) * C1392 -
             ((C23048 + C23047) * C1386 + (C23046 + C23045) * C1391) +
             (C23052 + C23051) * C50612) *
                C50913 +
            ((C24578 + C24577) * C1392 -
             ((C24575 + C24576) * C1386 + (C24573 + C24574) * C1391) +
             (C24580 + C24579) * C50612) *
                C50807) *
               C50634) *
              C50696 * C50932 +
          ((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                 C1391 +
             (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                 C1386 -
             (C23405 + C23406) * C1392 - (C23407 + C23408) * C50612) *
                C50913 +
            ((C29455 + C29456) * C1391 + (C29457 + C29458) * C1386 -
             (C29107 + C29108) * C1392 - (C29109 + C29110) * C50612) *
                C50807) *
               C25653 +
           (((C23406 + C23405) * C1391 + (C23408 + C23407) * C1386 -
             (C23409 + C23410) * C1392 - (C23411 + C23412) * C50612) *
                C50913 +
            ((C29108 + C29107) * C1391 + (C29110 + C29109) * C1386 -
             (C22821 * C3153 + C50781 * C3157 + C22820 * C816 + C22815 * C830) *
                 C1392 -
             (C22821 * C3156 + C50781 * C3162 + C22820 * C829 + C22815 * C840) *
                 C50612) *
                C50807) *
               C50634) *
              C50696 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                  C1391 +
              (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                  C1386 -
              (C22855 + C22856) * C1392 - (C22857 + C22858) * C50612) *
                 C50913 +
             ((C28901 + C28902) * C1391 + (C28903 + C28904) * C1386 -
              C28895 * C1392 - C28896 * C50612) *
                 C50807) *
                C25653 +
            (((C22856 + C22855) * C1391 + (C22858 + C22857) * C1386 -
              (C22860 + C22859) * C1392 - (C22862 + C22861) * C50612) *
                 C50913 +
             (C28899 * C1391 + C28900 * C1386 - C23241 * C1392 -
              C23242 * C50612) *
                 C50807) *
                C50634) *
               C50900 +
           (((C28899 * C1392 -
              ((C28904 + C28903) * C1386 + (C28902 + C28901) * C1391) +
              C28900 * C50612) *
                 C50913 +
             (C29653 * C1392 -
              ((C29673 + C29674) * C1386 + (C29675 + C29676) * C1391) +
              C29662 * C50612) *
                 C50807) *
                C25653 +
            ((C28897 * C1392 - (C28896 * C1386 + C28895 * C1391) +
              C28898 * C50612) *
                 C50913 +
             ((C23824 + C23823) * C1392 - (C29663 * C1386 + C29664 * C1391) +
              (C23826 + C23825) * C50612) *
                 C50807) *
                C50634) *
               C50708) *
              C1283 +
          (((((C23045 + C23046) * C1392 -
              ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                   C1386 +
               (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                   C1391) +
              (C23047 + C23048) * C50612) *
                 C50913 +
             (C30687 * C1392 -
              ((C29454 + C29453) * C1386 + (C29452 + C29451) * C1391) +
              C30688 * C50612) *
                 C50807) *
                C25653 +
            (((C23050 + C23049) * C1392 -
              ((C23048 + C23047) * C1386 + (C23046 + C23045) * C1391) +
              (C23052 + C23051) * C50612) *
                 C50913 +
             ((C24578 + C24577) * C1392 - (C30689 * C1386 + C30690 * C1391) +
              (C24580 + C24579) * C50612) *
                 C50807) *
                C50634) *
               C50900 +
           ((((C29451 + C29452) * C1391 + (C29453 + C29454) * C1386 -
              C30690 * C1392 - C30689 * C50612) *
                 C50913 +
             ((C29891 + C29892) * C1391 + (C29893 + C29894) * C1386 -
              (C29896 + C29895) * C1392 - (C29898 + C29897) * C50612) *
                 C50807) *
                C25653 +
            ((C30687 * C1391 + C30688 * C1386 - (C24577 + C24578) * C1392 -
              (C24579 + C24580) * C50612) *
                 C50913 +
             ((C29895 + C29896) * C1391 + (C29897 + C29898) * C1386 -
              (C22821 * C3481 + C50781 * C3485 + C22820 * C1081 +
               C22815 * C1087) *
                  C1392 -
              (C22821 * C3484 + C50781 * C3490 + C22820 * C1086 +
               C22815 * C1093) *
                  C50612) *
                 C50807) *
                C50634) *
               C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                  C49720 +
              (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                  C50884 -
              (C22855 + C22856) * C49713 - (C22857 + C22858) * C50612) *
                 C50913 +
             ((C28901 + C28902) * C49720 + (C28903 + C28904) * C50884 -
              C28895 * C49713 - C28896 * C50612) *
                 C50807) *
                C25653 +
            (((C22856 + C22855) * C49720 + (C22858 + C22857) * C50884 -
              (C22860 + C22859) * C49713 - (C22862 + C22861) * C50612) *
                 C50913 +
             (C28899 * C49720 + C28900 * C50884 - C23241 * C49713 -
              C23242 * C50612) *
                 C50807) *
                C50634) *
               C1643 +
           (((C28899 * C49713 -
              ((C28904 + C28903) * C50884 + (C28902 + C28901) * C49720) +
              C28900 * C50612) *
                 C50913 +
             (C29653 * C49713 -
              ((C29673 + C29674) * C50884 + (C29675 + C29676) * C49720) +
              C29662 * C50612) *
                 C50807) *
                C25653 +
            ((C28897 * C49713 - (C28896 * C50884 + C28895 * C49720) +
              C28898 * C50612) *
                 C50913 +
             ((C23824 + C23823) * C49713 - (C29663 * C50884 + C29664 * C49720) +
              (C23826 + C23825) * C50612) *
                 C50807) *
                C50634) *
               C50708) *
              C1283 +
          (((((C23045 + C23046) * C49713 -
              ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                   C50884 +
               (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                   C49720) +
              (C23047 + C23048) * C50612) *
                 C50913 +
             (C30687 * C49713 -
              ((C29454 + C29453) * C50884 + (C29452 + C29451) * C49720) +
              C30688 * C50612) *
                 C50807) *
                C25653 +
            (((C23050 + C23049) * C49713 -
              ((C23048 + C23047) * C50884 + (C23046 + C23045) * C49720) +
              (C23052 + C23051) * C50612) *
                 C50913 +
             ((C24578 + C24577) * C49713 - (C30689 * C50884 + C30690 * C49720) +
              (C24580 + C24579) * C50612) *
                 C50807) *
                C50634) *
               C1643 +
           ((((C29451 + C29452) * C49720 + (C29453 + C29454) * C50884 -
              C30690 * C49713 - C30689 * C50612) *
                 C50913 +
             ((C29891 + C29892) * C49720 + (C29893 + C29894) * C50884 -
              (C29896 + C29895) * C49713 - (C29898 + C29897) * C50612) *
                 C50807) *
                C25653 +
            ((C30687 * C49720 + C30688 * C50884 - (C24577 + C24578) * C49713 -
              (C24579 + C24580) * C50612) *
                 C50913 +
             ((C29895 + C29896) * C49720 + (C29897 + C29898) * C50884 -
              (C22821 * C3481 + C50781 * C3485 + C22820 * C1081 +
               C22815 * C1087) *
                  C49713 -
              (C22821 * C3484 + C50781 * C3490 + C22820 * C1086 +
               C22815 * C1093) *
                  C50612) *
                 C50807) *
                C50634) *
               C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                  C696 +
              (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                  C50607) *
                 C50913 +
             ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50807) *
                C25653 +
            (((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C50913 +
             (C28899 * C696 + C28900 * C50607) * C50807) *
                C50634) *
               C1643 -
           (((C29663 * C50607 + C29664 * C696) * C50807 +
             (C28896 * C50607 + C28895 * C696) * C50913) *
                C50634 +
            (((C29673 + C29674) * C50607 + (C29675 + C29676) * C696) * C50807 +
             ((C28904 + C28903) * C50607 + (C28902 + C28901) * C696) * C50913) *
                C25653) *
               C50708) *
              C50944 +
          (((((C29451 + C29452) * C696 + (C29453 + C29454) * C50607) * C50913 +
             ((C29891 + C29892) * C696 + (C29893 + C29894) * C50607) * C50807) *
                C25653 +
            ((C30687 * C696 + C30688 * C50607) * C50913 +
             ((C29895 + C29896) * C696 + (C29897 + C29898) * C50607) * C50807) *
                C50634) *
               C50708 -
           (((C30689 * C50607 + C30690 * C696) * C50807 +
             ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C50913) *
                C50634 +
            (((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50807 +
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C50607 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C696) *
                 C50913) *
                C25653) *
               C1643) *
              C50932 +
          (((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                  C696 +
              (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                  C50607) *
                 C50913 +
             ((C29455 + C29456) * C696 + (C29457 + C29458) * C50607) * C50807) *
                C25653 +
            (((C23406 + C23405) * C696 + (C23408 + C23407) * C50607) * C50913 +
             ((C29108 + C29107) * C696 + (C29110 + C29109) * C50607) * C50807) *
                C50634) *
               C1643 -
           ((((C22821 * C9203 + C50781 * C9207 + C22820 * C3486 +
               C22815 * C3491) *
                  C50607 +
              (C22821 * C9201 + C50781 * C9204 + C22820 * C3482 +
               C22815 * C3487) *
                  C696) *
                 C50807 +
             ((C29109 + C29110) * C50607 + (C29107 + C29108) * C696) * C50913) *
                C50634 +
            (((C22821 * C9205 + C50781 * C9208 + C22820 * C3488 +
               C22815 * C3492) *
                  C50607 +
              (C22821 * C9202 + C50781 * C9206 + C22820 * C3483 +
               C22815 * C3489) *
                  C696) *
                 C50807 +
             ((C29458 + C29457) * C50607 + (C29456 + C29455) * C696) * C50913) *
                C25653) *
               C50708) *
              C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                  C696 +
              (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                  C50607) *
                 C50913 +
             ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50807) *
                C25653 +
            (((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C50913 +
             (C28899 * C696 + C28900 * C50607) * C50807) *
                C50634) *
               C50945 -
           (((C29663 * C50607 + C29664 * C696) * C50807 +
             (C28896 * C50607 + C28895 * C696) * C50913) *
                C50634 +
            (((C29673 + C29674) * C50607 + (C29675 + C29676) * C696) * C50807 +
             ((C28904 + C28903) * C50607 + (C28902 + C28901) * C696) * C50913) *
                C25653) *
               C50935 +
           ((((C29676 + C29675) * C696 + (C29674 + C29673) * C50607) * C50913 +
             ((C30037 + C30038) * C696 + (C30039 + C30040) * C50607) * C50807) *
                C25653 +
            ((C29653 * C696 + C29662 * C50607) * C50913 +
             ((C29678 + C29677) * C696 + (C29680 + C29679) * C50607) * C50807) *
                C50634) *
               C1875) *
              C1283 +
          (((((C29451 + C29452) * C696 + (C29453 + C29454) * C50607) * C50913 +
             ((C29891 + C29892) * C696 + (C29893 + C29894) * C50607) * C50807) *
                C25653 +
            ((C30687 * C696 + C30688 * C50607) * C50913 +
             ((C29895 + C29896) * C696 + (C29897 + C29898) * C50607) * C50807) *
                C50634) *
               C50935 -
           (((C30689 * C50607 + C30690 * C696) * C50807 +
             ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C50913) *
                C50634 +
            (((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50807 +
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C50607 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C696) *
                 C50913) *
                C25653) *
               C50945 -
           ((((C22821 * C9309 + C50781 * C9313 + C22820 * C3596 +
               C22815 * C3601) *
                  C50607 +
              (C22821 * C9307 + C50781 * C9310 + C22820 * C3592 +
               C22815 * C3597) *
                  C696) *
                 C50807 +
             ((C29898 + C29897) * C50607 + (C29896 + C29895) * C696) * C50913) *
                C50634 +
            (((C22821 * C9311 + C50781 * C9314 + C22820 * C3598 +
               C22815 * C3602) *
                  C50607 +
              (C22821 * C9308 + C50781 * C9312 + C22820 * C3593 +
               C22815 * C3599) *
                  C696) *
                 C50807 +
             ((C29894 + C29893) * C50607 + (C29892 + C29891) * C696) * C50913) *
                C25653) *
               C1875) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C49720 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50884 -
             (C22855 + C22856) * C49713 - (C22857 + C22858) * C50612) *
                C50913 +
            ((C28901 + C28902) * C49720 + (C28903 + C28904) * C50884 -
             C28895 * C49713 - C28896 * C50612) *
                C50807) *
               C25653 +
           (((C22856 + C22855) * C49720 + (C22858 + C22857) * C50884 -
             (C22860 + C22859) * C49713 - (C22862 + C22861) * C50612) *
                C50913 +
            (C28899 * C49720 + C28900 * C50884 - C23241 * C49713 -
             C23242 * C50612) *
                C50807) *
               C50634) *
              C50696 * C582 +
          ((((C23045 + C23046) * C49713 -
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C50884 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C49720) +
             (C23047 + C23048) * C50612) *
                C50913 +
            ((C24574 + C24573) * C49713 -
             ((C22821 * C833 + C50781 * C842 + C22820 * C820 + C22815 * C835) *
                  C50884 +
              (C22821 * C818 + C50781 * C834 + C22820 * C811 + C22815 * C819) *
                  C49720) +
             (C24576 + C24575) * C50612) *
                C50807) *
               C25653 +
           (((C23050 + C23049) * C49713 -
             ((C23048 + C23047) * C50884 + (C23046 + C23045) * C49720) +
             (C23052 + C23051) * C50612) *
                C50913 +
            ((C24578 + C24577) * C49713 -
             ((C24575 + C24576) * C50884 + (C24573 + C24574) * C49720) +
             (C24580 + C24579) * C50612) *
                C50807) *
               C50634) *
              C50696 * C583 +
          ((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                 C49720 +
             (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                 C50884 -
             (C23405 + C23406) * C49713 - (C23407 + C23408) * C50612) *
                C50913 +
            ((C22820 * C818 + C22815 * C834 + C22821 * C3155 + C50781 * C3161) *
                 C49720 +
             (C22820 * C833 + C22815 * C842 + C22821 * C3160 + C50781 * C3164) *
                 C50884 -
             (C29107 + C29108) * C49713 - (C29109 + C29110) * C50612) *
                C50807) *
               C25653 +
           (((C23406 + C23405) * C49720 + (C23408 + C23407) * C50884 -
             (C23409 + C23410) * C49713 - (C23411 + C23412) * C50612) *
                C50913 +
            ((C29108 + C29107) * C49720 + (C29110 + C29109) * C50884 -
             (C22821 * C3153 + C50781 * C3157 + C22820 * C816 + C22815 * C830) *
                 C49713 -
             (C22821 * C3156 + C50781 * C3162 + C22820 * C829 + C22815 * C840) *
                 C50612) *
                C50807) *
               C50634) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C118 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C106 -
            (C22855 + C22856) * C119 - (C22857 + C22858) * C107 +
            C22871 * C120 + C22872 * C108 - C22873 * C121 - C22874 * C109) *
               C50913 +
           ((C22820 * C435 + C22815 * C442 + C22821 * C811 + C50781 * C819) *
                C118 +
            (C22820 * C441 + C22815 * C452 + C22821 * C820 + C50781 * C835) *
                C106 -
            (C23230 + C23229) * C119 - (C23232 + C23231) * C107 +
            (C23234 + C23233) * C120 + (C23236 + C23235) * C108 -
            (C23237 + C23238) * C121 - (C23239 + C23240) * C109) *
               C50807) *
              C25653 +
          (((C22856 + C22855) * C118 + (C22858 + C22857) * C106 -
            (C22860 + C22859) * C119 - (C22862 + C22861) * C107 +
            (C22864 + C22863) * C120 + (C22866 + C22865) * C108 -
            (C22867 + C22868) * C121 - (C22869 + C22870) * C109) *
               C50913 +
           ((C23229 + C23230) * C118 + (C23231 + C23232) * C106 -
            C23241 * C119 - C23242 * C107 + (C23238 + C23237) * C120 +
            (C23240 + C23239) * C108 -
            (C22821 * C1523 + C50781 * C1524 + C22820 * C438 + C22815 * C448) *
                C121 -
            (C22821 * C1525 + C50781 * C1526 + C22820 * C449 + C22815 * C456) *
                C109) *
               C50807) *
              C50634) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C49720 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50884 -
             (C22855 + C22856) * C49713 - (C22857 + C22858) * C50612) *
                C50913 +
            ((C28901 + C28902) * C49720 + (C28903 + C28904) * C50884 -
             C28895 * C49713 - C28896 * C50612) *
                C50807) *
               C25653 +
           (((C22856 + C22855) * C49720 + (C22858 + C22857) * C50884 -
             (C22860 + C22859) * C49713 - (C22862 + C22861) * C50612) *
                C50913 +
            (C28899 * C49720 + C28900 * C50884 - C23241 * C49713 -
             C23242 * C50612) *
                C50807) *
               C50634) *
              C941 +
          (((C28899 * C49713 -
             ((C28904 + C28903) * C50884 + (C28902 + C28901) * C49720) +
             C28900 * C50612) *
                C50913 +
            (C29653 * C49713 -
             ((C29673 + C29674) * C50884 + (C29675 + C29676) * C49720) +
             C29662 * C50612) *
                C50807) *
               C25653 +
           ((C28897 * C49713 - (C28896 * C50884 + C28895 * C49720) +
             C28898 * C50612) *
                C50913 +
            ((C23824 + C23823) * C49713 - (C29663 * C50884 + C29664 * C49720) +
             (C23826 + C23825) * C50612) *
                C50807) *
               C50634) *
              C942 +
          ((((C29676 + C29675) * C49720 + (C29674 + C29673) * C50884 -
             C29664 * C49713 - C29663 * C50612) *
                C50913 +
            ((C22820 * C1169 + C22815 * C1177 + C22821 * C3593 +
              C50781 * C3599) *
                 C49720 +
             (C22820 * C1176 + C22815 * C1181 + C22821 * C3598 +
              C50781 * C3602) *
                 C50884 -
             (C29677 + C29678) * C49713 - (C29679 + C29680) * C50612) *
                C50807) *
               C25653 +
           ((C29653 * C49720 + C29662 * C50884 - (C23823 + C23824) * C49713 -
             (C23825 + C23826) * C50612) *
                C50913 +
            ((C29678 + C29677) * C49720 + (C29680 + C29679) * C50884 -
             (C22821 * C3591 + C50781 * C3595 + C22820 * C1167 +
              C22815 * C1173) *
                 C49713 -
             (C22821 * C3594 + C50781 * C3600 + C22820 * C1172 +
              C22815 * C1179) *
                 C50612) *
                C50807) *
               C50634) *
              C943) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C696 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50607) *
                C50913 +
            ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50807) *
               C25653 +
           (((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C50913 +
            (C28899 * C696 + C28900 * C50607) * C50807) *
               C50634) *
              C50696 * C692 -
          ((((C24575 + C24576) * C50607 + (C24573 + C24574) * C696) * C50807 +
            ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C50913) *
               C50634 +
           (((C22821 * C833 + C50781 * C842 + C22820 * C820 + C22815 * C835) *
                 C50607 +
             (C22821 * C818 + C50781 * C834 + C22820 * C811 + C22815 * C819) *
                 C696) *
                C50807 +
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50607 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C696) *
                C50913) *
               C25653) *
              C50696 * C693 +
          ((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                 C696 +
             (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                 C50607) *
                C50913 +
            ((C22820 * C818 + C22815 * C834 + C22821 * C3155 + C50781 * C3161) *
                 C696 +
             (C22820 * C833 + C22815 * C842 + C22821 * C3160 + C50781 * C3164) *
                 C50607) *
                C50807) *
               C25653 +
           (((C23406 + C23405) * C696 + (C23408 + C23407) * C50607) * C50913 +
            ((C29108 + C29107) * C696 + (C29110 + C29109) * C50607) * C50807) *
               C50634) *
              C50696 * C694 -
          ((((C22821 * C8885 + C50781 * C8889 + C22820 * C3158 +
              C22815 * C3163) *
                 C50607 +
             (C22821 * C8883 + C50781 * C8886 + C22820 * C3154 +
              C22815 * C3159) *
                 C696) *
                C50807 +
            ((C22821 * C3000 + C50781 * C3005 + C22820 * C705 + C22815 * C711) *
                 C50607 +
             (C22821 * C2996 + C50781 * C3001 + C22820 * C699 + C22815 * C706) *
                 C696) *
                C50913) *
               C50634 +
           (((C22821 * C8887 + C50781 * C8890 + C22820 * C3160 +
              C22815 * C3164) *
                 C50607 +
             (C22821 * C8884 + C50781 * C8888 + C22820 * C3155 +
              C22815 * C3161) *
                 C696) *
                C50807 +
            ((C22821 * C3002 + C50781 * C3006 + C22820 * C707 + C22815 * C712) *
                 C50607 +
             (C22821 * C2997 + C50781 * C3003 + C22820 * C700 + C22815 * C708) *
                 C696) *
                C50913) *
               C25653) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C283 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C278 -
             (C22855 + C22856) * C284 - (C22857 + C22858) * C279 +
             C22871 * C285 + C22872 * C280) *
                C50913 +
            ((C22820 * C435 + C22815 * C442 + C22821 * C811 + C50781 * C819) *
                 C283 +
             (C22820 * C441 + C22815 * C452 + C22821 * C820 + C50781 * C835) *
                 C278 -
             (C23230 + C23229) * C284 - (C23232 + C23231) * C279 +
             (C23234 + C23233) * C285 + (C23236 + C23235) * C280) *
                C50807) *
               C25653 +
           (((C22856 + C22855) * C283 + (C22858 + C22857) * C278 -
             (C22860 + C22859) * C284 - (C22862 + C22861) * C279 +
             (C22864 + C22863) * C285 + (C22866 + C22865) * C280) *
                C50913 +
            ((C23229 + C23230) * C283 + (C23231 + C23232) * C278 -
             C23241 * C284 - C23242 * C279 + (C23238 + C23237) * C285 +
             (C23240 + C23239) * C280) *
                C50807) *
               C50634) *
              C50696 * C50899 +
          ((((C23045 + C23046) * C284 -
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C278 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C283) +
             (C23047 + C23048) * C279 - C23057 * C285 - C23058 * C280) *
                C50913 +
            ((C24574 + C24573) * C284 -
             ((C22821 * C833 + C50781 * C842 + C22820 * C820 + C22815 * C835) *
                  C278 +
              (C22821 * C818 + C50781 * C834 + C22820 * C811 + C22815 * C819) *
                  C283) +
             (C24576 + C24575) * C279 - (C24577 + C24578) * C285 -
             (C24579 + C24580) * C280) *
                C50807) *
               C25653 +
           (((C23050 + C23049) * C284 -
             ((C23048 + C23047) * C278 + (C23046 + C23045) * C283) +
             (C23052 + C23051) * C279 - (C23053 + C23054) * C285 -
             (C23055 + C23056) * C280) *
                C50913 +
            ((C24578 + C24577) * C284 -
             ((C24575 + C24576) * C278 + (C24573 + C24574) * C283) +
             (C24580 + C24579) * C279 -
             (C22821 * C815 + C50781 * C828 + C22820 * C814 + C22815 * C825) *
                 C285 -
             (C22821 * C827 + C50781 * C839 + C22820 * C826 + C22815 * C838) *
                 C280) *
                C50807) *
               C50634) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                  C696 +
              (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                  C50607) *
                 C50913 +
             ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50807) *
                C25653 +
            (((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C50913 +
             (C28899 * C696 + C28900 * C50607) * C50807) *
                C50634) *
               C941 -
           (((C29663 * C50607 + C29664 * C696) * C50807 +
             (C28896 * C50607 + C28895 * C696) * C50913) *
                C50634 +
            (((C29673 + C29674) * C50607 + (C29675 + C29676) * C696) * C50807 +
             ((C28904 + C28903) * C50607 + (C28902 + C28901) * C696) * C50913) *
                C25653) *
               C942 +
           ((((C29676 + C29675) * C696 + (C29674 + C29673) * C50607) * C50913 +
             ((C22820 * C1169 + C22815 * C1177 + C22821 * C3593 +
               C50781 * C3599) *
                  C696 +
              (C22820 * C1176 + C22815 * C1181 + C22821 * C3598 +
               C50781 * C3602) *
                  C50607) *
                 C50807) *
                C25653 +
            ((C29653 * C696 + C29662 * C50607) * C50913 +
             ((C29678 + C29677) * C696 + (C29680 + C29679) * C50607) * C50807) *
                C50634) *
               C943) *
              C50899 +
          (((((C29451 + C29452) * C696 + (C29453 + C29454) * C50607) * C50913 +
             ((C29891 + C29892) * C696 + (C29893 + C29894) * C50607) * C50807) *
                C25653 +
            (((C24574 + C24573) * C696 + (C24576 + C24575) * C50607) * C50913 +
             ((C29895 + C29896) * C696 + (C29897 + C29898) * C50607) * C50807) *
                C50634) *
               C942 -
           ((((C24575 + C24576) * C50607 + (C24573 + C24574) * C696) * C50807 +
             ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C50913) *
                C50634 +
            (((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50807 +
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C50607 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C696) *
                 C50913) *
                C25653) *
               C941 -
           ((((C22821 * C9309 + C50781 * C9313 + C22820 * C3596 +
               C22815 * C3601) *
                  C50607 +
              (C22821 * C9307 + C50781 * C9310 + C22820 * C3592 +
               C22815 * C3597) *
                  C696) *
                 C50807 +
             ((C29898 + C29897) * C50607 + (C29896 + C29895) * C696) * C50913) *
                C50634 +
            (((C22821 * C9311 + C50781 * C9314 + C22820 * C3598 +
               C22815 * C3602) *
                  C50607 +
              (C22821 * C9308 + C50781 * C9312 + C22820 * C3593 +
               C22815 * C3599) *
                  C696) *
                 C50807 +
             ((C29894 + C29893) * C50607 + (C29892 + C29891) * C696) * C50913) *
                C25653) *
               C943) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                  C696 +
              (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                  C50607) *
                 C50913 +
             ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50807) *
                C25653 +
            (((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C50913 +
             (C28899 * C696 + C28900 * C50607) * C50807) *
                C50634) *
               C50900 -
           ((((C23821 + C23822) * C50607 + (C23819 + C23820) * C696) * C50807 +
             (C28896 * C50607 + C28895 * C696) * C50913) *
                C50634 +
            (((C22821 * C1090 + C50781 * C1095 + C22820 * C950 +
               C22815 * C959) *
                  C50607 +
              (C22821 * C1083 + C50781 * C1091 + C22820 * C944 +
               C22815 * C949) *
                  C696) *
                 C50807 +
             ((C28904 + C28903) * C50607 + (C28902 + C28901) * C696) * C50913) *
                C25653) *
               C50708) *
              C582 +
          (((((C29451 + C29452) * C696 + (C29453 + C29454) * C50607) * C50913 +
             ((C22820 * C1083 + C22815 * C1091 + C22821 * C3483 +
               C50781 * C3489) *
                  C696 +
              (C22820 * C1090 + C22815 * C1095 + C22821 * C3488 +
               C50781 * C3492) *
                  C50607) *
                 C50807) *
                C25653 +
            (((C24574 + C24573) * C696 + (C24576 + C24575) * C50607) * C50913 +
             ((C22820 * C1082 + C22815 * C1089 + C22821 * C3482 +
               C50781 * C3487) *
                  C696 +
              (C22820 * C1088 + C22815 * C1094 + C22821 * C3486 +
               C50781 * C3491) *
                  C50607) *
                 C50807) *
                C50634) *
               C50708 -
           ((((C24575 + C24576) * C50607 + (C24573 + C24574) * C696) * C50807 +
             ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C50913) *
                C50634 +
            (((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50807 +
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C50607 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C696) *
                 C50913) *
                C25653) *
               C50900) *
              C583 +
          (((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                  C696 +
              (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                  C50607) *
                 C50913 +
             ((C29455 + C29456) * C696 + (C29457 + C29458) * C50607) * C50807) *
                C25653 +
            (((C23406 + C23405) * C696 + (C23408 + C23407) * C50607) * C50913 +
             ((C29108 + C29107) * C696 + (C29110 + C29109) * C50607) * C50807) *
                C50634) *
               C50900 -
           ((((C22821 * C9203 + C50781 * C9207 + C22820 * C3486 +
               C22815 * C3491) *
                  C50607 +
              (C22821 * C9201 + C50781 * C9204 + C22820 * C3482 +
               C22815 * C3487) *
                  C696) *
                 C50807 +
             ((C29109 + C29110) * C50607 + (C29107 + C29108) * C696) * C50913) *
                C50634 +
            (((C22821 * C9205 + C50781 * C9208 + C22820 * C3488 +
               C22815 * C3492) *
                  C50607 +
              (C22821 * C9202 + C50781 * C9206 + C22820 * C3483 +
               C22815 * C3489) *
                  C696) *
                 C50807 +
             ((C29458 + C29457) * C50607 + (C29456 + C29455) * C696) * C50913) *
                C25653) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C283 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C278 -
             (C22855 + C22856) * C284 - (C22857 + C22858) * C279 +
             C22871 * C285 + C22872 * C280) *
                C50913 +
            ((C28901 + C28902) * C283 + (C28903 + C28904) * C278 -
             C28895 * C284 - C28896 * C279 + C28897 * C285 + C28898 * C280) *
                C50807) *
               C25653 +
           (((C22856 + C22855) * C283 + (C22858 + C22857) * C278 -
             (C22860 + C22859) * C284 - (C22862 + C22861) * C279 +
             (C22864 + C22863) * C285 + (C22866 + C22865) * C280) *
                C50913 +
            (C28899 * C283 + C28900 * C278 - C23241 * C284 - C23242 * C279 +
             (C23238 + C23237) * C285 + (C23240 + C23239) * C280) *
                C50807) *
               C50634) *
              C50900 +
          (((C28899 * C284 -
             ((C28904 + C28903) * C278 + (C28902 + C28901) * C283) +
             C28900 * C279 - C23241 * C285 - C23242 * C280) *
                C50913 +
            ((C23820 + C23819) * C284 -
             ((C22821 * C1090 + C50781 * C1095 + C22820 * C950 +
               C22815 * C959) *
                  C278 +
              (C22821 * C1083 + C50781 * C1091 + C22820 * C944 +
               C22815 * C949) *
                  C283) +
             (C23822 + C23821) * C279 - (C23823 + C23824) * C285 -
             (C23825 + C23826) * C280) *
                C50807) *
               C25653 +
           ((C28897 * C284 - (C28896 * C278 + C28895 * C283) + C28898 * C279 -
             (C23237 + C23238) * C285 - (C23239 + C23240) * C280) *
                C50913 +
            ((C23824 + C23823) * C284 -
             ((C23821 + C23822) * C278 + (C23819 + C23820) * C283) +
             (C23826 + C23825) * C279 -
             (C22821 * C1080 + C50781 * C1085 + C22820 * C947 + C22815 * C955) *
                 C285 -
             (C22821 * C1084 + C50781 * C1092 + C22820 * C956 + C22815 * C962) *
                 C280) *
                C50807) *
               C50634) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C696 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50607) *
                C50913 +
            ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50807) *
               C25653 +
           (((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C50913 +
            (C28899 * C696 + C28900 * C50607) * C50807) *
               C50634) *
              C1162 -
          (((C29663 * C50607 + C29664 * C696) * C50807 +
            (C28896 * C50607 + C28895 * C696) * C50913) *
               C50634 +
           (((C29673 + C29674) * C50607 + (C29675 + C29676) * C696) * C50807 +
            ((C28904 + C28903) * C50607 + (C28902 + C28901) * C696) * C50913) *
               C25653) *
              C1163 +
          ((((C29676 + C29675) * C696 + (C29674 + C29673) * C50607) * C50913 +
            ((C30037 + C30038) * C696 + (C30039 + C30040) * C50607) * C50807) *
               C25653 +
           ((C29653 * C696 + C29662 * C50607) * C50913 +
            ((C29678 + C29677) * C696 + (C29680 + C29679) * C50607) * C50807) *
               C50634) *
              C1164 -
          ((((C22821 * C16448 + C50781 * C16450 + C22820 * C6400 +
              C22815 * C6405) *
                 C50607 +
             (C22821 * C16447 + C50781 * C16449 + C22820 * C6396 +
              C22815 * C6401) *
                 C696) *
                C50807 +
            ((C29679 + C29680) * C50607 + (C29677 + C29678) * C696) * C50913) *
               C50634 +
           (((C22821 * C13843 + C50781 * C13847 + C22820 * C6402 +
              C22815 * C6406) *
                 C50607 +
             (C22821 * C13841 + C50781 * C13845 + C22820 * C6397 +
              C22815 * C6403) *
                 C696) *
                C50807 +
            ((C30040 + C30039) * C50607 + (C30038 + C30037) * C696) * C50913) *
               C25653) *
              C1165) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C1285 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50942 -
             (C22855 + C22856) * C1286 - (C22857 + C22858) * C50926 +
             C22871 * C1287 + C22872 * C1282) *
                C50913 +
            ((C28901 + C28902) * C1285 + (C28903 + C28904) * C50942 -
             C28895 * C1286 - C28896 * C50926 + C28897 * C1287 +
             C28898 * C1282) *
                C50807) *
               C25653 +
           (((C22856 + C22855) * C1285 + (C22858 + C22857) * C50942 -
             (C22860 + C22859) * C1286 - (C22862 + C22861) * C50926 +
             (C22864 + C22863) * C1287 + (C22866 + C22865) * C1282) *
                C50913 +
            (C28899 * C1285 + C28900 * C50942 - C23241 * C1286 -
             C23242 * C50926 + (C23238 + C23237) * C1287 +
             (C23240 + C23239) * C1282) *
                C50807) *
               C50634) *
              C1643 +
          (((C28899 * C1286 -
             ((C28904 + C28903) * C50942 + (C28902 + C28901) * C1285) +
             C28900 * C50926 - C23241 * C1287 - C23242 * C1282) *
                C50913 +
            (C29653 * C1286 -
             ((C29673 + C29674) * C50942 + (C29675 + C29676) * C1285) +
             C29662 * C50926 - (C23823 + C23824) * C1287 -
             (C23825 + C23826) * C1282) *
                C50807) *
               C25653 +
           ((C28897 * C1286 - (C28896 * C50942 + C28895 * C1285) +
             C28898 * C50926 - (C23237 + C23238) * C1287 -
             (C23239 + C23240) * C1282) *
                C50913 +
            ((C23824 + C23823) * C1286 - (C29663 * C50942 + C29664 * C1285) +
             (C23826 + C23825) * C50926 -
             (C22821 * C1080 + C50781 * C1085 + C22820 * C947 + C22815 * C955) *
                 C1287 -
             (C22821 * C1084 + C50781 * C1092 + C22820 * C956 + C22815 * C962) *
                 C1282) *
                C50807) *
               C50634) *
              C50708) *
         C50670) /
        (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                  C1391 +
              (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                  C1386 -
              (C22855 + C22856) * C1392 - (C22857 + C22858) * C50612) *
                 C50913 +
             ((C28901 + C28902) * C1391 + (C28903 + C28904) * C1386 -
              C28895 * C1392 - C28896 * C50612) *
                 C50807) *
                C25653 +
            (((C22856 + C22855) * C1391 + (C22858 + C22857) * C1386 -
              (C22860 + C22859) * C1392 - (C22862 + C22861) * C50612) *
                 C50913 +
             (C28899 * C1391 + C28900 * C1386 - C23241 * C1392 -
              C23242 * C50612) *
                 C50807) *
                C50634) *
               C1643 +
           (((C28899 * C1392 -
              ((C28904 + C28903) * C1386 + (C28902 + C28901) * C1391) +
              C28900 * C50612) *
                 C50913 +
             (C29653 * C1392 -
              ((C29673 + C29674) * C1386 + (C29675 + C29676) * C1391) +
              C29662 * C50612) *
                 C50807) *
                C25653 +
            ((C28897 * C1392 - (C28896 * C1386 + C28895 * C1391) +
              C28898 * C50612) *
                 C50913 +
             ((C23824 + C23823) * C1392 - (C29663 * C1386 + C29664 * C1391) +
              (C23826 + C23825) * C50612) *
                 C50807) *
                C50634) *
               C50708) *
              C50899 +
          (((((C23045 + C23046) * C1392 -
              ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                   C1386 +
               (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                   C1391) +
              (C23047 + C23048) * C50612) *
                 C50913 +
             (C30687 * C1392 -
              ((C29454 + C29453) * C1386 + (C29452 + C29451) * C1391) +
              C30688 * C50612) *
                 C50807) *
                C25653 +
            (((C23050 + C23049) * C1392 -
              ((C23048 + C23047) * C1386 + (C23046 + C23045) * C1391) +
              (C23052 + C23051) * C50612) *
                 C50913 +
             ((C24578 + C24577) * C1392 - (C30689 * C1386 + C30690 * C1391) +
              (C24580 + C24579) * C50612) *
                 C50807) *
                C50634) *
               C1643 +
           ((((C29451 + C29452) * C1391 + (C29453 + C29454) * C1386 -
              C30690 * C1392 - C30689 * C50612) *
                 C50913 +
             ((C29891 + C29892) * C1391 + (C29893 + C29894) * C1386 -
              (C29896 + C29895) * C1392 - (C29898 + C29897) * C50612) *
                 C50807) *
                C25653 +
            ((C30687 * C1391 + C30688 * C1386 - (C24577 + C24578) * C1392 -
              (C24579 + C24580) * C50612) *
                 C50913 +
             ((C29895 + C29896) * C1391 + (C29897 + C29898) * C1386 -
              (C22821 * C3481 + C50781 * C3485 + C22820 * C1081 +
               C22815 * C1087) *
                  C1392 -
              (C22821 * C3484 + C50781 * C3490 + C22820 * C1086 +
               C22815 * C1093) *
                  C50612) *
                 C50807) *
                C50634) *
               C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C1391 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C1386 -
             (C22855 + C22856) * C1392 - (C22857 + C22858) * C50612) *
                C50913 +
            ((C28901 + C28902) * C1391 + (C28903 + C28904) * C1386 -
             C28895 * C1392 - C28896 * C50612) *
                C50807) *
               C25653 +
           (((C22856 + C22855) * C1391 + (C22858 + C22857) * C1386 -
             (C22860 + C22859) * C1392 - (C22862 + C22861) * C50612) *
                C50913 +
            (C28899 * C1391 + C28900 * C1386 - C23241 * C1392 -
             C23242 * C50612) *
                C50807) *
               C50634) *
              C50945 +
          (((C28899 * C1392 -
             ((C28904 + C28903) * C1386 + (C28902 + C28901) * C1391) +
             C28900 * C50612) *
                C50913 +
            (C29653 * C1392 -
             ((C29673 + C29674) * C1386 + (C29675 + C29676) * C1391) +
             C29662 * C50612) *
                C50807) *
               C25653 +
           ((C28897 * C1392 - (C28896 * C1386 + C28895 * C1391) +
             C28898 * C50612) *
                C50913 +
            ((C23824 + C23823) * C1392 - (C29663 * C1386 + C29664 * C1391) +
             (C23826 + C23825) * C50612) *
                C50807) *
               C50634) *
              C50935 +
          ((((C29676 + C29675) * C1391 + (C29674 + C29673) * C1386 -
             C29664 * C1392 - C29663 * C50612) *
                C50913 +
            ((C30037 + C30038) * C1391 + (C30039 + C30040) * C1386 -
             (C29677 + C29678) * C1392 - (C29679 + C29680) * C50612) *
                C50807) *
               C25653 +
           ((C29653 * C1391 + C29662 * C1386 - (C23823 + C23824) * C1392 -
             (C23825 + C23826) * C50612) *
                C50913 +
            ((C29678 + C29677) * C1391 + (C29680 + C29679) * C1386 -
             (C22821 * C3591 + C50781 * C3595 + C22820 * C1167 +
              C22815 * C1173) *
                 C1392 -
             (C22821 * C3594 + C50781 * C3600 + C22820 * C1172 +
              C22815 * C1179) *
                 C50612) *
                C50807) *
               C50634) *
              C1875) *
         C50670) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C118 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C106 -
            (C22855 + C22856) * C119 - (C22857 + C22858) * C107 +
            C22871 * C120 + C22872 * C108 - C22873 * C121 - C22874 * C109) *
               C50913 +
           ((C22820 * C435 + C22815 * C442 + C22821 * C811 + C50781 * C819) *
                C118 +
            (C22820 * C441 + C22815 * C452 + C22821 * C820 + C50781 * C835) *
                C106 -
            (C23230 + C23229) * C119 - (C23232 + C23231) * C107 +
            (C23234 + C23233) * C120 + (C23236 + C23235) * C108 -
            (C23237 + C23238) * C121 - (C23239 + C23240) * C109) *
               C50807) *
              C25653 +
          (((C22856 + C22855) * C118 + (C22858 + C22857) * C106 -
            (C22860 + C22859) * C119 - (C22862 + C22861) * C107 +
            (C22864 + C22863) * C120 + (C22866 + C22865) * C108 -
            (C22867 + C22868) * C121 - (C22869 + C22870) * C109) *
               C50913 +
           ((C23229 + C23230) * C118 + (C23231 + C23232) * C106 -
            C23241 * C119 - C23242 * C107 + (C23238 + C23237) * C120 +
            (C23240 + C23239) * C108 -
            (C22821 * C1523 + C50781 * C1524 + C22820 * C438 + C22815 * C448) *
                C121 -
            (C22821 * C1525 + C50781 * C1526 + C22820 * C449 + C22815 * C456) *
                C109) *
               C50807) *
              C50634) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C49720 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50884 -
             (C22855 + C22856) * C49713 - (C22857 + C22858) * C50612) *
                C50913 +
            ((C28901 + C28902) * C49720 + (C28903 + C28904) * C50884 -
             C28895 * C49713 - C28896 * C50612) *
                C50807) *
               C25653 +
           (((C22856 + C22855) * C49720 + (C22858 + C22857) * C50884 -
             (C22860 + C22859) * C49713 - (C22862 + C22861) * C50612) *
                C50913 +
            (C28899 * C49720 + C28900 * C50884 - C23241 * C49713 -
             C23242 * C50612) *
                C50807) *
               C50634) *
              C50696 * C582 +
          ((((C23045 + C23046) * C49713 -
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C50884 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C49720) +
             (C23047 + C23048) * C50612) *
                C50913 +
            ((C24574 + C24573) * C49713 -
             ((C22821 * C833 + C50781 * C842 + C22820 * C820 + C22815 * C835) *
                  C50884 +
              (C22821 * C818 + C50781 * C834 + C22820 * C811 + C22815 * C819) *
                  C49720) +
             (C24576 + C24575) * C50612) *
                C50807) *
               C25653 +
           (((C23050 + C23049) * C49713 -
             ((C23048 + C23047) * C50884 + (C23046 + C23045) * C49720) +
             (C23052 + C23051) * C50612) *
                C50913 +
            ((C24578 + C24577) * C49713 -
             ((C24575 + C24576) * C50884 + (C24573 + C24574) * C49720) +
             (C24580 + C24579) * C50612) *
                C50807) *
               C50634) *
              C50696 * C583 +
          ((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                 C49720 +
             (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                 C50884 -
             (C23405 + C23406) * C49713 - (C23407 + C23408) * C50612) *
                C50913 +
            ((C22820 * C818 + C22815 * C834 + C22821 * C3155 + C50781 * C3161) *
                 C49720 +
             (C22820 * C833 + C22815 * C842 + C22821 * C3160 + C50781 * C3164) *
                 C50884 -
             (C29107 + C29108) * C49713 - (C29109 + C29110) * C50612) *
                C50807) *
               C25653 +
           (((C23406 + C23405) * C49720 + (C23408 + C23407) * C50884 -
             (C23409 + C23410) * C49713 - (C23411 + C23412) * C50612) *
                C50913 +
            ((C29108 + C29107) * C49720 + (C29110 + C29109) * C50884 -
             (C22821 * C3153 + C50781 * C3157 + C22820 * C816 + C22815 * C830) *
                 C49713 -
             (C22821 * C3156 + C50781 * C3162 + C22820 * C829 + C22815 * C840) *
                 C50612) *
                C50807) *
               C50634) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C283 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C278 -
             (C22855 + C22856) * C284 - (C22857 + C22858) * C279 +
             C22871 * C285 + C22872 * C280) *
                C50913 +
            ((C22820 * C435 + C22815 * C442 + C22821 * C811 + C50781 * C819) *
                 C283 +
             (C22820 * C441 + C22815 * C452 + C22821 * C820 + C50781 * C835) *
                 C278 -
             (C23230 + C23229) * C284 - (C23232 + C23231) * C279 +
             (C23234 + C23233) * C285 + (C23236 + C23235) * C280) *
                C50807) *
               C25653 +
           (((C22856 + C22855) * C283 + (C22858 + C22857) * C278 -
             (C22860 + C22859) * C284 - (C22862 + C22861) * C279 +
             (C22864 + C22863) * C285 + (C22866 + C22865) * C280) *
                C50913 +
            ((C23229 + C23230) * C283 + (C23231 + C23232) * C278 -
             C23241 * C284 - C23242 * C279 + (C23238 + C23237) * C285 +
             (C23240 + C23239) * C280) *
                C50807) *
               C50634) *
              C50696 * C50899 +
          ((((C23045 + C23046) * C284 -
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C278 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C283) +
             (C23047 + C23048) * C279 - C23057 * C285 - C23058 * C280) *
                C50913 +
            ((C24574 + C24573) * C284 -
             ((C22821 * C833 + C50781 * C842 + C22820 * C820 + C22815 * C835) *
                  C278 +
              (C22821 * C818 + C50781 * C834 + C22820 * C811 + C22815 * C819) *
                  C283) +
             (C24576 + C24575) * C279 - (C24577 + C24578) * C285 -
             (C24579 + C24580) * C280) *
                C50807) *
               C25653 +
           (((C23050 + C23049) * C284 -
             ((C23048 + C23047) * C278 + (C23046 + C23045) * C283) +
             (C23052 + C23051) * C279 - (C23053 + C23054) * C285 -
             (C23055 + C23056) * C280) *
                C50913 +
            ((C24578 + C24577) * C284 -
             ((C24575 + C24576) * C278 + (C24573 + C24574) * C283) +
             (C24580 + C24579) * C279 -
             (C22821 * C815 + C50781 * C828 + C22820 * C814 + C22815 * C825) *
                 C285 -
             (C22821 * C827 + C50781 * C839 + C22820 * C826 + C22815 * C838) *
                 C280) *
                C50807) *
               C50634) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C696 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50607) *
                C50913 +
            ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50807) *
               C25653 +
           (((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C50913 +
            (C28899 * C696 + C28900 * C50607) * C50807) *
               C50634) *
              C50696 * C692 -
          ((((C24575 + C24576) * C50607 + (C24573 + C24574) * C696) * C50807 +
            ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C50913) *
               C50634 +
           (((C22821 * C833 + C50781 * C842 + C22820 * C820 + C22815 * C835) *
                 C50607 +
             (C22821 * C818 + C50781 * C834 + C22820 * C811 + C22815 * C819) *
                 C696) *
                C50807 +
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50607 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C696) *
                C50913) *
               C25653) *
              C50696 * C693 +
          ((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                 C696 +
             (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                 C50607) *
                C50913 +
            ((C22820 * C818 + C22815 * C834 + C22821 * C3155 + C50781 * C3161) *
                 C696 +
             (C22820 * C833 + C22815 * C842 + C22821 * C3160 + C50781 * C3164) *
                 C50607) *
                C50807) *
               C25653 +
           (((C23406 + C23405) * C696 + (C23408 + C23407) * C50607) * C50913 +
            ((C29108 + C29107) * C696 + (C29110 + C29109) * C50607) * C50807) *
               C50634) *
              C50696 * C694 -
          ((((C22821 * C8885 + C50781 * C8889 + C22820 * C3158 +
              C22815 * C3163) *
                 C50607 +
             (C22821 * C8883 + C50781 * C8886 + C22820 * C3154 +
              C22815 * C3159) *
                 C696) *
                C50807 +
            ((C22821 * C3000 + C50781 * C3005 + C22820 * C705 + C22815 * C711) *
                 C50607 +
             (C22821 * C2996 + C50781 * C3001 + C22820 * C699 + C22815 * C706) *
                 C696) *
                C50913) *
               C50634 +
           (((C22821 * C8887 + C50781 * C8890 + C22820 * C3160 +
              C22815 * C3164) *
                 C50607 +
             (C22821 * C8884 + C50781 * C8888 + C22820 * C3155 +
              C22815 * C3161) *
                 C696) *
                C50807 +
            ((C22821 * C3002 + C50781 * C3006 + C22820 * C707 + C22815 * C712) *
                 C50607 +
             (C22821 * C2997 + C50781 * C3003 + C22820 * C700 + C22815 * C708) *
                 C696) *
                C50913) *
               C25653) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C283 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C278 -
             (C22855 + C22856) * C284 - (C22857 + C22858) * C279 +
             C22871 * C285 + C22872 * C280) *
                C50913 +
            ((C28901 + C28902) * C283 + (C28903 + C28904) * C278 -
             C28895 * C284 - C28896 * C279 + C28897 * C285 + C28898 * C280) *
                C50807) *
               C25653 +
           (((C22856 + C22855) * C283 + (C22858 + C22857) * C278 -
             (C22860 + C22859) * C284 - (C22862 + C22861) * C279 +
             (C22864 + C22863) * C285 + (C22866 + C22865) * C280) *
                C50913 +
            (C28899 * C283 + C28900 * C278 - C23241 * C284 - C23242 * C279 +
             (C23238 + C23237) * C285 + (C23240 + C23239) * C280) *
                C50807) *
               C50634) *
              C50900 +
          (((C28899 * C284 -
             ((C28904 + C28903) * C278 + (C28902 + C28901) * C283) +
             C28900 * C279 - C23241 * C285 - C23242 * C280) *
                C50913 +
            ((C23820 + C23819) * C284 -
             ((C22821 * C1090 + C50781 * C1095 + C22820 * C950 +
               C22815 * C959) *
                  C278 +
              (C22821 * C1083 + C50781 * C1091 + C22820 * C944 +
               C22815 * C949) *
                  C283) +
             (C23822 + C23821) * C279 - (C23823 + C23824) * C285 -
             (C23825 + C23826) * C280) *
                C50807) *
               C25653 +
           ((C28897 * C284 - (C28896 * C278 + C28895 * C283) + C28898 * C279 -
             (C23237 + C23238) * C285 - (C23239 + C23240) * C280) *
                C50913 +
            ((C23824 + C23823) * C284 -
             ((C23821 + C23822) * C278 + (C23819 + C23820) * C283) +
             (C23826 + C23825) * C279 -
             (C22821 * C1080 + C50781 * C1085 + C22820 * C947 + C22815 * C955) *
                 C285 -
             (C22821 * C1084 + C50781 * C1092 + C22820 * C956 + C22815 * C962) *
                 C280) *
                C50807) *
               C50634) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                  C696 +
              (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                  C50607) *
                 C50913 +
             ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50807) *
                C25653 +
            (((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C50913 +
             (C28899 * C696 + C28900 * C50607) * C50807) *
                C50634) *
               C50900 -
           ((((C23821 + C23822) * C50607 + (C23819 + C23820) * C696) * C50807 +
             (C28896 * C50607 + C28895 * C696) * C50913) *
                C50634 +
            (((C22821 * C1090 + C50781 * C1095 + C22820 * C950 +
               C22815 * C959) *
                  C50607 +
              (C22821 * C1083 + C50781 * C1091 + C22820 * C944 +
               C22815 * C949) *
                  C696) *
                 C50807 +
             ((C28904 + C28903) * C50607 + (C28902 + C28901) * C696) * C50913) *
                C25653) *
               C50708) *
              C582 +
          (((((C29451 + C29452) * C696 + (C29453 + C29454) * C50607) * C50913 +
             ((C22820 * C1083 + C22815 * C1091 + C22821 * C3483 +
               C50781 * C3489) *
                  C696 +
              (C22820 * C1090 + C22815 * C1095 + C22821 * C3488 +
               C50781 * C3492) *
                  C50607) *
                 C50807) *
                C25653 +
            (((C24574 + C24573) * C696 + (C24576 + C24575) * C50607) * C50913 +
             ((C22820 * C1082 + C22815 * C1089 + C22821 * C3482 +
               C50781 * C3487) *
                  C696 +
              (C22820 * C1088 + C22815 * C1094 + C22821 * C3486 +
               C50781 * C3491) *
                  C50607) *
                 C50807) *
                C50634) *
               C50708 -
           ((((C24575 + C24576) * C50607 + (C24573 + C24574) * C696) * C50807 +
             ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C50913) *
                C50634 +
            (((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50807 +
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C50607 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C696) *
                 C50913) *
                C25653) *
               C50900) *
              C583 +
          (((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                  C696 +
              (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                  C50607) *
                 C50913 +
             ((C29455 + C29456) * C696 + (C29457 + C29458) * C50607) * C50807) *
                C25653 +
            (((C23406 + C23405) * C696 + (C23408 + C23407) * C50607) * C50913 +
             ((C29108 + C29107) * C696 + (C29110 + C29109) * C50607) * C50807) *
                C50634) *
               C50900 -
           ((((C22821 * C9203 + C50781 * C9207 + C22820 * C3486 +
               C22815 * C3491) *
                  C50607 +
              (C22821 * C9201 + C50781 * C9204 + C22820 * C3482 +
               C22815 * C3487) *
                  C696) *
                 C50807 +
             ((C29109 + C29110) * C50607 + (C29107 + C29108) * C696) * C50913) *
                C50634 +
            (((C22821 * C9205 + C50781 * C9208 + C22820 * C3488 +
               C22815 * C3492) *
                  C50607 +
              (C22821 * C9202 + C50781 * C9206 + C22820 * C3483 +
               C22815 * C3489) *
                  C696) *
                 C50807 +
             ((C29458 + C29457) * C50607 + (C29456 + C29455) * C696) * C50913) *
                C25653) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C1285 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50942 -
             (C22855 + C22856) * C1286 - (C22857 + C22858) * C50926 +
             C22871 * C1287 + C22872 * C1282) *
                C32080 +
            ((C28901 + C28902) * C1285 + (C28903 + C28904) * C50942 -
             C28895 * C1286 - C28896 * C50926 + C28897 * C1287 +
             C28898 * C1282) *
                C50807) *
               C50891 +
           (((C22856 + C22855) * C1285 + (C22858 + C22857) * C50942 -
             (C22860 + C22859) * C1286 - (C22862 + C22861) * C50926 +
             (C22864 + C22863) * C1287 + (C22866 + C22865) * C1282) *
                C32080 +
            (C28899 * C1285 + C28900 * C50942 - C23241 * C1286 -
             C23242 * C50926 + (C23238 + C23237) * C1287 +
             (C23240 + C23239) * C1282) *
                C50807) *
               C50634) *
              C50696 * C1283 +
          ((((C23045 + C23046) * C1286 -
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C50942 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C1285) +
             (C23047 + C23048) * C50926 - C23057 * C1287 - C23058 * C1282) *
                C32080 +
            (C30687 * C1286 -
             ((C29454 + C29453) * C50942 + (C29452 + C29451) * C1285) +
             C30688 * C50926 - (C24577 + C24578) * C1287 -
             (C24579 + C24580) * C1282) *
                C50807) *
               C50891 +
           (((C23050 + C23049) * C1286 -
             ((C23048 + C23047) * C50942 + (C23046 + C23045) * C1285) +
             (C23052 + C23051) * C50926 - (C23053 + C23054) * C1287 -
             (C23055 + C23056) * C1282) *
                C32080 +
            ((C24578 + C24577) * C1286 - (C30689 * C50942 + C30690 * C1285) +
             (C24580 + C24579) * C50926 -
             (C22821 * C815 + C50781 * C828 + C22820 * C814 + C22815 * C825) *
                 C1287 -
             (C22821 * C827 + C50781 * C839 + C22820 * C826 + C22815 * C838) *
                 C1282) *
                C50807) *
               C50634) *
              C50696 * C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C1391 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C1386 -
             (C22855 + C22856) * C1392 - (C22857 + C22858) * C50612) *
                C32080 +
            ((C28901 + C28902) * C1391 + (C28903 + C28904) * C1386 -
             C28895 * C1392 - C28896 * C50612) *
                C50807) *
               C50891 +
           (((C22856 + C22855) * C1391 + (C22858 + C22857) * C1386 -
             (C22860 + C22859) * C1392 - (C22862 + C22861) * C50612) *
                C32080 +
            (C28899 * C1391 + C28900 * C1386 - C23241 * C1392 -
             C23242 * C50612) *
                C50807) *
               C50634) *
              C50696 * C50944 +
          ((((C23045 + C23046) * C1392 -
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C1386 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C1391) +
             (C23047 + C23048) * C50612) *
                C32080 +
            (C30687 * C1392 -
             ((C29454 + C29453) * C1386 + (C29452 + C29451) * C1391) +
             C30688 * C50612) *
                C50807) *
               C50891 +
           (((C23050 + C23049) * C1392 -
             ((C23048 + C23047) * C1386 + (C23046 + C23045) * C1391) +
             (C23052 + C23051) * C50612) *
                C32080 +
            ((C24578 + C24577) * C1392 - (C30689 * C1386 + C30690 * C1391) +
             (C24580 + C24579) * C50612) *
                C50807) *
               C50634) *
              C50696 * C50932 +
          ((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                 C1391 +
             (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                 C1386 -
             (C23405 + C23406) * C1392 - (C23407 + C23408) * C50612) *
                C32080 +
            ((C29455 + C29456) * C1391 + (C29457 + C29458) * C1386 -
             (C29107 + C29108) * C1392 - (C29109 + C29110) * C50612) *
                C50807) *
               C50891 +
           (((C23406 + C23405) * C1391 + (C23408 + C23407) * C1386 -
             (C23409 + C23410) * C1392 - (C23411 + C23412) * C50612) *
                C32080 +
            ((C29108 + C29107) * C1391 + (C29110 + C29109) * C1386 -
             (C22821 * C3153 + C50781 * C3157 + C22820 * C816 + C22815 * C830) *
                 C1392 -
             (C22821 * C3156 + C50781 * C3162 + C22820 * C829 + C22815 * C840) *
                 C50612) *
                C50807) *
               C50634) *
              C50696 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                  C1391 +
              (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                  C1386 -
              (C22855 + C22856) * C1392 - (C22857 + C22858) * C50612) *
                 C32080 +
             ((C28901 + C28902) * C1391 + (C28903 + C28904) * C1386 -
              C28895 * C1392 - C28896 * C50612) *
                 C50807) *
                C50891 +
            (((C22856 + C22855) * C1391 + (C22858 + C22857) * C1386 -
              (C22860 + C22859) * C1392 - (C22862 + C22861) * C50612) *
                 C32080 +
             (C28899 * C1391 + C28900 * C1386 - C23241 * C1392 -
              C23242 * C50612) *
                 C50807) *
                C50634) *
               C50900 +
           (((C28899 * C1392 -
              ((C28904 + C28903) * C1386 + (C28902 + C28901) * C1391) +
              C28900 * C50612) *
                 C32080 +
             (C29653 * C1392 -
              ((C29673 + C29674) * C1386 + (C29675 + C29676) * C1391) +
              C29662 * C50612) *
                 C50807) *
                C50891 +
            ((C28897 * C1392 - (C28896 * C1386 + C28895 * C1391) +
              C28898 * C50612) *
                 C32080 +
             ((C23824 + C23823) * C1392 - (C29663 * C1386 + C29664 * C1391) +
              (C23826 + C23825) * C50612) *
                 C50807) *
                C50634) *
               C50708) *
              C1283 +
          (((((C23045 + C23046) * C1392 -
              ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                   C1386 +
               (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                   C1391) +
              (C23047 + C23048) * C50612) *
                 C32080 +
             (C30687 * C1392 -
              ((C29454 + C29453) * C1386 + (C29452 + C29451) * C1391) +
              C30688 * C50612) *
                 C50807) *
                C50891 +
            (((C23050 + C23049) * C1392 -
              ((C23048 + C23047) * C1386 + (C23046 + C23045) * C1391) +
              (C23052 + C23051) * C50612) *
                 C32080 +
             ((C24578 + C24577) * C1392 - (C30689 * C1386 + C30690 * C1391) +
              (C24580 + C24579) * C50612) *
                 C50807) *
                C50634) *
               C50900 +
           ((((C29451 + C29452) * C1391 + (C29453 + C29454) * C1386 -
              C30690 * C1392 - C30689 * C50612) *
                 C32080 +
             ((C29891 + C29892) * C1391 + (C29893 + C29894) * C1386 -
              (C29896 + C29895) * C1392 - (C29898 + C29897) * C50612) *
                 C50807) *
                C50891 +
            ((C30687 * C1391 + C30688 * C1386 - (C24577 + C24578) * C1392 -
              (C24579 + C24580) * C50612) *
                 C32080 +
             ((C29895 + C29896) * C1391 + (C29897 + C29898) * C1386 -
              (C22821 * C3481 + C50781 * C3485 + C22820 * C1081 +
               C22815 * C1087) *
                  C1392 -
              (C22821 * C3484 + C50781 * C3490 + C22820 * C1086 +
               C22815 * C1093) *
                  C50612) *
                 C50807) *
                C50634) *
               C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                  C49720 +
              (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                  C50884 -
              (C22855 + C22856) * C49713 - (C22857 + C22858) * C50612) *
                 C32080 +
             ((C28901 + C28902) * C49720 + (C28903 + C28904) * C50884 -
              C28895 * C49713 - C28896 * C50612) *
                 C50807) *
                C50891 +
            (((C22856 + C22855) * C49720 + (C22858 + C22857) * C50884 -
              (C22860 + C22859) * C49713 - (C22862 + C22861) * C50612) *
                 C32080 +
             (C28899 * C49720 + C28900 * C50884 - C23241 * C49713 -
              C23242 * C50612) *
                 C50807) *
                C50634) *
               C1643 +
           (((C28899 * C49713 -
              ((C28904 + C28903) * C50884 + (C28902 + C28901) * C49720) +
              C28900 * C50612) *
                 C32080 +
             (C29653 * C49713 -
              ((C29673 + C29674) * C50884 + (C29675 + C29676) * C49720) +
              C29662 * C50612) *
                 C50807) *
                C50891 +
            ((C28897 * C49713 - (C28896 * C50884 + C28895 * C49720) +
              C28898 * C50612) *
                 C32080 +
             ((C23824 + C23823) * C49713 - (C29663 * C50884 + C29664 * C49720) +
              (C23826 + C23825) * C50612) *
                 C50807) *
                C50634) *
               C50708) *
              C1283 +
          (((((C23045 + C23046) * C49713 -
              ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                   C50884 +
               (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                   C49720) +
              (C23047 + C23048) * C50612) *
                 C32080 +
             (C30687 * C49713 -
              ((C29454 + C29453) * C50884 + (C29452 + C29451) * C49720) +
              C30688 * C50612) *
                 C50807) *
                C50891 +
            (((C23050 + C23049) * C49713 -
              ((C23048 + C23047) * C50884 + (C23046 + C23045) * C49720) +
              (C23052 + C23051) * C50612) *
                 C32080 +
             ((C24578 + C24577) * C49713 - (C30689 * C50884 + C30690 * C49720) +
              (C24580 + C24579) * C50612) *
                 C50807) *
                C50634) *
               C1643 +
           ((((C29451 + C29452) * C49720 + (C29453 + C29454) * C50884 -
              C30690 * C49713 - C30689 * C50612) *
                 C32080 +
             ((C29891 + C29892) * C49720 + (C29893 + C29894) * C50884 -
              (C29896 + C29895) * C49713 - (C29898 + C29897) * C50612) *
                 C50807) *
                C50891 +
            ((C30687 * C49720 + C30688 * C50884 - (C24577 + C24578) * C49713 -
              (C24579 + C24580) * C50612) *
                 C32080 +
             ((C29895 + C29896) * C49720 + (C29897 + C29898) * C50884 -
              (C22821 * C3481 + C50781 * C3485 + C22820 * C1081 +
               C22815 * C1087) *
                  C49713 -
              (C22821 * C3484 + C50781 * C3490 + C22820 * C1086 +
               C22815 * C1093) *
                  C50612) *
                 C50807) *
                C50634) *
               C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                  C696 +
              (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                  C50607) *
                 C32080 +
             ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50807) *
                C50891 +
            (((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C32080 +
             (C28899 * C696 + C28900 * C50607) * C50807) *
                C50634) *
               C1643 -
           (((C29663 * C50607 + C29664 * C696) * C50807 +
             (C28896 * C50607 + C28895 * C696) * C32080) *
                C50634 +
            (((C29673 + C29674) * C50607 + (C29675 + C29676) * C696) * C50807 +
             ((C28904 + C28903) * C50607 + (C28902 + C28901) * C696) * C32080) *
                C50891) *
               C50708) *
              C50944 +
          (((((C29451 + C29452) * C696 + (C29453 + C29454) * C50607) * C32080 +
             ((C29891 + C29892) * C696 + (C29893 + C29894) * C50607) * C50807) *
                C50891 +
            ((C30687 * C696 + C30688 * C50607) * C32080 +
             ((C29895 + C29896) * C696 + (C29897 + C29898) * C50607) * C50807) *
                C50634) *
               C50708 -
           (((C30689 * C50607 + C30690 * C696) * C50807 +
             ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C32080) *
                C50634 +
            (((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50807 +
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C50607 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C696) *
                 C32080) *
                C50891) *
               C1643) *
              C50932 +
          (((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                  C696 +
              (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                  C50607) *
                 C32080 +
             ((C29455 + C29456) * C696 + (C29457 + C29458) * C50607) * C50807) *
                C50891 +
            (((C23406 + C23405) * C696 + (C23408 + C23407) * C50607) * C32080 +
             ((C29108 + C29107) * C696 + (C29110 + C29109) * C50607) * C50807) *
                C50634) *
               C1643 -
           ((((C22821 * C9203 + C50781 * C9207 + C22820 * C3486 +
               C22815 * C3491) *
                  C50607 +
              (C22821 * C9201 + C50781 * C9204 + C22820 * C3482 +
               C22815 * C3487) *
                  C696) *
                 C50807 +
             ((C29109 + C29110) * C50607 + (C29107 + C29108) * C696) * C32080) *
                C50634 +
            (((C22821 * C9205 + C50781 * C9208 + C22820 * C3488 +
               C22815 * C3492) *
                  C50607 +
              (C22821 * C9202 + C50781 * C9206 + C22820 * C3483 +
               C22815 * C3489) *
                  C696) *
                 C50807 +
             ((C29458 + C29457) * C50607 + (C29456 + C29455) * C696) * C32080) *
                C50891) *
               C50708) *
              C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                  C696 +
              (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                  C50607) *
                 C32080 +
             ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50807) *
                C50891 +
            (((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C32080 +
             (C28899 * C696 + C28900 * C50607) * C50807) *
                C50634) *
               C50945 -
           (((C29663 * C50607 + C29664 * C696) * C50807 +
             (C28896 * C50607 + C28895 * C696) * C32080) *
                C50634 +
            (((C29673 + C29674) * C50607 + (C29675 + C29676) * C696) * C50807 +
             ((C28904 + C28903) * C50607 + (C28902 + C28901) * C696) * C32080) *
                C50891) *
               C50935 +
           ((((C29676 + C29675) * C696 + (C29674 + C29673) * C50607) * C32080 +
             ((C30037 + C30038) * C696 + (C30039 + C30040) * C50607) * C50807) *
                C50891 +
            ((C29653 * C696 + C29662 * C50607) * C32080 +
             ((C29678 + C29677) * C696 + (C29680 + C29679) * C50607) * C50807) *
                C50634) *
               C1875) *
              C1283 +
          (((((C29451 + C29452) * C696 + (C29453 + C29454) * C50607) * C32080 +
             ((C29891 + C29892) * C696 + (C29893 + C29894) * C50607) * C50807) *
                C50891 +
            ((C30687 * C696 + C30688 * C50607) * C32080 +
             ((C29895 + C29896) * C696 + (C29897 + C29898) * C50607) * C50807) *
                C50634) *
               C50935 -
           (((C30689 * C50607 + C30690 * C696) * C50807 +
             ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C32080) *
                C50634 +
            (((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50807 +
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C50607 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C696) *
                 C32080) *
                C50891) *
               C50945 -
           ((((C22821 * C9309 + C50781 * C9313 + C22820 * C3596 +
               C22815 * C3601) *
                  C50607 +
              (C22821 * C9307 + C50781 * C9310 + C22820 * C3592 +
               C22815 * C3597) *
                  C696) *
                 C50807 +
             ((C29898 + C29897) * C50607 + (C29896 + C29895) * C696) * C32080) *
                C50634 +
            (((C22821 * C9311 + C50781 * C9314 + C22820 * C3598 +
               C22815 * C3602) *
                  C50607 +
              (C22821 * C9308 + C50781 * C9312 + C22820 * C3593 +
               C22815 * C3599) *
                  C696) *
                 C50807 +
             ((C29894 + C29893) * C50607 + (C29892 + C29891) * C696) * C32080) *
                C50891) *
               C1875) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C49720 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50884 -
             (C22855 + C22856) * C49713 - (C22857 + C22858) * C50612) *
                C32080 +
            ((C28901 + C28902) * C49720 + (C28903 + C28904) * C50884 -
             C28895 * C49713 - C28896 * C50612) *
                C50807) *
               C50891 +
           (((C22856 + C22855) * C49720 + (C22858 + C22857) * C50884 -
             (C22860 + C22859) * C49713 - (C22862 + C22861) * C50612) *
                C32080 +
            (C28899 * C49720 + C28900 * C50884 - C23241 * C49713 -
             C23242 * C50612) *
                C50807) *
               C50634) *
              C50696 * C582 +
          ((((C23045 + C23046) * C49713 -
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C50884 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C49720) +
             (C23047 + C23048) * C50612) *
                C32080 +
            (C30687 * C49713 -
             ((C29454 + C29453) * C50884 + (C29452 + C29451) * C49720) +
             C30688 * C50612) *
                C50807) *
               C50891 +
           (((C23050 + C23049) * C49713 -
             ((C23048 + C23047) * C50884 + (C23046 + C23045) * C49720) +
             (C23052 + C23051) * C50612) *
                C32080 +
            ((C24578 + C24577) * C49713 - (C30689 * C50884 + C30690 * C49720) +
             (C24580 + C24579) * C50612) *
                C50807) *
               C50634) *
              C50696 * C583 +
          ((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                 C49720 +
             (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                 C50884 -
             (C23405 + C23406) * C49713 - (C23407 + C23408) * C50612) *
                C32080 +
            ((C29455 + C29456) * C49720 + (C29457 + C29458) * C50884 -
             (C29107 + C29108) * C49713 - (C29109 + C29110) * C50612) *
                C50807) *
               C50891 +
           (((C23406 + C23405) * C49720 + (C23408 + C23407) * C50884 -
             (C23409 + C23410) * C49713 - (C23411 + C23412) * C50612) *
                C32080 +
            ((C29108 + C29107) * C49720 + (C29110 + C29109) * C50884 -
             (C22821 * C3153 + C50781 * C3157 + C22820 * C816 + C22815 * C830) *
                 C49713 -
             (C22821 * C3156 + C50781 * C3162 + C22820 * C829 + C22815 * C840) *
                 C50612) *
                C50807) *
               C50634) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C118 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C106 -
            (C22855 + C22856) * C119 - (C22857 + C22858) * C107 +
            C22871 * C120 + C22872 * C108 - C22873 * C121 - C22874 * C109) *
               C32080 +
           ((C28901 + C28902) * C118 + (C28903 + C28904) * C106 -
            C28895 * C119 - C28896 * C107 + C28897 * C120 + C28898 * C108 -
            (C23237 + C23238) * C121 - (C23239 + C23240) * C109) *
               C50807) *
              C50891 +
          (((C22856 + C22855) * C118 + (C22858 + C22857) * C106 -
            (C22860 + C22859) * C119 - (C22862 + C22861) * C107 +
            (C22864 + C22863) * C120 + (C22866 + C22865) * C108 -
            (C22867 + C22868) * C121 - (C22869 + C22870) * C109) *
               C32080 +
           (C28899 * C118 + C28900 * C106 - C23241 * C119 - C23242 * C107 +
            (C23238 + C23237) * C120 + (C23240 + C23239) * C108 -
            (C22821 * C1523 + C50781 * C1524 + C22820 * C438 + C22815 * C448) *
                C121 -
            (C22821 * C1525 + C50781 * C1526 + C22820 * C449 + C22815 * C456) *
                C109) *
               C50807) *
              C50634) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C49720 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50884 -
             (C22855 + C22856) * C49713 - (C22857 + C22858) * C50612) *
                C32080 +
            ((C28901 + C28902) * C49720 + (C28903 + C28904) * C50884 -
             C28895 * C49713 - C28896 * C50612) *
                C50807) *
               C50891 +
           (((C22856 + C22855) * C49720 + (C22858 + C22857) * C50884 -
             (C22860 + C22859) * C49713 - (C22862 + C22861) * C50612) *
                C32080 +
            (C28899 * C49720 + C28900 * C50884 - C23241 * C49713 -
             C23242 * C50612) *
                C50807) *
               C50634) *
              C941 +
          (((C28899 * C49713 -
             ((C28904 + C28903) * C50884 + (C28902 + C28901) * C49720) +
             C28900 * C50612) *
                C32080 +
            (C29653 * C49713 -
             ((C29673 + C29674) * C50884 + (C29675 + C29676) * C49720) +
             C29662 * C50612) *
                C50807) *
               C50891 +
           ((C28897 * C49713 - (C28896 * C50884 + C28895 * C49720) +
             C28898 * C50612) *
                C32080 +
            ((C23824 + C23823) * C49713 - (C29663 * C50884 + C29664 * C49720) +
             (C23826 + C23825) * C50612) *
                C50807) *
               C50634) *
              C942 +
          ((((C29676 + C29675) * C49720 + (C29674 + C29673) * C50884 -
             C29664 * C49713 - C29663 * C50612) *
                C32080 +
            ((C30037 + C30038) * C49720 + (C30039 + C30040) * C50884 -
             (C29677 + C29678) * C49713 - (C29679 + C29680) * C50612) *
                C50807) *
               C50891 +
           ((C29653 * C49720 + C29662 * C50884 - (C23823 + C23824) * C49713 -
             (C23825 + C23826) * C50612) *
                C32080 +
            ((C29678 + C29677) * C49720 + (C29680 + C29679) * C50884 -
             (C22821 * C3591 + C50781 * C3595 + C22820 * C1167 +
              C22815 * C1173) *
                 C49713 -
             (C22821 * C3594 + C50781 * C3600 + C22820 * C1172 +
              C22815 * C1179) *
                 C50612) *
                C50807) *
               C50634) *
              C943) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C696 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50607) *
                C32080 +
            ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50807) *
               C50891 +
           (((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C32080 +
            (C28899 * C696 + C28900 * C50607) * C50807) *
               C50634) *
              C50696 * C692 -
          (((C30689 * C50607 + C30690 * C696) * C50807 +
            ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C32080) *
               C50634 +
           (((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50807 +
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50607 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C696) *
                C32080) *
               C50891) *
              C50696 * C693 +
          ((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                 C696 +
             (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                 C50607) *
                C32080 +
            ((C29455 + C29456) * C696 + (C29457 + C29458) * C50607) * C50807) *
               C50891 +
           (((C23406 + C23405) * C696 + (C23408 + C23407) * C50607) * C32080 +
            ((C29108 + C29107) * C696 + (C29110 + C29109) * C50607) * C50807) *
               C50634) *
              C50696 * C694 -
          ((((C22821 * C8885 + C50781 * C8889 + C22820 * C3158 +
              C22815 * C3163) *
                 C50607 +
             (C22821 * C8883 + C50781 * C8886 + C22820 * C3154 +
              C22815 * C3159) *
                 C696) *
                C50807 +
            ((C22821 * C3000 + C50781 * C3005 + C22820 * C705 + C22815 * C711) *
                 C50607 +
             (C22821 * C2996 + C50781 * C3001 + C22820 * C699 + C22815 * C706) *
                 C696) *
                C32080) *
               C50634 +
           (((C22821 * C8887 + C50781 * C8890 + C22820 * C3160 +
              C22815 * C3164) *
                 C50607 +
             (C22821 * C8884 + C50781 * C8888 + C22820 * C3155 +
              C22815 * C3161) *
                 C696) *
                C50807 +
            ((C22821 * C3002 + C50781 * C3006 + C22820 * C707 + C22815 * C712) *
                 C50607 +
             (C22821 * C2997 + C50781 * C3003 + C22820 * C700 + C22815 * C708) *
                 C696) *
                C32080) *
               C50891) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C283 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C278 -
             (C22855 + C22856) * C284 - (C22857 + C22858) * C279 +
             C22871 * C285 + C22872 * C280) *
                C32080 +
            ((C28901 + C28902) * C283 + (C28903 + C28904) * C278 -
             C28895 * C284 - C28896 * C279 + C28897 * C285 + C28898 * C280) *
                C50807) *
               C50891 +
           (((C22856 + C22855) * C283 + (C22858 + C22857) * C278 -
             (C22860 + C22859) * C284 - (C22862 + C22861) * C279 +
             (C22864 + C22863) * C285 + (C22866 + C22865) * C280) *
                C32080 +
            (C28899 * C283 + C28900 * C278 - C23241 * C284 - C23242 * C279 +
             (C23238 + C23237) * C285 + (C23240 + C23239) * C280) *
                C50807) *
               C50634) *
              C50696 * C50899 +
          ((((C23045 + C23046) * C284 -
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C278 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C283) +
             (C23047 + C23048) * C279 - C23057 * C285 - C23058 * C280) *
                C32080 +
            (C30687 * C284 -
             ((C29454 + C29453) * C278 + (C29452 + C29451) * C283) +
             C30688 * C279 - (C24577 + C24578) * C285 -
             (C24579 + C24580) * C280) *
                C50807) *
               C50891 +
           (((C23050 + C23049) * C284 -
             ((C23048 + C23047) * C278 + (C23046 + C23045) * C283) +
             (C23052 + C23051) * C279 - (C23053 + C23054) * C285 -
             (C23055 + C23056) * C280) *
                C32080 +
            ((C24578 + C24577) * C284 - (C30689 * C278 + C30690 * C283) +
             (C24580 + C24579) * C279 -
             (C22821 * C815 + C50781 * C828 + C22820 * C814 + C22815 * C825) *
                 C285 -
             (C22821 * C827 + C50781 * C839 + C22820 * C826 + C22815 * C838) *
                 C280) *
                C50807) *
               C50634) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                  C696 +
              (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                  C50607) *
                 C32080 +
             ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50807) *
                C50891 +
            (((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C32080 +
             (C28899 * C696 + C28900 * C50607) * C50807) *
                C50634) *
               C941 -
           (((C29663 * C50607 + C29664 * C696) * C50807 +
             (C28896 * C50607 + C28895 * C696) * C32080) *
                C50634 +
            (((C29673 + C29674) * C50607 + (C29675 + C29676) * C696) * C50807 +
             ((C28904 + C28903) * C50607 + (C28902 + C28901) * C696) * C32080) *
                C50891) *
               C942 +
           ((((C29676 + C29675) * C696 + (C29674 + C29673) * C50607) * C32080 +
             ((C30037 + C30038) * C696 + (C30039 + C30040) * C50607) * C50807) *
                C50891 +
            ((C29653 * C696 + C29662 * C50607) * C32080 +
             ((C29678 + C29677) * C696 + (C29680 + C29679) * C50607) * C50807) *
                C50634) *
               C943) *
              C50899 +
          (((((C29451 + C29452) * C696 + (C29453 + C29454) * C50607) * C32080 +
             ((C29891 + C29892) * C696 + (C29893 + C29894) * C50607) * C50807) *
                C50891 +
            ((C30687 * C696 + C30688 * C50607) * C32080 +
             ((C29895 + C29896) * C696 + (C29897 + C29898) * C50607) * C50807) *
                C50634) *
               C942 -
           (((C30689 * C50607 + C30690 * C696) * C50807 +
             ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C32080) *
                C50634 +
            (((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50807 +
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C50607 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C696) *
                 C32080) *
                C50891) *
               C941 -
           ((((C22821 * C9309 + C50781 * C9313 + C22820 * C3596 +
               C22815 * C3601) *
                  C50607 +
              (C22821 * C9307 + C50781 * C9310 + C22820 * C3592 +
               C22815 * C3597) *
                  C696) *
                 C50807 +
             ((C29898 + C29897) * C50607 + (C29896 + C29895) * C696) * C32080) *
                C50634 +
            (((C22821 * C9311 + C50781 * C9314 + C22820 * C3598 +
               C22815 * C3602) *
                  C50607 +
              (C22821 * C9308 + C50781 * C9312 + C22820 * C3593 +
               C22815 * C3599) *
                  C696) *
                 C50807 +
             ((C29894 + C29893) * C50607 + (C29892 + C29891) * C696) * C32080) *
                C50891) *
               C943) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                  C696 +
              (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                  C50607) *
                 C32080 +
             ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50807) *
                C50891 +
            (((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C32080 +
             (C28899 * C696 + C28900 * C50607) * C50807) *
                C50634) *
               C50900 -
           (((C29663 * C50607 + C29664 * C696) * C50807 +
             (C28896 * C50607 + C28895 * C696) * C32080) *
                C50634 +
            (((C29673 + C29674) * C50607 + (C29675 + C29676) * C696) * C50807 +
             ((C28904 + C28903) * C50607 + (C28902 + C28901) * C696) * C32080) *
                C50891) *
               C50708) *
              C582 +
          (((((C29451 + C29452) * C696 + (C29453 + C29454) * C50607) * C32080 +
             ((C29891 + C29892) * C696 + (C29893 + C29894) * C50607) * C50807) *
                C50891 +
            ((C30687 * C696 + C30688 * C50607) * C32080 +
             ((C29895 + C29896) * C696 + (C29897 + C29898) * C50607) * C50807) *
                C50634) *
               C50708 -
           (((C30689 * C50607 + C30690 * C696) * C50807 +
             ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C32080) *
                C50634 +
            (((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50807 +
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C50607 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C696) *
                 C32080) *
                C50891) *
               C50900) *
              C583 +
          (((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                  C696 +
              (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                  C50607) *
                 C32080 +
             ((C29455 + C29456) * C696 + (C29457 + C29458) * C50607) * C50807) *
                C50891 +
            (((C23406 + C23405) * C696 + (C23408 + C23407) * C50607) * C32080 +
             ((C29108 + C29107) * C696 + (C29110 + C29109) * C50607) * C50807) *
                C50634) *
               C50900 -
           ((((C22821 * C9203 + C50781 * C9207 + C22820 * C3486 +
               C22815 * C3491) *
                  C50607 +
              (C22821 * C9201 + C50781 * C9204 + C22820 * C3482 +
               C22815 * C3487) *
                  C696) *
                 C50807 +
             ((C29109 + C29110) * C50607 + (C29107 + C29108) * C696) * C32080) *
                C50634 +
            (((C22821 * C9205 + C50781 * C9208 + C22820 * C3488 +
               C22815 * C3492) *
                  C50607 +
              (C22821 * C9202 + C50781 * C9206 + C22820 * C3483 +
               C22815 * C3489) *
                  C696) *
                 C50807 +
             ((C29458 + C29457) * C50607 + (C29456 + C29455) * C696) * C32080) *
                C50891) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C283 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C278 -
             (C22855 + C22856) * C284 - (C22857 + C22858) * C279 +
             C22871 * C285 + C22872 * C280) *
                C32080 +
            ((C28901 + C28902) * C283 + (C28903 + C28904) * C278 -
             C28895 * C284 - C28896 * C279 + C28897 * C285 + C28898 * C280) *
                C50807) *
               C50891 +
           (((C22856 + C22855) * C283 + (C22858 + C22857) * C278 -
             (C22860 + C22859) * C284 - (C22862 + C22861) * C279 +
             (C22864 + C22863) * C285 + (C22866 + C22865) * C280) *
                C32080 +
            (C28899 * C283 + C28900 * C278 - C23241 * C284 - C23242 * C279 +
             (C23238 + C23237) * C285 + (C23240 + C23239) * C280) *
                C50807) *
               C50634) *
              C50900 +
          (((C28899 * C284 -
             ((C28904 + C28903) * C278 + (C28902 + C28901) * C283) +
             C28900 * C279 - C23241 * C285 - C23242 * C280) *
                C32080 +
            (C29653 * C284 -
             ((C29673 + C29674) * C278 + (C29675 + C29676) * C283) +
             C29662 * C279 - (C23823 + C23824) * C285 -
             (C23825 + C23826) * C280) *
                C50807) *
               C50891 +
           ((C28897 * C284 - (C28896 * C278 + C28895 * C283) + C28898 * C279 -
             (C23237 + C23238) * C285 - (C23239 + C23240) * C280) *
                C32080 +
            ((C23824 + C23823) * C284 - (C29663 * C278 + C29664 * C283) +
             (C23826 + C23825) * C279 -
             (C22821 * C1080 + C50781 * C1085 + C22820 * C947 + C22815 * C955) *
                 C285 -
             (C22821 * C1084 + C50781 * C1092 + C22820 * C956 + C22815 * C962) *
                 C280) *
                C50807) *
               C50634) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C696 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50607) *
                C32080 +
            ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50807) *
               C50891 +
           (((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C32080 +
            (C28899 * C696 + C28900 * C50607) * C50807) *
               C50634) *
              C1162 -
          (((C29663 * C50607 + C29664 * C696) * C50807 +
            (C28896 * C50607 + C28895 * C696) * C32080) *
               C50634 +
           (((C29673 + C29674) * C50607 + (C29675 + C29676) * C696) * C50807 +
            ((C28904 + C28903) * C50607 + (C28902 + C28901) * C696) * C32080) *
               C50891) *
              C1163 +
          ((((C29676 + C29675) * C696 + (C29674 + C29673) * C50607) * C32080 +
            ((C30037 + C30038) * C696 + (C30039 + C30040) * C50607) * C50807) *
               C50891 +
           ((C29653 * C696 + C29662 * C50607) * C32080 +
            ((C29678 + C29677) * C696 + (C29680 + C29679) * C50607) * C50807) *
               C50634) *
              C1164 -
          ((((C22821 * C16448 + C50781 * C16450 + C22820 * C6400 +
              C22815 * C6405) *
                 C50607 +
             (C22821 * C16447 + C50781 * C16449 + C22820 * C6396 +
              C22815 * C6401) *
                 C696) *
                C50807 +
            ((C29679 + C29680) * C50607 + (C29677 + C29678) * C696) * C32080) *
               C50634 +
           (((C22821 * C13843 + C50781 * C13847 + C22820 * C6402 +
              C22815 * C6406) *
                 C50607 +
             (C22821 * C13841 + C50781 * C13845 + C22820 * C6397 +
              C22815 * C6403) *
                 C696) *
                C50807 +
            ((C30040 + C30039) * C50607 + (C30038 + C30037) * C696) * C32080) *
               C50891) *
              C1165) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C1285 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50942 -
             (C22855 + C22856) * C1286 - (C22857 + C22858) * C50926 +
             C22871 * C1287 + C22872 * C1282) *
                C32080 +
            ((C28901 + C28902) * C1285 + (C28903 + C28904) * C50942 -
             C28895 * C1286 - C28896 * C50926 + C28897 * C1287 +
             C28898 * C1282) *
                C50807) *
               C50891 +
           (((C22856 + C22855) * C1285 + (C22858 + C22857) * C50942 -
             (C22860 + C22859) * C1286 - (C22862 + C22861) * C50926 +
             (C22864 + C22863) * C1287 + (C22866 + C22865) * C1282) *
                C32080 +
            (C28899 * C1285 + C28900 * C50942 - C23241 * C1286 -
             C23242 * C50926 + (C23238 + C23237) * C1287 +
             (C23240 + C23239) * C1282) *
                C50807) *
               C50634) *
              C1643 +
          (((C28899 * C1286 -
             ((C28904 + C28903) * C50942 + (C28902 + C28901) * C1285) +
             C28900 * C50926 - C23241 * C1287 - C23242 * C1282) *
                C32080 +
            (C29653 * C1286 -
             ((C29673 + C29674) * C50942 + (C29675 + C29676) * C1285) +
             C29662 * C50926 - (C23823 + C23824) * C1287 -
             (C23825 + C23826) * C1282) *
                C50807) *
               C50891 +
           ((C28897 * C1286 - (C28896 * C50942 + C28895 * C1285) +
             C28898 * C50926 - (C23237 + C23238) * C1287 -
             (C23239 + C23240) * C1282) *
                C32080 +
            ((C23824 + C23823) * C1286 - (C29663 * C50942 + C29664 * C1285) +
             (C23826 + C23825) * C50926 -
             (C22821 * C1080 + C50781 * C1085 + C22820 * C947 + C22815 * C955) *
                 C1287 -
             (C22821 * C1084 + C50781 * C1092 + C22820 * C956 + C22815 * C962) *
                 C1282) *
                C50807) *
               C50634) *
              C50708) *
         C50670) /
        (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                  C1391 +
              (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                  C1386 -
              (C22855 + C22856) * C1392 - (C22857 + C22858) * C50612) *
                 C32080 +
             ((C28901 + C28902) * C1391 + (C28903 + C28904) * C1386 -
              C28895 * C1392 - C28896 * C50612) *
                 C50807) *
                C50891 +
            (((C22856 + C22855) * C1391 + (C22858 + C22857) * C1386 -
              (C22860 + C22859) * C1392 - (C22862 + C22861) * C50612) *
                 C32080 +
             (C28899 * C1391 + C28900 * C1386 - C23241 * C1392 -
              C23242 * C50612) *
                 C50807) *
                C50634) *
               C1643 +
           (((C28899 * C1392 -
              ((C28904 + C28903) * C1386 + (C28902 + C28901) * C1391) +
              C28900 * C50612) *
                 C32080 +
             (C29653 * C1392 -
              ((C29673 + C29674) * C1386 + (C29675 + C29676) * C1391) +
              C29662 * C50612) *
                 C50807) *
                C50891 +
            ((C28897 * C1392 - (C28896 * C1386 + C28895 * C1391) +
              C28898 * C50612) *
                 C32080 +
             ((C23824 + C23823) * C1392 - (C29663 * C1386 + C29664 * C1391) +
              (C23826 + C23825) * C50612) *
                 C50807) *
                C50634) *
               C50708) *
              C50899 +
          (((((C23045 + C23046) * C1392 -
              ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                   C1386 +
               (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                   C1391) +
              (C23047 + C23048) * C50612) *
                 C32080 +
             (C30687 * C1392 -
              ((C29454 + C29453) * C1386 + (C29452 + C29451) * C1391) +
              C30688 * C50612) *
                 C50807) *
                C50891 +
            (((C23050 + C23049) * C1392 -
              ((C23048 + C23047) * C1386 + (C23046 + C23045) * C1391) +
              (C23052 + C23051) * C50612) *
                 C32080 +
             ((C24578 + C24577) * C1392 - (C30689 * C1386 + C30690 * C1391) +
              (C24580 + C24579) * C50612) *
                 C50807) *
                C50634) *
               C1643 +
           ((((C29451 + C29452) * C1391 + (C29453 + C29454) * C1386 -
              C30690 * C1392 - C30689 * C50612) *
                 C32080 +
             ((C29891 + C29892) * C1391 + (C29893 + C29894) * C1386 -
              (C29896 + C29895) * C1392 - (C29898 + C29897) * C50612) *
                 C50807) *
                C50891 +
            ((C30687 * C1391 + C30688 * C1386 - (C24577 + C24578) * C1392 -
              (C24579 + C24580) * C50612) *
                 C32080 +
             ((C29895 + C29896) * C1391 + (C29897 + C29898) * C1386 -
              (C22821 * C3481 + C50781 * C3485 + C22820 * C1081 +
               C22815 * C1087) *
                  C1392 -
              (C22821 * C3484 + C50781 * C3490 + C22820 * C1086 +
               C22815 * C1093) *
                  C50612) *
                 C50807) *
                C50634) *
               C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C1391 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C1386 -
             (C22855 + C22856) * C1392 - (C22857 + C22858) * C50612) *
                C32080 +
            ((C28901 + C28902) * C1391 + (C28903 + C28904) * C1386 -
             C28895 * C1392 - C28896 * C50612) *
                C50807) *
               C50891 +
           (((C22856 + C22855) * C1391 + (C22858 + C22857) * C1386 -
             (C22860 + C22859) * C1392 - (C22862 + C22861) * C50612) *
                C32080 +
            (C28899 * C1391 + C28900 * C1386 - C23241 * C1392 -
             C23242 * C50612) *
                C50807) *
               C50634) *
              C50945 +
          (((C28899 * C1392 -
             ((C28904 + C28903) * C1386 + (C28902 + C28901) * C1391) +
             C28900 * C50612) *
                C32080 +
            (C29653 * C1392 -
             ((C29673 + C29674) * C1386 + (C29675 + C29676) * C1391) +
             C29662 * C50612) *
                C50807) *
               C50891 +
           ((C28897 * C1392 - (C28896 * C1386 + C28895 * C1391) +
             C28898 * C50612) *
                C32080 +
            ((C23824 + C23823) * C1392 - (C29663 * C1386 + C29664 * C1391) +
             (C23826 + C23825) * C50612) *
                C50807) *
               C50634) *
              C50935 +
          ((((C29676 + C29675) * C1391 + (C29674 + C29673) * C1386 -
             C29664 * C1392 - C29663 * C50612) *
                C32080 +
            ((C30037 + C30038) * C1391 + (C30039 + C30040) * C1386 -
             (C29677 + C29678) * C1392 - (C29679 + C29680) * C50612) *
                C50807) *
               C50891 +
           ((C29653 * C1391 + C29662 * C1386 - (C23823 + C23824) * C1392 -
             (C23825 + C23826) * C50612) *
                C32080 +
            ((C29678 + C29677) * C1391 + (C29680 + C29679) * C1386 -
             (C22821 * C3591 + C50781 * C3595 + C22820 * C1167 +
              C22815 * C1173) *
                 C1392 -
             (C22821 * C3594 + C50781 * C3600 + C22820 * C1172 +
              C22815 * C1179) *
                 C50612) *
                C50807) *
               C50634) *
              C1875) *
         C50670) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C118 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C106 -
            (C22855 + C22856) * C119 - (C22857 + C22858) * C107 +
            C22871 * C120 + C22872 * C108 - C22873 * C121 - C22874 * C109) *
               C32080 +
           ((C28901 + C28902) * C118 + (C28903 + C28904) * C106 -
            C28895 * C119 - C28896 * C107 + C28897 * C120 + C28898 * C108 -
            (C23237 + C23238) * C121 - (C23239 + C23240) * C109) *
               C50807) *
              C50891 +
          (((C22856 + C22855) * C118 + (C22858 + C22857) * C106 -
            (C22860 + C22859) * C119 - (C22862 + C22861) * C107 +
            (C22864 + C22863) * C120 + (C22866 + C22865) * C108 -
            (C22867 + C22868) * C121 - (C22869 + C22870) * C109) *
               C32080 +
           (C28899 * C118 + C28900 * C106 - C23241 * C119 - C23242 * C107 +
            (C23238 + C23237) * C120 + (C23240 + C23239) * C108 -
            (C22821 * C1523 + C50781 * C1524 + C22820 * C438 + C22815 * C448) *
                C121 -
            (C22821 * C1525 + C50781 * C1526 + C22820 * C449 + C22815 * C456) *
                C109) *
               C50807) *
              C50634) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C49720 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50884 -
             (C22855 + C22856) * C49713 - (C22857 + C22858) * C50612) *
                C32080 +
            ((C28901 + C28902) * C49720 + (C28903 + C28904) * C50884 -
             C28895 * C49713 - C28896 * C50612) *
                C50807) *
               C50891 +
           (((C22856 + C22855) * C49720 + (C22858 + C22857) * C50884 -
             (C22860 + C22859) * C49713 - (C22862 + C22861) * C50612) *
                C32080 +
            (C28899 * C49720 + C28900 * C50884 - C23241 * C49713 -
             C23242 * C50612) *
                C50807) *
               C50634) *
              C50696 * C582 +
          ((((C23045 + C23046) * C49713 -
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C50884 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C49720) +
             (C23047 + C23048) * C50612) *
                C32080 +
            (C30687 * C49713 -
             ((C29454 + C29453) * C50884 + (C29452 + C29451) * C49720) +
             C30688 * C50612) *
                C50807) *
               C50891 +
           (((C23050 + C23049) * C49713 -
             ((C23048 + C23047) * C50884 + (C23046 + C23045) * C49720) +
             (C23052 + C23051) * C50612) *
                C32080 +
            ((C24578 + C24577) * C49713 - (C30689 * C50884 + C30690 * C49720) +
             (C24580 + C24579) * C50612) *
                C50807) *
               C50634) *
              C50696 * C583 +
          ((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                 C49720 +
             (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                 C50884 -
             (C23405 + C23406) * C49713 - (C23407 + C23408) * C50612) *
                C32080 +
            ((C29455 + C29456) * C49720 + (C29457 + C29458) * C50884 -
             (C29107 + C29108) * C49713 - (C29109 + C29110) * C50612) *
                C50807) *
               C50891 +
           (((C23406 + C23405) * C49720 + (C23408 + C23407) * C50884 -
             (C23409 + C23410) * C49713 - (C23411 + C23412) * C50612) *
                C32080 +
            ((C29108 + C29107) * C49720 + (C29110 + C29109) * C50884 -
             (C22821 * C3153 + C50781 * C3157 + C22820 * C816 + C22815 * C830) *
                 C49713 -
             (C22821 * C3156 + C50781 * C3162 + C22820 * C829 + C22815 * C840) *
                 C50612) *
                C50807) *
               C50634) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C283 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C278 -
             (C22855 + C22856) * C284 - (C22857 + C22858) * C279 +
             C22871 * C285 + C22872 * C280) *
                C32080 +
            ((C28901 + C28902) * C283 + (C28903 + C28904) * C278 -
             C28895 * C284 - C28896 * C279 + C28897 * C285 + C28898 * C280) *
                C50807) *
               C50891 +
           (((C22856 + C22855) * C283 + (C22858 + C22857) * C278 -
             (C22860 + C22859) * C284 - (C22862 + C22861) * C279 +
             (C22864 + C22863) * C285 + (C22866 + C22865) * C280) *
                C32080 +
            (C28899 * C283 + C28900 * C278 - C23241 * C284 - C23242 * C279 +
             (C23238 + C23237) * C285 + (C23240 + C23239) * C280) *
                C50807) *
               C50634) *
              C50696 * C50899 +
          ((((C23045 + C23046) * C284 -
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C278 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C283) +
             (C23047 + C23048) * C279 - C23057 * C285 - C23058 * C280) *
                C32080 +
            (C30687 * C284 -
             ((C29454 + C29453) * C278 + (C29452 + C29451) * C283) +
             C30688 * C279 - (C24577 + C24578) * C285 -
             (C24579 + C24580) * C280) *
                C50807) *
               C50891 +
           (((C23050 + C23049) * C284 -
             ((C23048 + C23047) * C278 + (C23046 + C23045) * C283) +
             (C23052 + C23051) * C279 - (C23053 + C23054) * C285 -
             (C23055 + C23056) * C280) *
                C32080 +
            ((C24578 + C24577) * C284 - (C30689 * C278 + C30690 * C283) +
             (C24580 + C24579) * C279 -
             (C22821 * C815 + C50781 * C828 + C22820 * C814 + C22815 * C825) *
                 C285 -
             (C22821 * C827 + C50781 * C839 + C22820 * C826 + C22815 * C838) *
                 C280) *
                C50807) *
               C50634) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C696 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50607) *
                C32080 +
            ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50807) *
               C50891 +
           (((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C32080 +
            (C28899 * C696 + C28900 * C50607) * C50807) *
               C50634) *
              C50696 * C692 -
          (((C30689 * C50607 + C30690 * C696) * C50807 +
            ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C32080) *
               C50634 +
           (((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50807 +
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50607 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C696) *
                C32080) *
               C50891) *
              C50696 * C693 +
          ((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                 C696 +
             (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                 C50607) *
                C32080 +
            ((C29455 + C29456) * C696 + (C29457 + C29458) * C50607) * C50807) *
               C50891 +
           (((C23406 + C23405) * C696 + (C23408 + C23407) * C50607) * C32080 +
            ((C29108 + C29107) * C696 + (C29110 + C29109) * C50607) * C50807) *
               C50634) *
              C50696 * C694 -
          ((((C22821 * C8885 + C50781 * C8889 + C22820 * C3158 +
              C22815 * C3163) *
                 C50607 +
             (C22821 * C8883 + C50781 * C8886 + C22820 * C3154 +
              C22815 * C3159) *
                 C696) *
                C50807 +
            ((C22821 * C3000 + C50781 * C3005 + C22820 * C705 + C22815 * C711) *
                 C50607 +
             (C22821 * C2996 + C50781 * C3001 + C22820 * C699 + C22815 * C706) *
                 C696) *
                C32080) *
               C50634 +
           (((C22821 * C8887 + C50781 * C8890 + C22820 * C3160 +
              C22815 * C3164) *
                 C50607 +
             (C22821 * C8884 + C50781 * C8888 + C22820 * C3155 +
              C22815 * C3161) *
                 C696) *
                C50807 +
            ((C22821 * C3002 + C50781 * C3006 + C22820 * C707 + C22815 * C712) *
                 C50607 +
             (C22821 * C2997 + C50781 * C3003 + C22820 * C700 + C22815 * C708) *
                 C696) *
                C32080) *
               C50891) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C283 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C278 -
             (C22855 + C22856) * C284 - (C22857 + C22858) * C279 +
             C22871 * C285 + C22872 * C280) *
                C32080 +
            ((C28901 + C28902) * C283 + (C28903 + C28904) * C278 -
             C28895 * C284 - C28896 * C279 + C28897 * C285 + C28898 * C280) *
                C50807) *
               C50891 +
           (((C22856 + C22855) * C283 + (C22858 + C22857) * C278 -
             (C22860 + C22859) * C284 - (C22862 + C22861) * C279 +
             (C22864 + C22863) * C285 + (C22866 + C22865) * C280) *
                C32080 +
            (C28899 * C283 + C28900 * C278 - C23241 * C284 - C23242 * C279 +
             (C23238 + C23237) * C285 + (C23240 + C23239) * C280) *
                C50807) *
               C50634) *
              C50900 +
          (((C28899 * C284 -
             ((C28904 + C28903) * C278 + (C28902 + C28901) * C283) +
             C28900 * C279 - C23241 * C285 - C23242 * C280) *
                C32080 +
            (C29653 * C284 -
             ((C29673 + C29674) * C278 + (C29675 + C29676) * C283) +
             C29662 * C279 - (C23823 + C23824) * C285 -
             (C23825 + C23826) * C280) *
                C50807) *
               C50891 +
           ((C28897 * C284 - (C28896 * C278 + C28895 * C283) + C28898 * C279 -
             (C23237 + C23238) * C285 - (C23239 + C23240) * C280) *
                C32080 +
            ((C23824 + C23823) * C284 - (C29663 * C278 + C29664 * C283) +
             (C23826 + C23825) * C279 -
             (C22821 * C1080 + C50781 * C1085 + C22820 * C947 + C22815 * C955) *
                 C285 -
             (C22821 * C1084 + C50781 * C1092 + C22820 * C956 + C22815 * C962) *
                 C280) *
                C50807) *
               C50634) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                  C696 +
              (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                  C50607) *
                 C32080 +
             ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50807) *
                C50891 +
            (((C22856 + C22855) * C696 + (C22858 + C22857) * C50607) * C32080 +
             (C28899 * C696 + C28900 * C50607) * C50807) *
                C50634) *
               C50900 -
           (((C29663 * C50607 + C29664 * C696) * C50807 +
             (C28896 * C50607 + C28895 * C696) * C32080) *
                C50634 +
            (((C29673 + C29674) * C50607 + (C29675 + C29676) * C696) * C50807 +
             ((C28904 + C28903) * C50607 + (C28902 + C28901) * C696) * C32080) *
                C50891) *
               C50708) *
              C582 +
          (((((C29451 + C29452) * C696 + (C29453 + C29454) * C50607) * C32080 +
             ((C29891 + C29892) * C696 + (C29893 + C29894) * C50607) * C50807) *
                C50891 +
            ((C30687 * C696 + C30688 * C50607) * C32080 +
             ((C29895 + C29896) * C696 + (C29897 + C29898) * C50607) * C50807) *
                C50634) *
               C50708 -
           (((C30689 * C50607 + C30690 * C696) * C50807 +
             ((C23048 + C23047) * C50607 + (C23046 + C23045) * C696) * C32080) *
                C50634 +
            (((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50807 +
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C50607 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C696) *
                 C32080) *
                C50891) *
               C50900) *
              C583 +
          (((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                  C696 +
              (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                  C50607) *
                 C32080 +
             ((C29455 + C29456) * C696 + (C29457 + C29458) * C50607) * C50807) *
                C50891 +
            (((C23406 + C23405) * C696 + (C23408 + C23407) * C50607) * C32080 +
             ((C29108 + C29107) * C696 + (C29110 + C29109) * C50607) * C50807) *
                C50634) *
               C50900 -
           ((((C22821 * C9203 + C50781 * C9207 + C22820 * C3486 +
               C22815 * C3491) *
                  C50607 +
              (C22821 * C9201 + C50781 * C9204 + C22820 * C3482 +
               C22815 * C3487) *
                  C696) *
                 C50807 +
             ((C29109 + C29110) * C50607 + (C29107 + C29108) * C696) * C32080) *
                C50634 +
            (((C22821 * C9205 + C50781 * C9208 + C22820 * C3488 +
               C22815 * C3492) *
                  C50607 +
              (C22821 * C9202 + C50781 * C9206 + C22820 * C3483 +
               C22815 * C3489) *
                  C696) *
                 C50807 +
             ((C29458 + C29457) * C50607 + (C29456 + C29455) * C696) * C32080) *
                C50891) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[60] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C1285 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C50942 -
                    (C25695 + C25696 + C25697) * C1286 -
                    (C25698 + C25699 + C25700) * C50926 +
                    (C25701 + C25702 + C25703) * C1287 +
                    (C25704 + C25705 + C25706) * C1282) *
                       C32080 +
                   ((C44654 + C44655 + C44656) * C1285 +
                    (C44657 + C44658 + C44659) * C50942 -
                    (C26067 + C26066 + C26065) * C1286 -
                    (C26070 + C26069 + C26068) * C50926 +
                    (C26073 + C26072 + C26071) * C1287 +
                    (C26076 + C26075 + C26074) * C1282) *
                       C50807) *
                      C50629 * C50696 * C1283 +
                  (((C25883 + C25884 + C25885) * C1286 -
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C50942 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C1285) +
                    (C25886 + C25887 + C25888) * C50926 -
                    (C25889 + C25890 + C25891) * C1287 -
                    (C25892 + C25893 + C25894) * C1282) *
                       C32080 +
                   ((C27393 + C27392 + C27391) * C1286 -
                    ((C45079 + C45078 + C45077) * C50942 +
                     (C45076 + C45075 + C45074) * C1285) +
                    (C27396 + C27395 + C27394) * C50926 -
                    (C25657 * C3153 + C25652 * C3157 + C25656 * C816 +
                     C50938 * C830 + C25655 * C813 + C50946 * C823) *
                        C1287 -
                    (C25657 * C3156 + C25652 * C3162 + C25656 * C829 +
                     C50938 * C840 + C25655 * C824 + C50946 * C837) *
                        C1282) *
                       C50807) *
                      C50629 * C50696 * C50684)) /
                (p * q * std::sqrt(p + q));
    d2ee[61] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C1391 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C1386 -
                    (C25695 + C25696 + C25697) * C1392 -
                    (C25698 + C25699 + C25700) * C50612) *
                       C32080 +
                   ((C44654 + C44655 + C44656) * C1391 +
                    (C44657 + C44658 + C44659) * C1386 -
                    (C26067 + C26066 + C26065) * C1392 -
                    (C26070 + C26069 + C26068) * C50612) *
                       C50807) *
                      C50629 * C50696 * C50944 +
                  (((C25883 + C25884 + C25885) * C1392 -
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C1386 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C1391) +
                    (C25886 + C25887 + C25888) * C50612) *
                       C32080 +
                   ((C27393 + C27392 + C27391) * C1392 -
                    ((C45079 + C45078 + C45077) * C1386 +
                     (C45076 + C45075 + C45074) * C1391) +
                    (C27396 + C27395 + C27394) * C50612) *
                       C50807) *
                      C50629 * C50696 * C50932 +
                  (((C25655 * C587 + C50946 * C592 + C25656 * C700 +
                     C50938 * C708 + C25657 * C2997 + C25652 * C3003) *
                        C1391 +
                    (C25655 * C593 + C50946 * C602 + C25656 * C707 +
                     C50938 * C712 + C25657 * C3002 + C25652 * C3006) *
                        C1386 -
                    (C26235 + C26236 + C26237) * C1392 -
                    (C26238 + C26239 + C26240) * C50612) *
                       C32080 +
                   ((C45080 + C45081 + C45082) * C1391 +
                    (C45083 + C45084 + C45085) * C1386 -
                    (C25657 * C8883 + C25652 * C8886 + C25656 * C3154 +
                     C50938 * C3159 + C25655 * C817 + C50946 * C832) *
                        C1392 -
                    (C25657 * C8885 + C25652 * C8889 + C25656 * C3158 +
                     C50938 * C3163 + C25655 * C831 + C50946 * C841) *
                        C50612) *
                       C50807) *
                      C50629 * C50696 * C1390)) /
                (p * q * std::sqrt(p + q));
    d2ee[62] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                      C50938 * C294 + C25657 * C587 + C25652 * C592) *
                         C1391 +
                     (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                      C50938 * C304 + C25657 * C593 + C25652 * C602) *
                         C1386 -
                     (C25695 + C25696 + C25697) * C1392 -
                     (C25698 + C25699 + C25700) * C50612) *
                        C32080 +
                    ((C44654 + C44655 + C44656) * C1391 +
                     (C44657 + C44658 + C44659) * C1386 -
                     (C26067 + C26066 + C26065) * C1392 -
                     (C26070 + C26069 + C26068) * C50612) *
                        C50807) *
                       C50629 * C50900 +
                   (((C26065 + C26066 + C26067) * C1392 -
                     ((C44659 + C44658 + C44657) * C1386 +
                      (C44656 + C44655 + C44654) * C1391) +
                     (C26068 + C26069 + C26070) * C50612) *
                        C32080 +
                    ((C26645 + C26644 + C26643) * C1392 -
                     ((C45244 + C45245 + C45246) * C1386 +
                      (C45247 + C45248 + C45249) * C1391) +
                     (C26648 + C26647 + C26646) * C50612) *
                        C50807) *
                       C50629 * C50708) *
                      C1283 +
                  ((((C25883 + C25884 + C25885) * C1392 -
                     ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                       C50938 * C602 + C25655 * C293 + C50946 * C304) *
                          C1386 +
                      (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                       C50938 * C592 + C25655 * C287 + C50946 * C294) *
                          C1391) +
                     (C25886 + C25887 + C25888) * C50612) *
                        C32080 +
                    ((C27393 + C27392 + C27391) * C1392 -
                     ((C45079 + C45078 + C45077) * C1386 +
                      (C45076 + C45075 + C45074) * C1391) +
                     (C27396 + C27395 + C27394) * C50612) *
                        C50807) *
                       C50629 * C50900 +
                   (((C45074 + C45075 + C45076) * C1391 +
                     (C45077 + C45078 + C45079) * C1386 -
                     (C27391 + C27392 + C27393) * C1392 -
                     (C27394 + C27395 + C27396) * C50612) *
                        C32080 +
                    ((C45408 + C45409 + C45410) * C1391 +
                     (C45411 + C45412 + C45413) * C1386 -
                     (C25657 * C9201 + C25652 * C9204 + C25656 * C3482 +
                      C50938 * C3487 + C25655 * C1082 + C50946 * C1089) *
                         C1392 -
                     (C25657 * C9203 + C25652 * C9207 + C25656 * C3486 +
                      C50938 * C3491 + C25655 * C1088 + C50946 * C1094) *
                         C50612) *
                        C50807) *
                       C50629 * C50708) *
                      C50684)) /
                (p * q * std::sqrt(p + q));
    d2ee[63] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                      C50938 * C294 + C25657 * C587 + C25652 * C592) *
                         C49720 +
                     (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                      C50938 * C304 + C25657 * C593 + C25652 * C602) *
                         C50884 -
                     (C25695 + C25696 + C25697) * C49713 -
                     (C25698 + C25699 + C25700) * C50612) *
                        C32080 +
                    ((C44654 + C44655 + C44656) * C49720 +
                     (C44657 + C44658 + C44659) * C50884 -
                     (C26067 + C26066 + C26065) * C49713 -
                     (C26070 + C26069 + C26068) * C50612) *
                        C50807) *
                       C50629 * C1643 +
                   (((C26065 + C26066 + C26067) * C49713 -
                     ((C44659 + C44658 + C44657) * C50884 +
                      (C44656 + C44655 + C44654) * C49720) +
                     (C26068 + C26069 + C26070) * C50612) *
                        C32080 +
                    ((C26645 + C26644 + C26643) * C49713 -
                     ((C45244 + C45245 + C45246) * C50884 +
                      (C45247 + C45248 + C45249) * C49720) +
                     (C26648 + C26647 + C26646) * C50612) *
                        C50807) *
                       C50629 * C50708) *
                      C1283 +
                  ((((C25883 + C25884 + C25885) * C49713 -
                     ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                       C50938 * C602 + C25655 * C293 + C50946 * C304) *
                          C50884 +
                      (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                       C50938 * C592 + C25655 * C287 + C50946 * C294) *
                          C49720) +
                     (C25886 + C25887 + C25888) * C50612) *
                        C32080 +
                    ((C27393 + C27392 + C27391) * C49713 -
                     ((C45079 + C45078 + C45077) * C50884 +
                      (C45076 + C45075 + C45074) * C49720) +
                     (C27396 + C27395 + C27394) * C50612) *
                        C50807) *
                       C50629 * C1643 +
                   (((C45074 + C45075 + C45076) * C49720 +
                     (C45077 + C45078 + C45079) * C50884 -
                     (C27391 + C27392 + C27393) * C49713 -
                     (C27394 + C27395 + C27396) * C50612) *
                        C32080 +
                    ((C45408 + C45409 + C45410) * C49720 +
                     (C45411 + C45412 + C45413) * C50884 -
                     (C25657 * C9201 + C25652 * C9204 + C25656 * C3482 +
                      C50938 * C3487 + C25655 * C1082 + C50946 * C1089) *
                         C49713 -
                     (C25657 * C9203 + C25652 * C9207 + C25656 * C3486 +
                      C50938 * C3491 + C25655 * C1088 + C50946 * C1094) *
                         C50612) *
                        C50807) *
                       C50629 * C50708) *
                      C50684)) /
                (p * q * std::sqrt(p + q));
    d2ee[64] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                      C50938 * C294 + C25657 * C587 + C25652 * C592) *
                         C696 +
                     (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                      C50938 * C304 + C25657 * C593 + C25652 * C602) *
                         C50607) *
                        C32080 +
                    ((C44654 + C44655 + C44656) * C696 +
                     (C44657 + C44658 + C44659) * C50607) *
                        C50807) *
                       C50629 * C1643 -
                   (((C45244 + C45245 + C45246) * C50607 +
                     (C45247 + C45248 + C45249) * C696) *
                        C50807 +
                    ((C44659 + C44658 + C44657) * C50607 +
                     (C44656 + C44655 + C44654) * C696) *
                        C32080) *
                       C50629 * C50708) *
                      C50944 +
                  ((((C45074 + C45075 + C45076) * C696 +
                     (C45077 + C45078 + C45079) * C50607) *
                        C32080 +
                    ((C45408 + C45409 + C45410) * C696 +
                     (C45411 + C45412 + C45413) * C50607) *
                        C50807) *
                       C50629 * C50708 -
                   (((C45079 + C45078 + C45077) * C50607 +
                     (C45076 + C45075 + C45074) * C696) *
                        C50807 +
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C50607 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C696) *
                        C32080) *
                       C50629 * C1643) *
                      C50932 +
                  ((((C25655 * C587 + C50946 * C592 + C25656 * C700 +
                      C50938 * C708 + C25657 * C2997 + C25652 * C3003) *
                         C696 +
                     (C25655 * C593 + C50946 * C602 + C25656 * C707 +
                      C50938 * C712 + C25657 * C3002 + C25652 * C3006) *
                         C50607) *
                        C32080 +
                    ((C45080 + C45081 + C45082) * C696 +
                     (C45083 + C45084 + C45085) * C50607) *
                        C50807) *
                       C50629 * C1643 -
                   (((C25657 * C11529 + C25652 * C11531 + C25656 * C9205 +
                      C50938 * C9208 + C25655 * C3488 + C50946 * C3492) *
                         C50607 +
                     (C25657 * C11528 + C25652 * C11530 + C25656 * C9202 +
                      C50938 * C9206 + C25655 * C3483 + C50946 * C3489) *
                         C696) *
                        C50807 +
                    ((C45085 + C45084 + C45083) * C50607 +
                     (C45082 + C45081 + C45080) * C696) *
                        C32080) *
                       C50629 * C50708) *
                      C1390)) /
                (p * q * std::sqrt(p + q));
    d2ee[65] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                      C50938 * C294 + C25657 * C587 + C25652 * C592) *
                         C696 +
                     (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                      C50938 * C304 + C25657 * C593 + C25652 * C602) *
                         C50607) *
                        C32080 +
                    ((C44654 + C44655 + C44656) * C696 +
                     (C44657 + C44658 + C44659) * C50607) *
                        C50807) *
                       C50629 * C50945 -
                   (((C45244 + C45245 + C45246) * C50607 +
                     (C45247 + C45248 + C45249) * C696) *
                        C50807 +
                    ((C44659 + C44658 + C44657) * C50607 +
                     (C44656 + C44655 + C44654) * C696) *
                        C32080) *
                       C50629 * C50935 +
                   (((C45249 + C45248 + C45247) * C696 +
                     (C45246 + C45245 + C45244) * C50607) *
                        C32080 +
                    ((C45524 + C45525 + C45526) * C696 +
                     (C45527 + C45528 + C45529) * C50607) *
                        C50807) *
                       C50629 * C1875) *
                      C1283 +
                  ((((C45074 + C45075 + C45076) * C696 +
                     (C45077 + C45078 + C45079) * C50607) *
                        C32080 +
                    ((C45408 + C45409 + C45410) * C696 +
                     (C45411 + C45412 + C45413) * C50607) *
                        C50807) *
                       C50629 * C50935 -
                   (((C45079 + C45078 + C45077) * C50607 +
                     (C45076 + C45075 + C45074) * C696) *
                        C50807 +
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C50607 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C696) *
                        C32080) *
                       C50629 * C50945 -
                   (((C25657 * C11599 + C25652 * C11601 + C25656 * C9311 +
                      C50938 * C9314 + C25655 * C3598 + C50946 * C3602) *
                         C50607 +
                     (C25657 * C11598 + C25652 * C11600 + C25656 * C9308 +
                      C50938 * C9312 + C25655 * C3593 + C50946 * C3599) *
                         C696) *
                        C50807 +
                    ((C45413 + C45412 + C45411) * C50607 +
                     (C45410 + C45409 + C45408) * C696) *
                        C32080) *
                       C50629 * C1875) *
                      C50684)) /
                (p * q * std::sqrt(p + q));
    d2ee[66] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C49720 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C50884 -
                    (C25695 + C25696 + C25697) * C49713 -
                    (C25698 + C25699 + C25700) * C50612) *
                       C32080 +
                   ((C44654 + C44655 + C44656) * C49720 +
                    (C44657 + C44658 + C44659) * C50884 -
                    (C26067 + C26066 + C26065) * C49713 -
                    (C26070 + C26069 + C26068) * C50612) *
                       C50807) *
                      C50629 * C50696 * C582 +
                  (((C25883 + C25884 + C25885) * C49713 -
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C50884 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C49720) +
                    (C25886 + C25887 + C25888) * C50612) *
                       C32080 +
                   ((C27393 + C27392 + C27391) * C49713 -
                    ((C25657 * C3160 + C25652 * C3164 + C25656 * C833 +
                      C50938 * C842 + C25655 * C820 + C50946 * C835) *
                         C50884 +
                     (C25657 * C3155 + C25652 * C3161 + C25656 * C818 +
                      C50938 * C834 + C25655 * C811 + C50946 * C819) *
                         C49720) +
                    (C27396 + C27395 + C27394) * C50612) *
                       C50807) *
                      C50629 * C50696 * C583 +
                  (((C25655 * C587 + C50946 * C592 + C25656 * C700 +
                     C50938 * C708 + C25657 * C2997 + C25652 * C3003) *
                        C49720 +
                    (C25655 * C593 + C50946 * C602 + C25656 * C707 +
                     C50938 * C712 + C25657 * C3002 + C25652 * C3006) *
                        C50884 -
                    (C26235 + C26236 + C26237) * C49713 -
                    (C26238 + C26239 + C26240) * C50612) *
                       C32080 +
                   ((C25655 * C818 + C50946 * C834 + C25656 * C3155 +
                     C50938 * C3161 + C25657 * C8884 + C25652 * C8888) *
                        C49720 +
                    (C25655 * C833 + C50946 * C842 + C25656 * C3160 +
                     C50938 * C3164 + C25657 * C8887 + C25652 * C8890) *
                        C50884 -
                    (C25657 * C8883 + C25652 * C8886 + C25656 * C3154 +
                     C50938 * C3159 + C25655 * C817 + C50946 * C832) *
                        C49713 -
                    (C25657 * C8885 + C25652 * C8889 + C25656 * C3158 +
                     C50938 * C3163 + C25655 * C831 + C50946 * C841) *
                        C50612) *
                       C50807) *
                      C50629 * C50696 * C584)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                    C50938 * C294 + C25657 * C587 + C25652 * C592) *
                       C118 +
                   (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                    C50938 * C304 + C25657 * C593 + C25652 * C602) *
                       C106 -
                   (C25695 + C25696 + C25697) * C119 -
                   (C25698 + C25699 + C25700) * C107 +
                   (C25701 + C25702 + C25703) * C120 +
                   (C25704 + C25705 + C25706) * C108 -
                   (C25707 + C25708 + C25709) * C121 -
                   (C25710 + C25711 + C25712) * C109) *
                      C32080 +
                  ((C25655 * C435 + C50946 * C442 + C25656 * C811 +
                    C50938 * C819 + C25657 * C818 + C25652 * C834) *
                       C118 +
                   (C25655 * C441 + C50946 * C452 + C25656 * C820 +
                    C50938 * C835 + C25657 * C833 + C25652 * C842) *
                       C106 -
                   (C26067 + C26066 + C26065) * C119 -
                   (C26070 + C26069 + C26068) * C107 +
                   (C26073 + C26072 + C26071) * C120 +
                   (C26076 + C26075 + C26074) * C108 -
                   (C25657 * C815 + C25652 * C828 + C25656 * C814 +
                    C50938 * C825 + C25655 * C437 + C50946 * C446) *
                       C121 -
                   (C25657 * C827 + C25652 * C839 + C25656 * C826 +
                    C50938 * C838 + C25655 * C447 + C50946 * C455) *
                       C109) *
                      C50807) *
                 C50629 * C50696 * C50670) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C49720 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C50884 -
                    (C25695 + C25696 + C25697) * C49713 -
                    (C25698 + C25699 + C25700) * C50612) *
                       C32080 +
                   ((C44654 + C44655 + C44656) * C49720 +
                    (C44657 + C44658 + C44659) * C50884 -
                    (C26067 + C26066 + C26065) * C49713 -
                    (C26070 + C26069 + C26068) * C50612) *
                       C50807) *
                      C50629 * C941 +
                  (((C26065 + C26066 + C26067) * C49713 -
                    ((C44659 + C44658 + C44657) * C50884 +
                     (C44656 + C44655 + C44654) * C49720) +
                    (C26068 + C26069 + C26070) * C50612) *
                       C32080 +
                   ((C26645 + C26644 + C26643) * C49713 -
                    ((C45244 + C45245 + C45246) * C50884 +
                     (C45247 + C45248 + C45249) * C49720) +
                    (C26648 + C26647 + C26646) * C50612) *
                       C50807) *
                      C50629 * C942 +
                  (((C45249 + C45248 + C45247) * C49720 +
                    (C45246 + C45245 + C45244) * C50884 -
                    (C26643 + C26644 + C26645) * C49713 -
                    (C26646 + C26647 + C26648) * C50612) *
                       C32080 +
                   ((C25655 * C1169 + C50946 * C1177 + C25656 * C3593 +
                     C50938 * C3599 + C25657 * C9308 + C25652 * C9312) *
                        C49720 +
                    (C25655 * C1176 + C50946 * C1181 + C25656 * C3598 +
                     C50938 * C3602 + C25657 * C9311 + C25652 * C9314) *
                        C50884 -
                    (C25657 * C9307 + C25652 * C9310 + C25656 * C3592 +
                     C50938 * C3597 + C25655 * C1168 + C50946 * C1175) *
                        C49713 -
                    (C25657 * C9309 + C25652 * C9313 + C25656 * C3596 +
                     C50938 * C3601 + C25655 * C1174 + C50946 * C1180) *
                        C50612) *
                       C50807) *
                      C50629 * C943) *
                 C50670) /
                    (p * q * std::sqrt(p + q));
    d2ee[67] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C696 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C50607) *
                       C32080 +
                   ((C44654 + C44655 + C44656) * C696 +
                    (C44657 + C44658 + C44659) * C50607) *
                       C50807) *
                      C50629 * C50696 * C692 -
                  (((C25657 * C3160 + C25652 * C3164 + C25656 * C833 +
                     C50938 * C842 + C25655 * C820 + C50946 * C835) *
                        C50607 +
                    (C25657 * C3155 + C25652 * C3161 + C25656 * C818 +
                     C50938 * C834 + C25655 * C811 + C50946 * C819) *
                        C696) *
                       C50807 +
                   ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                     C50938 * C602 + C25655 * C293 + C50946 * C304) *
                        C50607 +
                    (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                     C50938 * C592 + C25655 * C287 + C50946 * C294) *
                        C696) *
                       C32080) *
                      C50629 * C50696 * C693 +
                  (((C25655 * C587 + C50946 * C592 + C25656 * C700 +
                     C50938 * C708 + C25657 * C2997 + C25652 * C3003) *
                        C696 +
                    (C25655 * C593 + C50946 * C602 + C25656 * C707 +
                     C50938 * C712 + C25657 * C3002 + C25652 * C3006) *
                        C50607) *
                       C32080 +
                   ((C25655 * C818 + C50946 * C834 + C25656 * C3155 +
                     C50938 * C3161 + C25657 * C8884 + C25652 * C8888) *
                        C696 +
                    (C25655 * C833 + C50946 * C842 + C25656 * C3160 +
                     C50938 * C3164 + C25657 * C8887 + C25652 * C8890) *
                        C50607) *
                       C50807) *
                      C50629 * C50696 * C694 -
                  (((C25657 * C11329 + C25652 * C11331 + C25656 * C8887 +
                     C50938 * C8890 + C25655 * C3160 + C50946 * C3164) *
                        C50607 +
                    (C25657 * C11328 + C25652 * C11330 + C25656 * C8884 +
                     C50938 * C8888 + C25655 * C3155 + C50946 * C3161) *
                        C696) *
                       C50807 +
                   ((C25657 * C8733 + C25652 * C8736 + C25656 * C3002 +
                     C50938 * C3006 + C25655 * C707 + C50946 * C712) *
                        C50607 +
                    (C25657 * C8730 + C25652 * C8734 + C25656 * C2997 +
                     C50938 * C3003 + C25655 * C700 + C50946 * C708) *
                        C696) *
                       C32080) *
                      C50629 * C50696 * C695)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C283 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C278 -
                    (C25695 + C25696 + C25697) * C284 -
                    (C25698 + C25699 + C25700) * C279 +
                    (C25701 + C25702 + C25703) * C285 +
                    (C25704 + C25705 + C25706) * C280) *
                       C32080 +
                   ((C25655 * C435 + C50946 * C442 + C25656 * C811 +
                     C50938 * C819 + C25657 * C818 + C25652 * C834) *
                        C283 +
                    (C25655 * C441 + C50946 * C452 + C25656 * C820 +
                     C50938 * C835 + C25657 * C833 + C25652 * C842) *
                        C278 -
                    (C26067 + C26066 + C26065) * C284 -
                    (C26070 + C26069 + C26068) * C279 +
                    (C26073 + C26072 + C26071) * C285 +
                    (C26076 + C26075 + C26074) * C280) *
                       C50807) *
                      C50629 * C50696 * C50899 +
                  (((C25883 + C25884 + C25885) * C284 -
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C278 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C283) +
                    (C25886 + C25887 + C25888) * C279 -
                    (C25889 + C25890 + C25891) * C285 -
                    (C25892 + C25893 + C25894) * C280) *
                       C32080 +
                   ((C27393 + C27392 + C27391) * C284 -
                    ((C25657 * C3160 + C25652 * C3164 + C25656 * C833 +
                      C50938 * C842 + C25655 * C820 + C50946 * C835) *
                         C278 +
                     (C25657 * C3155 + C25652 * C3161 + C25656 * C818 +
                      C50938 * C834 + C25655 * C811 + C50946 * C819) *
                         C283) +
                    (C27396 + C27395 + C27394) * C279 -
                    (C25657 * C3153 + C25652 * C3157 + C25656 * C816 +
                     C50938 * C830 + C25655 * C813 + C50946 * C823) *
                        C285 -
                    (C25657 * C3156 + C25652 * C3162 + C25656 * C829 +
                     C50938 * C840 + C25655 * C824 + C50946 * C837) *
                        C280) *
                       C50807) *
                      C50629 * C50696 * C50684)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                      C50938 * C294 + C25657 * C587 + C25652 * C592) *
                         C696 +
                     (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                      C50938 * C304 + C25657 * C593 + C25652 * C602) *
                         C50607) *
                        C32080 +
                    ((C44654 + C44655 + C44656) * C696 +
                     (C44657 + C44658 + C44659) * C50607) *
                        C50807) *
                       C50629 * C941 -
                   (((C45244 + C45245 + C45246) * C50607 +
                     (C45247 + C45248 + C45249) * C696) *
                        C50807 +
                    ((C44659 + C44658 + C44657) * C50607 +
                     (C44656 + C44655 + C44654) * C696) *
                        C32080) *
                       C50629 * C942 +
                   (((C45249 + C45248 + C45247) * C696 +
                     (C45246 + C45245 + C45244) * C50607) *
                        C32080 +
                    ((C25655 * C1169 + C50946 * C1177 + C25656 * C3593 +
                      C50938 * C3599 + C25657 * C9308 + C25652 * C9312) *
                         C696 +
                     (C25655 * C1176 + C50946 * C1181 + C25656 * C3598 +
                      C50938 * C3602 + C25657 * C9311 + C25652 * C9314) *
                         C50607) *
                        C50807) *
                       C50629 * C943) *
                      C50899 +
                  ((((C45074 + C45075 + C45076) * C696 +
                     (C45077 + C45078 + C45079) * C50607) *
                        C32080 +
                    ((C45408 + C45409 + C45410) * C696 +
                     (C45411 + C45412 + C45413) * C50607) *
                        C50807) *
                       C50629 * C942 -
                   (((C45079 + C45078 + C45077) * C50607 +
                     (C45076 + C45075 + C45074) * C696) *
                        C50807 +
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C50607 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C696) *
                        C32080) *
                       C50629 * C941 -
                   (((C25657 * C11599 + C25652 * C11601 + C25656 * C9311 +
                      C50938 * C9314 + C25655 * C3598 + C50946 * C3602) *
                         C50607 +
                     (C25657 * C11598 + C25652 * C11600 + C25656 * C9308 +
                      C50938 * C9312 + C25655 * C3593 + C50946 * C3599) *
                         C696) *
                        C50807 +
                    ((C45413 + C45412 + C45411) * C50607 +
                     (C45410 + C45409 + C45408) * C696) *
                        C32080) *
                       C50629 * C943) *
                      C50684)) /
                    (p * q * std::sqrt(p + q));
    d2ee[68] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                      C50938 * C294 + C25657 * C587 + C25652 * C592) *
                         C696 +
                     (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                      C50938 * C304 + C25657 * C593 + C25652 * C602) *
                         C50607) *
                        C32080 +
                    ((C44654 + C44655 + C44656) * C696 +
                     (C44657 + C44658 + C44659) * C50607) *
                        C50807) *
                       C50629 * C50900 -
                   (((C25657 * C3488 + C25652 * C3492 + C25656 * C1090 +
                      C50938 * C1095 + C25655 * C950 + C50946 * C959) *
                         C50607 +
                     (C25657 * C3483 + C25652 * C3489 + C25656 * C1083 +
                      C50938 * C1091 + C25655 * C944 + C50946 * C949) *
                         C696) *
                        C50807 +
                    ((C44659 + C44658 + C44657) * C50607 +
                     (C44656 + C44655 + C44654) * C696) *
                        C32080) *
                       C50629 * C50708) *
                      C582 +
                  ((((C45074 + C45075 + C45076) * C696 +
                     (C45077 + C45078 + C45079) * C50607) *
                        C32080 +
                    ((C25655 * C1083 + C50946 * C1091 + C25656 * C3483 +
                      C50938 * C3489 + C25657 * C9202 + C25652 * C9206) *
                         C696 +
                     (C25655 * C1090 + C50946 * C1095 + C25656 * C3488 +
                      C50938 * C3492 + C25657 * C9205 + C25652 * C9208) *
                         C50607) *
                        C50807) *
                       C50629 * C50708 -
                   (((C45079 + C45078 + C45077) * C50607 +
                     (C45076 + C45075 + C45074) * C696) *
                        C50807 +
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C50607 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C696) *
                        C32080) *
                       C50629 * C50900) *
                      C583 +
                  ((((C25655 * C587 + C50946 * C592 + C25656 * C700 +
                      C50938 * C708 + C25657 * C2997 + C25652 * C3003) *
                         C696 +
                     (C25655 * C593 + C50946 * C602 + C25656 * C707 +
                      C50938 * C712 + C25657 * C3002 + C25652 * C3006) *
                         C50607) *
                        C32080 +
                    ((C45080 + C45081 + C45082) * C696 +
                     (C45083 + C45084 + C45085) * C50607) *
                        C50807) *
                       C50629 * C50900 -
                   (((C25657 * C11529 + C25652 * C11531 + C25656 * C9205 +
                      C50938 * C9208 + C25655 * C3488 + C50946 * C3492) *
                         C50607 +
                     (C25657 * C11528 + C25652 * C11530 + C25656 * C9202 +
                      C50938 * C9206 + C25655 * C3483 + C50946 * C3489) *
                         C696) *
                        C50807 +
                    ((C45085 + C45084 + C45083) * C50607 +
                     (C45082 + C45081 + C45080) * C696) *
                        C32080) *
                       C50629 * C50708) *
                      C584)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C283 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C278 -
                    (C25695 + C25696 + C25697) * C284 -
                    (C25698 + C25699 + C25700) * C279 +
                    (C25701 + C25702 + C25703) * C285 +
                    (C25704 + C25705 + C25706) * C280) *
                       C32080 +
                   ((C44654 + C44655 + C44656) * C283 +
                    (C44657 + C44658 + C44659) * C278 -
                    (C26067 + C26066 + C26065) * C284 -
                    (C26070 + C26069 + C26068) * C279 +
                    (C26073 + C26072 + C26071) * C285 +
                    (C26076 + C26075 + C26074) * C280) *
                       C50807) *
                      C50629 * C50900 +
                  (((C26065 + C26066 + C26067) * C284 -
                    ((C44659 + C44658 + C44657) * C278 +
                     (C44656 + C44655 + C44654) * C283) +
                    (C26068 + C26069 + C26070) * C279 -
                    (C26071 + C26072 + C26073) * C285 -
                    (C26074 + C26075 + C26076) * C280) *
                       C32080 +
                   ((C26645 + C26644 + C26643) * C284 -
                    ((C25657 * C3488 + C25652 * C3492 + C25656 * C1090 +
                      C50938 * C1095 + C25655 * C950 + C50946 * C959) *
                         C278 +
                     (C25657 * C3483 + C25652 * C3489 + C25656 * C1083 +
                      C50938 * C1091 + C25655 * C944 + C50946 * C949) *
                         C283) +
                    (C26648 + C26647 + C26646) * C279 -
                    (C25657 * C3481 + C25652 * C3485 + C25656 * C1081 +
                     C50938 * C1087 + C25655 * C946 + C50946 * C953) *
                        C285 -
                    (C25657 * C3484 + C25652 * C3490 + C25656 * C1086 +
                     C50938 * C1093 + C25655 * C954 + C50946 * C961) *
                        C280) *
                       C50807) *
                      C50629 * C50708) *
                 C50670) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C696 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C50607) *
                       C32080 +
                   ((C44654 + C44655 + C44656) * C696 +
                    (C44657 + C44658 + C44659) * C50607) *
                       C50807) *
                      C50629 * C1162 -
                  (((C45244 + C45245 + C45246) * C50607 +
                    (C45247 + C45248 + C45249) * C696) *
                       C50807 +
                   ((C44659 + C44658 + C44657) * C50607 +
                    (C44656 + C44655 + C44654) * C696) *
                       C32080) *
                      C50629 * C1163 +
                  (((C45249 + C45248 + C45247) * C696 +
                    (C45246 + C45245 + C45244) * C50607) *
                       C32080 +
                   ((C45524 + C45525 + C45526) * C696 +
                    (C45527 + C45528 + C45529) * C50607) *
                       C50807) *
                      C50629 * C1164 -
                  (((C25657 * C13842 + C25652 * C13846 + C25656 * C13843 +
                     C50938 * C13847 + C25655 * C6402 + C50946 * C6406) *
                        C50607 +
                    (C25657 * C13840 + C25652 * C13844 + C25656 * C13841 +
                     C50938 * C13845 + C25655 * C6397 + C50946 * C6403) *
                        C696) *
                       C50807 +
                   ((C45529 + C45528 + C45527) * C50607 +
                    (C45526 + C45525 + C45524) * C696) *
                       C32080) *
                      C50629 * C1165) *
                 C50670) /
                    (p * q * std::sqrt(p + q));
    d2ee[69] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C1285 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C50942 -
                    (C25695 + C25696 + C25697) * C1286 -
                    (C25698 + C25699 + C25700) * C50926 +
                    (C25701 + C25702 + C25703) * C1287 +
                    (C25704 + C25705 + C25706) * C1282) *
                       C32080 +
                   ((C44654 + C44655 + C44656) * C1285 +
                    (C44657 + C44658 + C44659) * C50942 -
                    (C26067 + C26066 + C26065) * C1286 -
                    (C26070 + C26069 + C26068) * C50926 +
                    (C26073 + C26072 + C26071) * C1287 +
                    (C26076 + C26075 + C26074) * C1282) *
                       C50807) *
                      C50629 * C1643 +
                  (((C26065 + C26066 + C26067) * C1286 -
                    ((C44659 + C44658 + C44657) * C50942 +
                     (C44656 + C44655 + C44654) * C1285) +
                    (C26068 + C26069 + C26070) * C50926 -
                    (C26071 + C26072 + C26073) * C1287 -
                    (C26074 + C26075 + C26076) * C1282) *
                       C32080 +
                   ((C26645 + C26644 + C26643) * C1286 -
                    ((C45244 + C45245 + C45246) * C50942 +
                     (C45247 + C45248 + C45249) * C1285) +
                    (C26648 + C26647 + C26646) * C50926 -
                    (C25657 * C3481 + C25652 * C3485 + C25656 * C1081 +
                     C50938 * C1087 + C25655 * C946 + C50946 * C953) *
                        C1287 -
                    (C25657 * C3484 + C25652 * C3490 + C25656 * C1086 +
                     C50938 * C1093 + C25655 * C954 + C50946 * C961) *
                        C1282) *
                       C50807) *
                      C50629 * C50708) *
                 C50670) /
                (p * q * std::sqrt(p + q));
    d2ee[70] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                      C50938 * C294 + C25657 * C587 + C25652 * C592) *
                         C1391 +
                     (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                      C50938 * C304 + C25657 * C593 + C25652 * C602) *
                         C1386 -
                     (C25695 + C25696 + C25697) * C1392 -
                     (C25698 + C25699 + C25700) * C50612) *
                        C32080 +
                    ((C44654 + C44655 + C44656) * C1391 +
                     (C44657 + C44658 + C44659) * C1386 -
                     (C26067 + C26066 + C26065) * C1392 -
                     (C26070 + C26069 + C26068) * C50612) *
                        C50807) *
                       C50629 * C1643 +
                   (((C26065 + C26066 + C26067) * C1392 -
                     ((C44659 + C44658 + C44657) * C1386 +
                      (C44656 + C44655 + C44654) * C1391) +
                     (C26068 + C26069 + C26070) * C50612) *
                        C32080 +
                    ((C26645 + C26644 + C26643) * C1392 -
                     ((C45244 + C45245 + C45246) * C1386 +
                      (C45247 + C45248 + C45249) * C1391) +
                     (C26648 + C26647 + C26646) * C50612) *
                        C50807) *
                       C50629 * C50708) *
                      C50899 +
                  ((((C25883 + C25884 + C25885) * C1392 -
                     ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                       C50938 * C602 + C25655 * C293 + C50946 * C304) *
                          C1386 +
                      (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                       C50938 * C592 + C25655 * C287 + C50946 * C294) *
                          C1391) +
                     (C25886 + C25887 + C25888) * C50612) *
                        C32080 +
                    ((C27393 + C27392 + C27391) * C1392 -
                     ((C45079 + C45078 + C45077) * C1386 +
                      (C45076 + C45075 + C45074) * C1391) +
                     (C27396 + C27395 + C27394) * C50612) *
                        C50807) *
                       C50629 * C1643 +
                   (((C45074 + C45075 + C45076) * C1391 +
                     (C45077 + C45078 + C45079) * C1386 -
                     (C27391 + C27392 + C27393) * C1392 -
                     (C27394 + C27395 + C27396) * C50612) *
                        C32080 +
                    ((C45408 + C45409 + C45410) * C1391 +
                     (C45411 + C45412 + C45413) * C1386 -
                     (C25657 * C9201 + C25652 * C9204 + C25656 * C3482 +
                      C50938 * C3487 + C25655 * C1082 + C50946 * C1089) *
                         C1392 -
                     (C25657 * C9203 + C25652 * C9207 + C25656 * C3486 +
                      C50938 * C3491 + C25655 * C1088 + C50946 * C1094) *
                         C50612) *
                        C50807) *
                       C50629 * C50708) *
                      C50684)) /
                (p * q * std::sqrt(p + q));
    d2ee[71] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C1391 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C1386 -
                    (C25695 + C25696 + C25697) * C1392 -
                    (C25698 + C25699 + C25700) * C50612) *
                       C32080 +
                   ((C44654 + C44655 + C44656) * C1391 +
                    (C44657 + C44658 + C44659) * C1386 -
                    (C26067 + C26066 + C26065) * C1392 -
                    (C26070 + C26069 + C26068) * C50612) *
                       C50807) *
                      C50629 * C50945 +
                  (((C26065 + C26066 + C26067) * C1392 -
                    ((C44659 + C44658 + C44657) * C1386 +
                     (C44656 + C44655 + C44654) * C1391) +
                    (C26068 + C26069 + C26070) * C50612) *
                       C32080 +
                   ((C26645 + C26644 + C26643) * C1392 -
                    ((C45244 + C45245 + C45246) * C1386 +
                     (C45247 + C45248 + C45249) * C1391) +
                    (C26648 + C26647 + C26646) * C50612) *
                       C50807) *
                      C50629 * C50935 +
                  (((C45249 + C45248 + C45247) * C1391 +
                    (C45246 + C45245 + C45244) * C1386 -
                    (C26643 + C26644 + C26645) * C1392 -
                    (C26646 + C26647 + C26648) * C50612) *
                       C32080 +
                   ((C45524 + C45525 + C45526) * C1391 +
                    (C45527 + C45528 + C45529) * C1386 -
                    (C25657 * C9307 + C25652 * C9310 + C25656 * C3592 +
                     C50938 * C3597 + C25655 * C1168 + C50946 * C1175) *
                        C1392 -
                    (C25657 * C9309 + C25652 * C9313 + C25656 * C3596 +
                     C50938 * C3601 + C25655 * C1174 + C50946 * C1180) *
                        C50612) *
                       C50807) *
                      C50629 * C1875) *
                 C50670) /
                (p * q * std::sqrt(p + q));
    d2ee[72] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                    C50938 * C294 + C25657 * C587 + C25652 * C592) *
                       C118 +
                   (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                    C50938 * C304 + C25657 * C593 + C25652 * C602) *
                       C106 -
                   (C25695 + C25696 + C25697) * C119 -
                   (C25698 + C25699 + C25700) * C107 +
                   (C25701 + C25702 + C25703) * C120 +
                   (C25704 + C25705 + C25706) * C108 -
                   (C25707 + C25708 + C25709) * C121 -
                   (C25710 + C25711 + C25712) * C109) *
                      C32080 +
                  ((C25655 * C435 + C50946 * C442 + C25656 * C811 +
                    C50938 * C819 + C25657 * C818 + C25652 * C834) *
                       C118 +
                   (C25655 * C441 + C50946 * C452 + C25656 * C820 +
                    C50938 * C835 + C25657 * C833 + C25652 * C842) *
                       C106 -
                   (C26067 + C26066 + C26065) * C119 -
                   (C26070 + C26069 + C26068) * C107 +
                   (C26073 + C26072 + C26071) * C120 +
                   (C26076 + C26075 + C26074) * C108 -
                   (C25657 * C815 + C25652 * C828 + C25656 * C814 +
                    C50938 * C825 + C25655 * C437 + C50946 * C446) *
                       C121 -
                   (C25657 * C827 + C25652 * C839 + C25656 * C826 +
                    C50938 * C838 + C25655 * C447 + C50946 * C455) *
                       C109) *
                      C50807) *
                 C50629 * C50696 * C50670) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C49720 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C50884 -
                    (C25695 + C25696 + C25697) * C49713 -
                    (C25698 + C25699 + C25700) * C50612) *
                       C32080 +
                   ((C44654 + C44655 + C44656) * C49720 +
                    (C44657 + C44658 + C44659) * C50884 -
                    (C26067 + C26066 + C26065) * C49713 -
                    (C26070 + C26069 + C26068) * C50612) *
                       C50807) *
                      C50629 * C50696 * C582 +
                  (((C25883 + C25884 + C25885) * C49713 -
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C50884 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C49720) +
                    (C25886 + C25887 + C25888) * C50612) *
                       C32080 +
                   ((C27393 + C27392 + C27391) * C49713 -
                    ((C25657 * C3160 + C25652 * C3164 + C25656 * C833 +
                      C50938 * C842 + C25655 * C820 + C50946 * C835) *
                         C50884 +
                     (C25657 * C3155 + C25652 * C3161 + C25656 * C818 +
                      C50938 * C834 + C25655 * C811 + C50946 * C819) *
                         C49720) +
                    (C27396 + C27395 + C27394) * C50612) *
                       C50807) *
                      C50629 * C50696 * C583 +
                  (((C25655 * C587 + C50946 * C592 + C25656 * C700 +
                     C50938 * C708 + C25657 * C2997 + C25652 * C3003) *
                        C49720 +
                    (C25655 * C593 + C50946 * C602 + C25656 * C707 +
                     C50938 * C712 + C25657 * C3002 + C25652 * C3006) *
                        C50884 -
                    (C26235 + C26236 + C26237) * C49713 -
                    (C26238 + C26239 + C26240) * C50612) *
                       C32080 +
                   ((C25655 * C818 + C50946 * C834 + C25656 * C3155 +
                     C50938 * C3161 + C25657 * C8884 + C25652 * C8888) *
                        C49720 +
                    (C25655 * C833 + C50946 * C842 + C25656 * C3160 +
                     C50938 * C3164 + C25657 * C8887 + C25652 * C8890) *
                        C50884 -
                    (C25657 * C8883 + C25652 * C8886 + C25656 * C3154 +
                     C50938 * C3159 + C25655 * C817 + C50946 * C832) *
                        C49713 -
                    (C25657 * C8885 + C25652 * C8889 + C25656 * C3158 +
                     C50938 * C3163 + C25655 * C831 + C50946 * C841) *
                        C50612) *
                       C50807) *
                      C50629 * C50696 * C584)) /
                    (p * q * std::sqrt(p + q));
    d2ee[73] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C283 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C278 -
                    (C25695 + C25696 + C25697) * C284 -
                    (C25698 + C25699 + C25700) * C279 +
                    (C25701 + C25702 + C25703) * C285 +
                    (C25704 + C25705 + C25706) * C280) *
                       C32080 +
                   ((C25655 * C435 + C50946 * C442 + C25656 * C811 +
                     C50938 * C819 + C25657 * C818 + C25652 * C834) *
                        C283 +
                    (C25655 * C441 + C50946 * C452 + C25656 * C820 +
                     C50938 * C835 + C25657 * C833 + C25652 * C842) *
                        C278 -
                    (C26067 + C26066 + C26065) * C284 -
                    (C26070 + C26069 + C26068) * C279 +
                    (C26073 + C26072 + C26071) * C285 +
                    (C26076 + C26075 + C26074) * C280) *
                       C50807) *
                      C50629 * C50696 * C50899 +
                  (((C25883 + C25884 + C25885) * C284 -
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C278 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C283) +
                    (C25886 + C25887 + C25888) * C279 -
                    (C25889 + C25890 + C25891) * C285 -
                    (C25892 + C25893 + C25894) * C280) *
                       C32080 +
                   ((C27393 + C27392 + C27391) * C284 -
                    ((C25657 * C3160 + C25652 * C3164 + C25656 * C833 +
                      C50938 * C842 + C25655 * C820 + C50946 * C835) *
                         C278 +
                     (C25657 * C3155 + C25652 * C3161 + C25656 * C818 +
                      C50938 * C834 + C25655 * C811 + C50946 * C819) *
                         C283) +
                    (C27396 + C27395 + C27394) * C279 -
                    (C25657 * C3153 + C25652 * C3157 + C25656 * C816 +
                     C50938 * C830 + C25655 * C813 + C50946 * C823) *
                        C285 -
                    (C25657 * C3156 + C25652 * C3162 + C25656 * C829 +
                     C50938 * C840 + C25655 * C824 + C50946 * C837) *
                        C280) *
                       C50807) *
                      C50629 * C50696 * C50684)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C696 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C50607) *
                       C32080 +
                   ((C44654 + C44655 + C44656) * C696 +
                    (C44657 + C44658 + C44659) * C50607) *
                       C50807) *
                      C50629 * C50696 * C692 -
                  (((C25657 * C3160 + C25652 * C3164 + C25656 * C833 +
                     C50938 * C842 + C25655 * C820 + C50946 * C835) *
                        C50607 +
                    (C25657 * C3155 + C25652 * C3161 + C25656 * C818 +
                     C50938 * C834 + C25655 * C811 + C50946 * C819) *
                        C696) *
                       C50807 +
                   ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                     C50938 * C602 + C25655 * C293 + C50946 * C304) *
                        C50607 +
                    (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                     C50938 * C592 + C25655 * C287 + C50946 * C294) *
                        C696) *
                       C32080) *
                      C50629 * C50696 * C693 +
                  (((C25655 * C587 + C50946 * C592 + C25656 * C700 +
                     C50938 * C708 + C25657 * C2997 + C25652 * C3003) *
                        C696 +
                    (C25655 * C593 + C50946 * C602 + C25656 * C707 +
                     C50938 * C712 + C25657 * C3002 + C25652 * C3006) *
                        C50607) *
                       C32080 +
                   ((C25655 * C818 + C50946 * C834 + C25656 * C3155 +
                     C50938 * C3161 + C25657 * C8884 + C25652 * C8888) *
                        C696 +
                    (C25655 * C833 + C50946 * C842 + C25656 * C3160 +
                     C50938 * C3164 + C25657 * C8887 + C25652 * C8890) *
                        C50607) *
                       C50807) *
                      C50629 * C50696 * C694 -
                  (((C25657 * C11329 + C25652 * C11331 + C25656 * C8887 +
                     C50938 * C8890 + C25655 * C3160 + C50946 * C3164) *
                        C50607 +
                    (C25657 * C11328 + C25652 * C11330 + C25656 * C8884 +
                     C50938 * C8888 + C25655 * C3155 + C50946 * C3161) *
                        C696) *
                       C50807 +
                   ((C25657 * C8733 + C25652 * C8736 + C25656 * C3002 +
                     C50938 * C3006 + C25655 * C707 + C50946 * C712) *
                        C50607 +
                    (C25657 * C8730 + C25652 * C8734 + C25656 * C2997 +
                     C50938 * C3003 + C25655 * C700 + C50946 * C708) *
                        C696) *
                       C32080) *
                      C50629 * C50696 * C695)) /
                    (p * q * std::sqrt(p + q));
    d2ee[74] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                     C50938 * C294 + C25657 * C587 + C25652 * C592) *
                        C283 +
                    (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                     C50938 * C304 + C25657 * C593 + C25652 * C602) *
                        C278 -
                    (C25695 + C25696 + C25697) * C284 -
                    (C25698 + C25699 + C25700) * C279 +
                    (C25701 + C25702 + C25703) * C285 +
                    (C25704 + C25705 + C25706) * C280) *
                       C32080 +
                   ((C44654 + C44655 + C44656) * C283 +
                    (C44657 + C44658 + C44659) * C278 -
                    (C26067 + C26066 + C26065) * C284 -
                    (C26070 + C26069 + C26068) * C279 +
                    (C26073 + C26072 + C26071) * C285 +
                    (C26076 + C26075 + C26074) * C280) *
                       C50807) *
                      C50629 * C50900 +
                  (((C26065 + C26066 + C26067) * C284 -
                    ((C44659 + C44658 + C44657) * C278 +
                     (C44656 + C44655 + C44654) * C283) +
                    (C26068 + C26069 + C26070) * C279 -
                    (C26071 + C26072 + C26073) * C285 -
                    (C26074 + C26075 + C26076) * C280) *
                       C32080 +
                   ((C26645 + C26644 + C26643) * C284 -
                    ((C25657 * C3488 + C25652 * C3492 + C25656 * C1090 +
                      C50938 * C1095 + C25655 * C950 + C50946 * C959) *
                         C278 +
                     (C25657 * C3483 + C25652 * C3489 + C25656 * C1083 +
                      C50938 * C1091 + C25655 * C944 + C50946 * C949) *
                         C283) +
                    (C26648 + C26647 + C26646) * C279 -
                    (C25657 * C3481 + C25652 * C3485 + C25656 * C1081 +
                     C50938 * C1087 + C25655 * C946 + C50946 * C953) *
                        C285 -
                    (C25657 * C3484 + C25652 * C3490 + C25656 * C1086 +
                     C50938 * C1093 + C25655 * C954 + C50946 * C961) *
                        C280) *
                       C50807) *
                      C50629 * C50708) *
                 C50670) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C25655 * C122 + C50946 * C129 + C25656 * C287 +
                      C50938 * C294 + C25657 * C587 + C25652 * C592) *
                         C696 +
                     (C25655 * C130 + C50946 * C143 + C25656 * C293 +
                      C50938 * C304 + C25657 * C593 + C25652 * C602) *
                         C50607) *
                        C32080 +
                    ((C44654 + C44655 + C44656) * C696 +
                     (C44657 + C44658 + C44659) * C50607) *
                        C50807) *
                       C50629 * C50900 -
                   (((C25657 * C3488 + C25652 * C3492 + C25656 * C1090 +
                      C50938 * C1095 + C25655 * C950 + C50946 * C959) *
                         C50607 +
                     (C25657 * C3483 + C25652 * C3489 + C25656 * C1083 +
                      C50938 * C1091 + C25655 * C944 + C50946 * C949) *
                         C696) *
                        C50807 +
                    ((C44659 + C44658 + C44657) * C50607 +
                     (C44656 + C44655 + C44654) * C696) *
                        C32080) *
                       C50629 * C50708) *
                      C582 +
                  ((((C45074 + C45075 + C45076) * C696 +
                     (C45077 + C45078 + C45079) * C50607) *
                        C32080 +
                    ((C25655 * C1083 + C50946 * C1091 + C25656 * C3483 +
                      C50938 * C3489 + C25657 * C9202 + C25652 * C9206) *
                         C696 +
                     (C25655 * C1090 + C50946 * C1095 + C25656 * C3488 +
                      C50938 * C3492 + C25657 * C9205 + C25652 * C9208) *
                         C50607) *
                        C50807) *
                       C50629 * C50708 -
                   (((C45079 + C45078 + C45077) * C50607 +
                     (C45076 + C45075 + C45074) * C696) *
                        C50807 +
                    ((C25657 * C707 + C25652 * C712 + C25656 * C593 +
                      C50938 * C602 + C25655 * C293 + C50946 * C304) *
                         C50607 +
                     (C25657 * C700 + C25652 * C708 + C25656 * C587 +
                      C50938 * C592 + C25655 * C287 + C50946 * C294) *
                         C696) *
                        C32080) *
                       C50629 * C50900) *
                      C583 +
                  ((((C25655 * C587 + C50946 * C592 + C25656 * C700 +
                      C50938 * C708 + C25657 * C2997 + C25652 * C3003) *
                         C696 +
                     (C25655 * C593 + C50946 * C602 + C25656 * C707 +
                      C50938 * C712 + C25657 * C3002 + C25652 * C3006) *
                         C50607) *
                        C32080 +
                    ((C45080 + C45081 + C45082) * C696 +
                     (C45083 + C45084 + C45085) * C50607) *
                        C50807) *
                       C50629 * C50900 -
                   (((C25657 * C11529 + C25652 * C11531 + C25656 * C9205 +
                      C50938 * C9208 + C25655 * C3488 + C50946 * C3492) *
                         C50607 +
                     (C25657 * C11528 + C25652 * C11530 + C25656 * C9202 +
                      C50938 * C9206 + C25655 * C3483 + C50946 * C3489) *
                         C696) *
                        C50807 +
                    ((C45085 + C45084 + C45083) * C50607 +
                     (C45082 + C45081 + C45080) * C696) *
                        C32080) *
                       C50629 * C50708) *
                      C584)) /
                    (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C1285 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C50942 -
            (C22855 + C22856) * C1286 - (C22857 + C22858) * C50926 +
            C22871 * C1287 + C22872 * C1282) *
               C50947 +
           ((C28901 + C28902) * C1285 + (C28903 + C28904) * C50942 -
            C28895 * C1286 - C28896 * C50926 + C28897 * C1287 +
            C28898 * C1282) *
               C50941 +
           (C47926 * C1285 + C47927 * C50942 - C29664 * C1286 -
            C29663 * C50926 + (C23824 + C23823) * C1287 +
            (C23826 + C23825) * C1282) *
               C38228) *
              C50629 * C50696 * C1283 +
          (((C23045 + C23046) * C1286 -
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50942 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C1285) +
            (C23047 + C23048) * C50926 - C23057 * C1287 - C23058 * C1282) *
               C50947 +
           (C30687 * C1286 -
            ((C29454 + C29453) * C50942 + (C29452 + C29451) * C1285) +
            C30688 * C50926 - (C24577 + C24578) * C1287 -
            (C24579 + C24580) * C1282) *
               C50941 +
           ((C29895 + C29896) * C1286 - (C48091 * C50942 + C48092 * C1285) +
            (C29897 + C29898) * C50926 -
            (C22821 * C3481 + C50781 * C3485 + C22820 * C1081 +
             C22815 * C1087) *
                C1287 -
            (C22821 * C3484 + C50781 * C3490 + C22820 * C1086 +
             C22815 * C1093) *
                C1282) *
               C38228) *
              C50629 * C50696 * C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C1391 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C1386 -
            (C22855 + C22856) * C1392 - (C22857 + C22858) * C50612) *
               C50947 +
           ((C28901 + C28902) * C1391 + (C28903 + C28904) * C1386 -
            C28895 * C1392 - C28896 * C50612) *
               C50941 +
           (C47926 * C1391 + C47927 * C1386 - C29664 * C1392 -
            C29663 * C50612) *
               C38228) *
              C50629 * C50696 * C50944 +
          (((C23045 + C23046) * C1392 -
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C1386 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C1391) +
            (C23047 + C23048) * C50612) *
               C50947 +
           (C30687 * C1392 -
            ((C29454 + C29453) * C1386 + (C29452 + C29451) * C1391) +
            C30688 * C50612) *
               C50941 +
           ((C29895 + C29896) * C1392 - (C48091 * C1386 + C48092 * C1391) +
            (C29897 + C29898) * C50612) *
               C38228) *
              C50629 * C50696 * C50932 +
          (((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                C1391 +
            (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                C1386 -
            (C23405 + C23406) * C1392 - (C23407 + C23408) * C50612) *
               C50947 +
           ((C29455 + C29456) * C1391 + (C29457 + C29458) * C1386 -
            (C29107 + C29108) * C1392 - (C29109 + C29110) * C50612) *
               C50941 +
           ((C47776 + C47777) * C1391 + (C47778 + C47779) * C1386 -
            (C22821 * C9201 + C50781 * C9204 + C22820 * C3482 +
             C22815 * C3487) *
                C1392 -
            (C22821 * C9203 + C50781 * C9207 + C22820 * C3486 +
             C22815 * C3491) *
                C50612) *
               C38228) *
              C50629 * C50696 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C1391 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C1386 -
             (C22855 + C22856) * C1392 - (C22857 + C22858) * C50612) *
                C50947 +
            ((C28901 + C28902) * C1391 + (C28903 + C28904) * C1386 -
             C28895 * C1392 - C28896 * C50612) *
                C50941 +
            (C47926 * C1391 + C47927 * C1386 - C29664 * C1392 -
             C29663 * C50612) *
                C38228) *
               C50629 * C50900 +
           ((C28899 * C1392 -
             ((C28904 + C28903) * C1386 + (C28902 + C28901) * C1391) +
             C28900 * C50612) *
                C50947 +
            (C29653 * C1392 -
             ((C29673 + C29674) * C1386 + (C29675 + C29676) * C1391) +
             C29662 * C50612) *
                C50941 +
            ((C29678 + C29677) * C1392 - (C48199 * C1386 + C48200 * C1391) +
             (C29680 + C29679) * C50612) *
                C38228) *
               C50629 * C50708) *
              C1283 +
          ((((C23045 + C23046) * C1392 -
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C1386 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C1391) +
             (C23047 + C23048) * C50612) *
                C50947 +
            (C30687 * C1392 -
             ((C29454 + C29453) * C1386 + (C29452 + C29451) * C1391) +
             C30688 * C50612) *
                C50941 +
            ((C29895 + C29896) * C1392 - (C48091 * C1386 + C48092 * C1391) +
             (C29897 + C29898) * C50612) *
                C38228) *
               C50629 * C50900 +
           (((C29451 + C29452) * C1391 + (C29453 + C29454) * C1386 -
             C30690 * C1392 - C30689 * C50612) *
                C50947 +
            ((C29891 + C29892) * C1391 + (C29893 + C29894) * C1386 -
             (C29896 + C29895) * C1392 - (C29898 + C29897) * C50612) *
                C50941 +
            ((C48094 + C48095) * C1391 + (C48096 + C48097) * C1386 -
             (C22821 * C9307 + C50781 * C9310 + C22820 * C3592 +
              C22815 * C3597) *
                 C1392 -
             (C22821 * C9309 + C50781 * C9313 + C22820 * C3596 +
              C22815 * C3601) *
                 C50612) *
                C38228) *
               C50629 * C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C49720 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50884 -
             (C22855 + C22856) * C49713 - (C22857 + C22858) * C50612) *
                C50947 +
            ((C28901 + C28902) * C49720 + (C28903 + C28904) * C50884 -
             C28895 * C49713 - C28896 * C50612) *
                C50941 +
            C47934 * C38228) *
               C50629 * C1643 +
           ((C28899 * C49713 -
             ((C28904 + C28903) * C50884 + (C28902 + C28901) * C49720) +
             C28900 * C50612) *
                C50947 +
            (C29653 * C49713 -
             ((C29673 + C29674) * C50884 + (C29675 + C29676) * C49720) +
             C29662 * C50612) *
                C50941 +
            ((C29678 + C29677) * C49713 - (C48199 * C50884 + C48200 * C49720) +
             (C29680 + C29679) * C50612) *
                C38228) *
               C50629 * C50708) *
              C1283 +
          ((((C23045 + C23046) * C49713 -
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C50884 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C49720) +
             (C23047 + C23048) * C50612) *
                C50947 +
            (C30687 * C49713 -
             ((C29454 + C29453) * C50884 + (C29452 + C29451) * C49720) +
             C30688 * C50612) *
                C50941 +
            ((C29895 + C29896) * C49713 - (C48091 * C50884 + C48092 * C49720) +
             (C29897 + C29898) * C50612) *
                C38228) *
               C50629 * C1643 +
           (((C29451 + C29452) * C49720 + (C29453 + C29454) * C50884 -
             C30690 * C49713 - C30689 * C50612) *
                C50947 +
            ((C29891 + C29892) * C49720 + (C29893 + C29894) * C50884 -
             (C29896 + C29895) * C49713 - (C29898 + C29897) * C50612) *
                C50941 +
            ((C48094 + C48095) * C49720 + (C48096 + C48097) * C50884 -
             (C22821 * C9307 + C50781 * C9310 + C22820 * C3592 +
              C22815 * C3597) *
                 C49713 -
             (C22821 * C9309 + C50781 * C9313 + C22820 * C3596 +
              C22815 * C3601) *
                 C50612) *
                C38228) *
               C50629 * C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C696 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50607) *
                C50947 +
            ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50941 +
            C48093 * C38228) *
               C50629 * C1643 -
           (C48215 * C38228 +
            ((C29673 + C29674) * C50607 + (C29675 + C29676) * C696) * C50941 +
            ((C28904 + C28903) * C50607 + (C28902 + C28901) * C696) * C50947) *
               C50629 * C50708) *
              C50944 +
          ((((C29451 + C29452) * C696 + (C29453 + C29454) * C50607) * C50947 +
            ((C29891 + C29892) * C696 + (C29893 + C29894) * C50607) * C50941 +
            ((C48094 + C48095) * C696 + (C48096 + C48097) * C50607) * C38228) *
               C50629 * C50708 -
           (C48100 * C38228 +
            ((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50941 +
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50607 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C696) *
                C50947) *
               C50629 * C1643) *
              C50932 +
          ((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                 C696 +
             (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                 C50607) *
                C50947 +
            ((C29455 + C29456) * C696 + (C29457 + C29458) * C50607) * C50941 +
            ((C47776 + C47777) * C696 + (C47778 + C47779) * C50607) * C38228) *
               C50629 * C1643 -
           (((C22821 * C11599 + C50781 * C11601 + C22820 * C9311 +
              C22815 * C9314) *
                 C50607 +
             (C22821 * C11598 + C50781 * C11600 + C22820 * C9308 +
              C22815 * C9312) *
                 C696) *
                C38228 +
            ((C47779 + C47778) * C50607 + (C47777 + C47776) * C696) * C50941 +
            ((C29458 + C29457) * C50607 + (C29456 + C29455) * C696) * C50947) *
               C50629 * C50708) *
              C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C696 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50607) *
                C50947 +
            ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50941 +
            C48093 * C38228) *
               C50629 * C50945 -
           (C48215 * C38228 +
            ((C29673 + C29674) * C50607 + (C29675 + C29676) * C696) * C50941 +
            ((C28904 + C28903) * C50607 + (C28902 + C28901) * C696) * C50947) *
               C50629 * C50935 +
           (C48093 * C50947 +
            ((C30037 + C30038) * C696 + (C30039 + C30040) * C50607) * C50941 +
            ((C48211 + C48212) * C696 + (C48213 + C48214) * C50607) * C38228) *
               C50629 * C1875) *
              C1283 +
          ((((C29451 + C29452) * C696 + (C29453 + C29454) * C50607) * C50947 +
            ((C29891 + C29892) * C696 + (C29893 + C29894) * C50607) * C50941 +
            ((C48094 + C48095) * C696 + (C48096 + C48097) * C50607) * C38228) *
               C50629 * C50935 -
           (C48100 * C38228 +
            ((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50941 +
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50607 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C696) *
                C50947) *
               C50629 * C50945 -
           (((C22821 * C13842 + C50781 * C13846 + C22820 * C13843 +
              C22815 * C13847) *
                 C50607 +
             (C22821 * C13840 + C50781 * C13844 + C22820 * C13841 +
              C22815 * C13845) *
                 C696) *
                C38228 +
            ((C48097 + C48096) * C50607 + (C48095 + C48094) * C696) * C50941 +
            C48100 * C50947) *
               C50629 * C1875) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C49720 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C50884 -
            (C22855 + C22856) * C49713 - (C22857 + C22858) * C50612) *
               C50947 +
           ((C28901 + C28902) * C49720 + (C28903 + C28904) * C50884 -
            C28895 * C49713 - C28896 * C50612) *
               C50941 +
           ((C29676 + C29675) * C49720 + (C29674 + C29673) * C50884 -
            C29664 * C49713 - C29663 * C50612) *
               C38228) *
              C50629 * C50696 * C582 +
          (((C23045 + C23046) * C49713 -
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50884 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C49720) +
            (C23047 + C23048) * C50612) *
               C50947 +
           (C30687 * C49713 -
            ((C29454 + C29453) * C50884 + (C29452 + C29451) * C49720) +
            C30688 * C50612) *
               C50941 +
           ((C29895 + C29896) * C49713 -
            ((C29894 + C29893) * C50884 + (C29892 + C29891) * C49720) +
            (C29897 + C29898) * C50612) *
               C38228) *
              C50629 * C50696 * C583 +
          (((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                C49720 +
            (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                C50884 -
            (C23405 + C23406) * C49713 - (C23407 + C23408) * C50612) *
               C50947 +
           ((C29455 + C29456) * C49720 + (C29457 + C29458) * C50884 -
            (C29107 + C29108) * C49713 - (C29109 + C29110) * C50612) *
               C50941 +
           ((C22820 * C3483 + C22815 * C3489 + C22821 * C9202 +
             C50781 * C9206) *
                C49720 +
            (C22820 * C3488 + C22815 * C3492 + C22821 * C9205 +
             C50781 * C9208) *
                C50884 -
            (C22821 * C9201 + C50781 * C9204 + C22820 * C3482 +
             C22815 * C3487) *
                C49713 -
            (C22821 * C9203 + C50781 * C9207 + C22820 * C3486 +
             C22815 * C3491) *
                C50612) *
               C38228) *
              C50629 * C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
               C118 +
           (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
               C106 -
           (C22855 + C22856) * C119 - (C22857 + C22858) * C107 + C22871 * C120 +
           C22872 * C108 - C22873 * C121 - C22874 * C109) *
              C50947 +
          ((C28901 + C28902) * C118 + (C28903 + C28904) * C106 - C28895 * C119 -
           C28896 * C107 + C28897 * C120 + C28898 * C108 -
           (C23237 + C23238) * C121 - (C23239 + C23240) * C109) *
              C50941 +
          ((C29676 + C29675) * C118 + (C29674 + C29673) * C106 - C29664 * C119 -
           C29663 * C107 + (C23824 + C23823) * C120 + (C23826 + C23825) * C108 -
           (C22821 * C1080 + C50781 * C1085 + C22820 * C947 + C22815 * C955) *
               C121 -
           (C22821 * C1084 + C50781 * C1092 + C22820 * C956 + C22815 * C962) *
               C109) *
              C38228) *
         C50629 * C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C49720 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C50884 -
            (C22855 + C22856) * C49713 - (C22857 + C22858) * C50612) *
               C50947 +
           ((C28901 + C28902) * C49720 + (C28903 + C28904) * C50884 -
            C28895 * C49713 - C28896 * C50612) *
               C50941 +
           C47934 * C38228) *
              C50629 * C941 +
          ((C28899 * C49713 -
            ((C28904 + C28903) * C50884 + (C28902 + C28901) * C49720) +
            C28900 * C50612) *
               C50947 +
           (C29653 * C49713 -
            ((C29673 + C29674) * C50884 + (C29675 + C29676) * C49720) +
            C29662 * C50612) *
               C50941 +
           ((C29678 + C29677) * C49713 -
            ((C30040 + C30039) * C50884 + (C30038 + C30037) * C49720) +
            (C29680 + C29679) * C50612) *
               C38228) *
              C50629 * C942 +
          (C47934 * C50947 +
           ((C30037 + C30038) * C49720 + (C30039 + C30040) * C50884 -
            (C29677 + C29678) * C49713 - (C29679 + C29680) * C50612) *
               C50941 +
           ((C22820 * C6397 + C22815 * C6403 + C22821 * C13841 +
             C50781 * C13845) *
                C49720 +
            (C22820 * C6402 + C22815 * C6406 + C22821 * C13843 +
             C50781 * C13847) *
                C50884 -
            (C22821 * C16447 + C50781 * C16449 + C22820 * C6396 +
             C22815 * C6401) *
                C49713 -
            (C22821 * C16448 + C50781 * C16450 + C22820 * C6400 +
             C22815 * C6405) *
                C50612) *
               C38228) *
              C50629 * C943) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C696 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C50607) *
               C50947 +
           ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50941 +
           ((C29676 + C29675) * C696 + (C29674 + C29673) * C50607) * C38228) *
              C50629 * C50696 * C692 -
          (((C29894 + C29893) * C50607 + (C29892 + C29891) * C696) * C38228 +
           ((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50941 +
           ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                C50607 +
            (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                C696) *
               C50947) *
              C50629 * C50696 * C693 +
          (((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                C696 +
            (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                C50607) *
               C50947 +
           ((C29455 + C29456) * C696 + (C29457 + C29458) * C50607) * C50941 +
           ((C22820 * C3483 + C22815 * C3489 + C22821 * C9202 +
             C50781 * C9206) *
                C696 +
            (C22820 * C3488 + C22815 * C3492 + C22821 * C9205 +
             C50781 * C9208) *
                C50607) *
               C38228) *
              C50629 * C50696 * C694 -
          (((C22821 * C11529 + C50781 * C11531 + C22820 * C9205 +
             C22815 * C9208) *
                C50607 +
            (C22821 * C11528 + C50781 * C11530 + C22820 * C9202 +
             C22815 * C9206) *
                C696) *
               C38228 +
           ((C22821 * C8887 + C50781 * C8890 + C22820 * C3160 +
             C22815 * C3164) *
                C50607 +
            (C22821 * C8884 + C50781 * C8888 + C22820 * C3155 +
             C22815 * C3161) *
                C696) *
               C50941 +
           ((C22821 * C3002 + C50781 * C3006 + C22820 * C707 + C22815 * C712) *
                C50607 +
            (C22821 * C2997 + C50781 * C3003 + C22820 * C700 + C22815 * C708) *
                C696) *
               C50947) *
              C50629 * C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C283 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C278 -
            (C22855 + C22856) * C284 - (C22857 + C22858) * C279 +
            C22871 * C285 + C22872 * C280) *
               C50947 +
           ((C28901 + C28902) * C283 + (C28903 + C28904) * C278 -
            C28895 * C284 - C28896 * C279 + C28897 * C285 + C28898 * C280) *
               C50941 +
           ((C29676 + C29675) * C283 + (C29674 + C29673) * C278 -
            C29664 * C284 - C29663 * C279 + (C23824 + C23823) * C285 +
            (C23826 + C23825) * C280) *
               C38228) *
              C50629 * C50696 * C50899 +
          (((C23045 + C23046) * C284 -
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C278 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C283) +
            (C23047 + C23048) * C279 - C23057 * C285 - C23058 * C280) *
               C50947 +
           (C30687 * C284 -
            ((C29454 + C29453) * C278 + (C29452 + C29451) * C283) +
            C30688 * C279 - (C24577 + C24578) * C285 -
            (C24579 + C24580) * C280) *
               C50941 +
           ((C29895 + C29896) * C284 -
            ((C29894 + C29893) * C278 + (C29892 + C29891) * C283) +
            (C29897 + C29898) * C279 -
            (C22821 * C3481 + C50781 * C3485 + C22820 * C1081 +
             C22815 * C1087) *
                C285 -
            (C22821 * C3484 + C50781 * C3490 + C22820 * C1086 +
             C22815 * C1093) *
                C280) *
               C38228) *
              C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C696 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50607) *
                C50947 +
            ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50941 +
            C48093 * C38228) *
               C50629 * C941 -
           (((C30040 + C30039) * C50607 + (C30038 + C30037) * C696) * C38228 +
            ((C29673 + C29674) * C50607 + (C29675 + C29676) * C696) * C50941 +
            ((C28904 + C28903) * C50607 + (C28902 + C28901) * C696) * C50947) *
               C50629 * C942 +
           (C48093 * C50947 +
            ((C30037 + C30038) * C696 + (C30039 + C30040) * C50607) * C50941 +
            ((C22820 * C6397 + C22815 * C6403 + C22821 * C13841 +
              C50781 * C13845) *
                 C696 +
             (C22820 * C6402 + C22815 * C6406 + C22821 * C13843 +
              C50781 * C13847) *
                 C50607) *
                C38228) *
               C50629 * C943) *
              C50899 +
          ((((C29451 + C29452) * C696 + (C29453 + C29454) * C50607) * C50947 +
            ((C29891 + C29892) * C696 + (C29893 + C29894) * C50607) * C50941 +
            ((C48094 + C48095) * C696 + (C48096 + C48097) * C50607) * C38228) *
               C50629 * C942 -
           (C48100 * C38228 +
            ((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50941 +
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50607 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C696) *
                C50947) *
               C50629 * C941 -
           (((C22821 * C13842 + C50781 * C13846 + C22820 * C13843 +
              C22815 * C13847) *
                 C50607 +
             (C22821 * C13840 + C50781 * C13844 + C22820 * C13841 +
              C22815 * C13845) *
                 C696) *
                C38228 +
            ((C48097 + C48096) * C50607 + (C48095 + C48094) * C696) * C50941 +
            C48100 * C50947) *
               C50629 * C943) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C696 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50607) *
                C50947 +
            ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50941 +
            ((C29676 + C29675) * C696 + (C29674 + C29673) * C50607) * C38228) *
               C50629 * C50900 -
           (((C30040 + C30039) * C50607 + (C30038 + C30037) * C696) * C38228 +
            ((C29673 + C29674) * C50607 + (C29675 + C29676) * C696) * C50941 +
            ((C28904 + C28903) * C50607 + (C28902 + C28901) * C696) * C50947) *
               C50629 * C50708) *
              C582 +
          ((((C29451 + C29452) * C696 + (C29453 + C29454) * C50607) * C50947 +
            ((C29891 + C29892) * C696 + (C29893 + C29894) * C50607) * C50941 +
            ((C22820 * C3593 + C22815 * C3599 + C22821 * C9308 +
              C50781 * C9312) *
                 C696 +
             (C22820 * C3598 + C22815 * C3602 + C22821 * C9311 +
              C50781 * C9314) *
                 C50607) *
                C38228) *
               C50629 * C50708 -
           (((C29894 + C29893) * C50607 + (C29892 + C29891) * C696) * C38228 +
            ((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50941 +
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50607 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C696) *
                C50947) *
               C50629 * C50900) *
              C583 +
          ((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                 C696 +
             (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                 C50607) *
                C50947 +
            ((C29455 + C29456) * C696 + (C29457 + C29458) * C50607) * C50941 +
            ((C47776 + C47777) * C696 + (C47778 + C47779) * C50607) * C38228) *
               C50629 * C50900 -
           (((C22821 * C11599 + C50781 * C11601 + C22820 * C9311 +
              C22815 * C9314) *
                 C50607 +
             (C22821 * C11598 + C50781 * C11600 + C22820 * C9308 +
              C22815 * C9312) *
                 C696) *
                C38228 +
            ((C47779 + C47778) * C50607 + (C47777 + C47776) * C696) * C50941 +
            ((C29458 + C29457) * C50607 + (C29456 + C29455) * C696) * C50947) *
               C50629 * C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C283 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C278 -
            (C22855 + C22856) * C284 - (C22857 + C22858) * C279 +
            C22871 * C285 + C22872 * C280) *
               C50947 +
           ((C28901 + C28902) * C283 + (C28903 + C28904) * C278 -
            C28895 * C284 - C28896 * C279 + C28897 * C285 + C28898 * C280) *
               C50941 +
           ((C29676 + C29675) * C283 + (C29674 + C29673) * C278 -
            C29664 * C284 - C29663 * C279 + (C23824 + C23823) * C285 +
            (C23826 + C23825) * C280) *
               C38228) *
              C50629 * C50900 +
          ((C28899 * C284 -
            ((C28904 + C28903) * C278 + (C28902 + C28901) * C283) +
            C28900 * C279 - C23241 * C285 - C23242 * C280) *
               C50947 +
           (C29653 * C284 -
            ((C29673 + C29674) * C278 + (C29675 + C29676) * C283) +
            C29662 * C279 - (C23823 + C23824) * C285 -
            (C23825 + C23826) * C280) *
               C50941 +
           ((C29678 + C29677) * C284 -
            ((C30040 + C30039) * C278 + (C30038 + C30037) * C283) +
            (C29680 + C29679) * C279 -
            (C22821 * C3591 + C50781 * C3595 + C22820 * C1167 +
             C22815 * C1173) *
                C285 -
            (C22821 * C3594 + C50781 * C3600 + C22820 * C1172 +
             C22815 * C1179) *
                C280) *
               C38228) *
              C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C696 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C50607) *
               C50947 +
           ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50941 +
           C48093 * C38228) *
              C50629 * C1162 -
          (C48215 * C38228 +
           ((C29673 + C29674) * C50607 + (C29675 + C29676) * C696) * C50941 +
           ((C28904 + C28903) * C50607 + (C28902 + C28901) * C696) * C50947) *
              C50629 * C1163 +
          (C48093 * C50947 +
           ((C30037 + C30038) * C696 + (C30039 + C30040) * C50607) * C50941 +
           ((C48211 + C48212) * C696 + (C48213 + C48214) * C50607) * C38228) *
              C50629 * C1164 -
          (((C22821 * C19387 + C50781 * C19389 + C22820 * C16573 +
             C22815 * C16576) *
                C50607 +
            (C22821 * C19386 + C50781 * C19388 + C22820 * C16570 +
             C22815 * C16574) *
                C696) *
               C38228 +
           ((C48214 + C48213) * C50607 + (C48212 + C48211) * C696) * C50941 +
           C48215 * C50947) *
              C50629 * C1165) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C1285 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C50942 -
            (C22855 + C22856) * C1286 - (C22857 + C22858) * C50926 +
            C22871 * C1287 + C22872 * C1282) *
               C50947 +
           ((C28901 + C28902) * C1285 + (C28903 + C28904) * C50942 -
            C28895 * C1286 - C28896 * C50926 + C28897 * C1287 +
            C28898 * C1282) *
               C50941 +
           (C47926 * C1285 + C47927 * C50942 - C29664 * C1286 -
            C29663 * C50926 + (C23824 + C23823) * C1287 +
            (C23826 + C23825) * C1282) *
               C38228) *
              C50629 * C1643 +
          ((C28899 * C1286 -
            ((C28904 + C28903) * C50942 + (C28902 + C28901) * C1285) +
            C28900 * C50926 - C23241 * C1287 - C23242 * C1282) *
               C50947 +
           (C29653 * C1286 -
            ((C29673 + C29674) * C50942 + (C29675 + C29676) * C1285) +
            C29662 * C50926 - (C23823 + C23824) * C1287 -
            (C23825 + C23826) * C1282) *
               C50941 +
           ((C29678 + C29677) * C1286 - (C48199 * C50942 + C48200 * C1285) +
            (C29680 + C29679) * C50926 -
            (C22821 * C3591 + C50781 * C3595 + C22820 * C1167 +
             C22815 * C1173) *
                C1287 -
            (C22821 * C3594 + C50781 * C3600 + C22820 * C1172 +
             C22815 * C1179) *
                C1282) *
               C38228) *
              C50629 * C50708) *
         C50670) /
        (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C1391 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C1386 -
             (C22855 + C22856) * C1392 - (C22857 + C22858) * C50612) *
                C50947 +
            ((C28901 + C28902) * C1391 + (C28903 + C28904) * C1386 -
             C28895 * C1392 - C28896 * C50612) *
                C50941 +
            (C47926 * C1391 + C47927 * C1386 - C29664 * C1392 -
             C29663 * C50612) *
                C38228) *
               C50629 * C1643 +
           ((C28899 * C1392 -
             ((C28904 + C28903) * C1386 + (C28902 + C28901) * C1391) +
             C28900 * C50612) *
                C50947 +
            (C29653 * C1392 -
             ((C29673 + C29674) * C1386 + (C29675 + C29676) * C1391) +
             C29662 * C50612) *
                C50941 +
            ((C29678 + C29677) * C1392 - (C48199 * C1386 + C48200 * C1391) +
             (C29680 + C29679) * C50612) *
                C38228) *
               C50629 * C50708) *
              C50899 +
          ((((C23045 + C23046) * C1392 -
             ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                  C1386 +
              (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                  C1391) +
             (C23047 + C23048) * C50612) *
                C50947 +
            (C30687 * C1392 -
             ((C29454 + C29453) * C1386 + (C29452 + C29451) * C1391) +
             C30688 * C50612) *
                C50941 +
            ((C29895 + C29896) * C1392 - (C48091 * C1386 + C48092 * C1391) +
             (C29897 + C29898) * C50612) *
                C38228) *
               C50629 * C1643 +
           (((C29451 + C29452) * C1391 + (C29453 + C29454) * C1386 -
             C30690 * C1392 - C30689 * C50612) *
                C50947 +
            ((C29891 + C29892) * C1391 + (C29893 + C29894) * C1386 -
             (C29896 + C29895) * C1392 - (C29898 + C29897) * C50612) *
                C50941 +
            ((C48094 + C48095) * C1391 + (C48096 + C48097) * C1386 -
             (C22821 * C9307 + C50781 * C9310 + C22820 * C3592 +
              C22815 * C3597) *
                 C1392 -
             (C22821 * C9309 + C50781 * C9313 + C22820 * C3596 +
              C22815 * C3601) *
                 C50612) *
                C38228) *
               C50629 * C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C1391 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C1386 -
            (C22855 + C22856) * C1392 - (C22857 + C22858) * C50612) *
               C50947 +
           ((C28901 + C28902) * C1391 + (C28903 + C28904) * C1386 -
            C28895 * C1392 - C28896 * C50612) *
               C50941 +
           C49194 * C38228) *
              C50629 * C50945 +
          ((C28899 * C1392 -
            ((C28904 + C28903) * C1386 + (C28902 + C28901) * C1391) +
            C28900 * C50612) *
               C50947 +
           (C29653 * C1392 -
            ((C29673 + C29674) * C1386 + (C29675 + C29676) * C1391) +
            C29662 * C50612) *
               C50941 +
           ((C29678 + C29677) * C1392 - (C48199 * C1386 + C48200 * C1391) +
            (C29680 + C29679) * C50612) *
               C38228) *
              C50629 * C50935 +
          (C49194 * C50947 +
           ((C30037 + C30038) * C1391 + (C30039 + C30040) * C1386 -
            (C29677 + C29678) * C1392 - (C29679 + C29680) * C50612) *
               C50941 +
           ((C48211 + C48212) * C1391 + (C48213 + C48214) * C1386 -
            (C22821 * C16447 + C50781 * C16449 + C22820 * C6396 +
             C22815 * C6401) *
                C1392 -
            (C22821 * C16448 + C50781 * C16450 + C22820 * C6400 +
             C22815 * C6405) *
                C50612) *
               C38228) *
              C50629 * C1875) *
         C50670) /
        (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
               C118 +
           (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
               C106 -
           (C22855 + C22856) * C119 - (C22857 + C22858) * C107 + C22871 * C120 +
           C22872 * C108 - C22873 * C121 - C22874 * C109) *
              C50947 +
          ((C28901 + C28902) * C118 + (C28903 + C28904) * C106 - C28895 * C119 -
           C28896 * C107 + C28897 * C120 + C28898 * C108 -
           (C23237 + C23238) * C121 - (C23239 + C23240) * C109) *
              C50941 +
          ((C29676 + C29675) * C118 + (C29674 + C29673) * C106 - C29664 * C119 -
           C29663 * C107 + (C23824 + C23823) * C120 + (C23826 + C23825) * C108 -
           (C22821 * C1080 + C50781 * C1085 + C22820 * C947 + C22815 * C955) *
               C121 -
           (C22821 * C1084 + C50781 * C1092 + C22820 * C956 + C22815 * C962) *
               C109) *
              C38228) *
         C50629 * C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C49720 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C50884 -
            (C22855 + C22856) * C49713 - (C22857 + C22858) * C50612) *
               C50947 +
           ((C28901 + C28902) * C49720 + (C28903 + C28904) * C50884 -
            C28895 * C49713 - C28896 * C50612) *
               C50941 +
           ((C29676 + C29675) * C49720 + (C29674 + C29673) * C50884 -
            C29664 * C49713 - C29663 * C50612) *
               C38228) *
              C50629 * C50696 * C582 +
          (((C23045 + C23046) * C49713 -
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50884 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C49720) +
            (C23047 + C23048) * C50612) *
               C50947 +
           (C30687 * C49713 -
            ((C29454 + C29453) * C50884 + (C29452 + C29451) * C49720) +
            C30688 * C50612) *
               C50941 +
           ((C29895 + C29896) * C49713 -
            ((C29894 + C29893) * C50884 + (C29892 + C29891) * C49720) +
            (C29897 + C29898) * C50612) *
               C38228) *
              C50629 * C50696 * C583 +
          (((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                C49720 +
            (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                C50884 -
            (C23405 + C23406) * C49713 - (C23407 + C23408) * C50612) *
               C50947 +
           ((C29455 + C29456) * C49720 + (C29457 + C29458) * C50884 -
            (C29107 + C29108) * C49713 - (C29109 + C29110) * C50612) *
               C50941 +
           ((C22820 * C3483 + C22815 * C3489 + C22821 * C9202 +
             C50781 * C9206) *
                C49720 +
            (C22820 * C3488 + C22815 * C3492 + C22821 * C9205 +
             C50781 * C9208) *
                C50884 -
            (C22821 * C9201 + C50781 * C9204 + C22820 * C3482 +
             C22815 * C3487) *
                C49713 -
            (C22821 * C9203 + C50781 * C9207 + C22820 * C3486 +
             C22815 * C3491) *
                C50612) *
               C38228) *
              C50629 * C50696 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C283 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C278 -
            (C22855 + C22856) * C284 - (C22857 + C22858) * C279 +
            C22871 * C285 + C22872 * C280) *
               C50947 +
           ((C28901 + C28902) * C283 + (C28903 + C28904) * C278 -
            C28895 * C284 - C28896 * C279 + C28897 * C285 + C28898 * C280) *
               C50941 +
           ((C29676 + C29675) * C283 + (C29674 + C29673) * C278 -
            C29664 * C284 - C29663 * C279 + (C23824 + C23823) * C285 +
            (C23826 + C23825) * C280) *
               C38228) *
              C50629 * C50696 * C50899 +
          (((C23045 + C23046) * C284 -
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C278 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C283) +
            (C23047 + C23048) * C279 - C23057 * C285 - C23058 * C280) *
               C50947 +
           (C30687 * C284 -
            ((C29454 + C29453) * C278 + (C29452 + C29451) * C283) +
            C30688 * C279 - (C24577 + C24578) * C285 -
            (C24579 + C24580) * C280) *
               C50941 +
           ((C29895 + C29896) * C284 -
            ((C29894 + C29893) * C278 + (C29892 + C29891) * C283) +
            (C29897 + C29898) * C279 -
            (C22821 * C3481 + C50781 * C3485 + C22820 * C1081 +
             C22815 * C1087) *
                C285 -
            (C22821 * C3484 + C50781 * C3490 + C22820 * C1086 +
             C22815 * C1093) *
                C280) *
               C38228) *
              C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C696 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C50607) *
               C50947 +
           ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50941 +
           ((C29676 + C29675) * C696 + (C29674 + C29673) * C50607) * C38228) *
              C50629 * C50696 * C692 -
          (((C29894 + C29893) * C50607 + (C29892 + C29891) * C696) * C38228 +
           ((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50941 +
           ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                C50607 +
            (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                C696) *
               C50947) *
              C50629 * C50696 * C693 +
          (((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                C696 +
            (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                C50607) *
               C50947 +
           ((C29455 + C29456) * C696 + (C29457 + C29458) * C50607) * C50941 +
           ((C22820 * C3483 + C22815 * C3489 + C22821 * C9202 +
             C50781 * C9206) *
                C696 +
            (C22820 * C3488 + C22815 * C3492 + C22821 * C9205 +
             C50781 * C9208) *
                C50607) *
               C38228) *
              C50629 * C50696 * C694 -
          (((C22821 * C11529 + C50781 * C11531 + C22820 * C9205 +
             C22815 * C9208) *
                C50607 +
            (C22821 * C11528 + C50781 * C11530 + C22820 * C9202 +
             C22815 * C9206) *
                C696) *
               C38228 +
           ((C22821 * C8887 + C50781 * C8890 + C22820 * C3160 +
             C22815 * C3164) *
                C50607 +
            (C22821 * C8884 + C50781 * C8888 + C22820 * C3155 +
             C22815 * C3161) *
                C696) *
               C50941 +
           ((C22821 * C3002 + C50781 * C3006 + C22820 * C707 + C22815 * C712) *
                C50607 +
            (C22821 * C2997 + C50781 * C3003 + C22820 * C700 + C22815 * C708) *
                C696) *
               C50947) *
              C50629 * C50696 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                C283 +
            (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                C278 -
            (C22855 + C22856) * C284 - (C22857 + C22858) * C279 +
            C22871 * C285 + C22872 * C280) *
               C50947 +
           ((C28901 + C28902) * C283 + (C28903 + C28904) * C278 -
            C28895 * C284 - C28896 * C279 + C28897 * C285 + C28898 * C280) *
               C50941 +
           ((C29676 + C29675) * C283 + (C29674 + C29673) * C278 -
            C29664 * C284 - C29663 * C279 + (C23824 + C23823) * C285 +
            (C23826 + C23825) * C280) *
               C38228) *
              C50629 * C50900 +
          ((C28899 * C284 -
            ((C28904 + C28903) * C278 + (C28902 + C28901) * C283) +
            C28900 * C279 - C23241 * C285 - C23242 * C280) *
               C50947 +
           (C29653 * C284 -
            ((C29673 + C29674) * C278 + (C29675 + C29676) * C283) +
            C29662 * C279 - (C23823 + C23824) * C285 -
            (C23825 + C23826) * C280) *
               C50941 +
           ((C29678 + C29677) * C284 -
            ((C30040 + C30039) * C278 + (C30038 + C30037) * C283) +
            (C29680 + C29679) * C279 -
            (C22821 * C3591 + C50781 * C3595 + C22820 * C1167 +
             C22815 * C1173) *
                C285 -
            (C22821 * C3594 + C50781 * C3600 + C22820 * C1172 +
             C22815 * C1179) *
                C280) *
               C38228) *
              C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22820 * C122 + C22815 * C129 + C22821 * C287 + C50781 * C294) *
                 C696 +
             (C22820 * C130 + C22815 * C143 + C22821 * C293 + C50781 * C304) *
                 C50607) *
                C50947 +
            ((C28901 + C28902) * C696 + (C28903 + C28904) * C50607) * C50941 +
            ((C29676 + C29675) * C696 + (C29674 + C29673) * C50607) * C38228) *
               C50629 * C50900 -
           (((C30040 + C30039) * C50607 + (C30038 + C30037) * C696) * C38228 +
            ((C29673 + C29674) * C50607 + (C29675 + C29676) * C696) * C50941 +
            ((C28904 + C28903) * C50607 + (C28902 + C28901) * C696) * C50947) *
               C50629 * C50708) *
              C582 +
          ((((C29451 + C29452) * C696 + (C29453 + C29454) * C50607) * C50947 +
            ((C29891 + C29892) * C696 + (C29893 + C29894) * C50607) * C50941 +
            ((C22820 * C3593 + C22815 * C3599 + C22821 * C9308 +
              C50781 * C9312) *
                 C696 +
             (C22820 * C3598 + C22815 * C3602 + C22821 * C9311 +
              C50781 * C9314) *
                 C50607) *
                C38228) *
               C50629 * C50708 -
           (((C29894 + C29893) * C50607 + (C29892 + C29891) * C696) * C38228 +
            ((C29454 + C29453) * C50607 + (C29452 + C29451) * C696) * C50941 +
            ((C22821 * C593 + C50781 * C602 + C22820 * C293 + C22815 * C304) *
                 C50607 +
             (C22821 * C587 + C50781 * C592 + C22820 * C287 + C22815 * C294) *
                 C696) *
                C50947) *
               C50629 * C50900) *
              C583 +
          ((((C22820 * C587 + C22815 * C592 + C22821 * C700 + C50781 * C708) *
                 C696 +
             (C22820 * C593 + C22815 * C602 + C22821 * C707 + C50781 * C712) *
                 C50607) *
                C50947 +
            ((C29455 + C29456) * C696 + (C29457 + C29458) * C50607) * C50941 +
            ((C47776 + C47777) * C696 + (C47778 + C47779) * C50607) * C38228) *
               C50629 * C50900 -
           (((C22821 * C11599 + C50781 * C11601 + C22820 * C9311 +
              C22815 * C9314) *
                 C50607 +
             (C22821 * C11598 + C50781 * C11600 + C22820 * C9308 +
              C22815 * C9312) *
                 C696) *
                C38228 +
            ((C47779 + C47778) * C50607 + (C47777 + C47776) * C696) * C50941 +
            ((C29458 + C29457) * C50607 + (C29456 + C29455) * C696) * C50947) *
               C50629 * C50708) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C1285 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50942 -
            (C8086 + C8087 + C8088) * C1286 - (C8089 + C8090 + C8091) * C50926 +
            (C8092 + C8093 + C8094) * C1287 + (C8095 + C8096 + C8097) * C1282) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C1285 + (C8091 + C8090 + C8089) * C50942 -
            (C8094 + C8093 + C8092) * C1286 - (C8097 + C8096 + C8095) * C50926 +
            (C8100 + C8099 + C8098) * C1287 + (C8103 + C8102 + C8101) * C1282) *
               C50795 * C50634) *
              C50696 * C1283 +
          (((C8274 + C8275 + C8276) * C1286 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50942 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C1285) +
            (C8277 + C8278 + C8279) * C50926 - (C8280 + C8281 + C8282) * C1287 -
            (C8283 + C8284 + C8285) * C1282) *
               C50795 * C50891 +
           ((C8282 + C8281 + C8280) * C1286 -
            ((C8279 + C8278 + C8277) * C50942 +
             (C8276 + C8275 + C8274) * C1285) +
            (C8285 + C8284 + C8283) * C50926 -
            (C8048 * C697 + C8043 * C702 + C8047 * C590 + C8042 * C598 +
             C8046 * C289 + C8041 * C298) *
                C1287 -
            (C8048 * C701 + C8043 * C709 + C8047 * C599 + C8042 * C605 +
             C8046 * C299 + C8041 * C307) *
                C1282) *
               C50795 * C50634) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C1285 +
            (C117 * C130 + C50765 * C143) * C50942 - C171 * C1286 -
            C172 * C50926 + C173 * C1287 + C174 * C1282) *
               C50795 * C111 +
           (C171 * C1285 + C172 * C50942 - C173 * C1286 - C174 * C50926 +
            C175 * C1287 + C176 * C1282) *
               C50795 * C112 +
           (C173 * C1285 + C174 * C50942 - C175 * C1286 - C176 * C50926 +
            C177 * C1287 + C178 * C1282) *
               C50795 * C113 +
           (C175 * C1285 + C176 * C50942 - C177 * C1286 - C178 * C50926 +
            C179 * C1287 + C180 * C1282) *
               C50795 * C114) *
              C50696 * C1283 +
          ((C327 * C1286 -
            ((C117 * C293 + C50765 * C304) * C50942 +
             (C117 * C287 + C50765 * C294) * C1285) +
            C328 * C50926 - C329 * C1287 - C330 * C1282) *
               C50795 * C111 +
           (C329 * C1286 - (C328 * C50942 + C327 * C1285) + C330 * C50926 -
            C331 * C1287 - C332 * C1282) *
               C50795 * C112 +
           (C331 * C1286 - (C330 * C50942 + C329 * C1285) + C332 * C50926 -
            C333 * C1287 - C334 * C1282) *
               C50795 * C113 +
           (C333 * C1286 - (C332 * C50942 + C331 * C1285) + C334 * C50926 -
            (C117 * C291 + C50765 * C302) * C1287 -
            (C117 * C303 + C50765 * C309) * C1282) *
               C50795 * C114) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1285 +
             (C117 * C130 + C50765 * C143) * C50942 - C171 * C1286 -
             C172 * C50926 + C173 * C1287 + C174 * C1282) *
                C15422 +
            (C7076 + C7077 - C7078 - C7079 + C7080 + C7081) * C15423 +
            (C6115 * C1285 + C6114 * C50942 - C977 * C1286 - C978 * C50926 +
             C979 * C1287 + C980 * C1282) *
                C15424) *
               C50891 +
           ((C171 * C1285 + C172 * C50942 - C173 * C1286 - C174 * C50926 +
             C175 * C1287 + C176 * C1282) *
                C15422 +
            (C7082 + C7083 - C7084 - C7085 + C7086 + C7087) * C15423 +
            (C977 * C1285 + C978 * C50942 - C979 * C1286 - C980 * C50926 +
             C981 * C1287 + C982 * C1282) *
                C15424) *
               C50634) *
              C50696 * C1283 +
          (((C327 * C1286 -
             ((C117 * C293 + C50765 * C304) * C50942 +
              (C117 * C287 + C50765 * C294) * C1285) +
             C328 * C50926 - C329 * C1287 - C330 * C1282) *
                C15422 +
            (C1540 * C1286 - (C5927 * C50942 + C5926 * C1285) + C1541 * C50926 -
             C1542 * C1287 - C1543 * C1282) *
                C15423 +
            (C6288 * C1286 - (C6287 * C50942 + C6286 * C1285) + C6289 * C50926 -
             C6290 * C1287 - C6291 * C1282) *
                C15424) *
               C50891 +
           ((C329 * C1286 - (C328 * C50942 + C327 * C1285) + C330 * C50926 -
             C331 * C1287 - C332 * C1282) *
                C15422 +
            (C1542 * C1286 - (C1541 * C50942 + C1540 * C1285) + C1543 * C50926 -
             C1544 * C1287 - C1545 * C1282) *
                C15423 +
            (C6290 * C1286 - (C6289 * C50942 + C6288 * C1285) + C6291 * C50926 -
             (C117 * C1080 + C50765 * C1085) * C1287 -
             (C117 * C1084 + C50765 * C1092) * C1282) *
                C15424) *
               C50634) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C1391 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C1386 -
            (C8086 + C8087 + C8088) * C1392 -
            (C8089 + C8090 + C8091) * C50612) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C1391 + (C8091 + C8090 + C8089) * C1386 -
            (C8094 + C8093 + C8092) * C1392 -
            (C8097 + C8096 + C8095) * C50612) *
               C50795 * C50634) *
              C50696 * C50944 +
          (((C8274 + C8275 + C8276) * C1392 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C1386 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C1391) +
            (C8277 + C8278 + C8279) * C50612) *
               C50795 * C50891 +
           ((C8282 + C8281 + C8280) * C1392 -
            ((C8279 + C8278 + C8277) * C1386 +
             (C8276 + C8275 + C8274) * C1391) +
            (C8285 + C8284 + C8283) * C50612) *
               C50795 * C50634) *
              C50696 * C50932 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C1391 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C1386 -
            (C8626 + C8627 + C8628) * C1392 -
            (C8629 + C8630 + C8631) * C50612) *
               C50795 * C50891 +
           ((C8628 + C8627 + C8626) * C1391 + (C8631 + C8630 + C8629) * C1386 -
            (C8048 * C2995 + C8043 * C2999 + C8047 * C698 + C8042 * C704 +
             C8046 * C589 + C8041 * C596) *
                C1392 -
            (C8048 * C2998 + C8043 * C3004 + C8047 * C703 + C8042 * C710 +
             C8046 * C597 + C8041 * C604) *
                C50612) *
               C50795 * C50634) *
              C50696 * C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C1391 +
            (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
            C172 * C50612) *
               C50795 * C111 +
           (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
               C50795 * C112 +
           (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
               C50795 * C113 +
           (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50612) *
               C50795 * C114) *
              C50696 * C50944 +
          ((C327 * C1392 -
            ((C117 * C293 + C50765 * C304) * C1386 +
             (C117 * C287 + C50765 * C294) * C1391) +
            C328 * C50612) *
               C50795 * C111 +
           (C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
               C50795 * C112 +
           (C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50612) *
               C50795 * C113 +
           (C333 * C1392 - (C332 * C1386 + C331 * C1391) + C334 * C50612) *
               C50795 * C114) *
              C50696 * C50932 +
          (((C117 * C587 + C50765 * C592) * C1391 +
            (C117 * C593 + C50765 * C602) * C1386 - C620 * C1392 -
            C621 * C50612) *
               C50795 * C111 +
           (C620 * C1391 + C621 * C1386 - C622 * C1392 - C623 * C50612) *
               C50795 * C112 +
           (C622 * C1391 + C623 * C1386 - C624 * C1392 - C625 * C50612) *
               C50795 * C113 +
           (C624 * C1391 + C625 * C1386 -
            (C117 * C591 + C50765 * C600) * C1392 -
            (C117 * C601 + C50765 * C606) * C50612) *
               C50795 * C114) *
              C50696 * C1390)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1391 +
             (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
             C172 * C50612) *
                C15422 +
            (C6906 + C6907 - C6908 - C6909) * C15423 +
            (C7436 + C7435 - C7434 - C7437) * C15424) *
               C50891 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                C15422 +
            (C6910 + C6911 - C6912 - C6913) * C15423 +
            (C7440 + C7439 - C7438 - C7441) * C15424) *
               C50634) *
              C50696 * C50944 +
          (((C327 * C1392 -
             ((C117 * C293 + C50765 * C304) * C1386 +
              (C117 * C287 + C50765 * C294) * C1391) +
             C328 * C50612) *
                C15422 +
            (C6918 - (C6919 + C6920) + C6921) * C15423 +
            (C6288 * C1392 - (C6287 * C1386 + C6286 * C1391) + C6289 * C50612) *
                C15424) *
               C50891 +
           ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                C15422 +
            (C6922 - (C6923 + C6924) + C6925) * C15423 +
            (C6290 * C1392 - (C6289 * C1386 + C6288 * C1391) + C6291 * C50612) *
                C15424) *
               C50634) *
              C50696 * C50932 +
          ((((C117 * C587 + C50765 * C592) * C1391 +
             (C117 * C593 + C50765 * C602) * C1386 - C620 * C1392 -
             C621 * C50612) *
                C15422 +
            (C5928 * C1391 + C5929 * C1386 - C5656 * C1392 - C5657 * C50612) *
                C15423 +
            (C16132 * C1391 + C16133 * C1386 - C15880 * C1392 -
             C15881 * C50612) *
                C15424) *
               C50891 +
           ((C620 * C1391 + C621 * C1386 - C622 * C1392 - C623 * C50612) *
                C15422 +
            (C5656 * C1391 + C5657 * C1386 - C5658 * C1392 - C5659 * C50612) *
                C15423 +
            (C15880 * C1391 + C15881 * C1386 -
             (C117 * C3481 + C50765 * C3485) * C1392 -
             (C117 * C3484 + C50765 * C3490) * C50612) *
                C15424) *
               C50634) *
              C50696 * C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C1391 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C1386 -
             (C8086 + C8087 + C8088) * C1392 -
             (C8089 + C8090 + C8091) * C50612) *
                C50795 * C50891 +
            ((C8088 + C8087 + C8086) * C1391 + (C8091 + C8090 + C8089) * C1386 -
             (C8094 + C8093 + C8092) * C1392 -
             (C8097 + C8096 + C8095) * C50612) *
                C50795 * C50634) *
               C50900 +
           (((C8456 + C8457 + C8458) * C1392 -
             ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
               C8046 * C441 + C8041 * C452) *
                  C1386 +
              (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
               C8046 * C435 + C8041 * C442) *
                  C1391) +
             (C8459 + C8460 + C8461) * C50612) *
                C50795 * C50891 +
            ((C8464 + C8463 + C8462) * C1392 -
             ((C8461 + C8460 + C8459) * C1386 +
              (C8458 + C8457 + C8456) * C1391) +
             (C8467 + C8466 + C8465) * C50612) *
                C50795 * C50634) *
               C50708) *
              C1283 +
          ((((C8274 + C8275 + C8276) * C1392 -
             ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
               C8046 * C293 + C8041 * C304) *
                  C1386 +
              (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
               C8046 * C287 + C8041 * C294) *
                  C1391) +
             (C8277 + C8278 + C8279) * C50612) *
                C50795 * C50891 +
            ((C8282 + C8281 + C8280) * C1392 -
             ((C8279 + C8278 + C8277) * C1386 +
              (C8276 + C8275 + C8274) * C1391) +
             (C8285 + C8284 + C8283) * C50612) *
                C50795 * C50634) *
               C50900 +
           (((C8046 * C811 + C8041 * C819 + C8047 * C818 + C8042 * C834 +
              C8048 * C3155 + C8043 * C3161) *
                 C1391 +
             (C8046 * C820 + C8041 * C835 + C8047 * C833 + C8042 * C842 +
              C8048 * C3160 + C8043 * C3164) *
                 C1386 -
             (C9814 + C9815 + C9816) * C1392 -
             (C9817 + C9818 + C9819) * C50612) *
                C50795 * C50891 +
            ((C9816 + C9815 + C9814) * C1391 + (C9819 + C9818 + C9817) * C1386 -
             (C8048 * C3153 + C8043 * C3157 + C8047 * C816 + C8042 * C830 +
              C8046 * C813 + C8041 * C823) *
                 C1392 -
             (C8048 * C3156 + C8043 * C3162 + C8047 * C829 + C8042 * C840 +
              C8046 * C824 + C8041 * C837) *
                 C50612) *
                C50795 * C50634) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1391 +
             (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
             C172 * C50612) *
                C50795 * C111 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                C50795 * C112 +
            (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
                C50795 * C113 +
            (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50612) *
                C50795 * C114) *
               C50900 +
           ((C475 * C1392 -
             ((C117 * C441 + C50765 * C452) * C1386 +
              (C117 * C435 + C50765 * C442) * C1391) +
             C476 * C50612) *
                C50795 * C111 +
            (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50612) *
                C50795 * C112 +
            (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50612) *
                C50795 * C113 +
            (C481 * C1392 - (C480 * C1386 + C479 * C1391) + C482 * C50612) *
                C50795 * C114) *
               C50708) *
              C1283 +
          (((C327 * C1392 -
             ((C117 * C293 + C50765 * C304) * C1386 +
              (C117 * C287 + C50765 * C294) * C1391) +
             C328 * C50612) *
                C50795 * C111 +
            (C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                C50795 * C112 +
            (C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50612) *
                C50795 * C113 +
            (C333 * C1392 - (C332 * C1386 + C331 * C1391) + C334 * C50612) *
                C50795 * C114) *
               C50900 +
           (((C117 * C811 + C50765 * C819) * C1391 +
             (C117 * C820 + C50765 * C835) * C1386 - C1540 * C1392 -
             C1541 * C50612) *
                C50795 * C111 +
            (C1540 * C1391 + C1541 * C1386 - C1542 * C1392 - C1543 * C50612) *
                C50795 * C112 +
            (C1542 * C1391 + C1543 * C1386 - C1544 * C1392 - C1545 * C50612) *
                C50795 * C113 +
            (C1544 * C1391 + C1545 * C1386 -
             (C117 * C1523 + C50765 * C1524) * C1392 -
             (C117 * C1525 + C50765 * C1526) * C50612) *
                C50795 * C114) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C1391 +
              (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
              C172 * C50612) *
                 C15422 +
             (C6906 + C6907 - C6908 - C6909) * C15423 +
             (C7436 + C7435 - C7434 - C7437) * C15424) *
                C50891 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                 C15422 +
             (C6910 + C6911 - C6912 - C6913) * C15423 +
             (C7440 + C7439 - C7438 - C7441) * C15424) *
                C50634) *
               C50900 +
           (((C6908 - (C6907 + C6906) + C6909) * C15422 +
             (C7434 - (C7435 + C7436) + C7437) * C15423 +
             (C6116 * C1392 - (C6417 * C1386 + C6416 * C1391) +
              C6117 * C50612) *
                 C15424) *
                C50891 +
            ((C6912 - (C6911 + C6910) + C6913) * C15422 +
             (C7438 - (C7439 + C7440) + C7441) * C15423 +
             (C6118 * C1392 - (C6117 * C1386 + C6116 * C1391) +
              C6119 * C50612) *
                 C15424) *
                C50634) *
               C50708) *
              C1283 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50765 * C304) * C1386 +
               (C117 * C287 + C50765 * C294) * C1391) +
              C328 * C50612) *
                 C15422 +
             (C6918 - (C6919 + C6920) + C6921) * C15423 +
             (C17076 - (C17077 + C17078) + C17079) * C15424) *
                C50891 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                 C15422 +
             (C6922 - (C6923 + C6924) + C6925) * C15423 +
             (C17080 - (C17081 + C17082) + C17083) * C15424) *
                C50634) *
               C50900 +
           (((C6920 + C6919 - C6918 - C6921) * C15422 +
             (C17078 + C17077 - C17076 - C17079) * C15423 +
             (C16464 * C1391 + C16465 * C1386 - C16466 * C1392 -
              C16467 * C50612) *
                 C15424) *
                C50891 +
            ((C6924 + C6923 - C6922 - C6925) * C15422 +
             (C17082 + C17081 - C17080 - C17083) * C15423 +
             (C16466 * C1391 + C16467 * C1386 -
              (C117 * C3591 + C50765 * C3595) * C1392 -
              (C117 * C3594 + C50765 * C3600) * C50612) *
                 C15424) *
                C50634) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C49720 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50884 -
             (C8086 + C8087 + C8088) * C49713 -
             (C8089 + C8090 + C8091) * C50612) *
                C50795 * C50891 +
            ((C8088 + C8087 + C8086) * C49720 +
             (C8091 + C8090 + C8089) * C50884 -
             (C8094 + C8093 + C8092) * C49713 -
             (C8097 + C8096 + C8095) * C50612) *
                C50795 * C50634) *
               C1643 +
           (((C8456 + C8457 + C8458) * C49713 -
             ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
               C8046 * C441 + C8041 * C452) *
                  C50884 +
              (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
               C8046 * C435 + C8041 * C442) *
                  C49720) +
             (C8459 + C8460 + C8461) * C50612) *
                C50795 * C50891 +
            ((C8464 + C8463 + C8462) * C49713 -
             ((C8461 + C8460 + C8459) * C50884 +
              (C8458 + C8457 + C8456) * C49720) +
             (C8467 + C8466 + C8465) * C50612) *
                C50795 * C50634) *
               C50708) *
              C1283 +
          ((((C8274 + C8275 + C8276) * C49713 -
             ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
               C8046 * C293 + C8041 * C304) *
                  C50884 +
              (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
               C8046 * C287 + C8041 * C294) *
                  C49720) +
             (C8277 + C8278 + C8279) * C50612) *
                C50795 * C50891 +
            ((C8282 + C8281 + C8280) * C49713 -
             ((C8279 + C8278 + C8277) * C50884 +
              (C8276 + C8275 + C8274) * C49720) +
             (C8285 + C8284 + C8283) * C50612) *
                C50795 * C50634) *
               C1643 +
           (((C8046 * C811 + C8041 * C819 + C8047 * C818 + C8042 * C834 +
              C8048 * C3155 + C8043 * C3161) *
                 C49720 +
             (C8046 * C820 + C8041 * C835 + C8047 * C833 + C8042 * C842 +
              C8048 * C3160 + C8043 * C3164) *
                 C50884 -
             (C9814 + C9815 + C9816) * C49713 -
             (C9817 + C9818 + C9819) * C50612) *
                C50795 * C50891 +
            ((C9816 + C9815 + C9814) * C49720 +
             (C9819 + C9818 + C9817) * C50884 -
             (C8048 * C3153 + C8043 * C3157 + C8047 * C816 + C8042 * C830 +
              C8046 * C813 + C8041 * C823) *
                 C49713 -
             (C8048 * C3156 + C8043 * C3162 + C8047 * C829 + C8042 * C840 +
              C8046 * C824 + C8041 * C837) *
                 C50612) *
                C50795 * C50634) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C49720 +
             (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
             C172 * C50612) *
                C50795 * C111 +
            (C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                C50795 * C112 +
            (C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
                C50795 * C113 +
            (C175 * C49720 + C176 * C50884 - C177 * C49713 - C178 * C50612) *
                C50795 * C114) *
               C1643 +
           ((C475 * C49713 -
             ((C117 * C441 + C50765 * C452) * C50884 +
              (C117 * C435 + C50765 * C442) * C49720) +
             C476 * C50612) *
                C50795 * C111 +
            (C477 * C49713 - (C476 * C50884 + C475 * C49720) + C478 * C50612) *
                C50795 * C112 +
            (C479 * C49713 - (C478 * C50884 + C477 * C49720) + C480 * C50612) *
                C50795 * C113 +
            (C481 * C49713 - (C480 * C50884 + C479 * C49720) + C482 * C50612) *
                C50795 * C114) *
               C50708) *
              C1283 +
          (((C327 * C49713 -
             ((C117 * C293 + C50765 * C304) * C50884 +
              (C117 * C287 + C50765 * C294) * C49720) +
             C328 * C50612) *
                C50795 * C111 +
            (C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
                C50795 * C112 +
            (C331 * C49713 - (C330 * C50884 + C329 * C49720) + C332 * C50612) *
                C50795 * C113 +
            (C333 * C49713 - (C332 * C50884 + C331 * C49720) + C334 * C50612) *
                C50795 * C114) *
               C1643 +
           (((C117 * C811 + C50765 * C819) * C49720 +
             (C117 * C820 + C50765 * C835) * C50884 - C1540 * C49713 -
             C1541 * C50612) *
                C50795 * C111 +
            (C1540 * C49720 + C1541 * C50884 - C1542 * C49713 -
             C1543 * C50612) *
                C50795 * C112 +
            (C1542 * C49720 + C1543 * C50884 - C1544 * C49713 -
             C1545 * C50612) *
                C50795 * C113 +
            (C1544 * C49720 + C1545 * C50884 -
             (C117 * C1523 + C50765 * C1524) * C49713 -
             (C117 * C1525 + C50765 * C1526) * C50612) *
                C50795 * C114) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C49720 +
              (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
              C172 * C50612) *
                 C15422 +
             (C6080 + C6081 - C6082 - C6083) * C15423 + C16300 * C15424) *
                C50891 +
            ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                 C15422 +
             (C6084 + C6085 - C6086 - C6087) * C15423 + C16301 * C15424) *
                C50634) *
               C1643 +
           (((C6082 - (C6081 + C6080) + C6083) * C15422 +
             (C6092 - (C6120 + C6121) + C6097) * C15423 +
             (C16284 - (C16285 + C16286) + C16287) * C15424) *
                C50891 +
            ((C6086 - (C6085 + C6084) + C6087) * C15422 +
             (C6098 - (C6099 + C6100) + C6101) * C15423 +
             (C16288 - (C16289 + C16290) + C16291) * C15424) *
                C50634) *
               C50708) *
              C1283 +
          ((((C327 * C49713 -
              ((C117 * C293 + C50765 * C304) * C50884 +
               (C117 * C287 + C50765 * C294) * C49720) +
              C328 * C50612) *
                 C15422 +
             (C7640 - (C7641 + C7642) + C7643) * C15423 +
             (C17790 - (C17791 + C17792) + C17793) * C15424) *
                C50891 +
            ((C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
                 C15422 +
             (C7644 - (C7645 + C7646) + C7647) * C15423 +
             (C17794 - (C17795 + C17796) + C17797) * C15424) *
                C50634) *
               C1643 +
           (((C7642 + C7641 - C7640 - C7643) * C15422 +
             (C17792 + C17791 - C17790 - C17793) * C15423 +
             (C16464 * C49720 + C16465 * C50884 - C16466 * C49713 -
              C16467 * C50612) *
                 C15424) *
                C50891 +
            ((C7646 + C7645 - C7644 - C7647) * C15422 +
             (C17796 + C17795 - C17794 - C17797) * C15423 +
             (C16466 * C49720 + C16467 * C50884 -
              (C117 * C3591 + C50765 * C3595) * C49713 -
              (C117 * C3594 + C50765 * C3600) * C50612) *
                 C15424) *
                C50634) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C8046 * C122 + C8041 * C129 + C8047 * C287 +
                      C8042 * C294 + C8048 * C587 + C8043 * C592) *
                         C696 +
                     (C8046 * C130 + C8041 * C143 + C8047 * C293 +
                      C8042 * C304 + C8048 * C593 + C8043 * C602) *
                         C50607) *
                        C50795 * C50891 +
                    ((C8088 + C8087 + C8086) * C696 +
                     (C8091 + C8090 + C8089) * C50607) *
                        C50795 * C50634) *
                       C1643 -
                   (((C8461 + C8460 + C8459) * C50607 +
                     (C8458 + C8457 + C8456) * C696) *
                        C50795 * C50634 +
                    ((C8048 * C833 + C8043 * C842 + C8047 * C820 +
                      C8042 * C835 + C8046 * C441 + C8041 * C452) *
                         C50607 +
                     (C8048 * C818 + C8043 * C834 + C8047 * C811 +
                      C8042 * C819 + C8046 * C435 + C8041 * C442) *
                         C696) *
                        C50795 * C50891) *
                       C50708) *
                      C50944 +
                  ((((C8046 * C811 + C8041 * C819 + C8047 * C818 +
                      C8042 * C834 + C8048 * C3155 + C8043 * C3161) *
                         C696 +
                     (C8046 * C820 + C8041 * C835 + C8047 * C833 +
                      C8042 * C842 + C8048 * C3160 + C8043 * C3164) *
                         C50607) *
                        C50795 * C50891 +
                    ((C9816 + C9815 + C9814) * C696 +
                     (C9819 + C9818 + C9817) * C50607) *
                        C50795 * C50634) *
                       C50708 -
                   (((C8279 + C8278 + C8277) * C50607 +
                     (C8276 + C8275 + C8274) * C696) *
                        C50795 * C50634 +
                    ((C8048 * C707 + C8043 * C712 + C8047 * C593 +
                      C8042 * C602 + C8046 * C293 + C8041 * C304) *
                         C50607 +
                     (C8048 * C700 + C8043 * C708 + C8047 * C587 +
                      C8042 * C592 + C8046 * C287 + C8041 * C294) *
                         C696) *
                        C50795 * C50891) *
                       C1643) *
                      C50932 +
                  ((((C8046 * C587 + C8041 * C592 + C8047 * C700 +
                      C8042 * C708 + C8048 * C2997 + C8043 * C3003) *
                         C696 +
                     (C8046 * C593 + C8041 * C602 + C8047 * C707 +
                      C8042 * C712 + C8048 * C3002 + C8043 * C3006) *
                         C50607) *
                        C50795 * C50891 +
                    ((C8628 + C8627 + C8626) * C696 +
                     (C8631 + C8630 + C8629) * C50607) *
                        C50795 * C50634) *
                       C1643 -
                   (((C8048 * C8885 + C8043 * C8889 + C8047 * C3158 +
                      C8042 * C3163 + C8046 * C831 + C8041 * C841) *
                         C50607 +
                     (C8048 * C8883 + C8043 * C8886 + C8047 * C3154 +
                      C8042 * C3159 + C8046 * C817 + C8041 * C832) *
                         C696) *
                        C50795 * C50634 +
                    ((C8048 * C8887 + C8043 * C8890 + C8047 * C3160 +
                      C8042 * C3164 + C8046 * C833 + C8041 * C842) *
                         C50607 +
                     (C8048 * C8884 + C8043 * C8888 + C8047 * C3155 +
                      C8042 * C3161 + C8046 * C818 + C8041 * C834) *
                         C696) *
                        C50795 * C50891) *
                       C50708) *
                      C1390)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50765 * C129) * C696 +
                     (C117 * C130 + C50765 * C143) * C50607) *
                        C50795 * C111 +
                    (C171 * C696 + C172 * C50607) * C50795 * C112 +
                    (C173 * C696 + C174 * C50607) * C50795 * C113 +
                    (C175 * C696 + C176 * C50607) * C50795 * C114) *
                       C1643 -
                   ((C480 * C50607 + C479 * C696) * C50795 * C114 +
                    (C478 * C50607 + C477 * C696) * C50795 * C113 +
                    (C476 * C50607 + C475 * C696) * C50795 * C112 +
                    ((C117 * C441 + C50765 * C452) * C50607 +
                     (C117 * C435 + C50765 * C442) * C696) *
                        C50795 * C111) *
                       C50708) *
                      C50944 +
                  ((((C117 * C811 + C50765 * C819) * C696 +
                     (C117 * C820 + C50765 * C835) * C50607) *
                        C50795 * C111 +
                    (C1540 * C696 + C1541 * C50607) * C50795 * C112 +
                    (C1542 * C696 + C1543 * C50607) * C50795 * C113 +
                    (C1544 * C696 + C1545 * C50607) * C50795 * C114) *
                       C50708 -
                   ((C332 * C50607 + C331 * C696) * C50795 * C114 +
                    (C330 * C50607 + C329 * C696) * C50795 * C113 +
                    (C328 * C50607 + C327 * C696) * C50795 * C112 +
                    ((C117 * C293 + C50765 * C304) * C50607 +
                     (C117 * C287 + C50765 * C294) * C696) *
                        C50795 * C111) *
                       C1643) *
                      C50932 +
                  ((((C117 * C587 + C50765 * C592) * C696 +
                     (C117 * C593 + C50765 * C602) * C50607) *
                        C50795 * C111 +
                    (C620 * C696 + C621 * C50607) * C50795 * C112 +
                    (C622 * C696 + C623 * C50607) * C50795 * C113 +
                    (C624 * C696 + C625 * C50607) * C50795 * C114) *
                       C1643 -
                   (((C117 * C827 + C50765 * C839) * C50607 +
                     (C117 * C815 + C50765 * C828) * C696) *
                        C50795 * C114 +
                    ((C117 * C829 + C50765 * C840) * C50607 +
                     (C117 * C816 + C50765 * C830) * C696) *
                        C50795 * C113 +
                    ((C117 * C831 + C50765 * C841) * C50607 +
                     (C117 * C817 + C50765 * C832) * C696) *
                        C50795 * C112 +
                    ((C117 * C833 + C50765 * C842) * C50607 +
                     (C117 * C818 + C50765 * C834) * C696) *
                        C50795 * C111) *
                       C50708) *
                      C1390)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C122 + C50765 * C129) * C696 +
                      (C117 * C130 + C50765 * C143) * C50607) *
                         C15422 +
                     (C5904 + C5905) * C15423 + C16452 * C15424) *
                        C50891 +
                    ((C171 * C696 + C172 * C50607) * C15422 +
                     (C5906 + C5907) * C15423 + C16453 * C15424) *
                        C50634) *
                       C1643 -
                   ((C16578 * C15424 + (C6270 + C6271) * C15423 +
                     (C5907 + C5906) * C15422) *
                        C50634 +
                    (C16579 * C15424 + (C6272 + C6273) * C15423 +
                     (C5905 + C5904) * C15422) *
                        C50891) *
                       C50708) *
                      C50944 +
                  ((((C5930 + C5931) * C15422 + (C6292 + C6293) * C15423 +
                     (C16468 + C16469) * C15424) *
                        C50891 +
                    ((C5914 + C5915) * C15422 + (C6294 + C6295) * C15423 +
                     (C16470 + C16471) * C15424) *
                        C50634) *
                       C50708 -
                   ((C16462 * C15424 + (C5915 + C5914) * C15423 +
                     (C328 * C50607 + C327 * C696) * C15422) *
                        C50634 +
                    (C16463 * C15424 + (C5931 + C5930) * C15423 +
                     ((C117 * C293 + C50765 * C304) * C50607 +
                      (C117 * C287 + C50765 * C294) * C696) *
                         C15422) *
                        C50891) *
                       C1643) *
                      C50932 +
                  (((((C117 * C587 + C50765 * C592) * C696 +
                      (C117 * C593 + C50765 * C602) * C50607) *
                         C15422 +
                     (C5932 + C5933) * C15423 + (C16134 + C16135) * C15424) *
                        C50891 +
                    ((C620 * C696 + C621 * C50607) * C15422 +
                     (C5922 + C5923) * C15423 + (C16130 + C16131) * C15424) *
                        C50634) *
                       C1643 -
                   ((((C117 * C9309 + C50765 * C9313) * C50607 +
                      (C117 * C9307 + C50765 * C9310) * C696) *
                         C15424 +
                     (C16131 + C16130) * C15423 + (C5923 + C5922) * C15422) *
                        C50634 +
                    (((C117 * C9311 + C50765 * C9314) * C50607 +
                      (C117 * C9308 + C50765 * C9312) * C696) *
                         C15424 +
                     (C16135 + C16134) * C15423 + (C5933 + C5932) * C15422) *
                        C50891) *
                       C50708) *
                      C1390)) /
                    (p * q * std::sqrt(p + q));
    d2ee[95] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C8046 * C122 + C8041 * C129 + C8047 * C287 +
                      C8042 * C294 + C8048 * C587 + C8043 * C592) *
                         C696 +
                     (C8046 * C130 + C8041 * C143 + C8047 * C293 +
                      C8042 * C304 + C8048 * C593 + C8043 * C602) *
                         C50607) *
                        C50795 * C50891 +
                    ((C8088 + C8087 + C8086) * C696 +
                     (C8091 + C8090 + C8089) * C50607) *
                        C50795 * C50634) *
                       C50945 -
                   (((C8461 + C8460 + C8459) * C50607 +
                     (C8458 + C8457 + C8456) * C696) *
                        C50795 * C50634 +
                    ((C8048 * C833 + C8043 * C842 + C8047 * C820 +
                      C8042 * C835 + C8046 * C441 + C8041 * C452) *
                         C50607 +
                     (C8048 * C818 + C8043 * C834 + C8047 * C811 +
                      C8042 * C819 + C8046 * C435 + C8041 * C442) *
                         C696) *
                        C50795 * C50891) *
                       C50935 +
                   (((C8046 * C944 + C8041 * C949 + C8047 * C1083 +
                      C8042 * C1091 + C8048 * C3483 + C8043 * C3489) *
                         C696 +
                     (C8046 * C950 + C8041 * C959 + C8047 * C1090 +
                      C8042 * C1095 + C8048 * C3488 + C8043 * C3492) *
                         C50607) *
                        C50795 * C50891 +
                    ((C9052 + C9051 + C9050) * C696 +
                     (C9055 + C9054 + C9053) * C50607) *
                        C50795 * C50634) *
                       C1875) *
                      C1283 +
                  ((((C8046 * C811 + C8041 * C819 + C8047 * C818 +
                      C8042 * C834 + C8048 * C3155 + C8043 * C3161) *
                         C696 +
                     (C8046 * C820 + C8041 * C835 + C8047 * C833 +
                      C8042 * C842 + C8048 * C3160 + C8043 * C3164) *
                         C50607) *
                        C50795 * C50891 +
                    ((C9816 + C9815 + C9814) * C696 +
                     (C9819 + C9818 + C9817) * C50607) *
                        C50795 * C50634) *
                       C50935 -
                   (((C8279 + C8278 + C8277) * C50607 +
                     (C8276 + C8275 + C8274) * C696) *
                        C50795 * C50634 +
                    ((C8048 * C707 + C8043 * C712 + C8047 * C593 +
                      C8042 * C602 + C8046 * C293 + C8041 * C304) *
                         C50607 +
                     (C8048 * C700 + C8043 * C708 + C8047 * C587 +
                      C8042 * C592 + C8046 * C287 + C8041 * C294) *
                         C696) *
                        C50795 * C50891) *
                       C50945 -
                   (((C8048 * C9203 + C8043 * C9207 + C8047 * C3486 +
                      C8042 * C3491 + C8046 * C1088 + C8041 * C1094) *
                         C50607 +
                     (C8048 * C9201 + C8043 * C9204 + C8047 * C3482 +
                      C8042 * C3487 + C8046 * C1082 + C8041 * C1089) *
                         C696) *
                        C50795 * C50634 +
                    ((C8048 * C9205 + C8043 * C9208 + C8047 * C3488 +
                      C8042 * C3492 + C8046 * C1090 + C8041 * C1095) *
                         C50607 +
                     (C8048 * C9202 + C8043 * C9206 + C8047 * C3483 +
                      C8042 * C3489 + C8046 * C1083 + C8041 * C1091) *
                         C696) *
                        C50795 * C50891) *
                       C1875) *
                      C50684)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50765 * C129) * C696 +
                     (C117 * C130 + C50765 * C143) * C50607) *
                        C50795 * C111 +
                    (C171 * C696 + C172 * C50607) * C50795 * C112 +
                    (C173 * C696 + C174 * C50607) * C50795 * C113 +
                    (C175 * C696 + C176 * C50607) * C50795 * C114) *
                       C50945 -
                   ((C480 * C50607 + C479 * C696) * C50795 * C114 +
                    (C478 * C50607 + C477 * C696) * C50795 * C113 +
                    (C476 * C50607 + C475 * C696) * C50795 * C112 +
                    ((C117 * C441 + C50765 * C452) * C50607 +
                     (C117 * C435 + C50765 * C442) * C696) *
                        C50795 * C111) *
                       C50935 +
                   (((C117 * C944 + C50765 * C949) * C696 +
                     (C117 * C950 + C50765 * C959) * C50607) *
                        C50795 * C111 +
                    (C977 * C696 + C978 * C50607) * C50795 * C112 +
                    (C979 * C696 + C980 * C50607) * C50795 * C113 +
                    (C981 * C696 + C982 * C50607) * C50795 * C114) *
                       C1875) *
                      C1283 +
                  ((((C117 * C811 + C50765 * C819) * C696 +
                     (C117 * C820 + C50765 * C835) * C50607) *
                        C50795 * C111 +
                    (C1540 * C696 + C1541 * C50607) * C50795 * C112 +
                    (C1542 * C696 + C1543 * C50607) * C50795 * C113 +
                    (C1544 * C696 + C1545 * C50607) * C50795 * C114) *
                       C50935 -
                   ((C332 * C50607 + C331 * C696) * C50795 * C114 +
                    (C330 * C50607 + C329 * C696) * C50795 * C113 +
                    (C328 * C50607 + C327 * C696) * C50795 * C112 +
                    ((C117 * C293 + C50765 * C304) * C50607 +
                     (C117 * C287 + C50765 * C294) * C696) *
                        C50795 * C111) *
                       C50945 -
                   (((C117 * C1084 + C50765 * C1092) * C50607 +
                     (C117 * C1080 + C50765 * C1085) * C696) *
                        C50795 * C114 +
                    ((C117 * C1086 + C50765 * C1093) * C50607 +
                     (C117 * C1081 + C50765 * C1087) * C696) *
                        C50795 * C113 +
                    ((C117 * C1088 + C50765 * C1094) * C50607 +
                     (C117 * C1082 + C50765 * C1089) * C696) *
                        C50795 * C112 +
                    ((C117 * C1090 + C50765 * C1095) * C50607 +
                     (C117 * C1083 + C50765 * C1091) * C696) *
                        C50795 * C111) *
                       C1875) *
                      C50684)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C122 + C50765 * C129) * C696 +
                      (C117 * C130 + C50765 * C143) * C50607) *
                         C15422 +
                     (C5904 + C5905) * C15423 + C16452 * C15424) *
                        C50891 +
                    ((C171 * C696 + C172 * C50607) * C15422 +
                     (C5906 + C5907) * C15423 + C16453 * C15424) *
                        C50634) *
                       C50945 -
                   ((C16578 * C15424 + (C6270 + C6271) * C15423 +
                     (C5907 + C5906) * C15422) *
                        C50634 +
                    (C16579 * C15424 + (C6272 + C6273) * C15423 +
                     (C5905 + C5904) * C15422) *
                        C50891) *
                       C50935 +
                   ((C16452 * C15422 + (C6418 + C6419) * C15423 +
                     (C16588 + C16589) * C15424) *
                        C50891 +
                    (C16453 * C15422 + (C6412 + C6413) * C15423 +
                     (C16584 + C16585) * C15424) *
                        C50634) *
                       C1875) *
                      C1283 +
                  ((((C5930 + C5931) * C15422 + (C6292 + C6293) * C15423 +
                     (C16468 + C16469) * C15424) *
                        C50891 +
                    ((C5914 + C5915) * C15422 + (C6294 + C6295) * C15423 +
                     (C16470 + C16471) * C15424) *
                        C50634) *
                       C50935 -
                   ((C16462 * C15424 + (C5915 + C5914) * C15423 +
                     (C328 * C50607 + C327 * C696) * C15422) *
                        C50634 +
                    (C16463 * C15424 + (C5931 + C5930) * C15423 +
                     ((C117 * C293 + C50765 * C304) * C50607 +
                      (C117 * C287 + C50765 * C294) * C696) *
                         C15422) *
                        C50891) *
                       C50945 -
                   ((((C117 * C16448 + C50765 * C16450) * C50607 +
                      (C117 * C16447 + C50765 * C16449) * C696) *
                         C15424 +
                     (C16471 + C16470) * C15423 + C16462 * C15422) *
                        C50634 +
                    (((C117 * C13843 + C50765 * C13847) * C50607 +
                      (C117 * C13841 + C50765 * C13845) * C696) *
                         C15424 +
                     (C16469 + C16468) * C15423 + C16463 * C15422) *
                        C50891) *
                       C1875) *
                      C50684)) /
                    (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C50765 * C129) * C118 +
               (C117 * C130 + C50765 * C143) * C106 - C171 * C119 -
               C172 * C107 + C173 * C120 + C174 * C108 - C175 * C121 -
               C176 * C109) *
                  C50795 * C111 +
              (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
               C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
                  C50795 * C112 +
              (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
               C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
                  C50795 * C113 +
              (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 +
               C179 * C120 + C180 * C108 -
               (C117 * C128 + C50765 * C141) * C121 -
               (C117 * C142 + C50765 * C149) * C109) *
                  C50795 * C114) *
             C50696 * C50670 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50765 * C129) * C49720 +
                (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
                C172 * C50612) *
                   C50795 * C111 +
               (C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                   C50795 * C112 +
               (C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
                   C50795 * C113 +
               (C175 * C49720 + C176 * C50884 - C177 * C49713 - C178 * C50612) *
                   C50795 * C114) *
                  C50696 * C582 +
              ((C327 * C49713 -
                ((C117 * C293 + C50765 * C304) * C50884 +
                 (C117 * C287 + C50765 * C294) * C49720) +
                C328 * C50612) *
                   C50795 * C111 +
               (C329 * C49713 - (C328 * C50884 + C327 * C49720) +
                C330 * C50612) *
                   C50795 * C112 +
               (C331 * C49713 - (C330 * C50884 + C329 * C49720) +
                C332 * C50612) *
                   C50795 * C113 +
               (C333 * C49713 - (C332 * C50884 + C331 * C49720) +
                C334 * C50612) *
                   C50795 * C114) *
                  C50696 * C583 +
              (((C117 * C587 + C50765 * C592) * C49720 +
                (C117 * C593 + C50765 * C602) * C50884 - C620 * C49713 -
                C621 * C50612) *
                   C50795 * C111 +
               (C620 * C49720 + C621 * C50884 - C622 * C49713 - C623 * C50612) *
                   C50795 * C112 +
               (C622 * C49720 + C623 * C50884 - C624 * C49713 - C625 * C50612) *
                   C50795 * C113 +
               (C624 * C49720 + C625 * C50884 -
                (C117 * C591 + C50765 * C600) * C49713 -
                (C117 * C601 + C50765 * C606) * C50612) *
                   C50795 * C114) *
                  C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C49720 +
            (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
            C172 * C50612) *
               C50795 * C111 +
           (C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
               C50795 * C112 +
           (C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
               C50795 * C113 +
           (C175 * C49720 + C176 * C50884 - C177 * C49713 - C178 * C50612) *
               C50795 * C114) *
              C941 +
          ((C475 * C49713 -
            ((C117 * C441 + C50765 * C452) * C50884 +
             (C117 * C435 + C50765 * C442) * C49720) +
            C476 * C50612) *
               C50795 * C111 +
           (C477 * C49713 - (C476 * C50884 + C475 * C49720) + C478 * C50612) *
               C50795 * C112 +
           (C479 * C49713 - (C478 * C50884 + C477 * C49720) + C480 * C50612) *
               C50795 * C113 +
           (C481 * C49713 - (C480 * C50884 + C479 * C49720) + C482 * C50612) *
               C50795 * C114) *
              C942 +
          (((C117 * C944 + C50765 * C949) * C49720 +
            (C117 * C950 + C50765 * C959) * C50884 - C977 * C49713 -
            C978 * C50612) *
               C50795 * C111 +
           (C977 * C49720 + C978 * C50884 - C979 * C49713 - C980 * C50612) *
               C50795 * C112 +
           (C979 * C49720 + C980 * C50884 - C981 * C49713 - C982 * C50612) *
               C50795 * C113 +
           (C981 * C49720 + C982 * C50884 -
            (C117 * C948 + C50765 * C957) * C49713 -
            (C117 * C958 + C50765 * C963) * C50612) *
               C50795 * C114) *
              C943) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
            C8048 * C587 + C8043 * C592) *
               C118 +
           (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
            C8048 * C593 + C8043 * C602) *
               C106 -
           (C8086 + C8087 + C8088) * C119 - (C8089 + C8090 + C8091) * C107 +
           (C8092 + C8093 + C8094) * C120 + (C8095 + C8096 + C8097) * C108 -
           (C8098 + C8099 + C8100) * C121 - (C8101 + C8102 + C8103) * C109) *
              C50795 * C50891 +
          ((C8088 + C8087 + C8086) * C118 + (C8091 + C8090 + C8089) * C106 -
           (C8094 + C8093 + C8092) * C119 - (C8097 + C8096 + C8095) * C107 +
           (C8100 + C8099 + C8098) * C120 + (C8103 + C8102 + C8101) * C108 -
           (C8048 * C591 + C8043 * C600 + C8047 * C290 + C8042 * C300 +
            C8046 * C126 + C8041 * C137) *
               C121 -
           (C8048 * C601 + C8043 * C606 + C8047 * C301 + C8042 * C308 +
            C8046 * C138 + C8041 * C147) *
               C109) *
              C50795 * C50634) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C49720 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50884 -
            (C8086 + C8087 + C8088) * C49713 -
            (C8089 + C8090 + C8091) * C50612) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C49720 +
            (C8091 + C8090 + C8089) * C50884 -
            (C8094 + C8093 + C8092) * C49713 -
            (C8097 + C8096 + C8095) * C50612) *
               C50795 * C50634) *
              C50696 * C582 +
          (((C8274 + C8275 + C8276) * C49713 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50884 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C49720) +
            (C8277 + C8278 + C8279) * C50612) *
               C50795 * C50891 +
           ((C8282 + C8281 + C8280) * C49713 -
            ((C8279 + C8278 + C8277) * C50884 +
             (C8276 + C8275 + C8274) * C49720) +
            (C8285 + C8284 + C8283) * C50612) *
               C50795 * C50634) *
              C50696 * C583 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C49720 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C50884 -
            (C8626 + C8627 + C8628) * C49713 -
            (C8629 + C8630 + C8631) * C50612) *
               C50795 * C50891 +
           ((C8628 + C8627 + C8626) * C49720 +
            (C8631 + C8630 + C8629) * C50884 -
            (C8048 * C2995 + C8043 * C2999 + C8047 * C698 + C8042 * C704 +
             C8046 * C589 + C8041 * C596) *
                C49713 -
            (C8048 * C2998 + C8043 * C3004 + C8047 * C703 + C8042 * C710 +
             C8046 * C597 + C8041 * C604) *
                C50612) *
               C50795 * C50634) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C49720 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50884 -
            (C8086 + C8087 + C8088) * C49713 -
            (C8089 + C8090 + C8091) * C50612) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C49720 +
            (C8091 + C8090 + C8089) * C50884 -
            (C8094 + C8093 + C8092) * C49713 -
            (C8097 + C8096 + C8095) * C50612) *
               C50795 * C50634) *
              C941 +
          (((C8456 + C8457 + C8458) * C49713 -
            ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
              C8046 * C441 + C8041 * C452) *
                 C50884 +
             (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
              C8046 * C435 + C8041 * C442) *
                 C49720) +
            (C8459 + C8460 + C8461) * C50612) *
               C50795 * C50891 +
           ((C8464 + C8463 + C8462) * C49713 -
            ((C8461 + C8460 + C8459) * C50884 +
             (C8458 + C8457 + C8456) * C49720) +
            (C8467 + C8466 + C8465) * C50612) *
               C50795 * C50634) *
              C942 +
          (((C8046 * C944 + C8041 * C949 + C8047 * C1083 + C8042 * C1091 +
             C8048 * C3483 + C8043 * C3489) *
                C49720 +
            (C8046 * C950 + C8041 * C959 + C8047 * C1090 + C8042 * C1095 +
             C8048 * C3488 + C8043 * C3492) *
                C50884 -
            (C9050 + C9051 + C9052) * C49713 -
            (C9053 + C9054 + C9055) * C50612) *
               C50795 * C50891 +
           ((C9052 + C9051 + C9050) * C49720 +
            (C9055 + C9054 + C9053) * C50884 -
            (C8048 * C3481 + C8043 * C3485 + C8047 * C1081 + C8042 * C1087 +
             C8046 * C946 + C8041 * C953) *
                C49713 -
            (C8048 * C3484 + C8043 * C3490 + C8047 * C1086 + C8042 * C1093 +
             C8046 * C954 + C8041 * C961) *
                C50612) *
               C50795 * C50634) *
              C943) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C118 +
            (C117 * C130 + C50765 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C15422 +
           (C5498 * C118 + C5499 * C106 - C475 * C119 - C476 * C107 +
            C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
               C15423 +
           (C6115 * C118 + C6114 * C106 - C977 * C119 - C978 * C107 +
            C979 * C120 + C980 * C108 - C981 * C121 - C982 * C109) *
               C15424) *
              C50891 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C15422 +
           (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
            C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
               C15423 +
           (C977 * C118 + C978 * C106 - C979 * C119 - C980 * C107 +
            C981 * C120 + C982 * C108 - (C117 * C948 + C50765 * C957) * C121 -
            (C117 * C958 + C50765 * C963) * C109) *
               C15424) *
              C50634) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C49720 +
             (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
             C172 * C50612) *
                C15422 +
            (C6080 + C6081 - C6082 - C6083) * C15423 +
            (C6121 + C6120 - C6092 - C6097) * C15424) *
               C50891 +
           ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                C15422 +
            (C6084 + C6085 - C6086 - C6087) * C15423 +
            (C6100 + C6099 - C6098 - C6101) * C15424) *
               C50634) *
              C50696 * C582 +
          (((C327 * C49713 -
             ((C117 * C293 + C50765 * C304) * C50884 +
              (C117 * C287 + C50765 * C294) * C49720) +
             C328 * C50612) *
                C15422 +
            (C7640 - (C7641 + C7642) + C7643) * C15423 +
            (C6288 * C49713 - (C6287 * C50884 + C6286 * C49720) +
             C6289 * C50612) *
                C15424) *
               C50891 +
           ((C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
                C15422 +
            (C7644 - (C7645 + C7646) + C7647) * C15423 +
            (C6290 * C49713 - (C6289 * C50884 + C6288 * C49720) +
             C6291 * C50612) *
                C15424) *
               C50634) *
              C50696 * C583 +
          ((((C117 * C587 + C50765 * C592) * C49720 +
             (C117 * C593 + C50765 * C602) * C50884 - C620 * C49713 -
             C621 * C50612) *
                C15422 +
            (C5928 * C49720 + C5929 * C50884 - C5656 * C49713 -
             C5657 * C50612) *
                C15423 +
            ((C117 * C3483 + C50765 * C3489) * C49720 +
             (C117 * C3488 + C50765 * C3492) * C50884 - C15880 * C49713 -
             C15881 * C50612) *
                C15424) *
               C50891 +
           ((C620 * C49720 + C621 * C50884 - C622 * C49713 - C623 * C50612) *
                C15422 +
            (C5656 * C49720 + C5657 * C50884 - C5658 * C49713 -
             C5659 * C50612) *
                C15423 +
            (C15880 * C49720 + C15881 * C50884 -
             (C117 * C3481 + C50765 * C3485) * C49713 -
             (C117 * C3484 + C50765 * C3490) * C50612) *
                C15424) *
               C50634) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C49720 +
             (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
             C172 * C50612) *
                C15422 +
            (C6080 + C6081 - C6082 - C6083) * C15423 + C16300 * C15424) *
               C50891 +
           ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                C15422 +
            (C6084 + C6085 - C6086 - C6087) * C15423 + C16301 * C15424) *
               C50634) *
              C941 +
          (((C6082 - (C6081 + C6080) + C6083) * C15422 +
            (C6092 - (C6120 + C6121) + C6097) * C15423 +
            (C16284 - (C16285 + C16286) + C16287) * C15424) *
               C50891 +
           ((C6086 - (C6085 + C6084) + C6087) * C15422 +
            (C6098 - (C6099 + C6100) + C6101) * C15423 +
            (C16288 - (C16289 + C16290) + C16291) * C15424) *
               C50634) *
              C942 +
          ((C16300 * C15422 + (C16286 + C16285 - C16284 - C16287) * C15423 +
            ((C117 * C6397 + C50765 * C6403) * C49720 +
             (C117 * C6402 + C50765 * C6406) * C50884 - C16298 * C49713 -
             C16299 * C50612) *
                C15424) *
               C50891 +
           (C16301 * C15422 + (C16290 + C16289 - C16288 - C16291) * C15423 +
            (C16298 * C49720 + C16299 * C50884 -
             (C117 * C6395 + C50765 * C6399) * C49713 -
             (C117 * C6398 + C50765 * C6404) * C50612) *
                C15424) *
               C50634) *
              C943) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50765 * C129) * C283 +
                (C117 * C130 + C50765 * C143) * C278 - C171 * C284 -
                C172 * C279 + C173 * C285 + C174 * C280) *
                   C50795 * C111 +
               (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
                C175 * C285 + C176 * C280) *
                   C50795 * C112 +
               (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
                C177 * C285 + C178 * C280) *
                   C50795 * C113 +
               (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
                C179 * C285 + C180 * C280) *
                   C50795 * C114) *
                  C50696 * C50899 +
              ((C327 * C284 -
                ((C117 * C293 + C50765 * C304) * C278 +
                 (C117 * C287 + C50765 * C294) * C283) +
                C328 * C279 - C329 * C285 - C330 * C280) *
                   C50795 * C111 +
               (C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
                C331 * C285 - C332 * C280) *
                   C50795 * C112 +
               (C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
                C333 * C285 - C334 * C280) *
                   C50795 * C113 +
               (C333 * C284 - (C332 * C278 + C331 * C283) + C334 * C279 -
                (C117 * C291 + C50765 * C302) * C285 -
                (C117 * C303 + C50765 * C309) * C280) *
                   C50795 * C114) *
                  C50696 * C50684) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50765 * C129) * C696 +
                (C117 * C130 + C50765 * C143) * C50607) *
                   C50795 * C111 +
               (C171 * C696 + C172 * C50607) * C50795 * C112 +
               (C173 * C696 + C174 * C50607) * C50795 * C113 +
               (C175 * C696 + C176 * C50607) * C50795 * C114) *
                  C50696 * C692 -
              ((C332 * C50607 + C331 * C696) * C50795 * C114 +
               (C330 * C50607 + C329 * C696) * C50795 * C113 +
               (C328 * C50607 + C327 * C696) * C50795 * C112 +
               ((C117 * C293 + C50765 * C304) * C50607 +
                (C117 * C287 + C50765 * C294) * C696) *
                   C50795 * C111) *
                  C50696 * C693 +
              (((C117 * C587 + C50765 * C592) * C696 +
                (C117 * C593 + C50765 * C602) * C50607) *
                   C50795 * C111 +
               (C620 * C696 + C621 * C50607) * C50795 * C112 +
               (C622 * C696 + C623 * C50607) * C50795 * C113 +
               (C624 * C696 + C625 * C50607) * C50795 * C114) *
                  C50696 * C694 -
              (((C117 * C701 + C50765 * C709) * C50607 +
                (C117 * C697 + C50765 * C702) * C696) *
                   C50795 * C114 +
               ((C117 * C703 + C50765 * C710) * C50607 +
                (C117 * C698 + C50765 * C704) * C696) *
                   C50795 * C113 +
               ((C117 * C705 + C50765 * C711) * C50607 +
                (C117 * C699 + C50765 * C706) * C696) *
                   C50795 * C112 +
               ((C117 * C707 + C50765 * C712) * C50607 +
                (C117 * C700 + C50765 * C708) * C696) *
                   C50795 * C111) *
                  C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C117 * C122 + C50765 * C129) * C696 +
                                 (C117 * C130 + C50765 * C143) * C50607) *
                                    C50795 * C111 +
                                (C171 * C696 + C172 * C50607) * C50795 * C112 +
                                (C173 * C696 + C174 * C50607) * C50795 * C113 +
                                (C175 * C696 + C176 * C50607) * C50795 * C114) *
                                   C941 -
                               ((C480 * C50607 + C479 * C696) * C50795 * C114 +
                                (C478 * C50607 + C477 * C696) * C50795 * C113 +
                                (C476 * C50607 + C475 * C696) * C50795 * C112 +
                                ((C117 * C441 + C50765 * C452) * C50607 +
                                 (C117 * C435 + C50765 * C442) * C696) *
                                    C50795 * C111) *
                                   C942 +
                               (((C117 * C944 + C50765 * C949) * C696 +
                                 (C117 * C950 + C50765 * C959) * C50607) *
                                    C50795 * C111 +
                                (C977 * C696 + C978 * C50607) * C50795 * C112 +
                                (C979 * C696 + C980 * C50607) * C50795 * C113 +
                                (C981 * C696 + C982 * C50607) * C50795 * C114) *
                                   C943) *
                                  C50899 +
                              ((((C117 * C811 + C50765 * C819) * C696 +
                                 (C117 * C820 + C50765 * C835) * C50607) *
                                    C50795 * C111 +
                                ((C117 * C812 + C50765 * C821) * C696 +
                                 (C117 * C822 + C50765 * C836) * C50607) *
                                    C50795 * C112 +
                                ((C117 * C813 + C50765 * C823) * C696 +
                                 (C117 * C824 + C50765 * C837) * C50607) *
                                    C50795 * C113 +
                                ((C117 * C814 + C50765 * C825) * C696 +
                                 (C117 * C826 + C50765 * C838) * C50607) *
                                    C50795 * C114) *
                                   C942 -
                               ((C332 * C50607 + C331 * C696) * C50795 * C114 +
                                (C330 * C50607 + C329 * C696) * C50795 * C113 +
                                (C328 * C50607 + C327 * C696) * C50795 * C112 +
                                ((C117 * C293 + C50765 * C304) * C50607 +
                                 (C117 * C287 + C50765 * C294) * C696) *
                                    C50795 * C111) *
                                   C941 -
                               (((C117 * C1084 + C50765 * C1092) * C50607 +
                                 (C117 * C1080 + C50765 * C1085) * C696) *
                                    C50795 * C114 +
                                ((C117 * C1086 + C50765 * C1093) * C50607 +
                                 (C117 * C1081 + C50765 * C1087) * C696) *
                                    C50795 * C113 +
                                ((C117 * C1088 + C50765 * C1094) * C50607 +
                                 (C117 * C1082 + C50765 * C1089) * C696) *
                                    C50795 * C112 +
                                ((C117 * C1090 + C50765 * C1095) * C50607 +
                                 (C117 * C1083 + C50765 * C1091) * C696) *
                                    C50795 * C111) *
                                   C943) *
                                  C50684)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C283 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C278 -
            (C8086 + C8087 + C8088) * C284 - (C8089 + C8090 + C8091) * C279 +
            (C8092 + C8093 + C8094) * C285 + (C8095 + C8096 + C8097) * C280) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C283 + (C8091 + C8090 + C8089) * C278 -
            (C8094 + C8093 + C8092) * C284 - (C8097 + C8096 + C8095) * C279 +
            (C8100 + C8099 + C8098) * C285 + (C8103 + C8102 + C8101) * C280) *
               C50795 * C50634) *
              C50696 * C50899 +
          (((C8274 + C8275 + C8276) * C284 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C278 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C283) +
            (C8277 + C8278 + C8279) * C279 - (C8280 + C8281 + C8282) * C285 -
            (C8283 + C8284 + C8285) * C280) *
               C50795 * C50891 +
           ((C8282 + C8281 + C8280) * C284 -
            ((C8279 + C8278 + C8277) * C278 + (C8276 + C8275 + C8274) * C283) +
            (C8285 + C8284 + C8283) * C279 -
            (C8048 * C697 + C8043 * C702 + C8047 * C590 + C8042 * C598 +
             C8046 * C289 + C8041 * C298) *
                C285 -
            (C8048 * C701 + C8043 * C709 + C8047 * C599 + C8042 * C605 +
             C8046 * C299 + C8041 * C307) *
                C280) *
               C50795 * C50634) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C696 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50607) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C696 + (C8091 + C8090 + C8089) * C50607) *
               C50795 * C50634) *
              C50696 * C692 -
          (((C8279 + C8278 + C8277) * C50607 + (C8276 + C8275 + C8274) * C696) *
               C50795 * C50634 +
           ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
             C8046 * C293 + C8041 * C304) *
                C50607 +
            (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
             C8046 * C287 + C8041 * C294) *
                C696) *
               C50795 * C50891) *
              C50696 * C693 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C696 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C50607) *
               C50795 * C50891 +
           ((C8628 + C8627 + C8626) * C696 + (C8631 + C8630 + C8629) * C50607) *
               C50795 * C50634) *
              C50696 * C694 -
          (((C8048 * C8731 + C8043 * C8735 + C8047 * C3000 + C8042 * C3005 +
             C8046 * C705 + C8041 * C711) *
                C50607 +
            (C8048 * C8729 + C8043 * C8732 + C8047 * C2996 + C8042 * C3001 +
             C8046 * C699 + C8041 * C706) *
                C696) *
               C50795 * C50634 +
           ((C8048 * C8733 + C8043 * C8736 + C8047 * C3002 + C8042 * C3006 +
             C8046 * C707 + C8041 * C712) *
                C50607 +
            (C8048 * C8730 + C8043 * C8734 + C8047 * C2997 + C8042 * C3003 +
             C8046 * C700 + C8041 * C708) *
                C696) *
               C50795 * C50891) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C696 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50607) *
                C50795 * C50891 +
            ((C8088 + C8087 + C8086) * C696 +
             (C8091 + C8090 + C8089) * C50607) *
                C50795 * C50634) *
               C941 -
           (((C8461 + C8460 + C8459) * C50607 +
             (C8458 + C8457 + C8456) * C696) *
                C50795 * C50634 +
            ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
              C8046 * C441 + C8041 * C452) *
                 C50607 +
             (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
              C8046 * C435 + C8041 * C442) *
                 C696) *
                C50795 * C50891) *
               C942 +
           (((C8046 * C944 + C8041 * C949 + C8047 * C1083 + C8042 * C1091 +
              C8048 * C3483 + C8043 * C3489) *
                 C696 +
             (C8046 * C950 + C8041 * C959 + C8047 * C1090 + C8042 * C1095 +
              C8048 * C3488 + C8043 * C3492) *
                 C50607) *
                C50795 * C50891 +
            ((C9052 + C9051 + C9050) * C696 +
             (C9055 + C9054 + C9053) * C50607) *
                C50795 * C50634) *
               C943) *
              C50899 +
          ((((C8046 * C811 + C8041 * C819 + C8047 * C818 + C8042 * C834 +
              C8048 * C3155 + C8043 * C3161) *
                 C696 +
             (C8046 * C820 + C8041 * C835 + C8047 * C833 + C8042 * C842 +
              C8048 * C3160 + C8043 * C3164) *
                 C50607) *
                C50795 * C50891 +
            ((C8046 * C812 + C8041 * C821 + C8047 * C817 + C8042 * C832 +
              C8048 * C3154 + C8043 * C3159) *
                 C696 +
             (C8046 * C822 + C8041 * C836 + C8047 * C831 + C8042 * C841 +
              C8048 * C3158 + C8043 * C3163) *
                 C50607) *
                C50795 * C50634) *
               C942 -
           (((C8279 + C8278 + C8277) * C50607 +
             (C8276 + C8275 + C8274) * C696) *
                C50795 * C50634 +
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50607 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C696) *
                C50795 * C50891) *
               C941 -
           (((C8048 * C9203 + C8043 * C9207 + C8047 * C3486 + C8042 * C3491 +
              C8046 * C1088 + C8041 * C1094) *
                 C50607 +
             (C8048 * C9201 + C8043 * C9204 + C8047 * C3482 + C8042 * C3487 +
              C8046 * C1082 + C8041 * C1089) *
                 C696) *
                C50795 * C50634 +
            ((C8048 * C9205 + C8043 * C9208 + C8047 * C3488 + C8042 * C3492 +
              C8046 * C1090 + C8041 * C1095) *
                 C50607 +
             (C8048 * C9202 + C8043 * C9206 + C8047 * C3483 + C8042 * C3489 +
              C8046 * C1083 + C8041 * C1091) *
                 C696) *
                C50795 * C50891) *
               C943) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C283 +
             (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C15422 +
            (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C15423 +
            (C6115 * C283 + C6114 * C278 - C977 * C284 - C978 * C279 +
             C979 * C285 + C980 * C280) *
                C15424) *
               C50891 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C15422 +
            (C5486 + C5487 - C5488 - C5489 + C5490 + C5491) * C15423 +
            (C977 * C283 + C978 * C278 - C979 * C284 - C980 * C279 +
             C981 * C285 + C982 * C280) *
                C15424) *
               C50634) *
              C50696 * C50899 +
          (((C327 * C284 -
             ((C117 * C293 + C50765 * C304) * C278 +
              (C117 * C287 + C50765 * C294) * C283) +
             C328 * C279 - C329 * C285 - C330 * C280) *
                C15422 +
            (C1540 * C284 - (C5927 * C278 + C5926 * C283) + C1541 * C279 -
             C1542 * C285 - C1543 * C280) *
                C15423 +
            (C6288 * C284 - (C6287 * C278 + C6286 * C283) + C6289 * C279 -
             C6290 * C285 - C6291 * C280) *
                C15424) *
               C50891 +
           ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
             C331 * C285 - C332 * C280) *
                C15422 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C15423 +
            (C6290 * C284 - (C6289 * C278 + C6288 * C283) + C6291 * C279 -
             (C117 * C1080 + C50765 * C1085) * C285 -
             (C117 * C1084 + C50765 * C1092) * C280) *
                C15424) *
               C50634) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C15422 +
            (C5904 + C5905) * C15423 + (C6273 + C6272) * C15424) *
               C50891 +
           ((C171 * C696 + C172 * C50607) * C15422 + (C5906 + C5907) * C15423 +
            (C6271 + C6270) * C15424) *
               C50634) *
              C50696 * C692 -
          (((C6295 + C6294) * C15424 + (C5915 + C5914) * C15423 +
            (C328 * C50607 + C327 * C696) * C15422) *
               C50634 +
           ((C6293 + C6292) * C15424 + (C5931 + C5930) * C15423 +
            ((C117 * C293 + C50765 * C304) * C50607 +
             (C117 * C287 + C50765 * C294) * C696) *
                C15422) *
               C50891) *
              C50696 * C693 +
          ((((C117 * C587 + C50765 * C592) * C696 +
             (C117 * C593 + C50765 * C602) * C50607) *
                C15422 +
            (C5932 + C5933) * C15423 +
            ((C117 * C3483 + C50765 * C3489) * C696 +
             (C117 * C3488 + C50765 * C3492) * C50607) *
                C15424) *
               C50891 +
           ((C620 * C696 + C621 * C50607) * C15422 + (C5922 + C5923) * C15423 +
            (C15880 * C696 + C15881 * C50607) * C15424) *
               C50634) *
              C50696 * C694 -
          ((((C117 * C9203 + C50765 * C9207) * C50607 +
             (C117 * C9201 + C50765 * C9204) * C696) *
                C15424 +
            ((C117 * C3158 + C50765 * C3163) * C50607 +
             (C117 * C3154 + C50765 * C3159) * C696) *
                C15423 +
            ((C117 * C705 + C50765 * C711) * C50607 +
             (C117 * C699 + C50765 * C706) * C696) *
                C15422) *
               C50634 +
           (((C117 * C9205 + C50765 * C9208) * C50607 +
             (C117 * C9202 + C50765 * C9206) * C696) *
                C15424 +
            ((C117 * C3160 + C50765 * C3164) * C50607 +
             (C117 * C3155 + C50765 * C3161) * C696) *
                C15423 +
            ((C117 * C707 + C50765 * C712) * C50607 +
             (C117 * C700 + C50765 * C708) * C696) *
                C15422) *
               C50891) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C15422 +
             (C5904 + C5905) * C15423 + C16452 * C15424) *
                C50891 +
            ((C171 * C696 + C172 * C50607) * C15422 + (C5906 + C5907) * C15423 +
             C16453 * C15424) *
                C50634) *
               C941 -
           (((C6413 + C6412) * C15424 + (C6270 + C6271) * C15423 +
             (C5907 + C5906) * C15422) *
                C50634 +
            ((C6419 + C6418) * C15424 + (C6272 + C6273) * C15423 +
             (C5905 + C5904) * C15422) *
                C50891) *
               C942 +
           ((C16452 * C15422 + (C6418 + C6419) * C15423 +
             ((C117 * C6397 + C50765 * C6403) * C696 +
              (C117 * C6402 + C50765 * C6406) * C50607) *
                 C15424) *
                C50891 +
            (C16453 * C15422 + (C6412 + C6413) * C15423 +
             (C16298 * C696 + C16299 * C50607) * C15424) *
                C50634) *
               C943) *
              C50899 +
          ((((C5930 + C5931) * C15422 + (C6292 + C6293) * C15423 +
             (C16468 + C16469) * C15424) *
                C50891 +
            ((C5914 + C5915) * C15422 + (C6294 + C6295) * C15423 +
             (C16470 + C16471) * C15424) *
                C50634) *
               C942 -
           ((C16462 * C15424 + (C5915 + C5914) * C15423 +
             (C328 * C50607 + C327 * C696) * C15422) *
                C50634 +
            (C16463 * C15424 + (C5931 + C5930) * C15423 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C15422) *
                C50891) *
               C941 -
           ((((C117 * C16448 + C50765 * C16450) * C50607 +
              (C117 * C16447 + C50765 * C16449) * C696) *
                 C15424 +
             (C16471 + C16470) * C15423 + C16462 * C15422) *
                C50634 +
            (((C117 * C13843 + C50765 * C13847) * C50607 +
              (C117 * C13841 + C50765 * C13845) * C696) *
                 C15424 +
             (C16469 + C16468) * C15423 + C16463 * C15422) *
                C50891) *
               C943) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50765 * C129) * C283 +
                (C117 * C130 + C50765 * C143) * C278 - C171 * C284 -
                C172 * C279 + C173 * C285 + C174 * C280) *
                   C50795 * C111 +
               (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
                C175 * C285 + C176 * C280) *
                   C50795 * C112 +
               (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
                C177 * C285 + C178 * C280) *
                   C50795 * C113 +
               (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
                C179 * C285 + C180 * C280) *
                   C50795 * C114) *
                  C50900 +
              ((C475 * C284 -
                ((C117 * C441 + C50765 * C452) * C278 +
                 (C117 * C435 + C50765 * C442) * C283) +
                C476 * C279 - C477 * C285 - C478 * C280) *
                   C50795 * C111 +
               (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
                C479 * C285 - C480 * C280) *
                   C50795 * C112 +
               (C479 * C284 - (C478 * C278 + C477 * C283) + C480 * C279 -
                C481 * C285 - C482 * C280) *
                   C50795 * C113 +
               (C481 * C284 - (C480 * C278 + C479 * C283) + C482 * C279 -
                (C117 * C439 + C50765 * C450) * C285 -
                (C117 * C451 + C50765 * C457) * C280) *
                   C50795 * C114) *
                  C50708) *
             C50670 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50765 * C129) * C696 +
                 (C117 * C130 + C50765 * C143) * C50607) *
                    C50795 * C111 +
                (C171 * C696 + C172 * C50607) * C50795 * C112 +
                (C173 * C696 + C174 * C50607) * C50795 * C113 +
                (C175 * C696 + C176 * C50607) * C50795 * C114) *
                   C50900 -
               ((C480 * C50607 + C479 * C696) * C50795 * C114 +
                (C478 * C50607 + C477 * C696) * C50795 * C113 +
                (C476 * C50607 + C475 * C696) * C50795 * C112 +
                ((C117 * C441 + C50765 * C452) * C50607 +
                 (C117 * C435 + C50765 * C442) * C696) *
                    C50795 * C111) *
                   C50708) *
                  C582 +
              ((((C117 * C811 + C50765 * C819) * C696 +
                 (C117 * C820 + C50765 * C835) * C50607) *
                    C50795 * C111 +
                ((C117 * C812 + C50765 * C821) * C696 +
                 (C117 * C822 + C50765 * C836) * C50607) *
                    C50795 * C112 +
                ((C117 * C813 + C50765 * C823) * C696 +
                 (C117 * C824 + C50765 * C837) * C50607) *
                    C50795 * C113 +
                ((C117 * C814 + C50765 * C825) * C696 +
                 (C117 * C826 + C50765 * C838) * C50607) *
                    C50795 * C114) *
                   C50708 -
               ((C332 * C50607 + C331 * C696) * C50795 * C114 +
                (C330 * C50607 + C329 * C696) * C50795 * C113 +
                (C328 * C50607 + C327 * C696) * C50795 * C112 +
                ((C117 * C293 + C50765 * C304) * C50607 +
                 (C117 * C287 + C50765 * C294) * C696) *
                    C50795 * C111) *
                   C50900) *
                  C583 +
              ((((C117 * C587 + C50765 * C592) * C696 +
                 (C117 * C593 + C50765 * C602) * C50607) *
                    C50795 * C111 +
                (C620 * C696 + C621 * C50607) * C50795 * C112 +
                (C622 * C696 + C623 * C50607) * C50795 * C113 +
                (C624 * C696 + C625 * C50607) * C50795 * C114) *
                   C50900 -
               (((C117 * C827 + C50765 * C839) * C50607 +
                 (C117 * C815 + C50765 * C828) * C696) *
                    C50795 * C114 +
                ((C117 * C829 + C50765 * C840) * C50607 +
                 (C117 * C816 + C50765 * C830) * C696) *
                    C50795 * C113 +
                ((C117 * C831 + C50765 * C841) * C50607 +
                 (C117 * C817 + C50765 * C832) * C696) *
                    C50795 * C112 +
                ((C117 * C833 + C50765 * C842) * C50607 +
                 (C117 * C818 + C50765 * C834) * C696) *
                    C50795 * C111) *
                   C50708) *
                  C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C696 +
            (C117 * C130 + C50765 * C143) * C50607) *
               C50795 * C111 +
           (C171 * C696 + C172 * C50607) * C50795 * C112 +
           (C173 * C696 + C174 * C50607) * C50795 * C113 +
           (C175 * C696 + C176 * C50607) * C50795 * C114) *
              C1162 -
          ((C480 * C50607 + C479 * C696) * C50795 * C114 +
           (C478 * C50607 + C477 * C696) * C50795 * C113 +
           (C476 * C50607 + C475 * C696) * C50795 * C112 +
           ((C117 * C441 + C50765 * C452) * C50607 +
            (C117 * C435 + C50765 * C442) * C696) *
               C50795 * C111) *
              C1163 +
          (((C117 * C944 + C50765 * C949) * C696 +
            (C117 * C950 + C50765 * C959) * C50607) *
               C50795 * C111 +
           (C977 * C696 + C978 * C50607) * C50795 * C112 +
           (C979 * C696 + C980 * C50607) * C50795 * C113 +
           (C981 * C696 + C982 * C50607) * C50795 * C114) *
              C1164 -
          (((C117 * C1170 + C50765 * C1178) * C50607 +
            (C117 * C1166 + C50765 * C1171) * C696) *
               C50795 * C114 +
           ((C117 * C1172 + C50765 * C1179) * C50607 +
            (C117 * C1167 + C50765 * C1173) * C696) *
               C50795 * C113 +
           ((C117 * C1174 + C50765 * C1180) * C50607 +
            (C117 * C1168 + C50765 * C1175) * C696) *
               C50795 * C112 +
           ((C117 * C1176 + C50765 * C1181) * C50607 +
            (C117 * C1169 + C50765 * C1177) * C696) *
               C50795 * C111) *
              C1165) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C283 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C278 -
            (C8086 + C8087 + C8088) * C284 - (C8089 + C8090 + C8091) * C279 +
            (C8092 + C8093 + C8094) * C285 + (C8095 + C8096 + C8097) * C280) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C283 + (C8091 + C8090 + C8089) * C278 -
            (C8094 + C8093 + C8092) * C284 - (C8097 + C8096 + C8095) * C279 +
            (C8100 + C8099 + C8098) * C285 + (C8103 + C8102 + C8101) * C280) *
               C50795 * C50634) *
              C50900 +
          (((C8456 + C8457 + C8458) * C284 -
            ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
              C8046 * C441 + C8041 * C452) *
                 C278 +
             (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
              C8046 * C435 + C8041 * C442) *
                 C283) +
            (C8459 + C8460 + C8461) * C279 - (C8462 + C8463 + C8464) * C285 -
            (C8465 + C8466 + C8467) * C280) *
               C50795 * C50891 +
           ((C8464 + C8463 + C8462) * C284 -
            ((C8461 + C8460 + C8459) * C278 + (C8458 + C8457 + C8456) * C283) +
            (C8467 + C8466 + C8465) * C279 -
            (C8048 * C815 + C8043 * C828 + C8047 * C814 + C8042 * C825 +
             C8046 * C437 + C8041 * C446) *
                C285 -
            (C8048 * C827 + C8043 * C839 + C8047 * C826 + C8042 * C838 +
             C8046 * C447 + C8041 * C455) *
                C280) *
               C50795 * C50634) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C696 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50607) *
                C50795 * C50891 +
            ((C8088 + C8087 + C8086) * C696 +
             (C8091 + C8090 + C8089) * C50607) *
                C50795 * C50634) *
               C50900 -
           (((C8461 + C8460 + C8459) * C50607 +
             (C8458 + C8457 + C8456) * C696) *
                C50795 * C50634 +
            ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
              C8046 * C441 + C8041 * C452) *
                 C50607 +
             (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
              C8046 * C435 + C8041 * C442) *
                 C696) *
                C50795 * C50891) *
               C50708) *
              C582 +
          ((((C8046 * C811 + C8041 * C819 + C8047 * C818 + C8042 * C834 +
              C8048 * C3155 + C8043 * C3161) *
                 C696 +
             (C8046 * C820 + C8041 * C835 + C8047 * C833 + C8042 * C842 +
              C8048 * C3160 + C8043 * C3164) *
                 C50607) *
                C50795 * C50891 +
            ((C8046 * C812 + C8041 * C821 + C8047 * C817 + C8042 * C832 +
              C8048 * C3154 + C8043 * C3159) *
                 C696 +
             (C8046 * C822 + C8041 * C836 + C8047 * C831 + C8042 * C841 +
              C8048 * C3158 + C8043 * C3163) *
                 C50607) *
                C50795 * C50634) *
               C50708 -
           (((C8279 + C8278 + C8277) * C50607 +
             (C8276 + C8275 + C8274) * C696) *
                C50795 * C50634 +
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50607 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C696) *
                C50795 * C50891) *
               C50900) *
              C583 +
          ((((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
              C8048 * C2997 + C8043 * C3003) *
                 C696 +
             (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
              C8048 * C3002 + C8043 * C3006) *
                 C50607) *
                C50795 * C50891 +
            ((C8628 + C8627 + C8626) * C696 +
             (C8631 + C8630 + C8629) * C50607) *
                C50795 * C50634) *
               C50900 -
           (((C8048 * C8885 + C8043 * C8889 + C8047 * C3158 + C8042 * C3163 +
              C8046 * C831 + C8041 * C841) *
                 C50607 +
             (C8048 * C8883 + C8043 * C8886 + C8047 * C3154 + C8042 * C3159 +
              C8046 * C817 + C8041 * C832) *
                 C696) *
                C50795 * C50634 +
            ((C8048 * C8887 + C8043 * C8890 + C8047 * C3160 + C8042 * C3164 +
              C8046 * C833 + C8041 * C842) *
                 C50607 +
             (C8048 * C8884 + C8043 * C8888 + C8047 * C3155 + C8042 * C3161 +
              C8046 * C818 + C8041 * C834) *
                 C696) *
                C50795 * C50891) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C696 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50607) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C696 + (C8091 + C8090 + C8089) * C50607) *
               C50795 * C50634) *
              C1162 -
          (((C8461 + C8460 + C8459) * C50607 + (C8458 + C8457 + C8456) * C696) *
               C50795 * C50634 +
           ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
             C8046 * C441 + C8041 * C452) *
                C50607 +
            (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
             C8046 * C435 + C8041 * C442) *
                C696) *
               C50795 * C50891) *
              C1163 +
          (((C8046 * C944 + C8041 * C949 + C8047 * C1083 + C8042 * C1091 +
             C8048 * C3483 + C8043 * C3489) *
                C696 +
            (C8046 * C950 + C8041 * C959 + C8047 * C1090 + C8042 * C1095 +
             C8048 * C3488 + C8043 * C3492) *
                C50607) *
               C50795 * C50891 +
           ((C9052 + C9051 + C9050) * C696 + (C9055 + C9054 + C9053) * C50607) *
               C50795 * C50634) *
              C1164 -
          (((C8048 * C9309 + C8043 * C9313 + C8047 * C3596 + C8042 * C3601 +
             C8046 * C1174 + C8041 * C1180) *
                C50607 +
            (C8048 * C9307 + C8043 * C9310 + C8047 * C3592 + C8042 * C3597 +
             C8046 * C1168 + C8041 * C1175) *
                C696) *
               C50795 * C50634 +
           ((C8048 * C9311 + C8043 * C9314 + C8047 * C3598 + C8042 * C3602 +
             C8046 * C1176 + C8041 * C1181) *
                C50607 +
            (C8048 * C9308 + C8043 * C9312 + C8047 * C3593 + C8042 * C3599 +
             C8046 * C1169 + C8041 * C1177) *
                C696) *
               C50795 * C50891) *
              C1165) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C283 +
             (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C15422 +
            (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C15423 +
            (C15718 + C15719 - C15720 - C15721 + C15722 + C15723) * C15424) *
               C50891 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C15422 +
            (C5486 + C5487 - C5488 - C5489 + C5490 + C5491) * C15423 +
            (C15724 + C15725 - C15726 - C15727 + C15728 + C15729) * C15424) *
               C50634) *
              C50900 +
          (((C5482 - (C5501 + C5500) + C5483 - C5484 - C5485) * C15422 +
            (C15720 - (C15719 + C15718) + C15721 - C15722 - C15723) * C15423 +
            (C6116 * C284 - (C6417 * C278 + C6416 * C283) + C6117 * C279 -
             C6118 * C285 - C6119 * C280) *
                C15424) *
               C50891 +
           ((C5488 - (C5487 + C5486) + C5489 - C5490 - C5491) * C15422 +
            (C15726 - (C15725 + C15724) + C15727 - C15728 - C15729) * C15423 +
            (C6118 * C284 - (C6117 * C278 + C6116 * C283) + C6119 * C279 -
             (C117 * C1166 + C50765 * C1171) * C285 -
             (C117 * C1170 + C50765 * C1178) * C280) *
                C15424) *
               C50634) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C15422 +
             (C5904 + C5905) * C15423 + (C6273 + C6272) * C15424) *
                C50891 +
            ((C171 * C696 + C172 * C50607) * C15422 + (C5906 + C5907) * C15423 +
             (C6271 + C6270) * C15424) *
                C50634) *
               C50900 -
           (((C6413 + C6412) * C15424 + (C6270 + C6271) * C15423 +
             (C5907 + C5906) * C15422) *
                C50634 +
            ((C6419 + C6418) * C15424 + (C6272 + C6273) * C15423 +
             (C5905 + C5904) * C15422) *
                C50891) *
               C50708) *
              C582 +
          ((((C5930 + C5931) * C15422 + (C6292 + C6293) * C15423 +
             ((C117 * C3593 + C50765 * C3599) * C696 +
              (C117 * C3598 + C50765 * C3602) * C50607) *
                 C15424) *
                C50891 +
            ((C5914 + C5915) * C15422 + (C6294 + C6295) * C15423 +
             ((C117 * C3592 + C50765 * C3597) * C696 +
              (C117 * C3596 + C50765 * C3601) * C50607) *
                 C15424) *
                C50634) *
               C50708 -
           (((C6295 + C6294) * C15424 + (C5915 + C5914) * C15423 +
             (C328 * C50607 + C327 * C696) * C15422) *
                C50634 +
            ((C6293 + C6292) * C15424 + (C5931 + C5930) * C15423 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C15422) *
                C50891) *
               C50900) *
              C583 +
          (((((C117 * C587 + C50765 * C592) * C696 +
              (C117 * C593 + C50765 * C602) * C50607) *
                 C15422 +
             (C5932 + C5933) * C15423 + (C16134 + C16135) * C15424) *
                C50891 +
            ((C620 * C696 + C621 * C50607) * C15422 + (C5922 + C5923) * C15423 +
             (C16130 + C16131) * C15424) *
                C50634) *
               C50900 -
           ((((C117 * C9309 + C50765 * C9313) * C50607 +
              (C117 * C9307 + C50765 * C9310) * C696) *
                 C15424 +
             (C16131 + C16130) * C15423 + (C5923 + C5922) * C15422) *
                C50634 +
            (((C117 * C9311 + C50765 * C9314) * C50607 +
              (C117 * C9308 + C50765 * C9312) * C696) *
                 C15424 +
             (C16135 + C16134) * C15423 + (C5933 + C5932) * C15422) *
                C50891) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C15422 +
            (C5904 + C5905) * C15423 + C16452 * C15424) *
               C50891 +
           ((C171 * C696 + C172 * C50607) * C15422 + (C5906 + C5907) * C15423 +
            C16453 * C15424) *
               C50634) *
              C1162 -
          ((C16578 * C15424 + (C6270 + C6271) * C15423 +
            (C5907 + C5906) * C15422) *
               C50634 +
           (C16579 * C15424 + (C6272 + C6273) * C15423 +
            (C5905 + C5904) * C15422) *
               C50891) *
              C1163 +
          ((C16452 * C15422 + (C6418 + C6419) * C15423 +
            (C16588 + C16589) * C15424) *
               C50891 +
           (C16453 * C15422 + (C6412 + C6413) * C15423 +
            (C16584 + C16585) * C15424) *
               C50634) *
              C1164 -
          ((((C117 * C16571 + C50765 * C16575) * C50607 +
             (C117 * C16569 + C50765 * C16572) * C696) *
                C15424 +
            (C16585 + C16584) * C15423 + C16578 * C15422) *
               C50634 +
           (((C117 * C16573 + C50765 * C16576) * C50607 +
             (C117 * C16570 + C50765 * C16574) * C696) *
                C15424 +
            (C16589 + C16588) * C15423 + C16579 * C15422) *
               C50891) *
              C1165) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C1285 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50942 -
            (C8086 + C8087 + C8088) * C1286 - (C8089 + C8090 + C8091) * C50926 +
            (C8092 + C8093 + C8094) * C1287 + (C8095 + C8096 + C8097) * C1282) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C1285 + (C8091 + C8090 + C8089) * C50942 -
            (C8094 + C8093 + C8092) * C1286 - (C8097 + C8096 + C8095) * C50926 +
            (C8100 + C8099 + C8098) * C1287 + (C8103 + C8102 + C8101) * C1282) *
               C50795 * C50634) *
              C1643 +
          (((C8456 + C8457 + C8458) * C1286 -
            ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
              C8046 * C441 + C8041 * C452) *
                 C50942 +
             (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
              C8046 * C435 + C8041 * C442) *
                 C1285) +
            (C8459 + C8460 + C8461) * C50926 - (C8462 + C8463 + C8464) * C1287 -
            (C8465 + C8466 + C8467) * C1282) *
               C50795 * C50891 +
           ((C8464 + C8463 + C8462) * C1286 -
            ((C8461 + C8460 + C8459) * C50942 +
             (C8458 + C8457 + C8456) * C1285) +
            (C8467 + C8466 + C8465) * C50926 -
            (C8048 * C815 + C8043 * C828 + C8047 * C814 + C8042 * C825 +
             C8046 * C437 + C8041 * C446) *
                C1287 -
            (C8048 * C827 + C8043 * C839 + C8047 * C826 + C8042 * C838 +
             C8046 * C447 + C8041 * C455) *
                C1282) *
               C50795 * C50634) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C1285 +
            (C117 * C130 + C50765 * C143) * C50942 - C171 * C1286 -
            C172 * C50926 + C173 * C1287 + C174 * C1282) *
               C50795 * C111 +
           (C171 * C1285 + C172 * C50942 - C173 * C1286 - C174 * C50926 +
            C175 * C1287 + C176 * C1282) *
               C50795 * C112 +
           (C173 * C1285 + C174 * C50942 - C175 * C1286 - C176 * C50926 +
            C177 * C1287 + C178 * C1282) *
               C50795 * C113 +
           (C175 * C1285 + C176 * C50942 - C177 * C1286 - C178 * C50926 +
            C179 * C1287 + C180 * C1282) *
               C50795 * C114) *
              C1643 +
          ((C475 * C1286 -
            ((C117 * C441 + C50765 * C452) * C50942 +
             (C117 * C435 + C50765 * C442) * C1285) +
            C476 * C50926 - C477 * C1287 - C478 * C1282) *
               C50795 * C111 +
           (C477 * C1286 - (C476 * C50942 + C475 * C1285) + C478 * C50926 -
            C479 * C1287 - C480 * C1282) *
               C50795 * C112 +
           (C479 * C1286 - (C478 * C50942 + C477 * C1285) + C480 * C50926 -
            C481 * C1287 - C482 * C1282) *
               C50795 * C113 +
           (C481 * C1286 - (C480 * C50942 + C479 * C1285) + C482 * C50926 -
            (C117 * C439 + C50765 * C450) * C1287 -
            (C117 * C451 + C50765 * C457) * C1282) *
               C50795 * C114) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1285 +
             (C117 * C130 + C50765 * C143) * C50942 - C171 * C1286 -
             C172 * C50926 + C173 * C1287 + C174 * C1282) *
                C15422 +
            (C7076 + C7077 - C7078 - C7079 + C7080 + C7081) * C15423 +
            (C17230 + C17231 - C17232 - C17233 + C17234 + C17235) * C15424) *
               C50891 +
           ((C171 * C1285 + C172 * C50942 - C173 * C1286 - C174 * C50926 +
             C175 * C1287 + C176 * C1282) *
                C15422 +
            (C7082 + C7083 - C7084 - C7085 + C7086 + C7087) * C15423 +
            (C17236 + C17237 - C17238 - C17239 + C17240 + C17241) * C15424) *
               C50634) *
              C1643 +
          (((C7078 - (C7077 + C7076) + C7079 - C7080 - C7081) * C15422 +
            (C17232 - (C17231 + C17230) + C17233 - C17234 - C17235) * C15423 +
            (C6116 * C1286 - (C6417 * C50942 + C6416 * C1285) + C6117 * C50926 -
             C6118 * C1287 - C6119 * C1282) *
                C15424) *
               C50891 +
           ((C7084 - (C7083 + C7082) + C7085 - C7086 - C7087) * C15422 +
            (C17238 - (C17237 + C17236) + C17239 - C17240 - C17241) * C15423 +
            (C6118 * C1286 - (C6117 * C50942 + C6116 * C1285) + C6119 * C50926 -
             (C117 * C1166 + C50765 * C1171) * C1287 -
             (C117 * C1170 + C50765 * C1178) * C1282) *
                C15424) *
               C50634) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C1391 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C1386 -
             (C8086 + C8087 + C8088) * C1392 -
             (C8089 + C8090 + C8091) * C50612) *
                C50795 * C50891 +
            ((C8088 + C8087 + C8086) * C1391 + (C8091 + C8090 + C8089) * C1386 -
             (C8094 + C8093 + C8092) * C1392 -
             (C8097 + C8096 + C8095) * C50612) *
                C50795 * C50634) *
               C1643 +
           (((C8456 + C8457 + C8458) * C1392 -
             ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
               C8046 * C441 + C8041 * C452) *
                  C1386 +
              (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
               C8046 * C435 + C8041 * C442) *
                  C1391) +
             (C8459 + C8460 + C8461) * C50612) *
                C50795 * C50891 +
            ((C8464 + C8463 + C8462) * C1392 -
             ((C8461 + C8460 + C8459) * C1386 +
              (C8458 + C8457 + C8456) * C1391) +
             (C8467 + C8466 + C8465) * C50612) *
                C50795 * C50634) *
               C50708) *
              C50899 +
          ((((C8274 + C8275 + C8276) * C1392 -
             ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
               C8046 * C293 + C8041 * C304) *
                  C1386 +
              (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
               C8046 * C287 + C8041 * C294) *
                  C1391) +
             (C8277 + C8278 + C8279) * C50612) *
                C50795 * C50891 +
            ((C8282 + C8281 + C8280) * C1392 -
             ((C8279 + C8278 + C8277) * C1386 +
              (C8276 + C8275 + C8274) * C1391) +
             (C8285 + C8284 + C8283) * C50612) *
                C50795 * C50634) *
               C1643 +
           (((C8046 * C811 + C8041 * C819 + C8047 * C818 + C8042 * C834 +
              C8048 * C3155 + C8043 * C3161) *
                 C1391 +
             (C8046 * C820 + C8041 * C835 + C8047 * C833 + C8042 * C842 +
              C8048 * C3160 + C8043 * C3164) *
                 C1386 -
             (C9814 + C9815 + C9816) * C1392 -
             (C9817 + C9818 + C9819) * C50612) *
                C50795 * C50891 +
            ((C9816 + C9815 + C9814) * C1391 + (C9819 + C9818 + C9817) * C1386 -
             (C8048 * C3153 + C8043 * C3157 + C8047 * C816 + C8042 * C830 +
              C8046 * C813 + C8041 * C823) *
                 C1392 -
             (C8048 * C3156 + C8043 * C3162 + C8047 * C829 + C8042 * C840 +
              C8046 * C824 + C8041 * C837) *
                 C50612) *
                C50795 * C50634) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1391 +
             (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
             C172 * C50612) *
                C50795 * C111 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                C50795 * C112 +
            (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
                C50795 * C113 +
            (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50612) *
                C50795 * C114) *
               C1643 +
           ((C475 * C1392 -
             ((C117 * C441 + C50765 * C452) * C1386 +
              (C117 * C435 + C50765 * C442) * C1391) +
             C476 * C50612) *
                C50795 * C111 +
            (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50612) *
                C50795 * C112 +
            (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50612) *
                C50795 * C113 +
            (C481 * C1392 - (C480 * C1386 + C479 * C1391) + C482 * C50612) *
                C50795 * C114) *
               C50708) *
              C50899 +
          (((C327 * C1392 -
             ((C117 * C293 + C50765 * C304) * C1386 +
              (C117 * C287 + C50765 * C294) * C1391) +
             C328 * C50612) *
                C50795 * C111 +
            (C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                C50795 * C112 +
            (C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50612) *
                C50795 * C113 +
            (C333 * C1392 - (C332 * C1386 + C331 * C1391) + C334 * C50612) *
                C50795 * C114) *
               C1643 +
           (((C117 * C811 + C50765 * C819) * C1391 +
             (C117 * C820 + C50765 * C835) * C1386 - C1540 * C1392 -
             C1541 * C50612) *
                C50795 * C111 +
            (C1540 * C1391 + C1541 * C1386 - C1542 * C1392 - C1543 * C50612) *
                C50795 * C112 +
            (C1542 * C1391 + C1543 * C1386 - C1544 * C1392 - C1545 * C50612) *
                C50795 * C113 +
            (C1544 * C1391 + C1545 * C1386 -
             (C117 * C1523 + C50765 * C1524) * C1392 -
             (C117 * C1525 + C50765 * C1526) * C50612) *
                C50795 * C114) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C1391 +
              (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
              C172 * C50612) *
                 C15422 +
             (C6906 + C6907 - C6908 - C6909) * C15423 +
             (C7436 + C7435 - C7434 - C7437) * C15424) *
                C50891 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                 C15422 +
             (C6910 + C6911 - C6912 - C6913) * C15423 +
             (C7440 + C7439 - C7438 - C7441) * C15424) *
                C50634) *
               C1643 +
           (((C6908 - (C6907 + C6906) + C6909) * C15422 +
             (C7434 - (C7435 + C7436) + C7437) * C15423 +
             (C6116 * C1392 - (C6417 * C1386 + C6416 * C1391) +
              C6117 * C50612) *
                 C15424) *
                C50891 +
            ((C6912 - (C6911 + C6910) + C6913) * C15422 +
             (C7438 - (C7439 + C7440) + C7441) * C15423 +
             (C6118 * C1392 - (C6117 * C1386 + C6116 * C1391) +
              C6119 * C50612) *
                 C15424) *
                C50634) *
               C50708) *
              C50899 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50765 * C304) * C1386 +
               (C117 * C287 + C50765 * C294) * C1391) +
              C328 * C50612) *
                 C15422 +
             (C6918 - (C6919 + C6920) + C6921) * C15423 +
             (C17076 - (C17077 + C17078) + C17079) * C15424) *
                C50891 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                 C15422 +
             (C6922 - (C6923 + C6924) + C6925) * C15423 +
             (C17080 - (C17081 + C17082) + C17083) * C15424) *
                C50634) *
               C1643 +
           (((C6920 + C6919 - C6918 - C6921) * C15422 +
             (C17078 + C17077 - C17076 - C17079) * C15423 +
             (C16464 * C1391 + C16465 * C1386 - C16466 * C1392 -
              C16467 * C50612) *
                 C15424) *
                C50891 +
            ((C6924 + C6923 - C6922 - C6925) * C15422 +
             (C17082 + C17081 - C17080 - C17083) * C15423 +
             (C16466 * C1391 + C16467 * C1386 -
              (C117 * C3591 + C50765 * C3595) * C1392 -
              (C117 * C3594 + C50765 * C3600) * C50612) *
                 C15424) *
                C50634) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C1391 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C1386 -
            (C8086 + C8087 + C8088) * C1392 -
            (C8089 + C8090 + C8091) * C50612) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C1391 + (C8091 + C8090 + C8089) * C1386 -
            (C8094 + C8093 + C8092) * C1392 -
            (C8097 + C8096 + C8095) * C50612) *
               C50795 * C50634) *
              C50945 +
          (((C8456 + C8457 + C8458) * C1392 -
            ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
              C8046 * C441 + C8041 * C452) *
                 C1386 +
             (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
              C8046 * C435 + C8041 * C442) *
                 C1391) +
            (C8459 + C8460 + C8461) * C50612) *
               C50795 * C50891 +
           ((C8464 + C8463 + C8462) * C1392 -
            ((C8461 + C8460 + C8459) * C1386 +
             (C8458 + C8457 + C8456) * C1391) +
            (C8467 + C8466 + C8465) * C50612) *
               C50795 * C50634) *
              C50935 +
          (((C8046 * C944 + C8041 * C949 + C8047 * C1083 + C8042 * C1091 +
             C8048 * C3483 + C8043 * C3489) *
                C1391 +
            (C8046 * C950 + C8041 * C959 + C8047 * C1090 + C8042 * C1095 +
             C8048 * C3488 + C8043 * C3492) *
                C1386 -
            (C9050 + C9051 + C9052) * C1392 -
            (C9053 + C9054 + C9055) * C50612) *
               C50795 * C50891 +
           ((C9052 + C9051 + C9050) * C1391 + (C9055 + C9054 + C9053) * C1386 -
            (C8048 * C3481 + C8043 * C3485 + C8047 * C1081 + C8042 * C1087 +
             C8046 * C946 + C8041 * C953) *
                C1392 -
            (C8048 * C3484 + C8043 * C3490 + C8047 * C1086 + C8042 * C1093 +
             C8046 * C954 + C8041 * C961) *
                C50612) *
               C50795 * C50634) *
              C1875) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C1391 +
            (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
            C172 * C50612) *
               C50795 * C111 +
           (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
               C50795 * C112 +
           (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
               C50795 * C113 +
           (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50612) *
               C50795 * C114) *
              C50945 +
          ((C475 * C1392 -
            ((C117 * C441 + C50765 * C452) * C1386 +
             (C117 * C435 + C50765 * C442) * C1391) +
            C476 * C50612) *
               C50795 * C111 +
           (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50612) *
               C50795 * C112 +
           (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50612) *
               C50795 * C113 +
           (C481 * C1392 - (C480 * C1386 + C479 * C1391) + C482 * C50612) *
               C50795 * C114) *
              C50935 +
          (((C117 * C944 + C50765 * C949) * C1391 +
            (C117 * C950 + C50765 * C959) * C1386 - C977 * C1392 -
            C978 * C50612) *
               C50795 * C111 +
           (C977 * C1391 + C978 * C1386 - C979 * C1392 - C980 * C50612) *
               C50795 * C112 +
           (C979 * C1391 + C980 * C1386 - C981 * C1392 - C982 * C50612) *
               C50795 * C113 +
           (C981 * C1391 + C982 * C1386 -
            (C117 * C948 + C50765 * C957) * C1392 -
            (C117 * C958 + C50765 * C963) * C50612) *
               C50795 * C114) *
              C1875) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1391 +
             (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
             C172 * C50612) *
                C15422 +
            (C6906 + C6907 - C6908 - C6909) * C15423 + C17594 * C15424) *
               C50891 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                C15422 +
            (C6910 + C6911 - C6912 - C6913) * C15423 + C17595 * C15424) *
               C50634) *
              C50945 +
          (((C6908 - (C6907 + C6906) + C6909) * C15422 +
            (C7434 - (C7435 + C7436) + C7437) * C15423 +
            (C17584 - (C17585 + C17586) + C17587) * C15424) *
               C50891 +
           ((C6912 - (C6911 + C6910) + C6913) * C15422 +
            (C7438 - (C7439 + C7440) + C7441) * C15423 +
            (C17588 - (C17589 + C17590) + C17591) * C15424) *
               C50634) *
              C50935 +
          ((C17594 * C15422 + (C17586 + C17585 - C17584 - C17587) * C15423 +
            (C16586 * C1391 + C16587 * C1386 - C16298 * C1392 -
             C16299 * C50612) *
                C15424) *
               C50891 +
           (C17595 * C15422 + (C17590 + C17589 - C17588 - C17591) * C15423 +
            (C16298 * C1391 + C16299 * C1386 -
             (C117 * C6395 + C50765 * C6399) * C1392 -
             (C117 * C6398 + C50765 * C6404) * C50612) *
                C15424) *
               C50634) *
              C1875) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C49720 +
            (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
            C172 * C50612) *
               C50795 * C111 +
           (C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
               C50795 * C112 +
           (C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
               C50795 * C113 +
           (C175 * C49720 + C176 * C50884 - C177 * C49713 - C178 * C50612) *
               C50795 * C114) *
              C50696 * C582 +
          ((C327 * C49713 -
            ((C117 * C293 + C50765 * C304) * C50884 +
             (C117 * C287 + C50765 * C294) * C49720) +
            C328 * C50612) *
               C50795 * C111 +
           (C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
               C50795 * C112 +
           (C331 * C49713 - (C330 * C50884 + C329 * C49720) + C332 * C50612) *
               C50795 * C113 +
           (C333 * C49713 - (C332 * C50884 + C331 * C49720) + C334 * C50612) *
               C50795 * C114) *
              C50696 * C583 +
          (((C117 * C587 + C50765 * C592) * C49720 +
            (C117 * C593 + C50765 * C602) * C50884 - C620 * C49713 -
            C621 * C50612) *
               C50795 * C111 +
           (C620 * C49720 + C621 * C50884 - C622 * C49713 - C623 * C50612) *
               C50795 * C112 +
           (C622 * C49720 + C623 * C50884 - C624 * C49713 - C625 * C50612) *
               C50795 * C113 +
           (C624 * C49720 + C625 * C50884 -
            (C117 * C591 + C50765 * C600) * C49713 -
            (C117 * C601 + C50765 * C606) * C50612) *
               C50795 * C114) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50765 * C129) * C118 +
           (C117 * C130 + C50765 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C50795 * C111 +
          (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 + C175 * C120 +
           C176 * C108 - C177 * C121 - C178 * C109) *
              C50795 * C112 +
          (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 + C177 * C120 +
           C178 * C108 - C179 * C121 - C180 * C109) *
              C50795 * C113 +
          (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 + C179 * C120 +
           C180 * C108 - (C117 * C128 + C50765 * C141) * C121 -
           (C117 * C142 + C50765 * C149) * C109) *
              C50795 * C114) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
            C8048 * C587 + C8043 * C592) *
               C118 +
           (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
            C8048 * C593 + C8043 * C602) *
               C106 -
           (C8086 + C8087 + C8088) * C119 - (C8089 + C8090 + C8091) * C107 +
           (C8092 + C8093 + C8094) * C120 + (C8095 + C8096 + C8097) * C108 -
           (C8098 + C8099 + C8100) * C121 - (C8101 + C8102 + C8103) * C109) *
              C50795 * C50891 +
          ((C8088 + C8087 + C8086) * C118 + (C8091 + C8090 + C8089) * C106 -
           (C8094 + C8093 + C8092) * C119 - (C8097 + C8096 + C8095) * C107 +
           (C8100 + C8099 + C8098) * C120 + (C8103 + C8102 + C8101) * C108 -
           (C8048 * C591 + C8043 * C600 + C8047 * C290 + C8042 * C300 +
            C8046 * C126 + C8041 * C137) *
               C121 -
           (C8048 * C601 + C8043 * C606 + C8047 * C301 + C8042 * C308 +
            C8046 * C138 + C8041 * C147) *
               C109) *
              C50795 * C50634) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C49720 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50884 -
            (C8086 + C8087 + C8088) * C49713 -
            (C8089 + C8090 + C8091) * C50612) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C49720 +
            (C8091 + C8090 + C8089) * C50884 -
            (C8094 + C8093 + C8092) * C49713 -
            (C8097 + C8096 + C8095) * C50612) *
               C50795 * C50634) *
              C50696 * C582 +
          (((C8274 + C8275 + C8276) * C49713 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50884 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C49720) +
            (C8277 + C8278 + C8279) * C50612) *
               C50795 * C50891 +
           ((C8282 + C8281 + C8280) * C49713 -
            ((C8279 + C8278 + C8277) * C50884 +
             (C8276 + C8275 + C8274) * C49720) +
            (C8285 + C8284 + C8283) * C50612) *
               C50795 * C50634) *
              C50696 * C583 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C49720 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C50884 -
            (C8626 + C8627 + C8628) * C49713 -
            (C8629 + C8630 + C8631) * C50612) *
               C50795 * C50891 +
           ((C8628 + C8627 + C8626) * C49720 +
            (C8631 + C8630 + C8629) * C50884 -
            (C8048 * C2995 + C8043 * C2999 + C8047 * C698 + C8042 * C704 +
             C8046 * C589 + C8041 * C596) *
                C49713 -
            (C8048 * C2998 + C8043 * C3004 + C8047 * C703 + C8042 * C710 +
             C8046 * C597 + C8041 * C604) *
                C50612) *
               C50795 * C50634) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C118 +
            (C117 * C130 + C50765 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C15422 +
           (C5498 * C118 + C5499 * C106 - C475 * C119 - C476 * C107 +
            C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
               C15423 +
           (C6115 * C118 + C6114 * C106 - C977 * C119 - C978 * C107 +
            C979 * C120 + C980 * C108 - C981 * C121 - C982 * C109) *
               C15424) *
              C50891 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C15422 +
           (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
            C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
               C15423 +
           (C977 * C118 + C978 * C106 - C979 * C119 - C980 * C107 +
            C981 * C120 + C982 * C108 - (C117 * C948 + C50765 * C957) * C121 -
            (C117 * C958 + C50765 * C963) * C109) *
               C15424) *
              C50634) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C49720 +
             (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
             C172 * C50612) *
                C15422 +
            (C6080 + C6081 - C6082 - C6083) * C15423 +
            (C6121 + C6120 - C6092 - C6097) * C15424) *
               C50891 +
           ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                C15422 +
            (C6084 + C6085 - C6086 - C6087) * C15423 +
            (C6100 + C6099 - C6098 - C6101) * C15424) *
               C50634) *
              C50696 * C582 +
          (((C327 * C49713 -
             ((C117 * C293 + C50765 * C304) * C50884 +
              (C117 * C287 + C50765 * C294) * C49720) +
             C328 * C50612) *
                C15422 +
            (C7640 - (C7641 + C7642) + C7643) * C15423 +
            (C6288 * C49713 - (C6287 * C50884 + C6286 * C49720) +
             C6289 * C50612) *
                C15424) *
               C50891 +
           ((C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
                C15422 +
            (C7644 - (C7645 + C7646) + C7647) * C15423 +
            (C6290 * C49713 - (C6289 * C50884 + C6288 * C49720) +
             C6291 * C50612) *
                C15424) *
               C50634) *
              C50696 * C583 +
          ((((C117 * C587 + C50765 * C592) * C49720 +
             (C117 * C593 + C50765 * C602) * C50884 - C620 * C49713 -
             C621 * C50612) *
                C15422 +
            (C5928 * C49720 + C5929 * C50884 - C5656 * C49713 -
             C5657 * C50612) *
                C15423 +
            ((C117 * C3483 + C50765 * C3489) * C49720 +
             (C117 * C3488 + C50765 * C3492) * C50884 - C15880 * C49713 -
             C15881 * C50612) *
                C15424) *
               C50891 +
           ((C620 * C49720 + C621 * C50884 - C622 * C49713 - C623 * C50612) *
                C15422 +
            (C5656 * C49720 + C5657 * C50884 - C5658 * C49713 -
             C5659 * C50612) *
                C15423 +
            (C15880 * C49720 + C15881 * C50884 -
             (C117 * C3481 + C50765 * C3485) * C49713 -
             (C117 * C3484 + C50765 * C3490) * C50612) *
                C15424) *
               C50634) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C696 +
            (C117 * C130 + C50765 * C143) * C50607) *
               C50795 * C111 +
           (C171 * C696 + C172 * C50607) * C50795 * C112 +
           (C173 * C696 + C174 * C50607) * C50795 * C113 +
           (C175 * C696 + C176 * C50607) * C50795 * C114) *
              C50696 * C692 -
          ((C332 * C50607 + C331 * C696) * C50795 * C114 +
           (C330 * C50607 + C329 * C696) * C50795 * C113 +
           (C328 * C50607 + C327 * C696) * C50795 * C112 +
           ((C117 * C293 + C50765 * C304) * C50607 +
            (C117 * C287 + C50765 * C294) * C696) *
               C50795 * C111) *
              C50696 * C693 +
          (((C117 * C587 + C50765 * C592) * C696 +
            (C117 * C593 + C50765 * C602) * C50607) *
               C50795 * C111 +
           (C620 * C696 + C621 * C50607) * C50795 * C112 +
           (C622 * C696 + C623 * C50607) * C50795 * C113 +
           (C624 * C696 + C625 * C50607) * C50795 * C114) *
              C50696 * C694 -
          (((C117 * C701 + C50765 * C709) * C50607 +
            (C117 * C697 + C50765 * C702) * C696) *
               C50795 * C114 +
           ((C117 * C703 + C50765 * C710) * C50607 +
            (C117 * C698 + C50765 * C704) * C696) *
               C50795 * C113 +
           ((C117 * C705 + C50765 * C711) * C50607 +
            (C117 * C699 + C50765 * C706) * C696) *
               C50795 * C112 +
           ((C117 * C707 + C50765 * C712) * C50607 +
            (C117 * C700 + C50765 * C708) * C696) *
               C50795 * C111) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C283 +
            (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50795 * C111 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
            C175 * C285 + C176 * C280) *
               C50795 * C112 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
            C177 * C285 + C178 * C280) *
               C50795 * C113 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
            C179 * C285 + C180 * C280) *
               C50795 * C114) *
              C50696 * C50899 +
          ((C327 * C284 -
            ((C117 * C293 + C50765 * C304) * C278 +
             (C117 * C287 + C50765 * C294) * C283) +
            C328 * C279 - C329 * C285 - C330 * C280) *
               C50795 * C111 +
           (C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
            C331 * C285 - C332 * C280) *
               C50795 * C112 +
           (C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
            C333 * C285 - C334 * C280) *
               C50795 * C113 +
           (C333 * C284 - (C332 * C278 + C331 * C283) + C334 * C279 -
            (C117 * C291 + C50765 * C302) * C285 -
            (C117 * C303 + C50765 * C309) * C280) *
               C50795 * C114) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C283 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C278 -
            (C8086 + C8087 + C8088) * C284 - (C8089 + C8090 + C8091) * C279 +
            (C8092 + C8093 + C8094) * C285 + (C8095 + C8096 + C8097) * C280) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C283 + (C8091 + C8090 + C8089) * C278 -
            (C8094 + C8093 + C8092) * C284 - (C8097 + C8096 + C8095) * C279 +
            (C8100 + C8099 + C8098) * C285 + (C8103 + C8102 + C8101) * C280) *
               C50795 * C50634) *
              C50696 * C50899 +
          (((C8274 + C8275 + C8276) * C284 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C278 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C283) +
            (C8277 + C8278 + C8279) * C279 - (C8280 + C8281 + C8282) * C285 -
            (C8283 + C8284 + C8285) * C280) *
               C50795 * C50891 +
           ((C8282 + C8281 + C8280) * C284 -
            ((C8279 + C8278 + C8277) * C278 + (C8276 + C8275 + C8274) * C283) +
            (C8285 + C8284 + C8283) * C279 -
            (C8048 * C697 + C8043 * C702 + C8047 * C590 + C8042 * C598 +
             C8046 * C289 + C8041 * C298) *
                C285 -
            (C8048 * C701 + C8043 * C709 + C8047 * C599 + C8042 * C605 +
             C8046 * C299 + C8041 * C307) *
                C280) *
               C50795 * C50634) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C696 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50607) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C696 + (C8091 + C8090 + C8089) * C50607) *
               C50795 * C50634) *
              C50696 * C692 -
          (((C8279 + C8278 + C8277) * C50607 + (C8276 + C8275 + C8274) * C696) *
               C50795 * C50634 +
           ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
             C8046 * C293 + C8041 * C304) *
                C50607 +
            (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
             C8046 * C287 + C8041 * C294) *
                C696) *
               C50795 * C50891) *
              C50696 * C693 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C696 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C50607) *
               C50795 * C50891 +
           ((C8628 + C8627 + C8626) * C696 + (C8631 + C8630 + C8629) * C50607) *
               C50795 * C50634) *
              C50696 * C694 -
          (((C8048 * C8731 + C8043 * C8735 + C8047 * C3000 + C8042 * C3005 +
             C8046 * C705 + C8041 * C711) *
                C50607 +
            (C8048 * C8729 + C8043 * C8732 + C8047 * C2996 + C8042 * C3001 +
             C8046 * C699 + C8041 * C706) *
                C696) *
               C50795 * C50634 +
           ((C8048 * C8733 + C8043 * C8736 + C8047 * C3002 + C8042 * C3006 +
             C8046 * C707 + C8041 * C712) *
                C50607 +
            (C8048 * C8730 + C8043 * C8734 + C8047 * C2997 + C8042 * C3003 +
             C8046 * C700 + C8041 * C708) *
                C696) *
               C50795 * C50891) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C283 +
             (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C15422 +
            (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C15423 +
            (C6115 * C283 + C6114 * C278 - C977 * C284 - C978 * C279 +
             C979 * C285 + C980 * C280) *
                C15424) *
               C50891 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C15422 +
            (C5486 + C5487 - C5488 - C5489 + C5490 + C5491) * C15423 +
            (C977 * C283 + C978 * C278 - C979 * C284 - C980 * C279 +
             C981 * C285 + C982 * C280) *
                C15424) *
               C50634) *
              C50696 * C50899 +
          (((C327 * C284 -
             ((C117 * C293 + C50765 * C304) * C278 +
              (C117 * C287 + C50765 * C294) * C283) +
             C328 * C279 - C329 * C285 - C330 * C280) *
                C15422 +
            (C1540 * C284 - (C5927 * C278 + C5926 * C283) + C1541 * C279 -
             C1542 * C285 - C1543 * C280) *
                C15423 +
            (C6288 * C284 - (C6287 * C278 + C6286 * C283) + C6289 * C279 -
             C6290 * C285 - C6291 * C280) *
                C15424) *
               C50891 +
           ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
             C331 * C285 - C332 * C280) *
                C15422 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C15423 +
            (C6290 * C284 - (C6289 * C278 + C6288 * C283) + C6291 * C279 -
             (C117 * C1080 + C50765 * C1085) * C285 -
             (C117 * C1084 + C50765 * C1092) * C280) *
                C15424) *
               C50634) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C15422 +
            (C5904 + C5905) * C15423 + (C6273 + C6272) * C15424) *
               C50891 +
           ((C171 * C696 + C172 * C50607) * C15422 + (C5906 + C5907) * C15423 +
            (C6271 + C6270) * C15424) *
               C50634) *
              C50696 * C692 -
          (((C6295 + C6294) * C15424 + (C5915 + C5914) * C15423 +
            (C328 * C50607 + C327 * C696) * C15422) *
               C50634 +
           ((C6293 + C6292) * C15424 + (C5931 + C5930) * C15423 +
            ((C117 * C293 + C50765 * C304) * C50607 +
             (C117 * C287 + C50765 * C294) * C696) *
                C15422) *
               C50891) *
              C50696 * C693 +
          ((((C117 * C587 + C50765 * C592) * C696 +
             (C117 * C593 + C50765 * C602) * C50607) *
                C15422 +
            (C5932 + C5933) * C15423 +
            ((C117 * C3483 + C50765 * C3489) * C696 +
             (C117 * C3488 + C50765 * C3492) * C50607) *
                C15424) *
               C50891 +
           ((C620 * C696 + C621 * C50607) * C15422 + (C5922 + C5923) * C15423 +
            (C15880 * C696 + C15881 * C50607) * C15424) *
               C50634) *
              C50696 * C694 -
          ((((C117 * C9203 + C50765 * C9207) * C50607 +
             (C117 * C9201 + C50765 * C9204) * C696) *
                C15424 +
            ((C117 * C3158 + C50765 * C3163) * C50607 +
             (C117 * C3154 + C50765 * C3159) * C696) *
                C15423 +
            ((C117 * C705 + C50765 * C711) * C50607 +
             (C117 * C699 + C50765 * C706) * C696) *
                C15422) *
               C50634 +
           (((C117 * C9205 + C50765 * C9208) * C50607 +
             (C117 * C9202 + C50765 * C9206) * C696) *
                C15424 +
            ((C117 * C3160 + C50765 * C3164) * C50607 +
             (C117 * C3155 + C50765 * C3161) * C696) *
                C15423 +
            ((C117 * C707 + C50765 * C712) * C50607 +
             (C117 * C700 + C50765 * C708) * C696) *
                C15422) *
               C50891) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C50795 * C111 +
            (C171 * C696 + C172 * C50607) * C50795 * C112 +
            (C173 * C696 + C174 * C50607) * C50795 * C113 +
            (C175 * C696 + C176 * C50607) * C50795 * C114) *
               C50900 -
           ((C480 * C50607 + C479 * C696) * C50795 * C114 +
            (C478 * C50607 + C477 * C696) * C50795 * C113 +
            (C476 * C50607 + C475 * C696) * C50795 * C112 +
            ((C117 * C441 + C50765 * C452) * C50607 +
             (C117 * C435 + C50765 * C442) * C696) *
                C50795 * C111) *
               C50708) *
              C582 +
          ((((C117 * C811 + C50765 * C819) * C696 +
             (C117 * C820 + C50765 * C835) * C50607) *
                C50795 * C111 +
            ((C117 * C812 + C50765 * C821) * C696 +
             (C117 * C822 + C50765 * C836) * C50607) *
                C50795 * C112 +
            ((C117 * C813 + C50765 * C823) * C696 +
             (C117 * C824 + C50765 * C837) * C50607) *
                C50795 * C113 +
            ((C117 * C814 + C50765 * C825) * C696 +
             (C117 * C826 + C50765 * C838) * C50607) *
                C50795 * C114) *
               C50708 -
           ((C332 * C50607 + C331 * C696) * C50795 * C114 +
            (C330 * C50607 + C329 * C696) * C50795 * C113 +
            (C328 * C50607 + C327 * C696) * C50795 * C112 +
            ((C117 * C293 + C50765 * C304) * C50607 +
             (C117 * C287 + C50765 * C294) * C696) *
                C50795 * C111) *
               C50900) *
              C583 +
          ((((C117 * C587 + C50765 * C592) * C696 +
             (C117 * C593 + C50765 * C602) * C50607) *
                C50795 * C111 +
            (C620 * C696 + C621 * C50607) * C50795 * C112 +
            (C622 * C696 + C623 * C50607) * C50795 * C113 +
            (C624 * C696 + C625 * C50607) * C50795 * C114) *
               C50900 -
           (((C117 * C827 + C50765 * C839) * C50607 +
             (C117 * C815 + C50765 * C828) * C696) *
                C50795 * C114 +
            ((C117 * C829 + C50765 * C840) * C50607 +
             (C117 * C816 + C50765 * C830) * C696) *
                C50795 * C113 +
            ((C117 * C831 + C50765 * C841) * C50607 +
             (C117 * C817 + C50765 * C832) * C696) *
                C50795 * C112 +
            ((C117 * C833 + C50765 * C842) * C50607 +
             (C117 * C818 + C50765 * C834) * C696) *
                C50795 * C111) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C283 +
            (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50795 * C111 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
            C175 * C285 + C176 * C280) *
               C50795 * C112 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
            C177 * C285 + C178 * C280) *
               C50795 * C113 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
            C179 * C285 + C180 * C280) *
               C50795 * C114) *
              C50900 +
          ((C475 * C284 -
            ((C117 * C441 + C50765 * C452) * C278 +
             (C117 * C435 + C50765 * C442) * C283) +
            C476 * C279 - C477 * C285 - C478 * C280) *
               C50795 * C111 +
           (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
            C479 * C285 - C480 * C280) *
               C50795 * C112 +
           (C479 * C284 - (C478 * C278 + C477 * C283) + C480 * C279 -
            C481 * C285 - C482 * C280) *
               C50795 * C113 +
           (C481 * C284 - (C480 * C278 + C479 * C283) + C482 * C279 -
            (C117 * C439 + C50765 * C450) * C285 -
            (C117 * C451 + C50765 * C457) * C280) *
               C50795 * C114) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C283 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C278 -
            (C8086 + C8087 + C8088) * C284 - (C8089 + C8090 + C8091) * C279 +
            (C8092 + C8093 + C8094) * C285 + (C8095 + C8096 + C8097) * C280) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C283 + (C8091 + C8090 + C8089) * C278 -
            (C8094 + C8093 + C8092) * C284 - (C8097 + C8096 + C8095) * C279 +
            (C8100 + C8099 + C8098) * C285 + (C8103 + C8102 + C8101) * C280) *
               C50795 * C50634) *
              C50900 +
          (((C8456 + C8457 + C8458) * C284 -
            ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
              C8046 * C441 + C8041 * C452) *
                 C278 +
             (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
              C8046 * C435 + C8041 * C442) *
                 C283) +
            (C8459 + C8460 + C8461) * C279 - (C8462 + C8463 + C8464) * C285 -
            (C8465 + C8466 + C8467) * C280) *
               C50795 * C50891 +
           ((C8464 + C8463 + C8462) * C284 -
            ((C8461 + C8460 + C8459) * C278 + (C8458 + C8457 + C8456) * C283) +
            (C8467 + C8466 + C8465) * C279 -
            (C8048 * C815 + C8043 * C828 + C8047 * C814 + C8042 * C825 +
             C8046 * C437 + C8041 * C446) *
                C285 -
            (C8048 * C827 + C8043 * C839 + C8047 * C826 + C8042 * C838 +
             C8046 * C447 + C8041 * C455) *
                C280) *
               C50795 * C50634) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C696 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50607) *
                C50795 * C50891 +
            ((C8088 + C8087 + C8086) * C696 +
             (C8091 + C8090 + C8089) * C50607) *
                C50795 * C50634) *
               C50900 -
           (((C8461 + C8460 + C8459) * C50607 +
             (C8458 + C8457 + C8456) * C696) *
                C50795 * C50634 +
            ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
              C8046 * C441 + C8041 * C452) *
                 C50607 +
             (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
              C8046 * C435 + C8041 * C442) *
                 C696) *
                C50795 * C50891) *
               C50708) *
              C582 +
          ((((C8046 * C811 + C8041 * C819 + C8047 * C818 + C8042 * C834 +
              C8048 * C3155 + C8043 * C3161) *
                 C696 +
             (C8046 * C820 + C8041 * C835 + C8047 * C833 + C8042 * C842 +
              C8048 * C3160 + C8043 * C3164) *
                 C50607) *
                C50795 * C50891 +
            ((C8046 * C812 + C8041 * C821 + C8047 * C817 + C8042 * C832 +
              C8048 * C3154 + C8043 * C3159) *
                 C696 +
             (C8046 * C822 + C8041 * C836 + C8047 * C831 + C8042 * C841 +
              C8048 * C3158 + C8043 * C3163) *
                 C50607) *
                C50795 * C50634) *
               C50708 -
           (((C8279 + C8278 + C8277) * C50607 +
             (C8276 + C8275 + C8274) * C696) *
                C50795 * C50634 +
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50607 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C696) *
                C50795 * C50891) *
               C50900) *
              C583 +
          ((((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
              C8048 * C2997 + C8043 * C3003) *
                 C696 +
             (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
              C8048 * C3002 + C8043 * C3006) *
                 C50607) *
                C50795 * C50891 +
            ((C8628 + C8627 + C8626) * C696 +
             (C8631 + C8630 + C8629) * C50607) *
                C50795 * C50634) *
               C50900 -
           (((C8048 * C8885 + C8043 * C8889 + C8047 * C3158 + C8042 * C3163 +
              C8046 * C831 + C8041 * C841) *
                 C50607 +
             (C8048 * C8883 + C8043 * C8886 + C8047 * C3154 + C8042 * C3159 +
              C8046 * C817 + C8041 * C832) *
                 C696) *
                C50795 * C50634 +
            ((C8048 * C8887 + C8043 * C8890 + C8047 * C3160 + C8042 * C3164 +
              C8046 * C833 + C8041 * C842) *
                 C50607 +
             (C8048 * C8884 + C8043 * C8888 + C8047 * C3155 + C8042 * C3161 +
              C8046 * C818 + C8041 * C834) *
                 C696) *
                C50795 * C50891) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C283 +
             (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C15422 +
            (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C15423 +
            (C15718 + C15719 - C15720 - C15721 + C15722 + C15723) * C15424) *
               C50891 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C15422 +
            (C5486 + C5487 - C5488 - C5489 + C5490 + C5491) * C15423 +
            (C15724 + C15725 - C15726 - C15727 + C15728 + C15729) * C15424) *
               C50634) *
              C50900 +
          (((C5482 - (C5501 + C5500) + C5483 - C5484 - C5485) * C15422 +
            (C15720 - (C15719 + C15718) + C15721 - C15722 - C15723) * C15423 +
            (C6116 * C284 - (C6417 * C278 + C6416 * C283) + C6117 * C279 -
             C6118 * C285 - C6119 * C280) *
                C15424) *
               C50891 +
           ((C5488 - (C5487 + C5486) + C5489 - C5490 - C5491) * C15422 +
            (C15726 - (C15725 + C15724) + C15727 - C15728 - C15729) * C15423 +
            (C6118 * C284 - (C6117 * C278 + C6116 * C283) + C6119 * C279 -
             (C117 * C1166 + C50765 * C1171) * C285 -
             (C117 * C1170 + C50765 * C1178) * C280) *
                C15424) *
               C50634) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C15422 +
             (C5904 + C5905) * C15423 + (C6273 + C6272) * C15424) *
                C50891 +
            ((C171 * C696 + C172 * C50607) * C15422 + (C5906 + C5907) * C15423 +
             (C6271 + C6270) * C15424) *
                C50634) *
               C50900 -
           (((C6413 + C6412) * C15424 + (C6270 + C6271) * C15423 +
             (C5907 + C5906) * C15422) *
                C50634 +
            ((C6419 + C6418) * C15424 + (C6272 + C6273) * C15423 +
             (C5905 + C5904) * C15422) *
                C50891) *
               C50708) *
              C582 +
          ((((C5930 + C5931) * C15422 + (C6292 + C6293) * C15423 +
             ((C117 * C3593 + C50765 * C3599) * C696 +
              (C117 * C3598 + C50765 * C3602) * C50607) *
                 C15424) *
                C50891 +
            ((C5914 + C5915) * C15422 + (C6294 + C6295) * C15423 +
             ((C117 * C3592 + C50765 * C3597) * C696 +
              (C117 * C3596 + C50765 * C3601) * C50607) *
                 C15424) *
                C50634) *
               C50708 -
           (((C6295 + C6294) * C15424 + (C5915 + C5914) * C15423 +
             (C328 * C50607 + C327 * C696) * C15422) *
                C50634 +
            ((C6293 + C6292) * C15424 + (C5931 + C5930) * C15423 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C15422) *
                C50891) *
               C50900) *
              C583 +
          (((((C117 * C587 + C50765 * C592) * C696 +
              (C117 * C593 + C50765 * C602) * C50607) *
                 C15422 +
             (C5932 + C5933) * C15423 + (C16134 + C16135) * C15424) *
                C50891 +
            ((C620 * C696 + C621 * C50607) * C15422 + (C5922 + C5923) * C15423 +
             (C16130 + C16131) * C15424) *
                C50634) *
               C50900 -
           ((((C117 * C9309 + C50765 * C9313) * C50607 +
              (C117 * C9307 + C50765 * C9310) * C696) *
                 C15424 +
             (C16131 + C16130) * C15423 + (C5923 + C5922) * C15422) *
                C50634 +
            (((C117 * C9311 + C50765 * C9314) * C50607 +
              (C117 * C9308 + C50765 * C9312) * C696) *
                 C15424 +
             (C16135 + C16134) * C15423 + (C5933 + C5932) * C15422) *
                C50891) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C1285 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C50942 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C1286 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C50926 +
           (C10862 * C124 + C10857 * C133 + C10863 * C288 + C10858 * C296 +
            C10864 * C589 + C10859 * C596 + C10865 * C698 + C10860 * C704) *
               C1287 +
           (C10862 * C134 + C10857 * C145 + C10863 * C297 + C10858 * C306 +
            C10864 * C597 + C10859 * C604 + C10865 * C703 + C10860 * C710) *
               C1282) *
              C50795 * C50629 * C50696 * C1283 +
          ((C10862 * C286 + C10857 * C292 + C10863 * C588 + C10858 * C594 +
            C10864 * C699 + C10859 * C706 + C10865 * C2996 + C10860 * C3001) *
               C1286 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C50942 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C1285) +
           (C10862 * C295 + C10857 * C305 + C10863 * C595 + C10858 * C603 +
            C10864 * C705 + C10859 * C711 + C10865 * C3000 + C10860 * C3005) *
               C50926 -
           (C10865 * C2995 + C10860 * C2999 + C10864 * C698 + C10859 * C704 +
            C10863 * C589 + C10858 * C596 + C10862 * C288 + C10857 * C296) *
               C1287 -
           (C10865 * C2998 + C10860 * C3004 + C10864 * C703 + C10859 * C710 +
            C10863 * C597 + C10858 * C604 + C10862 * C297 + C10857 * C306) *
               C1282) *
              C50795 * C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C1285 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50942 -
            (C2340 + C2341) * C1286 - (C2342 + C2343) * C50926 + C2356 * C1287 +
            C2357 * C1282) *
               C50795 * C2302 +
           ((C2341 + C2340) * C1285 + (C2343 + C2342) * C50942 -
            (C2345 + C2344) * C1286 - (C2347 + C2346) * C50926 +
            (C2349 + C2348) * C1287 + (C2351 + C2350) * C1282) *
               C50795 * C2303 +
           (C2356 * C1285 + C2357 * C50942 - C2358 * C1286 - C2359 * C50926 +
            (C2353 + C2352) * C1287 + (C2355 + C2354) * C1282) *
               C50795 * C2304) *
              C50696 * C1283 +
          (((C2530 + C2531) * C1286 -
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50942 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C1285) +
            (C2532 + C2533) * C50926 - C2542 * C1287 - C2543 * C1282) *
               C50795 * C2302 +
           ((C2535 + C2534) * C1286 -
            ((C2533 + C2532) * C50942 + (C2531 + C2530) * C1285) +
            (C2537 + C2536) * C50926 - (C2538 + C2539) * C1287 -
            (C2540 + C2541) * C1282) *
               C50795 * C2303 +
           ((C2539 + C2538) * C1286 - (C2543 * C50942 + C2542 * C1285) +
            (C2541 + C2540) * C50926 -
            (C2306 * C591 + C50781 * C600 + C2305 * C290 + C50911 * C300) *
                C1287 -
            (C2306 * C601 + C50781 * C606 + C2305 * C301 + C50911 * C308) *
                C1282) *
               C50795 * C2304) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C1285 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50942 -
            (C2340 + C2341) * C1286 - (C2342 + C2343) * C50926 + C2356 * C1287 +
            C2357 * C1282) *
               C15422 +
           ((C18496 + C18497) * C1285 + (C18498 + C18499) * C50942 -
            (C2715 + C2714) * C1286 - (C2717 + C2716) * C50926 +
            (C2719 + C2718) * C1287 + (C2721 + C2720) * C1282) *
               C15423 +
           (C19088 * C1285 + C19089 * C50942 - C19090 * C1286 -
            C19091 * C50926 + (C3333 + C3332) * C1287 +
            (C3335 + C3334) * C1282) *
               C15424) *
              C50629 * C50696 * C1283 +
          (((C2530 + C2531) * C1286 -
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50942 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C1285) +
            (C2532 + C2533) * C50926 - C2542 * C1287 - C2543 * C1282) *
               C15422 +
           ((C4107 + C4106) * C1286 -
            ((C18929 + C18928) * C50942 + (C18927 + C18926) * C1285) +
            (C4109 + C4108) * C50926 - (C4110 + C4111) * C1287 -
            (C4112 + C4113) * C1282) *
               C15423 +
           ((C2305 * C1082 + C50911 * C1089 + C2306 * C3482 + C50781 * C3487) *
                C1286 -
            (C19279 * C50942 + C19280 * C1285) +
            (C2305 * C1088 + C50911 * C1094 + C2306 * C3486 + C50781 * C3491) *
                C50926 -
            (C2306 * C3481 + C50781 * C3485 + C2305 * C1081 + C50911 * C1087) *
                C1287 -
            (C2306 * C3484 + C50781 * C3490 + C2305 * C1086 + C50911 * C1093) *
                C1282) *
               C15424) *
              C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C1391 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C1386 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C1392 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C50612) *
              C50795 * C50629 * C50696 * C50944 +
          ((C10862 * C286 + C10857 * C292 + C10863 * C588 + C10858 * C594 +
            C10864 * C699 + C10859 * C706 + C10865 * C2996 + C10860 * C3001) *
               C1392 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C1386 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C1391) +
           (C10862 * C295 + C10857 * C305 + C10863 * C595 + C10858 * C603 +
            C10864 * C705 + C10859 * C711 + C10865 * C3000 + C10860 * C3005) *
               C50612) *
              C50795 * C50629 * C50696 * C50932 +
          ((C10862 * C587 + C10857 * C592 + C10863 * C700 + C10858 * C708 +
            C10864 * C2997 + C10859 * C3003 + C10865 * C8730 + C10860 * C8734) *
               C1391 +
           (C10862 * C593 + C10857 * C602 + C10863 * C707 + C10858 * C712 +
            C10864 * C3002 + C10859 * C3006 + C10865 * C8733 + C10860 * C8736) *
               C1386 -
           (C10865 * C8729 + C10860 * C8732 + C10864 * C2996 + C10859 * C3001 +
            C10863 * C699 + C10858 * C706 + C10862 * C588 + C10857 * C594) *
               C1392 -
           (C10865 * C8731 + C10860 * C8735 + C10864 * C3000 + C10859 * C3005 +
            C10863 * C705 + C10858 * C711 + C10862 * C595 + C10857 * C603) *
               C50612) *
              C50795 * C50629 * C50696 * C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C1391 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C1386 -
            (C2340 + C2341) * C1392 - (C2342 + C2343) * C50612) *
               C50795 * C2302 +
           ((C2341 + C2340) * C1391 + (C2343 + C2342) * C1386 -
            (C2345 + C2344) * C1392 - (C2347 + C2346) * C50612) *
               C50795 * C2303 +
           (C2356 * C1391 + C2357 * C1386 - C2358 * C1392 - C2359 * C50612) *
               C50795 * C2304) *
              C50696 * C50944 +
          (((C2530 + C2531) * C1392 -
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C1386 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C1391) +
            (C2532 + C2533) * C50612) *
               C50795 * C2302 +
           ((C2535 + C2534) * C1392 -
            ((C2533 + C2532) * C1386 + (C2531 + C2530) * C1391) +
            (C2537 + C2536) * C50612) *
               C50795 * C2303 +
           ((C2539 + C2538) * C1392 - (C2543 * C1386 + C2542 * C1391) +
            (C2541 + C2540) * C50612) *
               C50795 * C2304) *
              C50696 * C50932 +
          (((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                C1391 +
            (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                C1386 -
            (C2890 + C2891) * C1392 - (C2892 + C2893) * C50612) *
               C50795 * C2302 +
           ((C2891 + C2890) * C1391 + (C2893 + C2892) * C1386 -
            (C2894 + C2895) * C1392 - (C2896 + C2897) * C50612) *
               C50795 * C2303 +
           ((C2895 + C2894) * C1391 + (C2897 + C2896) * C1386 -
            (C2306 * C697 + C50781 * C702 + C2305 * C590 + C50911 * C598) *
                C1392 -
            (C2306 * C701 + C50781 * C709 + C2305 * C599 + C50911 * C605) *
                C50612) *
               C50795 * C2304) *
              C50696 * C1390)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C1391 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C1386 -
            (C2340 + C2341) * C1392 - (C2342 + C2343) * C50612) *
               C15422 +
           ((C18496 + C18497) * C1391 + (C18498 + C18499) * C1386 -
            (C2715 + C2714) * C1392 - (C2717 + C2716) * C50612) *
               C15423 +
           (C19088 * C1391 + C19089 * C1386 - C19090 * C1392 -
            C19091 * C50612) *
               C15424) *
              C50629 * C50696 * C50944 +
          (((C2530 + C2531) * C1392 -
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C1386 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C1391) +
            (C2532 + C2533) * C50612) *
               C15422 +
           ((C4107 + C4106) * C1392 -
            ((C18929 + C18928) * C1386 + (C18927 + C18926) * C1391) +
            (C4109 + C4108) * C50612) *
               C15423 +
           ((C2305 * C1082 + C50911 * C1089 + C2306 * C3482 + C50781 * C3487) *
                C1392 -
            (C19279 * C1386 + C19280 * C1391) +
            (C2305 * C1088 + C50911 * C1094 + C2306 * C3486 + C50781 * C3491) *
                C50612) *
               C15424) *
              C50629 * C50696 * C50932 +
          (((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                C1391 +
            (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                C1386 -
            (C2890 + C2891) * C1392 - (C2892 + C2893) * C50612) *
               C15422 +
           ((C18934 + C18935) * C1391 + (C18936 + C18937) * C1386 -
            (C2306 * C3154 + C50781 * C3159 + C2305 * C817 + C50911 * C832) *
                C1392 -
            (C2306 * C3158 + C50781 * C3163 + C2305 * C831 + C50911 * C841) *
                C50612) *
               C15423 +
           ((C18938 + C18939) * C1391 + (C18940 + C18941) * C1386 -
            (C2306 * C9201 + C50781 * C9204 + C2305 * C3482 + C50911 * C3487) *
                C1392 -
            (C2306 * C9203 + C50781 * C9207 + C2305 * C3486 + C50911 * C3491) *
                C50612) *
               C15424) *
              C50629 * C50696 * C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
             C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
                C1391 +
            (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
             C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
                C1386 -
            (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
             C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
                C1392 -
            (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
             C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
                C50612) *
               C50795 * C50629 * C50900 +
           ((C10862 * C434 + C10857 * C440 + C10863 * C812 + C10858 * C821 +
             C10864 * C817 + C10859 * C832 + C10865 * C3154 + C10860 * C3159) *
                C1392 -
            ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
              C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                 C1386 +
             (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
              C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                 C1391) +
            (C10862 * C443 + C10857 * C453 + C10863 * C822 + C10858 * C836 +
             C10864 * C831 + C10859 * C841 + C10865 * C3158 + C10860 * C3163) *
                C50612) *
               C50795 * C50629 * C50708) *
              C1283 +
          (((C10862 * C286 + C10857 * C292 + C10863 * C588 + C10858 * C594 +
             C10864 * C699 + C10859 * C706 + C10865 * C2996 + C10860 * C3001) *
                C1392 -
            ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
              C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                 C1386 +
             (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
              C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                 C1391) +
            (C10862 * C295 + C10857 * C305 + C10863 * C595 + C10858 * C603 +
             C10864 * C705 + C10859 * C711 + C10865 * C3000 + C10860 * C3005) *
                C50612) *
               C50795 * C50629 * C50900 +
           ((C10862 * C811 + C10857 * C819 + C10863 * C818 + C10858 * C834 +
             C10864 * C3155 + C10859 * C3161 + C10865 * C8884 +
             C10860 * C8888) *
                C1391 +
            (C10862 * C820 + C10857 * C835 + C10863 * C833 + C10858 * C842 +
             C10864 * C3160 + C10859 * C3164 + C10865 * C8887 +
             C10860 * C8890) *
                C1386 -
            (C10865 * C8883 + C10860 * C8886 + C10864 * C3154 + C10859 * C3159 +
             C10863 * C817 + C10858 * C832 + C10862 * C812 + C10857 * C821) *
                C1392 -
            (C10865 * C8885 + C10860 * C8889 + C10864 * C3158 + C10859 * C3163 +
             C10863 * C831 + C10858 * C841 + C10862 * C822 + C10857 * C836) *
                C50612) *
               C50795 * C50629 * C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C1391 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C1386 -
             (C2340 + C2341) * C1392 - (C2342 + C2343) * C50612) *
                C50795 * C2302 +
            ((C2341 + C2340) * C1391 + (C2343 + C2342) * C1386 -
             (C2345 + C2344) * C1392 - (C2347 + C2346) * C50612) *
                C50795 * C2303 +
            (C2356 * C1391 + C2357 * C1386 - C2358 * C1392 - C2359 * C50612) *
                C50795 * C2304) *
               C50900 +
           (((C2714 + C2715) * C1392 -
             ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                  C1386 +
              (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                  C1391) +
             (C2716 + C2717) * C50612) *
                C50795 * C2302 +
            ((C2719 + C2718) * C1392 -
             ((C2717 + C2716) * C1386 + (C2715 + C2714) * C1391) +
             (C2721 + C2720) * C50612) *
                C50795 * C2303 +
            ((C2723 + C2722) * C1392 - (C2727 * C1386 + C2726 * C1391) +
             (C2725 + C2724) * C50612) *
                C50795 * C2304) *
               C50708) *
              C1283 +
          ((((C2530 + C2531) * C1392 -
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C1386 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C1391) +
             (C2532 + C2533) * C50612) *
                C50795 * C2302 +
            ((C2535 + C2534) * C1392 -
             ((C2533 + C2532) * C1386 + (C2531 + C2530) * C1391) +
             (C2537 + C2536) * C50612) *
                C50795 * C2303 +
            ((C2539 + C2538) * C1392 - (C2543 * C1386 + C2542 * C1391) +
             (C2541 + C2540) * C50612) *
                C50795 * C2304) *
               C50900 +
           (((C2305 * C811 + C50911 * C819 + C2306 * C818 + C50781 * C834) *
                 C1391 +
             (C2305 * C820 + C50911 * C835 + C2306 * C833 + C50781 * C842) *
                 C1386 -
             (C4106 + C4107) * C1392 - (C4108 + C4109) * C50612) *
                C50795 * C2302 +
            ((C4107 + C4106) * C1391 + (C4109 + C4108) * C1386 -
             (C4110 + C4111) * C1392 - (C4112 + C4113) * C50612) *
                C50795 * C2303 +
            ((C4111 + C4110) * C1391 + (C4113 + C4112) * C1386 -
             (C2306 * C815 + C50781 * C828 + C2305 * C814 + C50911 * C825) *
                 C1392 -
             (C2306 * C827 + C50781 * C839 + C2305 * C826 + C50911 * C838) *
                 C50612) *
                C50795 * C2304) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C1391 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C1386 -
             (C2340 + C2341) * C1392 - (C2342 + C2343) * C50612) *
                C15422 +
            ((C18496 + C18497) * C1391 + (C18498 + C18499) * C1386 -
             (C2715 + C2714) * C1392 - (C2717 + C2716) * C50612) *
                C15423 +
            (C19088 * C1391 + C19089 * C1386 - C19090 * C1392 -
             C19091 * C50612) *
                C15424) *
               C50629 * C50900 +
           (((C2714 + C2715) * C1392 -
             ((C18499 + C18498) * C1386 + (C18497 + C18496) * C1391) +
             (C2716 + C2717) * C50612) *
                C15422 +
            ((C3329 + C3328) * C1392 -
             ((C18503 + C18502) * C1386 + (C18501 + C18500) * C1391) +
             (C3331 + C3330) * C50612) *
                C15423 +
            ((C19112 + C19113) * C1392 - (C19391 * C1386 + C19392 * C1391) +
             (C19118 + C19119) * C50612) *
                C15424) *
               C50629 * C50708) *
              C1283 +
          ((((C2530 + C2531) * C1392 -
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C1386 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C1391) +
             (C2532 + C2533) * C50612) *
                C15422 +
            ((C4107 + C4106) * C1392 -
             ((C18929 + C18928) * C1386 + (C18927 + C18926) * C1391) +
             (C4109 + C4108) * C50612) *
                C15423 +
            ((C19902 + C19903) * C1392 - (C19279 * C1386 + C19280 * C1391) +
             (C19904 + C19905) * C50612) *
                C15424) *
               C50629 * C50900 +
           (((C18926 + C18927) * C1391 + (C18928 + C18929) * C1386 -
             (C4106 + C4107) * C1392 - (C4108 + C4109) * C50612) *
                C15422 +
            ((C18930 + C18931) * C1391 + (C18932 + C18933) * C1386 -
             (C19903 + C19902) * C1392 - (C19905 + C19904) * C50612) *
                C15423 +
            ((C19282 + C19283) * C1391 + (C19284 + C19285) * C1386 -
             (C2306 * C9307 + C50781 * C9310 + C2305 * C3592 + C50911 * C3597) *
                 C1392 -
             (C2306 * C9309 + C50781 * C9313 + C2305 * C3596 + C50911 * C3601) *
                 C50612) *
                C15424) *
               C50629 * C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
             C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
                C49720 +
            (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
             C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
                C50884 -
            (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
             C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
                C49713 -
            (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
             C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
                C50612) *
               C50795 * C50629 * C1643 +
           ((C10862 * C434 + C10857 * C440 + C10863 * C812 + C10858 * C821 +
             C10864 * C817 + C10859 * C832 + C10865 * C3154 + C10860 * C3159) *
                C49713 -
            ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
              C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                 C50884 +
             (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
              C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                 C49720) +
            (C10862 * C443 + C10857 * C453 + C10863 * C822 + C10858 * C836 +
             C10864 * C831 + C10859 * C841 + C10865 * C3158 + C10860 * C3163) *
                C50612) *
               C50795 * C50629 * C50708) *
              C1283 +
          (((C10862 * C286 + C10857 * C292 + C10863 * C588 + C10858 * C594 +
             C10864 * C699 + C10859 * C706 + C10865 * C2996 + C10860 * C3001) *
                C49713 -
            ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
              C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                 C50884 +
             (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
              C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                 C49720) +
            (C10862 * C295 + C10857 * C305 + C10863 * C595 + C10858 * C603 +
             C10864 * C705 + C10859 * C711 + C10865 * C3000 + C10860 * C3005) *
                C50612) *
               C50795 * C50629 * C1643 +
           ((C10862 * C811 + C10857 * C819 + C10863 * C818 + C10858 * C834 +
             C10864 * C3155 + C10859 * C3161 + C10865 * C8884 +
             C10860 * C8888) *
                C49720 +
            (C10862 * C820 + C10857 * C835 + C10863 * C833 + C10858 * C842 +
             C10864 * C3160 + C10859 * C3164 + C10865 * C8887 +
             C10860 * C8890) *
                C50884 -
            (C10865 * C8883 + C10860 * C8886 + C10864 * C3154 + C10859 * C3159 +
             C10863 * C817 + C10858 * C832 + C10862 * C812 + C10857 * C821) *
                C49713 -
            (C10865 * C8885 + C10860 * C8889 + C10864 * C3158 + C10859 * C3163 +
             C10863 * C831 + C10858 * C841 + C10862 * C822 + C10857 * C836) *
                C50612) *
               C50795 * C50629 * C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C49720 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50884 -
             (C2340 + C2341) * C49713 - (C2342 + C2343) * C50612) *
                C50795 * C2302 +
            ((C2341 + C2340) * C49720 + (C2343 + C2342) * C50884 -
             (C2345 + C2344) * C49713 - (C2347 + C2346) * C50612) *
                C50795 * C2303 +
            (C2356 * C49720 + C2357 * C50884 - C2358 * C49713 -
             C2359 * C50612) *
                C50795 * C2304) *
               C1643 +
           (((C2714 + C2715) * C49713 -
             ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                  C50884 +
              (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                  C49720) +
             (C2716 + C2717) * C50612) *
                C50795 * C2302 +
            ((C2719 + C2718) * C49713 -
             ((C2717 + C2716) * C50884 + (C2715 + C2714) * C49720) +
             (C2721 + C2720) * C50612) *
                C50795 * C2303 +
            ((C2723 + C2722) * C49713 - (C2727 * C50884 + C2726 * C49720) +
             (C2725 + C2724) * C50612) *
                C50795 * C2304) *
               C50708) *
              C1283 +
          ((((C2530 + C2531) * C49713 -
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C50884 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C49720) +
             (C2532 + C2533) * C50612) *
                C50795 * C2302 +
            ((C2535 + C2534) * C49713 -
             ((C2533 + C2532) * C50884 + (C2531 + C2530) * C49720) +
             (C2537 + C2536) * C50612) *
                C50795 * C2303 +
            ((C2539 + C2538) * C49713 - (C2543 * C50884 + C2542 * C49720) +
             (C2541 + C2540) * C50612) *
                C50795 * C2304) *
               C1643 +
           (((C2305 * C811 + C50911 * C819 + C2306 * C818 + C50781 * C834) *
                 C49720 +
             (C2305 * C820 + C50911 * C835 + C2306 * C833 + C50781 * C842) *
                 C50884 -
             (C4106 + C4107) * C49713 - (C4108 + C4109) * C50612) *
                C50795 * C2302 +
            ((C4107 + C4106) * C49720 + (C4109 + C4108) * C50884 -
             (C4110 + C4111) * C49713 - (C4112 + C4113) * C50612) *
                C50795 * C2303 +
            ((C4111 + C4110) * C49720 + (C4113 + C4112) * C50884 -
             (C2306 * C815 + C50781 * C828 + C2305 * C814 + C50911 * C825) *
                 C49713 -
             (C2306 * C827 + C50781 * C839 + C2305 * C826 + C50911 * C838) *
                 C50612) *
                C50795 * C2304) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C49720 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50884 -
             (C2340 + C2341) * C49713 - (C2342 + C2343) * C50612) *
                C15422 +
            ((C18496 + C18497) * C49720 + (C18498 + C18499) * C50884 -
             (C2715 + C2714) * C49713 - (C2717 + C2716) * C50612) *
                C15423 +
            C19122 * C15424) *
               C50629 * C1643 +
           (((C2714 + C2715) * C49713 -
             ((C18499 + C18498) * C50884 + (C18497 + C18496) * C49720) +
             (C2716 + C2717) * C50612) *
                C15422 +
            ((C3329 + C3328) * C49713 -
             ((C18503 + C18502) * C50884 + (C18501 + C18500) * C49720) +
             (C3331 + C3330) * C50612) *
                C15423 +
            ((C19112 + C19113) * C49713 - (C19391 * C50884 + C19392 * C49720) +
             (C19118 + C19119) * C50612) *
                C15424) *
               C50629 * C50708) *
              C1283 +
          ((((C2530 + C2531) * C49713 -
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C50884 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C49720) +
             (C2532 + C2533) * C50612) *
                C15422 +
            ((C4107 + C4106) * C49713 -
             ((C18929 + C18928) * C50884 + (C18927 + C18926) * C49720) +
             (C4109 + C4108) * C50612) *
                C15423 +
            ((C19902 + C19903) * C49713 - (C19279 * C50884 + C19280 * C49720) +
             (C19904 + C19905) * C50612) *
                C15424) *
               C50629 * C1643 +
           (((C18926 + C18927) * C49720 + (C18928 + C18929) * C50884 -
             (C4106 + C4107) * C49713 - (C4108 + C4109) * C50612) *
                C15422 +
            ((C18930 + C18931) * C49720 + (C18932 + C18933) * C50884 -
             (C19903 + C19902) * C49713 - (C19905 + C19904) * C50612) *
                C15423 +
            ((C19282 + C19283) * C49720 + (C19284 + C19285) * C50884 -
             (C2306 * C9307 + C50781 * C9310 + C2305 * C3592 + C50911 * C3597) *
                 C49713 -
             (C2306 * C9309 + C50781 * C9313 + C2305 * C3596 + C50911 * C3601) *
                 C50612) *
                C15424) *
               C50629 * C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
             C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
                C696 +
            (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
             C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
                C50607) *
               C50795 * C50629 * C1643 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C50607 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C696) *
               C50795 * C50629 * C50708) *
              C50944 +
          (((C10862 * C811 + C10857 * C819 + C10863 * C818 + C10858 * C834 +
             C10864 * C3155 + C10859 * C3161 + C10865 * C8884 +
             C10860 * C8888) *
                C696 +
            (C10862 * C820 + C10857 * C835 + C10863 * C833 + C10858 * C842 +
             C10864 * C3160 + C10859 * C3164 + C10865 * C8887 +
             C10860 * C8890) *
                C50607) *
               C50795 * C50629 * C50708 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C50607 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C696) *
               C50795 * C50629 * C1643) *
              C50932 +
          (((C10862 * C587 + C10857 * C592 + C10863 * C700 + C10858 * C708 +
             C10864 * C2997 + C10859 * C3003 + C10865 * C8730 +
             C10860 * C8734) *
                C696 +
            (C10862 * C593 + C10857 * C602 + C10863 * C707 + C10858 * C712 +
             C10864 * C3002 + C10859 * C3006 + C10865 * C8733 +
             C10860 * C8736) *
                C50607) *
               C50795 * C50629 * C1643 -
           ((C10865 * C11329 + C10860 * C11331 + C10864 * C8887 +
             C10859 * C8890 + C10863 * C3160 + C10858 * C3164 + C10862 * C833 +
             C10857 * C842) *
                C50607 +
            (C10865 * C11328 + C10860 * C11330 + C10864 * C8884 +
             C10859 * C8888 + C10863 * C3155 + C10858 * C3161 + C10862 * C818 +
             C10857 * C834) *
                C696) *
               C50795 * C50629 * C50708) *
              C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C696 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50607) *
                C50795 * C2302 +
            ((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C50795 *
                C2303 +
            (C2356 * C696 + C2357 * C50607) * C50795 * C2304) *
               C1643 -
           ((C2727 * C50607 + C2726 * C696) * C50795 * C2304 +
            ((C2717 + C2716) * C50607 + (C2715 + C2714) * C696) * C50795 *
                C2303 +
            ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                 C50607 +
             (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                 C696) *
                C50795 * C2302) *
               C50708) *
              C50944 +
          ((((C2305 * C811 + C50911 * C819 + C2306 * C818 + C50781 * C834) *
                 C696 +
             (C2305 * C820 + C50911 * C835 + C2306 * C833 + C50781 * C842) *
                 C50607) *
                C50795 * C2302 +
            ((C4107 + C4106) * C696 + (C4109 + C4108) * C50607) * C50795 *
                C2303 +
            ((C4111 + C4110) * C696 + (C4113 + C4112) * C50607) * C50795 *
                C2304) *
               C50708 -
           ((C2543 * C50607 + C2542 * C696) * C50795 * C2304 +
            ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C50795 *
                C2303 +
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50607 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C696) *
                C50795 * C2302) *
               C1643) *
              C50932 +
          ((((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                 C696 +
             (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                 C50607) *
                C50795 * C2302 +
            ((C2891 + C2890) * C696 + (C2893 + C2892) * C50607) * C50795 *
                C2303 +
            ((C2895 + C2894) * C696 + (C2897 + C2896) * C50607) * C50795 *
                C2304) *
               C1643 -
           (((C2306 * C3156 + C50781 * C3162 + C2305 * C829 + C50911 * C840) *
                 C50607 +
             (C2306 * C3153 + C50781 * C3157 + C2305 * C816 + C50911 * C830) *
                 C696) *
                C50795 * C2304 +
            ((C2306 * C3158 + C50781 * C3163 + C2305 * C831 + C50911 * C841) *
                 C50607 +
             (C2306 * C3154 + C50781 * C3159 + C2305 * C817 + C50911 * C832) *
                 C696) *
                C50795 * C2303 +
            ((C2306 * C3160 + C50781 * C3164 + C2305 * C833 + C50911 * C842) *
                 C50607 +
             (C2306 * C3155 + C50781 * C3161 + C2305 * C818 + C50911 * C834) *
                 C696) *
                C50795 * C2302) *
               C50708) *
              C1390)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C696 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50607) *
                C15422 +
            ((C18496 + C18497) * C696 + (C18498 + C18499) * C50607) * C15423 +
            C19281 * C15424) *
               C50629 * C1643 -
           (C19407 * C15424 +
            ((C18503 + C18502) * C50607 + (C18501 + C18500) * C696) * C15423 +
            ((C18499 + C18498) * C50607 + (C18497 + C18496) * C696) * C15422) *
               C50629 * C50708) *
              C50944 +
          ((((C18926 + C18927) * C696 + (C18928 + C18929) * C50607) * C15422 +
            ((C18930 + C18931) * C696 + (C18932 + C18933) * C50607) * C15423 +
            ((C19282 + C19283) * C696 + (C19284 + C19285) * C50607) * C15424) *
               C50629 * C50708 -
           (C19288 * C15424 +
            ((C18929 + C18928) * C50607 + (C18927 + C18926) * C696) * C15423 +
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50607 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C696) *
                C15422) *
               C50629 * C1643) *
              C50932 +
          ((((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                 C696 +
             (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                 C50607) *
                C15422 +
            ((C18934 + C18935) * C696 + (C18936 + C18937) * C50607) * C15423 +
            ((C18938 + C18939) * C696 + (C18940 + C18941) * C50607) * C15424) *
               C50629 * C1643 -
           (((C2306 * C11599 + C50781 * C11601 + C2305 * C9311 +
              C50911 * C9314) *
                 C50607 +
             (C2306 * C11598 + C50781 * C11600 + C2305 * C9308 +
              C50911 * C9312) *
                 C696) *
                C15424 +
            ((C18941 + C18940) * C50607 + (C18939 + C18938) * C696) * C15423 +
            ((C18937 + C18936) * C50607 + (C18935 + C18934) * C696) * C15422) *
               C50629 * C50708) *
              C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
             C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
                C696 +
            (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
             C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
                C50607) *
               C50795 * C50629 * C50945 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C50607 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C696) *
               C50795 * C50629 * C50935 +
           ((C10862 * C944 + C10857 * C949 + C10863 * C1083 + C10858 * C1091 +
             C10864 * C3483 + C10859 * C3489 + C10865 * C9202 +
             C10860 * C9206) *
                C696 +
            (C10862 * C950 + C10857 * C959 + C10863 * C1090 + C10858 * C1095 +
             C10864 * C3488 + C10859 * C3492 + C10865 * C9205 +
             C10860 * C9208) *
                C50607) *
               C50795 * C50629 * C1875) *
              C1283 +
          (((C10862 * C811 + C10857 * C819 + C10863 * C818 + C10858 * C834 +
             C10864 * C3155 + C10859 * C3161 + C10865 * C8884 +
             C10860 * C8888) *
                C696 +
            (C10862 * C820 + C10857 * C835 + C10863 * C833 + C10858 * C842 +
             C10864 * C3160 + C10859 * C3164 + C10865 * C8887 +
             C10860 * C8890) *
                C50607) *
               C50795 * C50629 * C50935 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C50607 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C696) *
               C50795 * C50629 * C50945 -
           ((C10865 * C11529 + C10860 * C11531 + C10864 * C9205 +
             C10859 * C9208 + C10863 * C3488 + C10858 * C3492 + C10862 * C1090 +
             C10857 * C1095) *
                C50607 +
            (C10865 * C11528 + C10860 * C11530 + C10864 * C9202 +
             C10859 * C9206 + C10863 * C3483 + C10858 * C3489 + C10862 * C1083 +
             C10857 * C1091) *
                C696) *
               C50795 * C50629 * C1875) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C696 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50607) *
                C50795 * C2302 +
            ((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C50795 *
                C2303 +
            (C2356 * C696 + C2357 * C50607) * C50795 * C2304) *
               C50945 -
           ((C2727 * C50607 + C2726 * C696) * C50795 * C2304 +
            ((C2717 + C2716) * C50607 + (C2715 + C2714) * C696) * C50795 *
                C2303 +
            ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                 C50607 +
             (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                 C696) *
                C50795 * C2302) *
               C50935 +
           (((C2305 * C944 + C50911 * C949 + C2306 * C1083 + C50781 * C1091) *
                 C696 +
             (C2305 * C950 + C50911 * C959 + C2306 * C1090 + C50781 * C1095) *
                 C50607) *
                C50795 * C2302 +
            ((C3329 + C3328) * C696 + (C3331 + C3330) * C50607) * C50795 *
                C2303 +
            ((C3333 + C3332) * C696 + (C3335 + C3334) * C50607) * C50795 *
                C2304) *
               C1875) *
              C1283 +
          ((((C2305 * C811 + C50911 * C819 + C2306 * C818 + C50781 * C834) *
                 C696 +
             (C2305 * C820 + C50911 * C835 + C2306 * C833 + C50781 * C842) *
                 C50607) *
                C50795 * C2302 +
            ((C4107 + C4106) * C696 + (C4109 + C4108) * C50607) * C50795 *
                C2303 +
            ((C4111 + C4110) * C696 + (C4113 + C4112) * C50607) * C50795 *
                C2304) *
               C50935 -
           ((C2543 * C50607 + C2542 * C696) * C50795 * C2304 +
            ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C50795 *
                C2303 +
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50607 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C696) *
                C50795 * C2302) *
               C50945 -
           (((C2306 * C3484 + C50781 * C3490 + C2305 * C1086 + C50911 * C1093) *
                 C50607 +
             (C2306 * C3481 + C50781 * C3485 + C2305 * C1081 + C50911 * C1087) *
                 C696) *
                C50795 * C2304 +
            ((C2306 * C3486 + C50781 * C3491 + C2305 * C1088 + C50911 * C1094) *
                 C50607 +
             (C2306 * C3482 + C50781 * C3487 + C2305 * C1082 + C50911 * C1089) *
                 C696) *
                C50795 * C2303 +
            ((C2306 * C3488 + C50781 * C3492 + C2305 * C1090 + C50911 * C1095) *
                 C50607 +
             (C2306 * C3483 + C50781 * C3489 + C2305 * C1083 + C50911 * C1091) *
                 C696) *
                C50795 * C2302) *
               C1875) *
              C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C696 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50607) *
                C15422 +
            ((C18496 + C18497) * C696 + (C18498 + C18499) * C50607) * C15423 +
            C19281 * C15424) *
               C50629 * C50945 -
           (C19407 * C15424 +
            ((C18503 + C18502) * C50607 + (C18501 + C18500) * C696) * C15423 +
            ((C18499 + C18498) * C50607 + (C18497 + C18496) * C696) * C15422) *
               C50629 * C50935 +
           (C19281 * C15422 +
            ((C19117 + C19116) * C696 + (C19115 + C19114) * C50607) * C15423 +
            ((C19403 + C19404) * C696 + (C19405 + C19406) * C50607) * C15424) *
               C50629 * C1875) *
              C1283 +
          ((((C18926 + C18927) * C696 + (C18928 + C18929) * C50607) * C15422 +
            ((C18930 + C18931) * C696 + (C18932 + C18933) * C50607) * C15423 +
            ((C19282 + C19283) * C696 + (C19284 + C19285) * C50607) * C15424) *
               C50629 * C50935 -
           (C19288 * C15424 +
            ((C18929 + C18928) * C50607 + (C18927 + C18926) * C696) * C15423 +
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50607 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C696) *
                C15422) *
               C50629 * C50945 -
           (((C2306 * C13842 + C50781 * C13846 + C2305 * C13843 +
              C50911 * C13847) *
                 C50607 +
             (C2306 * C13840 + C50781 * C13844 + C2305 * C13841 +
              C50911 * C13845) *
                 C696) *
                C15424 +
            ((C19285 + C19284) * C50607 + (C19283 + C19282) * C696) * C15423 +
            C19288 * C15422) *
               C50629 * C1875) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                   C118 +
               (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                   C106 -
               (C2340 + C2341) * C119 - (C2342 + C2343) * C107 + C2356 * C120 +
               C2357 * C108 - C2358 * C121 - C2359 * C109) *
                  C50795 * C2302 +
              ((C2341 + C2340) * C118 + (C2343 + C2342) * C106 -
               (C2345 + C2344) * C119 - (C2347 + C2346) * C107 +
               (C2349 + C2348) * C120 + (C2351 + C2350) * C108 -
               (C2352 + C2353) * C121 - (C2354 + C2355) * C109) *
                  C50795 * C2303 +
              (C2356 * C118 + C2357 * C106 - C2358 * C119 - C2359 * C107 +
               (C2353 + C2352) * C120 + (C2355 + C2354) * C108 -
               (C2306 * C291 + C50781 * C302 + C2305 * C127 + C50911 * C139) *
                   C121 -
               (C2306 * C303 + C50781 * C309 + C2305 * C140 + C50911 * C148) *
                   C109) *
                  C50795 * C2304) *
             C50696 * C50670 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                    C49720 +
                (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                    C50884 -
                (C2340 + C2341) * C49713 - (C2342 + C2343) * C50612) *
                   C50795 * C2302 +
               ((C2341 + C2340) * C49720 + (C2343 + C2342) * C50884 -
                (C2345 + C2344) * C49713 - (C2347 + C2346) * C50612) *
                   C50795 * C2303 +
               (C2356 * C49720 + C2357 * C50884 - C2358 * C49713 -
                C2359 * C50612) *
                   C50795 * C2304) *
                  C50696 * C582 +
              (((C2530 + C2531) * C49713 -
                ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                     C50884 +
                 (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                     C49720) +
                (C2532 + C2533) * C50612) *
                   C50795 * C2302 +
               ((C2535 + C2534) * C49713 -
                ((C2533 + C2532) * C50884 + (C2531 + C2530) * C49720) +
                (C2537 + C2536) * C50612) *
                   C50795 * C2303 +
               ((C2539 + C2538) * C49713 - (C2543 * C50884 + C2542 * C49720) +
                (C2541 + C2540) * C50612) *
                   C50795 * C2304) *
                  C50696 * C583 +
              (((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                    C49720 +
                (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                    C50884 -
                (C2890 + C2891) * C49713 - (C2892 + C2893) * C50612) *
                   C50795 * C2302 +
               ((C2891 + C2890) * C49720 + (C2893 + C2892) * C50884 -
                (C2894 + C2895) * C49713 - (C2896 + C2897) * C50612) *
                   C50795 * C2303 +
               ((C2895 + C2894) * C49720 + (C2897 + C2896) * C50884 -
                (C2306 * C697 + C50781 * C702 + C2305 * C590 + C50911 * C598) *
                    C49713 -
                (C2306 * C701 + C50781 * C709 + C2305 * C599 + C50911 * C605) *
                    C50612) *
                   C50795 * C2304) *
                  C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C49720 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50884 -
            (C2340 + C2341) * C49713 - (C2342 + C2343) * C50612) *
               C50795 * C2302 +
           ((C2341 + C2340) * C49720 + (C2343 + C2342) * C50884 -
            (C2345 + C2344) * C49713 - (C2347 + C2346) * C50612) *
               C50795 * C2303 +
           (C2356 * C49720 + C2357 * C50884 - C2358 * C49713 - C2359 * C50612) *
               C50795 * C2304) *
              C941 +
          (((C2714 + C2715) * C49713 -
            ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                 C50884 +
             (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                 C49720) +
            (C2716 + C2717) * C50612) *
               C50795 * C2302 +
           ((C2719 + C2718) * C49713 -
            ((C2717 + C2716) * C50884 + (C2715 + C2714) * C49720) +
            (C2721 + C2720) * C50612) *
               C50795 * C2303 +
           ((C2723 + C2722) * C49713 - (C2727 * C50884 + C2726 * C49720) +
            (C2725 + C2724) * C50612) *
               C50795 * C2304) *
              C942 +
          (((C2305 * C944 + C50911 * C949 + C2306 * C1083 + C50781 * C1091) *
                C49720 +
            (C2305 * C950 + C50911 * C959 + C2306 * C1090 + C50781 * C1095) *
                C50884 -
            (C3328 + C3329) * C49713 - (C3330 + C3331) * C50612) *
               C50795 * C2302 +
           ((C3329 + C3328) * C49720 + (C3331 + C3330) * C50884 -
            (C3332 + C3333) * C49713 - (C3334 + C3335) * C50612) *
               C50795 * C2303 +
           ((C3333 + C3332) * C49720 + (C3335 + C3334) * C50884 -
            (C2306 * C1080 + C50781 * C1085 + C2305 * C947 + C50911 * C955) *
                C49713 -
            (C2306 * C1084 + C50781 * C1092 + C2305 * C956 + C50911 * C962) *
                C50612) *
               C50795 * C2304) *
              C943) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
           C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
              C118 +
          (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
           C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
              C106 -
          (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
           C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
              C119 -
          (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
           C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
              C107 +
          (C10862 * C124 + C10857 * C133 + C10863 * C288 + C10858 * C296 +
           C10864 * C589 + C10859 * C596 + C10865 * C698 + C10860 * C704) *
              C120 +
          (C10862 * C134 + C10857 * C145 + C10863 * C297 + C10858 * C306 +
           C10864 * C597 + C10859 * C604 + C10865 * C703 + C10860 * C710) *
              C108 -
          (C10865 * C697 + C10860 * C702 + C10864 * C590 + C10859 * C598 +
           C10863 * C289 + C10858 * C298 + C10862 * C125 + C10857 * C135) *
              C121 -
          (C10865 * C701 + C10860 * C709 + C10864 * C599 + C10859 * C605 +
           C10863 * C299 + C10858 * C307 + C10862 * C136 + C10857 * C146) *
              C109) *
         C50795 * C50629 * C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C49720 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C50884 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C49713 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C50612) *
              C50795 * C50629 * C50696 * C582 +
          ((C10862 * C286 + C10857 * C292 + C10863 * C588 + C10858 * C594 +
            C10864 * C699 + C10859 * C706 + C10865 * C2996 + C10860 * C3001) *
               C49713 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C50884 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C49720) +
           (C10862 * C295 + C10857 * C305 + C10863 * C595 + C10858 * C603 +
            C10864 * C705 + C10859 * C711 + C10865 * C3000 + C10860 * C3005) *
               C50612) *
              C50795 * C50629 * C50696 * C583 +
          ((C10862 * C587 + C10857 * C592 + C10863 * C700 + C10858 * C708 +
            C10864 * C2997 + C10859 * C3003 + C10865 * C8730 + C10860 * C8734) *
               C49720 +
           (C10862 * C593 + C10857 * C602 + C10863 * C707 + C10858 * C712 +
            C10864 * C3002 + C10859 * C3006 + C10865 * C8733 + C10860 * C8736) *
               C50884 -
           (C10865 * C8729 + C10860 * C8732 + C10864 * C2996 + C10859 * C3001 +
            C10863 * C699 + C10858 * C706 + C10862 * C588 + C10857 * C594) *
               C49713 -
           (C10865 * C8731 + C10860 * C8735 + C10864 * C3000 + C10859 * C3005 +
            C10863 * C705 + C10858 * C711 + C10862 * C595 + C10857 * C603) *
               C50612) *
              C50795 * C50629 * C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C49720 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C50884 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C49713 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C50612) *
              C50795 * C50629 * C941 +
          ((C10862 * C434 + C10857 * C440 + C10863 * C812 + C10858 * C821 +
            C10864 * C817 + C10859 * C832 + C10865 * C3154 + C10860 * C3159) *
               C49713 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C50884 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C49720) +
           (C10862 * C443 + C10857 * C453 + C10863 * C822 + C10858 * C836 +
            C10864 * C831 + C10859 * C841 + C10865 * C3158 + C10860 * C3163) *
               C50612) *
              C50795 * C50629 * C942 +
          ((C10862 * C944 + C10857 * C949 + C10863 * C1083 + C10858 * C1091 +
            C10864 * C3483 + C10859 * C3489 + C10865 * C9202 + C10860 * C9206) *
               C49720 +
           (C10862 * C950 + C10857 * C959 + C10863 * C1090 + C10858 * C1095 +
            C10864 * C3488 + C10859 * C3492 + C10865 * C9205 + C10860 * C9208) *
               C50884 -
           (C10865 * C9201 + C10860 * C9204 + C10864 * C3482 + C10859 * C3487 +
            C10863 * C1082 + C10858 * C1089 + C10862 * C945 + C10857 * C951) *
               C49713 -
           (C10865 * C9203 + C10860 * C9207 + C10864 * C3486 + C10859 * C3491 +
            C10863 * C1088 + C10858 * C1094 + C10862 * C952 + C10857 * C960) *
               C50612) *
              C50795 * C50629 * C943) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
               C118 +
           (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
               C106 -
           (C2340 + C2341) * C119 - (C2342 + C2343) * C107 + C2356 * C120 +
           C2357 * C108 - C2358 * C121 - C2359 * C109) *
              C15422 +
          ((C2305 * C435 + C50911 * C442 + C2306 * C811 + C50781 * C819) *
               C118 +
           (C2305 * C441 + C50911 * C452 + C2306 * C820 + C50781 * C835) *
               C106 -
           (C2715 + C2714) * C119 - (C2717 + C2716) * C107 +
           (C2719 + C2718) * C120 + (C2721 + C2720) * C108 -
           (C2722 + C2723) * C121 - (C2724 + C2725) * C109) *
              C15423 +
          ((C2305 * C944 + C50911 * C949 + C2306 * C1083 + C50781 * C1091) *
               C118 +
           (C2305 * C950 + C50911 * C959 + C2306 * C1090 + C50781 * C1095) *
               C106 -
           (C3328 + C3329) * C119 - (C3330 + C3331) * C107 +
           (C3333 + C3332) * C120 + (C3335 + C3334) * C108 -
           (C2306 * C1080 + C50781 * C1085 + C2305 * C947 + C50911 * C955) *
               C121 -
           (C2306 * C1084 + C50781 * C1092 + C2305 * C956 + C50911 * C962) *
               C109) *
              C15424) *
         C50629 * C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C49720 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50884 -
            (C2340 + C2341) * C49713 - (C2342 + C2343) * C50612) *
               C15422 +
           ((C18496 + C18497) * C49720 + (C18498 + C18499) * C50884 -
            (C2715 + C2714) * C49713 - (C2717 + C2716) * C50612) *
               C15423 +
           ((C18500 + C18501) * C49720 + (C18502 + C18503) * C50884 -
            (C3328 + C3329) * C49713 - (C3330 + C3331) * C50612) *
               C15424) *
              C50629 * C50696 * C582 +
          (((C2530 + C2531) * C49713 -
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50884 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C49720) +
            (C2532 + C2533) * C50612) *
               C15422 +
           ((C4107 + C4106) * C49713 -
            ((C2306 * C833 + C50781 * C842 + C2305 * C820 + C50911 * C835) *
                 C50884 +
             (C2306 * C818 + C50781 * C834 + C2305 * C811 + C50911 * C819) *
                 C49720) +
            (C4109 + C4108) * C50612) *
               C15423 +
           ((C2305 * C1082 + C50911 * C1089 + C2306 * C3482 + C50781 * C3487) *
                C49713 -
            ((C2306 * C3488 + C50781 * C3492 + C2305 * C1090 + C50911 * C1095) *
                 C50884 +
             (C2306 * C3483 + C50781 * C3489 + C2305 * C1083 + C50911 * C1091) *
                 C49720) +
            (C2305 * C1088 + C50911 * C1094 + C2306 * C3486 + C50781 * C3491) *
                C50612) *
               C15424) *
              C50629 * C50696 * C583 +
          (((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                C49720 +
            (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                C50884 -
            (C2890 + C2891) * C49713 - (C2892 + C2893) * C50612) *
               C15422 +
           ((C2305 * C818 + C50911 * C834 + C2306 * C3155 + C50781 * C3161) *
                C49720 +
            (C2305 * C833 + C50911 * C842 + C2306 * C3160 + C50781 * C3164) *
                C50884 -
            (C2306 * C3154 + C50781 * C3159 + C2305 * C817 + C50911 * C832) *
                C49713 -
            (C2306 * C3158 + C50781 * C3163 + C2305 * C831 + C50911 * C841) *
                C50612) *
               C15423 +
           ((C2305 * C3483 + C50911 * C3489 + C2306 * C9202 + C50781 * C9206) *
                C49720 +
            (C2305 * C3488 + C50911 * C3492 + C2306 * C9205 + C50781 * C9208) *
                C50884 -
            (C2306 * C9201 + C50781 * C9204 + C2305 * C3482 + C50911 * C3487) *
                C49713 -
            (C2306 * C9203 + C50781 * C9207 + C2305 * C3486 + C50911 * C3491) *
                C50612) *
               C15424) *
              C50629 * C50696 * C584)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C49720 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50884 -
            (C2340 + C2341) * C49713 - (C2342 + C2343) * C50612) *
               C15422 +
           ((C18496 + C18497) * C49720 + (C18498 + C18499) * C50884 -
            (C2715 + C2714) * C49713 - (C2717 + C2716) * C50612) *
               C15423 +
           C19122 * C15424) *
              C50629 * C941 +
          (((C2714 + C2715) * C49713 -
            ((C18499 + C18498) * C50884 + (C18497 + C18496) * C49720) +
            (C2716 + C2717) * C50612) *
               C15422 +
           ((C3329 + C3328) * C49713 -
            ((C18503 + C18502) * C50884 + (C18501 + C18500) * C49720) +
            (C3331 + C3330) * C50612) *
               C15423 +
           ((C19112 + C19113) * C49713 -
            ((C19114 + C19115) * C50884 + (C19116 + C19117) * C49720) +
            (C19118 + C19119) * C50612) *
               C15424) *
              C50629 * C942 +
          (C19122 * C15422 +
           ((C19117 + C19116) * C49720 + (C19115 + C19114) * C50884 -
            (C19113 + C19112) * C49713 - (C19119 + C19118) * C50612) *
               C15423 +
           ((C2305 * C6397 + C50911 * C6403 + C2306 * C13841 +
             C50781 * C13845) *
                C49720 +
            (C2305 * C6402 + C50911 * C6406 + C2306 * C13843 +
             C50781 * C13847) *
                C50884 -
            (C2306 * C16447 + C50781 * C16449 + C2305 * C6396 +
             C50911 * C6401) *
                C49713 -
            (C2306 * C16448 + C50781 * C16450 + C2305 * C6400 +
             C50911 * C6405) *
                C50612) *
               C15424) *
              C50629 * C943) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                    C283 +
                (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                    C278 -
                (C2340 + C2341) * C284 - (C2342 + C2343) * C279 + C2356 * C285 +
                C2357 * C280) *
                   C50795 * C2302 +
               ((C2341 + C2340) * C283 + (C2343 + C2342) * C278 -
                (C2345 + C2344) * C284 - (C2347 + C2346) * C279 +
                (C2349 + C2348) * C285 + (C2351 + C2350) * C280) *
                   C50795 * C2303 +
               (C2356 * C283 + C2357 * C278 - C2358 * C284 - C2359 * C279 +
                (C2353 + C2352) * C285 + (C2355 + C2354) * C280) *
                   C50795 * C2304) *
                  C50696 * C50899 +
              (((C2530 + C2531) * C284 -
                ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                     C278 +
                 (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                     C283) +
                (C2532 + C2533) * C279 - C2542 * C285 - C2543 * C280) *
                   C50795 * C2302 +
               ((C2535 + C2534) * C284 -
                ((C2533 + C2532) * C278 + (C2531 + C2530) * C283) +
                (C2537 + C2536) * C279 - (C2538 + C2539) * C285 -
                (C2540 + C2541) * C280) *
                   C50795 * C2303 +
               ((C2539 + C2538) * C284 - (C2543 * C278 + C2542 * C283) +
                (C2541 + C2540) * C279 -
                (C2306 * C591 + C50781 * C600 + C2305 * C290 + C50911 * C300) *
                    C285 -
                (C2306 * C601 + C50781 * C606 + C2305 * C301 + C50911 * C308) *
                    C280) *
                   C50795 * C2304) *
                  C50696 * C50684) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                    C696 +
                (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                    C50607) *
                   C50795 * C2302 +
               ((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C50795 *
                   C2303 +
               (C2356 * C696 + C2357 * C50607) * C50795 * C2304) *
                  C50696 * C692 -
              ((C2543 * C50607 + C2542 * C696) * C50795 * C2304 +
               ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C50795 *
                   C2303 +
               ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                    C50607 +
                (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                    C696) *
                   C50795 * C2302) *
                  C50696 * C693 +
              (((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                    C696 +
                (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                    C50607) *
                   C50795 * C2302 +
               ((C2891 + C2890) * C696 + (C2893 + C2892) * C50607) * C50795 *
                   C2303 +
               ((C2895 + C2894) * C696 + (C2897 + C2896) * C50607) * C50795 *
                   C2304) *
                  C50696 * C694 -
              (((C2306 * C2998 + C50781 * C3004 + C2305 * C703 +
                 C50911 * C710) *
                    C50607 +
                (C2306 * C2995 + C50781 * C2999 + C2305 * C698 +
                 C50911 * C704) *
                    C696) *
                   C50795 * C2304 +
               ((C2306 * C3000 + C50781 * C3005 + C2305 * C705 +
                 C50911 * C711) *
                    C50607 +
                (C2306 * C2996 + C50781 * C3001 + C2305 * C699 +
                 C50911 * C706) *
                    C696) *
                   C50795 * C2303 +
               ((C2306 * C3002 + C50781 * C3006 + C2305 * C707 +
                 C50911 * C712) *
                    C50607 +
                (C2306 * C2997 + C50781 * C3003 + C2305 * C700 +
                 C50911 * C708) *
                    C696) *
                   C50795 * C2302) *
                  C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C696 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50607) *
                C50795 * C2302 +
            ((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C50795 *
                C2303 +
            (C2356 * C696 + C2357 * C50607) * C50795 * C2304) *
               C941 -
           ((C2727 * C50607 + C2726 * C696) * C50795 * C2304 +
            ((C2717 + C2716) * C50607 + (C2715 + C2714) * C696) * C50795 *
                C2303 +
            ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                 C50607 +
             (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                 C696) *
                C50795 * C2302) *
               C942 +
           (((C2305 * C944 + C50911 * C949 + C2306 * C1083 + C50781 * C1091) *
                 C696 +
             (C2305 * C950 + C50911 * C959 + C2306 * C1090 + C50781 * C1095) *
                 C50607) *
                C50795 * C2302 +
            ((C3329 + C3328) * C696 + (C3331 + C3330) * C50607) * C50795 *
                C2303 +
            ((C3333 + C3332) * C696 + (C3335 + C3334) * C50607) * C50795 *
                C2304) *
               C943) *
              C50899 +
          ((((C2305 * C811 + C50911 * C819 + C2306 * C818 + C50781 * C834) *
                 C696 +
             (C2305 * C820 + C50911 * C835 + C2306 * C833 + C50781 * C842) *
                 C50607) *
                C50795 * C2302 +
            ((C2305 * C812 + C50911 * C821 + C2306 * C817 + C50781 * C832) *
                 C696 +
             (C2305 * C822 + C50911 * C836 + C2306 * C831 + C50781 * C841) *
                 C50607) *
                C50795 * C2303 +
            ((C2305 * C813 + C50911 * C823 + C2306 * C816 + C50781 * C830) *
                 C696 +
             (C2305 * C824 + C50911 * C837 + C2306 * C829 + C50781 * C840) *
                 C50607) *
                C50795 * C2304) *
               C942 -
           ((C2543 * C50607 + C2542 * C696) * C50795 * C2304 +
            ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C50795 *
                C2303 +
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50607 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C696) *
                C50795 * C2302) *
               C941 -
           (((C2306 * C3484 + C50781 * C3490 + C2305 * C1086 + C50911 * C1093) *
                 C50607 +
             (C2306 * C3481 + C50781 * C3485 + C2305 * C1081 + C50911 * C1087) *
                 C696) *
                C50795 * C2304 +
            ((C2306 * C3486 + C50781 * C3491 + C2305 * C1088 + C50911 * C1094) *
                 C50607 +
             (C2306 * C3482 + C50781 * C3487 + C2305 * C1082 + C50911 * C1089) *
                 C696) *
                C50795 * C2303 +
            ((C2306 * C3488 + C50781 * C3492 + C2305 * C1090 + C50911 * C1095) *
                 C50607 +
             (C2306 * C3483 + C50781 * C3489 + C2305 * C1083 + C50911 * C1091) *
                 C696) *
                C50795 * C2302) *
               C943) *
              C50684)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C283 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C278 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C284 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C279 +
           (C10862 * C124 + C10857 * C133 + C10863 * C288 + C10858 * C296 +
            C10864 * C589 + C10859 * C596 + C10865 * C698 + C10860 * C704) *
               C285 +
           (C10862 * C134 + C10857 * C145 + C10863 * C297 + C10858 * C306 +
            C10864 * C597 + C10859 * C604 + C10865 * C703 + C10860 * C710) *
               C280) *
              C50795 * C50629 * C50696 * C50899 +
          ((C10862 * C286 + C10857 * C292 + C10863 * C588 + C10858 * C594 +
            C10864 * C699 + C10859 * C706 + C10865 * C2996 + C10860 * C3001) *
               C284 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C278 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C283) +
           (C10862 * C295 + C10857 * C305 + C10863 * C595 + C10858 * C603 +
            C10864 * C705 + C10859 * C711 + C10865 * C3000 + C10860 * C3005) *
               C279 -
           (C10865 * C2995 + C10860 * C2999 + C10864 * C698 + C10859 * C704 +
            C10863 * C589 + C10858 * C596 + C10862 * C288 + C10857 * C296) *
               C285 -
           (C10865 * C2998 + C10860 * C3004 + C10864 * C703 + C10859 * C710 +
            C10863 * C597 + C10858 * C604 + C10862 * C297 + C10857 * C306) *
               C280) *
              C50795 * C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C696 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C50607) *
              C50795 * C50629 * C50696 * C692 -
          ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
            C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
               C50607 +
           (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
            C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
               C696) *
              C50795 * C50629 * C50696 * C693 +
          ((C10862 * C587 + C10857 * C592 + C10863 * C700 + C10858 * C708 +
            C10864 * C2997 + C10859 * C3003 + C10865 * C8730 + C10860 * C8734) *
               C696 +
           (C10862 * C593 + C10857 * C602 + C10863 * C707 + C10858 * C712 +
            C10864 * C3002 + C10859 * C3006 + C10865 * C8733 + C10860 * C8736) *
               C50607) *
              C50795 * C50629 * C50696 * C694 -
          ((C10865 * C11227 + C10860 * C11229 + C10864 * C8733 +
            C10859 * C8736 + C10863 * C3002 + C10858 * C3006 + C10862 * C707 +
            C10857 * C712) *
               C50607 +
           (C10865 * C11226 + C10860 * C11228 + C10864 * C8730 +
            C10859 * C8734 + C10863 * C2997 + C10858 * C3003 + C10862 * C700 +
            C10857 * C708) *
               C696) *
              C50795 * C50629 * C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
             C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
                C696 +
            (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
             C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
                C50607) *
               C50795 * C50629 * C941 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C50607 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C696) *
               C50795 * C50629 * C942 +
           ((C10862 * C944 + C10857 * C949 + C10863 * C1083 + C10858 * C1091 +
             C10864 * C3483 + C10859 * C3489 + C10865 * C9202 +
             C10860 * C9206) *
                C696 +
            (C10862 * C950 + C10857 * C959 + C10863 * C1090 + C10858 * C1095 +
             C10864 * C3488 + C10859 * C3492 + C10865 * C9205 +
             C10860 * C9208) *
                C50607) *
               C50795 * C50629 * C943) *
              C50899 +
          (((C10862 * C811 + C10857 * C819 + C10863 * C818 + C10858 * C834 +
             C10864 * C3155 + C10859 * C3161 + C10865 * C8884 +
             C10860 * C8888) *
                C696 +
            (C10862 * C820 + C10857 * C835 + C10863 * C833 + C10858 * C842 +
             C10864 * C3160 + C10859 * C3164 + C10865 * C8887 +
             C10860 * C8890) *
                C50607) *
               C50795 * C50629 * C942 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C50607 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C696) *
               C50795 * C50629 * C941 -
           ((C10865 * C11529 + C10860 * C11531 + C10864 * C9205 +
             C10859 * C9208 + C10863 * C3488 + C10858 * C3492 + C10862 * C1090 +
             C10857 * C1095) *
                C50607 +
            (C10865 * C11528 + C10860 * C11530 + C10864 * C9202 +
             C10859 * C9206 + C10863 * C3483 + C10858 * C3489 + C10862 * C1083 +
             C10857 * C1091) *
                C696) *
               C50795 * C50629 * C943) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C283 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C278 -
            (C2340 + C2341) * C284 - (C2342 + C2343) * C279 + C2356 * C285 +
            C2357 * C280) *
               C15422 +
           ((C2305 * C435 + C50911 * C442 + C2306 * C811 + C50781 * C819) *
                C283 +
            (C2305 * C441 + C50911 * C452 + C2306 * C820 + C50781 * C835) *
                C278 -
            (C2715 + C2714) * C284 - (C2717 + C2716) * C279 +
            (C2719 + C2718) * C285 + (C2721 + C2720) * C280) *
               C15423 +
           ((C2305 * C944 + C50911 * C949 + C2306 * C1083 + C50781 * C1091) *
                C283 +
            (C2305 * C950 + C50911 * C959 + C2306 * C1090 + C50781 * C1095) *
                C278 -
            (C3328 + C3329) * C284 - (C3330 + C3331) * C279 +
            (C3333 + C3332) * C285 + (C3335 + C3334) * C280) *
               C15424) *
              C50629 * C50696 * C50899 +
          (((C2530 + C2531) * C284 -
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C278 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C283) +
            (C2532 + C2533) * C279 - C2542 * C285 - C2543 * C280) *
               C15422 +
           ((C4107 + C4106) * C284 -
            ((C2306 * C833 + C50781 * C842 + C2305 * C820 + C50911 * C835) *
                 C278 +
             (C2306 * C818 + C50781 * C834 + C2305 * C811 + C50911 * C819) *
                 C283) +
            (C4109 + C4108) * C279 - (C4110 + C4111) * C285 -
            (C4112 + C4113) * C280) *
               C15423 +
           ((C2305 * C1082 + C50911 * C1089 + C2306 * C3482 + C50781 * C3487) *
                C284 -
            ((C2306 * C3488 + C50781 * C3492 + C2305 * C1090 + C50911 * C1095) *
                 C278 +
             (C2306 * C3483 + C50781 * C3489 + C2305 * C1083 + C50911 * C1091) *
                 C283) +
            (C2305 * C1088 + C50911 * C1094 + C2306 * C3486 + C50781 * C3491) *
                C279 -
            (C2306 * C3481 + C50781 * C3485 + C2305 * C1081 + C50911 * C1087) *
                C285 -
            (C2306 * C3484 + C50781 * C3490 + C2305 * C1086 + C50911 * C1093) *
                C280) *
               C15424) *
              C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C696 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50607) *
               C15422 +
           ((C18496 + C18497) * C696 + (C18498 + C18499) * C50607) * C15423 +
           ((C18500 + C18501) * C696 + (C18502 + C18503) * C50607) * C15424) *
              C50629 * C50696 * C692 -
          (((C2306 * C3488 + C50781 * C3492 + C2305 * C1090 + C50911 * C1095) *
                C50607 +
            (C2306 * C3483 + C50781 * C3489 + C2305 * C1083 + C50911 * C1091) *
                C696) *
               C15424 +
           ((C2306 * C833 + C50781 * C842 + C2305 * C820 + C50911 * C835) *
                C50607 +
            (C2306 * C818 + C50781 * C834 + C2305 * C811 + C50911 * C819) *
                C696) *
               C15423 +
           ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                C50607 +
            (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                C696) *
               C15422) *
              C50629 * C50696 * C693 +
          (((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                C696 +
            (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                C50607) *
               C15422 +
           ((C2305 * C818 + C50911 * C834 + C2306 * C3155 + C50781 * C3161) *
                C696 +
            (C2305 * C833 + C50911 * C842 + C2306 * C3160 + C50781 * C3164) *
                C50607) *
               C15423 +
           ((C2305 * C3483 + C50911 * C3489 + C2306 * C9202 + C50781 * C9206) *
                C696 +
            (C2305 * C3488 + C50911 * C3492 + C2306 * C9205 + C50781 * C9208) *
                C50607) *
               C15424) *
              C50629 * C50696 * C694 -
          (((C2306 * C11529 + C50781 * C11531 + C2305 * C9205 +
             C50911 * C9208) *
                C50607 +
            (C2306 * C11528 + C50781 * C11530 + C2305 * C9202 +
             C50911 * C9206) *
                C696) *
               C15424 +
           ((C2306 * C8887 + C50781 * C8890 + C2305 * C3160 + C50911 * C3164) *
                C50607 +
            (C2306 * C8884 + C50781 * C8888 + C2305 * C3155 + C50911 * C3161) *
                C696) *
               C15423 +
           ((C2306 * C3002 + C50781 * C3006 + C2305 * C707 + C50911 * C712) *
                C50607 +
            (C2306 * C2997 + C50781 * C3003 + C2305 * C700 + C50911 * C708) *
                C696) *
               C15422) *
              C50629 * C50696 * C695)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C696 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50607) *
                C15422 +
            ((C18496 + C18497) * C696 + (C18498 + C18499) * C50607) * C15423 +
            C19281 * C15424) *
               C50629 * C941 -
           (((C19114 + C19115) * C50607 + (C19116 + C19117) * C696) * C15424 +
            ((C18503 + C18502) * C50607 + (C18501 + C18500) * C696) * C15423 +
            ((C18499 + C18498) * C50607 + (C18497 + C18496) * C696) * C15422) *
               C50629 * C942 +
           (C19281 * C15422 +
            ((C19117 + C19116) * C696 + (C19115 + C19114) * C50607) * C15423 +
            ((C2305 * C6397 + C50911 * C6403 + C2306 * C13841 +
              C50781 * C13845) *
                 C696 +
             (C2305 * C6402 + C50911 * C6406 + C2306 * C13843 +
              C50781 * C13847) *
                 C50607) *
                C15424) *
               C50629 * C943) *
              C50899 +
          ((((C18926 + C18927) * C696 + (C18928 + C18929) * C50607) * C15422 +
            ((C18930 + C18931) * C696 + (C18932 + C18933) * C50607) * C15423 +
            ((C19282 + C19283) * C696 + (C19284 + C19285) * C50607) * C15424) *
               C50629 * C942 -
           (C19288 * C15424 +
            ((C18929 + C18928) * C50607 + (C18927 + C18926) * C696) * C15423 +
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50607 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C696) *
                C15422) *
               C50629 * C941 -
           (((C2306 * C13842 + C50781 * C13846 + C2305 * C13843 +
              C50911 * C13847) *
                 C50607 +
             (C2306 * C13840 + C50781 * C13844 + C2305 * C13841 +
              C50911 * C13845) *
                 C696) *
                C15424 +
            ((C19285 + C19284) * C50607 + (C19283 + C19282) * C696) * C15423 +
            C19288 * C15422) *
               C50629 * C943) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                    C283 +
                (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                    C278 -
                (C2340 + C2341) * C284 - (C2342 + C2343) * C279 + C2356 * C285 +
                C2357 * C280) *
                   C50795 * C2302 +
               ((C2341 + C2340) * C283 + (C2343 + C2342) * C278 -
                (C2345 + C2344) * C284 - (C2347 + C2346) * C279 +
                (C2349 + C2348) * C285 + (C2351 + C2350) * C280) *
                   C50795 * C2303 +
               (C2356 * C283 + C2357 * C278 - C2358 * C284 - C2359 * C279 +
                (C2353 + C2352) * C285 + (C2355 + C2354) * C280) *
                   C50795 * C2304) *
                  C50900 +
              (((C2714 + C2715) * C284 -
                ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                     C278 +
                 (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                     C283) +
                (C2716 + C2717) * C279 - C2726 * C285 - C2727 * C280) *
                   C50795 * C2302 +
               ((C2719 + C2718) * C284 -
                ((C2717 + C2716) * C278 + (C2715 + C2714) * C283) +
                (C2721 + C2720) * C279 - (C2722 + C2723) * C285 -
                (C2724 + C2725) * C280) *
                   C50795 * C2303 +
               ((C2723 + C2722) * C284 - (C2727 * C278 + C2726 * C283) +
                (C2725 + C2724) * C279 -
                (C2306 * C1523 + C50781 * C1524 + C2305 * C438 +
                 C50911 * C448) *
                    C285 -
                (C2306 * C1525 + C50781 * C1526 + C2305 * C449 +
                 C50911 * C456) *
                    C280) *
                   C50795 * C2304) *
                  C50708) *
             C50670 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                     C696 +
                 (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                     C50607) *
                    C50795 * C2302 +
                ((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C50795 *
                    C2303 +
                (C2356 * C696 + C2357 * C50607) * C50795 * C2304) *
                   C50900 -
               ((C2727 * C50607 + C2726 * C696) * C50795 * C2304 +
                ((C2717 + C2716) * C50607 + (C2715 + C2714) * C696) * C50795 *
                    C2303 +
                ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                     C50607 +
                 (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                     C696) *
                    C50795 * C2302) *
                   C50708) *
                  C582 +
              ((((C2305 * C811 + C50911 * C819 + C2306 * C818 + C50781 * C834) *
                     C696 +
                 (C2305 * C820 + C50911 * C835 + C2306 * C833 + C50781 * C842) *
                     C50607) *
                    C50795 * C2302 +
                ((C2305 * C812 + C50911 * C821 + C2306 * C817 + C50781 * C832) *
                     C696 +
                 (C2305 * C822 + C50911 * C836 + C2306 * C831 + C50781 * C841) *
                     C50607) *
                    C50795 * C2303 +
                ((C2305 * C813 + C50911 * C823 + C2306 * C816 + C50781 * C830) *
                     C696 +
                 (C2305 * C824 + C50911 * C837 + C2306 * C829 + C50781 * C840) *
                     C50607) *
                    C50795 * C2304) *
                   C50708 -
               ((C2543 * C50607 + C2542 * C696) * C50795 * C2304 +
                ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C50795 *
                    C2303 +
                ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                     C50607 +
                 (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                     C696) *
                    C50795 * C2302) *
                   C50900) *
                  C583 +
              ((((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                     C696 +
                 (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                     C50607) *
                    C50795 * C2302 +
                ((C2891 + C2890) * C696 + (C2893 + C2892) * C50607) * C50795 *
                    C2303 +
                ((C2895 + C2894) * C696 + (C2897 + C2896) * C50607) * C50795 *
                    C2304) *
                   C50900 -
               (((C2306 * C3156 + C50781 * C3162 + C2305 * C829 +
                  C50911 * C840) *
                     C50607 +
                 (C2306 * C3153 + C50781 * C3157 + C2305 * C816 +
                  C50911 * C830) *
                     C696) *
                    C50795 * C2304 +
                ((C2306 * C3158 + C50781 * C3163 + C2305 * C831 +
                  C50911 * C841) *
                     C50607 +
                 (C2306 * C3154 + C50781 * C3159 + C2305 * C817 +
                  C50911 * C832) *
                     C696) *
                    C50795 * C2303 +
                ((C2306 * C3160 + C50781 * C3164 + C2305 * C833 +
                  C50911 * C842) *
                     C50607 +
                 (C2306 * C3155 + C50781 * C3161 + C2305 * C818 +
                  C50911 * C834) *
                     C696) *
                    C50795 * C2302) *
                   C50708) *
                  C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C696 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50607) *
               C50795 * C2302 +
           ((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C50795 *
               C2303 +
           (C2356 * C696 + C2357 * C50607) * C50795 * C2304) *
              C1162 -
          ((C2727 * C50607 + C2726 * C696) * C50795 * C2304 +
           ((C2717 + C2716) * C50607 + (C2715 + C2714) * C696) * C50795 *
               C2303 +
           ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                C50607 +
            (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                C696) *
               C50795 * C2302) *
              C1163 +
          (((C2305 * C944 + C50911 * C949 + C2306 * C1083 + C50781 * C1091) *
                C696 +
            (C2305 * C950 + C50911 * C959 + C2306 * C1090 + C50781 * C1095) *
                C50607) *
               C50795 * C2302 +
           ((C3329 + C3328) * C696 + (C3331 + C3330) * C50607) * C50795 *
               C2303 +
           ((C3333 + C3332) * C696 + (C3335 + C3334) * C50607) * C50795 *
               C2304) *
              C1164 -
          (((C2306 * C3594 + C50781 * C3600 + C2305 * C1172 + C50911 * C1179) *
                C50607 +
            (C2306 * C3591 + C50781 * C3595 + C2305 * C1167 + C50911 * C1173) *
                C696) *
               C50795 * C2304 +
           ((C2306 * C3596 + C50781 * C3601 + C2305 * C1174 + C50911 * C1180) *
                C50607 +
            (C2306 * C3592 + C50781 * C3597 + C2305 * C1168 + C50911 * C1175) *
                C696) *
               C50795 * C2303 +
           ((C2306 * C3598 + C50781 * C3602 + C2305 * C1176 + C50911 * C1181) *
                C50607 +
            (C2306 * C3593 + C50781 * C3599 + C2305 * C1169 + C50911 * C1177) *
                C696) *
               C50795 * C2302) *
              C1165) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C283 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C278 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C284 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C279 +
           (C10862 * C124 + C10857 * C133 + C10863 * C288 + C10858 * C296 +
            C10864 * C589 + C10859 * C596 + C10865 * C698 + C10860 * C704) *
               C285 +
           (C10862 * C134 + C10857 * C145 + C10863 * C297 + C10858 * C306 +
            C10864 * C597 + C10859 * C604 + C10865 * C703 + C10860 * C710) *
               C280) *
              C50795 * C50629 * C50900 +
          ((C10862 * C434 + C10857 * C440 + C10863 * C812 + C10858 * C821 +
            C10864 * C817 + C10859 * C832 + C10865 * C3154 + C10860 * C3159) *
               C284 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C278 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C283) +
           (C10862 * C443 + C10857 * C453 + C10863 * C822 + C10858 * C836 +
            C10864 * C831 + C10859 * C841 + C10865 * C3158 + C10860 * C3163) *
               C279 -
           (C10865 * C3153 + C10860 * C3157 + C10864 * C816 + C10859 * C830 +
            C10863 * C813 + C10858 * C823 + C10862 * C436 + C10857 * C444) *
               C285 -
           (C10865 * C3156 + C10860 * C3162 + C10864 * C829 + C10859 * C840 +
            C10863 * C824 + C10858 * C837 + C10862 * C445 + C10857 * C454) *
               C280) *
              C50795 * C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
             C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
                C696 +
            (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
             C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
                C50607) *
               C50795 * C50629 * C50900 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C50607 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C696) *
               C50795 * C50629 * C50708) *
              C582 +
          (((C10862 * C811 + C10857 * C819 + C10863 * C818 + C10858 * C834 +
             C10864 * C3155 + C10859 * C3161 + C10865 * C8884 +
             C10860 * C8888) *
                C696 +
            (C10862 * C820 + C10857 * C835 + C10863 * C833 + C10858 * C842 +
             C10864 * C3160 + C10859 * C3164 + C10865 * C8887 +
             C10860 * C8890) *
                C50607) *
               C50795 * C50629 * C50708 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C50607 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C696) *
               C50795 * C50629 * C50900) *
              C583 +
          (((C10862 * C587 + C10857 * C592 + C10863 * C700 + C10858 * C708 +
             C10864 * C2997 + C10859 * C3003 + C10865 * C8730 +
             C10860 * C8734) *
                C696 +
            (C10862 * C593 + C10857 * C602 + C10863 * C707 + C10858 * C712 +
             C10864 * C3002 + C10859 * C3006 + C10865 * C8733 +
             C10860 * C8736) *
                C50607) *
               C50795 * C50629 * C50900 -
           ((C10865 * C11329 + C10860 * C11331 + C10864 * C8887 +
             C10859 * C8890 + C10863 * C3160 + C10858 * C3164 + C10862 * C833 +
             C10857 * C842) *
                C50607 +
            (C10865 * C11328 + C10860 * C11330 + C10864 * C8884 +
             C10859 * C8888 + C10863 * C3155 + C10858 * C3161 + C10862 * C818 +
             C10857 * C834) *
                C696) *
               C50795 * C50629 * C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C696 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C50607) *
              C50795 * C50629 * C1162 -
          ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
            C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
               C50607 +
           (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
            C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
               C696) *
              C50795 * C50629 * C1163 +
          ((C10862 * C944 + C10857 * C949 + C10863 * C1083 + C10858 * C1091 +
            C10864 * C3483 + C10859 * C3489 + C10865 * C9202 + C10860 * C9206) *
               C696 +
           (C10862 * C950 + C10857 * C959 + C10863 * C1090 + C10858 * C1095 +
            C10864 * C3488 + C10859 * C3492 + C10865 * C9205 + C10860 * C9208) *
               C50607) *
              C50795 * C50629 * C1164 -
          ((C10865 * C11599 + C10860 * C11601 + C10864 * C9311 +
            C10859 * C9314 + C10863 * C3598 + C10858 * C3602 + C10862 * C1176 +
            C10857 * C1181) *
               C50607 +
           (C10865 * C11598 + C10860 * C11600 + C10864 * C9308 +
            C10859 * C9312 + C10863 * C3593 + C10858 * C3599 + C10862 * C1169 +
            C10857 * C1177) *
               C696) *
              C50795 * C50629 * C1165) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C283 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C278 -
            (C2340 + C2341) * C284 - (C2342 + C2343) * C279 + C2356 * C285 +
            C2357 * C280) *
               C15422 +
           ((C18496 + C18497) * C283 + (C18498 + C18499) * C278 -
            (C2715 + C2714) * C284 - (C2717 + C2716) * C279 +
            (C2719 + C2718) * C285 + (C2721 + C2720) * C280) *
               C15423 +
           ((C18500 + C18501) * C283 + (C18502 + C18503) * C278 -
            (C3328 + C3329) * C284 - (C3330 + C3331) * C279 +
            (C3333 + C3332) * C285 + (C3335 + C3334) * C280) *
               C15424) *
              C50629 * C50900 +
          (((C2714 + C2715) * C284 -
            ((C18499 + C18498) * C278 + (C18497 + C18496) * C283) +
            (C2716 + C2717) * C279 - C2726 * C285 - C2727 * C280) *
               C15422 +
           ((C3329 + C3328) * C284 -
            ((C18503 + C18502) * C278 + (C18501 + C18500) * C283) +
            (C3331 + C3330) * C279 - (C3332 + C3333) * C285 -
            (C3334 + C3335) * C280) *
               C15423 +
           ((C2305 * C1168 + C50911 * C1175 + C2306 * C3592 + C50781 * C3597) *
                C284 -
            ((C2306 * C3598 + C50781 * C3602 + C2305 * C1176 + C50911 * C1181) *
                 C278 +
             (C2306 * C3593 + C50781 * C3599 + C2305 * C1169 + C50911 * C1177) *
                 C283) +
            (C2305 * C1174 + C50911 * C1180 + C2306 * C3596 + C50781 * C3601) *
                C279 -
            (C2306 * C3591 + C50781 * C3595 + C2305 * C1167 + C50911 * C1173) *
                C285 -
            (C2306 * C3594 + C50781 * C3600 + C2305 * C1172 + C50911 * C1179) *
                C280) *
               C15424) *
              C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C696 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50607) *
                C15422 +
            ((C18496 + C18497) * C696 + (C18498 + C18499) * C50607) * C15423 +
            ((C18500 + C18501) * C696 + (C18502 + C18503) * C50607) * C15424) *
               C50629 * C50900 -
           (((C2306 * C3598 + C50781 * C3602 + C2305 * C1176 + C50911 * C1181) *
                 C50607 +
             (C2306 * C3593 + C50781 * C3599 + C2305 * C1169 + C50911 * C1177) *
                 C696) *
                C15424 +
            ((C18503 + C18502) * C50607 + (C18501 + C18500) * C696) * C15423 +
            ((C18499 + C18498) * C50607 + (C18497 + C18496) * C696) * C15422) *
               C50629 * C50708) *
              C582 +
          ((((C18926 + C18927) * C696 + (C18928 + C18929) * C50607) * C15422 +
            ((C18930 + C18931) * C696 + (C18932 + C18933) * C50607) * C15423 +
            ((C2305 * C3593 + C50911 * C3599 + C2306 * C9308 + C50781 * C9312) *
                 C696 +
             (C2305 * C3598 + C50911 * C3602 + C2306 * C9311 + C50781 * C9314) *
                 C50607) *
                C15424) *
               C50629 * C50708 -
           (((C18933 + C18932) * C50607 + (C18931 + C18930) * C696) * C15424 +
            ((C18929 + C18928) * C50607 + (C18927 + C18926) * C696) * C15423 +
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50607 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C696) *
                C15422) *
               C50629 * C50900) *
              C583 +
          ((((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                 C696 +
             (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                 C50607) *
                C15422 +
            ((C18934 + C18935) * C696 + (C18936 + C18937) * C50607) * C15423 +
            ((C18938 + C18939) * C696 + (C18940 + C18941) * C50607) * C15424) *
               C50629 * C50900 -
           (((C2306 * C11599 + C50781 * C11601 + C2305 * C9311 +
              C50911 * C9314) *
                 C50607 +
             (C2306 * C11598 + C50781 * C11600 + C2305 * C9308 +
              C50911 * C9312) *
                 C696) *
                C15424 +
            ((C18941 + C18940) * C50607 + (C18939 + C18938) * C696) * C15423 +
            ((C18937 + C18936) * C50607 + (C18935 + C18934) * C696) * C15422) *
               C50629 * C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C696 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50607) *
               C15422 +
           ((C18496 + C18497) * C696 + (C18498 + C18499) * C50607) * C15423 +
           C19281 * C15424) *
              C50629 * C1162 -
          (C19407 * C15424 +
           ((C18503 + C18502) * C50607 + (C18501 + C18500) * C696) * C15423 +
           ((C18499 + C18498) * C50607 + (C18497 + C18496) * C696) * C15422) *
              C50629 * C1163 +
          (C19281 * C15422 +
           ((C19117 + C19116) * C696 + (C19115 + C19114) * C50607) * C15423 +
           ((C19403 + C19404) * C696 + (C19405 + C19406) * C50607) * C15424) *
              C50629 * C1164 -
          (((C2306 * C19387 + C50781 * C19389 + C2305 * C16573 +
             C50911 * C16576) *
                C50607 +
            (C2306 * C19386 + C50781 * C19388 + C2305 * C16570 +
             C50911 * C16574) *
                C696) *
               C15424 +
           ((C19406 + C19405) * C50607 + (C19404 + C19403) * C696) * C15423 +
           C19407 * C15422) *
              C50629 * C1165) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C1285 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C50942 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C1286 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C50926 +
           (C10862 * C124 + C10857 * C133 + C10863 * C288 + C10858 * C296 +
            C10864 * C589 + C10859 * C596 + C10865 * C698 + C10860 * C704) *
               C1287 +
           (C10862 * C134 + C10857 * C145 + C10863 * C297 + C10858 * C306 +
            C10864 * C597 + C10859 * C604 + C10865 * C703 + C10860 * C710) *
               C1282) *
              C50795 * C50629 * C1643 +
          ((C10862 * C434 + C10857 * C440 + C10863 * C812 + C10858 * C821 +
            C10864 * C817 + C10859 * C832 + C10865 * C3154 + C10860 * C3159) *
               C1286 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C50942 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C1285) +
           (C10862 * C443 + C10857 * C453 + C10863 * C822 + C10858 * C836 +
            C10864 * C831 + C10859 * C841 + C10865 * C3158 + C10860 * C3163) *
               C50926 -
           (C10865 * C3153 + C10860 * C3157 + C10864 * C816 + C10859 * C830 +
            C10863 * C813 + C10858 * C823 + C10862 * C436 + C10857 * C444) *
               C1287 -
           (C10865 * C3156 + C10860 * C3162 + C10864 * C829 + C10859 * C840 +
            C10863 * C824 + C10858 * C837 + C10862 * C445 + C10857 * C454) *
               C1282) *
              C50795 * C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C1285 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50942 -
            (C2340 + C2341) * C1286 - (C2342 + C2343) * C50926 + C2356 * C1287 +
            C2357 * C1282) *
               C50795 * C2302 +
           ((C2341 + C2340) * C1285 + (C2343 + C2342) * C50942 -
            (C2345 + C2344) * C1286 - (C2347 + C2346) * C50926 +
            (C2349 + C2348) * C1287 + (C2351 + C2350) * C1282) *
               C50795 * C2303 +
           (C2356 * C1285 + C2357 * C50942 - C2358 * C1286 - C2359 * C50926 +
            (C2353 + C2352) * C1287 + (C2355 + C2354) * C1282) *
               C50795 * C2304) *
              C1643 +
          (((C2714 + C2715) * C1286 -
            ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                 C50942 +
             (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                 C1285) +
            (C2716 + C2717) * C50926 - C2726 * C1287 - C2727 * C1282) *
               C50795 * C2302 +
           ((C2719 + C2718) * C1286 -
            ((C2717 + C2716) * C50942 + (C2715 + C2714) * C1285) +
            (C2721 + C2720) * C50926 - (C2722 + C2723) * C1287 -
            (C2724 + C2725) * C1282) *
               C50795 * C2303 +
           ((C2723 + C2722) * C1286 - (C2727 * C50942 + C2726 * C1285) +
            (C2725 + C2724) * C50926 -
            (C2306 * C1523 + C50781 * C1524 + C2305 * C438 + C50911 * C448) *
                C1287 -
            (C2306 * C1525 + C50781 * C1526 + C2305 * C449 + C50911 * C456) *
                C1282) *
               C50795 * C2304) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C1285 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50942 -
            (C2340 + C2341) * C1286 - (C2342 + C2343) * C50926 + C2356 * C1287 +
            C2357 * C1282) *
               C15422 +
           ((C18496 + C18497) * C1285 + (C18498 + C18499) * C50942 -
            (C2715 + C2714) * C1286 - (C2717 + C2716) * C50926 +
            (C2719 + C2718) * C1287 + (C2721 + C2720) * C1282) *
               C15423 +
           (C19088 * C1285 + C19089 * C50942 - C19090 * C1286 -
            C19091 * C50926 + (C3333 + C3332) * C1287 +
            (C3335 + C3334) * C1282) *
               C15424) *
              C50629 * C1643 +
          (((C2714 + C2715) * C1286 -
            ((C18499 + C18498) * C50942 + (C18497 + C18496) * C1285) +
            (C2716 + C2717) * C50926 - C2726 * C1287 - C2727 * C1282) *
               C15422 +
           ((C3329 + C3328) * C1286 -
            ((C18503 + C18502) * C50942 + (C18501 + C18500) * C1285) +
            (C3331 + C3330) * C50926 - (C3332 + C3333) * C1287 -
            (C3334 + C3335) * C1282) *
               C15423 +
           ((C19112 + C19113) * C1286 - (C19391 * C50942 + C19392 * C1285) +
            (C19118 + C19119) * C50926 -
            (C2306 * C3591 + C50781 * C3595 + C2305 * C1167 + C50911 * C1173) *
                C1287 -
            (C2306 * C3594 + C50781 * C3600 + C2305 * C1172 + C50911 * C1179) *
                C1282) *
               C15424) *
              C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
             C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
                C1391 +
            (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
             C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
                C1386 -
            (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
             C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
                C1392 -
            (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
             C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
                C50612) *
               C50795 * C50629 * C1643 +
           ((C10862 * C434 + C10857 * C440 + C10863 * C812 + C10858 * C821 +
             C10864 * C817 + C10859 * C832 + C10865 * C3154 + C10860 * C3159) *
                C1392 -
            ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
              C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                 C1386 +
             (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
              C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                 C1391) +
            (C10862 * C443 + C10857 * C453 + C10863 * C822 + C10858 * C836 +
             C10864 * C831 + C10859 * C841 + C10865 * C3158 + C10860 * C3163) *
                C50612) *
               C50795 * C50629 * C50708) *
              C50899 +
          (((C10862 * C286 + C10857 * C292 + C10863 * C588 + C10858 * C594 +
             C10864 * C699 + C10859 * C706 + C10865 * C2996 + C10860 * C3001) *
                C1392 -
            ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
              C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                 C1386 +
             (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
              C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                 C1391) +
            (C10862 * C295 + C10857 * C305 + C10863 * C595 + C10858 * C603 +
             C10864 * C705 + C10859 * C711 + C10865 * C3000 + C10860 * C3005) *
                C50612) *
               C50795 * C50629 * C1643 +
           ((C10862 * C811 + C10857 * C819 + C10863 * C818 + C10858 * C834 +
             C10864 * C3155 + C10859 * C3161 + C10865 * C8884 +
             C10860 * C8888) *
                C1391 +
            (C10862 * C820 + C10857 * C835 + C10863 * C833 + C10858 * C842 +
             C10864 * C3160 + C10859 * C3164 + C10865 * C8887 +
             C10860 * C8890) *
                C1386 -
            (C10865 * C8883 + C10860 * C8886 + C10864 * C3154 + C10859 * C3159 +
             C10863 * C817 + C10858 * C832 + C10862 * C812 + C10857 * C821) *
                C1392 -
            (C10865 * C8885 + C10860 * C8889 + C10864 * C3158 + C10859 * C3163 +
             C10863 * C831 + C10858 * C841 + C10862 * C822 + C10857 * C836) *
                C50612) *
               C50795 * C50629 * C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C1391 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C1386 -
             (C2340 + C2341) * C1392 - (C2342 + C2343) * C50612) *
                C50795 * C2302 +
            ((C2341 + C2340) * C1391 + (C2343 + C2342) * C1386 -
             (C2345 + C2344) * C1392 - (C2347 + C2346) * C50612) *
                C50795 * C2303 +
            (C2356 * C1391 + C2357 * C1386 - C2358 * C1392 - C2359 * C50612) *
                C50795 * C2304) *
               C1643 +
           (((C2714 + C2715) * C1392 -
             ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                  C1386 +
              (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                  C1391) +
             (C2716 + C2717) * C50612) *
                C50795 * C2302 +
            ((C2719 + C2718) * C1392 -
             ((C2717 + C2716) * C1386 + (C2715 + C2714) * C1391) +
             (C2721 + C2720) * C50612) *
                C50795 * C2303 +
            ((C2723 + C2722) * C1392 - (C2727 * C1386 + C2726 * C1391) +
             (C2725 + C2724) * C50612) *
                C50795 * C2304) *
               C50708) *
              C50899 +
          ((((C2530 + C2531) * C1392 -
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C1386 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C1391) +
             (C2532 + C2533) * C50612) *
                C50795 * C2302 +
            ((C2535 + C2534) * C1392 -
             ((C2533 + C2532) * C1386 + (C2531 + C2530) * C1391) +
             (C2537 + C2536) * C50612) *
                C50795 * C2303 +
            ((C2539 + C2538) * C1392 - (C2543 * C1386 + C2542 * C1391) +
             (C2541 + C2540) * C50612) *
                C50795 * C2304) *
               C1643 +
           (((C2305 * C811 + C50911 * C819 + C2306 * C818 + C50781 * C834) *
                 C1391 +
             (C2305 * C820 + C50911 * C835 + C2306 * C833 + C50781 * C842) *
                 C1386 -
             (C4106 + C4107) * C1392 - (C4108 + C4109) * C50612) *
                C50795 * C2302 +
            ((C4107 + C4106) * C1391 + (C4109 + C4108) * C1386 -
             (C4110 + C4111) * C1392 - (C4112 + C4113) * C50612) *
                C50795 * C2303 +
            ((C4111 + C4110) * C1391 + (C4113 + C4112) * C1386 -
             (C2306 * C815 + C50781 * C828 + C2305 * C814 + C50911 * C825) *
                 C1392 -
             (C2306 * C827 + C50781 * C839 + C2305 * C826 + C50911 * C838) *
                 C50612) *
                C50795 * C2304) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C1391 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C1386 -
             (C2340 + C2341) * C1392 - (C2342 + C2343) * C50612) *
                C15422 +
            ((C18496 + C18497) * C1391 + (C18498 + C18499) * C1386 -
             (C2715 + C2714) * C1392 - (C2717 + C2716) * C50612) *
                C15423 +
            (C19088 * C1391 + C19089 * C1386 - C19090 * C1392 -
             C19091 * C50612) *
                C15424) *
               C50629 * C1643 +
           (((C2714 + C2715) * C1392 -
             ((C18499 + C18498) * C1386 + (C18497 + C18496) * C1391) +
             (C2716 + C2717) * C50612) *
                C15422 +
            ((C3329 + C3328) * C1392 -
             ((C18503 + C18502) * C1386 + (C18501 + C18500) * C1391) +
             (C3331 + C3330) * C50612) *
                C15423 +
            ((C19112 + C19113) * C1392 - (C19391 * C1386 + C19392 * C1391) +
             (C19118 + C19119) * C50612) *
                C15424) *
               C50629 * C50708) *
              C50899 +
          ((((C2530 + C2531) * C1392 -
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C1386 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C1391) +
             (C2532 + C2533) * C50612) *
                C15422 +
            ((C4107 + C4106) * C1392 -
             ((C18929 + C18928) * C1386 + (C18927 + C18926) * C1391) +
             (C4109 + C4108) * C50612) *
                C15423 +
            ((C19902 + C19903) * C1392 - (C19279 * C1386 + C19280 * C1391) +
             (C19904 + C19905) * C50612) *
                C15424) *
               C50629 * C1643 +
           (((C18926 + C18927) * C1391 + (C18928 + C18929) * C1386 -
             (C4106 + C4107) * C1392 - (C4108 + C4109) * C50612) *
                C15422 +
            ((C18930 + C18931) * C1391 + (C18932 + C18933) * C1386 -
             (C19903 + C19902) * C1392 - (C19905 + C19904) * C50612) *
                C15423 +
            ((C19282 + C19283) * C1391 + (C19284 + C19285) * C1386 -
             (C2306 * C9307 + C50781 * C9310 + C2305 * C3592 + C50911 * C3597) *
                 C1392 -
             (C2306 * C9309 + C50781 * C9313 + C2305 * C3596 + C50911 * C3601) *
                 C50612) *
                C15424) *
               C50629 * C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C1391 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C1386 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C1392 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C50612) *
              C50795 * C50629 * C50945 +
          ((C10862 * C434 + C10857 * C440 + C10863 * C812 + C10858 * C821 +
            C10864 * C817 + C10859 * C832 + C10865 * C3154 + C10860 * C3159) *
               C1392 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C1386 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C1391) +
           (C10862 * C443 + C10857 * C453 + C10863 * C822 + C10858 * C836 +
            C10864 * C831 + C10859 * C841 + C10865 * C3158 + C10860 * C3163) *
               C50612) *
              C50795 * C50629 * C50935 +
          ((C10862 * C944 + C10857 * C949 + C10863 * C1083 + C10858 * C1091 +
            C10864 * C3483 + C10859 * C3489 + C10865 * C9202 + C10860 * C9206) *
               C1391 +
           (C10862 * C950 + C10857 * C959 + C10863 * C1090 + C10858 * C1095 +
            C10864 * C3488 + C10859 * C3492 + C10865 * C9205 + C10860 * C9208) *
               C1386 -
           (C10865 * C9201 + C10860 * C9204 + C10864 * C3482 + C10859 * C3487 +
            C10863 * C1082 + C10858 * C1089 + C10862 * C945 + C10857 * C951) *
               C1392 -
           (C10865 * C9203 + C10860 * C9207 + C10864 * C3486 + C10859 * C3491 +
            C10863 * C1088 + C10858 * C1094 + C10862 * C952 + C10857 * C960) *
               C50612) *
              C50795 * C50629 * C1875) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C1391 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C1386 -
            (C2340 + C2341) * C1392 - (C2342 + C2343) * C50612) *
               C50795 * C2302 +
           ((C2341 + C2340) * C1391 + (C2343 + C2342) * C1386 -
            (C2345 + C2344) * C1392 - (C2347 + C2346) * C50612) *
               C50795 * C2303 +
           (C2356 * C1391 + C2357 * C1386 - C2358 * C1392 - C2359 * C50612) *
               C50795 * C2304) *
              C50945 +
          (((C2714 + C2715) * C1392 -
            ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                 C1386 +
             (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                 C1391) +
            (C2716 + C2717) * C50612) *
               C50795 * C2302 +
           ((C2719 + C2718) * C1392 -
            ((C2717 + C2716) * C1386 + (C2715 + C2714) * C1391) +
            (C2721 + C2720) * C50612) *
               C50795 * C2303 +
           ((C2723 + C2722) * C1392 - (C2727 * C1386 + C2726 * C1391) +
            (C2725 + C2724) * C50612) *
               C50795 * C2304) *
              C50935 +
          (((C2305 * C944 + C50911 * C949 + C2306 * C1083 + C50781 * C1091) *
                C1391 +
            (C2305 * C950 + C50911 * C959 + C2306 * C1090 + C50781 * C1095) *
                C1386 -
            (C3328 + C3329) * C1392 - (C3330 + C3331) * C50612) *
               C50795 * C2302 +
           ((C3329 + C3328) * C1391 + (C3331 + C3330) * C1386 -
            (C3332 + C3333) * C1392 - (C3334 + C3335) * C50612) *
               C50795 * C2303 +
           ((C3333 + C3332) * C1391 + (C3335 + C3334) * C1386 -
            (C2306 * C1080 + C50781 * C1085 + C2305 * C947 + C50911 * C955) *
                C1392 -
            (C2306 * C1084 + C50781 * C1092 + C2305 * C956 + C50911 * C962) *
                C50612) *
               C50795 * C2304) *
              C1875) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C1391 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C1386 -
            (C2340 + C2341) * C1392 - (C2342 + C2343) * C50612) *
               C15422 +
           ((C18496 + C18497) * C1391 + (C18498 + C18499) * C1386 -
            (C2715 + C2714) * C1392 - (C2717 + C2716) * C50612) *
               C15423 +
           C20398 * C15424) *
              C50629 * C50945 +
          (((C2714 + C2715) * C1392 -
            ((C18499 + C18498) * C1386 + (C18497 + C18496) * C1391) +
            (C2716 + C2717) * C50612) *
               C15422 +
           ((C3329 + C3328) * C1392 -
            ((C18503 + C18502) * C1386 + (C18501 + C18500) * C1391) +
            (C3331 + C3330) * C50612) *
               C15423 +
           ((C19112 + C19113) * C1392 - (C19391 * C1386 + C19392 * C1391) +
            (C19118 + C19119) * C50612) *
               C15424) *
              C50629 * C50935 +
          (C20398 * C15422 +
           ((C19117 + C19116) * C1391 + (C19115 + C19114) * C1386 -
            (C19113 + C19112) * C1392 - (C19119 + C19118) * C50612) *
               C15423 +
           ((C19403 + C19404) * C1391 + (C19405 + C19406) * C1386 -
            (C2306 * C16447 + C50781 * C16449 + C2305 * C6396 +
             C50911 * C6401) *
                C1392 -
            (C2306 * C16448 + C50781 * C16450 + C2305 * C6400 +
             C50911 * C6405) *
                C50612) *
               C15424) *
              C50629 * C1875) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C49720 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50884 -
            (C2340 + C2341) * C49713 - (C2342 + C2343) * C50612) *
               C50795 * C2302 +
           ((C2341 + C2340) * C49720 + (C2343 + C2342) * C50884 -
            (C2345 + C2344) * C49713 - (C2347 + C2346) * C50612) *
               C50795 * C2303 +
           (C2356 * C49720 + C2357 * C50884 - C2358 * C49713 - C2359 * C50612) *
               C50795 * C2304) *
              C50696 * C582 +
          (((C2530 + C2531) * C49713 -
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50884 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C49720) +
            (C2532 + C2533) * C50612) *
               C50795 * C2302 +
           ((C2535 + C2534) * C49713 -
            ((C2533 + C2532) * C50884 + (C2531 + C2530) * C49720) +
            (C2537 + C2536) * C50612) *
               C50795 * C2303 +
           ((C2539 + C2538) * C49713 - (C2543 * C50884 + C2542 * C49720) +
            (C2541 + C2540) * C50612) *
               C50795 * C2304) *
              C50696 * C583 +
          (((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                C49720 +
            (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                C50884 -
            (C2890 + C2891) * C49713 - (C2892 + C2893) * C50612) *
               C50795 * C2302 +
           ((C2891 + C2890) * C49720 + (C2893 + C2892) * C50884 -
            (C2894 + C2895) * C49713 - (C2896 + C2897) * C50612) *
               C50795 * C2303 +
           ((C2895 + C2894) * C49720 + (C2897 + C2896) * C50884 -
            (C2306 * C697 + C50781 * C702 + C2305 * C590 + C50911 * C598) *
                C49713 -
            (C2306 * C701 + C50781 * C709 + C2305 * C599 + C50911 * C605) *
                C50612) *
               C50795 * C2304) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
               C118 +
           (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
               C106 -
           (C2340 + C2341) * C119 - (C2342 + C2343) * C107 + C2356 * C120 +
           C2357 * C108 - C2358 * C121 - C2359 * C109) *
              C50795 * C2302 +
          ((C2341 + C2340) * C118 + (C2343 + C2342) * C106 -
           (C2345 + C2344) * C119 - (C2347 + C2346) * C107 +
           (C2349 + C2348) * C120 + (C2351 + C2350) * C108 -
           (C2352 + C2353) * C121 - (C2354 + C2355) * C109) *
              C50795 * C2303 +
          (C2356 * C118 + C2357 * C106 - C2358 * C119 - C2359 * C107 +
           (C2353 + C2352) * C120 + (C2355 + C2354) * C108 -
           (C2306 * C291 + C50781 * C302 + C2305 * C127 + C50911 * C139) *
               C121 -
           (C2306 * C303 + C50781 * C309 + C2305 * C140 + C50911 * C148) *
               C109) *
              C50795 * C2304) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
           C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
              C118 +
          (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
           C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
              C106 -
          (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
           C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
              C119 -
          (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
           C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
              C107 +
          (C10862 * C124 + C10857 * C133 + C10863 * C288 + C10858 * C296 +
           C10864 * C589 + C10859 * C596 + C10865 * C698 + C10860 * C704) *
              C120 +
          (C10862 * C134 + C10857 * C145 + C10863 * C297 + C10858 * C306 +
           C10864 * C597 + C10859 * C604 + C10865 * C703 + C10860 * C710) *
              C108 -
          (C10865 * C697 + C10860 * C702 + C10864 * C590 + C10859 * C598 +
           C10863 * C289 + C10858 * C298 + C10862 * C125 + C10857 * C135) *
              C121 -
          (C10865 * C701 + C10860 * C709 + C10864 * C599 + C10859 * C605 +
           C10863 * C299 + C10858 * C307 + C10862 * C136 + C10857 * C146) *
              C109) *
         C50795 * C50629 * C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C49720 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C50884 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C49713 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C50612) *
              C50795 * C50629 * C50696 * C582 +
          ((C10862 * C286 + C10857 * C292 + C10863 * C588 + C10858 * C594 +
            C10864 * C699 + C10859 * C706 + C10865 * C2996 + C10860 * C3001) *
               C49713 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C50884 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C49720) +
           (C10862 * C295 + C10857 * C305 + C10863 * C595 + C10858 * C603 +
            C10864 * C705 + C10859 * C711 + C10865 * C3000 + C10860 * C3005) *
               C50612) *
              C50795 * C50629 * C50696 * C583 +
          ((C10862 * C587 + C10857 * C592 + C10863 * C700 + C10858 * C708 +
            C10864 * C2997 + C10859 * C3003 + C10865 * C8730 + C10860 * C8734) *
               C49720 +
           (C10862 * C593 + C10857 * C602 + C10863 * C707 + C10858 * C712 +
            C10864 * C3002 + C10859 * C3006 + C10865 * C8733 + C10860 * C8736) *
               C50884 -
           (C10865 * C8729 + C10860 * C8732 + C10864 * C2996 + C10859 * C3001 +
            C10863 * C699 + C10858 * C706 + C10862 * C588 + C10857 * C594) *
               C49713 -
           (C10865 * C8731 + C10860 * C8735 + C10864 * C3000 + C10859 * C3005 +
            C10863 * C705 + C10858 * C711 + C10862 * C595 + C10857 * C603) *
               C50612) *
              C50795 * C50629 * C50696 * C584)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
               C118 +
           (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
               C106 -
           (C2340 + C2341) * C119 - (C2342 + C2343) * C107 + C2356 * C120 +
           C2357 * C108 - C2358 * C121 - C2359 * C109) *
              C15422 +
          ((C2305 * C435 + C50911 * C442 + C2306 * C811 + C50781 * C819) *
               C118 +
           (C2305 * C441 + C50911 * C452 + C2306 * C820 + C50781 * C835) *
               C106 -
           (C2715 + C2714) * C119 - (C2717 + C2716) * C107 +
           (C2719 + C2718) * C120 + (C2721 + C2720) * C108 -
           (C2722 + C2723) * C121 - (C2724 + C2725) * C109) *
              C15423 +
          ((C2305 * C944 + C50911 * C949 + C2306 * C1083 + C50781 * C1091) *
               C118 +
           (C2305 * C950 + C50911 * C959 + C2306 * C1090 + C50781 * C1095) *
               C106 -
           (C3328 + C3329) * C119 - (C3330 + C3331) * C107 +
           (C3333 + C3332) * C120 + (C3335 + C3334) * C108 -
           (C2306 * C1080 + C50781 * C1085 + C2305 * C947 + C50911 * C955) *
               C121 -
           (C2306 * C1084 + C50781 * C1092 + C2305 * C956 + C50911 * C962) *
               C109) *
              C15424) *
         C50629 * C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C49720 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50884 -
            (C2340 + C2341) * C49713 - (C2342 + C2343) * C50612) *
               C15422 +
           ((C18496 + C18497) * C49720 + (C18498 + C18499) * C50884 -
            (C2715 + C2714) * C49713 - (C2717 + C2716) * C50612) *
               C15423 +
           ((C18500 + C18501) * C49720 + (C18502 + C18503) * C50884 -
            (C3328 + C3329) * C49713 - (C3330 + C3331) * C50612) *
               C15424) *
              C50629 * C50696 * C582 +
          (((C2530 + C2531) * C49713 -
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50884 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C49720) +
            (C2532 + C2533) * C50612) *
               C15422 +
           ((C4107 + C4106) * C49713 -
            ((C2306 * C833 + C50781 * C842 + C2305 * C820 + C50911 * C835) *
                 C50884 +
             (C2306 * C818 + C50781 * C834 + C2305 * C811 + C50911 * C819) *
                 C49720) +
            (C4109 + C4108) * C50612) *
               C15423 +
           ((C2305 * C1082 + C50911 * C1089 + C2306 * C3482 + C50781 * C3487) *
                C49713 -
            ((C2306 * C3488 + C50781 * C3492 + C2305 * C1090 + C50911 * C1095) *
                 C50884 +
             (C2306 * C3483 + C50781 * C3489 + C2305 * C1083 + C50911 * C1091) *
                 C49720) +
            (C2305 * C1088 + C50911 * C1094 + C2306 * C3486 + C50781 * C3491) *
                C50612) *
               C15424) *
              C50629 * C50696 * C583 +
          (((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                C49720 +
            (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                C50884 -
            (C2890 + C2891) * C49713 - (C2892 + C2893) * C50612) *
               C15422 +
           ((C2305 * C818 + C50911 * C834 + C2306 * C3155 + C50781 * C3161) *
                C49720 +
            (C2305 * C833 + C50911 * C842 + C2306 * C3160 + C50781 * C3164) *
                C50884 -
            (C2306 * C3154 + C50781 * C3159 + C2305 * C817 + C50911 * C832) *
                C49713 -
            (C2306 * C3158 + C50781 * C3163 + C2305 * C831 + C50911 * C841) *
                C50612) *
               C15423 +
           ((C2305 * C3483 + C50911 * C3489 + C2306 * C9202 + C50781 * C9206) *
                C49720 +
            (C2305 * C3488 + C50911 * C3492 + C2306 * C9205 + C50781 * C9208) *
                C50884 -
            (C2306 * C9201 + C50781 * C9204 + C2305 * C3482 + C50911 * C3487) *
                C49713 -
            (C2306 * C9203 + C50781 * C9207 + C2305 * C3486 + C50911 * C3491) *
                C50612) *
               C15424) *
              C50629 * C50696 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C696 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50607) *
               C50795 * C2302 +
           ((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C50795 *
               C2303 +
           (C2356 * C696 + C2357 * C50607) * C50795 * C2304) *
              C50696 * C692 -
          ((C2543 * C50607 + C2542 * C696) * C50795 * C2304 +
           ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C50795 *
               C2303 +
           ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                C50607 +
            (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                C696) *
               C50795 * C2302) *
              C50696 * C693 +
          (((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                C696 +
            (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                C50607) *
               C50795 * C2302 +
           ((C2891 + C2890) * C696 + (C2893 + C2892) * C50607) * C50795 *
               C2303 +
           ((C2895 + C2894) * C696 + (C2897 + C2896) * C50607) * C50795 *
               C2304) *
              C50696 * C694 -
          (((C2306 * C2998 + C50781 * C3004 + C2305 * C703 + C50911 * C710) *
                C50607 +
            (C2306 * C2995 + C50781 * C2999 + C2305 * C698 + C50911 * C704) *
                C696) *
               C50795 * C2304 +
           ((C2306 * C3000 + C50781 * C3005 + C2305 * C705 + C50911 * C711) *
                C50607 +
            (C2306 * C2996 + C50781 * C3001 + C2305 * C699 + C50911 * C706) *
                C696) *
               C50795 * C2303 +
           ((C2306 * C3002 + C50781 * C3006 + C2305 * C707 + C50911 * C712) *
                C50607 +
            (C2306 * C2997 + C50781 * C3003 + C2305 * C700 + C50911 * C708) *
                C696) *
               C50795 * C2302) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C283 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C278 -
            (C2340 + C2341) * C284 - (C2342 + C2343) * C279 + C2356 * C285 +
            C2357 * C280) *
               C50795 * C2302 +
           ((C2341 + C2340) * C283 + (C2343 + C2342) * C278 -
            (C2345 + C2344) * C284 - (C2347 + C2346) * C279 +
            (C2349 + C2348) * C285 + (C2351 + C2350) * C280) *
               C50795 * C2303 +
           (C2356 * C283 + C2357 * C278 - C2358 * C284 - C2359 * C279 +
            (C2353 + C2352) * C285 + (C2355 + C2354) * C280) *
               C50795 * C2304) *
              C50696 * C50899 +
          (((C2530 + C2531) * C284 -
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C278 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C283) +
            (C2532 + C2533) * C279 - C2542 * C285 - C2543 * C280) *
               C50795 * C2302 +
           ((C2535 + C2534) * C284 -
            ((C2533 + C2532) * C278 + (C2531 + C2530) * C283) +
            (C2537 + C2536) * C279 - (C2538 + C2539) * C285 -
            (C2540 + C2541) * C280) *
               C50795 * C2303 +
           ((C2539 + C2538) * C284 - (C2543 * C278 + C2542 * C283) +
            (C2541 + C2540) * C279 -
            (C2306 * C591 + C50781 * C600 + C2305 * C290 + C50911 * C300) *
                C285 -
            (C2306 * C601 + C50781 * C606 + C2305 * C301 + C50911 * C308) *
                C280) *
               C50795 * C2304) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C283 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C278 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C284 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C279 +
           (C10862 * C124 + C10857 * C133 + C10863 * C288 + C10858 * C296 +
            C10864 * C589 + C10859 * C596 + C10865 * C698 + C10860 * C704) *
               C285 +
           (C10862 * C134 + C10857 * C145 + C10863 * C297 + C10858 * C306 +
            C10864 * C597 + C10859 * C604 + C10865 * C703 + C10860 * C710) *
               C280) *
              C50795 * C50629 * C50696 * C50899 +
          ((C10862 * C286 + C10857 * C292 + C10863 * C588 + C10858 * C594 +
            C10864 * C699 + C10859 * C706 + C10865 * C2996 + C10860 * C3001) *
               C284 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C278 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C283) +
           (C10862 * C295 + C10857 * C305 + C10863 * C595 + C10858 * C603 +
            C10864 * C705 + C10859 * C711 + C10865 * C3000 + C10860 * C3005) *
               C279 -
           (C10865 * C2995 + C10860 * C2999 + C10864 * C698 + C10859 * C704 +
            C10863 * C589 + C10858 * C596 + C10862 * C288 + C10857 * C296) *
               C285 -
           (C10865 * C2998 + C10860 * C3004 + C10864 * C703 + C10859 * C710 +
            C10863 * C597 + C10858 * C604 + C10862 * C297 + C10857 * C306) *
               C280) *
              C50795 * C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C696 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C50607) *
              C50795 * C50629 * C50696 * C692 -
          ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
            C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
               C50607 +
           (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
            C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
               C696) *
              C50795 * C50629 * C50696 * C693 +
          ((C10862 * C587 + C10857 * C592 + C10863 * C700 + C10858 * C708 +
            C10864 * C2997 + C10859 * C3003 + C10865 * C8730 + C10860 * C8734) *
               C696 +
           (C10862 * C593 + C10857 * C602 + C10863 * C707 + C10858 * C712 +
            C10864 * C3002 + C10859 * C3006 + C10865 * C8733 + C10860 * C8736) *
               C50607) *
              C50795 * C50629 * C50696 * C694 -
          ((C10865 * C11227 + C10860 * C11229 + C10864 * C8733 +
            C10859 * C8736 + C10863 * C3002 + C10858 * C3006 + C10862 * C707 +
            C10857 * C712) *
               C50607 +
           (C10865 * C11226 + C10860 * C11228 + C10864 * C8730 +
            C10859 * C8734 + C10863 * C2997 + C10858 * C3003 + C10862 * C700 +
            C10857 * C708) *
               C696) *
              C50795 * C50629 * C50696 * C695)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C283 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C278 -
            (C2340 + C2341) * C284 - (C2342 + C2343) * C279 + C2356 * C285 +
            C2357 * C280) *
               C15422 +
           ((C2305 * C435 + C50911 * C442 + C2306 * C811 + C50781 * C819) *
                C283 +
            (C2305 * C441 + C50911 * C452 + C2306 * C820 + C50781 * C835) *
                C278 -
            (C2715 + C2714) * C284 - (C2717 + C2716) * C279 +
            (C2719 + C2718) * C285 + (C2721 + C2720) * C280) *
               C15423 +
           ((C2305 * C944 + C50911 * C949 + C2306 * C1083 + C50781 * C1091) *
                C283 +
            (C2305 * C950 + C50911 * C959 + C2306 * C1090 + C50781 * C1095) *
                C278 -
            (C3328 + C3329) * C284 - (C3330 + C3331) * C279 +
            (C3333 + C3332) * C285 + (C3335 + C3334) * C280) *
               C15424) *
              C50629 * C50696 * C50899 +
          (((C2530 + C2531) * C284 -
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C278 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C283) +
            (C2532 + C2533) * C279 - C2542 * C285 - C2543 * C280) *
               C15422 +
           ((C4107 + C4106) * C284 -
            ((C2306 * C833 + C50781 * C842 + C2305 * C820 + C50911 * C835) *
                 C278 +
             (C2306 * C818 + C50781 * C834 + C2305 * C811 + C50911 * C819) *
                 C283) +
            (C4109 + C4108) * C279 - (C4110 + C4111) * C285 -
            (C4112 + C4113) * C280) *
               C15423 +
           ((C2305 * C1082 + C50911 * C1089 + C2306 * C3482 + C50781 * C3487) *
                C284 -
            ((C2306 * C3488 + C50781 * C3492 + C2305 * C1090 + C50911 * C1095) *
                 C278 +
             (C2306 * C3483 + C50781 * C3489 + C2305 * C1083 + C50911 * C1091) *
                 C283) +
            (C2305 * C1088 + C50911 * C1094 + C2306 * C3486 + C50781 * C3491) *
                C279 -
            (C2306 * C3481 + C50781 * C3485 + C2305 * C1081 + C50911 * C1087) *
                C285 -
            (C2306 * C3484 + C50781 * C3490 + C2305 * C1086 + C50911 * C1093) *
                C280) *
               C15424) *
              C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C696 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50607) *
               C15422 +
           ((C18496 + C18497) * C696 + (C18498 + C18499) * C50607) * C15423 +
           ((C18500 + C18501) * C696 + (C18502 + C18503) * C50607) * C15424) *
              C50629 * C50696 * C692 -
          (((C2306 * C3488 + C50781 * C3492 + C2305 * C1090 + C50911 * C1095) *
                C50607 +
            (C2306 * C3483 + C50781 * C3489 + C2305 * C1083 + C50911 * C1091) *
                C696) *
               C15424 +
           ((C2306 * C833 + C50781 * C842 + C2305 * C820 + C50911 * C835) *
                C50607 +
            (C2306 * C818 + C50781 * C834 + C2305 * C811 + C50911 * C819) *
                C696) *
               C15423 +
           ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                C50607 +
            (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                C696) *
               C15422) *
              C50629 * C50696 * C693 +
          (((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                C696 +
            (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                C50607) *
               C15422 +
           ((C2305 * C818 + C50911 * C834 + C2306 * C3155 + C50781 * C3161) *
                C696 +
            (C2305 * C833 + C50911 * C842 + C2306 * C3160 + C50781 * C3164) *
                C50607) *
               C15423 +
           ((C2305 * C3483 + C50911 * C3489 + C2306 * C9202 + C50781 * C9206) *
                C696 +
            (C2305 * C3488 + C50911 * C3492 + C2306 * C9205 + C50781 * C9208) *
                C50607) *
               C15424) *
              C50629 * C50696 * C694 -
          (((C2306 * C11529 + C50781 * C11531 + C2305 * C9205 +
             C50911 * C9208) *
                C50607 +
            (C2306 * C11528 + C50781 * C11530 + C2305 * C9202 +
             C50911 * C9206) *
                C696) *
               C15424 +
           ((C2306 * C8887 + C50781 * C8890 + C2305 * C3160 + C50911 * C3164) *
                C50607 +
            (C2306 * C8884 + C50781 * C8888 + C2305 * C3155 + C50911 * C3161) *
                C696) *
               C15423 +
           ((C2306 * C3002 + C50781 * C3006 + C2305 * C707 + C50911 * C712) *
                C50607 +
            (C2306 * C2997 + C50781 * C3003 + C2305 * C700 + C50911 * C708) *
                C696) *
               C15422) *
              C50629 * C50696 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C696 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50607) *
                C50795 * C2302 +
            ((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C50795 *
                C2303 +
            (C2356 * C696 + C2357 * C50607) * C50795 * C2304) *
               C50900 -
           ((C2727 * C50607 + C2726 * C696) * C50795 * C2304 +
            ((C2717 + C2716) * C50607 + (C2715 + C2714) * C696) * C50795 *
                C2303 +
            ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                 C50607 +
             (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                 C696) *
                C50795 * C2302) *
               C50708) *
              C582 +
          ((((C2305 * C811 + C50911 * C819 + C2306 * C818 + C50781 * C834) *
                 C696 +
             (C2305 * C820 + C50911 * C835 + C2306 * C833 + C50781 * C842) *
                 C50607) *
                C50795 * C2302 +
            ((C2305 * C812 + C50911 * C821 + C2306 * C817 + C50781 * C832) *
                 C696 +
             (C2305 * C822 + C50911 * C836 + C2306 * C831 + C50781 * C841) *
                 C50607) *
                C50795 * C2303 +
            ((C2305 * C813 + C50911 * C823 + C2306 * C816 + C50781 * C830) *
                 C696 +
             (C2305 * C824 + C50911 * C837 + C2306 * C829 + C50781 * C840) *
                 C50607) *
                C50795 * C2304) *
               C50708 -
           ((C2543 * C50607 + C2542 * C696) * C50795 * C2304 +
            ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C50795 *
                C2303 +
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50607 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C696) *
                C50795 * C2302) *
               C50900) *
              C583 +
          ((((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                 C696 +
             (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                 C50607) *
                C50795 * C2302 +
            ((C2891 + C2890) * C696 + (C2893 + C2892) * C50607) * C50795 *
                C2303 +
            ((C2895 + C2894) * C696 + (C2897 + C2896) * C50607) * C50795 *
                C2304) *
               C50900 -
           (((C2306 * C3156 + C50781 * C3162 + C2305 * C829 + C50911 * C840) *
                 C50607 +
             (C2306 * C3153 + C50781 * C3157 + C2305 * C816 + C50911 * C830) *
                 C696) *
                C50795 * C2304 +
            ((C2306 * C3158 + C50781 * C3163 + C2305 * C831 + C50911 * C841) *
                 C50607 +
             (C2306 * C3154 + C50781 * C3159 + C2305 * C817 + C50911 * C832) *
                 C696) *
                C50795 * C2303 +
            ((C2306 * C3160 + C50781 * C3164 + C2305 * C833 + C50911 * C842) *
                 C50607 +
             (C2306 * C3155 + C50781 * C3161 + C2305 * C818 + C50911 * C834) *
                 C696) *
                C50795 * C2302) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C283 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C278 -
            (C2340 + C2341) * C284 - (C2342 + C2343) * C279 + C2356 * C285 +
            C2357 * C280) *
               C50795 * C2302 +
           ((C2341 + C2340) * C283 + (C2343 + C2342) * C278 -
            (C2345 + C2344) * C284 - (C2347 + C2346) * C279 +
            (C2349 + C2348) * C285 + (C2351 + C2350) * C280) *
               C50795 * C2303 +
           (C2356 * C283 + C2357 * C278 - C2358 * C284 - C2359 * C279 +
            (C2353 + C2352) * C285 + (C2355 + C2354) * C280) *
               C50795 * C2304) *
              C50900 +
          (((C2714 + C2715) * C284 -
            ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                 C278 +
             (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                 C283) +
            (C2716 + C2717) * C279 - C2726 * C285 - C2727 * C280) *
               C50795 * C2302 +
           ((C2719 + C2718) * C284 -
            ((C2717 + C2716) * C278 + (C2715 + C2714) * C283) +
            (C2721 + C2720) * C279 - (C2722 + C2723) * C285 -
            (C2724 + C2725) * C280) *
               C50795 * C2303 +
           ((C2723 + C2722) * C284 - (C2727 * C278 + C2726 * C283) +
            (C2725 + C2724) * C279 -
            (C2306 * C1523 + C50781 * C1524 + C2305 * C438 + C50911 * C448) *
                C285 -
            (C2306 * C1525 + C50781 * C1526 + C2305 * C449 + C50911 * C456) *
                C280) *
               C50795 * C2304) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C283 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C278 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C284 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C279 +
           (C10862 * C124 + C10857 * C133 + C10863 * C288 + C10858 * C296 +
            C10864 * C589 + C10859 * C596 + C10865 * C698 + C10860 * C704) *
               C285 +
           (C10862 * C134 + C10857 * C145 + C10863 * C297 + C10858 * C306 +
            C10864 * C597 + C10859 * C604 + C10865 * C703 + C10860 * C710) *
               C280) *
              C50795 * C50629 * C50900 +
          ((C10862 * C434 + C10857 * C440 + C10863 * C812 + C10858 * C821 +
            C10864 * C817 + C10859 * C832 + C10865 * C3154 + C10860 * C3159) *
               C284 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C278 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C283) +
           (C10862 * C443 + C10857 * C453 + C10863 * C822 + C10858 * C836 +
            C10864 * C831 + C10859 * C841 + C10865 * C3158 + C10860 * C3163) *
               C279 -
           (C10865 * C3153 + C10860 * C3157 + C10864 * C816 + C10859 * C830 +
            C10863 * C813 + C10858 * C823 + C10862 * C436 + C10857 * C444) *
               C285 -
           (C10865 * C3156 + C10860 * C3162 + C10864 * C829 + C10859 * C840 +
            C10863 * C824 + C10858 * C837 + C10862 * C445 + C10857 * C454) *
               C280) *
              C50795 * C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
             C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
                C696 +
            (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
             C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
                C50607) *
               C50795 * C50629 * C50900 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C50607 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C696) *
               C50795 * C50629 * C50708) *
              C582 +
          (((C10862 * C811 + C10857 * C819 + C10863 * C818 + C10858 * C834 +
             C10864 * C3155 + C10859 * C3161 + C10865 * C8884 +
             C10860 * C8888) *
                C696 +
            (C10862 * C820 + C10857 * C835 + C10863 * C833 + C10858 * C842 +
             C10864 * C3160 + C10859 * C3164 + C10865 * C8887 +
             C10860 * C8890) *
                C50607) *
               C50795 * C50629 * C50708 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C50607 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C696) *
               C50795 * C50629 * C50900) *
              C583 +
          (((C10862 * C587 + C10857 * C592 + C10863 * C700 + C10858 * C708 +
             C10864 * C2997 + C10859 * C3003 + C10865 * C8730 +
             C10860 * C8734) *
                C696 +
            (C10862 * C593 + C10857 * C602 + C10863 * C707 + C10858 * C712 +
             C10864 * C3002 + C10859 * C3006 + C10865 * C8733 +
             C10860 * C8736) *
                C50607) *
               C50795 * C50629 * C50900 -
           ((C10865 * C11329 + C10860 * C11331 + C10864 * C8887 +
             C10859 * C8890 + C10863 * C3160 + C10858 * C3164 + C10862 * C833 +
             C10857 * C842) *
                C50607 +
            (C10865 * C11328 + C10860 * C11330 + C10864 * C8884 +
             C10859 * C8888 + C10863 * C3155 + C10858 * C3161 + C10862 * C818 +
             C10857 * C834) *
                C696) *
               C50795 * C50629 * C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C283 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C278 -
            (C2340 + C2341) * C284 - (C2342 + C2343) * C279 + C2356 * C285 +
            C2357 * C280) *
               C15422 +
           ((C18496 + C18497) * C283 + (C18498 + C18499) * C278 -
            (C2715 + C2714) * C284 - (C2717 + C2716) * C279 +
            (C2719 + C2718) * C285 + (C2721 + C2720) * C280) *
               C15423 +
           ((C18500 + C18501) * C283 + (C18502 + C18503) * C278 -
            (C3328 + C3329) * C284 - (C3330 + C3331) * C279 +
            (C3333 + C3332) * C285 + (C3335 + C3334) * C280) *
               C15424) *
              C50629 * C50900 +
          (((C2714 + C2715) * C284 -
            ((C18499 + C18498) * C278 + (C18497 + C18496) * C283) +
            (C2716 + C2717) * C279 - C2726 * C285 - C2727 * C280) *
               C15422 +
           ((C3329 + C3328) * C284 -
            ((C18503 + C18502) * C278 + (C18501 + C18500) * C283) +
            (C3331 + C3330) * C279 - (C3332 + C3333) * C285 -
            (C3334 + C3335) * C280) *
               C15423 +
           ((C2305 * C1168 + C50911 * C1175 + C2306 * C3592 + C50781 * C3597) *
                C284 -
            ((C2306 * C3598 + C50781 * C3602 + C2305 * C1176 + C50911 * C1181) *
                 C278 +
             (C2306 * C3593 + C50781 * C3599 + C2305 * C1169 + C50911 * C1177) *
                 C283) +
            (C2305 * C1174 + C50911 * C1180 + C2306 * C3596 + C50781 * C3601) *
                C279 -
            (C2306 * C3591 + C50781 * C3595 + C2305 * C1167 + C50911 * C1173) *
                C285 -
            (C2306 * C3594 + C50781 * C3600 + C2305 * C1172 + C50911 * C1179) *
                C280) *
               C15424) *
              C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C696 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50607) *
                C15422 +
            ((C18496 + C18497) * C696 + (C18498 + C18499) * C50607) * C15423 +
            ((C18500 + C18501) * C696 + (C18502 + C18503) * C50607) * C15424) *
               C50629 * C50900 -
           (((C2306 * C3598 + C50781 * C3602 + C2305 * C1176 + C50911 * C1181) *
                 C50607 +
             (C2306 * C3593 + C50781 * C3599 + C2305 * C1169 + C50911 * C1177) *
                 C696) *
                C15424 +
            ((C18503 + C18502) * C50607 + (C18501 + C18500) * C696) * C15423 +
            ((C18499 + C18498) * C50607 + (C18497 + C18496) * C696) * C15422) *
               C50629 * C50708) *
              C582 +
          ((((C18926 + C18927) * C696 + (C18928 + C18929) * C50607) * C15422 +
            ((C18930 + C18931) * C696 + (C18932 + C18933) * C50607) * C15423 +
            ((C2305 * C3593 + C50911 * C3599 + C2306 * C9308 + C50781 * C9312) *
                 C696 +
             (C2305 * C3598 + C50911 * C3602 + C2306 * C9311 + C50781 * C9314) *
                 C50607) *
                C15424) *
               C50629 * C50708 -
           (((C18933 + C18932) * C50607 + (C18931 + C18930) * C696) * C15424 +
            ((C18929 + C18928) * C50607 + (C18927 + C18926) * C696) * C15423 +
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50607 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C696) *
                C15422) *
               C50629 * C50900) *
              C583 +
          ((((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                 C696 +
             (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                 C50607) *
                C15422 +
            ((C18934 + C18935) * C696 + (C18936 + C18937) * C50607) * C15423 +
            ((C18938 + C18939) * C696 + (C18940 + C18941) * C50607) * C15424) *
               C50629 * C50900 -
           (((C2306 * C11599 + C50781 * C11601 + C2305 * C9311 +
              C50911 * C9314) *
                 C50607 +
             (C2306 * C11598 + C50781 * C11600 + C2305 * C9308 +
              C50911 * C9312) *
                 C696) *
                C15424 +
            ((C18941 + C18940) * C50607 + (C18939 + C18938) * C696) * C15423 +
            ((C18937 + C18936) * C50607 + (C18935 + C18934) * C696) * C15422) *
               C50629 * C50708) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C1285 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50942 -
            (C8086 + C8087 + C8088) * C1286 - (C8089 + C8090 + C8091) * C50926 +
            (C8092 + C8093 + C8094) * C1287 + (C8095 + C8096 + C8097) * C1282) *
               C50913 +
           ((C12983 + C12984 + C12985) * C1285 +
            (C12986 + C12987 + C12988) * C50942 -
            (C8458 + C8457 + C8456) * C1286 - (C8461 + C8460 + C8459) * C50926 +
            (C8464 + C8463 + C8462) * C1287 + (C8467 + C8466 + C8465) * C1282) *
               C50807) *
              C50629 * C50696 * C1283 +
          (((C8274 + C8275 + C8276) * C1286 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50942 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C1285) +
            (C8277 + C8278 + C8279) * C50926 - (C8280 + C8281 + C8282) * C1287 -
            (C8283 + C8284 + C8285) * C1282) *
               C50913 +
           ((C9816 + C9815 + C9814) * C1286 -
            ((C13408 + C13407 + C13406) * C50942 +
             (C13405 + C13404 + C13403) * C1285) +
            (C9819 + C9818 + C9817) * C50926 -
            (C8048 * C3153 + C8043 * C3157 + C8047 * C816 + C8042 * C830 +
             C8046 * C813 + C8041 * C823) *
                C1287 -
            (C8048 * C3156 + C8043 * C3162 + C8047 * C829 + C8042 * C840 +
             C8046 * C824 + C8041 * C837) *
                C1282) *
               C50807) *
              C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1285 +
             (C117 * C130 + C50765 * C143) * C50942 - C171 * C1286 -
             C172 * C50926 + C173 * C1287 + C174 * C1282) *
                C50913 +
            (C5498 * C1285 + C5499 * C50942 - C475 * C1286 - C476 * C50926 +
             C477 * C1287 + C478 * C1282) *
                C50807) *
               C2302 +
           ((C171 * C1285 + C172 * C50942 - C173 * C1286 - C174 * C50926 +
             C175 * C1287 + C176 * C1282) *
                C50913 +
            (C475 * C1285 + C476 * C50942 - C477 * C1286 - C478 * C50926 +
             C479 * C1287 + C480 * C1282) *
                C50807) *
               C2303 +
           ((C173 * C1285 + C174 * C50942 - C175 * C1286 - C176 * C50926 +
             C177 * C1287 + C178 * C1282) *
                C50913 +
            (C477 * C1285 + C478 * C50942 - C479 * C1286 - C480 * C50926 +
             C481 * C1287 + C482 * C1282) *
                C50807) *
               C2304) *
              C50696 * C1283 +
          (((C327 * C1286 -
             ((C117 * C293 + C50765 * C304) * C50942 +
              (C117 * C287 + C50765 * C294) * C1285) +
             C328 * C50926 - C329 * C1287 - C330 * C1282) *
                C50913 +
            (C1540 * C1286 - (C5927 * C50942 + C5926 * C1285) + C1541 * C50926 -
             C1542 * C1287 - C1543 * C1282) *
                C50807) *
               C2302 +
           ((C329 * C1286 - (C328 * C50942 + C327 * C1285) + C330 * C50926 -
             C331 * C1287 - C332 * C1282) *
                C50913 +
            (C1542 * C1286 - (C1541 * C50942 + C1540 * C1285) + C1543 * C50926 -
             C1544 * C1287 - C1545 * C1282) *
                C50807) *
               C2303 +
           ((C331 * C1286 - (C330 * C50942 + C329 * C1285) + C332 * C50926 -
             C333 * C1287 - C334 * C1282) *
                C50913 +
            (C1544 * C1286 - (C1543 * C50942 + C1542 * C1285) + C1545 * C50926 -
             (C117 * C1523 + C50765 * C1524) * C1287 -
             (C117 * C1525 + C50765 * C1526) * C1282) *
                C50807) *
               C2304) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C1285 +
            (C117 * C130 + C50765 * C143) * C50942 - C171 * C1286 -
            C172 * C50926 + C173 * C1287 + C174 * C1282) *
               C20950 +
           (C7076 + C7077 - C7078 - C7079 + C7080 + C7081) * C20951 +
           (C17230 + C17231 - C17232 - C17233 + C17234 + C17235) * C20952 +
           (C6416 * C1285 + C6417 * C50942 - C6116 * C1286 - C6117 * C50926 +
            C6118 * C1287 + C6119 * C1282) *
               C20953) *
              C50629 * C50696 * C1283 +
          ((C327 * C1286 -
            ((C117 * C293 + C50765 * C304) * C50942 +
             (C117 * C287 + C50765 * C294) * C1285) +
            C328 * C50926 - C329 * C1287 - C330 * C1282) *
               C20950 +
           (C1540 * C1286 - (C5927 * C50942 + C5926 * C1285) + C1541 * C50926 -
            C1542 * C1287 - C1543 * C1282) *
               C20951 +
           (C6288 * C1286 - (C6287 * C50942 + C6286 * C1285) + C6289 * C50926 -
            C6290 * C1287 - C6291 * C1282) *
               C20952 +
           (C16466 * C1286 - (C16465 * C50942 + C16464 * C1285) +
            C16467 * C50926 - (C117 * C3591 + C50765 * C3595) * C1287 -
            (C117 * C3594 + C50765 * C3600) * C1282) *
               C20953) *
              C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C1391 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C1386 -
            (C8086 + C8087 + C8088) * C1392 -
            (C8089 + C8090 + C8091) * C50612) *
               C50913 +
           ((C12983 + C12984 + C12985) * C1391 +
            (C12986 + C12987 + C12988) * C1386 -
            (C8458 + C8457 + C8456) * C1392 -
            (C8461 + C8460 + C8459) * C50612) *
               C50807) *
              C50629 * C50696 * C50944 +
          (((C8274 + C8275 + C8276) * C1392 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C1386 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C1391) +
            (C8277 + C8278 + C8279) * C50612) *
               C50913 +
           ((C9816 + C9815 + C9814) * C1392 -
            ((C13408 + C13407 + C13406) * C1386 +
             (C13405 + C13404 + C13403) * C1391) +
            (C9819 + C9818 + C9817) * C50612) *
               C50807) *
              C50629 * C50696 * C50932 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C1391 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C1386 -
            (C8626 + C8627 + C8628) * C1392 -
            (C8629 + C8630 + C8631) * C50612) *
               C50913 +
           ((C13409 + C13410 + C13411) * C1391 +
            (C13412 + C13413 + C13414) * C1386 -
            (C8048 * C8883 + C8043 * C8886 + C8047 * C3154 + C8042 * C3159 +
             C8046 * C817 + C8041 * C832) *
                C1392 -
            (C8048 * C8885 + C8043 * C8889 + C8047 * C3158 + C8042 * C3163 +
             C8046 * C831 + C8041 * C841) *
                C50612) *
               C50807) *
              C50629 * C50696 * C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1391 +
             (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
             C172 * C50612) *
                C50913 +
            (C5498 * C1391 + C5499 * C1386 - C475 * C1392 - C476 * C50612) *
                C50807) *
               C2302 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                C50913 +
            (C475 * C1391 + C476 * C1386 - C477 * C1392 - C478 * C50612) *
                C50807) *
               C2303 +
           ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
                C50913 +
            (C477 * C1391 + C478 * C1386 - C479 * C1392 - C480 * C50612) *
                C50807) *
               C2304) *
              C50696 * C50944 +
          (((C327 * C1392 -
             ((C117 * C293 + C50765 * C304) * C1386 +
              (C117 * C287 + C50765 * C294) * C1391) +
             C328 * C50612) *
                C50913 +
            (C1540 * C1392 - (C5927 * C1386 + C5926 * C1391) + C1541 * C50612) *
                C50807) *
               C2302 +
           ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                C50913 +
            (C1542 * C1392 - (C1541 * C1386 + C1540 * C1391) + C1543 * C50612) *
                C50807) *
               C2303 +
           ((C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50612) *
                C50913 +
            (C1544 * C1392 - (C1543 * C1386 + C1542 * C1391) + C1545 * C50612) *
                C50807) *
               C2304) *
              C50696 * C50932 +
          ((((C117 * C587 + C50765 * C592) * C1391 +
             (C117 * C593 + C50765 * C602) * C1386 - C620 * C1392 -
             C621 * C50612) *
                C50913 +
            (C5928 * C1391 + C5929 * C1386 - C5656 * C1392 - C5657 * C50612) *
                C50807) *
               C2302 +
           ((C620 * C1391 + C621 * C1386 - C622 * C1392 - C623 * C50612) *
                C50913 +
            (C5656 * C1391 + C5657 * C1386 - C5658 * C1392 - C5659 * C50612) *
                C50807) *
               C2303 +
           ((C622 * C1391 + C623 * C1386 - C624 * C1392 - C625 * C50612) *
                C50913 +
            (C5658 * C1391 + C5659 * C1386 -
             (C117 * C815 + C50765 * C828) * C1392 -
             (C117 * C827 + C50765 * C839) * C50612) *
                C50807) *
               C2304) *
              C50696 * C1390)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C1391 +
            (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
            C172 * C50612) *
               C20950 +
           (C6906 + C6907 - C6908 - C6909) * C20951 + C17594 * C20952 +
           (C17586 + C17585 - C17584 - C17587) * C20953) *
              C50629 * C50696 * C50944 +
          ((C327 * C1392 -
            ((C117 * C293 + C50765 * C304) * C1386 +
             (C117 * C287 + C50765 * C294) * C1391) +
            C328 * C50612) *
               C20950 +
           (C6918 - (C6919 + C6920) + C6921) * C20951 +
           (C17076 - (C17077 + C17078) + C17079) * C20952 +
           (C16466 * C1392 - (C16465 * C1386 + C16464 * C1391) +
            C16467 * C50612) *
               C20953) *
              C50629 * C50696 * C50932 +
          (((C117 * C587 + C50765 * C592) * C1391 +
            (C117 * C593 + C50765 * C602) * C1386 - C620 * C1392 -
            C621 * C50612) *
               C20950 +
           (C5928 * C1391 + C5929 * C1386 - C5656 * C1392 - C5657 * C50612) *
               C20951 +
           (C16132 * C1391 + C16133 * C1386 - C15880 * C1392 -
            C15881 * C50612) *
               C20952 +
           (C21423 * C1391 + C21424 * C1386 -
            (C117 * C9307 + C50765 * C9310) * C1392 -
            (C117 * C9309 + C50765 * C9313) * C50612) *
               C20953) *
              C50629 * C50696 * C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C1391 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C1386 -
             (C8086 + C8087 + C8088) * C1392 -
             (C8089 + C8090 + C8091) * C50612) *
                C50913 +
            ((C12983 + C12984 + C12985) * C1391 +
             (C12986 + C12987 + C12988) * C1386 -
             (C8458 + C8457 + C8456) * C1392 -
             (C8461 + C8460 + C8459) * C50612) *
                C50807) *
               C50629 * C50900 +
           (((C8456 + C8457 + C8458) * C1392 -
             ((C12988 + C12987 + C12986) * C1386 +
              (C12985 + C12984 + C12983) * C1391) +
             (C8459 + C8460 + C8461) * C50612) *
                C50913 +
            ((C9052 + C9051 + C9050) * C1392 -
             ((C13573 + C13574 + C13575) * C1386 +
              (C13576 + C13577 + C13578) * C1391) +
             (C9055 + C9054 + C9053) * C50612) *
                C50807) *
               C50629 * C50708) *
              C1283 +
          ((((C8274 + C8275 + C8276) * C1392 -
             ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
               C8046 * C293 + C8041 * C304) *
                  C1386 +
              (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
               C8046 * C287 + C8041 * C294) *
                  C1391) +
             (C8277 + C8278 + C8279) * C50612) *
                C50913 +
            ((C9816 + C9815 + C9814) * C1392 -
             ((C13408 + C13407 + C13406) * C1386 +
              (C13405 + C13404 + C13403) * C1391) +
             (C9819 + C9818 + C9817) * C50612) *
                C50807) *
               C50629 * C50900 +
           (((C13403 + C13404 + C13405) * C1391 +
             (C13406 + C13407 + C13408) * C1386 -
             (C9814 + C9815 + C9816) * C1392 -
             (C9817 + C9818 + C9819) * C50612) *
                C50913 +
            ((C13737 + C13738 + C13739) * C1391 +
             (C13740 + C13741 + C13742) * C1386 -
             (C8048 * C9201 + C8043 * C9204 + C8047 * C3482 + C8042 * C3487 +
              C8046 * C1082 + C8041 * C1089) *
                 C1392 -
             (C8048 * C9203 + C8043 * C9207 + C8047 * C3486 + C8042 * C3491 +
              C8046 * C1088 + C8041 * C1094) *
                 C50612) *
                C50807) *
               C50629 * C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C1391 +
              (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
              C172 * C50612) *
                 C50913 +
             (C6906 + C6907 - C6908 - C6909) * C50807) *
                C2302 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                 C50913 +
             (C6910 + C6911 - C6912 - C6913) * C50807) *
                C2303 +
            ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
                 C50913 +
             (C6914 + C6915 - C6916 - C6917) * C50807) *
                C2304) *
               C50900 +
           (((C6908 - (C6907 + C6906) + C6909) * C50913 +
             (C977 * C1392 - (C6114 * C1386 + C6115 * C1391) + C978 * C50612) *
                 C50807) *
                C2302 +
            ((C6912 - (C6911 + C6910) + C6913) * C50913 +
             (C979 * C1392 - (C978 * C1386 + C977 * C1391) + C980 * C50612) *
                 C50807) *
                C2303 +
            ((C6916 - (C6915 + C6914) + C6917) * C50913 +
             (C981 * C1392 - (C980 * C1386 + C979 * C1391) + C982 * C50612) *
                 C50807) *
                C2304) *
               C50708) *
              C1283 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50765 * C304) * C1386 +
               (C117 * C287 + C50765 * C294) * C1391) +
              C328 * C50612) *
                 C50913 +
             (C6918 - (C6919 + C6920) + C6921) * C50807) *
                C2302 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                 C50913 +
             (C6922 - (C6923 + C6924) + C6925) * C50807) *
                C2303 +
            ((C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50612) *
                 C50913 +
             (C6926 - (C6927 + C6928) + C6929) * C50807) *
                C2304) *
               C50900 +
           (((C6920 + C6919 - C6918 - C6921) * C50913 +
             (C6286 * C1391 + C6287 * C1386 - C6288 * C1392 - C6289 * C50612) *
                 C50807) *
                C2302 +
            ((C6924 + C6923 - C6922 - C6925) * C50913 +
             (C6288 * C1391 + C6289 * C1386 - C6290 * C1392 - C6291 * C50612) *
                 C50807) *
                C2303 +
            ((C6928 + C6927 - C6926 - C6929) * C50913 +
             (C6290 * C1391 + C6291 * C1386 -
              (C117 * C1080 + C50765 * C1085) * C1392 -
              (C117 * C1084 + C50765 * C1092) * C50612) *
                 C50807) *
                C2304) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1391 +
             (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
             C172 * C50612) *
                C20950 +
            (C6906 + C6907 - C6908 - C6909) * C20951 + C17594 * C20952 +
            (C17586 + C17585 - C17584 - C17587) * C20953) *
               C50629 * C50900 +
           ((C6908 - (C6907 + C6906) + C6909) * C20950 +
            (C7434 - (C7435 + C7436) + C7437) * C20951 +
            (C17584 - (C17585 + C17586) + C17587) * C20952 +
            (C16298 * C1392 - (C16587 * C1386 + C16586 * C1391) +
             C16299 * C50612) *
                C20953) *
               C50629 * C50708) *
              C1283 +
          (((C327 * C1392 -
             ((C117 * C293 + C50765 * C304) * C1386 +
              (C117 * C287 + C50765 * C294) * C1391) +
             C328 * C50612) *
                C20950 +
            (C6918 - (C6919 + C6920) + C6921) * C20951 +
            (C17076 - (C17077 + C17078) + C17079) * C20952 +
            (C22045 - (C22046 + C22047) + C22048) * C20953) *
               C50629 * C50900 +
           ((C6920 + C6919 - C6918 - C6921) * C20950 +
            (C17078 + C17077 - C17076 - C17079) * C20951 +
            (C22047 + C22046 - C22045 - C22048) * C20952 +
            (C21636 * C1391 + C21637 * C1386 -
             (C117 * C16447 + C50765 * C16449) * C1392 -
             (C117 * C16448 + C50765 * C16450) * C50612) *
                C20953) *
               C50629 * C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C49720 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50884 -
             (C8086 + C8087 + C8088) * C49713 -
             (C8089 + C8090 + C8091) * C50612) *
                C50913 +
            ((C12983 + C12984 + C12985) * C49720 +
             (C12986 + C12987 + C12988) * C50884 -
             (C8458 + C8457 + C8456) * C49713 -
             (C8461 + C8460 + C8459) * C50612) *
                C50807) *
               C50629 * C1643 +
           (((C8456 + C8457 + C8458) * C49713 -
             ((C12988 + C12987 + C12986) * C50884 +
              (C12985 + C12984 + C12983) * C49720) +
             (C8459 + C8460 + C8461) * C50612) *
                C50913 +
            ((C9052 + C9051 + C9050) * C49713 -
             ((C13573 + C13574 + C13575) * C50884 +
              (C13576 + C13577 + C13578) * C49720) +
             (C9055 + C9054 + C9053) * C50612) *
                C50807) *
               C50629 * C50708) *
              C1283 +
          ((((C8274 + C8275 + C8276) * C49713 -
             ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
               C8046 * C293 + C8041 * C304) *
                  C50884 +
              (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
               C8046 * C287 + C8041 * C294) *
                  C49720) +
             (C8277 + C8278 + C8279) * C50612) *
                C50913 +
            ((C9816 + C9815 + C9814) * C49713 -
             ((C13408 + C13407 + C13406) * C50884 +
              (C13405 + C13404 + C13403) * C49720) +
             (C9819 + C9818 + C9817) * C50612) *
                C50807) *
               C50629 * C1643 +
           (((C13403 + C13404 + C13405) * C49720 +
             (C13406 + C13407 + C13408) * C50884 -
             (C9814 + C9815 + C9816) * C49713 -
             (C9817 + C9818 + C9819) * C50612) *
                C50913 +
            ((C13737 + C13738 + C13739) * C49720 +
             (C13740 + C13741 + C13742) * C50884 -
             (C8048 * C9201 + C8043 * C9204 + C8047 * C3482 + C8042 * C3487 +
              C8046 * C1082 + C8041 * C1089) *
                 C49713 -
             (C8048 * C9203 + C8043 * C9207 + C8047 * C3486 + C8042 * C3491 +
              C8046 * C1088 + C8041 * C1094) *
                 C50612) *
                C50807) *
               C50629 * C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C49720 +
              (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
              C172 * C50612) *
                 C50913 +
             (C6080 + C6081 - C6082 - C6083) * C50807) *
                C2302 +
            ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                 C50913 +
             (C6084 + C6085 - C6086 - C6087) * C50807) *
                C2303 +
            ((C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
                 C50913 +
             (C6088 + C6089 - C6090 - C6091) * C50807) *
                C2304) *
               C1643 +
           (((C6082 - (C6081 + C6080) + C6083) * C50913 +
             (C6092 - (C6120 + C6121) + C6097) * C50807) *
                C2302 +
            ((C6086 - (C6085 + C6084) + C6087) * C50913 +
             (C6098 - (C6099 + C6100) + C6101) * C50807) *
                C2303 +
            ((C6090 - (C6089 + C6088) + C6091) * C50913 +
             (C6102 - (C6103 + C6104) + C6105) * C50807) *
                C2304) *
               C50708) *
              C1283 +
          ((((C327 * C49713 -
              ((C117 * C293 + C50765 * C304) * C50884 +
               (C117 * C287 + C50765 * C294) * C49720) +
              C328 * C50612) *
                 C50913 +
             (C7640 - (C7641 + C7642) + C7643) * C50807) *
                C2302 +
            ((C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
                 C50913 +
             (C7644 - (C7645 + C7646) + C7647) * C50807) *
                C2303 +
            ((C331 * C49713 - (C330 * C50884 + C329 * C49720) + C332 * C50612) *
                 C50913 +
             (C7648 - (C7649 + C7650) + C7651) * C50807) *
                C2304) *
               C1643 +
           (((C7642 + C7641 - C7640 - C7643) * C50913 +
             (C6286 * C49720 + C6287 * C50884 - C6288 * C49713 -
              C6289 * C50612) *
                 C50807) *
                C2302 +
            ((C7646 + C7645 - C7644 - C7647) * C50913 +
             (C6288 * C49720 + C6289 * C50884 - C6290 * C49713 -
              C6291 * C50612) *
                 C50807) *
                C2303 +
            ((C7650 + C7649 - C7648 - C7651) * C50913 +
             (C6290 * C49720 + C6291 * C50884 -
              (C117 * C1080 + C50765 * C1085) * C49713 -
              (C117 * C1084 + C50765 * C1092) * C50612) *
                 C50807) *
                C2304) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C49720 +
             (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
             C172 * C50612) *
                C20950 +
            (C6080 + C6081 - C6082 - C6083) * C20951 + C16300 * C20952 +
            C21531 * C20953) *
               C50629 * C1643 +
           ((C6082 - (C6081 + C6080) + C6083) * C20950 +
            (C6092 - (C6120 + C6121) + C6097) * C20951 +
            (C16284 - (C16285 + C16286) + C16287) * C20952 +
            (C21526 - (C21527 + C21528) + C21529) * C20953) *
               C50629 * C50708) *
              C1283 +
          (((C327 * C49713 -
             ((C117 * C293 + C50765 * C304) * C50884 +
              (C117 * C287 + C50765 * C294) * C49720) +
             C328 * C50612) *
                C20950 +
            (C7640 - (C7641 + C7642) + C7643) * C20951 +
            (C17790 - (C17791 + C17792) + C17793) * C20952 +
            (C22518 - (C22519 + C22520) + C22521) * C20953) *
               C50629 * C1643 +
           ((C7642 + C7641 - C7640 - C7643) * C20950 +
            (C17792 + C17791 - C17790 - C17793) * C20951 +
            (C22520 + C22519 - C22518 - C22521) * C20952 +
            (C21636 * C49720 + C21637 * C50884 -
             (C117 * C16447 + C50765 * C16449) * C49713 -
             (C117 * C16448 + C50765 * C16450) * C50612) *
                C20953) *
               C50629 * C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C696 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50607) *
                C50913 +
            ((C12983 + C12984 + C12985) * C696 +
             (C12986 + C12987 + C12988) * C50607) *
                C50807) *
               C50629 * C1643 -
           (((C13573 + C13574 + C13575) * C50607 +
             (C13576 + C13577 + C13578) * C696) *
                C50807 +
            ((C12988 + C12987 + C12986) * C50607 +
             (C12985 + C12984 + C12983) * C696) *
                C50913) *
               C50629 * C50708) *
              C50944 +
          ((((C13403 + C13404 + C13405) * C696 +
             (C13406 + C13407 + C13408) * C50607) *
                C50913 +
            ((C13737 + C13738 + C13739) * C696 +
             (C13740 + C13741 + C13742) * C50607) *
                C50807) *
               C50629 * C50708 -
           (((C13408 + C13407 + C13406) * C50607 +
             (C13405 + C13404 + C13403) * C696) *
                C50807 +
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50607 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C696) *
                C50913) *
               C50629 * C1643) *
              C50932 +
          ((((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
              C8048 * C2997 + C8043 * C3003) *
                 C696 +
             (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
              C8048 * C3002 + C8043 * C3006) *
                 C50607) *
                C50913 +
            ((C13409 + C13410 + C13411) * C696 +
             (C13412 + C13413 + C13414) * C50607) *
                C50807) *
               C50629 * C1643 -
           (((C8048 * C11529 + C8043 * C11531 + C8047 * C9205 + C8042 * C9208 +
              C8046 * C3488 + C8041 * C3492) *
                 C50607 +
             (C8048 * C11528 + C8043 * C11530 + C8047 * C9202 + C8042 * C9206 +
              C8046 * C3483 + C8041 * C3489) *
                 C696) *
                C50807 +
            ((C13414 + C13413 + C13412) * C50607 +
             (C13411 + C13410 + C13409) * C696) *
                C50913) *
               C50629 * C50708) *
              C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C50913 +
             (C5904 + C5905) * C50807) *
                C2302 +
            ((C171 * C696 + C172 * C50607) * C50913 +
             (C5906 + C5907) * C50807) *
                C2303 +
            ((C173 * C696 + C174 * C50607) * C50913 +
             (C5908 + C5909) * C50807) *
                C2304) *
               C1643 -
           (((C6268 + C6269) * C50807 + (C5909 + C5908) * C50913) * C2304 +
            ((C6270 + C6271) * C50807 + (C5907 + C5906) * C50913) * C2303 +
            ((C6272 + C6273) * C50807 + (C5905 + C5904) * C50913) * C2302) *
               C50708) *
              C50944 +
          ((((C5930 + C5931) * C50913 + (C6292 + C6293) * C50807) * C2302 +
            ((C5914 + C5915) * C50913 + (C6294 + C6295) * C50807) * C2303 +
            ((C5916 + C5917) * C50913 + (C6296 + C6297) * C50807) * C2304) *
               C50708 -
           (((C5917 + C5916) * C50807 +
             (C330 * C50607 + C329 * C696) * C50913) *
                C2304 +
            ((C5915 + C5914) * C50807 +
             (C328 * C50607 + C327 * C696) * C50913) *
                C2303 +
            ((C5931 + C5930) * C50807 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C50913) *
                C2302) *
               C1643) *
              C50932 +
          (((((C117 * C587 + C50765 * C592) * C696 +
              (C117 * C593 + C50765 * C602) * C50607) *
                 C50913 +
             (C5932 + C5933) * C50807) *
                C2302 +
            ((C620 * C696 + C621 * C50607) * C50913 +
             (C5922 + C5923) * C50807) *
                C2303 +
            ((C622 * C696 + C623 * C50607) * C50913 +
             (C5924 + C5925) * C50807) *
                C2304) *
               C1643 -
           ((((C117 * C3484 + C50765 * C3490) * C50607 +
              (C117 * C3481 + C50765 * C3485) * C696) *
                 C50807 +
             (C5925 + C5924) * C50913) *
                C2304 +
            (((C117 * C3486 + C50765 * C3491) * C50607 +
              (C117 * C3482 + C50765 * C3487) * C696) *
                 C50807 +
             (C5923 + C5922) * C50913) *
                C2303 +
            (((C117 * C3488 + C50765 * C3492) * C50607 +
              (C117 * C3483 + C50765 * C3489) * C696) *
                 C50807 +
             (C5933 + C5932) * C50913) *
                C2302) *
               C50708) *
              C1390)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C20950 +
            (C5904 + C5905) * C20951 + C16452 * C20952 + C21630 * C20953) *
               C50629 * C1643 -
           (C21710 * C20953 + C16579 * C20952 + (C6272 + C6273) * C20951 +
            (C5905 + C5904) * C20950) *
               C50629 * C50708) *
              C50944 +
          (((C5930 + C5931) * C20950 + (C6292 + C6293) * C20951 +
            (C16468 + C16469) * C20952 + (C21638 + C21639) * C20953) *
               C50629 * C50708 -
           (C21635 * C20953 + C16463 * C20952 + (C5931 + C5930) * C20951 +
            ((C117 * C293 + C50765 * C304) * C50607 +
             (C117 * C287 + C50765 * C294) * C696) *
                C20950) *
               C50629 * C1643) *
              C50932 +
          ((((C117 * C587 + C50765 * C592) * C696 +
             (C117 * C593 + C50765 * C602) * C50607) *
                C20950 +
            (C5932 + C5933) * C20951 + (C16134 + C16135) * C20952 +
            (C21425 + C21426) * C20953) *
               C50629 * C1643 -
           (((C117 * C13842 + C50765 * C13846) * C50607 +
             (C117 * C13840 + C50765 * C13844) * C696) *
                C20953 +
            (C21426 + C21425) * C20952 + (C16135 + C16134) * C20951 +
            (C5933 + C5932) * C20950) *
               C50629 * C50708) *
              C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C696 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50607) *
                C50913 +
            ((C12983 + C12984 + C12985) * C696 +
             (C12986 + C12987 + C12988) * C50607) *
                C50807) *
               C50629 * C50945 -
           (((C13573 + C13574 + C13575) * C50607 +
             (C13576 + C13577 + C13578) * C696) *
                C50807 +
            ((C12988 + C12987 + C12986) * C50607 +
             (C12985 + C12984 + C12983) * C696) *
                C50913) *
               C50629 * C50935 +
           (((C13578 + C13577 + C13576) * C696 +
             (C13575 + C13574 + C13573) * C50607) *
                C50913 +
            ((C13861 + C13862 + C13863) * C696 +
             (C13864 + C13865 + C13866) * C50607) *
                C50807) *
               C50629 * C1875) *
              C1283 +
          ((((C13403 + C13404 + C13405) * C696 +
             (C13406 + C13407 + C13408) * C50607) *
                C50913 +
            ((C13737 + C13738 + C13739) * C696 +
             (C13740 + C13741 + C13742) * C50607) *
                C50807) *
               C50629 * C50935 -
           (((C13408 + C13407 + C13406) * C50607 +
             (C13405 + C13404 + C13403) * C696) *
                C50807 +
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50607 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C696) *
                C50913) *
               C50629 * C50945 -
           (((C8048 * C11599 + C8043 * C11601 + C8047 * C9311 + C8042 * C9314 +
              C8046 * C3598 + C8041 * C3602) *
                 C50607 +
             (C8048 * C11598 + C8043 * C11600 + C8047 * C9308 + C8042 * C9312 +
              C8046 * C3593 + C8041 * C3599) *
                 C696) *
                C50807 +
            ((C13742 + C13741 + C13740) * C50607 +
             (C13739 + C13738 + C13737) * C696) *
                C50913) *
               C50629 * C1875) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C50913 +
             (C5904 + C5905) * C50807) *
                C2302 +
            ((C171 * C696 + C172 * C50607) * C50913 +
             (C5906 + C5907) * C50807) *
                C2303 +
            ((C173 * C696 + C174 * C50607) * C50913 +
             (C5908 + C5909) * C50807) *
                C2304) *
               C50945 -
           (((C6268 + C6269) * C50807 + (C5909 + C5908) * C50913) * C2304 +
            ((C6270 + C6271) * C50807 + (C5907 + C5906) * C50913) * C2303 +
            ((C6272 + C6273) * C50807 + (C5905 + C5904) * C50913) * C2302) *
               C50935 +
           (((C6273 + C6272) * C50913 + (C6418 + C6419) * C50807) * C2302 +
            ((C6271 + C6270) * C50913 + (C6412 + C6413) * C50807) * C2303 +
            ((C6269 + C6268) * C50913 + (C6414 + C6415) * C50807) * C2304) *
               C1875) *
              C1283 +
          ((((C5930 + C5931) * C50913 + (C6292 + C6293) * C50807) * C2302 +
            ((C5914 + C5915) * C50913 + (C6294 + C6295) * C50807) * C2303 +
            ((C5916 + C5917) * C50913 + (C6296 + C6297) * C50807) * C2304) *
               C50935 -
           (((C5917 + C5916) * C50807 +
             (C330 * C50607 + C329 * C696) * C50913) *
                C2304 +
            ((C5915 + C5914) * C50807 +
             (C328 * C50607 + C327 * C696) * C50913) *
                C2303 +
            ((C5931 + C5930) * C50807 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C50913) *
                C2302) *
               C50945 -
           ((((C117 * C3594 + C50765 * C3600) * C50607 +
              (C117 * C3591 + C50765 * C3595) * C696) *
                 C50807 +
             (C6297 + C6296) * C50913) *
                C2304 +
            (((C117 * C3596 + C50765 * C3601) * C50607 +
              (C117 * C3592 + C50765 * C3597) * C696) *
                 C50807 +
             (C6295 + C6294) * C50913) *
                C2303 +
            (((C117 * C3598 + C50765 * C3602) * C50607 +
              (C117 * C3593 + C50765 * C3599) * C696) *
                 C50807 +
             (C6293 + C6292) * C50913) *
                C2302) *
               C1875) *
              C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C20950 +
            (C5904 + C5905) * C20951 + C16452 * C20952 + C21630 * C20953) *
               C50629 * C50945 -
           (C21710 * C20953 + C16579 * C20952 + (C6272 + C6273) * C20951 +
            (C5905 + C5904) * C20950) *
               C50629 * C50935 +
           (C16452 * C20950 + C21630 * C20951 + (C16588 + C16589) * C20952 +
            (C21717 + C21718) * C20953) *
               C50629 * C1875) *
              C1283 +
          (((C5930 + C5931) * C20950 + (C6292 + C6293) * C20951 +
            (C16468 + C16469) * C20952 + (C21638 + C21639) * C20953) *
               C50629 * C50935 -
           (C21635 * C20953 + C16463 * C20952 + (C5931 + C5930) * C20951 +
            ((C117 * C293 + C50765 * C304) * C50607 +
             (C117 * C287 + C50765 * C294) * C696) *
                C20950) *
               C50629 * C50945 -
           (((C117 * C19387 + C50765 * C19389) * C50607 +
             (C117 * C19386 + C50765 * C19388) * C696) *
                C20953 +
            (C21639 + C21638) * C20952 + C21635 * C20951 + C16463 * C20950) *
               C50629 * C1875) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50765 * C129) * C118 +
                (C117 * C130 + C50765 * C143) * C106 - C171 * C119 -
                C172 * C107 + C173 * C120 + C174 * C108 - C175 * C121 -
                C176 * C109) *
                   C50913 +
               ((C117 * C435 + C50765 * C442) * C118 +
                (C117 * C441 + C50765 * C452) * C106 - C475 * C119 -
                C476 * C107 + C477 * C120 + C478 * C108 - C479 * C121 -
                C480 * C109) *
                   C50807) *
                  C2302 +
              ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
                C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
                   C50913 +
               (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
                C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
                   C50807) *
                  C2303 +
              ((C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
                C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
                   C50913 +
               (C477 * C118 + C478 * C106 - C479 * C119 - C480 * C107 +
                C481 * C120 + C482 * C108 -
                (C117 * C439 + C50765 * C450) * C121 -
                (C117 * C451 + C50765 * C457) * C109) *
                   C50807) *
                  C2304) *
             C50696 * C50670 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50765 * C129) * C49720 +
                 (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
                 C172 * C50612) *
                    C50913 +
                (C5498 * C49720 + C5499 * C50884 - C475 * C49713 -
                 C476 * C50612) *
                    C50807) *
                   C2302 +
               ((C171 * C49720 + C172 * C50884 - C173 * C49713 -
                 C174 * C50612) *
                    C50913 +
                (C475 * C49720 + C476 * C50884 - C477 * C49713 -
                 C478 * C50612) *
                    C50807) *
                   C2303 +
               ((C173 * C49720 + C174 * C50884 - C175 * C49713 -
                 C176 * C50612) *
                    C50913 +
                (C477 * C49720 + C478 * C50884 - C479 * C49713 -
                 C480 * C50612) *
                    C50807) *
                   C2304) *
                  C50696 * C582 +
              (((C327 * C49713 -
                 ((C117 * C293 + C50765 * C304) * C50884 +
                  (C117 * C287 + C50765 * C294) * C49720) +
                 C328 * C50612) *
                    C50913 +
                (C1540 * C49713 -
                 ((C117 * C820 + C50765 * C835) * C50884 +
                  (C117 * C811 + C50765 * C819) * C49720) +
                 C1541 * C50612) *
                    C50807) *
                   C2302 +
               ((C329 * C49713 - (C328 * C50884 + C327 * C49720) +
                 C330 * C50612) *
                    C50913 +
                (C1542 * C49713 - (C1541 * C50884 + C1540 * C49720) +
                 C1543 * C50612) *
                    C50807) *
                   C2303 +
               ((C331 * C49713 - (C330 * C50884 + C329 * C49720) +
                 C332 * C50612) *
                    C50913 +
                (C1544 * C49713 - (C1543 * C50884 + C1542 * C49720) +
                 C1545 * C50612) *
                    C50807) *
                   C2304) *
                  C50696 * C583 +
              ((((C117 * C587 + C50765 * C592) * C49720 +
                 (C117 * C593 + C50765 * C602) * C50884 - C620 * C49713 -
                 C621 * C50612) *
                    C50913 +
                ((C117 * C818 + C50765 * C834) * C49720 +
                 (C117 * C833 + C50765 * C842) * C50884 - C5656 * C49713 -
                 C5657 * C50612) *
                    C50807) *
                   C2302 +
               ((C620 * C49720 + C621 * C50884 - C622 * C49713 -
                 C623 * C50612) *
                    C50913 +
                (C5656 * C49720 + C5657 * C50884 - C5658 * C49713 -
                 C5659 * C50612) *
                    C50807) *
                   C2303 +
               ((C622 * C49720 + C623 * C50884 - C624 * C49713 -
                 C625 * C50612) *
                    C50913 +
                (C5658 * C49720 + C5659 * C50884 -
                 (C117 * C815 + C50765 * C828) * C49713 -
                 (C117 * C827 + C50765 * C839) * C50612) *
                    C50807) *
                   C2304) *
                  C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C49720 +
             (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
             C172 * C50612) *
                C50913 +
            (C6080 + C6081 - C6082 - C6083) * C50807) *
               C2302 +
           ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                C50913 +
            (C6084 + C6085 - C6086 - C6087) * C50807) *
               C2303 +
           ((C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
                C50913 +
            (C6088 + C6089 - C6090 - C6091) * C50807) *
               C2304) *
              C941 +
          (((C6082 - (C6081 + C6080) + C6083) * C50913 +
            (C6092 - (C6120 + C6121) + C6097) * C50807) *
               C2302 +
           ((C6086 - (C6085 + C6084) + C6087) * C50913 +
            (C6098 - (C6099 + C6100) + C6101) * C50807) *
               C2303 +
           ((C6090 - (C6089 + C6088) + C6091) * C50913 +
            (C6102 - (C6103 + C6104) + C6105) * C50807) *
               C2304) *
              C942 +
          (((C6121 + C6120 - C6092 - C6097) * C50913 +
            ((C117 * C1169 + C50765 * C1177) * C49720 +
             (C117 * C1176 + C50765 * C1181) * C50884 - C6116 * C49713 -
             C6117 * C50612) *
                C50807) *
               C2302 +
           ((C6100 + C6099 - C6098 - C6101) * C50913 +
            (C6116 * C49720 + C6117 * C50884 - C6118 * C49713 -
             C6119 * C50612) *
                C50807) *
               C2303 +
           ((C6104 + C6103 - C6102 - C6105) * C50913 +
            (C6118 * C49720 + C6119 * C50884 -
             (C117 * C1166 + C50765 * C1171) * C49713 -
             (C117 * C1170 + C50765 * C1178) * C50612) *
                C50807) *
               C2304) *
              C943) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
            C8048 * C587 + C8043 * C592) *
               C118 +
           (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
            C8048 * C593 + C8043 * C602) *
               C106 -
           (C8086 + C8087 + C8088) * C119 - (C8089 + C8090 + C8091) * C107 +
           (C8092 + C8093 + C8094) * C120 + (C8095 + C8096 + C8097) * C108 -
           (C8098 + C8099 + C8100) * C121 - (C8101 + C8102 + C8103) * C109) *
              C50913 +
          ((C8046 * C435 + C8041 * C442 + C8047 * C811 + C8042 * C819 +
            C8048 * C818 + C8043 * C834) *
               C118 +
           (C8046 * C441 + C8041 * C452 + C8047 * C820 + C8042 * C835 +
            C8048 * C833 + C8043 * C842) *
               C106 -
           (C8458 + C8457 + C8456) * C119 - (C8461 + C8460 + C8459) * C107 +
           (C8464 + C8463 + C8462) * C120 + (C8467 + C8466 + C8465) * C108 -
           (C8048 * C815 + C8043 * C828 + C8047 * C814 + C8042 * C825 +
            C8046 * C437 + C8041 * C446) *
               C121 -
           (C8048 * C827 + C8043 * C839 + C8047 * C826 + C8042 * C838 +
            C8046 * C447 + C8041 * C455) *
               C109) *
              C50807) *
         C50629 * C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C49720 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50884 -
            (C8086 + C8087 + C8088) * C49713 -
            (C8089 + C8090 + C8091) * C50612) *
               C50913 +
           ((C12983 + C12984 + C12985) * C49720 +
            (C12986 + C12987 + C12988) * C50884 -
            (C8458 + C8457 + C8456) * C49713 -
            (C8461 + C8460 + C8459) * C50612) *
               C50807) *
              C50629 * C50696 * C582 +
          (((C8274 + C8275 + C8276) * C49713 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50884 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C49720) +
            (C8277 + C8278 + C8279) * C50612) *
               C50913 +
           ((C9816 + C9815 + C9814) * C49713 -
            ((C8048 * C3160 + C8043 * C3164 + C8047 * C833 + C8042 * C842 +
              C8046 * C820 + C8041 * C835) *
                 C50884 +
             (C8048 * C3155 + C8043 * C3161 + C8047 * C818 + C8042 * C834 +
              C8046 * C811 + C8041 * C819) *
                 C49720) +
            (C9819 + C9818 + C9817) * C50612) *
               C50807) *
              C50629 * C50696 * C583 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C49720 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C50884 -
            (C8626 + C8627 + C8628) * C49713 -
            (C8629 + C8630 + C8631) * C50612) *
               C50913 +
           ((C8046 * C818 + C8041 * C834 + C8047 * C3155 + C8042 * C3161 +
             C8048 * C8884 + C8043 * C8888) *
                C49720 +
            (C8046 * C833 + C8041 * C842 + C8047 * C3160 + C8042 * C3164 +
             C8048 * C8887 + C8043 * C8890) *
                C50884 -
            (C8048 * C8883 + C8043 * C8886 + C8047 * C3154 + C8042 * C3159 +
             C8046 * C817 + C8041 * C832) *
                C49713 -
            (C8048 * C8885 + C8043 * C8889 + C8047 * C3158 + C8042 * C3163 +
             C8046 * C831 + C8041 * C841) *
                C50612) *
               C50807) *
              C50629 * C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C49720 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50884 -
            (C8086 + C8087 + C8088) * C49713 -
            (C8089 + C8090 + C8091) * C50612) *
               C50913 +
           ((C12983 + C12984 + C12985) * C49720 +
            (C12986 + C12987 + C12988) * C50884 -
            (C8458 + C8457 + C8456) * C49713 -
            (C8461 + C8460 + C8459) * C50612) *
               C50807) *
              C50629 * C941 +
          (((C8456 + C8457 + C8458) * C49713 -
            ((C12988 + C12987 + C12986) * C50884 +
             (C12985 + C12984 + C12983) * C49720) +
            (C8459 + C8460 + C8461) * C50612) *
               C50913 +
           ((C9052 + C9051 + C9050) * C49713 -
            ((C13573 + C13574 + C13575) * C50884 +
             (C13576 + C13577 + C13578) * C49720) +
            (C9055 + C9054 + C9053) * C50612) *
               C50807) *
              C50629 * C942 +
          (((C13578 + C13577 + C13576) * C49720 +
            (C13575 + C13574 + C13573) * C50884 -
            (C9050 + C9051 + C9052) * C49713 -
            (C9053 + C9054 + C9055) * C50612) *
               C50913 +
           ((C8046 * C1169 + C8041 * C1177 + C8047 * C3593 + C8042 * C3599 +
             C8048 * C9308 + C8043 * C9312) *
                C49720 +
            (C8046 * C1176 + C8041 * C1181 + C8047 * C3598 + C8042 * C3602 +
             C8048 * C9311 + C8043 * C9314) *
                C50884 -
            (C8048 * C9307 + C8043 * C9310 + C8047 * C3592 + C8042 * C3597 +
             C8046 * C1168 + C8041 * C1175) *
                C49713 -
            (C8048 * C9309 + C8043 * C9313 + C8047 * C3596 + C8042 * C3601 +
             C8046 * C1174 + C8041 * C1180) *
                C50612) *
               C50807) *
              C50629 * C943) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C122 + C50765 * C129) * C118 +
           (C117 * C130 + C50765 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C20950 +
          (C5498 * C118 + C5499 * C106 - C475 * C119 - C476 * C107 +
           C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
              C20951 +
          (C6115 * C118 + C6114 * C106 - C977 * C119 - C978 * C107 +
           C979 * C120 + C980 * C108 - C981 * C121 - C982 * C109) *
              C20952 +
          (C6416 * C118 + C6417 * C106 - C6116 * C119 - C6117 * C107 +
           C6118 * C120 + C6119 * C108 -
           (C117 * C1166 + C50765 * C1171) * C121 -
           (C117 * C1170 + C50765 * C1178) * C109) *
              C20953) *
         C50629 * C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C49720 +
            (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
            C172 * C50612) *
               C20950 +
           (C6080 + C6081 - C6082 - C6083) * C20951 + C16300 * C20952 +
           (C16286 + C16285 - C16284 - C16287) * C20953) *
              C50629 * C50696 * C582 +
          ((C327 * C49713 -
            ((C117 * C293 + C50765 * C304) * C50884 +
             (C117 * C287 + C50765 * C294) * C49720) +
            C328 * C50612) *
               C20950 +
           (C7640 - (C7641 + C7642) + C7643) * C20951 +
           (C17790 - (C17791 + C17792) + C17793) * C20952 +
           (C16466 * C49713 - (C16465 * C50884 + C16464 * C49720) +
            C16467 * C50612) *
               C20953) *
              C50629 * C50696 * C583 +
          (((C117 * C587 + C50765 * C592) * C49720 +
            (C117 * C593 + C50765 * C602) * C50884 - C620 * C49713 -
            C621 * C50612) *
               C20950 +
           (C5928 * C49720 + C5929 * C50884 - C5656 * C49713 - C5657 * C50612) *
               C20951 +
           (C16132 * C49720 + C16133 * C50884 - C15880 * C49713 -
            C15881 * C50612) *
               C20952 +
           ((C117 * C9308 + C50765 * C9312) * C49720 +
            (C117 * C9311 + C50765 * C9314) * C50884 -
            (C117 * C9307 + C50765 * C9310) * C49713 -
            (C117 * C9309 + C50765 * C9313) * C50612) *
               C20953) *
              C50629 * C50696 * C584)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C49720 +
            (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
            C172 * C50612) *
               C20950 +
           (C6080 + C6081 - C6082 - C6083) * C20951 + C16300 * C20952 +
           C21531 * C20953) *
              C50629 * C941 +
          ((C6082 - (C6081 + C6080) + C6083) * C20950 +
           (C6092 - (C6120 + C6121) + C6097) * C20951 +
           (C16284 - (C16285 + C16286) + C16287) * C20952 +
           (C21526 - (C21527 + C21528) + C21529) * C20953) *
              C50629 * C942 +
          (C16300 * C20950 + C21531 * C20951 +
           (C21528 + C21527 - C21526 - C21529) * C20952 +
           ((C117 * C16570 + C50765 * C16574) * C49720 +
            (C117 * C16573 + C50765 * C16576) * C50884 -
            (C117 * C16569 + C50765 * C16572) * C49713 -
            (C117 * C16571 + C50765 * C16575) * C50612) *
               C20953) *
              C50629 * C943) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50765 * C129) * C283 +
                 (C117 * C130 + C50765 * C143) * C278 - C171 * C284 -
                 C172 * C279 + C173 * C285 + C174 * C280) *
                    C50913 +
                ((C117 * C435 + C50765 * C442) * C283 +
                 (C117 * C441 + C50765 * C452) * C278 - C475 * C284 -
                 C476 * C279 + C477 * C285 + C478 * C280) *
                    C50807) *
                   C2302 +
               ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
                 C175 * C285 + C176 * C280) *
                    C50913 +
                (C475 * C283 + C476 * C278 - C477 * C284 - C478 * C279 +
                 C479 * C285 + C480 * C280) *
                    C50807) *
                   C2303 +
               ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
                 C177 * C285 + C178 * C280) *
                    C50913 +
                (C477 * C283 + C478 * C278 - C479 * C284 - C480 * C279 +
                 C481 * C285 + C482 * C280) *
                    C50807) *
                   C2304) *
                  C50696 * C50899 +
              (((C327 * C284 -
                 ((C117 * C293 + C50765 * C304) * C278 +
                  (C117 * C287 + C50765 * C294) * C283) +
                 C328 * C279 - C329 * C285 - C330 * C280) *
                    C50913 +
                (C1540 * C284 -
                 ((C117 * C820 + C50765 * C835) * C278 +
                  (C117 * C811 + C50765 * C819) * C283) +
                 C1541 * C279 - C1542 * C285 - C1543 * C280) *
                    C50807) *
                   C2302 +
               ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
                 C331 * C285 - C332 * C280) *
                    C50913 +
                (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
                 C1544 * C285 - C1545 * C280) *
                    C50807) *
                   C2303 +
               ((C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
                 C333 * C285 - C334 * C280) *
                    C50913 +
                (C1544 * C284 - (C1543 * C278 + C1542 * C283) + C1545 * C279 -
                 (C117 * C1523 + C50765 * C1524) * C285 -
                 (C117 * C1525 + C50765 * C1526) * C280) *
                    C50807) *
                   C2304) *
                  C50696 * C50684) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50765 * C129) * C696 +
                 (C117 * C130 + C50765 * C143) * C50607) *
                    C50913 +
                (C5498 * C696 + C5499 * C50607) * C50807) *
                   C2302 +
               ((C171 * C696 + C172 * C50607) * C50913 +
                (C475 * C696 + C476 * C50607) * C50807) *
                   C2303 +
               ((C173 * C696 + C174 * C50607) * C50913 +
                (C477 * C696 + C478 * C50607) * C50807) *
                   C2304) *
                  C50696 * C692 -
              (((C1543 * C50607 + C1542 * C696) * C50807 +
                (C330 * C50607 + C329 * C696) * C50913) *
                   C2304 +
               ((C1541 * C50607 + C1540 * C696) * C50807 +
                (C328 * C50607 + C327 * C696) * C50913) *
                   C2303 +
               (((C117 * C820 + C50765 * C835) * C50607 +
                 (C117 * C811 + C50765 * C819) * C696) *
                    C50807 +
                ((C117 * C293 + C50765 * C304) * C50607 +
                 (C117 * C287 + C50765 * C294) * C696) *
                    C50913) *
                   C2302) *
                  C50696 * C693 +
              ((((C117 * C587 + C50765 * C592) * C696 +
                 (C117 * C593 + C50765 * C602) * C50607) *
                    C50913 +
                ((C117 * C818 + C50765 * C834) * C696 +
                 (C117 * C833 + C50765 * C842) * C50607) *
                    C50807) *
                   C2302 +
               ((C620 * C696 + C621 * C50607) * C50913 +
                (C5656 * C696 + C5657 * C50607) * C50807) *
                   C2303 +
               ((C622 * C696 + C623 * C50607) * C50913 +
                (C5658 * C696 + C5659 * C50607) * C50807) *
                   C2304) *
                  C50696 * C694 -
              ((((C117 * C3156 + C50765 * C3162) * C50607 +
                 (C117 * C3153 + C50765 * C3157) * C696) *
                    C50807 +
                ((C117 * C703 + C50765 * C710) * C50607 +
                 (C117 * C698 + C50765 * C704) * C696) *
                    C50913) *
                   C2304 +
               (((C117 * C3158 + C50765 * C3163) * C50607 +
                 (C117 * C3154 + C50765 * C3159) * C696) *
                    C50807 +
                ((C117 * C705 + C50765 * C711) * C50607 +
                 (C117 * C699 + C50765 * C706) * C696) *
                    C50913) *
                   C2303 +
               (((C117 * C3160 + C50765 * C3164) * C50607 +
                 (C117 * C3155 + C50765 * C3161) * C696) *
                    C50807 +
                ((C117 * C707 + C50765 * C712) * C50607 +
                 (C117 * C700 + C50765 * C708) * C696) *
                    C50913) *
                   C2302) *
                  C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C50913 +
             (C5904 + C5905) * C50807) *
                C2302 +
            ((C171 * C696 + C172 * C50607) * C50913 +
             (C5906 + C5907) * C50807) *
                C2303 +
            ((C173 * C696 + C174 * C50607) * C50913 +
             (C5908 + C5909) * C50807) *
                C2304) *
               C941 -
           (((C6268 + C6269) * C50807 + (C5909 + C5908) * C50913) * C2304 +
            ((C6270 + C6271) * C50807 + (C5907 + C5906) * C50913) * C2303 +
            ((C6272 + C6273) * C50807 + (C5905 + C5904) * C50913) * C2302) *
               C942 +
           (((C6273 + C6272) * C50913 +
             ((C117 * C1169 + C50765 * C1177) * C696 +
              (C117 * C1176 + C50765 * C1181) * C50607) *
                 C50807) *
                C2302 +
            ((C6271 + C6270) * C50913 +
             (C6116 * C696 + C6117 * C50607) * C50807) *
                C2303 +
            ((C6269 + C6268) * C50913 +
             (C6118 * C696 + C6119 * C50607) * C50807) *
                C2304) *
               C943) *
              C50899 +
          ((((C5930 + C5931) * C50913 + (C6292 + C6293) * C50807) * C2302 +
            ((C5914 + C5915) * C50913 + (C6294 + C6295) * C50807) * C2303 +
            ((C5916 + C5917) * C50913 + (C6296 + C6297) * C50807) * C2304) *
               C942 -
           (((C5917 + C5916) * C50807 +
             (C330 * C50607 + C329 * C696) * C50913) *
                C2304 +
            ((C5915 + C5914) * C50807 +
             (C328 * C50607 + C327 * C696) * C50913) *
                C2303 +
            ((C5931 + C5930) * C50807 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C50913) *
                C2302) *
               C941 -
           ((((C117 * C3594 + C50765 * C3600) * C50607 +
              (C117 * C3591 + C50765 * C3595) * C696) *
                 C50807 +
             (C6297 + C6296) * C50913) *
                C2304 +
            (((C117 * C3596 + C50765 * C3601) * C50607 +
              (C117 * C3592 + C50765 * C3597) * C696) *
                 C50807 +
             (C6295 + C6294) * C50913) *
                C2303 +
            (((C117 * C3598 + C50765 * C3602) * C50607 +
              (C117 * C3593 + C50765 * C3599) * C696) *
                 C50807 +
             (C6293 + C6292) * C50913) *
                C2302) *
               C943) *
              C50684)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C283 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C278 -
            (C8086 + C8087 + C8088) * C284 - (C8089 + C8090 + C8091) * C279 +
            (C8092 + C8093 + C8094) * C285 + (C8095 + C8096 + C8097) * C280) *
               C50913 +
           ((C8046 * C435 + C8041 * C442 + C8047 * C811 + C8042 * C819 +
             C8048 * C818 + C8043 * C834) *
                C283 +
            (C8046 * C441 + C8041 * C452 + C8047 * C820 + C8042 * C835 +
             C8048 * C833 + C8043 * C842) *
                C278 -
            (C8458 + C8457 + C8456) * C284 - (C8461 + C8460 + C8459) * C279 +
            (C8464 + C8463 + C8462) * C285 + (C8467 + C8466 + C8465) * C280) *
               C50807) *
              C50629 * C50696 * C50899 +
          (((C8274 + C8275 + C8276) * C284 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C278 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C283) +
            (C8277 + C8278 + C8279) * C279 - (C8280 + C8281 + C8282) * C285 -
            (C8283 + C8284 + C8285) * C280) *
               C50913 +
           ((C9816 + C9815 + C9814) * C284 -
            ((C8048 * C3160 + C8043 * C3164 + C8047 * C833 + C8042 * C842 +
              C8046 * C820 + C8041 * C835) *
                 C278 +
             (C8048 * C3155 + C8043 * C3161 + C8047 * C818 + C8042 * C834 +
              C8046 * C811 + C8041 * C819) *
                 C283) +
            (C9819 + C9818 + C9817) * C279 -
            (C8048 * C3153 + C8043 * C3157 + C8047 * C816 + C8042 * C830 +
             C8046 * C813 + C8041 * C823) *
                C285 -
            (C8048 * C3156 + C8043 * C3162 + C8047 * C829 + C8042 * C840 +
             C8046 * C824 + C8041 * C837) *
                C280) *
               C50807) *
              C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C696 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50607) *
               C50913 +
           ((C12983 + C12984 + C12985) * C696 +
            (C12986 + C12987 + C12988) * C50607) *
               C50807) *
              C50629 * C50696 * C692 -
          (((C8048 * C3160 + C8043 * C3164 + C8047 * C833 + C8042 * C842 +
             C8046 * C820 + C8041 * C835) *
                C50607 +
            (C8048 * C3155 + C8043 * C3161 + C8047 * C818 + C8042 * C834 +
             C8046 * C811 + C8041 * C819) *
                C696) *
               C50807 +
           ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
             C8046 * C293 + C8041 * C304) *
                C50607 +
            (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
             C8046 * C287 + C8041 * C294) *
                C696) *
               C50913) *
              C50629 * C50696 * C693 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C696 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C50607) *
               C50913 +
           ((C8046 * C818 + C8041 * C834 + C8047 * C3155 + C8042 * C3161 +
             C8048 * C8884 + C8043 * C8888) *
                C696 +
            (C8046 * C833 + C8041 * C842 + C8047 * C3160 + C8042 * C3164 +
             C8048 * C8887 + C8043 * C8890) *
                C50607) *
               C50807) *
              C50629 * C50696 * C694 -
          (((C8048 * C11329 + C8043 * C11331 + C8047 * C8887 + C8042 * C8890 +
             C8046 * C3160 + C8041 * C3164) *
                C50607 +
            (C8048 * C11328 + C8043 * C11330 + C8047 * C8884 + C8042 * C8888 +
             C8046 * C3155 + C8041 * C3161) *
                C696) *
               C50807 +
           ((C8048 * C8733 + C8043 * C8736 + C8047 * C3002 + C8042 * C3006 +
             C8046 * C707 + C8041 * C712) *
                C50607 +
            (C8048 * C8730 + C8043 * C8734 + C8047 * C2997 + C8042 * C3003 +
             C8046 * C700 + C8041 * C708) *
                C696) *
               C50913) *
              C50629 * C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C696 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50607) *
                C50913 +
            ((C12983 + C12984 + C12985) * C696 +
             (C12986 + C12987 + C12988) * C50607) *
                C50807) *
               C50629 * C941 -
           (((C13573 + C13574 + C13575) * C50607 +
             (C13576 + C13577 + C13578) * C696) *
                C50807 +
            ((C12988 + C12987 + C12986) * C50607 +
             (C12985 + C12984 + C12983) * C696) *
                C50913) *
               C50629 * C942 +
           (((C13578 + C13577 + C13576) * C696 +
             (C13575 + C13574 + C13573) * C50607) *
                C50913 +
            ((C8046 * C1169 + C8041 * C1177 + C8047 * C3593 + C8042 * C3599 +
              C8048 * C9308 + C8043 * C9312) *
                 C696 +
             (C8046 * C1176 + C8041 * C1181 + C8047 * C3598 + C8042 * C3602 +
              C8048 * C9311 + C8043 * C9314) *
                 C50607) *
                C50807) *
               C50629 * C943) *
              C50899 +
          ((((C13403 + C13404 + C13405) * C696 +
             (C13406 + C13407 + C13408) * C50607) *
                C50913 +
            ((C13737 + C13738 + C13739) * C696 +
             (C13740 + C13741 + C13742) * C50607) *
                C50807) *
               C50629 * C942 -
           (((C13408 + C13407 + C13406) * C50607 +
             (C13405 + C13404 + C13403) * C696) *
                C50807 +
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50607 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C696) *
                C50913) *
               C50629 * C941 -
           (((C8048 * C11599 + C8043 * C11601 + C8047 * C9311 + C8042 * C9314 +
              C8046 * C3598 + C8041 * C3602) *
                 C50607 +
             (C8048 * C11598 + C8043 * C11600 + C8047 * C9308 + C8042 * C9312 +
              C8046 * C3593 + C8041 * C3599) *
                 C696) *
                C50807 +
            ((C13742 + C13741 + C13740) * C50607 +
             (C13739 + C13738 + C13737) * C696) *
                C50913) *
               C50629 * C943) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C283 +
            (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C20950 +
           (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C20951 +
           (C15718 + C15719 - C15720 - C15721 + C15722 + C15723) * C20952 +
           (C6416 * C283 + C6417 * C278 - C6116 * C284 - C6117 * C279 +
            C6118 * C285 + C6119 * C280) *
               C20953) *
              C50629 * C50696 * C50899 +
          ((C327 * C284 -
            ((C117 * C293 + C50765 * C304) * C278 +
             (C117 * C287 + C50765 * C294) * C283) +
            C328 * C279 - C329 * C285 - C330 * C280) *
               C20950 +
           (C1540 * C284 - (C5927 * C278 + C5926 * C283) + C1541 * C279 -
            C1542 * C285 - C1543 * C280) *
               C20951 +
           (C6288 * C284 - (C6287 * C278 + C6286 * C283) + C6289 * C279 -
            C6290 * C285 - C6291 * C280) *
               C20952 +
           (C16466 * C284 - (C16465 * C278 + C16464 * C283) + C16467 * C279 -
            (C117 * C3591 + C50765 * C3595) * C285 -
            (C117 * C3594 + C50765 * C3600) * C280) *
               C20953) *
              C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C696 +
            (C117 * C130 + C50765 * C143) * C50607) *
               C20950 +
           (C5904 + C5905) * C20951 + C16452 * C20952 +
           (C6418 + C6419) * C20953) *
              C50629 * C50696 * C692 -
          ((C16469 + C16468) * C20953 + C16463 * C20952 +
           (C5931 + C5930) * C20951 +
           ((C117 * C293 + C50765 * C304) * C50607 +
            (C117 * C287 + C50765 * C294) * C696) *
               C20950) *
              C50629 * C50696 * C693 +
          (((C117 * C587 + C50765 * C592) * C696 +
            (C117 * C593 + C50765 * C602) * C50607) *
               C20950 +
           (C5932 + C5933) * C20951 + (C16134 + C16135) * C20952 +
           ((C117 * C9308 + C50765 * C9312) * C696 +
            (C117 * C9311 + C50765 * C9314) * C50607) *
               C20953) *
              C50629 * C50696 * C694 -
          (((C117 * C11599 + C50765 * C11601) * C50607 +
            (C117 * C11598 + C50765 * C11600) * C696) *
               C20953 +
           ((C117 * C9205 + C50765 * C9208) * C50607 +
            (C117 * C9202 + C50765 * C9206) * C696) *
               C20952 +
           ((C117 * C3160 + C50765 * C3164) * C50607 +
            (C117 * C3155 + C50765 * C3161) * C696) *
               C20951 +
           ((C117 * C707 + C50765 * C712) * C50607 +
            (C117 * C700 + C50765 * C708) * C696) *
               C20950) *
              C50629 * C50696 * C695)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C20950 +
            (C5904 + C5905) * C20951 + C16452 * C20952 + C21630 * C20953) *
               C50629 * C941 -
           ((C16589 + C16588) * C20953 + C16579 * C20952 +
            (C6272 + C6273) * C20951 + (C5905 + C5904) * C20950) *
               C50629 * C942 +
           (C16452 * C20950 + C21630 * C20951 + (C16588 + C16589) * C20952 +
            ((C117 * C16570 + C50765 * C16574) * C696 +
             (C117 * C16573 + C50765 * C16576) * C50607) *
                C20953) *
               C50629 * C943) *
              C50899 +
          (((C5930 + C5931) * C20950 + (C6292 + C6293) * C20951 +
            (C16468 + C16469) * C20952 + (C21638 + C21639) * C20953) *
               C50629 * C942 -
           (C21635 * C20953 + C16463 * C20952 + (C5931 + C5930) * C20951 +
            ((C117 * C293 + C50765 * C304) * C50607 +
             (C117 * C287 + C50765 * C294) * C696) *
                C20950) *
               C50629 * C941 -
           (((C117 * C19387 + C50765 * C19389) * C50607 +
             (C117 * C19386 + C50765 * C19388) * C696) *
                C20953 +
            (C21639 + C21638) * C20952 + C21635 * C20951 + C16463 * C20950) *
               C50629 * C943) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50765 * C129) * C283 +
                 (C117 * C130 + C50765 * C143) * C278 - C171 * C284 -
                 C172 * C279 + C173 * C285 + C174 * C280) *
                    C50913 +
                (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C50807) *
                   C2302 +
               ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
                 C175 * C285 + C176 * C280) *
                    C50913 +
                (C5486 + C5487 - C5488 - C5489 + C5490 + C5491) * C50807) *
                   C2303 +
               ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
                 C177 * C285 + C178 * C280) *
                    C50913 +
                (C5492 + C5493 - C5494 - C5495 + C5496 + C5497) * C50807) *
                   C2304) *
                  C50900 +
              (((C5482 - (C5501 + C5500) + C5483 - C5484 - C5485) * C50913 +
                (C977 * C284 -
                 ((C117 * C950 + C50765 * C959) * C278 +
                  (C117 * C944 + C50765 * C949) * C283) +
                 C978 * C279 - C979 * C285 - C980 * C280) *
                    C50807) *
                   C2302 +
               ((C5488 - (C5487 + C5486) + C5489 - C5490 - C5491) * C50913 +
                (C979 * C284 - (C978 * C278 + C977 * C283) + C980 * C279 -
                 C981 * C285 - C982 * C280) *
                    C50807) *
                   C2303 +
               ((C5494 - (C5493 + C5492) + C5495 - C5496 - C5497) * C50913 +
                (C981 * C284 - (C980 * C278 + C979 * C283) + C982 * C279 -
                 (C117 * C948 + C50765 * C957) * C285 -
                 (C117 * C958 + C50765 * C963) * C280) *
                    C50807) *
                   C2304) *
                  C50708) *
             C50670 +
         0.5 * std::pow(Pi, 2.5) *
             ((((((C117 * C122 + C50765 * C129) * C696 +
                  (C117 * C130 + C50765 * C143) * C50607) *
                     C50913 +
                 (C5904 + C5905) * C50807) *
                    C2302 +
                ((C171 * C696 + C172 * C50607) * C50913 +
                 (C5906 + C5907) * C50807) *
                    C2303 +
                ((C173 * C696 + C174 * C50607) * C50913 +
                 (C5908 + C5909) * C50807) *
                    C2304) *
                   C50900 -
               (((C980 * C50607 + C979 * C696) * C50807 +
                 (C5909 + C5908) * C50913) *
                    C2304 +
                ((C978 * C50607 + C977 * C696) * C50807 +
                 (C5907 + C5906) * C50913) *
                    C2303 +
                (((C117 * C950 + C50765 * C959) * C50607 +
                  (C117 * C944 + C50765 * C949) * C696) *
                     C50807 +
                 (C5905 + C5904) * C50913) *
                    C2302) *
                   C50708) *
                  C582 +
              ((((C5930 + C5931) * C50913 +
                 ((C117 * C1083 + C50765 * C1091) * C696 +
                  (C117 * C1090 + C50765 * C1095) * C50607) *
                     C50807) *
                    C2302 +
                ((C5914 + C5915) * C50913 +
                 ((C117 * C1082 + C50765 * C1089) * C696 +
                  (C117 * C1088 + C50765 * C1094) * C50607) *
                     C50807) *
                    C2303 +
                ((C5916 + C5917) * C50913 +
                 ((C117 * C1081 + C50765 * C1087) * C696 +
                  (C117 * C1086 + C50765 * C1093) * C50607) *
                     C50807) *
                    C2304) *
                   C50708 -
               (((C5917 + C5916) * C50807 +
                 (C330 * C50607 + C329 * C696) * C50913) *
                    C2304 +
                ((C5915 + C5914) * C50807 +
                 (C328 * C50607 + C327 * C696) * C50913) *
                    C2303 +
                ((C5931 + C5930) * C50807 +
                 ((C117 * C293 + C50765 * C304) * C50607 +
                  (C117 * C287 + C50765 * C294) * C696) *
                     C50913) *
                    C2302) *
                   C50900) *
                  C583 +
              (((((C117 * C587 + C50765 * C592) * C696 +
                  (C117 * C593 + C50765 * C602) * C50607) *
                     C50913 +
                 (C5932 + C5933) * C50807) *
                    C2302 +
                ((C620 * C696 + C621 * C50607) * C50913 +
                 (C5922 + C5923) * C50807) *
                    C2303 +
                ((C622 * C696 + C623 * C50607) * C50913 +
                 (C5924 + C5925) * C50807) *
                    C2304) *
                   C50900 -
               ((((C117 * C3484 + C50765 * C3490) * C50607 +
                  (C117 * C3481 + C50765 * C3485) * C696) *
                     C50807 +
                 (C5925 + C5924) * C50913) *
                    C2304 +
                (((C117 * C3486 + C50765 * C3491) * C50607 +
                  (C117 * C3482 + C50765 * C3487) * C696) *
                     C50807 +
                 (C5923 + C5922) * C50913) *
                    C2303 +
                (((C117 * C3488 + C50765 * C3492) * C50607 +
                  (C117 * C3483 + C50765 * C3489) * C696) *
                     C50807 +
                 (C5933 + C5932) * C50913) *
                    C2302) *
                   C50708) *
                  C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C50913 +
            (C5904 + C5905) * C50807) *
               C2302 +
           ((C171 * C696 + C172 * C50607) * C50913 + (C5906 + C5907) * C50807) *
               C2303 +
           ((C173 * C696 + C174 * C50607) * C50913 + (C5908 + C5909) * C50807) *
               C2304) *
              C1162 -
          (((C6268 + C6269) * C50807 + (C5909 + C5908) * C50913) * C2304 +
           ((C6270 + C6271) * C50807 + (C5907 + C5906) * C50913) * C2303 +
           ((C6272 + C6273) * C50807 + (C5905 + C5904) * C50913) * C2302) *
              C1163 +
          (((C6273 + C6272) * C50913 + (C6418 + C6419) * C50807) * C2302 +
           ((C6271 + C6270) * C50913 + (C6412 + C6413) * C50807) * C2303 +
           ((C6269 + C6268) * C50913 + (C6414 + C6415) * C50807) * C2304) *
              C1164 -
          ((((C117 * C6398 + C50765 * C6404) * C50607 +
             (C117 * C6395 + C50765 * C6399) * C696) *
                C50807 +
            (C6415 + C6414) * C50913) *
               C2304 +
           (((C117 * C6400 + C50765 * C6405) * C50607 +
             (C117 * C6396 + C50765 * C6401) * C696) *
                C50807 +
            (C6413 + C6412) * C50913) *
               C2303 +
           (((C117 * C6402 + C50765 * C6406) * C50607 +
             (C117 * C6397 + C50765 * C6403) * C696) *
                C50807 +
            (C6419 + C6418) * C50913) *
               C2302) *
              C1165) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C283 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C278 -
            (C8086 + C8087 + C8088) * C284 - (C8089 + C8090 + C8091) * C279 +
            (C8092 + C8093 + C8094) * C285 + (C8095 + C8096 + C8097) * C280) *
               C50913 +
           ((C12983 + C12984 + C12985) * C283 +
            (C12986 + C12987 + C12988) * C278 - (C8458 + C8457 + C8456) * C284 -
            (C8461 + C8460 + C8459) * C279 + (C8464 + C8463 + C8462) * C285 +
            (C8467 + C8466 + C8465) * C280) *
               C50807) *
              C50629 * C50900 +
          (((C8456 + C8457 + C8458) * C284 -
            ((C12988 + C12987 + C12986) * C278 +
             (C12985 + C12984 + C12983) * C283) +
            (C8459 + C8460 + C8461) * C279 - (C8462 + C8463 + C8464) * C285 -
            (C8465 + C8466 + C8467) * C280) *
               C50913 +
           ((C9052 + C9051 + C9050) * C284 -
            ((C8048 * C3488 + C8043 * C3492 + C8047 * C1090 + C8042 * C1095 +
              C8046 * C950 + C8041 * C959) *
                 C278 +
             (C8048 * C3483 + C8043 * C3489 + C8047 * C1083 + C8042 * C1091 +
              C8046 * C944 + C8041 * C949) *
                 C283) +
            (C9055 + C9054 + C9053) * C279 -
            (C8048 * C3481 + C8043 * C3485 + C8047 * C1081 + C8042 * C1087 +
             C8046 * C946 + C8041 * C953) *
                C285 -
            (C8048 * C3484 + C8043 * C3490 + C8047 * C1086 + C8042 * C1093 +
             C8046 * C954 + C8041 * C961) *
                C280) *
               C50807) *
              C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C696 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50607) *
                C50913 +
            ((C12983 + C12984 + C12985) * C696 +
             (C12986 + C12987 + C12988) * C50607) *
                C50807) *
               C50629 * C50900 -
           (((C8048 * C3488 + C8043 * C3492 + C8047 * C1090 + C8042 * C1095 +
              C8046 * C950 + C8041 * C959) *
                 C50607 +
             (C8048 * C3483 + C8043 * C3489 + C8047 * C1083 + C8042 * C1091 +
              C8046 * C944 + C8041 * C949) *
                 C696) *
                C50807 +
            ((C12988 + C12987 + C12986) * C50607 +
             (C12985 + C12984 + C12983) * C696) *
                C50913) *
               C50629 * C50708) *
              C582 +
          ((((C13403 + C13404 + C13405) * C696 +
             (C13406 + C13407 + C13408) * C50607) *
                C50913 +
            ((C8046 * C1083 + C8041 * C1091 + C8047 * C3483 + C8042 * C3489 +
              C8048 * C9202 + C8043 * C9206) *
                 C696 +
             (C8046 * C1090 + C8041 * C1095 + C8047 * C3488 + C8042 * C3492 +
              C8048 * C9205 + C8043 * C9208) *
                 C50607) *
                C50807) *
               C50629 * C50708 -
           (((C13408 + C13407 + C13406) * C50607 +
             (C13405 + C13404 + C13403) * C696) *
                C50807 +
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50607 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C696) *
                C50913) *
               C50629 * C50900) *
              C583 +
          ((((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
              C8048 * C2997 + C8043 * C3003) *
                 C696 +
             (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
              C8048 * C3002 + C8043 * C3006) *
                 C50607) *
                C50913 +
            ((C13409 + C13410 + C13411) * C696 +
             (C13412 + C13413 + C13414) * C50607) *
                C50807) *
               C50629 * C50900 -
           (((C8048 * C11529 + C8043 * C11531 + C8047 * C9205 + C8042 * C9208 +
              C8046 * C3488 + C8041 * C3492) *
                 C50607 +
             (C8048 * C11528 + C8043 * C11530 + C8047 * C9202 + C8042 * C9206 +
              C8046 * C3483 + C8041 * C3489) *
                 C696) *
                C50807 +
            ((C13414 + C13413 + C13412) * C50607 +
             (C13411 + C13410 + C13409) * C696) *
                C50913) *
               C50629 * C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C696 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50607) *
               C50913 +
           ((C12983 + C12984 + C12985) * C696 +
            (C12986 + C12987 + C12988) * C50607) *
               C50807) *
              C50629 * C1162 -
          (((C13573 + C13574 + C13575) * C50607 +
            (C13576 + C13577 + C13578) * C696) *
               C50807 +
           ((C12988 + C12987 + C12986) * C50607 +
            (C12985 + C12984 + C12983) * C696) *
               C50913) *
              C50629 * C1163 +
          (((C13578 + C13577 + C13576) * C696 +
            (C13575 + C13574 + C13573) * C50607) *
               C50913 +
           ((C13861 + C13862 + C13863) * C696 +
            (C13864 + C13865 + C13866) * C50607) *
               C50807) *
              C50629 * C1164 -
          (((C8048 * C13842 + C8043 * C13846 + C8047 * C13843 + C8042 * C13847 +
             C8046 * C6402 + C8041 * C6406) *
                C50607 +
            (C8048 * C13840 + C8043 * C13844 + C8047 * C13841 + C8042 * C13845 +
             C8046 * C6397 + C8041 * C6403) *
                C696) *
               C50807 +
           ((C13866 + C13865 + C13864) * C50607 +
            (C13863 + C13862 + C13861) * C696) *
               C50913) *
              C50629 * C1165) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C283 +
            (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C20950 +
           (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C20951 +
           (C15718 + C15719 - C15720 - C15721 + C15722 + C15723) * C20952 +
           (C21151 + C21152 - C21153 - C21154 + C21155 + C21156) * C20953) *
              C50629 * C50900 +
          ((C5482 - (C5501 + C5500) + C5483 - C5484 - C5485) * C20950 +
           (C15720 - (C15719 + C15718) + C15721 - C15722 - C15723) * C20951 +
           (C21153 - (C21152 + C21151) + C21154 - C21155 - C21156) * C20952 +
           (C16298 * C284 - (C16587 * C278 + C16586 * C283) + C16299 * C279 -
            (C117 * C6395 + C50765 * C6399) * C285 -
            (C117 * C6398 + C50765 * C6404) * C280) *
               C20953) *
              C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C20950 +
            (C5904 + C5905) * C20951 + C16452 * C20952 +
            (C6418 + C6419) * C20953) *
               C50629 * C50900 -
           ((C16589 + C16588) * C20953 + C16579 * C20952 +
            (C6272 + C6273) * C20951 + (C5905 + C5904) * C20950) *
               C50629 * C50708) *
              C582 +
          (((C5930 + C5931) * C20950 + (C6292 + C6293) * C20951 +
            (C16468 + C16469) * C20952 +
            ((C117 * C13841 + C50765 * C13845) * C696 +
             (C117 * C13843 + C50765 * C13847) * C50607) *
                C20953) *
               C50629 * C50708 -
           ((C16469 + C16468) * C20953 + C16463 * C20952 +
            (C5931 + C5930) * C20951 +
            ((C117 * C293 + C50765 * C304) * C50607 +
             (C117 * C287 + C50765 * C294) * C696) *
                C20950) *
               C50629 * C50900) *
              C583 +
          ((((C117 * C587 + C50765 * C592) * C696 +
             (C117 * C593 + C50765 * C602) * C50607) *
                C20950 +
            (C5932 + C5933) * C20951 + (C16134 + C16135) * C20952 +
            (C21425 + C21426) * C20953) *
               C50629 * C50900 -
           (((C117 * C13842 + C50765 * C13846) * C50607 +
             (C117 * C13840 + C50765 * C13844) * C696) *
                C20953 +
            (C21426 + C21425) * C20952 + (C16135 + C16134) * C20951 +
            (C5933 + C5932) * C20950) *
               C50629 * C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C696 +
            (C117 * C130 + C50765 * C143) * C50607) *
               C20950 +
           (C5904 + C5905) * C20951 + C16452 * C20952 + C21630 * C20953) *
              C50629 * C1162 -
          (C21710 * C20953 + C16579 * C20952 + (C6272 + C6273) * C20951 +
           (C5905 + C5904) * C20950) *
              C50629 * C1163 +
          (C16452 * C20950 + C21630 * C20951 + (C16588 + C16589) * C20952 +
           (C21717 + C21718) * C20953) *
              C50629 * C1164 -
          (((C117 * C21706 + C50765 * C21708) * C50607 +
            (C117 * C21705 + C50765 * C21707) * C696) *
               C20953 +
           (C21718 + C21717) * C20952 + C21710 * C20951 + C16579 * C20950) *
              C50629 * C1165) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C1285 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50942 -
            (C8086 + C8087 + C8088) * C1286 - (C8089 + C8090 + C8091) * C50926 +
            (C8092 + C8093 + C8094) * C1287 + (C8095 + C8096 + C8097) * C1282) *
               C50913 +
           ((C12983 + C12984 + C12985) * C1285 +
            (C12986 + C12987 + C12988) * C50942 -
            (C8458 + C8457 + C8456) * C1286 - (C8461 + C8460 + C8459) * C50926 +
            (C8464 + C8463 + C8462) * C1287 + (C8467 + C8466 + C8465) * C1282) *
               C50807) *
              C50629 * C1643 +
          (((C8456 + C8457 + C8458) * C1286 -
            ((C12988 + C12987 + C12986) * C50942 +
             (C12985 + C12984 + C12983) * C1285) +
            (C8459 + C8460 + C8461) * C50926 - (C8462 + C8463 + C8464) * C1287 -
            (C8465 + C8466 + C8467) * C1282) *
               C50913 +
           ((C9052 + C9051 + C9050) * C1286 -
            ((C13573 + C13574 + C13575) * C50942 +
             (C13576 + C13577 + C13578) * C1285) +
            (C9055 + C9054 + C9053) * C50926 -
            (C8048 * C3481 + C8043 * C3485 + C8047 * C1081 + C8042 * C1087 +
             C8046 * C946 + C8041 * C953) *
                C1287 -
            (C8048 * C3484 + C8043 * C3490 + C8047 * C1086 + C8042 * C1093 +
             C8046 * C954 + C8041 * C961) *
                C1282) *
               C50807) *
              C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1285 +
             (C117 * C130 + C50765 * C143) * C50942 - C171 * C1286 -
             C172 * C50926 + C173 * C1287 + C174 * C1282) *
                C50913 +
            (C7076 + C7077 - C7078 - C7079 + C7080 + C7081) * C50807) *
               C2302 +
           ((C171 * C1285 + C172 * C50942 - C173 * C1286 - C174 * C50926 +
             C175 * C1287 + C176 * C1282) *
                C50913 +
            (C7082 + C7083 - C7084 - C7085 + C7086 + C7087) * C50807) *
               C2303 +
           ((C173 * C1285 + C174 * C50942 - C175 * C1286 - C176 * C50926 +
             C177 * C1287 + C178 * C1282) *
                C50913 +
            (C7088 + C7089 - C7090 - C7091 + C7092 + C7093) * C50807) *
               C2304) *
              C1643 +
          (((C7078 - (C7077 + C7076) + C7079 - C7080 - C7081) * C50913 +
            (C977 * C1286 - (C6114 * C50942 + C6115 * C1285) + C978 * C50926 -
             C979 * C1287 - C980 * C1282) *
                C50807) *
               C2302 +
           ((C7084 - (C7083 + C7082) + C7085 - C7086 - C7087) * C50913 +
            (C979 * C1286 - (C978 * C50942 + C977 * C1285) + C980 * C50926 -
             C981 * C1287 - C982 * C1282) *
                C50807) *
               C2303 +
           ((C7090 - (C7089 + C7088) + C7091 - C7092 - C7093) * C50913 +
            (C981 * C1286 - (C980 * C50942 + C979 * C1285) + C982 * C50926 -
             (C117 * C948 + C50765 * C957) * C1287 -
             (C117 * C958 + C50765 * C963) * C1282) *
                C50807) *
               C2304) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C1285 +
            (C117 * C130 + C50765 * C143) * C50942 - C171 * C1286 -
            C172 * C50926 + C173 * C1287 + C174 * C1282) *
               C20950 +
           (C7076 + C7077 - C7078 - C7079 + C7080 + C7081) * C20951 +
           (C17230 + C17231 - C17232 - C17233 + C17234 + C17235) * C20952 +
           (C22147 + C22148 - C22149 - C22150 + C22151 + C22152) * C20953) *
              C50629 * C1643 +
          ((C7078 - (C7077 + C7076) + C7079 - C7080 - C7081) * C20950 +
           (C17232 - (C17231 + C17230) + C17233 - C17234 - C17235) * C20951 +
           (C22149 - (C22148 + C22147) + C22150 - C22151 - C22152) * C20952 +
           (C16298 * C1286 - (C16587 * C50942 + C16586 * C1285) +
            C16299 * C50926 - (C117 * C6395 + C50765 * C6399) * C1287 -
            (C117 * C6398 + C50765 * C6404) * C1282) *
               C20953) *
              C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C1391 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C1386 -
             (C8086 + C8087 + C8088) * C1392 -
             (C8089 + C8090 + C8091) * C50612) *
                C50913 +
            ((C12983 + C12984 + C12985) * C1391 +
             (C12986 + C12987 + C12988) * C1386 -
             (C8458 + C8457 + C8456) * C1392 -
             (C8461 + C8460 + C8459) * C50612) *
                C50807) *
               C50629 * C1643 +
           (((C8456 + C8457 + C8458) * C1392 -
             ((C12988 + C12987 + C12986) * C1386 +
              (C12985 + C12984 + C12983) * C1391) +
             (C8459 + C8460 + C8461) * C50612) *
                C50913 +
            ((C9052 + C9051 + C9050) * C1392 -
             ((C13573 + C13574 + C13575) * C1386 +
              (C13576 + C13577 + C13578) * C1391) +
             (C9055 + C9054 + C9053) * C50612) *
                C50807) *
               C50629 * C50708) *
              C50899 +
          ((((C8274 + C8275 + C8276) * C1392 -
             ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
               C8046 * C293 + C8041 * C304) *
                  C1386 +
              (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
               C8046 * C287 + C8041 * C294) *
                  C1391) +
             (C8277 + C8278 + C8279) * C50612) *
                C50913 +
            ((C9816 + C9815 + C9814) * C1392 -
             ((C13408 + C13407 + C13406) * C1386 +
              (C13405 + C13404 + C13403) * C1391) +
             (C9819 + C9818 + C9817) * C50612) *
                C50807) *
               C50629 * C1643 +
           (((C13403 + C13404 + C13405) * C1391 +
             (C13406 + C13407 + C13408) * C1386 -
             (C9814 + C9815 + C9816) * C1392 -
             (C9817 + C9818 + C9819) * C50612) *
                C50913 +
            ((C13737 + C13738 + C13739) * C1391 +
             (C13740 + C13741 + C13742) * C1386 -
             (C8048 * C9201 + C8043 * C9204 + C8047 * C3482 + C8042 * C3487 +
              C8046 * C1082 + C8041 * C1089) *
                 C1392 -
             (C8048 * C9203 + C8043 * C9207 + C8047 * C3486 + C8042 * C3491 +
              C8046 * C1088 + C8041 * C1094) *
                 C50612) *
                C50807) *
               C50629 * C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C1391 +
              (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
              C172 * C50612) *
                 C50913 +
             (C6906 + C6907 - C6908 - C6909) * C50807) *
                C2302 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                 C50913 +
             (C6910 + C6911 - C6912 - C6913) * C50807) *
                C2303 +
            ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
                 C50913 +
             (C6914 + C6915 - C6916 - C6917) * C50807) *
                C2304) *
               C1643 +
           (((C6908 - (C6907 + C6906) + C6909) * C50913 +
             (C977 * C1392 - (C6114 * C1386 + C6115 * C1391) + C978 * C50612) *
                 C50807) *
                C2302 +
            ((C6912 - (C6911 + C6910) + C6913) * C50913 +
             (C979 * C1392 - (C978 * C1386 + C977 * C1391) + C980 * C50612) *
                 C50807) *
                C2303 +
            ((C6916 - (C6915 + C6914) + C6917) * C50913 +
             (C981 * C1392 - (C980 * C1386 + C979 * C1391) + C982 * C50612) *
                 C50807) *
                C2304) *
               C50708) *
              C50899 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50765 * C304) * C1386 +
               (C117 * C287 + C50765 * C294) * C1391) +
              C328 * C50612) *
                 C50913 +
             (C6918 - (C6919 + C6920) + C6921) * C50807) *
                C2302 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                 C50913 +
             (C6922 - (C6923 + C6924) + C6925) * C50807) *
                C2303 +
            ((C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50612) *
                 C50913 +
             (C6926 - (C6927 + C6928) + C6929) * C50807) *
                C2304) *
               C1643 +
           (((C6920 + C6919 - C6918 - C6921) * C50913 +
             (C6286 * C1391 + C6287 * C1386 - C6288 * C1392 - C6289 * C50612) *
                 C50807) *
                C2302 +
            ((C6924 + C6923 - C6922 - C6925) * C50913 +
             (C6288 * C1391 + C6289 * C1386 - C6290 * C1392 - C6291 * C50612) *
                 C50807) *
                C2303 +
            ((C6928 + C6927 - C6926 - C6929) * C50913 +
             (C6290 * C1391 + C6291 * C1386 -
              (C117 * C1080 + C50765 * C1085) * C1392 -
              (C117 * C1084 + C50765 * C1092) * C50612) *
                 C50807) *
                C2304) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1391 +
             (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
             C172 * C50612) *
                C20950 +
            (C6906 + C6907 - C6908 - C6909) * C20951 + C17594 * C20952 +
            (C17586 + C17585 - C17584 - C17587) * C20953) *
               C50629 * C1643 +
           ((C6908 - (C6907 + C6906) + C6909) * C20950 +
            (C7434 - (C7435 + C7436) + C7437) * C20951 +
            (C17584 - (C17585 + C17586) + C17587) * C20952 +
            (C16298 * C1392 - (C16587 * C1386 + C16586 * C1391) +
             C16299 * C50612) *
                C20953) *
               C50629 * C50708) *
              C50899 +
          (((C327 * C1392 -
             ((C117 * C293 + C50765 * C304) * C1386 +
              (C117 * C287 + C50765 * C294) * C1391) +
             C328 * C50612) *
                C20950 +
            (C6918 - (C6919 + C6920) + C6921) * C20951 +
            (C17076 - (C17077 + C17078) + C17079) * C20952 +
            (C22045 - (C22046 + C22047) + C22048) * C20953) *
               C50629 * C1643 +
           ((C6920 + C6919 - C6918 - C6921) * C20950 +
            (C17078 + C17077 - C17076 - C17079) * C20951 +
            (C22047 + C22046 - C22045 - C22048) * C20952 +
            (C21636 * C1391 + C21637 * C1386 -
             (C117 * C16447 + C50765 * C16449) * C1392 -
             (C117 * C16448 + C50765 * C16450) * C50612) *
                C20953) *
               C50629 * C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C1391 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C1386 -
            (C8086 + C8087 + C8088) * C1392 -
            (C8089 + C8090 + C8091) * C50612) *
               C50913 +
           ((C12983 + C12984 + C12985) * C1391 +
            (C12986 + C12987 + C12988) * C1386 -
            (C8458 + C8457 + C8456) * C1392 -
            (C8461 + C8460 + C8459) * C50612) *
               C50807) *
              C50629 * C50945 +
          (((C8456 + C8457 + C8458) * C1392 -
            ((C12988 + C12987 + C12986) * C1386 +
             (C12985 + C12984 + C12983) * C1391) +
            (C8459 + C8460 + C8461) * C50612) *
               C50913 +
           ((C9052 + C9051 + C9050) * C1392 -
            ((C13573 + C13574 + C13575) * C1386 +
             (C13576 + C13577 + C13578) * C1391) +
            (C9055 + C9054 + C9053) * C50612) *
               C50807) *
              C50629 * C50935 +
          (((C13578 + C13577 + C13576) * C1391 +
            (C13575 + C13574 + C13573) * C1386 -
            (C9050 + C9051 + C9052) * C1392 -
            (C9053 + C9054 + C9055) * C50612) *
               C50913 +
           ((C13861 + C13862 + C13863) * C1391 +
            (C13864 + C13865 + C13866) * C1386 -
            (C8048 * C9307 + C8043 * C9310 + C8047 * C3592 + C8042 * C3597 +
             C8046 * C1168 + C8041 * C1175) *
                C1392 -
            (C8048 * C9309 + C8043 * C9313 + C8047 * C3596 + C8042 * C3601 +
             C8046 * C1174 + C8041 * C1180) *
                C50612) *
               C50807) *
              C50629 * C1875) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1391 +
             (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
             C172 * C50612) *
                C50913 +
            (C6906 + C6907 - C6908 - C6909) * C50807) *
               C2302 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                C50913 +
            (C6910 + C6911 - C6912 - C6913) * C50807) *
               C2303 +
           ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
                C50913 +
            (C6914 + C6915 - C6916 - C6917) * C50807) *
               C2304) *
              C50945 +
          (((C6908 - (C6907 + C6906) + C6909) * C50913 +
            (C7434 - (C7435 + C7436) + C7437) * C50807) *
               C2302 +
           ((C6912 - (C6911 + C6910) + C6913) * C50913 +
            (C7438 - (C7439 + C7440) + C7441) * C50807) *
               C2303 +
           ((C6916 - (C6915 + C6914) + C6917) * C50913 +
            (C7442 - (C7443 + C7444) + C7445) * C50807) *
               C2304) *
              C50935 +
          (((C7436 + C7435 - C7434 - C7437) * C50913 +
            (C6416 * C1391 + C6417 * C1386 - C6116 * C1392 - C6117 * C50612) *
                C50807) *
               C2302 +
           ((C7440 + C7439 - C7438 - C7441) * C50913 +
            (C6116 * C1391 + C6117 * C1386 - C6118 * C1392 - C6119 * C50612) *
                C50807) *
               C2303 +
           ((C7444 + C7443 - C7442 - C7445) * C50913 +
            (C6118 * C1391 + C6119 * C1386 -
             (C117 * C1166 + C50765 * C1171) * C1392 -
             (C117 * C1170 + C50765 * C1178) * C50612) *
                C50807) *
               C2304) *
              C1875) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C1391 +
            (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
            C172 * C50612) *
               C20950 +
           (C6906 + C6907 - C6908 - C6909) * C20951 + C17594 * C20952 +
           C22387 * C20953) *
              C50629 * C50945 +
          ((C6908 - (C6907 + C6906) + C6909) * C20950 +
           (C7434 - (C7435 + C7436) + C7437) * C20951 +
           (C17584 - (C17585 + C17586) + C17587) * C20952 +
           (C22382 - (C22383 + C22384) + C22385) * C20953) *
              C50629 * C50935 +
          (C17594 * C20950 + C22387 * C20951 +
           (C22384 + C22383 - C22382 - C22385) * C20952 +
           (C21715 * C1391 + C21716 * C1386 -
            (C117 * C16569 + C50765 * C16572) * C1392 -
            (C117 * C16571 + C50765 * C16575) * C50612) *
               C20953) *
              C50629 * C1875) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C49720 +
             (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
             C172 * C50612) *
                C50913 +
            (C5498 * C49720 + C5499 * C50884 - C475 * C49713 - C476 * C50612) *
                C50807) *
               C2302 +
           ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                C50913 +
            (C475 * C49720 + C476 * C50884 - C477 * C49713 - C478 * C50612) *
                C50807) *
               C2303 +
           ((C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
                C50913 +
            (C477 * C49720 + C478 * C50884 - C479 * C49713 - C480 * C50612) *
                C50807) *
               C2304) *
              C50696 * C582 +
          (((C327 * C49713 -
             ((C117 * C293 + C50765 * C304) * C50884 +
              (C117 * C287 + C50765 * C294) * C49720) +
             C328 * C50612) *
                C50913 +
            (C1540 * C49713 -
             ((C117 * C820 + C50765 * C835) * C50884 +
              (C117 * C811 + C50765 * C819) * C49720) +
             C1541 * C50612) *
                C50807) *
               C2302 +
           ((C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
                C50913 +
            (C1542 * C49713 - (C1541 * C50884 + C1540 * C49720) +
             C1543 * C50612) *
                C50807) *
               C2303 +
           ((C331 * C49713 - (C330 * C50884 + C329 * C49720) + C332 * C50612) *
                C50913 +
            (C1544 * C49713 - (C1543 * C50884 + C1542 * C49720) +
             C1545 * C50612) *
                C50807) *
               C2304) *
              C50696 * C583 +
          ((((C117 * C587 + C50765 * C592) * C49720 +
             (C117 * C593 + C50765 * C602) * C50884 - C620 * C49713 -
             C621 * C50612) *
                C50913 +
            ((C117 * C818 + C50765 * C834) * C49720 +
             (C117 * C833 + C50765 * C842) * C50884 - C5656 * C49713 -
             C5657 * C50612) *
                C50807) *
               C2302 +
           ((C620 * C49720 + C621 * C50884 - C622 * C49713 - C623 * C50612) *
                C50913 +
            (C5656 * C49720 + C5657 * C50884 - C5658 * C49713 -
             C5659 * C50612) *
                C50807) *
               C2303 +
           ((C622 * C49720 + C623 * C50884 - C624 * C49713 - C625 * C50612) *
                C50913 +
            (C5658 * C49720 + C5659 * C50884 -
             (C117 * C815 + C50765 * C828) * C49713 -
             (C117 * C827 + C50765 * C839) * C50612) *
                C50807) *
               C2304) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C118 +
            (C117 * C130 + C50765 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C50913 +
           ((C117 * C435 + C50765 * C442) * C118 +
            (C117 * C441 + C50765 * C452) * C106 - C475 * C119 - C476 * C107 +
            C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
               C50807) *
              C2302 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50913 +
           (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
            C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
               C50807) *
              C2303 +
          ((C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C50913 +
           (C477 * C118 + C478 * C106 - C479 * C119 - C480 * C107 +
            C481 * C120 + C482 * C108 - (C117 * C439 + C50765 * C450) * C121 -
            (C117 * C451 + C50765 * C457) * C109) *
               C50807) *
              C2304) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
            C8048 * C587 + C8043 * C592) *
               C118 +
           (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
            C8048 * C593 + C8043 * C602) *
               C106 -
           (C8086 + C8087 + C8088) * C119 - (C8089 + C8090 + C8091) * C107 +
           (C8092 + C8093 + C8094) * C120 + (C8095 + C8096 + C8097) * C108 -
           (C8098 + C8099 + C8100) * C121 - (C8101 + C8102 + C8103) * C109) *
              C50913 +
          ((C8046 * C435 + C8041 * C442 + C8047 * C811 + C8042 * C819 +
            C8048 * C818 + C8043 * C834) *
               C118 +
           (C8046 * C441 + C8041 * C452 + C8047 * C820 + C8042 * C835 +
            C8048 * C833 + C8043 * C842) *
               C106 -
           (C8458 + C8457 + C8456) * C119 - (C8461 + C8460 + C8459) * C107 +
           (C8464 + C8463 + C8462) * C120 + (C8467 + C8466 + C8465) * C108 -
           (C8048 * C815 + C8043 * C828 + C8047 * C814 + C8042 * C825 +
            C8046 * C437 + C8041 * C446) *
               C121 -
           (C8048 * C827 + C8043 * C839 + C8047 * C826 + C8042 * C838 +
            C8046 * C447 + C8041 * C455) *
               C109) *
              C50807) *
         C50629 * C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C49720 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50884 -
            (C8086 + C8087 + C8088) * C49713 -
            (C8089 + C8090 + C8091) * C50612) *
               C50913 +
           ((C12983 + C12984 + C12985) * C49720 +
            (C12986 + C12987 + C12988) * C50884 -
            (C8458 + C8457 + C8456) * C49713 -
            (C8461 + C8460 + C8459) * C50612) *
               C50807) *
              C50629 * C50696 * C582 +
          (((C8274 + C8275 + C8276) * C49713 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50884 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C49720) +
            (C8277 + C8278 + C8279) * C50612) *
               C50913 +
           ((C9816 + C9815 + C9814) * C49713 -
            ((C8048 * C3160 + C8043 * C3164 + C8047 * C833 + C8042 * C842 +
              C8046 * C820 + C8041 * C835) *
                 C50884 +
             (C8048 * C3155 + C8043 * C3161 + C8047 * C818 + C8042 * C834 +
              C8046 * C811 + C8041 * C819) *
                 C49720) +
            (C9819 + C9818 + C9817) * C50612) *
               C50807) *
              C50629 * C50696 * C583 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C49720 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C50884 -
            (C8626 + C8627 + C8628) * C49713 -
            (C8629 + C8630 + C8631) * C50612) *
               C50913 +
           ((C8046 * C818 + C8041 * C834 + C8047 * C3155 + C8042 * C3161 +
             C8048 * C8884 + C8043 * C8888) *
                C49720 +
            (C8046 * C833 + C8041 * C842 + C8047 * C3160 + C8042 * C3164 +
             C8048 * C8887 + C8043 * C8890) *
                C50884 -
            (C8048 * C8883 + C8043 * C8886 + C8047 * C3154 + C8042 * C3159 +
             C8046 * C817 + C8041 * C832) *
                C49713 -
            (C8048 * C8885 + C8043 * C8889 + C8047 * C3158 + C8042 * C3163 +
             C8046 * C831 + C8041 * C841) *
                C50612) *
               C50807) *
              C50629 * C50696 * C584)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50765 * C129) * C118 +
           (C117 * C130 + C50765 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C20950 +
          (C5498 * C118 + C5499 * C106 - C475 * C119 - C476 * C107 +
           C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
              C20951 +
          (C6115 * C118 + C6114 * C106 - C977 * C119 - C978 * C107 +
           C979 * C120 + C980 * C108 - C981 * C121 - C982 * C109) *
              C20952 +
          (C6416 * C118 + C6417 * C106 - C6116 * C119 - C6117 * C107 +
           C6118 * C120 + C6119 * C108 -
           (C117 * C1166 + C50765 * C1171) * C121 -
           (C117 * C1170 + C50765 * C1178) * C109) *
              C20953) *
         C50629 * C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C49720 +
            (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
            C172 * C50612) *
               C20950 +
           (C6080 + C6081 - C6082 - C6083) * C20951 + C16300 * C20952 +
           (C16286 + C16285 - C16284 - C16287) * C20953) *
              C50629 * C50696 * C582 +
          ((C327 * C49713 -
            ((C117 * C293 + C50765 * C304) * C50884 +
             (C117 * C287 + C50765 * C294) * C49720) +
            C328 * C50612) *
               C20950 +
           (C7640 - (C7641 + C7642) + C7643) * C20951 +
           (C17790 - (C17791 + C17792) + C17793) * C20952 +
           (C16466 * C49713 - (C16465 * C50884 + C16464 * C49720) +
            C16467 * C50612) *
               C20953) *
              C50629 * C50696 * C583 +
          (((C117 * C587 + C50765 * C592) * C49720 +
            (C117 * C593 + C50765 * C602) * C50884 - C620 * C49713 -
            C621 * C50612) *
               C20950 +
           (C5928 * C49720 + C5929 * C50884 - C5656 * C49713 - C5657 * C50612) *
               C20951 +
           (C16132 * C49720 + C16133 * C50884 - C15880 * C49713 -
            C15881 * C50612) *
               C20952 +
           ((C117 * C9308 + C50765 * C9312) * C49720 +
            (C117 * C9311 + C50765 * C9314) * C50884 -
            (C117 * C9307 + C50765 * C9310) * C49713 -
            (C117 * C9309 + C50765 * C9313) * C50612) *
               C20953) *
              C50629 * C50696 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C50913 +
            (C5498 * C696 + C5499 * C50607) * C50807) *
               C2302 +
           ((C171 * C696 + C172 * C50607) * C50913 +
            (C475 * C696 + C476 * C50607) * C50807) *
               C2303 +
           ((C173 * C696 + C174 * C50607) * C50913 +
            (C477 * C696 + C478 * C50607) * C50807) *
               C2304) *
              C50696 * C692 -
          (((C1543 * C50607 + C1542 * C696) * C50807 +
            (C330 * C50607 + C329 * C696) * C50913) *
               C2304 +
           ((C1541 * C50607 + C1540 * C696) * C50807 +
            (C328 * C50607 + C327 * C696) * C50913) *
               C2303 +
           (((C117 * C820 + C50765 * C835) * C50607 +
             (C117 * C811 + C50765 * C819) * C696) *
                C50807 +
            ((C117 * C293 + C50765 * C304) * C50607 +
             (C117 * C287 + C50765 * C294) * C696) *
                C50913) *
               C2302) *
              C50696 * C693 +
          ((((C117 * C587 + C50765 * C592) * C696 +
             (C117 * C593 + C50765 * C602) * C50607) *
                C50913 +
            ((C117 * C818 + C50765 * C834) * C696 +
             (C117 * C833 + C50765 * C842) * C50607) *
                C50807) *
               C2302 +
           ((C620 * C696 + C621 * C50607) * C50913 +
            (C5656 * C696 + C5657 * C50607) * C50807) *
               C2303 +
           ((C622 * C696 + C623 * C50607) * C50913 +
            (C5658 * C696 + C5659 * C50607) * C50807) *
               C2304) *
              C50696 * C694 -
          ((((C117 * C3156 + C50765 * C3162) * C50607 +
             (C117 * C3153 + C50765 * C3157) * C696) *
                C50807 +
            ((C117 * C703 + C50765 * C710) * C50607 +
             (C117 * C698 + C50765 * C704) * C696) *
                C50913) *
               C2304 +
           (((C117 * C3158 + C50765 * C3163) * C50607 +
             (C117 * C3154 + C50765 * C3159) * C696) *
                C50807 +
            ((C117 * C705 + C50765 * C711) * C50607 +
             (C117 * C699 + C50765 * C706) * C696) *
                C50913) *
               C2303 +
           (((C117 * C3160 + C50765 * C3164) * C50607 +
             (C117 * C3155 + C50765 * C3161) * C696) *
                C50807 +
            ((C117 * C707 + C50765 * C712) * C50607 +
             (C117 * C700 + C50765 * C708) * C696) *
                C50913) *
               C2302) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C283 +
             (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C50913 +
            ((C117 * C435 + C50765 * C442) * C283 +
             (C117 * C441 + C50765 * C452) * C278 - C475 * C284 - C476 * C279 +
             C477 * C285 + C478 * C280) *
                C50807) *
               C2302 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50913 +
            (C475 * C283 + C476 * C278 - C477 * C284 - C478 * C279 +
             C479 * C285 + C480 * C280) *
                C50807) *
               C2303 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C50913 +
            (C477 * C283 + C478 * C278 - C479 * C284 - C480 * C279 +
             C481 * C285 + C482 * C280) *
                C50807) *
               C2304) *
              C50696 * C50899 +
          (((C327 * C284 -
             ((C117 * C293 + C50765 * C304) * C278 +
              (C117 * C287 + C50765 * C294) * C283) +
             C328 * C279 - C329 * C285 - C330 * C280) *
                C50913 +
            (C1540 * C284 -
             ((C117 * C820 + C50765 * C835) * C278 +
              (C117 * C811 + C50765 * C819) * C283) +
             C1541 * C279 - C1542 * C285 - C1543 * C280) *
                C50807) *
               C2302 +
           ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
             C331 * C285 - C332 * C280) *
                C50913 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50807) *
               C2303 +
           ((C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
             C333 * C285 - C334 * C280) *
                C50913 +
            (C1544 * C284 - (C1543 * C278 + C1542 * C283) + C1545 * C279 -
             (C117 * C1523 + C50765 * C1524) * C285 -
             (C117 * C1525 + C50765 * C1526) * C280) *
                C50807) *
               C2304) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C283 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C278 -
            (C8086 + C8087 + C8088) * C284 - (C8089 + C8090 + C8091) * C279 +
            (C8092 + C8093 + C8094) * C285 + (C8095 + C8096 + C8097) * C280) *
               C50913 +
           ((C8046 * C435 + C8041 * C442 + C8047 * C811 + C8042 * C819 +
             C8048 * C818 + C8043 * C834) *
                C283 +
            (C8046 * C441 + C8041 * C452 + C8047 * C820 + C8042 * C835 +
             C8048 * C833 + C8043 * C842) *
                C278 -
            (C8458 + C8457 + C8456) * C284 - (C8461 + C8460 + C8459) * C279 +
            (C8464 + C8463 + C8462) * C285 + (C8467 + C8466 + C8465) * C280) *
               C50807) *
              C50629 * C50696 * C50899 +
          (((C8274 + C8275 + C8276) * C284 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C278 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C283) +
            (C8277 + C8278 + C8279) * C279 - (C8280 + C8281 + C8282) * C285 -
            (C8283 + C8284 + C8285) * C280) *
               C50913 +
           ((C9816 + C9815 + C9814) * C284 -
            ((C8048 * C3160 + C8043 * C3164 + C8047 * C833 + C8042 * C842 +
              C8046 * C820 + C8041 * C835) *
                 C278 +
             (C8048 * C3155 + C8043 * C3161 + C8047 * C818 + C8042 * C834 +
              C8046 * C811 + C8041 * C819) *
                 C283) +
            (C9819 + C9818 + C9817) * C279 -
            (C8048 * C3153 + C8043 * C3157 + C8047 * C816 + C8042 * C830 +
             C8046 * C813 + C8041 * C823) *
                C285 -
            (C8048 * C3156 + C8043 * C3162 + C8047 * C829 + C8042 * C840 +
             C8046 * C824 + C8041 * C837) *
                C280) *
               C50807) *
              C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C696 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50607) *
               C50913 +
           ((C12983 + C12984 + C12985) * C696 +
            (C12986 + C12987 + C12988) * C50607) *
               C50807) *
              C50629 * C50696 * C692 -
          (((C8048 * C3160 + C8043 * C3164 + C8047 * C833 + C8042 * C842 +
             C8046 * C820 + C8041 * C835) *
                C50607 +
            (C8048 * C3155 + C8043 * C3161 + C8047 * C818 + C8042 * C834 +
             C8046 * C811 + C8041 * C819) *
                C696) *
               C50807 +
           ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
             C8046 * C293 + C8041 * C304) *
                C50607 +
            (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
             C8046 * C287 + C8041 * C294) *
                C696) *
               C50913) *
              C50629 * C50696 * C693 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C696 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C50607) *
               C50913 +
           ((C8046 * C818 + C8041 * C834 + C8047 * C3155 + C8042 * C3161 +
             C8048 * C8884 + C8043 * C8888) *
                C696 +
            (C8046 * C833 + C8041 * C842 + C8047 * C3160 + C8042 * C3164 +
             C8048 * C8887 + C8043 * C8890) *
                C50607) *
               C50807) *
              C50629 * C50696 * C694 -
          (((C8048 * C11329 + C8043 * C11331 + C8047 * C8887 + C8042 * C8890 +
             C8046 * C3160 + C8041 * C3164) *
                C50607 +
            (C8048 * C11328 + C8043 * C11330 + C8047 * C8884 + C8042 * C8888 +
             C8046 * C3155 + C8041 * C3161) *
                C696) *
               C50807 +
           ((C8048 * C8733 + C8043 * C8736 + C8047 * C3002 + C8042 * C3006 +
             C8046 * C707 + C8041 * C712) *
                C50607 +
            (C8048 * C8730 + C8043 * C8734 + C8047 * C2997 + C8042 * C3003 +
             C8046 * C700 + C8041 * C708) *
                C696) *
               C50913) *
              C50629 * C50696 * C695)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C283 +
            (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C20950 +
           (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C20951 +
           (C15718 + C15719 - C15720 - C15721 + C15722 + C15723) * C20952 +
           (C6416 * C283 + C6417 * C278 - C6116 * C284 - C6117 * C279 +
            C6118 * C285 + C6119 * C280) *
               C20953) *
              C50629 * C50696 * C50899 +
          ((C327 * C284 -
            ((C117 * C293 + C50765 * C304) * C278 +
             (C117 * C287 + C50765 * C294) * C283) +
            C328 * C279 - C329 * C285 - C330 * C280) *
               C20950 +
           (C1540 * C284 - (C5927 * C278 + C5926 * C283) + C1541 * C279 -
            C1542 * C285 - C1543 * C280) *
               C20951 +
           (C6288 * C284 - (C6287 * C278 + C6286 * C283) + C6289 * C279 -
            C6290 * C285 - C6291 * C280) *
               C20952 +
           (C16466 * C284 - (C16465 * C278 + C16464 * C283) + C16467 * C279 -
            (C117 * C3591 + C50765 * C3595) * C285 -
            (C117 * C3594 + C50765 * C3600) * C280) *
               C20953) *
              C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C696 +
            (C117 * C130 + C50765 * C143) * C50607) *
               C20950 +
           (C5904 + C5905) * C20951 + C16452 * C20952 +
           (C6418 + C6419) * C20953) *
              C50629 * C50696 * C692 -
          ((C16469 + C16468) * C20953 + C16463 * C20952 +
           (C5931 + C5930) * C20951 +
           ((C117 * C293 + C50765 * C304) * C50607 +
            (C117 * C287 + C50765 * C294) * C696) *
               C20950) *
              C50629 * C50696 * C693 +
          (((C117 * C587 + C50765 * C592) * C696 +
            (C117 * C593 + C50765 * C602) * C50607) *
               C20950 +
           (C5932 + C5933) * C20951 + (C16134 + C16135) * C20952 +
           ((C117 * C9308 + C50765 * C9312) * C696 +
            (C117 * C9311 + C50765 * C9314) * C50607) *
               C20953) *
              C50629 * C50696 * C694 -
          (((C117 * C11599 + C50765 * C11601) * C50607 +
            (C117 * C11598 + C50765 * C11600) * C696) *
               C20953 +
           ((C117 * C9205 + C50765 * C9208) * C50607 +
            (C117 * C9202 + C50765 * C9206) * C696) *
               C20952 +
           ((C117 * C3160 + C50765 * C3164) * C50607 +
            (C117 * C3155 + C50765 * C3161) * C696) *
               C20951 +
           ((C117 * C707 + C50765 * C712) * C50607 +
            (C117 * C700 + C50765 * C708) * C696) *
               C20950) *
              C50629 * C50696 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C50913 +
             (C5904 + C5905) * C50807) *
                C2302 +
            ((C171 * C696 + C172 * C50607) * C50913 +
             (C5906 + C5907) * C50807) *
                C2303 +
            ((C173 * C696 + C174 * C50607) * C50913 +
             (C5908 + C5909) * C50807) *
                C2304) *
               C50900 -
           (((C980 * C50607 + C979 * C696) * C50807 +
             (C5909 + C5908) * C50913) *
                C2304 +
            ((C978 * C50607 + C977 * C696) * C50807 +
             (C5907 + C5906) * C50913) *
                C2303 +
            (((C117 * C950 + C50765 * C959) * C50607 +
              (C117 * C944 + C50765 * C949) * C696) *
                 C50807 +
             (C5905 + C5904) * C50913) *
                C2302) *
               C50708) *
              C582 +
          ((((C5930 + C5931) * C50913 +
             ((C117 * C1083 + C50765 * C1091) * C696 +
              (C117 * C1090 + C50765 * C1095) * C50607) *
                 C50807) *
                C2302 +
            ((C5914 + C5915) * C50913 +
             ((C117 * C1082 + C50765 * C1089) * C696 +
              (C117 * C1088 + C50765 * C1094) * C50607) *
                 C50807) *
                C2303 +
            ((C5916 + C5917) * C50913 +
             ((C117 * C1081 + C50765 * C1087) * C696 +
              (C117 * C1086 + C50765 * C1093) * C50607) *
                 C50807) *
                C2304) *
               C50708 -
           (((C5917 + C5916) * C50807 +
             (C330 * C50607 + C329 * C696) * C50913) *
                C2304 +
            ((C5915 + C5914) * C50807 +
             (C328 * C50607 + C327 * C696) * C50913) *
                C2303 +
            ((C5931 + C5930) * C50807 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C50913) *
                C2302) *
               C50900) *
              C583 +
          (((((C117 * C587 + C50765 * C592) * C696 +
              (C117 * C593 + C50765 * C602) * C50607) *
                 C50913 +
             (C5932 + C5933) * C50807) *
                C2302 +
            ((C620 * C696 + C621 * C50607) * C50913 +
             (C5922 + C5923) * C50807) *
                C2303 +
            ((C622 * C696 + C623 * C50607) * C50913 +
             (C5924 + C5925) * C50807) *
                C2304) *
               C50900 -
           ((((C117 * C3484 + C50765 * C3490) * C50607 +
              (C117 * C3481 + C50765 * C3485) * C696) *
                 C50807 +
             (C5925 + C5924) * C50913) *
                C2304 +
            (((C117 * C3486 + C50765 * C3491) * C50607 +
              (C117 * C3482 + C50765 * C3487) * C696) *
                 C50807 +
             (C5923 + C5922) * C50913) *
                C2303 +
            (((C117 * C3488 + C50765 * C3492) * C50607 +
              (C117 * C3483 + C50765 * C3489) * C696) *
                 C50807 +
             (C5933 + C5932) * C50913) *
                C2302) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C283 +
             (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C50913 +
            (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C50807) *
               C2302 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50913 +
            (C5486 + C5487 - C5488 - C5489 + C5490 + C5491) * C50807) *
               C2303 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C50913 +
            (C5492 + C5493 - C5494 - C5495 + C5496 + C5497) * C50807) *
               C2304) *
              C50900 +
          (((C5482 - (C5501 + C5500) + C5483 - C5484 - C5485) * C50913 +
            (C977 * C284 -
             ((C117 * C950 + C50765 * C959) * C278 +
              (C117 * C944 + C50765 * C949) * C283) +
             C978 * C279 - C979 * C285 - C980 * C280) *
                C50807) *
               C2302 +
           ((C5488 - (C5487 + C5486) + C5489 - C5490 - C5491) * C50913 +
            (C979 * C284 - (C978 * C278 + C977 * C283) + C980 * C279 -
             C981 * C285 - C982 * C280) *
                C50807) *
               C2303 +
           ((C5494 - (C5493 + C5492) + C5495 - C5496 - C5497) * C50913 +
            (C981 * C284 - (C980 * C278 + C979 * C283) + C982 * C279 -
             (C117 * C948 + C50765 * C957) * C285 -
             (C117 * C958 + C50765 * C963) * C280) *
                C50807) *
               C2304) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C283 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C278 -
            (C8086 + C8087 + C8088) * C284 - (C8089 + C8090 + C8091) * C279 +
            (C8092 + C8093 + C8094) * C285 + (C8095 + C8096 + C8097) * C280) *
               C50913 +
           ((C12983 + C12984 + C12985) * C283 +
            (C12986 + C12987 + C12988) * C278 - (C8458 + C8457 + C8456) * C284 -
            (C8461 + C8460 + C8459) * C279 + (C8464 + C8463 + C8462) * C285 +
            (C8467 + C8466 + C8465) * C280) *
               C50807) *
              C50629 * C50900 +
          (((C8456 + C8457 + C8458) * C284 -
            ((C12988 + C12987 + C12986) * C278 +
             (C12985 + C12984 + C12983) * C283) +
            (C8459 + C8460 + C8461) * C279 - (C8462 + C8463 + C8464) * C285 -
            (C8465 + C8466 + C8467) * C280) *
               C50913 +
           ((C9052 + C9051 + C9050) * C284 -
            ((C8048 * C3488 + C8043 * C3492 + C8047 * C1090 + C8042 * C1095 +
              C8046 * C950 + C8041 * C959) *
                 C278 +
             (C8048 * C3483 + C8043 * C3489 + C8047 * C1083 + C8042 * C1091 +
              C8046 * C944 + C8041 * C949) *
                 C283) +
            (C9055 + C9054 + C9053) * C279 -
            (C8048 * C3481 + C8043 * C3485 + C8047 * C1081 + C8042 * C1087 +
             C8046 * C946 + C8041 * C953) *
                C285 -
            (C8048 * C3484 + C8043 * C3490 + C8047 * C1086 + C8042 * C1093 +
             C8046 * C954 + C8041 * C961) *
                C280) *
               C50807) *
              C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C696 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50607) *
                C50913 +
            ((C12983 + C12984 + C12985) * C696 +
             (C12986 + C12987 + C12988) * C50607) *
                C50807) *
               C50629 * C50900 -
           (((C8048 * C3488 + C8043 * C3492 + C8047 * C1090 + C8042 * C1095 +
              C8046 * C950 + C8041 * C959) *
                 C50607 +
             (C8048 * C3483 + C8043 * C3489 + C8047 * C1083 + C8042 * C1091 +
              C8046 * C944 + C8041 * C949) *
                 C696) *
                C50807 +
            ((C12988 + C12987 + C12986) * C50607 +
             (C12985 + C12984 + C12983) * C696) *
                C50913) *
               C50629 * C50708) *
              C582 +
          ((((C13403 + C13404 + C13405) * C696 +
             (C13406 + C13407 + C13408) * C50607) *
                C50913 +
            ((C8046 * C1083 + C8041 * C1091 + C8047 * C3483 + C8042 * C3489 +
              C8048 * C9202 + C8043 * C9206) *
                 C696 +
             (C8046 * C1090 + C8041 * C1095 + C8047 * C3488 + C8042 * C3492 +
              C8048 * C9205 + C8043 * C9208) *
                 C50607) *
                C50807) *
               C50629 * C50708 -
           (((C13408 + C13407 + C13406) * C50607 +
             (C13405 + C13404 + C13403) * C696) *
                C50807 +
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50607 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C696) *
                C50913) *
               C50629 * C50900) *
              C583 +
          ((((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
              C8048 * C2997 + C8043 * C3003) *
                 C696 +
             (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
              C8048 * C3002 + C8043 * C3006) *
                 C50607) *
                C50913 +
            ((C13409 + C13410 + C13411) * C696 +
             (C13412 + C13413 + C13414) * C50607) *
                C50807) *
               C50629 * C50900 -
           (((C8048 * C11529 + C8043 * C11531 + C8047 * C9205 + C8042 * C9208 +
              C8046 * C3488 + C8041 * C3492) *
                 C50607 +
             (C8048 * C11528 + C8043 * C11530 + C8047 * C9202 + C8042 * C9206 +
              C8046 * C3483 + C8041 * C3489) *
                 C696) *
                C50807 +
            ((C13414 + C13413 + C13412) * C50607 +
             (C13411 + C13410 + C13409) * C696) *
                C50913) *
               C50629 * C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C283 +
            (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C20950 +
           (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C20951 +
           (C15718 + C15719 - C15720 - C15721 + C15722 + C15723) * C20952 +
           (C21151 + C21152 - C21153 - C21154 + C21155 + C21156) * C20953) *
              C50629 * C50900 +
          ((C5482 - (C5501 + C5500) + C5483 - C5484 - C5485) * C20950 +
           (C15720 - (C15719 + C15718) + C15721 - C15722 - C15723) * C20951 +
           (C21153 - (C21152 + C21151) + C21154 - C21155 - C21156) * C20952 +
           (C16298 * C284 - (C16587 * C278 + C16586 * C283) + C16299 * C279 -
            (C117 * C6395 + C50765 * C6399) * C285 -
            (C117 * C6398 + C50765 * C6404) * C280) *
               C20953) *
              C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C20950 +
            (C5904 + C5905) * C20951 + C16452 * C20952 +
            (C6418 + C6419) * C20953) *
               C50629 * C50900 -
           ((C16589 + C16588) * C20953 + C16579 * C20952 +
            (C6272 + C6273) * C20951 + (C5905 + C5904) * C20950) *
               C50629 * C50708) *
              C582 +
          (((C5930 + C5931) * C20950 + (C6292 + C6293) * C20951 +
            (C16468 + C16469) * C20952 +
            ((C117 * C13841 + C50765 * C13845) * C696 +
             (C117 * C13843 + C50765 * C13847) * C50607) *
                C20953) *
               C50629 * C50708 -
           ((C16469 + C16468) * C20953 + C16463 * C20952 +
            (C5931 + C5930) * C20951 +
            ((C117 * C293 + C50765 * C304) * C50607 +
             (C117 * C287 + C50765 * C294) * C696) *
                C20950) *
               C50629 * C50900) *
              C583 +
          ((((C117 * C587 + C50765 * C592) * C696 +
             (C117 * C593 + C50765 * C602) * C50607) *
                C20950 +
            (C5932 + C5933) * C20951 + (C16134 + C16135) * C20952 +
            (C21425 + C21426) * C20953) *
               C50629 * C50900 -
           (((C117 * C13842 + C50765 * C13846) * C50607 +
             (C117 * C13840 + C50765 * C13844) * C696) *
                C20953 +
            (C21426 + C21425) * C20952 + (C16135 + C16134) * C20951 +
            (C5933 + C5932) * C20950) *
               C50629 * C50708) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[135] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C117 * C122 + C50765 * C129) * C1285 +
                      (C117 * C130 + C50765 * C143) * C50942 - C171 * C1286 -
                      C172 * C50926 + C173 * C1287 + C174 * C1282) *
                         C32080 +
                     (C7076 + C7077 - C7078 - C7079 + C7080 + C7081) * C50807) *
                        C50943 +
                    ((C171 * C1285 + C172 * C50942 - C173 * C1286 -
                      C174 * C50926 + C175 * C1287 + C176 * C1282) *
                         C32080 +
                     (C7082 + C7083 - C7084 - C7085 + C7086 + C7087) * C50807) *
                        C50929 +
                    ((C173 * C1285 + C174 * C50942 - C175 * C1286 -
                      C176 * C50926 + C177 * C1287 + C178 * C1282) *
                         C32080 +
                     (C7088 + C7089 - C7090 - C7091 + C7092 + C7093) * C50807) *
                        C22819) *
                       C50696 * C1283 +
                   (((C327 * C1286 -
                      ((C117 * C293 + C50765 * C304) * C50942 +
                       (C117 * C287 + C50765 * C294) * C1285) +
                      C328 * C50926 - C329 * C1287 - C330 * C1282) *
                         C32080 +
                     (C1540 * C1286 - (C5927 * C50942 + C5926 * C1285) +
                      C1541 * C50926 - C1542 * C1287 - C1543 * C1282) *
                         C50807) *
                        C50943 +
                    ((C329 * C1286 - (C328 * C50942 + C327 * C1285) +
                      C330 * C50926 - C331 * C1287 - C332 * C1282) *
                         C32080 +
                     (C1542 * C1286 - (C1541 * C50942 + C1540 * C1285) +
                      C1543 * C50926 - C1544 * C1287 - C1545 * C1282) *
                         C50807) *
                        C50929 +
                    ((C331 * C1286 - (C330 * C50942 + C329 * C1285) +
                      C332 * C50926 - C333 * C1287 - C334 * C1282) *
                         C32080 +
                     (C1544 * C1286 - (C1543 * C50942 + C1542 * C1285) +
                      C1545 * C50926 - (C117 * C1523 + C50765 * C1524) * C1287 -
                      (C117 * C1525 + C50765 * C1526) * C1282) *
                         C50807) *
                        C22819) *
                       C50696 * C50684)) /
                 (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1391 +
             (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
             C172 * C50612) *
                C32080 +
            (C6906 + C6907 - C6908 - C6909) * C50807) *
               C50943 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                C32080 +
            (C6910 + C6911 - C6912 - C6913) * C50807) *
               C50929 +
           ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
                C32080 +
            (C6914 + C6915 - C6916 - C6917) * C50807) *
               C22819) *
              C50696 * C50944 +
          (((C327 * C1392 -
             ((C117 * C293 + C50765 * C304) * C1386 +
              (C117 * C287 + C50765 * C294) * C1391) +
             C328 * C50612) *
                C32080 +
            (C6918 - (C6919 + C6920) + C6921) * C50807) *
               C50943 +
           ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                C32080 +
            (C6922 - (C6923 + C6924) + C6925) * C50807) *
               C50929 +
           ((C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50612) *
                C32080 +
            (C6926 - (C6927 + C6928) + C6929) * C50807) *
               C22819) *
              C50696 * C50932 +
          ((((C117 * C587 + C50765 * C592) * C1391 +
             (C117 * C593 + C50765 * C602) * C1386 - C620 * C1392 -
             C621 * C50612) *
                C32080 +
            (C5928 * C1391 + C5929 * C1386 - C5656 * C1392 - C5657 * C50612) *
                C50807) *
               C50943 +
           ((C620 * C1391 + C621 * C1386 - C622 * C1392 - C623 * C50612) *
                C32080 +
            (C5656 * C1391 + C5657 * C1386 - C5658 * C1392 - C5659 * C50612) *
                C50807) *
               C50929 +
           ((C622 * C1391 + C623 * C1386 - C624 * C1392 - C625 * C50612) *
                C32080 +
            (C5658 * C1391 + C5659 * C1386 -
             (C117 * C815 + C50765 * C828) * C1392 -
             (C117 * C827 + C50765 * C839) * C50612) *
                C50807) *
               C22819) *
              C50696 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C1391 +
              (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
              C172 * C50612) *
                 C32080 +
             (C6906 + C6907 - C6908 - C6909) * C50807) *
                C50943 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                 C32080 +
             (C6910 + C6911 - C6912 - C6913) * C50807) *
                C50929 +
            ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
                 C32080 +
             (C6914 + C6915 - C6916 - C6917) * C50807) *
                C22819) *
               C50900 +
           (((C6908 - (C6907 + C6906) + C6909) * C32080 +
             (C7434 - (C7435 + C7436) + C7437) * C50807) *
                C50943 +
            ((C6912 - (C6911 + C6910) + C6913) * C32080 +
             (C7438 - (C7439 + C7440) + C7441) * C50807) *
                C50929 +
            ((C6916 - (C6915 + C6914) + C6917) * C32080 +
             (C7442 - (C7443 + C7444) + C7445) * C50807) *
                C22819) *
               C50708) *
              C1283 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50765 * C304) * C1386 +
               (C117 * C287 + C50765 * C294) * C1391) +
              C328 * C50612) *
                 C32080 +
             (C6918 - (C6919 + C6920) + C6921) * C50807) *
                C50943 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                 C32080 +
             (C6922 - (C6923 + C6924) + C6925) * C50807) *
                C50929 +
            ((C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50612) *
                 C32080 +
             (C6926 - (C6927 + C6928) + C6929) * C50807) *
                C22819) *
               C50900 +
           (((C6920 + C6919 - C6918 - C6921) * C32080 +
             (C17078 + C17077 - C17076 - C17079) * C50807) *
                C50943 +
            ((C6924 + C6923 - C6922 - C6925) * C32080 +
             (C17082 + C17081 - C17080 - C17083) * C50807) *
                C50929 +
            ((C6928 + C6927 - C6926 - C6929) * C32080 +
             (C6290 * C1391 + C6291 * C1386 -
              (C117 * C1080 + C50765 * C1085) * C1392 -
              (C117 * C1084 + C50765 * C1092) * C50612) *
                 C50807) *
                C22819) *
               C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C49720 +
              (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
              C172 * C50612) *
                 C32080 +
             (C6080 + C6081 - C6082 - C6083) * C50807) *
                C50943 +
            ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                 C32080 +
             (C6084 + C6085 - C6086 - C6087) * C50807) *
                C50929 +
            ((C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
                 C32080 +
             (C6088 + C6089 - C6090 - C6091) * C50807) *
                C22819) *
               C1643 +
           (((C6082 - (C6081 + C6080) + C6083) * C32080 +
             (C6092 - (C6120 + C6121) + C6097) * C50807) *
                C50943 +
            ((C6086 - (C6085 + C6084) + C6087) * C32080 +
             (C6098 - (C6099 + C6100) + C6101) * C50807) *
                C50929 +
            ((C6090 - (C6089 + C6088) + C6091) * C32080 +
             (C6102 - (C6103 + C6104) + C6105) * C50807) *
                C22819) *
               C50708) *
              C1283 +
          ((((C327 * C49713 -
              ((C117 * C293 + C50765 * C304) * C50884 +
               (C117 * C287 + C50765 * C294) * C49720) +
              C328 * C50612) *
                 C32080 +
             (C7640 - (C7641 + C7642) + C7643) * C50807) *
                C50943 +
            ((C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
                 C32080 +
             (C7644 - (C7645 + C7646) + C7647) * C50807) *
                C50929 +
            ((C331 * C49713 - (C330 * C50884 + C329 * C49720) + C332 * C50612) *
                 C32080 +
             (C7648 - (C7649 + C7650) + C7651) * C50807) *
                C22819) *
               C1643 +
           (((C7642 + C7641 - C7640 - C7643) * C32080 +
             (C17792 + C17791 - C17790 - C17793) * C50807) *
                C50943 +
            ((C7646 + C7645 - C7644 - C7647) * C32080 +
             (C17796 + C17795 - C17794 - C17797) * C50807) *
                C50929 +
            ((C7650 + C7649 - C7648 - C7651) * C32080 +
             (C6290 * C49720 + C6291 * C50884 -
              (C117 * C1080 + C50765 * C1085) * C49713 -
              (C117 * C1084 + C50765 * C1092) * C50612) *
                 C50807) *
                C22819) *
               C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C32080 +
             (C5904 + C5905) * C50807) *
                C50943 +
            ((C171 * C696 + C172 * C50607) * C32080 +
             (C5906 + C5907) * C50807) *
                C50929 +
            ((C173 * C696 + C174 * C50607) * C32080 +
             (C5908 + C5909) * C50807) *
                C22819) *
               C1643 -
           (((C6268 + C6269) * C50807 + (C5909 + C5908) * C32080) * C22819 +
            ((C6270 + C6271) * C50807 + (C5907 + C5906) * C32080) * C50929 +
            ((C6272 + C6273) * C50807 + (C5905 + C5904) * C32080) * C50943) *
               C50708) *
              C50944 +
          ((((C5930 + C5931) * C32080 + (C6292 + C6293) * C50807) * C50943 +
            ((C5914 + C5915) * C32080 + (C6294 + C6295) * C50807) * C50929 +
            ((C5916 + C5917) * C32080 + (C6296 + C6297) * C50807) * C22819) *
               C50708 -
           (((C5917 + C5916) * C50807 +
             (C330 * C50607 + C329 * C696) * C32080) *
                C22819 +
            ((C5915 + C5914) * C50807 +
             (C328 * C50607 + C327 * C696) * C32080) *
                C50929 +
            ((C5931 + C5930) * C50807 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C32080) *
                C50943) *
               C1643) *
              C50932 +
          (((((C117 * C587 + C50765 * C592) * C696 +
              (C117 * C593 + C50765 * C602) * C50607) *
                 C32080 +
             (C5932 + C5933) * C50807) *
                C50943 +
            ((C620 * C696 + C621 * C50607) * C32080 +
             (C5922 + C5923) * C50807) *
                C50929 +
            ((C622 * C696 + C623 * C50607) * C32080 +
             (C5924 + C5925) * C50807) *
                C22819) *
               C1643 -
           ((((C117 * C3484 + C50765 * C3490) * C50607 +
              (C117 * C3481 + C50765 * C3485) * C696) *
                 C50807 +
             (C5925 + C5924) * C32080) *
                C22819 +
            ((C16131 + C16130) * C50807 + (C5923 + C5922) * C32080) * C50929 +
            ((C16135 + C16134) * C50807 + (C5933 + C5932) * C32080) * C50943) *
               C50708) *
              C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C32080 +
             (C5904 + C5905) * C50807) *
                C50943 +
            ((C171 * C696 + C172 * C50607) * C32080 +
             (C5906 + C5907) * C50807) *
                C50929 +
            ((C173 * C696 + C174 * C50607) * C32080 +
             (C5908 + C5909) * C50807) *
                C22819) *
               C50945 -
           (((C6268 + C6269) * C50807 + (C5909 + C5908) * C32080) * C22819 +
            ((C6270 + C6271) * C50807 + (C5907 + C5906) * C32080) * C50929 +
            ((C6272 + C6273) * C50807 + (C5905 + C5904) * C32080) * C50943) *
               C50935 +
           ((C16452 * C32080 + C21630 * C50807) * C50943 +
            (C16453 * C32080 + (C6412 + C6413) * C50807) * C50929 +
            ((C6269 + C6268) * C32080 + (C6414 + C6415) * C50807) * C22819) *
               C1875) *
              C1283 +
          ((((C5930 + C5931) * C32080 + (C6292 + C6293) * C50807) * C50943 +
            ((C5914 + C5915) * C32080 + (C6294 + C6295) * C50807) * C50929 +
            ((C5916 + C5917) * C32080 + (C6296 + C6297) * C50807) * C22819) *
               C50935 -
           (((C5917 + C5916) * C50807 +
             (C330 * C50607 + C329 * C696) * C32080) *
                C22819 +
            ((C5915 + C5914) * C50807 +
             (C328 * C50607 + C327 * C696) * C32080) *
                C50929 +
            ((C5931 + C5930) * C50807 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C32080) *
                C50943) *
               C50945 -
           ((((C117 * C3594 + C50765 * C3600) * C50607 +
              (C117 * C3591 + C50765 * C3595) * C696) *
                 C50807 +
             (C6297 + C6296) * C32080) *
                C22819 +
            ((C16471 + C16470) * C50807 + C16462 * C32080) * C50929 +
            (C21635 * C50807 + C16463 * C32080) * C50943) *
               C1875) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C49720 +
             (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
             C172 * C50612) *
                C32080 +
            (C6080 + C6081 - C6082 - C6083) * C50807) *
               C50943 +
           ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                C32080 +
            (C6084 + C6085 - C6086 - C6087) * C50807) *
               C50929 +
           ((C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
                C32080 +
            (C6088 + C6089 - C6090 - C6091) * C50807) *
               C22819) *
              C50696 * C582 +
          (((C327 * C49713 -
             ((C117 * C293 + C50765 * C304) * C50884 +
              (C117 * C287 + C50765 * C294) * C49720) +
             C328 * C50612) *
                C32080 +
            (C7640 - (C7641 + C7642) + C7643) * C50807) *
               C50943 +
           ((C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
                C32080 +
            (C7644 - (C7645 + C7646) + C7647) * C50807) *
               C50929 +
           ((C331 * C49713 - (C330 * C50884 + C329 * C49720) + C332 * C50612) *
                C32080 +
            (C7648 - (C7649 + C7650) + C7651) * C50807) *
               C22819) *
              C50696 * C583 +
          ((((C117 * C587 + C50765 * C592) * C49720 +
             (C117 * C593 + C50765 * C602) * C50884 - C620 * C49713 -
             C621 * C50612) *
                C32080 +
            (C5928 * C49720 + C5929 * C50884 - C5656 * C49713 -
             C5657 * C50612) *
                C50807) *
               C50943 +
           ((C620 * C49720 + C621 * C50884 - C622 * C49713 - C623 * C50612) *
                C32080 +
            (C5656 * C49720 + C5657 * C50884 - C5658 * C49713 -
             C5659 * C50612) *
                C50807) *
               C50929 +
           ((C622 * C49720 + C623 * C50884 - C624 * C49713 - C625 * C50612) *
                C32080 +
            (C5658 * C49720 + C5659 * C50884 -
             (C117 * C815 + C50765 * C828) * C49713 -
             (C117 * C827 + C50765 * C839) * C50612) *
                C50807) *
               C22819) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C118 +
            (C117 * C130 + C50765 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C32080 +
           (C5498 * C118 + C5499 * C106 - C475 * C119 - C476 * C107 +
            C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
               C50807) *
              C50943 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C32080 +
           (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
            C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
               C50807) *
              C50929 +
          ((C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C32080 +
           (C477 * C118 + C478 * C106 - C479 * C119 - C480 * C107 +
            C481 * C120 + C482 * C108 - (C117 * C439 + C50765 * C450) * C121 -
            (C117 * C451 + C50765 * C457) * C109) *
               C50807) *
              C22819) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C49720 +
             (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
             C172 * C50612) *
                C32080 +
            (C6080 + C6081 - C6082 - C6083) * C50807) *
               C50943 +
           ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                C32080 +
            (C6084 + C6085 - C6086 - C6087) * C50807) *
               C50929 +
           ((C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
                C32080 +
            (C6088 + C6089 - C6090 - C6091) * C50807) *
               C22819) *
              C941 +
          (((C6082 - (C6081 + C6080) + C6083) * C32080 +
            (C6092 - (C6120 + C6121) + C6097) * C50807) *
               C50943 +
           ((C6086 - (C6085 + C6084) + C6087) * C32080 +
            (C6098 - (C6099 + C6100) + C6101) * C50807) *
               C50929 +
           ((C6090 - (C6089 + C6088) + C6091) * C32080 +
            (C6102 - (C6103 + C6104) + C6105) * C50807) *
               C22819) *
              C942 +
          ((C16300 * C32080 + C21531 * C50807) * C50943 +
           (C16301 * C32080 + (C16290 + C16289 - C16288 - C16291) * C50807) *
               C50929 +
           ((C6104 + C6103 - C6102 - C6105) * C32080 +
            (C6118 * C49720 + C6119 * C50884 -
             (C117 * C1166 + C50765 * C1171) * C49713 -
             (C117 * C1170 + C50765 * C1178) * C50612) *
                C50807) *
               C22819) *
              C943) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C32080 +
            (C5904 + C5905) * C50807) *
               C50943 +
           ((C171 * C696 + C172 * C50607) * C32080 + (C5906 + C5907) * C50807) *
               C50929 +
           ((C173 * C696 + C174 * C50607) * C32080 + (C5908 + C5909) * C50807) *
               C22819) *
              C50696 * C692 -
          (((C5917 + C5916) * C50807 + (C330 * C50607 + C329 * C696) * C32080) *
               C22819 +
           ((C5915 + C5914) * C50807 + (C328 * C50607 + C327 * C696) * C32080) *
               C50929 +
           ((C5931 + C5930) * C50807 + ((C117 * C293 + C50765 * C304) * C50607 +
                                        (C117 * C287 + C50765 * C294) * C696) *
                                           C32080) *
               C50943) *
              C50696 * C693 +
          ((((C117 * C587 + C50765 * C592) * C696 +
             (C117 * C593 + C50765 * C602) * C50607) *
                C32080 +
            (C5932 + C5933) * C50807) *
               C50943 +
           ((C620 * C696 + C621 * C50607) * C32080 + (C5922 + C5923) * C50807) *
               C50929 +
           ((C622 * C696 + C623 * C50607) * C32080 + (C5924 + C5925) * C50807) *
               C22819) *
              C50696 * C694 -
          ((((C117 * C3156 + C50765 * C3162) * C50607 +
             (C117 * C3153 + C50765 * C3157) * C696) *
                C50807 +
            ((C117 * C703 + C50765 * C710) * C50607 +
             (C117 * C698 + C50765 * C704) * C696) *
                C32080) *
               C22819 +
           (((C117 * C3158 + C50765 * C3163) * C50607 +
             (C117 * C3154 + C50765 * C3159) * C696) *
                C50807 +
            ((C117 * C705 + C50765 * C711) * C50607 +
             (C117 * C699 + C50765 * C706) * C696) *
                C32080) *
               C50929 +
           (((C117 * C3160 + C50765 * C3164) * C50607 +
             (C117 * C3155 + C50765 * C3161) * C696) *
                C50807 +
            ((C117 * C707 + C50765 * C712) * C50607 +
             (C117 * C700 + C50765 * C708) * C696) *
                C32080) *
               C50943) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C283 +
             (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C32080 +
            (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C50807) *
               C50943 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C32080 +
            (C5486 + C5487 - C5488 - C5489 + C5490 + C5491) * C50807) *
               C50929 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C32080 +
            (C5492 + C5493 - C5494 - C5495 + C5496 + C5497) * C50807) *
               C22819) *
              C50696 * C50899 +
          (((C327 * C284 -
             ((C117 * C293 + C50765 * C304) * C278 +
              (C117 * C287 + C50765 * C294) * C283) +
             C328 * C279 - C329 * C285 - C330 * C280) *
                C32080 +
            (C1540 * C284 - (C5927 * C278 + C5926 * C283) + C1541 * C279 -
             C1542 * C285 - C1543 * C280) *
                C50807) *
               C50943 +
           ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
             C331 * C285 - C332 * C280) *
                C32080 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50807) *
               C50929 +
           ((C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
             C333 * C285 - C334 * C280) *
                C32080 +
            (C1544 * C284 - (C1543 * C278 + C1542 * C283) + C1545 * C279 -
             (C117 * C1523 + C50765 * C1524) * C285 -
             (C117 * C1525 + C50765 * C1526) * C280) *
                C50807) *
               C22819) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C32080 +
             (C5904 + C5905) * C50807) *
                C50943 +
            ((C171 * C696 + C172 * C50607) * C32080 +
             (C5906 + C5907) * C50807) *
                C50929 +
            ((C173 * C696 + C174 * C50607) * C32080 +
             (C5908 + C5909) * C50807) *
                C22819) *
               C941 -
           (((C6268 + C6269) * C50807 + (C5909 + C5908) * C32080) * C22819 +
            ((C6270 + C6271) * C50807 + (C5907 + C5906) * C32080) * C50929 +
            ((C6272 + C6273) * C50807 + (C5905 + C5904) * C32080) * C50943) *
               C942 +
           ((C16452 * C32080 + C21630 * C50807) * C50943 +
            (C16453 * C32080 + (C6412 + C6413) * C50807) * C50929 +
            ((C6269 + C6268) * C32080 + (C6414 + C6415) * C50807) * C22819) *
               C943) *
              C50899 +
          ((((C5930 + C5931) * C32080 + (C6292 + C6293) * C50807) * C50943 +
            ((C5914 + C5915) * C32080 + (C6294 + C6295) * C50807) * C50929 +
            ((C5916 + C5917) * C32080 + (C6296 + C6297) * C50807) * C22819) *
               C942 -
           (((C5917 + C5916) * C50807 +
             (C330 * C50607 + C329 * C696) * C32080) *
                C22819 +
            ((C5915 + C5914) * C50807 +
             (C328 * C50607 + C327 * C696) * C32080) *
                C50929 +
            ((C5931 + C5930) * C50807 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C32080) *
                C50943) *
               C941 -
           ((((C117 * C3594 + C50765 * C3600) * C50607 +
              (C117 * C3591 + C50765 * C3595) * C696) *
                 C50807 +
             (C6297 + C6296) * C32080) *
                C22819 +
            ((C16471 + C16470) * C50807 + C16462 * C32080) * C50929 +
            (C21635 * C50807 + C16463 * C32080) * C50943) *
               C943) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C32080 +
             (C5904 + C5905) * C50807) *
                C50943 +
            ((C171 * C696 + C172 * C50607) * C32080 +
             (C5906 + C5907) * C50807) *
                C50929 +
            ((C173 * C696 + C174 * C50607) * C32080 +
             (C5908 + C5909) * C50807) *
                C22819) *
               C50900 -
           (((C6268 + C6269) * C50807 + (C5909 + C5908) * C32080) * C22819 +
            ((C6270 + C6271) * C50807 + (C5907 + C5906) * C32080) * C50929 +
            ((C6272 + C6273) * C50807 + (C5905 + C5904) * C32080) * C50943) *
               C50708) *
              C582 +
          ((((C5930 + C5931) * C32080 + (C6292 + C6293) * C50807) * C50943 +
            ((C5914 + C5915) * C32080 + (C6294 + C6295) * C50807) * C50929 +
            ((C5916 + C5917) * C32080 + (C6296 + C6297) * C50807) * C22819) *
               C50708 -
           (((C5917 + C5916) * C50807 +
             (C330 * C50607 + C329 * C696) * C32080) *
                C22819 +
            ((C5915 + C5914) * C50807 +
             (C328 * C50607 + C327 * C696) * C32080) *
                C50929 +
            ((C5931 + C5930) * C50807 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C32080) *
                C50943) *
               C50900) *
              C583 +
          (((((C117 * C587 + C50765 * C592) * C696 +
              (C117 * C593 + C50765 * C602) * C50607) *
                 C32080 +
             (C5932 + C5933) * C50807) *
                C50943 +
            ((C620 * C696 + C621 * C50607) * C32080 +
             (C5922 + C5923) * C50807) *
                C50929 +
            ((C622 * C696 + C623 * C50607) * C32080 +
             (C5924 + C5925) * C50807) *
                C22819) *
               C50900 -
           ((((C117 * C3484 + C50765 * C3490) * C50607 +
              (C117 * C3481 + C50765 * C3485) * C696) *
                 C50807 +
             (C5925 + C5924) * C32080) *
                C22819 +
            ((C16131 + C16130) * C50807 + (C5923 + C5922) * C32080) * C50929 +
            ((C16135 + C16134) * C50807 + (C5933 + C5932) * C32080) * C50943) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C283 +
             (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C32080 +
            (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C50807) *
               C50943 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C32080 +
            (C5486 + C5487 - C5488 - C5489 + C5490 + C5491) * C50807) *
               C50929 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C32080 +
            (C5492 + C5493 - C5494 - C5495 + C5496 + C5497) * C50807) *
               C22819) *
              C50900 +
          (((C5482 - (C5501 + C5500) + C5483 - C5484 - C5485) * C32080 +
            (C15720 - (C15719 + C15718) + C15721 - C15722 - C15723) * C50807) *
               C50943 +
           ((C5488 - (C5487 + C5486) + C5489 - C5490 - C5491) * C32080 +
            (C15726 - (C15725 + C15724) + C15727 - C15728 - C15729) * C50807) *
               C50929 +
           ((C5494 - (C5493 + C5492) + C5495 - C5496 - C5497) * C32080 +
            (C981 * C284 - (C980 * C278 + C979 * C283) + C982 * C279 -
             (C117 * C948 + C50765 * C957) * C285 -
             (C117 * C958 + C50765 * C963) * C280) *
                C50807) *
               C22819) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C32080 +
            (C5904 + C5905) * C50807) *
               C50943 +
           ((C171 * C696 + C172 * C50607) * C32080 + (C5906 + C5907) * C50807) *
               C50929 +
           ((C173 * C696 + C174 * C50607) * C32080 + (C5908 + C5909) * C50807) *
               C22819) *
              C1162 -
          (((C6268 + C6269) * C50807 + (C5909 + C5908) * C32080) * C22819 +
           ((C6270 + C6271) * C50807 + (C5907 + C5906) * C32080) * C50929 +
           ((C6272 + C6273) * C50807 + (C5905 + C5904) * C32080) * C50943) *
              C1163 +
          ((C16452 * C32080 + C21630 * C50807) * C50943 +
           (C16453 * C32080 + (C6412 + C6413) * C50807) * C50929 +
           ((C6269 + C6268) * C32080 + (C6414 + C6415) * C50807) * C22819) *
              C1164 -
          ((((C117 * C6398 + C50765 * C6404) * C50607 +
             (C117 * C6395 + C50765 * C6399) * C696) *
                C50807 +
            (C6415 + C6414) * C32080) *
               C22819 +
           ((C16585 + C16584) * C50807 + C16578 * C32080) * C50929 +
           (C21710 * C50807 + C16579 * C32080) * C50943) *
              C1165) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1285 +
             (C117 * C130 + C50765 * C143) * C50942 - C171 * C1286 -
             C172 * C50926 + C173 * C1287 + C174 * C1282) *
                C32080 +
            (C7076 + C7077 - C7078 - C7079 + C7080 + C7081) * C50807) *
               C50943 +
           ((C171 * C1285 + C172 * C50942 - C173 * C1286 - C174 * C50926 +
             C175 * C1287 + C176 * C1282) *
                C32080 +
            (C7082 + C7083 - C7084 - C7085 + C7086 + C7087) * C50807) *
               C50929 +
           ((C173 * C1285 + C174 * C50942 - C175 * C1286 - C176 * C50926 +
             C177 * C1287 + C178 * C1282) *
                C32080 +
            (C7088 + C7089 - C7090 - C7091 + C7092 + C7093) * C50807) *
               C22819) *
              C1643 +
          (((C7078 - (C7077 + C7076) + C7079 - C7080 - C7081) * C32080 +
            (C17232 - (C17231 + C17230) + C17233 - C17234 - C17235) * C50807) *
               C50943 +
           ((C7084 - (C7083 + C7082) + C7085 - C7086 - C7087) * C32080 +
            (C17238 - (C17237 + C17236) + C17239 - C17240 - C17241) * C50807) *
               C50929 +
           ((C7090 - (C7089 + C7088) + C7091 - C7092 - C7093) * C32080 +
            (C981 * C1286 - (C980 * C50942 + C979 * C1285) + C982 * C50926 -
             (C117 * C948 + C50765 * C957) * C1287 -
             (C117 * C958 + C50765 * C963) * C1282) *
                C50807) *
               C22819) *
              C50708) *
         C50670) /
        (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C1391 +
              (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
              C172 * C50612) *
                 C32080 +
             (C6906 + C6907 - C6908 - C6909) * C50807) *
                C50943 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                 C32080 +
             (C6910 + C6911 - C6912 - C6913) * C50807) *
                C50929 +
            ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
                 C32080 +
             (C6914 + C6915 - C6916 - C6917) * C50807) *
                C22819) *
               C1643 +
           (((C6908 - (C6907 + C6906) + C6909) * C32080 +
             (C7434 - (C7435 + C7436) + C7437) * C50807) *
                C50943 +
            ((C6912 - (C6911 + C6910) + C6913) * C32080 +
             (C7438 - (C7439 + C7440) + C7441) * C50807) *
                C50929 +
            ((C6916 - (C6915 + C6914) + C6917) * C32080 +
             (C7442 - (C7443 + C7444) + C7445) * C50807) *
                C22819) *
               C50708) *
              C50899 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50765 * C304) * C1386 +
               (C117 * C287 + C50765 * C294) * C1391) +
              C328 * C50612) *
                 C32080 +
             (C6918 - (C6919 + C6920) + C6921) * C50807) *
                C50943 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                 C32080 +
             (C6922 - (C6923 + C6924) + C6925) * C50807) *
                C50929 +
            ((C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50612) *
                 C32080 +
             (C6926 - (C6927 + C6928) + C6929) * C50807) *
                C22819) *
               C1643 +
           (((C6920 + C6919 - C6918 - C6921) * C32080 +
             (C17078 + C17077 - C17076 - C17079) * C50807) *
                C50943 +
            ((C6924 + C6923 - C6922 - C6925) * C32080 +
             (C17082 + C17081 - C17080 - C17083) * C50807) *
                C50929 +
            ((C6928 + C6927 - C6926 - C6929) * C32080 +
             (C6290 * C1391 + C6291 * C1386 -
              (C117 * C1080 + C50765 * C1085) * C1392 -
              (C117 * C1084 + C50765 * C1092) * C50612) *
                 C50807) *
                C22819) *
               C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1391 +
             (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
             C172 * C50612) *
                C32080 +
            (C6906 + C6907 - C6908 - C6909) * C50807) *
               C50943 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                C32080 +
            (C6910 + C6911 - C6912 - C6913) * C50807) *
               C50929 +
           ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
                C32080 +
            (C6914 + C6915 - C6916 - C6917) * C50807) *
               C22819) *
              C50945 +
          (((C6908 - (C6907 + C6906) + C6909) * C32080 +
            (C7434 - (C7435 + C7436) + C7437) * C50807) *
               C50943 +
           ((C6912 - (C6911 + C6910) + C6913) * C32080 +
            (C7438 - (C7439 + C7440) + C7441) * C50807) *
               C50929 +
           ((C6916 - (C6915 + C6914) + C6917) * C32080 +
            (C7442 - (C7443 + C7444) + C7445) * C50807) *
               C22819) *
              C50935 +
          ((C17594 * C32080 + C22387 * C50807) * C50943 +
           (C17595 * C32080 + (C17590 + C17589 - C17588 - C17591) * C50807) *
               C50929 +
           ((C7444 + C7443 - C7442 - C7445) * C32080 +
            (C6118 * C1391 + C6119 * C1386 -
             (C117 * C1166 + C50765 * C1171) * C1392 -
             (C117 * C1170 + C50765 * C1178) * C50612) *
                C50807) *
               C22819) *
              C1875) *
         C50670) /
        (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C118 +
            (C117 * C130 + C50765 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C32080 +
           (C5498 * C118 + C5499 * C106 - C475 * C119 - C476 * C107 +
            C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
               C50807) *
              C50943 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C32080 +
           (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
            C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
               C50807) *
              C50929 +
          ((C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C32080 +
           (C477 * C118 + C478 * C106 - C479 * C119 - C480 * C107 +
            C481 * C120 + C482 * C108 - (C117 * C439 + C50765 * C450) * C121 -
            (C117 * C451 + C50765 * C457) * C109) *
               C50807) *
              C22819) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C49720 +
             (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
             C172 * C50612) *
                C32080 +
            (C6080 + C6081 - C6082 - C6083) * C50807) *
               C50943 +
           ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                C32080 +
            (C6084 + C6085 - C6086 - C6087) * C50807) *
               C50929 +
           ((C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
                C32080 +
            (C6088 + C6089 - C6090 - C6091) * C50807) *
               C22819) *
              C50696 * C582 +
          (((C327 * C49713 -
             ((C117 * C293 + C50765 * C304) * C50884 +
              (C117 * C287 + C50765 * C294) * C49720) +
             C328 * C50612) *
                C32080 +
            (C7640 - (C7641 + C7642) + C7643) * C50807) *
               C50943 +
           ((C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
                C32080 +
            (C7644 - (C7645 + C7646) + C7647) * C50807) *
               C50929 +
           ((C331 * C49713 - (C330 * C50884 + C329 * C49720) + C332 * C50612) *
                C32080 +
            (C7648 - (C7649 + C7650) + C7651) * C50807) *
               C22819) *
              C50696 * C583 +
          ((((C117 * C587 + C50765 * C592) * C49720 +
             (C117 * C593 + C50765 * C602) * C50884 - C620 * C49713 -
             C621 * C50612) *
                C32080 +
            (C5928 * C49720 + C5929 * C50884 - C5656 * C49713 -
             C5657 * C50612) *
                C50807) *
               C50943 +
           ((C620 * C49720 + C621 * C50884 - C622 * C49713 - C623 * C50612) *
                C32080 +
            (C5656 * C49720 + C5657 * C50884 - C5658 * C49713 -
             C5659 * C50612) *
                C50807) *
               C50929 +
           ((C622 * C49720 + C623 * C50884 - C624 * C49713 - C625 * C50612) *
                C32080 +
            (C5658 * C49720 + C5659 * C50884 -
             (C117 * C815 + C50765 * C828) * C49713 -
             (C117 * C827 + C50765 * C839) * C50612) *
                C50807) *
               C22819) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C283 +
             (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C32080 +
            (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C50807) *
               C50943 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C32080 +
            (C5486 + C5487 - C5488 - C5489 + C5490 + C5491) * C50807) *
               C50929 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C32080 +
            (C5492 + C5493 - C5494 - C5495 + C5496 + C5497) * C50807) *
               C22819) *
              C50696 * C50899 +
          (((C327 * C284 -
             ((C117 * C293 + C50765 * C304) * C278 +
              (C117 * C287 + C50765 * C294) * C283) +
             C328 * C279 - C329 * C285 - C330 * C280) *
                C32080 +
            (C1540 * C284 - (C5927 * C278 + C5926 * C283) + C1541 * C279 -
             C1542 * C285 - C1543 * C280) *
                C50807) *
               C50943 +
           ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
             C331 * C285 - C332 * C280) *
                C32080 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50807) *
               C50929 +
           ((C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
             C333 * C285 - C334 * C280) *
                C32080 +
            (C1544 * C284 - (C1543 * C278 + C1542 * C283) + C1545 * C279 -
             (C117 * C1523 + C50765 * C1524) * C285 -
             (C117 * C1525 + C50765 * C1526) * C280) *
                C50807) *
               C22819) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C32080 +
            (C5904 + C5905) * C50807) *
               C50943 +
           ((C171 * C696 + C172 * C50607) * C32080 + (C5906 + C5907) * C50807) *
               C50929 +
           ((C173 * C696 + C174 * C50607) * C32080 + (C5908 + C5909) * C50807) *
               C22819) *
              C50696 * C692 -
          (((C5917 + C5916) * C50807 + (C330 * C50607 + C329 * C696) * C32080) *
               C22819 +
           ((C5915 + C5914) * C50807 + (C328 * C50607 + C327 * C696) * C32080) *
               C50929 +
           ((C5931 + C5930) * C50807 + ((C117 * C293 + C50765 * C304) * C50607 +
                                        (C117 * C287 + C50765 * C294) * C696) *
                                           C32080) *
               C50943) *
              C50696 * C693 +
          ((((C117 * C587 + C50765 * C592) * C696 +
             (C117 * C593 + C50765 * C602) * C50607) *
                C32080 +
            (C5932 + C5933) * C50807) *
               C50943 +
           ((C620 * C696 + C621 * C50607) * C32080 + (C5922 + C5923) * C50807) *
               C50929 +
           ((C622 * C696 + C623 * C50607) * C32080 + (C5924 + C5925) * C50807) *
               C22819) *
              C50696 * C694 -
          ((((C117 * C3156 + C50765 * C3162) * C50607 +
             (C117 * C3153 + C50765 * C3157) * C696) *
                C50807 +
            ((C117 * C703 + C50765 * C710) * C50607 +
             (C117 * C698 + C50765 * C704) * C696) *
                C32080) *
               C22819 +
           (((C117 * C3158 + C50765 * C3163) * C50607 +
             (C117 * C3154 + C50765 * C3159) * C696) *
                C50807 +
            ((C117 * C705 + C50765 * C711) * C50607 +
             (C117 * C699 + C50765 * C706) * C696) *
                C32080) *
               C50929 +
           (((C117 * C3160 + C50765 * C3164) * C50607 +
             (C117 * C3155 + C50765 * C3161) * C696) *
                C50807 +
            ((C117 * C707 + C50765 * C712) * C50607 +
             (C117 * C700 + C50765 * C708) * C696) *
                C32080) *
               C50943) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C283 +
             (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C32080 +
            (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C50807) *
               C50943 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C32080 +
            (C5486 + C5487 - C5488 - C5489 + C5490 + C5491) * C50807) *
               C50929 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C32080 +
            (C5492 + C5493 - C5494 - C5495 + C5496 + C5497) * C50807) *
               C22819) *
              C50900 +
          (((C5482 - (C5501 + C5500) + C5483 - C5484 - C5485) * C32080 +
            (C15720 - (C15719 + C15718) + C15721 - C15722 - C15723) * C50807) *
               C50943 +
           ((C5488 - (C5487 + C5486) + C5489 - C5490 - C5491) * C32080 +
            (C15726 - (C15725 + C15724) + C15727 - C15728 - C15729) * C50807) *
               C50929 +
           ((C5494 - (C5493 + C5492) + C5495 - C5496 - C5497) * C32080 +
            (C981 * C284 - (C980 * C278 + C979 * C283) + C982 * C279 -
             (C117 * C948 + C50765 * C957) * C285 -
             (C117 * C958 + C50765 * C963) * C280) *
                C50807) *
               C22819) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C32080 +
             (C5904 + C5905) * C50807) *
                C50943 +
            ((C171 * C696 + C172 * C50607) * C32080 +
             (C5906 + C5907) * C50807) *
                C50929 +
            ((C173 * C696 + C174 * C50607) * C32080 +
             (C5908 + C5909) * C50807) *
                C22819) *
               C50900 -
           (((C6268 + C6269) * C50807 + (C5909 + C5908) * C32080) * C22819 +
            ((C6270 + C6271) * C50807 + (C5907 + C5906) * C32080) * C50929 +
            ((C6272 + C6273) * C50807 + (C5905 + C5904) * C32080) * C50943) *
               C50708) *
              C582 +
          ((((C5930 + C5931) * C32080 + (C6292 + C6293) * C50807) * C50943 +
            ((C5914 + C5915) * C32080 + (C6294 + C6295) * C50807) * C50929 +
            ((C5916 + C5917) * C32080 + (C6296 + C6297) * C50807) * C22819) *
               C50708 -
           (((C5917 + C5916) * C50807 +
             (C330 * C50607 + C329 * C696) * C32080) *
                C22819 +
            ((C5915 + C5914) * C50807 +
             (C328 * C50607 + C327 * C696) * C32080) *
                C50929 +
            ((C5931 + C5930) * C50807 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C32080) *
                C50943) *
               C50900) *
              C583 +
          (((((C117 * C587 + C50765 * C592) * C696 +
              (C117 * C593 + C50765 * C602) * C50607) *
                 C32080 +
             (C5932 + C5933) * C50807) *
                C50943 +
            ((C620 * C696 + C621 * C50607) * C32080 +
             (C5922 + C5923) * C50807) *
                C50929 +
            ((C622 * C696 + C623 * C50607) * C32080 +
             (C5924 + C5925) * C50807) *
                C22819) *
               C50900 -
           ((((C117 * C3484 + C50765 * C3490) * C50607 +
              (C117 * C3481 + C50765 * C3485) * C696) *
                 C50807 +
             (C5925 + C5924) * C32080) *
                C22819 +
            ((C16131 + C16130) * C50807 + (C5923 + C5922) * C32080) * C50929 +
            ((C16135 + C16134) * C50807 + (C5933 + C5932) * C32080) * C50943) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C1285 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50942 -
             (C2340 + C2341) * C1286 - (C2342 + C2343) * C50926 +
             C2356 * C1287 + C2357 * C1282) *
                C32080 +
            ((C18496 + C18497) * C1285 + (C18498 + C18499) * C50942 -
             C35131 * C1286 - C35132 * C50926 + C35133 * C1287 +
             C35134 * C1282) *
                C50807) *
               C25653 +
           (((C2341 + C2340) * C1285 + (C2343 + C2342) * C50942 -
             (C2345 + C2344) * C1286 - (C2347 + C2346) * C50926 +
             (C2349 + C2348) * C1287 + (C2351 + C2350) * C1282) *
                C32080 +
            (C35135 * C1285 + C35136 * C50942 - C2726 * C1286 - C2727 * C50926 +
             (C2723 + C2722) * C1287 + (C2725 + C2724) * C1282) *
                C50807) *
               C50634) *
              C50696 * C1283 +
          ((((C2530 + C2531) * C1286 -
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C50942 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C1285) +
             (C2532 + C2533) * C50926 - C2542 * C1287 - C2543 * C1282) *
                C32080 +
            ((C4107 + C4106) * C1286 -
             ((C18929 + C18928) * C50942 + (C18927 + C18926) * C1285) +
             (C4109 + C4108) * C50926 - (C4110 + C4111) * C1287 -
             (C4112 + C4113) * C1282) *
                C50807) *
               C25653 +
           (((C2535 + C2534) * C1286 -
             ((C2533 + C2532) * C50942 + (C2531 + C2530) * C1285) +
             (C2537 + C2536) * C50926 - (C2538 + C2539) * C1287 -
             (C2540 + C2541) * C1282) *
                C32080 +
            ((C4111 + C4110) * C1286 -
             ((C4108 + C4109) * C50942 + (C4106 + C4107) * C1285) +
             (C4113 + C4112) * C50926 -
             (C2306 * C815 + C50781 * C828 + C2305 * C814 + C50911 * C825) *
                 C1287 -
             (C2306 * C827 + C50781 * C839 + C2305 * C826 + C50911 * C838) *
                 C1282) *
                C50807) *
               C50634) *
              C50696 * C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C1391 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C1386 -
             (C2340 + C2341) * C1392 - (C2342 + C2343) * C50612) *
                C32080 +
            ((C18496 + C18497) * C1391 + (C18498 + C18499) * C1386 -
             C35131 * C1392 - C35132 * C50612) *
                C50807) *
               C25653 +
           (((C2341 + C2340) * C1391 + (C2343 + C2342) * C1386 -
             (C2345 + C2344) * C1392 - (C2347 + C2346) * C50612) *
                C32080 +
            (C35135 * C1391 + C35136 * C1386 - C2726 * C1392 - C2727 * C50612) *
                C50807) *
               C50634) *
              C50696 * C50944 +
          ((((C2530 + C2531) * C1392 -
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C1386 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C1391) +
             (C2532 + C2533) * C50612) *
                C32080 +
            ((C4107 + C4106) * C1392 -
             ((C18929 + C18928) * C1386 + (C18927 + C18926) * C1391) +
             (C4109 + C4108) * C50612) *
                C50807) *
               C25653 +
           (((C2535 + C2534) * C1392 -
             ((C2533 + C2532) * C1386 + (C2531 + C2530) * C1391) +
             (C2537 + C2536) * C50612) *
                C32080 +
            ((C4111 + C4110) * C1392 -
             ((C4108 + C4109) * C1386 + (C4106 + C4107) * C1391) +
             (C4113 + C4112) * C50612) *
                C50807) *
               C50634) *
              C50696 * C50932 +
          ((((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                 C1391 +
             (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                 C1386 -
             (C2890 + C2891) * C1392 - (C2892 + C2893) * C50612) *
                C32080 +
            ((C18934 + C18935) * C1391 + (C18936 + C18937) * C1386 -
             (C35339 + C35340) * C1392 - (C35341 + C35342) * C50612) *
                C50807) *
               C25653 +
           (((C2891 + C2890) * C1391 + (C2893 + C2892) * C1386 -
             (C2894 + C2895) * C1392 - (C2896 + C2897) * C50612) *
                C32080 +
            ((C35340 + C35339) * C1391 + (C35342 + C35341) * C1386 -
             (C2306 * C3153 + C50781 * C3157 + C2305 * C816 + C50911 * C830) *
                 C1392 -
             (C2306 * C3156 + C50781 * C3162 + C2305 * C829 + C50911 * C840) *
                 C50612) *
                C50807) *
               C50634) *
              C50696 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                  C1391 +
              (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                  C1386 -
              (C2340 + C2341) * C1392 - (C2342 + C2343) * C50612) *
                 C32080 +
             ((C18496 + C18497) * C1391 + (C18498 + C18499) * C1386 -
              C35131 * C1392 - C35132 * C50612) *
                 C50807) *
                C25653 +
            (((C2341 + C2340) * C1391 + (C2343 + C2342) * C1386 -
              (C2345 + C2344) * C1392 - (C2347 + C2346) * C50612) *
                 C32080 +
             (C35135 * C1391 + C35136 * C1386 - C2726 * C1392 -
              C2727 * C50612) *
                 C50807) *
                C50634) *
               C50900 +
           (((C35135 * C1392 -
              ((C18499 + C18498) * C1386 + (C18497 + C18496) * C1391) +
              C35136 * C50612) *
                 C32080 +
             (C35861 * C1392 -
              ((C18503 + C18502) * C1386 + (C18501 + C18500) * C1391) +
              C35862 * C50612) *
                 C50807) *
                C25653 +
            ((C35133 * C1392 - (C35132 * C1386 + C35131 * C1391) +
              C35134 * C50612) *
                 C32080 +
             ((C3333 + C3332) * C1392 - (C19091 * C1386 + C19090 * C1391) +
              (C3335 + C3334) * C50612) *
                 C50807) *
                C50634) *
               C50708) *
              C1283 +
          (((((C2530 + C2531) * C1392 -
              ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                   C1386 +
               (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                   C1391) +
              (C2532 + C2533) * C50612) *
                 C32080 +
             (C36833 * C1392 -
              ((C18929 + C18928) * C1386 + (C18927 + C18926) * C1391) +
              C36834 * C50612) *
                 C50807) *
                C25653 +
            (((C2535 + C2534) * C1392 -
              ((C2533 + C2532) * C1386 + (C2531 + C2530) * C1391) +
              (C2537 + C2536) * C50612) *
                 C32080 +
             ((C4111 + C4110) * C1392 - (C36835 * C1386 + C36836 * C1391) +
              (C4113 + C4112) * C50612) *
                 C50807) *
                C50634) *
               C50900 +
           ((((C18926 + C18927) * C1391 + (C18928 + C18929) * C1386 -
              C36836 * C1392 - C36835 * C50612) *
                 C32080 +
             ((C18930 + C18931) * C1391 + (C18932 + C18933) * C1386 -
              (C19903 + C19902) * C1392 - (C19905 + C19904) * C50612) *
                 C50807) *
                C25653 +
            ((C36833 * C1391 + C36834 * C1386 - (C4110 + C4111) * C1392 -
              (C4112 + C4113) * C50612) *
                 C32080 +
             ((C19902 + C19903) * C1391 + (C19904 + C19905) * C1386 -
              (C2306 * C3481 + C50781 * C3485 + C2305 * C1081 +
               C50911 * C1087) *
                  C1392 -
              (C2306 * C3484 + C50781 * C3490 + C2305 * C1086 +
               C50911 * C1093) *
                  C50612) *
                 C50807) *
                C50634) *
               C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                  C49720 +
              (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                  C50884 -
              (C2340 + C2341) * C49713 - (C2342 + C2343) * C50612) *
                 C32080 +
             ((C18496 + C18497) * C49720 + (C18498 + C18499) * C50884 -
              C35131 * C49713 - C35132 * C50612) *
                 C50807) *
                C25653 +
            (((C2341 + C2340) * C49720 + (C2343 + C2342) * C50884 -
              (C2345 + C2344) * C49713 - (C2347 + C2346) * C50612) *
                 C32080 +
             (C35135 * C49720 + C35136 * C50884 - C2726 * C49713 -
              C2727 * C50612) *
                 C50807) *
                C50634) *
               C1643 +
           (((C35135 * C49713 -
              ((C18499 + C18498) * C50884 + (C18497 + C18496) * C49720) +
              C35136 * C50612) *
                 C32080 +
             (C35861 * C49713 -
              ((C18503 + C18502) * C50884 + (C18501 + C18500) * C49720) +
              C35862 * C50612) *
                 C50807) *
                C25653 +
            ((C35133 * C49713 - (C35132 * C50884 + C35131 * C49720) +
              C35134 * C50612) *
                 C32080 +
             ((C3333 + C3332) * C49713 - (C19091 * C50884 + C19090 * C49720) +
              (C3335 + C3334) * C50612) *
                 C50807) *
                C50634) *
               C50708) *
              C1283 +
          (((((C2530 + C2531) * C49713 -
              ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                   C50884 +
               (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                   C49720) +
              (C2532 + C2533) * C50612) *
                 C32080 +
             (C36833 * C49713 -
              ((C18929 + C18928) * C50884 + (C18927 + C18926) * C49720) +
              C36834 * C50612) *
                 C50807) *
                C25653 +
            (((C2535 + C2534) * C49713 -
              ((C2533 + C2532) * C50884 + (C2531 + C2530) * C49720) +
              (C2537 + C2536) * C50612) *
                 C32080 +
             ((C4111 + C4110) * C49713 - (C36835 * C50884 + C36836 * C49720) +
              (C4113 + C4112) * C50612) *
                 C50807) *
                C50634) *
               C1643 +
           ((((C18926 + C18927) * C49720 + (C18928 + C18929) * C50884 -
              C36836 * C49713 - C36835 * C50612) *
                 C32080 +
             ((C18930 + C18931) * C49720 + (C18932 + C18933) * C50884 -
              (C19903 + C19902) * C49713 - (C19905 + C19904) * C50612) *
                 C50807) *
                C25653 +
            ((C36833 * C49720 + C36834 * C50884 - (C4110 + C4111) * C49713 -
              (C4112 + C4113) * C50612) *
                 C32080 +
             ((C19902 + C19903) * C49720 + (C19904 + C19905) * C50884 -
              (C2306 * C3481 + C50781 * C3485 + C2305 * C1081 +
               C50911 * C1087) *
                  C49713 -
              (C2306 * C3484 + C50781 * C3490 + C2305 * C1086 +
               C50911 * C1093) *
                  C50612) *
                 C50807) *
                C50634) *
               C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                  C696 +
              (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                  C50607) *
                 C32080 +
             ((C18496 + C18497) * C696 + (C18498 + C18499) * C50607) * C50807) *
                C25653 +
            (((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C32080 +
             (C35135 * C696 + C35136 * C50607) * C50807) *
                C50634) *
               C1643 -
           (((C19091 * C50607 + C19090 * C696) * C50807 +
             (C35132 * C50607 + C35131 * C696) * C32080) *
                C50634 +
            (((C18503 + C18502) * C50607 + (C18501 + C18500) * C696) * C50807 +
             ((C18499 + C18498) * C50607 + (C18497 + C18496) * C696) * C32080) *
                C25653) *
               C50708) *
              C50944 +
          (((((C18926 + C18927) * C696 + (C18928 + C18929) * C50607) * C32080 +
             ((C18930 + C18931) * C696 + (C18932 + C18933) * C50607) * C50807) *
                C25653 +
            ((C36833 * C696 + C36834 * C50607) * C32080 +
             ((C19902 + C19903) * C696 + (C19904 + C19905) * C50607) * C50807) *
                C50634) *
               C50708 -
           (((C36835 * C50607 + C36836 * C696) * C50807 +
             ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C32080) *
                C50634 +
            (((C18929 + C18928) * C50607 + (C18927 + C18926) * C696) * C50807 +
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C50607 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C696) *
                 C32080) *
                C25653) *
               C1643) *
              C50932 +
          (((((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                  C696 +
              (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                  C50607) *
                 C32080 +
             ((C18934 + C18935) * C696 + (C18936 + C18937) * C50607) * C50807) *
                C25653 +
            (((C2891 + C2890) * C696 + (C2893 + C2892) * C50607) * C32080 +
             ((C35340 + C35339) * C696 + (C35342 + C35341) * C50607) * C50807) *
                C50634) *
               C1643 -
           ((((C2306 * C9203 + C50781 * C9207 + C2305 * C3486 +
               C50911 * C3491) *
                  C50607 +
              (C2306 * C9201 + C50781 * C9204 + C2305 * C3482 +
               C50911 * C3487) *
                  C696) *
                 C50807 +
             ((C35341 + C35342) * C50607 + (C35339 + C35340) * C696) * C32080) *
                C50634 +
            (((C18941 + C18940) * C50607 + (C18939 + C18938) * C696) * C50807 +
             ((C18937 + C18936) * C50607 + (C18935 + C18934) * C696) * C32080) *
                C25653) *
               C50708) *
              C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                  C696 +
              (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                  C50607) *
                 C32080 +
             ((C18496 + C18497) * C696 + (C18498 + C18499) * C50607) * C50807) *
                C25653 +
            (((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C32080 +
             (C35135 * C696 + C35136 * C50607) * C50807) *
                C50634) *
               C50945 -
           (((C19091 * C50607 + C19090 * C696) * C50807 +
             (C35132 * C50607 + C35131 * C696) * C32080) *
                C50634 +
            (((C18503 + C18502) * C50607 + (C18501 + C18500) * C696) * C50807 +
             ((C18499 + C18498) * C50607 + (C18497 + C18496) * C696) * C32080) *
                C25653) *
               C50935 +
           ((C19281 * C32080 +
             ((C19117 + C19116) * C696 + (C19115 + C19114) * C50607) * C50807) *
                C25653 +
            ((C35861 * C696 + C35862 * C50607) * C32080 +
             ((C19112 + C19113) * C696 + (C19118 + C19119) * C50607) * C50807) *
                C50634) *
               C1875) *
              C1283 +
          (((((C18926 + C18927) * C696 + (C18928 + C18929) * C50607) * C32080 +
             ((C18930 + C18931) * C696 + (C18932 + C18933) * C50607) * C50807) *
                C25653 +
            ((C36833 * C696 + C36834 * C50607) * C32080 +
             ((C19902 + C19903) * C696 + (C19904 + C19905) * C50607) * C50807) *
                C50634) *
               C50935 -
           (((C36835 * C50607 + C36836 * C696) * C50807 +
             ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C32080) *
                C50634 +
            (((C18929 + C18928) * C50607 + (C18927 + C18926) * C696) * C50807 +
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C50607 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C696) *
                 C32080) *
                C25653) *
               C50945 -
           ((((C2306 * C9309 + C50781 * C9313 + C2305 * C3596 +
               C50911 * C3601) *
                  C50607 +
              (C2306 * C9307 + C50781 * C9310 + C2305 * C3592 +
               C50911 * C3597) *
                  C696) *
                 C50807 +
             ((C19905 + C19904) * C50607 + (C19903 + C19902) * C696) * C32080) *
                C50634 +
            (((C19285 + C19284) * C50607 + (C19283 + C19282) * C696) * C50807 +
             C19288 * C32080) *
                C25653) *
               C1875) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C49720 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50884 -
             (C2340 + C2341) * C49713 - (C2342 + C2343) * C50612) *
                C32080 +
            ((C18496 + C18497) * C49720 + (C18498 + C18499) * C50884 -
             C35131 * C49713 - C35132 * C50612) *
                C50807) *
               C25653 +
           (((C2341 + C2340) * C49720 + (C2343 + C2342) * C50884 -
             (C2345 + C2344) * C49713 - (C2347 + C2346) * C50612) *
                C32080 +
            (C35135 * C49720 + C35136 * C50884 - C2726 * C49713 -
             C2727 * C50612) *
                C50807) *
               C50634) *
              C50696 * C582 +
          ((((C2530 + C2531) * C49713 -
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C50884 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C49720) +
             (C2532 + C2533) * C50612) *
                C32080 +
            ((C4107 + C4106) * C49713 -
             ((C18929 + C18928) * C50884 + (C18927 + C18926) * C49720) +
             (C4109 + C4108) * C50612) *
                C50807) *
               C25653 +
           (((C2535 + C2534) * C49713 -
             ((C2533 + C2532) * C50884 + (C2531 + C2530) * C49720) +
             (C2537 + C2536) * C50612) *
                C32080 +
            ((C4111 + C4110) * C49713 -
             ((C4108 + C4109) * C50884 + (C4106 + C4107) * C49720) +
             (C4113 + C4112) * C50612) *
                C50807) *
               C50634) *
              C50696 * C583 +
          ((((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                 C49720 +
             (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                 C50884 -
             (C2890 + C2891) * C49713 - (C2892 + C2893) * C50612) *
                C32080 +
            ((C18934 + C18935) * C49720 + (C18936 + C18937) * C50884 -
             (C35339 + C35340) * C49713 - (C35341 + C35342) * C50612) *
                C50807) *
               C25653 +
           (((C2891 + C2890) * C49720 + (C2893 + C2892) * C50884 -
             (C2894 + C2895) * C49713 - (C2896 + C2897) * C50612) *
                C32080 +
            ((C35340 + C35339) * C49720 + (C35342 + C35341) * C50884 -
             (C2306 * C3153 + C50781 * C3157 + C2305 * C816 + C50911 * C830) *
                 C49713 -
             (C2306 * C3156 + C50781 * C3162 + C2305 * C829 + C50911 * C840) *
                 C50612) *
                C50807) *
               C50634) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C118 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C106 -
            (C2340 + C2341) * C119 - (C2342 + C2343) * C107 + C2356 * C120 +
            C2357 * C108 - C2358 * C121 - C2359 * C109) *
               C32080 +
           ((C18496 + C18497) * C118 + (C18498 + C18499) * C106 -
            (C2715 + C2714) * C119 - (C2717 + C2716) * C107 +
            (C2719 + C2718) * C120 + (C2721 + C2720) * C108 -
            (C2722 + C2723) * C121 - (C2724 + C2725) * C109) *
               C50807) *
              C25653 +
          (((C2341 + C2340) * C118 + (C2343 + C2342) * C106 -
            (C2345 + C2344) * C119 - (C2347 + C2346) * C107 +
            (C2349 + C2348) * C120 + (C2351 + C2350) * C108 -
            (C2352 + C2353) * C121 - (C2354 + C2355) * C109) *
               C32080 +
           ((C2714 + C2715) * C118 + (C2716 + C2717) * C106 - C2726 * C119 -
            C2727 * C107 + (C2723 + C2722) * C120 + (C2725 + C2724) * C108 -
            (C2306 * C1523 + C50781 * C1524 + C2305 * C438 + C50911 * C448) *
                C121 -
            (C2306 * C1525 + C50781 * C1526 + C2305 * C449 + C50911 * C456) *
                C109) *
               C50807) *
              C50634) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C49720 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50884 -
             (C2340 + C2341) * C49713 - (C2342 + C2343) * C50612) *
                C32080 +
            ((C18496 + C18497) * C49720 + (C18498 + C18499) * C50884 -
             C35131 * C49713 - C35132 * C50612) *
                C50807) *
               C25653 +
           (((C2341 + C2340) * C49720 + (C2343 + C2342) * C50884 -
             (C2345 + C2344) * C49713 - (C2347 + C2346) * C50612) *
                C32080 +
            (C35135 * C49720 + C35136 * C50884 - C2726 * C49713 -
             C2727 * C50612) *
                C50807) *
               C50634) *
              C941 +
          (((C35135 * C49713 -
             ((C18499 + C18498) * C50884 + (C18497 + C18496) * C49720) +
             C35136 * C50612) *
                C32080 +
            (C35861 * C49713 -
             ((C18503 + C18502) * C50884 + (C18501 + C18500) * C49720) +
             C35862 * C50612) *
                C50807) *
               C25653 +
           ((C35133 * C49713 - (C35132 * C50884 + C35131 * C49720) +
             C35134 * C50612) *
                C32080 +
            ((C3333 + C3332) * C49713 - (C19091 * C50884 + C19090 * C49720) +
             (C3335 + C3334) * C50612) *
                C50807) *
               C50634) *
              C942 +
          ((C19122 * C32080 +
            ((C19117 + C19116) * C49720 + (C19115 + C19114) * C50884 -
             (C19113 + C19112) * C49713 - (C19119 + C19118) * C50612) *
                C50807) *
               C25653 +
           ((C35861 * C49720 + C35862 * C50884 - (C3332 + C3333) * C49713 -
             (C3334 + C3335) * C50612) *
                C32080 +
            ((C19112 + C19113) * C49720 + (C19118 + C19119) * C50884 -
             (C2306 * C3591 + C50781 * C3595 + C2305 * C1167 + C50911 * C1173) *
                 C49713 -
             (C2306 * C3594 + C50781 * C3600 + C2305 * C1172 + C50911 * C1179) *
                 C50612) *
                C50807) *
               C50634) *
              C943) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C696 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50607) *
                C32080 +
            ((C18496 + C18497) * C696 + (C18498 + C18499) * C50607) * C50807) *
               C25653 +
           (((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C32080 +
            (C35135 * C696 + C35136 * C50607) * C50807) *
               C50634) *
              C50696 * C692 -
          ((((C4108 + C4109) * C50607 + (C4106 + C4107) * C696) * C50807 +
            ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C32080) *
               C50634 +
           (((C18929 + C18928) * C50607 + (C18927 + C18926) * C696) * C50807 +
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50607 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C696) *
                C32080) *
               C25653) *
              C50696 * C693 +
          ((((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                 C696 +
             (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                 C50607) *
                C32080 +
            ((C18934 + C18935) * C696 + (C18936 + C18937) * C50607) * C50807) *
               C25653 +
           (((C2891 + C2890) * C696 + (C2893 + C2892) * C50607) * C32080 +
            ((C35340 + C35339) * C696 + (C35342 + C35341) * C50607) * C50807) *
               C50634) *
              C50696 * C694 -
          ((((C2306 * C8885 + C50781 * C8889 + C2305 * C3158 + C50911 * C3163) *
                 C50607 +
             (C2306 * C8883 + C50781 * C8886 + C2305 * C3154 + C50911 * C3159) *
                 C696) *
                C50807 +
            ((C2306 * C3000 + C50781 * C3005 + C2305 * C705 + C50911 * C711) *
                 C50607 +
             (C2306 * C2996 + C50781 * C3001 + C2305 * C699 + C50911 * C706) *
                 C696) *
                C32080) *
               C50634 +
           (((C2306 * C8887 + C50781 * C8890 + C2305 * C3160 + C50911 * C3164) *
                 C50607 +
             (C2306 * C8884 + C50781 * C8888 + C2305 * C3155 + C50911 * C3161) *
                 C696) *
                C50807 +
            ((C2306 * C3002 + C50781 * C3006 + C2305 * C707 + C50911 * C712) *
                 C50607 +
             (C2306 * C2997 + C50781 * C3003 + C2305 * C700 + C50911 * C708) *
                 C696) *
                C32080) *
               C25653) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C283 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C278 -
             (C2340 + C2341) * C284 - (C2342 + C2343) * C279 + C2356 * C285 +
             C2357 * C280) *
                C32080 +
            ((C18496 + C18497) * C283 + (C18498 + C18499) * C278 -
             (C2715 + C2714) * C284 - (C2717 + C2716) * C279 +
             (C2719 + C2718) * C285 + (C2721 + C2720) * C280) *
                C50807) *
               C25653 +
           (((C2341 + C2340) * C283 + (C2343 + C2342) * C278 -
             (C2345 + C2344) * C284 - (C2347 + C2346) * C279 +
             (C2349 + C2348) * C285 + (C2351 + C2350) * C280) *
                C32080 +
            ((C2714 + C2715) * C283 + (C2716 + C2717) * C278 - C2726 * C284 -
             C2727 * C279 + (C2723 + C2722) * C285 + (C2725 + C2724) * C280) *
                C50807) *
               C50634) *
              C50696 * C50899 +
          ((((C2530 + C2531) * C284 -
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C278 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C283) +
             (C2532 + C2533) * C279 - C2542 * C285 - C2543 * C280) *
                C32080 +
            ((C4107 + C4106) * C284 -
             ((C18929 + C18928) * C278 + (C18927 + C18926) * C283) +
             (C4109 + C4108) * C279 - (C4110 + C4111) * C285 -
             (C4112 + C4113) * C280) *
                C50807) *
               C25653 +
           (((C2535 + C2534) * C284 -
             ((C2533 + C2532) * C278 + (C2531 + C2530) * C283) +
             (C2537 + C2536) * C279 - (C2538 + C2539) * C285 -
             (C2540 + C2541) * C280) *
                C32080 +
            ((C4111 + C4110) * C284 -
             ((C4108 + C4109) * C278 + (C4106 + C4107) * C283) +
             (C4113 + C4112) * C279 -
             (C2306 * C815 + C50781 * C828 + C2305 * C814 + C50911 * C825) *
                 C285 -
             (C2306 * C827 + C50781 * C839 + C2305 * C826 + C50911 * C838) *
                 C280) *
                C50807) *
               C50634) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                  C696 +
              (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                  C50607) *
                 C32080 +
             ((C18496 + C18497) * C696 + (C18498 + C18499) * C50607) * C50807) *
                C25653 +
            (((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C32080 +
             (C35135 * C696 + C35136 * C50607) * C50807) *
                C50634) *
               C941 -
           (((C19091 * C50607 + C19090 * C696) * C50807 +
             (C35132 * C50607 + C35131 * C696) * C32080) *
                C50634 +
            (((C18503 + C18502) * C50607 + (C18501 + C18500) * C696) * C50807 +
             ((C18499 + C18498) * C50607 + (C18497 + C18496) * C696) * C32080) *
                C25653) *
               C942 +
           ((C19281 * C32080 +
             ((C19117 + C19116) * C696 + (C19115 + C19114) * C50607) * C50807) *
                C25653 +
            ((C35861 * C696 + C35862 * C50607) * C32080 +
             ((C19112 + C19113) * C696 + (C19118 + C19119) * C50607) * C50807) *
                C50634) *
               C943) *
              C50899 +
          (((((C18926 + C18927) * C696 + (C18928 + C18929) * C50607) * C32080 +
             ((C18930 + C18931) * C696 + (C18932 + C18933) * C50607) * C50807) *
                C25653 +
            (((C4107 + C4106) * C696 + (C4109 + C4108) * C50607) * C32080 +
             ((C19902 + C19903) * C696 + (C19904 + C19905) * C50607) * C50807) *
                C50634) *
               C942 -
           ((((C4108 + C4109) * C50607 + (C4106 + C4107) * C696) * C50807 +
             ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C32080) *
                C50634 +
            (((C18929 + C18928) * C50607 + (C18927 + C18926) * C696) * C50807 +
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C50607 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C696) *
                 C32080) *
                C25653) *
               C941 -
           ((((C2306 * C9309 + C50781 * C9313 + C2305 * C3596 +
               C50911 * C3601) *
                  C50607 +
              (C2306 * C9307 + C50781 * C9310 + C2305 * C3592 +
               C50911 * C3597) *
                  C696) *
                 C50807 +
             ((C19905 + C19904) * C50607 + (C19903 + C19902) * C696) * C32080) *
                C50634 +
            (((C19285 + C19284) * C50607 + (C19283 + C19282) * C696) * C50807 +
             C19288 * C32080) *
                C25653) *
               C943) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                  C696 +
              (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                  C50607) *
                 C32080 +
             ((C18496 + C18497) * C696 + (C18498 + C18499) * C50607) * C50807) *
                C25653 +
            (((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C32080 +
             (C35135 * C696 + C35136 * C50607) * C50807) *
                C50634) *
               C50900 -
           (((C19091 * C50607 + C19090 * C696) * C50807 +
             (C35132 * C50607 + C35131 * C696) * C32080) *
                C50634 +
            (((C18503 + C18502) * C50607 + (C18501 + C18500) * C696) * C50807 +
             ((C18499 + C18498) * C50607 + (C18497 + C18496) * C696) * C32080) *
                C25653) *
               C50708) *
              C582 +
          (((((C18926 + C18927) * C696 + (C18928 + C18929) * C50607) * C32080 +
             ((C18930 + C18931) * C696 + (C18932 + C18933) * C50607) * C50807) *
                C25653 +
            (((C4107 + C4106) * C696 + (C4109 + C4108) * C50607) * C32080 +
             ((C19902 + C19903) * C696 + (C19904 + C19905) * C50607) * C50807) *
                C50634) *
               C50708 -
           ((((C4108 + C4109) * C50607 + (C4106 + C4107) * C696) * C50807 +
             ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C32080) *
                C50634 +
            (((C18929 + C18928) * C50607 + (C18927 + C18926) * C696) * C50807 +
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C50607 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C696) *
                 C32080) *
                C25653) *
               C50900) *
              C583 +
          (((((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                  C696 +
              (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                  C50607) *
                 C32080 +
             ((C18934 + C18935) * C696 + (C18936 + C18937) * C50607) * C50807) *
                C25653 +
            (((C2891 + C2890) * C696 + (C2893 + C2892) * C50607) * C32080 +
             ((C35340 + C35339) * C696 + (C35342 + C35341) * C50607) * C50807) *
                C50634) *
               C50900 -
           ((((C2306 * C9203 + C50781 * C9207 + C2305 * C3486 +
               C50911 * C3491) *
                  C50607 +
              (C2306 * C9201 + C50781 * C9204 + C2305 * C3482 +
               C50911 * C3487) *
                  C696) *
                 C50807 +
             ((C35341 + C35342) * C50607 + (C35339 + C35340) * C696) * C32080) *
                C50634 +
            (((C18941 + C18940) * C50607 + (C18939 + C18938) * C696) * C50807 +
             ((C18937 + C18936) * C50607 + (C18935 + C18934) * C696) * C32080) *
                C25653) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C283 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C278 -
             (C2340 + C2341) * C284 - (C2342 + C2343) * C279 + C2356 * C285 +
             C2357 * C280) *
                C32080 +
            ((C18496 + C18497) * C283 + (C18498 + C18499) * C278 -
             C35131 * C284 - C35132 * C279 + C35133 * C285 + C35134 * C280) *
                C50807) *
               C25653 +
           (((C2341 + C2340) * C283 + (C2343 + C2342) * C278 -
             (C2345 + C2344) * C284 - (C2347 + C2346) * C279 +
             (C2349 + C2348) * C285 + (C2351 + C2350) * C280) *
                C32080 +
            (C35135 * C283 + C35136 * C278 - C2726 * C284 - C2727 * C279 +
             (C2723 + C2722) * C285 + (C2725 + C2724) * C280) *
                C50807) *
               C50634) *
              C50900 +
          (((C35135 * C284 -
             ((C18499 + C18498) * C278 + (C18497 + C18496) * C283) +
             C35136 * C279 - C2726 * C285 - C2727 * C280) *
                C32080 +
            ((C3329 + C3328) * C284 -
             ((C18503 + C18502) * C278 + (C18501 + C18500) * C283) +
             (C3331 + C3330) * C279 - (C3332 + C3333) * C285 -
             (C3334 + C3335) * C280) *
                C50807) *
               C25653 +
           ((C35133 * C284 - (C35132 * C278 + C35131 * C283) + C35134 * C279 -
             (C2722 + C2723) * C285 - (C2724 + C2725) * C280) *
                C32080 +
            ((C3333 + C3332) * C284 - (C19091 * C278 + C19090 * C283) +
             (C3335 + C3334) * C279 -
             (C2306 * C1080 + C50781 * C1085 + C2305 * C947 + C50911 * C955) *
                 C285 -
             (C2306 * C1084 + C50781 * C1092 + C2305 * C956 + C50911 * C962) *
                 C280) *
                C50807) *
               C50634) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C696 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50607) *
                C32080 +
            ((C18496 + C18497) * C696 + (C18498 + C18499) * C50607) * C50807) *
               C25653 +
           (((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C32080 +
            (C35135 * C696 + C35136 * C50607) * C50807) *
               C50634) *
              C1162 -
          (((C19091 * C50607 + C19090 * C696) * C50807 +
            (C35132 * C50607 + C35131 * C696) * C32080) *
               C50634 +
           (((C18503 + C18502) * C50607 + (C18501 + C18500) * C696) * C50807 +
            ((C18499 + C18498) * C50607 + (C18497 + C18496) * C696) * C32080) *
               C25653) *
              C1163 +
          ((C19281 * C32080 +
            ((C19117 + C19116) * C696 + (C19115 + C19114) * C50607) * C50807) *
               C25653 +
           ((C35861 * C696 + C35862 * C50607) * C32080 +
            ((C19112 + C19113) * C696 + (C19118 + C19119) * C50607) * C50807) *
               C50634) *
              C1164 -
          ((((C2306 * C16448 + C50781 * C16450 + C2305 * C6400 +
              C50911 * C6405) *
                 C50607 +
             (C2306 * C16447 + C50781 * C16449 + C2305 * C6396 +
              C50911 * C6401) *
                 C696) *
                C50807 +
            ((C19119 + C19118) * C50607 + (C19113 + C19112) * C696) * C32080) *
               C50634 +
           (((C19406 + C19405) * C50607 + (C19404 + C19403) * C696) * C50807 +
            C19407 * C32080) *
               C25653) *
              C1165) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C1285 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50942 -
             (C2340 + C2341) * C1286 - (C2342 + C2343) * C50926 +
             C2356 * C1287 + C2357 * C1282) *
                C32080 +
            ((C18496 + C18497) * C1285 + (C18498 + C18499) * C50942 -
             C35131 * C1286 - C35132 * C50926 + C35133 * C1287 +
             C35134 * C1282) *
                C50807) *
               C25653 +
           (((C2341 + C2340) * C1285 + (C2343 + C2342) * C50942 -
             (C2345 + C2344) * C1286 - (C2347 + C2346) * C50926 +
             (C2349 + C2348) * C1287 + (C2351 + C2350) * C1282) *
                C32080 +
            (C35135 * C1285 + C35136 * C50942 - C2726 * C1286 - C2727 * C50926 +
             (C2723 + C2722) * C1287 + (C2725 + C2724) * C1282) *
                C50807) *
               C50634) *
              C1643 +
          (((C35135 * C1286 -
             ((C18499 + C18498) * C50942 + (C18497 + C18496) * C1285) +
             C35136 * C50926 - C2726 * C1287 - C2727 * C1282) *
                C32080 +
            (C35861 * C1286 -
             ((C18503 + C18502) * C50942 + (C18501 + C18500) * C1285) +
             C35862 * C50926 - (C3332 + C3333) * C1287 -
             (C3334 + C3335) * C1282) *
                C50807) *
               C25653 +
           ((C35133 * C1286 - (C35132 * C50942 + C35131 * C1285) +
             C35134 * C50926 - (C2722 + C2723) * C1287 -
             (C2724 + C2725) * C1282) *
                C32080 +
            ((C3333 + C3332) * C1286 - (C19091 * C50942 + C19090 * C1285) +
             (C3335 + C3334) * C50926 -
             (C2306 * C1080 + C50781 * C1085 + C2305 * C947 + C50911 * C955) *
                 C1287 -
             (C2306 * C1084 + C50781 * C1092 + C2305 * C956 + C50911 * C962) *
                 C1282) *
                C50807) *
               C50634) *
              C50708) *
         C50670) /
        (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                  C1391 +
              (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                  C1386 -
              (C2340 + C2341) * C1392 - (C2342 + C2343) * C50612) *
                 C32080 +
             ((C18496 + C18497) * C1391 + (C18498 + C18499) * C1386 -
              C35131 * C1392 - C35132 * C50612) *
                 C50807) *
                C25653 +
            (((C2341 + C2340) * C1391 + (C2343 + C2342) * C1386 -
              (C2345 + C2344) * C1392 - (C2347 + C2346) * C50612) *
                 C32080 +
             (C35135 * C1391 + C35136 * C1386 - C2726 * C1392 -
              C2727 * C50612) *
                 C50807) *
                C50634) *
               C1643 +
           (((C35135 * C1392 -
              ((C18499 + C18498) * C1386 + (C18497 + C18496) * C1391) +
              C35136 * C50612) *
                 C32080 +
             (C35861 * C1392 -
              ((C18503 + C18502) * C1386 + (C18501 + C18500) * C1391) +
              C35862 * C50612) *
                 C50807) *
                C25653 +
            ((C35133 * C1392 - (C35132 * C1386 + C35131 * C1391) +
              C35134 * C50612) *
                 C32080 +
             ((C3333 + C3332) * C1392 - (C19091 * C1386 + C19090 * C1391) +
              (C3335 + C3334) * C50612) *
                 C50807) *
                C50634) *
               C50708) *
              C50899 +
          (((((C2530 + C2531) * C1392 -
              ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                   C1386 +
               (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                   C1391) +
              (C2532 + C2533) * C50612) *
                 C32080 +
             (C36833 * C1392 -
              ((C18929 + C18928) * C1386 + (C18927 + C18926) * C1391) +
              C36834 * C50612) *
                 C50807) *
                C25653 +
            (((C2535 + C2534) * C1392 -
              ((C2533 + C2532) * C1386 + (C2531 + C2530) * C1391) +
              (C2537 + C2536) * C50612) *
                 C32080 +
             ((C4111 + C4110) * C1392 - (C36835 * C1386 + C36836 * C1391) +
              (C4113 + C4112) * C50612) *
                 C50807) *
                C50634) *
               C1643 +
           ((((C18926 + C18927) * C1391 + (C18928 + C18929) * C1386 -
              C36836 * C1392 - C36835 * C50612) *
                 C32080 +
             ((C18930 + C18931) * C1391 + (C18932 + C18933) * C1386 -
              (C19903 + C19902) * C1392 - (C19905 + C19904) * C50612) *
                 C50807) *
                C25653 +
            ((C36833 * C1391 + C36834 * C1386 - (C4110 + C4111) * C1392 -
              (C4112 + C4113) * C50612) *
                 C32080 +
             ((C19902 + C19903) * C1391 + (C19904 + C19905) * C1386 -
              (C2306 * C3481 + C50781 * C3485 + C2305 * C1081 +
               C50911 * C1087) *
                  C1392 -
              (C2306 * C3484 + C50781 * C3490 + C2305 * C1086 +
               C50911 * C1093) *
                  C50612) *
                 C50807) *
                C50634) *
               C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C1391 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C1386 -
             (C2340 + C2341) * C1392 - (C2342 + C2343) * C50612) *
                C32080 +
            ((C18496 + C18497) * C1391 + (C18498 + C18499) * C1386 -
             C35131 * C1392 - C35132 * C50612) *
                C50807) *
               C25653 +
           (((C2341 + C2340) * C1391 + (C2343 + C2342) * C1386 -
             (C2345 + C2344) * C1392 - (C2347 + C2346) * C50612) *
                C32080 +
            (C35135 * C1391 + C35136 * C1386 - C2726 * C1392 - C2727 * C50612) *
                C50807) *
               C50634) *
              C50945 +
          (((C35135 * C1392 -
             ((C18499 + C18498) * C1386 + (C18497 + C18496) * C1391) +
             C35136 * C50612) *
                C32080 +
            (C35861 * C1392 -
             ((C18503 + C18502) * C1386 + (C18501 + C18500) * C1391) +
             C35862 * C50612) *
                C50807) *
               C25653 +
           ((C35133 * C1392 - (C35132 * C1386 + C35131 * C1391) +
             C35134 * C50612) *
                C32080 +
            ((C3333 + C3332) * C1392 - (C19091 * C1386 + C19090 * C1391) +
             (C3335 + C3334) * C50612) *
                C50807) *
               C50634) *
              C50935 +
          ((C20398 * C32080 +
            ((C19117 + C19116) * C1391 + (C19115 + C19114) * C1386 -
             (C19113 + C19112) * C1392 - (C19119 + C19118) * C50612) *
                C50807) *
               C25653 +
           ((C35861 * C1391 + C35862 * C1386 - (C3332 + C3333) * C1392 -
             (C3334 + C3335) * C50612) *
                C32080 +
            ((C19112 + C19113) * C1391 + (C19118 + C19119) * C1386 -
             (C2306 * C3591 + C50781 * C3595 + C2305 * C1167 + C50911 * C1173) *
                 C1392 -
             (C2306 * C3594 + C50781 * C3600 + C2305 * C1172 + C50911 * C1179) *
                 C50612) *
                C50807) *
               C50634) *
              C1875) *
         C50670) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C118 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C106 -
            (C2340 + C2341) * C119 - (C2342 + C2343) * C107 + C2356 * C120 +
            C2357 * C108 - C2358 * C121 - C2359 * C109) *
               C32080 +
           ((C18496 + C18497) * C118 + (C18498 + C18499) * C106 -
            (C2715 + C2714) * C119 - (C2717 + C2716) * C107 +
            (C2719 + C2718) * C120 + (C2721 + C2720) * C108 -
            (C2722 + C2723) * C121 - (C2724 + C2725) * C109) *
               C50807) *
              C25653 +
          (((C2341 + C2340) * C118 + (C2343 + C2342) * C106 -
            (C2345 + C2344) * C119 - (C2347 + C2346) * C107 +
            (C2349 + C2348) * C120 + (C2351 + C2350) * C108 -
            (C2352 + C2353) * C121 - (C2354 + C2355) * C109) *
               C32080 +
           ((C2714 + C2715) * C118 + (C2716 + C2717) * C106 - C2726 * C119 -
            C2727 * C107 + (C2723 + C2722) * C120 + (C2725 + C2724) * C108 -
            (C2306 * C1523 + C50781 * C1524 + C2305 * C438 + C50911 * C448) *
                C121 -
            (C2306 * C1525 + C50781 * C1526 + C2305 * C449 + C50911 * C456) *
                C109) *
               C50807) *
              C50634) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C49720 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50884 -
             (C2340 + C2341) * C49713 - (C2342 + C2343) * C50612) *
                C32080 +
            ((C18496 + C18497) * C49720 + (C18498 + C18499) * C50884 -
             C35131 * C49713 - C35132 * C50612) *
                C50807) *
               C25653 +
           (((C2341 + C2340) * C49720 + (C2343 + C2342) * C50884 -
             (C2345 + C2344) * C49713 - (C2347 + C2346) * C50612) *
                C32080 +
            (C35135 * C49720 + C35136 * C50884 - C2726 * C49713 -
             C2727 * C50612) *
                C50807) *
               C50634) *
              C50696 * C582 +
          ((((C2530 + C2531) * C49713 -
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C50884 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C49720) +
             (C2532 + C2533) * C50612) *
                C32080 +
            ((C4107 + C4106) * C49713 -
             ((C18929 + C18928) * C50884 + (C18927 + C18926) * C49720) +
             (C4109 + C4108) * C50612) *
                C50807) *
               C25653 +
           (((C2535 + C2534) * C49713 -
             ((C2533 + C2532) * C50884 + (C2531 + C2530) * C49720) +
             (C2537 + C2536) * C50612) *
                C32080 +
            ((C4111 + C4110) * C49713 -
             ((C4108 + C4109) * C50884 + (C4106 + C4107) * C49720) +
             (C4113 + C4112) * C50612) *
                C50807) *
               C50634) *
              C50696 * C583 +
          ((((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                 C49720 +
             (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                 C50884 -
             (C2890 + C2891) * C49713 - (C2892 + C2893) * C50612) *
                C32080 +
            ((C18934 + C18935) * C49720 + (C18936 + C18937) * C50884 -
             (C35339 + C35340) * C49713 - (C35341 + C35342) * C50612) *
                C50807) *
               C25653 +
           (((C2891 + C2890) * C49720 + (C2893 + C2892) * C50884 -
             (C2894 + C2895) * C49713 - (C2896 + C2897) * C50612) *
                C32080 +
            ((C35340 + C35339) * C49720 + (C35342 + C35341) * C50884 -
             (C2306 * C3153 + C50781 * C3157 + C2305 * C816 + C50911 * C830) *
                 C49713 -
             (C2306 * C3156 + C50781 * C3162 + C2305 * C829 + C50911 * C840) *
                 C50612) *
                C50807) *
               C50634) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C283 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C278 -
             (C2340 + C2341) * C284 - (C2342 + C2343) * C279 + C2356 * C285 +
             C2357 * C280) *
                C32080 +
            ((C18496 + C18497) * C283 + (C18498 + C18499) * C278 -
             (C2715 + C2714) * C284 - (C2717 + C2716) * C279 +
             (C2719 + C2718) * C285 + (C2721 + C2720) * C280) *
                C50807) *
               C25653 +
           (((C2341 + C2340) * C283 + (C2343 + C2342) * C278 -
             (C2345 + C2344) * C284 - (C2347 + C2346) * C279 +
             (C2349 + C2348) * C285 + (C2351 + C2350) * C280) *
                C32080 +
            ((C2714 + C2715) * C283 + (C2716 + C2717) * C278 - C2726 * C284 -
             C2727 * C279 + (C2723 + C2722) * C285 + (C2725 + C2724) * C280) *
                C50807) *
               C50634) *
              C50696 * C50899 +
          ((((C2530 + C2531) * C284 -
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C278 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C283) +
             (C2532 + C2533) * C279 - C2542 * C285 - C2543 * C280) *
                C32080 +
            ((C4107 + C4106) * C284 -
             ((C18929 + C18928) * C278 + (C18927 + C18926) * C283) +
             (C4109 + C4108) * C279 - (C4110 + C4111) * C285 -
             (C4112 + C4113) * C280) *
                C50807) *
               C25653 +
           (((C2535 + C2534) * C284 -
             ((C2533 + C2532) * C278 + (C2531 + C2530) * C283) +
             (C2537 + C2536) * C279 - (C2538 + C2539) * C285 -
             (C2540 + C2541) * C280) *
                C32080 +
            ((C4111 + C4110) * C284 -
             ((C4108 + C4109) * C278 + (C4106 + C4107) * C283) +
             (C4113 + C4112) * C279 -
             (C2306 * C815 + C50781 * C828 + C2305 * C814 + C50911 * C825) *
                 C285 -
             (C2306 * C827 + C50781 * C839 + C2305 * C826 + C50911 * C838) *
                 C280) *
                C50807) *
               C50634) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C696 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50607) *
                C32080 +
            ((C18496 + C18497) * C696 + (C18498 + C18499) * C50607) * C50807) *
               C25653 +
           (((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C32080 +
            (C35135 * C696 + C35136 * C50607) * C50807) *
               C50634) *
              C50696 * C692 -
          ((((C4108 + C4109) * C50607 + (C4106 + C4107) * C696) * C50807 +
            ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C32080) *
               C50634 +
           (((C18929 + C18928) * C50607 + (C18927 + C18926) * C696) * C50807 +
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50607 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C696) *
                C32080) *
               C25653) *
              C50696 * C693 +
          ((((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                 C696 +
             (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                 C50607) *
                C32080 +
            ((C18934 + C18935) * C696 + (C18936 + C18937) * C50607) * C50807) *
               C25653 +
           (((C2891 + C2890) * C696 + (C2893 + C2892) * C50607) * C32080 +
            ((C35340 + C35339) * C696 + (C35342 + C35341) * C50607) * C50807) *
               C50634) *
              C50696 * C694 -
          ((((C2306 * C8885 + C50781 * C8889 + C2305 * C3158 + C50911 * C3163) *
                 C50607 +
             (C2306 * C8883 + C50781 * C8886 + C2305 * C3154 + C50911 * C3159) *
                 C696) *
                C50807 +
            ((C2306 * C3000 + C50781 * C3005 + C2305 * C705 + C50911 * C711) *
                 C50607 +
             (C2306 * C2996 + C50781 * C3001 + C2305 * C699 + C50911 * C706) *
                 C696) *
                C32080) *
               C50634 +
           (((C2306 * C8887 + C50781 * C8890 + C2305 * C3160 + C50911 * C3164) *
                 C50607 +
             (C2306 * C8884 + C50781 * C8888 + C2305 * C3155 + C50911 * C3161) *
                 C696) *
                C50807 +
            ((C2306 * C3002 + C50781 * C3006 + C2305 * C707 + C50911 * C712) *
                 C50607 +
             (C2306 * C2997 + C50781 * C3003 + C2305 * C700 + C50911 * C708) *
                 C696) *
                C32080) *
               C25653) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C283 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C278 -
             (C2340 + C2341) * C284 - (C2342 + C2343) * C279 + C2356 * C285 +
             C2357 * C280) *
                C32080 +
            ((C18496 + C18497) * C283 + (C18498 + C18499) * C278 -
             C35131 * C284 - C35132 * C279 + C35133 * C285 + C35134 * C280) *
                C50807) *
               C25653 +
           (((C2341 + C2340) * C283 + (C2343 + C2342) * C278 -
             (C2345 + C2344) * C284 - (C2347 + C2346) * C279 +
             (C2349 + C2348) * C285 + (C2351 + C2350) * C280) *
                C32080 +
            (C35135 * C283 + C35136 * C278 - C2726 * C284 - C2727 * C279 +
             (C2723 + C2722) * C285 + (C2725 + C2724) * C280) *
                C50807) *
               C50634) *
              C50900 +
          (((C35135 * C284 -
             ((C18499 + C18498) * C278 + (C18497 + C18496) * C283) +
             C35136 * C279 - C2726 * C285 - C2727 * C280) *
                C32080 +
            ((C3329 + C3328) * C284 -
             ((C18503 + C18502) * C278 + (C18501 + C18500) * C283) +
             (C3331 + C3330) * C279 - (C3332 + C3333) * C285 -
             (C3334 + C3335) * C280) *
                C50807) *
               C25653 +
           ((C35133 * C284 - (C35132 * C278 + C35131 * C283) + C35134 * C279 -
             (C2722 + C2723) * C285 - (C2724 + C2725) * C280) *
                C32080 +
            ((C3333 + C3332) * C284 - (C19091 * C278 + C19090 * C283) +
             (C3335 + C3334) * C279 -
             (C2306 * C1080 + C50781 * C1085 + C2305 * C947 + C50911 * C955) *
                 C285 -
             (C2306 * C1084 + C50781 * C1092 + C2305 * C956 + C50911 * C962) *
                 C280) *
                C50807) *
               C50634) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                  C696 +
              (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                  C50607) *
                 C32080 +
             ((C18496 + C18497) * C696 + (C18498 + C18499) * C50607) * C50807) *
                C25653 +
            (((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C32080 +
             (C35135 * C696 + C35136 * C50607) * C50807) *
                C50634) *
               C50900 -
           (((C19091 * C50607 + C19090 * C696) * C50807 +
             (C35132 * C50607 + C35131 * C696) * C32080) *
                C50634 +
            (((C18503 + C18502) * C50607 + (C18501 + C18500) * C696) * C50807 +
             ((C18499 + C18498) * C50607 + (C18497 + C18496) * C696) * C32080) *
                C25653) *
               C50708) *
              C582 +
          (((((C18926 + C18927) * C696 + (C18928 + C18929) * C50607) * C32080 +
             ((C18930 + C18931) * C696 + (C18932 + C18933) * C50607) * C50807) *
                C25653 +
            (((C4107 + C4106) * C696 + (C4109 + C4108) * C50607) * C32080 +
             ((C19902 + C19903) * C696 + (C19904 + C19905) * C50607) * C50807) *
                C50634) *
               C50708 -
           ((((C4108 + C4109) * C50607 + (C4106 + C4107) * C696) * C50807 +
             ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C32080) *
                C50634 +
            (((C18929 + C18928) * C50607 + (C18927 + C18926) * C696) * C50807 +
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C50607 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C696) *
                 C32080) *
                C25653) *
               C50900) *
              C583 +
          (((((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                  C696 +
              (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                  C50607) *
                 C32080 +
             ((C18934 + C18935) * C696 + (C18936 + C18937) * C50607) * C50807) *
                C25653 +
            (((C2891 + C2890) * C696 + (C2893 + C2892) * C50607) * C32080 +
             ((C35340 + C35339) * C696 + (C35342 + C35341) * C50607) * C50807) *
                C50634) *
               C50900 -
           ((((C2306 * C9203 + C50781 * C9207 + C2305 * C3486 +
               C50911 * C3491) *
                  C50607 +
              (C2306 * C9201 + C50781 * C9204 + C2305 * C3482 +
               C50911 * C3487) *
                  C696) *
                 C50807 +
             ((C35341 + C35342) * C50607 + (C35339 + C35340) * C696) * C32080) *
                C50634 +
            (((C18941 + C18940) * C50607 + (C18939 + C18938) * C696) * C50807 +
             ((C18937 + C18936) * C50607 + (C18935 + C18934) * C696) * C32080) *
                C25653) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1285 +
             (C117 * C130 + C50765 * C143) * C50942 - C171 * C1286 -
             C172 * C50926 + C173 * C1287 + C174 * C1282) *
                C50947 +
            (C7076 + C7077 - C7078 - C7079 + C7080 + C7081) * C50941 +
            (C17230 + C17231 - C17232 - C17233 + C17234 + C17235) * C38228) *
               C25653 +
           ((C171 * C1285 + C172 * C50942 - C173 * C1286 - C174 * C50926 +
             C175 * C1287 + C176 * C1282) *
                C50947 +
            (C7082 + C7083 - C7084 - C7085 + C7086 + C7087) * C50941 +
            (C17236 + C17237 - C17238 - C17239 + C17240 + C17241) * C38228) *
               C50634) *
              C50696 * C1283 +
          (((C327 * C1286 -
             ((C117 * C293 + C50765 * C304) * C50942 +
              (C117 * C287 + C50765 * C294) * C1285) +
             C328 * C50926 - C329 * C1287 - C330 * C1282) *
                C50947 +
            (C1540 * C1286 - (C5927 * C50942 + C5926 * C1285) + C1541 * C50926 -
             C1542 * C1287 - C1543 * C1282) *
                C50941 +
            (C6288 * C1286 - (C6287 * C50942 + C6286 * C1285) + C6289 * C50926 -
             C6290 * C1287 - C6291 * C1282) *
                C38228) *
               C25653 +
           ((C329 * C1286 - (C328 * C50942 + C327 * C1285) + C330 * C50926 -
             C331 * C1287 - C332 * C1282) *
                C50947 +
            (C1542 * C1286 - (C1541 * C50942 + C1540 * C1285) + C1543 * C50926 -
             C1544 * C1287 - C1545 * C1282) *
                C50941 +
            (C6290 * C1286 - (C6289 * C50942 + C6288 * C1285) + C6291 * C50926 -
             (C117 * C1080 + C50765 * C1085) * C1287 -
             (C117 * C1084 + C50765 * C1092) * C1282) *
                C38228) *
               C50634) *
              C50696 * C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1391 +
             (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
             C172 * C50612) *
                C50947 +
            (C6906 + C6907 - C6908 - C6909) * C50941 + C17594 * C38228) *
               C25653 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                C50947 +
            (C6910 + C6911 - C6912 - C6913) * C50941 + C17595 * C38228) *
               C50634) *
              C50696 * C50944 +
          (((C327 * C1392 -
             ((C117 * C293 + C50765 * C304) * C1386 +
              (C117 * C287 + C50765 * C294) * C1391) +
             C328 * C50612) *
                C50947 +
            (C6918 - (C6919 + C6920) + C6921) * C50941 +
            (C17076 - (C17077 + C17078) + C17079) * C38228) *
               C25653 +
           ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                C50947 +
            (C6922 - (C6923 + C6924) + C6925) * C50941 +
            (C17080 - (C17081 + C17082) + C17083) * C38228) *
               C50634) *
              C50696 * C50932 +
          ((((C117 * C587 + C50765 * C592) * C1391 +
             (C117 * C593 + C50765 * C602) * C1386 - C620 * C1392 -
             C621 * C50612) *
                C50947 +
            (C5928 * C1391 + C5929 * C1386 - C5656 * C1392 - C5657 * C50612) *
                C50941 +
            (C16132 * C1391 + C16133 * C1386 - C15880 * C1392 -
             C15881 * C50612) *
                C38228) *
               C25653 +
           ((C620 * C1391 + C621 * C1386 - C622 * C1392 - C623 * C50612) *
                C50947 +
            (C5656 * C1391 + C5657 * C1386 - C5658 * C1392 - C5659 * C50612) *
                C50941 +
            (C15880 * C1391 + C15881 * C1386 -
             (C117 * C3481 + C50765 * C3485) * C1392 -
             (C117 * C3484 + C50765 * C3490) * C50612) *
                C38228) *
               C50634) *
              C50696 * C1390)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C1391 +
              (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
              C172 * C50612) *
                 C50947 +
             (C6906 + C6907 - C6908 - C6909) * C50941 + C17594 * C38228) *
                C25653 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                 C50947 +
             (C6910 + C6911 - C6912 - C6913) * C50941 + C17595 * C38228) *
                C50634) *
               C50900 +
           (((C6908 - (C6907 + C6906) + C6909) * C50947 +
             (C7434 - (C7435 + C7436) + C7437) * C50941 +
             (C17584 - (C17585 + C17586) + C17587) * C38228) *
                C25653 +
            ((C6912 - (C6911 + C6910) + C6913) * C50947 +
             (C7438 - (C7439 + C7440) + C7441) * C50941 +
             (C17588 - (C17589 + C17590) + C17591) * C38228) *
                C50634) *
               C50708) *
              C1283 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50765 * C304) * C1386 +
               (C117 * C287 + C50765 * C294) * C1391) +
              C328 * C50612) *
                 C50947 +
             (C6918 - (C6919 + C6920) + C6921) * C50941 +
             (C17076 - (C17077 + C17078) + C17079) * C38228) *
                C25653 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                 C50947 +
             (C6922 - (C6923 + C6924) + C6925) * C50941 +
             (C17080 - (C17081 + C17082) + C17083) * C38228) *
                C50634) *
               C50900 +
           (((C6920 + C6919 - C6918 - C6921) * C50947 +
             (C17078 + C17077 - C17076 - C17079) * C50941 +
             (C22047 + C22046 - C22045 - C22048) * C38228) *
                C25653 +
            ((C6924 + C6923 - C6922 - C6925) * C50947 +
             (C17082 + C17081 - C17080 - C17083) * C50941 +
             (C16466 * C1391 + C16467 * C1386 -
              (C117 * C3591 + C50765 * C3595) * C1392 -
              (C117 * C3594 + C50765 * C3600) * C50612) *
                 C38228) *
                C50634) *
               C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C49720 +
              (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
              C172 * C50612) *
                 C50947 +
             (C6080 + C6081 - C6082 - C6083) * C50941 + C16300 * C38228) *
                C25653 +
            ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                 C50947 +
             (C6084 + C6085 - C6086 - C6087) * C50941 + C16301 * C38228) *
                C50634) *
               C1643 +
           (((C6082 - (C6081 + C6080) + C6083) * C50947 +
             (C6092 - (C6120 + C6121) + C6097) * C50941 +
             (C16284 - (C16285 + C16286) + C16287) * C38228) *
                C25653 +
            ((C6086 - (C6085 + C6084) + C6087) * C50947 +
             (C6098 - (C6099 + C6100) + C6101) * C50941 +
             (C16288 - (C16289 + C16290) + C16291) * C38228) *
                C50634) *
               C50708) *
              C1283 +
          ((((C327 * C49713 -
              ((C117 * C293 + C50765 * C304) * C50884 +
               (C117 * C287 + C50765 * C294) * C49720) +
              C328 * C50612) *
                 C50947 +
             (C7640 - (C7641 + C7642) + C7643) * C50941 +
             (C17790 - (C17791 + C17792) + C17793) * C38228) *
                C25653 +
            ((C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
                 C50947 +
             (C7644 - (C7645 + C7646) + C7647) * C50941 +
             (C17794 - (C17795 + C17796) + C17797) * C38228) *
                C50634) *
               C1643 +
           (((C7642 + C7641 - C7640 - C7643) * C50947 +
             (C17792 + C17791 - C17790 - C17793) * C50941 +
             (C22520 + C22519 - C22518 - C22521) * C38228) *
                C25653 +
            ((C7646 + C7645 - C7644 - C7647) * C50947 +
             (C17796 + C17795 - C17794 - C17797) * C50941 +
             (C16466 * C49720 + C16467 * C50884 -
              (C117 * C3591 + C50765 * C3595) * C49713 -
              (C117 * C3594 + C50765 * C3600) * C50612) *
                 C38228) *
                C50634) *
               C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C117 * C122 + C50765 * C129) * C696 +
                       (C117 * C130 + C50765 * C143) * C50607) *
                          C50947 +
                      (C5904 + C5905) * C50941 + C16452 * C38228) *
                         C25653 +
                     ((C171 * C696 + C172 * C50607) * C50947 +
                      (C5906 + C5907) * C50941 + C16453 * C38228) *
                         C50634) *
                        C1643 -
                    ((C16578 * C38228 + (C6270 + C6271) * C50941 +
                      (C5907 + C5906) * C50947) *
                         C50634 +
                     (C16579 * C38228 + (C6272 + C6273) * C50941 +
                      (C5905 + C5904) * C50947) *
                         C25653) *
                        C50708) *
                       C50944 +
                   ((((C5930 + C5931) * C50947 + (C6292 + C6293) * C50941 +
                      (C16468 + C16469) * C38228) *
                         C25653 +
                     ((C5914 + C5915) * C50947 + (C6294 + C6295) * C50941 +
                      (C16470 + C16471) * C38228) *
                         C50634) *
                        C50708 -
                    ((C16462 * C38228 + (C5915 + C5914) * C50941 +
                      (C328 * C50607 + C327 * C696) * C50947) *
                         C50634 +
                     (C16463 * C38228 + (C5931 + C5930) * C50941 +
                      ((C117 * C293 + C50765 * C304) * C50607 +
                       (C117 * C287 + C50765 * C294) * C696) *
                          C50947) *
                         C25653) *
                        C1643) *
                       C50932 +
                   (((((C117 * C587 + C50765 * C592) * C696 +
                       (C117 * C593 + C50765 * C602) * C50607) *
                          C50947 +
                      (C5932 + C5933) * C50941 + (C16134 + C16135) * C38228) *
                         C25653 +
                     ((C620 * C696 + C621 * C50607) * C50947 +
                      (C5922 + C5923) * C50941 + (C16130 + C16131) * C38228) *
                         C50634) *
                        C1643 -
                    ((((C117 * C9309 + C50765 * C9313) * C50607 +
                       (C117 * C9307 + C50765 * C9310) * C696) *
                          C38228 +
                      (C16131 + C16130) * C50941 + (C5923 + C5922) * C50947) *
                         C50634 +
                     ((C21426 + C21425) * C38228 + (C16135 + C16134) * C50941 +
                      (C5933 + C5932) * C50947) *
                         C25653) *
                        C50708) *
                       C1390)) /
                 (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C50947 +
             (C5904 + C5905) * C50941 + C16452 * C38228) *
                C25653 +
            ((C171 * C696 + C172 * C50607) * C50947 + (C5906 + C5907) * C50941 +
             C16453 * C38228) *
                C50634) *
               C50945 -
           ((C16578 * C38228 + (C6270 + C6271) * C50941 +
             (C5907 + C5906) * C50947) *
                C50634 +
            (C16579 * C38228 + (C6272 + C6273) * C50941 +
             (C5905 + C5904) * C50947) *
                C25653) *
               C50935 +
           ((C16452 * C50947 + C21630 * C50941 + (C16588 + C16589) * C38228) *
                C25653 +
            (C16453 * C50947 + (C6412 + C6413) * C50941 +
             (C16584 + C16585) * C38228) *
                C50634) *
               C1875) *
              C1283 +
          ((((C5930 + C5931) * C50947 + (C6292 + C6293) * C50941 +
             (C16468 + C16469) * C38228) *
                C25653 +
            ((C5914 + C5915) * C50947 + (C6294 + C6295) * C50941 +
             (C16470 + C16471) * C38228) *
                C50634) *
               C50935 -
           ((C16462 * C38228 + (C5915 + C5914) * C50941 +
             (C328 * C50607 + C327 * C696) * C50947) *
                C50634 +
            (C16463 * C38228 + (C5931 + C5930) * C50941 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C50947) *
                C25653) *
               C50945 -
           ((((C117 * C16448 + C50765 * C16450) * C50607 +
              (C117 * C16447 + C50765 * C16449) * C696) *
                 C38228 +
             (C16471 + C16470) * C50941 + C16462 * C50947) *
                C50634 +
            ((C21639 + C21638) * C38228 + C21635 * C50941 + C16463 * C50947) *
                C25653) *
               C1875) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C49720 +
             (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
             C172 * C50612) *
                C50947 +
            (C6080 + C6081 - C6082 - C6083) * C50941 + C16300 * C38228) *
               C25653 +
           ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                C50947 +
            (C6084 + C6085 - C6086 - C6087) * C50941 + C16301 * C38228) *
               C50634) *
              C50696 * C582 +
          (((C327 * C49713 -
             ((C117 * C293 + C50765 * C304) * C50884 +
              (C117 * C287 + C50765 * C294) * C49720) +
             C328 * C50612) *
                C50947 +
            (C7640 - (C7641 + C7642) + C7643) * C50941 +
            (C17790 - (C17791 + C17792) + C17793) * C38228) *
               C25653 +
           ((C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
                C50947 +
            (C7644 - (C7645 + C7646) + C7647) * C50941 +
            (C17794 - (C17795 + C17796) + C17797) * C38228) *
               C50634) *
              C50696 * C583 +
          ((((C117 * C587 + C50765 * C592) * C49720 +
             (C117 * C593 + C50765 * C602) * C50884 - C620 * C49713 -
             C621 * C50612) *
                C50947 +
            (C5928 * C49720 + C5929 * C50884 - C5656 * C49713 -
             C5657 * C50612) *
                C50941 +
            (C16132 * C49720 + C16133 * C50884 - C15880 * C49713 -
             C15881 * C50612) *
                C38228) *
               C25653 +
           ((C620 * C49720 + C621 * C50884 - C622 * C49713 - C623 * C50612) *
                C50947 +
            (C5656 * C49720 + C5657 * C50884 - C5658 * C49713 -
             C5659 * C50612) *
                C50941 +
            (C15880 * C49720 + C15881 * C50884 -
             (C117 * C3481 + C50765 * C3485) * C49713 -
             (C117 * C3484 + C50765 * C3490) * C50612) *
                C38228) *
               C50634) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C118 +
            (C117 * C130 + C50765 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C50947 +
           (C5498 * C118 + C5499 * C106 - C475 * C119 - C476 * C107 +
            C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
               C50941 +
           (C6115 * C118 + C6114 * C106 - C977 * C119 - C978 * C107 +
            C979 * C120 + C980 * C108 - C981 * C121 - C982 * C109) *
               C38228) *
              C25653 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50947 +
           (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
            C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
               C50941 +
           (C977 * C118 + C978 * C106 - C979 * C119 - C980 * C107 +
            C981 * C120 + C982 * C108 - (C117 * C948 + C50765 * C957) * C121 -
            (C117 * C958 + C50765 * C963) * C109) *
               C38228) *
              C50634) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C49720 +
             (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
             C172 * C50612) *
                C50947 +
            (C6080 + C6081 - C6082 - C6083) * C50941 + C16300 * C38228) *
               C25653 +
           ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                C50947 +
            (C6084 + C6085 - C6086 - C6087) * C50941 + C16301 * C38228) *
               C50634) *
              C941 +
          (((C6082 - (C6081 + C6080) + C6083) * C50947 +
            (C6092 - (C6120 + C6121) + C6097) * C50941 +
            (C16284 - (C16285 + C16286) + C16287) * C38228) *
               C25653 +
           ((C6086 - (C6085 + C6084) + C6087) * C50947 +
            (C6098 - (C6099 + C6100) + C6101) * C50941 +
            (C16288 - (C16289 + C16290) + C16291) * C38228) *
               C50634) *
              C942 +
          ((C16300 * C50947 + C21531 * C50941 +
            (C21528 + C21527 - C21526 - C21529) * C38228) *
               C25653 +
           (C16301 * C50947 + (C16290 + C16289 - C16288 - C16291) * C50941 +
            (C16298 * C49720 + C16299 * C50884 -
             (C117 * C6395 + C50765 * C6399) * C49713 -
             (C117 * C6398 + C50765 * C6404) * C50612) *
                C38228) *
               C50634) *
              C943) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C50947 +
            (C5904 + C5905) * C50941 + C16452 * C38228) *
               C25653 +
           ((C171 * C696 + C172 * C50607) * C50947 + (C5906 + C5907) * C50941 +
            C16453 * C38228) *
               C50634) *
              C50696 * C692 -
          ((C16462 * C38228 + (C5915 + C5914) * C50941 +
            (C328 * C50607 + C327 * C696) * C50947) *
               C50634 +
           (C16463 * C38228 + (C5931 + C5930) * C50941 +
            ((C117 * C293 + C50765 * C304) * C50607 +
             (C117 * C287 + C50765 * C294) * C696) *
                C50947) *
               C25653) *
              C50696 * C693 +
          ((((C117 * C587 + C50765 * C592) * C696 +
             (C117 * C593 + C50765 * C602) * C50607) *
                C50947 +
            (C5932 + C5933) * C50941 + (C16134 + C16135) * C38228) *
               C25653 +
           ((C620 * C696 + C621 * C50607) * C50947 + (C5922 + C5923) * C50941 +
            (C16130 + C16131) * C38228) *
               C50634) *
              C50696 * C694 -
          ((((C117 * C9203 + C50765 * C9207) * C50607 +
             (C117 * C9201 + C50765 * C9204) * C696) *
                C38228 +
            ((C117 * C3158 + C50765 * C3163) * C50607 +
             (C117 * C3154 + C50765 * C3159) * C696) *
                C50941 +
            ((C117 * C705 + C50765 * C711) * C50607 +
             (C117 * C699 + C50765 * C706) * C696) *
                C50947) *
               C50634 +
           (((C117 * C9205 + C50765 * C9208) * C50607 +
             (C117 * C9202 + C50765 * C9206) * C696) *
                C38228 +
            ((C117 * C3160 + C50765 * C3164) * C50607 +
             (C117 * C3155 + C50765 * C3161) * C696) *
                C50941 +
            ((C117 * C707 + C50765 * C712) * C50607 +
             (C117 * C700 + C50765 * C708) * C696) *
                C50947) *
               C25653) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C283 +
             (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C50947 +
            (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C50941 +
            (C15718 + C15719 - C15720 - C15721 + C15722 + C15723) * C38228) *
               C25653 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50947 +
            (C5486 + C5487 - C5488 - C5489 + C5490 + C5491) * C50941 +
            (C15724 + C15725 - C15726 - C15727 + C15728 + C15729) * C38228) *
               C50634) *
              C50696 * C50899 +
          (((C327 * C284 -
             ((C117 * C293 + C50765 * C304) * C278 +
              (C117 * C287 + C50765 * C294) * C283) +
             C328 * C279 - C329 * C285 - C330 * C280) *
                C50947 +
            (C1540 * C284 - (C5927 * C278 + C5926 * C283) + C1541 * C279 -
             C1542 * C285 - C1543 * C280) *
                C50941 +
            (C6288 * C284 - (C6287 * C278 + C6286 * C283) + C6289 * C279 -
             C6290 * C285 - C6291 * C280) *
                C38228) *
               C25653 +
           ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
             C331 * C285 - C332 * C280) *
                C50947 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50941 +
            (C6290 * C284 - (C6289 * C278 + C6288 * C283) + C6291 * C279 -
             (C117 * C1080 + C50765 * C1085) * C285 -
             (C117 * C1084 + C50765 * C1092) * C280) *
                C38228) *
               C50634) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C50947 +
             (C5904 + C5905) * C50941 + C16452 * C38228) *
                C25653 +
            ((C171 * C696 + C172 * C50607) * C50947 + (C5906 + C5907) * C50941 +
             C16453 * C38228) *
                C50634) *
               C941 -
           ((C16578 * C38228 + (C6270 + C6271) * C50941 +
             (C5907 + C5906) * C50947) *
                C50634 +
            (C16579 * C38228 + (C6272 + C6273) * C50941 +
             (C5905 + C5904) * C50947) *
                C25653) *
               C942 +
           ((C16452 * C50947 + C21630 * C50941 + (C16588 + C16589) * C38228) *
                C25653 +
            (C16453 * C50947 + (C6412 + C6413) * C50941 +
             (C16584 + C16585) * C38228) *
                C50634) *
               C943) *
              C50899 +
          ((((C5930 + C5931) * C50947 + (C6292 + C6293) * C50941 +
             (C16468 + C16469) * C38228) *
                C25653 +
            ((C5914 + C5915) * C50947 + (C6294 + C6295) * C50941 +
             (C16470 + C16471) * C38228) *
                C50634) *
               C942 -
           ((C16462 * C38228 + (C5915 + C5914) * C50941 +
             (C328 * C50607 + C327 * C696) * C50947) *
                C50634 +
            (C16463 * C38228 + (C5931 + C5930) * C50941 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C50947) *
                C25653) *
               C941 -
           ((((C117 * C16448 + C50765 * C16450) * C50607 +
              (C117 * C16447 + C50765 * C16449) * C696) *
                 C38228 +
             (C16471 + C16470) * C50941 + C16462 * C50947) *
                C50634 +
            ((C21639 + C21638) * C38228 + C21635 * C50941 + C16463 * C50947) *
                C25653) *
               C943) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C50947 +
             (C5904 + C5905) * C50941 + C16452 * C38228) *
                C25653 +
            ((C171 * C696 + C172 * C50607) * C50947 + (C5906 + C5907) * C50941 +
             C16453 * C38228) *
                C50634) *
               C50900 -
           ((C16578 * C38228 + (C6270 + C6271) * C50941 +
             (C5907 + C5906) * C50947) *
                C50634 +
            (C16579 * C38228 + (C6272 + C6273) * C50941 +
             (C5905 + C5904) * C50947) *
                C25653) *
               C50708) *
              C582 +
          ((((C5930 + C5931) * C50947 + (C6292 + C6293) * C50941 +
             (C16468 + C16469) * C38228) *
                C25653 +
            ((C5914 + C5915) * C50947 + (C6294 + C6295) * C50941 +
             (C16470 + C16471) * C38228) *
                C50634) *
               C50708 -
           ((C16462 * C38228 + (C5915 + C5914) * C50941 +
             (C328 * C50607 + C327 * C696) * C50947) *
                C50634 +
            (C16463 * C38228 + (C5931 + C5930) * C50941 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C50947) *
                C25653) *
               C50900) *
              C583 +
          (((((C117 * C587 + C50765 * C592) * C696 +
              (C117 * C593 + C50765 * C602) * C50607) *
                 C50947 +
             (C5932 + C5933) * C50941 + (C16134 + C16135) * C38228) *
                C25653 +
            ((C620 * C696 + C621 * C50607) * C50947 + (C5922 + C5923) * C50941 +
             (C16130 + C16131) * C38228) *
                C50634) *
               C50900 -
           ((((C117 * C9309 + C50765 * C9313) * C50607 +
              (C117 * C9307 + C50765 * C9310) * C696) *
                 C38228 +
             (C16131 + C16130) * C50941 + (C5923 + C5922) * C50947) *
                C50634 +
            ((C21426 + C21425) * C38228 + (C16135 + C16134) * C50941 +
             (C5933 + C5932) * C50947) *
                C25653) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C283 +
             (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C50947 +
            (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C50941 +
            (C15718 + C15719 - C15720 - C15721 + C15722 + C15723) * C38228) *
               C25653 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50947 +
            (C5486 + C5487 - C5488 - C5489 + C5490 + C5491) * C50941 +
            (C15724 + C15725 - C15726 - C15727 + C15728 + C15729) * C38228) *
               C50634) *
              C50900 +
          (((C5482 - (C5501 + C5500) + C5483 - C5484 - C5485) * C50947 +
            (C15720 - (C15719 + C15718) + C15721 - C15722 - C15723) * C50941 +
            (C21153 - (C21152 + C21151) + C21154 - C21155 - C21156) * C38228) *
               C25653 +
           ((C5488 - (C5487 + C5486) + C5489 - C5490 - C5491) * C50947 +
            (C15726 - (C15725 + C15724) + C15727 - C15728 - C15729) * C50941 +
            (C6118 * C284 - (C6117 * C278 + C6116 * C283) + C6119 * C279 -
             (C117 * C1166 + C50765 * C1171) * C285 -
             (C117 * C1170 + C50765 * C1178) * C280) *
                C38228) *
               C50634) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C50947 +
            (C5904 + C5905) * C50941 + C16452 * C38228) *
               C25653 +
           ((C171 * C696 + C172 * C50607) * C50947 + (C5906 + C5907) * C50941 +
            C16453 * C38228) *
               C50634) *
              C1162 -
          ((C16578 * C38228 + (C6270 + C6271) * C50941 +
            (C5907 + C5906) * C50947) *
               C50634 +
           (C16579 * C38228 + (C6272 + C6273) * C50941 +
            (C5905 + C5904) * C50947) *
               C25653) *
              C1163 +
          ((C16452 * C50947 + C21630 * C50941 + (C16588 + C16589) * C38228) *
               C25653 +
           (C16453 * C50947 + (C6412 + C6413) * C50941 +
            (C16584 + C16585) * C38228) *
               C50634) *
              C1164 -
          ((((C117 * C16571 + C50765 * C16575) * C50607 +
             (C117 * C16569 + C50765 * C16572) * C696) *
                C38228 +
            (C16585 + C16584) * C50941 + C16578 * C50947) *
               C50634 +
           ((C21718 + C21717) * C38228 + C21710 * C50941 + C16579 * C50947) *
               C25653) *
              C1165) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1285 +
             (C117 * C130 + C50765 * C143) * C50942 - C171 * C1286 -
             C172 * C50926 + C173 * C1287 + C174 * C1282) *
                C50947 +
            (C7076 + C7077 - C7078 - C7079 + C7080 + C7081) * C50941 +
            (C17230 + C17231 - C17232 - C17233 + C17234 + C17235) * C38228) *
               C25653 +
           ((C171 * C1285 + C172 * C50942 - C173 * C1286 - C174 * C50926 +
             C175 * C1287 + C176 * C1282) *
                C50947 +
            (C7082 + C7083 - C7084 - C7085 + C7086 + C7087) * C50941 +
            (C17236 + C17237 - C17238 - C17239 + C17240 + C17241) * C38228) *
               C50634) *
              C1643 +
          (((C7078 - (C7077 + C7076) + C7079 - C7080 - C7081) * C50947 +
            (C17232 - (C17231 + C17230) + C17233 - C17234 - C17235) * C50941 +
            (C22149 - (C22148 + C22147) + C22150 - C22151 - C22152) * C38228) *
               C25653 +
           ((C7084 - (C7083 + C7082) + C7085 - C7086 - C7087) * C50947 +
            (C17238 - (C17237 + C17236) + C17239 - C17240 - C17241) * C50941 +
            (C6118 * C1286 - (C6117 * C50942 + C6116 * C1285) + C6119 * C50926 -
             (C117 * C1166 + C50765 * C1171) * C1287 -
             (C117 * C1170 + C50765 * C1178) * C1282) *
                C38228) *
               C50634) *
              C50708) *
         C50670) /
        (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C1391 +
              (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
              C172 * C50612) *
                 C50947 +
             (C6906 + C6907 - C6908 - C6909) * C50941 + C17594 * C38228) *
                C25653 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                 C50947 +
             (C6910 + C6911 - C6912 - C6913) * C50941 + C17595 * C38228) *
                C50634) *
               C1643 +
           (((C6908 - (C6907 + C6906) + C6909) * C50947 +
             (C7434 - (C7435 + C7436) + C7437) * C50941 +
             (C17584 - (C17585 + C17586) + C17587) * C38228) *
                C25653 +
            ((C6912 - (C6911 + C6910) + C6913) * C50947 +
             (C7438 - (C7439 + C7440) + C7441) * C50941 +
             (C17588 - (C17589 + C17590) + C17591) * C38228) *
                C50634) *
               C50708) *
              C50899 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50765 * C304) * C1386 +
               (C117 * C287 + C50765 * C294) * C1391) +
              C328 * C50612) *
                 C50947 +
             (C6918 - (C6919 + C6920) + C6921) * C50941 +
             (C17076 - (C17077 + C17078) + C17079) * C38228) *
                C25653 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                 C50947 +
             (C6922 - (C6923 + C6924) + C6925) * C50941 +
             (C17080 - (C17081 + C17082) + C17083) * C38228) *
                C50634) *
               C1643 +
           (((C6920 + C6919 - C6918 - C6921) * C50947 +
             (C17078 + C17077 - C17076 - C17079) * C50941 +
             (C22047 + C22046 - C22045 - C22048) * C38228) *
                C25653 +
            ((C6924 + C6923 - C6922 - C6925) * C50947 +
             (C17082 + C17081 - C17080 - C17083) * C50941 +
             (C16466 * C1391 + C16467 * C1386 -
              (C117 * C3591 + C50765 * C3595) * C1392 -
              (C117 * C3594 + C50765 * C3600) * C50612) *
                 C38228) *
                C50634) *
               C50708) *
              C50684)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1391 +
             (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
             C172 * C50612) *
                C50947 +
            (C6906 + C6907 - C6908 - C6909) * C50941 + C17594 * C38228) *
               C25653 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                C50947 +
            (C6910 + C6911 - C6912 - C6913) * C50941 + C17595 * C38228) *
               C50634) *
              C50945 +
          (((C6908 - (C6907 + C6906) + C6909) * C50947 +
            (C7434 - (C7435 + C7436) + C7437) * C50941 +
            (C17584 - (C17585 + C17586) + C17587) * C38228) *
               C25653 +
           ((C6912 - (C6911 + C6910) + C6913) * C50947 +
            (C7438 - (C7439 + C7440) + C7441) * C50941 +
            (C17588 - (C17589 + C17590) + C17591) * C38228) *
               C50634) *
              C50935 +
          ((C17594 * C50947 + C22387 * C50941 +
            (C22384 + C22383 - C22382 - C22385) * C38228) *
               C25653 +
           (C17595 * C50947 + (C17590 + C17589 - C17588 - C17591) * C50941 +
            (C16298 * C1391 + C16299 * C1386 -
             (C117 * C6395 + C50765 * C6399) * C1392 -
             (C117 * C6398 + C50765 * C6404) * C50612) *
                C38228) *
               C50634) *
              C1875) *
         C50670) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C118 +
            (C117 * C130 + C50765 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C50947 +
           (C5498 * C118 + C5499 * C106 - C475 * C119 - C476 * C107 +
            C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
               C50941 +
           (C6115 * C118 + C6114 * C106 - C977 * C119 - C978 * C107 +
            C979 * C120 + C980 * C108 - C981 * C121 - C982 * C109) *
               C38228) *
              C25653 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50947 +
           (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
            C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
               C50941 +
           (C977 * C118 + C978 * C106 - C979 * C119 - C980 * C107 +
            C981 * C120 + C982 * C108 - (C117 * C948 + C50765 * C957) * C121 -
            (C117 * C958 + C50765 * C963) * C109) *
               C38228) *
              C50634) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C49720 +
             (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
             C172 * C50612) *
                C50947 +
            (C6080 + C6081 - C6082 - C6083) * C50941 + C16300 * C38228) *
               C25653 +
           ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                C50947 +
            (C6084 + C6085 - C6086 - C6087) * C50941 + C16301 * C38228) *
               C50634) *
              C50696 * C582 +
          (((C327 * C49713 -
             ((C117 * C293 + C50765 * C304) * C50884 +
              (C117 * C287 + C50765 * C294) * C49720) +
             C328 * C50612) *
                C50947 +
            (C7640 - (C7641 + C7642) + C7643) * C50941 +
            (C17790 - (C17791 + C17792) + C17793) * C38228) *
               C25653 +
           ((C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
                C50947 +
            (C7644 - (C7645 + C7646) + C7647) * C50941 +
            (C17794 - (C17795 + C17796) + C17797) * C38228) *
               C50634) *
              C50696 * C583 +
          ((((C117 * C587 + C50765 * C592) * C49720 +
             (C117 * C593 + C50765 * C602) * C50884 - C620 * C49713 -
             C621 * C50612) *
                C50947 +
            (C5928 * C49720 + C5929 * C50884 - C5656 * C49713 -
             C5657 * C50612) *
                C50941 +
            (C16132 * C49720 + C16133 * C50884 - C15880 * C49713 -
             C15881 * C50612) *
                C38228) *
               C25653 +
           ((C620 * C49720 + C621 * C50884 - C622 * C49713 - C623 * C50612) *
                C50947 +
            (C5656 * C49720 + C5657 * C50884 - C5658 * C49713 -
             C5659 * C50612) *
                C50941 +
            (C15880 * C49720 + C15881 * C50884 -
             (C117 * C3481 + C50765 * C3485) * C49713 -
             (C117 * C3484 + C50765 * C3490) * C50612) *
                C38228) *
               C50634) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C283 +
             (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C50947 +
            (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C50941 +
            (C15718 + C15719 - C15720 - C15721 + C15722 + C15723) * C38228) *
               C25653 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50947 +
            (C5486 + C5487 - C5488 - C5489 + C5490 + C5491) * C50941 +
            (C15724 + C15725 - C15726 - C15727 + C15728 + C15729) * C38228) *
               C50634) *
              C50696 * C50899 +
          (((C327 * C284 -
             ((C117 * C293 + C50765 * C304) * C278 +
              (C117 * C287 + C50765 * C294) * C283) +
             C328 * C279 - C329 * C285 - C330 * C280) *
                C50947 +
            (C1540 * C284 - (C5927 * C278 + C5926 * C283) + C1541 * C279 -
             C1542 * C285 - C1543 * C280) *
                C50941 +
            (C6288 * C284 - (C6287 * C278 + C6286 * C283) + C6289 * C279 -
             C6290 * C285 - C6291 * C280) *
                C38228) *
               C25653 +
           ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
             C331 * C285 - C332 * C280) *
                C50947 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50941 +
            (C6290 * C284 - (C6289 * C278 + C6288 * C283) + C6291 * C279 -
             (C117 * C1080 + C50765 * C1085) * C285 -
             (C117 * C1084 + C50765 * C1092) * C280) *
                C38228) *
               C50634) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C50947 +
            (C5904 + C5905) * C50941 + C16452 * C38228) *
               C25653 +
           ((C171 * C696 + C172 * C50607) * C50947 + (C5906 + C5907) * C50941 +
            C16453 * C38228) *
               C50634) *
              C50696 * C692 -
          ((C16462 * C38228 + (C5915 + C5914) * C50941 +
            (C328 * C50607 + C327 * C696) * C50947) *
               C50634 +
           (C16463 * C38228 + (C5931 + C5930) * C50941 +
            ((C117 * C293 + C50765 * C304) * C50607 +
             (C117 * C287 + C50765 * C294) * C696) *
                C50947) *
               C25653) *
              C50696 * C693 +
          ((((C117 * C587 + C50765 * C592) * C696 +
             (C117 * C593 + C50765 * C602) * C50607) *
                C50947 +
            (C5932 + C5933) * C50941 + (C16134 + C16135) * C38228) *
               C25653 +
           ((C620 * C696 + C621 * C50607) * C50947 + (C5922 + C5923) * C50941 +
            (C16130 + C16131) * C38228) *
               C50634) *
              C50696 * C694 -
          ((((C117 * C9203 + C50765 * C9207) * C50607 +
             (C117 * C9201 + C50765 * C9204) * C696) *
                C38228 +
            ((C117 * C3158 + C50765 * C3163) * C50607 +
             (C117 * C3154 + C50765 * C3159) * C696) *
                C50941 +
            ((C117 * C705 + C50765 * C711) * C50607 +
             (C117 * C699 + C50765 * C706) * C696) *
                C50947) *
               C50634 +
           (((C117 * C9205 + C50765 * C9208) * C50607 +
             (C117 * C9202 + C50765 * C9206) * C696) *
                C38228 +
            ((C117 * C3160 + C50765 * C3164) * C50607 +
             (C117 * C3155 + C50765 * C3161) * C696) *
                C50941 +
            ((C117 * C707 + C50765 * C712) * C50607 +
             (C117 * C700 + C50765 * C708) * C696) *
                C50947) *
               C25653) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C283 +
             (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C50947 +
            (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C50941 +
            (C15718 + C15719 - C15720 - C15721 + C15722 + C15723) * C38228) *
               C25653 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50947 +
            (C5486 + C5487 - C5488 - C5489 + C5490 + C5491) * C50941 +
            (C15724 + C15725 - C15726 - C15727 + C15728 + C15729) * C38228) *
               C50634) *
              C50900 +
          (((C5482 - (C5501 + C5500) + C5483 - C5484 - C5485) * C50947 +
            (C15720 - (C15719 + C15718) + C15721 - C15722 - C15723) * C50941 +
            (C21153 - (C21152 + C21151) + C21154 - C21155 - C21156) * C38228) *
               C25653 +
           ((C5488 - (C5487 + C5486) + C5489 - C5490 - C5491) * C50947 +
            (C15726 - (C15725 + C15724) + C15727 - C15728 - C15729) * C50941 +
            (C6118 * C284 - (C6117 * C278 + C6116 * C283) + C6119 * C279 -
             (C117 * C1166 + C50765 * C1171) * C285 -
             (C117 * C1170 + C50765 * C1178) * C280) *
                C38228) *
               C50634) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C50947 +
             (C5904 + C5905) * C50941 + C16452 * C38228) *
                C25653 +
            ((C171 * C696 + C172 * C50607) * C50947 + (C5906 + C5907) * C50941 +
             C16453 * C38228) *
                C50634) *
               C50900 -
           ((C16578 * C38228 + (C6270 + C6271) * C50941 +
             (C5907 + C5906) * C50947) *
                C50634 +
            (C16579 * C38228 + (C6272 + C6273) * C50941 +
             (C5905 + C5904) * C50947) *
                C25653) *
               C50708) *
              C582 +
          ((((C5930 + C5931) * C50947 + (C6292 + C6293) * C50941 +
             (C16468 + C16469) * C38228) *
                C25653 +
            ((C5914 + C5915) * C50947 + (C6294 + C6295) * C50941 +
             (C16470 + C16471) * C38228) *
                C50634) *
               C50708 -
           ((C16462 * C38228 + (C5915 + C5914) * C50941 +
             (C328 * C50607 + C327 * C696) * C50947) *
                C50634 +
            (C16463 * C38228 + (C5931 + C5930) * C50941 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C50947) *
                C25653) *
               C50900) *
              C583 +
          (((((C117 * C587 + C50765 * C592) * C696 +
              (C117 * C593 + C50765 * C602) * C50607) *
                 C50947 +
             (C5932 + C5933) * C50941 + (C16134 + C16135) * C38228) *
                C25653 +
            ((C620 * C696 + C621 * C50607) * C50947 + (C5922 + C5923) * C50941 +
             (C16130 + C16131) * C38228) *
                C50634) *
               C50900 -
           ((((C117 * C9309 + C50765 * C9313) * C50607 +
              (C117 * C9307 + C50765 * C9310) * C696) *
                 C38228 +
             (C16131 + C16130) * C50941 + (C5923 + C5922) * C50947) *
                C50634 +
            ((C21426 + C21425) * C38228 + (C16135 + C16134) * C50941 +
             (C5933 + C5932) * C50947) *
                C25653) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C1285 +
            (C117 * C130 + C50765 * C143) * C50942 - C171 * C1286 -
            C172 * C50926 + C173 * C1287 + C174 * C1282) *
               C50795 * C111 +
           (C171 * C1285 + C172 * C50942 - C173 * C1286 - C174 * C50926 +
            C175 * C1287 + C176 * C1282) *
               C50795 * C112 +
           (C173 * C1285 + C174 * C50942 - C175 * C1286 - C176 * C50926 +
            C177 * C1287 + C178 * C1282) *
               C50795 * C113 +
           (C175 * C1285 + C176 * C50942 - C177 * C1286 - C178 * C50926 +
            C179 * C1287 + C180 * C1282) *
               C50795 * C114) *
              C50696 * C1283 +
          ((C327 * C1286 -
            ((C117 * C293 + C50765 * C304) * C50942 +
             (C117 * C287 + C50765 * C294) * C1285) +
            C328 * C50926 - C329 * C1287 - C330 * C1282) *
               C50795 * C111 +
           (C329 * C1286 - (C328 * C50942 + C327 * C1285) + C330 * C50926 -
            C331 * C1287 - C332 * C1282) *
               C50795 * C112 +
           (C331 * C1286 - (C330 * C50942 + C329 * C1285) + C332 * C50926 -
            C333 * C1287 - C334 * C1282) *
               C50795 * C113 +
           (C333 * C1286 - (C332 * C50942 + C331 * C1285) + C334 * C50926 -
            (C117 * C291 + C50765 * C302) * C1287 -
            (C117 * C303 + C50765 * C309) * C1282) *
               C50795 * C114) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C1285 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50942 -
            (C8086 + C8087 + C8088) * C1286 - (C8089 + C8090 + C8091) * C50926 +
            (C8092 + C8093 + C8094) * C1287 + (C8095 + C8096 + C8097) * C1282) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C1285 + (C8091 + C8090 + C8089) * C50942 -
            (C8094 + C8093 + C8092) * C1286 - (C8097 + C8096 + C8095) * C50926 +
            (C8100 + C8099 + C8098) * C1287 + (C8103 + C8102 + C8101) * C1282) *
               C50795 * C50634) *
              C50696 * C1283 +
          (((C8274 + C8275 + C8276) * C1286 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50942 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C1285) +
            (C8277 + C8278 + C8279) * C50926 - (C8280 + C8281 + C8282) * C1287 -
            (C8283 + C8284 + C8285) * C1282) *
               C50795 * C50891 +
           ((C8282 + C8281 + C8280) * C1286 -
            ((C8279 + C8278 + C8277) * C50942 +
             (C8276 + C8275 + C8274) * C1285) +
            (C8285 + C8284 + C8283) * C50926 -
            (C8048 * C697 + C8043 * C702 + C8047 * C590 + C8042 * C598 +
             C8046 * C289 + C8041 * C298) *
                C1287 -
            (C8048 * C701 + C8043 * C709 + C8047 * C599 + C8042 * C605 +
             C8046 * C299 + C8041 * C307) *
                C1282) *
               C50795 * C50634) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C1391 +
            (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
            C172 * C50612) *
               C50795 * C111 +
           (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
               C50795 * C112 +
           (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
               C50795 * C113 +
           (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50612) *
               C50795 * C114) *
              C50696 * C50944 +
          ((C327 * C1392 -
            ((C117 * C293 + C50765 * C304) * C1386 +
             (C117 * C287 + C50765 * C294) * C1391) +
            C328 * C50612) *
               C50795 * C111 +
           (C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
               C50795 * C112 +
           (C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50612) *
               C50795 * C113 +
           (C333 * C1392 - (C332 * C1386 + C331 * C1391) + C334 * C50612) *
               C50795 * C114) *
              C50696 * C50932 +
          (((C117 * C587 + C50765 * C592) * C1391 +
            (C117 * C593 + C50765 * C602) * C1386 - C620 * C1392 -
            C621 * C50612) *
               C50795 * C111 +
           (C620 * C1391 + C621 * C1386 - C622 * C1392 - C623 * C50612) *
               C50795 * C112 +
           (C622 * C1391 + C623 * C1386 - C624 * C1392 - C625 * C50612) *
               C50795 * C113 +
           (C624 * C1391 + C625 * C1386 -
            (C117 * C591 + C50765 * C600) * C1392 -
            (C117 * C601 + C50765 * C606) * C50612) *
               C50795 * C114) *
              C50696 * C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C1391 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C1386 -
            (C8086 + C8087 + C8088) * C1392 -
            (C8089 + C8090 + C8091) * C50612) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C1391 + (C8091 + C8090 + C8089) * C1386 -
            (C8094 + C8093 + C8092) * C1392 -
            (C8097 + C8096 + C8095) * C50612) *
               C50795 * C50634) *
              C50696 * C50944 +
          (((C8274 + C8275 + C8276) * C1392 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C1386 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C1391) +
            (C8277 + C8278 + C8279) * C50612) *
               C50795 * C50891 +
           ((C8282 + C8281 + C8280) * C1392 -
            ((C8279 + C8278 + C8277) * C1386 +
             (C8276 + C8275 + C8274) * C1391) +
            (C8285 + C8284 + C8283) * C50612) *
               C50795 * C50634) *
              C50696 * C50932 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C1391 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C1386 -
            (C8626 + C8627 + C8628) * C1392 -
            (C8629 + C8630 + C8631) * C50612) *
               C50795 * C50891 +
           ((C8628 + C8627 + C8626) * C1391 + (C8631 + C8630 + C8629) * C1386 -
            (C8048 * C2995 + C8043 * C2999 + C8047 * C698 + C8042 * C704 +
             C8046 * C589 + C8041 * C596) *
                C1392 -
            (C8048 * C2998 + C8043 * C3004 + C8047 * C703 + C8042 * C710 +
             C8046 * C597 + C8041 * C604) *
                C50612) *
               C50795 * C50634) *
              C50696 * C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1391 +
             (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
             C172 * C50612) *
                C50795 * C111 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                C50795 * C112 +
            (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
                C50795 * C113 +
            (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50612) *
                C50795 * C114) *
               C50900 +
           ((C475 * C1392 -
             ((C117 * C441 + C50765 * C452) * C1386 +
              (C117 * C435 + C50765 * C442) * C1391) +
             C476 * C50612) *
                C50795 * C111 +
            (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50612) *
                C50795 * C112 +
            (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50612) *
                C50795 * C113 +
            (C481 * C1392 - (C480 * C1386 + C479 * C1391) + C482 * C50612) *
                C50795 * C114) *
               C50708) *
              C1283 +
          (((C327 * C1392 -
             ((C117 * C293 + C50765 * C304) * C1386 +
              (C117 * C287 + C50765 * C294) * C1391) +
             C328 * C50612) *
                C50795 * C111 +
            (C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                C50795 * C112 +
            (C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50612) *
                C50795 * C113 +
            (C333 * C1392 - (C332 * C1386 + C331 * C1391) + C334 * C50612) *
                C50795 * C114) *
               C50900 +
           (((C117 * C811 + C50765 * C819) * C1391 +
             (C117 * C820 + C50765 * C835) * C1386 - C1540 * C1392 -
             C1541 * C50612) *
                C50795 * C111 +
            (C1540 * C1391 + C1541 * C1386 - C1542 * C1392 - C1543 * C50612) *
                C50795 * C112 +
            (C1542 * C1391 + C1543 * C1386 - C1544 * C1392 - C1545 * C50612) *
                C50795 * C113 +
            (C1544 * C1391 + C1545 * C1386 -
             (C117 * C1523 + C50765 * C1524) * C1392 -
             (C117 * C1525 + C50765 * C1526) * C50612) *
                C50795 * C114) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C1391 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C1386 -
             (C8086 + C8087 + C8088) * C1392 -
             (C8089 + C8090 + C8091) * C50612) *
                C50795 * C50891 +
            ((C8088 + C8087 + C8086) * C1391 + (C8091 + C8090 + C8089) * C1386 -
             (C8094 + C8093 + C8092) * C1392 -
             (C8097 + C8096 + C8095) * C50612) *
                C50795 * C50634) *
               C50900 +
           (((C8456 + C8457 + C8458) * C1392 -
             ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
               C8046 * C441 + C8041 * C452) *
                  C1386 +
              (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
               C8046 * C435 + C8041 * C442) *
                  C1391) +
             (C8459 + C8460 + C8461) * C50612) *
                C50795 * C50891 +
            ((C8464 + C8463 + C8462) * C1392 -
             ((C8461 + C8460 + C8459) * C1386 +
              (C8458 + C8457 + C8456) * C1391) +
             (C8467 + C8466 + C8465) * C50612) *
                C50795 * C50634) *
               C50708) *
              C1283 +
          ((((C8274 + C8275 + C8276) * C1392 -
             ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
               C8046 * C293 + C8041 * C304) *
                  C1386 +
              (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
               C8046 * C287 + C8041 * C294) *
                  C1391) +
             (C8277 + C8278 + C8279) * C50612) *
                C50795 * C50891 +
            ((C8282 + C8281 + C8280) * C1392 -
             ((C8279 + C8278 + C8277) * C1386 +
              (C8276 + C8275 + C8274) * C1391) +
             (C8285 + C8284 + C8283) * C50612) *
                C50795 * C50634) *
               C50900 +
           (((C8046 * C811 + C8041 * C819 + C8047 * C818 + C8042 * C834 +
              C8048 * C3155 + C8043 * C3161) *
                 C1391 +
             (C8046 * C820 + C8041 * C835 + C8047 * C833 + C8042 * C842 +
              C8048 * C3160 + C8043 * C3164) *
                 C1386 -
             (C9814 + C9815 + C9816) * C1392 -
             (C9817 + C9818 + C9819) * C50612) *
                C50795 * C50891 +
            ((C9816 + C9815 + C9814) * C1391 + (C9819 + C9818 + C9817) * C1386 -
             (C8048 * C3153 + C8043 * C3157 + C8047 * C816 + C8042 * C830 +
              C8046 * C813 + C8041 * C823) *
                 C1392 -
             (C8048 * C3156 + C8043 * C3162 + C8047 * C829 + C8042 * C840 +
              C8046 * C824 + C8041 * C837) *
                 C50612) *
                C50795 * C50634) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C49720 +
             (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
             C172 * C50612) *
                C50795 * C111 +
            (C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                C50795 * C112 +
            (C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
                C50795 * C113 +
            (C175 * C49720 + C176 * C50884 - C177 * C49713 - C178 * C50612) *
                C50795 * C114) *
               C1643 +
           ((C475 * C49713 -
             ((C117 * C441 + C50765 * C452) * C50884 +
              (C117 * C435 + C50765 * C442) * C49720) +
             C476 * C50612) *
                C50795 * C111 +
            (C477 * C49713 - (C476 * C50884 + C475 * C49720) + C478 * C50612) *
                C50795 * C112 +
            (C479 * C49713 - (C478 * C50884 + C477 * C49720) + C480 * C50612) *
                C50795 * C113 +
            (C481 * C49713 - (C480 * C50884 + C479 * C49720) + C482 * C50612) *
                C50795 * C114) *
               C50708) *
              C1283 +
          (((C327 * C49713 -
             ((C117 * C293 + C50765 * C304) * C50884 +
              (C117 * C287 + C50765 * C294) * C49720) +
             C328 * C50612) *
                C50795 * C111 +
            (C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
                C50795 * C112 +
            (C331 * C49713 - (C330 * C50884 + C329 * C49720) + C332 * C50612) *
                C50795 * C113 +
            (C333 * C49713 - (C332 * C50884 + C331 * C49720) + C334 * C50612) *
                C50795 * C114) *
               C1643 +
           (((C117 * C811 + C50765 * C819) * C49720 +
             (C117 * C820 + C50765 * C835) * C50884 - C1540 * C49713 -
             C1541 * C50612) *
                C50795 * C111 +
            (C1540 * C49720 + C1541 * C50884 - C1542 * C49713 -
             C1543 * C50612) *
                C50795 * C112 +
            (C1542 * C49720 + C1543 * C50884 - C1544 * C49713 -
             C1545 * C50612) *
                C50795 * C113 +
            (C1544 * C49720 + C1545 * C50884 -
             (C117 * C1523 + C50765 * C1524) * C49713 -
             (C117 * C1525 + C50765 * C1526) * C50612) *
                C50795 * C114) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C49720 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50884 -
             (C8086 + C8087 + C8088) * C49713 -
             (C8089 + C8090 + C8091) * C50612) *
                C50795 * C50891 +
            ((C8088 + C8087 + C8086) * C49720 +
             (C8091 + C8090 + C8089) * C50884 -
             (C8094 + C8093 + C8092) * C49713 -
             (C8097 + C8096 + C8095) * C50612) *
                C50795 * C50634) *
               C1643 +
           (((C8456 + C8457 + C8458) * C49713 -
             ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
               C8046 * C441 + C8041 * C452) *
                  C50884 +
              (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
               C8046 * C435 + C8041 * C442) *
                  C49720) +
             (C8459 + C8460 + C8461) * C50612) *
                C50795 * C50891 +
            ((C8464 + C8463 + C8462) * C49713 -
             ((C8461 + C8460 + C8459) * C50884 +
              (C8458 + C8457 + C8456) * C49720) +
             (C8467 + C8466 + C8465) * C50612) *
                C50795 * C50634) *
               C50708) *
              C1283 +
          ((((C8274 + C8275 + C8276) * C49713 -
             ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
               C8046 * C293 + C8041 * C304) *
                  C50884 +
              (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
               C8046 * C287 + C8041 * C294) *
                  C49720) +
             (C8277 + C8278 + C8279) * C50612) *
                C50795 * C50891 +
            ((C8282 + C8281 + C8280) * C49713 -
             ((C8279 + C8278 + C8277) * C50884 +
              (C8276 + C8275 + C8274) * C49720) +
             (C8285 + C8284 + C8283) * C50612) *
                C50795 * C50634) *
               C1643 +
           (((C8046 * C811 + C8041 * C819 + C8047 * C818 + C8042 * C834 +
              C8048 * C3155 + C8043 * C3161) *
                 C49720 +
             (C8046 * C820 + C8041 * C835 + C8047 * C833 + C8042 * C842 +
              C8048 * C3160 + C8043 * C3164) *
                 C50884 -
             (C9814 + C9815 + C9816) * C49713 -
             (C9817 + C9818 + C9819) * C50612) *
                C50795 * C50891 +
            ((C9816 + C9815 + C9814) * C49720 +
             (C9819 + C9818 + C9817) * C50884 -
             (C8048 * C3153 + C8043 * C3157 + C8047 * C816 + C8042 * C830 +
              C8046 * C813 + C8041 * C823) *
                 C49713 -
             (C8048 * C3156 + C8043 * C3162 + C8047 * C829 + C8042 * C840 +
              C8046 * C824 + C8041 * C837) *
                 C50612) *
                C50795 * C50634) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C117 * C122 + C50765 * C129) * C696 +
                      (C117 * C130 + C50765 * C143) * C50607) *
                         C50795 * C111 +
                     (C171 * C696 + C172 * C50607) * C50795 * C112 +
                     (C173 * C696 + C174 * C50607) * C50795 * C113 +
                     (C175 * C696 + C176 * C50607) * C50795 * C114) *
                        C1643 -
                    ((C480 * C50607 + C479 * C696) * C50795 * C114 +
                     (C478 * C50607 + C477 * C696) * C50795 * C113 +
                     (C476 * C50607 + C475 * C696) * C50795 * C112 +
                     ((C117 * C441 + C50765 * C452) * C50607 +
                      (C117 * C435 + C50765 * C442) * C696) *
                         C50795 * C111) *
                        C50708) *
                       C50944 +
                   ((((C117 * C811 + C50765 * C819) * C696 +
                      (C117 * C820 + C50765 * C835) * C50607) *
                         C50795 * C111 +
                     (C1540 * C696 + C1541 * C50607) * C50795 * C112 +
                     (C1542 * C696 + C1543 * C50607) * C50795 * C113 +
                     (C1544 * C696 + C1545 * C50607) * C50795 * C114) *
                        C50708 -
                    ((C332 * C50607 + C331 * C696) * C50795 * C114 +
                     (C330 * C50607 + C329 * C696) * C50795 * C113 +
                     (C328 * C50607 + C327 * C696) * C50795 * C112 +
                     ((C117 * C293 + C50765 * C304) * C50607 +
                      (C117 * C287 + C50765 * C294) * C696) *
                         C50795 * C111) *
                        C1643) *
                       C50932 +
                   ((((C117 * C587 + C50765 * C592) * C696 +
                      (C117 * C593 + C50765 * C602) * C50607) *
                         C50795 * C111 +
                     (C620 * C696 + C621 * C50607) * C50795 * C112 +
                     (C622 * C696 + C623 * C50607) * C50795 * C113 +
                     (C624 * C696 + C625 * C50607) * C50795 * C114) *
                        C1643 -
                    (((C117 * C827 + C50765 * C839) * C50607 +
                      (C117 * C815 + C50765 * C828) * C696) *
                         C50795 * C114 +
                     ((C117 * C829 + C50765 * C840) * C50607 +
                      (C117 * C816 + C50765 * C830) * C696) *
                         C50795 * C113 +
                     ((C117 * C831 + C50765 * C841) * C50607 +
                      (C117 * C817 + C50765 * C832) * C696) *
                         C50795 * C112 +
                     ((C117 * C833 + C50765 * C842) * C50607 +
                      (C117 * C818 + C50765 * C834) * C696) *
                         C50795 * C111) *
                        C50708) *
                       C1390)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C8046 * C122 + C8041 * C129 + C8047 * C287 +
                       C8042 * C294 + C8048 * C587 + C8043 * C592) *
                          C696 +
                      (C8046 * C130 + C8041 * C143 + C8047 * C293 +
                       C8042 * C304 + C8048 * C593 + C8043 * C602) *
                          C50607) *
                         C50795 * C50891 +
                     ((C8088 + C8087 + C8086) * C696 +
                      (C8091 + C8090 + C8089) * C50607) *
                         C50795 * C50634) *
                        C1643 -
                    (((C8461 + C8460 + C8459) * C50607 +
                      (C8458 + C8457 + C8456) * C696) *
                         C50795 * C50634 +
                     ((C8048 * C833 + C8043 * C842 + C8047 * C820 +
                       C8042 * C835 + C8046 * C441 + C8041 * C452) *
                          C50607 +
                      (C8048 * C818 + C8043 * C834 + C8047 * C811 +
                       C8042 * C819 + C8046 * C435 + C8041 * C442) *
                          C696) *
                         C50795 * C50891) *
                        C50708) *
                       C50944 +
                   ((((C8046 * C811 + C8041 * C819 + C8047 * C818 +
                       C8042 * C834 + C8048 * C3155 + C8043 * C3161) *
                          C696 +
                      (C8046 * C820 + C8041 * C835 + C8047 * C833 +
                       C8042 * C842 + C8048 * C3160 + C8043 * C3164) *
                          C50607) *
                         C50795 * C50891 +
                     ((C9816 + C9815 + C9814) * C696 +
                      (C9819 + C9818 + C9817) * C50607) *
                         C50795 * C50634) *
                        C50708 -
                    (((C8279 + C8278 + C8277) * C50607 +
                      (C8276 + C8275 + C8274) * C696) *
                         C50795 * C50634 +
                     ((C8048 * C707 + C8043 * C712 + C8047 * C593 +
                       C8042 * C602 + C8046 * C293 + C8041 * C304) *
                          C50607 +
                      (C8048 * C700 + C8043 * C708 + C8047 * C587 +
                       C8042 * C592 + C8046 * C287 + C8041 * C294) *
                          C696) *
                         C50795 * C50891) *
                        C1643) *
                       C50932 +
                   ((((C8046 * C587 + C8041 * C592 + C8047 * C700 +
                       C8042 * C708 + C8048 * C2997 + C8043 * C3003) *
                          C696 +
                      (C8046 * C593 + C8041 * C602 + C8047 * C707 +
                       C8042 * C712 + C8048 * C3002 + C8043 * C3006) *
                          C50607) *
                         C50795 * C50891 +
                     ((C8628 + C8627 + C8626) * C696 +
                      (C8631 + C8630 + C8629) * C50607) *
                         C50795 * C50634) *
                        C1643 -
                    (((C8048 * C8885 + C8043 * C8889 + C8047 * C3158 +
                       C8042 * C3163 + C8046 * C831 + C8041 * C841) *
                          C50607 +
                      (C8048 * C8883 + C8043 * C8886 + C8047 * C3154 +
                       C8042 * C3159 + C8046 * C817 + C8041 * C832) *
                          C696) *
                         C50795 * C50634 +
                     ((C8048 * C8887 + C8043 * C8890 + C8047 * C3160 +
                       C8042 * C3164 + C8046 * C833 + C8041 * C842) *
                          C50607 +
                      (C8048 * C8884 + C8043 * C8888 + C8047 * C3155 +
                       C8042 * C3161 + C8046 * C818 + C8041 * C834) *
                          C696) *
                         C50795 * C50891) *
                        C50708) *
                       C1390)) /
                     (p * q * std::sqrt(p + q));
    d2ee[185] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C117 * C122 + C50765 * C129) * C696 +
                      (C117 * C130 + C50765 * C143) * C50607) *
                         C50795 * C111 +
                     (C171 * C696 + C172 * C50607) * C50795 * C112 +
                     (C173 * C696 + C174 * C50607) * C50795 * C113 +
                     (C175 * C696 + C176 * C50607) * C50795 * C114) *
                        C50945 -
                    ((C480 * C50607 + C479 * C696) * C50795 * C114 +
                     (C478 * C50607 + C477 * C696) * C50795 * C113 +
                     (C476 * C50607 + C475 * C696) * C50795 * C112 +
                     ((C117 * C441 + C50765 * C452) * C50607 +
                      (C117 * C435 + C50765 * C442) * C696) *
                         C50795 * C111) *
                        C50935 +
                    (((C117 * C944 + C50765 * C949) * C696 +
                      (C117 * C950 + C50765 * C959) * C50607) *
                         C50795 * C111 +
                     (C977 * C696 + C978 * C50607) * C50795 * C112 +
                     (C979 * C696 + C980 * C50607) * C50795 * C113 +
                     (C981 * C696 + C982 * C50607) * C50795 * C114) *
                        C1875) *
                       C1283 +
                   ((((C117 * C811 + C50765 * C819) * C696 +
                      (C117 * C820 + C50765 * C835) * C50607) *
                         C50795 * C111 +
                     (C1540 * C696 + C1541 * C50607) * C50795 * C112 +
                     (C1542 * C696 + C1543 * C50607) * C50795 * C113 +
                     (C1544 * C696 + C1545 * C50607) * C50795 * C114) *
                        C50935 -
                    ((C332 * C50607 + C331 * C696) * C50795 * C114 +
                     (C330 * C50607 + C329 * C696) * C50795 * C113 +
                     (C328 * C50607 + C327 * C696) * C50795 * C112 +
                     ((C117 * C293 + C50765 * C304) * C50607 +
                      (C117 * C287 + C50765 * C294) * C696) *
                         C50795 * C111) *
                        C50945 -
                    (((C117 * C1084 + C50765 * C1092) * C50607 +
                      (C117 * C1080 + C50765 * C1085) * C696) *
                         C50795 * C114 +
                     ((C117 * C1086 + C50765 * C1093) * C50607 +
                      (C117 * C1081 + C50765 * C1087) * C696) *
                         C50795 * C113 +
                     ((C117 * C1088 + C50765 * C1094) * C50607 +
                      (C117 * C1082 + C50765 * C1089) * C696) *
                         C50795 * C112 +
                     ((C117 * C1090 + C50765 * C1095) * C50607 +
                      (C117 * C1083 + C50765 * C1091) * C696) *
                         C50795 * C111) *
                        C1875) *
                       C50684)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C8046 * C122 + C8041 * C129 + C8047 * C287 +
                       C8042 * C294 + C8048 * C587 + C8043 * C592) *
                          C696 +
                      (C8046 * C130 + C8041 * C143 + C8047 * C293 +
                       C8042 * C304 + C8048 * C593 + C8043 * C602) *
                          C50607) *
                         C50795 * C50891 +
                     ((C8088 + C8087 + C8086) * C696 +
                      (C8091 + C8090 + C8089) * C50607) *
                         C50795 * C50634) *
                        C50945 -
                    (((C8461 + C8460 + C8459) * C50607 +
                      (C8458 + C8457 + C8456) * C696) *
                         C50795 * C50634 +
                     ((C8048 * C833 + C8043 * C842 + C8047 * C820 +
                       C8042 * C835 + C8046 * C441 + C8041 * C452) *
                          C50607 +
                      (C8048 * C818 + C8043 * C834 + C8047 * C811 +
                       C8042 * C819 + C8046 * C435 + C8041 * C442) *
                          C696) *
                         C50795 * C50891) *
                        C50935 +
                    (((C8046 * C944 + C8041 * C949 + C8047 * C1083 +
                       C8042 * C1091 + C8048 * C3483 + C8043 * C3489) *
                          C696 +
                      (C8046 * C950 + C8041 * C959 + C8047 * C1090 +
                       C8042 * C1095 + C8048 * C3488 + C8043 * C3492) *
                          C50607) *
                         C50795 * C50891 +
                     ((C9052 + C9051 + C9050) * C696 +
                      (C9055 + C9054 + C9053) * C50607) *
                         C50795 * C50634) *
                        C1875) *
                       C1283 +
                   ((((C8046 * C811 + C8041 * C819 + C8047 * C818 +
                       C8042 * C834 + C8048 * C3155 + C8043 * C3161) *
                          C696 +
                      (C8046 * C820 + C8041 * C835 + C8047 * C833 +
                       C8042 * C842 + C8048 * C3160 + C8043 * C3164) *
                          C50607) *
                         C50795 * C50891 +
                     ((C9816 + C9815 + C9814) * C696 +
                      (C9819 + C9818 + C9817) * C50607) *
                         C50795 * C50634) *
                        C50935 -
                    (((C8279 + C8278 + C8277) * C50607 +
                      (C8276 + C8275 + C8274) * C696) *
                         C50795 * C50634 +
                     ((C8048 * C707 + C8043 * C712 + C8047 * C593 +
                       C8042 * C602 + C8046 * C293 + C8041 * C304) *
                          C50607 +
                      (C8048 * C700 + C8043 * C708 + C8047 * C587 +
                       C8042 * C592 + C8046 * C287 + C8041 * C294) *
                          C696) *
                         C50795 * C50891) *
                        C50945 -
                    (((C8048 * C9203 + C8043 * C9207 + C8047 * C3486 +
                       C8042 * C3491 + C8046 * C1088 + C8041 * C1094) *
                          C50607 +
                      (C8048 * C9201 + C8043 * C9204 + C8047 * C3482 +
                       C8042 * C3487 + C8046 * C1082 + C8041 * C1089) *
                          C696) *
                         C50795 * C50634 +
                     ((C8048 * C9205 + C8043 * C9208 + C8047 * C3488 +
                       C8042 * C3492 + C8046 * C1090 + C8041 * C1095) *
                          C50607 +
                      (C8048 * C9202 + C8043 * C9206 + C8047 * C3483 +
                       C8042 * C3489 + C8046 * C1083 + C8041 * C1091) *
                          C696) *
                         C50795 * C50891) *
                        C1875) *
                       C50684)) /
                     (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C49720 +
            (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
            C172 * C50612) *
               C50795 * C111 +
           (C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
               C50795 * C112 +
           (C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
               C50795 * C113 +
           (C175 * C49720 + C176 * C50884 - C177 * C49713 - C178 * C50612) *
               C50795 * C114) *
              C50696 * C582 +
          ((C327 * C49713 -
            ((C117 * C293 + C50765 * C304) * C50884 +
             (C117 * C287 + C50765 * C294) * C49720) +
            C328 * C50612) *
               C50795 * C111 +
           (C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
               C50795 * C112 +
           (C331 * C49713 - (C330 * C50884 + C329 * C49720) + C332 * C50612) *
               C50795 * C113 +
           (C333 * C49713 - (C332 * C50884 + C331 * C49720) + C334 * C50612) *
               C50795 * C114) *
              C50696 * C583 +
          (((C117 * C587 + C50765 * C592) * C49720 +
            (C117 * C593 + C50765 * C602) * C50884 - C620 * C49713 -
            C621 * C50612) *
               C50795 * C111 +
           (C620 * C49720 + C621 * C50884 - C622 * C49713 - C623 * C50612) *
               C50795 * C112 +
           (C622 * C49720 + C623 * C50884 - C624 * C49713 - C625 * C50612) *
               C50795 * C113 +
           (C624 * C49720 + C625 * C50884 -
            (C117 * C591 + C50765 * C600) * C49713 -
            (C117 * C601 + C50765 * C606) * C50612) *
               C50795 * C114) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50765 * C129) * C118 +
           (C117 * C130 + C50765 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C50795 * C111 +
          (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 + C175 * C120 +
           C176 * C108 - C177 * C121 - C178 * C109) *
              C50795 * C112 +
          (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 + C177 * C120 +
           C178 * C108 - C179 * C121 - C180 * C109) *
              C50795 * C113 +
          (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 + C179 * C120 +
           C180 * C108 - (C117 * C128 + C50765 * C141) * C121 -
           (C117 * C142 + C50765 * C149) * C109) *
              C50795 * C114) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C49720 +
            (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
            C172 * C50612) *
               C50795 * C111 +
           (C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
               C50795 * C112 +
           (C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
               C50795 * C113 +
           (C175 * C49720 + C176 * C50884 - C177 * C49713 - C178 * C50612) *
               C50795 * C114) *
              C941 +
          ((C475 * C49713 -
            ((C117 * C441 + C50765 * C452) * C50884 +
             (C117 * C435 + C50765 * C442) * C49720) +
            C476 * C50612) *
               C50795 * C111 +
           (C477 * C49713 - (C476 * C50884 + C475 * C49720) + C478 * C50612) *
               C50795 * C112 +
           (C479 * C49713 - (C478 * C50884 + C477 * C49720) + C480 * C50612) *
               C50795 * C113 +
           (C481 * C49713 - (C480 * C50884 + C479 * C49720) + C482 * C50612) *
               C50795 * C114) *
              C942 +
          (((C117 * C944 + C50765 * C949) * C49720 +
            (C117 * C950 + C50765 * C959) * C50884 - C977 * C49713 -
            C978 * C50612) *
               C50795 * C111 +
           (C977 * C49720 + C978 * C50884 - C979 * C49713 - C980 * C50612) *
               C50795 * C112 +
           (C979 * C49720 + C980 * C50884 - C981 * C49713 - C982 * C50612) *
               C50795 * C113 +
           (C981 * C49720 + C982 * C50884 -
            (C117 * C948 + C50765 * C957) * C49713 -
            (C117 * C958 + C50765 * C963) * C50612) *
               C50795 * C114) *
              C943) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
            C8048 * C587 + C8043 * C592) *
               C118 +
           (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
            C8048 * C593 + C8043 * C602) *
               C106 -
           (C8086 + C8087 + C8088) * C119 - (C8089 + C8090 + C8091) * C107 +
           (C8092 + C8093 + C8094) * C120 + (C8095 + C8096 + C8097) * C108 -
           (C8098 + C8099 + C8100) * C121 - (C8101 + C8102 + C8103) * C109) *
              C50795 * C50891 +
          ((C8088 + C8087 + C8086) * C118 + (C8091 + C8090 + C8089) * C106 -
           (C8094 + C8093 + C8092) * C119 - (C8097 + C8096 + C8095) * C107 +
           (C8100 + C8099 + C8098) * C120 + (C8103 + C8102 + C8101) * C108 -
           (C8048 * C591 + C8043 * C600 + C8047 * C290 + C8042 * C300 +
            C8046 * C126 + C8041 * C137) *
               C121 -
           (C8048 * C601 + C8043 * C606 + C8047 * C301 + C8042 * C308 +
            C8046 * C138 + C8041 * C147) *
               C109) *
              C50795 * C50634) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C49720 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50884 -
            (C8086 + C8087 + C8088) * C49713 -
            (C8089 + C8090 + C8091) * C50612) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C49720 +
            (C8091 + C8090 + C8089) * C50884 -
            (C8094 + C8093 + C8092) * C49713 -
            (C8097 + C8096 + C8095) * C50612) *
               C50795 * C50634) *
              C50696 * C582 +
          (((C8274 + C8275 + C8276) * C49713 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50884 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C49720) +
            (C8277 + C8278 + C8279) * C50612) *
               C50795 * C50891 +
           ((C8282 + C8281 + C8280) * C49713 -
            ((C8279 + C8278 + C8277) * C50884 +
             (C8276 + C8275 + C8274) * C49720) +
            (C8285 + C8284 + C8283) * C50612) *
               C50795 * C50634) *
              C50696 * C583 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C49720 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C50884 -
            (C8626 + C8627 + C8628) * C49713 -
            (C8629 + C8630 + C8631) * C50612) *
               C50795 * C50891 +
           ((C8628 + C8627 + C8626) * C49720 +
            (C8631 + C8630 + C8629) * C50884 -
            (C8048 * C2995 + C8043 * C2999 + C8047 * C698 + C8042 * C704 +
             C8046 * C589 + C8041 * C596) *
                C49713 -
            (C8048 * C2998 + C8043 * C3004 + C8047 * C703 + C8042 * C710 +
             C8046 * C597 + C8041 * C604) *
                C50612) *
               C50795 * C50634) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C49720 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50884 -
            (C8086 + C8087 + C8088) * C49713 -
            (C8089 + C8090 + C8091) * C50612) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C49720 +
            (C8091 + C8090 + C8089) * C50884 -
            (C8094 + C8093 + C8092) * C49713 -
            (C8097 + C8096 + C8095) * C50612) *
               C50795 * C50634) *
              C941 +
          (((C8456 + C8457 + C8458) * C49713 -
            ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
              C8046 * C441 + C8041 * C452) *
                 C50884 +
             (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
              C8046 * C435 + C8041 * C442) *
                 C49720) +
            (C8459 + C8460 + C8461) * C50612) *
               C50795 * C50891 +
           ((C8464 + C8463 + C8462) * C49713 -
            ((C8461 + C8460 + C8459) * C50884 +
             (C8458 + C8457 + C8456) * C49720) +
            (C8467 + C8466 + C8465) * C50612) *
               C50795 * C50634) *
              C942 +
          (((C8046 * C944 + C8041 * C949 + C8047 * C1083 + C8042 * C1091 +
             C8048 * C3483 + C8043 * C3489) *
                C49720 +
            (C8046 * C950 + C8041 * C959 + C8047 * C1090 + C8042 * C1095 +
             C8048 * C3488 + C8043 * C3492) *
                C50884 -
            (C9050 + C9051 + C9052) * C49713 -
            (C9053 + C9054 + C9055) * C50612) *
               C50795 * C50891 +
           ((C9052 + C9051 + C9050) * C49720 +
            (C9055 + C9054 + C9053) * C50884 -
            (C8048 * C3481 + C8043 * C3485 + C8047 * C1081 + C8042 * C1087 +
             C8046 * C946 + C8041 * C953) *
                C49713 -
            (C8048 * C3484 + C8043 * C3490 + C8047 * C1086 + C8042 * C1093 +
             C8046 * C954 + C8041 * C961) *
                C50612) *
               C50795 * C50634) *
              C943) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C696 +
            (C117 * C130 + C50765 * C143) * C50607) *
               C50795 * C111 +
           (C171 * C696 + C172 * C50607) * C50795 * C112 +
           (C173 * C696 + C174 * C50607) * C50795 * C113 +
           (C175 * C696 + C176 * C50607) * C50795 * C114) *
              C50696 * C692 -
          ((C332 * C50607 + C331 * C696) * C50795 * C114 +
           (C330 * C50607 + C329 * C696) * C50795 * C113 +
           (C328 * C50607 + C327 * C696) * C50795 * C112 +
           ((C117 * C293 + C50765 * C304) * C50607 +
            (C117 * C287 + C50765 * C294) * C696) *
               C50795 * C111) *
              C50696 * C693 +
          (((C117 * C587 + C50765 * C592) * C696 +
            (C117 * C593 + C50765 * C602) * C50607) *
               C50795 * C111 +
           (C620 * C696 + C621 * C50607) * C50795 * C112 +
           (C622 * C696 + C623 * C50607) * C50795 * C113 +
           (C624 * C696 + C625 * C50607) * C50795 * C114) *
              C50696 * C694 -
          (((C117 * C701 + C50765 * C709) * C50607 +
            (C117 * C697 + C50765 * C702) * C696) *
               C50795 * C114 +
           ((C117 * C703 + C50765 * C710) * C50607 +
            (C117 * C698 + C50765 * C704) * C696) *
               C50795 * C113 +
           ((C117 * C705 + C50765 * C711) * C50607 +
            (C117 * C699 + C50765 * C706) * C696) *
               C50795 * C112 +
           ((C117 * C707 + C50765 * C712) * C50607 +
            (C117 * C700 + C50765 * C708) * C696) *
               C50795 * C111) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C283 +
            (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50795 * C111 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
            C175 * C285 + C176 * C280) *
               C50795 * C112 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
            C177 * C285 + C178 * C280) *
               C50795 * C113 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
            C179 * C285 + C180 * C280) *
               C50795 * C114) *
              C50696 * C50899 +
          ((C327 * C284 -
            ((C117 * C293 + C50765 * C304) * C278 +
             (C117 * C287 + C50765 * C294) * C283) +
            C328 * C279 - C329 * C285 - C330 * C280) *
               C50795 * C111 +
           (C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
            C331 * C285 - C332 * C280) *
               C50795 * C112 +
           (C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
            C333 * C285 - C334 * C280) *
               C50795 * C113 +
           (C333 * C284 - (C332 * C278 + C331 * C283) + C334 * C279 -
            (C117 * C291 + C50765 * C302) * C285 -
            (C117 * C303 + C50765 * C309) * C280) *
               C50795 * C114) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C50795 * C111 +
            (C171 * C696 + C172 * C50607) * C50795 * C112 +
            (C173 * C696 + C174 * C50607) * C50795 * C113 +
            (C175 * C696 + C176 * C50607) * C50795 * C114) *
               C941 -
           ((C480 * C50607 + C479 * C696) * C50795 * C114 +
            (C478 * C50607 + C477 * C696) * C50795 * C113 +
            (C476 * C50607 + C475 * C696) * C50795 * C112 +
            ((C117 * C441 + C50765 * C452) * C50607 +
             (C117 * C435 + C50765 * C442) * C696) *
                C50795 * C111) *
               C942 +
           (((C117 * C944 + C50765 * C949) * C696 +
             (C117 * C950 + C50765 * C959) * C50607) *
                C50795 * C111 +
            (C977 * C696 + C978 * C50607) * C50795 * C112 +
            (C979 * C696 + C980 * C50607) * C50795 * C113 +
            (C981 * C696 + C982 * C50607) * C50795 * C114) *
               C943) *
              C50899 +
          ((((C117 * C811 + C50765 * C819) * C696 +
             (C117 * C820 + C50765 * C835) * C50607) *
                C50795 * C111 +
            ((C117 * C812 + C50765 * C821) * C696 +
             (C117 * C822 + C50765 * C836) * C50607) *
                C50795 * C112 +
            ((C117 * C813 + C50765 * C823) * C696 +
             (C117 * C824 + C50765 * C837) * C50607) *
                C50795 * C113 +
            ((C117 * C814 + C50765 * C825) * C696 +
             (C117 * C826 + C50765 * C838) * C50607) *
                C50795 * C114) *
               C942 -
           ((C332 * C50607 + C331 * C696) * C50795 * C114 +
            (C330 * C50607 + C329 * C696) * C50795 * C113 +
            (C328 * C50607 + C327 * C696) * C50795 * C112 +
            ((C117 * C293 + C50765 * C304) * C50607 +
             (C117 * C287 + C50765 * C294) * C696) *
                C50795 * C111) *
               C941 -
           (((C117 * C1084 + C50765 * C1092) * C50607 +
             (C117 * C1080 + C50765 * C1085) * C696) *
                C50795 * C114 +
            ((C117 * C1086 + C50765 * C1093) * C50607 +
             (C117 * C1081 + C50765 * C1087) * C696) *
                C50795 * C113 +
            ((C117 * C1088 + C50765 * C1094) * C50607 +
             (C117 * C1082 + C50765 * C1089) * C696) *
                C50795 * C112 +
            ((C117 * C1090 + C50765 * C1095) * C50607 +
             (C117 * C1083 + C50765 * C1091) * C696) *
                C50795 * C111) *
               C943) *
              C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C283 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C278 -
            (C8086 + C8087 + C8088) * C284 - (C8089 + C8090 + C8091) * C279 +
            (C8092 + C8093 + C8094) * C285 + (C8095 + C8096 + C8097) * C280) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C283 + (C8091 + C8090 + C8089) * C278 -
            (C8094 + C8093 + C8092) * C284 - (C8097 + C8096 + C8095) * C279 +
            (C8100 + C8099 + C8098) * C285 + (C8103 + C8102 + C8101) * C280) *
               C50795 * C50634) *
              C50696 * C50899 +
          (((C8274 + C8275 + C8276) * C284 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C278 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C283) +
            (C8277 + C8278 + C8279) * C279 - (C8280 + C8281 + C8282) * C285 -
            (C8283 + C8284 + C8285) * C280) *
               C50795 * C50891 +
           ((C8282 + C8281 + C8280) * C284 -
            ((C8279 + C8278 + C8277) * C278 + (C8276 + C8275 + C8274) * C283) +
            (C8285 + C8284 + C8283) * C279 -
            (C8048 * C697 + C8043 * C702 + C8047 * C590 + C8042 * C598 +
             C8046 * C289 + C8041 * C298) *
                C285 -
            (C8048 * C701 + C8043 * C709 + C8047 * C599 + C8042 * C605 +
             C8046 * C299 + C8041 * C307) *
                C280) *
               C50795 * C50634) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C696 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50607) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C696 + (C8091 + C8090 + C8089) * C50607) *
               C50795 * C50634) *
              C50696 * C692 -
          (((C8279 + C8278 + C8277) * C50607 + (C8276 + C8275 + C8274) * C696) *
               C50795 * C50634 +
           ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
             C8046 * C293 + C8041 * C304) *
                C50607 +
            (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
             C8046 * C287 + C8041 * C294) *
                C696) *
               C50795 * C50891) *
              C50696 * C693 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C696 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C50607) *
               C50795 * C50891 +
           ((C8628 + C8627 + C8626) * C696 + (C8631 + C8630 + C8629) * C50607) *
               C50795 * C50634) *
              C50696 * C694 -
          (((C8048 * C8731 + C8043 * C8735 + C8047 * C3000 + C8042 * C3005 +
             C8046 * C705 + C8041 * C711) *
                C50607 +
            (C8048 * C8729 + C8043 * C8732 + C8047 * C2996 + C8042 * C3001 +
             C8046 * C699 + C8041 * C706) *
                C696) *
               C50795 * C50634 +
           ((C8048 * C8733 + C8043 * C8736 + C8047 * C3002 + C8042 * C3006 +
             C8046 * C707 + C8041 * C712) *
                C50607 +
            (C8048 * C8730 + C8043 * C8734 + C8047 * C2997 + C8042 * C3003 +
             C8046 * C700 + C8041 * C708) *
                C696) *
               C50795 * C50891) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C696 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50607) *
                C50795 * C50891 +
            ((C8088 + C8087 + C8086) * C696 +
             (C8091 + C8090 + C8089) * C50607) *
                C50795 * C50634) *
               C941 -
           (((C8461 + C8460 + C8459) * C50607 +
             (C8458 + C8457 + C8456) * C696) *
                C50795 * C50634 +
            ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
              C8046 * C441 + C8041 * C452) *
                 C50607 +
             (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
              C8046 * C435 + C8041 * C442) *
                 C696) *
                C50795 * C50891) *
               C942 +
           (((C8046 * C944 + C8041 * C949 + C8047 * C1083 + C8042 * C1091 +
              C8048 * C3483 + C8043 * C3489) *
                 C696 +
             (C8046 * C950 + C8041 * C959 + C8047 * C1090 + C8042 * C1095 +
              C8048 * C3488 + C8043 * C3492) *
                 C50607) *
                C50795 * C50891 +
            ((C9052 + C9051 + C9050) * C696 +
             (C9055 + C9054 + C9053) * C50607) *
                C50795 * C50634) *
               C943) *
              C50899 +
          ((((C8046 * C811 + C8041 * C819 + C8047 * C818 + C8042 * C834 +
              C8048 * C3155 + C8043 * C3161) *
                 C696 +
             (C8046 * C820 + C8041 * C835 + C8047 * C833 + C8042 * C842 +
              C8048 * C3160 + C8043 * C3164) *
                 C50607) *
                C50795 * C50891 +
            ((C8046 * C812 + C8041 * C821 + C8047 * C817 + C8042 * C832 +
              C8048 * C3154 + C8043 * C3159) *
                 C696 +
             (C8046 * C822 + C8041 * C836 + C8047 * C831 + C8042 * C841 +
              C8048 * C3158 + C8043 * C3163) *
                 C50607) *
                C50795 * C50634) *
               C942 -
           (((C8279 + C8278 + C8277) * C50607 +
             (C8276 + C8275 + C8274) * C696) *
                C50795 * C50634 +
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50607 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C696) *
                C50795 * C50891) *
               C941 -
           (((C8048 * C9203 + C8043 * C9207 + C8047 * C3486 + C8042 * C3491 +
              C8046 * C1088 + C8041 * C1094) *
                 C50607 +
             (C8048 * C9201 + C8043 * C9204 + C8047 * C3482 + C8042 * C3487 +
              C8046 * C1082 + C8041 * C1089) *
                 C696) *
                C50795 * C50634 +
            ((C8048 * C9205 + C8043 * C9208 + C8047 * C3488 + C8042 * C3492 +
              C8046 * C1090 + C8041 * C1095) *
                 C50607 +
             (C8048 * C9202 + C8043 * C9206 + C8047 * C3483 + C8042 * C3489 +
              C8046 * C1083 + C8041 * C1091) *
                 C696) *
                C50795 * C50891) *
               C943) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C50795 * C111 +
            (C171 * C696 + C172 * C50607) * C50795 * C112 +
            (C173 * C696 + C174 * C50607) * C50795 * C113 +
            (C175 * C696 + C176 * C50607) * C50795 * C114) *
               C50900 -
           ((C480 * C50607 + C479 * C696) * C50795 * C114 +
            (C478 * C50607 + C477 * C696) * C50795 * C113 +
            (C476 * C50607 + C475 * C696) * C50795 * C112 +
            ((C117 * C441 + C50765 * C452) * C50607 +
             (C117 * C435 + C50765 * C442) * C696) *
                C50795 * C111) *
               C50708) *
              C582 +
          ((((C117 * C811 + C50765 * C819) * C696 +
             (C117 * C820 + C50765 * C835) * C50607) *
                C50795 * C111 +
            ((C117 * C812 + C50765 * C821) * C696 +
             (C117 * C822 + C50765 * C836) * C50607) *
                C50795 * C112 +
            ((C117 * C813 + C50765 * C823) * C696 +
             (C117 * C824 + C50765 * C837) * C50607) *
                C50795 * C113 +
            ((C117 * C814 + C50765 * C825) * C696 +
             (C117 * C826 + C50765 * C838) * C50607) *
                C50795 * C114) *
               C50708 -
           ((C332 * C50607 + C331 * C696) * C50795 * C114 +
            (C330 * C50607 + C329 * C696) * C50795 * C113 +
            (C328 * C50607 + C327 * C696) * C50795 * C112 +
            ((C117 * C293 + C50765 * C304) * C50607 +
             (C117 * C287 + C50765 * C294) * C696) *
                C50795 * C111) *
               C50900) *
              C583 +
          ((((C117 * C587 + C50765 * C592) * C696 +
             (C117 * C593 + C50765 * C602) * C50607) *
                C50795 * C111 +
            (C620 * C696 + C621 * C50607) * C50795 * C112 +
            (C622 * C696 + C623 * C50607) * C50795 * C113 +
            (C624 * C696 + C625 * C50607) * C50795 * C114) *
               C50900 -
           (((C117 * C827 + C50765 * C839) * C50607 +
             (C117 * C815 + C50765 * C828) * C696) *
                C50795 * C114 +
            ((C117 * C829 + C50765 * C840) * C50607 +
             (C117 * C816 + C50765 * C830) * C696) *
                C50795 * C113 +
            ((C117 * C831 + C50765 * C841) * C50607 +
             (C117 * C817 + C50765 * C832) * C696) *
                C50795 * C112 +
            ((C117 * C833 + C50765 * C842) * C50607 +
             (C117 * C818 + C50765 * C834) * C696) *
                C50795 * C111) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C283 +
            (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50795 * C111 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
            C175 * C285 + C176 * C280) *
               C50795 * C112 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
            C177 * C285 + C178 * C280) *
               C50795 * C113 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
            C179 * C285 + C180 * C280) *
               C50795 * C114) *
              C50900 +
          ((C475 * C284 -
            ((C117 * C441 + C50765 * C452) * C278 +
             (C117 * C435 + C50765 * C442) * C283) +
            C476 * C279 - C477 * C285 - C478 * C280) *
               C50795 * C111 +
           (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
            C479 * C285 - C480 * C280) *
               C50795 * C112 +
           (C479 * C284 - (C478 * C278 + C477 * C283) + C480 * C279 -
            C481 * C285 - C482 * C280) *
               C50795 * C113 +
           (C481 * C284 - (C480 * C278 + C479 * C283) + C482 * C279 -
            (C117 * C439 + C50765 * C450) * C285 -
            (C117 * C451 + C50765 * C457) * C280) *
               C50795 * C114) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C696 +
            (C117 * C130 + C50765 * C143) * C50607) *
               C50795 * C111 +
           (C171 * C696 + C172 * C50607) * C50795 * C112 +
           (C173 * C696 + C174 * C50607) * C50795 * C113 +
           (C175 * C696 + C176 * C50607) * C50795 * C114) *
              C1162 -
          ((C480 * C50607 + C479 * C696) * C50795 * C114 +
           (C478 * C50607 + C477 * C696) * C50795 * C113 +
           (C476 * C50607 + C475 * C696) * C50795 * C112 +
           ((C117 * C441 + C50765 * C452) * C50607 +
            (C117 * C435 + C50765 * C442) * C696) *
               C50795 * C111) *
              C1163 +
          (((C117 * C944 + C50765 * C949) * C696 +
            (C117 * C950 + C50765 * C959) * C50607) *
               C50795 * C111 +
           (C977 * C696 + C978 * C50607) * C50795 * C112 +
           (C979 * C696 + C980 * C50607) * C50795 * C113 +
           (C981 * C696 + C982 * C50607) * C50795 * C114) *
              C1164 -
          (((C117 * C1170 + C50765 * C1178) * C50607 +
            (C117 * C1166 + C50765 * C1171) * C696) *
               C50795 * C114 +
           ((C117 * C1172 + C50765 * C1179) * C50607 +
            (C117 * C1167 + C50765 * C1173) * C696) *
               C50795 * C113 +
           ((C117 * C1174 + C50765 * C1180) * C50607 +
            (C117 * C1168 + C50765 * C1175) * C696) *
               C50795 * C112 +
           ((C117 * C1176 + C50765 * C1181) * C50607 +
            (C117 * C1169 + C50765 * C1177) * C696) *
               C50795 * C111) *
              C1165) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C283 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C278 -
            (C8086 + C8087 + C8088) * C284 - (C8089 + C8090 + C8091) * C279 +
            (C8092 + C8093 + C8094) * C285 + (C8095 + C8096 + C8097) * C280) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C283 + (C8091 + C8090 + C8089) * C278 -
            (C8094 + C8093 + C8092) * C284 - (C8097 + C8096 + C8095) * C279 +
            (C8100 + C8099 + C8098) * C285 + (C8103 + C8102 + C8101) * C280) *
               C50795 * C50634) *
              C50900 +
          (((C8456 + C8457 + C8458) * C284 -
            ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
              C8046 * C441 + C8041 * C452) *
                 C278 +
             (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
              C8046 * C435 + C8041 * C442) *
                 C283) +
            (C8459 + C8460 + C8461) * C279 - (C8462 + C8463 + C8464) * C285 -
            (C8465 + C8466 + C8467) * C280) *
               C50795 * C50891 +
           ((C8464 + C8463 + C8462) * C284 -
            ((C8461 + C8460 + C8459) * C278 + (C8458 + C8457 + C8456) * C283) +
            (C8467 + C8466 + C8465) * C279 -
            (C8048 * C815 + C8043 * C828 + C8047 * C814 + C8042 * C825 +
             C8046 * C437 + C8041 * C446) *
                C285 -
            (C8048 * C827 + C8043 * C839 + C8047 * C826 + C8042 * C838 +
             C8046 * C447 + C8041 * C455) *
                C280) *
               C50795 * C50634) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C696 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50607) *
                C50795 * C50891 +
            ((C8088 + C8087 + C8086) * C696 +
             (C8091 + C8090 + C8089) * C50607) *
                C50795 * C50634) *
               C50900 -
           (((C8461 + C8460 + C8459) * C50607 +
             (C8458 + C8457 + C8456) * C696) *
                C50795 * C50634 +
            ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
              C8046 * C441 + C8041 * C452) *
                 C50607 +
             (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
              C8046 * C435 + C8041 * C442) *
                 C696) *
                C50795 * C50891) *
               C50708) *
              C582 +
          ((((C8046 * C811 + C8041 * C819 + C8047 * C818 + C8042 * C834 +
              C8048 * C3155 + C8043 * C3161) *
                 C696 +
             (C8046 * C820 + C8041 * C835 + C8047 * C833 + C8042 * C842 +
              C8048 * C3160 + C8043 * C3164) *
                 C50607) *
                C50795 * C50891 +
            ((C8046 * C812 + C8041 * C821 + C8047 * C817 + C8042 * C832 +
              C8048 * C3154 + C8043 * C3159) *
                 C696 +
             (C8046 * C822 + C8041 * C836 + C8047 * C831 + C8042 * C841 +
              C8048 * C3158 + C8043 * C3163) *
                 C50607) *
                C50795 * C50634) *
               C50708 -
           (((C8279 + C8278 + C8277) * C50607 +
             (C8276 + C8275 + C8274) * C696) *
                C50795 * C50634 +
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50607 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C696) *
                C50795 * C50891) *
               C50900) *
              C583 +
          ((((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
              C8048 * C2997 + C8043 * C3003) *
                 C696 +
             (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
              C8048 * C3002 + C8043 * C3006) *
                 C50607) *
                C50795 * C50891 +
            ((C8628 + C8627 + C8626) * C696 +
             (C8631 + C8630 + C8629) * C50607) *
                C50795 * C50634) *
               C50900 -
           (((C8048 * C8885 + C8043 * C8889 + C8047 * C3158 + C8042 * C3163 +
              C8046 * C831 + C8041 * C841) *
                 C50607 +
             (C8048 * C8883 + C8043 * C8886 + C8047 * C3154 + C8042 * C3159 +
              C8046 * C817 + C8041 * C832) *
                 C696) *
                C50795 * C50634 +
            ((C8048 * C8887 + C8043 * C8890 + C8047 * C3160 + C8042 * C3164 +
              C8046 * C833 + C8041 * C842) *
                 C50607 +
             (C8048 * C8884 + C8043 * C8888 + C8047 * C3155 + C8042 * C3161 +
              C8046 * C818 + C8041 * C834) *
                 C696) *
                C50795 * C50891) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C696 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50607) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C696 + (C8091 + C8090 + C8089) * C50607) *
               C50795 * C50634) *
              C1162 -
          (((C8461 + C8460 + C8459) * C50607 + (C8458 + C8457 + C8456) * C696) *
               C50795 * C50634 +
           ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
             C8046 * C441 + C8041 * C452) *
                C50607 +
            (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
             C8046 * C435 + C8041 * C442) *
                C696) *
               C50795 * C50891) *
              C1163 +
          (((C8046 * C944 + C8041 * C949 + C8047 * C1083 + C8042 * C1091 +
             C8048 * C3483 + C8043 * C3489) *
                C696 +
            (C8046 * C950 + C8041 * C959 + C8047 * C1090 + C8042 * C1095 +
             C8048 * C3488 + C8043 * C3492) *
                C50607) *
               C50795 * C50891 +
           ((C9052 + C9051 + C9050) * C696 + (C9055 + C9054 + C9053) * C50607) *
               C50795 * C50634) *
              C1164 -
          (((C8048 * C9309 + C8043 * C9313 + C8047 * C3596 + C8042 * C3601 +
             C8046 * C1174 + C8041 * C1180) *
                C50607 +
            (C8048 * C9307 + C8043 * C9310 + C8047 * C3592 + C8042 * C3597 +
             C8046 * C1168 + C8041 * C1175) *
                C696) *
               C50795 * C50634 +
           ((C8048 * C9311 + C8043 * C9314 + C8047 * C3598 + C8042 * C3602 +
             C8046 * C1176 + C8041 * C1181) *
                C50607 +
            (C8048 * C9308 + C8043 * C9312 + C8047 * C3593 + C8042 * C3599 +
             C8046 * C1169 + C8041 * C1177) *
                C696) *
               C50795 * C50891) *
              C1165) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C1285 +
            (C117 * C130 + C50765 * C143) * C50942 - C171 * C1286 -
            C172 * C50926 + C173 * C1287 + C174 * C1282) *
               C50795 * C111 +
           (C171 * C1285 + C172 * C50942 - C173 * C1286 - C174 * C50926 +
            C175 * C1287 + C176 * C1282) *
               C50795 * C112 +
           (C173 * C1285 + C174 * C50942 - C175 * C1286 - C176 * C50926 +
            C177 * C1287 + C178 * C1282) *
               C50795 * C113 +
           (C175 * C1285 + C176 * C50942 - C177 * C1286 - C178 * C50926 +
            C179 * C1287 + C180 * C1282) *
               C50795 * C114) *
              C1643 +
          ((C475 * C1286 -
            ((C117 * C441 + C50765 * C452) * C50942 +
             (C117 * C435 + C50765 * C442) * C1285) +
            C476 * C50926 - C477 * C1287 - C478 * C1282) *
               C50795 * C111 +
           (C477 * C1286 - (C476 * C50942 + C475 * C1285) + C478 * C50926 -
            C479 * C1287 - C480 * C1282) *
               C50795 * C112 +
           (C479 * C1286 - (C478 * C50942 + C477 * C1285) + C480 * C50926 -
            C481 * C1287 - C482 * C1282) *
               C50795 * C113 +
           (C481 * C1286 - (C480 * C50942 + C479 * C1285) + C482 * C50926 -
            (C117 * C439 + C50765 * C450) * C1287 -
            (C117 * C451 + C50765 * C457) * C1282) *
               C50795 * C114) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C1285 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50942 -
            (C8086 + C8087 + C8088) * C1286 - (C8089 + C8090 + C8091) * C50926 +
            (C8092 + C8093 + C8094) * C1287 + (C8095 + C8096 + C8097) * C1282) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C1285 + (C8091 + C8090 + C8089) * C50942 -
            (C8094 + C8093 + C8092) * C1286 - (C8097 + C8096 + C8095) * C50926 +
            (C8100 + C8099 + C8098) * C1287 + (C8103 + C8102 + C8101) * C1282) *
               C50795 * C50634) *
              C1643 +
          (((C8456 + C8457 + C8458) * C1286 -
            ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
              C8046 * C441 + C8041 * C452) *
                 C50942 +
             (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
              C8046 * C435 + C8041 * C442) *
                 C1285) +
            (C8459 + C8460 + C8461) * C50926 - (C8462 + C8463 + C8464) * C1287 -
            (C8465 + C8466 + C8467) * C1282) *
               C50795 * C50891 +
           ((C8464 + C8463 + C8462) * C1286 -
            ((C8461 + C8460 + C8459) * C50942 +
             (C8458 + C8457 + C8456) * C1285) +
            (C8467 + C8466 + C8465) * C50926 -
            (C8048 * C815 + C8043 * C828 + C8047 * C814 + C8042 * C825 +
             C8046 * C437 + C8041 * C446) *
                C1287 -
            (C8048 * C827 + C8043 * C839 + C8047 * C826 + C8042 * C838 +
             C8046 * C447 + C8041 * C455) *
                C1282) *
               C50795 * C50634) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1391 +
             (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
             C172 * C50612) *
                C50795 * C111 +
            (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                C50795 * C112 +
            (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
                C50795 * C113 +
            (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50612) *
                C50795 * C114) *
               C1643 +
           ((C475 * C1392 -
             ((C117 * C441 + C50765 * C452) * C1386 +
              (C117 * C435 + C50765 * C442) * C1391) +
             C476 * C50612) *
                C50795 * C111 +
            (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50612) *
                C50795 * C112 +
            (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50612) *
                C50795 * C113 +
            (C481 * C1392 - (C480 * C1386 + C479 * C1391) + C482 * C50612) *
                C50795 * C114) *
               C50708) *
              C50899 +
          (((C327 * C1392 -
             ((C117 * C293 + C50765 * C304) * C1386 +
              (C117 * C287 + C50765 * C294) * C1391) +
             C328 * C50612) *
                C50795 * C111 +
            (C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                C50795 * C112 +
            (C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50612) *
                C50795 * C113 +
            (C333 * C1392 - (C332 * C1386 + C331 * C1391) + C334 * C50612) *
                C50795 * C114) *
               C1643 +
           (((C117 * C811 + C50765 * C819) * C1391 +
             (C117 * C820 + C50765 * C835) * C1386 - C1540 * C1392 -
             C1541 * C50612) *
                C50795 * C111 +
            (C1540 * C1391 + C1541 * C1386 - C1542 * C1392 - C1543 * C50612) *
                C50795 * C112 +
            (C1542 * C1391 + C1543 * C1386 - C1544 * C1392 - C1545 * C50612) *
                C50795 * C113 +
            (C1544 * C1391 + C1545 * C1386 -
             (C117 * C1523 + C50765 * C1524) * C1392 -
             (C117 * C1525 + C50765 * C1526) * C50612) *
                C50795 * C114) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C1391 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C1386 -
             (C8086 + C8087 + C8088) * C1392 -
             (C8089 + C8090 + C8091) * C50612) *
                C50795 * C50891 +
            ((C8088 + C8087 + C8086) * C1391 + (C8091 + C8090 + C8089) * C1386 -
             (C8094 + C8093 + C8092) * C1392 -
             (C8097 + C8096 + C8095) * C50612) *
                C50795 * C50634) *
               C1643 +
           (((C8456 + C8457 + C8458) * C1392 -
             ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
               C8046 * C441 + C8041 * C452) *
                  C1386 +
              (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
               C8046 * C435 + C8041 * C442) *
                  C1391) +
             (C8459 + C8460 + C8461) * C50612) *
                C50795 * C50891 +
            ((C8464 + C8463 + C8462) * C1392 -
             ((C8461 + C8460 + C8459) * C1386 +
              (C8458 + C8457 + C8456) * C1391) +
             (C8467 + C8466 + C8465) * C50612) *
                C50795 * C50634) *
               C50708) *
              C50899 +
          ((((C8274 + C8275 + C8276) * C1392 -
             ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
               C8046 * C293 + C8041 * C304) *
                  C1386 +
              (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
               C8046 * C287 + C8041 * C294) *
                  C1391) +
             (C8277 + C8278 + C8279) * C50612) *
                C50795 * C50891 +
            ((C8282 + C8281 + C8280) * C1392 -
             ((C8279 + C8278 + C8277) * C1386 +
              (C8276 + C8275 + C8274) * C1391) +
             (C8285 + C8284 + C8283) * C50612) *
                C50795 * C50634) *
               C1643 +
           (((C8046 * C811 + C8041 * C819 + C8047 * C818 + C8042 * C834 +
              C8048 * C3155 + C8043 * C3161) *
                 C1391 +
             (C8046 * C820 + C8041 * C835 + C8047 * C833 + C8042 * C842 +
              C8048 * C3160 + C8043 * C3164) *
                 C1386 -
             (C9814 + C9815 + C9816) * C1392 -
             (C9817 + C9818 + C9819) * C50612) *
                C50795 * C50891 +
            ((C9816 + C9815 + C9814) * C1391 + (C9819 + C9818 + C9817) * C1386 -
             (C8048 * C3153 + C8043 * C3157 + C8047 * C816 + C8042 * C830 +
              C8046 * C813 + C8041 * C823) *
                 C1392 -
             (C8048 * C3156 + C8043 * C3162 + C8047 * C829 + C8042 * C840 +
              C8046 * C824 + C8041 * C837) *
                 C50612) *
                C50795 * C50634) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C1391 +
            (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
            C172 * C50612) *
               C50795 * C111 +
           (C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
               C50795 * C112 +
           (C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
               C50795 * C113 +
           (C175 * C1391 + C176 * C1386 - C177 * C1392 - C178 * C50612) *
               C50795 * C114) *
              C50945 +
          ((C475 * C1392 -
            ((C117 * C441 + C50765 * C452) * C1386 +
             (C117 * C435 + C50765 * C442) * C1391) +
            C476 * C50612) *
               C50795 * C111 +
           (C477 * C1392 - (C476 * C1386 + C475 * C1391) + C478 * C50612) *
               C50795 * C112 +
           (C479 * C1392 - (C478 * C1386 + C477 * C1391) + C480 * C50612) *
               C50795 * C113 +
           (C481 * C1392 - (C480 * C1386 + C479 * C1391) + C482 * C50612) *
               C50795 * C114) *
              C50935 +
          (((C117 * C944 + C50765 * C949) * C1391 +
            (C117 * C950 + C50765 * C959) * C1386 - C977 * C1392 -
            C978 * C50612) *
               C50795 * C111 +
           (C977 * C1391 + C978 * C1386 - C979 * C1392 - C980 * C50612) *
               C50795 * C112 +
           (C979 * C1391 + C980 * C1386 - C981 * C1392 - C982 * C50612) *
               C50795 * C113 +
           (C981 * C1391 + C982 * C1386 -
            (C117 * C948 + C50765 * C957) * C1392 -
            (C117 * C958 + C50765 * C963) * C50612) *
               C50795 * C114) *
              C1875) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C1391 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C1386 -
            (C8086 + C8087 + C8088) * C1392 -
            (C8089 + C8090 + C8091) * C50612) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C1391 + (C8091 + C8090 + C8089) * C1386 -
            (C8094 + C8093 + C8092) * C1392 -
            (C8097 + C8096 + C8095) * C50612) *
               C50795 * C50634) *
              C50945 +
          (((C8456 + C8457 + C8458) * C1392 -
            ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
              C8046 * C441 + C8041 * C452) *
                 C1386 +
             (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
              C8046 * C435 + C8041 * C442) *
                 C1391) +
            (C8459 + C8460 + C8461) * C50612) *
               C50795 * C50891 +
           ((C8464 + C8463 + C8462) * C1392 -
            ((C8461 + C8460 + C8459) * C1386 +
             (C8458 + C8457 + C8456) * C1391) +
            (C8467 + C8466 + C8465) * C50612) *
               C50795 * C50634) *
              C50935 +
          (((C8046 * C944 + C8041 * C949 + C8047 * C1083 + C8042 * C1091 +
             C8048 * C3483 + C8043 * C3489) *
                C1391 +
            (C8046 * C950 + C8041 * C959 + C8047 * C1090 + C8042 * C1095 +
             C8048 * C3488 + C8043 * C3492) *
                C1386 -
            (C9050 + C9051 + C9052) * C1392 -
            (C9053 + C9054 + C9055) * C50612) *
               C50795 * C50891 +
           ((C9052 + C9051 + C9050) * C1391 + (C9055 + C9054 + C9053) * C1386 -
            (C8048 * C3481 + C8043 * C3485 + C8047 * C1081 + C8042 * C1087 +
             C8046 * C946 + C8041 * C953) *
                C1392 -
            (C8048 * C3484 + C8043 * C3490 + C8047 * C1086 + C8042 * C1093 +
             C8046 * C954 + C8041 * C961) *
                C50612) *
               C50795 * C50634) *
              C1875) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50765 * C129) * C118 +
           (C117 * C130 + C50765 * C143) * C106 - C171 * C119 - C172 * C107 +
           C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
              C50795 * C111 +
          (C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 + C175 * C120 +
           C176 * C108 - C177 * C121 - C178 * C109) *
              C50795 * C112 +
          (C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 + C177 * C120 +
           C178 * C108 - C179 * C121 - C180 * C109) *
              C50795 * C113 +
          (C175 * C118 + C176 * C106 - C177 * C119 - C178 * C107 + C179 * C120 +
           C180 * C108 - (C117 * C128 + C50765 * C141) * C121 -
           (C117 * C142 + C50765 * C149) * C109) *
              C50795 * C114) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C49720 +
            (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
            C172 * C50612) *
               C50795 * C111 +
           (C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
               C50795 * C112 +
           (C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
               C50795 * C113 +
           (C175 * C49720 + C176 * C50884 - C177 * C49713 - C178 * C50612) *
               C50795 * C114) *
              C50696 * C582 +
          ((C327 * C49713 -
            ((C117 * C293 + C50765 * C304) * C50884 +
             (C117 * C287 + C50765 * C294) * C49720) +
            C328 * C50612) *
               C50795 * C111 +
           (C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
               C50795 * C112 +
           (C331 * C49713 - (C330 * C50884 + C329 * C49720) + C332 * C50612) *
               C50795 * C113 +
           (C333 * C49713 - (C332 * C50884 + C331 * C49720) + C334 * C50612) *
               C50795 * C114) *
              C50696 * C583 +
          (((C117 * C587 + C50765 * C592) * C49720 +
            (C117 * C593 + C50765 * C602) * C50884 - C620 * C49713 -
            C621 * C50612) *
               C50795 * C111 +
           (C620 * C49720 + C621 * C50884 - C622 * C49713 - C623 * C50612) *
               C50795 * C112 +
           (C622 * C49720 + C623 * C50884 - C624 * C49713 - C625 * C50612) *
               C50795 * C113 +
           (C624 * C49720 + C625 * C50884 -
            (C117 * C591 + C50765 * C600) * C49713 -
            (C117 * C601 + C50765 * C606) * C50612) *
               C50795 * C114) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
            C8048 * C587 + C8043 * C592) *
               C118 +
           (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
            C8048 * C593 + C8043 * C602) *
               C106 -
           (C8086 + C8087 + C8088) * C119 - (C8089 + C8090 + C8091) * C107 +
           (C8092 + C8093 + C8094) * C120 + (C8095 + C8096 + C8097) * C108 -
           (C8098 + C8099 + C8100) * C121 - (C8101 + C8102 + C8103) * C109) *
              C50795 * C50891 +
          ((C8088 + C8087 + C8086) * C118 + (C8091 + C8090 + C8089) * C106 -
           (C8094 + C8093 + C8092) * C119 - (C8097 + C8096 + C8095) * C107 +
           (C8100 + C8099 + C8098) * C120 + (C8103 + C8102 + C8101) * C108 -
           (C8048 * C591 + C8043 * C600 + C8047 * C290 + C8042 * C300 +
            C8046 * C126 + C8041 * C137) *
               C121 -
           (C8048 * C601 + C8043 * C606 + C8047 * C301 + C8042 * C308 +
            C8046 * C138 + C8041 * C147) *
               C109) *
              C50795 * C50634) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C49720 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50884 -
            (C8086 + C8087 + C8088) * C49713 -
            (C8089 + C8090 + C8091) * C50612) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C49720 +
            (C8091 + C8090 + C8089) * C50884 -
            (C8094 + C8093 + C8092) * C49713 -
            (C8097 + C8096 + C8095) * C50612) *
               C50795 * C50634) *
              C50696 * C582 +
          (((C8274 + C8275 + C8276) * C49713 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50884 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C49720) +
            (C8277 + C8278 + C8279) * C50612) *
               C50795 * C50891 +
           ((C8282 + C8281 + C8280) * C49713 -
            ((C8279 + C8278 + C8277) * C50884 +
             (C8276 + C8275 + C8274) * C49720) +
            (C8285 + C8284 + C8283) * C50612) *
               C50795 * C50634) *
              C50696 * C583 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C49720 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C50884 -
            (C8626 + C8627 + C8628) * C49713 -
            (C8629 + C8630 + C8631) * C50612) *
               C50795 * C50891 +
           ((C8628 + C8627 + C8626) * C49720 +
            (C8631 + C8630 + C8629) * C50884 -
            (C8048 * C2995 + C8043 * C2999 + C8047 * C698 + C8042 * C704 +
             C8046 * C589 + C8041 * C596) *
                C49713 -
            (C8048 * C2998 + C8043 * C3004 + C8047 * C703 + C8042 * C710 +
             C8046 * C597 + C8041 * C604) *
                C50612) *
               C50795 * C50634) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C283 +
            (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50795 * C111 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
            C175 * C285 + C176 * C280) *
               C50795 * C112 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
            C177 * C285 + C178 * C280) *
               C50795 * C113 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
            C179 * C285 + C180 * C280) *
               C50795 * C114) *
              C50696 * C50899 +
          ((C327 * C284 -
            ((C117 * C293 + C50765 * C304) * C278 +
             (C117 * C287 + C50765 * C294) * C283) +
            C328 * C279 - C329 * C285 - C330 * C280) *
               C50795 * C111 +
           (C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
            C331 * C285 - C332 * C280) *
               C50795 * C112 +
           (C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
            C333 * C285 - C334 * C280) *
               C50795 * C113 +
           (C333 * C284 - (C332 * C278 + C331 * C283) + C334 * C279 -
            (C117 * C291 + C50765 * C302) * C285 -
            (C117 * C303 + C50765 * C309) * C280) *
               C50795 * C114) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C696 +
            (C117 * C130 + C50765 * C143) * C50607) *
               C50795 * C111 +
           (C171 * C696 + C172 * C50607) * C50795 * C112 +
           (C173 * C696 + C174 * C50607) * C50795 * C113 +
           (C175 * C696 + C176 * C50607) * C50795 * C114) *
              C50696 * C692 -
          ((C332 * C50607 + C331 * C696) * C50795 * C114 +
           (C330 * C50607 + C329 * C696) * C50795 * C113 +
           (C328 * C50607 + C327 * C696) * C50795 * C112 +
           ((C117 * C293 + C50765 * C304) * C50607 +
            (C117 * C287 + C50765 * C294) * C696) *
               C50795 * C111) *
              C50696 * C693 +
          (((C117 * C587 + C50765 * C592) * C696 +
            (C117 * C593 + C50765 * C602) * C50607) *
               C50795 * C111 +
           (C620 * C696 + C621 * C50607) * C50795 * C112 +
           (C622 * C696 + C623 * C50607) * C50795 * C113 +
           (C624 * C696 + C625 * C50607) * C50795 * C114) *
              C50696 * C694 -
          (((C117 * C701 + C50765 * C709) * C50607 +
            (C117 * C697 + C50765 * C702) * C696) *
               C50795 * C114 +
           ((C117 * C703 + C50765 * C710) * C50607 +
            (C117 * C698 + C50765 * C704) * C696) *
               C50795 * C113 +
           ((C117 * C705 + C50765 * C711) * C50607 +
            (C117 * C699 + C50765 * C706) * C696) *
               C50795 * C112 +
           ((C117 * C707 + C50765 * C712) * C50607 +
            (C117 * C700 + C50765 * C708) * C696) *
               C50795 * C111) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C283 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C278 -
            (C8086 + C8087 + C8088) * C284 - (C8089 + C8090 + C8091) * C279 +
            (C8092 + C8093 + C8094) * C285 + (C8095 + C8096 + C8097) * C280) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C283 + (C8091 + C8090 + C8089) * C278 -
            (C8094 + C8093 + C8092) * C284 - (C8097 + C8096 + C8095) * C279 +
            (C8100 + C8099 + C8098) * C285 + (C8103 + C8102 + C8101) * C280) *
               C50795 * C50634) *
              C50696 * C50899 +
          (((C8274 + C8275 + C8276) * C284 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C278 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C283) +
            (C8277 + C8278 + C8279) * C279 - (C8280 + C8281 + C8282) * C285 -
            (C8283 + C8284 + C8285) * C280) *
               C50795 * C50891 +
           ((C8282 + C8281 + C8280) * C284 -
            ((C8279 + C8278 + C8277) * C278 + (C8276 + C8275 + C8274) * C283) +
            (C8285 + C8284 + C8283) * C279 -
            (C8048 * C697 + C8043 * C702 + C8047 * C590 + C8042 * C598 +
             C8046 * C289 + C8041 * C298) *
                C285 -
            (C8048 * C701 + C8043 * C709 + C8047 * C599 + C8042 * C605 +
             C8046 * C299 + C8041 * C307) *
                C280) *
               C50795 * C50634) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C696 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50607) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C696 + (C8091 + C8090 + C8089) * C50607) *
               C50795 * C50634) *
              C50696 * C692 -
          (((C8279 + C8278 + C8277) * C50607 + (C8276 + C8275 + C8274) * C696) *
               C50795 * C50634 +
           ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
             C8046 * C293 + C8041 * C304) *
                C50607 +
            (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
             C8046 * C287 + C8041 * C294) *
                C696) *
               C50795 * C50891) *
              C50696 * C693 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C696 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C50607) *
               C50795 * C50891 +
           ((C8628 + C8627 + C8626) * C696 + (C8631 + C8630 + C8629) * C50607) *
               C50795 * C50634) *
              C50696 * C694 -
          (((C8048 * C8731 + C8043 * C8735 + C8047 * C3000 + C8042 * C3005 +
             C8046 * C705 + C8041 * C711) *
                C50607 +
            (C8048 * C8729 + C8043 * C8732 + C8047 * C2996 + C8042 * C3001 +
             C8046 * C699 + C8041 * C706) *
                C696) *
               C50795 * C50634 +
           ((C8048 * C8733 + C8043 * C8736 + C8047 * C3002 + C8042 * C3006 +
             C8046 * C707 + C8041 * C712) *
                C50607 +
            (C8048 * C8730 + C8043 * C8734 + C8047 * C2997 + C8042 * C3003 +
             C8046 * C700 + C8041 * C708) *
                C696) *
               C50795 * C50891) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C283 +
            (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
            C173 * C285 + C174 * C280) *
               C50795 * C111 +
           (C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
            C175 * C285 + C176 * C280) *
               C50795 * C112 +
           (C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
            C177 * C285 + C178 * C280) *
               C50795 * C113 +
           (C175 * C283 + C176 * C278 - C177 * C284 - C178 * C279 +
            C179 * C285 + C180 * C280) *
               C50795 * C114) *
              C50900 +
          ((C475 * C284 -
            ((C117 * C441 + C50765 * C452) * C278 +
             (C117 * C435 + C50765 * C442) * C283) +
            C476 * C279 - C477 * C285 - C478 * C280) *
               C50795 * C111 +
           (C477 * C284 - (C476 * C278 + C475 * C283) + C478 * C279 -
            C479 * C285 - C480 * C280) *
               C50795 * C112 +
           (C479 * C284 - (C478 * C278 + C477 * C283) + C480 * C279 -
            C481 * C285 - C482 * C280) *
               C50795 * C113 +
           (C481 * C284 - (C480 * C278 + C479 * C283) + C482 * C279 -
            (C117 * C439 + C50765 * C450) * C285 -
            (C117 * C451 + C50765 * C457) * C280) *
               C50795 * C114) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C50795 * C111 +
            (C171 * C696 + C172 * C50607) * C50795 * C112 +
            (C173 * C696 + C174 * C50607) * C50795 * C113 +
            (C175 * C696 + C176 * C50607) * C50795 * C114) *
               C50900 -
           ((C480 * C50607 + C479 * C696) * C50795 * C114 +
            (C478 * C50607 + C477 * C696) * C50795 * C113 +
            (C476 * C50607 + C475 * C696) * C50795 * C112 +
            ((C117 * C441 + C50765 * C452) * C50607 +
             (C117 * C435 + C50765 * C442) * C696) *
                C50795 * C111) *
               C50708) *
              C582 +
          ((((C117 * C811 + C50765 * C819) * C696 +
             (C117 * C820 + C50765 * C835) * C50607) *
                C50795 * C111 +
            ((C117 * C812 + C50765 * C821) * C696 +
             (C117 * C822 + C50765 * C836) * C50607) *
                C50795 * C112 +
            ((C117 * C813 + C50765 * C823) * C696 +
             (C117 * C824 + C50765 * C837) * C50607) *
                C50795 * C113 +
            ((C117 * C814 + C50765 * C825) * C696 +
             (C117 * C826 + C50765 * C838) * C50607) *
                C50795 * C114) *
               C50708 -
           ((C332 * C50607 + C331 * C696) * C50795 * C114 +
            (C330 * C50607 + C329 * C696) * C50795 * C113 +
            (C328 * C50607 + C327 * C696) * C50795 * C112 +
            ((C117 * C293 + C50765 * C304) * C50607 +
             (C117 * C287 + C50765 * C294) * C696) *
                C50795 * C111) *
               C50900) *
              C583 +
          ((((C117 * C587 + C50765 * C592) * C696 +
             (C117 * C593 + C50765 * C602) * C50607) *
                C50795 * C111 +
            (C620 * C696 + C621 * C50607) * C50795 * C112 +
            (C622 * C696 + C623 * C50607) * C50795 * C113 +
            (C624 * C696 + C625 * C50607) * C50795 * C114) *
               C50900 -
           (((C117 * C827 + C50765 * C839) * C50607 +
             (C117 * C815 + C50765 * C828) * C696) *
                C50795 * C114 +
            ((C117 * C829 + C50765 * C840) * C50607 +
             (C117 * C816 + C50765 * C830) * C696) *
                C50795 * C113 +
            ((C117 * C831 + C50765 * C841) * C50607 +
             (C117 * C817 + C50765 * C832) * C696) *
                C50795 * C112 +
            ((C117 * C833 + C50765 * C842) * C50607 +
             (C117 * C818 + C50765 * C834) * C696) *
                C50795 * C111) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C283 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C278 -
            (C8086 + C8087 + C8088) * C284 - (C8089 + C8090 + C8091) * C279 +
            (C8092 + C8093 + C8094) * C285 + (C8095 + C8096 + C8097) * C280) *
               C50795 * C50891 +
           ((C8088 + C8087 + C8086) * C283 + (C8091 + C8090 + C8089) * C278 -
            (C8094 + C8093 + C8092) * C284 - (C8097 + C8096 + C8095) * C279 +
            (C8100 + C8099 + C8098) * C285 + (C8103 + C8102 + C8101) * C280) *
               C50795 * C50634) *
              C50900 +
          (((C8456 + C8457 + C8458) * C284 -
            ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
              C8046 * C441 + C8041 * C452) *
                 C278 +
             (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
              C8046 * C435 + C8041 * C442) *
                 C283) +
            (C8459 + C8460 + C8461) * C279 - (C8462 + C8463 + C8464) * C285 -
            (C8465 + C8466 + C8467) * C280) *
               C50795 * C50891 +
           ((C8464 + C8463 + C8462) * C284 -
            ((C8461 + C8460 + C8459) * C278 + (C8458 + C8457 + C8456) * C283) +
            (C8467 + C8466 + C8465) * C279 -
            (C8048 * C815 + C8043 * C828 + C8047 * C814 + C8042 * C825 +
             C8046 * C437 + C8041 * C446) *
                C285 -
            (C8048 * C827 + C8043 * C839 + C8047 * C826 + C8042 * C838 +
             C8046 * C447 + C8041 * C455) *
                C280) *
               C50795 * C50634) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C696 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50607) *
                C50795 * C50891 +
            ((C8088 + C8087 + C8086) * C696 +
             (C8091 + C8090 + C8089) * C50607) *
                C50795 * C50634) *
               C50900 -
           (((C8461 + C8460 + C8459) * C50607 +
             (C8458 + C8457 + C8456) * C696) *
                C50795 * C50634 +
            ((C8048 * C833 + C8043 * C842 + C8047 * C820 + C8042 * C835 +
              C8046 * C441 + C8041 * C452) *
                 C50607 +
             (C8048 * C818 + C8043 * C834 + C8047 * C811 + C8042 * C819 +
              C8046 * C435 + C8041 * C442) *
                 C696) *
                C50795 * C50891) *
               C50708) *
              C582 +
          ((((C8046 * C811 + C8041 * C819 + C8047 * C818 + C8042 * C834 +
              C8048 * C3155 + C8043 * C3161) *
                 C696 +
             (C8046 * C820 + C8041 * C835 + C8047 * C833 + C8042 * C842 +
              C8048 * C3160 + C8043 * C3164) *
                 C50607) *
                C50795 * C50891 +
            ((C8046 * C812 + C8041 * C821 + C8047 * C817 + C8042 * C832 +
              C8048 * C3154 + C8043 * C3159) *
                 C696 +
             (C8046 * C822 + C8041 * C836 + C8047 * C831 + C8042 * C841 +
              C8048 * C3158 + C8043 * C3163) *
                 C50607) *
                C50795 * C50634) *
               C50708 -
           (((C8279 + C8278 + C8277) * C50607 +
             (C8276 + C8275 + C8274) * C696) *
                C50795 * C50634 +
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50607 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C696) *
                C50795 * C50891) *
               C50900) *
              C583 +
          ((((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
              C8048 * C2997 + C8043 * C3003) *
                 C696 +
             (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
              C8048 * C3002 + C8043 * C3006) *
                 C50607) *
                C50795 * C50891 +
            ((C8628 + C8627 + C8626) * C696 +
             (C8631 + C8630 + C8629) * C50607) *
                C50795 * C50634) *
               C50900 -
           (((C8048 * C8885 + C8043 * C8889 + C8047 * C3158 + C8042 * C3163 +
              C8046 * C831 + C8041 * C841) *
                 C50607 +
             (C8048 * C8883 + C8043 * C8886 + C8047 * C3154 + C8042 * C3159 +
              C8046 * C817 + C8041 * C832) *
                 C696) *
                C50795 * C50634 +
            ((C8048 * C8887 + C8043 * C8890 + C8047 * C3160 + C8042 * C3164 +
              C8046 * C833 + C8041 * C842) *
                 C50607 +
             (C8048 * C8884 + C8043 * C8888 + C8047 * C3155 + C8042 * C3161 +
              C8046 * C818 + C8041 * C834) *
                 C696) *
                C50795 * C50891) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C1285 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50942 -
            (C2340 + C2341) * C1286 - (C2342 + C2343) * C50926 + C2356 * C1287 +
            C2357 * C1282) *
               C50795 * C2302 +
           ((C2341 + C2340) * C1285 + (C2343 + C2342) * C50942 -
            (C2345 + C2344) * C1286 - (C2347 + C2346) * C50926 +
            (C2349 + C2348) * C1287 + (C2351 + C2350) * C1282) *
               C50795 * C2303 +
           (C2356 * C1285 + C2357 * C50942 - C2358 * C1286 - C2359 * C50926 +
            (C2353 + C2352) * C1287 + (C2355 + C2354) * C1282) *
               C50795 * C2304) *
              C50696 * C1283 +
          (((C2530 + C2531) * C1286 -
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50942 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C1285) +
            (C2532 + C2533) * C50926 - C2542 * C1287 - C2543 * C1282) *
               C50795 * C2302 +
           ((C2535 + C2534) * C1286 -
            ((C2533 + C2532) * C50942 + (C2531 + C2530) * C1285) +
            (C2537 + C2536) * C50926 - (C2538 + C2539) * C1287 -
            (C2540 + C2541) * C1282) *
               C50795 * C2303 +
           ((C2539 + C2538) * C1286 - (C2543 * C50942 + C2542 * C1285) +
            (C2541 + C2540) * C50926 -
            (C2306 * C591 + C50781 * C600 + C2305 * C290 + C50911 * C300) *
                C1287 -
            (C2306 * C601 + C50781 * C606 + C2305 * C301 + C50911 * C308) *
                C1282) *
               C50795 * C2304) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C1285 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C50942 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C1286 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C50926 +
           (C10862 * C124 + C10857 * C133 + C10863 * C288 + C10858 * C296 +
            C10864 * C589 + C10859 * C596 + C10865 * C698 + C10860 * C704) *
               C1287 +
           (C10862 * C134 + C10857 * C145 + C10863 * C297 + C10858 * C306 +
            C10864 * C597 + C10859 * C604 + C10865 * C703 + C10860 * C710) *
               C1282) *
              C50795 * C50629 * C50696 * C1283 +
          ((C10862 * C286 + C10857 * C292 + C10863 * C588 + C10858 * C594 +
            C10864 * C699 + C10859 * C706 + C10865 * C2996 + C10860 * C3001) *
               C1286 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C50942 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C1285) +
           (C10862 * C295 + C10857 * C305 + C10863 * C595 + C10858 * C603 +
            C10864 * C705 + C10859 * C711 + C10865 * C3000 + C10860 * C3005) *
               C50926 -
           (C10865 * C2995 + C10860 * C2999 + C10864 * C698 + C10859 * C704 +
            C10863 * C589 + C10858 * C596 + C10862 * C288 + C10857 * C296) *
               C1287 -
           (C10865 * C2998 + C10860 * C3004 + C10864 * C703 + C10859 * C710 +
            C10863 * C597 + C10858 * C604 + C10862 * C297 + C10857 * C306) *
               C1282) *
              C50795 * C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C1391 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C1386 -
            (C2340 + C2341) * C1392 - (C2342 + C2343) * C50612) *
               C50795 * C2302 +
           ((C2341 + C2340) * C1391 + (C2343 + C2342) * C1386 -
            (C2345 + C2344) * C1392 - (C2347 + C2346) * C50612) *
               C50795 * C2303 +
           (C2356 * C1391 + C2357 * C1386 - C2358 * C1392 - C2359 * C50612) *
               C50795 * C2304) *
              C50696 * C50944 +
          (((C2530 + C2531) * C1392 -
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C1386 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C1391) +
            (C2532 + C2533) * C50612) *
               C50795 * C2302 +
           ((C2535 + C2534) * C1392 -
            ((C2533 + C2532) * C1386 + (C2531 + C2530) * C1391) +
            (C2537 + C2536) * C50612) *
               C50795 * C2303 +
           ((C2539 + C2538) * C1392 - (C2543 * C1386 + C2542 * C1391) +
            (C2541 + C2540) * C50612) *
               C50795 * C2304) *
              C50696 * C50932 +
          (((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                C1391 +
            (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                C1386 -
            (C2890 + C2891) * C1392 - (C2892 + C2893) * C50612) *
               C50795 * C2302 +
           ((C2891 + C2890) * C1391 + (C2893 + C2892) * C1386 -
            (C2894 + C2895) * C1392 - (C2896 + C2897) * C50612) *
               C50795 * C2303 +
           ((C2895 + C2894) * C1391 + (C2897 + C2896) * C1386 -
            (C2306 * C697 + C50781 * C702 + C2305 * C590 + C50911 * C598) *
                C1392 -
            (C2306 * C701 + C50781 * C709 + C2305 * C599 + C50911 * C605) *
                C50612) *
               C50795 * C2304) *
              C50696 * C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C1391 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C1386 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C1392 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C50612) *
              C50795 * C50629 * C50696 * C50944 +
          ((C10862 * C286 + C10857 * C292 + C10863 * C588 + C10858 * C594 +
            C10864 * C699 + C10859 * C706 + C10865 * C2996 + C10860 * C3001) *
               C1392 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C1386 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C1391) +
           (C10862 * C295 + C10857 * C305 + C10863 * C595 + C10858 * C603 +
            C10864 * C705 + C10859 * C711 + C10865 * C3000 + C10860 * C3005) *
               C50612) *
              C50795 * C50629 * C50696 * C50932 +
          ((C10862 * C587 + C10857 * C592 + C10863 * C700 + C10858 * C708 +
            C10864 * C2997 + C10859 * C3003 + C10865 * C8730 + C10860 * C8734) *
               C1391 +
           (C10862 * C593 + C10857 * C602 + C10863 * C707 + C10858 * C712 +
            C10864 * C3002 + C10859 * C3006 + C10865 * C8733 + C10860 * C8736) *
               C1386 -
           (C10865 * C8729 + C10860 * C8732 + C10864 * C2996 + C10859 * C3001 +
            C10863 * C699 + C10858 * C706 + C10862 * C588 + C10857 * C594) *
               C1392 -
           (C10865 * C8731 + C10860 * C8735 + C10864 * C3000 + C10859 * C3005 +
            C10863 * C705 + C10858 * C711 + C10862 * C595 + C10857 * C603) *
               C50612) *
              C50795 * C50629 * C50696 * C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C1391 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C1386 -
             (C2340 + C2341) * C1392 - (C2342 + C2343) * C50612) *
                C50795 * C2302 +
            ((C2341 + C2340) * C1391 + (C2343 + C2342) * C1386 -
             (C2345 + C2344) * C1392 - (C2347 + C2346) * C50612) *
                C50795 * C2303 +
            (C2356 * C1391 + C2357 * C1386 - C2358 * C1392 - C2359 * C50612) *
                C50795 * C2304) *
               C50900 +
           (((C2714 + C2715) * C1392 -
             ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                  C1386 +
              (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                  C1391) +
             (C2716 + C2717) * C50612) *
                C50795 * C2302 +
            ((C2719 + C2718) * C1392 -
             ((C2717 + C2716) * C1386 + (C2715 + C2714) * C1391) +
             (C2721 + C2720) * C50612) *
                C50795 * C2303 +
            ((C2723 + C2722) * C1392 - (C2727 * C1386 + C2726 * C1391) +
             (C2725 + C2724) * C50612) *
                C50795 * C2304) *
               C50708) *
              C1283 +
          ((((C2530 + C2531) * C1392 -
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C1386 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C1391) +
             (C2532 + C2533) * C50612) *
                C50795 * C2302 +
            ((C2535 + C2534) * C1392 -
             ((C2533 + C2532) * C1386 + (C2531 + C2530) * C1391) +
             (C2537 + C2536) * C50612) *
                C50795 * C2303 +
            ((C2539 + C2538) * C1392 - (C2543 * C1386 + C2542 * C1391) +
             (C2541 + C2540) * C50612) *
                C50795 * C2304) *
               C50900 +
           (((C2305 * C811 + C50911 * C819 + C2306 * C818 + C50781 * C834) *
                 C1391 +
             (C2305 * C820 + C50911 * C835 + C2306 * C833 + C50781 * C842) *
                 C1386 -
             (C4106 + C4107) * C1392 - (C4108 + C4109) * C50612) *
                C50795 * C2302 +
            ((C4107 + C4106) * C1391 + (C4109 + C4108) * C1386 -
             (C4110 + C4111) * C1392 - (C4112 + C4113) * C50612) *
                C50795 * C2303 +
            ((C4111 + C4110) * C1391 + (C4113 + C4112) * C1386 -
             (C2306 * C815 + C50781 * C828 + C2305 * C814 + C50911 * C825) *
                 C1392 -
             (C2306 * C827 + C50781 * C839 + C2305 * C826 + C50911 * C838) *
                 C50612) *
                C50795 * C2304) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
             C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
                C1391 +
            (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
             C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
                C1386 -
            (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
             C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
                C1392 -
            (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
             C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
                C50612) *
               C50795 * C50629 * C50900 +
           ((C10862 * C434 + C10857 * C440 + C10863 * C812 + C10858 * C821 +
             C10864 * C817 + C10859 * C832 + C10865 * C3154 + C10860 * C3159) *
                C1392 -
            ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
              C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                 C1386 +
             (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
              C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                 C1391) +
            (C10862 * C443 + C10857 * C453 + C10863 * C822 + C10858 * C836 +
             C10864 * C831 + C10859 * C841 + C10865 * C3158 + C10860 * C3163) *
                C50612) *
               C50795 * C50629 * C50708) *
              C1283 +
          (((C10862 * C286 + C10857 * C292 + C10863 * C588 + C10858 * C594 +
             C10864 * C699 + C10859 * C706 + C10865 * C2996 + C10860 * C3001) *
                C1392 -
            ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
              C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                 C1386 +
             (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
              C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                 C1391) +
            (C10862 * C295 + C10857 * C305 + C10863 * C595 + C10858 * C603 +
             C10864 * C705 + C10859 * C711 + C10865 * C3000 + C10860 * C3005) *
                C50612) *
               C50795 * C50629 * C50900 +
           ((C10862 * C811 + C10857 * C819 + C10863 * C818 + C10858 * C834 +
             C10864 * C3155 + C10859 * C3161 + C10865 * C8884 +
             C10860 * C8888) *
                C1391 +
            (C10862 * C820 + C10857 * C835 + C10863 * C833 + C10858 * C842 +
             C10864 * C3160 + C10859 * C3164 + C10865 * C8887 +
             C10860 * C8890) *
                C1386 -
            (C10865 * C8883 + C10860 * C8886 + C10864 * C3154 + C10859 * C3159 +
             C10863 * C817 + C10858 * C832 + C10862 * C812 + C10857 * C821) *
                C1392 -
            (C10865 * C8885 + C10860 * C8889 + C10864 * C3158 + C10859 * C3163 +
             C10863 * C831 + C10858 * C841 + C10862 * C822 + C10857 * C836) *
                C50612) *
               C50795 * C50629 * C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C49720 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50884 -
             (C2340 + C2341) * C49713 - (C2342 + C2343) * C50612) *
                C50795 * C2302 +
            ((C2341 + C2340) * C49720 + (C2343 + C2342) * C50884 -
             (C2345 + C2344) * C49713 - (C2347 + C2346) * C50612) *
                C50795 * C2303 +
            (C2356 * C49720 + C2357 * C50884 - C2358 * C49713 -
             C2359 * C50612) *
                C50795 * C2304) *
               C1643 +
           (((C2714 + C2715) * C49713 -
             ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                  C50884 +
              (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                  C49720) +
             (C2716 + C2717) * C50612) *
                C50795 * C2302 +
            ((C2719 + C2718) * C49713 -
             ((C2717 + C2716) * C50884 + (C2715 + C2714) * C49720) +
             (C2721 + C2720) * C50612) *
                C50795 * C2303 +
            ((C2723 + C2722) * C49713 - (C2727 * C50884 + C2726 * C49720) +
             (C2725 + C2724) * C50612) *
                C50795 * C2304) *
               C50708) *
              C1283 +
          ((((C2530 + C2531) * C49713 -
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C50884 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C49720) +
             (C2532 + C2533) * C50612) *
                C50795 * C2302 +
            ((C2535 + C2534) * C49713 -
             ((C2533 + C2532) * C50884 + (C2531 + C2530) * C49720) +
             (C2537 + C2536) * C50612) *
                C50795 * C2303 +
            ((C2539 + C2538) * C49713 - (C2543 * C50884 + C2542 * C49720) +
             (C2541 + C2540) * C50612) *
                C50795 * C2304) *
               C1643 +
           (((C2305 * C811 + C50911 * C819 + C2306 * C818 + C50781 * C834) *
                 C49720 +
             (C2305 * C820 + C50911 * C835 + C2306 * C833 + C50781 * C842) *
                 C50884 -
             (C4106 + C4107) * C49713 - (C4108 + C4109) * C50612) *
                C50795 * C2302 +
            ((C4107 + C4106) * C49720 + (C4109 + C4108) * C50884 -
             (C4110 + C4111) * C49713 - (C4112 + C4113) * C50612) *
                C50795 * C2303 +
            ((C4111 + C4110) * C49720 + (C4113 + C4112) * C50884 -
             (C2306 * C815 + C50781 * C828 + C2305 * C814 + C50911 * C825) *
                 C49713 -
             (C2306 * C827 + C50781 * C839 + C2305 * C826 + C50911 * C838) *
                 C50612) *
                C50795 * C2304) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
             C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
                C49720 +
            (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
             C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
                C50884 -
            (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
             C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
                C49713 -
            (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
             C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
                C50612) *
               C50795 * C50629 * C1643 +
           ((C10862 * C434 + C10857 * C440 + C10863 * C812 + C10858 * C821 +
             C10864 * C817 + C10859 * C832 + C10865 * C3154 + C10860 * C3159) *
                C49713 -
            ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
              C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                 C50884 +
             (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
              C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                 C49720) +
            (C10862 * C443 + C10857 * C453 + C10863 * C822 + C10858 * C836 +
             C10864 * C831 + C10859 * C841 + C10865 * C3158 + C10860 * C3163) *
                C50612) *
               C50795 * C50629 * C50708) *
              C1283 +
          (((C10862 * C286 + C10857 * C292 + C10863 * C588 + C10858 * C594 +
             C10864 * C699 + C10859 * C706 + C10865 * C2996 + C10860 * C3001) *
                C49713 -
            ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
              C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                 C50884 +
             (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
              C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                 C49720) +
            (C10862 * C295 + C10857 * C305 + C10863 * C595 + C10858 * C603 +
             C10864 * C705 + C10859 * C711 + C10865 * C3000 + C10860 * C3005) *
                C50612) *
               C50795 * C50629 * C1643 +
           ((C10862 * C811 + C10857 * C819 + C10863 * C818 + C10858 * C834 +
             C10864 * C3155 + C10859 * C3161 + C10865 * C8884 +
             C10860 * C8888) *
                C49720 +
            (C10862 * C820 + C10857 * C835 + C10863 * C833 + C10858 * C842 +
             C10864 * C3160 + C10859 * C3164 + C10865 * C8887 +
             C10860 * C8890) *
                C50884 -
            (C10865 * C8883 + C10860 * C8886 + C10864 * C3154 + C10859 * C3159 +
             C10863 * C817 + C10858 * C832 + C10862 * C812 + C10857 * C821) *
                C49713 -
            (C10865 * C8885 + C10860 * C8889 + C10864 * C3158 + C10859 * C3163 +
             C10863 * C831 + C10858 * C841 + C10862 * C822 + C10857 * C836) *
                C50612) *
               C50795 * C50629 * C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C696 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50607) *
                C50795 * C2302 +
            ((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C50795 *
                C2303 +
            (C2356 * C696 + C2357 * C50607) * C50795 * C2304) *
               C1643 -
           ((C2727 * C50607 + C2726 * C696) * C50795 * C2304 +
            ((C2717 + C2716) * C50607 + (C2715 + C2714) * C696) * C50795 *
                C2303 +
            ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                 C50607 +
             (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                 C696) *
                C50795 * C2302) *
               C50708) *
              C50944 +
          ((((C2305 * C811 + C50911 * C819 + C2306 * C818 + C50781 * C834) *
                 C696 +
             (C2305 * C820 + C50911 * C835 + C2306 * C833 + C50781 * C842) *
                 C50607) *
                C50795 * C2302 +
            ((C4107 + C4106) * C696 + (C4109 + C4108) * C50607) * C50795 *
                C2303 +
            ((C4111 + C4110) * C696 + (C4113 + C4112) * C50607) * C50795 *
                C2304) *
               C50708 -
           ((C2543 * C50607 + C2542 * C696) * C50795 * C2304 +
            ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C50795 *
                C2303 +
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50607 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C696) *
                C50795 * C2302) *
               C1643) *
              C50932 +
          ((((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                 C696 +
             (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                 C50607) *
                C50795 * C2302 +
            ((C2891 + C2890) * C696 + (C2893 + C2892) * C50607) * C50795 *
                C2303 +
            ((C2895 + C2894) * C696 + (C2897 + C2896) * C50607) * C50795 *
                C2304) *
               C1643 -
           (((C2306 * C3156 + C50781 * C3162 + C2305 * C829 + C50911 * C840) *
                 C50607 +
             (C2306 * C3153 + C50781 * C3157 + C2305 * C816 + C50911 * C830) *
                 C696) *
                C50795 * C2304 +
            ((C2306 * C3158 + C50781 * C3163 + C2305 * C831 + C50911 * C841) *
                 C50607 +
             (C2306 * C3154 + C50781 * C3159 + C2305 * C817 + C50911 * C832) *
                 C696) *
                C50795 * C2303 +
            ((C2306 * C3160 + C50781 * C3164 + C2305 * C833 + C50911 * C842) *
                 C50607 +
             (C2306 * C3155 + C50781 * C3161 + C2305 * C818 + C50911 * C834) *
                 C696) *
                C50795 * C2302) *
               C50708) *
              C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
             C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
                C696 +
            (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
             C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
                C50607) *
               C50795 * C50629 * C1643 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C50607 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C696) *
               C50795 * C50629 * C50708) *
              C50944 +
          (((C10862 * C811 + C10857 * C819 + C10863 * C818 + C10858 * C834 +
             C10864 * C3155 + C10859 * C3161 + C10865 * C8884 +
             C10860 * C8888) *
                C696 +
            (C10862 * C820 + C10857 * C835 + C10863 * C833 + C10858 * C842 +
             C10864 * C3160 + C10859 * C3164 + C10865 * C8887 +
             C10860 * C8890) *
                C50607) *
               C50795 * C50629 * C50708 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C50607 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C696) *
               C50795 * C50629 * C1643) *
              C50932 +
          (((C10862 * C587 + C10857 * C592 + C10863 * C700 + C10858 * C708 +
             C10864 * C2997 + C10859 * C3003 + C10865 * C8730 +
             C10860 * C8734) *
                C696 +
            (C10862 * C593 + C10857 * C602 + C10863 * C707 + C10858 * C712 +
             C10864 * C3002 + C10859 * C3006 + C10865 * C8733 +
             C10860 * C8736) *
                C50607) *
               C50795 * C50629 * C1643 -
           ((C10865 * C11329 + C10860 * C11331 + C10864 * C8887 +
             C10859 * C8890 + C10863 * C3160 + C10858 * C3164 + C10862 * C833 +
             C10857 * C842) *
                C50607 +
            (C10865 * C11328 + C10860 * C11330 + C10864 * C8884 +
             C10859 * C8888 + C10863 * C3155 + C10858 * C3161 + C10862 * C818 +
             C10857 * C834) *
                C696) *
               C50795 * C50629 * C50708) *
              C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C696 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50607) *
                C50795 * C2302 +
            ((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C50795 *
                C2303 +
            (C2356 * C696 + C2357 * C50607) * C50795 * C2304) *
               C50945 -
           ((C2727 * C50607 + C2726 * C696) * C50795 * C2304 +
            ((C2717 + C2716) * C50607 + (C2715 + C2714) * C696) * C50795 *
                C2303 +
            ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                 C50607 +
             (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                 C696) *
                C50795 * C2302) *
               C50935 +
           (((C2305 * C944 + C50911 * C949 + C2306 * C1083 + C50781 * C1091) *
                 C696 +
             (C2305 * C950 + C50911 * C959 + C2306 * C1090 + C50781 * C1095) *
                 C50607) *
                C50795 * C2302 +
            ((C3329 + C3328) * C696 + (C3331 + C3330) * C50607) * C50795 *
                C2303 +
            ((C3333 + C3332) * C696 + (C3335 + C3334) * C50607) * C50795 *
                C2304) *
               C1875) *
              C1283 +
          ((((C2305 * C811 + C50911 * C819 + C2306 * C818 + C50781 * C834) *
                 C696 +
             (C2305 * C820 + C50911 * C835 + C2306 * C833 + C50781 * C842) *
                 C50607) *
                C50795 * C2302 +
            ((C4107 + C4106) * C696 + (C4109 + C4108) * C50607) * C50795 *
                C2303 +
            ((C4111 + C4110) * C696 + (C4113 + C4112) * C50607) * C50795 *
                C2304) *
               C50935 -
           ((C2543 * C50607 + C2542 * C696) * C50795 * C2304 +
            ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C50795 *
                C2303 +
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50607 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C696) *
                C50795 * C2302) *
               C50945 -
           (((C2306 * C3484 + C50781 * C3490 + C2305 * C1086 + C50911 * C1093) *
                 C50607 +
             (C2306 * C3481 + C50781 * C3485 + C2305 * C1081 + C50911 * C1087) *
                 C696) *
                C50795 * C2304 +
            ((C2306 * C3486 + C50781 * C3491 + C2305 * C1088 + C50911 * C1094) *
                 C50607 +
             (C2306 * C3482 + C50781 * C3487 + C2305 * C1082 + C50911 * C1089) *
                 C696) *
                C50795 * C2303 +
            ((C2306 * C3488 + C50781 * C3492 + C2305 * C1090 + C50911 * C1095) *
                 C50607 +
             (C2306 * C3483 + C50781 * C3489 + C2305 * C1083 + C50911 * C1091) *
                 C696) *
                C50795 * C2302) *
               C1875) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
             C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
                C696 +
            (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
             C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
                C50607) *
               C50795 * C50629 * C50945 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C50607 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C696) *
               C50795 * C50629 * C50935 +
           ((C10862 * C944 + C10857 * C949 + C10863 * C1083 + C10858 * C1091 +
             C10864 * C3483 + C10859 * C3489 + C10865 * C9202 +
             C10860 * C9206) *
                C696 +
            (C10862 * C950 + C10857 * C959 + C10863 * C1090 + C10858 * C1095 +
             C10864 * C3488 + C10859 * C3492 + C10865 * C9205 +
             C10860 * C9208) *
                C50607) *
               C50795 * C50629 * C1875) *
              C1283 +
          (((C10862 * C811 + C10857 * C819 + C10863 * C818 + C10858 * C834 +
             C10864 * C3155 + C10859 * C3161 + C10865 * C8884 +
             C10860 * C8888) *
                C696 +
            (C10862 * C820 + C10857 * C835 + C10863 * C833 + C10858 * C842 +
             C10864 * C3160 + C10859 * C3164 + C10865 * C8887 +
             C10860 * C8890) *
                C50607) *
               C50795 * C50629 * C50935 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C50607 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C696) *
               C50795 * C50629 * C50945 -
           ((C10865 * C11529 + C10860 * C11531 + C10864 * C9205 +
             C10859 * C9208 + C10863 * C3488 + C10858 * C3492 + C10862 * C1090 +
             C10857 * C1095) *
                C50607 +
            (C10865 * C11528 + C10860 * C11530 + C10864 * C9202 +
             C10859 * C9206 + C10863 * C3483 + C10858 * C3489 + C10862 * C1083 +
             C10857 * C1091) *
                C696) *
               C50795 * C50629 * C1875) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C49720 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50884 -
            (C2340 + C2341) * C49713 - (C2342 + C2343) * C50612) *
               C50795 * C2302 +
           ((C2341 + C2340) * C49720 + (C2343 + C2342) * C50884 -
            (C2345 + C2344) * C49713 - (C2347 + C2346) * C50612) *
               C50795 * C2303 +
           (C2356 * C49720 + C2357 * C50884 - C2358 * C49713 - C2359 * C50612) *
               C50795 * C2304) *
              C50696 * C582 +
          (((C2530 + C2531) * C49713 -
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50884 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C49720) +
            (C2532 + C2533) * C50612) *
               C50795 * C2302 +
           ((C2535 + C2534) * C49713 -
            ((C2533 + C2532) * C50884 + (C2531 + C2530) * C49720) +
            (C2537 + C2536) * C50612) *
               C50795 * C2303 +
           ((C2539 + C2538) * C49713 - (C2543 * C50884 + C2542 * C49720) +
            (C2541 + C2540) * C50612) *
               C50795 * C2304) *
              C50696 * C583 +
          (((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                C49720 +
            (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                C50884 -
            (C2890 + C2891) * C49713 - (C2892 + C2893) * C50612) *
               C50795 * C2302 +
           ((C2891 + C2890) * C49720 + (C2893 + C2892) * C50884 -
            (C2894 + C2895) * C49713 - (C2896 + C2897) * C50612) *
               C50795 * C2303 +
           ((C2895 + C2894) * C49720 + (C2897 + C2896) * C50884 -
            (C2306 * C697 + C50781 * C702 + C2305 * C590 + C50911 * C598) *
                C49713 -
            (C2306 * C701 + C50781 * C709 + C2305 * C599 + C50911 * C605) *
                C50612) *
               C50795 * C2304) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
               C118 +
           (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
               C106 -
           (C2340 + C2341) * C119 - (C2342 + C2343) * C107 + C2356 * C120 +
           C2357 * C108 - C2358 * C121 - C2359 * C109) *
              C50795 * C2302 +
          ((C2341 + C2340) * C118 + (C2343 + C2342) * C106 -
           (C2345 + C2344) * C119 - (C2347 + C2346) * C107 +
           (C2349 + C2348) * C120 + (C2351 + C2350) * C108 -
           (C2352 + C2353) * C121 - (C2354 + C2355) * C109) *
              C50795 * C2303 +
          (C2356 * C118 + C2357 * C106 - C2358 * C119 - C2359 * C107 +
           (C2353 + C2352) * C120 + (C2355 + C2354) * C108 -
           (C2306 * C291 + C50781 * C302 + C2305 * C127 + C50911 * C139) *
               C121 -
           (C2306 * C303 + C50781 * C309 + C2305 * C140 + C50911 * C148) *
               C109) *
              C50795 * C2304) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C49720 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50884 -
            (C2340 + C2341) * C49713 - (C2342 + C2343) * C50612) *
               C50795 * C2302 +
           ((C2341 + C2340) * C49720 + (C2343 + C2342) * C50884 -
            (C2345 + C2344) * C49713 - (C2347 + C2346) * C50612) *
               C50795 * C2303 +
           (C2356 * C49720 + C2357 * C50884 - C2358 * C49713 - C2359 * C50612) *
               C50795 * C2304) *
              C941 +
          (((C2714 + C2715) * C49713 -
            ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                 C50884 +
             (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                 C49720) +
            (C2716 + C2717) * C50612) *
               C50795 * C2302 +
           ((C2719 + C2718) * C49713 -
            ((C2717 + C2716) * C50884 + (C2715 + C2714) * C49720) +
            (C2721 + C2720) * C50612) *
               C50795 * C2303 +
           ((C2723 + C2722) * C49713 - (C2727 * C50884 + C2726 * C49720) +
            (C2725 + C2724) * C50612) *
               C50795 * C2304) *
              C942 +
          (((C2305 * C944 + C50911 * C949 + C2306 * C1083 + C50781 * C1091) *
                C49720 +
            (C2305 * C950 + C50911 * C959 + C2306 * C1090 + C50781 * C1095) *
                C50884 -
            (C3328 + C3329) * C49713 - (C3330 + C3331) * C50612) *
               C50795 * C2302 +
           ((C3329 + C3328) * C49720 + (C3331 + C3330) * C50884 -
            (C3332 + C3333) * C49713 - (C3334 + C3335) * C50612) *
               C50795 * C2303 +
           ((C3333 + C3332) * C49720 + (C3335 + C3334) * C50884 -
            (C2306 * C1080 + C50781 * C1085 + C2305 * C947 + C50911 * C955) *
                C49713 -
            (C2306 * C1084 + C50781 * C1092 + C2305 * C956 + C50911 * C962) *
                C50612) *
               C50795 * C2304) *
              C943) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
           C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
              C118 +
          (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
           C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
              C106 -
          (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
           C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
              C119 -
          (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
           C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
              C107 +
          (C10862 * C124 + C10857 * C133 + C10863 * C288 + C10858 * C296 +
           C10864 * C589 + C10859 * C596 + C10865 * C698 + C10860 * C704) *
              C120 +
          (C10862 * C134 + C10857 * C145 + C10863 * C297 + C10858 * C306 +
           C10864 * C597 + C10859 * C604 + C10865 * C703 + C10860 * C710) *
              C108 -
          (C10865 * C697 + C10860 * C702 + C10864 * C590 + C10859 * C598 +
           C10863 * C289 + C10858 * C298 + C10862 * C125 + C10857 * C135) *
              C121 -
          (C10865 * C701 + C10860 * C709 + C10864 * C599 + C10859 * C605 +
           C10863 * C299 + C10858 * C307 + C10862 * C136 + C10857 * C146) *
              C109) *
         C50795 * C50629 * C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C49720 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C50884 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C49713 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C50612) *
              C50795 * C50629 * C50696 * C582 +
          ((C10862 * C286 + C10857 * C292 + C10863 * C588 + C10858 * C594 +
            C10864 * C699 + C10859 * C706 + C10865 * C2996 + C10860 * C3001) *
               C49713 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C50884 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C49720) +
           (C10862 * C295 + C10857 * C305 + C10863 * C595 + C10858 * C603 +
            C10864 * C705 + C10859 * C711 + C10865 * C3000 + C10860 * C3005) *
               C50612) *
              C50795 * C50629 * C50696 * C583 +
          ((C10862 * C587 + C10857 * C592 + C10863 * C700 + C10858 * C708 +
            C10864 * C2997 + C10859 * C3003 + C10865 * C8730 + C10860 * C8734) *
               C49720 +
           (C10862 * C593 + C10857 * C602 + C10863 * C707 + C10858 * C712 +
            C10864 * C3002 + C10859 * C3006 + C10865 * C8733 + C10860 * C8736) *
               C50884 -
           (C10865 * C8729 + C10860 * C8732 + C10864 * C2996 + C10859 * C3001 +
            C10863 * C699 + C10858 * C706 + C10862 * C588 + C10857 * C594) *
               C49713 -
           (C10865 * C8731 + C10860 * C8735 + C10864 * C3000 + C10859 * C3005 +
            C10863 * C705 + C10858 * C711 + C10862 * C595 + C10857 * C603) *
               C50612) *
              C50795 * C50629 * C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C49720 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C50884 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C49713 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C50612) *
              C50795 * C50629 * C941 +
          ((C10862 * C434 + C10857 * C440 + C10863 * C812 + C10858 * C821 +
            C10864 * C817 + C10859 * C832 + C10865 * C3154 + C10860 * C3159) *
               C49713 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C50884 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C49720) +
           (C10862 * C443 + C10857 * C453 + C10863 * C822 + C10858 * C836 +
            C10864 * C831 + C10859 * C841 + C10865 * C3158 + C10860 * C3163) *
               C50612) *
              C50795 * C50629 * C942 +
          ((C10862 * C944 + C10857 * C949 + C10863 * C1083 + C10858 * C1091 +
            C10864 * C3483 + C10859 * C3489 + C10865 * C9202 + C10860 * C9206) *
               C49720 +
           (C10862 * C950 + C10857 * C959 + C10863 * C1090 + C10858 * C1095 +
            C10864 * C3488 + C10859 * C3492 + C10865 * C9205 + C10860 * C9208) *
               C50884 -
           (C10865 * C9201 + C10860 * C9204 + C10864 * C3482 + C10859 * C3487 +
            C10863 * C1082 + C10858 * C1089 + C10862 * C945 + C10857 * C951) *
               C49713 -
           (C10865 * C9203 + C10860 * C9207 + C10864 * C3486 + C10859 * C3491 +
            C10863 * C1088 + C10858 * C1094 + C10862 * C952 + C10857 * C960) *
               C50612) *
              C50795 * C50629 * C943) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C696 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50607) *
               C50795 * C2302 +
           ((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C50795 *
               C2303 +
           (C2356 * C696 + C2357 * C50607) * C50795 * C2304) *
              C50696 * C692 -
          ((C2543 * C50607 + C2542 * C696) * C50795 * C2304 +
           ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C50795 *
               C2303 +
           ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                C50607 +
            (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                C696) *
               C50795 * C2302) *
              C50696 * C693 +
          (((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                C696 +
            (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                C50607) *
               C50795 * C2302 +
           ((C2891 + C2890) * C696 + (C2893 + C2892) * C50607) * C50795 *
               C2303 +
           ((C2895 + C2894) * C696 + (C2897 + C2896) * C50607) * C50795 *
               C2304) *
              C50696 * C694 -
          (((C2306 * C2998 + C50781 * C3004 + C2305 * C703 + C50911 * C710) *
                C50607 +
            (C2306 * C2995 + C50781 * C2999 + C2305 * C698 + C50911 * C704) *
                C696) *
               C50795 * C2304 +
           ((C2306 * C3000 + C50781 * C3005 + C2305 * C705 + C50911 * C711) *
                C50607 +
            (C2306 * C2996 + C50781 * C3001 + C2305 * C699 + C50911 * C706) *
                C696) *
               C50795 * C2303 +
           ((C2306 * C3002 + C50781 * C3006 + C2305 * C707 + C50911 * C712) *
                C50607 +
            (C2306 * C2997 + C50781 * C3003 + C2305 * C700 + C50911 * C708) *
                C696) *
               C50795 * C2302) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C283 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C278 -
            (C2340 + C2341) * C284 - (C2342 + C2343) * C279 + C2356 * C285 +
            C2357 * C280) *
               C50795 * C2302 +
           ((C2341 + C2340) * C283 + (C2343 + C2342) * C278 -
            (C2345 + C2344) * C284 - (C2347 + C2346) * C279 +
            (C2349 + C2348) * C285 + (C2351 + C2350) * C280) *
               C50795 * C2303 +
           (C2356 * C283 + C2357 * C278 - C2358 * C284 - C2359 * C279 +
            (C2353 + C2352) * C285 + (C2355 + C2354) * C280) *
               C50795 * C2304) *
              C50696 * C50899 +
          (((C2530 + C2531) * C284 -
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C278 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C283) +
            (C2532 + C2533) * C279 - C2542 * C285 - C2543 * C280) *
               C50795 * C2302 +
           ((C2535 + C2534) * C284 -
            ((C2533 + C2532) * C278 + (C2531 + C2530) * C283) +
            (C2537 + C2536) * C279 - (C2538 + C2539) * C285 -
            (C2540 + C2541) * C280) *
               C50795 * C2303 +
           ((C2539 + C2538) * C284 - (C2543 * C278 + C2542 * C283) +
            (C2541 + C2540) * C279 -
            (C2306 * C591 + C50781 * C600 + C2305 * C290 + C50911 * C300) *
                C285 -
            (C2306 * C601 + C50781 * C606 + C2305 * C301 + C50911 * C308) *
                C280) *
               C50795 * C2304) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C696 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50607) *
                C50795 * C2302 +
            ((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C50795 *
                C2303 +
            (C2356 * C696 + C2357 * C50607) * C50795 * C2304) *
               C941 -
           ((C2727 * C50607 + C2726 * C696) * C50795 * C2304 +
            ((C2717 + C2716) * C50607 + (C2715 + C2714) * C696) * C50795 *
                C2303 +
            ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                 C50607 +
             (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                 C696) *
                C50795 * C2302) *
               C942 +
           (((C2305 * C944 + C50911 * C949 + C2306 * C1083 + C50781 * C1091) *
                 C696 +
             (C2305 * C950 + C50911 * C959 + C2306 * C1090 + C50781 * C1095) *
                 C50607) *
                C50795 * C2302 +
            ((C3329 + C3328) * C696 + (C3331 + C3330) * C50607) * C50795 *
                C2303 +
            ((C3333 + C3332) * C696 + (C3335 + C3334) * C50607) * C50795 *
                C2304) *
               C943) *
              C50899 +
          ((((C2305 * C811 + C50911 * C819 + C2306 * C818 + C50781 * C834) *
                 C696 +
             (C2305 * C820 + C50911 * C835 + C2306 * C833 + C50781 * C842) *
                 C50607) *
                C50795 * C2302 +
            ((C2305 * C812 + C50911 * C821 + C2306 * C817 + C50781 * C832) *
                 C696 +
             (C2305 * C822 + C50911 * C836 + C2306 * C831 + C50781 * C841) *
                 C50607) *
                C50795 * C2303 +
            ((C2305 * C813 + C50911 * C823 + C2306 * C816 + C50781 * C830) *
                 C696 +
             (C2305 * C824 + C50911 * C837 + C2306 * C829 + C50781 * C840) *
                 C50607) *
                C50795 * C2304) *
               C942 -
           ((C2543 * C50607 + C2542 * C696) * C50795 * C2304 +
            ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C50795 *
                C2303 +
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50607 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C696) *
                C50795 * C2302) *
               C941 -
           (((C2306 * C3484 + C50781 * C3490 + C2305 * C1086 + C50911 * C1093) *
                 C50607 +
             (C2306 * C3481 + C50781 * C3485 + C2305 * C1081 + C50911 * C1087) *
                 C696) *
                C50795 * C2304 +
            ((C2306 * C3486 + C50781 * C3491 + C2305 * C1088 + C50911 * C1094) *
                 C50607 +
             (C2306 * C3482 + C50781 * C3487 + C2305 * C1082 + C50911 * C1089) *
                 C696) *
                C50795 * C2303 +
            ((C2306 * C3488 + C50781 * C3492 + C2305 * C1090 + C50911 * C1095) *
                 C50607 +
             (C2306 * C3483 + C50781 * C3489 + C2305 * C1083 + C50911 * C1091) *
                 C696) *
                C50795 * C2302) *
               C943) *
              C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C283 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C278 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C284 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C279 +
           (C10862 * C124 + C10857 * C133 + C10863 * C288 + C10858 * C296 +
            C10864 * C589 + C10859 * C596 + C10865 * C698 + C10860 * C704) *
               C285 +
           (C10862 * C134 + C10857 * C145 + C10863 * C297 + C10858 * C306 +
            C10864 * C597 + C10859 * C604 + C10865 * C703 + C10860 * C710) *
               C280) *
              C50795 * C50629 * C50696 * C50899 +
          ((C10862 * C286 + C10857 * C292 + C10863 * C588 + C10858 * C594 +
            C10864 * C699 + C10859 * C706 + C10865 * C2996 + C10860 * C3001) *
               C284 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C278 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C283) +
           (C10862 * C295 + C10857 * C305 + C10863 * C595 + C10858 * C603 +
            C10864 * C705 + C10859 * C711 + C10865 * C3000 + C10860 * C3005) *
               C279 -
           (C10865 * C2995 + C10860 * C2999 + C10864 * C698 + C10859 * C704 +
            C10863 * C589 + C10858 * C596 + C10862 * C288 + C10857 * C296) *
               C285 -
           (C10865 * C2998 + C10860 * C3004 + C10864 * C703 + C10859 * C710 +
            C10863 * C597 + C10858 * C604 + C10862 * C297 + C10857 * C306) *
               C280) *
              C50795 * C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C696 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C50607) *
              C50795 * C50629 * C50696 * C692 -
          ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
            C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
               C50607 +
           (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
            C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
               C696) *
              C50795 * C50629 * C50696 * C693 +
          ((C10862 * C587 + C10857 * C592 + C10863 * C700 + C10858 * C708 +
            C10864 * C2997 + C10859 * C3003 + C10865 * C8730 + C10860 * C8734) *
               C696 +
           (C10862 * C593 + C10857 * C602 + C10863 * C707 + C10858 * C712 +
            C10864 * C3002 + C10859 * C3006 + C10865 * C8733 + C10860 * C8736) *
               C50607) *
              C50795 * C50629 * C50696 * C694 -
          ((C10865 * C11227 + C10860 * C11229 + C10864 * C8733 +
            C10859 * C8736 + C10863 * C3002 + C10858 * C3006 + C10862 * C707 +
            C10857 * C712) *
               C50607 +
           (C10865 * C11226 + C10860 * C11228 + C10864 * C8730 +
            C10859 * C8734 + C10863 * C2997 + C10858 * C3003 + C10862 * C700 +
            C10857 * C708) *
               C696) *
              C50795 * C50629 * C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
             C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
                C696 +
            (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
             C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
                C50607) *
               C50795 * C50629 * C941 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C50607 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C696) *
               C50795 * C50629 * C942 +
           ((C10862 * C944 + C10857 * C949 + C10863 * C1083 + C10858 * C1091 +
             C10864 * C3483 + C10859 * C3489 + C10865 * C9202 +
             C10860 * C9206) *
                C696 +
            (C10862 * C950 + C10857 * C959 + C10863 * C1090 + C10858 * C1095 +
             C10864 * C3488 + C10859 * C3492 + C10865 * C9205 +
             C10860 * C9208) *
                C50607) *
               C50795 * C50629 * C943) *
              C50899 +
          (((C10862 * C811 + C10857 * C819 + C10863 * C818 + C10858 * C834 +
             C10864 * C3155 + C10859 * C3161 + C10865 * C8884 +
             C10860 * C8888) *
                C696 +
            (C10862 * C820 + C10857 * C835 + C10863 * C833 + C10858 * C842 +
             C10864 * C3160 + C10859 * C3164 + C10865 * C8887 +
             C10860 * C8890) *
                C50607) *
               C50795 * C50629 * C942 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C50607 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C696) *
               C50795 * C50629 * C941 -
           ((C10865 * C11529 + C10860 * C11531 + C10864 * C9205 +
             C10859 * C9208 + C10863 * C3488 + C10858 * C3492 + C10862 * C1090 +
             C10857 * C1095) *
                C50607 +
            (C10865 * C11528 + C10860 * C11530 + C10864 * C9202 +
             C10859 * C9206 + C10863 * C3483 + C10858 * C3489 + C10862 * C1083 +
             C10857 * C1091) *
                C696) *
               C50795 * C50629 * C943) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C696 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50607) *
                C50795 * C2302 +
            ((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C50795 *
                C2303 +
            (C2356 * C696 + C2357 * C50607) * C50795 * C2304) *
               C50900 -
           ((C2727 * C50607 + C2726 * C696) * C50795 * C2304 +
            ((C2717 + C2716) * C50607 + (C2715 + C2714) * C696) * C50795 *
                C2303 +
            ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                 C50607 +
             (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                 C696) *
                C50795 * C2302) *
               C50708) *
              C582 +
          ((((C2305 * C811 + C50911 * C819 + C2306 * C818 + C50781 * C834) *
                 C696 +
             (C2305 * C820 + C50911 * C835 + C2306 * C833 + C50781 * C842) *
                 C50607) *
                C50795 * C2302 +
            ((C2305 * C812 + C50911 * C821 + C2306 * C817 + C50781 * C832) *
                 C696 +
             (C2305 * C822 + C50911 * C836 + C2306 * C831 + C50781 * C841) *
                 C50607) *
                C50795 * C2303 +
            ((C2305 * C813 + C50911 * C823 + C2306 * C816 + C50781 * C830) *
                 C696 +
             (C2305 * C824 + C50911 * C837 + C2306 * C829 + C50781 * C840) *
                 C50607) *
                C50795 * C2304) *
               C50708 -
           ((C2543 * C50607 + C2542 * C696) * C50795 * C2304 +
            ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C50795 *
                C2303 +
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50607 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C696) *
                C50795 * C2302) *
               C50900) *
              C583 +
          ((((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                 C696 +
             (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                 C50607) *
                C50795 * C2302 +
            ((C2891 + C2890) * C696 + (C2893 + C2892) * C50607) * C50795 *
                C2303 +
            ((C2895 + C2894) * C696 + (C2897 + C2896) * C50607) * C50795 *
                C2304) *
               C50900 -
           (((C2306 * C3156 + C50781 * C3162 + C2305 * C829 + C50911 * C840) *
                 C50607 +
             (C2306 * C3153 + C50781 * C3157 + C2305 * C816 + C50911 * C830) *
                 C696) *
                C50795 * C2304 +
            ((C2306 * C3158 + C50781 * C3163 + C2305 * C831 + C50911 * C841) *
                 C50607 +
             (C2306 * C3154 + C50781 * C3159 + C2305 * C817 + C50911 * C832) *
                 C696) *
                C50795 * C2303 +
            ((C2306 * C3160 + C50781 * C3164 + C2305 * C833 + C50911 * C842) *
                 C50607 +
             (C2306 * C3155 + C50781 * C3161 + C2305 * C818 + C50911 * C834) *
                 C696) *
                C50795 * C2302) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C283 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C278 -
            (C2340 + C2341) * C284 - (C2342 + C2343) * C279 + C2356 * C285 +
            C2357 * C280) *
               C50795 * C2302 +
           ((C2341 + C2340) * C283 + (C2343 + C2342) * C278 -
            (C2345 + C2344) * C284 - (C2347 + C2346) * C279 +
            (C2349 + C2348) * C285 + (C2351 + C2350) * C280) *
               C50795 * C2303 +
           (C2356 * C283 + C2357 * C278 - C2358 * C284 - C2359 * C279 +
            (C2353 + C2352) * C285 + (C2355 + C2354) * C280) *
               C50795 * C2304) *
              C50900 +
          (((C2714 + C2715) * C284 -
            ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                 C278 +
             (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                 C283) +
            (C2716 + C2717) * C279 - C2726 * C285 - C2727 * C280) *
               C50795 * C2302 +
           ((C2719 + C2718) * C284 -
            ((C2717 + C2716) * C278 + (C2715 + C2714) * C283) +
            (C2721 + C2720) * C279 - (C2722 + C2723) * C285 -
            (C2724 + C2725) * C280) *
               C50795 * C2303 +
           ((C2723 + C2722) * C284 - (C2727 * C278 + C2726 * C283) +
            (C2725 + C2724) * C279 -
            (C2306 * C1523 + C50781 * C1524 + C2305 * C438 + C50911 * C448) *
                C285 -
            (C2306 * C1525 + C50781 * C1526 + C2305 * C449 + C50911 * C456) *
                C280) *
               C50795 * C2304) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C696 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50607) *
               C50795 * C2302 +
           ((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C50795 *
               C2303 +
           (C2356 * C696 + C2357 * C50607) * C50795 * C2304) *
              C1162 -
          ((C2727 * C50607 + C2726 * C696) * C50795 * C2304 +
           ((C2717 + C2716) * C50607 + (C2715 + C2714) * C696) * C50795 *
               C2303 +
           ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                C50607 +
            (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                C696) *
               C50795 * C2302) *
              C1163 +
          (((C2305 * C944 + C50911 * C949 + C2306 * C1083 + C50781 * C1091) *
                C696 +
            (C2305 * C950 + C50911 * C959 + C2306 * C1090 + C50781 * C1095) *
                C50607) *
               C50795 * C2302 +
           ((C3329 + C3328) * C696 + (C3331 + C3330) * C50607) * C50795 *
               C2303 +
           ((C3333 + C3332) * C696 + (C3335 + C3334) * C50607) * C50795 *
               C2304) *
              C1164 -
          (((C2306 * C3594 + C50781 * C3600 + C2305 * C1172 + C50911 * C1179) *
                C50607 +
            (C2306 * C3591 + C50781 * C3595 + C2305 * C1167 + C50911 * C1173) *
                C696) *
               C50795 * C2304 +
           ((C2306 * C3596 + C50781 * C3601 + C2305 * C1174 + C50911 * C1180) *
                C50607 +
            (C2306 * C3592 + C50781 * C3597 + C2305 * C1168 + C50911 * C1175) *
                C696) *
               C50795 * C2303 +
           ((C2306 * C3598 + C50781 * C3602 + C2305 * C1176 + C50911 * C1181) *
                C50607 +
            (C2306 * C3593 + C50781 * C3599 + C2305 * C1169 + C50911 * C1177) *
                C696) *
               C50795 * C2302) *
              C1165) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C283 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C278 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C284 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C279 +
           (C10862 * C124 + C10857 * C133 + C10863 * C288 + C10858 * C296 +
            C10864 * C589 + C10859 * C596 + C10865 * C698 + C10860 * C704) *
               C285 +
           (C10862 * C134 + C10857 * C145 + C10863 * C297 + C10858 * C306 +
            C10864 * C597 + C10859 * C604 + C10865 * C703 + C10860 * C710) *
               C280) *
              C50795 * C50629 * C50900 +
          ((C10862 * C434 + C10857 * C440 + C10863 * C812 + C10858 * C821 +
            C10864 * C817 + C10859 * C832 + C10865 * C3154 + C10860 * C3159) *
               C284 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C278 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C283) +
           (C10862 * C443 + C10857 * C453 + C10863 * C822 + C10858 * C836 +
            C10864 * C831 + C10859 * C841 + C10865 * C3158 + C10860 * C3163) *
               C279 -
           (C10865 * C3153 + C10860 * C3157 + C10864 * C816 + C10859 * C830 +
            C10863 * C813 + C10858 * C823 + C10862 * C436 + C10857 * C444) *
               C285 -
           (C10865 * C3156 + C10860 * C3162 + C10864 * C829 + C10859 * C840 +
            C10863 * C824 + C10858 * C837 + C10862 * C445 + C10857 * C454) *
               C280) *
              C50795 * C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
             C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
                C696 +
            (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
             C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
                C50607) *
               C50795 * C50629 * C50900 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C50607 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C696) *
               C50795 * C50629 * C50708) *
              C582 +
          (((C10862 * C811 + C10857 * C819 + C10863 * C818 + C10858 * C834 +
             C10864 * C3155 + C10859 * C3161 + C10865 * C8884 +
             C10860 * C8888) *
                C696 +
            (C10862 * C820 + C10857 * C835 + C10863 * C833 + C10858 * C842 +
             C10864 * C3160 + C10859 * C3164 + C10865 * C8887 +
             C10860 * C8890) *
                C50607) *
               C50795 * C50629 * C50708 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C50607 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C696) *
               C50795 * C50629 * C50900) *
              C583 +
          (((C10862 * C587 + C10857 * C592 + C10863 * C700 + C10858 * C708 +
             C10864 * C2997 + C10859 * C3003 + C10865 * C8730 +
             C10860 * C8734) *
                C696 +
            (C10862 * C593 + C10857 * C602 + C10863 * C707 + C10858 * C712 +
             C10864 * C3002 + C10859 * C3006 + C10865 * C8733 +
             C10860 * C8736) *
                C50607) *
               C50795 * C50629 * C50900 -
           ((C10865 * C11329 + C10860 * C11331 + C10864 * C8887 +
             C10859 * C8890 + C10863 * C3160 + C10858 * C3164 + C10862 * C833 +
             C10857 * C842) *
                C50607 +
            (C10865 * C11328 + C10860 * C11330 + C10864 * C8884 +
             C10859 * C8888 + C10863 * C3155 + C10858 * C3161 + C10862 * C818 +
             C10857 * C834) *
                C696) *
               C50795 * C50629 * C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C696 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C50607) *
              C50795 * C50629 * C1162 -
          ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
            C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
               C50607 +
           (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
            C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
               C696) *
              C50795 * C50629 * C1163 +
          ((C10862 * C944 + C10857 * C949 + C10863 * C1083 + C10858 * C1091 +
            C10864 * C3483 + C10859 * C3489 + C10865 * C9202 + C10860 * C9206) *
               C696 +
           (C10862 * C950 + C10857 * C959 + C10863 * C1090 + C10858 * C1095 +
            C10864 * C3488 + C10859 * C3492 + C10865 * C9205 + C10860 * C9208) *
               C50607) *
              C50795 * C50629 * C1164 -
          ((C10865 * C11599 + C10860 * C11601 + C10864 * C9311 +
            C10859 * C9314 + C10863 * C3598 + C10858 * C3602 + C10862 * C1176 +
            C10857 * C1181) *
               C50607 +
           (C10865 * C11598 + C10860 * C11600 + C10864 * C9308 +
            C10859 * C9312 + C10863 * C3593 + C10858 * C3599 + C10862 * C1169 +
            C10857 * C1177) *
               C696) *
              C50795 * C50629 * C1165) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C1285 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50942 -
            (C2340 + C2341) * C1286 - (C2342 + C2343) * C50926 + C2356 * C1287 +
            C2357 * C1282) *
               C50795 * C2302 +
           ((C2341 + C2340) * C1285 + (C2343 + C2342) * C50942 -
            (C2345 + C2344) * C1286 - (C2347 + C2346) * C50926 +
            (C2349 + C2348) * C1287 + (C2351 + C2350) * C1282) *
               C50795 * C2303 +
           (C2356 * C1285 + C2357 * C50942 - C2358 * C1286 - C2359 * C50926 +
            (C2353 + C2352) * C1287 + (C2355 + C2354) * C1282) *
               C50795 * C2304) *
              C1643 +
          (((C2714 + C2715) * C1286 -
            ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                 C50942 +
             (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                 C1285) +
            (C2716 + C2717) * C50926 - C2726 * C1287 - C2727 * C1282) *
               C50795 * C2302 +
           ((C2719 + C2718) * C1286 -
            ((C2717 + C2716) * C50942 + (C2715 + C2714) * C1285) +
            (C2721 + C2720) * C50926 - (C2722 + C2723) * C1287 -
            (C2724 + C2725) * C1282) *
               C50795 * C2303 +
           ((C2723 + C2722) * C1286 - (C2727 * C50942 + C2726 * C1285) +
            (C2725 + C2724) * C50926 -
            (C2306 * C1523 + C50781 * C1524 + C2305 * C438 + C50911 * C448) *
                C1287 -
            (C2306 * C1525 + C50781 * C1526 + C2305 * C449 + C50911 * C456) *
                C1282) *
               C50795 * C2304) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C1285 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C50942 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C1286 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C50926 +
           (C10862 * C124 + C10857 * C133 + C10863 * C288 + C10858 * C296 +
            C10864 * C589 + C10859 * C596 + C10865 * C698 + C10860 * C704) *
               C1287 +
           (C10862 * C134 + C10857 * C145 + C10863 * C297 + C10858 * C306 +
            C10864 * C597 + C10859 * C604 + C10865 * C703 + C10860 * C710) *
               C1282) *
              C50795 * C50629 * C1643 +
          ((C10862 * C434 + C10857 * C440 + C10863 * C812 + C10858 * C821 +
            C10864 * C817 + C10859 * C832 + C10865 * C3154 + C10860 * C3159) *
               C1286 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C50942 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C1285) +
           (C10862 * C443 + C10857 * C453 + C10863 * C822 + C10858 * C836 +
            C10864 * C831 + C10859 * C841 + C10865 * C3158 + C10860 * C3163) *
               C50926 -
           (C10865 * C3153 + C10860 * C3157 + C10864 * C816 + C10859 * C830 +
            C10863 * C813 + C10858 * C823 + C10862 * C436 + C10857 * C444) *
               C1287 -
           (C10865 * C3156 + C10860 * C3162 + C10864 * C829 + C10859 * C840 +
            C10863 * C824 + C10858 * C837 + C10862 * C445 + C10857 * C454) *
               C1282) *
              C50795 * C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C1391 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C1386 -
             (C2340 + C2341) * C1392 - (C2342 + C2343) * C50612) *
                C50795 * C2302 +
            ((C2341 + C2340) * C1391 + (C2343 + C2342) * C1386 -
             (C2345 + C2344) * C1392 - (C2347 + C2346) * C50612) *
                C50795 * C2303 +
            (C2356 * C1391 + C2357 * C1386 - C2358 * C1392 - C2359 * C50612) *
                C50795 * C2304) *
               C1643 +
           (((C2714 + C2715) * C1392 -
             ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                  C1386 +
              (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                  C1391) +
             (C2716 + C2717) * C50612) *
                C50795 * C2302 +
            ((C2719 + C2718) * C1392 -
             ((C2717 + C2716) * C1386 + (C2715 + C2714) * C1391) +
             (C2721 + C2720) * C50612) *
                C50795 * C2303 +
            ((C2723 + C2722) * C1392 - (C2727 * C1386 + C2726 * C1391) +
             (C2725 + C2724) * C50612) *
                C50795 * C2304) *
               C50708) *
              C50899 +
          ((((C2530 + C2531) * C1392 -
             ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                  C1386 +
              (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                  C1391) +
             (C2532 + C2533) * C50612) *
                C50795 * C2302 +
            ((C2535 + C2534) * C1392 -
             ((C2533 + C2532) * C1386 + (C2531 + C2530) * C1391) +
             (C2537 + C2536) * C50612) *
                C50795 * C2303 +
            ((C2539 + C2538) * C1392 - (C2543 * C1386 + C2542 * C1391) +
             (C2541 + C2540) * C50612) *
                C50795 * C2304) *
               C1643 +
           (((C2305 * C811 + C50911 * C819 + C2306 * C818 + C50781 * C834) *
                 C1391 +
             (C2305 * C820 + C50911 * C835 + C2306 * C833 + C50781 * C842) *
                 C1386 -
             (C4106 + C4107) * C1392 - (C4108 + C4109) * C50612) *
                C50795 * C2302 +
            ((C4107 + C4106) * C1391 + (C4109 + C4108) * C1386 -
             (C4110 + C4111) * C1392 - (C4112 + C4113) * C50612) *
                C50795 * C2303 +
            ((C4111 + C4110) * C1391 + (C4113 + C4112) * C1386 -
             (C2306 * C815 + C50781 * C828 + C2305 * C814 + C50911 * C825) *
                 C1392 -
             (C2306 * C827 + C50781 * C839 + C2305 * C826 + C50911 * C838) *
                 C50612) *
                C50795 * C2304) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
             C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
                C1391 +
            (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
             C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
                C1386 -
            (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
             C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
                C1392 -
            (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
             C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
                C50612) *
               C50795 * C50629 * C1643 +
           ((C10862 * C434 + C10857 * C440 + C10863 * C812 + C10858 * C821 +
             C10864 * C817 + C10859 * C832 + C10865 * C3154 + C10860 * C3159) *
                C1392 -
            ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
              C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                 C1386 +
             (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
              C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                 C1391) +
            (C10862 * C443 + C10857 * C453 + C10863 * C822 + C10858 * C836 +
             C10864 * C831 + C10859 * C841 + C10865 * C3158 + C10860 * C3163) *
                C50612) *
               C50795 * C50629 * C50708) *
              C50899 +
          (((C10862 * C286 + C10857 * C292 + C10863 * C588 + C10858 * C594 +
             C10864 * C699 + C10859 * C706 + C10865 * C2996 + C10860 * C3001) *
                C1392 -
            ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
              C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                 C1386 +
             (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
              C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                 C1391) +
            (C10862 * C295 + C10857 * C305 + C10863 * C595 + C10858 * C603 +
             C10864 * C705 + C10859 * C711 + C10865 * C3000 + C10860 * C3005) *
                C50612) *
               C50795 * C50629 * C1643 +
           ((C10862 * C811 + C10857 * C819 + C10863 * C818 + C10858 * C834 +
             C10864 * C3155 + C10859 * C3161 + C10865 * C8884 +
             C10860 * C8888) *
                C1391 +
            (C10862 * C820 + C10857 * C835 + C10863 * C833 + C10858 * C842 +
             C10864 * C3160 + C10859 * C3164 + C10865 * C8887 +
             C10860 * C8890) *
                C1386 -
            (C10865 * C8883 + C10860 * C8886 + C10864 * C3154 + C10859 * C3159 +
             C10863 * C817 + C10858 * C832 + C10862 * C812 + C10857 * C821) *
                C1392 -
            (C10865 * C8885 + C10860 * C8889 + C10864 * C3158 + C10859 * C3163 +
             C10863 * C831 + C10858 * C841 + C10862 * C822 + C10857 * C836) *
                C50612) *
               C50795 * C50629 * C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C1391 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C1386 -
            (C2340 + C2341) * C1392 - (C2342 + C2343) * C50612) *
               C50795 * C2302 +
           ((C2341 + C2340) * C1391 + (C2343 + C2342) * C1386 -
            (C2345 + C2344) * C1392 - (C2347 + C2346) * C50612) *
               C50795 * C2303 +
           (C2356 * C1391 + C2357 * C1386 - C2358 * C1392 - C2359 * C50612) *
               C50795 * C2304) *
              C50945 +
          (((C2714 + C2715) * C1392 -
            ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                 C1386 +
             (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                 C1391) +
            (C2716 + C2717) * C50612) *
               C50795 * C2302 +
           ((C2719 + C2718) * C1392 -
            ((C2717 + C2716) * C1386 + (C2715 + C2714) * C1391) +
            (C2721 + C2720) * C50612) *
               C50795 * C2303 +
           ((C2723 + C2722) * C1392 - (C2727 * C1386 + C2726 * C1391) +
            (C2725 + C2724) * C50612) *
               C50795 * C2304) *
              C50935 +
          (((C2305 * C944 + C50911 * C949 + C2306 * C1083 + C50781 * C1091) *
                C1391 +
            (C2305 * C950 + C50911 * C959 + C2306 * C1090 + C50781 * C1095) *
                C1386 -
            (C3328 + C3329) * C1392 - (C3330 + C3331) * C50612) *
               C50795 * C2302 +
           ((C3329 + C3328) * C1391 + (C3331 + C3330) * C1386 -
            (C3332 + C3333) * C1392 - (C3334 + C3335) * C50612) *
               C50795 * C2303 +
           ((C3333 + C3332) * C1391 + (C3335 + C3334) * C1386 -
            (C2306 * C1080 + C50781 * C1085 + C2305 * C947 + C50911 * C955) *
                C1392 -
            (C2306 * C1084 + C50781 * C1092 + C2305 * C956 + C50911 * C962) *
                C50612) *
               C50795 * C2304) *
              C1875) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C1391 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C1386 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C1392 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C50612) *
              C50795 * C50629 * C50945 +
          ((C10862 * C434 + C10857 * C440 + C10863 * C812 + C10858 * C821 +
            C10864 * C817 + C10859 * C832 + C10865 * C3154 + C10860 * C3159) *
               C1392 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C1386 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C1391) +
           (C10862 * C443 + C10857 * C453 + C10863 * C822 + C10858 * C836 +
            C10864 * C831 + C10859 * C841 + C10865 * C3158 + C10860 * C3163) *
               C50612) *
              C50795 * C50629 * C50935 +
          ((C10862 * C944 + C10857 * C949 + C10863 * C1083 + C10858 * C1091 +
            C10864 * C3483 + C10859 * C3489 + C10865 * C9202 + C10860 * C9206) *
               C1391 +
           (C10862 * C950 + C10857 * C959 + C10863 * C1090 + C10858 * C1095 +
            C10864 * C3488 + C10859 * C3492 + C10865 * C9205 + C10860 * C9208) *
               C1386 -
           (C10865 * C9201 + C10860 * C9204 + C10864 * C3482 + C10859 * C3487 +
            C10863 * C1082 + C10858 * C1089 + C10862 * C945 + C10857 * C951) *
               C1392 -
           (C10865 * C9203 + C10860 * C9207 + C10864 * C3486 + C10859 * C3491 +
            C10863 * C1088 + C10858 * C1094 + C10862 * C952 + C10857 * C960) *
               C50612) *
              C50795 * C50629 * C1875) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
               C118 +
           (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
               C106 -
           (C2340 + C2341) * C119 - (C2342 + C2343) * C107 + C2356 * C120 +
           C2357 * C108 - C2358 * C121 - C2359 * C109) *
              C50795 * C2302 +
          ((C2341 + C2340) * C118 + (C2343 + C2342) * C106 -
           (C2345 + C2344) * C119 - (C2347 + C2346) * C107 +
           (C2349 + C2348) * C120 + (C2351 + C2350) * C108 -
           (C2352 + C2353) * C121 - (C2354 + C2355) * C109) *
              C50795 * C2303 +
          (C2356 * C118 + C2357 * C106 - C2358 * C119 - C2359 * C107 +
           (C2353 + C2352) * C120 + (C2355 + C2354) * C108 -
           (C2306 * C291 + C50781 * C302 + C2305 * C127 + C50911 * C139) *
               C121 -
           (C2306 * C303 + C50781 * C309 + C2305 * C140 + C50911 * C148) *
               C109) *
              C50795 * C2304) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C49720 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50884 -
            (C2340 + C2341) * C49713 - (C2342 + C2343) * C50612) *
               C50795 * C2302 +
           ((C2341 + C2340) * C49720 + (C2343 + C2342) * C50884 -
            (C2345 + C2344) * C49713 - (C2347 + C2346) * C50612) *
               C50795 * C2303 +
           (C2356 * C49720 + C2357 * C50884 - C2358 * C49713 - C2359 * C50612) *
               C50795 * C2304) *
              C50696 * C582 +
          (((C2530 + C2531) * C49713 -
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50884 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C49720) +
            (C2532 + C2533) * C50612) *
               C50795 * C2302 +
           ((C2535 + C2534) * C49713 -
            ((C2533 + C2532) * C50884 + (C2531 + C2530) * C49720) +
            (C2537 + C2536) * C50612) *
               C50795 * C2303 +
           ((C2539 + C2538) * C49713 - (C2543 * C50884 + C2542 * C49720) +
            (C2541 + C2540) * C50612) *
               C50795 * C2304) *
              C50696 * C583 +
          (((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                C49720 +
            (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                C50884 -
            (C2890 + C2891) * C49713 - (C2892 + C2893) * C50612) *
               C50795 * C2302 +
           ((C2891 + C2890) * C49720 + (C2893 + C2892) * C50884 -
            (C2894 + C2895) * C49713 - (C2896 + C2897) * C50612) *
               C50795 * C2303 +
           ((C2895 + C2894) * C49720 + (C2897 + C2896) * C50884 -
            (C2306 * C697 + C50781 * C702 + C2305 * C590 + C50911 * C598) *
                C49713 -
            (C2306 * C701 + C50781 * C709 + C2305 * C599 + C50911 * C605) *
                C50612) *
               C50795 * C2304) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
           C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
              C118 +
          (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
           C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
              C106 -
          (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
           C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
              C119 -
          (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
           C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
              C107 +
          (C10862 * C124 + C10857 * C133 + C10863 * C288 + C10858 * C296 +
           C10864 * C589 + C10859 * C596 + C10865 * C698 + C10860 * C704) *
              C120 +
          (C10862 * C134 + C10857 * C145 + C10863 * C297 + C10858 * C306 +
           C10864 * C597 + C10859 * C604 + C10865 * C703 + C10860 * C710) *
              C108 -
          (C10865 * C697 + C10860 * C702 + C10864 * C590 + C10859 * C598 +
           C10863 * C289 + C10858 * C298 + C10862 * C125 + C10857 * C135) *
              C121 -
          (C10865 * C701 + C10860 * C709 + C10864 * C599 + C10859 * C605 +
           C10863 * C299 + C10858 * C307 + C10862 * C136 + C10857 * C146) *
              C109) *
         C50795 * C50629 * C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C49720 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C50884 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C49713 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C50612) *
              C50795 * C50629 * C50696 * C582 +
          ((C10862 * C286 + C10857 * C292 + C10863 * C588 + C10858 * C594 +
            C10864 * C699 + C10859 * C706 + C10865 * C2996 + C10860 * C3001) *
               C49713 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C50884 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C49720) +
           (C10862 * C295 + C10857 * C305 + C10863 * C595 + C10858 * C603 +
            C10864 * C705 + C10859 * C711 + C10865 * C3000 + C10860 * C3005) *
               C50612) *
              C50795 * C50629 * C50696 * C583 +
          ((C10862 * C587 + C10857 * C592 + C10863 * C700 + C10858 * C708 +
            C10864 * C2997 + C10859 * C3003 + C10865 * C8730 + C10860 * C8734) *
               C49720 +
           (C10862 * C593 + C10857 * C602 + C10863 * C707 + C10858 * C712 +
            C10864 * C3002 + C10859 * C3006 + C10865 * C8733 + C10860 * C8736) *
               C50884 -
           (C10865 * C8729 + C10860 * C8732 + C10864 * C2996 + C10859 * C3001 +
            C10863 * C699 + C10858 * C706 + C10862 * C588 + C10857 * C594) *
               C49713 -
           (C10865 * C8731 + C10860 * C8735 + C10864 * C3000 + C10859 * C3005 +
            C10863 * C705 + C10858 * C711 + C10862 * C595 + C10857 * C603) *
               C50612) *
              C50795 * C50629 * C50696 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C283 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C278 -
            (C2340 + C2341) * C284 - (C2342 + C2343) * C279 + C2356 * C285 +
            C2357 * C280) *
               C50795 * C2302 +
           ((C2341 + C2340) * C283 + (C2343 + C2342) * C278 -
            (C2345 + C2344) * C284 - (C2347 + C2346) * C279 +
            (C2349 + C2348) * C285 + (C2351 + C2350) * C280) *
               C50795 * C2303 +
           (C2356 * C283 + C2357 * C278 - C2358 * C284 - C2359 * C279 +
            (C2353 + C2352) * C285 + (C2355 + C2354) * C280) *
               C50795 * C2304) *
              C50696 * C50899 +
          (((C2530 + C2531) * C284 -
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C278 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C283) +
            (C2532 + C2533) * C279 - C2542 * C285 - C2543 * C280) *
               C50795 * C2302 +
           ((C2535 + C2534) * C284 -
            ((C2533 + C2532) * C278 + (C2531 + C2530) * C283) +
            (C2537 + C2536) * C279 - (C2538 + C2539) * C285 -
            (C2540 + C2541) * C280) *
               C50795 * C2303 +
           ((C2539 + C2538) * C284 - (C2543 * C278 + C2542 * C283) +
            (C2541 + C2540) * C279 -
            (C2306 * C591 + C50781 * C600 + C2305 * C290 + C50911 * C300) *
                C285 -
            (C2306 * C601 + C50781 * C606 + C2305 * C301 + C50911 * C308) *
                C280) *
               C50795 * C2304) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C696 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C50607) *
               C50795 * C2302 +
           ((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C50795 *
               C2303 +
           (C2356 * C696 + C2357 * C50607) * C50795 * C2304) *
              C50696 * C692 -
          ((C2543 * C50607 + C2542 * C696) * C50795 * C2304 +
           ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C50795 *
               C2303 +
           ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                C50607 +
            (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                C696) *
               C50795 * C2302) *
              C50696 * C693 +
          (((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                C696 +
            (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                C50607) *
               C50795 * C2302 +
           ((C2891 + C2890) * C696 + (C2893 + C2892) * C50607) * C50795 *
               C2303 +
           ((C2895 + C2894) * C696 + (C2897 + C2896) * C50607) * C50795 *
               C2304) *
              C50696 * C694 -
          (((C2306 * C2998 + C50781 * C3004 + C2305 * C703 + C50911 * C710) *
                C50607 +
            (C2306 * C2995 + C50781 * C2999 + C2305 * C698 + C50911 * C704) *
                C696) *
               C50795 * C2304 +
           ((C2306 * C3000 + C50781 * C3005 + C2305 * C705 + C50911 * C711) *
                C50607 +
            (C2306 * C2996 + C50781 * C3001 + C2305 * C699 + C50911 * C706) *
                C696) *
               C50795 * C2303 +
           ((C2306 * C3002 + C50781 * C3006 + C2305 * C707 + C50911 * C712) *
                C50607 +
            (C2306 * C2997 + C50781 * C3003 + C2305 * C700 + C50911 * C708) *
                C696) *
               C50795 * C2302) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C283 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C278 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C284 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C279 +
           (C10862 * C124 + C10857 * C133 + C10863 * C288 + C10858 * C296 +
            C10864 * C589 + C10859 * C596 + C10865 * C698 + C10860 * C704) *
               C285 +
           (C10862 * C134 + C10857 * C145 + C10863 * C297 + C10858 * C306 +
            C10864 * C597 + C10859 * C604 + C10865 * C703 + C10860 * C710) *
               C280) *
              C50795 * C50629 * C50696 * C50899 +
          ((C10862 * C286 + C10857 * C292 + C10863 * C588 + C10858 * C594 +
            C10864 * C699 + C10859 * C706 + C10865 * C2996 + C10860 * C3001) *
               C284 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C278 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C283) +
           (C10862 * C295 + C10857 * C305 + C10863 * C595 + C10858 * C603 +
            C10864 * C705 + C10859 * C711 + C10865 * C3000 + C10860 * C3005) *
               C279 -
           (C10865 * C2995 + C10860 * C2999 + C10864 * C698 + C10859 * C704 +
            C10863 * C589 + C10858 * C596 + C10862 * C288 + C10857 * C296) *
               C285 -
           (C10865 * C2998 + C10860 * C3004 + C10864 * C703 + C10859 * C710 +
            C10863 * C597 + C10858 * C604 + C10862 * C297 + C10857 * C306) *
               C280) *
              C50795 * C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C696 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C50607) *
              C50795 * C50629 * C50696 * C692 -
          ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
            C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
               C50607 +
           (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
            C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
               C696) *
              C50795 * C50629 * C50696 * C693 +
          ((C10862 * C587 + C10857 * C592 + C10863 * C700 + C10858 * C708 +
            C10864 * C2997 + C10859 * C3003 + C10865 * C8730 + C10860 * C8734) *
               C696 +
           (C10862 * C593 + C10857 * C602 + C10863 * C707 + C10858 * C712 +
            C10864 * C3002 + C10859 * C3006 + C10865 * C8733 + C10860 * C8736) *
               C50607) *
              C50795 * C50629 * C50696 * C694 -
          ((C10865 * C11227 + C10860 * C11229 + C10864 * C8733 +
            C10859 * C8736 + C10863 * C3002 + C10858 * C3006 + C10862 * C707 +
            C10857 * C712) *
               C50607 +
           (C10865 * C11226 + C10860 * C11228 + C10864 * C8730 +
            C10859 * C8734 + C10863 * C2997 + C10858 * C3003 + C10862 * C700 +
            C10857 * C708) *
               C696) *
              C50795 * C50629 * C50696 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                C283 +
            (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                C278 -
            (C2340 + C2341) * C284 - (C2342 + C2343) * C279 + C2356 * C285 +
            C2357 * C280) *
               C50795 * C2302 +
           ((C2341 + C2340) * C283 + (C2343 + C2342) * C278 -
            (C2345 + C2344) * C284 - (C2347 + C2346) * C279 +
            (C2349 + C2348) * C285 + (C2351 + C2350) * C280) *
               C50795 * C2303 +
           (C2356 * C283 + C2357 * C278 - C2358 * C284 - C2359 * C279 +
            (C2353 + C2352) * C285 + (C2355 + C2354) * C280) *
               C50795 * C2304) *
              C50900 +
          (((C2714 + C2715) * C284 -
            ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                 C278 +
             (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                 C283) +
            (C2716 + C2717) * C279 - C2726 * C285 - C2727 * C280) *
               C50795 * C2302 +
           ((C2719 + C2718) * C284 -
            ((C2717 + C2716) * C278 + (C2715 + C2714) * C283) +
            (C2721 + C2720) * C279 - (C2722 + C2723) * C285 -
            (C2724 + C2725) * C280) *
               C50795 * C2303 +
           ((C2723 + C2722) * C284 - (C2727 * C278 + C2726 * C283) +
            (C2725 + C2724) * C279 -
            (C2306 * C1523 + C50781 * C1524 + C2305 * C438 + C50911 * C448) *
                C285 -
            (C2306 * C1525 + C50781 * C1526 + C2305 * C449 + C50911 * C456) *
                C280) *
               C50795 * C2304) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2305 * C122 + C50911 * C129 + C2306 * C287 + C50781 * C294) *
                 C696 +
             (C2305 * C130 + C50911 * C143 + C2306 * C293 + C50781 * C304) *
                 C50607) *
                C50795 * C2302 +
            ((C2341 + C2340) * C696 + (C2343 + C2342) * C50607) * C50795 *
                C2303 +
            (C2356 * C696 + C2357 * C50607) * C50795 * C2304) *
               C50900 -
           ((C2727 * C50607 + C2726 * C696) * C50795 * C2304 +
            ((C2717 + C2716) * C50607 + (C2715 + C2714) * C696) * C50795 *
                C2303 +
            ((C2306 * C820 + C50781 * C835 + C2305 * C441 + C50911 * C452) *
                 C50607 +
             (C2306 * C811 + C50781 * C819 + C2305 * C435 + C50911 * C442) *
                 C696) *
                C50795 * C2302) *
               C50708) *
              C582 +
          ((((C2305 * C811 + C50911 * C819 + C2306 * C818 + C50781 * C834) *
                 C696 +
             (C2305 * C820 + C50911 * C835 + C2306 * C833 + C50781 * C842) *
                 C50607) *
                C50795 * C2302 +
            ((C2305 * C812 + C50911 * C821 + C2306 * C817 + C50781 * C832) *
                 C696 +
             (C2305 * C822 + C50911 * C836 + C2306 * C831 + C50781 * C841) *
                 C50607) *
                C50795 * C2303 +
            ((C2305 * C813 + C50911 * C823 + C2306 * C816 + C50781 * C830) *
                 C696 +
             (C2305 * C824 + C50911 * C837 + C2306 * C829 + C50781 * C840) *
                 C50607) *
                C50795 * C2304) *
               C50708 -
           ((C2543 * C50607 + C2542 * C696) * C50795 * C2304 +
            ((C2533 + C2532) * C50607 + (C2531 + C2530) * C696) * C50795 *
                C2303 +
            ((C2306 * C593 + C50781 * C602 + C2305 * C293 + C50911 * C304) *
                 C50607 +
             (C2306 * C587 + C50781 * C592 + C2305 * C287 + C50911 * C294) *
                 C696) *
                C50795 * C2302) *
               C50900) *
              C583 +
          ((((C2305 * C587 + C50911 * C592 + C2306 * C700 + C50781 * C708) *
                 C696 +
             (C2305 * C593 + C50911 * C602 + C2306 * C707 + C50781 * C712) *
                 C50607) *
                C50795 * C2302 +
            ((C2891 + C2890) * C696 + (C2893 + C2892) * C50607) * C50795 *
                C2303 +
            ((C2895 + C2894) * C696 + (C2897 + C2896) * C50607) * C50795 *
                C2304) *
               C50900 -
           (((C2306 * C3156 + C50781 * C3162 + C2305 * C829 + C50911 * C840) *
                 C50607 +
             (C2306 * C3153 + C50781 * C3157 + C2305 * C816 + C50911 * C830) *
                 C696) *
                C50795 * C2304 +
            ((C2306 * C3158 + C50781 * C3163 + C2305 * C831 + C50911 * C841) *
                 C50607 +
             (C2306 * C3154 + C50781 * C3159 + C2305 * C817 + C50911 * C832) *
                 C696) *
                C50795 * C2303 +
            ((C2306 * C3160 + C50781 * C3164 + C2305 * C833 + C50911 * C842) *
                 C50607 +
             (C2306 * C3155 + C50781 * C3161 + C2305 * C818 + C50911 * C834) *
                 C696) *
                C50795 * C2302) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
            C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
               C283 +
           (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
            C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
               C278 -
           (C10865 * C699 + C10860 * C706 + C10864 * C588 + C10859 * C594 +
            C10863 * C286 + C10858 * C292 + C10862 * C123 + C10857 * C131) *
               C284 -
           (C10865 * C705 + C10860 * C711 + C10864 * C595 + C10859 * C603 +
            C10863 * C295 + C10858 * C305 + C10862 * C132 + C10857 * C144) *
               C279 +
           (C10862 * C124 + C10857 * C133 + C10863 * C288 + C10858 * C296 +
            C10864 * C589 + C10859 * C596 + C10865 * C698 + C10860 * C704) *
               C285 +
           (C10862 * C134 + C10857 * C145 + C10863 * C297 + C10858 * C306 +
            C10864 * C597 + C10859 * C604 + C10865 * C703 + C10860 * C710) *
               C280) *
              C50795 * C50629 * C50900 +
          ((C10862 * C434 + C10857 * C440 + C10863 * C812 + C10858 * C821 +
            C10864 * C817 + C10859 * C832 + C10865 * C3154 + C10860 * C3159) *
               C284 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C278 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C283) +
           (C10862 * C443 + C10857 * C453 + C10863 * C822 + C10858 * C836 +
            C10864 * C831 + C10859 * C841 + C10865 * C3158 + C10860 * C3163) *
               C279 -
           (C10865 * C3153 + C10860 * C3157 + C10864 * C816 + C10859 * C830 +
            C10863 * C813 + C10858 * C823 + C10862 * C436 + C10857 * C444) *
               C285 -
           (C10865 * C3156 + C10860 * C3162 + C10864 * C829 + C10859 * C840 +
            C10863 * C824 + C10858 * C837 + C10862 * C445 + C10857 * C454) *
               C280) *
              C50795 * C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10862 * C122 + C10857 * C129 + C10863 * C287 + C10858 * C294 +
             C10864 * C587 + C10859 * C592 + C10865 * C700 + C10860 * C708) *
                C696 +
            (C10862 * C130 + C10857 * C143 + C10863 * C293 + C10858 * C304 +
             C10864 * C593 + C10859 * C602 + C10865 * C707 + C10860 * C712) *
                C50607) *
               C50795 * C50629 * C50900 -
           ((C10865 * C3160 + C10860 * C3164 + C10864 * C833 + C10859 * C842 +
             C10863 * C820 + C10858 * C835 + C10862 * C441 + C10857 * C452) *
                C50607 +
            (C10865 * C3155 + C10860 * C3161 + C10864 * C818 + C10859 * C834 +
             C10863 * C811 + C10858 * C819 + C10862 * C435 + C10857 * C442) *
                C696) *
               C50795 * C50629 * C50708) *
              C582 +
          (((C10862 * C811 + C10857 * C819 + C10863 * C818 + C10858 * C834 +
             C10864 * C3155 + C10859 * C3161 + C10865 * C8884 +
             C10860 * C8888) *
                C696 +
            (C10862 * C820 + C10857 * C835 + C10863 * C833 + C10858 * C842 +
             C10864 * C3160 + C10859 * C3164 + C10865 * C8887 +
             C10860 * C8890) *
                C50607) *
               C50795 * C50629 * C50708 -
           ((C10865 * C3002 + C10860 * C3006 + C10864 * C707 + C10859 * C712 +
             C10863 * C593 + C10858 * C602 + C10862 * C293 + C10857 * C304) *
                C50607 +
            (C10865 * C2997 + C10860 * C3003 + C10864 * C700 + C10859 * C708 +
             C10863 * C587 + C10858 * C592 + C10862 * C287 + C10857 * C294) *
                C696) *
               C50795 * C50629 * C50900) *
              C583 +
          (((C10862 * C587 + C10857 * C592 + C10863 * C700 + C10858 * C708 +
             C10864 * C2997 + C10859 * C3003 + C10865 * C8730 +
             C10860 * C8734) *
                C696 +
            (C10862 * C593 + C10857 * C602 + C10863 * C707 + C10858 * C712 +
             C10864 * C3002 + C10859 * C3006 + C10865 * C8733 +
             C10860 * C8736) *
                C50607) *
               C50795 * C50629 * C50900 -
           ((C10865 * C11329 + C10860 * C11331 + C10864 * C8887 +
             C10859 * C8890 + C10863 * C3160 + C10858 * C3164 + C10862 * C833 +
             C10857 * C842) *
                C50607 +
            (C10865 * C11328 + C10860 * C11330 + C10864 * C8884 +
             C10859 * C8888 + C10863 * C3155 + C10858 * C3161 + C10862 * C818 +
             C10857 * C834) *
                C696) *
               C50795 * C50629 * C50708) *
              C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1285 +
             (C117 * C130 + C50765 * C143) * C50942 - C171 * C1286 -
             C172 * C50926 + C173 * C1287 + C174 * C1282) *
                C50913 +
            (C5498 * C1285 + C5499 * C50942 - C475 * C1286 - C476 * C50926 +
             C477 * C1287 + C478 * C1282) *
                C50807) *
               C2302 +
           ((C171 * C1285 + C172 * C50942 - C173 * C1286 - C174 * C50926 +
             C175 * C1287 + C176 * C1282) *
                C50913 +
            (C475 * C1285 + C476 * C50942 - C477 * C1286 - C478 * C50926 +
             C479 * C1287 + C480 * C1282) *
                C50807) *
               C2303 +
           ((C173 * C1285 + C174 * C50942 - C175 * C1286 - C176 * C50926 +
             C177 * C1287 + C178 * C1282) *
                C50913 +
            (C477 * C1285 + C478 * C50942 - C479 * C1286 - C480 * C50926 +
             C481 * C1287 + C482 * C1282) *
                C50807) *
               C2304) *
              C50696 * C1283 +
          (((C327 * C1286 -
             ((C117 * C293 + C50765 * C304) * C50942 +
              (C117 * C287 + C50765 * C294) * C1285) +
             C328 * C50926 - C329 * C1287 - C330 * C1282) *
                C50913 +
            (C1540 * C1286 - (C5927 * C50942 + C5926 * C1285) + C1541 * C50926 -
             C1542 * C1287 - C1543 * C1282) *
                C50807) *
               C2302 +
           ((C329 * C1286 - (C328 * C50942 + C327 * C1285) + C330 * C50926 -
             C331 * C1287 - C332 * C1282) *
                C50913 +
            (C1542 * C1286 - (C1541 * C50942 + C1540 * C1285) + C1543 * C50926 -
             C1544 * C1287 - C1545 * C1282) *
                C50807) *
               C2303 +
           ((C331 * C1286 - (C330 * C50942 + C329 * C1285) + C332 * C50926 -
             C333 * C1287 - C334 * C1282) *
                C50913 +
            (C1544 * C1286 - (C1543 * C50942 + C1542 * C1285) + C1545 * C50926 -
             (C117 * C1523 + C50765 * C1524) * C1287 -
             (C117 * C1525 + C50765 * C1526) * C1282) *
                C50807) *
               C2304) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C1285 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50942 -
            (C8086 + C8087 + C8088) * C1286 - (C8089 + C8090 + C8091) * C50926 +
            (C8092 + C8093 + C8094) * C1287 + (C8095 + C8096 + C8097) * C1282) *
               C50913 +
           ((C12983 + C12984 + C12985) * C1285 +
            (C12986 + C12987 + C12988) * C50942 -
            (C8458 + C8457 + C8456) * C1286 - (C8461 + C8460 + C8459) * C50926 +
            (C8464 + C8463 + C8462) * C1287 + (C8467 + C8466 + C8465) * C1282) *
               C50807) *
              C50629 * C50696 * C1283 +
          (((C8274 + C8275 + C8276) * C1286 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50942 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C1285) +
            (C8277 + C8278 + C8279) * C50926 - (C8280 + C8281 + C8282) * C1287 -
            (C8283 + C8284 + C8285) * C1282) *
               C50913 +
           ((C9816 + C9815 + C9814) * C1286 -
            ((C13408 + C13407 + C13406) * C50942 +
             (C13405 + C13404 + C13403) * C1285) +
            (C9819 + C9818 + C9817) * C50926 -
            (C8048 * C3153 + C8043 * C3157 + C8047 * C816 + C8042 * C830 +
             C8046 * C813 + C8041 * C823) *
                C1287 -
            (C8048 * C3156 + C8043 * C3162 + C8047 * C829 + C8042 * C840 +
             C8046 * C824 + C8041 * C837) *
                C1282) *
               C50807) *
              C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1391 +
             (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
             C172 * C50612) *
                C50913 +
            (C5498 * C1391 + C5499 * C1386 - C475 * C1392 - C476 * C50612) *
                C50807) *
               C2302 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                C50913 +
            (C475 * C1391 + C476 * C1386 - C477 * C1392 - C478 * C50612) *
                C50807) *
               C2303 +
           ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
                C50913 +
            (C477 * C1391 + C478 * C1386 - C479 * C1392 - C480 * C50612) *
                C50807) *
               C2304) *
              C50696 * C50944 +
          (((C327 * C1392 -
             ((C117 * C293 + C50765 * C304) * C1386 +
              (C117 * C287 + C50765 * C294) * C1391) +
             C328 * C50612) *
                C50913 +
            (C1540 * C1392 - (C5927 * C1386 + C5926 * C1391) + C1541 * C50612) *
                C50807) *
               C2302 +
           ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                C50913 +
            (C1542 * C1392 - (C1541 * C1386 + C1540 * C1391) + C1543 * C50612) *
                C50807) *
               C2303 +
           ((C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50612) *
                C50913 +
            (C1544 * C1392 - (C1543 * C1386 + C1542 * C1391) + C1545 * C50612) *
                C50807) *
               C2304) *
              C50696 * C50932 +
          ((((C117 * C587 + C50765 * C592) * C1391 +
             (C117 * C593 + C50765 * C602) * C1386 - C620 * C1392 -
             C621 * C50612) *
                C50913 +
            (C5928 * C1391 + C5929 * C1386 - C5656 * C1392 - C5657 * C50612) *
                C50807) *
               C2302 +
           ((C620 * C1391 + C621 * C1386 - C622 * C1392 - C623 * C50612) *
                C50913 +
            (C5656 * C1391 + C5657 * C1386 - C5658 * C1392 - C5659 * C50612) *
                C50807) *
               C2303 +
           ((C622 * C1391 + C623 * C1386 - C624 * C1392 - C625 * C50612) *
                C50913 +
            (C5658 * C1391 + C5659 * C1386 -
             (C117 * C815 + C50765 * C828) * C1392 -
             (C117 * C827 + C50765 * C839) * C50612) *
                C50807) *
               C2304) *
              C50696 * C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C1391 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C1386 -
            (C8086 + C8087 + C8088) * C1392 -
            (C8089 + C8090 + C8091) * C50612) *
               C50913 +
           ((C12983 + C12984 + C12985) * C1391 +
            (C12986 + C12987 + C12988) * C1386 -
            (C8458 + C8457 + C8456) * C1392 -
            (C8461 + C8460 + C8459) * C50612) *
               C50807) *
              C50629 * C50696 * C50944 +
          (((C8274 + C8275 + C8276) * C1392 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C1386 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C1391) +
            (C8277 + C8278 + C8279) * C50612) *
               C50913 +
           ((C9816 + C9815 + C9814) * C1392 -
            ((C13408 + C13407 + C13406) * C1386 +
             (C13405 + C13404 + C13403) * C1391) +
            (C9819 + C9818 + C9817) * C50612) *
               C50807) *
              C50629 * C50696 * C50932 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C1391 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C1386 -
            (C8626 + C8627 + C8628) * C1392 -
            (C8629 + C8630 + C8631) * C50612) *
               C50913 +
           ((C13409 + C13410 + C13411) * C1391 +
            (C13412 + C13413 + C13414) * C1386 -
            (C8048 * C8883 + C8043 * C8886 + C8047 * C3154 + C8042 * C3159 +
             C8046 * C817 + C8041 * C832) *
                C1392 -
            (C8048 * C8885 + C8043 * C8889 + C8047 * C3158 + C8042 * C3163 +
             C8046 * C831 + C8041 * C841) *
                C50612) *
               C50807) *
              C50629 * C50696 * C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C1391 +
              (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
              C172 * C50612) *
                 C50913 +
             (C6906 + C6907 - C6908 - C6909) * C50807) *
                C2302 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                 C50913 +
             (C6910 + C6911 - C6912 - C6913) * C50807) *
                C2303 +
            ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
                 C50913 +
             (C6914 + C6915 - C6916 - C6917) * C50807) *
                C2304) *
               C50900 +
           (((C6908 - (C6907 + C6906) + C6909) * C50913 +
             (C977 * C1392 - (C6114 * C1386 + C6115 * C1391) + C978 * C50612) *
                 C50807) *
                C2302 +
            ((C6912 - (C6911 + C6910) + C6913) * C50913 +
             (C979 * C1392 - (C978 * C1386 + C977 * C1391) + C980 * C50612) *
                 C50807) *
                C2303 +
            ((C6916 - (C6915 + C6914) + C6917) * C50913 +
             (C981 * C1392 - (C980 * C1386 + C979 * C1391) + C982 * C50612) *
                 C50807) *
                C2304) *
               C50708) *
              C1283 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50765 * C304) * C1386 +
               (C117 * C287 + C50765 * C294) * C1391) +
              C328 * C50612) *
                 C50913 +
             (C6918 - (C6919 + C6920) + C6921) * C50807) *
                C2302 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                 C50913 +
             (C6922 - (C6923 + C6924) + C6925) * C50807) *
                C2303 +
            ((C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50612) *
                 C50913 +
             (C6926 - (C6927 + C6928) + C6929) * C50807) *
                C2304) *
               C50900 +
           (((C6920 + C6919 - C6918 - C6921) * C50913 +
             (C6286 * C1391 + C6287 * C1386 - C6288 * C1392 - C6289 * C50612) *
                 C50807) *
                C2302 +
            ((C6924 + C6923 - C6922 - C6925) * C50913 +
             (C6288 * C1391 + C6289 * C1386 - C6290 * C1392 - C6291 * C50612) *
                 C50807) *
                C2303 +
            ((C6928 + C6927 - C6926 - C6929) * C50913 +
             (C6290 * C1391 + C6291 * C1386 -
              (C117 * C1080 + C50765 * C1085) * C1392 -
              (C117 * C1084 + C50765 * C1092) * C50612) *
                 C50807) *
                C2304) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C1391 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C1386 -
             (C8086 + C8087 + C8088) * C1392 -
             (C8089 + C8090 + C8091) * C50612) *
                C50913 +
            ((C12983 + C12984 + C12985) * C1391 +
             (C12986 + C12987 + C12988) * C1386 -
             (C8458 + C8457 + C8456) * C1392 -
             (C8461 + C8460 + C8459) * C50612) *
                C50807) *
               C50629 * C50900 +
           (((C8456 + C8457 + C8458) * C1392 -
             ((C12988 + C12987 + C12986) * C1386 +
              (C12985 + C12984 + C12983) * C1391) +
             (C8459 + C8460 + C8461) * C50612) *
                C50913 +
            ((C9052 + C9051 + C9050) * C1392 -
             ((C13573 + C13574 + C13575) * C1386 +
              (C13576 + C13577 + C13578) * C1391) +
             (C9055 + C9054 + C9053) * C50612) *
                C50807) *
               C50629 * C50708) *
              C1283 +
          ((((C8274 + C8275 + C8276) * C1392 -
             ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
               C8046 * C293 + C8041 * C304) *
                  C1386 +
              (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
               C8046 * C287 + C8041 * C294) *
                  C1391) +
             (C8277 + C8278 + C8279) * C50612) *
                C50913 +
            ((C9816 + C9815 + C9814) * C1392 -
             ((C13408 + C13407 + C13406) * C1386 +
              (C13405 + C13404 + C13403) * C1391) +
             (C9819 + C9818 + C9817) * C50612) *
                C50807) *
               C50629 * C50900 +
           (((C13403 + C13404 + C13405) * C1391 +
             (C13406 + C13407 + C13408) * C1386 -
             (C9814 + C9815 + C9816) * C1392 -
             (C9817 + C9818 + C9819) * C50612) *
                C50913 +
            ((C13737 + C13738 + C13739) * C1391 +
             (C13740 + C13741 + C13742) * C1386 -
             (C8048 * C9201 + C8043 * C9204 + C8047 * C3482 + C8042 * C3487 +
              C8046 * C1082 + C8041 * C1089) *
                 C1392 -
             (C8048 * C9203 + C8043 * C9207 + C8047 * C3486 + C8042 * C3491 +
              C8046 * C1088 + C8041 * C1094) *
                 C50612) *
                C50807) *
               C50629 * C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C49720 +
              (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
              C172 * C50612) *
                 C50913 +
             (C6080 + C6081 - C6082 - C6083) * C50807) *
                C2302 +
            ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                 C50913 +
             (C6084 + C6085 - C6086 - C6087) * C50807) *
                C2303 +
            ((C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
                 C50913 +
             (C6088 + C6089 - C6090 - C6091) * C50807) *
                C2304) *
               C1643 +
           (((C6082 - (C6081 + C6080) + C6083) * C50913 +
             (C6092 - (C6120 + C6121) + C6097) * C50807) *
                C2302 +
            ((C6086 - (C6085 + C6084) + C6087) * C50913 +
             (C6098 - (C6099 + C6100) + C6101) * C50807) *
                C2303 +
            ((C6090 - (C6089 + C6088) + C6091) * C50913 +
             (C6102 - (C6103 + C6104) + C6105) * C50807) *
                C2304) *
               C50708) *
              C1283 +
          ((((C327 * C49713 -
              ((C117 * C293 + C50765 * C304) * C50884 +
               (C117 * C287 + C50765 * C294) * C49720) +
              C328 * C50612) *
                 C50913 +
             (C7640 - (C7641 + C7642) + C7643) * C50807) *
                C2302 +
            ((C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
                 C50913 +
             (C7644 - (C7645 + C7646) + C7647) * C50807) *
                C2303 +
            ((C331 * C49713 - (C330 * C50884 + C329 * C49720) + C332 * C50612) *
                 C50913 +
             (C7648 - (C7649 + C7650) + C7651) * C50807) *
                C2304) *
               C1643 +
           (((C7642 + C7641 - C7640 - C7643) * C50913 +
             (C6286 * C49720 + C6287 * C50884 - C6288 * C49713 -
              C6289 * C50612) *
                 C50807) *
                C2302 +
            ((C7646 + C7645 - C7644 - C7647) * C50913 +
             (C6288 * C49720 + C6289 * C50884 - C6290 * C49713 -
              C6291 * C50612) *
                 C50807) *
                C2303 +
            ((C7650 + C7649 - C7648 - C7651) * C50913 +
             (C6290 * C49720 + C6291 * C50884 -
              (C117 * C1080 + C50765 * C1085) * C49713 -
              (C117 * C1084 + C50765 * C1092) * C50612) *
                 C50807) *
                C2304) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C49720 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50884 -
             (C8086 + C8087 + C8088) * C49713 -
             (C8089 + C8090 + C8091) * C50612) *
                C50913 +
            ((C12983 + C12984 + C12985) * C49720 +
             (C12986 + C12987 + C12988) * C50884 -
             (C8458 + C8457 + C8456) * C49713 -
             (C8461 + C8460 + C8459) * C50612) *
                C50807) *
               C50629 * C1643 +
           (((C8456 + C8457 + C8458) * C49713 -
             ((C12988 + C12987 + C12986) * C50884 +
              (C12985 + C12984 + C12983) * C49720) +
             (C8459 + C8460 + C8461) * C50612) *
                C50913 +
            ((C9052 + C9051 + C9050) * C49713 -
             ((C13573 + C13574 + C13575) * C50884 +
              (C13576 + C13577 + C13578) * C49720) +
             (C9055 + C9054 + C9053) * C50612) *
                C50807) *
               C50629 * C50708) *
              C1283 +
          ((((C8274 + C8275 + C8276) * C49713 -
             ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
               C8046 * C293 + C8041 * C304) *
                  C50884 +
              (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
               C8046 * C287 + C8041 * C294) *
                  C49720) +
             (C8277 + C8278 + C8279) * C50612) *
                C50913 +
            ((C9816 + C9815 + C9814) * C49713 -
             ((C13408 + C13407 + C13406) * C50884 +
              (C13405 + C13404 + C13403) * C49720) +
             (C9819 + C9818 + C9817) * C50612) *
                C50807) *
               C50629 * C1643 +
           (((C13403 + C13404 + C13405) * C49720 +
             (C13406 + C13407 + C13408) * C50884 -
             (C9814 + C9815 + C9816) * C49713 -
             (C9817 + C9818 + C9819) * C50612) *
                C50913 +
            ((C13737 + C13738 + C13739) * C49720 +
             (C13740 + C13741 + C13742) * C50884 -
             (C8048 * C9201 + C8043 * C9204 + C8047 * C3482 + C8042 * C3487 +
              C8046 * C1082 + C8041 * C1089) *
                 C49713 -
             (C8048 * C9203 + C8043 * C9207 + C8047 * C3486 + C8042 * C3491 +
              C8046 * C1088 + C8041 * C1094) *
                 C50612) *
                C50807) *
               C50629 * C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C50913 +
             (C5904 + C5905) * C50807) *
                C2302 +
            ((C171 * C696 + C172 * C50607) * C50913 +
             (C5906 + C5907) * C50807) *
                C2303 +
            ((C173 * C696 + C174 * C50607) * C50913 +
             (C5908 + C5909) * C50807) *
                C2304) *
               C1643 -
           (((C6268 + C6269) * C50807 + (C5909 + C5908) * C50913) * C2304 +
            ((C6270 + C6271) * C50807 + (C5907 + C5906) * C50913) * C2303 +
            ((C6272 + C6273) * C50807 + (C5905 + C5904) * C50913) * C2302) *
               C50708) *
              C50944 +
          ((((C5930 + C5931) * C50913 + (C6292 + C6293) * C50807) * C2302 +
            ((C5914 + C5915) * C50913 + (C6294 + C6295) * C50807) * C2303 +
            ((C5916 + C5917) * C50913 + (C6296 + C6297) * C50807) * C2304) *
               C50708 -
           (((C5917 + C5916) * C50807 +
             (C330 * C50607 + C329 * C696) * C50913) *
                C2304 +
            ((C5915 + C5914) * C50807 +
             (C328 * C50607 + C327 * C696) * C50913) *
                C2303 +
            ((C5931 + C5930) * C50807 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C50913) *
                C2302) *
               C1643) *
              C50932 +
          (((((C117 * C587 + C50765 * C592) * C696 +
              (C117 * C593 + C50765 * C602) * C50607) *
                 C50913 +
             (C5932 + C5933) * C50807) *
                C2302 +
            ((C620 * C696 + C621 * C50607) * C50913 +
             (C5922 + C5923) * C50807) *
                C2303 +
            ((C622 * C696 + C623 * C50607) * C50913 +
             (C5924 + C5925) * C50807) *
                C2304) *
               C1643 -
           ((((C117 * C3484 + C50765 * C3490) * C50607 +
              (C117 * C3481 + C50765 * C3485) * C696) *
                 C50807 +
             (C5925 + C5924) * C50913) *
                C2304 +
            (((C117 * C3486 + C50765 * C3491) * C50607 +
              (C117 * C3482 + C50765 * C3487) * C696) *
                 C50807 +
             (C5923 + C5922) * C50913) *
                C2303 +
            (((C117 * C3488 + C50765 * C3492) * C50607 +
              (C117 * C3483 + C50765 * C3489) * C696) *
                 C50807 +
             (C5933 + C5932) * C50913) *
                C2302) *
               C50708) *
              C1390)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C696 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50607) *
                C50913 +
            ((C12983 + C12984 + C12985) * C696 +
             (C12986 + C12987 + C12988) * C50607) *
                C50807) *
               C50629 * C1643 -
           (((C13573 + C13574 + C13575) * C50607 +
             (C13576 + C13577 + C13578) * C696) *
                C50807 +
            ((C12988 + C12987 + C12986) * C50607 +
             (C12985 + C12984 + C12983) * C696) *
                C50913) *
               C50629 * C50708) *
              C50944 +
          ((((C13403 + C13404 + C13405) * C696 +
             (C13406 + C13407 + C13408) * C50607) *
                C50913 +
            ((C13737 + C13738 + C13739) * C696 +
             (C13740 + C13741 + C13742) * C50607) *
                C50807) *
               C50629 * C50708 -
           (((C13408 + C13407 + C13406) * C50607 +
             (C13405 + C13404 + C13403) * C696) *
                C50807 +
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50607 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C696) *
                C50913) *
               C50629 * C1643) *
              C50932 +
          ((((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
              C8048 * C2997 + C8043 * C3003) *
                 C696 +
             (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
              C8048 * C3002 + C8043 * C3006) *
                 C50607) *
                C50913 +
            ((C13409 + C13410 + C13411) * C696 +
             (C13412 + C13413 + C13414) * C50607) *
                C50807) *
               C50629 * C1643 -
           (((C8048 * C11529 + C8043 * C11531 + C8047 * C9205 + C8042 * C9208 +
              C8046 * C3488 + C8041 * C3492) *
                 C50607 +
             (C8048 * C11528 + C8043 * C11530 + C8047 * C9202 + C8042 * C9206 +
              C8046 * C3483 + C8041 * C3489) *
                 C696) *
                C50807 +
            ((C13414 + C13413 + C13412) * C50607 +
             (C13411 + C13410 + C13409) * C696) *
                C50913) *
               C50629 * C50708) *
              C1390)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C50913 +
             (C5904 + C5905) * C50807) *
                C2302 +
            ((C171 * C696 + C172 * C50607) * C50913 +
             (C5906 + C5907) * C50807) *
                C2303 +
            ((C173 * C696 + C174 * C50607) * C50913 +
             (C5908 + C5909) * C50807) *
                C2304) *
               C50945 -
           (((C6268 + C6269) * C50807 + (C5909 + C5908) * C50913) * C2304 +
            ((C6270 + C6271) * C50807 + (C5907 + C5906) * C50913) * C2303 +
            ((C6272 + C6273) * C50807 + (C5905 + C5904) * C50913) * C2302) *
               C50935 +
           (((C6273 + C6272) * C50913 + (C6418 + C6419) * C50807) * C2302 +
            ((C6271 + C6270) * C50913 + (C6412 + C6413) * C50807) * C2303 +
            ((C6269 + C6268) * C50913 + (C6414 + C6415) * C50807) * C2304) *
               C1875) *
              C1283 +
          ((((C5930 + C5931) * C50913 + (C6292 + C6293) * C50807) * C2302 +
            ((C5914 + C5915) * C50913 + (C6294 + C6295) * C50807) * C2303 +
            ((C5916 + C5917) * C50913 + (C6296 + C6297) * C50807) * C2304) *
               C50935 -
           (((C5917 + C5916) * C50807 +
             (C330 * C50607 + C329 * C696) * C50913) *
                C2304 +
            ((C5915 + C5914) * C50807 +
             (C328 * C50607 + C327 * C696) * C50913) *
                C2303 +
            ((C5931 + C5930) * C50807 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C50913) *
                C2302) *
               C50945 -
           ((((C117 * C3594 + C50765 * C3600) * C50607 +
              (C117 * C3591 + C50765 * C3595) * C696) *
                 C50807 +
             (C6297 + C6296) * C50913) *
                C2304 +
            (((C117 * C3596 + C50765 * C3601) * C50607 +
              (C117 * C3592 + C50765 * C3597) * C696) *
                 C50807 +
             (C6295 + C6294) * C50913) *
                C2303 +
            (((C117 * C3598 + C50765 * C3602) * C50607 +
              (C117 * C3593 + C50765 * C3599) * C696) *
                 C50807 +
             (C6293 + C6292) * C50913) *
                C2302) *
               C1875) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C696 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50607) *
                C50913 +
            ((C12983 + C12984 + C12985) * C696 +
             (C12986 + C12987 + C12988) * C50607) *
                C50807) *
               C50629 * C50945 -
           (((C13573 + C13574 + C13575) * C50607 +
             (C13576 + C13577 + C13578) * C696) *
                C50807 +
            ((C12988 + C12987 + C12986) * C50607 +
             (C12985 + C12984 + C12983) * C696) *
                C50913) *
               C50629 * C50935 +
           (((C13578 + C13577 + C13576) * C696 +
             (C13575 + C13574 + C13573) * C50607) *
                C50913 +
            ((C13861 + C13862 + C13863) * C696 +
             (C13864 + C13865 + C13866) * C50607) *
                C50807) *
               C50629 * C1875) *
              C1283 +
          ((((C13403 + C13404 + C13405) * C696 +
             (C13406 + C13407 + C13408) * C50607) *
                C50913 +
            ((C13737 + C13738 + C13739) * C696 +
             (C13740 + C13741 + C13742) * C50607) *
                C50807) *
               C50629 * C50935 -
           (((C13408 + C13407 + C13406) * C50607 +
             (C13405 + C13404 + C13403) * C696) *
                C50807 +
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50607 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C696) *
                C50913) *
               C50629 * C50945 -
           (((C8048 * C11599 + C8043 * C11601 + C8047 * C9311 + C8042 * C9314 +
              C8046 * C3598 + C8041 * C3602) *
                 C50607 +
             (C8048 * C11598 + C8043 * C11600 + C8047 * C9308 + C8042 * C9312 +
              C8046 * C3593 + C8041 * C3599) *
                 C696) *
                C50807 +
            ((C13742 + C13741 + C13740) * C50607 +
             (C13739 + C13738 + C13737) * C696) *
                C50913) *
               C50629 * C1875) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C49720 +
             (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
             C172 * C50612) *
                C50913 +
            (C5498 * C49720 + C5499 * C50884 - C475 * C49713 - C476 * C50612) *
                C50807) *
               C2302 +
           ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                C50913 +
            (C475 * C49720 + C476 * C50884 - C477 * C49713 - C478 * C50612) *
                C50807) *
               C2303 +
           ((C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
                C50913 +
            (C477 * C49720 + C478 * C50884 - C479 * C49713 - C480 * C50612) *
                C50807) *
               C2304) *
              C50696 * C582 +
          (((C327 * C49713 -
             ((C117 * C293 + C50765 * C304) * C50884 +
              (C117 * C287 + C50765 * C294) * C49720) +
             C328 * C50612) *
                C50913 +
            (C1540 * C49713 -
             ((C117 * C820 + C50765 * C835) * C50884 +
              (C117 * C811 + C50765 * C819) * C49720) +
             C1541 * C50612) *
                C50807) *
               C2302 +
           ((C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
                C50913 +
            (C1542 * C49713 - (C1541 * C50884 + C1540 * C49720) +
             C1543 * C50612) *
                C50807) *
               C2303 +
           ((C331 * C49713 - (C330 * C50884 + C329 * C49720) + C332 * C50612) *
                C50913 +
            (C1544 * C49713 - (C1543 * C50884 + C1542 * C49720) +
             C1545 * C50612) *
                C50807) *
               C2304) *
              C50696 * C583 +
          ((((C117 * C587 + C50765 * C592) * C49720 +
             (C117 * C593 + C50765 * C602) * C50884 - C620 * C49713 -
             C621 * C50612) *
                C50913 +
            ((C117 * C818 + C50765 * C834) * C49720 +
             (C117 * C833 + C50765 * C842) * C50884 - C5656 * C49713 -
             C5657 * C50612) *
                C50807) *
               C2302 +
           ((C620 * C49720 + C621 * C50884 - C622 * C49713 - C623 * C50612) *
                C50913 +
            (C5656 * C49720 + C5657 * C50884 - C5658 * C49713 -
             C5659 * C50612) *
                C50807) *
               C2303 +
           ((C622 * C49720 + C623 * C50884 - C624 * C49713 - C625 * C50612) *
                C50913 +
            (C5658 * C49720 + C5659 * C50884 -
             (C117 * C815 + C50765 * C828) * C49713 -
             (C117 * C827 + C50765 * C839) * C50612) *
                C50807) *
               C2304) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C118 +
            (C117 * C130 + C50765 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C50913 +
           ((C117 * C435 + C50765 * C442) * C118 +
            (C117 * C441 + C50765 * C452) * C106 - C475 * C119 - C476 * C107 +
            C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
               C50807) *
              C2302 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50913 +
           (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
            C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
               C50807) *
              C2303 +
          ((C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C50913 +
           (C477 * C118 + C478 * C106 - C479 * C119 - C480 * C107 +
            C481 * C120 + C482 * C108 - (C117 * C439 + C50765 * C450) * C121 -
            (C117 * C451 + C50765 * C457) * C109) *
               C50807) *
              C2304) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C49720 +
             (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
             C172 * C50612) *
                C50913 +
            (C6080 + C6081 - C6082 - C6083) * C50807) *
               C2302 +
           ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                C50913 +
            (C6084 + C6085 - C6086 - C6087) * C50807) *
               C2303 +
           ((C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
                C50913 +
            (C6088 + C6089 - C6090 - C6091) * C50807) *
               C2304) *
              C941 +
          (((C6082 - (C6081 + C6080) + C6083) * C50913 +
            (C6092 - (C6120 + C6121) + C6097) * C50807) *
               C2302 +
           ((C6086 - (C6085 + C6084) + C6087) * C50913 +
            (C6098 - (C6099 + C6100) + C6101) * C50807) *
               C2303 +
           ((C6090 - (C6089 + C6088) + C6091) * C50913 +
            (C6102 - (C6103 + C6104) + C6105) * C50807) *
               C2304) *
              C942 +
          (((C6121 + C6120 - C6092 - C6097) * C50913 +
            ((C117 * C1169 + C50765 * C1177) * C49720 +
             (C117 * C1176 + C50765 * C1181) * C50884 - C6116 * C49713 -
             C6117 * C50612) *
                C50807) *
               C2302 +
           ((C6100 + C6099 - C6098 - C6101) * C50913 +
            (C6116 * C49720 + C6117 * C50884 - C6118 * C49713 -
             C6119 * C50612) *
                C50807) *
               C2303 +
           ((C6104 + C6103 - C6102 - C6105) * C50913 +
            (C6118 * C49720 + C6119 * C50884 -
             (C117 * C1166 + C50765 * C1171) * C49713 -
             (C117 * C1170 + C50765 * C1178) * C50612) *
                C50807) *
               C2304) *
              C943) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
            C8048 * C587 + C8043 * C592) *
               C118 +
           (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
            C8048 * C593 + C8043 * C602) *
               C106 -
           (C8086 + C8087 + C8088) * C119 - (C8089 + C8090 + C8091) * C107 +
           (C8092 + C8093 + C8094) * C120 + (C8095 + C8096 + C8097) * C108 -
           (C8098 + C8099 + C8100) * C121 - (C8101 + C8102 + C8103) * C109) *
              C50913 +
          ((C8046 * C435 + C8041 * C442 + C8047 * C811 + C8042 * C819 +
            C8048 * C818 + C8043 * C834) *
               C118 +
           (C8046 * C441 + C8041 * C452 + C8047 * C820 + C8042 * C835 +
            C8048 * C833 + C8043 * C842) *
               C106 -
           (C8458 + C8457 + C8456) * C119 - (C8461 + C8460 + C8459) * C107 +
           (C8464 + C8463 + C8462) * C120 + (C8467 + C8466 + C8465) * C108 -
           (C8048 * C815 + C8043 * C828 + C8047 * C814 + C8042 * C825 +
            C8046 * C437 + C8041 * C446) *
               C121 -
           (C8048 * C827 + C8043 * C839 + C8047 * C826 + C8042 * C838 +
            C8046 * C447 + C8041 * C455) *
               C109) *
              C50807) *
         C50629 * C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C49720 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50884 -
            (C8086 + C8087 + C8088) * C49713 -
            (C8089 + C8090 + C8091) * C50612) *
               C50913 +
           ((C12983 + C12984 + C12985) * C49720 +
            (C12986 + C12987 + C12988) * C50884 -
            (C8458 + C8457 + C8456) * C49713 -
            (C8461 + C8460 + C8459) * C50612) *
               C50807) *
              C50629 * C50696 * C582 +
          (((C8274 + C8275 + C8276) * C49713 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50884 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C49720) +
            (C8277 + C8278 + C8279) * C50612) *
               C50913 +
           ((C9816 + C9815 + C9814) * C49713 -
            ((C8048 * C3160 + C8043 * C3164 + C8047 * C833 + C8042 * C842 +
              C8046 * C820 + C8041 * C835) *
                 C50884 +
             (C8048 * C3155 + C8043 * C3161 + C8047 * C818 + C8042 * C834 +
              C8046 * C811 + C8041 * C819) *
                 C49720) +
            (C9819 + C9818 + C9817) * C50612) *
               C50807) *
              C50629 * C50696 * C583 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C49720 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C50884 -
            (C8626 + C8627 + C8628) * C49713 -
            (C8629 + C8630 + C8631) * C50612) *
               C50913 +
           ((C8046 * C818 + C8041 * C834 + C8047 * C3155 + C8042 * C3161 +
             C8048 * C8884 + C8043 * C8888) *
                C49720 +
            (C8046 * C833 + C8041 * C842 + C8047 * C3160 + C8042 * C3164 +
             C8048 * C8887 + C8043 * C8890) *
                C50884 -
            (C8048 * C8883 + C8043 * C8886 + C8047 * C3154 + C8042 * C3159 +
             C8046 * C817 + C8041 * C832) *
                C49713 -
            (C8048 * C8885 + C8043 * C8889 + C8047 * C3158 + C8042 * C3163 +
             C8046 * C831 + C8041 * C841) *
                C50612) *
               C50807) *
              C50629 * C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C49720 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50884 -
            (C8086 + C8087 + C8088) * C49713 -
            (C8089 + C8090 + C8091) * C50612) *
               C50913 +
           ((C12983 + C12984 + C12985) * C49720 +
            (C12986 + C12987 + C12988) * C50884 -
            (C8458 + C8457 + C8456) * C49713 -
            (C8461 + C8460 + C8459) * C50612) *
               C50807) *
              C50629 * C941 +
          (((C8456 + C8457 + C8458) * C49713 -
            ((C12988 + C12987 + C12986) * C50884 +
             (C12985 + C12984 + C12983) * C49720) +
            (C8459 + C8460 + C8461) * C50612) *
               C50913 +
           ((C9052 + C9051 + C9050) * C49713 -
            ((C13573 + C13574 + C13575) * C50884 +
             (C13576 + C13577 + C13578) * C49720) +
            (C9055 + C9054 + C9053) * C50612) *
               C50807) *
              C50629 * C942 +
          (((C13578 + C13577 + C13576) * C49720 +
            (C13575 + C13574 + C13573) * C50884 -
            (C9050 + C9051 + C9052) * C49713 -
            (C9053 + C9054 + C9055) * C50612) *
               C50913 +
           ((C8046 * C1169 + C8041 * C1177 + C8047 * C3593 + C8042 * C3599 +
             C8048 * C9308 + C8043 * C9312) *
                C49720 +
            (C8046 * C1176 + C8041 * C1181 + C8047 * C3598 + C8042 * C3602 +
             C8048 * C9311 + C8043 * C9314) *
                C50884 -
            (C8048 * C9307 + C8043 * C9310 + C8047 * C3592 + C8042 * C3597 +
             C8046 * C1168 + C8041 * C1175) *
                C49713 -
            (C8048 * C9309 + C8043 * C9313 + C8047 * C3596 + C8042 * C3601 +
             C8046 * C1174 + C8041 * C1180) *
                C50612) *
               C50807) *
              C50629 * C943) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C50913 +
            (C5498 * C696 + C5499 * C50607) * C50807) *
               C2302 +
           ((C171 * C696 + C172 * C50607) * C50913 +
            (C475 * C696 + C476 * C50607) * C50807) *
               C2303 +
           ((C173 * C696 + C174 * C50607) * C50913 +
            (C477 * C696 + C478 * C50607) * C50807) *
               C2304) *
              C50696 * C692 -
          (((C1543 * C50607 + C1542 * C696) * C50807 +
            (C330 * C50607 + C329 * C696) * C50913) *
               C2304 +
           ((C1541 * C50607 + C1540 * C696) * C50807 +
            (C328 * C50607 + C327 * C696) * C50913) *
               C2303 +
           (((C117 * C820 + C50765 * C835) * C50607 +
             (C117 * C811 + C50765 * C819) * C696) *
                C50807 +
            ((C117 * C293 + C50765 * C304) * C50607 +
             (C117 * C287 + C50765 * C294) * C696) *
                C50913) *
               C2302) *
              C50696 * C693 +
          ((((C117 * C587 + C50765 * C592) * C696 +
             (C117 * C593 + C50765 * C602) * C50607) *
                C50913 +
            ((C117 * C818 + C50765 * C834) * C696 +
             (C117 * C833 + C50765 * C842) * C50607) *
                C50807) *
               C2302 +
           ((C620 * C696 + C621 * C50607) * C50913 +
            (C5656 * C696 + C5657 * C50607) * C50807) *
               C2303 +
           ((C622 * C696 + C623 * C50607) * C50913 +
            (C5658 * C696 + C5659 * C50607) * C50807) *
               C2304) *
              C50696 * C694 -
          ((((C117 * C3156 + C50765 * C3162) * C50607 +
             (C117 * C3153 + C50765 * C3157) * C696) *
                C50807 +
            ((C117 * C703 + C50765 * C710) * C50607 +
             (C117 * C698 + C50765 * C704) * C696) *
                C50913) *
               C2304 +
           (((C117 * C3158 + C50765 * C3163) * C50607 +
             (C117 * C3154 + C50765 * C3159) * C696) *
                C50807 +
            ((C117 * C705 + C50765 * C711) * C50607 +
             (C117 * C699 + C50765 * C706) * C696) *
                C50913) *
               C2303 +
           (((C117 * C3160 + C50765 * C3164) * C50607 +
             (C117 * C3155 + C50765 * C3161) * C696) *
                C50807 +
            ((C117 * C707 + C50765 * C712) * C50607 +
             (C117 * C700 + C50765 * C708) * C696) *
                C50913) *
               C2302) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C283 +
             (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C50913 +
            ((C117 * C435 + C50765 * C442) * C283 +
             (C117 * C441 + C50765 * C452) * C278 - C475 * C284 - C476 * C279 +
             C477 * C285 + C478 * C280) *
                C50807) *
               C2302 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50913 +
            (C475 * C283 + C476 * C278 - C477 * C284 - C478 * C279 +
             C479 * C285 + C480 * C280) *
                C50807) *
               C2303 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C50913 +
            (C477 * C283 + C478 * C278 - C479 * C284 - C480 * C279 +
             C481 * C285 + C482 * C280) *
                C50807) *
               C2304) *
              C50696 * C50899 +
          (((C327 * C284 -
             ((C117 * C293 + C50765 * C304) * C278 +
              (C117 * C287 + C50765 * C294) * C283) +
             C328 * C279 - C329 * C285 - C330 * C280) *
                C50913 +
            (C1540 * C284 -
             ((C117 * C820 + C50765 * C835) * C278 +
              (C117 * C811 + C50765 * C819) * C283) +
             C1541 * C279 - C1542 * C285 - C1543 * C280) *
                C50807) *
               C2302 +
           ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
             C331 * C285 - C332 * C280) *
                C50913 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50807) *
               C2303 +
           ((C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
             C333 * C285 - C334 * C280) *
                C50913 +
            (C1544 * C284 - (C1543 * C278 + C1542 * C283) + C1545 * C279 -
             (C117 * C1523 + C50765 * C1524) * C285 -
             (C117 * C1525 + C50765 * C1526) * C280) *
                C50807) *
               C2304) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C50913 +
             (C5904 + C5905) * C50807) *
                C2302 +
            ((C171 * C696 + C172 * C50607) * C50913 +
             (C5906 + C5907) * C50807) *
                C2303 +
            ((C173 * C696 + C174 * C50607) * C50913 +
             (C5908 + C5909) * C50807) *
                C2304) *
               C941 -
           (((C6268 + C6269) * C50807 + (C5909 + C5908) * C50913) * C2304 +
            ((C6270 + C6271) * C50807 + (C5907 + C5906) * C50913) * C2303 +
            ((C6272 + C6273) * C50807 + (C5905 + C5904) * C50913) * C2302) *
               C942 +
           (((C6273 + C6272) * C50913 +
             ((C117 * C1169 + C50765 * C1177) * C696 +
              (C117 * C1176 + C50765 * C1181) * C50607) *
                 C50807) *
                C2302 +
            ((C6271 + C6270) * C50913 +
             (C6116 * C696 + C6117 * C50607) * C50807) *
                C2303 +
            ((C6269 + C6268) * C50913 +
             (C6118 * C696 + C6119 * C50607) * C50807) *
                C2304) *
               C943) *
              C50899 +
          ((((C5930 + C5931) * C50913 + (C6292 + C6293) * C50807) * C2302 +
            ((C5914 + C5915) * C50913 + (C6294 + C6295) * C50807) * C2303 +
            ((C5916 + C5917) * C50913 + (C6296 + C6297) * C50807) * C2304) *
               C942 -
           (((C5917 + C5916) * C50807 +
             (C330 * C50607 + C329 * C696) * C50913) *
                C2304 +
            ((C5915 + C5914) * C50807 +
             (C328 * C50607 + C327 * C696) * C50913) *
                C2303 +
            ((C5931 + C5930) * C50807 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C50913) *
                C2302) *
               C941 -
           ((((C117 * C3594 + C50765 * C3600) * C50607 +
              (C117 * C3591 + C50765 * C3595) * C696) *
                 C50807 +
             (C6297 + C6296) * C50913) *
                C2304 +
            (((C117 * C3596 + C50765 * C3601) * C50607 +
              (C117 * C3592 + C50765 * C3597) * C696) *
                 C50807 +
             (C6295 + C6294) * C50913) *
                C2303 +
            (((C117 * C3598 + C50765 * C3602) * C50607 +
              (C117 * C3593 + C50765 * C3599) * C696) *
                 C50807 +
             (C6293 + C6292) * C50913) *
                C2302) *
               C943) *
              C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C283 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C278 -
            (C8086 + C8087 + C8088) * C284 - (C8089 + C8090 + C8091) * C279 +
            (C8092 + C8093 + C8094) * C285 + (C8095 + C8096 + C8097) * C280) *
               C50913 +
           ((C8046 * C435 + C8041 * C442 + C8047 * C811 + C8042 * C819 +
             C8048 * C818 + C8043 * C834) *
                C283 +
            (C8046 * C441 + C8041 * C452 + C8047 * C820 + C8042 * C835 +
             C8048 * C833 + C8043 * C842) *
                C278 -
            (C8458 + C8457 + C8456) * C284 - (C8461 + C8460 + C8459) * C279 +
            (C8464 + C8463 + C8462) * C285 + (C8467 + C8466 + C8465) * C280) *
               C50807) *
              C50629 * C50696 * C50899 +
          (((C8274 + C8275 + C8276) * C284 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C278 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C283) +
            (C8277 + C8278 + C8279) * C279 - (C8280 + C8281 + C8282) * C285 -
            (C8283 + C8284 + C8285) * C280) *
               C50913 +
           ((C9816 + C9815 + C9814) * C284 -
            ((C8048 * C3160 + C8043 * C3164 + C8047 * C833 + C8042 * C842 +
              C8046 * C820 + C8041 * C835) *
                 C278 +
             (C8048 * C3155 + C8043 * C3161 + C8047 * C818 + C8042 * C834 +
              C8046 * C811 + C8041 * C819) *
                 C283) +
            (C9819 + C9818 + C9817) * C279 -
            (C8048 * C3153 + C8043 * C3157 + C8047 * C816 + C8042 * C830 +
             C8046 * C813 + C8041 * C823) *
                C285 -
            (C8048 * C3156 + C8043 * C3162 + C8047 * C829 + C8042 * C840 +
             C8046 * C824 + C8041 * C837) *
                C280) *
               C50807) *
              C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C696 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50607) *
               C50913 +
           ((C12983 + C12984 + C12985) * C696 +
            (C12986 + C12987 + C12988) * C50607) *
               C50807) *
              C50629 * C50696 * C692 -
          (((C8048 * C3160 + C8043 * C3164 + C8047 * C833 + C8042 * C842 +
             C8046 * C820 + C8041 * C835) *
                C50607 +
            (C8048 * C3155 + C8043 * C3161 + C8047 * C818 + C8042 * C834 +
             C8046 * C811 + C8041 * C819) *
                C696) *
               C50807 +
           ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
             C8046 * C293 + C8041 * C304) *
                C50607 +
            (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
             C8046 * C287 + C8041 * C294) *
                C696) *
               C50913) *
              C50629 * C50696 * C693 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C696 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C50607) *
               C50913 +
           ((C8046 * C818 + C8041 * C834 + C8047 * C3155 + C8042 * C3161 +
             C8048 * C8884 + C8043 * C8888) *
                C696 +
            (C8046 * C833 + C8041 * C842 + C8047 * C3160 + C8042 * C3164 +
             C8048 * C8887 + C8043 * C8890) *
                C50607) *
               C50807) *
              C50629 * C50696 * C694 -
          (((C8048 * C11329 + C8043 * C11331 + C8047 * C8887 + C8042 * C8890 +
             C8046 * C3160 + C8041 * C3164) *
                C50607 +
            (C8048 * C11328 + C8043 * C11330 + C8047 * C8884 + C8042 * C8888 +
             C8046 * C3155 + C8041 * C3161) *
                C696) *
               C50807 +
           ((C8048 * C8733 + C8043 * C8736 + C8047 * C3002 + C8042 * C3006 +
             C8046 * C707 + C8041 * C712) *
                C50607 +
            (C8048 * C8730 + C8043 * C8734 + C8047 * C2997 + C8042 * C3003 +
             C8046 * C700 + C8041 * C708) *
                C696) *
               C50913) *
              C50629 * C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C696 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50607) *
                C50913 +
            ((C12983 + C12984 + C12985) * C696 +
             (C12986 + C12987 + C12988) * C50607) *
                C50807) *
               C50629 * C941 -
           (((C13573 + C13574 + C13575) * C50607 +
             (C13576 + C13577 + C13578) * C696) *
                C50807 +
            ((C12988 + C12987 + C12986) * C50607 +
             (C12985 + C12984 + C12983) * C696) *
                C50913) *
               C50629 * C942 +
           (((C13578 + C13577 + C13576) * C696 +
             (C13575 + C13574 + C13573) * C50607) *
                C50913 +
            ((C8046 * C1169 + C8041 * C1177 + C8047 * C3593 + C8042 * C3599 +
              C8048 * C9308 + C8043 * C9312) *
                 C696 +
             (C8046 * C1176 + C8041 * C1181 + C8047 * C3598 + C8042 * C3602 +
              C8048 * C9311 + C8043 * C9314) *
                 C50607) *
                C50807) *
               C50629 * C943) *
              C50899 +
          ((((C13403 + C13404 + C13405) * C696 +
             (C13406 + C13407 + C13408) * C50607) *
                C50913 +
            ((C13737 + C13738 + C13739) * C696 +
             (C13740 + C13741 + C13742) * C50607) *
                C50807) *
               C50629 * C942 -
           (((C13408 + C13407 + C13406) * C50607 +
             (C13405 + C13404 + C13403) * C696) *
                C50807 +
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50607 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C696) *
                C50913) *
               C50629 * C941 -
           (((C8048 * C11599 + C8043 * C11601 + C8047 * C9311 + C8042 * C9314 +
              C8046 * C3598 + C8041 * C3602) *
                 C50607 +
             (C8048 * C11598 + C8043 * C11600 + C8047 * C9308 + C8042 * C9312 +
              C8046 * C3593 + C8041 * C3599) *
                 C696) *
                C50807 +
            ((C13742 + C13741 + C13740) * C50607 +
             (C13739 + C13738 + C13737) * C696) *
                C50913) *
               C50629 * C943) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C50913 +
             (C5904 + C5905) * C50807) *
                C2302 +
            ((C171 * C696 + C172 * C50607) * C50913 +
             (C5906 + C5907) * C50807) *
                C2303 +
            ((C173 * C696 + C174 * C50607) * C50913 +
             (C5908 + C5909) * C50807) *
                C2304) *
               C50900 -
           (((C980 * C50607 + C979 * C696) * C50807 +
             (C5909 + C5908) * C50913) *
                C2304 +
            ((C978 * C50607 + C977 * C696) * C50807 +
             (C5907 + C5906) * C50913) *
                C2303 +
            (((C117 * C950 + C50765 * C959) * C50607 +
              (C117 * C944 + C50765 * C949) * C696) *
                 C50807 +
             (C5905 + C5904) * C50913) *
                C2302) *
               C50708) *
              C582 +
          ((((C5930 + C5931) * C50913 +
             ((C117 * C1083 + C50765 * C1091) * C696 +
              (C117 * C1090 + C50765 * C1095) * C50607) *
                 C50807) *
                C2302 +
            ((C5914 + C5915) * C50913 +
             ((C117 * C1082 + C50765 * C1089) * C696 +
              (C117 * C1088 + C50765 * C1094) * C50607) *
                 C50807) *
                C2303 +
            ((C5916 + C5917) * C50913 +
             ((C117 * C1081 + C50765 * C1087) * C696 +
              (C117 * C1086 + C50765 * C1093) * C50607) *
                 C50807) *
                C2304) *
               C50708 -
           (((C5917 + C5916) * C50807 +
             (C330 * C50607 + C329 * C696) * C50913) *
                C2304 +
            ((C5915 + C5914) * C50807 +
             (C328 * C50607 + C327 * C696) * C50913) *
                C2303 +
            ((C5931 + C5930) * C50807 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C50913) *
                C2302) *
               C50900) *
              C583 +
          (((((C117 * C587 + C50765 * C592) * C696 +
              (C117 * C593 + C50765 * C602) * C50607) *
                 C50913 +
             (C5932 + C5933) * C50807) *
                C2302 +
            ((C620 * C696 + C621 * C50607) * C50913 +
             (C5922 + C5923) * C50807) *
                C2303 +
            ((C622 * C696 + C623 * C50607) * C50913 +
             (C5924 + C5925) * C50807) *
                C2304) *
               C50900 -
           ((((C117 * C3484 + C50765 * C3490) * C50607 +
              (C117 * C3481 + C50765 * C3485) * C696) *
                 C50807 +
             (C5925 + C5924) * C50913) *
                C2304 +
            (((C117 * C3486 + C50765 * C3491) * C50607 +
              (C117 * C3482 + C50765 * C3487) * C696) *
                 C50807 +
             (C5923 + C5922) * C50913) *
                C2303 +
            (((C117 * C3488 + C50765 * C3492) * C50607 +
              (C117 * C3483 + C50765 * C3489) * C696) *
                 C50807 +
             (C5933 + C5932) * C50913) *
                C2302) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C283 +
             (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C50913 +
            (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C50807) *
               C2302 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50913 +
            (C5486 + C5487 - C5488 - C5489 + C5490 + C5491) * C50807) *
               C2303 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C50913 +
            (C5492 + C5493 - C5494 - C5495 + C5496 + C5497) * C50807) *
               C2304) *
              C50900 +
          (((C5482 - (C5501 + C5500) + C5483 - C5484 - C5485) * C50913 +
            (C977 * C284 -
             ((C117 * C950 + C50765 * C959) * C278 +
              (C117 * C944 + C50765 * C949) * C283) +
             C978 * C279 - C979 * C285 - C980 * C280) *
                C50807) *
               C2302 +
           ((C5488 - (C5487 + C5486) + C5489 - C5490 - C5491) * C50913 +
            (C979 * C284 - (C978 * C278 + C977 * C283) + C980 * C279 -
             C981 * C285 - C982 * C280) *
                C50807) *
               C2303 +
           ((C5494 - (C5493 + C5492) + C5495 - C5496 - C5497) * C50913 +
            (C981 * C284 - (C980 * C278 + C979 * C283) + C982 * C279 -
             (C117 * C948 + C50765 * C957) * C285 -
             (C117 * C958 + C50765 * C963) * C280) *
                C50807) *
               C2304) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C50913 +
            (C5904 + C5905) * C50807) *
               C2302 +
           ((C171 * C696 + C172 * C50607) * C50913 + (C5906 + C5907) * C50807) *
               C2303 +
           ((C173 * C696 + C174 * C50607) * C50913 + (C5908 + C5909) * C50807) *
               C2304) *
              C1162 -
          (((C6268 + C6269) * C50807 + (C5909 + C5908) * C50913) * C2304 +
           ((C6270 + C6271) * C50807 + (C5907 + C5906) * C50913) * C2303 +
           ((C6272 + C6273) * C50807 + (C5905 + C5904) * C50913) * C2302) *
              C1163 +
          (((C6273 + C6272) * C50913 + (C6418 + C6419) * C50807) * C2302 +
           ((C6271 + C6270) * C50913 + (C6412 + C6413) * C50807) * C2303 +
           ((C6269 + C6268) * C50913 + (C6414 + C6415) * C50807) * C2304) *
              C1164 -
          ((((C117 * C6398 + C50765 * C6404) * C50607 +
             (C117 * C6395 + C50765 * C6399) * C696) *
                C50807 +
            (C6415 + C6414) * C50913) *
               C2304 +
           (((C117 * C6400 + C50765 * C6405) * C50607 +
             (C117 * C6396 + C50765 * C6401) * C696) *
                C50807 +
            (C6413 + C6412) * C50913) *
               C2303 +
           (((C117 * C6402 + C50765 * C6406) * C50607 +
             (C117 * C6397 + C50765 * C6403) * C696) *
                C50807 +
            (C6419 + C6418) * C50913) *
               C2302) *
              C1165) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C283 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C278 -
            (C8086 + C8087 + C8088) * C284 - (C8089 + C8090 + C8091) * C279 +
            (C8092 + C8093 + C8094) * C285 + (C8095 + C8096 + C8097) * C280) *
               C50913 +
           ((C12983 + C12984 + C12985) * C283 +
            (C12986 + C12987 + C12988) * C278 - (C8458 + C8457 + C8456) * C284 -
            (C8461 + C8460 + C8459) * C279 + (C8464 + C8463 + C8462) * C285 +
            (C8467 + C8466 + C8465) * C280) *
               C50807) *
              C50629 * C50900 +
          (((C8456 + C8457 + C8458) * C284 -
            ((C12988 + C12987 + C12986) * C278 +
             (C12985 + C12984 + C12983) * C283) +
            (C8459 + C8460 + C8461) * C279 - (C8462 + C8463 + C8464) * C285 -
            (C8465 + C8466 + C8467) * C280) *
               C50913 +
           ((C9052 + C9051 + C9050) * C284 -
            ((C8048 * C3488 + C8043 * C3492 + C8047 * C1090 + C8042 * C1095 +
              C8046 * C950 + C8041 * C959) *
                 C278 +
             (C8048 * C3483 + C8043 * C3489 + C8047 * C1083 + C8042 * C1091 +
              C8046 * C944 + C8041 * C949) *
                 C283) +
            (C9055 + C9054 + C9053) * C279 -
            (C8048 * C3481 + C8043 * C3485 + C8047 * C1081 + C8042 * C1087 +
             C8046 * C946 + C8041 * C953) *
                C285 -
            (C8048 * C3484 + C8043 * C3490 + C8047 * C1086 + C8042 * C1093 +
             C8046 * C954 + C8041 * C961) *
                C280) *
               C50807) *
              C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C696 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50607) *
                C50913 +
            ((C12983 + C12984 + C12985) * C696 +
             (C12986 + C12987 + C12988) * C50607) *
                C50807) *
               C50629 * C50900 -
           (((C8048 * C3488 + C8043 * C3492 + C8047 * C1090 + C8042 * C1095 +
              C8046 * C950 + C8041 * C959) *
                 C50607 +
             (C8048 * C3483 + C8043 * C3489 + C8047 * C1083 + C8042 * C1091 +
              C8046 * C944 + C8041 * C949) *
                 C696) *
                C50807 +
            ((C12988 + C12987 + C12986) * C50607 +
             (C12985 + C12984 + C12983) * C696) *
                C50913) *
               C50629 * C50708) *
              C582 +
          ((((C13403 + C13404 + C13405) * C696 +
             (C13406 + C13407 + C13408) * C50607) *
                C50913 +
            ((C8046 * C1083 + C8041 * C1091 + C8047 * C3483 + C8042 * C3489 +
              C8048 * C9202 + C8043 * C9206) *
                 C696 +
             (C8046 * C1090 + C8041 * C1095 + C8047 * C3488 + C8042 * C3492 +
              C8048 * C9205 + C8043 * C9208) *
                 C50607) *
                C50807) *
               C50629 * C50708 -
           (((C13408 + C13407 + C13406) * C50607 +
             (C13405 + C13404 + C13403) * C696) *
                C50807 +
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50607 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C696) *
                C50913) *
               C50629 * C50900) *
              C583 +
          ((((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
              C8048 * C2997 + C8043 * C3003) *
                 C696 +
             (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
              C8048 * C3002 + C8043 * C3006) *
                 C50607) *
                C50913 +
            ((C13409 + C13410 + C13411) * C696 +
             (C13412 + C13413 + C13414) * C50607) *
                C50807) *
               C50629 * C50900 -
           (((C8048 * C11529 + C8043 * C11531 + C8047 * C9205 + C8042 * C9208 +
              C8046 * C3488 + C8041 * C3492) *
                 C50607 +
             (C8048 * C11528 + C8043 * C11530 + C8047 * C9202 + C8042 * C9206 +
              C8046 * C3483 + C8041 * C3489) *
                 C696) *
                C50807 +
            ((C13414 + C13413 + C13412) * C50607 +
             (C13411 + C13410 + C13409) * C696) *
                C50913) *
               C50629 * C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C696 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50607) *
               C50913 +
           ((C12983 + C12984 + C12985) * C696 +
            (C12986 + C12987 + C12988) * C50607) *
               C50807) *
              C50629 * C1162 -
          (((C13573 + C13574 + C13575) * C50607 +
            (C13576 + C13577 + C13578) * C696) *
               C50807 +
           ((C12988 + C12987 + C12986) * C50607 +
            (C12985 + C12984 + C12983) * C696) *
               C50913) *
              C50629 * C1163 +
          (((C13578 + C13577 + C13576) * C696 +
            (C13575 + C13574 + C13573) * C50607) *
               C50913 +
           ((C13861 + C13862 + C13863) * C696 +
            (C13864 + C13865 + C13866) * C50607) *
               C50807) *
              C50629 * C1164 -
          (((C8048 * C13842 + C8043 * C13846 + C8047 * C13843 + C8042 * C13847 +
             C8046 * C6402 + C8041 * C6406) *
                C50607 +
            (C8048 * C13840 + C8043 * C13844 + C8047 * C13841 + C8042 * C13845 +
             C8046 * C6397 + C8041 * C6403) *
                C696) *
               C50807 +
           ((C13866 + C13865 + C13864) * C50607 +
            (C13863 + C13862 + C13861) * C696) *
               C50913) *
              C50629 * C1165) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1285 +
             (C117 * C130 + C50765 * C143) * C50942 - C171 * C1286 -
             C172 * C50926 + C173 * C1287 + C174 * C1282) *
                C50913 +
            (C7076 + C7077 - C7078 - C7079 + C7080 + C7081) * C50807) *
               C2302 +
           ((C171 * C1285 + C172 * C50942 - C173 * C1286 - C174 * C50926 +
             C175 * C1287 + C176 * C1282) *
                C50913 +
            (C7082 + C7083 - C7084 - C7085 + C7086 + C7087) * C50807) *
               C2303 +
           ((C173 * C1285 + C174 * C50942 - C175 * C1286 - C176 * C50926 +
             C177 * C1287 + C178 * C1282) *
                C50913 +
            (C7088 + C7089 - C7090 - C7091 + C7092 + C7093) * C50807) *
               C2304) *
              C1643 +
          (((C7078 - (C7077 + C7076) + C7079 - C7080 - C7081) * C50913 +
            (C977 * C1286 - (C6114 * C50942 + C6115 * C1285) + C978 * C50926 -
             C979 * C1287 - C980 * C1282) *
                C50807) *
               C2302 +
           ((C7084 - (C7083 + C7082) + C7085 - C7086 - C7087) * C50913 +
            (C979 * C1286 - (C978 * C50942 + C977 * C1285) + C980 * C50926 -
             C981 * C1287 - C982 * C1282) *
                C50807) *
               C2303 +
           ((C7090 - (C7089 + C7088) + C7091 - C7092 - C7093) * C50913 +
            (C981 * C1286 - (C980 * C50942 + C979 * C1285) + C982 * C50926 -
             (C117 * C948 + C50765 * C957) * C1287 -
             (C117 * C958 + C50765 * C963) * C1282) *
                C50807) *
               C2304) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C1285 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50942 -
            (C8086 + C8087 + C8088) * C1286 - (C8089 + C8090 + C8091) * C50926 +
            (C8092 + C8093 + C8094) * C1287 + (C8095 + C8096 + C8097) * C1282) *
               C50913 +
           ((C12983 + C12984 + C12985) * C1285 +
            (C12986 + C12987 + C12988) * C50942 -
            (C8458 + C8457 + C8456) * C1286 - (C8461 + C8460 + C8459) * C50926 +
            (C8464 + C8463 + C8462) * C1287 + (C8467 + C8466 + C8465) * C1282) *
               C50807) *
              C50629 * C1643 +
          (((C8456 + C8457 + C8458) * C1286 -
            ((C12988 + C12987 + C12986) * C50942 +
             (C12985 + C12984 + C12983) * C1285) +
            (C8459 + C8460 + C8461) * C50926 - (C8462 + C8463 + C8464) * C1287 -
            (C8465 + C8466 + C8467) * C1282) *
               C50913 +
           ((C9052 + C9051 + C9050) * C1286 -
            ((C13573 + C13574 + C13575) * C50942 +
             (C13576 + C13577 + C13578) * C1285) +
            (C9055 + C9054 + C9053) * C50926 -
            (C8048 * C3481 + C8043 * C3485 + C8047 * C1081 + C8042 * C1087 +
             C8046 * C946 + C8041 * C953) *
                C1287 -
            (C8048 * C3484 + C8043 * C3490 + C8047 * C1086 + C8042 * C1093 +
             C8046 * C954 + C8041 * C961) *
                C1282) *
               C50807) *
              C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C1391 +
              (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
              C172 * C50612) *
                 C50913 +
             (C6906 + C6907 - C6908 - C6909) * C50807) *
                C2302 +
            ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                 C50913 +
             (C6910 + C6911 - C6912 - C6913) * C50807) *
                C2303 +
            ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
                 C50913 +
             (C6914 + C6915 - C6916 - C6917) * C50807) *
                C2304) *
               C1643 +
           (((C6908 - (C6907 + C6906) + C6909) * C50913 +
             (C977 * C1392 - (C6114 * C1386 + C6115 * C1391) + C978 * C50612) *
                 C50807) *
                C2302 +
            ((C6912 - (C6911 + C6910) + C6913) * C50913 +
             (C979 * C1392 - (C978 * C1386 + C977 * C1391) + C980 * C50612) *
                 C50807) *
                C2303 +
            ((C6916 - (C6915 + C6914) + C6917) * C50913 +
             (C981 * C1392 - (C980 * C1386 + C979 * C1391) + C982 * C50612) *
                 C50807) *
                C2304) *
               C50708) *
              C50899 +
          ((((C327 * C1392 -
              ((C117 * C293 + C50765 * C304) * C1386 +
               (C117 * C287 + C50765 * C294) * C1391) +
              C328 * C50612) *
                 C50913 +
             (C6918 - (C6919 + C6920) + C6921) * C50807) *
                C2302 +
            ((C329 * C1392 - (C328 * C1386 + C327 * C1391) + C330 * C50612) *
                 C50913 +
             (C6922 - (C6923 + C6924) + C6925) * C50807) *
                C2303 +
            ((C331 * C1392 - (C330 * C1386 + C329 * C1391) + C332 * C50612) *
                 C50913 +
             (C6926 - (C6927 + C6928) + C6929) * C50807) *
                C2304) *
               C1643 +
           (((C6920 + C6919 - C6918 - C6921) * C50913 +
             (C6286 * C1391 + C6287 * C1386 - C6288 * C1392 - C6289 * C50612) *
                 C50807) *
                C2302 +
            ((C6924 + C6923 - C6922 - C6925) * C50913 +
             (C6288 * C1391 + C6289 * C1386 - C6290 * C1392 - C6291 * C50612) *
                 C50807) *
                C2303 +
            ((C6928 + C6927 - C6926 - C6929) * C50913 +
             (C6290 * C1391 + C6291 * C1386 -
              (C117 * C1080 + C50765 * C1085) * C1392 -
              (C117 * C1084 + C50765 * C1092) * C50612) *
                 C50807) *
                C2304) *
               C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C1391 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C1386 -
             (C8086 + C8087 + C8088) * C1392 -
             (C8089 + C8090 + C8091) * C50612) *
                C50913 +
            ((C12983 + C12984 + C12985) * C1391 +
             (C12986 + C12987 + C12988) * C1386 -
             (C8458 + C8457 + C8456) * C1392 -
             (C8461 + C8460 + C8459) * C50612) *
                C50807) *
               C50629 * C1643 +
           (((C8456 + C8457 + C8458) * C1392 -
             ((C12988 + C12987 + C12986) * C1386 +
              (C12985 + C12984 + C12983) * C1391) +
             (C8459 + C8460 + C8461) * C50612) *
                C50913 +
            ((C9052 + C9051 + C9050) * C1392 -
             ((C13573 + C13574 + C13575) * C1386 +
              (C13576 + C13577 + C13578) * C1391) +
             (C9055 + C9054 + C9053) * C50612) *
                C50807) *
               C50629 * C50708) *
              C50899 +
          ((((C8274 + C8275 + C8276) * C1392 -
             ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
               C8046 * C293 + C8041 * C304) *
                  C1386 +
              (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
               C8046 * C287 + C8041 * C294) *
                  C1391) +
             (C8277 + C8278 + C8279) * C50612) *
                C50913 +
            ((C9816 + C9815 + C9814) * C1392 -
             ((C13408 + C13407 + C13406) * C1386 +
              (C13405 + C13404 + C13403) * C1391) +
             (C9819 + C9818 + C9817) * C50612) *
                C50807) *
               C50629 * C1643 +
           (((C13403 + C13404 + C13405) * C1391 +
             (C13406 + C13407 + C13408) * C1386 -
             (C9814 + C9815 + C9816) * C1392 -
             (C9817 + C9818 + C9819) * C50612) *
                C50913 +
            ((C13737 + C13738 + C13739) * C1391 +
             (C13740 + C13741 + C13742) * C1386 -
             (C8048 * C9201 + C8043 * C9204 + C8047 * C3482 + C8042 * C3487 +
              C8046 * C1082 + C8041 * C1089) *
                 C1392 -
             (C8048 * C9203 + C8043 * C9207 + C8047 * C3486 + C8042 * C3491 +
              C8046 * C1088 + C8041 * C1094) *
                 C50612) *
                C50807) *
               C50629 * C50708) *
              C50684)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C1391 +
             (C117 * C130 + C50765 * C143) * C1386 - C171 * C1392 -
             C172 * C50612) *
                C50913 +
            (C6906 + C6907 - C6908 - C6909) * C50807) *
               C2302 +
           ((C171 * C1391 + C172 * C1386 - C173 * C1392 - C174 * C50612) *
                C50913 +
            (C6910 + C6911 - C6912 - C6913) * C50807) *
               C2303 +
           ((C173 * C1391 + C174 * C1386 - C175 * C1392 - C176 * C50612) *
                C50913 +
            (C6914 + C6915 - C6916 - C6917) * C50807) *
               C2304) *
              C50945 +
          (((C6908 - (C6907 + C6906) + C6909) * C50913 +
            (C7434 - (C7435 + C7436) + C7437) * C50807) *
               C2302 +
           ((C6912 - (C6911 + C6910) + C6913) * C50913 +
            (C7438 - (C7439 + C7440) + C7441) * C50807) *
               C2303 +
           ((C6916 - (C6915 + C6914) + C6917) * C50913 +
            (C7442 - (C7443 + C7444) + C7445) * C50807) *
               C2304) *
              C50935 +
          (((C7436 + C7435 - C7434 - C7437) * C50913 +
            (C6416 * C1391 + C6417 * C1386 - C6116 * C1392 - C6117 * C50612) *
                C50807) *
               C2302 +
           ((C7440 + C7439 - C7438 - C7441) * C50913 +
            (C6116 * C1391 + C6117 * C1386 - C6118 * C1392 - C6119 * C50612) *
                C50807) *
               C2303 +
           ((C7444 + C7443 - C7442 - C7445) * C50913 +
            (C6118 * C1391 + C6119 * C1386 -
             (C117 * C1166 + C50765 * C1171) * C1392 -
             (C117 * C1170 + C50765 * C1178) * C50612) *
                C50807) *
               C2304) *
              C1875) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C1391 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C1386 -
            (C8086 + C8087 + C8088) * C1392 -
            (C8089 + C8090 + C8091) * C50612) *
               C50913 +
           ((C12983 + C12984 + C12985) * C1391 +
            (C12986 + C12987 + C12988) * C1386 -
            (C8458 + C8457 + C8456) * C1392 -
            (C8461 + C8460 + C8459) * C50612) *
               C50807) *
              C50629 * C50945 +
          (((C8456 + C8457 + C8458) * C1392 -
            ((C12988 + C12987 + C12986) * C1386 +
             (C12985 + C12984 + C12983) * C1391) +
            (C8459 + C8460 + C8461) * C50612) *
               C50913 +
           ((C9052 + C9051 + C9050) * C1392 -
            ((C13573 + C13574 + C13575) * C1386 +
             (C13576 + C13577 + C13578) * C1391) +
            (C9055 + C9054 + C9053) * C50612) *
               C50807) *
              C50629 * C50935 +
          (((C13578 + C13577 + C13576) * C1391 +
            (C13575 + C13574 + C13573) * C1386 -
            (C9050 + C9051 + C9052) * C1392 -
            (C9053 + C9054 + C9055) * C50612) *
               C50913 +
           ((C13861 + C13862 + C13863) * C1391 +
            (C13864 + C13865 + C13866) * C1386 -
            (C8048 * C9307 + C8043 * C9310 + C8047 * C3592 + C8042 * C3597 +
             C8046 * C1168 + C8041 * C1175) *
                C1392 -
            (C8048 * C9309 + C8043 * C9313 + C8047 * C3596 + C8042 * C3601 +
             C8046 * C1174 + C8041 * C1180) *
                C50612) *
               C50807) *
              C50629 * C1875) *
         C50670) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50765 * C129) * C118 +
            (C117 * C130 + C50765 * C143) * C106 - C171 * C119 - C172 * C107 +
            C173 * C120 + C174 * C108 - C175 * C121 - C176 * C109) *
               C50913 +
           ((C117 * C435 + C50765 * C442) * C118 +
            (C117 * C441 + C50765 * C452) * C106 - C475 * C119 - C476 * C107 +
            C477 * C120 + C478 * C108 - C479 * C121 - C480 * C109) *
               C50807) *
              C2302 +
          ((C171 * C118 + C172 * C106 - C173 * C119 - C174 * C107 +
            C175 * C120 + C176 * C108 - C177 * C121 - C178 * C109) *
               C50913 +
           (C475 * C118 + C476 * C106 - C477 * C119 - C478 * C107 +
            C479 * C120 + C480 * C108 - C481 * C121 - C482 * C109) *
               C50807) *
              C2303 +
          ((C173 * C118 + C174 * C106 - C175 * C119 - C176 * C107 +
            C177 * C120 + C178 * C108 - C179 * C121 - C180 * C109) *
               C50913 +
           (C477 * C118 + C478 * C106 - C479 * C119 - C480 * C107 +
            C481 * C120 + C482 * C108 - (C117 * C439 + C50765 * C450) * C121 -
            (C117 * C451 + C50765 * C457) * C109) *
               C50807) *
              C2304) *
         C50696 * C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C49720 +
             (C117 * C130 + C50765 * C143) * C50884 - C171 * C49713 -
             C172 * C50612) *
                C50913 +
            (C5498 * C49720 + C5499 * C50884 - C475 * C49713 - C476 * C50612) *
                C50807) *
               C2302 +
           ((C171 * C49720 + C172 * C50884 - C173 * C49713 - C174 * C50612) *
                C50913 +
            (C475 * C49720 + C476 * C50884 - C477 * C49713 - C478 * C50612) *
                C50807) *
               C2303 +
           ((C173 * C49720 + C174 * C50884 - C175 * C49713 - C176 * C50612) *
                C50913 +
            (C477 * C49720 + C478 * C50884 - C479 * C49713 - C480 * C50612) *
                C50807) *
               C2304) *
              C50696 * C582 +
          (((C327 * C49713 -
             ((C117 * C293 + C50765 * C304) * C50884 +
              (C117 * C287 + C50765 * C294) * C49720) +
             C328 * C50612) *
                C50913 +
            (C1540 * C49713 -
             ((C117 * C820 + C50765 * C835) * C50884 +
              (C117 * C811 + C50765 * C819) * C49720) +
             C1541 * C50612) *
                C50807) *
               C2302 +
           ((C329 * C49713 - (C328 * C50884 + C327 * C49720) + C330 * C50612) *
                C50913 +
            (C1542 * C49713 - (C1541 * C50884 + C1540 * C49720) +
             C1543 * C50612) *
                C50807) *
               C2303 +
           ((C331 * C49713 - (C330 * C50884 + C329 * C49720) + C332 * C50612) *
                C50913 +
            (C1544 * C49713 - (C1543 * C50884 + C1542 * C49720) +
             C1545 * C50612) *
                C50807) *
               C2304) *
              C50696 * C583 +
          ((((C117 * C587 + C50765 * C592) * C49720 +
             (C117 * C593 + C50765 * C602) * C50884 - C620 * C49713 -
             C621 * C50612) *
                C50913 +
            ((C117 * C818 + C50765 * C834) * C49720 +
             (C117 * C833 + C50765 * C842) * C50884 - C5656 * C49713 -
             C5657 * C50612) *
                C50807) *
               C2302 +
           ((C620 * C49720 + C621 * C50884 - C622 * C49713 - C623 * C50612) *
                C50913 +
            (C5656 * C49720 + C5657 * C50884 - C5658 * C49713 -
             C5659 * C50612) *
                C50807) *
               C2303 +
           ((C622 * C49720 + C623 * C50884 - C624 * C49713 - C625 * C50612) *
                C50913 +
            (C5658 * C49720 + C5659 * C50884 -
             (C117 * C815 + C50765 * C828) * C49713 -
             (C117 * C827 + C50765 * C839) * C50612) *
                C50807) *
               C2304) *
              C50696 * C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
            C8048 * C587 + C8043 * C592) *
               C118 +
           (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
            C8048 * C593 + C8043 * C602) *
               C106 -
           (C8086 + C8087 + C8088) * C119 - (C8089 + C8090 + C8091) * C107 +
           (C8092 + C8093 + C8094) * C120 + (C8095 + C8096 + C8097) * C108 -
           (C8098 + C8099 + C8100) * C121 - (C8101 + C8102 + C8103) * C109) *
              C50913 +
          ((C8046 * C435 + C8041 * C442 + C8047 * C811 + C8042 * C819 +
            C8048 * C818 + C8043 * C834) *
               C118 +
           (C8046 * C441 + C8041 * C452 + C8047 * C820 + C8042 * C835 +
            C8048 * C833 + C8043 * C842) *
               C106 -
           (C8458 + C8457 + C8456) * C119 - (C8461 + C8460 + C8459) * C107 +
           (C8464 + C8463 + C8462) * C120 + (C8467 + C8466 + C8465) * C108 -
           (C8048 * C815 + C8043 * C828 + C8047 * C814 + C8042 * C825 +
            C8046 * C437 + C8041 * C446) *
               C121 -
           (C8048 * C827 + C8043 * C839 + C8047 * C826 + C8042 * C838 +
            C8046 * C447 + C8041 * C455) *
               C109) *
              C50807) *
         C50629 * C50696 * C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C49720 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50884 -
            (C8086 + C8087 + C8088) * C49713 -
            (C8089 + C8090 + C8091) * C50612) *
               C50913 +
           ((C12983 + C12984 + C12985) * C49720 +
            (C12986 + C12987 + C12988) * C50884 -
            (C8458 + C8457 + C8456) * C49713 -
            (C8461 + C8460 + C8459) * C50612) *
               C50807) *
              C50629 * C50696 * C582 +
          (((C8274 + C8275 + C8276) * C49713 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50884 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C49720) +
            (C8277 + C8278 + C8279) * C50612) *
               C50913 +
           ((C9816 + C9815 + C9814) * C49713 -
            ((C8048 * C3160 + C8043 * C3164 + C8047 * C833 + C8042 * C842 +
              C8046 * C820 + C8041 * C835) *
                 C50884 +
             (C8048 * C3155 + C8043 * C3161 + C8047 * C818 + C8042 * C834 +
              C8046 * C811 + C8041 * C819) *
                 C49720) +
            (C9819 + C9818 + C9817) * C50612) *
               C50807) *
              C50629 * C50696 * C583 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C49720 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C50884 -
            (C8626 + C8627 + C8628) * C49713 -
            (C8629 + C8630 + C8631) * C50612) *
               C50913 +
           ((C8046 * C818 + C8041 * C834 + C8047 * C3155 + C8042 * C3161 +
             C8048 * C8884 + C8043 * C8888) *
                C49720 +
            (C8046 * C833 + C8041 * C842 + C8047 * C3160 + C8042 * C3164 +
             C8048 * C8887 + C8043 * C8890) *
                C50884 -
            (C8048 * C8883 + C8043 * C8886 + C8047 * C3154 + C8042 * C3159 +
             C8046 * C817 + C8041 * C832) *
                C49713 -
            (C8048 * C8885 + C8043 * C8889 + C8047 * C3158 + C8042 * C3163 +
             C8046 * C831 + C8041 * C841) *
                C50612) *
               C50807) *
              C50629 * C50696 * C584)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C283 +
             (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C50913 +
            ((C117 * C435 + C50765 * C442) * C283 +
             (C117 * C441 + C50765 * C452) * C278 - C475 * C284 - C476 * C279 +
             C477 * C285 + C478 * C280) *
                C50807) *
               C2302 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50913 +
            (C475 * C283 + C476 * C278 - C477 * C284 - C478 * C279 +
             C479 * C285 + C480 * C280) *
                C50807) *
               C2303 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C50913 +
            (C477 * C283 + C478 * C278 - C479 * C284 - C480 * C279 +
             C481 * C285 + C482 * C280) *
                C50807) *
               C2304) *
              C50696 * C50899 +
          (((C327 * C284 -
             ((C117 * C293 + C50765 * C304) * C278 +
              (C117 * C287 + C50765 * C294) * C283) +
             C328 * C279 - C329 * C285 - C330 * C280) *
                C50913 +
            (C1540 * C284 -
             ((C117 * C820 + C50765 * C835) * C278 +
              (C117 * C811 + C50765 * C819) * C283) +
             C1541 * C279 - C1542 * C285 - C1543 * C280) *
                C50807) *
               C2302 +
           ((C329 * C284 - (C328 * C278 + C327 * C283) + C330 * C279 -
             C331 * C285 - C332 * C280) *
                C50913 +
            (C1542 * C284 - (C1541 * C278 + C1540 * C283) + C1543 * C279 -
             C1544 * C285 - C1545 * C280) *
                C50807) *
               C2303 +
           ((C331 * C284 - (C330 * C278 + C329 * C283) + C332 * C279 -
             C333 * C285 - C334 * C280) *
                C50913 +
            (C1544 * C284 - (C1543 * C278 + C1542 * C283) + C1545 * C279 -
             (C117 * C1523 + C50765 * C1524) * C285 -
             (C117 * C1525 + C50765 * C1526) * C280) *
                C50807) *
               C2304) *
              C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C696 +
             (C117 * C130 + C50765 * C143) * C50607) *
                C50913 +
            (C5498 * C696 + C5499 * C50607) * C50807) *
               C2302 +
           ((C171 * C696 + C172 * C50607) * C50913 +
            (C475 * C696 + C476 * C50607) * C50807) *
               C2303 +
           ((C173 * C696 + C174 * C50607) * C50913 +
            (C477 * C696 + C478 * C50607) * C50807) *
               C2304) *
              C50696 * C692 -
          (((C1543 * C50607 + C1542 * C696) * C50807 +
            (C330 * C50607 + C329 * C696) * C50913) *
               C2304 +
           ((C1541 * C50607 + C1540 * C696) * C50807 +
            (C328 * C50607 + C327 * C696) * C50913) *
               C2303 +
           (((C117 * C820 + C50765 * C835) * C50607 +
             (C117 * C811 + C50765 * C819) * C696) *
                C50807 +
            ((C117 * C293 + C50765 * C304) * C50607 +
             (C117 * C287 + C50765 * C294) * C696) *
                C50913) *
               C2302) *
              C50696 * C693 +
          ((((C117 * C587 + C50765 * C592) * C696 +
             (C117 * C593 + C50765 * C602) * C50607) *
                C50913 +
            ((C117 * C818 + C50765 * C834) * C696 +
             (C117 * C833 + C50765 * C842) * C50607) *
                C50807) *
               C2302 +
           ((C620 * C696 + C621 * C50607) * C50913 +
            (C5656 * C696 + C5657 * C50607) * C50807) *
               C2303 +
           ((C622 * C696 + C623 * C50607) * C50913 +
            (C5658 * C696 + C5659 * C50607) * C50807) *
               C2304) *
              C50696 * C694 -
          ((((C117 * C3156 + C50765 * C3162) * C50607 +
             (C117 * C3153 + C50765 * C3157) * C696) *
                C50807 +
            ((C117 * C703 + C50765 * C710) * C50607 +
             (C117 * C698 + C50765 * C704) * C696) *
                C50913) *
               C2304 +
           (((C117 * C3158 + C50765 * C3163) * C50607 +
             (C117 * C3154 + C50765 * C3159) * C696) *
                C50807 +
            ((C117 * C705 + C50765 * C711) * C50607 +
             (C117 * C699 + C50765 * C706) * C696) *
                C50913) *
               C2303 +
           (((C117 * C3160 + C50765 * C3164) * C50607 +
             (C117 * C3155 + C50765 * C3161) * C696) *
                C50807 +
            ((C117 * C707 + C50765 * C712) * C50607 +
             (C117 * C700 + C50765 * C708) * C696) *
                C50913) *
               C2302) *
              C50696 * C695)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C283 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C278 -
            (C8086 + C8087 + C8088) * C284 - (C8089 + C8090 + C8091) * C279 +
            (C8092 + C8093 + C8094) * C285 + (C8095 + C8096 + C8097) * C280) *
               C50913 +
           ((C8046 * C435 + C8041 * C442 + C8047 * C811 + C8042 * C819 +
             C8048 * C818 + C8043 * C834) *
                C283 +
            (C8046 * C441 + C8041 * C452 + C8047 * C820 + C8042 * C835 +
             C8048 * C833 + C8043 * C842) *
                C278 -
            (C8458 + C8457 + C8456) * C284 - (C8461 + C8460 + C8459) * C279 +
            (C8464 + C8463 + C8462) * C285 + (C8467 + C8466 + C8465) * C280) *
               C50807) *
              C50629 * C50696 * C50899 +
          (((C8274 + C8275 + C8276) * C284 -
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C278 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C283) +
            (C8277 + C8278 + C8279) * C279 - (C8280 + C8281 + C8282) * C285 -
            (C8283 + C8284 + C8285) * C280) *
               C50913 +
           ((C9816 + C9815 + C9814) * C284 -
            ((C8048 * C3160 + C8043 * C3164 + C8047 * C833 + C8042 * C842 +
              C8046 * C820 + C8041 * C835) *
                 C278 +
             (C8048 * C3155 + C8043 * C3161 + C8047 * C818 + C8042 * C834 +
              C8046 * C811 + C8041 * C819) *
                 C283) +
            (C9819 + C9818 + C9817) * C279 -
            (C8048 * C3153 + C8043 * C3157 + C8047 * C816 + C8042 * C830 +
             C8046 * C813 + C8041 * C823) *
                C285 -
            (C8048 * C3156 + C8043 * C3162 + C8047 * C829 + C8042 * C840 +
             C8046 * C824 + C8041 * C837) *
                C280) *
               C50807) *
              C50629 * C50696 * C50684)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C696 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C50607) *
               C50913 +
           ((C12983 + C12984 + C12985) * C696 +
            (C12986 + C12987 + C12988) * C50607) *
               C50807) *
              C50629 * C50696 * C692 -
          (((C8048 * C3160 + C8043 * C3164 + C8047 * C833 + C8042 * C842 +
             C8046 * C820 + C8041 * C835) *
                C50607 +
            (C8048 * C3155 + C8043 * C3161 + C8047 * C818 + C8042 * C834 +
             C8046 * C811 + C8041 * C819) *
                C696) *
               C50807 +
           ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
             C8046 * C293 + C8041 * C304) *
                C50607 +
            (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
             C8046 * C287 + C8041 * C294) *
                C696) *
               C50913) *
              C50629 * C50696 * C693 +
          (((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
             C8048 * C2997 + C8043 * C3003) *
                C696 +
            (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
             C8048 * C3002 + C8043 * C3006) *
                C50607) *
               C50913 +
           ((C8046 * C818 + C8041 * C834 + C8047 * C3155 + C8042 * C3161 +
             C8048 * C8884 + C8043 * C8888) *
                C696 +
            (C8046 * C833 + C8041 * C842 + C8047 * C3160 + C8042 * C3164 +
             C8048 * C8887 + C8043 * C8890) *
                C50607) *
               C50807) *
              C50629 * C50696 * C694 -
          (((C8048 * C11329 + C8043 * C11331 + C8047 * C8887 + C8042 * C8890 +
             C8046 * C3160 + C8041 * C3164) *
                C50607 +
            (C8048 * C11328 + C8043 * C11330 + C8047 * C8884 + C8042 * C8888 +
             C8046 * C3155 + C8041 * C3161) *
                C696) *
               C50807 +
           ((C8048 * C8733 + C8043 * C8736 + C8047 * C3002 + C8042 * C3006 +
             C8046 * C707 + C8041 * C712) *
                C50607 +
            (C8048 * C8730 + C8043 * C8734 + C8047 * C2997 + C8042 * C3003 +
             C8046 * C700 + C8041 * C708) *
                C696) *
               C50913) *
              C50629 * C50696 * C695)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50765 * C129) * C283 +
             (C117 * C130 + C50765 * C143) * C278 - C171 * C284 - C172 * C279 +
             C173 * C285 + C174 * C280) *
                C50913 +
            (C5500 + C5501 - C5482 - C5483 + C5484 + C5485) * C50807) *
               C2302 +
           ((C171 * C283 + C172 * C278 - C173 * C284 - C174 * C279 +
             C175 * C285 + C176 * C280) *
                C50913 +
            (C5486 + C5487 - C5488 - C5489 + C5490 + C5491) * C50807) *
               C2303 +
           ((C173 * C283 + C174 * C278 - C175 * C284 - C176 * C279 +
             C177 * C285 + C178 * C280) *
                C50913 +
            (C5492 + C5493 - C5494 - C5495 + C5496 + C5497) * C50807) *
               C2304) *
              C50900 +
          (((C5482 - (C5501 + C5500) + C5483 - C5484 - C5485) * C50913 +
            (C977 * C284 -
             ((C117 * C950 + C50765 * C959) * C278 +
              (C117 * C944 + C50765 * C949) * C283) +
             C978 * C279 - C979 * C285 - C980 * C280) *
                C50807) *
               C2302 +
           ((C5488 - (C5487 + C5486) + C5489 - C5490 - C5491) * C50913 +
            (C979 * C284 - (C978 * C278 + C977 * C283) + C980 * C279 -
             C981 * C285 - C982 * C280) *
                C50807) *
               C2303 +
           ((C5494 - (C5493 + C5492) + C5495 - C5496 - C5497) * C50913 +
            (C981 * C284 - (C980 * C278 + C979 * C283) + C982 * C279 -
             (C117 * C948 + C50765 * C957) * C285 -
             (C117 * C958 + C50765 * C963) * C280) *
                C50807) *
               C2304) *
              C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50765 * C129) * C696 +
              (C117 * C130 + C50765 * C143) * C50607) *
                 C50913 +
             (C5904 + C5905) * C50807) *
                C2302 +
            ((C171 * C696 + C172 * C50607) * C50913 +
             (C5906 + C5907) * C50807) *
                C2303 +
            ((C173 * C696 + C174 * C50607) * C50913 +
             (C5908 + C5909) * C50807) *
                C2304) *
               C50900 -
           (((C980 * C50607 + C979 * C696) * C50807 +
             (C5909 + C5908) * C50913) *
                C2304 +
            ((C978 * C50607 + C977 * C696) * C50807 +
             (C5907 + C5906) * C50913) *
                C2303 +
            (((C117 * C950 + C50765 * C959) * C50607 +
              (C117 * C944 + C50765 * C949) * C696) *
                 C50807 +
             (C5905 + C5904) * C50913) *
                C2302) *
               C50708) *
              C582 +
          ((((C5930 + C5931) * C50913 +
             ((C117 * C1083 + C50765 * C1091) * C696 +
              (C117 * C1090 + C50765 * C1095) * C50607) *
                 C50807) *
                C2302 +
            ((C5914 + C5915) * C50913 +
             ((C117 * C1082 + C50765 * C1089) * C696 +
              (C117 * C1088 + C50765 * C1094) * C50607) *
                 C50807) *
                C2303 +
            ((C5916 + C5917) * C50913 +
             ((C117 * C1081 + C50765 * C1087) * C696 +
              (C117 * C1086 + C50765 * C1093) * C50607) *
                 C50807) *
                C2304) *
               C50708 -
           (((C5917 + C5916) * C50807 +
             (C330 * C50607 + C329 * C696) * C50913) *
                C2304 +
            ((C5915 + C5914) * C50807 +
             (C328 * C50607 + C327 * C696) * C50913) *
                C2303 +
            ((C5931 + C5930) * C50807 +
             ((C117 * C293 + C50765 * C304) * C50607 +
              (C117 * C287 + C50765 * C294) * C696) *
                 C50913) *
                C2302) *
               C50900) *
              C583 +
          (((((C117 * C587 + C50765 * C592) * C696 +
              (C117 * C593 + C50765 * C602) * C50607) *
                 C50913 +
             (C5932 + C5933) * C50807) *
                C2302 +
            ((C620 * C696 + C621 * C50607) * C50913 +
             (C5922 + C5923) * C50807) *
                C2303 +
            ((C622 * C696 + C623 * C50607) * C50913 +
             (C5924 + C5925) * C50807) *
                C2304) *
               C50900 -
           ((((C117 * C3484 + C50765 * C3490) * C50607 +
              (C117 * C3481 + C50765 * C3485) * C696) *
                 C50807 +
             (C5925 + C5924) * C50913) *
                C2304 +
            (((C117 * C3486 + C50765 * C3491) * C50607 +
              (C117 * C3482 + C50765 * C3487) * C696) *
                 C50807 +
             (C5923 + C5922) * C50913) *
                C2303 +
            (((C117 * C3488 + C50765 * C3492) * C50607 +
              (C117 * C3483 + C50765 * C3489) * C696) *
                 C50807 +
             (C5933 + C5932) * C50913) *
                C2302) *
               C50708) *
              C584)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
             C8048 * C587 + C8043 * C592) *
                C283 +
            (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
             C8048 * C593 + C8043 * C602) *
                C278 -
            (C8086 + C8087 + C8088) * C284 - (C8089 + C8090 + C8091) * C279 +
            (C8092 + C8093 + C8094) * C285 + (C8095 + C8096 + C8097) * C280) *
               C50913 +
           ((C12983 + C12984 + C12985) * C283 +
            (C12986 + C12987 + C12988) * C278 - (C8458 + C8457 + C8456) * C284 -
            (C8461 + C8460 + C8459) * C279 + (C8464 + C8463 + C8462) * C285 +
            (C8467 + C8466 + C8465) * C280) *
               C50807) *
              C50629 * C50900 +
          (((C8456 + C8457 + C8458) * C284 -
            ((C12988 + C12987 + C12986) * C278 +
             (C12985 + C12984 + C12983) * C283) +
            (C8459 + C8460 + C8461) * C279 - (C8462 + C8463 + C8464) * C285 -
            (C8465 + C8466 + C8467) * C280) *
               C50913 +
           ((C9052 + C9051 + C9050) * C284 -
            ((C8048 * C3488 + C8043 * C3492 + C8047 * C1090 + C8042 * C1095 +
              C8046 * C950 + C8041 * C959) *
                 C278 +
             (C8048 * C3483 + C8043 * C3489 + C8047 * C1083 + C8042 * C1091 +
              C8046 * C944 + C8041 * C949) *
                 C283) +
            (C9055 + C9054 + C9053) * C279 -
            (C8048 * C3481 + C8043 * C3485 + C8047 * C1081 + C8042 * C1087 +
             C8046 * C946 + C8041 * C953) *
                C285 -
            (C8048 * C3484 + C8043 * C3490 + C8047 * C1086 + C8042 * C1093 +
             C8046 * C954 + C8041 * C961) *
                C280) *
               C50807) *
              C50629 * C50708) *
         C50670) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C8046 * C122 + C8041 * C129 + C8047 * C287 + C8042 * C294 +
              C8048 * C587 + C8043 * C592) *
                 C696 +
             (C8046 * C130 + C8041 * C143 + C8047 * C293 + C8042 * C304 +
              C8048 * C593 + C8043 * C602) *
                 C50607) *
                C50913 +
            ((C12983 + C12984 + C12985) * C696 +
             (C12986 + C12987 + C12988) * C50607) *
                C50807) *
               C50629 * C50900 -
           (((C8048 * C3488 + C8043 * C3492 + C8047 * C1090 + C8042 * C1095 +
              C8046 * C950 + C8041 * C959) *
                 C50607 +
             (C8048 * C3483 + C8043 * C3489 + C8047 * C1083 + C8042 * C1091 +
              C8046 * C944 + C8041 * C949) *
                 C696) *
                C50807 +
            ((C12988 + C12987 + C12986) * C50607 +
             (C12985 + C12984 + C12983) * C696) *
                C50913) *
               C50629 * C50708) *
              C582 +
          ((((C13403 + C13404 + C13405) * C696 +
             (C13406 + C13407 + C13408) * C50607) *
                C50913 +
            ((C8046 * C1083 + C8041 * C1091 + C8047 * C3483 + C8042 * C3489 +
              C8048 * C9202 + C8043 * C9206) *
                 C696 +
             (C8046 * C1090 + C8041 * C1095 + C8047 * C3488 + C8042 * C3492 +
              C8048 * C9205 + C8043 * C9208) *
                 C50607) *
                C50807) *
               C50629 * C50708 -
           (((C13408 + C13407 + C13406) * C50607 +
             (C13405 + C13404 + C13403) * C696) *
                C50807 +
            ((C8048 * C707 + C8043 * C712 + C8047 * C593 + C8042 * C602 +
              C8046 * C293 + C8041 * C304) *
                 C50607 +
             (C8048 * C700 + C8043 * C708 + C8047 * C587 + C8042 * C592 +
              C8046 * C287 + C8041 * C294) *
                 C696) *
                C50913) *
               C50629 * C50900) *
              C583 +
          ((((C8046 * C587 + C8041 * C592 + C8047 * C700 + C8042 * C708 +
              C8048 * C2997 + C8043 * C3003) *
                 C696 +
             (C8046 * C593 + C8041 * C602 + C8047 * C707 + C8042 * C712 +
              C8048 * C3002 + C8043 * C3006) *
                 C50607) *
                C50913 +
            ((C13409 + C13410 + C13411) * C696 +
             (C13412 + C13413 + C13414) * C50607) *
                C50807) *
               C50629 * C50900 -
           (((C8048 * C11529 + C8043 * C11531 + C8047 * C9205 + C8042 * C9208 +
              C8046 * C3488 + C8041 * C3492) *
                 C50607 +
             (C8048 * C11528 + C8043 * C11530 + C8047 * C9202 + C8042 * C9206 +
              C8046 * C3483 + C8041 * C3489) *
                 C696) *
                C50807 +
            ((C13414 + C13413 + C13412) * C50607 +
             (C13411 + C13410 + C13409) * C696) *
                C50913) *
               C50629 * C50708) *
              C584)) /
            (p * q * std::sqrt(p + q));
}
