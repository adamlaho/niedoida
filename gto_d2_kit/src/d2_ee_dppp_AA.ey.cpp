/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_dppp_AA.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
//
void second_derivative_ee_2111_11(const double ae,
                                  const double xA,
                                  const double yA,
                                  const double zA,
                                  const double be,
                                  const double xB,
                                  const double yB,
                                  const double zB,
                                  const double ce,
                                  const double xC,
                                  const double yC,
                                  const double zC,
                                  const double de,
                                  const double xD,
                                  const double yD,
                                  const double zD,
                                  const double* const bs,
                                  double* const d2eexx,
                                  double* const d2eexy,
                                  double* const d2eexz,
                                  double* const d2eeyx,
                                  double* const d2eeyy,
                                  double* const d2eeyz,
                                  double* const d2eezx,
                                  double* const d2eezy,
                                  double* const d2eezz)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C139334 = 0 * ae;
    const double C139333 = ae * be;
    const double C139332 = 0 * be;
    const double C139331 = xA - xB;
    const double C139330 = ae + be;
    const double C139329 = 0 * be;
    const double C139394 = yA - yB;
    const double C139397 = zA - zB;
    const double C139447 = 0 * be;
    const double C139478 = 0 * ae;
    const double C139474 = 0 * be;
    const double C139517 = 0 * be;
    const double C139544 = 0 * ae;
    const double C139540 = 0 * be;
    const double C139641 = p + q;
    const double C139640 = p * q;
    const double C139646 = xP - xQ;
    const double C139645 = bs[2];
    const double C139653 = std::pow(ae, 2);
    const double C139651 = bs[3];
    const double C139664 = bs[4];
    const double C139685 = bs[5];
    const double C139718 = bs[6];
    const double C139761 = yP - yQ;
    const double C139804 = zP - zQ;
    const double C108 = bs[0];
    const double C141242 = ce + de;
    const double C141241 = ce * de;
    const double C141240 = xC - xD;
    const double C141255 = yC - yD;
    const double C141264 = zC - zD;
    const double C139340 = 2 * C139333;
    const double C139337 = -2 * C139332;
    const double C139339 = C139333 * C139331;
    const double C139338 = C139331 * C139332;
    const double C141215 = C139331 * be;
    const double C141214 = C139331 * ae;
    const double C141213 = std::pow(C139331, 2);
    const double C139341 = C139334 / C139330;
    const double C139336 = 2 * C139330;
    const double C139335 = std::pow(C139330, 2);
    const double C139419 = C139333 * C139394;
    const double C141323 = std::pow(C139394, 2);
    const double C141337 = C139394 * be;
    const double C141336 = C139394 * ae;
    const double C139431 = C139333 * C139397;
    const double C141349 = std::pow(C139397, 2);
    const double C141361 = C139397 * be;
    const double C141360 = C139397 * ae;
    const double C139475 = C139394 * C139447;
    const double C139500 = -2 * C139447;
    const double C139483 = C139478 / C139330;
    const double C139541 = C139397 * C139517;
    const double C139566 = -2 * C139517;
    const double C139549 = C139544 / C139330;
    const double C139642 = 2 * C139640;
    const double C139654 = C139646 * ae;
    const double C139650 = std::pow(C139646, 2);
    const double C139764 = C139761 * ae;
    const double C139763 = C139646 * C139761;
    const double C139848 = C139761 * C139646;
    const double C139869 = std::pow(C139761, 2);
    const double C139807 = C139804 * ae;
    const double C139806 = C139646 * C139804;
    const double C139890 = C139761 * C139804;
    const double C139906 = C139804 * C139646;
    const double C139927 = C139804 * C139761;
    const double C139943 = std::pow(C139804, 2);
    const double C141252 = 2 * C141242;
    const double C141471 = std::pow(C141242, 2);
    const double C141243 = std::pow(C141240, 2);
    const double C141470 = C141240 * de;
    const double C141469 = C141240 * ce;
    const double C141277 = std::pow(C141255, 2);
    const double C141475 = C141255 * de;
    const double C141473 = C141255 * ce;
    const double C141294 = std::pow(C141264, 2);
    const double C141476 = C141264 * de;
    const double C141474 = C141264 * ce;
    const double C139343 = ae * C139337;
    const double C139344 = C139338 / C139330;
    const double C141216 = C141213 * C139333;
    const double C141223 = std::pow(C139336, -1);
    const double C141477 = std::pow(C139336, -2);
    const double C139345 = 2 * C139335;
    const double C139342 = C139335 * C139336;
    const double C141468 = 4 * C139335;
    const double C141324 = C141323 * C139333;
    const double C141350 = C141349 * C139333;
    const double C139480 = C139475 / C139330;
    const double C139503 = ae * C139500;
    const double C139546 = C139541 / C139330;
    const double C139569 = ae * C139566;
    const double C139644 = C139642 / C139641;
    const double C120 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C139642 / C139641, 2) -
          (bs[1] * C139642) / C139641) *
         std::pow(ae, 2)) /
        C139335;
    const double C109 = -(C139646 * bs[1] * C139642) / C139641;
    const double C823 = -(C139761 * bs[1] * C139642) / C139641;
    const double C1601 = -(C139804 * bs[1] * C139642) / C139641;
    const double C139656 = C139651 * C139654;
    const double C139667 = C139664 * C139654;
    const double C139690 = C139685 * C139654;
    const double C139726 = C139718 * C139654;
    const double C114 = (-(bs[1] * C139654 * C139642) / C139641) / C139330;
    const double C139666 = C139650 * C139664;
    const double C139689 = C139650 * C139685;
    const double C139725 = C139650 * C139718;
    const double C139766 = C139651 * C139764;
    const double C139770 = C139664 * C139764;
    const double C139777 = C139685 * C139764;
    const double C139788 = C139718 * C139764;
    const double C189 = (-(bs[1] * C139764 * C139642) / C139641) / C139330;
    const double C139765 = C139763 * C139653;
    const double C139849 = C139848 * C139653;
    const double C139871 = C139869 * C139664;
    const double C139876 = C139869 * C139685;
    const double C139881 = C139869 * C139718;
    const double C139809 = C139651 * C139807;
    const double C139813 = C139664 * C139807;
    const double C139820 = C139685 * C139807;
    const double C139831 = C139718 * C139807;
    const double C276 = (-(bs[1] * C139807 * C139642) / C139641) / C139330;
    const double C139808 = C139806 * C139653;
    const double C139891 = C139890 * C139653;
    const double C139907 = C139906 * C139653;
    const double C139928 = C139927 * C139653;
    const double C139945 = C139943 * C139664;
    const double C139950 = C139943 * C139685;
    const double C139955 = C139943 * C139718;
    const double C141472 = std::pow(C141252, -1);
    const double C141494 = 2 * C141471;
    const double C141244 = C141243 * C141241;
    const double C141278 = C141277 * C141241;
    const double C141295 = C141294 * C141241;
    const double C139347 = 0 - C139344;
    const double C141217 = C141216 / C139330;
    const double C139351 = C139332 / C139345;
    const double C139348 = C139329 / C139345;
    const double C139477 = C139447 / C139345;
    const double C139481 = C139474 / C139345;
    const double C139543 = C139517 / C139345;
    const double C139547 = C139540 / C139345;
    const double C141325 = C141324 / C139330;
    const double C141351 = C141350 / C139330;
    const double C139484 = 0 - C139480;
    const double C139550 = 0 - C139546;
    const double C139647 = std::pow(C139644, 2);
    const double C139652 = -C139644;
    const double C139665 = std::pow(C139644, 4);
    const double C139719 = std::pow(C139644, 6);
    const double C139769 = C139664 * C139765;
    const double C139776 = C139685 * C139765;
    const double C139787 = C139718 * C139765;
    const double C139851 = C139664 * C139849;
    const double C139854 = C139685 * C139849;
    const double C139860 = C139718 * C139849;
    const double C139812 = C139664 * C139808;
    const double C139819 = C139685 * C139808;
    const double C139830 = C139718 * C139808;
    const double C139893 = C139664 * C139891;
    const double C139896 = C139685 * C139891;
    const double C139899 = C139718 * C139891;
    const double C139909 = C139664 * C139907;
    const double C139912 = C139685 * C139907;
    const double C139918 = C139718 * C139907;
    const double C139930 = C139664 * C139928;
    const double C139933 = C139685 * C139928;
    const double C139936 = C139718 * C139928;
    const double C141245 = C141244 / C141242;
    const double C141279 = C141278 / C141242;
    const double C141296 = C141295 / C141242;
    const double C139353 = C139347 * ae;
    const double C141218 = -C141217;
    const double C141326 = -C141325;
    const double C141352 = -C141351;
    const double C139487 = C139484 * ae;
    const double C139553 = C139550 * ae;
    const double C139649 = C139645 * C139647;
    const double C121 = (2 * ae * C139647 * C139645 * C139646 * ae +
                         C139646 *
                             (C139645 * C139647 + std::pow(C139646, 2) * bs[3] *
                                                      std::pow(-C139644, 3)) *
                             std::pow(ae, 2)) /
                        C139335;
    const double C195 =
        (C139647 * C139645 * C139646 * (yP - yQ) * C139653) / C139335;
    const double C282 =
        (C139647 * C139645 * C139646 * (zP - zQ) * C139653) / C139335;
    const double C362 =
        (C139647 * C139645 * C139761 * C139646 * C139653) / C139335;
    const double C419 = ((std::pow(C139761, 2) * C139645 * C139647 -
                          (bs[1] * C139642) / C139641) *
                         C139653) /
                        C139335;
    const double C501 =
        (C139647 * C139645 * C139761 * C139804 * C139653) / C139335;
    const double C579 =
        (C139647 * C139645 * C139804 * C139646 * C139653) / C139335;
    const double C635 =
        (C139647 * C139645 * C139804 * C139761 * C139653) / C139335;
    const double C714 = ((std::pow(C139804, 2) * C139645 * C139647 -
                          (bs[1] * C139642) / C139641) *
                         C139653) /
                        C139335;
    const double C115 = (C139646 * C139647 * C139645 * C139654) / C139330 -
                        (ae * bs[1] * C139642) / (C139641 * C139330);
    const double C190 = (C139646 * C139647 * C139645 * C139764) / C139330;
    const double C277 = (C139646 * C139647 * C139645 * C139807) / C139330;
    const double C828 = (C139761 * C139647 * C139645 * C139654) / C139330;
    const double C912 = (C139761 * C139647 * C139645 * C139764) / C139330 -
                        (ae * bs[1] * C139642) / (C139641 * C139330);
    const double C1006 = (C139761 * C139647 * C139645 * C139807) / C139330;
    const double C1606 = (C139804 * C139647 * C139645 * C139654) / C139330;
    const double C1690 = (C139804 * C139647 * C139645 * C139764) / C139330;
    const double C1784 = (C139804 * C139647 * C139645 * C139807) / C139330 -
                         (ae * bs[1] * C139642) / (C139641 * C139330);
    const double C139655 = std::pow(C139652, 3);
    const double C139686 = std::pow(C139652, 5);
    const double C139671 = C139665 * C139667;
    const double C139670 = C139666 * C139665;
    const double C139684 = C139664 * C139665;
    const double C139772 = C139665 * C139770;
    const double C139815 = C139665 * C139813;
    const double C139872 = C139871 * C139665;
    const double C139946 = C139945 * C139665;
    const double C139731 = C139719 * C139726;
    const double C139730 = C139725 * C139719;
    const double C139792 = C139719 * C139788;
    const double C139835 = C139719 * C139831;
    const double C139882 = C139881 * C139719;
    const double C139956 = C139955 * C139719;
    const double C139771 = C139665 * C139769;
    const double C139790 = C139719 * C139787;
    const double C139852 = C139665 * C139851;
    const double C139861 = C139719 * C139860;
    const double C139814 = C139665 * C139812;
    const double C139833 = C139719 * C139830;
    const double C139894 = C139665 * C139893;
    const double C139900 = C139719 * C139899;
    const double C139910 = C139665 * C139909;
    const double C139919 = C139719 * C139918;
    const double C139931 = C139665 * C139930;
    const double C139937 = C139719 * C139936;
    const double C141246 = -C141245;
    const double C141280 = -C141279;
    const double C141297 = -C141296;
    const double C139357 = C139353 / C139330;
    const double C141219 = std::exp(C141218);
    const double C141327 = std::exp(C141326);
    const double C141353 = std::exp(C141352);
    const double C139488 = C139487 / C139330;
    const double C139554 = C139553 / C139330;
    const double C139657 = C139649 * ae;
    const double C110 = C139649 * C139650 - (bs[1] * C139642) / C139641;
    const double C822 = C139761 * C139646 * C139649;
    const double C1600 = C139804 * C139646 * C139649;
    const double C2960 = C139649 * C139869 - (bs[1] * C139642) / C139641;
    const double C3490 = C139804 * C139761 * C139649;
    const double C5325 = C139649 * C139943 - (bs[1] * C139642) / C139641;
    const double C139658 = C139655 * C139656;
    const double C139663 = C139651 * C139655;
    const double C139767 = C139655 * C139766;
    const double C139810 = C139655 * C139809;
    const double C196 =
        (ae * C139647 * C139645 * C139761 * ae +
         C139646 * C139655 * C139651 * C139646 * C139761 * C139653) /
        C139335;
    const double C283 =
        (ae * C139647 * C139645 * C139804 * ae +
         C139646 * C139655 * C139651 * C139646 * C139804 * C139653) /
        C139335;
    const double C363 =
        (ae * C139647 * C139645 * C139764 +
         C139646 * C139655 * C139651 * C139761 * C139646 * C139653) /
        C139335;
    const double C420 =
        (C139646 * (C139649 + std::pow(C139761, 2) * C139651 * C139655) *
         C139653) /
        C139335;
    const double C502 =
        (C139646 * C139655 * C139651 * C139761 * C139804 * C139653) / C139335;
    const double C503 =
        (C139655 * C139651 * C139891 + C139665 * C139664 * C139891 * C139650) /
        C139335;
    const double C580 =
        (ae * C139647 * C139645 * C139807 +
         C139646 * C139655 * C139651 * C139804 * C139646 * C139653) /
        C139335;
    const double C636 =
        (C139646 * C139655 * C139651 * C139804 * C139761 * C139653) / C139335;
    const double C637 =
        (C139655 * C139651 * C139928 + C139665 * C139664 * C139928 * C139650) /
        C139335;
    const double C715 =
        (C139646 * (C139649 + std::pow(C139804, 2) * C139651 * C139655) *
         C139653) /
        C139335;
    const double C833 =
        (C139761 * (C139649 + C139650 * C139651 * C139655) * C139653) / C139335;
    const double C917 = (ae * C139647 * C139645 * C139654 +
                         C139761 * C139655 * C139651 * C139765) /
                        C139335;
    const double C1011 = (C139761 * C139655 * C139651 * C139808) / C139335;
    const double C1100 = (ae * C139647 * C139645 * C139654 +
                          C139761 * C139655 * C139651 * C139849) /
                         C139335;
    const double C1171 =
        (2 * ae * C139647 * C139645 * C139764 +
         C139761 * (C139649 + C139869 * C139651 * C139655) * C139653) /
        C139335;
    const double C1262 = (ae * C139647 * C139645 * C139807 +
                          C139761 * C139655 * C139651 * C139891) /
                         C139335;
    const double C1348 = (C139761 * C139655 * C139651 * C139907) / C139335;
    const double C1419 = (ae * C139647 * C139645 * C139807 +
                          C139761 * C139655 * C139651 * C139928) /
                         C139335;
    const double C1505 =
        (C139761 * (C139649 + C139943 * C139651 * C139655) * C139653) / C139335;
    const double C1611 =
        (C139804 * (C139649 + C139650 * C139651 * C139655) * C139653) / C139335;
    const double C1695 = (C139804 * C139655 * C139651 * C139765) / C139335;
    const double C1789 = (ae * C139647 * C139645 * C139654 +
                          C139804 * C139655 * C139651 * C139808) /
                         C139335;
    const double C1878 = (C139804 * C139655 * C139651 * C139849) / C139335;
    const double C1949 =
        (C139804 * (C139649 + C139869 * C139651 * C139655) * C139653) / C139335;
    const double C2040 = (ae * C139647 * C139645 * C139764 +
                          C139804 * C139655 * C139651 * C139891) /
                         C139335;
    const double C2126 = (ae * C139647 * C139645 * C139654 +
                          C139804 * C139655 * C139651 * C139907) /
                         C139335;
    const double C2197 = (ae * C139647 * C139645 * C139764 +
                          C139804 * C139655 * C139651 * C139928) /
                         C139335;
    const double C2283 =
        (2 * ae * C139647 * C139645 * C139807 +
         C139804 * (C139649 + C139943 * C139651 * C139655) * C139653) /
        C139335;
    const double C139695 = C139686 * C139690;
    const double C139694 = C139689 * C139686;
    const double C139717 = C139685 * C139686;
    const double C139779 = C139686 * C139777;
    const double C139778 = C139686 * C139776;
    const double C139822 = C139686 * C139820;
    const double C139821 = C139686 * C139819;
    const double C139855 = C139686 * C139854;
    const double C139877 = C139876 * C139686;
    const double C139897 = C139686 * C139896;
    const double C139913 = C139686 * C139912;
    const double C139934 = C139686 * C139933;
    const double C139951 = C139950 * C139686;
    const double C139674 = C139646 * C139671;
    const double C139683 = ae * C139671;
    const double C140357 = C139761 * C139671;
    const double C140804 = C139804 * C139671;
    const double C139693 = C139684 * C139650;
    const double C139692 = C139646 * C139684;
    const double C139691 = C139684 * ae;
    const double C140472 = C139684 * C139869;
    const double C140471 = C139761 * C139684;
    const double C140842 = C139684 * C139943;
    const double C140841 = C139804 * C139684;
    const double C139775 = ae * C139772;
    const double C139774 = C139646 * C139772;
    const double C140267 = C139761 * C139772;
    const double C140817 = C139804 * C139772;
    const double C139818 = ae * C139815;
    const double C139817 = C139646 * C139815;
    const double C140376 = C139761 * C139815;
    const double C140419 = C139804 * C139815;
    const double C139735 = C139646 * C139731;
    const double C140603 = C139731 * C139869;
    const double C140880 = C139761 * C139731;
    const double C140930 = C139731 * C139943;
    const double C139795 = C139792 * C139650;
    const double C140491 = C139646 * C139792;
    const double C140625 = C139761 * C139792;
    const double C140889 = C139792 * C139943;
    const double C139838 = C139835 * C139650;
    const double C140517 = C139646 * C139835;
    const double C140656 = C139835 * C139869;
    const double C140903 = C139761 * C139835;
    const double C140961 = C139804 * C139835;
    const double C5395 =
        (C139655 * C139651 * C139765 + C139771 * C139943) / C139335;
    const double C139794 = C139646 * C139790;
    const double C140601 = C139761 * C139790;
    const double C140924 = C139790 * C139943;
    const double C5507 =
        (C139655 * C139651 * C139849 + C139852 * C139943) / C139335;
    const double C139862 = C139646 * C139861;
    const double C140615 = C139761 * C139861;
    const double C140682 = C139804 * C139861;
    const double C140713 = C139861 * C139943;
    const double C3088 =
        (C139655 * C139651 * C139808 + C139814 * C139869) / C139335;
    const double C139837 = C139646 * C139833;
    const double C140611 = C139833 * C139869;
    const double C140879 = C139761 * C139833;
    const double C140928 = C139804 * C139833;
    const double C504 =
        (2 * C139646 * C139894 +
         C139646 * (C139894 + C139686 * C139685 * C139891 * C139650)) /
        C139335;
    const double C139901 = C139900 * C139650;
    const double C140516 = C139646 * C139900;
    const double C140655 = C139761 * C139900;
    const double C140700 = C139804 * C139900;
    const double C3308 =
        (C139655 * C139651 * C139907 + C139910 * C139869) / C139335;
    const double C139920 = C139646 * C139919;
    const double C140667 = C139919 * C139869;
    const double C140893 = C139761 * C139919;
    const double C140945 = C139804 * C139919;
    const double C638 =
        (2 * C139646 * C139931 +
         C139646 * (C139931 + C139686 * C139685 * C139928 * C139650)) /
        C139335;
    const double C139938 = C139937 * C139650;
    const double C140528 = C139646 * C139937;
    const double C140671 = C139761 * C139937;
    const double C140951 = C139804 * C139937;
    const double C141247 = std::exp(C141246);
    const double C141281 = std::exp(C141280);
    const double C141298 = std::exp(C141297);
    const double C139359 = C139357 - C139348;
    const double C30524 = C141219 * C828;
    const double C37096 = C141219 * C1606;
    const double C139346 = C139339 * C141219;
    const double C141220 = C141219 * C141214;
    const double C141224 = C141223 * C141219;
    const double C141464 = C141219 / C139336;
    const double C141463 = C141219 * C141215;
    const double C5865 = C141477 * C141219;
    const double C203 = C141327 * C190;
    const double C15856 = C141327 * C1690;
    const double C139420 = C139419 * C141327;
    const double C188 = -(2 * C139333 * (yA - yB) * C141327) / C139330;
    const double C418 =
        -((C141327 - (C139394 * 2 * C139333 * C139394 * C141327) / C139330) *
          C139340) /
        C139330;
    const double C5966 =
        ((C141327 - (C139394 * 2 * C139333 * C139394 * C141327) / C139330) *
         ae) /
            C139330 -
        (0 * be) / C139345;
    const double C5967 =
        (0 * ae) / C139330 - (C139333 * C139394 * C141327) / C139335;
    const double C141338 = C141327 * C141336;
    const double C141341 = C141223 * C141327;
    const double C141481 = C141327 * C141337;
    const double C141480 = C141327 / C139336;
    const double C21821 = C141477 * C141327;
    const double C290 = C141353 * C277;
    const double C6967 = C141353 * C1006;
    const double C139432 = C139431 * C141353;
    const double C275 = -(2 * C139333 * (zA - zB) * C141353) / C139330;
    const double C713 =
        -((C141353 - (C139397 * 2 * C139333 * C139397 * C141353) / C139330) *
          C139340) /
        C139330;
    const double C14078 =
        ((C141353 - (C139397 * 2 * C139333 * C139397 * C141353) / C139330) *
         ae) /
            C139330 -
        (0 * be) / C139345;
    const double C14079 =
        (0 * ae) / C139330 - (C139333 * C139397 * C141353) / C139335;
    const double C141362 = C141353 * C141360;
    const double C141365 = C141223 * C141353;
    const double C141486 = C141353 * C141361;
    const double C141485 = C141353 / C139336;
    const double C42875 = C141477 * C141353;
    const double C139489 = C139488 - C139481;
    const double C139555 = C139554 - C139547;
    const double C139659 = C139646 * C139658;
    const double C3030 = (C139655 * C139651 * C139765 + ae * C139761 * C139658 +
                          C139761 * (ae * C139658 + C139761 * C139771)) /
                         C139335;
    const double C3142 = (C139655 * C139651 * C139849 + ae * C139761 * C139658 +
                          C139761 * (ae * C139658 + C139761 * C139852)) /
                         C139335;
    const double C3576 =
        (C139804 * (ae * C139658 + C139761 * C139771)) / C139335;
    const double C3650 =
        (ae * C139761 * C139658 + C139804 * C139761 * C139814) / C139335;
    const double C3720 =
        (ae * C139804 * C139658 + C139761 * C139804 * C139852) / C139335;
    const double C3934 =
        (ae * C139761 * C139658 + C139804 * C139761 * C139910) / C139335;
    const double C5453 = (C139655 * C139651 * C139808 + ae * C139804 * C139658 +
                          C139804 * (ae * C139658 + C139804 * C139814)) /
                         C139335;
    const double C5673 = (C139655 * C139651 * C139907 + ae * C139804 * C139658 +
                          C139804 * (ae * C139658 + C139804 * C139910)) /
                         C139335;
    const double C2964 =
        (C139647 * C139645 * C139654 + C139658 * C139869) / C139330;
    const double C3494 = (C139804 * C139761 * C139658) / C139330;
    const double C5329 =
        (C139647 * C139645 * C139654 + C139658 * C139943) / C139330;
    const double C9670 =
        (2 * C139761 * C139658 + C139761 * (C139658 + C139671 * C139869)) /
        C139330;
    const double C10473 = (C139804 * (C139658 + C139671 * C139869)) / C139330;
    const double C21038 =
        (2 * C139804 * C139658 + C139804 * (C139658 + C139671 * C139943)) /
        C139330;
    const double C139669 = C139646 * C139663;
    const double C139668 = C139663 * ae;
    const double C139673 = C139663 + C139670;
    const double C139873 = C139663 + C139872;
    const double C139947 = C139663 + C139946;
    const double C140268 = C139761 * C139663;
    const double C140420 = C139804 * C139663;
    const double C421 =
        ((C139649 + C139869 * C139651 * C139655) * C139653 +
         (C139663 + C139869 * C139664 * C139665) * C139653 * C139650) /
        C139335;
    const double C716 =
        ((C139649 + C139943 * C139651 * C139655) * C139653 +
         (C139663 + C139943 * C139664 * C139665) * C139653 * C139650) /
        C139335;
    const double C111 =
        2 * C139646 * C139649 + C139646 * (C139649 + C139663 * C139650);
    const double C821 = C139761 * (C139649 + C139663 * C139650);
    const double C1599 = C139804 * (C139649 + C139663 * C139650);
    const double C9667 =
        2 * C139761 * C139649 + C139761 * (C139649 + C139663 * C139869);
    const double C10470 = C139804 * (C139649 + C139663 * C139869);
    const double C21035 =
        2 * C139804 * C139649 + C139804 * (C139649 + C139663 * C139943);
    const double C140117 = C139761 * C139767;
    const double C197 =
        (C139655 * C139651 * C139765 + ae * C139646 * C139767 +
         C139646 * (ae * C139767 + C139646 * C139665 * C139664 * C139765)) /
        C139335;
    const double C198 =
        (2 * (ae * C139767 + C139646 * C139771) +
         ae * (C139767 + C139772 * C139650) +
         C139646 * (C139771 + ae * C139646 * C139772 +
                    C139646 * (ae * C139772 +
                               C139646 * C139686 * C139685 * C139765))) /
        C139335;
    const double C364 =
        (C139655 * C139651 * C139849 + ae * C139646 * C139767 +
         C139646 * (ae * C139767 + C139646 * C139665 * C139664 * C139849)) /
        C139335;
    const double C1694 =
        (C139804 * (ae * C139767 + C139646 * C139771)) / C139335;
    const double C1877 =
        (C139804 * (ae * C139767 + C139646 * C139852)) / C139335;
    const double C2039 =
        (ae * C139646 * C139767 + C139804 * C139646 * C139894) / C139335;
    const double C2196 =
        (ae * C139646 * C139767 + C139804 * C139646 * C139931) / C139335;
    const double C5619 = (C139655 * C139651 * C139891 + ae * C139804 * C139767 +
                          C139804 * (ae * C139767 + C139804 * C139894)) /
                         C139335;
    const double C5727 = (C139655 * C139651 * C139928 + ae * C139804 * C139767 +
                          C139804 * (ae * C139767 + C139804 * C139931)) /
                         C139335;
    const double C191 =
        (C139647 * C139645 * C139764 + C139767 * C139650) / C139330;
    const double C192 =
        (2 * C139646 * C139767 + C139646 * (C139767 + C139772 * C139650)) /
        C139330;
    const double C910 = (C139761 * (C139767 + C139772 * C139650) +
                         (C139649 + C139663 * C139650) * ae) /
                        C139330;
    const double C911 =
        (C139761 * C139646 * C139767 + C139646 * C139649 * ae) / C139330;
    const double C1688 = (C139804 * (C139767 + C139772 * C139650)) / C139330;
    const double C1689 = (C139804 * C139646 * C139767) / C139330;
    const double C5391 =
        (C139647 * C139645 * C139764 + C139767 * C139943) / C139330;
    const double C21136 =
        (2 * C139804 * C139767 + C139804 * (C139767 + C139772 * C139943)) /
        C139330;
    const double C140235 = C139804 * C139810;
    const double C284 =
        (C139655 * C139651 * C139808 + ae * C139646 * C139810 +
         C139646 * (ae * C139810 + C139646 * C139665 * C139664 * C139808)) /
        C139335;
    const double C285 =
        (2 * (ae * C139810 + C139646 * C139814) +
         ae * (C139810 + C139815 * C139650) +
         C139646 * (C139814 + ae * C139646 * C139815 +
                    C139646 * (ae * C139815 +
                               C139646 * C139686 * C139685 * C139808))) /
        C139335;
    const double C581 =
        (C139655 * C139651 * C139907 + ae * C139646 * C139810 +
         C139646 * (ae * C139810 + C139646 * C139665 * C139664 * C139907)) /
        C139335;
    const double C1010 =
        (C139761 * (ae * C139810 + C139646 * C139814)) / C139335;
    const double C1261 =
        (ae * C139646 * C139810 + C139761 * C139646 * C139894) / C139335;
    const double C1347 =
        (C139761 * (ae * C139810 + C139646 * C139910)) / C139335;
    const double C1418 =
        (ae * C139646 * C139810 + C139761 * C139646 * C139931) / C139335;
    const double C3254 = (C139655 * C139651 * C139891 + ae * C139761 * C139810 +
                          C139761 * (ae * C139810 + C139761 * C139894)) /
                         C139335;
    const double C3362 = (C139655 * C139651 * C139928 + ae * C139761 * C139810 +
                          C139761 * (ae * C139810 + C139761 * C139931)) /
                         C139335;
    const double C3864 = (ae * (C139804 * C139810 + C139657) +
                          C139761 * (ae * C139767 + C139804 * C139894)) /
                         C139335;
    const double C278 =
        (C139647 * C139645 * C139807 + C139810 * C139650) / C139330;
    const double C279 =
        (2 * C139646 * C139810 + C139646 * (C139810 + C139815 * C139650)) /
        C139330;
    const double C1004 = (C139761 * (C139810 + C139815 * C139650)) / C139330;
    const double C1005 = (C139761 * C139646 * C139810) / C139330;
    const double C1782 = (C139804 * (C139810 + C139815 * C139650) +
                          (C139649 + C139663 * C139650) * ae) /
                         C139330;
    const double C1783 =
        (C139804 * C139646 * C139810 + C139646 * C139649 * ae) / C139330;
    const double C3084 =
        (C139647 * C139645 * C139807 + C139810 * C139869) / C139330;
    const double C3646 =
        (C139804 * C139761 * C139810 + C139761 * C139649 * ae) / C139330;
    const double C9848 =
        (2 * C139761 * C139810 + C139761 * (C139810 + C139815 * C139869)) /
        C139330;
    const double C10699 = (C139804 * (C139810 + C139815 * C139869) +
                           (C139649 + C139663 * C139869) * ae) /
                          C139330;
    const double C205 = C141327 * C196;
    const double C292 = C141353 * C283;
    const double C429 = C141327 * C420;
    const double C510 = C141353 * C502;
    const double C513 = C141353 * C503;
    const double C644 = C141327 * C636;
    const double C647 = C141327 * C637;
    const double C724 = C141353 * C715;
    const double C30276 = C141219 * C833;
    const double C6969 = C141353 * C1011;
    const double C30526 = C141219 * C1100;
    const double C7355 = C141353 * C1262;
    const double C30767 = C141219 * C1348;
    const double C7696 = C141353 * C1505;
    const double C36771 = C141219 * C1611;
    const double C15858 = C141327 * C1695;
    const double C37098 = C141219 * C1878;
    const double C16240 = C141327 * C1949;
    const double C37429 = C141219 * C2126;
    const double C16585 = C141327 * C2197;
    const double C139699 = C139646 * C139695;
    const double C139716 = ae * C139695;
    const double C139973 = C139761 * C139695;
    const double C140037 = C139804 * C139695;
    const double C140452 = C139695 * C139869;
    const double C140806 = C139695 * C139943;
    const double C139698 = C139684 + C139694;
    const double C139729 = C139717 * C139650;
    const double C139728 = C139646 * C139717;
    const double C139727 = C139717 * ae;
    const double C139734 = C139717 + C139730;
    const double C139883 = C139717 + C139882;
    const double C139957 = C139717 + C139956;
    const double C140627 = C139717 * C139869;
    const double C140626 = C139761 * C139717;
    const double C140888 = C139717 * C139943;
    const double C140962 = C139804 * C139717;
    const double C139781 = C139779 * C139650;
    const double C139786 = ae * C139779;
    const double C139785 = C139646 * C139779;
    const double C140470 = C139761 * C139779;
    const double C140686 = C139804 * C139779;
    const double C140818 = C139779 * C139943;
    const double C139780 = C139646 * C139778;
    const double C140451 = C139761 * C139778;
    const double C21139 =
        (2 * C139804 * C139771 + C139804 * (C139771 + C139778 * C139943)) /
        C139335;
    const double C50084 =
        (3 * (C139771 + C139778 * C139943) +
         C139804 * (2 * C139804 * C139778 +
                    C139804 * (C139778 + C139790 * C139943))) /
        C139335;
    const double C139824 = C139822 * C139650;
    const double C139829 = ae * C139822;
    const double C139828 = C139646 * C139822;
    const double C140512 = C139822 * C139869;
    const double C140654 = C139761 * C139822;
    const double C140699 = C139804 * C139822;
    const double C139823 = C139646 * C139821;
    const double C140739 = C139761 * C139821;
    const double C140805 = C139804 * C139821;
    const double C9851 =
        (2 * C139761 * C139814 + C139761 * (C139814 + C139821 * C139869)) /
        C139335;
    const double C10702 = (ae * (C139658 + C139671 * C139869) +
                           C139804 * (C139814 + C139821 * C139869)) /
                          C139335;
    const double C25742 =
        (3 * (C139814 + C139821 * C139869) +
         C139761 * (2 * C139761 * C139821 +
                    C139761 * (C139821 + C139833 * C139869))) /
        C139335;
    const double C139856 = C139646 * C139855;
    const double C140461 = C139761 * C139855;
    const double C140541 = C139804 * C139855;
    const double C10815 =
        (C139804 * C139852 + ae * C139804 * C139761 * C139671 +
         C139761 * (ae * C139804 * C139671 + C139761 * C139804 * C139855)) /
        C139335;
    const double C13454 = (ae * (C139658 + C139671 * C139943) +
                           C139761 * (C139852 + C139855 * C139943)) /
                          C139335;
    const double C21308 =
        (2 * C139804 * C139852 + C139804 * (C139852 + C139855 * C139943)) /
        C139335;
    const double C139878 = C139684 + C139877;
    const double C140299 = C139646 * C139897;
    const double C140511 = C139761 * C139897;
    const double C140557 = C139804 * C139897;
    const double C505 =
        (3 * (C139894 + C139897 * C139650) +
         C139646 *
             (2 * C139646 * C139897 +
              C139646 * (C139897 + C139719 * C139718 * C139891 * C139650))) /
        C139335;
    const double C1260 = (ae * (C139810 + C139815 * C139650) +
                          C139761 * (C139894 + C139897 * C139650)) /
                         C139335;
    const double C2038 = (ae * (C139767 + C139772 * C139650) +
                          C139804 * (C139894 + C139897 * C139650)) /
                         C139335;
    const double C139914 = C139646 * C139913;
    const double C140752 = C139761 * C139913;
    const double C140825 = C139804 * C139913;
    const double C10198 =
        (2 * C139761 * C139910 + C139761 * (C139910 + C139913 * C139869)) /
        C139335;
    const double C11145 = (ae * (C139658 + C139671 * C139869) +
                           C139804 * (C139910 + C139913 * C139869)) /
                          C139335;
    const double C26082 =
        (3 * (C139910 + C139913 * C139869) +
         C139761 * (2 * C139761 * C139913 +
                    C139761 * (C139913 + C139919 * C139869))) /
        C139335;
    const double C140306 = C139646 * C139934;
    const double C140525 = C139761 * C139934;
    const double C140831 = C139804 * C139934;
    const double C639 =
        (3 * (C139931 + C139934 * C139650) +
         C139646 *
             (2 * C139646 * C139934 +
              C139646 * (C139934 + C139719 * C139718 * C139928 * C139650))) /
        C139335;
    const double C1417 = (ae * (C139810 + C139815 * C139650) +
                          C139761 * (C139931 + C139934 * C139650)) /
                         C139335;
    const double C2195 = (ae * (C139767 + C139772 * C139650) +
                          C139804 * (C139931 + C139934 * C139650)) /
                         C139335;
    const double C139952 = C139684 + C139951;
    const double C139688 = 2 * C139683;
    const double C9771 = (2 * (ae * C139658 + C139761 * C139771) +
                          ae * (C139658 + C139671 * C139869) +
                          C139761 * (C139771 + ae * C139761 * C139671 +
                                     C139761 * (C139683 + C139761 * C139778))) /
                         C139335;
    const double C9940 = (2 * (ae * C139658 + C139761 * C139852) +
                          ae * (C139658 + C139671 * C139869) +
                          C139761 * (C139852 + ae * C139761 * C139671 +
                                     C139761 * (C139683 + C139761 * C139855))) /
                         C139335;
    const double C10598 =
        (C139804 * (C139771 + ae * C139761 * C139671 +
                    C139761 * (C139683 + C139761 * C139778))) /
        C139335;
    const double C13297 = (ae * C139658 + C139761 * C139771 +
                           (C139683 + C139761 * C139778) * C139943) /
                          C139335;
    const double C21231 =
        (2 * (ae * C139658 + C139804 * C139814) +
         ae * (C139658 + C139671 * C139943) +
         C139804 * (C139814 + ae * C139804 * C139671 +
                    C139804 * (C139683 + C139804 * C139821))) /
        C139335;
    const double C21568 =
        (2 * (ae * C139658 + C139804 * C139910) +
         ae * (C139658 + C139671 * C139943) +
         C139804 * (C139910 + ae * C139804 * C139671 +
                    C139804 * (C139683 + C139804 * C139913))) /
        C139335;
    const double C13377 =
        (C139761 * C139814 + ae * C139804 * C140357 +
         C139804 * (ae * C140357 + C139804 * C139761 * C139821)) /
        C139335;
    const double C13691 =
        (C139761 * C139910 + ae * C139804 * C140357 +
         C139804 * (ae * C140357 + C139804 * C139761 * C139913)) /
        C139335;
    const double C13208 = (C139761 * C139658 + C140357 * C139943) / C139330;
    const double C139697 = C139663 + C139693;
    const double C139696 = C139692 * ae;
    const double C139722 = 2 * C139692;
    const double C140279 = C139761 * C139692;
    const double C140430 = C139804 * C139692;
    const double C140476 = C139663 + C140472;
    const double C140475 = C140471 * ae;
    const double C140628 = 2 * C140471;
    const double C140759 = C139804 * C140471;
    const double C140846 = C139663 + C140842;
    const double C140845 = C140841 * ae;
    const double C140964 = 2 * C140841;
    const double C140467 = 2 * C139775;
    const double C21491 =
        (2 * (ae * C139767 + C139804 * C139894) +
         ae * (C139767 + C139772 * C139943) +
         C139804 * (C139894 + ae * C139804 * C139772 +
                    C139804 * (C139775 + C139804 * C139897))) /
        C139335;
    const double C21654 =
        (2 * (ae * C139767 + C139804 * C139931) +
         ae * (C139767 + C139772 * C139943) +
         C139804 * (C139931 + ae * C139804 * C139772 +
                    C139804 * (C139775 + C139804 * C139934))) /
        C139335;
    const double C140121 = C139761 * C139774;
    const double C365 =
        (2 * (ae * C139767 + C139646 * C139852) +
         ae * (C139767 + C139772 * C139650) +
         C139646 *
             (C139852 + ae * C139774 +
              C139646 * (C139775 + C139646 * C139686 * C139685 * C139849))) /
        C139335;
    const double C5620 =
        (C139646 * C139894 + ae * C139804 * C139774 +
         C139804 * (ae * C139774 + C139804 * C139646 * C139897)) /
        C139335;
    const double C5728 =
        (C139646 * C139931 + ae * C139804 * C139774 +
         C139804 * (ae * C139774 + C139804 * C139646 * C139934)) /
        C139335;
    const double C5392 = (C139646 * C139767 + C139774 * C139943) / C139330;
    const double C140837 = 2 * C139818;
    const double C10118 =
        (2 * (ae * C139810 + C139761 * C139894) +
         ae * (C139810 + C139815 * C139869) +
         C139761 * (C139894 + ae * C139761 * C139815 +
                    C139761 * (C139818 + C139761 * C139897))) /
        C139335;
    const double C10284 =
        (2 * (ae * C139810 + C139761 * C139931) +
         ae * (C139810 + C139815 * C139869) +
         C139761 * (C139931 + ae * C139761 * C139815 +
                    C139761 * (C139818 + C139761 * C139934))) /
        C139335;
    const double C140239 = C139804 * C139817;
    const double C582 =
        (2 * (ae * C139810 + C139646 * C139910) +
         ae * (C139810 + C139815 * C139650) +
         C139646 *
             (C139910 + ae * C139817 +
              C139646 * (C139818 + C139646 * C139686 * C139685 * C139907))) /
        C139335;
    const double C3255 =
        (C139646 * C139894 + ae * C139761 * C139817 +
         C139761 * (ae * C139817 + C139761 * C139646 * C139897)) /
        C139335;
    const double C3363 =
        (C139646 * C139931 + ae * C139761 * C139817 +
         C139761 * (ae * C139817 + C139761 * C139646 * C139934)) /
        C139335;
    const double C3085 = (C139646 * C139810 + C139817 * C139869) / C139330;
    const double C140377 = C139804 * C140376;
    const double C140605 = C139695 + C140603;
    const double C140882 = C140880 * C139943;
    const double C140932 = C139695 + C140930;
    const double C139797 = C139779 + C139795;
    const double C140495 = C139761 * C140491;
    const double C140822 = C140491 * C139943;
    const double C140891 = C139779 + C140889;
    const double C139840 = C139822 + C139838;
    const double C140519 = C140517 * C139869;
    const double C140789 = C139761 * C140517;
    const double C140858 = C139804 * C140517;
    const double C140660 = C139822 + C140656;
    const double C140907 = C139804 * C140903;
    const double C21148 = C141327 * C5395;
    const double C140925 = C139778 + C140924;
    const double C42379 = C141219 * C5507;
    const double C140683 = C139761 * C140682;
    const double C140714 = C139855 + C140713;
    const double C9860 = C141353 * C3088;
    const double C140612 = C139821 + C140611;
    const double C140881 = C139804 * C140879;
    const double C516 = C141353 * C504;
    const double C139902 = C139897 + C139901;
    const double C140518 = C139761 * C140516;
    const double C140560 = C139804 * C140516;
    const double C30770 = C141219 * C3308;
    const double C140668 = C139913 + C140667;
    const double C140894 = C139804 * C140893;
    const double C650 = C141327 * C638;
    const double C139939 = C139934 + C139938;
    const double C140529 = C139761 * C140528;
    const double C140834 = C139804 * C140528;
    const double C141495 = C141472 * C141247;
    const double C141493 = C141247 * C141469;
    const double C818 = -(C141247 * C141470) / C141242;
    const double C141497 = C141472 * C141281;
    const double C141496 = C141281 * C141473;
    const double C2374 = -(C141281 * C141475) / C141242;
    const double C141499 = C141472 * C141298;
    const double C141498 = C141298 * C141474;
    const double C4148 = -(C141298 * C141476) / C141242;
    const double C139352 = C139346 / C139335;
    const double C139350 = 2 * C139346;
    const double C139349 = -4 * C139346;
    const double C141466 = C141220 / C139345;
    const double C141465 = C141220 * C141215;
    const double C141462 = C141220 / C139330;
    const double C141227 = C141224 * C141215;
    const double C92 = C141224 / C141468;
    const double C63606 = C141224 / C139336;
    const double C5863 = (C141219 * std::pow(C141215, 2)) / C139335 + C141464;
    const double C141490 = C141463 / C139330;
    const double C5864 = (-2 * C141223 * C141463) / C139330;
    const double C139448 = 2 * C139420;
    const double C139479 = C139420 / C139335;
    const double C139501 = -4 * C139420;
    const double C6228 =
        (((-4 * C139420) / C139330 -
          (C139394 * (C141327 - (C139394 * 2 * C139420) / C139330) * C139340) /
              C139330) *
         ae) /
        C139330;
    const double C6229 =
        (-((C141327 - (C139394 * 2 * C139420) / C139330) * C139340) / C139330) /
        C139336;
    const double C206 = C188 * C110;
    const double C204 = C188 * C115;
    const double C202 = C188 * C109;
    const double C428 = C188 * C190;
    const double C426 = C188 * C189;
    const double C643 = C188 * C277;
    const double C930 = C188 * C822;
    const double C1183 = C188 * C912;
    const double C1708 = C188 * C1600;
    const double C1961 = C188 * C1690;
    const double C15857 = C188 * C1606;
    const double C15855 = C188 * C1601;
    const double C16584 = C188 * C1784;
    const double C18480 = C188 * C3490;
    const double C21149 = C188 * C5325;
    const double C430 = C418 * C110;
    const double C427 = C418 * C109;
    const double C1180 = C418 * C822;
    const double C1958 = C418 * C1600;
    const double C16239 = C418 * C1601;
    const double C18786 = C418 * C3490;
    const double C21409 = C418 * C5325;
    const double C5977 = C5966 * C110;
    const double C5973 = C5966 * C115;
    const double C5969 = C5966 * C109;
    const double C6234 = C5966 * C190;
    const double C6231 = C5966 * C189;
    const double C6509 = C5966 * C277;
    const double C6858 = C5966 * C822;
    const double C7241 = C5966 * C912;
    const double C7936 = C5966 * C1600;
    const double C8265 = C5966 * C1690;
    const double C52516 = C5966 * C5325;
    const double C52512 = C5966 * C1606;
    const double C52508 = C5966 * C1601;
    const double C53191 = C5966 * C1784;
    const double C55117 = C5966 * C3490;
    const double C5971 = C5967 * C822;
    const double C6232 = C5967 * C912;
    const double C52510 = C5967 * C3490;
    const double C141483 = C141338 / C139345;
    const double C141482 = C141338 * C141337;
    const double C141478 = C141338 / C139330;
    const double C141344 = C141341 * C141337;
    const double C29773 = C141341 / C141468;
    const double C71446 = C141341 / C139336;
    const double C141500 = C141481 / C139330;
    const double C21820 = (-2 * C141223 * C141481) / C139330;
    const double C21819 = (C141327 * std::pow(C141337, 2)) / C139335 + C141480;
    const double C139518 = 2 * C139432;
    const double C139545 = C139432 / C139335;
    const double C139567 = -4 * C139432;
    const double C14599 =
        (((-4 * C139432) / C139330 -
          (C139397 * (C141353 - (C139397 * 2 * C139432) / C139330) * C139340) /
              C139330) *
         ae) /
        C139330;
    const double C14600 =
        (-((C141353 - (C139397 * 2 * C139432) / C139330) * C139340) / C139330) /
        C139336;
    const double C293 = C275 * C110;
    const double C291 = C275 * C115;
    const double C289 = C275 * C109;
    const double C509 = C275 * C190;
    const double C723 = C275 * C277;
    const double C721 = C275 * C276;
    const double C1024 = C275 * C822;
    const double C1517 = C275 * C1006;
    const double C1802 = C275 * C1600;
    const double C2295 = C275 * C1784;
    const double C6968 = C275 * C828;
    const double C6966 = C275 * C823;
    const double C7354 = C275 * C912;
    const double C9861 = C275 * C2960;
    const double C10712 = C275 * C3490;
    const double C725 = C713 * C110;
    const double C722 = C713 * C109;
    const double C1514 = C713 * C822;
    const double C2292 = C713 * C1600;
    const double C7695 = C713 * C823;
    const double C10365 = C713 * C2960;
    const double C11360 = C713 * C3490;
    const double C14089 = C14078 * C110;
    const double C14085 = C14078 * C115;
    const double C14081 = C14078 * C109;
    const double C14341 = C14078 * C190;
    const double C14605 = C14078 * C277;
    const double C14602 = C14078 * C276;
    const double C14964 = C14078 * C822;
    const double C15611 = C14078 * C1006;
    const double C15997 = C14078 * C1600;
    const double C16712 = C14078 * C1784;
    const double C35970 = C14078 * C2960;
    const double C35966 = C14078 * C828;
    const double C35962 = C14078 * C823;
    const double C36304 = C14078 * C912;
    const double C39581 = C14078 * C3490;
    const double C14083 = C14079 * C1600;
    const double C14603 = C14079 * C1784;
    const double C35964 = C14079 * C3490;
    const double C141488 = C141362 / C139345;
    const double C141487 = C141362 * C141361;
    const double C141479 = C141362 / C139330;
    const double C141368 = C141365 * C141361;
    const double C58488 = C141365 / C141468;
    const double C106914 = C141365 / C139336;
    const double C141503 = C141486 / C139330;
    const double C42874 = (-2 * C141223 * C141486) / C139330;
    const double C42873 = (C141353 * std::pow(C141361, 2)) / C139335 + C141485;
    const double C139660 = C139659 + C139657;
    const double C30530 = C141219 * C3142;
    const double C18483 = C141327 * C3576;
    const double C52515 = C141341 * C3576;
    const double C81616 = C141341 * C3576;
    const double C10711 = C141353 * C3650;
    const double C35969 = C141365 * C3650;
    const double C98266 = C141365 * C3650;
    const double C32949 = C141219 * C3720;
    const double C33173 = C141219 * C3934;
    const double C42633 = C141219 * C5673;
    const double C9859 = C275 * C2964;
    const double C30528 = C141219 * C2964;
    const double C35974 = C14078 * C2964;
    const double C10710 = C275 * C3494;
    const double C18482 = C188 * C3494;
    const double C32951 = C141219 * C3494;
    const double C35968 = C14079 * C3494;
    const double C39577 = C14078 * C3494;
    const double C52514 = C5967 * C3494;
    const double C55121 = C5966 * C3494;
    const double C21147 = C188 * C5329;
    const double C42381 = C141219 * C5329;
    const double C52520 = C5966 * C5329;
    const double C25748 = C275 * C9670;
    const double C30532 = C141219 * C9670;
    const double C38754 = C14078 * C9670;
    const double C26586 = C275 * C10473;
    const double C32947 = C141219 * C10473;
    const double C35976 = C14079 * C10473;
    const double C39569 = C14078 * C10473;
    const double C55123 = C5967 * C10473;
    const double C50090 = C188 * C21038;
    const double C57857 = C5966 * C21038;
    const double C58027 = C141219 * C21038;
    const double C139672 = C139669 * ae;
    const double C3647 =
        (C139804 * C139761 * C139817 + C139761 * C139669 * ae) / C139330;
    const double C2961 = C139646 * C139649 + C139669 * C139869;
    const double C3491 = C139804 * C139761 * C139669;
    const double C5326 = C139646 * C139649 + C139669 * C139943;
    const double C9668 =
        2 * C139761 * C139669 + C139761 * (C139669 + C139692 * C139869);
    const double C10471 = C139804 * (C139669 + C139692 * C139869);
    const double C21036 =
        2 * C139804 * C139669 + C139804 * (C139669 + C139692 * C139943);
    const double C139676 = C139674 + C139668;
    const double C140269 = C140267 + C139668;
    const double C140421 = C140419 + C139668;
    const double C13614 =
        (ae * (C139810 + C139804 * (C139804 * C139815 + C139668) +
               C139804 * C139663 * ae) +
         C139761 * (C139894 + ae * C139804 * C139772 +
                    C139804 * (C139775 + C139804 * C139897))) /
        C139335;
    const double C139675 = C139673 * C139653;
    const double C139874 = C139873 * C139653;
    const double C139948 = C139947 * C139653;
    const double C140270 = C140268 * ae;
    const double C13205 = C139761 * C139649 + C140268 * C139943;
    const double C42109 =
        2 * C139804 * C140268 + C139804 * (C140268 + C140471 * C139943);
    const double C140422 = C140420 * ae;
    const double C432 = C141327 * C421;
    const double C727 = C141353 * C716;
    const double C210 = C188 * C111;
    const double C297 = C275 * C111;
    const double C433 = C418 * C111;
    const double C728 = C713 * C111;
    const double C5991 = C5966 * C111;
    const double C14103 = C14078 * C111;
    const double C926 = C188 * C821;
    const double C1020 = C275 * C821;
    const double C1177 = C418 * C821;
    const double C1511 = C713 * C821;
    const double C5979 = C5967 * C821;
    const double C6850 = C5966 * C821;
    const double C14956 = C14078 * C821;
    const double C1704 = C188 * C1599;
    const double C1798 = C275 * C1599;
    const double C1955 = C418 * C1599;
    const double C2289 = C713 * C1599;
    const double C7928 = C5966 * C1599;
    const double C14091 = C14079 * C1599;
    const double C15989 = C14078 * C1599;
    const double C25750 = C275 * C9667;
    const double C26247 = C713 * C9667;
    const double C38758 = C14078 * C9667;
    const double C26588 = C275 * C10470;
    const double C27243 = C713 * C10470;
    const double C35972 = C14079 * C10470;
    const double C39573 = C14078 * C10470;
    const double C55119 = C5967 * C10470;
    const double C50092 = C188 * C21035;
    const double C50349 = C418 * C21035;
    const double C57861 = C5966 * C21035;
    const double C140118 = C140117 + C139657;
    const double C209 = C141327 * C197;
    const double C213 = C141327 * C198;
    const double C1707 = C141327 * C1694;
    const double C37106 = C141219 * C1877;
    const double C45027 = C141224 * C1877;
    const double C81916 = C141224 * C1877;
    const double C2050 = C141353 * C2039;
    const double C14344 = C141365 * C2039;
    const double C89721 = C141365 * C2039;
    const double C2207 = C141327 * C2196;
    const double C21659 = C141327 * C5727;
    const double C207 = C141327 * C191;
    const double C431 = C188 * C191;
    const double C512 = C275 * C191;
    const double C6240 = C5966 * C191;
    const double C14346 = C14078 * C191;
    const double C211 = C141327 * C192;
    const double C434 = C188 * C192;
    const double C515 = C275 * C192;
    const double C6249 = C5966 * C192;
    const double C14352 = C14078 * C192;
    const double C927 = C141327 * C910;
    const double C1178 = C188 * C910;
    const double C1268 = C275 * C910;
    const double C5980 = C141341 * C910;
    const double C6243 = C5967 * C910;
    const double C7232 = C5966 * C910;
    const double C15280 = C14078 * C910;
    const double C63721 = C141341 * C910;
    const double C931 = C141327 * C911;
    const double C1181 = C188 * C911;
    const double C1271 = C275 * C911;
    const double C5972 = C141341 * C911;
    const double C6237 = C5967 * C911;
    const double C7238 = C5966 * C911;
    const double C15284 = C14078 * C911;
    const double C63713 = C141341 * C911;
    const double C1705 = C141327 * C1688;
    const double C1956 = C188 * C1688;
    const double C2046 = C275 * C1688;
    const double C8256 = C5966 * C1688;
    const double C14348 = C14079 * C1688;
    const double C16360 = C14078 * C1688;
    const double C1709 = C141327 * C1689;
    const double C1959 = C188 * C1689;
    const double C2049 = C275 * C1689;
    const double C8262 = C5966 * C1689;
    const double C14343 = C14079 * C1689;
    const double C16364 = C14078 * C1689;
    const double C5566 = C188 * C5391;
    const double C13535 = C5966 * C5391;
    const double C21150 = C141327 * C5391;
    const double C21411 = C188 * C21136;
    const double C50093 = C141327 * C21136;
    const double C52869 = C5966 * C21136;
    const double C140236 = C140235 + C139657;
    const double C296 = C141353 * C284;
    const double C300 = C141353 * C285;
    const double C1023 = C141353 * C1010;
    const double C1272 = C141353 * C1261;
    const double C23411 = C141224 * C1347;
    const double C30776 = C141219 * C1347;
    const double C73027 = C141224 * C1347;
    const double C1429 = C141327 * C1418;
    const double C6512 = C141341 * C1418;
    const double C64253 = C141341 * C1418;
    const double C10123 = C141353 * C3254;
    const double C11046 = C141353 * C3864;
    const double C36307 = C141365 * C3864;
    const double C98690 = C141365 * C3864;
    const double C294 = C141353 * C278;
    const double C646 = C188 * C278;
    const double C726 = C275 * C278;
    const double C6514 = C5966 * C278;
    const double C14611 = C14078 * C278;
    const double C298 = C141353 * C279;
    const double C649 = C188 * C279;
    const double C729 = C275 * C279;
    const double C6520 = C5966 * C279;
    const double C14620 = C14078 * C279;
    const double C1021 = C141353 * C1004;
    const double C1425 = C188 * C1004;
    const double C1512 = C275 * C1004;
    const double C6516 = C5967 * C1004;
    const double C7587 = C5966 * C1004;
    const double C15602 = C14078 * C1004;
    const double C1025 = C141353 * C1005;
    const double C1428 = C188 * C1005;
    const double C1515 = C275 * C1005;
    const double C6511 = C5967 * C1005;
    const double C7591 = C5966 * C1005;
    const double C15608 = C14078 * C1005;
    const double C1799 = C141353 * C1782;
    const double C2203 = C188 * C1782;
    const double C2290 = C275 * C1782;
    const double C8590 = C5966 * C1782;
    const double C14092 = C141365 * C1782;
    const double C14614 = C14079 * C1782;
    const double C16703 = C14078 * C1782;
    const double C89469 = C141365 * C1782;
    const double C1803 = C141353 * C1783;
    const double C2206 = C188 * C1783;
    const double C2293 = C275 * C1783;
    const double C8594 = C5966 * C1783;
    const double C14084 = C141365 * C1783;
    const double C14608 = C14079 * C1783;
    const double C16709 = C14078 * C1783;
    const double C89461 = C141365 * C1783;
    const double C3421 = C275 * C3084;
    const double C9862 = C141353 * C3084;
    const double C18278 = C14078 * C3084;
    const double C4079 = C275 * C3646;
    const double C10713 = C141353 * C3646;
    const double C15610 = C14079 * C3646;
    const double C19091 = C188 * C3646;
    const double C19192 = C14078 * C3646;
    const double C35965 = C141365 * C3646;
    const double C53193 = C5967 * C3646;
    const double C55801 = C5966 * C3646;
    const double C98262 = C141365 * C3646;
    const double C10367 = C275 * C9848;
    const double C25751 = C141353 * C9848;
    const double C36647 = C14078 * C9848;
    const double C11362 = C275 * C10699;
    const double C18279 = C14079 * C10699;
    const double C26589 = C141353 * C10699;
    const double C35973 = C141365 * C10699;
    const double C37640 = C14078 * C10699;
    const double C55803 = C5967 * C10699;
    const double C101794 = C141365 * C10699;
    const double C139702 = C139699 + C139691;
    const double C139724 = 2 * C139716;
    const double C140604 = C139716 + C140601;
    const double C140616 = C139716 + C140615;
    const double C140931 = C139716 + C140928;
    const double C140946 = C139716 + C140945;
    const double C139978 = ae * C139973;
    const double C140602 = 2 * C139973;
    const double C140878 = C139804 * C139973;
    const double C29329 =
        (C139852 + C139855 * C139943 + ae * (C140357 + C139973 * C139943) +
         C139761 * (ae * (C139671 + C139695 * C139943) +
                    C139761 * (C139855 + C139861 * C139943))) /
        C139335;
    const double C42111 =
        (2 * C139804 * C140357 + C139804 * (C140357 + C139973 * C139943)) /
        C139330;
    const double C140042 = ae * C140037;
    const double C140929 = 2 * C140037;
    const double C140454 = C139671 + C140452;
    const double C140808 = C139671 + C140806;
    const double C139701 = C139698 * C139653;
    const double C139733 = C139684 + C139729;
    const double C139732 = C139728 * ae;
    const double C140493 = C139728 * C139869;
    const double C140492 = C139761 * C139728;
    const double C140860 = C139728 * C139943;
    const double C140859 = C139804 * C139728;
    const double C139739 = C139735 + C139727;
    const double C140631 = C140625 + C139727;
    const double C140968 = C140961 + C139727;
    const double C139738 = C139734 * C139653;
    const double C139884 = C139883 * C139653;
    const double C139958 = C139957 * C139653;
    const double C140633 = C139684 + C140627;
    const double C140632 = C140626 * ae;
    const double C140905 = C140626 * C139943;
    const double C140904 = C139804 * C140626;
    const double C140890 = C139684 + C140888;
    const double C140969 = C140962 * ae;
    const double C139783 = C139772 + C139781;
    const double C139796 = C139786 + C139794;
    const double C139863 = C139786 + C139862;
    const double C140621 = 2 * C139786;
    const double C140702 = C139786 + C140700;
    const double C140952 = C139786 + C140951;
    const double C139791 = 2 * C139785;
    const double C139789 = ae * C139785;
    const double C140278 = C139761 * C139785;
    const double C140821 = C139804 * C139785;
    const double C21137 =
        (2 * C139804 * C139774 + C139804 * (C139774 + C139785 * C139943)) /
        C139330;
    const double C140474 = C140470 + C139691;
    const double C140691 = ae * C140686;
    const double C140940 = 2 * C140686;
    const double C140819 = C139772 + C140818;
    const double C139782 = C139775 + C139780;
    const double C140453 = C139683 + C140451;
    const double C50091 = C141327 * C21139;
    const double C63139 = C141327 * C50084;
    const double C139826 = C139815 + C139824;
    const double C139839 = C139829 + C139837;
    const double C139921 = C139829 + C139920;
    const double C140658 = C139829 + C140655;
    const double C140672 = C139829 + C140671;
    const double C140957 = 2 * C139829;
    const double C139834 = 2 * C139828;
    const double C139832 = ae * C139828;
    const double C140381 = C139761 * C139828;
    const double C140429 = C139804 * C139828;
    const double C9849 =
        (2 * C139761 * C139817 + C139761 * (C139817 + C139828 * C139869)) /
        C139330;
    const double C10700 = (C139804 * (C139817 + C139828 * C139869) +
                           (C139669 + C139692 * C139869) * ae) /
                          C139330;
    const double C140514 = C139815 + C140512;
    const double C140659 = 2 * C140654;
    const double C140657 = ae * C140654;
    const double C140758 = C139804 * C140654;
    const double C140701 = C140699 + C139691;
    const double C139825 = C139818 + C139823;
    const double C140807 = C139683 + C140805;
    const double C25749 = C141353 * C9851;
    const double C26587 = C141353 * C10702;
    const double C35977 = C141365 * C10702;
    const double C101790 = C141365 * C10702;
    const double C32298 = C141353 * C25742;
    const double C139857 = C139775 + C139856;
    const double C140462 = C139683 + C140461;
    const double C32945 = C141219 * C10815;
    const double C39694 = C141219 * C13454;
    const double C58025 = C141219 * C21308;
    const double C139879 = C139878 * C139653;
    const double C140513 = C139818 + C140511;
    const double C140558 = C139775 + C140557;
    const double C518 = C141353 * C505;
    const double C1269 = C141353 * C1260;
    const double C2047 = C141353 * C2038;
    const double C14349 = C141365 * C2038;
    const double C89726 = C141365 * C2038;
    const double C139915 = C139818 + C139914;
    const double C140826 = C139683 + C140825;
    const double C30773 = C141219 * C10198;
    const double C33170 = C141219 * C11145;
    const double C32525 = C141219 * C26082;
    const double C140526 = C139818 + C140525;
    const double C140832 = C139775 + C140831;
    const double C652 = C141327 * C639;
    const double C1426 = C141327 * C1417;
    const double C6517 = C141341 * C1417;
    const double C64258 = C141341 * C1417;
    const double C2204 = C141327 * C2195;
    const double C139953 = C139952 * C139653;
    const double C30534 = C141219 * C9940;
    const double C36892 = C21821 * C10598;
    const double C55124 = C141341 * C10598;
    const double C84982 = C141341 * C10598;
    const double C47413 = C141327 * C13297;
    const double C52523 = C141341 * C13297;
    const double C88492 = C141341 * C13297;
    const double C58274 = C141219 * C21568;
    const double C39576 = C141365 * C13377;
    const double C51661 = C42875 * C13377;
    const double C102802 = C141365 * C13377;
    const double C40037 = C141219 * C13691;
    const double C39575 = C14079 * C13208;
    const double C39696 = C141219 * C13208;
    const double C47412 = C188 * C13208;
    const double C52522 = C5967 * C13208;
    const double C55129 = C5966 * C13208;
    const double C139700 = C139697 * ae;
    const double C112 = 3 * (C139649 + C139663 * C139650) +
                        C139646 * (2 * C139669 + C139646 * C139697);
    const double C820 = C139761 * (2 * C139669 + C139646 * C139697);
    const double C1598 = C139804 * (2 * C139669 + C139646 * C139697);
    const double C2962 = C139649 + C139663 * C139650 + C139697 * C139869;
    const double C3492 = C139804 * C139761 * C139697;
    const double C5327 = C139649 + C139663 * C139650 + C139697 * C139943;
    const double C140281 = C140279 * ae;
    const double C13206 = C139761 * C139669 + C140279 * C139943;
    const double C140432 = C140430 * ae;
    const double C140478 = C140476 * ae;
    const double C25568 = 3 * (C139649 + C139663 * C139869) +
                          C139761 * (2 * C140268 + C139761 * C140476);
    const double C26351 = C139804 * (2 * C140268 + C139761 * C140476);
    const double C29087 = C139649 + C139663 * C139869 + C140476 * C139943;
    const double C140761 = C140759 * ae;
    const double C140848 = C140846 * ae;
    const double C49989 = 3 * (C139649 + C139663 * C139943) +
                          C139804 * (2 * C140420 + C139804 * C140846);
    const double C50593 = C141327 * C21654;
    const double C16363 = C141365 * C5620;
    const double C43297 = C42875 * C5620;
    const double C91679 = C141365 * C5620;
    const double C16592 = C141327 * C5728;
    const double C5567 = C188 * C5392;
    const double C13537 = C5966 * C5392;
    const double C15870 = C141327 * C5392;
    const double C16362 = C14079 * C5392;
    const double C26007 = C141353 * C10118;
    const double C7362 = C141353 * C3255;
    const double C7590 = C141341 * C3363;
    const double C22464 = C21821 * C3363;
    const double C65304 = C141341 * C3363;
    const double C3422 = C275 * C3085;
    const double C6981 = C141353 * C3085;
    const double C7589 = C5967 * C3085;
    const double C18280 = C14078 * C3085;
    const double C140607 = C139761 * C140605;
    const double C140884 = C139973 + C140882;
    const double C140934 = C139804 * C140932;
    const double C139799 = C139646 * C139797;
    const double C140288 = C139761 * C139797;
    const double C140823 = C139785 + C140822;
    const double C140941 = C139804 * C140891;
    const double C139842 = C139646 * C139840;
    const double C140386 = C139761 * C139840;
    const double C140439 = C139804 * C139840;
    const double C140521 = C139828 + C140519;
    const double C140791 = C139804 * C140789;
    const double C140663 = C139761 * C140660;
    const double C140768 = C139804 * C140660;
    const double C63134 =
        (4 * (2 * C139804 * C139778 + C139804 * C140925) +
         C139804 *
             (3 * C140925 +
              C139804 * (2 * C139804 * C139790 +
                         C139804 * (C139790 + std::pow(C139652, 7) * bs[7] *
                                                  C139765 * C139943)))) /
        C139335;
    const double C42371 = (ae * (2 * C139804 * C139671 +
                                 C139804 * (C139671 + C139695 * C139943)) +
                           C139761 * (2 * C140541 + C139804 * C140714)) /
                          C139335;
    const double C42372 =
        (2 * C140541 + C139804 * C140714 +
         ae * (2 * C139804 * C139973 +
               C139804 * (C139973 + C139761 * C139731 * C139943)) +
         C139761 *
             (ae * (2 * C140037 + C139804 * (C139695 + C139731 * C139943)) +
              C139761 * (2 * C140682 +
                         C139804 * (C139861 + std::pow(C139652, 7) * bs[7] *
                                                  C139849 * C139943)))) /
        C139335;
    const double C50251 = (3 * (C139852 + C139855 * C139943) +
                           C139804 * (2 * C140541 + C139804 * C140714)) /
                          C139335;
    const double C63247 =
        (4 * (2 * C140541 + C139804 * C140714) +
         C139804 *
             (3 * C140714 +
              C139804 * (2 * C140682 +
                         C139804 * (C139861 + std::pow(C139652, 7) * bs[7] *
                                                  C139849 * C139943)))) /
        C139335;
    const double C32293 =
        (4 * (2 * C139761 * C139821 + C139761 * C140612) +
         C139761 *
             (3 * C140612 +
              C139761 * (2 * C139761 * C139833 +
                         C139761 * (C139833 + std::pow(C139652, 7) * bs[7] *
                                                  C139808 * C139869)))) /
        C139335;
    const double C506 =
        (4 * (2 * C139646 * C139897 + C139646 * C139902) +
         C139646 *
             (3 * C139902 +
              C139646 * (2 * C139646 * C139900 +
                         C139646 * (C139900 + std::pow(C139652, 7) * bs[7] *
                                                  C139891 * C139650)))) /
        C139335;
    const double C32520 =
        (4 * (2 * C139761 * C139913 + C139761 * C140668) +
         C139761 *
             (3 * C140668 +
              C139761 * (2 * C139761 * C139919 +
                         C139761 * (C139919 + std::pow(C139652, 7) * bs[7] *
                                                  C139907 * C139869)))) /
        C139335;
    const double C640 =
        (4 * (2 * C139646 * C139934 + C139646 * C139939) +
         C139646 *
             (3 * C139939 +
              C139646 * (2 * C139646 * C139937 +
                         C139646 * (C139937 + std::pow(C139652, 7) * bs[7] *
                                                  C139928 * C139650)))) /
        C139335;
    const double C99 = C141495 / C141252;
    const double C97 = C141247 / C141252 - (C141493 * C141470) / C141471;
    const double C98 = C141493 / C141494 - (C141495 * C141470) / C141242;
    const double C2376 = C141493 / C141242;
    const double C2958 = C141497 / C141252;
    const double C816 = C141496 / C141242;
    const double C2956 = C141281 / C141252 - (C141496 * C141475) / C141471;
    const double C2957 = C141496 / C141494 - (C141497 * C141475) / C141242;
    const double C5324 = C141499 / C141252;
    const double C1596 = C141498 / C141242;
    const double C5322 = C141298 / C141252 - (C141498 * C141476) / C141471;
    const double C5323 = C141498 / C141494 - (C141499 * C141476) / C141242;
    const double C139356 = C139341 - C139352;
    const double C139355 = C139331 * C139350;
    const double C5873 =
        ((-C139350 / C139330) / C139336 - (0 * be) / C139330) / C139336 -
        (0 * be) / C139330;
    const double C29775 = -C139350 / C139330;
    const double C71450 = (-C139350 / C139330) / C139336 - (0 * be) / C139330;
    const double C139354 = C139349 / C139330;
    const double C141491 = C141465 / C139335;
    const double C22656 = C141462 * C833;
    const double C23046 = C141462 * C3142;
    const double C23042 = C141462 * C2964;
    const double C23038 = C141462 * C1100;
    const double C23034 = C141462 * C828;
    const double C23417 = C141462 * C1347;
    const double C23413 = C141462 * C3308;
    const double C23409 = C141462 * C1348;
    const double C25843 = C141462 * C9670;
    const double C25839 = C141462 * C9940;
    const double C26090 = C141462 * C10198;
    const double C26713 = C141462 * C3494;
    const double C26709 = C141462 * C3720;
    const double C26705 = C141462 * C10473;
    const double C26701 = C141462 * C10815;
    const double C27038 = C141462 * C3934;
    const double C27034 = C141462 * C11145;
    const double C44643 = C141462 * C1611;
    const double C45041 = C141462 * C1877;
    const double C45033 = C141462 * C5507;
    const double C45029 = C141462 * C5329;
    const double C45025 = C141462 * C1878;
    const double C45021 = C141462 * C1606;
    const double C45389 = C141462 * C5673;
    const double C45385 = C141462 * C2126;
    const double C47624 = C141462 * C13454;
    const double C47620 = C141462 * C13208;
    const double C47940 = C141462 * C13691;
    const double C50263 = C141462 * C21038;
    const double C50259 = C141462 * C21308;
    const double C50513 = C141462 * C21568;
    const double C141467 = C141227 / C139330;
    const double C6711 = C5863 * C833;
    const double C7101 = C5863 * C1100;
    const double C7095 = C5863 * C828;
    const double C7476 = C5863 * C1347;
    const double C7470 = C5863 * C1348;
    const double C9955 = C5863 * C2964;
    const double C9949 = C5863 * C3142;
    const double C10207 = C5863 * C3308;
    const double C10830 = C5863 * C3494;
    const double C10824 = C5863 * C3720;
    const double C11154 = C5863 * C3934;
    const double C15725 = C5863 * C1611;
    const double C16124 = C5863 * C1877;
    const double C16112 = C5863 * C1878;
    const double C16106 = C5863 * C1606;
    const double C16469 = C5863 * C2126;
    const double C21323 = C5863 * C5329;
    const double C21317 = C5863 * C5507;
    const double C21577 = C5863 * C5673;
    const double C71442 = -C141490;
    const double C7472 = C5864 * C1347;
    const double C16114 = C5864 * C1877;
    const double C139456 = C139394 * C139448;
    const double C21919 =
        ((-C139447 / C139330) / C139336 -
         ((C141327 - (C139394 * C139448) / C139330) * be) / C139330) /
            C139336 -
        ((C139394 * ((-C139448 / C139330) / C139336 - (0 * be) / C139330) +
          C141341) *
         be) /
            C139330;
    const double C21920 =
        ((-C139448 / C139330) / C139336 - (0 * be) / C139330) / C139336 -
        (0 * be) / C139330;
    const double C63708 = (-C139448 / C139330) / C139336 - (0 * be) / C139330;
    const double C139486 = C139483 - C139479;
    const double C139504 = C139501 / C139330;
    const double C6248 = C6228 * C111;
    const double C6239 = C6228 * C110;
    const double C6233 = C6228 * C109;
    const double C7237 = C6228 * C822;
    const double C7231 = C6228 * C821;
    const double C8261 = C6228 * C1600;
    const double C8255 = C6228 * C1599;
    const double C52864 = C6228 * C5325;
    const double C52860 = C6228 * C1601;
    const double C55467 = C6228 * C3490;
    const double C58112 = C6228 * C21035;
    const double C6242 = C6229 * C821;
    const double C6236 = C6229 * C822;
    const double C52862 = C6229 * C3490;
    const double C55469 = C6229 * C10470;
    const double C219 = C204 + C205;
    const double C218 = C202 + C203;
    const double C654 = C643 + C644;
    const double C15878 = C15857 + C15858;
    const double C15877 = C15855 + C15856;
    const double C16596 = C16584 + C16585;
    const double C440 = C427 + C428;
    const double C16250 = C16239 + C1961;
    const double C141501 = C141482 / C139335;
    const double C5992 = C141478 * C192;
    const double C5988 = C141478 * C198;
    const double C5982 = C141478 * C197;
    const double C5978 = C141478 * C191;
    const double C5974 = C141478 * C196;
    const double C5970 = C141478 * C190;
    const double C6241 = C141478 * C421;
    const double C6235 = C141478 * C420;
    const double C6521 = C141478 * C638;
    const double C6515 = C141478 * C637;
    const double C6510 = C141478 * C636;
    const double C6859 = C141478 * C911;
    const double C6851 = C141478 * C910;
    const double C7592 = C141478 * C1418;
    const double C7588 = C141478 * C1417;
    const double C7937 = C141478 * C1689;
    const double C7933 = C141478 * C1694;
    const double C7929 = C141478 * C1688;
    const double C8595 = C141478 * C2196;
    const double C8591 = C141478 * C2195;
    const double C52525 = C141478 * C5392;
    const double C52521 = C141478 * C5395;
    const double C52517 = C141478 * C5391;
    const double C52513 = C141478 * C1695;
    const double C52509 = C141478 * C1690;
    const double C52861 = C141478 * C1949;
    const double C53200 = C141478 * C5728;
    const double C53196 = C141478 * C5727;
    const double C53192 = C141478 * C2197;
    const double C55130 = C141478 * C13297;
    const double C55122 = C141478 * C3576;
    const double C57862 = C141478 * C21136;
    const double C57858 = C141478 * C21139;
    const double C58355 = C141478 * C21654;
    const double C141484 = C141344 / C139330;
    const double C72089 = C71446 * C3363;
    const double C125976 = C71446 * C10598;
    const double C63607 = -C141500;
    const double C21943 = C21820 * C910;
    const double C21925 = C21820 * C911;
    const double C22468 = C21820 * C1417;
    const double C22462 = C21820 * C1418;
    const double C23533 = C21820 * C3363;
    const double C36890 = C21820 * C3576;
    const double C39460 = C21820 * C10598;
    const double C42205 = C21820 * C13297;
    const double C21945 = C21819 * C191;
    const double C21939 = C21819 * C197;
    const double C21929 = C21819 * C196;
    const double C21923 = C21819 * C190;
    const double C22203 = C21819 * C421;
    const double C22188 = C21819 * C420;
    const double C22470 = C21819 * C637;
    const double C22460 = C21819 * C636;
    const double C22808 = C21819 * C911;
    const double C23535 = C21819 * C1418;
    const double C23864 = C21819 * C1689;
    const double C23858 = C21819 * C1694;
    const double C24503 = C21819 * C2196;
    const double C36888 = C21819 * C1695;
    const double C36882 = C21819 * C1690;
    const double C37218 = C21819 * C1949;
    const double C37533 = C21819 * C2197;
    const double C39458 = C21819 * C3576;
    const double C42213 = C21819 * C5391;
    const double C42207 = C21819 * C5395;
    const double C42716 = C21819 * C5727;
    const double C139526 = C139397 * C139518;
    const double C43031 =
        ((-C139517 / C139330) / C139336 -
         ((C141353 - (C139397 * C139518) / C139330) * be) / C139330) /
            C139336 -
        ((C139397 * ((-C139518 / C139330) / C139336 - (0 * be) / C139330) +
          C141365) *
         be) /
            C139330;
    const double C43032 =
        ((-C139518 / C139330) / C139336 - (0 * be) / C139330) / C139336 -
        (0 * be) / C139330;
    const double C89456 = (-C139518 / C139330) / C139336 - (0 * be) / C139330;
    const double C139552 = C139549 - C139545;
    const double C139570 = C139567 / C139330;
    const double C14619 = C14599 * C111;
    const double C14610 = C14599 * C110;
    const double C14604 = C14599 * C109;
    const double C15607 = C14599 * C822;
    const double C15601 = C14599 * C821;
    const double C16708 = C14599 * C1600;
    const double C16702 = C14599 * C1599;
    const double C36642 = C14599 * C2960;
    const double C36638 = C14599 * C823;
    const double C39231 = C14599 * C9667;
    const double C40256 = C14599 * C3490;
    const double C40252 = C14599 * C10470;
    const double C14613 = C14600 * C1599;
    const double C14607 = C14600 * C1600;
    const double C36644 = C14600 * C10470;
    const double C36640 = C14600 * C3490;
    const double C306 = C291 + C292;
    const double C305 = C289 + C290;
    const double C520 = C509 + C510;
    const double C6989 = C6968 + C6969;
    const double C6988 = C6966 + C6967;
    const double C7366 = C7354 + C7355;
    const double C735 = C722 + C723;
    const double C7703 = C7695 + C1517;
    const double C141504 = C141487 / C139335;
    const double C14104 = C141479 * C279;
    const double C14100 = C141479 * C285;
    const double C14094 = C141479 * C284;
    const double C14090 = C141479 * C278;
    const double C14086 = C141479 * C283;
    const double C14082 = C141479 * C277;
    const double C14353 = C141479 * C504;
    const double C14347 = C141479 * C503;
    const double C14342 = C141479 * C502;
    const double C14612 = C141479 * C716;
    const double C14606 = C141479 * C715;
    const double C14965 = C141479 * C1005;
    const double C14961 = C141479 * C1010;
    const double C14957 = C141479 * C1004;
    const double C15285 = C141479 * C1261;
    const double C15281 = C141479 * C1260;
    const double C15998 = C141479 * C1783;
    const double C15990 = C141479 * C1782;
    const double C16365 = C141479 * C2039;
    const double C16361 = C141479 * C2038;
    const double C35979 = C141479 * C3085;
    const double C35975 = C141479 * C3088;
    const double C35971 = C141479 * C3084;
    const double C35967 = C141479 * C1011;
    const double C35963 = C141479 * C1006;
    const double C36313 = C141479 * C3255;
    const double C36309 = C141479 * C3254;
    const double C36305 = C141479 * C1262;
    const double C36639 = C141479 * C1505;
    const double C38759 = C141479 * C9848;
    const double C38755 = C141479 * C9851;
    const double C38996 = C141479 * C10118;
    const double C39582 = C141479 * C3646;
    const double C39578 = C141479 * C3650;
    const double C39574 = C141479 * C10699;
    const double C39570 = C141479 * C10702;
    const double C39928 = C141479 * C3864;
    const double C141489 = C141368 / C139330;
    const double C107332 = C106914 * C5620;
    const double C132738 = C106914 * C13377;
    const double C89302 = -C141503;
    const double C43055 = C42874 * C1782;
    const double C43037 = C42874 * C1783;
    const double C43301 = C42874 * C2038;
    const double C43295 = C42874 * C2039;
    const double C45280 = C42874 * C5620;
    const double C51659 = C42874 * C3650;
    const double C51653 = C42874 * C3646;
    const double C51975 = C42874 * C3864;
    const double C54423 = C42874 * C10699;
    const double C54417 = C42874 * C10702;
    const double C55242 = C42874 * C13377;
    const double C43057 = C42873 * C278;
    const double C43051 = C42873 * C284;
    const double C43041 = C42873 * C283;
    const double C43035 = C42873 * C277;
    const double C43303 = C42873 * C503;
    const double C43293 = C42873 * C502;
    const double C43567 = C42873 * C716;
    const double C43552 = C42873 * C715;
    const double C43902 = C42873 * C1005;
    const double C43896 = C42873 * C1010;
    const double C44213 = C42873 * C1261;
    const double C44915 = C42873 * C1783;
    const double C45282 = C42873 * C2039;
    const double C51657 = C42873 * C1011;
    const double C51651 = C42873 * C1006;
    const double C51973 = C42873 * C1262;
    const double C52291 = C42873 * C1505;
    const double C54425 = C42873 * C3084;
    const double C54419 = C42873 * C3088;
    const double C54663 = C42873 * C3254;
    const double C55250 = C42873 * C3646;
    const double C55244 = C42873 * C3650;
    const double C55592 = C42873 * C3864;
    const double C139661 = ae * C139660;
    const double C116 = (C139647 * C139645 * C139654 + C139646 * C139660 +
                         C139646 * C139649 * ae) /
                        C139330;
    const double C827 = (C139761 * C139660) / C139330;
    const double C1605 = (C139804 * C139660) / C139330;
    const double C9863 = C9859 + C9860;
    const double C10714 = C10710 + C10711;
    const double C18489 = C18482 + C18483;
    const double C35989 = C35968 + C35969;
    const double C52535 = C52514 + C52515;
    const double C21151 = C21147 + C21148;
    const double C140122 = C140121 + C139672;
    const double C140240 = C140239 + C139672;
    const double C3865 =
        (ae * (C139804 * C139817 + C139672) +
         C139761 * (ae * C139774 + C139804 * C139646 * C139897)) /
        C139335;
    const double C4080 = C275 * C3647;
    const double C8051 = C141353 * C3647;
    const double C8592 = C5967 * C3647;
    const double C14963 = C141365 * C3647;
    const double C15491 = C188 * C3647;
    const double C15605 = C14079 * C3647;
    const double C19194 = C14078 * C3647;
    const double C43900 = C42874 * C3647;
    const double C81774 = C141479 * C3647;
    const double C90328 = C141365 * C3647;
    const double C98963 = C5966 * C3647;
    const double C6856 = C5967 * C2961;
    const double C6980 = C275 * C2961;
    const double C7234 = C6229 * C2961;
    const double C7700 = C713 * C2961;
    const double C35978 = C14078 * C2961;
    const double C36648 = C14599 * C2961;
    const double C7934 = C5967 * C3491;
    const double C8050 = C275 * C3491;
    const double C8258 = C6229 * C3491;
    const double C8701 = C713 * C3491;
    const double C14846 = C188 * C3491;
    const double C14962 = C14079 * C3491;
    const double C15172 = C418 * C3491;
    const double C15604 = C14600 * C3491;
    const double C81773 = C14078 * C3491;
    const double C82639 = C14599 * C3491;
    const double C98123 = C5966 * C3491;
    const double C98549 = C6228 * C3491;
    const double C15869 = C188 * C5326;
    const double C15995 = C14079 * C5326;
    const double C16245 = C418 * C5326;
    const double C16705 = C14600 * C5326;
    const double C52524 = C5966 * C5326;
    const double C52870 = C6228 * C5326;
    const double C22923 = C275 * C9668;
    const double C23637 = C713 * C9668;
    const double C23971 = C275 * C10471;
    const double C24605 = C713 * C10471;
    const double C35980 = C14079 * C10471;
    const double C36650 = C14600 * C10471;
    const double C98121 = C5967 * C10471;
    const double C98547 = C6229 * C10471;
    const double C44794 = C188 * C21036;
    const double C45170 = C418 * C21036;
    const double C139678 = ae * C139676;
    const double C139677 = C139646 * C139676;
    const double C139687 = 2 * C139676;
    const double C139968 = C139761 * C139676;
    const double C140032 = C139804 * C139676;
    const double C2965 = (C139660 + C139676 * C139869) / C139330;
    const double C5330 = (C139660 + C139676 * C139943) / C139330;
    const double C140272 = ae * C140269;
    const double C140271 = C139761 * C140269;
    const double C140327 = C139804 * C140269;
    const double C140469 = 2 * C140269;
    const double C140424 = ae * C140421;
    const double C140423 = C139804 * C140421;
    const double C140839 = 2 * C140421;
    const double C39926 = C141365 * C13614;
    const double C51977 = C42875 * C13614;
    const double C55590 = C42874 * C13614;
    const double C103204 = C141365 * C13614;
    const double C133044 = C106914 * C13614;
    const double C832 =
        (2 * ae * C139761 * C139658 + C139646 * C139761 * C139675) / C139335;
    const double C1610 =
        (2 * ae * C139804 * C139658 + C139646 * C139804 * C139675) / C139335;
    const double C2968 = ((C139649 + C139650 * C139651 * C139655) * C139653 +
                          C139675 * C139869) /
                         C139335;
    const double C3498 = (C139804 * C139761 * C139675) / C139335;
    const double C5333 = ((C139649 + C139650 * C139651 * C139655) * C139653 +
                          C139675 * C139943) /
                         C139335;
    const double C422 =
        (2 * C139646 * C139874 +
         C139646 * (C139874 + (C139684 + C139869 * C139685 * C139686) *
                                  C139653 * C139650)) /
        C139335;
    const double C1170 =
        (2 * ae * C139646 * C139767 + C139761 * C139646 * C139874) / C139335;
    const double C1948 = (C139804 * C139646 * C139874) / C139335;
    const double C3790 =
        (2 * ae * C139804 * C139767 + C139761 * C139804 * C139874) / C139335;
    const double C5561 = ((C139649 + C139869 * C139651 * C139655) * C139653 +
                          C139874 * C139943) /
                         C139335;
    const double C717 =
        (2 * C139646 * C139948 +
         C139646 * (C139948 + (C139684 + C139943 * C139685 * C139686) *
                                  C139653 * C139650)) /
        C139335;
    const double C1504 = (C139761 * C139646 * C139948) / C139335;
    const double C2282 =
        (2 * ae * C139646 * C139810 + C139804 * C139646 * C139948) / C139335;
    const double C3416 = ((C139649 + C139943 * C139651 * C139655) * C139653 +
                          C139948 * C139869) /
                         C139335;
    const double C4074 =
        (2 * ae * C139761 * C139810 + C139804 * C139761 * C139948) / C139335;
    const double C140378 = C140377 + C140270;
    const double C11041 =
        (ae * C139767 + C139804 * C139894 +
         ae * (C139804 * C139761 * C139815 + C140270) +
         C139761 * (ae * (C139804 * C139815 + C139668) +
                    C139761 * (C139775 + C139804 * C139897))) /
        C139335;
    const double C39579 = C14079 * C13205;
    const double C40254 = C14600 * C13205;
    const double C47410 = C188 * C13205;
    const double C47732 = C418 * C13205;
    const double C52518 = C5967 * C13205;
    const double C52866 = C6229 * C13205;
    const double C55125 = C5966 * C13205;
    const double C55471 = C6228 * C13205;
    const double C57859 = C5967 * C42109;
    const double C58110 = C6229 * C42109;
    const double C61345 = C188 * C42109;
    const double C61559 = C418 * C42109;
    const double C140119 = ae * C140118;
    const double C3026 = (C139647 * C139645 * C139764 + C139761 * C140118 +
                          C139761 * C139649 * ae) /
                         C139330;
    const double C3572 = (C139804 * C140118) / C139330;
    const double C13294 = (C140118 + C140269 * C139943) / C139330;
    const double C220 = C206 + C207;
    const double C441 = C430 + C431;
    const double C521 = C512 + C513;
    const double C222 = C210 + C211;
    const double C442 = C433 + C434;
    const double C522 = C515 + C516;
    const double C935 = C926 + C927;
    const double C1186 = C1177 + C1178;
    const double C5998 = C5979 + C5980;
    const double C937 = C930 + C931;
    const double C1187 = C1180 + C1181;
    const double C5994 = C5971 + C5972;
    const double C1713 = C1704 + C1705;
    const double C1964 = C1955 + C1956;
    const double C1715 = C1708 + C1709;
    const double C1965 = C1958 + C1959;
    const double C2054 = C2049 + C2050;
    const double C14355 = C14343 + C14344;
    const double C21414 = C21409 + C5566;
    const double C21152 = C21149 + C21150;
    const double C50353 = C50349 + C21411;
    const double C50096 = C50092 + C50093;
    const double C140237 = ae * C140236;
    const double C5449 = (C139647 * C139645 * C139807 + C139804 * C140236 +
                          C139804 * C139649 * ae) /
                         C139330;
    const double C1276 = C1271 + C1272;
    const double C307 = C293 + C294;
    const double C655 = C646 + C647;
    const double C736 = C725 + C726;
    const double C309 = C297 + C298;
    const double C656 = C649 + C650;
    const double C737 = C728 + C729;
    const double C1029 = C1020 + C1021;
    const double C1520 = C1511 + C1512;
    const double C1031 = C1024 + C1025;
    const double C1433 = C1428 + C1429;
    const double C1521 = C1514 + C1515;
    const double C6523 = C6511 + C6512;
    const double C1807 = C1798 + C1799;
    const double C2298 = C2289 + C2290;
    const double C14110 = C14091 + C14092;
    const double C1809 = C1802 + C1803;
    const double C2211 = C2206 + C2207;
    const double C2299 = C2292 + C2293;
    const double C14106 = C14083 + C14084;
    const double C10370 = C10365 + C3421;
    const double C9864 = C9861 + C9862;
    const double C11365 = C11360 + C4079;
    const double C10715 = C10712 + C10713;
    const double C35987 = C35964 + C35965;
    const double C26251 = C26247 + C10367;
    const double C25754 = C25750 + C25751;
    const double C27247 = C27243 + C11362;
    const double C26595 = C26588 + C26589;
    const double C35991 = C35972 + C35973;
    const double C139705 = ae * C139702;
    const double C139704 = C139646 * C139702;
    const double C139721 = 2 * C139702;
    const double C139964 = C139761 * C139702;
    const double C140028 = C139804 * C139702;
    const double C140092 = C139702 * C139869;
    const double C140194 = C139702 * C139943;
    const double C140606 = C139761 * C140604;
    const double C140617 = C139761 * C140616;
    const double C140933 = C139804 * C140931;
    const double C140947 = C139804 * C140946;
    const double C139983 = 2 * C139978;
    const double C140600 = C139778 + C139978;
    const double C140614 = C139855 + C139978;
    const double C140883 = C139978 + C140881;
    const double C140895 = C139978 + C140894;
    const double C42295 =
        (2 * (ae * C140357 + C139804 * C140739) +
         ae * (C140357 + C139973 * C139943) +
         C139804 * (C140739 + ae * C139804 * C139973 +
                    C139804 * (C139978 + C139804 * C139761 * C139833))) /
        C139335;
    const double C42629 =
        (2 * (ae * C140357 + C139804 * C140752) +
         ae * (C140357 + C139973 * C139943) +
         C139804 * (C140752 + ae * C139804 * C139973 +
                    C139804 * (C139978 + C139804 * C139761 * C139919))) /
        C139335;
    const double C39690 = C141219 * C29329;
    const double C55358 = C141219 * C42111;
    const double C57855 = C5967 * C42111;
    const double C61347 = C188 * C42111;
    const double C140047 = 2 * C140042;
    const double C140684 = C140042 + C140683;
    const double C140927 = C139821 + C140042;
    const double C140944 = C139913 + C140042;
    const double C26581 =
        (ae * (2 * C140357 + C139761 * C140454) +
         C139804 * (2 * C139761 * C139821 +
                    C139761 * (C139821 + C139833 * C139869))) /
        C139335;
    const double C26695 =
        (2 * (ae * C139804 * C139671 + C139761 * C140541) +
         ae * C139804 * C140454 +
         C139761 * (C140541 + ae * C139804 * C139973 +
                    C139761 * (C140042 + C139761 * C139804 * C139861))) /
        C139335;
    const double C27028 =
        (ae * (2 * C140357 + C139761 * C140454) +
         C139804 * (2 * C139761 * C139913 +
                    C139761 * (C139913 + C139919 * C139869))) /
        C139335;
    const double C29253 =
        (C139814 + C139821 * C139869 + ae * C139804 * C140454 +
         C139804 * (ae * C140454 + C139804 * (C139821 + C139833 * C139869))) /
        C139335;
    const double C29563 =
        (C139910 + C139913 * C139869 + ae * C139804 * C140454 +
         C139804 * (ae * C140454 + C139804 * (C139913 + C139919 * C139869))) /
        C139335;
    const double C34719 =
        (2 * (ae * (C139671 + C139695 * C139943) + C139761 * C140714) +
         ae * (C140454 + C140605 * C139943) +
         C139761 *
             (C140714 + ae * (C139973 + C139761 * C139731 * C139943) +
              C139761 * (ae * (C139695 + C139731 * C139943) +
                         C139761 * (C139861 + std::pow(C139652, 7) * bs[7] *
                                                  C139849 * C139943)))) /
        C139335;
    const double C42296 =
        (2 * (ae * C140454 + C139804 * C140612) +
         ae * (C140454 + C140605 * C139943) +
         C139804 *
             (C140612 + ae * C139804 * C140605 +
              C139804 * (ae * C140605 +
                         C139804 * (C139833 + std::pow(C139652, 7) * bs[7] *
                                                  C139808 * C139869)))) /
        C139335;
    const double C42630 =
        (2 * (ae * C140454 + C139804 * C140668) +
         ae * (C140454 + C140605 * C139943) +
         C139804 *
             (C140668 + ae * C139804 * C140605 +
              C139804 * (ae * C140605 +
                         C139804 * (C139919 + std::pow(C139652, 7) * bs[7] *
                                                  C139907 * C139869)))) /
        C139335;
    const double C25570 = (3 * (C139658 + C139671 * C139869) +
                           C139761 * (2 * C140357 + C139761 * C140454)) /
                          C139330;
    const double C26353 =
        (C139804 * (2 * C140357 + C139761 * C140454)) / C139330;
    const double C29089 =
        (C139658 + C139671 * C139869 + C140454 * C139943) / C139330;
    const double C42112 =
        (2 * C139804 * C140454 + C139804 * (C140454 + C140605 * C139943)) /
        C139330;
    const double C58019 =
        (ae * (3 * C140808 +
               C139804 *
                   (2 * C140037 + C139804 * (C139695 + C139731 * C139943))) +
         C139761 *
             (3 * C140714 +
              C139804 * (2 * C140682 +
                         C139804 * (C139861 + std::pow(C139652, 7) * bs[7] *
                                                  C139849 * C139943)))) /
        C139335;
    const double C49991 = (3 * (C139658 + C139671 * C139943) +
                           C139804 * (2 * C140804 + C139804 * C140808)) /
                          C139330;
    const double C139703 = C139646 * C139701;
    const double C139962 = C139761 * C139701;
    const double C140026 = C139804 * C139701;
    const double C2969 = (2 * ae * (C139658 + C139671 * C139869) +
                          C139646 * (C139675 + C139701 * C139869)) /
                         C139335;
    const double C5334 = (2 * ae * (C139658 + C139671 * C139943) +
                          C139646 * (C139675 + C139701 * C139943)) /
                         C139335;
    const double C9673 =
        (2 * C139761 * C139675 + C139761 * (C139675 + C139701 * C139869)) /
        C139335;
    const double C10476 = (C139804 * (C139675 + C139701 * C139869)) / C139335;
    const double C21041 =
        (2 * C139804 * C139675 + C139804 * (C139675 + C139701 * C139943)) /
        C139335;
    const double C139737 = C139646 * C139733;
    const double C139736 = C139733 * ae;
    const double C140289 = C139761 * C139733;
    const double C140440 = C139804 * C139733;
    const double C9669 =
        2 * C139761 * C139697 + C139761 * (C139697 + C139733 * C139869);
    const double C10472 = C139804 * (C139697 + C139733 * C139869);
    const double C21037 =
        2 * C139804 * C139697 + C139804 * (C139697 + C139733 * C139943);
    const double C140499 = C140495 + C139732;
    const double C140862 = C140858 + C139732;
    const double C140497 = C139692 + C140493;
    const double C140496 = C140492 * ae;
    const double C140790 = C139804 * C140492;
    const double C47290 =
        2 * C139804 * C140279 + C139804 * (C140279 + C140492 * C139943);
    const double C140864 = C139692 + C140860;
    const double C140863 = C140859 * ae;
    const double C139744 = ae * C139739;
    const double C139742 = C139646 * C139739;
    const double C139977 = C139761 * C139739;
    const double C140041 = C139804 * C139739;
    const double C140098 = C139739 * C139869;
    const double C140200 = C139739 * C139943;
    const double C140638 = ae * C140631;
    const double C140635 = C139761 * C140631;
    const double C140690 = C139804 * C140631;
    const double C140718 = C140631 * C139943;
    const double C140974 = ae * C140968;
    const double C140972 = C139804 * C140968;
    const double C139741 = C139646 * C139738;
    const double C139974 = C139761 * C139738;
    const double C140038 = C139804 * C139738;
    const double C140096 = C139738 * C139869;
    const double C140198 = C139738 * C139943;
    const double C139885 = C139884 * C139650;
    const double C140489 = C139646 * C139884;
    const double C140622 = C139761 * C139884;
    const double C140687 = C139804 * C139884;
    const double C140716 = C139884 * C139943;
    const double C139959 = C139958 * C139650;
    const double C140533 = C139646 * C139958;
    const double C140676 = C139958 * C139869;
    const double C140901 = C139761 * C139958;
    const double C140958 = C139804 * C139958;
    const double C140637 = C139761 * C140633;
    const double C140636 = C140633 * ae;
    const double C140769 = C139804 * C140633;
    const double C42110 =
        2 * C139804 * C140476 + C139804 * (C140476 + C140633 * C139943);
    const double C140911 = C140907 + C140632;
    const double C140909 = C140471 + C140905;
    const double C140908 = C140904 * ae;
    const double C140965 = C139804 * C140890;
    const double C140963 = C140890 * ae;
    const double C140125 = C139761 * C139783;
    const double C2037 =
        (ae * (2 * C139774 + C139646 * C139783) +
         C139804 * (2 * C139646 * C139897 + C139646 * C139902)) /
        C139335;
    const double C2194 =
        (ae * (2 * C139774 + C139646 * C139783) +
         C139804 * (2 * C139646 * C139934 + C139646 * C139939)) /
        C139335;
    const double C5621 = (C139894 + C139897 * C139650 + ae * C139804 * C139783 +
                          C139804 * (ae * C139783 + C139804 * C139902)) /
                         C139335;
    const double C5729 = (C139931 + C139934 * C139650 + ae * C139804 * C139783 +
                          C139804 * (ae * C139783 + C139804 * C139939)) /
                         C139335;
    const double C21493 =
        (2 * (ae * C139783 + C139804 * C139902) +
         ae * (C139783 + C139797 * C139943) +
         C139804 *
             (C139902 + ae * C139804 * C139797 +
              C139804 * (ae * C139797 +
                         C139804 * (C139900 + std::pow(C139652, 7) * bs[7] *
                                                  C139891 * C139650)))) /
        C139335;
    const double C21656 =
        (2 * (ae * C139783 + C139804 * C139939) +
         ae * (C139783 + C139797 * C139943) +
         C139804 *
             (C139939 + ae * C139804 * C139797 +
              C139804 * (ae * C139797 +
                         C139804 * (C139937 + std::pow(C139652, 7) * bs[7] *
                                                  C139928 * C139650)))) /
        C139335;
    const double C193 = (3 * (C139767 + C139772 * C139650) +
                         C139646 * (2 * C139774 + C139646 * C139783)) /
                        C139330;
    const double C909 = (C139761 * (2 * C139774 + C139646 * C139783) +
                         (2 * C139669 + C139646 * C139697) * ae) /
                        C139330;
    const double C1687 =
        (C139804 * (2 * C139774 + C139646 * C139783)) / C139330;
    const double C5393 =
        (C139767 + C139772 * C139650 + C139783 * C139943) / C139330;
    const double C21138 =
        (2 * C139804 * C139783 + C139804 * (C139783 + C139797 * C139943)) /
        C139330;
    const double C139798 = C139646 * C139796;
    const double C140456 = C139761 * C139796;
    const double C139864 = C139646 * C139863;
    const double C140464 = C139761 * C139863;
    const double C140543 = C139804 * C139863;
    const double C140704 = C139761 * C140702;
    const double C140726 = C139804 * C140702;
    const double C140953 = C139804 * C140952;
    const double C139793 = C139778 + C139789;
    const double C139859 = C139855 + C139789;
    const double C140488 = 2 * C139789;
    const double C140561 = C139789 + C140560;
    const double C140835 = C139789 + C140834;
    const double C13615 =
        (ae * (C139817 + C139804 * (C139804 * C139828 + C139696) +
               C139804 * C139692 * ae) +
         C139761 * (C140299 + ae * C139804 * C139785 +
                    C139804 * (C139789 + C139804 * C139646 * C139900))) /
        C139335;
    const double C21492 =
        (2 * (ae * C139774 + C139804 * C140299) +
         ae * (C139774 + C139785 * C139943) +
         C139804 * (C140299 + ae * C139804 * C139785 +
                    C139804 * (C139789 + C139804 * C139646 * C139900))) /
        C139335;
    const double C21655 =
        (2 * (ae * C139774 + C139804 * C140306) +
         ae * (C139774 + C139785 * C139943) +
         C139804 * (C140306 + ae * C139804 * C139785 +
                    C139804 * (C139789 + C139804 * C139646 * C139937))) /
        C139335;
    const double C140280 = C140278 + C139696;
    const double C21412 = C188 * C21137;
    const double C44795 = C141327 * C21137;
    const double C52874 = C5966 * C21137;
    const double C140479 = ae * C140474;
    const double C140477 = C139761 * C140474;
    const double C140547 = C139804 * C140474;
    const double C140577 = C140474 * C139943;
    const double C140624 = 2 * C140474;
    const double C140696 = 2 * C140691;
    const double C140725 = C139897 + C140691;
    const double C140950 = C139934 + C140691;
    const double C50082 = (3 * (C139767 + C139772 * C139943) +
                           C139804 * (2 * C140817 + C139804 * C140819)) /
                          C139330;
    const double C199 =
        (3 * (C139771 + ae * C139774 + C139646 * C139782) +
         ae * (2 * C139774 + C139646 * C139783) +
         C139646 *
             (2 * C139782 + ae * C139783 +
              C139646 * (C139778 + ae * C139646 * C139779 +
                         C139646 * (ae * C139779 +
                                    C139646 * C139719 * C139718 * C139765)))) /
        C139335;
    const double C1693 =
        (C139804 * (C139771 + ae * C139774 + C139646 * C139782)) / C139335;
    const double C5396 =
        (ae * C139767 + C139646 * C139771 + C139782 * C139943) / C139335;
    const double C21140 =
        (2 * C139804 * C139782 + C139804 * (C139782 + C139796 * C139943)) /
        C139335;
    const double C50085 =
        (3 * (C139782 + C139796 * C139943) +
         C139804 * (2 * C139804 * C139796 +
                    C139804 * (C139796 +
                               (ae * C139792 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139765) *
                                   C139943))) /
        C139335;
    const double C25664 =
        (3 * (C139771 + ae * C140357 + C139761 * C140453) +
         ae * (2 * C140357 + C139761 * C140454) +
         C139761 * (2 * C140453 + ae * C140454 +
                    C139761 * (C139778 + C139978 +
                               C139761 * (C139716 + C139761 * C139790)))) /
        C139335;
    const double C26479 =
        (C139804 * (2 * C140453 + ae * C140454 +
                    C139761 * (C139778 + C139978 +
                               C139761 * (C139716 + C139761 * C139790)))) /
        C139335;
    const double C29175 =
        (C139771 + ae * C140357 + C139761 * C140453 +
         (C139778 + C139978 + C139761 * (C139716 + C139761 * C139790)) *
             C139943) /
        C139335;
    const double C42199 =
        (2 * C139804 * C140453 + C139804 * (C140453 + C140604 * C139943)) /
        C139335;
    const double C57851 =
        (3 * (C140453 + C140604 * C139943) +
         C139804 * (2 * C139804 * C140604 +
                    C139804 * (C140604 +
                               (ae * C139731 + C139761 * std::pow(C139652, 7) *
                                                   bs[7] * C139765) *
                                   C139943))) /
        C139335;
    const double C50095 = C50090 + C50091;
    const double C140243 = C139804 * C139826;
    const double C1259 =
        (ae * (2 * C139817 + C139646 * C139826) +
         C139761 * (2 * C139646 * C139897 + C139646 * C139902)) /
        C139335;
    const double C1416 =
        (ae * (2 * C139817 + C139646 * C139826) +
         C139761 * (2 * C139646 * C139934 + C139646 * C139939)) /
        C139335;
    const double C3256 = (C139894 + C139897 * C139650 + ae * C139761 * C139826 +
                          C139761 * (ae * C139826 + C139761 * C139902)) /
                         C139335;
    const double C3364 = (C139931 + C139934 * C139650 + ae * C139761 * C139826 +
                          C139761 * (ae * C139826 + C139761 * C139939)) /
                         C139335;
    const double C10120 =
        (2 * (ae * C139826 + C139761 * C139902) +
         ae * (C139826 + C139840 * C139869) +
         C139761 *
             (C139902 + ae * C139761 * C139840 +
              C139761 * (ae * C139840 +
                         C139761 * (C139900 + std::pow(C139652, 7) * bs[7] *
                                                  C139891 * C139650)))) /
        C139335;
    const double C10286 =
        (2 * (ae * C139826 + C139761 * C139939) +
         ae * (C139826 + C139840 * C139869) +
         C139761 *
             (C139939 + ae * C139761 * C139840 +
              C139761 * (ae * C139840 +
                         C139761 * (C139937 + std::pow(C139652, 7) * bs[7] *
                                                  C139928 * C139650)))) /
        C139335;
    const double C280 = (3 * (C139810 + C139815 * C139650) +
                         C139646 * (2 * C139817 + C139646 * C139826)) /
                        C139330;
    const double C1003 =
        (C139761 * (2 * C139817 + C139646 * C139826)) / C139330;
    const double C1781 = (C139804 * (2 * C139817 + C139646 * C139826) +
                          (2 * C139669 + C139646 * C139697) * ae) /
                         C139330;
    const double C3086 =
        (C139810 + C139815 * C139650 + C139826 * C139869) / C139330;
    const double C3648 =
        (C139804 * C139761 * C139826 + C139761 * C139697 * ae) / C139330;
    const double C9850 =
        (2 * C139761 * C139826 + C139761 * (C139826 + C139840 * C139869)) /
        C139330;
    const double C10701 = (C139804 * (C139826 + C139840 * C139869) +
                           (C139697 + C139733 * C139869) * ae) /
                          C139330;
    const double C139841 = C139646 * C139839;
    const double C140780 = C139761 * C139839;
    const double C140810 = C139804 * C139839;
    const double C139922 = C139646 * C139921;
    const double C140785 = C139761 * C139921;
    const double C140828 = C139804 * C139921;
    const double C140662 = C139761 * C140658;
    const double C140673 = C139761 * C140672;
    const double C140897 = C139804 * C140672;
    const double C139836 = C139821 + C139832;
    const double C139917 = C139913 + C139832;
    const double C140520 = C139832 + C140518;
    const double C140530 = C139832 + C140529;
    const double C140855 = 2 * C139832;
    const double C10119 =
        (2 * (ae * C139817 + C139761 * C140299) +
         ae * (C139817 + C139828 * C139869) +
         C139761 * (C140299 + ae * C139761 * C139828 +
                    C139761 * (C139832 + C139761 * C139646 * C139900))) /
        C139335;
    const double C10285 =
        (2 * (ae * C139817 + C139761 * C140306) +
         ae * (C139817 + C139828 * C139869) +
         C139761 * (C140306 + ae * C139761 * C139828 +
                    C139761 * (C139832 + C139761 * C139646 * C139937))) /
        C139335;
    const double C140382 = C139804 * C140381;
    const double C140431 = C140429 + C139696;
    const double C10368 = C275 * C9849;
    const double C22924 = C141353 * C9849;
    const double C36652 = C14078 * C9849;
    const double C11363 = C275 * C10700;
    const double C18281 = C14079 * C10700;
    const double C23972 = C141353 * C10700;
    const double C35981 = C141365 * C10700;
    const double C37641 = C14078 * C10700;
    const double C98274 = C141365 * C10700;
    const double C98961 = C5967 * C10700;
    const double C140591 = C139804 * C140514;
    const double C25740 = (3 * (C139810 + C139815 * C139869) +
                           C139761 * (2 * C140376 + C139761 * C140514)) /
                          C139330;
    const double C26579 = (C139804 * (2 * C140376 + C139761 * C140514) +
                           (2 * C140268 + C139761 * C140476) * ae) /
                          C139330;
    const double C140661 = C139897 + C140657;
    const double C140670 = C139934 + C140657;
    const double C140900 = 2 * C140657;
    const double C140760 = C140758 + C140475;
    const double C140703 = ae * C140701;
    const double C140840 = C139804 * C140701;
    const double C140960 = 2 * C140701;
    const double C286 =
        (3 * (C139814 + ae * C139817 + C139646 * C139825) +
         ae * (2 * C139817 + C139646 * C139826) +
         C139646 *
             (2 * C139825 + ae * C139826 +
              C139646 * (C139821 + ae * C139646 * C139822 +
                         C139646 * (ae * C139822 +
                                    C139646 * C139719 * C139718 * C139808)))) /
        C139335;
    const double C1009 =
        (C139761 * (C139814 + ae * C139817 + C139646 * C139825)) / C139335;
    const double C3089 =
        (ae * C139810 + C139646 * C139814 + C139825 * C139869) / C139335;
    const double C9852 =
        (2 * C139761 * C139825 + C139761 * (C139825 + C139839 * C139869)) /
        C139335;
    const double C25743 =
        (3 * (C139825 + C139839 * C139869) +
         C139761 * (2 * C139761 * C139839 +
                    C139761 * (C139839 +
                               (ae * C139835 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139808) *
                                   C139869))) /
        C139335;
    const double C50175 =
        (3 * (C139814 + ae * C140804 + C139804 * C140807) +
         ae * (2 * C140804 + C139804 * C140808) +
         C139804 * (2 * C140807 + ae * C140808 +
                    C139804 * (C139821 + C140042 +
                               C139804 * (C139716 + C139804 * C139833)))) /
        C139335;
    const double C25753 = C25748 + C25749;
    const double C26594 = C26586 + C26587;
    const double C35993 = C35976 + C35977;
    const double C366 =
        (3 * (C139852 + ae * C139774 + C139646 * C139857) +
         ae * (2 * C139774 + C139646 * C139783) +
         C139646 * (2 * C139857 + ae * C139783 +
                    C139646 * (C139855 + C139789 +
                               C139646 * (C139786 + C139646 * C139719 *
                                                        C139718 * C139849)))) /
        C139335;
    const double C1876 =
        (C139804 * (C139852 + ae * C139774 + C139646 * C139857)) / C139335;
    const double C5508 =
        (ae * C139767 + C139646 * C139852 + C139857 * C139943) / C139335;
    const double C21309 =
        (2 * C139804 * C139857 + C139804 * (C139857 + C139863 * C139943)) /
        C139335;
    const double C25831 =
        (3 * (C139852 + ae * C140357 + C139761 * C140462) +
         ae * (2 * C140357 + C139761 * C140454) +
         C139761 * (2 * C140462 + ae * C140454 +
                    C139761 * (C139855 + C139978 +
                               C139761 * (C139716 + C139761 * C139861)))) /
        C139335;
    const double C140277 = C139646 * C139879;
    const double C140468 = C139761 * C139879;
    const double C140545 = C139804 * C139879;
    const double C423 =
        (3 * (C139874 + C139879 * C139650) +
         C139646 *
             (2 * C139646 * C139879 +
              C139646 * (C139879 + (C139717 + C139869 * C139718 * C139719) *
                                       C139653 * C139650))) /
        C139335;
    const double C1169 = (2 * ae * (C139767 + C139772 * C139650) +
                          C139761 * (C139874 + C139879 * C139650)) /
                         C139335;
    const double C1947 = (C139804 * (C139874 + C139879 * C139650)) / C139335;
    const double C3791 =
        (2 * ae * C139804 * C139774 + C139761 * C139804 * C139646 * C139879) /
        C139335;
    const double C5562 =
        (C139646 * C139874 + C139646 * C139879 * C139943) / C139335;
    const double C13531 = (2 * ae * (C139767 + C139772 * C139943) +
                           C139761 * (C139874 + C139879 * C139943)) /
                          C139335;
    const double C21403 =
        (2 * C139804 * C139874 + C139804 * (C139874 + C139879 * C139943)) /
        C139335;
    const double C26003 =
        (3 * (C139894 + ae * C140376 + C139761 * C140513) +
         ae * (2 * C140376 + C139761 * C140514) +
         C139761 * (2 * C140513 + ae * C140514 +
                    C139761 * (C139897 + ae * C139761 * C139822 +
                               C139761 * (C139829 + C139761 * C139900)))) /
        C139335;
    const double C29487 =
        (C139894 + ae * C139804 * C139772 + C139804 * C140558 +
         ae * (C140376 + C139804 * (C139804 * C139761 * C139822 + C140475) +
               C139804 * C140471 * ae) +
         C139761 * (ae * (C139815 + C139804 * (C139804 * C139822 + C139691) +
                          C139804 * C139684 * ae) +
                    C139761 * (C139897 + ae * C139804 * C139779 +
                               C139804 * (C139786 + C139804 * C139900)))) /
        C139335;
    const double C1275 = C1268 + C1269;
    const double C2053 = C2046 + C2047;
    const double C14357 = C14348 + C14349;
    const double C583 =
        (3 * (C139910 + ae * C139817 + C139646 * C139915) +
         ae * (2 * C139817 + C139646 * C139826) +
         C139646 * (2 * C139915 + ae * C139826 +
                    C139646 * (C139913 + C139832 +
                               C139646 * (C139829 + C139646 * C139719 *
                                                        C139718 * C139907)))) /
        C139335;
    const double C1346 =
        (C139761 * (C139910 + ae * C139817 + C139646 * C139915)) / C139335;
    const double C3309 =
        (ae * C139810 + C139646 * C139910 + C139915 * C139869) / C139335;
    const double C10199 =
        (2 * C139761 * C139915 + C139761 * (C139915 + C139921 * C139869)) /
        C139335;
    const double C26083 =
        (3 * (C139915 + C139921 * C139869) +
         C139761 * (2 * C139761 * C139921 +
                    C139761 * (C139921 +
                               (ae * C139835 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139907) *
                                   C139869))) /
        C139335;
    const double C50506 =
        (3 * (C139910 + ae * C140804 + C139804 * C140826) +
         ae * (2 * C140804 + C139804 * C140808) +
         C139804 * (2 * C140826 + ae * C140808 +
                    C139804 * (C139913 + C140042 +
                               C139804 * (C139716 + C139804 * C139919)))) /
        C139335;
    const double C26168 =
        (3 * (C139931 + ae * C140376 + C139761 * C140526) +
         ae * (2 * C140376 + C139761 * C140514) +
         C139761 * (2 * C140526 + ae * C140514 +
                    C139761 * (C139934 + ae * C139761 * C139822 +
                               C139761 * (C139829 + C139761 * C139937)))) /
        C139335;
    const double C50589 =
        (3 * (C139931 + ae * C140817 + C139804 * C140832) +
         ae * (2 * C140817 + C139804 * C140819) +
         C139804 * (2 * C140832 + ae * C140819 +
                    C139804 * (C139934 + C140691 +
                               C139804 * (C139786 + C139804 * C139937)))) /
        C139335;
    const double C1432 = C1425 + C1426;
    const double C6525 = C6516 + C6517;
    const double C2210 = C2203 + C2204;
    const double C140310 = C139646 * C139953;
    const double C140757 = C139761 * C139953;
    const double C140838 = C139804 * C139953;
    const double C718 =
        (3 * (C139948 + C139953 * C139650) +
         C139646 *
             (2 * C139646 * C139953 +
              C139646 * (C139953 + (C139717 + C139943 * C139718 * C139719) *
                                       C139653 * C139650))) /
        C139335;
    const double C1503 = (C139761 * (C139948 + C139953 * C139650)) / C139335;
    const double C2281 = (2 * ae * (C139810 + C139815 * C139650) +
                          C139804 * (C139948 + C139953 * C139650)) /
                         C139335;
    const double C3417 =
        (C139646 * C139948 + C139646 * C139953 * C139869) / C139335;
    const double C4075 =
        (2 * ae * C139761 * C139817 + C139804 * C139761 * C139646 * C139953) /
        C139335;
    const double C10361 =
        (2 * C139761 * C139948 + C139761 * (C139948 + C139953 * C139869)) /
        C139335;
    const double C11356 = (2 * ae * (C139810 + C139815 * C139869) +
                           C139804 * (C139948 + C139953 * C139869)) /
                          C139335;
    const double C26244 =
        (3 * (C139948 + C139953 * C139869) +
         C139761 * (2 * C139761 * C139953 +
                    C139761 * (C139953 + C139958 * C139869))) /
        C139335;
    const double C27240 =
        (2 * ae * (2 * C140376 + C139761 * C140514) +
         C139804 * (2 * C139761 * C139953 +
                    C139761 * (C139953 + C139958 * C139869))) /
        C139335;
    const double C55136 = C55123 + C55124;
    const double C39587 = C39575 + C39576;
    const double C47417 = C47412 + C47413;
    const double C52539 = C52522 + C52523;
    const double C3866 = (ae * (C139804 * C139826 + C139700) +
                          C139761 * (ae * C139783 + C139804 * C139902)) /
                         C139335;
    const double C216 = C188 * C112;
    const double C303 = C275 * C112;
    const double C436 = C418 * C112;
    const double C731 = C713 * C112;
    const double C922 = C188 * C820;
    const double C1016 = C275 * C820;
    const double C1174 = C418 * C820;
    const double C1508 = C713 * C820;
    const double C5989 = C5967 * C820;
    const double C6245 = C6229 * C820;
    const double C1700 = C188 * C1598;
    const double C1794 = C275 * C1598;
    const double C1952 = C418 * C1598;
    const double C2286 = C713 * C1598;
    const double C14101 = C14079 * C1598;
    const double C14616 = C14600 * C1598;
    const double C6848 = C5967 * C2962;
    const double C6976 = C275 * C2962;
    const double C7228 = C6229 * C2962;
    const double C7697 = C713 * C2962;
    const double C7926 = C5967 * C3492;
    const double C8046 = C275 * C3492;
    const double C8252 = C6229 * C3492;
    const double C8698 = C713 * C3492;
    const double C14842 = C188 * C3492;
    const double C14954 = C14079 * C3492;
    const double C15170 = C418 * C3492;
    const double C15598 = C14600 * C3492;
    const double C15865 = C188 * C5327;
    const double C15987 = C14079 * C5327;
    const double C16243 = C418 * C5327;
    const double C16699 = C14600 * C5327;
    const double C11042 =
        (ae * C139774 + C139804 * C140299 +
         ae * (C139804 * C139761 * C139828 + C140281) +
         C139761 * (ae * (C139804 * C139828 + C139696) +
                    C139761 * (C139789 + C139804 * C139646 * C139900))) /
        C139335;
    const double C43789 = C188 * C13206;
    const double C44105 = C418 * C13206;
    const double C52526 = C5967 * C13206;
    const double C52872 = C6229 * C13206;
    const double C81771 = C14079 * C13206;
    const double C82637 = C14600 * C13206;
    const double C32299 = C275 * C25568;
    const double C32631 = C713 * C25568;
    const double C32863 = C275 * C26351;
    const double C33315 = C713 * C26351;
    const double C38756 = C14079 * C26351;
    const double C39229 = C14600 * C26351;
    const double C39571 = C14079 * C29087;
    const double C40250 = C14600 * C29087;
    const double C55127 = C5967 * C29087;
    const double C55473 = C6229 * C29087;
    const double C63140 = C188 * C49989;
    const double C63310 = C418 * C49989;
    const double C16368 = C16362 + C16363;
    const double C7595 = C7589 + C7590;
    const double C140609 = C140602 + C140607;
    const double C57767 = (3 * (C140357 + C139973 * C139943) +
                           C139804 * (2 * C140878 + C139804 * C140884)) /
                          C139330;
    const double C140936 = C140929 + C140934;
    const double C139801 = C139791 + C139799;
    const double C50083 = (3 * (C139774 + C139785 * C139943) +
                           C139804 * (2 * C140821 + C139804 * C140823)) /
                          C139330;
    const double C140942 = C140940 + C140941;
    const double C139844 = C139834 + C139842;
    const double C140387 = C139804 * C140386;
    const double C140595 = C139804 * C140521;
    const double C25741 = (3 * (C139817 + C139828 * C139869) +
                           C139761 * (2 * C140381 + C139761 * C140521)) /
                          C139330;
    const double C140665 = C140659 + C140663;
    const double C55356 = C141219 * C42371;
    const double C63252 = C141219 * C50251;
    const double C21828 = C139356 * C115;
    const double C23059 = C139356 * C2962;
    const double C23055 = C139356 * C910;
    const double C23051 = C139356 * C821;
    const double C23043 = C139356 * C2961;
    const double C23039 = C139356 * C911;
    const double C23035 = C139356 * C822;
    const double C23418 = C139356 * C1004;
    const double C23414 = C139356 * C3085;
    const double C23410 = C139356 * C1005;
    const double C25840 = C139356 * C9668;
    const double C26087 = C139356 * C9849;
    const double C26710 = C139356 * C3491;
    const double C26702 = C139356 * C10471;
    const double C27035 = C139356 * C3647;
    const double C27031 = C139356 * C10700;
    const double C45046 = C139356 * C5327;
    const double C45042 = C139356 * C1688;
    const double C45038 = C139356 * C1599;
    const double C45034 = C139356 * C5392;
    const double C45030 = C139356 * C5326;
    const double C45026 = C139356 * C1689;
    const double C45022 = C139356 * C1600;
    const double C45394 = C139356 * C1782;
    const double C45386 = C139356 * C1783;
    const double C47621 = C139356 * C13206;
    const double C50260 = C139356 * C21036;
    const double C50256 = C139356 * C21137;
    const double C115909 = C139356 * C3492;
    const double C107 =
        (C139356 / C139336 - (0 * be) / C139330) / C139336 - (0 * be) / C139330;
    const double C63614 = C139356 / C139336 - (0 * be) / C139330;
    const double C139358 = C139355 / C139330;
    const double C7110 = C5873 * C820;
    const double C7104 = C5873 * C910;
    const double C7098 = C5873 * C821;
    const double C7473 = C5873 * C1004;
    const double C9950 = C5873 * C2962;
    const double C10825 = C5873 * C3492;
    const double C16121 = C5873 * C1598;
    const double C16115 = C5873 * C1688;
    const double C16109 = C5873 * C1599;
    const double C16472 = C5873 * C1782;
    const double C21318 = C5873 * C5327;
    const double C29784 = C29775 * C115;
    const double C29780 = C29775 * C9670;
    const double C29779 = C29775 * C2964;
    const double C29778 = C29775 * C828;
    const double C29777 = C29775 * C114;
    const double C30543 = C29775 * C9668;
    const double C30539 = C29775 * C2961;
    const double C30537 = C29775 * C911;
    const double C30535 = C29775 * C822;
    const double C30531 = C29775 * C9667;
    const double C30527 = C29775 * C2960;
    const double C30525 = C29775 * C912;
    const double C30523 = C29775 * C823;
    const double C30781 = C29775 * C9849;
    const double C30778 = C29775 * C3085;
    const double C30775 = C29775 * C1005;
    const double C30772 = C29775 * C9848;
    const double C30769 = C29775 * C3084;
    const double C30766 = C29775 * C1006;
    const double C30996 = C29775 * C1606;
    const double C30995 = C29775 * C3494;
    const double C30994 = C29775 * C10473;
    const double C32358 = C29775 * C25568;
    const double C32950 = C29775 * C3490;
    const double C32946 = C29775 * C10470;
    const double C32942 = C29775 * C26351;
    const double C33172 = C29775 * C3646;
    const double C33169 = C29775 * C10699;
    const double C34563 = C29775 * C13208;
    const double C34562 = C29775 * C5329;
    const double C36100 = C29775 * C10471;
    const double C36096 = C29775 * C3491;
    const double C36436 = C29775 * C10700;
    const double C36431 = C29775 * C3647;
    const double C37105 = C29775 * C1689;
    const double C37103 = C29775 * C1600;
    const double C37097 = C29775 * C1690;
    const double C37095 = C29775 * C1601;
    const double C37430 = C29775 * C1783;
    const double C37428 = C29775 * C1784;
    const double C39695 = C29775 * C13205;
    const double C39691 = C29775 * C29087;
    const double C42119 = C29775 * C42111;
    const double C42118 = C29775 * C21038;
    const double C42380 = C29775 * C5325;
    const double C42378 = C29775 * C5391;
    const double C51766 = C29775 * C13206;
    const double C52754 = C29775 * C5392;
    const double C52752 = C29775 * C5326;
    const double C55357 = C29775 * C42109;
    const double C58026 = C29775 * C21035;
    const double C58024 = C29775 * C21136;
    const double C59807 = C29775 * C21137;
    const double C59805 = C29775 * C21036;
    const double C63253 = C29775 * C49989;
    const double C71453 = C71450 * C115;
    const double C72678 = C71450 * C2962;
    const double C72674 = C71450 * C910;
    const double C72670 = C71450 * C821;
    const double C72662 = C71450 * C2961;
    const double C72658 = C71450 * C911;
    const double C72654 = C71450 * C822;
    const double C73034 = C71450 * C1004;
    const double C73030 = C71450 * C3085;
    const double C73026 = C71450 * C1005;
    const double C75415 = C71450 * C9668;
    const double C75653 = C71450 * C9849;
    const double C76243 = C71450 * C3491;
    const double C76235 = C71450 * C10471;
    const double C76559 = C71450 * C3647;
    const double C76555 = C71450 * C10700;
    const double C80639 = C71450 * C3492;
    const double C81923 = C71450 * C1688;
    const double C81919 = C71450 * C1599;
    const double C81915 = C71450 * C1689;
    const double C81911 = C71450 * C1600;
    const double C82357 = C71450 * C1782;
    const double C82353 = C71450 * C1783;
    const double C85253 = C71450 * C13206;
    const double C88703 = C71450 * C5326;
    const double C88699 = C71450 * C5392;
    const double C109003 = C71450 * C5327;
    const double C114096 = C71450 * C21036;
    const double C114092 = C71450 * C21137;
    const double C141506 = C141464 - C141491;
    const double C141492 = C141466 - C141467;
    const double C72281 = C71442 * C833;
    const double C72665 = C71442 * C3142;
    const double C72661 = C71442 * C2964;
    const double C72657 = C71442 * C1100;
    const double C72653 = C71442 * C828;
    const double C73033 = C71442 * C1347;
    const double C73029 = C71442 * C3308;
    const double C73025 = C71442 * C1348;
    const double C75418 = C71442 * C9670;
    const double C75414 = C71442 * C9940;
    const double C75656 = C71442 * C10198;
    const double C76246 = C71442 * C3494;
    const double C76242 = C71442 * C3720;
    const double C76238 = C71442 * C10473;
    const double C76234 = C71442 * C10815;
    const double C76562 = C71442 * C3934;
    const double C76558 = C71442 * C11145;
    const double C81456 = C71442 * C1611;
    const double C81922 = C71442 * C1877;
    const double C81914 = C71442 * C1878;
    const double C81910 = C71442 * C1606;
    const double C82352 = C71442 * C2126;
    const double C85256 = C71442 * C13208;
    const double C85252 = C71442 * C13454;
    const double C85671 = C71442 * C13691;
    const double C88706 = C71442 * C5329;
    const double C88702 = C71442 * C5507;
    const double C89022 = C71442 * C5673;
    const double C114099 = C71442 * C21038;
    const double C114095 = C71442 * C21308;
    const double C114336 = C71442 * C21568;
    const double C139457 = C139456 / C139330;
    const double C21942 = C21919 * C821;
    const double C21924 = C21919 * C822;
    const double C22199 = C21919 * C910;
    const double C22190 = C21919 * C911;
    const double C22184 = C21919 * C912;
    const double C22467 = C21919 * C1004;
    const double C22461 = C21919 * C1005;
    const double C22805 = C21919 * C2961;
    const double C23532 = C21919 * C3085;
    const double C23861 = C21919 * C3491;
    const double C24500 = C21919 * C3647;
    const double C36889 = C21919 * C3494;
    const double C36883 = C21919 * C3490;
    const double C37534 = C21919 * C3646;
    const double C39459 = C21919 * C10473;
    const double C39453 = C21919 * C10470;
    const double C40145 = C21919 * C10699;
    const double C42210 = C21919 * C13205;
    const double C42204 = C21919 * C13208;
    const double C21940 = C21920 * C2962;
    const double C21926 = C21920 * C2961;
    const double C22463 = C21920 * C3085;
    const double C22803 = C21920 * C9668;
    const double C23530 = C21920 * C9849;
    const double C23859 = C21920 * C10471;
    const double C24498 = C21920 * C10700;
    const double C36891 = C21920 * C10473;
    const double C36885 = C21920 * C10470;
    const double C37536 = C21920 * C10699;
    const double C39455 = C21920 * C26351;
    const double C42208 = C21920 * C29087;
    const double C63730 = C63708 * C820;
    const double C63720 = C63708 * C821;
    const double C63712 = C63708 * C822;
    const double C63984 = C63708 * C910;
    const double C63978 = C63708 * C911;
    const double C63973 = C63708 * C912;
    const double C64257 = C63708 * C1004;
    const double C64252 = C63708 * C1005;
    const double C64597 = C63708 * C2961;
    const double C64589 = C63708 * C2962;
    const double C65303 = C63708 * C3085;
    const double C65633 = C63708 * C3491;
    const double C65625 = C63708 * C3492;
    const double C66273 = C63708 * C3647;
    const double C80365 = C63708 * C10471;
    const double C81187 = C63708 * C10700;
    const double C81623 = C63708 * C13206;
    const double C81615 = C63708 * C3494;
    const double C81611 = C63708 * C3490;
    const double C82495 = C63708 * C3646;
    const double C84981 = C63708 * C10473;
    const double C84977 = C63708 * C10470;
    const double C85807 = C63708 * C10699;
    const double C88495 = C63708 * C13205;
    const double C88491 = C63708 * C13208;
    const double C136072 = C63708 * C29087;
    const double C138763 = C63708 * C42109;
    const double C138759 = C63708 * C42111;
    const double C29841 =
        (C139486 / C139336 - (0 * be) / C139330) / C139336 - (0 * be) / C139330;
    const double C71545 = C139486 / C139336 - (0 * be) / C139330;
    const double C6258 = C6248 + C6249;
    const double C6255 = C6239 + C6240;
    const double C6253 = C6233 + C6234;
    const double C7247 = C7237 + C7238;
    const double C7245 = C7231 + C7232;
    const double C8271 = C8261 + C8262;
    const double C8269 = C8255 + C8256;
    const double C52878 = C52864 + C13535;
    const double C52876 = C52860 + C8265;
    const double C58118 = C58112 + C52869;
    const double C6256 = C6242 + C6243;
    const double C6254 = C6236 + C6237;
    const double C642 = C218 * C275;
    const double C14511 = C218 * C14078;
    const double C658 = C654 * C141353;
    const double C14512 = C654 * C141479;
    const double C43459 = C654 * C42873;
    const double C15884 = C15878 * C5863;
    const double C44785 = C15878 * C141462;
    const double C59652 = C15878 * C141219;
    const double C108772 = C15878 * C71442;
    const double C59651 = C15877 * C29775;
    const double C444 = C440 + C428;
    const double C16253 = C16250 + C1961;
    const double C141507 = C141480 - C141501;
    const double C6004 = C5991 + C5992;
    const double C5997 = C5977 + C5978;
    const double C5995 = C5973 + C5974;
    const double C5993 = C5969 + C5970;
    const double C6527 = C6520 + C6521;
    const double C6524 = C6514 + C6515;
    const double C6522 = C6509 + C6510;
    const double C6867 = C6858 + C6859;
    const double C6863 = C6850 + C6851;
    const double C7596 = C7591 + C7592;
    const double C7594 = C7587 + C7588;
    const double C7945 = C7936 + C7937;
    const double C7941 = C7928 + C7929;
    const double C8599 = C8594 + C8595;
    const double C8597 = C8590 + C8591;
    const double C52538 = C52520 + C52521;
    const double C52536 = C52516 + C52517;
    const double C52534 = C52512 + C52513;
    const double C52532 = C52508 + C52509;
    const double C53203 = C53191 + C53192;
    const double C55139 = C55129 + C55130;
    const double C55135 = C55121 + C55122;
    const double C57868 = C57861 + C57862;
    const double C57866 = C57857 + C57858;
    const double C141502 = C141483 - C141484;
    const double C63733 = C63607 * C192;
    const double C63729 = C63607 * C198;
    const double C63723 = C63607 * C197;
    const double C63719 = C63607 * C191;
    const double C63715 = C63607 * C196;
    const double C63711 = C63607 * C190;
    const double C63982 = C63607 * C421;
    const double C63976 = C63607 * C420;
    const double C64262 = C63607 * C638;
    const double C64256 = C63607 * C637;
    const double C64251 = C63607 * C636;
    const double C64600 = C63607 * C911;
    const double C64592 = C63607 * C910;
    const double C65306 = C63607 * C1418;
    const double C65302 = C63607 * C1417;
    const double C65636 = C63607 * C1689;
    const double C65632 = C63607 * C1694;
    const double C65628 = C63607 * C1688;
    const double C66276 = C63607 * C2196;
    const double C66272 = C63607 * C2195;
    const double C81626 = C63607 * C5392;
    const double C81614 = C63607 * C1695;
    const double C81610 = C63607 * C1690;
    const double C82064 = C63607 * C1949;
    const double C82501 = C63607 * C5728;
    const double C82494 = C63607 * C2197;
    const double C84980 = C63607 * C3576;
    const double C88498 = C63607 * C5391;
    const double C88494 = C63607 * C5395;
    const double C89126 = C63607 * C5727;
    const double C136075 = C63607 * C13297;
    const double C138766 = C63607 * C21136;
    const double C138762 = C63607 * C21139;
    const double C139243 = C63607 * C21654;
    const double C21918 =
        ((-(0 * be) / C139330) / C139336 -
         ((0 - (C139394 * C139447) / C139330) * be) / C139330) /
            C139336 -
        ((C139394 *
              ((-C139447 / C139330) / C139336 -
               ((C141327 - (C139394 * C139448) / C139330) * be) / C139330) +
          C63607) *
         be) /
            C139330 +
        (-C139448 / C139330) / C139336 - (0 * be) / C139330;
    const double C139527 = C139526 / C139330;
    const double C43054 = C43031 * C1599;
    const double C43036 = C43031 * C1600;
    const double C43300 = C43031 * C1688;
    const double C43294 = C43031 * C1689;
    const double C43563 = C43031 * C1782;
    const double C43554 = C43031 * C1783;
    const double C43548 = C43031 * C1784;
    const double C43899 = C43031 * C3491;
    const double C44530 = C43031 * C3646;
    const double C44524 = C43031 * C3647;
    const double C44912 = C43031 * C5326;
    const double C45279 = C43031 * C5392;
    const double C47191 = C43031 * C10700;
    const double C47188 = C43031 * C10699;
    const double C51658 = C43031 * C3494;
    const double C51652 = C43031 * C3490;
    const double C54422 = C43031 * C10470;
    const double C54416 = C43031 * C10473;
    const double C55247 = C43031 * C13205;
    const double C55241 = C43031 * C13208;
    const double C43052 = C43032 * C5327;
    const double C43038 = C43032 * C5326;
    const double C43296 = C43032 * C5392;
    const double C43897 = C43032 * C13206;
    const double C44910 = C43032 * C21036;
    const double C45277 = C43032 * C21137;
    const double C51660 = C43032 * C13208;
    const double C51654 = C43032 * C13205;
    const double C54420 = C43032 * C29087;
    const double C55245 = C43032 * C42109;
    const double C55239 = C43032 * C42111;
    const double C89478 = C89456 * C1598;
    const double C89468 = C89456 * C1599;
    const double C89460 = C89456 * C1600;
    const double C89725 = C89456 * C1688;
    const double C89720 = C89456 * C1689;
    const double C89991 = C89456 * C1782;
    const double C89985 = C89456 * C1783;
    const double C89980 = C89456 * C1784;
    const double C90327 = C89456 * C3491;
    const double C90319 = C89456 * C3492;
    const double C90959 = C89456 * C3646;
    const double C90954 = C89456 * C3647;
    const double C91326 = C89456 * C5326;
    const double C91318 = C89456 * C5327;
    const double C91678 = C89456 * C5392;
    const double C93585 = C89456 * C10700;
    const double C93583 = C89456 * C10699;
    const double C98273 = C89456 * C10471;
    const double C98265 = C89456 * C3494;
    const double C98261 = C89456 * C3490;
    const double C99517 = C89456 * C13206;
    const double C101793 = C89456 * C10470;
    const double C101789 = C89456 * C10473;
    const double C102805 = C89456 * C13205;
    const double C102801 = C89456 * C13208;
    const double C127818 = C89456 * C26351;
    const double C128623 = C89456 * C29087;
    const double C58593 =
        (C139552 / C139336 - (0 * be) / C139330) / C139336 - (0 * be) / C139330;
    const double C107067 = C139552 / C139336 - (0 * be) / C139330;
    const double C14629 = C14619 + C14620;
    const double C14626 = C14610 + C14611;
    const double C14624 = C14604 + C14605;
    const double C15617 = C15607 + C15608;
    const double C15615 = C15601 + C15602;
    const double C16718 = C16708 + C16709;
    const double C16716 = C16702 + C16703;
    const double C36656 = C36642 + C18278;
    const double C36654 = C36638 + C15611;
    const double C39236 = C39231 + C36647;
    const double C40263 = C40256 + C19192;
    const double C40261 = C40252 + C37640;
    const double C14627 = C14613 + C14614;
    const double C14625 = C14607 + C14608;
    const double C36657 = C36644 + C18279;
    const double C36655 = C36640 + C15610;
    const double C508 = C305 * C188;
    const double C6346 = C305 * C5966;
    const double C524 = C520 * C141327;
    const double C6347 = C520 * C141478;
    const double C22300 = C520 * C21819;
    const double C64088 = C520 * C63607;
    const double C6995 = C6989 * C5863;
    const double C22914 = C6989 * C141462;
    const double C30446 = C6989 * C141219;
    const double C72539 = C6989 * C71442;
    const double C30445 = C6988 * C29775;
    const double C739 = C735 + C723;
    const double C7706 = C7703 + C1517;
    const double C141508 = C141485 - C141504;
    const double C14116 = C14103 + C14104;
    const double C14109 = C14089 + C14090;
    const double C14107 = C14085 + C14086;
    const double C14105 = C14081 + C14082;
    const double C14359 = C14352 + C14353;
    const double C14356 = C14346 + C14347;
    const double C14354 = C14341 + C14342;
    const double C14973 = C14964 + C14965;
    const double C14969 = C14956 + C14957;
    const double C15289 = C15284 + C15285;
    const double C15287 = C15280 + C15281;
    const double C16006 = C15997 + C15998;
    const double C16002 = C15989 + C15990;
    const double C16369 = C16364 + C16365;
    const double C16367 = C16360 + C16361;
    const double C35992 = C35974 + C35975;
    const double C35990 = C35970 + C35971;
    const double C35988 = C35966 + C35967;
    const double C35986 = C35962 + C35963;
    const double C36316 = C36304 + C36305;
    const double C38765 = C38758 + C38759;
    const double C38763 = C38754 + C38755;
    const double C39590 = C39581 + C39582;
    const double C39588 = C39577 + C39578;
    const double C39586 = C39573 + C39574;
    const double C39584 = C39569 + C39570;
    const double C141505 = C141488 - C141489;
    const double C89481 = C89302 * C279;
    const double C89477 = C89302 * C285;
    const double C89471 = C89302 * C284;
    const double C89467 = C89302 * C278;
    const double C89463 = C89302 * C283;
    const double C89459 = C89302 * C277;
    const double C89730 = C89302 * C504;
    const double C89724 = C89302 * C503;
    const double C89719 = C89302 * C502;
    const double C89889 = C654 * C89302;
    const double C89989 = C89302 * C716;
    const double C89983 = C89302 * C715;
    const double C90330 = C89302 * C1005;
    const double C90326 = C89302 * C1010;
    const double C90322 = C89302 * C1004;
    const double C90640 = C89302 * C1261;
    const double C90636 = C89302 * C1260;
    const double C91329 = C89302 * C1783;
    const double C91321 = C89302 * C1782;
    const double C91681 = C89302 * C2039;
    const double C91677 = C89302 * C2038;
    const double C98276 = C89302 * C3085;
    const double C98264 = C89302 * C1011;
    const double C98260 = C89302 * C1006;
    const double C98695 = C89302 * C3255;
    const double C98688 = C89302 * C1262;
    const double C99098 = C89302 * C1505;
    const double C99520 = C89302 * C3647;
    const double C101796 = C89302 * C3084;
    const double C101792 = C89302 * C3088;
    const double C102100 = C89302 * C3254;
    const double C102808 = C89302 * C3646;
    const double C102804 = C89302 * C3650;
    const double C103206 = C89302 * C3864;
    const double C127821 = C89302 * C9848;
    const double C127817 = C89302 * C9851;
    const double C128058 = C89302 * C10118;
    const double C128626 = C89302 * C10699;
    const double C128622 = C89302 * C10702;
    const double C43030 =
        ((-(0 * be) / C139330) / C139336 -
         ((0 - (C139397 * C139517) / C139330) * be) / C139330) /
            C139336 -
        ((C139397 *
              ((-C139517 / C139330) / C139336 -
               ((C141353 - (C139397 * C139518) / C139330) * be) / C139330) +
          C89302) *
         be) /
            C139330 +
        (-C139518 / C139330) / C139336 - (0 * be) / C139330;
    const double C122 =
        ((C139649 + C139650 * C139651 * C139655) * C139653 + C139661 + C139661 +
         C139646 *
             (2 * ae * C139658 +
              C139646 *
                  (C139651 * C139655 + C139650 * bs[4] * std::pow(C139644, 4)) *
                  C139653)) /
        C139335;
    const double C916 =
        (C139661 + C139761 * (ae * C139767 + C139646 * C139771)) / C139335;
    const double C1099 =
        (C139661 + C139761 * (ae * C139767 + C139646 * C139852)) / C139335;
    const double C1788 =
        (C139661 + C139804 * (ae * C139810 + C139646 * C139814)) / C139335;
    const double C2125 =
        (C139661 + C139804 * (ae * C139810 + C139646 * C139910)) / C139335;
    const double C208 = C188 * C116;
    const double C295 = C275 * C116;
    const double C5877 = C5873 * C116;
    const double C5981 = C5966 * C116;
    const double C14093 = C14078 * C116;
    const double C21837 = C139356 * C116;
    const double C29785 = C29775 * C116;
    const double C71462 = C71450 * C116;
    const double C928 = C188 * C827;
    const double C1022 = C275 * C827;
    const double C5975 = C5967 * C827;
    const double C6854 = C5966 * C827;
    const double C7107 = C5863 * C827;
    const double C7097 = C5864 * C827;
    const double C14960 = C14078 * C827;
    const double C21830 = C139356 * C827;
    const double C21930 = C21919 * C827;
    const double C23050 = C141462 * C827;
    const double C23036 = C141224 * C827;
    const double C29783 = C29775 * C827;
    const double C30536 = C141219 * C827;
    const double C63716 = C63708 * C827;
    const double C71455 = C71450 * C827;
    const double C72669 = C71442 * C827;
    const double C72655 = C141224 * C827;
    const double C1706 = C188 * C1605;
    const double C1800 = C275 * C1605;
    const double C7932 = C5966 * C1605;
    const double C14087 = C14079 * C1605;
    const double C15993 = C14078 * C1605;
    const double C16118 = C5863 * C1605;
    const double C16108 = C5864 * C1605;
    const double C23747 = C139356 * C1605;
    const double C30997 = C29775 * C1605;
    const double C37104 = C141219 * C1605;
    const double C43042 = C43031 * C1605;
    const double C45037 = C141462 * C1605;
    const double C45023 = C141224 * C1605;
    const double C73358 = C71450 * C1605;
    const double C81918 = C71442 * C1605;
    const double C81912 = C141224 * C1605;
    const double C89464 = C89456 * C1605;
    const double C9865 = C9863 * C5863;
    const double C22918 = C9863 * C141462;
    const double C30448 = C9863 * C141219;
    const double C72543 = C9863 * C71442;
    const double C10716 = C10714 * C5863;
    const double C26592 = C10714 * C141462;
    const double C32867 = C10714 * C141219;
    const double C76131 = C10714 * C71442;
    const double C18491 = C18489 * C5863;
    const double C47407 = C18489 * C141462;
    const double C61342 = C18489 * C141219;
    const double C111307 = C18489 * C71442;
    const double C21153 = C21151 * C5863;
    const double C44789 = C21151 * C141462;
    const double C59654 = C21151 * C141219;
    const double C108776 = C21151 * C71442;
    const double C140123 = ae * C140122;
    const double C3027 =
        (C139646 * C139767 + C139761 * C140122 + C139761 * C139669 * ae) /
        C139330;
    const double C3573 = (C139804 * C140122) / C139330;
    const double C140241 = ae * C140240;
    const double C5450 =
        (C139646 * C139810 + C139804 * C140240 + C139804 * C139669 * ae) /
        C139330;
    const double C8384 = C141353 * C3865;
    const double C15283 = C141365 * C3865;
    const double C44211 = C42874 * C3865;
    const double C82218 = C141479 * C3865;
    const double C90638 = C141365 * C3865;
    const double C99920 = C89302 * C3865;
    const double C6993 = C6980 + C6981;
    const double C7705 = C7700 + C3422;
    const double C35994 = C35978 + C35979;
    const double C36658 = C36648 + C18280;
    const double C8055 = C8050 + C8051;
    const double C8705 = C8701 + C4080;
    const double C14972 = C14962 + C14963;
    const double C15616 = C15604 + C15605;
    const double C81778 = C81773 + C81774;
    const double C82642 = C82639 + C19194;
    const double C15882 = C15869 + C15870;
    const double C16252 = C16245 + C5567;
    const double C52540 = C52524 + C52525;
    const double C52880 = C52870 + C13537;
    const double C3577 = (C139804 * (C139678 + C139761 * C139782)) / C139335;
    const double C139679 = C139658 + C139677;
    const double C139969 = ae * C139968;
    const double C3495 = (C139804 * C139968) / C139330;
    const double C140033 = ae * C140032;
    const double C6852 = C5967 * C2965;
    const double C6978 = C275 * C2965;
    const double C9953 = C5864 * C2965;
    const double C21832 = C139356 * C2965;
    const double C21932 = C21920 * C2965;
    const double C22799 = C21919 * C2965;
    const double C23058 = C141462 * C2965;
    const double C23044 = C141224 * C2965;
    const double C29782 = C29775 * C2965;
    const double C30540 = C141219 * C2965;
    const double C35982 = C14078 * C2965;
    const double C64593 = C63708 * C2965;
    const double C71457 = C71450 * C2965;
    const double C72677 = C71442 * C2965;
    const double C72663 = C141224 * C2965;
    const double C15867 = C188 * C5330;
    const double C15991 = C14079 * C5330;
    const double C21321 = C5864 * C5330;
    const double C29095 = C139356 * C5330;
    const double C36774 = C29775 * C5330;
    const double C43044 = C43032 * C5330;
    const double C44906 = C43031 * C5330;
    const double C45045 = C141462 * C5330;
    const double C45031 = C141224 * C5330;
    const double C52528 = C5966 * C5330;
    const double C52753 = C141219 * C5330;
    const double C78602 = C71450 * C5330;
    const double C88704 = C141224 * C5330;
    const double C91322 = C89456 * C5330;
    const double C109002 = C71442 * C5330;
    const double C140273 = C139767 + C140271;
    const double C140328 = ae * C140327;
    const double C26925 =
        (2 * (C140424 + C139761 * C140558) +
         ae * (C139804 * C140514 + C140478) +
         C139761 * (C140558 + ae * (C139804 * C139761 * C139822 + C140475) +
                    C139761 * (ae * (C139804 * C139822 + C139691) +
                               C139761 * (C139786 + C139804 * C139900)))) /
        C139335;
    const double C140425 = C139810 + C140423;
    const double C6720 = C5863 * C832;
    const double C6713 = C5864 * C832;
    const double C22666 = C141462 * C832;
    const double C22658 = C141224 * C832;
    const double C30283 = C141219 * C832;
    const double C72291 = C71442 * C832;
    const double C72283 = C141224 * C832;
    const double C15731 = C5863 * C1610;
    const double C15727 = C5864 * C1610;
    const double C36773 = C141219 * C1610;
    const double C44653 = C141462 * C1610;
    const double C44645 = C141224 * C1610;
    const double C81460 = C71442 * C1610;
    const double C81458 = C141224 * C1610;
    const double C9682 = C5863 * C2968;
    const double C22660 = C141462 * C2968;
    const double C30278 = C141219 * C2968;
    const double C72285 = C71442 * C2968;
    const double C10485 = C5863 * C3498;
    const double C26365 = C141462 * C3498;
    const double C32711 = C141219 * C3498;
    const double C75914 = C71442 * C3498;
    const double C21050 = C5863 * C5333;
    const double C42117 = C141219 * C5333;
    const double C44647 = C141462 * C5333;
    const double C88382 = C71442 * C5333;
    const double C435 = C141327 * C422;
    const double C6250 = C141478 * C422;
    const double C63991 = C63607 * C422;
    const double C1182 = C141327 * C1170;
    const double C6238 = C141341 * C1170;
    const double C7239 = C141478 * C1170;
    const double C22191 = C21820 * C1170;
    const double C23187 = C21819 * C1170;
    const double C63979 = C141341 * C1170;
    const double C64962 = C63607 * C1170;
    const double C1960 = C141327 * C1948;
    const double C8263 = C141478 * C1948;
    const double C24179 = C21819 * C1948;
    const double C65950 = C63607 * C1948;
    const double C18787 = C141327 * C3790;
    const double C37220 = C21820 * C3790;
    const double C39806 = C21819 * C3790;
    const double C52863 = C141341 * C3790;
    const double C55468 = C141478 * C3790;
    const double C82066 = C141341 * C3790;
    const double C85394 = C63607 * C3790;
    const double C21410 = C141327 * C5561;
    const double C42467 = C21819 * C5561;
    const double C52865 = C141478 * C5561;
    const double C88812 = C63607 * C5561;
    const double C730 = C141353 * C717;
    const double C14621 = C141479 * C717;
    const double C89998 = C89302 * C717;
    const double C1516 = C141353 * C1504;
    const double C15609 = C141479 * C1504;
    const double C44528 = C42873 * C1504;
    const double C90958 = C89302 * C1504;
    const double C2294 = C141353 * C2282;
    const double C14609 = C141365 * C2282;
    const double C16710 = C141479 * C2282;
    const double C43555 = C42874 * C2282;
    const double C45621 = C42873 * C2282;
    const double C89986 = C141365 * C2282;
    const double C92017 = C89302 * C2282;
    const double C10366 = C141353 * C3416;
    const double C36643 = C141479 * C3416;
    const double C54900 = C42873 * C3416;
    const double C102400 = C89302 * C3416;
    const double C11361 = C141353 * C4074;
    const double C36641 = C141365 * C4074;
    const double C40257 = C141479 * C4074;
    const double C52293 = C42874 * C4074;
    const double C55916 = C42873 * C4074;
    const double C99100 = C141365 * C4074;
    const double C103602 = C89302 * C4074;
    const double C140379 = ae * C140378;
    const double C13374 =
        (C139761 * C139810 + C139804 * C140378 + C139804 * C140268 * ae) /
        C139330;
    const double C26929 = C141353 * C11041;
    const double C36311 = C141365 * C11041;
    const double C39924 = C141479 * C11041;
    const double C54661 = C42874 * C11041;
    const double C102098 = C141365 * C11041;
    const double C128952 = C89302 * C11041;
    const double C3196 =
        ((C139649 + C139869 * C139651 * C139655) * C139653 + C140119 + C140119 +
         C139761 * (2 * ae * C139767 + C139761 * C139874)) /
        C139335;
    const double C4004 =
        (C140119 + C139804 * (ae * C139810 + C139761 * C139931)) / C139335;
    const double C3201 = C188 * C3026;
    const double C7240 = C5967 * C3026;
    const double C10039 = C5966 * C3026;
    const double C10122 = C275 * C3026;
    const double C22185 = C21920 * C3026;
    const double C23189 = C21919 * C3026;
    const double C30529 = C29775 * C3026;
    const double C36308 = C14078 * C3026;
    const double C64963 = C63708 * C3026;
    const double C3795 = C188 * C3572;
    const double C8264 = C5967 * C3572;
    const double C10938 = C5966 * C3572;
    const double C11045 = C275 * C3572;
    const double C18481 = C141327 * C3572;
    const double C24181 = C21919 * C3572;
    const double C32948 = C29775 * C3572;
    const double C36306 = C14079 * C3572;
    const double C36884 = C21820 * C3572;
    const double C39452 = C21819 * C3572;
    const double C39927 = C14078 * C3572;
    const double C51974 = C43031 * C3572;
    const double C52511 = C141341 * C3572;
    const double C55118 = C141478 * C3572;
    const double C65951 = C63708 * C3572;
    const double C81612 = C141341 * C3572;
    const double C84976 = C63607 * C3572;
    const double C98689 = C89456 * C3572;
    const double C13536 = C5967 * C13294;
    const double C18790 = C188 * C13294;
    const double C29409 = C21919 * C13294;
    const double C39693 = C29775 * C13294;
    const double C39925 = C14079 * C13294;
    const double C42211 = C21820 * C13294;
    const double C47411 = C141327 * C13294;
    const double C51871 = C5966 * C13294;
    const double C51976 = C43032 * C13294;
    const double C52519 = C141341 * C13294;
    const double C55126 = C141478 * C13294;
    const double C55589 = C43031 * C13294;
    const double C71068 = C63708 * C13294;
    const double C88496 = C141341 * C13294;
    const double C103203 = C89456 * C13294;
    const double C136071 = C63607 * C13294;
    const double C645 = C220 * C275;
    const double C14515 = C220 * C14078;
    const double C445 = C441 + C431;
    const double C525 = C521 * C141327;
    const double C6351 = C521 * C141478;
    const double C22309 = C521 * C21819;
    const double C64092 = C521 * C63607;
    const double C648 = C222 * C275;
    const double C14522 = C222 * C14078;
    const double C446 = C442 + C434;
    const double C526 = C522 * C141327;
    const double C6356 = C522 * C141478;
    const double C64097 = C522 * C63607;
    const double C1427 = C935 * C275;
    const double C15490 = C935 * C14078;
    const double C1189 = C1186 + C1178;
    const double C1430 = C937 * C275;
    const double C15495 = C937 * C14078;
    const double C1190 = C1187 + C1181;
    const double C2205 = C1713 * C275;
    const double C14517 = C1713 * C14079;
    const double C15861 = C1713 * C5873;
    const double C16590 = C1713 * C14078;
    const double C43467 = C1713 * C43031;
    const double C44798 = C1713 * C139356;
    const double C89894 = C1713 * C89456;
    const double C108781 = C1713 * C71450;
    const double C1967 = C1964 + C1956;
    const double C2208 = C1715 * C275;
    const double C14513 = C1715 * C14079;
    const double C16595 = C1715 * C14078;
    const double C43460 = C1715 * C43031;
    const double C44786 = C1715 * C139356;
    const double C59657 = C1715 * C29775;
    const double C89890 = C1715 * C89456;
    const double C108773 = C1715 * C71450;
    const double C1968 = C1965 + C1959;
    const double C2057 = C2054 * C141327;
    const double C8386 = C2054 * C141478;
    const double C24298 = C2054 * C21819;
    const double C66071 = C2054 * C63607;
    const double C21415 = C21414 + C5566;
    const double C59653 = C21152 * C29775;
    const double C50354 = C50353 + C21411;
    const double C59655 = C50096 * C29775;
    const double C5781 =
        ((C139649 + C139943 * C139651 * C139655) * C139653 + C140237 + C140237 +
         C139804 * (2 * ae * C139810 + C139804 * C139948)) /
        C139335;
    const double C5786 = C275 * C5449;
    const double C16711 = C14079 * C5449;
    const double C21658 = C188 * C5449;
    const double C21738 = C14078 * C5449;
    const double C42632 = C29775 * C5449;
    const double C43549 = C43032 * C5449;
    const double C45623 = C43031 * C5449;
    const double C53195 = C5966 * C5449;
    const double C92018 = C89456 * C5449;
    const double C1279 = C1276 * C141327;
    const double C6349 = C1276 * C141341;
    const double C7364 = C1276 * C141478;
    const double C22302 = C1276 * C21820;
    const double C23306 = C1276 * C21819;
    const double C64090 = C1276 * C141341;
    const double C65083 = C1276 * C63607;
    const double C511 = C307 * C188;
    const double C6350 = C307 * C5966;
    const double C659 = C655 * C141353;
    const double C14516 = C655 * C141479;
    const double C43468 = C655 * C42873;
    const double C89893 = C655 * C89302;
    const double C740 = C736 + C726;
    const double C514 = C309 * C188;
    const double C6357 = C309 * C5966;
    const double C660 = C656 * C141353;
    const double C14521 = C656 * C141479;
    const double C89898 = C656 * C89302;
    const double C741 = C737 + C729;
    const double C1270 = C1029 * C188;
    const double C6352 = C1029 * C5967;
    const double C6972 = C1029 * C5873;
    const double C7360 = C1029 * C5966;
    const double C22308 = C1029 * C21919;
    const double C22927 = C1029 * C139356;
    const double C64093 = C1029 * C63708;
    const double C72548 = C1029 * C71450;
    const double C1523 = C1520 + C1512;
    const double C1273 = C1031 * C188;
    const double C6348 = C1031 * C5967;
    const double C7365 = C1031 * C5966;
    const double C22301 = C1031 * C21919;
    const double C22915 = C1031 * C139356;
    const double C30451 = C1031 * C29775;
    const double C64089 = C1031 * C63708;
    const double C72540 = C1031 * C71450;
    const double C1436 = C1433 * C141353;
    const double C15494 = C1433 * C141479;
    const double C44418 = C1433 * C42873;
    const double C90847 = C1433 * C89302;
    const double C1524 = C1521 + C1515;
    const double C2048 = C1807 * C188;
    const double C8382 = C1807 * C5966;
    const double C2301 = C2298 + C2290;
    const double C2051 = C1809 * C188;
    const double C8387 = C1809 * C5966;
    const double C2214 = C2211 * C141353;
    const double C14514 = C2211 * C141365;
    const double C16594 = C2211 * C141479;
    const double C43461 = C2211 * C42874;
    const double C45511 = C2211 * C42873;
    const double C89891 = C2211 * C141365;
    const double C91906 = C2211 * C89302;
    const double C2302 = C2299 + C2293;
    const double C10371 = C10370 + C3421;
    const double C30447 = C9864 * C29775;
    const double C11366 = C11365 + C4079;
    const double C32868 = C10715 * C29775;
    const double C26252 = C26251 + C10367;
    const double C30449 = C25754 * C29775;
    const double C27248 = C27247 + C11362;
    const double C32866 = C26595 * C29775;
    const double C139715 = C139701 + C139705;
    const double C13298 = (C139678 + C139761 * C139782 +
                           (C139705 + C139761 * C139796) * C139943) /
                          C139335;
    const double C139707 = C139671 + C139704;
    const double C139966 = ae * C139964;
    const double C140151 = C139804 * C139964;
    const double C140253 = 2 * C139964;
    const double C13209 = (C139968 + C139964 * C139943) / C139330;
    const double C140030 = ae * C140028;
    const double C140393 = 2 * C140028;
    const double C140093 = C139676 + C140092;
    const double C140195 = C139676 + C140194;
    const double C140608 = C140600 + C140606;
    const double C140618 = C140614 + C140617;
    const double C57944 =
        (3 * (C140739 + ae * C140878 + C139804 * C140883) +
         ae * (2 * C140878 + C139804 * C140884) +
         C139804 *
             (2 * C140883 + ae * C140884 +
              C139804 * (C140879 + ae * C139804 * C140880 +
                         C139804 * (ae * C140880 + C139804 * C139761 *
                                                       std::pow(C139652, 7) *
                                                       bs[7] * C139808)))) /
        C139335;
    const double C58271 =
        (3 * (C140752 + ae * C140878 + C139804 * C140895) +
         ae * (2 * C140878 + C139804 * C140884) +
         C139804 *
             (2 * C140895 + ae * C140884 +
              C139804 * (C140893 + ae * C139804 * C140880 +
                         C139804 * (ae * C140880 + C139804 * C139761 *
                                                       std::pow(C139652, 7) *
                                                       bs[7] * C139907)))) /
        C139335;
    const double C55240 = C42875 * C42295;
    const double C136181 = C106914 * C42295;
    const double C55695 = C141219 * C42629;
    const double C140935 = C140927 + C140933;
    const double C140948 = C140944 + C140947;
    const double C32862 = C141353 * C26581;
    const double C38753 = C141365 * C26581;
    const double C127815 = C141365 * C26581;
    const double C32941 = C141219 * C26695;
    const double C33167 = C141219 * C27028;
    const double C39568 = C141365 * C29253;
    const double C54415 = C42875 * C29253;
    const double C128620 = C141365 * C29253;
    const double C135375 = C106914 * C29253;
    const double C40032 = C141219 * C29563;
    const double C30281 = C29775 * C25570;
    const double C32297 = C275 * C25570;
    const double C32359 = C141219 * C25570;
    const double C30993 = C29775 * C26353;
    const double C32861 = C275 * C26353;
    const double C32943 = C141219 * C26353;
    const double C38752 = C14079 * C26353;
    const double C39461 = C21920 * C26353;
    const double C127814 = C89456 * C26353;
    const double C34564 = C29775 * C29089;
    const double C39567 = C14079 * C29089;
    const double C39692 = C141219 * C29089;
    const double C42202 = C21920 * C29089;
    const double C54414 = C43032 * C29089;
    const double C55131 = C5967 * C29089;
    const double C128619 = C89456 * C29089;
    const double C136076 = C63708 * C29089;
    const double C42120 = C29775 * C42112;
    const double C57772 = C29775 * C49991;
    const double C63138 = C188 * C49991;
    const double C63254 = C141219 * C49991;
    const double C139706 = C139688 + C139703;
    const double C3499 =
        (2 * ae * C139804 * C139761 * C139671 + C139646 * C139804 * C139962) /
        C139335;
    const double C13211 = (C139761 * C139675 + C139962 * C139943) / C139335;
    const double C9680 = C5864 * C2969;
    const double C22670 = C141462 * C2969;
    const double C22662 = C141224 * C2969;
    const double C30285 = C141219 * C2969;
    const double C72295 = C71442 * C2969;
    const double C72287 = C141224 * C2969;
    const double C21048 = C5864 * C5334;
    const double C44657 = C141462 * C5334;
    const double C44649 = C141224 * C5334;
    const double C52404 = C141219 * C5334;
    const double C88380 = C141224 * C5334;
    const double C108662 = C71442 * C5334;
    const double C25579 = C141462 * C9673;
    const double C30280 = C141219 * C9673;
    const double C75170 = C71442 * C9673;
    const double C26361 = C141462 * C10476;
    const double C32709 = C141219 * C10476;
    const double C75910 = C71442 * C10476;
    const double C50000 = C141462 * C21041;
    const double C57771 = C141219 * C21041;
    const double C113852 = C71442 * C21041;
    const double C139740 = C139722 + C139737;
    const double C140290 = C140288 + C139736;
    const double C140441 = C140439 + C139736;
    const double C13616 =
        (ae * (C139826 + C139804 * (C139804 * C139840 + C139736) +
               C139804 * C139733 * ae) +
         C139761 *
             (C139902 + ae * C139804 * C139797 +
              C139804 * (ae * C139797 +
                         C139804 * (C139900 + std::pow(C139652, 7) * bs[7] *
                                                  C139891 * C139650)))) /
        C139335;
    const double C140291 = C140289 * ae;
    const double C13207 = C139761 * C139697 + C140289 * C139943;
    const double C140442 = C140440 * ae;
    const double C140502 = ae * C140499;
    const double C140501 = C139761 * C140499;
    const double C140553 = C139804 * C140499;
    const double C140581 = C140499 * C139943;
    const double C140867 = ae * C140862;
    const double C140865 = C139804 * C140862;
    const double C140500 = C140497 * ae;
    const double C26580 = (C139804 * (2 * C140381 + C139761 * C140521) +
                           (2 * C140279 + C139761 * C140497) * ae) /
                          C139330;
    const double C25569 = 3 * (C139669 + C139692 * C139869) +
                          C139761 * (2 * C140279 + C139761 * C140497);
    const double C26352 = C139804 * (2 * C140279 + C139761 * C140497);
    const double C29088 = C139669 + C139692 * C139869 + C140497 * C139943;
    const double C140793 = C140791 + C140496;
    const double C140792 = C140790 * ae;
    const double C140866 = C140864 * ae;
    const double C49990 = 3 * (C139669 + C139692 * C139943) +
                          C139804 * (2 * C140430 + C139804 * C140864);
    const double C139746 = C139695 + C139742;
    const double C139982 = ae * C139977;
    const double C140156 = C139804 * C139977;
    const double C140350 = C139977 * C139943;
    const double C140046 = ae * C140041;
    const double C140101 = C139702 + C140098;
    const double C140203 = C139702 + C140200;
    const double C140640 = C139779 + C140635;
    const double C140695 = ae * C140690;
    const double C140721 = C140474 + C140718;
    const double C140976 = C139822 + C140972;
    const double C139745 = C139724 + C139741;
    const double C139979 = C139646 * C139974;
    const double C140154 = C139804 * C139974;
    const double C13212 = (2 * ae * (C139761 * C139671 + C139973 * C139943) +
                           C139646 * (C139962 + C139974 * C139943)) /
                          C139335;
    const double C26356 =
        (2 * ae * C139804 *
             (2 * C139973 + C139761 * (C139695 + C139731 * C139869)) +
         C139646 * C139804 *
             (2 * C139974 +
              C139761 * (C139738 + (C139718 * C139719 +
                                    C139650 * bs[7] * std::pow(C139652, 7)) *
                                       C139653 * C139869))) /
        C139335;
    const double C42113 =
        (2 * C139804 * C139962 + C139804 * (C139962 + C139974 * C139943)) /
        C139335;
    const double C140043 = C139646 * C140038;
    const double C140099 = C139701 + C140096;
    const double C140201 = C139701 + C140198;
    const double C139886 = C139879 + C139885;
    const double C140494 = C139761 * C140489;
    const double C140551 = C139804 * C140489;
    const double C140630 = C140621 + C140622;
    const double C140692 = C139761 * C140687;
    const double C140719 = C139879 + C140716;
    const double C139960 = C139953 + C139959;
    const double C140788 = C139761 * C140533;
    const double C140856 = C139804 * C140533;
    const double C27241 =
        (2 * ae * (2 * C140381 + C139761 * C140521) +
         C139804 * (2 * C139761 * C140533 +
                    C139761 * (C140533 +
                               C139646 *
                                   (C139718 * C139719 +
                                    C139943 * bs[7] * std::pow(C139652, 7)) *
                                   C139653 * C139869))) /
        C139335;
    const double C140677 = C139953 + C140676;
    const double C140906 = C139804 * C140901;
    const double C140967 = C140957 + C140958;
    const double C140641 = C140628 + C140637;
    const double C140770 = C140768 + C140636;
    const double C140771 = C140769 * ae;
    const double C140914 = ae * C140911;
    const double C140913 = C139804 * C140911;
    const double C140912 = C140909 * ae;
    const double C57766 = 3 * (C140268 + C140471 * C139943) +
                          C139804 * (2 * C140759 + C139804 * C140909);
    const double C140970 = C140964 + C140965;
    const double C140126 = C140125 + C139700;
    const double C2044 = C141353 * C2037;
    const double C14351 = C141365 * C2037;
    const double C89728 = C141365 * C2037;
    const double C2201 = C141327 * C2194;
    const double C16359 = C141365 * C5621;
    const double C43299 = C42875 * C5621;
    const double C91675 = C141365 * C5621;
    const double C107334 = C106914 * C5621;
    const double C16587 = C141327 * C5729;
    const double C217 = C141327 * C193;
    const double C437 = C188 * C193;
    const double C517 = C275 * C193;
    const double C6251 = C5966 * C193;
    const double C923 = C141327 * C909;
    const double C1175 = C188 * C909;
    const double C1265 = C275 * C909;
    const double C5990 = C141341 * C909;
    const double C6246 = C5967 * C909;
    const double C7116 = C5873 * C909;
    const double C7242 = C5966 * C909;
    const double C22205 = C21919 * C909;
    const double C63731 = C141341 * C909;
    const double C63987 = C63708 * C909;
    const double C1701 = C141327 * C1687;
    const double C1953 = C188 * C1687;
    const double C2043 = C275 * C1687;
    const double C8266 = C5966 * C1687;
    const double C14350 = C14079 * C1687;
    const double C16127 = C5873 * C1687;
    const double C89727 = C89456 * C1687;
    const double C5568 = C188 * C5393;
    const double C13539 = C5966 * C5393;
    const double C15866 = C141327 * C5393;
    const double C16358 = C14079 * C5393;
    const double C21312 = C5873 * C5393;
    const double C43298 = C43032 * C5393;
    const double C45050 = C139356 * C5393;
    const double C91674 = C89456 * C5393;
    const double C109007 = C71450 * C5393;
    const double C21413 = C188 * C21138;
    const double C140457 = C139705 + C140456;
    const double C140465 = C139705 + C140464;
    const double C50252 =
        (3 * (C139857 + C139863 * C139943) +
         C139804 * (2 * C140543 +
                    C139804 * (C139863 +
                               (ae * C139792 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139849) *
                                   C139943))) /
        C139335;
    const double C139800 = C139793 + C139798;
    const double C139865 = C139859 + C139864;
    const double C29488 =
        (C140299 + ae * C139804 * C139785 + C139804 * C140561 +
         ae * (C140381 + C139804 * (C139804 * C139761 * C140517 + C140496) +
               C139804 * C140492 * ae) +
         C139761 *
             (ae * (C139828 + C139804 * (C139804 * C140517 + C139732) +
                    C139804 * C139728 * ae) +
              C139761 * (C140516 + ae * C139804 * C140491 +
                         C139804 * (ae * C140491 + C139804 * C139646 *
                                                       std::pow(C139652, 7) *
                                                       bs[7] * C139891)))) /
        C139335;
    const double C50431 =
        (3 * (C140299 + ae * C140821 + C139804 * C140561) +
         ae * (2 * C140821 + C139804 * C140823) +
         C139804 *
             (2 * C140561 + ae * C140823 +
              C139804 * (C140516 + ae * C139804 * C140491 +
                         C139804 * (ae * C140491 + C139804 * C139646 *
                                                       std::pow(C139652, 7) *
                                                       bs[7] * C139891)))) /
        C139335;
    const double C50590 =
        (3 * (C140306 + ae * C140821 + C139804 * C140835) +
         ae * (2 * C140821 + C139804 * C140823) +
         C139804 *
             (2 * C140835 + ae * C140823 +
              C139804 * (C140528 + ae * C139804 * C140491 +
                         C139804 * (ae * C140491 + C139804 * C139646 *
                                                       std::pow(C139652, 7) *
                                                       bs[7] * C139928)))) /
        C139335;
    const double C44209 = C42875 * C13615;
    const double C82216 = C141365 * C13615;
    const double C99918 = C141365 * C13615;
    const double C108231 = C106914 * C13615;
    const double C45278 = C42875 * C21492;
    const double C109218 = C106914 * C21492;
    const double C45507 = C141327 * C21655;
    const double C140283 = ae * C140280;
    const double C140282 = C139761 * C140280;
    const double C140330 = C139804 * C140280;
    const double C140490 = 2 * C140280;
    const double C13295 = (C140122 + C140280 * C139943) / C139330;
    const double C45176 = C45170 + C21412;
    const double C44805 = C44794 + C44795;
    const double C140620 = C139879 + C140479;
    const double C140480 = C139772 + C140477;
    const double C140549 = ae * C140547;
    const double C140745 = 2 * C140547;
    const double C140578 = C140269 + C140577;
    const double C140727 = C140725 + C140726;
    const double C140954 = C140950 + C140953;
    const double C50351 = C188 * C50082;
    const double C58114 = C5966 * C50082;
    const double C63141 = C141327 * C50082;
    const double C63251 = C29775 * C50082;
    const double C215 = C141327 * C199;
    const double C1703 = C141327 * C1693;
    const double C7925 = C141478 * C1693;
    const double C65624 = C63607 * C1693;
    const double C15868 = C141327 * C5396;
    const double C52529 = C141478 * C5396;
    const double C81622 = C63607 * C5396;
    const double C44793 = C141327 * C21140;
    const double C39462 = C21821 * C26479;
    const double C128514 = C71446 * C26479;
    const double C42203 = C21821 * C29175;
    const double C55132 = C141341 * C29175;
    const double C131191 = C71446 * C29175;
    const double C136077 = C141341 * C29175;
    const double C57856 = C141341 * C42199;
    const double C61348 = C141327 * C42199;
    const double C138760 = C141341 * C42199;
    const double C50098 = C50095 * C141462;
    const double C59656 = C50095 * C141219;
    const double C113938 = C50095 * C71442;
    const double C140244 = C140243 + C139700;
    const double C1266 = C141353 * C1259;
    const double C1423 = C141327 * C1416;
    const double C6519 = C141341 * C1416;
    const double C64260 = C141341 * C1416;
    const double C7357 = C141353 * C3256;
    const double C7586 = C141341 * C3364;
    const double C22466 = C21821 * C3364;
    const double C65300 = C141341 * C3364;
    const double C72091 = C71446 * C3364;
    const double C304 = C141353 * C280;
    const double C651 = C188 * C280;
    const double C732 = C275 * C280;
    const double C14622 = C14078 * C280;
    const double C1017 = C141353 * C1003;
    const double C1422 = C188 * C1003;
    const double C1509 = C275 * C1003;
    const double C6518 = C5967 * C1003;
    const double C7479 = C5873 * C1003;
    const double C15612 = C14078 * C1003;
    const double C64259 = C63708 * C1003;
    const double C1795 = C141353 * C1781;
    const double C2200 = C188 * C1781;
    const double C2287 = C275 * C1781;
    const double C14102 = C141365 * C1781;
    const double C14617 = C14079 * C1781;
    const double C16478 = C5873 * C1781;
    const double C16713 = C14078 * C1781;
    const double C43569 = C43031 * C1781;
    const double C89479 = C141365 * C1781;
    const double C89994 = C89456 * C1781;
    const double C3423 = C275 * C3086;
    const double C6977 = C141353 * C3086;
    const double C7585 = C5967 * C3086;
    const double C10202 = C5873 * C3086;
    const double C18282 = C14078 * C3086;
    const double C22465 = C21920 * C3086;
    const double C23422 = C139356 * C3086;
    const double C65299 = C63708 * C3086;
    const double C73038 = C71450 * C3086;
    const double C4081 = C275 * C3648;
    const double C8047 = C141353 * C3648;
    const double C8588 = C5967 * C3648;
    const double C11149 = C5873 * C3648;
    const double C14955 = C141365 * C3648;
    const double C15486 = C188 * C3648;
    const double C15599 = C14079 * C3648;
    const double C19196 = C14078 * C3648;
    const double C44533 = C43031 * C3648;
    const double C66269 = C63708 * C3648;
    const double C81053 = C71450 * C3648;
    const double C90320 = C141365 * C3648;
    const double C90948 = C89456 * C3648;
    const double C116311 = C139356 * C3648;
    const double C10369 = C275 * C9850;
    const double C11364 = C275 * C10701;
    const double C18283 = C14079 * C10701;
    const double C93587 = C89456 * C10701;
    const double C140811 = C139705 + C140810;
    const double C140829 = C139705 + C140828;
    const double C140898 = C140479 + C140897;
    const double C139843 = C139836 + C139841;
    const double C139923 = C139917 + C139922;
    const double C26004 =
        (3 * (C140299 + ae * C140381 + C139761 * C140520) +
         ae * (2 * C140381 + C139761 * C140521) +
         C139761 *
             (2 * C140520 + ae * C140521 +
              C139761 * (C140516 + ae * C139761 * C140517 +
                         C139761 * (ae * C140517 + C139761 * C139646 *
                                                       std::pow(C139652, 7) *
                                                       bs[7] * C139891)))) /
        C139335;
    const double C26169 =
        (3 * (C140306 + ae * C140381 + C139761 * C140530) +
         ae * (2 * C140381 + C139761 * C140521) +
         C139761 *
             (2 * C140530 + ae * C140521 +
              C139761 * (C140528 + ae * C139761 * C140517 +
                         C139761 * (ae * C140517 + C139761 * C139646 *
                                                       std::pow(C139652, 7) *
                                                       bs[7] * C139928)))) /
        C139335;
    const double C23302 = C141353 * C10119;
    const double C23531 = C21821 * C10285;
    const double C73147 = C71446 * C10285;
    const double C140383 = C140382 + C140281;
    const double C140434 = ae * C140431;
    const double C140433 = C139804 * C140431;
    const double C140857 = 2 * C140431;
    const double C47838 =
        (ae * (2 * C140431 +
               C139804 * (C139828 + C139804 * (C139804 * C140517 + C139732) +
                          C139804 * C139728 * ae) +
               (C139692 + C139728 * C139943) * ae) +
         C139761 *
             (2 * C140561 + ae * (C139785 + C140491 * C139943) +
              C139804 * (C140516 + ae * C139804 * C140491 +
                         C139804 * (ae * C140491 + C139804 * C139646 *
                                                       std::pow(C139652, 7) *
                                                       bs[7] * C139891)))) /
        C139335;
    const double C23641 = C23637 + C10368;
    const double C22934 = C22923 + C22924;
    const double C24609 = C24605 + C11363;
    const double C36659 = C36650 + C18281;
    const double C23974 = C23971 + C23972;
    const double C35995 = C35980 + C35981;
    const double C140592 = C140591 + C140478;
    const double C26249 = C275 * C25740;
    const double C32300 = C141353 * C25740;
    const double C32524 = C29775 * C25740;
    const double C39233 = C14078 * C25740;
    const double C27245 = C275 * C26579;
    const double C32864 = C141353 * C26579;
    const double C33166 = C29775 * C26579;
    const double C36646 = C14079 * C26579;
    const double C38757 = C141365 * C26579;
    const double C40147 = C21920 * C26579;
    const double C40258 = C14078 * C26579;
    const double C54902 = C43031 * C26579;
    const double C102402 = C89456 * C26579;
    const double C127819 = C141365 * C26579;
    const double C140664 = C140661 + C140662;
    const double C140674 = C140670 + C140673;
    const double C140763 = ae * C140760;
    const double C140762 = C139804 * C140760;
    const double C140902 = 2 * C140760;
    const double C140705 = C140703 + C140704;
    const double C140956 = C139953 + C140703;
    const double C140844 = C139815 + C140840;
    const double C302 = C141353 * C286;
    const double C1019 = C141353 * C1009;
    const double C14953 = C141479 * C1009;
    const double C90318 = C89302 * C1009;
    const double C6979 = C141353 * C3089;
    const double C35983 = C141479 * C3089;
    const double C98272 = C89302 * C3089;
    const double C22922 = C141353 * C9852;
    const double C25756 = C25753 * C141462;
    const double C30450 = C25753 * C141219;
    const double C75331 = C25753 * C71442;
    const double C26596 = C26594 * C141462;
    const double C32865 = C26594 * C141219;
    const double C76127 = C26594 * C71442;
    const double C16126 = C5864 * C1876;
    const double C16116 = C5865 * C1876;
    const double C45043 = C141224 * C1876;
    const double C81924 = C141224 * C1876;
    const double C91447 = C63606 * C1876;
    const double C21315 = C5864 * C5508;
    const double C45049 = C141462 * C5508;
    const double C45035 = C141224 * C5508;
    const double C52755 = C141219 * C5508;
    const double C88700 = C141224 * C5508;
    const double C109006 = C71442 * C5508;
    const double C50257 = C141224 * C21309;
    const double C59808 = C141219 * C21309;
    const double C114093 = C141224 * C21309;
    const double C32357 = C141219 * C25831;
    const double C13532 = (2 * ae * (C139774 + C139785 * C139943) +
                           C139761 * (C140277 + C139646 * C139884 * C139943)) /
                          C139335;
    const double C21404 = (2 * C139804 * C140277 +
                           C139804 * (C140277 + C139646 * C139884 * C139943)) /
                          C139335;
    const double C140473 = C140467 + C140468;
    const double C438 = C141327 * C423;
    const double C1179 = C141327 * C1169;
    const double C6244 = C141341 * C1169;
    const double C7233 = C141478 * C1169;
    const double C22200 = C21820 * C1169;
    const double C63985 = C141341 * C1169;
    const double C64956 = C63607 * C1169;
    const double C1957 = C141327 * C1947;
    const double C8257 = C141478 * C1947;
    const double C65944 = C63607 * C1947;
    const double C8260 = C141341 * C3791;
    const double C15173 = C141327 * C3791;
    const double C24176 = C21820 * C3791;
    const double C65947 = C141341 * C3791;
    const double C80782 = C63607 * C3791;
    const double C98550 = C141478 * C3791;
    const double C16246 = C141327 * C5562;
    const double C52871 = C141478 * C5562;
    const double C82071 = C63607 * C5562;
    const double C42465 = C21820 * C13531;
    const double C47733 = C141327 * C13531;
    const double C52867 = C141341 * C13531;
    const double C55472 = C141478 * C13531;
    const double C88810 = C141341 * C13531;
    const double C136403 = C63607 * C13531;
    const double C50350 = C141327 * C21403;
    const double C58113 = C141478 * C21403;
    const double C139007 = C63607 * C21403;
    const double C32469 = C141353 * C26003;
    const double C39922 = C141365 * C29487;
    const double C54659 = C42875 * C29487;
    const double C128950 = C141365 * C29487;
    const double C135617 = C106914 * C29487;
    const double C1278 = C1275 * C141327;
    const double C6353 = C1275 * C141341;
    const double C7359 = C1275 * C141478;
    const double C22307 = C1275 * C21820;
    const double C64094 = C1275 * C141341;
    const double C65079 = C1275 * C63607;
    const double C2056 = C2053 * C141327;
    const double C8381 = C2053 * C141478;
    const double C66067 = C2053 * C63607;
    const double C7478 = C5864 * C1346;
    const double C7474 = C5865 * C1346;
    const double C23419 = C141224 * C1346;
    const double C65188 = C63606 * C1346;
    const double C73035 = C141224 * C1346;
    const double C10205 = C5864 * C3309;
    const double C23421 = C141462 * C3309;
    const double C23415 = C141224 * C3309;
    const double C30779 = C141219 * C3309;
    const double C73037 = C71442 * C3309;
    const double C73031 = C141224 * C3309;
    const double C26088 = C141224 * C10199;
    const double C30782 = C141219 * C10199;
    const double C75654 = C141224 * C10199;
    const double C63420 = C141219 * C50506;
    const double C63474 = C141327 * C50589;
    const double C1435 = C1432 * C141353;
    const double C15489 = C1432 * C141479;
    const double C90843 = C1432 * C89302;
    const double C2213 = C2210 * C141353;
    const double C14518 = C2210 * C141365;
    const double C16589 = C2210 * C141479;
    const double C43466 = C2210 * C42874;
    const double C89895 = C2210 * C141365;
    const double C91902 = C2210 * C89302;
    const double C10362 = (2 * C139761 * C140310 +
                           C139761 * (C140310 + C139646 * C139958 * C139869)) /
                          C139335;
    const double C11357 = (2 * ae * (C139817 + C139828 * C139869) +
                           C139804 * (C140310 + C139646 * C139958 * C139869)) /
                          C139335;
    const double C26245 =
        (3 * (C140310 + C140533 * C139869) +
         C139761 * (2 * C139761 * C140533 +
                    C139761 * (C140533 +
                               C139646 *
                                   (C139718 * C139719 +
                                    C139943 * bs[7] * std::pow(C139652, 7)) *
                                   C139653 * C139869))) /
        C139335;
    const double C140843 = C140837 + C140838;
    const double C733 = C141353 * C718;
    const double C1513 = C141353 * C1503;
    const double C15603 = C141479 * C1503;
    const double C90952 = C89302 * C1503;
    const double C2291 = C141353 * C2281;
    const double C14615 = C141365 * C2281;
    const double C16704 = C141479 * C2281;
    const double C43564 = C42874 * C2281;
    const double C89992 = C141365 * C2281;
    const double C92011 = C89302 * C2281;
    const double C7701 = C141353 * C3417;
    const double C36649 = C141479 * C3417;
    const double C99105 = C89302 * C3417;
    const double C8702 = C141353 * C4075;
    const double C15606 = C141365 * C4075;
    const double C44525 = C42874 * C4075;
    const double C82640 = C141479 * C4075;
    const double C90955 = C141365 * C4075;
    const double C100318 = C89302 * C4075;
    const double C26248 = C141353 * C10361;
    const double C39232 = C141479 * C10361;
    const double C128294 = C89302 * C10361;
    const double C27244 = C141353 * C11356;
    const double C36645 = C141365 * C11356;
    const double C40253 = C141479 * C11356;
    const double C54898 = C42874 * C11356;
    const double C102398 = C141365 * C11356;
    const double C129269 = C89302 * C11356;
    const double C32632 = C141353 * C26244;
    const double C33316 = C141353 * C27240;
    const double C39230 = C141365 * C27240;
    const double C128292 = C141365 * C27240;
    const double C47419 = C47417 * C141462;
    const double C61344 = C47417 * C141219;
    const double C111311 = C47417 * C71442;
    const double C8379 = C141353 * C3866;
    const double C15279 = C141365 * C3866;
    const double C90634 = C141365 * C3866;
    const double C24294 = C141353 * C11042;
    const double C36315 = C141365 * C11042;
    const double C98693 = C141365 * C11042;
    const double C32859 =
        (ae * (3 * C140454 + C139761 * C140609) +
         C139804 *
             (3 * C140612 +
              C139761 * (2 * C139761 * C139833 +
                         C139761 * (C139833 + std::pow(C139652, 7) * bs[7] *
                                                  C139808 * C139869)))) /
        C139335;
    const double C32938 =
        (3 * (C140541 + ae * C139804 * C139973 + C139761 * C140684) +
         ae * C139804 * C140609 +
         C139761 *
             (2 * C140684 + ae * C139804 * C140605 +
              C139761 * (C140682 + ae * C139804 * C139761 * C139731 +
                         C139761 * (ae * C139804 * C139731 +
                                    C139761 * C139804 * std::pow(C139652, 7) *
                                        bs[7] * C139849)))) /
        C139335;
    const double C33164 =
        (ae * (3 * C140454 + C139761 * C140609) +
         C139804 *
             (3 * C140668 +
              C139761 * (2 * C139761 * C139919 +
                         C139761 * (C139919 + std::pow(C139652, 7) * bs[7] *
                                                  C139907 * C139869)))) /
        C139335;
    const double C34668 =
        (2 * C139761 * C139821 + C139761 * C140612 + ae * C139804 * C140609 +
         C139804 *
             (ae * C140609 +
              C139804 * (2 * C139761 * C139833 +
                         C139761 * (C139833 + std::pow(C139652, 7) * bs[7] *
                                                  C139808 * C139869)))) /
        C139335;
    const double C34876 =
        (2 * C139761 * C139913 + C139761 * C140668 + ae * C139804 * C140609 +
         C139804 *
             (ae * C140609 +
              C139804 * (2 * C139761 * C139919 +
                         C139761 * (C139919 + std::pow(C139652, 7) * bs[7] *
                                                  C139907 * C139869)))) /
        C139335;
    const double C32181 = (4 * (2 * C140357 + C139761 * C140454) +
                           C139761 * (3 * C140454 + C139761 * C140609)) /
                          C139330;
    const double C32703 =
        (C139804 * (3 * C140454 + C139761 * C140609)) / C139330;
    const double C34559 =
        (2 * C140357 + C139761 * C140454 + C140609 * C139943) / C139330;
    const double C57773 = C29775 * C57767;
    const double C63075 = (4 * (2 * C140804 + C139804 * C140808) +
                           C139804 * (3 * C140808 + C139804 * C140936)) /
                          C139330;
    const double C140129 = C139761 * C139801;
    const double C2041 =
        (ae * (3 * C139783 + C139646 * C139801) +
         C139804 *
             (3 * C139902 +
              C139646 * (2 * C139646 * C139900 +
                         C139646 * (C139900 + std::pow(C139652, 7) * bs[7] *
                                                  C139891 * C139650)))) /
        C139335;
    const double C2198 =
        (ae * (3 * C139783 + C139646 * C139801) +
         C139804 *
             (3 * C139939 +
              C139646 * (2 * C139646 * C139937 +
                         C139646 * (C139937 + std::pow(C139652, 7) * bs[7] *
                                                  C139928 * C139650)))) /
        C139335;
    const double C3793 =
        (2 * ae * C139804 * C139801 +
         C139761 * C139804 *
             (2 * C139646 * C139884 +
              C139646 * (C139884 + (C139718 * C139719 +
                                    C139869 * bs[7] * std::pow(C139652, 7)) *
                                       C139653 * C139650))) /
        C139335;
    const double C5622 =
        (2 * C139646 * C139897 + C139646 * C139902 + ae * C139804 * C139801 +
         C139804 *
             (ae * C139801 +
              C139804 * (2 * C139646 * C139900 +
                         C139646 * (C139900 + std::pow(C139652, 7) * bs[7] *
                                                  C139891 * C139650)))) /
        C139335;
    const double C5730 =
        (2 * C139646 * C139934 + C139646 * C139939 + ae * C139804 * C139801 +
         C139804 *
             (ae * C139801 +
              C139804 * (2 * C139646 * C139937 +
                         C139646 * (C139937 + std::pow(C139652, 7) * bs[7] *
                                                  C139928 * C139650)))) /
        C139335;
    const double C194 = (4 * (2 * C139774 + C139646 * C139783) +
                         C139646 * (3 * C139783 + C139646 * C139801)) /
                        C139330;
    const double C1691 =
        (C139804 * (3 * C139783 + C139646 * C139801)) / C139330;
    const double C5394 =
        (2 * C139774 + C139646 * C139783 + C139801 * C139943) / C139330;
    const double C50352 = C188 * C50083;
    const double C63133 = (4 * (2 * C140817 + C139804 * C140819) +
                           C139804 * (3 * C140819 + C139804 * C140942)) /
                          C139330;
    const double C140247 = C139804 * C139844;
    const double C1263 =
        (ae * (3 * C139826 + C139646 * C139844) +
         C139761 *
             (3 * C139902 +
              C139646 * (2 * C139646 * C139900 +
                         C139646 * (C139900 + std::pow(C139652, 7) * bs[7] *
                                                  C139891 * C139650)))) /
        C139335;
    const double C1420 =
        (ae * (3 * C139826 + C139646 * C139844) +
         C139761 *
             (3 * C139939 +
              C139646 * (2 * C139646 * C139937 +
                         C139646 * (C139937 + std::pow(C139652, 7) * bs[7] *
                                                  C139928 * C139650)))) /
        C139335;
    const double C3257 =
        (2 * C139646 * C139897 + C139646 * C139902 + ae * C139761 * C139844 +
         C139761 *
             (ae * C139844 +
              C139761 * (2 * C139646 * C139900 +
                         C139646 * (C139900 + std::pow(C139652, 7) * bs[7] *
                                                  C139891 * C139650)))) /
        C139335;
    const double C3365 =
        (2 * C139646 * C139934 + C139646 * C139939 + ae * C139761 * C139844 +
         C139761 *
             (ae * C139844 +
              C139761 * (2 * C139646 * C139937 +
                         C139646 * (C139937 + std::pow(C139652, 7) * bs[7] *
                                                  C139928 * C139650)))) /
        C139335;
    const double C4077 =
        (2 * ae * C139761 * C139844 +
         C139804 * C139761 *
             (2 * C139646 * C139958 +
              C139646 * (C139958 + (C139718 * C139719 +
                                    C139943 * bs[7] * std::pow(C139652, 7)) *
                                       C139653 * C139650))) /
        C139335;
    const double C281 = (4 * (2 * C139817 + C139646 * C139826) +
                         C139646 * (3 * C139826 + C139646 * C139844)) /
                        C139330;
    const double C1007 =
        (C139761 * (3 * C139826 + C139646 * C139844)) / C139330;
    const double C3087 =
        (2 * C139817 + C139646 * C139826 + C139844 * C139869) / C139330;
    const double C26250 = C275 * C25741;
    const double C140731 = C139804 * C140665;
    const double C32292 = (4 * (2 * C140376 + C139761 * C140514) +
                           C139761 * (3 * C140514 + C139761 * C140665)) /
                          C139330;
    const double C23425 = C23410 + C23411;
    const double C45055 = C45026 + C45027;
    const double C63618 = C63614 * C116;
    const double C64711 = C1029 * C63614;
    const double C64839 = C63614 * C909;
    const double C64833 = C63614 * C820;
    const double C64827 = C63614 * C910;
    const double C64821 = C63614 * C821;
    const double C65193 = C63614 * C1003;
    const double C65187 = C63614 * C1004;
    const double C67591 = C63614 * C2962;
    const double C67831 = C63614 * C3086;
    const double C68410 = C63614 * C3492;
    const double C68722 = C63614 * C3648;
    const double C91208 = C1713 * C63614;
    const double C91458 = C63614 * C1687;
    const double C91452 = C63614 * C1598;
    const double C91446 = C63614 * C1688;
    const double C91440 = C63614 * C1599;
    const double C91794 = C63614 * C1781;
    const double C91788 = C63614 * C1782;
    const double C96575 = C63614 * C5327;
    const double C96569 = C63614 * C5393;
    const double C139360 = C141219 - C139358;
    const double C30551 = C30531 + C30532;
    const double C30549 = C30527 + C30528;
    const double C30548 = C30525 + C30526;
    const double C30547 = C30523 + C30524;
    const double C30786 = C30775 + C30776;
    const double C30785 = C30772 + C30773;
    const double C30784 = C30769 + C30770;
    const double C30783 = C30766 + C30767;
    const double C32957 = C32950 + C32951;
    const double C32955 = C32946 + C32947;
    const double C33177 = C33172 + C33173;
    const double C33176 = C33169 + C33170;
    const double C37114 = C37105 + C37106;
    const double C37112 = C37097 + C37098;
    const double C37111 = C37095 + C37096;
    const double C37432 = C37428 + C37429;
    const double C39706 = C39695 + C39696;
    const double C42383 = C42380 + C42381;
    const double C42382 = C42378 + C42379;
    const double C55368 = C55357 + C55358;
    const double C58030 = C58026 + C58027;
    const double C58029 = C58024 + C58025;
    const double C73041 = C73026 + C73027;
    const double C81928 = C81915 + C81916;
    const double C64461 = C141506 * C832;
    const double C64452 = C141506 * C833;
    const double C64708 = C6989 * C141506;
    const double C64830 = C141506 * C827;
    const double C64824 = C141506 * C1100;
    const double C64818 = C141506 * C828;
    const double C65190 = C141506 * C1347;
    const double C65184 = C141506 * C1348;
    const double C67344 = C141506 * C2968;
    const double C67509 = C9863 * C141506;
    const double C67596 = C141506 * C2964;
    const double C67590 = C141506 * C3142;
    const double C67836 = C141506 * C3308;
    const double C68091 = C141506 * C3498;
    const double C68304 = C10714 * C141506;
    const double C68415 = C141506 * C3494;
    const double C68409 = C141506 * C3720;
    const double C68727 = C141506 * C3934;
    const double C91080 = C141506 * C1610;
    const double C91074 = C141506 * C1611;
    const double C91205 = C15878 * C141506;
    const double C91455 = C141506 * C1877;
    const double C91449 = C141506 * C1605;
    const double C91443 = C141506 * C1878;
    const double C91437 = C141506 * C1606;
    const double C91785 = C141506 * C2126;
    const double C93785 = C18489 * C141506;
    const double C96328 = C141506 * C5333;
    const double C96419 = C21151 * C141506;
    const double C96580 = C141506 * C5329;
    const double C96574 = C141506 * C5507;
    const double C96817 = C141506 * C5673;
    const double C89 =
        (C141462 - C141490) / C139336 - (C141506 * C141215) / C139330;
    const double C64454 = C141492 * C832;
    const double C64820 = C141492 * C827;
    const double C65192 = C141492 * C1346;
    const double C65186 = C141492 * C1347;
    const double C67342 = C141492 * C2969;
    const double C67594 = C141492 * C2965;
    const double C67834 = C141492 * C3309;
    const double C91076 = C141492 * C1610;
    const double C91457 = C141492 * C1876;
    const double C91445 = C141492 * C1877;
    const double C91439 = C141492 * C1605;
    const double C96326 = C141492 * C5334;
    const double C96578 = C141492 * C5330;
    const double C96572 = C141492 * C5508;
    const double C90 =
        (2 * C141224 + C141506) / C139336 - (C141492 * C141215) / C139330;
    const double C91 = C141492 / C139336 - C141227 / C139345;
    const double C139458 = C141327 - C139457;
    const double C21956 = C21942 + C21943;
    const double C21947 = C21924 + C21925;
    const double C22475 = C22467 + C22468;
    const double C22472 = C22461 + C22462;
    const double C23537 = C23532 + C23533;
    const double C36897 = C36889 + C36890;
    const double C39467 = C39459 + C39460;
    const double C42215 = C42204 + C42205;
    const double C22473 = C22463 + C22464;
    const double C36898 = C36891 + C36892;
    const double C63739 = C63720 + C63721;
    const double C63735 = C63712 + C63713;
    const double C64266 = C64257 + C64258;
    const double C64264 = C64252 + C64253;
    const double C65309 = C65303 + C65304;
    const double C81632 = C81615 + C81616;
    const double C84986 = C84981 + C84982;
    const double C88499 = C88491 + C88492;
    const double C71565 = C71545 * C2962;
    const double C71557 = C71545 * C2965;
    const double C71551 = C71545 * C2961;
    const double C71810 = C71545 * C3026;
    const double C72090 = C71545 * C3086;
    const double C72088 = C71545 * C3085;
    const double C72428 = C71545 * C9668;
    const double C73146 = C71545 * C9849;
    const double C73470 = C71545 * C10471;
    const double C74100 = C71545 * C10700;
    const double C125975 = C71545 * C10473;
    const double C125969 = C71545 * C10470;
    const double C126602 = C71545 * C10699;
    const double C128513 = C71545 * C26353;
    const double C128507 = C71545 * C26351;
    const double C129163 = C71545 * C26579;
    const double C131196 = C71545 * C29087;
    const double C131190 = C71545 * C29089;
    const double C6264 = C6258 + C6249;
    const double C6261 = C6255 + C6240;
    const double C6259 = C6253 + C6234;
    const double C7251 = C7247 + C7238;
    const double C7249 = C7245 + C7232;
    const double C8275 = C8271 + C8262;
    const double C8273 = C8269 + C8256;
    const double C52884 = C52878 + C13535;
    const double C52882 = C52876 + C8265;
    const double C58120 = C58118 + C52869;
    const double C6262 = C6256 + C6243;
    const double C6260 = C6254 + C6237;
    const double C448 = C444 + C429;
    const double C16256 = C16253 + C16240;
    const double C71570 = C141507 * C191;
    const double C71564 = C141507 * C197;
    const double C71554 = C141507 * C196;
    const double C71548 = C141507 * C190;
    const double C71828 = C141507 * C421;
    const double C71813 = C141507 * C420;
    const double C71934 = C521 * C141507;
    const double C71925 = C520 * C141507;
    const double C72095 = C141507 * C637;
    const double C72085 = C141507 * C636;
    const double C72433 = C141507 * C911;
    const double C72806 = C141507 * C1170;
    const double C72924 = C1276 * C141507;
    const double C73151 = C141507 * C1418;
    const double C73475 = C141507 * C1689;
    const double C73469 = C141507 * C1694;
    const double C73784 = C141507 * C1948;
    const double C73902 = C2054 * C141507;
    const double C74105 = C141507 * C2196;
    const double C125972 = C141507 * C1695;
    const double C125966 = C141507 * C1690;
    const double C126290 = C141507 * C1949;
    const double C126599 = C141507 * C2197;
    const double C128510 = C141507 * C3576;
    const double C128504 = C141507 * C3572;
    const double C128834 = C141507 * C3790;
    const double C131201 = C141507 * C5391;
    const double C131195 = C141507 * C5395;
    const double C131441 = C141507 * C5561;
    const double C131681 = C141507 * C5727;
    const double C29770 =
        (C141478 - C141500) / C139336 - (C141507 * C141337) / C139330;
    const double C6005 = C5997 + C5998;
    const double C6528 = C6524 + C6525;
    const double C57854 = C52538 + C52539;
    const double C71568 = C141502 * C910;
    const double C71550 = C141502 * C911;
    const double C71825 = C141502 * C1169;
    const double C71816 = C141502 * C1170;
    const double C71932 = C1275 * C141502;
    const double C71927 = C1276 * C141502;
    const double C72093 = C141502 * C1417;
    const double C72087 = C141502 * C1418;
    const double C73149 = C141502 * C3363;
    const double C73781 = C141502 * C3791;
    const double C125974 = C141502 * C3576;
    const double C125968 = C141502 * C3572;
    const double C126292 = C141502 * C3790;
    const double C128512 = C141502 * C10598;
    const double C131199 = C141502 * C13294;
    const double C131193 = C141502 * C13297;
    const double C131439 = C141502 * C13531;
    const double C29771 =
        (2 * C141341 + C141507) / C139336 - (C141502 * C141337) / C139330;
    const double C29772 = C141502 / C139336 - C141344 / C139345;
    const double C21944 = C21918 * C110;
    const double C21938 = C21918 * C116;
    const double C21928 = C21918 * C115;
    const double C21922 = C21918 * C109;
    const double C22204 = C21918 * C192;
    const double C22202 = C21918 * C191;
    const double C22187 = C21918 * C190;
    const double C22183 = C21918 * C189;
    const double C22310 = C307 * C21918;
    const double C22299 = C305 * C21918;
    const double C22469 = C21918 * C278;
    const double C22459 = C21918 * C277;
    const double C22807 = C21918 * C822;
    const double C22801 = C21918 * C827;
    const double C23191 = C21918 * C910;
    const double C23190 = C21918 * C912;
    const double C23186 = C21918 * C911;
    const double C23307 = C1031 * C21918;
    const double C23534 = C21918 * C1005;
    const double C23863 = C21918 * C1600;
    const double C23857 = C21918 * C1605;
    const double C24183 = C21918 * C1688;
    const double C24182 = C21918 * C1690;
    const double C24178 = C21918 * C1689;
    const double C24299 = C1809 * C21918;
    const double C24502 = C21918 * C1783;
    const double C25924 = C21918 * C3026;
    const double C26822 = C21918 * C3572;
    const double C29411 = C21918 * C5392;
    const double C29408 = C21918 * C5391;
    const double C36887 = C21918 * C1606;
    const double C36881 = C21918 * C1601;
    const double C37532 = C21918 * C1784;
    const double C39457 = C21918 * C3494;
    const double C39451 = C21918 * C3490;
    const double C39811 = C21918 * C13294;
    const double C40143 = C21918 * C3646;
    const double C42212 = C21918 * C5325;
    const double C42206 = C21918 * C5329;
    const double C42468 = C21918 * C21136;
    const double C42715 = C21918 * C5449;
    const double C139528 = C141353 - C139527;
    const double C43068 = C43054 + C43055;
    const double C43059 = C43036 + C43037;
    const double C43308 = C43300 + C43301;
    const double C43305 = C43294 + C43295;
    const double C43907 = C43899 + C43900;
    const double C45284 = C45279 + C45280;
    const double C51666 = C51658 + C51659;
    const double C51663 = C51652 + C51653;
    const double C54430 = C54422 + C54423;
    const double C54427 = C54416 + C54417;
    const double C55252 = C55241 + C55242;
    const double C43306 = C43296 + C43297;
    const double C51667 = C51660 + C51661;
    const double C89487 = C89468 + C89469;
    const double C89483 = C89460 + C89461;
    const double C89734 = C89725 + C89726;
    const double C89732 = C89720 + C89721;
    const double C90337 = C90327 + C90328;
    const double C91684 = C91678 + C91679;
    const double C98285 = C98273 + C98274;
    const double C98282 = C98265 + C98266;
    const double C98280 = C98261 + C98262;
    const double C101799 = C101793 + C101794;
    const double C101797 = C101789 + C101790;
    const double C102809 = C102801 + C102802;
    const double C107087 = C107067 * C5327;
    const double C107079 = C107067 * C5330;
    const double C107073 = C107067 * C5326;
    const double C107333 = C107067 * C5393;
    const double C107331 = C107067 * C5392;
    const double C107584 = C107067 * C5449;
    const double C107924 = C107067 * C13206;
    const double C108891 = C107067 * C21036;
    const double C109217 = C107067 * C21137;
    const double C132737 = C107067 * C13208;
    const double C132731 = C107067 * C13205;
    const double C133043 = C107067 * C13294;
    const double C135380 = C107067 * C29087;
    const double C135374 = C107067 * C29089;
    const double C136186 = C107067 * C42109;
    const double C136180 = C107067 * C42111;
    const double C14635 = C14629 + C14620;
    const double C14632 = C14626 + C14611;
    const double C14630 = C14624 + C14605;
    const double C15621 = C15617 + C15608;
    const double C15619 = C15615 + C15602;
    const double C16722 = C16718 + C16709;
    const double C16720 = C16716 + C16703;
    const double C36662 = C36656 + C18278;
    const double C36660 = C36654 + C15611;
    const double C39238 = C39236 + C36647;
    const double C40267 = C40263 + C19192;
    const double C40265 = C40261 + C37640;
    const double C14633 = C14627 + C14614;
    const double C14631 = C14625 + C14608;
    const double C36663 = C36657 + C18279;
    const double C36661 = C36655 + C15610;
    const double C743 = C739 + C724;
    const double C7709 = C7706 + C7696;
    const double C107092 = C141508 * C278;
    const double C107086 = C141508 * C284;
    const double C107076 = C141508 * C283;
    const double C107070 = C141508 * C277;
    const double C107338 = C141508 * C503;
    const double C107328 = C141508 * C502;
    const double C107503 = C655 * C141508;
    const double C107494 = C654 * C141508;
    const double C107602 = C141508 * C716;
    const double C107587 = C141508 * C715;
    const double C107929 = C141508 * C1005;
    const double C107923 = C141508 * C1010;
    const double C108235 = C141508 * C1261;
    const double C108439 = C1433 * C141508;
    const double C108547 = C141508 * C1504;
    const double C108896 = C141508 * C1783;
    const double C109222 = C141508 * C2039;
    const double C109432 = C2211 * C141508;
    const double C109540 = C141508 * C2282;
    const double C132734 = C141508 * C1011;
    const double C132728 = C141508 * C1006;
    const double C133040 = C141508 * C1262;
    const double C133355 = C141508 * C1505;
    const double C135385 = C141508 * C3084;
    const double C135379 = C141508 * C3088;
    const double C135621 = C141508 * C3254;
    const double C135858 = C141508 * C3416;
    const double C136191 = C141508 * C3646;
    const double C136185 = C141508 * C3650;
    const double C136517 = C141508 * C3864;
    const double C136832 = C141508 * C4074;
    const double C58485 =
        (C141479 - C141503) / C139336 - (C141508 * C141361) / C139330;
    const double C14117 = C14109 + C14110;
    const double C14360 = C14356 + C14357;
    const double C38751 = C35992 + C35993;
    const double C38750 = C35990 + C35991;
    const double C107090 = C141505 * C1782;
    const double C107072 = C141505 * C1783;
    const double C107336 = C141505 * C2038;
    const double C107330 = C141505 * C2039;
    const double C107501 = C2210 * C141505;
    const double C107496 = C2211 * C141505;
    const double C107599 = C141505 * C2281;
    const double C107590 = C141505 * C2282;
    const double C107927 = C141505 * C3647;
    const double C108233 = C141505 * C3865;
    const double C108544 = C141505 * C4075;
    const double C109220 = C141505 * C5620;
    const double C132736 = C141505 * C3650;
    const double C132730 = C141505 * C3646;
    const double C133042 = C141505 * C3864;
    const double C133357 = C141505 * C4074;
    const double C135383 = C141505 * C10699;
    const double C135377 = C141505 * C10702;
    const double C135619 = C141505 * C11041;
    const double C135856 = C141505 * C11356;
    const double C136183 = C141505 * C13377;
    const double C136515 = C141505 * C13614;
    const double C58486 =
        (2 * C141365 + C141508) / C139336 - (C141505 * C141361) / C139330;
    const double C58487 = C141505 / C139336 - C141368 / C139345;
    const double C43056 = C43030 * C110;
    const double C43050 = C43030 * C116;
    const double C43040 = C43030 * C115;
    const double C43034 = C43030 * C109;
    const double C43302 = C43030 * C191;
    const double C43292 = C43030 * C190;
    const double C43469 = C220 * C43030;
    const double C43458 = C218 * C43030;
    const double C43568 = C43030 * C279;
    const double C43566 = C43030 * C278;
    const double C43551 = C43030 * C277;
    const double C43547 = C43030 * C276;
    const double C43901 = C43030 * C822;
    const double C43895 = C43030 * C827;
    const double C44212 = C43030 * C911;
    const double C44419 = C937 * C43030;
    const double C44532 = C43030 * C1004;
    const double C44531 = C43030 * C1006;
    const double C44527 = C43030 * C1005;
    const double C44914 = C43030 * C1600;
    const double C44908 = C43030 * C1605;
    const double C45281 = C43030 * C1689;
    const double C45512 = C1715 * C43030;
    const double C45625 = C43030 * C1782;
    const double C45624 = C43030 * C1784;
    const double C45620 = C43030 * C1783;
    const double C47190 = C43030 * C3085;
    const double C47187 = C43030 * C3084;
    const double C48149 = C43030 * C3647;
    const double C48146 = C43030 * C3646;
    const double C50671 = C43030 * C5449;
    const double C51656 = C43030 * C828;
    const double C51650 = C43030 * C823;
    const double C51972 = C43030 * C912;
    const double C54424 = C43030 * C2960;
    const double C54418 = C43030 * C2964;
    const double C54662 = C43030 * C3026;
    const double C54901 = C43030 * C9848;
    const double C55249 = C43030 * C3490;
    const double C55243 = C43030 * C3494;
    const double C55591 = C43030 * C3572;
    const double C55917 = C43030 * C10699;
    const double C929 = C141327 * C916;
    const double C5976 = C141341 * C916;
    const double C6855 = C141478 * C916;
    const double C21931 = C21820 * C916;
    const double C22802 = C21819 * C916;
    const double C63717 = C141341 * C916;
    const double C64596 = C63607 * C916;
    const double C71556 = C141502 * C916;
    const double C72427 = C141507 * C916;
    const double C7113 = C5863 * C1099;
    const double C7103 = C5864 * C1099;
    const double C23054 = C141462 * C1099;
    const double C23040 = C141224 * C1099;
    const double C30538 = C141219 * C1099;
    const double C64836 = C141506 * C1099;
    const double C64826 = C141492 * C1099;
    const double C72673 = C71442 * C1099;
    const double C72659 = C141224 * C1099;
    const double C1801 = C141353 * C1788;
    const double C14088 = C141365 * C1788;
    const double C15994 = C141479 * C1788;
    const double C43043 = C42874 * C1788;
    const double C44909 = C42873 * C1788;
    const double C89465 = C141365 * C1788;
    const double C91325 = C89302 * C1788;
    const double C107078 = C141505 * C1788;
    const double C108890 = C141508 * C1788;
    const double C16475 = C5863 * C2125;
    const double C16471 = C5864 * C2125;
    const double C37431 = C141219 * C2125;
    const double C45393 = C141462 * C2125;
    const double C45387 = C141224 * C2125;
    const double C82356 = C71442 * C2125;
    const double C82354 = C141224 * C2125;
    const double C91791 = C141506 * C2125;
    const double C91787 = C141492 * C2125;
    const double C221 = C208 + C209;
    const double C308 = C295 + C296;
    const double C5999 = C5981 + C5982;
    const double C14111 = C14093 + C14094;
    const double C1030 = C1022 + C1023;
    const double C14971 = C14960 + C14961;
    const double C23066 = C23035 + C23036;
    const double C30553 = C30535 + C30536;
    const double C72685 = C72654 + C72655;
    const double C1714 = C1706 + C1707;
    const double C7943 = C7932 + C7933;
    const double C37113 = C37103 + C37104;
    const double C45053 = C45022 + C45023;
    const double C81926 = C81911 + C81912;
    const double C3197 =
        (C139646 * C139874 + C140123 + C140123 +
         C139761 * (2 * ae * C139774 + C139761 * C139646 * C139879)) /
        C139335;
    const double C4005 =
        (C140123 + C139804 * (ae * C139817 + C139761 * C139646 * C139934)) /
        C139335;
    const double C3202 = C188 * C3027;
    const double C6857 = C141341 * C3027;
    const double C7235 = C5967 * C3027;
    const double C7361 = C275 * C3027;
    const double C10041 = C5966 * C3027;
    const double C21927 = C21821 * C3027;
    const double C22193 = C21920 * C3027;
    const double C22806 = C21820 * C3027;
    const double C23047 = C139356 * C3027;
    const double C23183 = C21919 * C3027;
    const double C25927 = C21918 * C3027;
    const double C30541 = C29775 * C3027;
    const double C36312 = C14078 * C3027;
    const double C64598 = C141341 * C3027;
    const double C64958 = C63708 * C3027;
    const double C71552 = C71446 * C3027;
    const double C71818 = C71545 * C3027;
    const double C72431 = C141502 * C3027;
    const double C72666 = C71450 * C3027;
    const double C3796 = C188 * C3573;
    const double C7935 = C141341 * C3573;
    const double C8259 = C5967 * C3573;
    const double C8383 = C275 * C3573;
    const double C10940 = C5966 * C3573;
    const double C14847 = C141327 * C3573;
    const double C15282 = C14079 * C3573;
    const double C23862 = C21820 * C3573;
    const double C24175 = C21919 * C3573;
    const double C26706 = C139356 * C3573;
    const double C26825 = C21918 * C3573;
    const double C36098 = C29775 * C3573;
    const double C44210 = C43031 * C3573;
    const double C65634 = C141341 * C3573;
    const double C65946 = C63708 * C3573;
    const double C73473 = C141502 * C3573;
    const double C76239 = C71450 * C3573;
    const double C80368 = C63607 * C3573;
    const double C82217 = C14078 * C3573;
    const double C90637 = C89456 * C3573;
    const double C98124 = C141478 * C3573;
    const double C5782 =
        (C139646 * C139948 + C140241 + C140241 +
         C139804 * (2 * ae * C139817 + C139804 * C139646 * C139953)) /
        C139335;
    const double C5787 = C275 * C5450;
    const double C15996 = C141365 * C5450;
    const double C16591 = C188 * C5450;
    const double C16706 = C14079 * C5450;
    const double C21740 = C14078 * C5450;
    const double C43039 = C42875 * C5450;
    const double C43557 = C43032 * C5450;
    const double C44913 = C42874 * C5450;
    const double C45390 = C139356 * C5450;
    const double C45617 = C43031 * C5450;
    const double C50674 = C43030 * C5450;
    const double C53090 = C29775 * C5450;
    const double C53199 = C5966 * C5450;
    const double C89019 = C71450 * C5450;
    const double C91327 = C141365 * C5450;
    const double C92013 = C89456 * C5450;
    const double C107074 = C106914 * C5450;
    const double C107592 = C107067 * C5450;
    const double C108894 = C141505 * C5450;
    const double C7363 = C6993 * C5967;
    const double C22303 = C6993 * C21920;
    const double C22919 = C6993 * C139356;
    const double C23305 = C6993 * C21919;
    const double C30453 = C6993 * C29775;
    const double C65082 = C6993 * C63708;
    const double C71928 = C6993 * C71545;
    const double C72544 = C6993 * C71450;
    const double C7708 = C7705 + C3422;
    const double C36664 = C36658 + C18280;
    const double C8385 = C8055 * C5967;
    const double C24297 = C8055 * C21919;
    const double C26591 = C8055 * C139356;
    const double C66070 = C8055 * C63708;
    const double C76130 = C8055 * C71450;
    const double C8707 = C8705 + C4080;
    const double C80506 = C14972 + C14973;
    const double C80503 = C14973 + C14972;
    const double C15620 = C15616 + C15605;
    const double C82644 = C82642 + C19194;
    const double C16593 = C15882 * C14079;
    const double C43462 = C15882 * C43032;
    const double C44790 = C15882 * C139356;
    const double C45510 = C15882 * C43031;
    const double C59659 = C15882 * C29775;
    const double C91905 = C15882 * C89456;
    const double C107497 = C15882 * C107067;
    const double C108777 = C15882 * C71450;
    const double C16255 = C16252 + C5567;
    const double C52886 = C52880 + C13537;
    const double C7931 = C141341 * C3577;
    const double C14845 = C141327 * C3577;
    const double C23856 = C21820 * C3577;
    const double C65630 = C141341 * C3577;
    const double C73467 = C141502 * C3577;
    const double C80364 = C63607 * C3577;
    const double C98120 = C141478 * C3577;
    const double C139680 = C139679 + C139672;
    const double C831 =
        (C139761 * C139675 + C139969 + C139969 +
         C139646 * (2 * ae * C139761 * C139671 + C139646 * C139962)) /
        C139335;
    const double C3031 = (ae * C139767 + C139646 * C139771 + C139969 +
                          C139761 * (C139678 + C139761 * C139782)) /
                         C139335;
    const double C3143 = (ae * C139767 + C139646 * C139852 + C139969 +
                          C139761 * (C139678 + C139761 * C139857)) /
                         C139335;
    const double C3651 = (C139969 + C139804 * C139761 * C139825) / C139335;
    const double C3935 = (C139969 + C139804 * C139761 * C139915) / C139335;
    const double C7930 = C5967 * C3495;
    const double C8048 = C275 * C3495;
    const double C10828 = C5864 * C3495;
    const double C14844 = C188 * C3495;
    const double C14958 = C14079 * C3495;
    const double C23745 = C139356 * C3495;
    const double C23855 = C21919 * C3495;
    const double C26711 = C141224 * C3495;
    const double C30998 = C29775 * C3495;
    const double C36097 = C141219 * C3495;
    const double C43893 = C43031 * C3495;
    const double C65629 = C63708 * C3495;
    const double C68413 = C141492 * C3495;
    const double C73356 = C71450 * C3495;
    const double C76244 = C141224 * C3495;
    const double C80638 = C71442 * C3495;
    const double C81769 = C14078 * C3495;
    const double C90323 = C89456 * C3495;
    const double C98119 = C5966 * C3495;
    const double C115908 = C141462 * C3495;
    const double C1609 =
        (C139804 * C139675 + C140033 + C140033 +
         C139646 * (2 * ae * C139804 * C139671 + C139646 * C140026)) /
        C139335;
    const double C3721 = (C140033 + C139761 * C139804 * C139857) / C139335;
    const double C5454 = (ae * C139810 + C139646 * C139814 + C140033 +
                          C139804 * (C139678 + C139804 * C139825)) /
                         C139335;
    const double C5674 = (ae * C139810 + C139646 * C139910 + C140033 +
                          C139804 * (C139678 + C139804 * C139915)) /
                         C139335;
    const double C23070 = C23043 + C23044;
    const double C30555 = C30539 + C30540;
    const double C72689 = C72662 + C72663;
    const double C45057 = C45030 + C45031;
    const double C52758 = C52752 + C52753;
    const double C88709 = C88703 + C88704;
    const double C140274 = C140273 + C140270;
    const double C10934 =
        (C139804 * C139874 + C140328 + C140328 +
         C139761 * (2 * ae * C139804 * C139772 + C139761 * C139804 * C139879)) /
        C139335;
    const double C13768 =
        (ae * C139810 + C139761 * C139931 + C140328 +
         C139804 * (C140272 + C139804 * (C139818 + C139761 * C139934))) /
        C139335;
    const double C33097 = C141353 * C26925;
    const double C38994 = C141365 * C26925;
    const double C128056 = C141365 * C26925;
    const double C140426 = C140425 + C140422;
    const double C13845 =
        (C139761 * C139948 + C140379 + C140379 +
         C139804 * (2 * ae * C140376 + C139804 * C139761 * C139953)) /
        C139335;
    const double C13849 = C275 * C13374;
    const double C19193 = C14079 * C13374;
    const double C39580 = C141365 * C13374;
    const double C40036 = C29775 * C13374;
    const double C42713 = C21919 * C13374;
    const double C42796 = C14078 * C13374;
    const double C44529 = C43032 * C13374;
    const double C48044 = C188 * C13374;
    const double C48147 = C43031 * C13374;
    const double C51655 = C42875 * C13374;
    const double C53197 = C5967 * C13374;
    const double C55248 = C42874 * C13374;
    const double C55805 = C5966 * C13374;
    const double C58433 = C43030 * C13374;
    const double C89123 = C63708 * C13374;
    const double C94480 = C89456 * C13374;
    const double C102806 = C141365 * C13374;
    const double C108548 = C107067 * C13374;
    const double C132732 = C106914 * C13374;
    const double C136189 = C141505 * C13374;
    const double C19092 = C141327 * C4004;
    const double C37535 = C21820 * C4004;
    const double C40144 = C21819 * C4004;
    const double C53194 = C141341 * C4004;
    const double C55802 = C141478 * C4004;
    const double C82496 = C141341 * C4004;
    const double C85806 = C63607 * C4004;
    const double C126601 = C141502 * C4004;
    const double C129160 = C141507 * C4004;
    const double C10124 = C10122 + C10123;
    const double C30550 = C30529 + C30530;
    const double C36318 = C36308 + C36309;
    const double C18793 = C18786 + C3795;
    const double C52877 = C52862 + C8264;
    const double C55477 = C55467 + C10938;
    const double C11047 = C11045 + C11046;
    const double C18488 = C18480 + C18481;
    const double C32956 = C32948 + C32949;
    const double C36317 = C36306 + C36307;
    const double C36894 = C36883 + C36884;
    const double C39932 = C39927 + C39928;
    const double C51979 = C51974 + C51975;
    const double C52533 = C52510 + C52511;
    const double C55133 = C55117 + C55118;
    const double C81630 = C81611 + C81612;
    const double C98698 = C98689 + C98690;
    const double C52879 = C52866 + C13536;
    const double C47737 = C47732 + C18790;
    const double C39705 = C39693 + C39694;
    const double C39931 = C39925 + C39926;
    const double C42218 = C42210 + C42211;
    const double C47416 = C47410 + C47411;
    const double C55479 = C55471 + C51871;
    const double C51980 = C51976 + C51977;
    const double C52537 = C52518 + C52519;
    const double C55137 = C55125 + C55126;
    const double C55594 = C55589 + C55590;
    const double C88501 = C88495 + C88496;
    const double C103207 = C103203 + C103204;
    const double C449 = C445 + C432;
    const double C450 = C446 + C435;
    const double C1193 = C1190 + C1182;
    const double C1971 = C1968 + C1960;
    const double C21416 = C21415 + C21410;
    const double C63136 = C59653 + C59654;
    const double C21660 = C21658 + C21659;
    const double C42634 = C42632 + C42633;
    const double C53205 = C53195 + C53196;
    const double C528 = C511 + C525;
    const double C6358 = C6350 + C6351;
    const double C662 = C645 + C659;
    const double C14523 = C14515 + C14516;
    const double C744 = C740 + C727;
    const double C529 = C514 + C526;
    const double C663 = C648 + C660;
    const double C745 = C741 + C730;
    const double C1527 = C1524 + C1516;
    const double C2305 = C2302 + C2294;
    const double C10372 = C10371 + C10366;
    const double C32295 = C30447 + C30448;
    const double C11367 = C11366 + C11361;
    const double C139723 = C139715 + C139705;
    const double C43788 = C141327 * C13298;
    const double C52531 = C141341 * C13298;
    const double C81620 = C141341 * C13298;
    const double C139708 = C139707 + C139696;
    const double C10599 =
        (C139804 *
         (C139782 + C139966 + C139761 * (C139705 + C139761 * C139796))) /
        C139335;
    const double C140152 = ae * C140151;
    const double C29097 = C139356 * C13209;
    const double C36775 = C29775 * C13209;
    const double C43787 = C188 * C13209;
    const double C43891 = C43032 * C13209;
    const double C47622 = C141224 * C13209;
    const double C51767 = C141219 * C13209;
    const double C52530 = C5967 * C13209;
    const double C78604 = C71450 * C13209;
    const double C81619 = C63708 * C13209;
    const double C81767 = C14079 * C13209;
    const double C85254 = C141224 * C13209;
    const double C99513 = C89456 * C13209;
    const double C107918 = C107067 * C13209;
    const double C140094 = ae * C140093;
    const double C9671 = (2 * C139968 + C139761 * C140093) / C139330;
    const double C10474 = (C139804 * C140093) / C139330;
    const double C140196 = ae * C140195;
    const double C21039 = (2 * C140032 + C139804 * C140195) / C139330;
    const double C32241 =
        (4 * (2 * C140453 + ae * C140454 + C139761 * C140608) +
         ae * (3 * C140454 + C139761 * C140609) +
         C139761 *
             (3 * C140608 + ae * C140609 +
              C139761 * (2 * C140604 + ae * C140605 +
                         C139761 * (C139790 + ae * C139761 * C139731 +
                                    C139761 * (ae * C139731 +
                                               C139761 * std::pow(C139652, 7) *
                                                   bs[7] * C139765))))) /
        C139335;
    const double C32791 =
        (C139804 *
         (3 * C140608 + ae * C140609 +
          C139761 * (2 * C140604 + ae * C140605 +
                     C139761 * (C139790 + ae * C139761 * C139731 +
                                C139761 * (ae * C139731 +
                                           C139761 * std::pow(C139652, 7) *
                                               bs[7] * C139765))))) /
        C139335;
    const double C34616 =
        (2 * C140453 + ae * C140454 + C139761 * C140608 +
         (2 * C140604 + ae * C140605 +
          C139761 * (C139790 + ae * C139761 * C139731 +
                     C139761 * (ae * C139731 + C139761 * std::pow(C139652, 7) *
                                                   bs[7] * C139765))) *
             C139943) /
        C139335;
    const double C42200 =
        (2 * C139804 * C140608 +
         C139804 * (C140608 +
                    (C139790 + ae * C139761 * C139731 +
                     C139761 * (ae * C139731 + C139761 * std::pow(C139652, 7) *
                                                   bs[7] * C139765)) *
                        C139943)) /
        C139335;
    const double C32354 =
        (4 * (2 * C140462 + ae * C140454 + C139761 * C140618) +
         ae * (3 * C140454 + C139761 * C140609) +
         C139761 *
             (3 * C140618 + ae * C140609 +
              C139761 * (2 * C140616 + ae * C140605 +
                         C139761 * (C139861 + ae * C139761 * C139731 +
                                    C139761 * (ae * C139731 +
                                               C139761 * std::pow(C139652, 7) *
                                                   bs[7] * C139849))))) /
        C139335;
    const double C55251 = C55239 + C55240;
    const double C63196 =
        (4 * (2 * C140807 + ae * C140808 + C139804 * C140935) +
         ae * (3 * C140808 + C139804 * C140936) +
         C139804 *
             (3 * C140935 + ae * C140936 +
              C139804 * (2 * C140931 + ae * C140932 +
                         C139804 * (C139833 + ae * C139804 * C139731 +
                                    C139804 * (ae * C139731 +
                                               C139804 * std::pow(C139652, 7) *
                                                   bs[7] * C139808))))) /
        C139335;
    const double C63417 =
        (4 * (2 * C140826 + ae * C140808 + C139804 * C140948) +
         ae * (3 * C140808 + C139804 * C140936) +
         C139804 *
             (3 * C140948 + ae * C140936 +
              C139804 * (2 * C140946 + ae * C140932 +
                         C139804 * (C139919 + ae * C139804 * C139731 +
                                    C139804 * (ae * C139731 +
                                               C139804 * std::pow(C139652, 7) *
                                                   bs[7] * C139907))))) /
        C139335;
    const double C32301 = C32297 + C32298;
    const double C32361 = C32358 + C32359;
    const double C32869 = C32861 + C32862;
    const double C32953 = C32942 + C32943;
    const double C38762 = C38752 + C38753;
    const double C127824 = C127814 + C127815;
    const double C39583 = C39567 + C39568;
    const double C39704 = C39691 + C39692;
    const double C54426 = C54414 + C54415;
    const double C128627 = C128619 + C128620;
    const double C63142 = C63138 + C63139;
    const double C63256 = C63253 + C63254;
    const double C10483 = C5864 * C3499;
    const double C26363 = C141224 * C3499;
    const double C35754 = C141219 * C3499;
    const double C68089 = C141492 * C3499;
    const double C75912 = C141224 * C3499;
    const double C80222 = C71442 * C3499;
    const double C115508 = C141462 * C3499;
    const double C39343 = C141219 * C13211;
    const double C47295 = C141462 * C13211;
    const double C84837 = C71442 * C13211;
    const double C139743 = C139740 * ae;
    const double C913 = (C139761 * (3 * C139783 + C139646 * C139801) +
                         (3 * C139697 + C139646 * C139740) * ae) /
                        C139330;
    const double C1785 = (C139804 * (3 * C139826 + C139646 * C139844) +
                          (3 * C139697 + C139646 * C139740) * ae) /
                         C139330;
    const double C3649 =
        (C139804 * C139761 * C139844 + C139761 * C139740 * ae) / C139330;
    const double C113 = 4 * (2 * C139669 + C139646 * C139697) +
                        C139646 * (3 * C139697 + C139646 * C139740);
    const double C824 = C139761 * (3 * C139697 + C139646 * C139740);
    const double C1602 = C139804 * (3 * C139697 + C139646 * C139740);
    const double C2963 = 2 * C139669 + C139646 * C139697 + C139740 * C139869;
    const double C3493 = C139804 * C139761 * C139740;
    const double C5328 = 2 * C139669 + C139646 * C139697 + C139740 * C139943;
    const double C140293 = ae * C140290;
    const double C140292 = C139761 * C140290;
    const double C140333 = C139804 * C140290;
    const double C140444 = ae * C140441;
    const double C140443 = C139804 * C140441;
    const double C140388 = C140387 + C140291;
    const double C11043 =
        (ae * C139783 + C139804 * C139902 +
         ae * (C139804 * C139761 * C139840 + C140291) +
         C139761 *
             (ae * (C139804 * C139840 + C139736) +
              C139761 * (ae * C139797 +
                         C139804 * (C139900 + std::pow(C139652, 7) * bs[7] *
                                                  C139891 * C139650)))) /
        C139335;
    const double C140503 = C139785 + C140501;
    const double C140555 = ae * C140553;
    const double C140582 = C140280 + C140581;
    const double C140868 = C139828 + C140865;
    const double C140596 = C140595 + C140500;
    const double C27246 = C275 * C26580;
    const double C36653 = C14079 * C26580;
    const double C102404 = C89456 * C26580;
    const double C140795 = ae * C140793;
    const double C140794 = C139804 * C140793;
    const double C139748 = C139746 + C139732;
    const double C140158 = ae * C140156;
    const double C140351 = C139964 + C140350;
    const double C140103 = ae * C140101;
    const double C140254 = C139761 * C140101;
    const double C140315 = C139804 * C140101;
    const double C29090 = (C140093 + C140101 * C139943) / C139330;
    const double C140205 = ae * C140203;
    const double C140394 = C139804 * C140203;
    const double C140642 = C140640 + C140632;
    const double C140723 = ae * C140721;
    const double C140746 = C139804 * C140721;
    const double C140977 = C140976 + C140969;
    const double C139747 = C139646 * C139745;
    const double C139984 = C139983 + C139979;
    const double C47292 =
        (2 * ae *
             (2 * C139804 * C139973 +
              C139804 * (C139973 + C139761 * C139731 * C139943)) +
         C139646 * (2 * C140154 +
                    C139804 * (C139974 +
                               C139761 *
                                   (C139718 * C139719 +
                                    C139650 * bs[7] * std::pow(C139652, 7)) *
                                   C139653 * C139943))) /
        C139335;
    const double C57768 =
        (3 * (C139962 + C139974 * C139943) +
         C139804 * (2 * C140154 +
                    C139804 * (C139974 +
                               C139761 *
                                   (C139718 * C139719 +
                                    C139650 * bs[7] * std::pow(C139652, 7)) *
                                   C139653 * C139943))) /
        C139335;
    const double C47297 = C141224 * C13212;
    const double C51449 = C141219 * C13212;
    const double C84835 = C141224 * C13212;
    const double C55012 = C141219 * C42113;
    const double C140048 = C140047 + C140043;
    const double C9674 =
        (2 * ae *
             (2 * C139761 * C139671 + C139761 * (C139671 + C139695 * C139869)) +
         C139646 * (2 * C139962 + C139761 * C140099)) /
        C139335;
    const double C10477 = (2 * ae * C139804 * (C139671 + C139695 * C139869) +
                           C139646 * C139804 * C140099) /
                          C139335;
    const double C25572 = (3 * (C139675 + C139701 * C139869) +
                           C139761 * (2 * C139962 + C139761 * C140099)) /
                          C139335;
    const double C25573 =
        (2 * ae *
             (3 * (C139671 + C139695 * C139869) +
              C139761 *
                  (2 * C139973 + C139761 * (C139695 + C139731 * C139869))) +
         C139646 * (3 * C140099 +
                    C139761 * (2 * C139974 +
                               C139761 * (C139738 + (C139718 * C139719 +
                                                     C139650 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139869)))) /
        C139335;
    const double C26355 =
        (C139804 * (2 * C139962 + C139761 * C140099)) / C139335;
    const double C29091 =
        (C139675 + C139701 * C139869 + C140099 * C139943) / C139335;
    const double C29092 =
        (2 * ae * (C140454 + (C139695 + C139731 * C139869) * C139943) +
         C139646 *
             (C140099 + (C139738 + (C139718 * C139719 +
                                    C139650 * bs[7] * std::pow(C139652, 7)) *
                                       C139653 * C139869) *
                            C139943)) /
        C139335;
    const double C32182 =
        (4 * (2 * C139962 + C139761 * C140099) +
         C139761 * (3 * C140099 +
                    C139761 * (2 * C139974 +
                               C139761 * (C139738 + (C139718 * C139719 +
                                                     C139650 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139869)))) /
        C139335;
    const double C32704 =
        (C139804 * (3 * C140099 +
                    C139761 * (2 * C139974 +
                               C139761 * (C139738 + (C139718 * C139719 +
                                                     C139650 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139869)))) /
        C139335;
    const double C34560 =
        (2 * C139962 + C139761 * C140099 +
         (2 * C139974 +
          C139761 * (C139738 + (C139718 * C139719 +
                                C139650 * bs[7] * std::pow(C139652, 7)) *
                                   C139653 * C139869)) *
             C139943) /
        C139335;
    const double C42114 =
        (2 * C139804 * C140099 +
         C139804 *
             (C140099 + (C139738 + (C139718 * C139719 +
                                    C139650 * bs[7] * std::pow(C139652, 7)) *
                                       C139653 * C139869) *
                            C139943)) /
        C139335;
    const double C21042 =
        (2 * ae *
             (2 * C139804 * C139671 + C139804 * (C139671 + C139695 * C139943)) +
         C139646 * (2 * C140026 + C139804 * C140201)) /
        C139335;
    const double C49993 = (3 * (C139675 + C139701 * C139943) +
                           C139804 * (2 * C140026 + C139804 * C140201)) /
                          C139335;
    const double C49994 =
        (2 * ae *
             (3 * (C139671 + C139695 * C139943) +
              C139804 *
                  (2 * C140037 + C139804 * (C139695 + C139731 * C139943))) +
         C139646 * (3 * C140201 +
                    C139804 * (2 * C140038 +
                               C139804 * (C139738 + (C139718 * C139719 +
                                                     C139650 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139943)))) /
        C139335;
    const double C63076 =
        (4 * (2 * C140026 + C139804 * C140201) +
         C139804 * (3 * C140201 +
                    C139804 * (2 * C140038 +
                               C139804 * (C139738 + (C139718 * C139719 +
                                                     C139650 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139943)))) /
        C139335;
    const double C424 =
        (4 * (2 * C139646 * C139879 + C139646 * C139886) +
         C139646 * (3 * C139886 +
                    C139646 * (2 * C139646 * C139884 +
                               C139646 * (C139884 + (C139718 * C139719 +
                                                     C139869 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139650)))) /
        C139335;
    const double C1168 =
        (2 * ae * (2 * C139774 + C139646 * C139783) +
         C139761 * (2 * C139646 * C139879 + C139646 * C139886)) /
        C139335;
    const double C1172 =
        (2 * ae * (3 * C139783 + C139646 * C139801) +
         C139761 * (3 * C139886 +
                    C139646 * (2 * C139646 * C139884 +
                               C139646 * (C139884 + (C139718 * C139719 +
                                                     C139869 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139650)))) /
        C139335;
    const double C1946 =
        (C139804 * (2 * C139646 * C139879 + C139646 * C139886)) / C139335;
    const double C1950 =
        (C139804 * (3 * C139886 +
                    C139646 * (2 * C139646 * C139884 +
                               C139646 * (C139884 + (C139718 * C139719 +
                                                     C139869 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139650)))) /
        C139335;
    const double C3792 =
        (2 * ae * C139804 * C139783 + C139761 * C139804 * C139886) / C139335;
    const double C5563 =
        (C139874 + C139879 * C139650 + C139886 * C139943) / C139335;
    const double C5564 =
        (2 * C139646 * C139879 + C139646 * C139886 +
         (2 * C139646 * C139884 +
          C139646 * (C139884 + (C139718 * C139719 +
                                C139869 * bs[7] * std::pow(C139652, 7)) *
                                   C139653 * C139650)) *
             C139943) /
        C139335;
    const double C13533 =
        (2 * ae * (C139783 + C139797 * C139943) +
         C139761 *
             (C139886 + (C139884 + (C139718 * C139719 +
                                    C139869 * bs[7] * std::pow(C139652, 7)) *
                                       C139653 * C139650) *
                            C139943)) /
        C139335;
    const double C21405 =
        (2 * C139804 * C139886 +
         C139804 *
             (C139886 + (C139884 + (C139718 * C139719 +
                                    C139869 * bs[7] * std::pow(C139652, 7)) *
                                       C139653 * C139650) *
                            C139943)) /
        C139335;
    const double C140498 = C140488 + C140494;
    const double C47728 =
        (2 * ae *
             (2 * C139804 * C139785 + C139804 * (C139785 + C140491 * C139943)) +
         C139761 * (2 * C140551 +
                    C139804 * (C140489 +
                               C139646 *
                                   (C139718 * C139719 +
                                    C139869 * bs[7] * std::pow(C139652, 7)) *
                                   C139653 * C139943))) /
        C139335;
    const double C50345 =
        (3 * (C140277 + C140489 * C139943) +
         C139804 * (2 * C140551 +
                    C139804 * (C140489 +
                               C139646 *
                                   (C139718 * C139719 +
                                    C139869 * bs[7] * std::pow(C139652, 7)) *
                                   C139653 * C139943))) /
        C139335;
    const double C140634 = C139761 * C140630;
    const double C140697 = C140696 + C140692;
    const double C42459 =
        (2 * ae *
             (2 * C139804 * C139772 + C139804 * (C139772 + C139779 * C139943)) +
         C139761 * (2 * C140545 + C139804 * C140719)) /
        C139335;
    const double C50344 = (3 * (C139874 + C139879 * C139943) +
                           C139804 * (2 * C140545 + C139804 * C140719)) /
                          C139335;
    const double C58107 =
        (2 * ae *
             (3 * C140819 +
              C139804 *
                  (2 * C140686 + C139804 * (C139779 + C139792 * C139943))) +
         C139761 * (3 * C140719 +
                    C139804 * (2 * C140687 +
                               C139804 * (C139884 + (C139718 * C139719 +
                                                     C139869 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139943)))) /
        C139335;
    const double C63308 =
        (4 * (2 * C140545 + C139804 * C140719) +
         C139804 * (3 * C140719 +
                    C139804 * (2 * C140687 +
                               C139804 * (C139884 + (C139718 * C139719 +
                                                     C139869 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139943)))) /
        C139335;
    const double C719 =
        (4 * (2 * C139646 * C139953 + C139646 * C139960) +
         C139646 * (3 * C139960 +
                    C139646 * (2 * C139646 * C139958 +
                               C139646 * (C139958 + (C139718 * C139719 +
                                                     C139943 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139650)))) /
        C139335;
    const double C1502 =
        (C139761 * (2 * C139646 * C139953 + C139646 * C139960)) / C139335;
    const double C1506 =
        (C139761 * (3 * C139960 +
                    C139646 * (2 * C139646 * C139958 +
                               C139646 * (C139958 + (C139718 * C139719 +
                                                     C139943 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139650)))) /
        C139335;
    const double C2280 =
        (2 * ae * (2 * C139817 + C139646 * C139826) +
         C139804 * (2 * C139646 * C139953 + C139646 * C139960)) /
        C139335;
    const double C2284 =
        (2 * ae * (3 * C139826 + C139646 * C139844) +
         C139804 * (3 * C139960 +
                    C139646 * (2 * C139646 * C139958 +
                               C139646 * (C139958 + (C139718 * C139719 +
                                                     C139943 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139650)))) /
        C139335;
    const double C3418 =
        (C139948 + C139953 * C139650 + C139960 * C139869) / C139335;
    const double C3419 =
        (2 * C139646 * C139953 + C139646 * C139960 +
         (2 * C139646 * C139958 +
          C139646 * (C139958 + (C139718 * C139719 +
                                C139943 * bs[7] * std::pow(C139652, 7)) *
                                   C139653 * C139650)) *
             C139869) /
        C139335;
    const double C4076 =
        (2 * ae * C139761 * C139826 + C139804 * C139761 * C139960) / C139335;
    const double C10363 =
        (2 * C139761 * C139960 +
         C139761 *
             (C139960 + (C139958 + (C139718 * C139719 +
                                    C139943 * bs[7] * std::pow(C139652, 7)) *
                                       C139653 * C139650) *
                            C139869)) /
        C139335;
    const double C11358 =
        (2 * ae * (C139826 + C139840 * C139869) +
         C139804 *
             (C139960 + (C139958 + (C139718 * C139719 +
                                    C139943 * bs[7] * std::pow(C139652, 7)) *
                                       C139653 * C139650) *
                            C139869)) /
        C139335;
    const double C140861 = C140855 + C140856;
    const double C32629 =
        (4 * (2 * C139761 * C139953 + C139761 * C140677) +
         C139761 * (3 * C140677 +
                    C139761 * (2 * C139761 * C139958 +
                               C139761 * (C139958 + (C139718 * C139719 +
                                                     C139943 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139869)))) /
        C139335;
    const double C33313 =
        (2 * ae * (3 * C140514 + C139761 * C140665) +
         C139804 * (3 * C140677 +
                    C139761 * (2 * C139761 * C139958 +
                               C139761 * (C139958 + (C139718 * C139719 +
                                                     C139943 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139869)))) /
        C139335;
    const double C140910 = C140900 + C140906;
    const double C140971 = C139804 * C140967;
    const double C140643 = C140641 * ae;
    const double C32858 = (C139804 * (3 * C140514 + C139761 * C140665) +
                           (3 * C140476 + C139761 * C140641) * ae) /
                          C139330;
    const double C32180 = 4 * (2 * C140268 + C139761 * C140476) +
                          C139761 * (3 * C140476 + C139761 * C140641);
    const double C32702 = C139804 * (3 * C140476 + C139761 * C140641);
    const double C34558 = 2 * C140268 + C139761 * C140476 + C140641 * C139943;
    const double C140773 = ae * C140770;
    const double C140772 = C139804 * C140770;
    const double C140915 = C140654 + C140913;
    const double C140973 = C140970 * ae;
    const double C63074 = 4 * (2 * C140420 + C139804 * C140846) +
                          C139804 * (3 * C140846 + C139804 * C140970);
    const double C140127 = ae * C140126;
    const double C3028 = (C139767 + C139772 * C139650 + C139761 * C140126 +
                          C139761 * C139697 * ae) /
                         C139330;
    const double C3574 = (C139804 * C140126) / C139330;
    const double C13296 = (C140126 + C140290 * C139943) / C139330;
    const double C225 = C216 + C217;
    const double C443 = C436 + C437;
    const double C523 = C517 + C518;
    const double C933 = C922 + C923;
    const double C1185 = C1174 + C1175;
    const double C6003 = C5989 + C5990;
    const double C6257 = C6245 + C6246;
    const double C63744 = C63730 + C63731;
    const double C1711 = C1700 + C1701;
    const double C1963 = C1952 + C1953;
    const double C2052 = C2043 + C2044;
    const double C14358 = C14350 + C14351;
    const double C89735 = C89727 + C89728;
    const double C16251 = C16243 + C5568;
    const double C15880 = C15865 + C15866;
    const double C16366 = C16358 + C16359;
    const double C43307 = C43298 + C43299;
    const double C91682 = C91674 + C91675;
    const double C29176 =
        (C139782 + C139966 + C139761 * C140457 +
         (C139796 + C139982 +
          C139761 * (C139744 +
                     C139761 * (ae * C139792 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139765))) *
             C139943) /
        C139335;
    const double C47404 =
        (2 * C139804 * C140457 +
         C139804 * (C140457 +
                    (C139744 +
                     C139761 * (ae * C139792 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139765)) *
                        C139943)) /
        C139335;
    const double C200 =
        (4 * (2 * C139782 + ae * C139783 + C139646 * C139800) +
         ae * (3 * C139783 + C139646 * C139801) +
         C139646 *
             (3 * C139800 + ae * C139801 +
              C139646 * (2 * C139796 + ae * C139797 +
                         C139646 * (C139790 + ae * C139646 * C139792 +
                                    C139646 * (ae * C139792 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139765))))) /
        C139335;
    const double C1692 =
        (C139804 * (2 * C139782 + ae * C139783 + C139646 * C139800)) / C139335;
    const double C1696 =
        (C139804 *
         (3 * C139800 + ae * C139801 +
          C139646 * (2 * C139796 + ae * C139797 +
                     C139646 * (C139790 + ae * C139646 * C139792 +
                                C139646 * (ae * C139792 +
                                           C139646 * std::pow(C139652, 7) *
                                               bs[7] * C139765))))) /
        C139335;
    const double C5397 =
        (C139771 + ae * C139774 + C139646 * C139782 + C139800 * C139943) /
        C139335;
    const double C5398 =
        (2 * C139782 + ae * C139783 + C139646 * C139800 +
         (2 * C139796 + ae * C139797 +
          C139646 * (C139790 + ae * C139646 * C139792 +
                     C139646 * (ae * C139792 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139765))) *
             C139943) /
        C139335;
    const double C21141 =
        (2 * C139804 * C139800 +
         C139804 * (C139800 +
                    (C139790 + ae * C139646 * C139792 +
                     C139646 * (ae * C139792 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139765)) *
                        C139943)) /
        C139335;
    const double C367 =
        (4 * (2 * C139857 + ae * C139783 + C139646 * C139865) +
         ae * (3 * C139783 + C139646 * C139801) +
         C139646 *
             (3 * C139865 + ae * C139801 +
              C139646 * (2 * C139863 + ae * C139797 +
                         C139646 * (C139861 + ae * C139646 * C139792 +
                                    C139646 * (ae * C139792 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139849))))) /
        C139335;
    const double C1875 =
        (C139804 * (2 * C139857 + ae * C139783 + C139646 * C139865)) / C139335;
    const double C1879 =
        (C139804 *
         (3 * C139865 + ae * C139801 +
          C139646 * (2 * C139863 + ae * C139797 +
                     C139646 * (C139861 + ae * C139646 * C139792 +
                                C139646 * (ae * C139792 +
                                           C139646 * std::pow(C139652, 7) *
                                               bs[7] * C139849))))) /
        C139335;
    const double C5509 =
        (C139852 + ae * C139774 + C139646 * C139857 + C139865 * C139943) /
        C139335;
    const double C5510 =
        (2 * C139857 + ae * C139783 + C139646 * C139865 +
         (2 * C139863 + ae * C139797 +
          C139646 * (C139861 + ae * C139646 * C139792 +
                     C139646 * (ae * C139792 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139849))) *
             C139943) /
        C139335;
    const double C21310 =
        (2 * C139804 * C139865 +
         C139804 * (C139865 +
                    (C139861 + ae * C139646 * C139792 +
                     C139646 * (ae * C139792 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139849)) *
                        C139943)) /
        C139335;
    const double C45283 = C45277 + C45278;
    const double C140284 = C139774 + C140282;
    const double C140331 = ae * C140330;
    const double C13538 = C5967 * C13295;
    const double C18791 = C188 * C13295;
    const double C29412 = C21919 * C13295;
    const double C43790 = C141327 * C13295;
    const double C44208 = C43032 * C13295;
    const double C47625 = C139356 * C13295;
    const double C51768 = C29775 * C13295;
    const double C51872 = C5966 * C13295;
    const double C52527 = C141341 * C13295;
    const double C71070 = C63708 * C13295;
    const double C81624 = C141341 * C13295;
    const double C82215 = C14079 * C13295;
    const double C85249 = C71450 * C13295;
    const double C99917 = C89456 * C13295;
    const double C108230 = C107067 * C13295;
    const double C45177 = C45176 + C21412;
    const double C45508 = C44805 * C43032;
    const double C50089 = C44805 * C139356;
    const double C59661 = C44805 * C29775;
    const double C109429 = C44805 * C107067;
    const double C113937 = C44805 * C71450;
    const double C140629 = C140620 + C140479;
    const double C140481 = C140480 + C140475;
    const double C140579 = ae * C140578;
    const double C42197 = (2 * C140327 + C139804 * C140578) / C139330;
    const double C34825 =
        (2 * (ae * (C139815 + C139804 * C140701 + C139804 * C139684 * ae) +
              C139761 * C140727) +
         ae * (C140514 + C139804 * (C139804 * C140660 + C140636) +
               C139804 * C140633 * ae) +
         C139761 *
             (C140727 +
              ae *
                  (C140654 + C139804 * (C139804 * C139761 * C139835 + C140632) +
                   C139804 * C140626 * ae) +
              C139761 *
                  (ae * (C139822 + C139804 * (C139804 * C139835 + C139727) +
                         C139804 * C139717 * ae) +
                   C139761 * (C139900 + ae * C139804 * C139792 +
                              C139804 * (ae * C139792 +
                                         C139804 * std::pow(C139652, 7) *
                                             bs[7] * C139891))))) /
        C139335;
    const double C42553 =
        (ae *
             (2 * C140421 +
              C139804 * (C139815 + C139804 * C140701 + C139804 * C139684 * ae) +
              (C139663 + C139684 * C139943) * ae) +
         C139761 * (2 * C140558 + ae * (C139772 + C139779 * C139943) +
                    C139804 * C140727)) /
        C139335;
    const double C42554 =
        (2 * C140558 + ae * (C139772 + C139779 * C139943) + C139804 * C140727 +
         ae * (2 * (C139804 * C140654 + C140475) +
               C139804 * (C140654 +
                          C139804 * (C139804 * C139761 * C139835 + C140632) +
                          C139804 * C140626 * ae) +
               (C140471 + C140626 * C139943) * ae) +
         C139761 *
             (ae * (2 * C140701 +
                    C139804 *
                        (C139822 + C139804 * (C139804 * C139835 + C139727) +
                         C139804 * C139717 * ae) +
                    (C139684 + C139717 * C139943) * ae) +
              C139761 * (2 * C140702 + ae * (C139779 + C139792 * C139943) +
                         C139804 * (C139900 + ae * C139804 * C139792 +
                                    C139804 * (ae * C139792 +
                                               C139804 * std::pow(C139652, 7) *
                                                   bs[7] * C139891))))) /
        C139335;
    const double C50430 =
        (3 * (C139894 + ae * C140817 + C139804 * C140558) +
         ae * (2 * C140817 + C139804 * C140819) +
         C139804 * (2 * C140558 + ae * C140819 + C139804 * C140727)) /
        C139335;
    const double C63366 =
        (4 * (2 * C140558 + ae * C140819 + C139804 * C140727) +
         ae * (3 * C140819 + C139804 * C140942) +
         C139804 *
             (3 * C140727 + ae * C140942 +
              C139804 * (2 * C140702 + ae * C140891 +
                         C139804 * (C139900 + ae * C139804 * C139792 +
                                    C139804 * (ae * C139792 +
                                               C139804 * std::pow(C139652, 7) *
                                                   bs[7] * C139891))))) /
        C139335;
    const double C63471 =
        (4 * (2 * C140832 + ae * C140819 + C139804 * C140954) +
         ae * (3 * C140819 + C139804 * C140942) +
         C139804 *
             (3 * C140954 + ae * C140942 +
              C139804 * (2 * C140952 + ae * C140891 +
                         C139804 * (C139937 + ae * C139804 * C139792 +
                                    C139804 * (ae * C139792 +
                                               C139804 * std::pow(C139652, 7) *
                                                   bs[7] * C139928))))) /
        C139335;
    const double C63313 = C63310 + C50351;
    const double C63143 = C63140 + C63141;
    const double C63255 = C63251 + C63252;
    const double C15881 = C15867 + C15868;
    const double C52542 = C52528 + C52529;
    const double C39468 = C39461 + C39462;
    const double C42214 = C42202 + C42203;
    const double C55140 = C55131 + C55132;
    const double C136081 = C136076 + C136077;
    const double C57865 = C57855 + C57856;
    const double C61350 = C61347 + C61348;
    const double C138769 = C138759 + C138760;
    const double C63137 = C59655 + C59656;
    const double C140245 = ae * C140244;
    const double C5451 = (C139810 + C139815 * C139650 + C139804 * C140244 +
                          C139804 * C139697 * ae) /
                         C139330;
    const double C1274 = C1265 + C1266;
    const double C312 = C303 + C304;
    const double C657 = C651 + C652;
    const double C738 = C731 + C732;
    const double C1027 = C1016 + C1017;
    const double C1431 = C1422 + C1423;
    const double C1519 = C1508 + C1509;
    const double C6526 = C6518 + C6519;
    const double C64267 = C64259 + C64260;
    const double C1805 = C1794 + C1795;
    const double C2209 = C2200 + C2201;
    const double C2297 = C2286 + C2287;
    const double C14115 = C14101 + C14102;
    const double C14628 = C14616 + C14617;
    const double C89492 = C89478 + C89479;
    const double C7704 = C7697 + C3423;
    const double C6991 = C6976 + C6977;
    const double C7593 = C7585 + C7586;
    const double C22474 = C22465 + C22466;
    const double C65307 = C65299 + C65300;
    const double C8704 = C8698 + C4081;
    const double C8053 = C8046 + C8047;
    const double C14968 = C14954 + C14955;
    const double C15614 = C15598 + C15599;
    const double C90333 = C90319 + C90320;
    const double C287 =
        (4 * (2 * C139825 + ae * C139826 + C139646 * C139843) +
         ae * (3 * C139826 + C139646 * C139844) +
         C139646 *
             (3 * C139843 + ae * C139844 +
              C139646 * (2 * C139839 + ae * C139840 +
                         C139646 * (C139833 + ae * C139646 * C139835 +
                                    C139646 * (ae * C139835 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139808))))) /
        C139335;
    const double C1008 =
        (C139761 * (2 * C139825 + ae * C139826 + C139646 * C139843)) / C139335;
    const double C1012 =
        (C139761 *
         (3 * C139843 + ae * C139844 +
          C139646 * (2 * C139839 + ae * C139840 +
                     C139646 * (C139833 + ae * C139646 * C139835 +
                                C139646 * (ae * C139835 +
                                           C139646 * std::pow(C139652, 7) *
                                               bs[7] * C139808))))) /
        C139335;
    const double C3090 =
        (C139814 + ae * C139817 + C139646 * C139825 + C139843 * C139869) /
        C139335;
    const double C3091 =
        (2 * C139825 + ae * C139826 + C139646 * C139843 +
         (2 * C139839 + ae * C139840 +
          C139646 * (C139833 + ae * C139646 * C139835 +
                     C139646 * (ae * C139835 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139808))) *
             C139869) /
        C139335;
    const double C9853 =
        (2 * C139761 * C139843 +
         C139761 * (C139843 +
                    (C139833 + ae * C139646 * C139835 +
                     C139646 * (ae * C139835 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139808)) *
                        C139869)) /
        C139335;
    const double C584 =
        (4 * (2 * C139915 + ae * C139826 + C139646 * C139923) +
         ae * (3 * C139826 + C139646 * C139844) +
         C139646 *
             (3 * C139923 + ae * C139844 +
              C139646 * (2 * C139921 + ae * C139840 +
                         C139646 * (C139919 + ae * C139646 * C139835 +
                                    C139646 * (ae * C139835 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139907))))) /
        C139335;
    const double C1345 =
        (C139761 * (2 * C139915 + ae * C139826 + C139646 * C139923)) / C139335;
    const double C1349 =
        (C139761 *
         (3 * C139923 + ae * C139844 +
          C139646 * (2 * C139921 + ae * C139840 +
                     C139646 * (C139919 + ae * C139646 * C139835 +
                                C139646 * (ae * C139835 +
                                           C139646 * std::pow(C139652, 7) *
                                               bs[7] * C139907))))) /
        C139335;
    const double C3310 =
        (C139910 + ae * C139817 + C139646 * C139915 + C139923 * C139869) /
        C139335;
    const double C3311 =
        (2 * C139915 + ae * C139826 + C139646 * C139923 +
         (2 * C139921 + ae * C139840 +
          C139646 * (C139919 + ae * C139646 * C139835 +
                     C139646 * (ae * C139835 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139907))) *
             C139869) /
        C139335;
    const double C10200 =
        (2 * C139761 * C139923 +
         C139761 * (C139923 +
                    (C139919 + ae * C139646 * C139835 +
                     C139646 * (ae * C139835 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139907)) *
                        C139869)) /
        C139335;
    const double C23536 = C23530 + C23531;
    const double C140384 = ae * C140383;
    const double C13375 =
        (C139761 * C139817 + C139804 * C140383 + C139804 * C140279 * ae) /
        C139330;
    const double C26926 =
        (2 * (C140434 + C139761 * C140561) +
         ae * (C139804 * C140521 + C140500) +
         C139761 *
             (C140561 + ae * (C139804 * C139761 * C140517 + C140496) +
              C139761 * (ae * (C139804 * C140517 + C139732) +
                         C139761 * (ae * C140491 + C139804 * C139646 *
                                                       std::pow(C139652, 7) *
                                                       bs[7] * C139891)))) /
        C139335;
    const double C140435 = C139817 + C140433;
    const double C23642 = C23641 + C10368;
    const double C23303 = C22934 * C21920;
    const double C25747 = C22934 * C139356;
    const double C30455 = C22934 * C29775;
    const double C72921 = C22934 * C71545;
    const double C75330 = C22934 * C71450;
    const double C24610 = C24609 + C11363;
    const double C36665 = C36659 + C18281;
    const double C24295 = C23974 * C21920;
    const double C26585 = C23974 * C139356;
    const double C73899 = C23974 * C71545;
    const double C76126 = C23974 * C71450;
    const double C140593 = ae * C140592;
    const double C29251 = (C139810 + C139815 * C139869 + C139804 * C140592 +
                           C139804 * C140476 * ae) /
                          C139330;
    const double C32634 = C32631 + C26249;
    const double C32302 = C32299 + C32300;
    const double C32527 = C32524 + C32525;
    const double C33318 = C33315 + C27245;
    const double C32870 = C32863 + C32864;
    const double C33175 = C33166 + C33167;
    const double C39235 = C39229 + C36646;
    const double C38764 = C38756 + C38757;
    const double C127826 = C127818 + C127819;
    const double C32466 =
        (4 * (2 * C140513 + ae * C140514 + C139761 * C140664) +
         ae * (3 * C140514 + C139761 * C140665) +
         C139761 *
             (3 * C140664 + ae * C140665 +
              C139761 * (2 * C140658 + ae * C140660 +
                         C139761 * (C139900 + ae * C139761 * C139835 +
                                    C139761 * (ae * C139835 +
                                               C139761 * std::pow(C139652, 7) *
                                                   bs[7] * C139891))))) /
        C139335;
    const double C32578 =
        (4 * (2 * C140526 + ae * C140514 + C139761 * C140674) +
         ae * (3 * C140514 + C139761 * C140665) +
         C139761 *
             (3 * C140674 + ae * C140665 +
              C139761 * (2 * C140672 + ae * C140660 +
                         C139761 * (C139937 + ae * C139761 * C139835 +
                                    C139761 * (ae * C139835 +
                                               C139761 * std::pow(C139652, 7) *
                                                   bs[7] * C139928))))) /
        C139335;
    const double C140764 = C140376 + C140762;
    const double C140966 = C140956 + C140703;
    const double C140847 = C140844 + C140845;
    const double C6992 = C6978 + C6979;
    const double C35996 = C35982 + C35983;
    const double C32296 = C30449 + C30450;
    const double C16134 = C16115 + C16116;
    const double C45063 = C45042 + C45043;
    const double C81932 = C81923 + C81924;
    const double C45059 = C45034 + C45035;
    const double C52759 = C52754 + C52755;
    const double C88707 = C88699 + C88700;
    const double C50266 = C50256 + C50257;
    const double C59810 = C59807 + C59808;
    const double C114102 = C114092 + C114093;
    const double C44106 = C141327 * C13532;
    const double C52873 = C141341 * C13532;
    const double C82069 = C141341 * C13532;
    const double C45171 = C141327 * C21404;
    const double C1192 = C1189 + C1179;
    const double C1970 = C1967 + C1957;
    const double C50355 = C50354 + C50350;
    const double C7483 = C7473 + C7474;
    const double C23429 = C23418 + C23419;
    const double C73045 = C73034 + C73035;
    const double C23427 = C23414 + C23415;
    const double C30787 = C30778 + C30779;
    const double C73043 = C73030 + C73031;
    const double C26092 = C26087 + C26088;
    const double C30788 = C30781 + C30782;
    const double C75658 = C75653 + C75654;
    const double C23638 = C141353 * C10362;
    const double C24606 = C141353 * C11357;
    const double C36651 = C141365 * C11357;
    const double C99103 = C141365 * C11357;
    const double C1526 = C1523 + C1513;
    const double C2304 = C2301 + C2291;
    const double C26253 = C26252 + C26248;
    const double C27249 = C27248 + C27244;
    const double C32186 = C29775 * C32181;
    const double C32712 = C29775 * C32703;
    const double C34565 = C29775 * C34559;
    const double C63080 = C29775 * C63075;
    const double C439 = C188 * C194;
    const double C1962 = C188 * C1691;
    const double C5569 = C188 * C5394;
    const double C63312 = C188 * C63133;
    const double C734 = C275 * C281;
    const double C1518 = C275 * C1007;
    const double C3424 = C275 * C3087;
    const double C32633 = C275 * C32292;
    const double C65197 = C65187 + C65188;
    const double C91465 = C91446 + C91447;
    const double C139362 = C139360 * ae;
    const double C139361 = C139360 * C139340;
    const double C5869 =
        ((-C139329 / C139330) / C139336 - (C139347 * be) / C139330) / C139336 -
        ((C139331 *
              ((-C139332 / C139330) / C139336 - (C139360 * be) / C139330) +
          C71442) *
         be) /
            C139330 +
        (-C139350 / C139330) / C139336 - (0 * be) / C139330;
    const double C5871 =
        ((-C139332 / C139330) / C139336 - (C139360 * be) / C139330) / C139336 -
        ((C139331 * ((-C139350 / C139330) / C139336 - (0 * be) / C139330) +
          C141224) *
         be) /
            C139330;
    const double C71448 =
        (-C139332 / C139330) / C139336 - (C139360 * be) / C139330;
    const double C30771 = C30551 * C275;
    const double C39077 = C30551 * C14078;
    const double C30768 = C30549 * C275;
    const double C36424 = C30549 * C14078;
    const double C54746 = C30549 * C43030;
    const double C30765 = C30547 * C275;
    const double C36420 = C30547 * C14078;
    const double C52079 = C30547 * C43030;
    const double C30792 = C30786 * C141353;
    const double C36429 = C30786 * C141479;
    const double C52086 = C30786 * C42873;
    const double C125566 = C30786 * C89302;
    const double C133153 = C30786 * C141508;
    const double C30791 = C30785 * C141353;
    const double C39076 = C30785 * C141479;
    const double C128138 = C30785 * C89302;
    const double C30790 = C30784 * C141353;
    const double C36425 = C30784 * C141479;
    const double C54745 = C30784 * C42873;
    const double C125562 = C30784 * C89302;
    const double C135703 = C30784 * C141508;
    const double C30789 = C30783 * C141353;
    const double C36421 = C30783 * C141479;
    const double C52080 = C30783 * C42873;
    const double C125558 = C30783 * C89302;
    const double C133147 = C30783 * C141508;
    const double C33174 = C32957 * C275;
    const double C36422 = C32957 * C14079;
    const double C37099 = C32957 * C21919;
    const double C39697 = C32957 * C21918;
    const double C40040 = C32957 * C14078;
    const double C52081 = C32957 * C43031;
    const double C52742 = C32957 * C5967;
    const double C55359 = C32957 * C5966;
    const double C55700 = C32957 * C43030;
    const double C61485 = C32957 * C188;
    const double C125559 = C32957 * C89456;
    const double C133763 = C32957 * C63708;
    const double C33171 = C32955 * C275;
    const double C36426 = C32955 * C14079;
    const double C37101 = C32955 * C21920;
    const double C39699 = C32955 * C21919;
    const double C40035 = C32955 * C14078;
    const double C54744 = C32955 * C43031;
    const double C55361 = C32955 * C5967;
    const double C125563 = C32955 * C89456;
    const double C126183 = C32955 * C71545;
    const double C136298 = C32955 * C63708;
    const double C33180 = C33177 * C141353;
    const double C36423 = C33177 * C141365;
    const double C40039 = C33177 * C141479;
    const double C52082 = C33177 * C42874;
    const double C55699 = C33177 * C42873;
    const double C125560 = C33177 * C141365;
    const double C129059 = C33177 * C89302;
    const double C133149 = C33177 * C141505;
    const double C136623 = C33177 * C141508;
    const double C33179 = C33176 * C141353;
    const double C36427 = C33176 * C141365;
    const double C40034 = C33176 * C141479;
    const double C54743 = C33176 * C42874;
    const double C125564 = C33176 * C141365;
    const double C129055 = C33176 * C89302;
    const double C135701 = C33176 * C141505;
    const double C37118 = C37114 * C21819;
    const double C52749 = C37114 * C141478;
    const double C59802 = C37114 * C141327;
    const double C126186 = C37114 * C141507;
    const double C133770 = C37114 * C63607;
    const double C37116 = C37112 * C21819;
    const double C52741 = C37112 * C141478;
    const double C59796 = C37112 * C141327;
    const double C126180 = C37112 * C141507;
    const double C133762 = C37112 * C63607;
    const double C37115 = C37111 * C21918;
    const double C52740 = C37111 * C5966;
    const double C59795 = C37111 * C188;
    const double C40038 = C39706 * C14079;
    const double C42377 = C39706 * C21919;
    const double C52083 = C39706 * C43032;
    const double C52746 = C39706 * C5967;
    const double C55363 = C39706 * C5966;
    const double C55698 = C39706 * C43031;
    const double C61487 = C39706 * C188;
    const double C129058 = C39706 * C89456;
    const double C133150 = C39706 * C107067;
    const double C133767 = C39706 * C63708;
    const double C42385 = C42383 * C21918;
    const double C52744 = C42383 * C5966;
    const double C59797 = C42383 * C188;
    const double C42384 = C42382 * C21819;
    const double C52745 = C42382 * C141478;
    const double C59798 = C42382 * C141327;
    const double C131360 = C42382 * C141507;
    const double C133766 = C42382 * C63607;
    const double C55696 = C55368 * C43032;
    const double C58023 = C55368 * C5967;
    const double C61489 = C55368 * C188;
    const double C136620 = C55368 * C107067;
    const double C138924 = C55368 * C63708;
    const double C58033 = C58030 * C5966;
    const double C59799 = C58030 * C188;
    const double C58032 = C58029 * C141478;
    const double C59800 = C58029 * C141327;
    const double C138925 = C58029 * C63607;
    const double C139459 = C139458 * C139340;
    const double C139476 = C139458 * ae;
    const double C63707 =
        (-C139447 / C139330) / C139336 - (C139458 * be) / C139330;
    const double C72099 = C72090 + C72091;
    const double C72098 = C72088 + C72089;
    const double C73152 = C73146 + C73147;
    const double C125982 = C125975 + C125976;
    const double C128520 = C128513 + C128514;
    const double C131202 = C131190 + C131191;
    const double C6270 = C6264 + C6250;
    const double C6267 = C6261 + C6241;
    const double C6265 = C6259 + C6235;
    const double C7255 = C7251 + C7239;
    const double C7253 = C7249 + C7233;
    const double C8279 = C8275 + C8263;
    const double C8277 = C8273 + C8257;
    const double C52890 = C52884 + C52865;
    const double C52888 = C52882 + C52861;
    const double C58122 = C58120 + C58113;
    const double C6268 = C6262 + C6244;
    const double C6266 = C6260 + C6238;
    const double C16259 = C16256 * C5863;
    const double C45166 = C16256 * C141462;
    const double C59879 = C16256 * C141219;
    const double C91570 = C16256 * C141506;
    const double C109111 = C16256 * C71442;
    const double C6513 = C6005 * C275;
    const double C6529 = C6528 * C141353;
    const double C57864 = C57854 * C141219;
    const double C21957 = C21944 + C21945;
    const double C21954 = C21938 + C21939;
    const double C21949 = C21928 + C21929;
    const double C21946 = C21922 + C21923;
    const double C22476 = C22469 + C22470;
    const double C22471 = C22459 + C22460;
    const double C22814 = C22807 + C22808;
    const double C23538 = C23534 + C23535;
    const double C23870 = C23863 + C23864;
    const double C23867 = C23857 + C23858;
    const double C24506 = C24502 + C24503;
    const double C36896 = C36887 + C36888;
    const double C36893 = C36881 + C36882;
    const double C37538 = C37532 + C37533;
    const double C39466 = C39457 + C39458;
    const double C39463 = C39451 + C39452;
    const double C42219 = C42212 + C42213;
    const double C42216 = C42206 + C42207;
    const double C42719 = C42715 + C42716;
    const double C139529 = C139528 * C139340;
    const double C139542 = C139528 * ae;
    const double C89455 =
        (-C139517 / C139330) / C139336 - (C139528 * be) / C139330;
    const double C107342 = C107333 + C107334;
    const double C107341 = C107331 + C107332;
    const double C109223 = C109217 + C109218;
    const double C132744 = C132737 + C132738;
    const double C133047 = C133043 + C133044;
    const double C135386 = C135374 + C135375;
    const double C136192 = C136180 + C136181;
    const double C14641 = C14635 + C14621;
    const double C14638 = C14632 + C14612;
    const double C14636 = C14630 + C14606;
    const double C15625 = C15621 + C15609;
    const double C15623 = C15619 + C15603;
    const double C16726 = C16722 + C16710;
    const double C16724 = C16720 + C16704;
    const double C36668 = C36662 + C36643;
    const double C36666 = C36660 + C36639;
    const double C39240 = C39238 + C39232;
    const double C40271 = C40267 + C40257;
    const double C40269 = C40265 + C40253;
    const double C14639 = C14633 + C14615;
    const double C14637 = C14631 + C14609;
    const double C36669 = C36663 + C36645;
    const double C36667 = C36661 + C36641;
    const double C747 = C743 * C141327;
    const double C6605 = C743 * C141478;
    const double C22551 = C743 * C21819;
    const double C64346 = C743 * C63607;
    const double C72176 = C743 * C141507;
    const double C14345 = C14117 * C188;
    const double C14361 = C14360 * C141327;
    const double C38761 = C38751 * C141219;
    const double C38760 = C38750 * C29775;
    const double C43069 = C43056 + C43057;
    const double C43066 = C43050 + C43051;
    const double C43061 = C43040 + C43041;
    const double C43058 = C43034 + C43035;
    const double C43309 = C43302 + C43303;
    const double C43304 = C43292 + C43293;
    const double C43908 = C43901 + C43902;
    const double C43905 = C43895 + C43896;
    const double C44216 = C44212 + C44213;
    const double C44921 = C44914 + C44915;
    const double C45285 = C45281 + C45282;
    const double C51665 = C51656 + C51657;
    const double C51662 = C51650 + C51651;
    const double C51978 = C51972 + C51973;
    const double C54431 = C54424 + C54425;
    const double C54428 = C54418 + C54419;
    const double C54666 = C54662 + C54663;
    const double C55256 = C55249 + C55250;
    const double C55253 = C55243 + C55244;
    const double C55595 = C55591 + C55592;
    const double C936 = C928 + C929;
    const double C5996 = C5975 + C5976;
    const double C6865 = C6854 + C6855;
    const double C21950 = C21930 + C21931;
    const double C22811 = C22801 + C22802;
    const double C63737 = C63716 + C63717;
    const double C23068 = C23039 + C23040;
    const double C30554 = C30537 + C30538;
    const double C72687 = C72658 + C72659;
    const double C1808 = C1800 + C1801;
    const double C14108 = C14087 + C14088;
    const double C16004 = C15993 + C15994;
    const double C43062 = C43042 + C43043;
    const double C44918 = C44908 + C44909;
    const double C89485 = C89464 + C89465;
    const double C37433 = C37430 + C37431;
    const double C45401 = C45386 + C45387;
    const double C82360 = C82353 + C82354;
    const double C6983 = C1030 * C5863;
    const double C6971 = C1030 * C5864;
    const double C22926 = C1030 * C141462;
    const double C22916 = C1030 * C141224;
    const double C30452 = C1030 * C141219;
    const double C64714 = C1030 * C141506;
    const double C64710 = C1030 * C141492;
    const double C72547 = C1030 * C71442;
    const double C72541 = C1030 * C141224;
    const double C30774 = C30553 * C275;
    const double C36428 = C30553 * C14078;
    const double C52085 = C30553 * C43030;
    const double C15872 = C1714 * C5863;
    const double C15860 = C1714 * C5864;
    const double C44797 = C1714 * C141462;
    const double C44787 = C1714 * C141224;
    const double C59658 = C1714 * C141219;
    const double C91211 = C1714 * C141506;
    const double C91207 = C1714 * C141492;
    const double C108780 = C1714 * C71442;
    const double C108774 = C1714 * C141224;
    const double C37117 = C37113 * C21918;
    const double C52748 = C37113 * C5966;
    const double C59801 = C37113 * C188;
    const double C7236 = C141341 * C3197;
    const double C22194 = C21821 * C3197;
    const double C23184 = C21820 * C3197;
    const double C64959 = C141341 * C3197;
    const double C71819 = C71446 * C3197;
    const double C72803 = C141502 * C3197;
    const double C8593 = C141341 * C4005;
    const double C15492 = C141327 * C4005;
    const double C24501 = C21820 * C4005;
    const double C66274 = C141341 * C4005;
    const double C74103 = C141502 * C4005;
    const double C81190 = C63607 * C4005;
    const double C98964 = C141478 * C4005;
    const double C6866 = C6856 + C6857;
    const double C7246 = C7234 + C7235;
    const double C7368 = C7361 + C7362;
    const double C21948 = C21926 + C21927;
    const double C22813 = C22805 + C22806;
    const double C36320 = C36312 + C36313;
    const double C64607 = C64597 + C64598;
    const double C71573 = C71551 + C71552;
    const double C15175 = C15172 + C3796;
    const double C7944 = C7934 + C7935;
    const double C8270 = C8258 + C8259;
    const double C8389 = C8383 + C8384;
    const double C98552 = C98549 + C10940;
    const double C14851 = C14846 + C14847;
    const double C15288 = C15282 + C15283;
    const double C23869 = C23861 + C23862;
    const double C44215 = C44210 + C44211;
    const double C65643 = C65633 + C65634;
    const double C82220 = C82217 + C82218;
    const double C90643 = C90637 + C90638;
    const double C98128 = C98123 + C98124;
    const double C16707 = C141365 * C5782;
    const double C43558 = C42875 * C5782;
    const double C45618 = C42874 * C5782;
    const double C92014 = C141365 * C5782;
    const double C107593 = C106914 * C5782;
    const double C109537 = C141505 * C5782;
    const double C16005 = C15995 + C15996;
    const double C16598 = C16591 + C16592;
    const double C16717 = C16705 + C16706;
    const double C43060 = C43038 + C43039;
    const double C44920 = C44912 + C44913;
    const double C53207 = C53199 + C53200;
    const double C91336 = C91326 + C91327;
    const double C107095 = C107073 + C107074;
    const double C7711 = C7708 + C7701;
    const double C36670 = C36664 + C36649;
    const double C8709 = C8707 + C8702;
    const double C15624 = C15620 + C15606;
    const double C82646 = C82644 + C82640;
    const double C16258 = C16255 + C16246;
    const double C52892 = C52886 + C52871;
    const double C139681 = ae * C139680;
    const double C117 =
        (2 * C139660 + C139646 * C139680 + (C139649 + C139663 * C139650) * ae) /
        C139330;
    const double C826 = (C139761 * C139680) / C139330;
    const double C1604 = (C139804 * C139680) / C139330;
    const double C6722 = C5864 * C831;
    const double C6715 = C5865 * C831;
    const double C22668 = C141224 * C831;
    const double C64463 = C141492 * C831;
    const double C64456 = C63606 * C831;
    const double C72293 = C141224 * C831;
    const double C6853 = C141341 * C3031;
    const double C21933 = C21821 * C3031;
    const double C22800 = C21820 * C3031;
    const double C64594 = C141341 * C3031;
    const double C71558 = C71446 * C3031;
    const double C72425 = C141502 * C3031;
    const double C9947 = C5864 * C3143;
    const double C23062 = C141462 * C3143;
    const double C23048 = C141224 * C3143;
    const double C30542 = C141219 * C3143;
    const double C67588 = C141492 * C3143;
    const double C72681 = C71442 * C3143;
    const double C72667 = C141224 * C3143;
    const double C8049 = C141353 * C3651;
    const double C14959 = C141365 * C3651;
    const double C43894 = C42874 * C3651;
    const double C81770 = C141479 * C3651;
    const double C90324 = C141365 * C3651;
    const double C99516 = C89302 * C3651;
    const double C107921 = C141505 * C3651;
    const double C11152 = C5864 * C3935;
    const double C27036 = C141224 * C3935;
    const double C36432 = C141219 * C3935;
    const double C68725 = C141492 * C3935;
    const double C76560 = C141224 * C3935;
    const double C81052 = C71442 * C3935;
    const double C116310 = C141462 * C3935;
    const double C7942 = C7930 + C7931;
    const double C14850 = C14844 + C14845;
    const double C23866 = C23855 + C23856;
    const double C26720 = C26710 + C26711;
    const double C36104 = C36096 + C36097;
    const double C65641 = C65629 + C65630;
    const double C76253 = C76243 + C76244;
    const double C98126 = C98119 + C98120;
    const double C15733 = C5864 * C1609;
    const double C15729 = C5865 * C1609;
    const double C44655 = C141224 * C1609;
    const double C81462 = C141224 * C1609;
    const double C91082 = C141492 * C1609;
    const double C91078 = C63606 * C1609;
    const double C10822 = C5864 * C3721;
    const double C26707 = C141224 * C3721;
    const double C36099 = C141219 * C3721;
    const double C68407 = C141492 * C3721;
    const double C76240 = C141224 * C3721;
    const double C80642 = C71442 * C3721;
    const double C115912 = C141462 * C3721;
    const double C15992 = C141365 * C5454;
    const double C43045 = C42875 * C5454;
    const double C44907 = C42874 * C5454;
    const double C91323 = C141365 * C5454;
    const double C107080 = C106914 * C5454;
    const double C108888 = C141505 * C5454;
    const double C21575 = C5864 * C5674;
    const double C45397 = C141462 * C5674;
    const double C45391 = C141224 * C5674;
    const double C53091 = C141219 * C5674;
    const double C89020 = C141224 * C5674;
    const double C96815 = C141492 * C5674;
    const double C109325 = C71442 * C5674;
    const double C30777 = C30555 * C275;
    const double C36433 = C30555 * C14078;
    const double C52760 = C52758 * C5966;
    const double C59803 = C52758 * C188;
    const double C140275 = ae * C140274;
    const double C9768 =
        (2 * C140118 + C139761 * C140274 + (C139649 + C139663 * C139869) * ae) /
        C139330;
    const double C10595 = (C139804 * C140274) / C139330;
    const double C37222 = C21821 * C10934;
    const double C39808 = C21820 * C10934;
    const double C55470 = C141341 * C10934;
    const double C85396 = C141341 * C10934;
    const double C126294 = C71446 * C10934;
    const double C128836 = C141502 * C10934;
    const double C42714 = C21820 * C13768;
    const double C48045 = C141327 * C13768;
    const double C53198 = C141341 * C13768;
    const double C55806 = C141478 * C13768;
    const double C89124 = C141341 * C13768;
    const double C131679 = C141502 * C13768;
    const double C136724 = C63607 * C13768;
    const double C140427 = ae * C140426;
    const double C21228 =
        (2 * C140236 + C139804 * C140426 + (C139649 + C139663 * C139943) * ae) /
        C139330;
    const double C40255 = C141365 * C13845;
    const double C52295 = C42875 * C13845;
    const double C55914 = C42874 * C13845;
    const double C103600 = C141365 * C13845;
    const double C133359 = C106914 * C13845;
    const double C136830 = C141505 * C13845;
    const double C40262 = C40254 + C19193;
    const double C39589 = C39579 + C39580;
    const double C40042 = C40036 + C40037;
    const double C51664 = C51654 + C51655;
    const double C55255 = C55247 + C55248;
    const double C102811 = C102805 + C102806;
    const double C132741 = C132731 + C132732;
    const double C19093 = C19091 + C19092;
    const double C37539 = C37534 + C37535;
    const double C40149 = C40143 + C40144;
    const double C53204 = C53193 + C53194;
    const double C55809 = C55801 + C55802;
    const double C82504 = C82495 + C82496;
    const double C18794 = C18793 + C3795;
    const double C52883 = C52877 + C8264;
    const double C55481 = C55477 + C10938;
    const double C61341 = C18488 * C29775;
    const double C37100 = C32956 * C21820;
    const double C39698 = C32956 * C21819;
    const double C52743 = C32956 * C141341;
    const double C55360 = C32956 * C141478;
    const double C61486 = C32956 * C141327;
    const double C126182 = C32956 * C141502;
    const double C128730 = C32956 * C141507;
    const double C133764 = C32956 * C141341;
    const double C136297 = C32956 * C63607;
    const double C52885 = C52879 + C13536;
    const double C47738 = C47737 + C18790;
    const double C42376 = C39705 * C21820;
    const double C52747 = C39705 * C141341;
    const double C55364 = C39705 * C141478;
    const double C61488 = C39705 * C141327;
    const double C131358 = C39705 * C141502;
    const double C133768 = C39705 * C141341;
    const double C136301 = C39705 * C63607;
    const double C61343 = C47416 * C29775;
    const double C55483 = C55479 + C51871;
    const double C57853 = C52536 + C52537;
    const double C16247 = C1971 * C5863;
    const double C16241 = C1971 * C5864;
    const double C45172 = C1971 * C141462;
    const double C45167 = C1971 * C141224;
    const double C59882 = C1971 * C141219;
    const double C91573 = C1971 * C141506;
    const double C91571 = C1971 * C141492;
    const double C109115 = C1971 * C71442;
    const double C109112 = C1971 * C141224;
    const double C21417 = C21416 * C5863;
    const double C45168 = C21416 * C141462;
    const double C59880 = C21416 * C141219;
    const double C96663 = C21416 * C141506;
    const double C109113 = C21416 * C71442;
    const double C6359 = C6358 + C6352;
    const double C14524 = C14523 + C14517;
    const double C748 = C744 * C141327;
    const double C6607 = C744 * C141478;
    const double C22556 = C744 * C21819;
    const double C64348 = C744 * C63607;
    const double C72181 = C744 * C141507;
    const double C749 = C745 * C141327;
    const double C6610 = C745 * C141478;
    const double C64351 = C745 * C63607;
    const double C1530 = C1527 * C141327;
    const double C6606 = C1527 * C141341;
    const double C7702 = C1527 * C141478;
    const double C22552 = C1527 * C21820;
    const double C23640 = C1527 * C21819;
    const double C64347 = C1527 * C141341;
    const double C65412 = C1527 * C63607;
    const double C72177 = C1527 * C141502;
    const double C73255 = C1527 * C141507;
    const double C2308 = C2305 * C141327;
    const double C8703 = C2305 * C141478;
    const double C24608 = C2305 * C21819;
    const double C66382 = C2305 * C63607;
    const double C74209 = C2305 * C141507;
    const double C139710 = ae * C139708;
    const double C139709 = C139646 * C139708;
    const double C139720 = 3 * C139708;
    const double C139963 = C139761 * C139708;
    const double C140027 = C139804 * C139708;
    const double C2966 = (C139680 + C139708 * C139869) / C139330;
    const double C5331 = (C139680 + C139708 * C139943) / C139330;
    const double C23854 = C21821 * C10599;
    const double C73465 = C71446 * C10599;
    const double C80362 = C141341 * C10599;
    const double C98118 = C141341 * C10599;
    const double C3500 =
        (C139804 * C139962 + C140152 + C140152 +
         C139646 * (2 * ae * C139804 * C139973 + C139646 * C139804 * C139974)) /
        C139335;
    const double C10816 = (C139804 * C139857 + C140152 +
                           C139761 * (C140030 + C139761 * C139804 * C139863)) /
                          C139335;
    const double C13378 = (C139761 * C139825 + C140152 +
                           C139804 * (C139966 + C139804 * C139761 * C139839)) /
                          C139335;
    const double C13692 = (C139761 * C139915 + C140152 +
                           C139804 * (C139966 + C139804 * C139761 * C139921)) /
                          C139335;
    const double C43791 = C43787 + C43788;
    const double C47628 = C47621 + C47622;
    const double C51770 = C51766 + C51767;
    const double C52543 = C52530 + C52531;
    const double C81633 = C81619 + C81620;
    const double C85261 = C85253 + C85254;
    const double C2970 = (C139675 + C139701 * C139869 + C140094 + C140094 +
                          C139646 * (2 * ae * (C139671 + C139695 * C139869) +
                                     C139646 * (C139701 + C139738 * C139869))) /
                         C139335;
    const double C9772 = (2 * (C139678 + C139761 * C139782) + C140094 +
                          C139761 * (C139782 + C139966 +
                                     C139761 * (C139705 + C139761 * C139796))) /
                         C139335;
    const double C9941 = (2 * (C139678 + C139761 * C139857) + C140094 +
                          C139761 * (C139857 + C139966 +
                                     C139761 * (C139705 + C139761 * C139863))) /
                         C139335;
    const double C10703 =
        (C140094 + C139804 * (C139825 + C139839 * C139869)) / C139335;
    const double C11146 =
        (C140094 + C139804 * (C139915 + C139921 * C139869)) / C139335;
    const double C22663 = C139356 * C9671;
    const double C22797 = C21920 * C9671;
    const double C22921 = C275 * C9671;
    const double C25841 = C141224 * C9671;
    const double C29781 = C29775 * C9671;
    const double C30544 = C141219 * C9671;
    const double C72288 = C71450 * C9671;
    const double C72422 = C71545 * C9671;
    const double C75416 = C141224 * C9671;
    const double C23743 = C139356 * C10474;
    const double C23853 = C21920 * C10474;
    const double C23969 = C275 * C10474;
    const double C26703 = C141224 * C10474;
    const double C30999 = C29775 * C10474;
    const double C35984 = C14079 * C10474;
    const double C36101 = C141219 * C10474;
    const double C73354 = C71450 * C10474;
    const double C73464 = C71545 * C10474;
    const double C76236 = C141224 * C10474;
    const double C80361 = C63708 * C10474;
    const double C98117 = C5967 * C10474;
    const double C98269 = C89456 * C10474;
    const double C5335 = (C139675 + C139701 * C139943 + C140196 + C140196 +
                          C139646 * (2 * ae * (C139671 + C139695 * C139943) +
                                     C139646 * (C139701 + C139738 * C139943))) /
                         C139335;
    const double C13455 =
        (C140196 + C139761 * (C139857 + C139863 * C139943)) / C139335;
    const double C21232 =
        (2 * (C139678 + C139804 * C139825) + C140196 +
         C139804 *
             (C139825 + C140030 + C139804 * (C139705 + C139804 * C139839))) /
        C139335;
    const double C21569 =
        (2 * (C139678 + C139804 * C139915) + C140196 +
         C139804 *
             (C139915 + C140030 + C139804 * (C139705 + C139804 * C139921))) /
        C139335;
    const double C44650 = C139356 * C21039;
    const double C44792 = C188 * C21039;
    const double C44904 = C43032 * C21039;
    const double C50261 = C141224 * C21039;
    const double C52405 = C29775 * C21039;
    const double C59806 = C141219 * C21039;
    const double C88384 = C71450 * C21039;
    const double C108885 = C107067 * C21039;
    const double C114097 = C141224 * C21039;
    const double C32303 = C32301 * C141219;
    const double C32526 = C32361 * C275;
    const double C32871 = C32869 * C141219;
    const double C33168 = C32953 * C275;
    const double C39075 = C32953 * C14079;
    const double C39701 = C32953 * C21920;
    const double C128137 = C32953 * C89456;
    const double C128733 = C32953 * C71545;
    const double C40033 = C39704 * C14079;
    const double C42375 = C39704 * C21920;
    const double C54742 = C39704 * C43032;
    const double C55365 = C39704 * C5967;
    const double C129054 = C39704 * C89456;
    const double C131357 = C39704 * C71545;
    const double C135700 = C39704 * C107067;
    const double C136302 = C39704 * C63708;
    const double C63144 = C63142 * C141219;
    const double C63258 = C63256 * C188;
    const double C140130 = C140129 + C139743;
    const double C140248 = C140247 + C139743;
    const double C3867 =
        (ae * (C139804 * C139844 + C139743) +
         C139761 *
             (ae * C139801 +
              C139804 * (2 * C139646 * C139900 +
                         C139646 * (C139900 + std::pow(C139652, 7) * bs[7] *
                                                  C139891 * C139650)))) /
        C139335;
    const double C1184 = C188 * C913;
    const double C6252 = C5967 * C913;
    const double C63993 = C63708 * C913;
    const double C2296 = C275 * C1785;
    const double C14623 = C14079 * C1785;
    const double C90000 = C89456 * C1785;
    const double C4082 = C275 * C3649;
    const double C15613 = C14079 * C3649;
    const double C90962 = C89456 * C3649;
    const double C140294 = C139783 + C140292;
    const double C140334 = ae * C140333;
    const double C140445 = C139826 + C140443;
    const double C140389 = ae * C140388;
    const double C13376 =
        (C139761 * C139826 + C139804 * C140388 + C139804 * C140289 * ae) /
        C139330;
    const double C140504 = C140503 + C140496;
    const double C140583 = ae * C140582;
    const double C47403 = (2 * C140330 + C139804 * C140582) / C139330;
    const double C140869 = C140868 + C140863;
    const double C140597 = ae * C140596;
    const double C29252 = (C139817 + C139828 * C139869 + C139804 * C140596 +
                           C139804 * C140497 * ae) /
                          C139330;
    const double C140796 = C140381 + C140794;
    const double C139751 = ae * C139748;
    const double C139750 = C139646 * C139748;
    const double C139976 = C139761 * C139748;
    const double C140040 = C139804 * C139748;
    const double C140097 = C139748 * C139869;
    const double C140199 = C139748 * C139943;
    const double C140352 = ae * C140351;
    const double C47291 = (2 * C140151 + C139804 * C140351) / C139330;
    const double C26480 =
        (C139804 *
         (2 * C140457 + C140103 +
          C139761 *
              (C139796 + C139982 +
               C139761 * (C139744 + C139761 * (ae * C139792 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139765))))) /
        C139335;
    const double C140255 = C140253 + C140254;
    const double C140316 = ae * C140315;
    const double C29099 = C139356 * C29090;
    const double C36776 = C29775 * C29090;
    const double C78606 = C71450 * C29090;
    const double C140395 = C140393 + C140394;
    const double C140645 = ae * C140642;
    const double C140644 = C139761 * C140642;
    const double C140689 = C139804 * C140642;
    const double C140717 = C140642 * C139943;
    const double C140747 = C140745 + C140746;
    const double C140979 = ae * C140977;
    const double C140978 = C139804 * C140977;
    const double C139749 = C139723 + C139747;
    const double C25577 = C141224 * C9674;
    const double C30287 = C141219 * C9674;
    const double C75168 = C141224 * C9674;
    const double C26359 = C141224 * C10477;
    const double C35757 = C141219 * C10477;
    const double C75908 = C141224 * C10477;
    const double C32185 = C141219 * C25572;
    const double C32707 = C141219 * C26355;
    const double C39340 = C141219 * C29091;
    const double C49998 = C141224 * C21042;
    const double C59580 = C141219 * C21042;
    const double C113850 = C141224 * C21042;
    const double C63079 = C141219 * C49993;
    const double C1176 = C141327 * C1168;
    const double C6247 = C141341 * C1168;
    const double C63988 = C141341 * C1168;
    const double C1954 = C141327 * C1946;
    const double C8254 = C141341 * C3792;
    const double C15171 = C141327 * C3792;
    const double C65941 = C141341 * C3792;
    const double C16244 = C141327 * C5563;
    const double C58111 = C141341 * C42459;
    const double C61560 = C141327 * C42459;
    const double C139005 = C141341 * C42459;
    const double C63311 = C141327 * C50344;
    const double C1510 = C141353 * C1502;
    const double C2288 = C141353 * C2280;
    const double C14618 = C141365 * C2280;
    const double C89995 = C141365 * C2280;
    const double C7698 = C141353 * C3418;
    const double C8699 = C141353 * C4076;
    const double C15600 = C141365 * C4076;
    const double C90949 = C141365 * C4076;
    const double C140732 = C140731 + C140643;
    const double C33094 =
        (3 * (C140558 + ae * (C139804 * C140654 + C140475) +
              C139761 * C140705) +
         ae * (C139804 * C140665 + C140643) +
         C139761 *
             (2 * C140705 + ae * (C139804 * C140660 + C140636) +
              C139761 *
                  (C140702 + ae * (C139804 * C139761 * C139835 + C140632) +
                   C139761 * (ae * (C139804 * C139835 + C139727) +
                              C139761 * (ae * C139792 +
                                         C139804 * std::pow(C139652, 7) *
                                             bs[7] * C139891))))) /
        C139335;
    const double C33317 = C275 * C32858;
    const double C39234 = C14079 * C32858;
    const double C128296 = C89456 * C32858;
    const double C140774 = C140514 + C140772;
    const double C140916 = C140915 + C140908;
    const double C3198 = (C139874 + C139879 * C139650 + C140127 + C140127 +
                          C139761 * (2 * ae * C139783 + C139761 * C139886)) /
                         C139335;
    const double C4006 =
        (C140127 + C139804 * (ae * C139826 + C139761 * C139939)) / C139335;
    const double C3203 = C188 * C3028;
    const double C6849 = C141341 * C3028;
    const double C7229 = C5967 * C3028;
    const double C7356 = C275 * C3028;
    const double C9944 = C5873 * C3028;
    const double C10043 = C5966 * C3028;
    const double C21941 = C21821 * C3028;
    const double C22196 = C21920 * C3028;
    const double C23063 = C139356 * C3028;
    const double C23192 = C21919 * C3028;
    const double C64590 = C141341 * C3028;
    const double C64952 = C63708 * C3028;
    const double C67585 = C63614 * C3028;
    const double C71566 = C71446 * C3028;
    const double C71821 = C71545 * C3028;
    const double C72682 = C71450 * C3028;
    const double C3797 = C188 * C3574;
    const double C7927 = C141341 * C3574;
    const double C8253 = C5967 * C3574;
    const double C8378 = C275 * C3574;
    const double C10819 = C5873 * C3574;
    const double C10942 = C5966 * C3574;
    const double C14843 = C141327 * C3574;
    const double C15278 = C14079 * C3574;
    const double C24184 = C21919 * C3574;
    const double C65626 = C141341 * C3574;
    const double C65940 = C63708 * C3574;
    const double C68404 = C63614 * C3574;
    const double C80643 = C71450 * C3574;
    const double C90633 = C89456 * C3574;
    const double C115913 = C139356 * C3574;
    const double C13540 = C5967 * C13296;
    const double C18792 = C188 * C13296;
    const double C71072 = C63708 * C13296;
    const double C653 = C225 * C275;
    const double C447 = C443 + C437;
    const double C527 = C523 * C141327;
    const double C1424 = C933 * C275;
    const double C1188 = C1185 + C1175;
    const double C6263 = C6257 + C6246;
    const double C2202 = C1711 * C275;
    const double C14520 = C1711 * C14079;
    const double C15875 = C1711 * C5873;
    const double C89897 = C1711 * C89456;
    const double C91214 = C1711 * C63614;
    const double C1966 = C1963 + C1953;
    const double C2055 = C2052 * C141327;
    const double C16254 = C16251 + C5568;
    const double C16588 = C15880 * C14079;
    const double C21144 = C15880 * C5873;
    const double C43465 = C15880 * C43032;
    const double C44802 = C15880 * C139356;
    const double C91901 = C15880 * C89456;
    const double C96416 = C15880 * C63614;
    const double C107500 = C15880 * C107067;
    const double C108785 = C15880 * C71450;
    const double C1699 = C141327 * C1692;
    const double C15864 = C141327 * C5397;
    const double C16128 = C5865 * C1875;
    const double C91459 = C63606 * C1875;
    const double C21313 = C5865 * C5509;
    const double C45051 = C141224 * C5509;
    const double C96570 = C63606 * C5509;
    const double C109008 = C141224 * C5509;
    const double C140285 = C140284 + C140281;
    const double C10935 = (C139804 * C140277 + C140331 + C140331 +
                           C139761 * (2 * ae * C139804 * C139785 +
                                      C139761 * C139804 * C139646 * C139884)) /
                          C139335;
    const double C13769 =
        (ae * C139817 + C139761 * C140306 + C140331 +
         C139804 *
             (C140283 + C139804 * (C139832 + C139761 * C139646 * C139937))) /
        C139335;
    const double C52881 = C52872 + C13538;
    const double C44107 = C44105 + C18791;
    const double C43792 = C43789 + C43790;
    const double C44214 = C44208 + C44209;
    const double C52541 = C52526 + C52527;
    const double C81635 = C81623 + C81624;
    const double C82219 = C82215 + C82216;
    const double C99921 = C99917 + C99918;
    const double C108236 = C108230 + C108231;
    const double C140639 = C140629 + C140634;
    const double C140483 = ae * C140481;
    const double C140482 = C139761 * C140481;
    const double C140546 = C139804 * C140481;
    const double C140623 = 3 * C140481;
    const double C29173 = (C140274 + C140481 * C139943) / C139330;
    const double C29405 =
        (C139874 + C139879 * C139943 + C140579 + C140579 +
         C139761 * (2 * ae * (C139772 + C139779 * C139943) +
                    C139761 * (C139879 + C139884 * C139943))) /
        C139335;
    const double C42708 =
        (2 * (C140272 + C139804 * C140526) + C140579 +
         C139804 *
             (C140526 + C140549 + C139804 * (C140479 + C139804 * C140672))) /
        C139335;
    const double C42469 = C21919 * C42197;
    const double C47735 = C188 * C42197;
    const double C52868 = C5967 * C42197;
    const double C55355 = C29775 * C42197;
    const double C55475 = C5966 * C42197;
    const double C55587 = C43032 * C42197;
    const double C57860 = C141341 * C42197;
    const double C61346 = C141327 * C42197;
    const double C88814 = C63708 * C42197;
    const double C136512 = C107067 * C42197;
    const double C138764 = C141341 * C42197;
    const double C55588 = C42875 * C42553;
    const double C136513 = C106914 * C42553;
    const double C63314 = C63313 + C50351;
    const double C63145 = C63143 * C29775;
    const double C63257 = C63255 * C141327;
    const double C21145 = C15881 * C5864;
    const double C44801 = C15881 * C141462;
    const double C44791 = C15881 * C141224;
    const double C59660 = C15881 * C141219;
    const double C96417 = C15881 * C141492;
    const double C108784 = C15881 * C71442;
    const double C108778 = C15881 * C141224;
    const double C61352 = C61350 * C141219;
    const double C5783 = (C139948 + C139953 * C139650 + C140245 + C140245 +
                          C139804 * (2 * ae * C139826 + C139804 * C139960)) /
                         C139335;
    const double C5788 = C275 * C5451;
    const double C15988 = C141365 * C5451;
    const double C16586 = C188 * C5451;
    const double C16700 = C14079 * C5451;
    const double C21572 = C5873 * C5451;
    const double C21742 = C14078 * C5451;
    const double C43053 = C42875 * C5451;
    const double C43560 = C43032 * C5451;
    const double C45398 = C139356 * C5451;
    const double C45626 = C43031 * C5451;
    const double C91319 = C141365 * C5451;
    const double C92007 = C89456 * C5451;
    const double C96812 = C63614 * C5451;
    const double C107088 = C106914 * C5451;
    const double C107595 = C107067 * C5451;
    const double C109326 = C71450 * C5451;
    const double C1277 = C1274 * C141327;
    const double C6354 = C1274 * C141341;
    const double C64095 = C1274 * C141341;
    const double C519 = C312 * C188;
    const double C661 = C657 * C141353;
    const double C742 = C738 + C732;
    const double C1267 = C1027 * C188;
    const double C6355 = C1027 * C5967;
    const double C6986 = C1027 * C5873;
    const double C64096 = C1027 * C63708;
    const double C64717 = C1027 * C63614;
    const double C1434 = C1431 * C141353;
    const double C1522 = C1519 + C1509;
    const double C2045 = C1805 * C188;
    const double C2212 = C2209 * C141353;
    const double C14519 = C2209 * C141365;
    const double C89896 = C2209 * C141365;
    const double C2300 = C2297 + C2287;
    const double C14634 = C14628 + C14617;
    const double C7707 = C7704 + C3423;
    const double C7358 = C6991 * C5967;
    const double C9856 = C6991 * C5873;
    const double C22306 = C6991 * C21920;
    const double C22931 = C6991 * C139356;
    const double C65078 = C6991 * C63708;
    const double C67506 = C6991 * C63614;
    const double C71931 = C6991 * C71545;
    const double C72552 = C6991 * C71450;
    const double C8706 = C8704 + C4081;
    const double C8380 = C8053 * C5967;
    const double C10707 = C8053 * C5873;
    const double C66066 = C8053 * C63708;
    const double C68301 = C8053 * C63614;
    const double C15618 = C15614 + C15599;
    const double C1015 = C141353 * C1008;
    const double C6975 = C141353 * C3090;
    const double C7480 = C5865 * C1345;
    const double C65194 = C63606 * C1345;
    const double C10203 = C5865 * C3310;
    const double C23423 = C141224 * C3310;
    const double C67832 = C63606 * C3310;
    const double C73039 = C141224 * C3310;
    const double C13846 =
        (C139761 * C140310 + C140384 + C140384 +
         C139804 * (2 * ae * C140381 + C139804 * C139761 * C139646 * C139958)) /
        C139335;
    const double C13850 = C275 * C13375;
    const double C19195 = C14079 * C13375;
    const double C43898 = C42875 * C13375;
    const double C44413 = C188 * C13375;
    const double C44521 = C43032 * C13375;
    const double C47941 = C139356 * C13375;
    const double C48150 = C43031 * C13375;
    const double C52090 = C29775 * C13375;
    const double C53201 = C5967 * C13375;
    const double C81772 = C141365 * C13375;
    const double C82498 = C63708 * C13375;
    const double C85668 = C71450 * C13375;
    const double C89227 = C14078 * C13375;
    const double C94482 = C89456 * C13375;
    const double C99518 = C141365 * C13375;
    const double C107925 = C106914 * C13375;
    const double C108540 = C107067 * C13375;
    const double C140436 = C140435 + C140432;
    const double C29715 =
        (C139948 + C139953 * C139869 + C140593 + C140593 +
         C139804 *
             (2 * ae * C140514 + C139804 * (C139953 + C139958 * C139869))) /
        C139335;
    const double C29718 = C275 * C29251;
    const double C37639 = C14079 * C29251;
    const double C39572 = C141365 * C29251;
    const double C40031 = C29775 * C29251;
    const double C42711 = C21920 * C29251;
    const double C42798 = C14078 * C29251;
    const double C47189 = C43032 * C29251;
    const double C54421 = C42875 * C29251;
    const double C55807 = C5967 * C29251;
    const double C55918 = C43031 * C29251;
    const double C103604 = C89456 * C29251;
    const double C111106 = C107067 * C29251;
    const double C128624 = C141365 * C29251;
    const double C131676 = C71545 * C29251;
    const double C135381 = C106914 * C29251;
    const double C136725 = C63708 * C29251;
    const double C32635 = C32634 + C26249;
    const double C32304 = C32302 * C29775;
    const double C32528 = C32527 * C141353;
    const double C33319 = C33318 + C27245;
    const double C32872 = C32870 * C29775;
    const double C33178 = C33175 * C141353;
    const double C39074 = C33175 * C141365;
    const double C128136 = C33175 * C141365;
    const double C39237 = C39235 + C36646;
    const double C140765 = C140764 + C140761;
    const double C140975 = C140966 + C140971;
    const double C140850 = ae * C140847;
    const double C140849 = C139804 * C140847;
    const double C140959 = 3 * C140847;
    const double C58196 =
        (ae * (3 * C140847 +
               C139804 * (2 * C140701 +
                          C139804 * (C139822 +
                                     C139804 * (C139804 * C139835 + C139727) +
                                     C139804 * C139717 * ae) +
                          C140890 * ae) +
               (2 * C140841 + C139804 * C140890) * ae) +
         C139761 *
             (3 * C140727 + ae * (2 * C140686 + C139804 * C140891) +
              C139804 * (2 * C140702 + ae * C140891 +
                         C139804 * (C139900 + ae * C139804 * C139792 +
                                    C139804 * (ae * C139792 +
                                               C139804 * std::pow(C139652, 7) *
                                                   bs[7] * C139891))))) /
        C139335;
    const double C9857 = C6992 * C5864;
    const double C22930 = C6992 * C141462;
    const double C22920 = C6992 * C141224;
    const double C30454 = C6992 * C141219;
    const double C67507 = C6992 * C141492;
    const double C72551 = C6992 * C71442;
    const double C72545 = C6992 * C141224;
    const double C52761 = C52759 * C141478;
    const double C59804 = C52759 * C141327;
    const double C133774 = C52759 * C63607;
    const double C59812 = C59810 * C141327;
    const double C45178 = C45177 + C45171;
    const double C16248 = C1970 * C5864;
    const double C16242 = C1970 * C5865;
    const double C45173 = C1970 * C141224;
    const double C91574 = C1970 * C141492;
    const double C91572 = C1970 * C63606;
    const double C109116 = C1970 * C141224;
    const double C50356 = C50355 * C141462;
    const double C59881 = C50355 * C141219;
    const double C114183 = C50355 * C71442;
    const double C30793 = C30787 * C141353;
    const double C36434 = C30787 * C141479;
    const double C125570 = C30787 * C89302;
    const double C30794 = C30788 * C141353;
    const double C23643 = C23642 + C23638;
    const double C24611 = C24610 + C24606;
    const double C36671 = C36665 + C36651;
    const double C1529 = C1526 * C141327;
    const double C6608 = C1526 * C141341;
    const double C7699 = C1526 * C141478;
    const double C22555 = C1526 * C21820;
    const double C64349 = C1526 * C141341;
    const double C65410 = C1526 * C63607;
    const double C72180 = C1526 * C141502;
    const double C2307 = C2304 * C141327;
    const double C8700 = C2304 * C141478;
    const double C66380 = C2304 * C63607;
    const double C139364 = C139362 / C139330;
    const double C139363 = C139331 * C139361;
    const double C106 = (-C139361 / C139330) / (4 * C139342);
    const double C5872 = (-C139361 / C139330) / (4 * C139335);
    const double C21824 = (-C139361 / C139330) / C139336;
    const double C29774 = -C139361 / C139330;
    const double C63613 = (-C139361 / C139330) / (4 * C139335);
    const double C71449 = (-C139361 / C139330) / C139336;
    const double C5887 = C5869 * C116;
    const double C5886 = C5869 * C115;
    const double C5883 = C5869 * C827;
    const double C5878 = C5869 * C828;
    const double C5875 = C5869 * C114;
    const double C6725 = C5869 * C2965;
    const double C6718 = C5869 * C2964;
    const double C6982 = C1031 * C5869;
    const double C6994 = C6988 * C5869;
    const double C7112 = C5869 * C911;
    const double C7106 = C5869 * C822;
    const double C7100 = C5869 * C912;
    const double C7094 = C5869 * C823;
    const double C7475 = C5869 * C1005;
    const double C7469 = C5869 * C1006;
    const double C7821 = C5869 * C3495;
    const double C7818 = C5869 * C1605;
    const double C7817 = C5869 * C1606;
    const double C7814 = C5869 * C3494;
    const double C9683 = C5869 * C9670;
    const double C9866 = C9864 * C5869;
    const double C9954 = C5869 * C2960;
    const double C9948 = C5869 * C3026;
    const double C10206 = C5869 * C3084;
    const double C10486 = C5869 * C10473;
    const double C10717 = C10715 * C5869;
    const double C10829 = C5869 * C3490;
    const double C10823 = C5869 * C3572;
    const double C11153 = C5869 * C3646;
    const double C13218 = C5869 * C13208;
    const double C13215 = C5869 * C5329;
    const double C15736 = C5869 * C5330;
    const double C15871 = C1715 * C5869;
    const double C15883 = C15877 * C5869;
    const double C16123 = C5869 * C1689;
    const double C16117 = C5869 * C1600;
    const double C16111 = C5869 * C1690;
    const double C16105 = C5869 * C1601;
    const double C16474 = C5869 * C1783;
    const double C16468 = C5869 * C1784;
    const double C18490 = C18488 * C5869;
    const double C21051 = C5869 * C21038;
    const double C21154 = C21152 * C5869;
    const double C21322 = C5869 * C5325;
    const double C21316 = C5869 * C5391;
    const double C21576 = C5869 * C5449;
    const double C5885 = C5871 * C116;
    const double C5879 = C5871 * C827;
    const double C5876 = C5871 * C115;
    const double C6717 = C5871 * C2965;
    const double C6984 = C1029 * C5871;
    const double C6970 = C1031 * C5871;
    const double C7114 = C5871 * C910;
    const double C7108 = C5871 * C821;
    const double C7102 = C5871 * C911;
    const double C7096 = C5871 * C822;
    const double C7477 = C5871 * C1004;
    const double C7471 = C5871 * C1005;
    const double C7816 = C5871 * C1605;
    const double C7813 = C5871 * C3495;
    const double C9684 = C5871 * C9671;
    const double C9858 = C6993 * C5871;
    const double C9952 = C5871 * C2961;
    const double C9946 = C5871 * C3027;
    const double C10204 = C5871 * C3085;
    const double C10487 = C5871 * C10474;
    const double C10709 = C8055 * C5871;
    const double C10827 = C5871 * C3491;
    const double C10821 = C5871 * C3573;
    const double C11151 = C5871 * C3647;
    const double C13219 = C5871 * C13209;
    const double C13216 = C5871 * C5330;
    const double C15873 = C1713 * C5871;
    const double C15859 = C1715 * C5871;
    const double C16125 = C5871 * C1688;
    const double C16119 = C5871 * C1599;
    const double C16113 = C5871 * C1689;
    const double C16107 = C5871 * C1600;
    const double C16476 = C5871 * C1782;
    const double C16470 = C5871 * C1783;
    const double C21052 = C5871 * C21039;
    const double C21146 = C15882 * C5871;
    const double C21320 = C5871 * C5326;
    const double C21314 = C5871 * C5392;
    const double C21574 = C5871 * C5450;
    const double C71464 = C71448 * C116;
    const double C71463 = C71448 * C115;
    const double C71461 = C71448 * C827;
    const double C71459 = C71448 * C2965;
    const double C71456 = C71448 * C2964;
    const double C71454 = C71448 * C828;
    const double C71452 = C71448 * C114;
    const double C72298 = C71448 * C9671;
    const double C72289 = C71448 * C9670;
    const double C72550 = C6993 * C71448;
    const double C72546 = C1031 * C71448;
    const double C72542 = C9864 * C71448;
    const double C72538 = C6988 * C71448;
    const double C72680 = C71448 * C3027;
    const double C72676 = C71448 * C2961;
    const double C72672 = C71448 * C911;
    const double C72668 = C71448 * C822;
    const double C72664 = C71448 * C3026;
    const double C72660 = C71448 * C2960;
    const double C72656 = C71448 * C912;
    const double C72652 = C71448 * C823;
    const double C73036 = C71448 * C3085;
    const double C73032 = C71448 * C1005;
    const double C73028 = C71448 * C3084;
    const double C73024 = C71448 * C1006;
    const double C73364 = C71448 * C10474;
    const double C73362 = C71448 * C3495;
    const double C73360 = C71448 * C1605;
    const double C73359 = C71448 * C1606;
    const double C73357 = C71448 * C3494;
    const double C73355 = C71448 * C10473;
    const double C75171 = C71448 * C25570;
    const double C75332 = C25754 * C71448;
    const double C75417 = C71448 * C9667;
    const double C75655 = C71448 * C9848;
    const double C75915 = C71448 * C26353;
    const double C76132 = C10715 * C71448;
    const double C76128 = C26595 * C71448;
    const double C76245 = C71448 * C3490;
    const double C76241 = C71448 * C3572;
    const double C76237 = C71448 * C10470;
    const double C76561 = C71448 * C3646;
    const double C76557 = C71448 * C10699;
    const double C78605 = C71448 * C29089;
    const double C78603 = C71448 * C13208;
    const double C78601 = C71448 * C5329;
    const double C80641 = C71448 * C3573;
    const double C80637 = C71448 * C3491;
    const double C81051 = C71448 * C3647;
    const double C81465 = C71448 * C13209;
    const double C81463 = C71448 * C5330;
    const double C81921 = C71448 * C1689;
    const double C81917 = C71448 * C1600;
    const double C81913 = C71448 * C1690;
    const double C81909 = C71448 * C1601;
    const double C82355 = C71448 * C1783;
    const double C82351 = C71448 * C1784;
    const double C85255 = C71448 * C13205;
    const double C85251 = C71448 * C13294;
    const double C85670 = C71448 * C13374;
    const double C88385 = C71448 * C42111;
    const double C88383 = C71448 * C21038;
    const double C88705 = C71448 * C5325;
    const double C88701 = C71448 * C5391;
    const double C89021 = C71448 * C5449;
    const double C108665 = C71448 * C21039;
    const double C108783 = C15882 * C71448;
    const double C108779 = C1715 * C71448;
    const double C108775 = C21152 * C71448;
    const double C108771 = C15877 * C71448;
    const double C109005 = C71448 * C5392;
    const double C109001 = C71448 * C5326;
    const double C109324 = C71448 * C5450;
    const double C111310 = C47416 * C71448;
    const double C111306 = C18488 * C71448;
    const double C113853 = C71448 * C49991;
    const double C113939 = C50096 * C71448;
    const double C114098 = C71448 * C21035;
    const double C114094 = C71448 * C21136;
    const double C32523 = C30771 + C30791;
    const double C32522 = C30768 + C30790;
    const double C39073 = C36424 + C36425;
    const double C58021 = C52744 + C52745;
    const double C63249 = C59797 + C59798;
    const double C63250 = C59799 + C59800;
    const double C139462 = C139394 * C139459;
    const double C22179 =
        (-(be * -2 * C139447) / C139335) / C139336 -
        ((2 * ((-C139447 / C139330) / C139336 - (C139458 * be) / C139330) -
          (C139394 *
           ((-4 * C139420) / C139330 - (C139394 * C139459) / C139330) * be) /
              C139330) *
         be) /
            C139330 -
        C139459 / C139345;
    const double C22181 = (-C139459 / C139330) / (4 * C139335);
    const double C29995 = (-C139459 / C139330) / (4 * C139342);
    const double C63970 = (-C139459 / C139330) / C139336;
    const double C71806 = (-C139459 / C139330) / (4 * C139335);
    const double C139482 = C139476 / C139330;
    const double C63732 = C63707 * C111;
    const double C63722 = C63707 * C116;
    const double C63718 = C63707 * C110;
    const double C63714 = C63707 * C115;
    const double C63710 = C63707 * C109;
    const double C63992 = C63707 * C193;
    const double C63990 = C63707 * C192;
    const double C63981 = C63707 * C191;
    const double C63975 = C63707 * C190;
    const double C63972 = C63707 * C189;
    const double C64098 = C309 * C63707;
    const double C64091 = C307 * C63707;
    const double C64087 = C305 * C63707;
    const double C64261 = C63707 * C279;
    const double C64255 = C63707 * C278;
    const double C64250 = C63707 * C277;
    const double C64599 = C63707 * C822;
    const double C64595 = C63707 * C827;
    const double C64591 = C63707 * C821;
    const double C64965 = C63707 * C909;
    const double C64964 = C63707 * C912;
    const double C64961 = C63707 * C911;
    const double C64955 = C63707 * C910;
    const double C65084 = C1031 * C63707;
    const double C65080 = C1029 * C63707;
    const double C65305 = C63707 * C1005;
    const double C65301 = C63707 * C1004;
    const double C65635 = C63707 * C1600;
    const double C65631 = C63707 * C1605;
    const double C65627 = C63707 * C1599;
    const double C65953 = C63707 * C1687;
    const double C65952 = C63707 * C1690;
    const double C65949 = C63707 * C1689;
    const double C65943 = C63707 * C1688;
    const double C66072 = C1809 * C63707;
    const double C66068 = C1807 * C63707;
    const double C66275 = C63707 * C1783;
    const double C66271 = C63707 * C1782;
    const double C67681 = C63707 * C3028;
    const double C67679 = C63707 * C3027;
    const double C67677 = C63707 * C3026;
    const double C68524 = C63707 * C3574;
    const double C68522 = C63707 * C3573;
    const double C68520 = C63707 * C3572;
    const double C71071 = C63707 * C5393;
    const double C71069 = C63707 * C5392;
    const double C71067 = C63707 * C5391;
    const double C80367 = C63707 * C3491;
    const double C80363 = C63707 * C3495;
    const double C81189 = C63707 * C3647;
    const double C81625 = C63707 * C5326;
    const double C81621 = C63707 * C5330;
    const double C81613 = C63707 * C1606;
    const double C81609 = C63707 * C1601;
    const double C82500 = C63707 * C5450;
    const double C82493 = C63707 * C1784;
    const double C84979 = C63707 * C3494;
    const double C84975 = C63707 * C3490;
    const double C85399 = C63707 * C13295;
    const double C85397 = C63707 * C13294;
    const double C85805 = C63707 * C3646;
    const double C88497 = C63707 * C5325;
    const double C88493 = C63707 * C5329;
    const double C88815 = C63707 * C21137;
    const double C88813 = C63707 * C21136;
    const double C89125 = C63707 * C5449;
    const double C133773 = C52758 * C63707;
    const double C133769 = C37113 * C63707;
    const double C133765 = C42383 * C63707;
    const double C133761 = C37111 * C63707;
    const double C136074 = C63707 * C13208;
    const double C136070 = C63707 * C13205;
    const double C136300 = C39706 * C63707;
    const double C136296 = C32957 * C63707;
    const double C136406 = C63707 * C42197;
    const double C136723 = C63707 * C13374;
    const double C138765 = C63707 * C21035;
    const double C138761 = C63707 * C21038;
    const double C138926 = C58030 * C63707;
    const double C139008 = C63707 * C50082;
    const double C6271 = C6267 + C6268;
    const double C6530 = C6513 + C6529;
    const double C139532 = C139397 * C139529;
    const double C43543 =
        (-(be * -2 * C139517) / C139335) / C139336 -
        ((2 * ((-C139517 / C139330) / C139336 - (C139528 * be) / C139330) -
          (C139397 *
           ((-4 * C139432) / C139330 - (C139397 * C139529) / C139330) * be) /
              C139330) *
         be) /
            C139330 -
        C139529 / C139345;
    const double C43545 = (-C139529 / C139330) / (4 * C139335);
    const double C58897 = (-C139529 / C139330) / (4 * C139342);
    const double C89977 = (-C139529 / C139330) / C139336;
    const double C107580 = (-C139529 / C139330) / (4 * C139335);
    const double C139548 = C139542 / C139330;
    const double C89480 = C89455 * C111;
    const double C89470 = C89455 * C116;
    const double C89466 = C89455 * C110;
    const double C89462 = C89455 * C115;
    const double C89458 = C89455 * C109;
    const double C89729 = C89455 * C192;
    const double C89723 = C89455 * C191;
    const double C89718 = C89455 * C190;
    const double C89899 = C222 * C89455;
    const double C89892 = C220 * C89455;
    const double C89888 = C218 * C89455;
    const double C89999 = C89455 * C280;
    const double C89997 = C89455 * C279;
    const double C89988 = C89455 * C278;
    const double C89982 = C89455 * C277;
    const double C89979 = C89455 * C276;
    const double C90329 = C89455 * C822;
    const double C90325 = C89455 * C827;
    const double C90321 = C89455 * C821;
    const double C90639 = C89455 * C911;
    const double C90635 = C89455 * C910;
    const double C90848 = C937 * C89455;
    const double C90844 = C935 * C89455;
    const double C90961 = C89455 * C1003;
    const double C90960 = C89455 * C1006;
    const double C90957 = C89455 * C1005;
    const double C90951 = C89455 * C1004;
    const double C91328 = C89455 * C1600;
    const double C91324 = C89455 * C1605;
    const double C91320 = C89455 * C1599;
    const double C91680 = C89455 * C1689;
    const double C91676 = C89455 * C1688;
    const double C91907 = C1715 * C89455;
    const double C91903 = C1713 * C89455;
    const double C92020 = C89455 * C1781;
    const double C92019 = C89455 * C1784;
    const double C92016 = C89455 * C1783;
    const double C92010 = C89455 * C1782;
    const double C93586 = C89455 * C3086;
    const double C93584 = C89455 * C3085;
    const double C93582 = C89455 * C3084;
    const double C94483 = C89455 * C3648;
    const double C94481 = C89455 * C3647;
    const double C94479 = C89455 * C3646;
    const double C96973 = C89455 * C5451;
    const double C96971 = C89455 * C5450;
    const double C96969 = C89455 * C5449;
    const double C98275 = C89455 * C2961;
    const double C98271 = C89455 * C2965;
    const double C98263 = C89455 * C828;
    const double C98259 = C89455 * C823;
    const double C98694 = C89455 * C3027;
    const double C98687 = C89455 * C912;
    const double C99519 = C89455 * C3491;
    const double C99515 = C89455 * C3495;
    const double C99919 = C89455 * C3573;
    const double C101795 = C89455 * C2960;
    const double C101791 = C89455 * C2964;
    const double C102099 = C89455 * C3026;
    const double C102403 = C89455 * C9849;
    const double C102401 = C89455 * C9848;
    const double C102807 = C89455 * C3490;
    const double C102803 = C89455 * C3494;
    const double C103205 = C89455 * C3572;
    const double C103605 = C89455 * C10700;
    const double C103603 = C89455 * C10699;
    const double C106837 = C89455 * C13375;
    const double C106835 = C89455 * C13374;
    const double C125569 = C30555 * C89455;
    const double C125565 = C30553 * C89455;
    const double C125561 = C30549 * C89455;
    const double C125557 = C30547 * C89455;
    const double C127820 = C89455 * C9667;
    const double C127816 = C89455 * C9670;
    const double C128139 = C30551 * C89455;
    const double C128295 = C89455 * C25740;
    const double C128625 = C89455 * C10470;
    const double C128621 = C89455 * C10473;
    const double C129060 = C32957 * C89455;
    const double C129056 = C32955 * C89455;
    const double C129270 = C89455 * C26579;
    const double C131759 = C89455 * C29251;
    const double C14642 = C14638 + C14639;
    const double C39228 = C36668 + C36669;
    const double C14362 = C14345 + C14361;
    const double C38766 = C38760 + C38761;
    const double C8598 = C8592 + C8593;
    const double C15497 = C15491 + C15492;
    const double C24505 = C24500 + C24501;
    const double C66279 = C66273 + C66274;
    const double C98966 = C98963 + C98964;
    const double C7250 = C7246 + C7235;
    const double C7370 = C7368 * C141341;
    const double C22304 = C7368 * C21821;
    const double C23304 = C7368 * C21820;
    const double C65081 = C7368 * C141341;
    const double C71929 = C7368 * C71446;
    const double C72922 = C7368 * C141502;
    const double C15177 = C15175 + C3796;
    const double C99382 = C7944 + C7945;
    const double C99379 = C7945 + C7944;
    const double C8274 = C8270 + C8259;
    const double C8391 = C8389 * C141341;
    const double C24296 = C8389 * C21820;
    const double C66069 = C8389 * C141341;
    const double C73900 = C8389 * C141502;
    const double C98554 = C98552 + C10940;
    const double C15493 = C14851 * C14079;
    const double C18484 = C14851 * C5871;
    const double C44417 = C14851 * C43031;
    const double C47408 = C14851 * C139356;
    const double C90846 = C14851 * C89456;
    const double C111308 = C14851 * C71450;
    const double C80920 = C15288 + C15289;
    const double C80919 = C15289 + C15288;
    const double C16600 = C16598 * C141365;
    const double C43463 = C16598 * C42875;
    const double C45509 = C16598 * C42874;
    const double C91904 = C16598 * C141365;
    const double C107498 = C16598 * C106914;
    const double C109430 = C16598 * C141505;
    const double C16721 = C16717 + C16706;
    const double C7713 = C7711 * C141341;
    const double C22553 = C7711 * C21821;
    const double C23639 = C7711 * C21820;
    const double C65411 = C7711 * C141341;
    const double C72178 = C7711 * C71446;
    const double C73254 = C7711 * C141502;
    const double C8711 = C8709 * C141341;
    const double C24607 = C8709 * C21820;
    const double C66381 = C8709 * C141341;
    const double C74208 = C8709 * C141502;
    const double C81324 = C15624 + C15625;
    const double C81323 = C15625 + C15624;
    const double C21408 = C16258 * C5864;
    const double C45174 = C16258 * C141462;
    const double C45169 = C16258 * C141224;
    const double C59883 = C16258 * C141219;
    const double C96662 = C16258 * C141492;
    const double C109117 = C16258 * C71442;
    const double C109114 = C16258 * C141224;
    const double C123 =
        (2 * (2 * ae * C139658 + C139646 * C139675) + C139681 + C139681 +
         C139646 * (C139675 + C139678 + C139678 +
                    C139646 * (2 * ae * C139671 +
                               C139646 *
                                   (C139664 * C139665 +
                                    C139650 * bs[5] * std::pow(C139652, 5)) *
                                   C139653))) /
        C139335;
    const double C915 =
        (C139681 + C139761 * (C139771 + ae * C139774 + C139646 * C139782)) /
        C139335;
    const double C1098 =
        (C139681 + C139761 * (C139852 + ae * C139774 + C139646 * C139857)) /
        C139335;
    const double C1787 =
        (C139681 + C139804 * (C139814 + ae * C139817 + C139646 * C139825)) /
        C139335;
    const double C2124 =
        (C139681 + C139804 * (C139910 + ae * C139817 + C139646 * C139915)) /
        C139335;
    const double C130 = C107 * C117;
    const double C212 = C188 * C117;
    const double C299 = C275 * C117;
    const double C5888 = C5871 * C117;
    const double C5884 = C5873 * C117;
    const double C5987 = C5966 * C117;
    const double C14099 = C14078 * C117;
    const double C21840 = C139356 * C117;
    const double C63625 = C63614 * C117;
    const double C63728 = C63707 * C117;
    const double C71465 = C71450 * C117;
    const double C89476 = C89455 * C117;
    const double C924 = C188 * C826;
    const double C1018 = C275 * C826;
    const double C5890 = C5869 * C826;
    const double C5882 = C5871 * C826;
    const double C5880 = C5873 * C826;
    const double C5983 = C5967 * C826;
    const double C6846 = C5966 * C826;
    const double C7109 = C5864 * C826;
    const double C7099 = C5865 * C826;
    const double C14952 = C14078 * C826;
    const double C21835 = C139356 * C826;
    const double C21936 = C21919 * C826;
    const double C23052 = C141224 * C826;
    const double C29786 = C29775 * C826;
    const double C63621 = C63614 * C826;
    const double C63724 = C63708 * C826;
    const double C64587 = C63707 * C826;
    const double C64832 = C141492 * C826;
    const double C64822 = C63606 * C826;
    const double C71466 = C71448 * C826;
    const double C71460 = C71450 * C826;
    const double C72671 = C141224 * C826;
    const double C90317 = C89455 * C826;
    const double C1702 = C188 * C1604;
    const double C1796 = C275 * C1604;
    const double C7819 = C5871 * C1604;
    const double C7815 = C5873 * C1604;
    const double C7924 = C5966 * C1604;
    const double C13928 = C5869 * C1604;
    const double C14095 = C14079 * C1604;
    const double C15985 = C14078 * C1604;
    const double C16120 = C5864 * C1604;
    const double C16110 = C5865 * C1604;
    const double C23750 = C139356 * C1604;
    const double C35055 = C29775 * C1604;
    const double C43048 = C43031 * C1604;
    const double C45039 = C141224 * C1604;
    const double C65514 = C63614 * C1604;
    const double C65623 = C63707 * C1604;
    const double C73361 = C71450 * C1604;
    const double C79303 = C71448 * C1604;
    const double C81920 = C141224 * C1604;
    const double C89472 = C89456 * C1604;
    const double C91316 = C89455 * C1604;
    const double C91451 = C141492 * C1604;
    const double C91441 = C63606 * C1604;
    const double C6864 = C6852 + C6853;
    const double C21951 = C21932 + C21933;
    const double C22810 = C22799 + C22800;
    const double C64605 = C64593 + C64594;
    const double C71576 = C71557 + C71558;
    const double C23072 = C23047 + C23048;
    const double C30556 = C30541 + C30542;
    const double C72691 = C72666 + C72667;
    const double C8054 = C8048 + C8049;
    const double C14970 = C14958 + C14959;
    const double C43904 = C43893 + C43894;
    const double C81776 = C81769 + C81770;
    const double C90335 = C90323 + C90324;
    const double C27041 = C27035 + C27036;
    const double C36438 = C36431 + C36432;
    const double C76565 = C76559 + C76560;
    const double C99381 = C7942 + C7943;
    const double C99380 = C7943 + C7942;
    const double C18485 = C14850 * C5864;
    const double C47409 = C14850 * C141224;
    const double C93787 = C14850 * C141492;
    const double C111309 = C14850 * C141224;
    const double C36430 = C36104 * C14079;
    const double C37107 = C36104 * C21919;
    const double C52087 = C36104 * C43031;
    const double C52750 = C36104 * C5967;
    const double C125567 = C36104 * C89456;
    const double C133771 = C36104 * C63708;
    const double C26718 = C26706 + C26707;
    const double C36105 = C36098 + C36099;
    const double C76251 = C76239 + C76240;
    const double C16003 = C15991 + C15992;
    const double C43063 = C43044 + C43045;
    const double C44917 = C44906 + C44907;
    const double C91334 = C91322 + C91323;
    const double C107098 = C107079 + C107080;
    const double C45403 = C45390 + C45391;
    const double C53092 = C53090 + C53091;
    const double C89023 = C89019 + C89020;
    const double C10035 =
        (2 * (2 * ae * C139767 + C139761 * C139874) + C140275 + C140275 +
         C139761 * (C139874 + C140272 + C140272 +
                    C139761 * (2 * C139775 + C139761 * C139879))) /
        C139335;
    const double C11255 =
        (C140275 + C139804 * (C139931 + ae * C139761 * C139815 +
                              C139761 * (C139818 + C139761 * C139934))) /
        C139335;
    const double C10040 = C5967 * C9768;
    const double C23188 = C21920 * C9768;
    const double C25925 = C21919 * C9768;
    const double C26006 = C275 * C9768;
    const double C30000 = C29841 * C9768;
    const double C30533 = C29775 * C9768;
    const double C38995 = C14078 * C9768;
    const double C67678 = C63708 * C9768;
    const double C72807 = C71545 * C9768;
    const double C75413 = C71448 * C9768;
    const double C128057 = C89455 * C9768;
    const double C10939 = C5967 * C10595;
    const double C17979 = C188 * C10595;
    const double C24180 = C21920 * C10595;
    const double C26823 = C21919 * C10595;
    const double C26928 = C275 * C10595;
    const double C32944 = C29775 * C10595;
    const double C36310 = C14079 * C10595;
    const double C36886 = C21821 * C10595;
    const double C38915 = C21918 * C10595;
    const double C39454 = C21820 * C10595;
    const double C39923 = C14078 * C10595;
    const double C54580 = C5966 * C10595;
    const double C54660 = C43031 * C10595;
    const double C55120 = C141341 * C10595;
    const double C68521 = C63708 * C10595;
    const double C73785 = C71545 * C10595;
    const double C76233 = C71448 * C10595;
    const double C84307 = C63707 * C10595;
    const double C84978 = C141341 * C10595;
    const double C102097 = C89456 * C10595;
    const double C125970 = C71446 * C10595;
    const double C128506 = C141502 * C10595;
    const double C128951 = C89455 * C10595;
    const double C42718 = C42713 + C42714;
    const double C48046 = C48044 + C48045;
    const double C53206 = C53197 + C53198;
    const double C55811 = C55805 + C55806;
    const double C89127 = C89123 + C89124;
    const double C21734 =
        (2 * (2 * ae * C139810 + C139804 * C139948) + C140427 + C140427 +
         C139804 * (C139948 + C140424 + C140424 +
                    C139804 * (2 * C139818 + C139804 * C139953))) /
        C139335;
    const double C21739 = C14079 * C21228;
    const double C45622 = C43032 * C21228;
    const double C50592 = C188 * C21228;
    const double C50672 = C43031 * C21228;
    const double C58273 = C29775 * C21228;
    const double C58354 = C5966 * C21228;
    const double C58902 = C58593 * C21228;
    const double C96970 = C89456 * C21228;
    const double C109541 = C107067 * C21228;
    const double C114335 = C71448 * C21228;
    const double C139242 = C63707 * C21228;
    const double C40266 = C40262 + C19193;
    const double C40044 = C40042 * C141365;
    const double C52084 = C40042 * C42875;
    const double C55697 = C40042 * C42874;
    const double C129057 = C40042 * C141365;
    const double C133151 = C40042 * C106914;
    const double C136621 = C40042 * C141505;
    const double C18795 = C18794 + C18787;
    const double C52889 = C52883 + C52863;
    const double C55485 = C55481 + C55468;
    const double C52891 = C52885 + C52867;
    const double C47739 = C47738 + C47733;
    const double C55487 = C55483 + C55472;
    const double C57863 = C57853 * C29775;
    const double C6360 = C6359 + C6353;
    const double C14525 = C14524 + C14518;
    const double C3578 = (C139804 * (C139710 + C139761 * C139800)) / C139335;
    const double C139711 = C139687 + C139709;
    const double C139965 = ae * C139963;
    const double C3496 = (C139804 * C139963) / C139330;
    const double C140029 = ae * C140027;
    const double C6726 = C5871 * C2966;
    const double C6716 = C5873 * C2966;
    const double C6844 = C5967 * C2966;
    const double C6974 = C275 * C2966;
    const double C9951 = C5865 * C2966;
    const double C21833 = C139356 * C2966;
    const double C21934 = C21920 * C2966;
    const double C23060 = C141224 * C2966;
    const double C29787 = C29775 * C2966;
    const double C64457 = C63614 * C2966;
    const double C64585 = C63708 * C2966;
    const double C67592 = C63606 * C2966;
    const double C71468 = C71448 * C2966;
    const double C71458 = C71450 * C2966;
    const double C71559 = C71545 * C2966;
    const double C72679 = C141224 * C2966;
    const double C13217 = C5873 * C5331;
    const double C15737 = C5871 * C5331;
    const double C15863 = C188 * C5331;
    const double C15983 = C14079 * C5331;
    const double C21319 = C5865 * C5331;
    const double C42877 = C139356 * C5331;
    const double C43046 = C43032 * C5331;
    const double C45047 = C141224 * C5331;
    const double C50751 = C29775 * C5331;
    const double C70767 = C63614 * C5331;
    const double C81464 = C71450 * C5331;
    const double C91314 = C89456 * C5331;
    const double C96576 = C63606 * C5331;
    const double C106916 = C71448 * C5331;
    const double C107081 = C107067 * C5331;
    const double C109004 = C141224 * C5331;
    const double C10481 = C5865 * C3500;
    const double C68087 = C63606 * C3500;
    const double C80224 = C141224 * C3500;
    const double C115510 = C141224 * C3500;
    const double C26699 = C141224 * C10816;
    const double C36103 = C141219 * C10816;
    const double C76232 = C141224 * C10816;
    const double C43892 = C42875 * C13378;
    const double C81768 = C141365 * C13378;
    const double C99514 = C141365 * C13378;
    const double C107919 = C106914 * C13378;
    const double C47942 = C141224 * C13692;
    const double C52091 = C141219 * C13692;
    const double C85669 = C141224 * C13692;
    const double C47415 = C43791 * C141224;
    const double C111313 = C43791 * C141224;
    const double C52089 = C51770 * C43032;
    const double C52756 = C51770 * C5967;
    const double C133156 = C51770 * C107067;
    const double C133775 = C51770 * C63708;
    const double C9678 = C5865 * C2970;
    const double C22672 = C141224 * C2970;
    const double C67340 = C63606 * C2970;
    const double C72297 = C141224 * C2970;
    const double C22798 = C21821 * C9772;
    const double C72423 = C71446 * C9772;
    const double C25837 = C141224 * C9941;
    const double C30546 = C141219 * C9941;
    const double C75412 = C141224 * C9941;
    const double C23970 = C141353 * C10703;
    const double C35985 = C141365 * C10703;
    const double C98270 = C141365 * C10703;
    const double C27032 = C141224 * C11146;
    const double C36437 = C141219 * C11146;
    const double C76556 = C141224 * C11146;
    const double C22933 = C22921 + C22922;
    const double C25846 = C25840 + C25841;
    const double C30557 = C30543 + C30544;
    const double C75421 = C75415 + C75416;
    const double C23865 = C23853 + C23854;
    const double C26716 = C26702 + C26703;
    const double C36106 = C36100 + C36101;
    const double C73476 = C73464 + C73465;
    const double C76249 = C76235 + C76236;
    const double C80369 = C80361 + C80362;
    const double C98125 = C98117 + C98118;
    const double C21046 = C5865 * C5335;
    const double C44659 = C141224 * C5335;
    const double C96324 = C63606 * C5335;
    const double C108664 = C141224 * C5335;
    const double C47626 = C141224 * C13455;
    const double C51769 = C141219 * C13455;
    const double C85250 = C141224 * C13455;
    const double C44905 = C42875 * C21232;
    const double C108886 = C106914 * C21232;
    const double C50511 = C141224 * C21569;
    const double C60018 = C141219 * C21569;
    const double C114334 = C141224 * C21569;
    const double C44804 = C44792 + C44793;
    const double C50268 = C50260 + C50261;
    const double C59809 = C59805 + C59806;
    const double C114104 = C114096 + C114097;
    const double C140131 = ae * C140130;
    const double C3029 = (2 * C139774 + C139646 * C139783 + C139761 * C140130 +
                          C139761 * C139740 * ae) /
                         C139330;
    const double C3575 = (C139804 * C140130) / C139330;
    const double C140249 = ae * C140248;
    const double C5452 = (2 * C139817 + C139646 * C139826 + C139804 * C140248 +
                          C139804 * C139740 * ae) /
                         C139330;
    const double C140295 = C140294 + C140291;
    const double C10936 =
        (C139804 * C139886 + C140334 + C140334 +
         C139761 * (2 * ae * C139804 * C139797 +
                    C139761 * C139804 *
                        (C139884 + (C139718 * C139719 +
                                    C139869 * bs[7] * std::pow(C139652, 7)) *
                                       C139653 * C139650))) /
        C139335;
    const double C13770 =
        (ae * C139826 + C139761 * C139939 + C140334 +
         C139804 *
             (C140293 +
              C139804 * (ae * C139840 +
                         C139761 * (C139937 + std::pow(C139652, 7) * bs[7] *
                                                  C139928 * C139650)))) /
        C139335;
    const double C140446 = C140445 + C140442;
    const double C13847 =
        (C139761 * C139960 + C140389 + C140389 +
         C139804 * (2 * ae * C140386 +
                    C139804 * C139761 *
                        (C139958 + (C139718 * C139719 +
                                    C139943 * bs[7] * std::pow(C139652, 7)) *
                                       C139653 * C139650))) /
        C139335;
    const double C13851 = C275 * C13376;
    const double C19197 = C14079 * C13376;
    const double C44534 = C43032 * C13376;
    const double C94484 = C89456 * C13376;
    const double C108553 = C107067 * C13376;
    const double C140506 = ae * C140504;
    const double C140505 = C139761 * C140504;
    const double C140552 = C139804 * C140504;
    const double C29406 =
        (C140277 + C140489 * C139943 + C140583 + C140583 +
         C139761 * (2 * ae * (C139785 + C140491 * C139943) +
                    C139761 * (C140489 +
                               C139646 *
                                   (C139718 * C139719 +
                                    C139869 * bs[7] * std::pow(C139652, 7)) *
                                   C139653 * C139943))) /
        C139335;
    const double C48042 =
        (2 * (C140283 + C139804 * C140530) + C140583 +
         C139804 * (C140530 + C140555 +
                    C139804 * (C140502 + C139804 * (ae * C140517 +
                                                    C139761 * C139646 *
                                                        std::pow(C139652, 7) *
                                                        bs[7] * C139928)))) /
        C139335;
    const double C47736 = C188 * C47403;
    const double C52875 = C5967 * C47403;
    const double C88816 = C63708 * C47403;
    const double C140871 = ae * C140869;
    const double C140870 = C139804 * C140869;
    const double C29716 =
        (C140310 + C140533 * C139869 + C140597 + C140597 +
         C139804 * (2 * ae * C140521 +
                    C139804 * (C140533 +
                               C139646 *
                                   (C139718 * C139719 +
                                    C139943 * bs[7] * std::pow(C139652, 7)) *
                                   C139653 * C139869))) /
        C139335;
    const double C29719 = C275 * C29252;
    const double C37642 = C14079 * C29252;
    const double C47192 = C43032 * C29252;
    const double C103606 = C89456 * C29252;
    const double C111109 = C107067 * C29252;
    const double C140797 = C140796 + C140792;
    const double C13299 =
        (C139710 + C139761 * C139800 +
         (C139751 +
          C139761 * (C139790 + ae * C139646 * C139792 +
                     C139646 * (ae * C139792 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139765))) *
             C139943) /
        C139335;
    const double C139752 = C139721 + C139750;
    const double C139981 = ae * C139976;
    const double C140155 = C139804 * C139976;
    const double C13210 = (C139963 + C139976 * C139943) / C139330;
    const double C140045 = ae * C140040;
    const double C140100 = C139708 + C140097;
    const double C140202 = C139708 + C140199;
    const double C13213 =
        (C139962 + C139974 * C139943 + C140352 + C140352 +
         C139646 * (2 * ae * (C139973 + C139761 * C139731 * C139943) +
                    C139646 * (C139974 +
                               C139761 *
                                   (C139718 * C139719 +
                                    C139650 * bs[7] * std::pow(C139652, 7)) *
                                   C139653 * C139943))) /
        C139335;
    const double C29330 =
        (C139857 + C139863 * C139943 + C140352 +
         C139761 * (C140205 +
                    C139761 * (C139863 +
                               (ae * C139792 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139849) *
                                   C139943))) /
        C139335;
    const double C47518 =
        (2 * (C139966 + C139804 * C140780) + C140352 +
         C139804 * (C140780 + C140158 +
                    C139804 * (C139982 + C139804 * C139761 *
                                             (ae * C139835 +
                                              C139646 * std::pow(C139652, 7) *
                                                  bs[7] * C139808)))) /
        C139335;
    const double C47937 =
        (2 * (C139966 + C139804 * C140785) + C140352 +
         C139804 * (C140785 + C140158 +
                    C139804 * (C139982 + C139804 * C139761 *
                                             (ae * C139835 +
                                              C139646 * std::pow(C139652, 7) *
                                                  bs[7] * C139907)))) /
        C139335;
    const double C47299 = C139356 * C47291;
    const double C52406 = C29775 * C47291;
    const double C88386 = C71450 * C47291;
    const double C140256 = ae * C140255;
    const double C25571 = (3 * C140093 + C139761 * C140255) / C139330;
    const double C26354 = (C139804 * C140255) / C139330;
    const double C10478 =
        (C139804 * C140099 + C140316 + C140316 +
         C139646 * (2 * ae * C139804 * (C139695 + C139731 * C139869) +
                    C139646 * C139804 *
                        (C139738 + (C139718 * C139719 +
                                    C139650 * bs[7] * std::pow(C139652, 7)) *
                                       C139653 * C139869))) /
        C139335;
    const double C26696 =
        (2 * (C140030 + C139761 * C140543) + C140316 +
         C139761 * (C140543 + C140158 +
                    C139761 * (C140046 + C139761 * C139804 *
                                             (ae * C139792 +
                                              C139646 * std::pow(C139652, 7) *
                                                  bs[7] * C139849)))) /
        C139335;
    const double C29254 =
        (C139825 + C139839 * C139869 + C140316 +
         C139804 * (C140103 +
                    C139804 * (C139839 +
                               (ae * C139835 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139808) *
                                   C139869))) /
        C139335;
    const double C29564 =
        (C139915 + C139921 * C139869 + C140316 +
         C139804 * (C140103 +
                    C139804 * (C139921 +
                               (ae * C139835 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139907) *
                                   C139869))) /
        C139335;
    const double C140396 = ae * C140395;
    const double C49992 = (3 * C140195 + C139804 * C140395) / C139330;
    const double C140646 = C140624 + C140644;
    const double C140694 = ae * C140689;
    const double C140720 = C140481 + C140717;
    const double C140748 = ae * C140747;
    const double C57850 = (3 * C140578 + C139804 * C140747) / C139330;
    const double C140980 = C140960 + C140978;
    const double C140733 = ae * C140732;
    const double C34667 = (2 * C140376 + C139761 * C140514 + C139804 * C140732 +
                           C139804 * C140641 * ae) /
                          C139330;
    const double C140775 = C140774 + C140771;
    const double C140918 = ae * C140916;
    const double C140917 = C139804 * C140916;
    const double C7230 = C141341 * C3198;
    const double C22197 = C21821 * C3198;
    const double C64953 = C141341 * C3198;
    const double C71822 = C71446 * C3198;
    const double C8589 = C141341 * C4006;
    const double C15487 = C141327 * C4006;
    const double C66270 = C141341 * C4006;
    const double C6862 = C6848 + C6849;
    const double C7244 = C7228 + C7229;
    const double C7367 = C7356 + C7357;
    const double C21955 = C21940 + C21941;
    const double C64603 = C64589 + C64590;
    const double C71580 = C71565 + C71566;
    const double C15174 = C15170 + C3797;
    const double C7940 = C7926 + C7927;
    const double C8268 = C8252 + C8253;
    const double C8388 = C8378 + C8379;
    const double C14849 = C14842 + C14843;
    const double C15286 = C15278 + C15279;
    const double C65639 = C65625 + C65626;
    const double C90641 = C90633 + C90634;
    const double C451 = C447 + C438;
    const double C1191 = C1188 + C1176;
    const double C6269 = C6263 + C6247;
    const double C1969 = C1966 + C1954;
    const double C16257 = C16254 + C16244;
    const double C16140 = C16127 + C16128;
    const double C91471 = C91458 + C91459;
    const double C21324 = C21312 + C21313;
    const double C45067 = C45050 + C45051;
    const double C96581 = C96569 + C96570;
    const double C109012 = C109007 + C109008;
    const double C140286 = ae * C140285;
    const double C9769 =
        (2 * C140122 + C139761 * C140285 + (C139669 + C139692 * C139869) * ae) /
        C139330;
    const double C10596 = (C139804 * C140285) / C139330;
    const double C29174 = (C140285 + C140504 * C139943) / C139330;
    const double C24173 = C21821 * C10935;
    const double C73778 = C71446 * C10935;
    const double C80780 = C141341 * C10935;
    const double C98548 = C141341 * C10935;
    const double C44414 = C141327 * C13769;
    const double C53202 = C141341 * C13769;
    const double C82499 = C141341 * C13769;
    const double C52887 = C52881 + C13538;
    const double C44108 = C44107 + C18791;
    const double C44415 = C43792 * C43032;
    const double C47414 = C43792 * C139356;
    const double C108436 = C43792 * C107067;
    const double C111312 = C43792 * C71450;
    const double C140484 = C140469 + C140482;
    const double C140548 = ae * C140546;
    const double C29410 = C21920 * C29173;
    const double C39689 = C29775 * C29173;
    const double C39812 = C21919 * C29173;
    const double C39921 = C14079 * C29173;
    const double C42209 = C21821 * C29173;
    const double C46889 = C188 * C29173;
    const double C51870 = C5967 * C29173;
    const double C54582 = C5966 * C29173;
    const double C54658 = C43032 * C29173;
    const double C55128 = C141341 * C29173;
    const double C78905 = C71545 * C29173;
    const double C85398 = C63708 * C29173;
    const double C128949 = C89456 * C29173;
    const double C131197 = C71446 * C29173;
    const double C135540 = C63707 * C29173;
    const double C135616 = C107067 * C29173;
    const double C136073 = C141341 * C29173;
    const double C42463 = C21821 * C29405;
    const double C55474 = C141341 * C29405;
    const double C131437 = C71446 * C29405;
    const double C136405 = C141341 * C29405;
    const double C58353 = C141341 * C42708;
    const double C61765 = C141327 * C42708;
    const double C139241 = C141341 * C42708;
    const double C61562 = C61559 + C47735;
    const double C58117 = C58110 + C52868;
    const double C55367 = C55355 + C55356;
    const double C57867 = C57859 + C57860;
    const double C61349 = C61345 + C61346;
    const double C138771 = C138763 + C138764;
    const double C55593 = C55587 + C55588;
    const double C136518 = C136512 + C136513;
    const double C63315 = C63314 + C63311;
    const double C16701 = C141365 * C5783;
    const double C43561 = C42875 * C5783;
    const double C92008 = C141365 * C5783;
    const double C107596 = C106914 * C5783;
    const double C16001 = C15987 + C15988;
    const double C16597 = C16586 + C16587;
    const double C16715 = C16699 + C16700;
    const double C43067 = C43052 + C43053;
    const double C91332 = C91318 + C91319;
    const double C107102 = C107087 + C107088;
    const double C746 = C742 + C733;
    const double C1525 = C1522 + C1510;
    const double C2303 = C2300 + C2288;
    const double C14640 = C14634 + C14618;
    const double C7710 = C7707 + C7698;
    const double C8708 = C8706 + C8699;
    const double C15622 = C15618 + C15600;
    const double C7486 = C7479 + C7480;
    const double C65200 = C65193 + C65194;
    const double C10208 = C10202 + C10203;
    const double C23431 = C23422 + C23423;
    const double C67837 = C67831 + C67832;
    const double C73047 = C73038 + C73039;
    const double C44522 = C42875 * C13846;
    const double C82638 = C141365 * C13846;
    const double C100316 = C141365 * C13846;
    const double C108541 = C106914 * C13846;
    const double C82641 = C82637 + C19195;
    const double C43906 = C43897 + C43898;
    const double C81777 = C81771 + C81772;
    const double C99523 = C99517 + C99518;
    const double C107933 = C107924 + C107925;
    const double C140437 = ae * C140436;
    const double C21229 =
        (2 * C140240 + C139804 * C140436 + (C139669 + C139692 * C139943) * ae) /
        C139330;
    const double C40251 = C141365 * C29715;
    const double C54896 = C42875 * C29715;
    const double C129267 = C141365 * C29715;
    const double C135854 = C106914 * C29715;
    const double C40260 = C40250 + C37639;
    const double C39585 = C39571 + C39572;
    const double C40041 = C40031 + C40032;
    const double C54429 = C54420 + C54421;
    const double C128629 = C128623 + C128624;
    const double C135389 = C135380 + C135381;
    const double C32636 = C32635 + C32632;
    const double C33320 = C33319 + C33316;
    const double C39239 = C39237 + C39230;
    const double C140766 = ae * C140765;
    const double C42293 =
        (2 * C140378 + C139804 * C140765 + (C140268 + C140471 * C139943) * ae) /
        C139330;
    const double C140851 = C140839 + C140849;
    const double C50348 = C45178 * C141224;
    const double C59884 = C45178 * C141219;
    const double C114182 = C45178 * C141224;
    const double C23644 = C23643 * C21821;
    const double C73253 = C23643 * C71446;
    const double C24612 = C24611 * C21821;
    const double C74207 = C24611 * C71446;
    const double C6611 = C6607 + C6608;
    const double C64352 = C64348 + C64349;
    const double C139366 = C139364 - C139351;
    const double C139365 = C139363 / C139330;
    const double C6723 = C5872 * C820;
    const double C6714 = C5872 * C821;
    const double C9677 = C5872 * C2962;
    const double C10480 = C5872 * C3492;
    const double C15734 = C5872 * C1598;
    const double C15728 = C5872 * C1599;
    const double C21045 = C5872 * C5327;
    const double C22671 = C21824 * C2962;
    const double C22667 = C21824 * C821;
    const double C22661 = C21824 * C2961;
    const double C22657 = C21824 * C822;
    const double C25576 = C21824 * C9668;
    const double C26362 = C21824 * C3491;
    const double C26358 = C21824 * C10471;
    const double C44658 = C21824 * C5327;
    const double C44654 = C21824 * C1599;
    const double C44648 = C21824 * C5326;
    const double C44644 = C21824 * C1600;
    const double C47296 = C21824 * C13206;
    const double C49997 = C21824 * C21036;
    const double C115509 = C21824 * C3492;
    const double C30286 = C29774 * C9668;
    const double C30284 = C29774 * C2961;
    const double C30282 = C29774 * C822;
    const double C30279 = C29774 * C9667;
    const double C30277 = C29774 * C2960;
    const double C30275 = C29774 * C823;
    const double C32184 = C29774 * C25568;
    const double C32710 = C29774 * C3490;
    const double C32708 = C29774 * C10470;
    const double C32706 = C29774 * C26351;
    const double C35756 = C29774 * C10471;
    const double C35753 = C29774 * C3491;
    const double C36772 = C29774 * C1600;
    const double C36770 = C29774 * C1601;
    const double C39342 = C29774 * C13205;
    const double C39339 = C29774 * C29087;
    const double C42116 = C29774 * C5325;
    const double C51448 = C29774 * C13206;
    const double C52403 = C29774 * C5326;
    const double C55011 = C29774 * C42109;
    const double C57770 = C29774 * C21035;
    const double C59579 = C29774 * C21036;
    const double C63078 = C29774 * C49989;
    const double C64464 = C63613 * C820;
    const double C64455 = C63613 * C821;
    const double C67339 = C63613 * C2962;
    const double C68086 = C63613 * C3492;
    const double C91083 = C63613 * C1598;
    const double C91077 = C63613 * C1599;
    const double C96323 = C63613 * C5327;
    const double C72296 = C71449 * C2962;
    const double C72292 = C71449 * C821;
    const double C72286 = C71449 * C2961;
    const double C72282 = C71449 * C822;
    const double C75167 = C71449 * C9668;
    const double C75911 = C71449 * C3491;
    const double C75907 = C71449 * C10471;
    const double C80223 = C71449 * C3492;
    const double C81461 = C71449 * C1599;
    const double C81457 = C71449 * C1600;
    const double C84834 = C71449 * C13206;
    const double C88379 = C71449 * C5326;
    const double C108663 = C71449 * C5327;
    const double C113849 = C71449 * C21036;
    const double C7127 = C7112 + C7113;
    const double C7124 = C7106 + C7107;
    const double C7121 = C7100 + C7101;
    const double C7118 = C7094 + C7095;
    const double C7484 = C7475 + C7476;
    const double C7481 = C7469 + C7470;
    const double C9961 = C9954 + C9955;
    const double C9958 = C9948 + C9949;
    const double C10210 = C10206 + C10207;
    const double C10836 = C10829 + C10830;
    const double C10833 = C10823 + C10824;
    const double C11157 = C11153 + C11154;
    const double C16138 = C16123 + C16124;
    const double C16135 = C16117 + C16118;
    const double C16132 = C16111 + C16112;
    const double C16129 = C16105 + C16106;
    const double C16483 = C16474 + C16475;
    const double C16480 = C16468 + C16469;
    const double C21329 = C21322 + C21323;
    const double C21326 = C21316 + C21317;
    const double C21580 = C21576 + C21577;
    const double C7122 = C7102 + C7103;
    const double C7119 = C7096 + C7097;
    const double C7485 = C7477 + C7478;
    const double C7482 = C7471 + C7472;
    const double C9960 = C9952 + C9953;
    const double C9957 = C9946 + C9947;
    const double C10209 = C10204 + C10205;
    const double C10835 = C10827 + C10828;
    const double C10832 = C10821 + C10822;
    const double C11156 = C11151 + C11152;
    const double C16139 = C16125 + C16126;
    const double C16133 = C16113 + C16114;
    const double C16130 = C16107 + C16108;
    const double C16481 = C16470 + C16471;
    const double C21328 = C21320 + C21321;
    const double C21325 = C21314 + C21315;
    const double C21579 = C21574 + C21575;
    const double C75328 = C72542 + C72543;
    const double C72698 = C72680 + C72681;
    const double C72696 = C72676 + C72677;
    const double C72694 = C72672 + C72673;
    const double C72692 = C72668 + C72669;
    const double C72690 = C72664 + C72665;
    const double C72688 = C72660 + C72661;
    const double C72686 = C72656 + C72657;
    const double C72684 = C72652 + C72653;
    const double C73046 = C73036 + C73037;
    const double C73044 = C73032 + C73033;
    const double C73042 = C73028 + C73029;
    const double C73040 = C73024 + C73025;
    const double C75422 = C75417 + C75418;
    const double C75659 = C75655 + C75656;
    const double C76254 = C76245 + C76246;
    const double C76252 = C76241 + C76242;
    const double C76250 = C76237 + C76238;
    const double C76566 = C76561 + C76562;
    const double C76564 = C76557 + C76558;
    const double C80647 = C80641 + C80642;
    const double C80645 = C80637 + C80638;
    const double C81055 = C81051 + C81052;
    const double C81931 = C81921 + C81922;
    const double C81929 = C81917 + C81918;
    const double C81927 = C81913 + C81914;
    const double C81925 = C81909 + C81910;
    const double C82361 = C82355 + C82356;
    const double C82359 = C82351 + C82352;
    const double C85262 = C85255 + C85256;
    const double C85260 = C85251 + C85252;
    const double C85674 = C85670 + C85671;
    const double C88710 = C88705 + C88706;
    const double C88708 = C88701 + C88702;
    const double C89024 = C89021 + C89022;
    const double C113935 = C108775 + C108776;
    const double C109011 = C109005 + C109006;
    const double C109009 = C109001 + C109002;
    const double C109328 = C109324 + C109325;
    const double C114105 = C114098 + C114099;
    const double C114103 = C114094 + C114095;
    const double C39078 = C39073 + C36426;
    const double C58028 = C58021 + C52746;
    const double C139502 = C139462 / C139330;
    const double C22180 =
        (-(((-4 * C139420) / C139330 - C139462 / C139330) * be) / C139330) /
            C139336 -
        ((2 * ((-C139448 / C139330) / C139336 - (0 * be) / C139330) -
          C139462 / C139345) *
         be) /
            C139330;
    const double C22201 = C22179 * C110;
    const double C22186 = C22179 * C109;
    const double C23185 = C22179 * C822;
    const double C24177 = C22179 * C1600;
    const double C37217 = C22179 * C1601;
    const double C39805 = C22179 * C3490;
    const double C42466 = C22179 * C5325;
    const double C22195 = C22181 * C2962;
    const double C22192 = C22181 * C2961;
    const double C23179 = C22181 * C9668;
    const double C24171 = C22181 * C10471;
    const double C37221 = C22181 * C10470;
    const double C39809 = C22181 * C26351;
    const double C42462 = C22181 * C29087;
    const double C63986 = C63970 * C820;
    const double C63983 = C63970 * C821;
    const double C63977 = C63970 * C822;
    const double C64957 = C63970 * C2961;
    const double C64951 = C63970 * C2962;
    const double C65945 = C63970 * C3491;
    const double C65939 = C63970 * C3492;
    const double C80779 = C63970 * C10471;
    const double C82068 = C63970 * C13206;
    const double C82065 = C63970 * C3490;
    const double C85395 = C63970 * C10470;
    const double C88809 = C63970 * C13205;
    const double C136404 = C63970 * C29087;
    const double C139004 = C63970 * C42109;
    const double C71820 = C71806 * C2962;
    const double C71817 = C71806 * C2961;
    const double C72798 = C71806 * C9668;
    const double C73776 = C71806 * C10471;
    const double C126293 = C71806 * C10470;
    const double C128837 = C71806 * C26351;
    const double C131436 = C71806 * C29087;
    const double C139485 = C139482 - C139477;
    const double C63745 = C63732 + C63733;
    const double C63740 = C63722 + C63723;
    const double C63738 = C63718 + C63719;
    const double C63736 = C63714 + C63715;
    const double C63734 = C63710 + C63711;
    const double C64099 = C64091 + C64092;
    const double C64268 = C64261 + C64262;
    const double C64265 = C64255 + C64256;
    const double C64263 = C64250 + C64251;
    const double C64608 = C64599 + C64600;
    const double C64606 = C64595 + C64596;
    const double C64604 = C64591 + C64592;
    const double C65310 = C65305 + C65306;
    const double C65308 = C65301 + C65302;
    const double C65644 = C65635 + C65636;
    const double C65642 = C65631 + C65632;
    const double C65640 = C65627 + C65628;
    const double C66280 = C66275 + C66276;
    const double C66278 = C66271 + C66272;
    const double C80372 = C80367 + C80368;
    const double C80370 = C80363 + C80364;
    const double C81192 = C81189 + C81190;
    const double C81636 = C81625 + C81626;
    const double C81634 = C81621 + C81622;
    const double C81631 = C81613 + C81614;
    const double C81629 = C81609 + C81610;
    const double C82506 = C82500 + C82501;
    const double C82503 = C82493 + C82494;
    const double C84985 = C84979 + C84980;
    const double C84983 = C84975 + C84976;
    const double C85809 = C85805 + C85806;
    const double C88502 = C88497 + C88498;
    const double C88500 = C88493 + C88494;
    const double C89128 = C89125 + C89126;
    const double C138922 = C133765 + C133766;
    const double C136080 = C136074 + C136075;
    const double C136078 = C136070 + C136071;
    const double C136727 = C136723 + C136724;
    const double C138772 = C138765 + C138766;
    const double C138770 = C138761 + C138762;
    const double C139568 = C139532 / C139330;
    const double C43544 =
        (-(((-4 * C139432) / C139330 - C139532 / C139330) * be) / C139330) /
            C139336 -
        ((2 * ((-C139518 / C139330) / C139336 - (0 * be) / C139330) -
          C139532 / C139345) *
         be) /
            C139330;
    const double C43565 = C43543 * C110;
    const double C43550 = C43543 * C109;
    const double C44526 = C43543 * C822;
    const double C45619 = C43543 * C1600;
    const double C52290 = C43543 * C823;
    const double C54899 = C43543 * C2960;
    const double C55915 = C43543 * C3490;
    const double C43559 = C43545 * C5327;
    const double C43556 = C43545 * C5326;
    const double C44520 = C43545 * C13206;
    const double C45613 = C43545 * C21036;
    const double C52294 = C43545 * C13205;
    const double C54895 = C43545 * C29087;
    const double C55911 = C43545 * C42109;
    const double C89993 = C89977 * C1598;
    const double C89990 = C89977 * C1599;
    const double C89984 = C89977 * C1600;
    const double C90953 = C89977 * C3491;
    const double C90947 = C89977 * C3492;
    const double C92012 = C89977 * C5326;
    const double C92006 = C89977 * C5327;
    const double C99102 = C89977 * C10471;
    const double C99099 = C89977 * C3490;
    const double C100315 = C89977 * C13206;
    const double C102397 = C89977 * C10470;
    const double C103599 = C89977 * C13205;
    const double C128291 = C89977 * C26351;
    const double C129266 = C89977 * C29087;
    const double C107594 = C107580 * C5327;
    const double C107591 = C107580 * C5326;
    const double C108539 = C107580 * C13206;
    const double C109532 = C107580 * C21036;
    const double C133358 = C107580 * C13205;
    const double C135853 = C107580 * C29087;
    const double C136827 = C107580 * C42109;
    const double C139551 = C139548 - C139543;
    const double C89493 = C89480 + C89481;
    const double C89488 = C89470 + C89471;
    const double C89486 = C89466 + C89467;
    const double C89484 = C89462 + C89463;
    const double C89482 = C89458 + C89459;
    const double C89736 = C89729 + C89730;
    const double C89733 = C89723 + C89724;
    const double C89731 = C89718 + C89719;
    const double C89900 = C89892 + C89893;
    const double C90338 = C90329 + C90330;
    const double C90336 = C90325 + C90326;
    const double C90334 = C90321 + C90322;
    const double C90644 = C90639 + C90640;
    const double C90642 = C90635 + C90636;
    const double C91337 = C91328 + C91329;
    const double C91335 = C91324 + C91325;
    const double C91333 = C91320 + C91321;
    const double C91685 = C91680 + C91681;
    const double C91683 = C91676 + C91677;
    const double C98286 = C98275 + C98276;
    const double C98284 = C98271 + C98272;
    const double C98281 = C98263 + C98264;
    const double C98279 = C98259 + C98260;
    const double C98700 = C98694 + C98695;
    const double C98697 = C98687 + C98688;
    const double C99524 = C99519 + C99520;
    const double C99522 = C99515 + C99516;
    const double C99922 = C99919 + C99920;
    const double C101800 = C101795 + C101796;
    const double C101798 = C101791 + C101792;
    const double C102102 = C102099 + C102100;
    const double C102812 = C102807 + C102808;
    const double C102810 = C102803 + C102804;
    const double C103208 = C103205 + C103206;
    const double C128135 = C125561 + C125562;
    const double C127827 = C127820 + C127821;
    const double C127825 = C127816 + C127817;
    const double C128630 = C128625 + C128626;
    const double C128628 = C128621 + C128622;
    const double C14643 = C14642 * C141327;
    const double C100184 = C8598 + C8599;
    const double C100183 = C8599 + C8598;
    const double C15499 = C15497 * C141365;
    const double C44416 = C15497 * C42874;
    const double C90845 = C15497 * C141365;
    const double C108437 = C15497 * C141505;
    const double C7254 = C7250 + C7236;
    const double C15179 = C15177 + C15173;
    const double C8278 = C8274 + C8260;
    const double C98556 = C98554 + C98550;
    const double C16725 = C16721 + C16707;
    const double C50347 = C45168 + C45169;
    const double C114181 = C109113 + C109114;
    const double C925 = C141327 * C915;
    const double C5984 = C141341 * C915;
    const double C6847 = C141478 * C915;
    const double C21937 = C21820 * C915;
    const double C63725 = C141341 * C915;
    const double C64588 = C63607 * C915;
    const double C71562 = C141502 * C915;
    const double C7115 = C5864 * C1098;
    const double C7105 = C5865 * C1098;
    const double C23056 = C141224 * C1098;
    const double C64838 = C141492 * C1098;
    const double C64828 = C63606 * C1098;
    const double C72675 = C141224 * C1098;
    const double C1797 = C141353 * C1787;
    const double C14096 = C141365 * C1787;
    const double C15986 = C141479 * C1787;
    const double C43049 = C42874 * C1787;
    const double C89473 = C141365 * C1787;
    const double C91317 = C89302 * C1787;
    const double C107084 = C141505 * C1787;
    const double C16477 = C5864 * C2124;
    const double C16473 = C5865 * C2124;
    const double C45395 = C141224 * C2124;
    const double C82358 = C141224 * C2124;
    const double C91793 = C141492 * C2124;
    const double C91789 = C63606 * C2124;
    const double C223 = C212 + C213;
    const double C310 = C299 + C300;
    const double C6002 = C5987 + C5988;
    const double C14114 = C14099 + C14100;
    const double C63743 = C63728 + C63729;
    const double C89491 = C89476 + C89477;
    const double C1028 = C1018 + C1019;
    const double C7125 = C7108 + C7109;
    const double C7120 = C7098 + C7099;
    const double C14967 = C14952 + C14953;
    const double C23074 = C23051 + C23052;
    const double C64843 = C64821 + C64822;
    const double C72693 = C72670 + C72671;
    const double C90332 = C90317 + C90318;
    const double C1712 = C1702 + C1703;
    const double C7939 = C7924 + C7925;
    const double C16136 = C16119 + C16120;
    const double C16131 = C16109 + C16110;
    const double C45061 = C45038 + C45039;
    const double C65638 = C65623 + C65624;
    const double C81930 = C81919 + C81920;
    const double C91462 = C91440 + C91441;
    const double C10708 = C8054 * C5864;
    const double C26590 = C8054 * C141224;
    const double C68302 = C8054 * C141492;
    const double C76129 = C8054 * C141224;
    const double C80505 = C14970 + C14971;
    const double C80504 = C14971 + C14970;
    const double C36440 = C36438 * C141365;
    const double C52088 = C36438 * C42874;
    const double C125568 = C36438 * C141365;
    const double C133155 = C36438 * C141505;
    const double C37108 = C36105 * C21820;
    const double C52751 = C36105 * C141341;
    const double C126188 = C36105 * C141502;
    const double C133772 = C36105 * C141341;
    const double C37537 = C21821 * C11255;
    const double C40146 = C21820 * C11255;
    const double C55804 = C141341 * C11255;
    const double C85808 = C141341 * C11255;
    const double C126603 = C71446 * C11255;
    const double C129162 = C141502 * C11255;
    const double C26008 = C26006 + C26007;
    const double C30552 = C30533 + C30534;
    const double C38998 = C38995 + C38996;
    const double C75420 = C75413 + C75414;
    const double C128060 = C128057 + C128058;
    const double C55478 = C55469 + C10939;
    const double C26930 = C26928 + C26929;
    const double C32954 = C32944 + C32945;
    const double C36319 = C36310 + C36311;
    const double C36895 = C36885 + C36886;
    const double C39464 = C39453 + C39454;
    const double C39930 = C39923 + C39924;
    const double C54665 = C54660 + C54661;
    const double C55134 = C55119 + C55120;
    const double C76248 = C76233 + C76234;
    const double C84984 = C84977 + C84978;
    const double C102101 = C102097 + C102098;
    const double C125979 = C125969 + C125970;
    const double C128954 = C128951 + C128952;
    const double C58351 = C53205 + C53206;
    const double C50594 = C50592 + C50593;
    const double C58275 = C58273 + C58274;
    const double C58357 = C58354 + C58355;
    const double C114338 = C114335 + C114336;
    const double C139245 = C139242 + C139243;
    const double C40270 = C40266 + C40255;
    const double C18796 = C18795 * C5863;
    const double C47730 = C18795 * C141462;
    const double C61557 = C18795 * C141219;
    const double C94084 = C18795 * C141506;
    const double C111608 = C18795 * C71442;
    const double C58109 = C52890 + C52891;
    const double C47740 = C47739 * C141462;
    const double C61558 = C47739 * C141219;
    const double C111610 = C47739 * C71442;
    const double C57869 = C57863 + C57864;
    const double C7923 = C141341 * C3578;
    const double C14841 = C141327 * C3578;
    const double C65622 = C141341 * C3578;
    const double C139712 = C139711 + C139700;
    const double C830 = (2 * (2 * ae * C139761 * C139671 + C139646 * C139962) +
                         C139965 + C139965 +
                         C139646 * (C139962 + C139966 + C139966 +
                                    C139646 * (2 * ae * C139761 * C139695 +
                                               C139646 * C139761 * C139738))) /
                        C139335;
    const double C3032 = (C139771 + ae * C139774 + C139646 * C139782 + C139965 +
                          C139761 * (C139710 + C139761 * C139800)) /
                         C139335;
    const double C3144 = (C139852 + ae * C139774 + C139646 * C139857 + C139965 +
                          C139761 * (C139710 + C139761 * C139865)) /
                         C139335;
    const double C3652 = (C139965 + C139804 * C139761 * C139843) / C139335;
    const double C3936 = (C139965 + C139804 * C139761 * C139923) / C139335;
    const double C7822 = C5871 * C3496;
    const double C7812 = C5873 * C3496;
    const double C7922 = C5967 * C3496;
    const double C8044 = C275 * C3496;
    const double C10826 = C5865 * C3496;
    const double C14840 = C188 * C3496;
    const double C14950 = C14079 * C3496;
    const double C23752 = C139356 * C3496;
    const double C35056 = C29775 * C3496;
    const double C65511 = C63614 * C3496;
    const double C65621 = C63708 * C3496;
    const double C68411 = C63606 * C3496;
    const double C73363 = C71450 * C3496;
    const double C79305 = C71448 * C3496;
    const double C80640 = C141224 * C3496;
    const double C90315 = C89456 * C3496;
    const double C115910 = C141224 * C3496;
    const double C1608 = (2 * (2 * ae * C139804 * C139671 + C139646 * C140026) +
                          C140029 + C140029 +
                          C139646 * (C140026 + C140030 + C140030 +
                                     C139646 * (2 * ae * C139804 * C139695 +
                                                C139646 * C139804 * C139738))) /
                         C139335;
    const double C3722 = (C140029 + C139761 * C139804 * C139865) / C139335;
    const double C5455 = (C139814 + ae * C139817 + C139646 * C139825 + C140029 +
                          C139804 * (C139710 + C139804 * C139843)) /
                         C139335;
    const double C5675 = (C139910 + ae * C139817 + C139646 * C139915 + C140029 +
                          C139804 * (C139710 + C139804 * C139923)) /
                         C139335;
    const double C6990 = C6974 + C6975;
    const double C9959 = C9950 + C9951;
    const double C23078 = C23059 + C23060;
    const double C67600 = C67591 + C67592;
    const double C72697 = C72678 + C72679;
    const double C15879 = C15863 + C15864;
    const double C21327 = C21318 + C21319;
    const double C45065 = C45046 + C45047;
    const double C96584 = C96575 + C96576;
    const double C109010 = C109003 + C109004;
    const double C43903 = C43891 + C43892;
    const double C81775 = C81767 + C81768;
    const double C99521 = C99513 + C99514;
    const double C107930 = C107918 + C107919;
    const double C47944 = C47941 + C47942;
    const double C52092 = C52090 + C52091;
    const double C85673 = C85668 + C85669;
    const double C22809 = C22797 + C22798;
    const double C72434 = C72422 + C72423;
    const double C23973 = C23969 + C23970;
    const double C35997 = C35984 + C35985;
    const double C98283 = C98269 + C98270;
    const double C27039 = C27031 + C27032;
    const double C36439 = C36436 + C36437;
    const double C76563 = C76555 + C76556;
    const double C25746 = C22933 * C141224;
    const double C30456 = C22933 * C141219;
    const double C75329 = C22933 * C141224;
    const double C30780 = C30557 * C275;
    const double C36435 = C36106 * C14079;
    const double C37109 = C36106 * C21920;
    const double C125571 = C36106 * C89456;
    const double C126189 = C36106 * C71545;
    const double C47630 = C47625 + C47626;
    const double C51771 = C51768 + C51769;
    const double C85259 = C85249 + C85250;
    const double C44916 = C44904 + C44905;
    const double C108897 = C108885 + C108886;
    const double C50088 = C44804 * C141224;
    const double C59662 = C44804 * C141219;
    const double C113936 = C44804 * C141224;
    const double C59811 = C59809 * C188;
    const double C3199 =
        (2 * C139646 * C139879 + C139646 * C139886 + C140131 + C140131 +
         C139761 * (2 * ae * C139801 +
                    C139761 * (2 * C139646 * C139884 +
                               C139646 * (C139884 + (C139718 * C139719 +
                                                     C139869 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139650)))) /
        C139335;
    const double C4007 =
        (C140131 +
         C139804 *
             (ae * C139844 +
              C139761 * (2 * C139646 * C139937 +
                         C139646 * (C139937 + std::pow(C139652, 7) * bs[7] *
                                                  C139928 * C139650)))) /
        C139335;
    const double C3204 = C188 * C3029;
    const double C7243 = C5967 * C3029;
    const double C22206 = C21920 * C3029;
    const double C64966 = C63708 * C3029;
    const double C71831 = C71545 * C3029;
    const double C3798 = C188 * C3575;
    const double C8267 = C5967 * C3575;
    const double C65954 = C63708 * C3575;
    const double C5784 =
        (2 * C139646 * C139953 + C139646 * C139960 + C140249 + C140249 +
         C139804 * (2 * ae * C139844 +
                    C139804 * (2 * C139646 * C139958 +
                               C139646 * (C139958 + (C139718 * C139719 +
                                                     C139943 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139650)))) /
        C139335;
    const double C5789 = C275 * C5452;
    const double C16714 = C14079 * C5452;
    const double C43570 = C43032 * C5452;
    const double C92021 = C89456 * C5452;
    const double C107605 = C107067 * C5452;
    const double C140296 = ae * C140295;
    const double C9770 =
        (2 * C140126 + C139761 * C140295 + (C139697 + C139733 * C139869) * ae) /
        C139330;
    const double C10597 = (C139804 * C140295) / C139330;
    const double C140447 = ae * C140446;
    const double C21230 =
        (2 * C140244 + C139804 * C140446 + (C139697 + C139733 * C139943) * ae) /
        C139330;
    const double C140507 = C140490 + C140505;
    const double C140554 = ae * C140552;
    const double C140872 = C140857 + C140870;
    const double C140798 = ae * C140797;
    const double C47517 =
        (2 * C140383 + C139804 * C140797 + (C140279 + C140492 * C139943) * ae) /
        C139330;
    const double C139753 = C139752 + C139736;
    const double C10600 =
        (C139804 *
         (C139800 + C139981 +
          C139761 *
              (C139751 + C139761 * (C139790 + ae * C139646 * C139792 +
                                    C139646 * (ae * C139792 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139765))))) /
        C139335;
    const double C140157 = ae * C140155;
    const double C13220 = C5873 * C13210;
    const double C43688 = C139356 * C13210;
    const double C50752 = C29775 * C13210;
    const double C70770 = C63614 * C13210;
    const double C81466 = C71450 * C13210;
    const double C140102 = ae * C140100;
    const double C9672 = (2 * C139963 + C139761 * C140100) / C139330;
    const double C10475 = (C139804 * C140100) / C139330;
    const double C140204 = ae * C140202;
    const double C21040 = (2 * C140027 + C139804 * C140202) / C139330;
    const double C9675 =
        (2 * C139962 + C139761 * C140099 + C140256 + C140256 +
         C139646 *
             (2 * ae * (2 * C139973 + C139761 * (C139695 + C139731 * C139869)) +
              C139646 * (2 * C139974 +
                         C139761 * (C139738 +
                                    (C139718 * C139719 +
                                     C139650 * bs[7] * std::pow(C139652, 7)) *
                                        C139653 * C139869)))) /
        C139335;
    const double C25665 =
        (3 * (C139782 + C139966 + C139761 * C140457) + C140256 +
         C139761 *
             (2 * C140457 + C140103 +
              C139761 * (C139796 + C139982 +
                         C139761 * (C139744 +
                                    C139761 * (ae * C139792 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139765))))) /
        C139335;
    const double C25832 =
        (3 * (C139857 + C139966 + C139761 * C140465) + C140256 +
         C139761 *
             (2 * C140465 + C140103 +
              C139761 * (C139863 + C139982 +
                         C139761 * (C139744 +
                                    C139761 * (ae * C139792 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139849))))) /
        C139335;
    const double C26582 =
        (C140256 +
         C139804 * (2 * C139761 * C139839 +
                    C139761 * (C139839 +
                               (ae * C139835 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139808) *
                                   C139869))) /
        C139335;
    const double C27029 =
        (C140256 +
         C139804 * (2 * C139761 * C139921 +
                    C139761 * (C139921 +
                               (ae * C139835 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139907) *
                                   C139869))) /
        C139335;
    const double C25581 = C139356 * C25571;
    const double C30288 = C29775 * C25571;
    const double C75172 = C71450 * C25571;
    const double C26367 = C139356 * C26354;
    const double C31000 = C29775 * C26354;
    const double C75916 = C71450 * C26354;
    const double C21043 =
        (2 * C140026 + C139804 * C140201 + C140396 + C140396 +
         C139646 *
             (2 * ae * (2 * C140037 + C139804 * (C139695 + C139731 * C139943)) +
              C139646 * (2 * C140038 +
                         C139804 * (C139738 +
                                    (C139718 * C139719 +
                                     C139650 * bs[7] * std::pow(C139652, 7)) *
                                        C139653 * C139943)))) /
        C139335;
    const double C47617 =
        (C140396 +
         C139761 * (2 * C140543 +
                    C139804 * (C139863 +
                               (ae * C139792 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139849) *
                                   C139943))) /
        C139335;
    const double C50176 =
        (3 * (C139825 + C140030 + C139804 * C140811) + C140396 +
         C139804 *
             (2 * C140811 + C140205 +
              C139804 * (C139839 + C140046 +
                         C139804 * (C139744 +
                                    C139804 * (ae * C139835 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139808))))) /
        C139335;
    const double C50507 =
        (3 * (C139915 + C140030 + C139804 * C140829) + C140396 +
         C139804 *
             (2 * C140829 + C140205 +
              C139804 * (C139921 + C140046 +
                         C139804 * (C139744 +
                                    C139804 * (ae * C139835 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139907))))) /
        C139335;
    const double C50002 = C139356 * C49992;
    const double C59581 = C29775 * C49992;
    const double C113854 = C71450 * C49992;
    const double C140647 = C140646 + C140636;
    const double C140722 = ae * C140720;
    const double C42198 = (2 * C140546 + C139804 * C140720) / C139330;
    const double C42460 =
        (2 * C140545 + C139804 * C140719 + C140748 + C140748 +
         C139761 *
             (2 * ae * (2 * C140686 + C139804 * (C139779 + C139792 * C139943)) +
              C139761 * (2 * C140687 +
                         C139804 * (C139884 +
                                    (C139718 * C139719 +
                                     C139869 * bs[7] * std::pow(C139652, 7)) *
                                        C139653 * C139943)))) /
        C139335;
    const double C58349 =
        (3 * (C140526 + C140549 + C139804 * C140898) + C140748 +
         C139804 *
             (2 * C140898 + C140723 +
              C139804 * (C140672 + C140695 +
                         C139804 * (C140638 +
                                    C139804 * (ae * C139835 +
                                               C139761 * std::pow(C139652, 7) *
                                                   bs[7] * C139928))))) /
        C139335;
    const double C58115 = C5967 * C57850;
    const double C61561 = C188 * C57850;
    const double C139009 = C63708 * C57850;
    const double C140981 = C140980 + C140963;
    const double C34978 =
        (2 * C139761 * C139953 + C139761 * C140677 + C140733 + C140733 +
         C139804 * (2 * ae * C140665 +
                    C139804 * (2 * C139761 * C139958 +
                               C139761 * (C139958 + (C139718 * C139719 +
                                                     C139943 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139869)))) /
        C139335;
    const double C34980 = C275 * C34667;
    const double C40259 = C14079 * C34667;
    const double C54903 = C43032 * C34667;
    const double C129271 = C89456 * C34667;
    const double C135861 = C107067 * C34667;
    const double C140776 = ae * C140775;
    const double C42294 =
        (2 * C140592 + C139804 * C140775 + (C140476 + C140633 * C139943) * ae) /
        C139330;
    const double C140919 = C140902 + C140917;
    const double C8596 = C8588 + C8589;
    const double C15496 = C15486 + C15487;
    const double C66277 = C66269 + C66270;
    const double C7248 = C7244 + C7229;
    const double C7369 = C7367 * C141341;
    const double C22305 = C7367 * C21821;
    const double C65077 = C7367 * C141341;
    const double C71930 = C7367 * C71446;
    const double C15176 = C15174 + C3797;
    const double C8272 = C8268 + C8253;
    const double C8390 = C8388 * C141341;
    const double C66065 = C8388 * C141341;
    const double C15488 = C14849 * C14079;
    const double C18486 = C14849 * C5873;
    const double C90842 = C14849 * C89456;
    const double C93788 = C14849 * C63614;
    const double C16249 = C1969 * C5865;
    const double C91575 = C1969 * C63606;
    const double C21407 = C16257 * C5865;
    const double C45175 = C16257 * C141224;
    const double C96661 = C16257 * C63606;
    const double C109118 = C16257 * C141224;
    const double C10036 =
        (2 * (2 * ae * C139774 + C139761 * C140277) + C140286 + C140286 +
         C139761 * (C140277 + C140283 + C140283 +
                    C139761 * (2 * C139789 + C139761 * C139646 * C139884))) /
        C139335;
    const double C11256 =
        (C140286 +
         C139804 * (C140306 + ae * C139761 * C139828 +
                    C139761 * (C139832 + C139761 * C139646 * C139937))) /
        C139335;
    const double C10042 = C5967 * C9769;
    const double C22804 = C21821 * C9769;
    const double C23180 = C21920 * C9769;
    const double C23301 = C275 * C9769;
    const double C25836 = C139356 * C9769;
    const double C25928 = C21919 * C9769;
    const double C30001 = C29841 * C9769;
    const double C30545 = C29775 * C9769;
    const double C67680 = C63708 * C9769;
    const double C72429 = C71446 * C9769;
    const double C72799 = C71545 * C9769;
    const double C75411 = C71450 * C9769;
    const double C10941 = C5967 * C10596;
    const double C17980 = C188 * C10596;
    const double C23860 = C21821 * C10596;
    const double C24172 = C21920 * C10596;
    const double C24293 = C275 * C10596;
    const double C26698 = C139356 * C10596;
    const double C26826 = C21919 * C10596;
    const double C36102 = C29775 * C10596;
    const double C36314 = C14079 * C10596;
    const double C68523 = C63708 * C10596;
    const double C73471 = C71446 * C10596;
    const double C73777 = C71545 * C10596;
    const double C76231 = C71450 * C10596;
    const double C80366 = C141341 * C10596;
    const double C84309 = C63707 * C10596;
    const double C98122 = C141341 * C10596;
    const double C98692 = C89456 * C10596;
    const double C101997 = C5966 * C10596;
    const double C29413 = C21920 * C29174;
    const double C46890 = C188 * C29174;
    const double C51873 = C5967 * C29174;
    const double C78908 = C71545 * C29174;
    const double C85400 = C63708 * C29174;
    const double C44420 = C44413 + C44414;
    const double C53208 = C53201 + C53202;
    const double C82505 = C82498 + C82499;
    const double C52893 = C52887 + C52873;
    const double C44109 = C44108 + C44106;
    const double C140485 = C140484 + C140478;
    const double C26819 =
        (2 * (2 * ae * C139804 * C139772 + C139761 * C140545) + C140548 +
         C140548 +
         C139761 * (C140545 + C140549 + C140549 +
                    C139761 * (2 * ae * C139804 * C139779 +
                               C139761 * C139804 * C139884))) /
        C139335;
    const double C29639 =
        (C139931 + ae * C140376 + C139761 * C140526 + C140548 +
         C139804 *
             (C140483 + C139804 * (C139934 + ae * C139761 * C139822 +
                                   C139761 * (C139829 + C139761 * C139937)))) /
        C139335;
    const double C39703 = C39689 + C39690;
    const double C39929 = C39921 + C39922;
    const double C42217 = C42208 + C42209;
    const double C55480 = C55473 + C51870;
    const double C54664 = C54658 + C54659;
    const double C55138 = C55127 + C55128;
    const double C128953 = C128949 + C128950;
    const double C131205 = C131196 + C131197;
    const double C135622 = C135616 + C135617;
    const double C136079 = C136072 + C136073;
    const double C61563 = C61562 + C47735;
    const double C58119 = C58117 + C52868;
    const double C58022 = C55367 * C141341;
    const double C61490 = C55367 * C141327;
    const double C138923 = C55367 * C141341;
    const double C61351 = C61349 * C29775;
    const double C63316 = C63315 * C141219;
    const double C16599 = C16597 * C141365;
    const double C43464 = C16597 * C42875;
    const double C91900 = C16597 * C141365;
    const double C107499 = C16597 * C106914;
    const double C16719 = C16715 + C16700;
    const double C750 = C746 * C141327;
    const double C1528 = C1525 * C141327;
    const double C6609 = C1525 * C141341;
    const double C64350 = C1525 * C141341;
    const double C2306 = C2303 * C141327;
    const double C7712 = C7710 * C141341;
    const double C22554 = C7710 * C21821;
    const double C65409 = C7710 * C141341;
    const double C72179 = C7710 * C71446;
    const double C8710 = C8708 * C141341;
    const double C66379 = C8708 * C141341;
    const double C82643 = C82641 + C19195;
    const double C21735 =
        (2 * (2 * ae * C139817 + C139804 * C140310) + C140437 + C140437 +
         C139804 * (C140310 + C140434 + C140434 +
                    C139804 * (2 * C139832 + C139804 * C139646 * C139958))) /
        C139335;
    const double C21741 = C14079 * C21229;
    const double C44911 = C42875 * C21229;
    const double C45506 = C188 * C21229;
    const double C45614 = C43032 * C21229;
    const double C50510 = C139356 * C21229;
    const double C50675 = C43031 * C21229;
    const double C58903 = C58593 * C21229;
    const double C60017 = C29775 * C21229;
    const double C96972 = C89456 * C21229;
    const double C108892 = C106914 * C21229;
    const double C109533 = C107067 * C21229;
    const double C114333 = C71450 * C21229;
    const double C40264 = C40260 + C37639;
    const double C40043 = C40041 * C141365;
    const double C54741 = C40041 * C42875;
    const double C129053 = C40041 * C141365;
    const double C135699 = C40041 * C106914;
    const double C42793 =
        (2 * (2 * ae * C140376 + C139804 * C140757) + C140766 + C140766 +
         C139804 * (C140757 + C140763 + C140763 +
                    C139804 * (2 * C140657 + C139804 * C139761 * C139958))) /
        C139335;
    const double C42797 = C14079 * C42293;
    const double C48148 = C43032 * C42293;
    const double C55246 = C42875 * C42293;
    const double C55694 = C29775 * C42293;
    const double C58352 = C5967 * C42293;
    const double C58434 = C43031 * C42293;
    const double C59505 = C58593 * C42293;
    const double C61764 = C188 * C42293;
    const double C106836 = C89456 * C42293;
    const double C112006 = C107067 * C42293;
    const double C136187 = C106914 * C42293;
    const double C139240 = C63708 * C42293;
    const double C140852 = C140851 + C140848;
    const double C21843 = C139366 * C2966;
    const double C21841 = C139366 * C826;
    const double C21839 = C139366 * C116;
    const double C21838 = C139366 * C115;
    const double C21836 = C139366 * C827;
    const double C21834 = C139366 * C2965;
    const double C21831 = C139366 * C2964;
    const double C21829 = C139366 * C828;
    const double C21827 = C139366 * C114;
    const double C22673 = C139366 * C9671;
    const double C22664 = C139366 * C9670;
    const double C22929 = C6993 * C139366;
    const double C22925 = C1031 * C139366;
    const double C22917 = C9864 * C139366;
    const double C22913 = C6988 * C139366;
    const double C23061 = C139366 * C3027;
    const double C23057 = C139366 * C2961;
    const double C23053 = C139366 * C911;
    const double C23049 = C139366 * C822;
    const double C23045 = C139366 * C3026;
    const double C23041 = C139366 * C2960;
    const double C23037 = C139366 * C912;
    const double C23033 = C139366 * C823;
    const double C23420 = C139366 * C3085;
    const double C23416 = C139366 * C1005;
    const double C23412 = C139366 * C3084;
    const double C23408 = C139366 * C1006;
    const double C23753 = C139366 * C10474;
    const double C23751 = C139366 * C3495;
    const double C23749 = C139366 * C1605;
    const double C23748 = C139366 * C1606;
    const double C23746 = C139366 * C3494;
    const double C23744 = C139366 * C10473;
    const double C25580 = C139366 * C25570;
    const double C25757 = C25754 * C139366;
    const double C25842 = C139366 * C9667;
    const double C25838 = C139366 * C9768;
    const double C26089 = C139366 * C9848;
    const double C26366 = C139366 * C26353;
    const double C26593 = C10715 * C139366;
    const double C26597 = C26595 * C139366;
    const double C26712 = C139366 * C3490;
    const double C26708 = C139366 * C3572;
    const double C26704 = C139366 * C10470;
    const double C26700 = C139366 * C10595;
    const double C27037 = C139366 * C3646;
    const double C27033 = C139366 * C10699;
    const double C29098 = C139366 * C29089;
    const double C29096 = C139366 * C13208;
    const double C29094 = C139366 * C5329;
    const double C42881 = C139366 * C5331;
    const double C42879 = C139366 * C1604;
    const double C42878 = C139366 * C5330;
    const double C43687 = C139366 * C13209;
    const double C44660 = C139366 * C21039;
    const double C44651 = C139366 * C21038;
    const double C44800 = C15882 * C139366;
    const double C44796 = C1715 * C139366;
    const double C44788 = C21152 * C139366;
    const double C44784 = C15877 * C139366;
    const double C45048 = C139366 * C5392;
    const double C45044 = C139366 * C5326;
    const double C45040 = C139366 * C1689;
    const double C45036 = C139366 * C1600;
    const double C45032 = C139366 * C5391;
    const double C45028 = C139366 * C5325;
    const double C45024 = C139366 * C1690;
    const double C45020 = C139366 * C1601;
    const double C45396 = C139366 * C5450;
    const double C45392 = C139366 * C1783;
    const double C45388 = C139366 * C5449;
    const double C45384 = C139366 * C1784;
    const double C47298 = C139366 * C42111;
    const double C47406 = C18488 * C139366;
    const double C47418 = C47416 * C139366;
    const double C47623 = C139366 * C13294;
    const double C47619 = C139366 * C13205;
    const double C47939 = C139366 * C13374;
    const double C50001 = C139366 * C49991;
    const double C50099 = C50096 * C139366;
    const double C50262 = C139366 * C21035;
    const double C50258 = C139366 * C21136;
    const double C50512 = C139366 * C21228;
    const double C114591 = C139366 * C3496;
    const double C115911 = C139366 * C3573;
    const double C115907 = C139366 * C3491;
    const double C116309 = C139366 * C3647;
    const double C101 =
        ((((0 - (C139331 * C139329) / C139330) * ae) / C139330 -
          (0 * be) / C139345 + C139332 / C139330) /
             C139336 -
         ((C139331 * C139359 + 0) * be) / C139330) /
            C139336 -
        ((C139331 * (C139359 / C139336 -
                     ((C139331 * C139366 + C141462) * be) / C139330 + C139356) +
          C141506) *
         be) /
            C139330 +
        C139366 / C139336 - ((C139331 * C139356 + C141224) * be) / C139330;
    const double C103 =
        (C139359 / C139336 - ((C139331 * C139366 + C141462) * be) / C139330 +
         C139356) /
            C139336 -
        ((C139331 * (C139366 / C139336 -
                     ((C139331 * C139356 + C141224) * be) / C139330) +
          C141492) *
         be) /
            C139330 +
        2 * (C139356 / C139336 - (0 * be) / C139330);
    const double C105 =
        (C139366 / C139336 - ((C139331 * C139356 + C141224) * be) / C139330) /
            C139336 -
        ((C139331 * (C139356 / C139336 - (0 * be) / C139330) + C63606) * be) /
            C139330;
    const double C63610 = C139359 / C139336 -
                          ((C139331 * C139366 + C141462) * be) / C139330 +
                          C139356;
    const double C63612 =
        C139366 / C139336 - ((C139331 * C139356 + C141224) * be) / C139330;
    const double C139367 = C139354 - C139365;
    const double C6730 = C6714 + C5880;
    const double C9686 = C9677 + C6716;
    const double C15741 = C15728 + C7815;
    const double C21054 = C21045 + C13217;
    const double C22682 = C22671 + C21833;
    const double C22680 = C22667 + C21835;
    const double C22678 = C22661 + C21832;
    const double C22676 = C22657 + C21830;
    const double C25583 = C25576 + C22663;
    const double C26370 = C26362 + C23745;
    const double C26368 = C26358 + C23743;
    const double C44669 = C44658 + C42877;
    const double C44667 = C44654 + C23750;
    const double C44665 = C44648 + C29095;
    const double C44663 = C44644 + C23747;
    const double C47301 = C47296 + C29097;
    const double C50003 = C49997 + C44650;
    const double C30294 = C30286 + C29781;
    const double C30293 = C30284 + C29782;
    const double C30292 = C30282 + C29783;
    const double C30291 = C30279 + C29780;
    const double C30290 = C30277 + C29779;
    const double C30289 = C30275 + C29778;
    const double C32187 = C32184 + C30281;
    const double C32715 = C32710 + C30995;
    const double C32714 = C32708 + C30994;
    const double C32713 = C32706 + C30993;
    const double C35759 = C35756 + C30999;
    const double C35758 = C35753 + C30998;
    const double C36778 = C36772 + C30997;
    const double C36777 = C36770 + C30996;
    const double C39346 = C39342 + C34563;
    const double C39345 = C39339 + C34564;
    const double C42121 = C42116 + C34562;
    const double C51450 = C51448 + C36775;
    const double C52407 = C52403 + C36774;
    const double C55015 = C55011 + C42119;
    const double C57774 = C57770 + C42118;
    const double C59582 = C59579 + C52405;
    const double C63081 = C63078 + C57772;
    const double C64471 = C64455 + C63621;
    const double C67348 = C67339 + C64457;
    const double C91090 = C91077 + C65514;
    const double C96332 = C96323 + C70767;
    const double C72307 = C72296 + C71458;
    const double C72305 = C72292 + C71460;
    const double C72303 = C72286 + C71457;
    const double C72301 = C72282 + C71455;
    const double C75174 = C75167 + C72288;
    const double C75919 = C75911 + C73356;
    const double C75917 = C75907 + C73354;
    const double C81470 = C81461 + C73361;
    const double C81468 = C81457 + C73358;
    const double C84839 = C84834 + C78604;
    const double C88387 = C88379 + C78602;
    const double C108668 = C108663 + C81464;
    const double C113855 = C113849 + C88384;
    const double C75333 = C75328 + C72544;
    const double C75410 = C72690 + C72691;
    const double C75409 = C72688 + C72689;
    const double C75652 = C73042 + C73043;
    const double C85258 = C76253 + C76254;
    const double C85247 = C76254 + C76253;
    const double C85257 = C76251 + C76252;
    const double C85248 = C76252 + C76251;
    const double C85672 = C76565 + C76566;
    const double C85667 = C76566 + C76565;
    const double C114090 = C88710 + C88709;
    const double C114091 = C88708 + C88707;
    const double C114332 = C89024 + C89023;
    const double C113940 = C113935 + C108777;
    const double C39079 = C39078 + C36427;
    const double C58031 = C58028 + C52747;
    const double C139505 = C139504 - C139502;
    const double C22198 = C22180 * C821;
    const double C22189 = C22180 * C822;
    const double C23182 = C22180 * C2961;
    const double C24174 = C22180 * C3491;
    const double C37219 = C22180 * C3490;
    const double C39807 = C22180 * C10470;
    const double C42464 = C22180 * C13205;
    const double C22212 = C22201 + C22202;
    const double C22207 = C22186 + C22187;
    const double C23196 = C23185 + C23186;
    const double C24188 = C24177 + C24178;
    const double C37223 = C37217 + C24182;
    const double C39814 = C39805 + C26822;
    const double C42473 = C42466 + C29408;
    const double C22210 = C22195 + C22196;
    const double C22209 = C22192 + C22193;
    const double C37225 = C37221 + C24180;
    const double C42471 = C42462 + C29410;
    const double C63998 = C63986 + C63987;
    const double C63997 = C63983 + C63984;
    const double C63995 = C63977 + C63978;
    const double C64969 = C64957 + C64958;
    const double C64967 = C64951 + C64952;
    const double C65957 = C65945 + C65946;
    const double C65955 = C65939 + C65940;
    const double C82075 = C82068 + C71070;
    const double C82074 = C82065 + C65951;
    const double C85402 = C85395 + C68521;
    const double C88817 = C88809 + C71068;
    const double C136409 = C136404 + C85398;
    const double C139011 = C139004 + C88814;
    const double C71835 = C71820 + C71821;
    const double C71834 = C71817 + C71818;
    const double C126297 = C126293 + C73785;
    const double C131445 = C131436 + C78905;
    const double C29838 =
        ((((0 - (C139394 * C139474) / C139330) * ae) / C139330 -
          (0 * be) / C139345 + C139447 / C139330) /
             C139336 -
         ((C139394 * C139489 + 0) * be) / C139330) /
            C139336 -
        ((C139394 * (C139489 / C139336 -
                     ((C139394 * C139485 + C141478) * be) / C139330 + C139486) +
          C141507) *
         be) /
            C139330 +
        C139485 / C139336 - ((C139394 * C139486 + C141341) * be) / C139330;
    const double C29839 =
        (C139489 / C139336 - ((C139394 * C139485 + C141478) * be) / C139330 +
         C139486) /
            C139336 -
        ((C139394 * (C139485 / C139336 -
                     ((C139394 * C139486 + C141341) * be) / C139330) +
          C141502) *
         be) /
            C139330 +
        2 * (C139486 / C139336 - (0 * be) / C139330);
    const double C29840 =
        (C139485 / C139336 - ((C139394 * C139486 + C141341) * be) / C139330) /
            C139336 -
        ((C139394 * (C139486 / C139336 - (0 * be) / C139330) + C71446) * be) /
            C139330;
    const double C71543 = C139489 / C139336 -
                          ((C139394 * C139485 + C141478) * be) / C139330 +
                          C139486;
    const double C71544 =
        C139485 / C139336 - ((C139394 * C139486 + C141341) * be) / C139330;
    const double C63746 = C63738 + C63739;
    const double C64100 = C64099 + C64093;
    const double C64269 = C64265 + C64266;
    const double C81628 = C65643 + C65644;
    const double C81617 = C65644 + C65643;
    const double C81627 = C65641 + C65642;
    const double C81618 = C65642 + C65641;
    const double C82502 = C66279 + C66280;
    const double C82497 = C66280 + C66279;
    const double C138757 = C88502 + C88501;
    const double C138758 = C88500 + C88499;
    const double C139239 = C89128 + C89127;
    const double C138927 = C138922 + C133767;
    const double C139571 = C139570 - C139568;
    const double C43562 = C43544 * C1599;
    const double C43553 = C43544 * C1600;
    const double C44523 = C43544 * C3491;
    const double C45616 = C43544 * C5326;
    const double C52292 = C43544 * C3490;
    const double C54897 = C43544 * C10470;
    const double C55913 = C43544 * C13205;
    const double C43576 = C43565 + C43566;
    const double C43571 = C43550 + C43551;
    const double C44537 = C44526 + C44527;
    const double C45630 = C45619 + C45620;
    const double C52296 = C52290 + C44531;
    const double C54906 = C54899 + C47187;
    const double C55922 = C55915 + C48146;
    const double C43574 = C43559 + C43560;
    const double C43573 = C43556 + C43557;
    const double C44535 = C44520 + C44521;
    const double C52298 = C52294 + C44529;
    const double C54904 = C54895 + C47189;
    const double C90005 = C89993 + C89994;
    const double C90004 = C89990 + C89991;
    const double C90002 = C89984 + C89985;
    const double C90965 = C90953 + C90954;
    const double C90963 = C90947 + C90948;
    const double C92024 = C92012 + C92013;
    const double C92022 = C92006 + C92007;
    const double C99109 = C99102 + C93585;
    const double C99108 = C99099 + C90959;
    const double C100319 = C100315 + C94482;
    const double C102405 = C102397 + C93583;
    const double C103607 = C103599 + C94480;
    const double C128297 = C128291 + C102402;
    const double C129272 = C129266 + C103604;
    const double C107609 = C107594 + C107595;
    const double C107608 = C107591 + C107592;
    const double C108554 = C108539 + C108540;
    const double C133362 = C133358 + C108548;
    const double C135862 = C135853 + C111106;
    const double C58590 =
        ((((0 - (C139397 * C139540) / C139330) * ae) / C139330 -
          (0 * be) / C139345 + C139517 / C139330) /
             C139336 -
         ((C139397 * C139555 + 0) * be) / C139330) /
            C139336 -
        ((C139397 * (C139555 / C139336 -
                     ((C139397 * C139551 + C141479) * be) / C139330 + C139552) +
          C141508) *
         be) /
            C139330 +
        C139551 / C139336 - ((C139397 * C139552 + C141365) * be) / C139330;
    const double C58591 =
        (C139555 / C139336 - ((C139397 * C139551 + C141479) * be) / C139330 +
         C139552) /
            C139336 -
        ((C139397 * (C139551 / C139336 -
                     ((C139397 * C139552 + C141365) * be) / C139330) +
          C141505) *
         be) /
            C139330 +
        2 * (C139552 / C139336 - (0 * be) / C139330);
    const double C58592 =
        (C139551 / C139336 - ((C139397 * C139552 + C141365) * be) / C139330) /
            C139336 -
        ((C139397 * (C139552 / C139336 - (0 * be) / C139330) + C106914) * be) /
            C139330;
    const double C107065 = C139555 / C139336 -
                           ((C139397 * C139551 + C141479) * be) / C139330 +
                           C139552;
    const double C107066 =
        C139551 / C139336 - ((C139397 * C139552 + C141365) * be) / C139330;
    const double C89494 = C89486 + C89487;
    const double C89737 = C89733 + C89734;
    const double C89901 = C89900 + C89894;
    const double C98278 = C90337 + C90338;
    const double C98267 = C90338 + C90337;
    const double C98277 = C90335 + C90336;
    const double C98268 = C90336 + C90335;
    const double C98696 = C90643 + C90644;
    const double C98691 = C90644 + C90643;
    const double C127812 = C101800 + C101799;
    const double C127813 = C101798 + C101797;
    const double C128140 = C128135 + C125563;
    const double C18788 = C15179 * C5864;
    const double C47731 = C15179 * C141224;
    const double C94085 = C15179 * C141492;
    const double C111609 = C15179 * C141224;
    const double C99786 = C8278 + C8279;
    const double C99785 = C8279 + C8278;
    const double C934 = C924 + C925;
    const double C6000 = C5983 + C5984;
    const double C6861 = C6846 + C6847;
    const double C21953 = C21936 + C21937;
    const double C63741 = C63724 + C63725;
    const double C64602 = C64587 + C64588;
    const double C7128 = C7114 + C7115;
    const double C7123 = C7104 + C7105;
    const double C23076 = C23055 + C23056;
    const double C64846 = C64827 + C64828;
    const double C72695 = C72674 + C72675;
    const double C1806 = C1796 + C1797;
    const double C14112 = C14095 + C14096;
    const double C16000 = C15985 + C15986;
    const double C43065 = C43048 + C43049;
    const double C89489 = C89472 + C89473;
    const double C91331 = C91316 + C91317;
    const double C16484 = C16476 + C16477;
    const double C16482 = C16472 + C16473;
    const double C45405 = C45394 + C45395;
    const double C82362 = C82357 + C82358;
    const double C91798 = C91788 + C91789;
    const double C6985 = C1028 * C5864;
    const double C6973 = C1028 * C5865;
    const double C22928 = C1028 * C141224;
    const double C64716 = C1028 * C141492;
    const double C64712 = C1028 * C63606;
    const double C72549 = C1028 * C141224;
    const double C15874 = C1712 * C5864;
    const double C15862 = C1712 * C5865;
    const double C44799 = C1712 * C141224;
    const double C91213 = C1712 * C141492;
    const double C91209 = C1712 * C63606;
    const double C108782 = C1712 * C141224;
    const double C37540 = C37536 + C37537;
    const double C40150 = C40145 + C40146;
    const double C55810 = C55803 + C55804;
    const double C85810 = C85807 + C85808;
    const double C126606 = C126602 + C126603;
    const double C55482 = C55478 + C10939;
    const double C37102 = C32954 * C21821;
    const double C39700 = C32954 * C21820;
    const double C55362 = C32954 * C141341;
    const double C126184 = C32954 * C71446;
    const double C128732 = C32954 * C141502;
    const double C136299 = C32954 * C141341;
    const double C38992 = C36318 + C36319;
    const double C128054 = C102102 + C102101;
    const double C58116 = C58109 * C141219;
    const double C139713 = ae * C139712;
    const double C118 = (3 * C139680 + C139646 * C139712 +
                         (2 * C139669 + C139646 * C139697) * ae) /
                        C139330;
    const double C825 = (C139761 * C139712) / C139330;
    const double C1603 = (C139804 * C139712) / C139330;
    const double C6724 = C5865 * C830;
    const double C64465 = C63606 * C830;
    const double C6845 = C141341 * C3032;
    const double C21935 = C21821 * C3032;
    const double C64586 = C141341 * C3032;
    const double C71560 = C71446 * C3032;
    const double C9945 = C5865 * C3144;
    const double C23064 = C141224 * C3144;
    const double C67586 = C63606 * C3144;
    const double C72683 = C141224 * C3144;
    const double C8045 = C141353 * C3652;
    const double C14951 = C141365 * C3652;
    const double C90316 = C141365 * C3652;
    const double C11150 = C5865 * C3936;
    const double C68723 = C63606 * C3936;
    const double C81054 = C141224 * C3936;
    const double C116312 = C141224 * C3936;
    const double C10489 = C10480 + C7812;
    const double C7938 = C7922 + C7923;
    const double C10834 = C10825 + C10826;
    const double C14848 = C14840 + C14841;
    const double C115512 = C115509 + C23752;
    const double C68095 = C68086 + C65511;
    const double C65637 = C65621 + C65622;
    const double C68419 = C68410 + C68411;
    const double C80226 = C80223 + C73363;
    const double C80646 = C80639 + C80640;
    const double C115916 = C115909 + C115910;
    const double C15735 = C5865 * C1608;
    const double C91084 = C63606 * C1608;
    const double C10820 = C5865 * C3722;
    const double C68405 = C63606 * C3722;
    const double C80644 = C141224 * C3722;
    const double C115914 = C141224 * C3722;
    const double C15984 = C141365 * C5455;
    const double C43047 = C42875 * C5455;
    const double C91315 = C141365 * C5455;
    const double C107082 = C106914 * C5455;
    const double C21573 = C5865 * C5675;
    const double C45399 = C141224 * C5675;
    const double C96813 = C63606 * C5675;
    const double C109327 = C141224 * C5675;
    const double C9855 = C6990 * C5865;
    const double C22932 = C6990 * C141224;
    const double C67505 = C6990 * C63606;
    const double C72553 = C6990 * C141224;
    const double C21143 = C15879 * C5865;
    const double C44803 = C15879 * C141224;
    const double C96415 = C15879 * C63606;
    const double C108786 = C15879 * C141224;
    const double C52093 = C52092 * C42875;
    const double C133157 = C52092 * C106914;
    const double C26584 = C23973 * C141224;
    const double C76125 = C23973 * C141224;
    const double C36441 = C36439 * C141365;
    const double C125572 = C36439 * C141365;
    const double C52757 = C51771 * C141341;
    const double C133776 = C51771 * C141341;
    const double C10037 =
        (2 * (2 * ae * C139783 + C139761 * C139886) + C140296 + C140296 +
         C139761 * (C139886 + C140293 + C140293 +
                    C139761 * (2 * ae * C139797 +
                               C139761 * (C139884 + (C139718 * C139719 +
                                                     C139869 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139650)))) /
        C139335;
    const double C11257 =
        (C140296 +
         C139804 *
             (C139939 + ae * C139761 * C139840 +
              C139761 * (ae * C139840 +
                         C139761 * (C139937 + std::pow(C139652, 7) * bs[7] *
                                                  C139928 * C139650)))) /
        C139335;
    const double C10044 = C5967 * C9770;
    const double C23193 = C21920 * C9770;
    const double C30008 = C29841 * C9770;
    const double C67682 = C63708 * C9770;
    const double C72812 = C71545 * C9770;
    const double C10943 = C5967 * C10597;
    const double C17981 = C188 * C10597;
    const double C24185 = C21920 * C10597;
    const double C68525 = C63708 * C10597;
    const double C73790 = C71545 * C10597;
    const double C21736 =
        (2 * (2 * ae * C139826 + C139804 * C139960) + C140447 + C140447 +
         C139804 * (C139960 + C140444 + C140444 +
                    C139804 * (2 * ae * C139840 +
                               C139804 * (C139958 + (C139718 * C139719 +
                                                     C139943 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139650)))) /
        C139335;
    const double C21743 = C14079 * C21230;
    const double C45627 = C43032 * C21230;
    const double C58910 = C58593 * C21230;
    const double C96974 = C89456 * C21230;
    const double C109546 = C107067 * C21230;
    const double C140508 = C140507 + C140500;
    const double C26820 =
        (2 * (2 * ae * C139804 * C139785 + C139761 * C140551) + C140554 +
         C140554 +
         C139761 * (C140551 + C140555 + C140555 +
                    C139761 * (2 * ae * C139804 * C140491 +
                               C139761 * C139804 * C139646 *
                                   (C139718 * C139719 +
                                    C139869 * bs[7] * std::pow(C139652, 7)) *
                                   C139653))) /
        C139335;
    const double C29640 =
        (C140306 + ae * C140381 + C139761 * C140530 + C140554 +
         C139804 * (C140506 + C139804 * (C140528 + ae * C139761 * C140517 +
                                         C139761 * (ae * C140517 +
                                                    C139761 * C139646 *
                                                        std::pow(C139652, 7) *
                                                        bs[7] * C139928)))) /
        C139335;
    const double C140873 = C140872 + C140866;
    const double C48144 =
        (2 * (2 * ae * C140381 + C139804 * C140788) + C140798 + C140798 +
         C139804 * (C140788 + C140795 + C140795 +
                    C139804 * (2 * ae * C140789 +
                               C139804 * C139761 * C139646 *
                                   (C139718 * C139719 +
                                    C139943 * bs[7] * std::pow(C139652, 7)) *
                                   C139653))) /
        C139335;
    const double C48151 = C43032 * C47517;
    const double C59512 = C58593 * C47517;
    const double C89228 = C14079 * C47517;
    const double C106838 = C89456 * C47517;
    const double C112009 = C107067 * C47517;
    const double C139755 = ae * C139753;
    const double C139754 = C139646 * C139753;
    const double C139975 = C139761 * C139753;
    const double C140039 = C139804 * C139753;
    const double C2967 = (C139712 + C139753 * C139869) / C139330;
    const double C5332 = (C139712 + C139753 * C139943) / C139330;
    const double C3501 =
        (2 * (2 * ae * C139804 * C139973 + C139646 * C140154) + C140157 +
         C140157 +
         C139646 * (C140154 + C140158 + C140158 +
                    C139646 * (2 * ae * C139804 * C139761 * C139731 +
                               C139646 * C139804 * C139761 *
                                   (C139718 * C139719 +
                                    C139650 * bs[7] * std::pow(C139652, 7)) *
                                   C139653))) /
        C139335;
    const double C10817 =
        (C139804 * C139865 + C140157 +
         C139761 * (C140045 + C139761 * C139804 *
                                  (C139861 + ae * C139646 * C139792 +
                                   C139646 * (ae * C139792 +
                                              C139646 * std::pow(C139652, 7) *
                                                  bs[7] * C139849)))) /
        C139335;
    const double C13379 =
        (C139761 * C139843 + C140157 +
         C139804 * (C139981 + C139804 * C139761 *
                                  (C139833 + ae * C139646 * C139835 +
                                   C139646 * (ae * C139835 +
                                              C139646 * std::pow(C139652, 7) *
                                                  bs[7] * C139808)))) /
        C139335;
    const double C13693 =
        (C139761 * C139923 + C140157 +
         C139804 * (C139981 + C139804 * C139761 *
                                  (C139919 + ae * C139646 * C139835 +
                                   C139646 * (ae * C139835 +
                                              C139646 * std::pow(C139652, 7) *
                                                  bs[7] * C139907)))) /
        C139335;
    const double C2971 =
        (2 * (2 * ae * (C139671 + C139695 * C139869) + C139646 * C140099) +
         C140102 + C140102 +
         C139646 * (C140099 + C140103 + C140103 +
                    C139646 * (2 * ae * (C139695 + C139731 * C139869) +
                               C139646 * (C139738 + (C139718 * C139719 +
                                                     C139650 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139869)))) /
        C139335;
    const double C9773 =
        (2 * (C139710 + C139761 * C139800) + C140102 +
         C139761 *
             (C139800 + C139981 +
              C139761 * (C139751 +
                         C139761 * (C139790 + ae * C139646 * C139792 +
                                    C139646 * (ae * C139792 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139765))))) /
        C139335;
    const double C9942 =
        (2 * (C139710 + C139761 * C139865) + C140102 +
         C139761 *
             (C139865 + C139981 +
              C139761 * (C139751 +
                         C139761 * (C139861 + ae * C139646 * C139792 +
                                    C139646 * (ae * C139792 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139849))))) /
        C139335;
    const double C10704 =
        (C140102 +
         C139804 * (C139843 +
                    (C139833 + ae * C139646 * C139835 +
                     C139646 * (ae * C139835 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139808)) *
                        C139869)) /
        C139335;
    const double C11147 =
        (C140102 +
         C139804 * (C139923 +
                    (C139919 + ae * C139646 * C139835 +
                     C139646 * (ae * C139835 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139907)) *
                        C139869)) /
        C139335;
    const double C9685 = C5873 * C9672;
    const double C22674 = C139356 * C9672;
    const double C29788 = C29775 * C9672;
    const double C67347 = C63614 * C9672;
    const double C72299 = C71450 * C9672;
    const double C10488 = C5873 * C10475;
    const double C23754 = C139356 * C10475;
    const double C35057 = C29775 * C10475;
    const double C68094 = C63614 * C10475;
    const double C73365 = C71450 * C10475;
    const double C5336 =
        (2 * (2 * ae * (C139671 + C139695 * C139943) + C139646 * C140201) +
         C140204 + C140204 +
         C139646 * (C140201 + C140205 + C140205 +
                    C139646 * (2 * ae * (C139695 + C139731 * C139943) +
                               C139646 * (C139738 + (C139718 * C139719 +
                                                     C139650 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139943)))) /
        C139335;
    const double C13456 =
        (C140204 +
         C139761 * (C139865 +
                    (C139861 + ae * C139646 * C139792 +
                     C139646 * (ae * C139792 + C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139849)) *
                        C139943)) /
        C139335;
    const double C21233 =
        (2 * (C139710 + C139804 * C139843) + C140204 +
         C139804 *
             (C139843 + C140045 +
              C139804 * (C139751 +
                         C139804 * (C139833 + ae * C139646 * C139835 +
                                    C139646 * (ae * C139835 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139808))))) /
        C139335;
    const double C21570 =
        (2 * (C139710 + C139804 * C139923) + C140204 +
         C139804 *
             (C139923 + C140045 +
              C139804 * (C139751 +
                         C139804 * (C139919 + ae * C139646 * C139835 +
                                    C139646 * (ae * C139835 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139907))))) /
        C139335;
    const double C21053 = C5873 * C21040;
    const double C44661 = C139356 * C21040;
    const double C58490 = C29775 * C21040;
    const double C96331 = C63614 * C21040;
    const double C108666 = C71450 * C21040;
    const double C140649 = ae * C140647;
    const double C140648 = C139761 * C140647;
    const double C140688 = C139804 * C140647;
    const double C34770 =
        (2 * (2 * ae * (C139772 + C139779 * C139943) + C139761 * C140719) +
         C140722 + C140722 +
         C139761 * (C140719 + C140723 + C140723 +
                    C139761 * (2 * ae * (C139779 + C139792 * C139943) +
                               C139761 * (C139884 + (C139718 * C139719 +
                                                     C139869 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139943)))) /
        C139335;
    const double C42709 =
        (2 * (C140483 + C139804 * C140674) + C140722 +
         C139804 *
             (C140674 + C140694 +
              C139804 * (C140645 +
                         C139804 * (C139937 + ae * C139761 * C139835 +
                                    C139761 * (ae * C139835 +
                                               C139761 * std::pow(C139652, 7) *
                                                   bs[7] * C139928))))) /
        C139335;
    const double C42470 = C21920 * C42198;
    const double C55476 = C5967 * C42198;
    const double C61004 = C188 * C42198;
    const double C131444 = C71545 * C42198;
    const double C136407 = C63708 * C42198;
    const double C140983 = ae * C140981;
    const double C140982 = C139804 * C140981;
    const double C42794 =
        (2 * (2 * ae * C140514 + C139804 * C140677) + C140776 + C140776 +
         C139804 * (C140677 + C140773 + C140773 +
                    C139804 * (2 * ae * C140660 +
                               C139804 * (C139958 + (C139718 * C139719 +
                                                     C139943 * bs[7] *
                                                         std::pow(C139652, 7)) *
                                                        C139653 * C139869)))) /
        C139335;
    const double C42799 = C14079 * C42294;
    const double C55919 = C43032 * C42294;
    const double C61208 = C58593 * C42294;
    const double C131760 = C89456 * C42294;
    const double C136835 = C107067 * C42294;
    const double C140920 = C140919 + C140912;
    const double C15498 = C15496 * C141365;
    const double C90841 = C15496 * C141365;
    const double C7252 = C7248 + C7230;
    const double C15178 = C15176 + C15171;
    const double C8276 = C8272 + C8254;
    const double C23181 = C21821 * C10036;
    const double C72800 = C71446 * C10036;
    const double C24499 = C21821 * C11256;
    const double C74101 = C71446 * C11256;
    const double C81188 = C141341 * C11256;
    const double C98962 = C141341 * C11256;
    const double C22812 = C22803 + C22804;
    const double C23194 = C23179 + C23180;
    const double C23308 = C23301 + C23302;
    const double C25844 = C25836 + C25837;
    const double C30558 = C30545 + C30546;
    const double C72437 = C72428 + C72429;
    const double C72813 = C72798 + C72799;
    const double C75419 = C75411 + C75412;
    const double C98551 = C98547 + C10941;
    const double C23868 = C23859 + C23860;
    const double C24186 = C24171 + C24172;
    const double C24300 = C24293 + C24294;
    const double C26714 = C26698 + C26699;
    const double C36107 = C36102 + C36103;
    const double C36321 = C36314 + C36315;
    const double C80783 = C80779 + C68523;
    const double C73479 = C73470 + C73471;
    const double C73791 = C73776 + C73777;
    const double C76247 = C76231 + C76232;
    const double C80371 = C80365 + C80366;
    const double C98127 = C98121 + C98122;
    const double C98699 = C98692 + C98693;
    const double C44421 = C44420 * C42875;
    const double C108435 = C44420 * C106914;
    const double C47734 = C44109 * C141224;
    const double C111611 = C44109 * C141224;
    const double C140486 = ae * C140485;
    const double C25662 = (3 * C140274 + C139761 * C140485 +
                           (2 * C140268 + C139761 * C140476) * ae) /
                          C139330;
    const double C26477 = (C139804 * C140485) / C139330;
    const double C34615 = (C140485 + C140647 * C139943) / C139330;
    const double C39810 = C21821 * C26819;
    const double C128838 = C71446 * C26819;
    const double C42712 = C21821 * C29639;
    const double C55808 = C141341 * C29639;
    const double C131677 = C71446 * C29639;
    const double C136726 = C141341 * C29639;
    const double C42374 = C39703 * C21821;
    const double C55366 = C39703 * C141341;
    const double C131356 = C39703 * C71446;
    const double C136303 = C39703 * C141341;
    const double C55484 = C55480 + C51870;
    const double C61564 = C61563 + C61560;
    const double C58121 = C58119 + C58111;
    const double C16723 = C16719 + C16701;
    const double C82645 = C82643 + C82638;
    const double C45615 = C42875 * C21735;
    const double C109534 = C106914 * C21735;
    const double C44919 = C44910 + C44911;
    const double C45513 = C45506 + C45507;
    const double C45628 = C45613 + C45614;
    const double C50514 = C50510 + C50511;
    const double C60019 = C60017 + C60018;
    const double C108900 = C108891 + C108892;
    const double C109547 = C109532 + C109533;
    const double C114337 = C114333 + C114334;
    const double C40268 = C40264 + C40251;
    const double C55912 = C42875 * C42793;
    const double C136828 = C106914 * C42793;
    const double C55920 = C55911 + C48148;
    const double C55254 = C55245 + C55246;
    const double C55701 = C55694 + C55695;
    const double C58356 = C58352 + C58353;
    const double C61766 = C61764 + C61765;
    const double C136836 = C136827 + C112006;
    const double C136195 = C136186 + C136187;
    const double C139244 = C139240 + C139241;
    const double C140853 = ae * C140852;
    const double C50173 = (3 * C140426 + C139804 * C140852 +
                           (2 * C140420 + C139804 * C140846) * ae) /
                          C139330;
    const double C25745 = C22917 + C22918;
    const double C23079 = C23061 + C23062;
    const double C23077 = C23057 + C23058;
    const double C23075 = C23053 + C23054;
    const double C23073 = C23049 + C23050;
    const double C23071 = C23045 + C23046;
    const double C23069 = C23041 + C23042;
    const double C23067 = C23037 + C23038;
    const double C23065 = C23033 + C23034;
    const double C23430 = C23420 + C23421;
    const double C23428 = C23416 + C23417;
    const double C23426 = C23412 + C23413;
    const double C23424 = C23408 + C23409;
    const double C25847 = C25842 + C25843;
    const double C25845 = C25838 + C25839;
    const double C26093 = C26089 + C26090;
    const double C26721 = C26712 + C26713;
    const double C26719 = C26708 + C26709;
    const double C26717 = C26704 + C26705;
    const double C26715 = C26700 + C26701;
    const double C27042 = C27037 + C27038;
    const double C27040 = C27033 + C27034;
    const double C50087 = C44788 + C44789;
    const double C45066 = C45048 + C45049;
    const double C45064 = C45044 + C45045;
    const double C45062 = C45040 + C45041;
    const double C45060 = C45036 + C45037;
    const double C45058 = C45032 + C45033;
    const double C45056 = C45028 + C45029;
    const double C45054 = C45024 + C45025;
    const double C45052 = C45020 + C45021;
    const double C45406 = C45396 + C45397;
    const double C45404 = C45392 + C45393;
    const double C45402 = C45388 + C45389;
    const double C45400 = C45384 + C45385;
    const double C47629 = C47623 + C47624;
    const double C47627 = C47619 + C47620;
    const double C47943 = C47939 + C47940;
    const double C50269 = C50262 + C50263;
    const double C50267 = C50258 + C50259;
    const double C50515 = C50512 + C50513;
    const double C115917 = C115911 + C115912;
    const double C115915 = C115907 + C115908;
    const double C116313 = C116309 + C116310;
    const double C135 = C101 * C116;
    const double C134 = C101 * C115;
    const double C127 = C101 * C114;
    const double C840 = C101 * C827;
    const double C839 = C101 * C828;
    const double C1618 = C101 * C1605;
    const double C1617 = C101 * C1606;
    const double C2973 = C101 * C2964;
    const double C3503 = C101 * C3494;
    const double C5338 = C101 * C5329;
    const double C136 = C103 * C117;
    const double C133 = C103 * C116;
    const double C128 = C103 * C115;
    const double C841 = C103 * C826;
    const double C838 = C103 * C827;
    const double C1619 = C103 * C1604;
    const double C1616 = C103 * C1605;
    const double C2974 = C103 * C2965;
    const double C3504 = C103 * C3495;
    const double C5339 = C103 * C5330;
    const double C132 = C105 * C117;
    const double C129 = C105 * C116;
    const double C837 = C105 * C826;
    const double C1615 = C105 * C1604;
    const double C2975 = C105 * C2966;
    const double C3505 = C105 * C3496;
    const double C5340 = C105 * C5331;
    const double C63631 = C63610 * C826;
    const double C63628 = C63610 * C116;
    const double C63627 = C63610 * C115;
    const double C63624 = C63610 * C827;
    const double C63619 = C63610 * C828;
    const double C63616 = C63610 * C114;
    const double C64466 = C63610 * C2965;
    const double C64459 = C63610 * C2964;
    const double C64713 = C1031 * C63610;
    const double C64707 = C6988 * C63610;
    const double C64835 = C63610 * C911;
    const double C64829 = C63610 * C822;
    const double C64823 = C63610 * C912;
    const double C64817 = C63610 * C823;
    const double C65189 = C63610 * C1005;
    const double C65183 = C63610 * C1006;
    const double C65520 = C63610 * C3495;
    const double C65517 = C63610 * C1605;
    const double C65516 = C63610 * C1606;
    const double C65513 = C63610 * C3494;
    const double C67345 = C63610 * C9670;
    const double C67510 = C9864 * C63610;
    const double C67595 = C63610 * C2960;
    const double C67589 = C63610 * C3026;
    const double C67835 = C63610 * C3084;
    const double C68092 = C63610 * C10473;
    const double C68305 = C10715 * C63610;
    const double C68414 = C63610 * C3490;
    const double C68408 = C63610 * C3572;
    const double C68726 = C63610 * C3646;
    const double C70768 = C63610 * C13208;
    const double C70765 = C63610 * C5329;
    const double C89305 = C63610 * C1604;
    const double C91085 = C63610 * C5330;
    const double C91210 = C1715 * C63610;
    const double C91204 = C15877 * C63610;
    const double C91454 = C63610 * C1689;
    const double C91448 = C63610 * C1600;
    const double C91442 = C63610 * C1690;
    const double C91436 = C63610 * C1601;
    const double C91790 = C63610 * C1783;
    const double C91784 = C63610 * C1784;
    const double C93784 = C18488 * C63610;
    const double C96329 = C63610 * C21038;
    const double C96420 = C21152 * C63610;
    const double C96579 = C63610 * C5325;
    const double C96573 = C63610 * C5391;
    const double C96816 = C63610 * C5449;
    const double C63629 = C63612 * C117;
    const double C63626 = C63612 * C116;
    const double C63623 = C63612 * C826;
    const double C63620 = C63612 * C827;
    const double C63617 = C63612 * C115;
    const double C64467 = C63612 * C2966;
    const double C64458 = C63612 * C2965;
    const double C64715 = C1029 * C63612;
    const double C64709 = C1031 * C63612;
    const double C64837 = C63612 * C910;
    const double C64831 = C63612 * C821;
    const double C64825 = C63612 * C911;
    const double C64819 = C63612 * C822;
    const double C65191 = C63612 * C1004;
    const double C65185 = C63612 * C1005;
    const double C65521 = C63612 * C3496;
    const double C65518 = C63612 * C1604;
    const double C65515 = C63612 * C1605;
    const double C65512 = C63612 * C3495;
    const double C67346 = C63612 * C9671;
    const double C67508 = C6993 * C63612;
    const double C67593 = C63612 * C2961;
    const double C67587 = C63612 * C3027;
    const double C67833 = C63612 * C3085;
    const double C68093 = C63612 * C10474;
    const double C68303 = C8055 * C63612;
    const double C68412 = C63612 * C3491;
    const double C68406 = C63612 * C3573;
    const double C68724 = C63612 * C3647;
    const double C70769 = C63612 * C13209;
    const double C70766 = C63612 * C5330;
    const double C91086 = C63612 * C5331;
    const double C91212 = C1713 * C63612;
    const double C91206 = C1715 * C63612;
    const double C91456 = C63612 * C1688;
    const double C91450 = C63612 * C1599;
    const double C91444 = C63612 * C1689;
    const double C91438 = C63612 * C1600;
    const double C91792 = C63612 * C1782;
    const double C91786 = C63612 * C1783;
    const double C93786 = C14851 * C63612;
    const double C96330 = C63612 * C21039;
    const double C96418 = C15882 * C63612;
    const double C96577 = C63612 * C5326;
    const double C96571 = C63612 * C5392;
    const double C96814 = C63612 * C5450;
    const double C139368 = C139367 * ae;
    const double C5868 =
        (-(be * C139337) / C139335) / C139336 -
        ((2 * ((-C139332 / C139330) / C139336 - (C139360 * be) / C139330) -
          (C139331 * C139367 * be) / C139330) *
         be) /
            C139330 -
        C139361 / C139345;
    const double C5870 =
        (-(C139367 * be) / C139330) / C139336 -
        ((2 * ((-C139350 / C139330) / C139336 - (0 * be) / C139330) -
          C139363 / C139345) *
         be) /
            C139330;
    const double C71447 = -(C139367 * be) / C139330;
    const double C6736 = C6730 + C5880;
    const double C9689 = C9686 + C6716;
    const double C15747 = C15741 + C7815;
    const double C21057 = C21054 + C13217;
    const double C22690 = C22682 + C21833;
    const double C22688 = C22680 + C21835;
    const double C22686 = C22678 + C21832;
    const double C22684 = C22676 + C21830;
    const double C25585 = C25583 + C22663;
    const double C26374 = C26370 + C23745;
    const double C26372 = C26368 + C23743;
    const double C44677 = C44669 + C42877;
    const double C44675 = C44667 + C23750;
    const double C44673 = C44665 + C29095;
    const double C44671 = C44663 + C23747;
    const double C47303 = C47301 + C29097;
    const double C50005 = C50003 + C44650;
    const double C30300 = C30294 + C29781;
    const double C30299 = C30293 + C29782;
    const double C30298 = C30292 + C29783;
    const double C30297 = C30291 + C29780;
    const double C30296 = C30290 + C29779;
    const double C30295 = C30289 + C29778;
    const double C32188 = C32187 + C30281;
    const double C32718 = C32715 + C30995;
    const double C32717 = C32714 + C30994;
    const double C32716 = C32713 + C30993;
    const double C35761 = C35759 + C30999;
    const double C35760 = C35758 + C30998;
    const double C36780 = C36778 + C30997;
    const double C36779 = C36777 + C30996;
    const double C39348 = C39346 + C34563;
    const double C39347 = C39345 + C34564;
    const double C42122 = C42121 + C34562;
    const double C51451 = C51450 + C36775;
    const double C52408 = C52407 + C36774;
    const double C55016 = C55015 + C42119;
    const double C57775 = C57774 + C42118;
    const double C59583 = C59582 + C52405;
    const double C63082 = C63081 + C57772;
    const double C64477 = C64471 + C63621;
    const double C67351 = C67348 + C64457;
    const double C91096 = C91090 + C65514;
    const double C96335 = C96332 + C70767;
    const double C72315 = C72307 + C71458;
    const double C72313 = C72305 + C71460;
    const double C72311 = C72303 + C71457;
    const double C72309 = C72301 + C71455;
    const double C75176 = C75174 + C72288;
    const double C75923 = C75919 + C73356;
    const double C75921 = C75917 + C73354;
    const double C81474 = C81470 + C73361;
    const double C81472 = C81468 + C73358;
    const double C84841 = C84839 + C78604;
    const double C88389 = C88387 + C78602;
    const double C108670 = C108668 + C81464;
    const double C113857 = C113855 + C88384;
    const double C75334 = C75333 + C72545;
    const double C75651 = C75409 * C275;
    const double C75657 = C75652 * C141353;
    const double C114100 = C114090 * C188;
    const double C114101 = C114091 * C141327;
    const double C113941 = C113940 + C108778;
    const double C139506 = C139505 * ae;
    const double C63969 = -(C139505 * be) / C139330;
    const double C22211 = C22198 + C22199;
    const double C22208 = C22189 + C22190;
    const double C23195 = C23182 + C23183;
    const double C24187 = C24174 + C24175;
    const double C37224 = C37219 + C24181;
    const double C39815 = C39807 + C26823;
    const double C42472 = C42464 + C29409;
    const double C22218 = C22212 + C22202;
    const double C22213 = C22207 + C22187;
    const double C23199 = C23196 + C23186;
    const double C24191 = C24188 + C24178;
    const double C37226 = C37223 + C24182;
    const double C39817 = C39814 + C26822;
    const double C42476 = C42473 + C29408;
    const double C22216 = C22210 + C22196;
    const double C22215 = C22209 + C22193;
    const double C37228 = C37225 + C24180;
    const double C42474 = C42471 + C29410;
    const double C64004 = C63998 + C63987;
    const double C64003 = C63997 + C63984;
    const double C64001 = C63995 + C63978;
    const double C64973 = C64969 + C64958;
    const double C64971 = C64967 + C64952;
    const double C65961 = C65957 + C65946;
    const double C65959 = C65955 + C65940;
    const double C82079 = C82075 + C71070;
    const double C82078 = C82074 + C65951;
    const double C85404 = C85402 + C68521;
    const double C88819 = C88817 + C71068;
    const double C136411 = C136409 + C85398;
    const double C139013 = C139011 + C88814;
    const double C71841 = C71835 + C71821;
    const double C71840 = C71834 + C71818;
    const double C126300 = C126297 + C73785;
    const double C131448 = C131445 + C78905;
    const double C30005 = C29838 * C191;
    const double C30004 = C29838 * C190;
    const double C29997 = C29838 * C189;
    const double C30629 = C29838 * C911;
    const double C30628 = C29838 * C912;
    const double C31269 = C29838 * C1689;
    const double C31268 = C29838 * C1690;
    const double C32413 = C29838 * C3026;
    const double C33025 = C29838 * C3572;
    const double C34772 = C29838 * C5391;
    const double C30006 = C29839 * C910;
    const double C30003 = C29839 * C911;
    const double C29998 = C29839 * C912;
    const double C30630 = C29839 * C3027;
    const double C30627 = C29839 * C3026;
    const double C31270 = C29839 * C3573;
    const double C31267 = C29839 * C3572;
    const double C32414 = C29839 * C9768;
    const double C33026 = C29839 * C10595;
    const double C34773 = C29839 * C13294;
    const double C30007 = C29840 * C3028;
    const double C30002 = C29840 * C3027;
    const double C29999 = C29840 * C3026;
    const double C30631 = C29840 * C9769;
    const double C30626 = C29840 * C9768;
    const double C31271 = C29840 * C10596;
    const double C31266 = C29840 * C10595;
    const double C34774 = C29840 * C29173;
    const double C71569 = C71543 * C110;
    const double C71563 = C71543 * C116;
    const double C71553 = C71543 * C115;
    const double C71547 = C71543 * C109;
    const double C71829 = C71543 * C192;
    const double C71827 = C71543 * C191;
    const double C71812 = C71543 * C190;
    const double C71808 = C71543 * C189;
    const double C71935 = C307 * C71543;
    const double C71924 = C305 * C71543;
    const double C72094 = C71543 * C278;
    const double C72084 = C71543 * C277;
    const double C72432 = C71543 * C822;
    const double C72426 = C71543 * C827;
    const double C72810 = C71543 * C910;
    const double C72809 = C71543 * C912;
    const double C72805 = C71543 * C911;
    const double C72925 = C1031 * C71543;
    const double C73150 = C71543 * C1005;
    const double C73474 = C71543 * C1600;
    const double C73468 = C71543 * C1605;
    const double C73788 = C71543 * C1688;
    const double C73787 = C71543 * C1690;
    const double C73783 = C71543 * C1689;
    const double C73903 = C1809 * C71543;
    const double C74104 = C71543 * C1783;
    const double C75500 = C71543 * C3027;
    const double C75497 = C71543 * C3026;
    const double C76356 = C71543 * C3573;
    const double C76353 = C71543 * C3572;
    const double C78906 = C71543 * C5392;
    const double C78903 = C71543 * C5391;
    const double C125971 = C71543 * C1606;
    const double C125965 = C71543 * C1601;
    const double C126185 = C37113 * C71543;
    const double C126179 = C37111 * C71543;
    const double C126598 = C71543 * C1784;
    const double C127977 = C71543 * C10595;
    const double C128509 = C71543 * C3494;
    const double C128503 = C71543 * C3490;
    const double C128729 = C32957 * C71543;
    const double C128839 = C71543 * C13294;
    const double C129159 = C71543 * C3646;
    const double C131200 = C71543 * C5325;
    const double C131194 = C71543 * C5329;
    const double C131361 = C42383 * C71543;
    const double C131442 = C71543 * C21136;
    const double C131680 = C71543 * C5449;
    const double C71567 = C71544 * C821;
    const double C71561 = C71544 * C826;
    const double C71555 = C71544 * C827;
    const double C71549 = C71544 * C822;
    const double C71830 = C71544 * C909;
    const double C71824 = C71544 * C910;
    const double C71815 = C71544 * C911;
    const double C71809 = C71544 * C912;
    const double C71933 = C1029 * C71544;
    const double C71926 = C1031 * C71544;
    const double C72092 = C71544 * C1004;
    const double C72086 = C71544 * C1005;
    const double C72430 = C71544 * C2961;
    const double C72424 = C71544 * C2965;
    const double C72811 = C71544 * C3028;
    const double C72808 = C71544 * C3026;
    const double C72802 = C71544 * C3027;
    const double C72923 = C6993 * C71544;
    const double C73148 = C71544 * C3085;
    const double C73472 = C71544 * C3491;
    const double C73466 = C71544 * C3495;
    const double C73789 = C71544 * C3574;
    const double C73786 = C71544 * C3572;
    const double C73780 = C71544 * C3573;
    const double C73901 = C8055 * C71544;
    const double C74102 = C71544 * C3647;
    const double C75501 = C71544 * C9769;
    const double C75498 = C71544 * C9768;
    const double C76357 = C71544 * C10596;
    const double C76354 = C71544 * C10595;
    const double C78907 = C71544 * C13295;
    const double C78904 = C71544 * C13294;
    const double C125973 = C71544 * C3494;
    const double C125967 = C71544 * C3490;
    const double C126187 = C36104 * C71544;
    const double C126181 = C32957 * C71544;
    const double C126600 = C71544 * C3646;
    const double C128511 = C71544 * C10473;
    const double C128505 = C71544 * C10470;
    const double C128731 = C32955 * C71544;
    const double C128840 = C71544 * C29173;
    const double C129161 = C71544 * C10699;
    const double C131198 = C71544 * C13205;
    const double C131192 = C71544 * C13208;
    const double C131359 = C39706 * C71544;
    const double C131443 = C71544 * C42197;
    const double C131678 = C71544 * C13374;
    const double C64254 = C63746 * C275;
    const double C64101 = C64100 + C64094;
    const double C64270 = C64269 * C141353;
    const double C138767 = C138757 * C29775;
    const double C138768 = C138758 * C141219;
    const double C138928 = C138927 + C133768;
    const double C139572 = C139571 * ae;
    const double C89976 = -(C139571 * be) / C139330;
    const double C43575 = C43562 + C43563;
    const double C43572 = C43553 + C43554;
    const double C44536 = C44523 + C44524;
    const double C45629 = C45616 + C45617;
    const double C52297 = C52292 + C44530;
    const double C54905 = C54897 + C47188;
    const double C55921 = C55913 + C48147;
    const double C43582 = C43576 + C43566;
    const double C43577 = C43571 + C43551;
    const double C44540 = C44537 + C44527;
    const double C45633 = C45630 + C45620;
    const double C52299 = C52296 + C44531;
    const double C54909 = C54906 + C47187;
    const double C55925 = C55922 + C48146;
    const double C43580 = C43574 + C43560;
    const double C43579 = C43573 + C43557;
    const double C44538 = C44535 + C44521;
    const double C52301 = C52298 + C44529;
    const double C54907 = C54904 + C47189;
    const double C90011 = C90005 + C89994;
    const double C90010 = C90004 + C89991;
    const double C90008 = C90002 + C89985;
    const double C90969 = C90965 + C90954;
    const double C90967 = C90963 + C90948;
    const double C92028 = C92024 + C92013;
    const double C92026 = C92022 + C92007;
    const double C99113 = C99109 + C93585;
    const double C99112 = C99108 + C90959;
    const double C100321 = C100319 + C94482;
    const double C102407 = C102405 + C93583;
    const double C103609 = C103607 + C94480;
    const double C128299 = C128297 + C102402;
    const double C129274 = C129272 + C103604;
    const double C107615 = C107609 + C107595;
    const double C107614 = C107608 + C107592;
    const double C108557 = C108554 + C108540;
    const double C133365 = C133362 + C108548;
    const double C135865 = C135862 + C111106;
    const double C58907 = C58590 * C278;
    const double C58906 = C58590 * C277;
    const double C58899 = C58590 * C276;
    const double C59509 = C58590 * C1005;
    const double C59508 = C58590 * C1006;
    const double C60156 = C58590 * C1783;
    const double C60155 = C58590 * C1784;
    const double C61205 = C58590 * C3084;
    const double C61833 = C58590 * C3646;
    const double C63527 = C58590 * C5449;
    const double C58908 = C58591 * C1782;
    const double C58905 = C58591 * C1783;
    const double C58900 = C58591 * C1784;
    const double C59510 = C58591 * C3647;
    const double C59507 = C58591 * C3646;
    const double C60157 = C58591 * C5450;
    const double C60154 = C58591 * C5449;
    const double C61206 = C58591 * C10699;
    const double C61834 = C58591 * C13374;
    const double C63528 = C58591 * C21228;
    const double C58909 = C58592 * C5451;
    const double C58904 = C58592 * C5450;
    const double C58901 = C58592 * C5449;
    const double C59511 = C58592 * C13375;
    const double C59506 = C58592 * C13374;
    const double C60158 = C58592 * C21229;
    const double C60153 = C58592 * C21228;
    const double C61207 = C58592 * C29251;
    const double C61835 = C58592 * C42293;
    const double C107091 = C107065 * C110;
    const double C107085 = C107065 * C116;
    const double C107075 = C107065 * C115;
    const double C107069 = C107065 * C109;
    const double C107337 = C107065 * C191;
    const double C107327 = C107065 * C190;
    const double C107504 = C220 * C107065;
    const double C107493 = C218 * C107065;
    const double C107603 = C107065 * C279;
    const double C107601 = C107065 * C278;
    const double C107586 = C107065 * C277;
    const double C107582 = C107065 * C276;
    const double C107928 = C107065 * C822;
    const double C107922 = C107065 * C827;
    const double C108234 = C107065 * C911;
    const double C108440 = C937 * C107065;
    const double C108551 = C107065 * C1004;
    const double C108550 = C107065 * C1006;
    const double C108546 = C107065 * C1005;
    const double C108895 = C107065 * C1600;
    const double C108889 = C107065 * C1605;
    const double C109221 = C107065 * C1689;
    const double C109433 = C1715 * C107065;
    const double C109544 = C107065 * C1782;
    const double C109543 = C107065 * C1784;
    const double C109539 = C107065 * C1783;
    const double C111107 = C107065 * C3085;
    const double C111104 = C107065 * C3084;
    const double C112007 = C107065 * C3647;
    const double C112004 = C107065 * C3646;
    const double C114490 = C107065 * C5450;
    const double C114487 = C107065 * C5449;
    const double C132733 = C107065 * C828;
    const double C132727 = C107065 * C823;
    const double C133039 = C107065 * C912;
    const double C133152 = C30553 * C107065;
    const double C133146 = C30547 * C107065;
    const double C135384 = C107065 * C2960;
    const double C135378 = C107065 * C2964;
    const double C135620 = C107065 * C3026;
    const double C135704 = C30549 * C107065;
    const double C135859 = C107065 * C9848;
    const double C136190 = C107065 * C3490;
    const double C136184 = C107065 * C3494;
    const double C136516 = C107065 * C3572;
    const double C136624 = C32957 * C107065;
    const double C136833 = C107065 * C10699;
    const double C139320 = C107065 * C13374;
    const double C107089 = C107066 * C1599;
    const double C107083 = C107066 * C1604;
    const double C107077 = C107066 * C1605;
    const double C107071 = C107066 * C1600;
    const double C107335 = C107066 * C1688;
    const double C107329 = C107066 * C1689;
    const double C107502 = C1713 * C107066;
    const double C107495 = C1715 * C107066;
    const double C107604 = C107066 * C1781;
    const double C107598 = C107066 * C1782;
    const double C107589 = C107066 * C1783;
    const double C107583 = C107066 * C1784;
    const double C107926 = C107066 * C3491;
    const double C107920 = C107066 * C3495;
    const double C108232 = C107066 * C3573;
    const double C108438 = C14851 * C107066;
    const double C108552 = C107066 * C3648;
    const double C108549 = C107066 * C3646;
    const double C108543 = C107066 * C3647;
    const double C108893 = C107066 * C5326;
    const double C108887 = C107066 * C5330;
    const double C109219 = C107066 * C5392;
    const double C109431 = C15882 * C107066;
    const double C109545 = C107066 * C5451;
    const double C109542 = C107066 * C5449;
    const double C109536 = C107066 * C5450;
    const double C111108 = C107066 * C10700;
    const double C111105 = C107066 * C10699;
    const double C112008 = C107066 * C13375;
    const double C112005 = C107066 * C13374;
    const double C114491 = C107066 * C21229;
    const double C114488 = C107066 * C21228;
    const double C132735 = C107066 * C3494;
    const double C132729 = C107066 * C3490;
    const double C133041 = C107066 * C3572;
    const double C133154 = C36104 * C107066;
    const double C133148 = C32957 * C107066;
    const double C135382 = C107066 * C10470;
    const double C135376 = C107066 * C10473;
    const double C135618 = C107066 * C10595;
    const double C135702 = C32955 * C107066;
    const double C135860 = C107066 * C26579;
    const double C136188 = C107066 * C13205;
    const double C136182 = C107066 * C13208;
    const double C136514 = C107066 * C13294;
    const double C136622 = C39706 * C107066;
    const double C136834 = C107066 * C29251;
    const double C139321 = C107066 * C42293;
    const double C89722 = C89494 * C188;
    const double C89738 = C89737 * C141327;
    const double C89902 = C89901 + C89895;
    const double C127822 = C127812 * C29775;
    const double C127823 = C127813 * C141219;
    const double C128141 = C128140 + C125564;
    const double C6006 = C5999 + C6000;
    const double C63747 = C63740 + C63741;
    const double C14118 = C14111 + C14112;
    const double C89495 = C89488 + C89489;
    const double C55486 = C55482 + C55470;
    const double C124 =
        (3 * (C139675 + C139678 + C139678 + C139646 * C139706) + C139713 +
         C139713 +
         C139646 * (2 * C139706 + C139710 + C139710 +
                    C139646 * (C139701 + C139705 + C139705 +
                               C139646 * (2 * ae * C139695 +
                                          C139646 *
                                              (C139685 * C139686 +
                                               C139650 * bs[6] *
                                                   std::pow(C139644, 6)) *
                                              C139653)))) /
        C139335;
    const double C914 =
        (C139713 + C139761 * (2 * C139782 + ae * C139783 + C139646 * C139800)) /
        C139335;
    const double C1097 =
        (C139713 + C139761 * (2 * C139857 + ae * C139783 + C139646 * C139865)) /
        C139335;
    const double C1786 =
        (C139713 + C139804 * (2 * C139825 + ae * C139826 + C139646 * C139843)) /
        C139335;
    const double C2123 =
        (C139713 + C139804 * (2 * C139915 + ae * C139826 + C139646 * C139923)) /
        C139335;
    const double C137 = C105 * C118;
    const double C131 = C107 * C118;
    const double C214 = C188 * C118;
    const double C301 = C275 * C118;
    const double C5889 = C5873 * C118;
    const double C63630 = C63614 * C118;
    const double C842 = C105 * C825;
    const double C836 = C107 * C825;
    const double C920 = C188 * C825;
    const double C1014 = C275 * C825;
    const double C5891 = C5871 * C825;
    const double C5881 = C5873 * C825;
    const double C5985 = C5967 * C825;
    const double C7111 = C5865 * C825;
    const double C21842 = C139356 * C825;
    const double C63632 = C63612 * C825;
    const double C63622 = C63614 * C825;
    const double C63726 = C63708 * C825;
    const double C64834 = C63606 * C825;
    const double C71467 = C71450 * C825;
    const double C1620 = C105 * C1603;
    const double C1614 = C107 * C1603;
    const double C1698 = C188 * C1603;
    const double C1792 = C275 * C1603;
    const double C7820 = C5873 * C1603;
    const double C13929 = C5871 * C1603;
    const double C14097 = C14079 * C1603;
    const double C16122 = C5865 * C1603;
    const double C42880 = C139356 * C1603;
    const double C65519 = C63614 * C1603;
    const double C79304 = C71450 * C1603;
    const double C89306 = C63612 * C1603;
    const double C89474 = C89456 * C1603;
    const double C91453 = C63606 * C1603;
    const double C6860 = C6844 + C6845;
    const double C21952 = C21934 + C21935;
    const double C64601 = C64585 + C64586;
    const double C71577 = C71559 + C71560;
    const double C9956 = C9944 + C9945;
    const double C23080 = C23063 + C23064;
    const double C67597 = C67585 + C67586;
    const double C72699 = C72682 + C72683;
    const double C8052 = C8044 + C8045;
    const double C14966 = C14950 + C14951;
    const double C90331 = C90315 + C90316;
    const double C11155 = C11149 + C11150;
    const double C68728 = C68722 + C68723;
    const double C81056 = C81053 + C81054;
    const double C116314 = C116311 + C116312;
    const double C10492 = C10489 + C7812;
    const double C18487 = C14848 * C5865;
    const double C93789 = C14848 * C63606;
    const double C115514 = C115512 + C23752;
    const double C68098 = C68095 + C65511;
    const double C80228 = C80226 + C73363;
    const double C10831 = C10819 + C10820;
    const double C68416 = C68404 + C68405;
    const double C80648 = C80643 + C80644;
    const double C115918 = C115913 + C115914;
    const double C15999 = C15983 + C15984;
    const double C43064 = C43046 + C43047;
    const double C91330 = C91314 + C91315;
    const double C107099 = C107081 + C107082;
    const double C21578 = C21572 + C21573;
    const double C45407 = C45398 + C45399;
    const double C96818 = C96812 + C96813;
    const double C109329 = C109326 + C109327;
    const double C140509 = ae * C140508;
    const double C25663 = (3 * C140285 + C139761 * C140508 +
                           (2 * C140279 + C139761 * C140497) * ae) /
                          C139330;
    const double C26478 = (C139804 * C140508) / C139330;
    const double C140874 = ae * C140873;
    const double C50174 = (3 * C140436 + C139804 * C140873 +
                           (2 * C140430 + C139804 * C140864) * ae) /
                          C139330;
    const double C3579 =
        (C139804 *
         (C139755 +
          C139761 * (2 * C139796 + ae * C139797 +
                     C139646 * (C139790 + ae * C139646 * C139792 +
                                C139646 * (ae * C139792 +
                                           C139646 * std::pow(C139652, 7) *
                                               bs[7] * C139765))))) /
        C139335;
    const double C139756 = C139720 + C139754;
    const double C139980 = ae * C139975;
    const double C3497 = (C139804 * C139975) / C139330;
    const double C140044 = ae * C140039;
    const double C2976 = C107 * C2967;
    const double C6727 = C5873 * C2967;
    const double C21844 = C139356 * C2967;
    const double C64468 = C63614 * C2967;
    const double C71469 = C71450 * C2967;
    const double C5341 = C107 * C5332;
    const double C15738 = C5873 * C5332;
    const double C42882 = C139356 * C5332;
    const double C91087 = C63614 * C5332;
    const double C106917 = C71450 * C5332;
    const double C140650 = C140623 + C140648;
    const double C140693 = ae * C140688;
    const double C140984 = C140959 + C140982;
    const double C140921 = ae * C140920;
    const double C57943 = (3 * C140765 + C139804 * C140920 +
                           (2 * C140759 + C139804 * C140909) * ae) /
                          C139330;
    const double C18789 = C15178 * C5865;
    const double C94086 = C15178 * C63606;
    const double C24504 = C24498 + C24499;
    const double C74106 = C74100 + C74101;
    const double C81191 = C81187 + C81188;
    const double C98965 = C98961 + C98962;
    const double C23197 = C23194 + C23180;
    const double C23309 = C23308 * C21821;
    const double C72920 = C23308 * C71446;
    const double C72816 = C72813 + C72799;
    const double C98553 = C98551 + C10941;
    const double C24189 = C24186 + C24172;
    const double C24301 = C24300 * C21821;
    const double C73898 = C24300 * C71446;
    const double C37110 = C36107 * C21821;
    const double C126190 = C36107 * C71446;
    const double C80785 = C80783 + C68523;
    const double C73794 = C73791 + C73777;
    const double C25921 =
        (3 * (C139874 + C140272 + C140272 + C139761 * C140473) + C140486 +
         C140486 +
         C139761 * (2 * C140473 + C140483 + C140483 +
                    C139761 * (C139879 + C140479 + C140479 +
                               C139761 * (2 * C139786 + C139761 * C139884)))) /
        C139335;
    const double C27140 =
        (C140486 +
         C139804 * (2 * C140526 + ae * C140514 +
                    C139761 * (C139934 + ae * C139761 * C139822 +
                               C139761 * (C139829 + C139761 * C139937)))) /
        C139335;
    const double C25926 = C21920 * C25662;
    const double C30625 = C29841 * C25662;
    const double C32356 = C29775 * C25662;
    const double C32415 = C29840 * C25662;
    const double C32468 = C275 * C25662;
    const double C75499 = C71545 * C25662;
    const double C26824 = C21920 * C26477;
    const double C31265 = C29841 * C26477;
    const double C32940 = C29775 * C26477;
    const double C33027 = C29840 * C26477;
    const double C33096 = C275 * C26477;
    const double C38916 = C21919 * C26477;
    const double C38993 = C14079 * C26477;
    const double C39456 = C21821 * C26477;
    const double C54581 = C5967 * C26477;
    const double C76355 = C71545 * C26477;
    const double C84308 = C63708 * C26477;
    const double C127978 = C71544 * C26477;
    const double C128055 = C89456 * C26477;
    const double C128508 = C71446 * C26477;
    const double C34775 = C29841 * C34615;
    const double C39813 = C21920 * C34615;
    const double C54583 = C5967 * C34615;
    const double C128841 = C71545 * C34615;
    const double C135541 = C63708 * C34615;
    const double C42717 = C42711 + C42712;
    const double C55812 = C55807 + C55808;
    const double C131682 = C131676 + C131677;
    const double C136728 = C136725 + C136726;
    const double C55488 = C55484 + C55474;
    const double C61565 = C61564 * C141219;
    const double C45514 = C45513 * C42875;
    const double C109428 = C45513 * C106914;
    const double C45631 = C45628 + C45614;
    const double C109550 = C109547 + C109533;
    const double C55923 = C55920 + C48148;
    const double C55702 = C55701 * C42875;
    const double C136619 = C55701 * C106914;
    const double C136839 = C136836 + C112006;
    const double C50668 =
        (3 * (C139948 + C140424 + C140424 + C139804 * C140843) + C140853 +
         C140853 +
         C139804 * (2 * C140843 + C140850 + C140850 +
                    C139804 * (C139953 + C140703 + C140703 +
                               C139804 * (2 * C139829 + C139804 * C139958)))) /
        C139335;
    const double C50673 = C43032 * C50173;
    const double C60152 = C58593 * C50173;
    const double C63419 = C29775 * C50173;
    const double C63473 = C188 * C50173;
    const double C63529 = C58592 * C50173;
    const double C114489 = C107067 * C50173;
    const double C25752 = C25745 + C22919;
    const double C25835 = C23071 + C23072;
    const double C25834 = C23069 + C23070;
    const double C26086 = C23426 + C23427;
    const double C120322 = C26720 + C26721;
    const double C120319 = C26721 + C26720;
    const double C120321 = C26718 + C26719;
    const double C120320 = C26719 + C26718;
    const double C120714 = C27041 + C27042;
    const double C120713 = C27042 + C27041;
    const double C50094 = C50087 + C44790;
    const double C50255 = C45058 + C45059;
    const double C50254 = C45056 + C45057;
    const double C50509 = C45402 + C45403;
    const double C64850 = C64835 + C64836;
    const double C64847 = C64829 + C64830;
    const double C64844 = C64823 + C64824;
    const double C64841 = C64817 + C64818;
    const double C65198 = C65189 + C65190;
    const double C65195 = C65183 + C65184;
    const double C67602 = C67595 + C67596;
    const double C67599 = C67589 + C67590;
    const double C67839 = C67835 + C67836;
    const double C68421 = C68414 + C68415;
    const double C68418 = C68408 + C68409;
    const double C68730 = C68726 + C68727;
    const double C91469 = C91454 + C91455;
    const double C91466 = C91448 + C91449;
    const double C91463 = C91442 + C91443;
    const double C91460 = C91436 + C91437;
    const double C91799 = C91790 + C91791;
    const double C91796 = C91784 + C91785;
    const double C96586 = C96579 + C96580;
    const double C96583 = C96573 + C96574;
    const double C96820 = C96816 + C96817;
    const double C64851 = C64837 + C64838;
    const double C64848 = C64831 + C64832;
    const double C64845 = C64825 + C64826;
    const double C64842 = C64819 + C64820;
    const double C65199 = C65191 + C65192;
    const double C65196 = C65185 + C65186;
    const double C67601 = C67593 + C67594;
    const double C67598 = C67587 + C67588;
    const double C67838 = C67833 + C67834;
    const double C68420 = C68412 + C68413;
    const double C68417 = C68406 + C68407;
    const double C68729 = C68724 + C68725;
    const double C91470 = C91456 + C91457;
    const double C91467 = C91450 + C91451;
    const double C91464 = C91444 + C91445;
    const double C91461 = C91438 + C91439;
    const double C91800 = C91792 + C91793;
    const double C91797 = C91786 + C91787;
    const double C96585 = C96577 + C96578;
    const double C96582 = C96571 + C96572;
    const double C96819 = C96814 + C96815;
    const double C100 =
        ((ae * -2 * C139329) / C139342 -
         (((C139331 * C139343) / C139335 + 2 * C139359) * be) / C139330) /
            C139336 -
        ((C139331 *
              (C139343 / C139342 -
               (((C139331 * C139368) / C139330 + 2 * C139366) * be) / C139330 -
               C139361 / C139345) +
          2 * (C139359 / C139336 -
               ((C139331 * C139366 + C141462) * be) / C139330 + C139356)) *
         be) /
            C139330 +
        C139368 / C139345 - ((2 * C139356 - C139363 / C139345) * be) / C139330;
    const double C102 =
        (C139343 / C139342 -
         (((C139331 * C139368) / C139330 + 2 * C139366) * be) / C139330 -
         C139361 / C139345) /
            C139336 -
        ((C139331 * (C139368 / C139345 -
                     ((2 * C139356 - C139363 / C139345) * be) / C139330) +
          2 * (C139366 / C139336 -
               ((C139331 * C139356 + C141224) * be) / C139330)) *
         be) /
            C139330 +
        (-2 * C139361) / (C139330 * 4 * C139335);
    const double C104 = (C139368 / C139345 -
                         ((2 * C139356 - C139363 / C139345) * be) / C139330) /
                            C139336 -
                        ((2 * (C139356 / C139336 - (0 * be) / C139330) -
                          C139363 / (C139330 * 4 * C139335)) *
                         be) /
                            C139330;
    const double C21822 = C139368 / C139330;
    const double C63609 =
        C139343 / C139342 -
        (((C139331 * C139368) / C139330 + 2 * C139366) * be) / C139330 -
        C139361 / C139345;
    const double C63611 =
        C139368 / C139345 - ((2 * C139356 - C139363 / C139345) * be) / C139330;
    const double C6719 = C5868 * C822;
    const double C6710 = C5868 * C823;
    const double C9681 = C5868 * C2960;
    const double C10484 = C5868 * C3490;
    const double C15730 = C5868 * C1600;
    const double C15724 = C5868 * C1601;
    const double C21049 = C5868 * C5325;
    const double C6721 = C5870 * C821;
    const double C6712 = C5870 * C822;
    const double C9679 = C5870 * C2961;
    const double C10482 = C5870 * C3491;
    const double C15732 = C5870 * C1599;
    const double C15726 = C5870 * C1600;
    const double C21047 = C5870 * C5326;
    const double C72294 = C71447 * C2961;
    const double C72290 = C71447 * C822;
    const double C72284 = C71447 * C2960;
    const double C72280 = C71447 * C823;
    const double C75169 = C71447 * C9667;
    const double C75913 = C71447 * C3490;
    const double C75909 = C71447 * C10470;
    const double C80221 = C71447 * C3491;
    const double C81459 = C71447 * C1600;
    const double C81455 = C71447 * C1601;
    const double C84836 = C71447 * C13205;
    const double C88381 = C71447 * C5325;
    const double C108661 = C71447 * C5326;
    const double C113851 = C71447 * C21035;
    const double C6742 = C6736 + C6715;
    const double C9692 = C9689 + C9678;
    const double C15753 = C15747 + C15729;
    const double C21060 = C21057 + C21046;
    const double C22698 = C22690 + C22672;
    const double C22696 = C22688 + C22668;
    const double C22694 = C22686 + C22662;
    const double C22692 = C22684 + C22658;
    const double C25587 = C25585 + C25577;
    const double C26378 = C26374 + C26363;
    const double C26376 = C26372 + C26359;
    const double C44685 = C44677 + C44659;
    const double C44683 = C44675 + C44655;
    const double C44681 = C44673 + C44649;
    const double C44679 = C44671 + C44645;
    const double C47305 = C47303 + C47297;
    const double C50007 = C50005 + C49998;
    const double C30306 = C30300 + C30287;
    const double C30305 = C30299 + C30285;
    const double C30304 = C30298 + C30283;
    const double C30303 = C30297 + C30280;
    const double C30302 = C30296 + C30278;
    const double C30301 = C30295 + C30276;
    const double C32189 = C32188 + C32185;
    const double C32721 = C32718 + C32711;
    const double C32720 = C32717 + C32709;
    const double C32719 = C32716 + C32707;
    const double C35763 = C35761 + C35757;
    const double C35762 = C35760 + C35754;
    const double C36782 = C36780 + C36773;
    const double C36781 = C36779 + C36771;
    const double C39350 = C39348 + C39343;
    const double C39349 = C39347 + C39340;
    const double C42123 = C42122 + C42117;
    const double C51452 = C51451 + C51449;
    const double C52409 = C52408 + C52404;
    const double C55017 = C55016 + C55012;
    const double C57776 = C57775 + C57771;
    const double C59584 = C59583 + C59580;
    const double C63083 = C63082 + C63079;
    const double C64483 = C64477 + C64456;
    const double C67354 = C67351 + C67340;
    const double C91102 = C91096 + C91078;
    const double C96338 = C96335 + C96324;
    const double C72323 = C72315 + C72297;
    const double C72321 = C72313 + C72293;
    const double C72319 = C72311 + C72287;
    const double C72317 = C72309 + C72283;
    const double C75178 = C75176 + C75168;
    const double C75927 = C75923 + C75912;
    const double C75925 = C75921 + C75908;
    const double C81478 = C81474 + C81462;
    const double C81476 = C81472 + C81458;
    const double C84843 = C84841 + C84835;
    const double C88391 = C88389 + C88380;
    const double C108672 = C108670 + C108664;
    const double C113859 = C113857 + C113850;
    const double C75660 = C75651 + C75657;
    const double C114106 = C114100 + C114101;
    const double C29992 =
        ((ae * -2 * C139474) / C139342 -
         (((C139394 * C139503) / C139335 + 2 * C139489) * be) / C139330) /
            C139336 -
        ((C139394 *
              (C139503 / C139342 -
               (((C139394 * C139506) / C139330 + 2 * C139485) * be) / C139330 -
               C139459 / C139345) +
          2 * (C139489 / C139336 -
               ((C139394 * C139485 + C141478) * be) / C139330 + C139486)) *
         be) /
            C139330 +
        C139506 / C139345 - ((2 * C139486 - C139462 / C139345) * be) / C139330;
    const double C29993 =
        (C139503 / C139342 -
         (((C139394 * C139506) / C139330 + 2 * C139485) * be) / C139330 -
         C139459 / C139345) /
            C139336 -
        ((C139394 * (C139506 / C139345 -
                     ((2 * C139486 - C139462 / C139345) * be) / C139330) +
          2 * (C139485 / C139336 -
               ((C139394 * C139486 + C141341) * be) / C139330)) *
         be) /
            C139330 +
        (-2 * C139459) / (C139330 * 4 * C139335);
    const double C29994 = (C139506 / C139345 -
                           ((2 * C139486 - C139462 / C139345) * be) / C139330) /
                              C139336 -
                          ((2 * (C139486 / C139336 - (0 * be) / C139330) -
                            C139462 / (C139330 * 4 * C139335)) *
                           be) /
                              C139330;
    const double C71804 =
        C139503 / C139342 -
        (((C139394 * C139506) / C139330 + 2 * C139485) * be) / C139330 -
        C139459 / C139345;
    const double C71805 =
        C139506 / C139345 - ((2 * C139486 - C139462 / C139345) * be) / C139330;
    const double C63989 = C63969 * C111;
    const double C63980 = C63969 * C110;
    const double C63974 = C63969 * C109;
    const double C64960 = C63969 * C822;
    const double C64954 = C63969 * C821;
    const double C65948 = C63969 * C1600;
    const double C65942 = C63969 * C1599;
    const double C80781 = C63969 * C3491;
    const double C82070 = C63969 * C5326;
    const double C82063 = C63969 * C1601;
    const double C85393 = C63969 * C3490;
    const double C88811 = C63969 * C5325;
    const double C136402 = C63969 * C13205;
    const double C139006 = C63969 * C21035;
    const double C22217 = C22211 + C22199;
    const double C22214 = C22208 + C22190;
    const double C23198 = C23195 + C23183;
    const double C24190 = C24187 + C24175;
    const double C37227 = C37224 + C24181;
    const double C39818 = C39815 + C26823;
    const double C42475 = C42472 + C29409;
    const double C22224 = C22218 + C22203;
    const double C22219 = C22213 + C22188;
    const double C23202 = C23199 + C23187;
    const double C24194 = C24191 + C24179;
    const double C37229 = C37226 + C37218;
    const double C39820 = C39817 + C39806;
    const double C42479 = C42476 + C42467;
    const double C22222 = C22216 + C22197;
    const double C22221 = C22215 + C22194;
    const double C37231 = C37228 + C37222;
    const double C42477 = C42474 + C42463;
    const double C64010 = C64004 + C63988;
    const double C64009 = C64003 + C63985;
    const double C64007 = C64001 + C63979;
    const double C64977 = C64973 + C64959;
    const double C64975 = C64971 + C64953;
    const double C65965 = C65961 + C65947;
    const double C65963 = C65959 + C65941;
    const double C82083 = C82079 + C82069;
    const double C82082 = C82078 + C82066;
    const double C85406 = C85404 + C85396;
    const double C88821 = C88819 + C88810;
    const double C136413 = C136411 + C136405;
    const double C139015 = C139013 + C139005;
    const double C71847 = C71841 + C71822;
    const double C71846 = C71840 + C71819;
    const double C126303 = C126300 + C126294;
    const double C131451 = C131448 + C131437;
    const double C71582 = C71569 + C71570;
    const double C71579 = C71563 + C71564;
    const double C71574 = C71553 + C71554;
    const double C71571 = C71547 + C71548;
    const double C72101 = C72094 + C72095;
    const double C72096 = C72084 + C72085;
    const double C72439 = C72432 + C72433;
    const double C72436 = C72426 + C72427;
    const double C73154 = C73150 + C73151;
    const double C73481 = C73474 + C73475;
    const double C73478 = C73468 + C73469;
    const double C74108 = C74104 + C74105;
    const double C125980 = C125971 + C125972;
    const double C125977 = C125965 + C125966;
    const double C126604 = C126598 + C126599;
    const double C128518 = C128509 + C128510;
    const double C128515 = C128503 + C128504;
    const double C129165 = C129159 + C129160;
    const double C131207 = C131200 + C131201;
    const double C131204 = C131194 + C131195;
    const double C131684 = C131680 + C131681;
    const double C71581 = C71567 + C71568;
    const double C71578 = C71561 + C71562;
    const double C71575 = C71555 + C71556;
    const double C71572 = C71549 + C71550;
    const double C72100 = C72092 + C72093;
    const double C72097 = C72086 + C72087;
    const double C72438 = C72430 + C72431;
    const double C72435 = C72424 + C72425;
    const double C73153 = C73148 + C73149;
    const double C73480 = C73472 + C73473;
    const double C73477 = C73466 + C73467;
    const double C74107 = C74102 + C74103;
    const double C125981 = C125973 + C125974;
    const double C125978 = C125967 + C125968;
    const double C126605 = C126600 + C126601;
    const double C128519 = C128511 + C128512;
    const double C128516 = C128505 + C128506;
    const double C129166 = C129161 + C129162;
    const double C131206 = C131198 + C131199;
    const double C131203 = C131192 + C131193;
    const double C131683 = C131678 + C131679;
    const double C64271 = C64254 + C64270;
    const double C138773 = C138767 + C138768;
    const double C58894 =
        ((ae * -2 * C139540) / C139342 -
         (((C139397 * C139569) / C139335 + 2 * C139555) * be) / C139330) /
            C139336 -
        ((C139397 *
              (C139569 / C139342 -
               (((C139397 * C139572) / C139330 + 2 * C139551) * be) / C139330 -
               C139529 / C139345) +
          2 * (C139555 / C139336 -
               ((C139397 * C139551 + C141479) * be) / C139330 + C139552)) *
         be) /
            C139330 +
        C139572 / C139345 - ((2 * C139552 - C139532 / C139345) * be) / C139330;
    const double C58895 =
        (C139569 / C139342 -
         (((C139397 * C139572) / C139330 + 2 * C139551) * be) / C139330 -
         C139529 / C139345) /
            C139336 -
        ((C139397 * (C139572 / C139345 -
                     ((2 * C139552 - C139532 / C139345) * be) / C139330) +
          2 * (C139551 / C139336 -
               ((C139397 * C139552 + C141365) * be) / C139330)) *
         be) /
            C139330 +
        (-2 * C139529) / (C139330 * 4 * C139335);
    const double C58896 = (C139572 / C139345 -
                           ((2 * C139552 - C139532 / C139345) * be) / C139330) /
                              C139336 -
                          ((2 * (C139552 / C139336 - (0 * be) / C139330) -
                            C139532 / (C139330 * 4 * C139335)) *
                           be) /
                              C139330;
    const double C107578 =
        C139569 / C139342 -
        (((C139397 * C139572) / C139330 + 2 * C139551) * be) / C139330 -
        C139529 / C139345;
    const double C107579 =
        C139572 / C139345 - ((2 * C139552 - C139532 / C139345) * be) / C139330;
    const double C89996 = C89976 * C111;
    const double C89987 = C89976 * C110;
    const double C89981 = C89976 * C109;
    const double C90956 = C89976 * C822;
    const double C90950 = C89976 * C821;
    const double C92015 = C89976 * C1600;
    const double C92009 = C89976 * C1599;
    const double C99104 = C89976 * C2961;
    const double C99097 = C89976 * C823;
    const double C100317 = C89976 * C3491;
    const double C102399 = C89976 * C2960;
    const double C103601 = C89976 * C3490;
    const double C128293 = C89976 * C9667;
    const double C129268 = C89976 * C10470;
    const double C43581 = C43575 + C43563;
    const double C43578 = C43572 + C43554;
    const double C44539 = C44536 + C44524;
    const double C45632 = C45629 + C45617;
    const double C52300 = C52297 + C44530;
    const double C54908 = C54905 + C47188;
    const double C55924 = C55921 + C48147;
    const double C43588 = C43582 + C43567;
    const double C43583 = C43577 + C43552;
    const double C44543 = C44540 + C44528;
    const double C45636 = C45633 + C45621;
    const double C52302 = C52299 + C52291;
    const double C54912 = C54909 + C54900;
    const double C55928 = C55925 + C55916;
    const double C43586 = C43580 + C43561;
    const double C43585 = C43579 + C43558;
    const double C44541 = C44538 + C44522;
    const double C52304 = C52301 + C52295;
    const double C54910 = C54907 + C54896;
    const double C90017 = C90011 + C89995;
    const double C90016 = C90010 + C89992;
    const double C90014 = C90008 + C89986;
    const double C90973 = C90969 + C90955;
    const double C90971 = C90967 + C90949;
    const double C92032 = C92028 + C92014;
    const double C92030 = C92026 + C92008;
    const double C99117 = C99113 + C99103;
    const double C99116 = C99112 + C99100;
    const double C100323 = C100321 + C100316;
    const double C102409 = C102407 + C102398;
    const double C103611 = C103609 + C103600;
    const double C128301 = C128299 + C128292;
    const double C129276 = C129274 + C129267;
    const double C107621 = C107615 + C107596;
    const double C107620 = C107614 + C107593;
    const double C108560 = C108557 + C108541;
    const double C133368 = C133365 + C133359;
    const double C135868 = C135865 + C135854;
    const double C107104 = C107091 + C107092;
    const double C107101 = C107085 + C107086;
    const double C107096 = C107075 + C107076;
    const double C107093 = C107069 + C107070;
    const double C107344 = C107337 + C107338;
    const double C107339 = C107327 + C107328;
    const double C107935 = C107928 + C107929;
    const double C107932 = C107922 + C107923;
    const double C108238 = C108234 + C108235;
    const double C108902 = C108895 + C108896;
    const double C108899 = C108889 + C108890;
    const double C109225 = C109221 + C109222;
    const double C132742 = C132733 + C132734;
    const double C132739 = C132727 + C132728;
    const double C133045 = C133039 + C133040;
    const double C135391 = C135384 + C135385;
    const double C135388 = C135378 + C135379;
    const double C135624 = C135620 + C135621;
    const double C136197 = C136190 + C136191;
    const double C136194 = C136184 + C136185;
    const double C136520 = C136516 + C136517;
    const double C107103 = C107089 + C107090;
    const double C107100 = C107083 + C107084;
    const double C107097 = C107077 + C107078;
    const double C107094 = C107071 + C107072;
    const double C107343 = C107335 + C107336;
    const double C107340 = C107329 + C107330;
    const double C107934 = C107926 + C107927;
    const double C107931 = C107920 + C107921;
    const double C108237 = C108232 + C108233;
    const double C108901 = C108893 + C108894;
    const double C108898 = C108887 + C108888;
    const double C109224 = C109219 + C109220;
    const double C132743 = C132735 + C132736;
    const double C132740 = C132729 + C132730;
    const double C133046 = C133041 + C133042;
    const double C135390 = C135382 + C135383;
    const double C135387 = C135376 + C135377;
    const double C135623 = C135618 + C135619;
    const double C136196 = C136188 + C136189;
    const double C136193 = C136182 + C136183;
    const double C136519 = C136514 + C136515;
    const double C89739 = C89722 + C89738;
    const double C127828 = C127822 + C127823;
    const double C921 = C141327 * C914;
    const double C5986 = C141341 * C914;
    const double C63727 = C141341 * C914;
    const double C7117 = C5865 * C1097;
    const double C64840 = C63606 * C1097;
    const double C1793 = C141353 * C1786;
    const double C14098 = C141365 * C1786;
    const double C89475 = C141365 * C1786;
    const double C16479 = C5865 * C2123;
    const double C91795 = C63606 * C2123;
    const double C224 = C214 + C215;
    const double C311 = C301 + C302;
    const double C1026 = C1014 + C1015;
    const double C6733 = C6723 + C5881;
    const double C7126 = C7110 + C7111;
    const double C64474 = C64464 + C63622;
    const double C64849 = C64833 + C64834;
    const double C1710 = C1698 + C1699;
    const double C15744 = C15734 + C7820;
    const double C16137 = C16121 + C16122;
    const double C91093 = C91083 + C65519;
    const double C91468 = C91452 + C91453;
    const double C10706 = C8052 * C5865;
    const double C68300 = C8052 * C63606;
    const double C10495 = C10492 + C10481;
    const double C115516 = C115514 + C115510;
    const double C68101 = C68098 + C68087;
    const double C80230 = C80228 + C80224;
    const double C25922 =
        (3 * (C140277 + C140283 + C140283 + C139761 * C140498) + C140509 +
         C140509 +
         C139761 * (2 * C140498 + C140506 + C140506 +
                    C139761 * (C140489 + C140502 + C140502 +
                               C139761 * (2 * ae * C140491 +
                                          C139761 * C139646 *
                                              (C139718 * C139719 +
                                               C139869 * bs[7] *
                                                   std::pow(C139652, 7)) *
                                              C139653)))) /
        C139335;
    const double C27141 =
        (C140509 + C139804 * (2 * C140530 + ae * C140521 +
                              C139761 * (C140528 + ae * C139761 * C140517 +
                                         C139761 * (ae * C140517 +
                                                    C139761 * C139646 *
                                                        std::pow(C139652, 7) *
                                                        bs[7] * C139928)))) /
        C139335;
    const double C25929 = C21920 * C25663;
    const double C30632 = C29841 * C25663;
    const double C75502 = C71545 * C25663;
    const double C26827 = C21920 * C26478;
    const double C31272 = C29841 * C26478;
    const double C76358 = C71545 * C26478;
    const double C84310 = C63708 * C26478;
    const double C101998 = C5967 * C26478;
    const double C50669 =
        (3 * (C140310 + C140434 + C140434 + C139804 * C140861) + C140874 +
         C140874 +
         C139804 * (2 * C140861 + C140871 + C140871 +
                    C139804 * (C140533 + C140867 + C140867 +
                               C139804 * (2 * ae * C140517 +
                                          C139804 * C139646 *
                                              (C139718 * C139719 +
                                               C139943 * bs[7] *
                                                   std::pow(C139652, 7)) *
                                              C139653)))) /
        C139335;
    const double C50676 = C43032 * C50174;
    const double C60159 = C58593 * C50174;
    const double C114492 = C107067 * C50174;
    const double C139757 = C139756 + C139743;
    const double C834 =
        (3 * (C139962 + C139966 + C139966 + C139646 * C139984) + C139980 +
         C139980 +
         C139646 * (2 * C139984 + C139981 + C139981 +
                    C139646 * (C139974 + C139982 + C139982 +
                               C139646 * (2 * ae * C139761 * C139731 +
                                          C139646 * C139761 *
                                              (C139718 * C139719 +
                                               C139650 * bs[7] *
                                                   std::pow(C139652, 7)) *
                                              C139653)))) /
        C139335;
    const double C3033 =
        (2 * C139782 + ae * C139783 + C139646 * C139800 + C139980 +
         C139761 *
             (C139755 +
              C139761 * (2 * C139796 + ae * C139797 +
                         C139646 * (C139790 + ae * C139646 * C139792 +
                                    C139646 * (ae * C139792 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139765))))) /
        C139335;
    const double C3145 =
        (2 * C139857 + ae * C139783 + C139646 * C139865 + C139980 +
         C139761 *
             (C139755 +
              C139761 * (2 * C139863 + ae * C139797 +
                         C139646 * (C139861 + ae * C139646 * C139792 +
                                    C139646 * (ae * C139792 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139849))))) /
        C139335;
    const double C3653 =
        (C139980 + C139804 * C139761 *
                       (2 * C139839 + ae * C139840 +
                        C139646 * (C139833 + ae * C139646 * C139835 +
                                   C139646 * (ae * C139835 +
                                              C139646 * std::pow(C139652, 7) *
                                                  bs[7] * C139808)))) /
        C139335;
    const double C3937 =
        (C139980 + C139804 * C139761 *
                       (2 * C139921 + ae * C139840 +
                        C139646 * (C139919 + ae * C139646 * C139835 +
                                   C139646 * (ae * C139835 +
                                              C139646 * std::pow(C139652, 7) *
                                                  bs[7] * C139907)))) /
        C139335;
    const double C3506 = C107 * C3497;
    const double C7823 = C5873 * C3497;
    const double C65522 = C63614 * C3497;
    const double C79306 = C71450 * C3497;
    const double C114592 = C139356 * C3497;
    const double C1612 =
        (3 * (C140026 + C140030 + C140030 + C139646 * C140048) + C140044 +
         C140044 +
         C139646 * (2 * C140048 + C140045 + C140045 +
                    C139646 * (C140038 + C140046 + C140046 +
                               C139646 * (2 * ae * C139804 * C139731 +
                                          C139646 * C139804 *
                                              (C139718 * C139719 +
                                               C139650 * bs[7] *
                                                   std::pow(C139652, 7)) *
                                              C139653)))) /
        C139335;
    const double C3723 =
        (C140044 + C139761 * C139804 *
                       (2 * C139863 + ae * C139797 +
                        C139646 * (C139861 + ae * C139646 * C139792 +
                                   C139646 * (ae * C139792 +
                                              C139646 * std::pow(C139652, 7) *
                                                  bs[7] * C139849)))) /
        C139335;
    const double C5456 =
        (2 * C139825 + ae * C139826 + C139646 * C139843 + C140044 +
         C139804 *
             (C139755 +
              C139804 * (2 * C139839 + ae * C139840 +
                         C139646 * (C139833 + ae * C139646 * C139835 +
                                    C139646 * (ae * C139835 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139808))))) /
        C139335;
    const double C5676 =
        (2 * C139915 + ae * C139826 + C139646 * C139923 + C140044 +
         C139804 *
             (C139755 +
              C139804 * (2 * C139921 + ae * C139840 +
                         C139646 * (C139919 + ae * C139646 * C139835 +
                                    C139646 * (ae * C139835 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139907))))) /
        C139335;
    const double C140651 = C140650 + C140643;
    const double C33023 =
        (3 * (C140545 + C140549 + C140549 + C139761 * C140697) + C140693 +
         C140693 +
         C139761 * (2 * C140697 + C140694 + C140694 +
                    C139761 * (C140687 + C140695 + C140695 +
                               C139761 * (2 * ae * C139804 * C139792 +
                                          C139761 * C139804 *
                                              (C139718 * C139719 +
                                               C139869 * bs[7] *
                                                   std::pow(C139652, 7)) *
                                              C139653)))) /
        C139335;
    const double C34927 =
        (2 * C140526 + ae * C140514 + C139761 * C140674 + C140693 +
         C139804 *
             (C140649 +
              C139804 * (2 * C140672 + ae * C140660 +
                         C139761 * (C139937 + ae * C139761 * C139835 +
                                    C139761 * (ae * C139835 +
                                               C139761 * std::pow(C139652, 7) *
                                                   bs[7] * C139928))))) /
        C139335;
    const double C140985 = C140984 + C140973;
    const double C58431 =
        (3 * (C140757 + C140763 + C140763 + C139804 * C140910) + C140921 +
         C140921 +
         C139804 * (2 * C140910 + C140918 + C140918 +
                    C139804 * (C140901 + C140914 + C140914 +
                               C139804 * (2 * ae * C140903 +
                                          C139804 * C139761 *
                                              (C139718 * C139719 +
                                               C139943 * bs[7] *
                                                   std::pow(C139652, 7)) *
                                              C139653)))) /
        C139335;
    const double C58435 = C43032 * C57943;
    const double C61836 = C58593 * C57943;
    const double C139322 = C107067 * C57943;
    const double C23200 = C23197 + C23181;
    const double C72819 = C72816 + C72800;
    const double C98555 = C98553 + C98548;
    const double C24192 = C24189 + C24173;
    const double C80787 = C80785 + C80780;
    const double C73797 = C73794 + C73778;
    const double C40148 = C21821 * C27140;
    const double C129164 = C71446 * C27140;
    const double C32360 = C32356 + C32357;
    const double C32470 = C32468 + C32469;
    const double C39816 = C39809 + C26824;
    const double C32952 = C32940 + C32941;
    const double C33098 = C33096 + C33097;
    const double C38997 = C38993 + C38994;
    const double C39465 = C39455 + C39456;
    const double C128844 = C128837 + C76355;
    const double C128059 = C128055 + C128056;
    const double C128517 = C128507 + C128508;
    const double C45634 = C45631 + C45615;
    const double C109553 = C109550 + C109534;
    const double C55926 = C55923 + C55912;
    const double C136842 = C136839 + C136828;
    const double C63421 = C63419 + C63420;
    const double C63475 = C63473 + C63474;
    const double C25755 = C25752 + C22920;
    const double C26085 = C25834 * C275;
    const double C26091 = C26086 * C141353;
    const double C50097 = C50094 + C44791;
    const double C50265 = C50255 * C141327;
    const double C50264 = C50254 * C188;
    const double C22669 = C21822 * C2961;
    const double C22665 = C21822 * C822;
    const double C22659 = C21822 * C2960;
    const double C22655 = C21822 * C823;
    const double C25578 = C21822 * C9667;
    const double C26364 = C21822 * C3490;
    const double C26360 = C21822 * C10470;
    const double C44656 = C21822 * C5326;
    const double C44652 = C21822 * C1600;
    const double C44646 = C21822 * C5325;
    const double C44642 = C21822 * C1601;
    const double C47294 = C21822 * C13205;
    const double C49999 = C21822 * C21035;
    const double C115507 = C21822 * C3491;
    const double C64460 = C63609 * C822;
    const double C64451 = C63609 * C823;
    const double C67343 = C63609 * C2960;
    const double C68090 = C63609 * C3490;
    const double C91079 = C63609 * C1600;
    const double C91073 = C63609 * C1601;
    const double C96327 = C63609 * C5325;
    const double C64462 = C63611 * C821;
    const double C64453 = C63611 * C822;
    const double C67341 = C63611 * C2961;
    const double C68088 = C63611 * C3491;
    const double C91081 = C63611 * C1599;
    const double C91075 = C63611 * C1600;
    const double C96325 = C63611 * C5326;
    const double C6731 = C6719 + C5883;
    const double C6728 = C6710 + C5878;
    const double C9688 = C9681 + C6718;
    const double C10491 = C10484 + C7814;
    const double C15742 = C15730 + C7818;
    const double C15739 = C15724 + C7817;
    const double C21056 = C21049 + C13215;
    const double C6732 = C6721 + C5882;
    const double C6729 = C6712 + C5879;
    const double C9687 = C9679 + C6717;
    const double C10490 = C10482 + C7813;
    const double C15743 = C15732 + C7819;
    const double C15740 = C15726 + C7816;
    const double C21055 = C21047 + C13216;
    const double C72306 = C72294 + C71459;
    const double C72304 = C72290 + C71461;
    const double C72302 = C72284 + C71456;
    const double C72300 = C72280 + C71454;
    const double C75175 = C75169 + C72289;
    const double C75920 = C75913 + C73357;
    const double C75918 = C75909 + C73355;
    const double C80225 = C80221 + C73362;
    const double C81469 = C81459 + C73360;
    const double C81467 = C81455 + C73359;
    const double C84840 = C84836 + C78603;
    const double C88388 = C88381 + C78601;
    const double C108667 = C108661 + C81463;
    const double C113856 = C113851 + C88383;
    const double C30312 = C30306 * C141353;
    const double C30311 = C30305 * C141353;
    const double C35755 = C30305 * C141479;
    const double C124967 = C30305 * C89302;
    const double C30310 = C30304 * C141353;
    const double C35752 = C30304 * C141479;
    const double C51446 = C30304 * C42873;
    const double C124965 = C30304 * C89302;
    const double C132528 = C30304 * C141508;
    const double C30309 = C30303 * C141353;
    const double C38601 = C30303 * C141479;
    const double C127663 = C30303 * C89302;
    const double C30308 = C30302 * C141353;
    const double C35750 = C30302 * C141479;
    const double C54265 = C30302 * C42873;
    const double C124963 = C30302 * C89302;
    const double C135225 = C30302 * C141508;
    const double C30307 = C30301 * C141353;
    const double C35748 = C30301 * C141479;
    const double C51443 = C30301 * C42873;
    const double C124961 = C30301 * C89302;
    const double C132525 = C30301 * C141508;
    const double C32190 = C32189 * C141353;
    const double C32724 = C32721 * C141353;
    const double C35749 = C32721 * C141365;
    const double C39344 = C32721 * C141479;
    const double C51444 = C32721 * C42874;
    const double C55014 = C32721 * C42873;
    const double C124962 = C32721 * C141365;
    const double C128404 = C32721 * C89302;
    const double C132526 = C32721 * C141505;
    const double C135971 = C32721 * C141508;
    const double C32723 = C32720 * C141353;
    const double C35751 = C32720 * C141365;
    const double C39341 = C32720 * C141479;
    const double C54264 = C32720 * C42874;
    const double C124964 = C32720 * C141365;
    const double C128402 = C32720 * C89302;
    const double C135224 = C32720 * C141505;
    const double C32722 = C32719 * C141353;
    const double C38600 = C32719 * C141365;
    const double C127662 = C32719 * C141365;
    const double C35765 = C35763 * C141365;
    const double C124968 = C35763 * C141365;
    const double C35764 = C35762 * C141365;
    const double C51447 = C35762 * C42874;
    const double C124966 = C35762 * C141365;
    const double C132529 = C35762 * C141505;
    const double C39352 = C39350 * C141365;
    const double C51445 = C39350 * C42875;
    const double C55013 = C39350 * C42874;
    const double C128403 = C39350 * C141365;
    const double C132527 = C39350 * C106914;
    const double C135970 = C39350 * C141505;
    const double C39351 = C39349 * C141365;
    const double C54263 = C39349 * C42875;
    const double C128401 = C39349 * C141365;
    const double C135223 = C39349 * C106914;
    const double C51453 = C51452 * C42875;
    const double C132530 = C51452 * C106914;
    const double C55018 = C55017 * C42875;
    const double C135969 = C55017 * C106914;
    const double C71826 = C71804 * C110;
    const double C71811 = C71804 * C109;
    const double C72804 = C71804 * C822;
    const double C73782 = C71804 * C1600;
    const double C126289 = C71804 * C1601;
    const double C128833 = C71804 * C3490;
    const double C131440 = C71804 * C5325;
    const double C71823 = C71805 * C821;
    const double C71814 = C71805 * C822;
    const double C72801 = C71805 * C2961;
    const double C73779 = C71805 * C3491;
    const double C126291 = C71805 * C3490;
    const double C128835 = C71805 * C10470;
    const double C131438 = C71805 * C13205;
    const double C63999 = C63989 + C63990;
    const double C63996 = C63980 + C63981;
    const double C63994 = C63974 + C63975;
    const double C64970 = C64960 + C64961;
    const double C64968 = C64954 + C64955;
    const double C65958 = C65948 + C65949;
    const double C65956 = C65942 + C65943;
    const double C80784 = C80781 + C68522;
    const double C82076 = C82070 + C71069;
    const double C82073 = C82063 + C65952;
    const double C85401 = C85393 + C68520;
    const double C88818 = C88811 + C71067;
    const double C136408 = C136402 + C85397;
    const double C139012 = C139006 + C88813;
    const double C22223 = C22217 + C22200;
    const double C22220 = C22214 + C22191;
    const double C23201 = C23198 + C23184;
    const double C24193 = C24190 + C24176;
    const double C37230 = C37227 + C37220;
    const double C39821 = C39818 + C39808;
    const double C42478 = C42475 + C42465;
    const double C107600 = C107578 * C110;
    const double C107585 = C107578 * C109;
    const double C108545 = C107578 * C822;
    const double C109538 = C107578 * C1600;
    const double C133354 = C107578 * C823;
    const double C135857 = C107578 * C2960;
    const double C136831 = C107578 * C3490;
    const double C107597 = C107579 * C1599;
    const double C107588 = C107579 * C1600;
    const double C108542 = C107579 * C3491;
    const double C109535 = C107579 * C5326;
    const double C133356 = C107579 * C3490;
    const double C135855 = C107579 * C10470;
    const double C136829 = C107579 * C13205;
    const double C90006 = C89996 + C89997;
    const double C90003 = C89987 + C89988;
    const double C90001 = C89981 + C89982;
    const double C90966 = C90956 + C90957;
    const double C90964 = C90950 + C90951;
    const double C92025 = C92015 + C92016;
    const double C92023 = C92009 + C92010;
    const double C99110 = C99104 + C93584;
    const double C99107 = C99097 + C90960;
    const double C100320 = C100317 + C94481;
    const double C102406 = C102399 + C93582;
    const double C103608 = C103601 + C94479;
    const double C128298 = C128293 + C102401;
    const double C129273 = C129268 + C103603;
    const double C43587 = C43581 + C43564;
    const double C43584 = C43578 + C43555;
    const double C44542 = C44539 + C44525;
    const double C45635 = C45632 + C45618;
    const double C52303 = C52300 + C52293;
    const double C54911 = C54908 + C54898;
    const double C55927 = C55924 + C55914;
    const double C932 = C920 + C921;
    const double C6001 = C5985 + C5986;
    const double C63742 = C63726 + C63727;
    const double C7129 = C7116 + C7117;
    const double C64852 = C64839 + C64840;
    const double C1804 = C1792 + C1793;
    const double C14113 = C14097 + C14098;
    const double C89490 = C89474 + C89475;
    const double C16485 = C16478 + C16479;
    const double C91801 = C91794 + C91795;
    const double C6987 = C1026 * C5865;
    const double C64718 = C1026 * C63606;
    const double C6739 = C6733 + C5881;
    const double C64480 = C64474 + C63622;
    const double C15876 = C1710 * C5865;
    const double C91215 = C1710 * C63606;
    const double C15750 = C15744 + C7820;
    const double C91099 = C91093 + C65519;
    const double C139758 = ae * C139757;
    const double C119 = (4 * C139712 + C139646 * C139757 +
                         (3 * C139697 + C139646 * C139740) * ae) /
                        C139330;
    const double C829 = (C139761 * C139757) / C139330;
    const double C1607 = (C139804 * C139757) / C139330;
    const double C140652 = ae * C140651;
    const double C32240 = (4 * C140485 + C139761 * C140651 +
                           (3 * C140476 + C139761 * C140641) * ae) /
                          C139330;
    const double C32790 = (C139804 * C140651) / C139330;
    const double C140986 = ae * C140985;
    const double C63195 = (4 * C140852 + C139804 * C140985 +
                           (3 * C140846 + C139804 * C140970) * ae) /
                          C139330;
    const double C40151 = C40147 + C40148;
    const double C129167 = C129163 + C129164;
    const double C39819 = C39816 + C26824;
    const double C39702 = C32952 * C21821;
    const double C128734 = C32952 * C71446;
    const double C128847 = C128844 + C76355;
    const double C26094 = C26085 + C26091;
    const double C50270 = C50264 + C50265;
    const double C22681 = C22669 + C21834;
    const double C22679 = C22665 + C21836;
    const double C22677 = C22659 + C21831;
    const double C22675 = C22655 + C21829;
    const double C25584 = C25578 + C22664;
    const double C26371 = C26364 + C23746;
    const double C26369 = C26360 + C23744;
    const double C44668 = C44656 + C42878;
    const double C44666 = C44652 + C23749;
    const double C44664 = C44646 + C29094;
    const double C44662 = C44642 + C23748;
    const double C47300 = C47294 + C29096;
    const double C50004 = C49999 + C44651;
    const double C115511 = C115507 + C23751;
    const double C64472 = C64460 + C63624;
    const double C64469 = C64451 + C63619;
    const double C67350 = C67343 + C64459;
    const double C68097 = C68090 + C65513;
    const double C91091 = C91079 + C65517;
    const double C91088 = C91073 + C65516;
    const double C96334 = C96327 + C70765;
    const double C64473 = C64462 + C63623;
    const double C64470 = C64453 + C63620;
    const double C67349 = C67341 + C64458;
    const double C68096 = C68088 + C65512;
    const double C91092 = C91081 + C65518;
    const double C91089 = C91075 + C65515;
    const double C96333 = C96325 + C70766;
    const double C6737 = C6731 + C5883;
    const double C6734 = C6728 + C5878;
    const double C9691 = C9688 + C6718;
    const double C10494 = C10491 + C7814;
    const double C15748 = C15742 + C7818;
    const double C15745 = C15739 + C7817;
    const double C21059 = C21056 + C13215;
    const double C6738 = C6732 + C5882;
    const double C6735 = C6729 + C5879;
    const double C9690 = C9687 + C6717;
    const double C10493 = C10490 + C7813;
    const double C15749 = C15743 + C7819;
    const double C15746 = C15740 + C7816;
    const double C21058 = C21055 + C13216;
    const double C72314 = C72306 + C71459;
    const double C72312 = C72304 + C71461;
    const double C72310 = C72302 + C71456;
    const double C72308 = C72300 + C71454;
    const double C75177 = C75175 + C72289;
    const double C75924 = C75920 + C73357;
    const double C75922 = C75918 + C73355;
    const double C80227 = C80225 + C73362;
    const double C81473 = C81469 + C73360;
    const double C81471 = C81467 + C73359;
    const double C84842 = C84840 + C78603;
    const double C88390 = C88388 + C78601;
    const double C108669 = C108667 + C81463;
    const double C113858 = C113856 + C88383;
    const double C38599 = C35750 + C35751;
    const double C127661 = C124963 + C124964;
    const double C71837 = C71826 + C71827;
    const double C71832 = C71811 + C71812;
    const double C72815 = C72804 + C72805;
    const double C73793 = C73782 + C73783;
    const double C126295 = C126289 + C73787;
    const double C128842 = C128833 + C76353;
    const double C131447 = C131440 + C78903;
    const double C71836 = C71823 + C71824;
    const double C71833 = C71814 + C71815;
    const double C72814 = C72801 + C72802;
    const double C73792 = C73779 + C73780;
    const double C126296 = C126291 + C73786;
    const double C128843 = C128835 + C76354;
    const double C131446 = C131438 + C78904;
    const double C64005 = C63999 + C63990;
    const double C64002 = C63996 + C63981;
    const double C64000 = C63994 + C63975;
    const double C64974 = C64970 + C64961;
    const double C64972 = C64968 + C64955;
    const double C65962 = C65958 + C65949;
    const double C65960 = C65956 + C65943;
    const double C80786 = C80784 + C68522;
    const double C82080 = C82076 + C71069;
    const double C82077 = C82073 + C65952;
    const double C85403 = C85401 + C68520;
    const double C88820 = C88818 + C71067;
    const double C136410 = C136408 + C85397;
    const double C139014 = C139012 + C88813;
    const double C107611 = C107600 + C107601;
    const double C107606 = C107585 + C107586;
    const double C108556 = C108545 + C108546;
    const double C109549 = C109538 + C109539;
    const double C133360 = C133354 + C108550;
    const double C135864 = C135857 + C111104;
    const double C136838 = C136831 + C112004;
    const double C107610 = C107597 + C107598;
    const double C107607 = C107588 + C107589;
    const double C108555 = C108542 + C108543;
    const double C109548 = C109535 + C109536;
    const double C133361 = C133356 + C108549;
    const double C135863 = C135855 + C111105;
    const double C136837 = C136829 + C112005;
    const double C90012 = C90006 + C89997;
    const double C90009 = C90003 + C89988;
    const double C90007 = C90001 + C89982;
    const double C90970 = C90966 + C90957;
    const double C90968 = C90964 + C90951;
    const double C92029 = C92025 + C92016;
    const double C92027 = C92023 + C92010;
    const double C99114 = C99110 + C93584;
    const double C99111 = C99107 + C90960;
    const double C100322 = C100320 + C94481;
    const double C102408 = C102406 + C93582;
    const double C103610 = C103608 + C94479;
    const double C128300 = C128298 + C102401;
    const double C129275 = C129273 + C103603;
    const double C6745 = C6739 + C6724;
    const double C64486 = C64480 + C64465;
    const double C15756 = C15750 + C15735;
    const double C91105 = C91099 + C91084;
    const double C125 =
        (4 * (2 * C139706 + C139710 + C139710 + C139646 * C139749) + C139758 +
         C139758 +
         C139646 *
             (3 * C139749 + C139755 + C139755 +
              C139646 * (2 * C139745 + C139751 + C139751 +
                         C139646 * (C139738 + C139744 + C139744 +
                                    C139646 * (2 * ae * C139731 +
                                               C139646 *
                                                   (C139718 * C139719 +
                                                    C139650 * bs[7] *
                                                        std::pow(C139652, 7)) *
                                                   C139653))))) /
        C139335;
    const double C918 =
        (C139758 +
         C139761 *
             (3 * C139800 + ae * C139801 +
              C139646 * (2 * C139796 + ae * C139797 +
                         C139646 * (C139790 + ae * C139646 * C139792 +
                                    C139646 * (ae * C139792 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139765))))) /
        C139335;
    const double C1101 =
        (C139758 +
         C139761 *
             (3 * C139865 + ae * C139801 +
              C139646 * (2 * C139863 + ae * C139797 +
                         C139646 * (C139861 + ae * C139646 * C139792 +
                                    C139646 * (ae * C139792 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139849))))) /
        C139335;
    const double C1790 =
        (C139758 +
         C139804 *
             (3 * C139843 + ae * C139844 +
              C139646 * (2 * C139839 + ae * C139840 +
                         C139646 * (C139833 + ae * C139646 * C139835 +
                                    C139646 * (ae * C139835 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139808))))) /
        C139335;
    const double C2127 =
        (C139758 +
         C139804 *
             (3 * C139923 + ae * C139844 +
              C139646 * (2 * C139921 + ae * C139840 +
                         C139646 * (C139919 + ae * C139646 * C139835 +
                                    C139646 * (ae * C139835 +
                                               C139646 * std::pow(C139652, 7) *
                                                   bs[7] * C139907))))) /
        C139335;
    const double C138 = C107 * C119;
    const double C843 = C107 * C829;
    const double C5892 = C5873 * C829;
    const double C63633 = C63614 * C829;
    const double C1621 = C107 * C1607;
    const double C13930 = C5873 * C1607;
    const double C89307 = C63614 * C1607;
    const double C32411 =
        (4 * (2 * C140473 + C140483 + C140483 + C139761 * C140639) + C140652 +
         C140652 +
         C139761 *
             (3 * C140639 + C140649 + C140649 +
              C139761 * (2 * C140630 + C140645 + C140645 +
                         C139761 * (C139884 + C140638 + C140638 +
                                    C139761 * (2 * ae * C139792 +
                                               C139761 *
                                                   (C139718 * C139719 +
                                                    C139869 * bs[7] *
                                                        std::pow(C139652, 7)) *
                                                   C139653))))) /
        C139335;
    const double C33246 =
        (C140652 +
         C139804 *
             (3 * C140674 + ae * C140665 +
              C139761 * (2 * C140672 + ae * C140660 +
                         C139761 * (C139937 + ae * C139761 * C139835 +
                                    C139761 * (ae * C139835 +
                                               C139761 * std::pow(C139652, 7) *
                                                   bs[7] * C139928))))) /
        C139335;
    const double C32416 = C29841 * C32240;
    const double C33028 = C29841 * C32790;
    const double C38917 = C21920 * C32790;
    const double C127979 = C71545 * C32790;
    const double C63525 =
        (4 * (2 * C140843 + C140850 + C140850 + C139804 * C140975) + C140986 +
         C140986 +
         C139804 *
             (3 * C140975 + C140983 + C140983 +
              C139804 * (2 * C140967 + C140979 + C140979 +
                         C139804 * (C139958 + C140974 + C140974 +
                                    C139804 * (2 * ae * C139835 +
                                               C139804 *
                                                   (C139718 * C139719 +
                                                    C139943 * bs[7] *
                                                        std::pow(C139652, 7)) *
                                                   C139653))))) /
        C139335;
    const double C63530 = C58593 * C63195;
    const double C39822 = C39819 + C39810;
    const double C128850 = C128847 + C128838;
    const double C22689 = C22681 + C21834;
    const double C22687 = C22679 + C21836;
    const double C22685 = C22677 + C21831;
    const double C22683 = C22675 + C21829;
    const double C25586 = C25584 + C22664;
    const double C26375 = C26371 + C23746;
    const double C26373 = C26369 + C23744;
    const double C44676 = C44668 + C42878;
    const double C44674 = C44666 + C23749;
    const double C44672 = C44664 + C29094;
    const double C44670 = C44662 + C23748;
    const double C47302 = C47300 + C29096;
    const double C50006 = C50004 + C44651;
    const double C115513 = C115511 + C23751;
    const double C64478 = C64472 + C63624;
    const double C64475 = C64469 + C63619;
    const double C67353 = C67350 + C64459;
    const double C68100 = C68097 + C65513;
    const double C91097 = C91091 + C65517;
    const double C91094 = C91088 + C65516;
    const double C96337 = C96334 + C70765;
    const double C64479 = C64473 + C63623;
    const double C64476 = C64470 + C63620;
    const double C67352 = C67349 + C64458;
    const double C68099 = C68096 + C65512;
    const double C91098 = C91092 + C65518;
    const double C91095 = C91089 + C65515;
    const double C96336 = C96333 + C70766;
    const double C6743 = C6737 + C6720;
    const double C6740 = C6734 + C6711;
    const double C9694 = C9691 + C9682;
    const double C10497 = C10494 + C10485;
    const double C15754 = C15748 + C15731;
    const double C15751 = C15745 + C15725;
    const double C21062 = C21059 + C21050;
    const double C6744 = C6738 + C6722;
    const double C6741 = C6735 + C6713;
    const double C9693 = C9690 + C9680;
    const double C10496 = C10493 + C10483;
    const double C15755 = C15749 + C15733;
    const double C15752 = C15746 + C15727;
    const double C21061 = C21058 + C21048;
    const double C72322 = C72314 + C72295;
    const double C72320 = C72312 + C72291;
    const double C72318 = C72310 + C72285;
    const double C72316 = C72308 + C72281;
    const double C75179 = C75177 + C75170;
    const double C75928 = C75924 + C75914;
    const double C75926 = C75922 + C75910;
    const double C80229 = C80227 + C80222;
    const double C81477 = C81473 + C81460;
    const double C81475 = C81471 + C81456;
    const double C84844 = C84842 + C84837;
    const double C88392 = C88390 + C88382;
    const double C108671 = C108669 + C108662;
    const double C113860 = C113858 + C113852;
    const double C71843 = C71837 + C71827;
    const double C71838 = C71832 + C71812;
    const double C72818 = C72815 + C72805;
    const double C73796 = C73793 + C73783;
    const double C126298 = C126295 + C73787;
    const double C128845 = C128842 + C76353;
    const double C131450 = C131447 + C78903;
    const double C71842 = C71836 + C71824;
    const double C71839 = C71833 + C71815;
    const double C72817 = C72814 + C72802;
    const double C73795 = C73792 + C73780;
    const double C126299 = C126296 + C73786;
    const double C128846 = C128843 + C76354;
    const double C131449 = C131446 + C78904;
    const double C64011 = C64005 + C63991;
    const double C64008 = C64002 + C63982;
    const double C64006 = C64000 + C63976;
    const double C64978 = C64974 + C64962;
    const double C64976 = C64972 + C64956;
    const double C65966 = C65962 + C65950;
    const double C65964 = C65960 + C65944;
    const double C80788 = C80786 + C80782;
    const double C82084 = C82080 + C82071;
    const double C82081 = C82077 + C82064;
    const double C85405 = C85403 + C85394;
    const double C88822 = C88820 + C88812;
    const double C136412 = C136410 + C136403;
    const double C139016 = C139014 + C139007;
    const double C107617 = C107611 + C107601;
    const double C107612 = C107606 + C107586;
    const double C108559 = C108556 + C108546;
    const double C109552 = C109549 + C109539;
    const double C133363 = C133360 + C108550;
    const double C135867 = C135864 + C111104;
    const double C136841 = C136838 + C112004;
    const double C107616 = C107610 + C107598;
    const double C107613 = C107607 + C107589;
    const double C108558 = C108555 + C108543;
    const double C109551 = C109548 + C109536;
    const double C133364 = C133361 + C108549;
    const double C135866 = C135863 + C111105;
    const double C136840 = C136837 + C112005;
    const double C90018 = C90012 + C89998;
    const double C90015 = C90009 + C89989;
    const double C90013 = C90007 + C89983;
    const double C90974 = C90970 + C90958;
    const double C90972 = C90968 + C90952;
    const double C92033 = C92029 + C92017;
    const double C92031 = C92027 + C92011;
    const double C99118 = C99114 + C99105;
    const double C99115 = C99111 + C99098;
    const double C100324 = C100322 + C100318;
    const double C102410 = C102408 + C102400;
    const double C103612 = C103610 + C103602;
    const double C128302 = C128300 + C128294;
    const double C129277 = C129275 + C129269;
    const double C22697 = C22689 + C22670;
    const double C22695 = C22687 + C22666;
    const double C22693 = C22685 + C22660;
    const double C22691 = C22683 + C22656;
    const double C25588 = C25586 + C25579;
    const double C26379 = C26375 + C26365;
    const double C26377 = C26373 + C26361;
    const double C44684 = C44676 + C44657;
    const double C44682 = C44674 + C44653;
    const double C44680 = C44672 + C44647;
    const double C44678 = C44670 + C44643;
    const double C47304 = C47302 + C47295;
    const double C50008 = C50006 + C50000;
    const double C115515 = C115513 + C115508;
    const double C64484 = C64478 + C64461;
    const double C64481 = C64475 + C64452;
    const double C67356 = C67353 + C67344;
    const double C68103 = C68100 + C68091;
    const double C91103 = C91097 + C91080;
    const double C91100 = C91094 + C91074;
    const double C96340 = C96337 + C96328;
    const double C64485 = C64479 + C64463;
    const double C64482 = C64476 + C64454;
    const double C67355 = C67352 + C67342;
    const double C68102 = C68099 + C68089;
    const double C91104 = C91098 + C91082;
    const double C91101 = C91095 + C91076;
    const double C96339 = C96336 + C96326;
    const double C75166 = C72318 + C72319;
    const double C84838 = C75927 + C75928;
    const double C84833 = C75928 + C75927;
    const double C113848 = C88392 + C88391;
    const double C71849 = C71843 + C71828;
    const double C71844 = C71838 + C71813;
    const double C72821 = C72818 + C72806;
    const double C73799 = C73796 + C73784;
    const double C126301 = C126298 + C126290;
    const double C128848 = C128845 + C128834;
    const double C131453 = C131450 + C131441;
    const double C71848 = C71842 + C71825;
    const double C71845 = C71839 + C71816;
    const double C72820 = C72817 + C72803;
    const double C73798 = C73795 + C73781;
    const double C126302 = C126299 + C126292;
    const double C128849 = C128846 + C128836;
    const double C131452 = C131449 + C131439;
    const double C64012 = C64008 + C64009;
    const double C82072 = C65965 + C65966;
    const double C82067 = C65966 + C65965;
    const double C139003 = C88822 + C88821;
    const double C107623 = C107617 + C107602;
    const double C107618 = C107612 + C107587;
    const double C108562 = C108559 + C108547;
    const double C109555 = C109552 + C109540;
    const double C133366 = C133363 + C133355;
    const double C135870 = C135867 + C135858;
    const double C136844 = C136841 + C136832;
    const double C107622 = C107616 + C107599;
    const double C107619 = C107613 + C107590;
    const double C108561 = C108558 + C108544;
    const double C109554 = C109551 + C109537;
    const double C133367 = C133364 + C133357;
    const double C135869 = C135866 + C135856;
    const double C136843 = C136840 + C136830;
    const double C90019 = C90015 + C90016;
    const double C99106 = C90973 + C90974;
    const double C99101 = C90974 + C90973;
    const double C128290 = C102410 + C102409;
    const double C25575 = C22693 + C22694;
    const double C119928 = C26378 + C26379;
    const double C119927 = C26379 + C26378;
    const double C49996 = C44680 + C44681;
    const double C75173 = C75166 * C141353;
    const double C139010 = C139003 * C141219;
    const double C90020 = C90019 * C141327;
    const double C25582 = C25575 * C141353;
    d2eexx[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C63609 * C108 + C63616 + C63616 + C141506 * C120 +
                     C63611 * C109 + C63617 + C63617 + C141492 * C121 +
                     C63613 * C110 + C63618 + C63618 + C63606 * C122) *
                        C141353 * C63607 +
                    (C63609 * C823 + C63619 + C63619 + C141506 * C833 +
                     C63611 * C822 + C63620 + C63620 + C141492 * C832 +
                     C63613 * C821 + C63621 + C63621 + C63606 * C831) *
                        C141353 * C141341) *
                       C141298 * C141281 * C97 -
                   ((C63613 * C820 + C63622 + C63622 + C63606 * C830 +
                     C63611 * C821 + C63623 + C63623 + C141492 * C831 +
                     C63609 * C822 + C63624 + C63624 + C141506 * C832) *
                        C141353 * C141341 +
                    (C63613 * C111 + C63625 + C63625 + C63606 * C123 +
                     C63611 * C110 + C63626 + C63626 + C141492 * C122 +
                     C63609 * C109 + C63627 + C63627 + C141506 * C121) *
                        C141353 * C63607) *
                       C141298 * C141281 * C98 +
                   ((C63609 * C110 + C63628 + C63628 + C141506 * C122 +
                     C63611 * C111 + C63629 + C63629 + C141492 * C123 +
                     C63613 * C112 + C63630 + C63630 + C63606 * C124) *
                        C141353 * C63607 +
                    (C63609 * C821 + C63631 + C63631 + C141506 * C831 +
                     C63611 * C820 + C63632 + C63632 + C141492 * C830 +
                     C63613 * C824 + C63633 + C63633 + C63606 * C834) *
                        C141353 * C141341) *
                       C141298 * C141281 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
               C63610 +
           (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
               C141506 +
           (C63734 + C63735) * C63612 + (C63736 + C63737) * C141492 +
           C63746 * C63614 + C63747 * C63606) *
              C141353 * C141298 * C141281 * C97 -
          ((C63742 + C63743) * C63606 + (C63744 + C63745) * C63614 +
           (C63741 + C63740) * C141492 + (C63739 + C63738) * C63612 +
           (C63737 + C63736) * C141506 + (C63735 + C63734) * C63610) *
              C141353 * C141298 * C141281 * C98 +
          (C63746 * C63610 + C63747 * C141506 + (C63745 + C63744) * C63612 +
           (C63743 + C63742) * C141492 +
           (C63707 * C112 + C63607 * C193 + C63708 * C824 + C141341 * C913) *
               C63614 +
           (C63707 * C118 + C63607 * C199 + C63708 * C829 + C141341 * C918) *
               C63606) *
              C141353 * C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C63610 +
            (C275 * C114 + C141353 * C282) * C141506 + C305 * C63612 +
            C306 * C141492 + C307 * C63614 + C308 * C63606) *
               C63607 +
           (C6988 * C63610 + C6989 * C141506 + C1031 * C63612 +
            C1030 * C141492 + C1029 * C63614 + C1028 * C63606) *
               C141341) *
              C141298 * C141281 * C97 -
          ((C1026 * C63606 + C1027 * C63614 + C1028 * C141492 + C1029 * C63612 +
            C1030 * C141506 + C1031 * C63610) *
               C141341 +
           (C310 * C63606 + C309 * C63614 + C308 * C141492 + C307 * C63612 +
            C306 * C141506 + C305 * C63610) *
               C63607) *
              C141298 * C141281 * C98 +
          ((C307 * C63610 + C308 * C141506 + C309 * C63612 + C310 * C141492 +
            C312 * C63614 + C311 * C63606) *
               C63607 +
           (C1029 * C63610 + C1028 * C141506 + C1027 * C63612 +
            C1026 * C141492 + (C275 * C824 + C141353 * C1007) * C63614 +
            (C275 * C829 + C141353 * C1012) * C63606) *
               C141341) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                     C141492 * C115 + C63614 * C110 + C63606 * C116) *
                        C63707 +
                    (C63610 * C189 + C141506 * C362 + C63612 * C190 +
                     C141492 * C363 + C63614 * C191 + C63606 * C364) *
                        C63607 +
                    (C63610 * C823 + C141506 * C828 + C63612 * C822 +
                     C141492 * C827 + C63614 * C821 + C63606 * C826) *
                        C63708 +
                    (C63610 * C912 + C141506 * C1100 + C63612 * C911 +
                     C141492 * C1099 + C63614 * C910 + C63606 * C1098) *
                        C141341) *
                       C141353 * C141298 * C141281 * C97 -
                   ((C63614 * C909 + C63606 * C1097 + C63612 * C910 +
                     C141492 * C1098 + C63610 * C911 + C141506 * C1099) *
                        C141341 +
                    (C63614 * C820 + C63606 * C825 + C63612 * C821 +
                     C141492 * C826 + C63610 * C822 + C141506 * C827) *
                        C63708 +
                    (C63614 * C192 + C63606 * C365 + C63612 * C191 +
                     C141492 * C364 + C63610 * C190 + C141506 * C363) *
                        C63607 +
                    (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                     C141492 * C116 + C63610 * C109 + C141506 * C115) *
                        C63707) *
                       C141353 * C141298 * C141281 * C98 +
                   ((C63610 * C110 + C141506 * C116 + C63612 * C111 +
                     C141492 * C117 + C63614 * C112 + C63606 * C118) *
                        C63707 +
                    (C63610 * C191 + C141506 * C364 + C63612 * C192 +
                     C141492 * C365 + C63614 * C193 + C63606 * C366) *
                        C63607 +
                    (C63610 * C821 + C141506 * C826 + C63612 * C820 +
                     C141492 * C825 + C63614 * C824 + C63606 * C829) *
                        C63708 +
                    (C63610 * C910 + C141506 * C1098 + C63612 * C909 +
                     C141492 * C1097 + C63614 * C913 + C63606 * C1101) *
                        C141341) *
                       C141353 * C141298 * C141281 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C63969 * C108 + C63972 + C63972 + C63607 * C419 +
                     C63970 * C823 + C63973 + C63973 + C141341 * C1171) *
                        C141506 +
                    (C64006 + C64007) * C141492 + C64012 * C63606) *
                       C141353 * C141298 * C141281 * C97 -
                   ((C64010 + C64011) * C63606 + (C64009 + C64008) * C141492 +
                    (C64007 + C64006) * C141506) *
                       C141353 * C141298 * C141281 * C98 +
                   (C64012 * C141506 + (C64011 + C64010) * C141492 +
                    (C63969 * C112 + C63992 + C63992 + C63607 * C423 +
                     C63970 * C824 + C63993 + C63993 + C141341 * C1172) *
                        C63606) *
                       C141353 * C141298 * C141281 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C63707 +
            (C275 * C189 + C141353 * C501) * C63607 + C6988 * C63708 +
            C7366 * C141341) *
               C141506 +
           (C64087 + C64088 + C64089 + C64090) * C141492 + C64101 * C63606) *
              C141298 * C141281 * C97 -
          ((C64095 + C64096 + C64097 + C64098) * C63606 +
           (C64094 + C64093 + C64092 + C64091) * C141492 +
           (C64090 + C64089 + C64088 + C64087) * C141506) *
              C141298 * C141281 * C98 +
          (C64101 * C141506 + (C64098 + C64097 + C64096 + C64095) * C141492 +
           (C312 * C63707 + C523 * C63607 +
            (C275 * C824 + C141353 * C1007) * C63708 +
            (C275 * C913 + C141353 * C1263) * C141341) *
               C63606) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezx[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                      C141492 * C115 + C63614 * C110 + C63606 * C116) *
                         C275 +
                     (C63610 * C276 + C141506 * C579 + C63612 * C277 +
                      C141492 * C580 + C63614 * C278 + C63606 * C581) *
                         C141353) *
                        C63607 +
                    ((C63610 * C823 + C141506 * C828 + C63612 * C822 +
                      C141492 * C827 + C63614 * C821 + C63606 * C826) *
                         C275 +
                     (C63610 * C1006 + C141506 * C1348 + C63612 * C1005 +
                      C141492 * C1347 + C63614 * C1004 + C63606 * C1346) *
                         C141353) *
                        C141341) *
                       C141298 * C141281 * C97 -
                   (((C63614 * C1003 + C63606 * C1345 + C63612 * C1004 +
                      C141492 * C1346 + C63610 * C1005 + C141506 * C1347) *
                         C141353 +
                     (C63614 * C820 + C63606 * C825 + C63612 * C821 +
                      C141492 * C826 + C63610 * C822 + C141506 * C827) *
                         C275) *
                        C141341 +
                    ((C63614 * C279 + C63606 * C582 + C63612 * C278 +
                      C141492 * C581 + C63610 * C277 + C141506 * C580) *
                         C141353 +
                     (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                      C141492 * C116 + C63610 * C109 + C141506 * C115) *
                         C275) *
                        C63607) *
                       C141298 * C141281 * C98 +
                   (((C63610 * C110 + C141506 * C116 + C63612 * C111 +
                      C141492 * C117 + C63614 * C112 + C63606 * C118) *
                         C275 +
                     (C63610 * C278 + C141506 * C581 + C63612 * C279 +
                      C141492 * C582 + C63614 * C280 + C63606 * C583) *
                         C141353) *
                        C63607 +
                    ((C63610 * C821 + C141506 * C826 + C63612 * C820 +
                      C141492 * C825 + C63614 * C824 + C63606 * C829) *
                         C275 +
                     (C63610 * C1004 + C141506 * C1346 + C63612 * C1003 +
                      C141492 * C1345 + C63614 * C1007 + C63606 * C1349) *
                         C141353) *
                        C141341) *
                       C141298 * C141281 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C275 +
            (C63707 * C276 + C63607 * C635 + C63708 * C1006 + C141341 * C1419) *
                C141353) *
               C141506 +
           ((C63734 + C63735) * C275 + (C64263 + C64264) * C141353) * C141492 +
           C64271 * C63606) *
              C141298 * C141281 * C97 -
          (((C64267 + C64268) * C141353 + (C63744 + C63745) * C275) * C63606 +
           ((C64266 + C64265) * C141353 + (C63739 + C63738) * C275) * C141492 +
           ((C64264 + C64263) * C141353 + (C63735 + C63734) * C275) * C141506) *
              C141298 * C141281 * C98 +
          (C64271 * C141506 +
           ((C63745 + C63744) * C275 + (C64268 + C64267) * C141353) * C141492 +
           ((C63707 * C112 + C63607 * C193 + C63708 * C824 + C141341 * C913) *
                C275 +
            (C63707 * C280 + C63607 * C639 + C63708 * C1007 + C141341 * C1420) *
                C141353) *
               C63606) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C63607 +
            C7709 * C141341) *
               C141506 +
           (C64346 + C64347) * C141492 + C64352 * C63606) *
              C141298 * C141281 * C97 -
          ((C64350 + C64351) * C63606 + (C64349 + C64348) * C141492 +
           (C64347 + C64346) * C141506) *
              C141298 * C141281 * C98 +
          (C64352 * C141506 + (C64351 + C64350) * C141492 +
           (C746 * C63607 +
            (C713 * C824 + C1518 + C1518 + C141353 * C1506) * C141341) *
               C63606) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexx[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63609 * C108 + C63616 + C63616 + C141506 * C120 +
                      C63611 * C109 + C63617 + C63617 + C141492 * C121 +
                      C63613 * C110 + C63618 + C63618 + C63606 * C122) *
                         C141353 * C63607 +
                     (C64481 + C64482 + C64483) * C141353 * C141341) *
                        C141298 * C816 -
                    ((C63613 * C2962 + C64457 + C64457 + C63606 * C2970 +
                      C63611 * C2961 + C64458 + C64458 + C141492 * C2969 +
                      C63609 * C2960 + C64459 + C64459 + C141506 * C2968) *
                         C141353 * C141341 +
                     (C64483 + C64482 + C64481) * C141353 * C63607) *
                        C141298 * C141497) *
                       C818 +
                   (((C64484 + C64485 + C64486) * C141353 * C63607 +
                     (C63609 * C2961 + C64466 + C64466 + C141506 * C2969 +
                      C63611 * C2962 + C64467 + C64467 + C141492 * C2970 +
                      C63613 * C2963 + C64468 + C64468 + C63606 * C2971) *
                         C141353 * C141341) *
                        C141298 * C141497 -
                    ((C64486 + C64485 + C64484) * C141353 * C141341 +
                     (C63613 * C111 + C63625 + C63625 + C63606 * C123 +
                      C63611 * C110 + C63626 + C63626 + C141492 * C122 +
                      C63609 * C109 + C63627 + C63627 + C141506 * C121) *
                         C141353 * C63607) *
                        C141298 * C816) *
                       C141495)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C63610 +
            (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                C141506 +
            (C63734 + C63735) * C63612 + (C63736 + C63737) * C141492 +
            C63746 * C63614 + C63747 * C63606) *
               C141353 * C141298 * C816 -
           ((C64601 + C64602) * C63606 + (C64603 + C64604) * C63614 +
            (C64605 + C64606) * C141492 + (C64607 + C64608) * C63612 +
            (C63708 * C2964 + C141341 * C3030 + C63707 * C828 + C63607 * C917) *
                C141506 +
            (C63708 * C2960 + C141341 * C3026 + C63707 * C823 + C63607 * C912) *
                C63610) *
               C141353 * C141298 * C141497) *
              C818 +
          (((C64608 + C64607) * C63610 + (C64606 + C64605) * C141506 +
            (C64604 + C64603) * C63612 + (C64602 + C64601) * C141492 +
            (C63707 * C820 + C63607 * C909 + C63708 * C2963 + C141341 * C3029) *
                C63614 +
            (C63707 * C825 + C63607 * C914 + C63708 * C2967 + C141341 * C3033) *
                C63606) *
               C141353 * C141298 * C141497 -
           ((C63742 + C63743) * C63606 + (C63744 + C63745) * C63614 +
            (C63741 + C63740) * C141492 + (C63739 + C63738) * C63612 +
            (C63737 + C63736) * C141506 + (C63735 + C63734) * C63610) *
               C141353 * C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C63610 +
             (C275 * C114 + C141353 * C282) * C141506 + C305 * C63612 +
             C306 * C141492 + C307 * C63614 + C308 * C63606) *
                C63607 +
            (C64707 + C64708 + C64709 + C64710 + C64711 + C64712) * C141341) *
               C141298 * C816 -
           ((C6990 * C63606 + C6991 * C63614 + C6992 * C141492 +
             C6993 * C63612 + C9863 * C141506 + C9864 * C63610) *
                C141341 +
            (C64712 + C64711 + C64710 + C64709 + C64708 + C64707) * C63607) *
               C141298 * C141497) *
              C818 +
          (((C64713 + C64714 + C64715 + C64716 + C64717 + C64718) * C63607 +
            (C6993 * C63610 + C6992 * C141506 + C6991 * C63612 +
             C6990 * C141492 + (C275 * C2963 + C141353 * C3087) * C63614 +
             (C275 * C2967 + C141353 * C3091) * C63606) *
                C141341) *
               C141298 * C141497 -
           ((C64718 + C64717 + C64716 + C64715 + C64714 + C64713) * C141341 +
            (C310 * C63606 + C309 * C63614 + C308 * C141492 + C307 * C63612 +
             C306 * C141506 + C305 * C63610) *
                C63607) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                      C141492 * C115 + C63614 * C110 + C63606 * C116) *
                         C63707 +
                     (C63610 * C189 + C141506 * C362 + C63612 * C190 +
                      C141492 * C363 + C63614 * C191 + C63606 * C364) *
                         C63607 +
                     (C64841 + C64842 + C64843) * C63708 +
                     (C64844 + C64845 + C64846) * C141341) *
                        C141353 * C141298 * C816 -
                    ((C63614 * C3028 + C63606 * C3144 + C63612 * C3027 +
                      C141492 * C3143 + C63610 * C3026 + C141506 * C3142) *
                         C141341 +
                     (C63614 * C2962 + C63606 * C2966 + C63612 * C2961 +
                      C141492 * C2965 + C63610 * C2960 + C141506 * C2964) *
                         C63708 +
                     (C64846 + C64845 + C64844) * C63607 +
                     (C64843 + C64842 + C64841) * C63707) *
                        C141353 * C141298 * C141497) *
                       C818 +
                   (((C64847 + C64848 + C64849) * C63707 +
                     (C64850 + C64851 + C64852) * C63607 +
                     (C63610 * C2961 + C141506 * C2965 + C63612 * C2962 +
                      C141492 * C2966 + C63614 * C2963 + C63606 * C2967) *
                         C63708 +
                     (C63610 * C3027 + C141506 * C3143 + C63612 * C3028 +
                      C141492 * C3144 + C63614 * C3029 + C63606 * C3145) *
                         C141341) *
                        C141353 * C141298 * C141497 -
                    ((C64852 + C64851 + C64850) * C141341 +
                     (C64849 + C64848 + C64847) * C63708 +
                     (C63614 * C192 + C63606 * C365 + C63612 * C191 +
                      C141492 * C364 + C63610 * C190 + C141506 * C363) *
                         C63607 +
                     (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                      C141492 * C116 + C63610 * C109 + C141506 * C115) *
                         C63707) *
                        C141353 * C141298 * C816) *
                       C141495)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63969 * C108 + C63972 + C63972 + C63607 * C419 +
                      C63970 * C823 + C63973 + C63973 + C141341 * C1171) *
                         C141506 +
                     (C64006 + C64007) * C141492 + C64012 * C63606) *
                        C141353 * C141298 * C816 -
                    ((C64975 + C64976) * C63606 + (C64977 + C64978) * C141492 +
                     (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
                      C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                         C141506) *
                        C141353 * C141298 * C141497) *
                       C818 +
                   (((C64978 + C64977) * C141506 + (C64976 + C64975) * C141492 +
                     (C63969 * C820 + C64965 + C64965 + C63607 * C1168 +
                      C63970 * C2963 + C64966 + C64966 + C141341 * C3199) *
                         C63606) *
                        C141353 * C141298 * C141497 -
                    ((C64010 + C64011) * C63606 + (C64009 + C64008) * C141492 +
                     (C64007 + C64006) * C141506) *
                        C141353 * C141298 * C816) *
                       C141495)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C63707 +
             (C275 * C189 + C141353 * C501) * C63607 + C6988 * C63708 +
             C7366 * C141341) *
                C141506 +
            (C64087 + C64088 + C64089 + C64090) * C141492 + C64101 * C63606) *
               C141298 * C816 -
           ((C65077 + C65078 + C65079 + C65080) * C63606 +
            (C65081 + C65082 + C65083 + C65084) * C141492 +
            (C10124 * C141341 + C9864 * C63708 + C7366 * C63607 +
             C6988 * C63707) *
                C141506) *
               C141298 * C141497) *
              C818 +
          (((C65084 + C65083 + C65082 + C65081) * C141506 +
            (C65080 + C65079 + C65078 + C65077) * C141492 +
            (C1027 * C63707 + C1274 * C63607 +
             (C275 * C2963 + C141353 * C3087) * C63708 +
             (C275 * C3029 + C141353 * C3257) * C141341) *
                C63606) *
               C141298 * C141497 -
           ((C64095 + C64096 + C64097 + C64098) * C63606 +
            (C64094 + C64093 + C64092 + C64091) * C141492 +
            (C64090 + C64089 + C64088 + C64087) * C141506) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                       C141492 * C115 + C63614 * C110 + C63606 * C116) *
                          C275 +
                      (C63610 * C276 + C141506 * C579 + C63612 * C277 +
                       C141492 * C580 + C63614 * C278 + C63606 * C581) *
                          C141353) *
                         C63607 +
                     ((C64841 + C64842 + C64843) * C275 +
                      (C65195 + C65196 + C65197) * C141353) *
                         C141341) *
                        C141298 * C816 -
                    (((C63614 * C3086 + C63606 * C3310 + C63612 * C3085 +
                       C141492 * C3309 + C63610 * C3084 + C141506 * C3308) *
                          C141353 +
                      (C63614 * C2962 + C63606 * C2966 + C63612 * C2961 +
                       C141492 * C2965 + C63610 * C2960 + C141506 * C2964) *
                          C275) *
                         C141341 +
                     ((C65197 + C65196 + C65195) * C141353 +
                      (C64843 + C64842 + C64841) * C275) *
                         C63607) *
                        C141298 * C141497) *
                       C818 +
                   ((((C64847 + C64848 + C64849) * C275 +
                      (C65198 + C65199 + C65200) * C141353) *
                         C63607 +
                     ((C63610 * C2961 + C141506 * C2965 + C63612 * C2962 +
                       C141492 * C2966 + C63614 * C2963 + C63606 * C2967) *
                          C275 +
                      (C63610 * C3085 + C141506 * C3309 + C63612 * C3086 +
                       C141492 * C3310 + C63614 * C3087 + C63606 * C3311) *
                          C141353) *
                         C141341) *
                        C141298 * C141497 -
                    (((C65200 + C65199 + C65198) * C141353 +
                      (C64849 + C64848 + C64847) * C275) *
                         C141341 +
                     ((C63614 * C279 + C63606 * C582 + C63612 * C278 +
                       C141492 * C581 + C63610 * C277 + C141506 * C580) *
                          C141353 +
                      (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                       C141492 * C116 + C63610 * C109 + C141506 * C115) *
                          C275) *
                         C63607) *
                        C141298 * C816) *
                       C141495)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C275 +
             (C63707 * C276 + C63607 * C635 + C63708 * C1006 +
              C141341 * C1419) *
                 C141353) *
                C141506 +
            ((C63734 + C63735) * C275 + (C64263 + C64264) * C141353) * C141492 +
            C64271 * C63606) *
               C141298 * C816 -
           (((C65307 + C65308) * C141353 + (C64603 + C64604) * C275) * C63606 +
            ((C65309 + C65310) * C141353 + (C64607 + C64608) * C275) * C141492 +
            ((C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
              C63607 * C1419) *
                 C141353 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C275) *
                C141506) *
               C141298 * C141497) *
              C818 +
          ((((C64608 + C64607) * C275 + (C65310 + C65309) * C141353) * C141506 +
            ((C64604 + C64603) * C275 + (C65308 + C65307) * C141353) * C141492 +
            ((C63707 * C820 + C63607 * C909 + C63708 * C2963 +
              C141341 * C3029) *
                 C275 +
             (C63707 * C1003 + C63607 * C1416 + C63708 * C3087 +
              C141341 * C3365) *
                 C141353) *
                C63606) *
               C141298 * C141497 -
           (((C64267 + C64268) * C141353 + (C63744 + C63745) * C275) * C63606 +
            ((C64266 + C64265) * C141353 + (C63739 + C63738) * C275) * C141492 +
            ((C64264 + C64263) * C141353 + (C63735 + C63734) * C275) *
                C141506) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C63607 +
             C7709 * C141341) *
                C141506 +
            (C64346 + C64347) * C141492 + C64352 * C63606) *
               C141298 * C816 -
           ((C65409 + C65410) * C63606 + (C65411 + C65412) * C141492 +
            (C10372 * C141341 + C7709 * C63607) * C141506) *
               C141298 * C141497) *
              C818 +
          (((C65412 + C65411) * C141506 + (C65410 + C65409) * C141492 +
            (C1525 * C63607 +
             (C713 * C2963 + C3424 + C3424 + C141353 * C3419) * C141341) *
                C63606) *
               C141298 * C141497 -
           ((C64350 + C64351) * C63606 + (C64349 + C64348) * C141492 +
            (C64347 + C64346) * C141506) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[2] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63609 * C108 + C63616 + C63616 + C141506 * C120 +
                      C63611 * C109 + C63617 + C63617 + C141492 * C121 +
                      C63613 * C110 + C63618 + C63618 + C63606 * C122) *
                         C141353 * C63607 +
                     (C64481 + C64482 + C64483) * C141353 * C141341) *
                        C1596 -
                    ((C63613 * C3492 + C65511 + C65511 + C63606 * C3500 +
                      C63611 * C3491 + C65512 + C65512 + C141492 * C3499 +
                      C63609 * C3490 + C65513 + C65513 + C141506 * C3498) *
                         C141353 * C141341 +
                     (C63613 * C1599 + C65514 + C65514 + C63606 * C1609 +
                      C63611 * C1600 + C65515 + C65515 + C141492 * C1610 +
                      C63609 * C1601 + C65516 + C65516 + C141506 * C1611) *
                         C141353 * C63607) *
                        C141499) *
                       C141281 * C818 +
                   (((C63609 * C1600 + C65517 + C65517 + C141506 * C1610 +
                      C63611 * C1599 + C65518 + C65518 + C141492 * C1609 +
                      C63613 * C1598 + C65519 + C65519 + C63606 * C1608) *
                         C141353 * C63607 +
                     (C63609 * C3491 + C65520 + C65520 + C141506 * C3499 +
                      C63611 * C3492 + C65521 + C65521 + C141492 * C3500 +
                      C63613 * C3493 + C65522 + C65522 + C63606 * C3501) *
                         C141353 * C141341) *
                        C141499 -
                    ((C64486 + C64485 + C64484) * C141353 * C141341 +
                     (C63613 * C111 + C63625 + C63625 + C63606 * C123 +
                      C63611 * C110 + C63626 + C63626 + C141492 * C122 +
                      C63609 * C109 + C63627 + C63627 + C141506 * C121) *
                         C141353 * C63607) *
                        C1596) *
                       C141281 * C141495)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C63610 +
            (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                C141506 +
            (C63734 + C63735) * C63612 + (C63736 + C63737) * C141492 +
            C63746 * C63614 + C63747 * C63606) *
               C141353 * C1596 -
           ((C65637 + C65638) * C63606 + (C65639 + C65640) * C63614 +
            (C65641 + C65642) * C141492 + (C65643 + C65644) * C63612 +
            (C63708 * C3494 + C141341 * C3576 + C63707 * C1606 +
             C63607 * C1695) *
                C141506 +
            (C63708 * C3490 + C141341 * C3572 + C63707 * C1601 +
             C63607 * C1690) *
                C63610) *
               C141353 * C141499) *
              C141281 * C818 +
          (((C65644 + C65643) * C63610 + (C65642 + C65641) * C141506 +
            (C65640 + C65639) * C63612 + (C65638 + C65637) * C141492 +
            (C63707 * C1598 + C63607 * C1687 + C63708 * C3493 +
             C141341 * C3575) *
                C63614 +
            (C63707 * C1603 + C63607 * C1692 + C63708 * C3497 +
             C141341 * C3579) *
                C63606) *
               C141353 * C141499 -
           ((C63742 + C63743) * C63606 + (C63744 + C63745) * C63614 +
            (C63741 + C63740) * C141492 + (C63739 + C63738) * C63612 +
            (C63737 + C63736) * C141506 + (C63735 + C63734) * C63610) *
               C141353 * C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C63610 +
             (C275 * C114 + C141353 * C282) * C141506 + C305 * C63612 +
             C306 * C141492 + C307 * C63614 + C308 * C63606) *
                C63607 +
            (C64707 + C64708 + C64709 + C64710 + C64711 + C64712) * C141341) *
               C1596 -
           ((C8052 * C63606 + C8053 * C63614 + C8054 * C141492 +
             C8055 * C63612 + C10714 * C141506 + C10715 * C63610) *
                C141341 +
            (C1806 * C63606 + C1807 * C63614 + C1808 * C141492 +
             C1809 * C63612 + (C275 * C1606 + C141353 * C1789) * C141506 +
             (C275 * C1601 + C141353 * C1784) * C63610) *
                C63607) *
               C141499) *
              C141281 * C818 +
          (((C1809 * C63610 + C1808 * C141506 + C1807 * C63612 +
             C1806 * C141492 + C1805 * C63614 + C1804 * C63606) *
                C63607 +
            (C8055 * C63610 + C8054 * C141506 + C8053 * C63612 +
             C8052 * C141492 + (C275 * C3493 + C141353 * C3649) * C63614 +
             (C275 * C3497 + C141353 * C3653) * C63606) *
                C141341) *
               C141499 -
           ((C64718 + C64717 + C64716 + C64715 + C64714 + C64713) * C141341 +
            (C310 * C63606 + C309 * C63614 + C308 * C141492 + C307 * C63612 +
             C306 * C141506 + C305 * C63610) *
                C63607) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[2] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                      C141492 * C115 + C63614 * C110 + C63606 * C116) *
                         C63707 +
                     (C63610 * C189 + C141506 * C362 + C63612 * C190 +
                      C141492 * C363 + C63614 * C191 + C63606 * C364) *
                         C63607 +
                     (C64841 + C64842 + C64843) * C63708 +
                     (C64844 + C64845 + C64846) * C141341) *
                        C141353 * C1596 -
                    ((C63614 * C3574 + C63606 * C3722 + C63612 * C3573 +
                      C141492 * C3721 + C63610 * C3572 + C141506 * C3720) *
                         C141341 +
                     (C63614 * C3492 + C63606 * C3496 + C63612 * C3491 +
                      C141492 * C3495 + C63610 * C3490 + C141506 * C3494) *
                         C63708 +
                     (C63614 * C1688 + C63606 * C1876 + C63612 * C1689 +
                      C141492 * C1877 + C63610 * C1690 + C141506 * C1878) *
                         C63607 +
                     (C63614 * C1599 + C63606 * C1604 + C63612 * C1600 +
                      C141492 * C1605 + C63610 * C1601 + C141506 * C1606) *
                         C63707) *
                        C141353 * C141499) *
                       C141281 * C818 +
                   (((C63610 * C1600 + C141506 * C1605 + C63612 * C1599 +
                      C141492 * C1604 + C63614 * C1598 + C63606 * C1603) *
                         C63707 +
                     (C63610 * C1689 + C141506 * C1877 + C63612 * C1688 +
                      C141492 * C1876 + C63614 * C1687 + C63606 * C1875) *
                         C63607 +
                     (C63610 * C3491 + C141506 * C3495 + C63612 * C3492 +
                      C141492 * C3496 + C63614 * C3493 + C63606 * C3497) *
                         C63708 +
                     (C63610 * C3573 + C141506 * C3721 + C63612 * C3574 +
                      C141492 * C3722 + C63614 * C3575 + C63606 * C3723) *
                         C141341) *
                        C141353 * C141499 -
                    ((C64852 + C64851 + C64850) * C141341 +
                     (C64849 + C64848 + C64847) * C63708 +
                     (C63614 * C192 + C63606 * C365 + C63612 * C191 +
                      C141492 * C364 + C63610 * C190 + C141506 * C363) *
                         C63607 +
                     (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                      C141492 * C116 + C63610 * C109 + C141506 * C115) *
                         C63707) *
                        C141353 * C1596) *
                       C141281 * C141495)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[2] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63969 * C108 + C63972 + C63972 + C63607 * C419 +
                      C63970 * C823 + C63973 + C63973 + C141341 * C1171) *
                         C141506 +
                     (C64006 + C64007) * C141492 + C64012 * C63606) *
                        C141353 * C1596 -
                    ((C65963 + C65964) * C63606 + (C65965 + C65966) * C141492 +
                     (C63970 * C3490 + C65951 + C65951 + C141341 * C3790 +
                      C63969 * C1601 + C65952 + C65952 + C63607 * C1949) *
                         C141506) *
                        C141353 * C141499) *
                       C141281 * C818 +
                   (((C65966 + C65965) * C141506 + (C65964 + C65963) * C141492 +
                     (C63969 * C1598 + C65953 + C65953 + C63607 * C1946 +
                      C63970 * C3493 + C65954 + C65954 + C141341 * C3793) *
                         C63606) *
                        C141353 * C141499 -
                    ((C64010 + C64011) * C63606 + (C64009 + C64008) * C141492 +
                     (C64007 + C64006) * C141506) *
                        C141353 * C1596) *
                       C141281 * C141495)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C63707 +
             (C275 * C189 + C141353 * C501) * C63607 + C6988 * C63708 +
             C7366 * C141341) *
                C141506 +
            (C64087 + C64088 + C64089 + C64090) * C141492 + C64101 * C63606) *
               C1596 -
           ((C66065 + C66066 + C66067 + C66068) * C63606 +
            (C66069 + C66070 + C66071 + C66072) * C141492 +
            (C11047 * C141341 + C10715 * C63708 +
             (C275 * C1690 + C141353 * C2040) * C63607 +
             (C275 * C1601 + C141353 * C1784) * C63707) *
                C141506) *
               C141499) *
              C141281 * C818 +
          (((C66072 + C66071 + C66070 + C66069) * C141506 +
            (C66068 + C66067 + C66066 + C66065) * C141492 +
            (C1805 * C63707 + C2052 * C63607 +
             (C275 * C3493 + C141353 * C3649) * C63708 +
             (C275 * C3575 + C141353 * C3867) * C141341) *
                C63606) *
               C141499 -
           ((C64095 + C64096 + C64097 + C64098) * C63606 +
            (C64094 + C64093 + C64092 + C64091) * C141492 +
            (C64090 + C64089 + C64088 + C64087) * C141506) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[2] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                       C141492 * C115 + C63614 * C110 + C63606 * C116) *
                          C275 +
                      (C63610 * C276 + C141506 * C579 + C63612 * C277 +
                       C141492 * C580 + C63614 * C278 + C63606 * C581) *
                          C141353) *
                         C63607 +
                     ((C64841 + C64842 + C64843) * C275 +
                      (C65195 + C65196 + C65197) * C141353) *
                         C141341) *
                        C1596 -
                    (((C63614 * C3648 + C63606 * C3936 + C63612 * C3647 +
                       C141492 * C3935 + C63610 * C3646 + C141506 * C3934) *
                          C141353 +
                      (C63614 * C3492 + C63606 * C3496 + C63612 * C3491 +
                       C141492 * C3495 + C63610 * C3490 + C141506 * C3494) *
                          C275) *
                         C141341 +
                     ((C63614 * C1782 + C63606 * C2124 + C63612 * C1783 +
                       C141492 * C2125 + C63610 * C1784 + C141506 * C2126) *
                          C141353 +
                      (C63614 * C1599 + C63606 * C1604 + C63612 * C1600 +
                       C141492 * C1605 + C63610 * C1601 + C141506 * C1606) *
                          C275) *
                         C63607) *
                        C141499) *
                       C141281 * C818 +
                   ((((C63610 * C1600 + C141506 * C1605 + C63612 * C1599 +
                       C141492 * C1604 + C63614 * C1598 + C63606 * C1603) *
                          C275 +
                      (C63610 * C1783 + C141506 * C2125 + C63612 * C1782 +
                       C141492 * C2124 + C63614 * C1781 + C63606 * C2123) *
                          C141353) *
                         C63607 +
                     ((C63610 * C3491 + C141506 * C3495 + C63612 * C3492 +
                       C141492 * C3496 + C63614 * C3493 + C63606 * C3497) *
                          C275 +
                      (C63610 * C3647 + C141506 * C3935 + C63612 * C3648 +
                       C141492 * C3936 + C63614 * C3649 + C63606 * C3937) *
                          C141353) *
                         C141341) *
                        C141499 -
                    (((C65200 + C65199 + C65198) * C141353 +
                      (C64849 + C64848 + C64847) * C275) *
                         C141341 +
                     ((C63614 * C279 + C63606 * C582 + C63612 * C278 +
                       C141492 * C581 + C63610 * C277 + C141506 * C580) *
                          C141353 +
                      (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                       C141492 * C116 + C63610 * C109 + C141506 * C115) *
                          C275) *
                         C63607) *
                        C1596) *
                       C141281 * C141495)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C275 +
             (C63707 * C276 + C63607 * C635 + C63708 * C1006 +
              C141341 * C1419) *
                 C141353) *
                C141506 +
            ((C63734 + C63735) * C275 + (C64263 + C64264) * C141353) * C141492 +
            C64271 * C63606) *
               C1596 -
           (((C66277 + C66278) * C141353 + (C65639 + C65640) * C275) * C63606 +
            ((C66279 + C66280) * C141353 + (C65643 + C65644) * C275) * C141492 +
            ((C63708 * C3646 + C141341 * C4004 + C63707 * C1784 +
              C63607 * C2197) *
                 C141353 +
             (C63708 * C3490 + C141341 * C3572 + C63707 * C1601 +
              C63607 * C1690) *
                 C275) *
                C141506) *
               C141499) *
              C141281 * C818 +
          ((((C65644 + C65643) * C275 + (C66280 + C66279) * C141353) * C141506 +
            ((C65640 + C65639) * C275 + (C66278 + C66277) * C141353) * C141492 +
            ((C63707 * C1598 + C63607 * C1687 + C63708 * C3493 +
              C141341 * C3575) *
                 C275 +
             (C63707 * C1781 + C63607 * C2194 + C63708 * C3649 +
              C141341 * C4007) *
                 C141353) *
                C63606) *
               C141499 -
           (((C64267 + C64268) * C141353 + (C63744 + C63745) * C275) * C63606 +
            ((C64266 + C64265) * C141353 + (C63739 + C63738) * C275) * C141492 +
            ((C64264 + C64263) * C141353 + (C63735 + C63734) * C275) *
                C141506) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C63607 +
             C7709 * C141341) *
                C141506 +
            (C64346 + C64347) * C141492 + C64352 * C63606) *
               C1596 -
           ((C66379 + C66380) * C63606 + (C66381 + C66382) * C141492 +
            (C11367 * C141341 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C63607) *
                C141506) *
               C141499) *
              C141281 * C818 +
          (((C66382 + C66381) * C141506 + (C66380 + C66379) * C141492 +
            (C2303 * C63607 +
             (C713 * C3493 + C4082 + C4082 + C141353 * C4077) * C141341) *
                C63606) *
               C141499 -
           ((C64350 + C64351) * C63606 + (C64349 + C64348) * C141492 +
            (C64347 + C64346) * C141506) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63609 * C108 + C63616 + C63616 + C141506 * C120 +
                      C63611 * C109 + C63617 + C63617 + C141492 * C121 +
                      C63613 * C110 + C63618 + C63618 + C63606 * C122) *
                         C141353 * C63607 +
                     (C64481 + C64482 + C64483) * C141353 * C141341) *
                        C141298 * C2374 -
                    ((C63613 * C2962 + C64457 + C64457 + C63606 * C2970 +
                      C63611 * C2961 + C64458 + C64458 + C141492 * C2969 +
                      C63609 * C2960 + C64459 + C64459 + C141506 * C2968) *
                         C141353 * C141341 +
                     (C64483 + C64482 + C64481) * C141353 * C63607) *
                        C141298 * C141497) *
                       C2376 +
                   (((C64484 + C64485 + C64486) * C141353 * C63607 +
                     (C63609 * C2961 + C64466 + C64466 + C141506 * C2969 +
                      C63611 * C2962 + C64467 + C64467 + C141492 * C2970 +
                      C63613 * C2963 + C64468 + C64468 + C63606 * C2971) *
                         C141353 * C141341) *
                        C141298 * C141497 -
                    ((C64486 + C64485 + C64484) * C141353 * C141341 +
                     (C63613 * C111 + C63625 + C63625 + C63606 * C123 +
                      C63611 * C110 + C63626 + C63626 + C141492 * C122 +
                      C63609 * C109 + C63627 + C63627 + C141506 * C121) *
                         C141353 * C63607) *
                        C141298 * C2374) *
                       C141495)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C63610 +
            (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                C141506 +
            (C63734 + C63735) * C63612 + (C63736 + C63737) * C141492 +
            C63746 * C63614 + C63747 * C63606) *
               C141353 * C141298 * C2374 -
           ((C64601 + C64602) * C63606 + (C64603 + C64604) * C63614 +
            (C64605 + C64606) * C141492 + (C64607 + C64608) * C63612 +
            (C63708 * C2964 + C141341 * C3030 + C63707 * C828 + C63607 * C917) *
                C141506 +
            (C63708 * C2960 + C141341 * C3026 + C63707 * C823 + C63607 * C912) *
                C63610) *
               C141353 * C141298 * C141497) *
              C2376 +
          (((C64608 + C64607) * C63610 + (C64606 + C64605) * C141506 +
            (C64604 + C64603) * C63612 + (C64602 + C64601) * C141492 +
            (C63707 * C820 + C63607 * C909 + C63708 * C2963 + C141341 * C3029) *
                C63614 +
            (C63707 * C825 + C63607 * C914 + C63708 * C2967 + C141341 * C3033) *
                C63606) *
               C141353 * C141298 * C141497 -
           ((C63742 + C63743) * C63606 + (C63744 + C63745) * C63614 +
            (C63741 + C63740) * C141492 + (C63739 + C63738) * C63612 +
            (C63737 + C63736) * C141506 + (C63735 + C63734) * C63610) *
               C141353 * C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C63610 +
             (C275 * C114 + C141353 * C282) * C141506 + C305 * C63612 +
             C306 * C141492 + C307 * C63614 + C308 * C63606) *
                C63607 +
            (C64707 + C64708 + C64709 + C64710 + C64711 + C64712) * C141341) *
               C141298 * C2374 -
           ((C6990 * C63606 + C6991 * C63614 + C6992 * C141492 +
             C6993 * C63612 + C9863 * C141506 + C9864 * C63610) *
                C141341 +
            (C64712 + C64711 + C64710 + C64709 + C64708 + C64707) * C63607) *
               C141298 * C141497) *
              C2376 +
          (((C64713 + C64714 + C64715 + C64716 + C64717 + C64718) * C63607 +
            (C6993 * C63610 + C6992 * C141506 + C6991 * C63612 +
             C6990 * C141492 + (C275 * C2963 + C141353 * C3087) * C63614 +
             (C275 * C2967 + C141353 * C3091) * C63606) *
                C141341) *
               C141298 * C141497 -
           ((C64718 + C64717 + C64716 + C64715 + C64714 + C64713) * C141341 +
            (C310 * C63606 + C309 * C63614 + C308 * C141492 + C307 * C63612 +
             C306 * C141506 + C305 * C63610) *
                C63607) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                      C141492 * C115 + C63614 * C110 + C63606 * C116) *
                         C63707 +
                     (C63610 * C189 + C141506 * C362 + C63612 * C190 +
                      C141492 * C363 + C63614 * C191 + C63606 * C364) *
                         C63607 +
                     (C64841 + C64842 + C64843) * C63708 +
                     (C64844 + C64845 + C64846) * C141341) *
                        C141353 * C141298 * C2374 -
                    ((C63614 * C3028 + C63606 * C3144 + C63612 * C3027 +
                      C141492 * C3143 + C63610 * C3026 + C141506 * C3142) *
                         C141341 +
                     (C63614 * C2962 + C63606 * C2966 + C63612 * C2961 +
                      C141492 * C2965 + C63610 * C2960 + C141506 * C2964) *
                         C63708 +
                     (C64846 + C64845 + C64844) * C63607 +
                     (C64843 + C64842 + C64841) * C63707) *
                        C141353 * C141298 * C141497) *
                       C2376 +
                   (((C64847 + C64848 + C64849) * C63707 +
                     (C64850 + C64851 + C64852) * C63607 +
                     (C63610 * C2961 + C141506 * C2965 + C63612 * C2962 +
                      C141492 * C2966 + C63614 * C2963 + C63606 * C2967) *
                         C63708 +
                     (C63610 * C3027 + C141506 * C3143 + C63612 * C3028 +
                      C141492 * C3144 + C63614 * C3029 + C63606 * C3145) *
                         C141341) *
                        C141353 * C141298 * C141497 -
                    ((C64852 + C64851 + C64850) * C141341 +
                     (C64849 + C64848 + C64847) * C63708 +
                     (C63614 * C192 + C63606 * C365 + C63612 * C191 +
                      C141492 * C364 + C63610 * C190 + C141506 * C363) *
                         C63607 +
                     (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                      C141492 * C116 + C63610 * C109 + C141506 * C115) *
                         C63707) *
                        C141353 * C141298 * C2374) *
                       C141495)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63969 * C108 + C63972 + C63972 + C63607 * C419 +
                      C63970 * C823 + C63973 + C63973 + C141341 * C1171) *
                         C141506 +
                     (C64006 + C64007) * C141492 + C64012 * C63606) *
                        C141353 * C141298 * C2374 -
                    ((C64975 + C64976) * C63606 + (C64977 + C64978) * C141492 +
                     (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
                      C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                         C141506) *
                        C141353 * C141298 * C141497) *
                       C2376 +
                   (((C64978 + C64977) * C141506 + (C64976 + C64975) * C141492 +
                     (C63969 * C820 + C64965 + C64965 + C63607 * C1168 +
                      C63970 * C2963 + C64966 + C64966 + C141341 * C3199) *
                         C63606) *
                        C141353 * C141298 * C141497 -
                    ((C64010 + C64011) * C63606 + (C64009 + C64008) * C141492 +
                     (C64007 + C64006) * C141506) *
                        C141353 * C141298 * C2374) *
                       C141495)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C63707 +
             (C275 * C189 + C141353 * C501) * C63607 + C6988 * C63708 +
             C7366 * C141341) *
                C141506 +
            (C64087 + C64088 + C64089 + C64090) * C141492 + C64101 * C63606) *
               C141298 * C2374 -
           ((C65077 + C65078 + C65079 + C65080) * C63606 +
            (C65081 + C65082 + C65083 + C65084) * C141492 +
            (C10124 * C141341 + C9864 * C63708 + C7366 * C63607 +
             C6988 * C63707) *
                C141506) *
               C141298 * C141497) *
              C2376 +
          (((C65084 + C65083 + C65082 + C65081) * C141506 +
            (C65080 + C65079 + C65078 + C65077) * C141492 +
            (C1027 * C63707 + C1274 * C63607 +
             (C275 * C2963 + C141353 * C3087) * C63708 +
             (C275 * C3029 + C141353 * C3257) * C141341) *
                C63606) *
               C141298 * C141497 -
           ((C64095 + C64096 + C64097 + C64098) * C63606 +
            (C64094 + C64093 + C64092 + C64091) * C141492 +
            (C64090 + C64089 + C64088 + C64087) * C141506) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                       C141492 * C115 + C63614 * C110 + C63606 * C116) *
                          C275 +
                      (C63610 * C276 + C141506 * C579 + C63612 * C277 +
                       C141492 * C580 + C63614 * C278 + C63606 * C581) *
                          C141353) *
                         C63607 +
                     ((C64841 + C64842 + C64843) * C275 +
                      (C65195 + C65196 + C65197) * C141353) *
                         C141341) *
                        C141298 * C2374 -
                    (((C63614 * C3086 + C63606 * C3310 + C63612 * C3085 +
                       C141492 * C3309 + C63610 * C3084 + C141506 * C3308) *
                          C141353 +
                      (C63614 * C2962 + C63606 * C2966 + C63612 * C2961 +
                       C141492 * C2965 + C63610 * C2960 + C141506 * C2964) *
                          C275) *
                         C141341 +
                     ((C65197 + C65196 + C65195) * C141353 +
                      (C64843 + C64842 + C64841) * C275) *
                         C63607) *
                        C141298 * C141497) *
                       C2376 +
                   ((((C64847 + C64848 + C64849) * C275 +
                      (C65198 + C65199 + C65200) * C141353) *
                         C63607 +
                     ((C63610 * C2961 + C141506 * C2965 + C63612 * C2962 +
                       C141492 * C2966 + C63614 * C2963 + C63606 * C2967) *
                          C275 +
                      (C63610 * C3085 + C141506 * C3309 + C63612 * C3086 +
                       C141492 * C3310 + C63614 * C3087 + C63606 * C3311) *
                          C141353) *
                         C141341) *
                        C141298 * C141497 -
                    (((C65200 + C65199 + C65198) * C141353 +
                      (C64849 + C64848 + C64847) * C275) *
                         C141341 +
                     ((C63614 * C279 + C63606 * C582 + C63612 * C278 +
                       C141492 * C581 + C63610 * C277 + C141506 * C580) *
                          C141353 +
                      (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                       C141492 * C116 + C63610 * C109 + C141506 * C115) *
                          C275) *
                         C63607) *
                        C141298 * C2374) *
                       C141495)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C275 +
             (C63707 * C276 + C63607 * C635 + C63708 * C1006 +
              C141341 * C1419) *
                 C141353) *
                C141506 +
            ((C63734 + C63735) * C275 + (C64263 + C64264) * C141353) * C141492 +
            C64271 * C63606) *
               C141298 * C2374 -
           (((C65307 + C65308) * C141353 + (C64603 + C64604) * C275) * C63606 +
            ((C65309 + C65310) * C141353 + (C64607 + C64608) * C275) * C141492 +
            ((C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
              C63607 * C1419) *
                 C141353 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C275) *
                C141506) *
               C141298 * C141497) *
              C2376 +
          ((((C64608 + C64607) * C275 + (C65310 + C65309) * C141353) * C141506 +
            ((C64604 + C64603) * C275 + (C65308 + C65307) * C141353) * C141492 +
            ((C63707 * C820 + C63607 * C909 + C63708 * C2963 +
              C141341 * C3029) *
                 C275 +
             (C63707 * C1003 + C63607 * C1416 + C63708 * C3087 +
              C141341 * C3365) *
                 C141353) *
                C63606) *
               C141298 * C141497 -
           (((C64267 + C64268) * C141353 + (C63744 + C63745) * C275) * C63606 +
            ((C64266 + C64265) * C141353 + (C63739 + C63738) * C275) * C141492 +
            ((C64264 + C64263) * C141353 + (C63735 + C63734) * C275) *
                C141506) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C63607 +
             C7709 * C141341) *
                C141506 +
            (C64346 + C64347) * C141492 + C64352 * C63606) *
               C141298 * C2374 -
           ((C65409 + C65410) * C63606 + (C65411 + C65412) * C141492 +
            (C10372 * C141341 + C7709 * C63607) * C141506) *
               C141298 * C141497) *
              C2376 +
          (((C65412 + C65411) * C141506 + (C65410 + C65409) * C141492 +
            (C1525 * C63607 +
             (C713 * C2963 + C3424 + C3424 + C141353 * C3419) * C141341) *
                C63606) *
               C141298 * C141497 -
           ((C64350 + C64351) * C63606 + (C64349 + C64348) * C141492 +
            (C64347 + C64346) * C141506) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[4] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C63609 * C108 + C63616 + C63616 + C141506 * C120 +
                     C63611 * C109 + C63617 + C63617 + C141492 * C121 +
                     C63613 * C110 + C63618 + C63618 + C63606 * C122) *
                        C141353 * C63607 +
                    (C64481 + C64482 + C64483) * C141353 * C141341) *
                       C141298 * C2956 -
                   ((C67354 + C67355 + C67356) * C141353 * C141341 +
                    (C64483 + C64482 + C64481) * C141353 * C63607) *
                       C141298 * C2957 +
                   ((C67356 + C67355 + C67354) * C141353 * C63607 +
                    (C63609 * C9667 + C67345 + C67345 + C141506 * C9673 +
                     C63611 * C9668 + C67346 + C67346 + C141492 * C9674 +
                     C63613 * C9669 + C67347 + C67347 + C63606 * C9675) *
                        C141353 * C141341) *
                       C141298 * C2958) *
                  C141247) /
                 (p * q * std::sqrt(p + q));
    d2eexy[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
               C63610 +
           (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
               C141506 +
           (C63734 + C63735) * C63612 + (C63736 + C63737) * C141492 +
           C63746 * C63614 + C63747 * C63606) *
              C141353 * C141298 * C2956 -
          ((C64601 + C64602) * C63606 + (C64603 + C64604) * C63614 +
           (C64605 + C64606) * C141492 + (C64607 + C64608) * C63612 +
           (C63708 * C2964 + C141341 * C3030 + C63707 * C828 + C63607 * C917) *
               C141506 +
           (C63708 * C2960 + C141341 * C3026 + C63707 * C823 + C63607 * C912) *
               C63610) *
              C141353 * C141298 * C2957 +
          ((C63707 * C2960 + C63607 * C3026 + C63708 * C9667 +
            C141341 * C9768) *
               C63610 +
           (C63707 * C2964 + C63607 * C3030 + C63708 * C9670 +
            C141341 * C9771) *
               C141506 +
           (C63707 * C2961 + C63607 * C3027 + C63708 * C9668 +
            C141341 * C9769) *
               C63612 +
           (C63707 * C2965 + C63607 * C3031 + C63708 * C9671 +
            C141341 * C9772) *
               C141492 +
           (C63707 * C2962 + C63607 * C3028 + C63708 * C9669 +
            C141341 * C9770) *
               C63614 +
           (C63707 * C2966 + C63607 * C3032 + C63708 * C9672 +
            C141341 * C9773) *
               C63606) *
              C141353 * C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C63610 +
            (C275 * C114 + C141353 * C282) * C141506 + C305 * C63612 +
            C306 * C141492 + C307 * C63614 + C308 * C63606) *
               C63607 +
           (C64707 + C64708 + C64709 + C64710 + C64711 + C64712) * C141341) *
              C141298 * C2956 -
          ((C67505 + C67506 + C67507 + C67508 + C67509 + C67510) * C141341 +
           (C64712 + C64711 + C64710 + C64709 + C64708 + C64707) * C63607) *
              C141298 * C2957 +
          ((C67510 + C67509 + C67508 + C67507 + C67506 + C67505) * C63607 +
           (C25754 * C63610 + C25753 * C141506 + C22934 * C63612 +
            C22933 * C141492 + (C275 * C9669 + C141353 * C9850) * C63614 +
            (C275 * C9672 + C141353 * C9853) * C63606) *
               C141341) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[4] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                     C141492 * C115 + C63614 * C110 + C63606 * C116) *
                        C63707 +
                    (C63610 * C189 + C141506 * C362 + C63612 * C190 +
                     C141492 * C363 + C63614 * C191 + C63606 * C364) *
                        C63607 +
                    (C64841 + C64842 + C64843) * C63708 +
                    (C64844 + C64845 + C64846) * C141341) *
                       C141353 * C141298 * C2956 -
                   ((C67597 + C67598 + C67599) * C141341 +
                    (C67600 + C67601 + C67602) * C63708 +
                    (C64846 + C64845 + C64844) * C63607 +
                    (C64843 + C64842 + C64841) * C63707) *
                       C141353 * C141298 * C2957 +
                   ((C67602 + C67601 + C67600) * C63707 +
                    (C67599 + C67598 + C67597) * C63607 +
                    (C63610 * C9667 + C141506 * C9670 + C63612 * C9668 +
                     C141492 * C9671 + C63614 * C9669 + C63606 * C9672) *
                        C63708 +
                    (C63610 * C9768 + C141506 * C9940 + C63612 * C9769 +
                     C141492 * C9941 + C63614 * C9770 + C63606 * C9942) *
                        C141341) *
                       C141353 * C141298 * C2958) *
                  C141247) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[4] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C63969 * C108 + C63972 + C63972 + C63607 * C419 +
                     C63970 * C823 + C63973 + C63973 + C141341 * C1171) *
                        C141506 +
                    (C64006 + C64007) * C141492 + C64012 * C63606) *
                       C141353 * C141298 * C2956 -
                   ((C64975 + C64976) * C63606 + (C64977 + C64978) * C141492 +
                    (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
                     C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                        C141506) *
                       C141353 * C141298 * C2957 +
                   ((C63969 * C2960 + C67677 + C67677 + C63607 * C3196 +
                     C63970 * C9667 + C67678 + C67678 + C141341 * C10035) *
                        C141506 +
                    (C63969 * C2961 + C67679 + C67679 + C63607 * C3197 +
                     C63970 * C9668 + C67680 + C67680 + C141341 * C10036) *
                        C141492 +
                    (C63969 * C2962 + C67681 + C67681 + C63607 * C3198 +
                     C63970 * C9669 + C67682 + C67682 + C141341 * C10037) *
                        C63606) *
                       C141353 * C141298 * C2958) *
                  C141247) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C63707 +
            (C275 * C189 + C141353 * C501) * C63607 + C6988 * C63708 +
            C7366 * C141341) *
               C141506 +
           (C64087 + C64088 + C64089 + C64090) * C141492 + C64101 * C63606) *
              C141298 * C2956 -
          ((C65077 + C65078 + C65079 + C65080) * C63606 +
           (C65081 + C65082 + C65083 + C65084) * C141492 +
           (C10124 * C141341 + C9864 * C63708 + C7366 * C63607 +
            C6988 * C63707) *
               C141506) *
              C141298 * C2957 +
          ((C9864 * C63707 + C10124 * C63607 + C25754 * C63708 +
            C26008 * C141341) *
               C141506 +
           (C6993 * C63707 + C7368 * C63607 + C22934 * C63708 +
            C23308 * C141341) *
               C141492 +
           (C6991 * C63707 + C7367 * C63607 +
            (C275 * C9669 + C141353 * C9850) * C63708 +
            (C275 * C9770 + C141353 * C10120) * C141341) *
               C63606) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[4] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                      C141492 * C115 + C63614 * C110 + C63606 * C116) *
                         C275 +
                     (C63610 * C276 + C141506 * C579 + C63612 * C277 +
                      C141492 * C580 + C63614 * C278 + C63606 * C581) *
                         C141353) *
                        C63607 +
                    ((C64841 + C64842 + C64843) * C275 +
                     (C65195 + C65196 + C65197) * C141353) *
                        C141341) *
                       C141298 * C2956 -
                   (((C67837 + C67838 + C67839) * C141353 +
                     (C67600 + C67601 + C67602) * C275) *
                        C141341 +
                    ((C65197 + C65196 + C65195) * C141353 +
                     (C64843 + C64842 + C64841) * C275) *
                        C63607) *
                       C141298 * C2957 +
                   (((C67602 + C67601 + C67600) * C275 +
                     (C67839 + C67838 + C67837) * C141353) *
                        C63607 +
                    ((C63610 * C9667 + C141506 * C9670 + C63612 * C9668 +
                      C141492 * C9671 + C63614 * C9669 + C63606 * C9672) *
                         C275 +
                     (C63610 * C9848 + C141506 * C10198 + C63612 * C9849 +
                      C141492 * C10199 + C63614 * C9850 + C63606 * C10200) *
                         C141353) *
                        C141341) *
                       C141298 * C2958) *
                  C141247) /
                 (p * q * std::sqrt(p + q));
    d2eezy[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C275 +
            (C63707 * C276 + C63607 * C635 + C63708 * C1006 + C141341 * C1419) *
                C141353) *
               C141506 +
           ((C63734 + C63735) * C275 + (C64263 + C64264) * C141353) * C141492 +
           C64271 * C63606) *
              C141298 * C2956 -
          (((C65307 + C65308) * C141353 + (C64603 + C64604) * C275) * C63606 +
           ((C65309 + C65310) * C141353 + (C64607 + C64608) * C275) * C141492 +
           ((C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
             C63607 * C1419) *
                C141353 +
            (C63708 * C2960 + C141341 * C3026 + C63707 * C823 + C63607 * C912) *
                C275) *
               C141506) *
              C141298 * C2957 +
          (((C63707 * C2960 + C63607 * C3026 + C63708 * C9667 +
             C141341 * C9768) *
                C275 +
            (C63707 * C3084 + C63607 * C3362 + C63708 * C9848 +
             C141341 * C10284) *
                C141353) *
               C141506 +
           ((C63707 * C2961 + C63607 * C3027 + C63708 * C9668 +
             C141341 * C9769) *
                C275 +
            (C63707 * C3085 + C63607 * C3363 + C63708 * C9849 +
             C141341 * C10285) *
                C141353) *
               C141492 +
           ((C63707 * C2962 + C63607 * C3028 + C63708 * C9669 +
             C141341 * C9770) *
                C275 +
            (C63707 * C3086 + C63607 * C3364 + C63708 * C9850 +
             C141341 * C10286) *
                C141353) *
               C63606) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C63607 +
            C7709 * C141341) *
               C141506 +
           (C64346 + C64347) * C141492 + C64352 * C63606) *
              C141298 * C2956 -
          ((C65409 + C65410) * C63606 + (C65411 + C65412) * C141492 +
           (C10372 * C141341 + C7709 * C63607) * C141506) *
              C141298 * C2957 +
          ((C10372 * C63607 + C26253 * C141341) * C141506 +
           (C7711 * C63607 + C23643 * C141341) * C141492 +
           (C7710 * C63607 +
            (C713 * C9669 + C10369 + C10369 + C141353 * C10363) * C141341) *
               C63606) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63609 * C108 + C63616 + C63616 + C141506 * C120 +
                      C63611 * C109 + C63617 + C63617 + C141492 * C121 +
                      C63613 * C110 + C63618 + C63618 + C63606 * C122) *
                         C141353 * C63607 +
                     (C64481 + C64482 + C64483) * C141353 * C141341) *
                        C1596 -
                    ((C68101 + C68102 + C68103) * C141353 * C141341 +
                     (C63613 * C1599 + C65514 + C65514 + C63606 * C1609 +
                      C63611 * C1600 + C65515 + C65515 + C141492 * C1610 +
                      C63609 * C1601 + C65516 + C65516 + C141506 * C1611) *
                         C141353 * C63607) *
                        C141499) *
                       C2374 +
                   (((C68103 + C68102 + C68101) * C141353 * C63607 +
                     (C63609 * C10470 + C68092 + C68092 + C141506 * C10476 +
                      C63611 * C10471 + C68093 + C68093 + C141492 * C10477 +
                      C63613 * C10472 + C68094 + C68094 + C63606 * C10478) *
                         C141353 * C141341) *
                        C141499 -
                    ((C67354 + C67355 + C67356) * C141353 * C141341 +
                     (C64483 + C64482 + C64481) * C141353 * C63607) *
                        C1596) *
                       C141497) *
                  C141247) /
                 (p * q * std::sqrt(p + q));
    d2eexy[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C63610 +
            (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                C141506 +
            (C63734 + C63735) * C63612 + (C63736 + C63737) * C141492 +
            C63746 * C63614 + C63747 * C63606) *
               C141353 * C1596 -
           ((C65637 + C65638) * C63606 + (C65639 + C65640) * C63614 +
            (C65641 + C65642) * C141492 + (C65643 + C65644) * C63612 +
            (C63708 * C3494 + C141341 * C3576 + C63707 * C1606 +
             C63607 * C1695) *
                C141506 +
            (C63708 * C3490 + C141341 * C3572 + C63707 * C1601 +
             C63607 * C1690) *
                C63610) *
               C141353 * C141499) *
              C2374 +
          (((C63707 * C3490 + C63607 * C3572 + C63708 * C10470 +
             C141341 * C10595) *
                C63610 +
            (C63707 * C3494 + C63607 * C3576 + C63708 * C10473 +
             C141341 * C10598) *
                C141506 +
            (C63707 * C3491 + C63607 * C3573 + C63708 * C10471 +
             C141341 * C10596) *
                C63612 +
            (C63707 * C3495 + C63607 * C3577 + C63708 * C10474 +
             C141341 * C10599) *
                C141492 +
            (C63707 * C3492 + C63607 * C3574 + C63708 * C10472 +
             C141341 * C10597) *
                C63614 +
            (C63707 * C3496 + C63607 * C3578 + C63708 * C10475 +
             C141341 * C10600) *
                C63606) *
               C141353 * C141499 -
           ((C64601 + C64602) * C63606 + (C64603 + C64604) * C63614 +
            (C64605 + C64606) * C141492 + (C64607 + C64608) * C63612 +
            (C63708 * C2964 + C141341 * C3030 + C63707 * C828 + C63607 * C917) *
                C141506 +
            (C63708 * C2960 + C141341 * C3026 + C63707 * C823 + C63607 * C912) *
                C63610) *
               C141353 * C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C63610 +
             (C275 * C114 + C141353 * C282) * C141506 + C305 * C63612 +
             C306 * C141492 + C307 * C63614 + C308 * C63606) *
                C63607 +
            (C64707 + C64708 + C64709 + C64710 + C64711 + C64712) * C141341) *
               C1596 -
           ((C68300 + C68301 + C68302 + C68303 + C68304 + C68305) * C141341 +
            (C1806 * C63606 + C1807 * C63614 + C1808 * C141492 +
             C1809 * C63612 + (C275 * C1606 + C141353 * C1789) * C141506 +
             (C275 * C1601 + C141353 * C1784) * C63610) *
                C63607) *
               C141499) *
              C2374 +
          (((C68305 + C68304 + C68303 + C68302 + C68301 + C68300) * C63607 +
            (C26595 * C63610 + C26594 * C141506 + C23974 * C63612 +
             C23973 * C141492 + (C275 * C10472 + C141353 * C10701) * C63614 +
             (C275 * C10475 + C141353 * C10704) * C63606) *
                C141341) *
               C141499 -
           ((C67505 + C67506 + C67507 + C67508 + C67509 + C67510) * C141341 +
            (C64712 + C64711 + C64710 + C64709 + C64708 + C64707) * C63607) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                      C141492 * C115 + C63614 * C110 + C63606 * C116) *
                         C63707 +
                     (C63610 * C189 + C141506 * C362 + C63612 * C190 +
                      C141492 * C363 + C63614 * C191 + C63606 * C364) *
                         C63607 +
                     (C64841 + C64842 + C64843) * C63708 +
                     (C64844 + C64845 + C64846) * C141341) *
                        C141353 * C1596 -
                    ((C68416 + C68417 + C68418) * C141341 +
                     (C68419 + C68420 + C68421) * C63708 +
                     (C63614 * C1688 + C63606 * C1876 + C63612 * C1689 +
                      C141492 * C1877 + C63610 * C1690 + C141506 * C1878) *
                         C63607 +
                     (C63614 * C1599 + C63606 * C1604 + C63612 * C1600 +
                      C141492 * C1605 + C63610 * C1601 + C141506 * C1606) *
                         C63707) *
                        C141353 * C141499) *
                       C2374 +
                   (((C68421 + C68420 + C68419) * C63707 +
                     (C68418 + C68417 + C68416) * C63607 +
                     (C63610 * C10470 + C141506 * C10473 + C63612 * C10471 +
                      C141492 * C10474 + C63614 * C10472 + C63606 * C10475) *
                         C63708 +
                     (C63610 * C10595 + C141506 * C10815 + C63612 * C10596 +
                      C141492 * C10816 + C63614 * C10597 + C63606 * C10817) *
                         C141341) *
                        C141353 * C141499 -
                    ((C67597 + C67598 + C67599) * C141341 +
                     (C67600 + C67601 + C67602) * C63708 +
                     (C64846 + C64845 + C64844) * C63607 +
                     (C64843 + C64842 + C64841) * C63707) *
                        C141353 * C1596) *
                       C141497) *
                  C141247) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63969 * C108 + C63972 + C63972 + C63607 * C419 +
                      C63970 * C823 + C63973 + C63973 + C141341 * C1171) *
                         C141506 +
                     (C64006 + C64007) * C141492 + C64012 * C63606) *
                        C141353 * C1596 -
                    ((C65963 + C65964) * C63606 + (C65965 + C65966) * C141492 +
                     (C63970 * C3490 + C65951 + C65951 + C141341 * C3790 +
                      C63969 * C1601 + C65952 + C65952 + C63607 * C1949) *
                         C141506) *
                        C141353 * C141499) *
                       C2374 +
                   (((C63969 * C3490 + C68520 + C68520 + C63607 * C3790 +
                      C63970 * C10470 + C68521 + C68521 + C141341 * C10934) *
                         C141506 +
                     (C63969 * C3491 + C68522 + C68522 + C63607 * C3791 +
                      C63970 * C10471 + C68523 + C68523 + C141341 * C10935) *
                         C141492 +
                     (C63969 * C3492 + C68524 + C68524 + C63607 * C3792 +
                      C63970 * C10472 + C68525 + C68525 + C141341 * C10936) *
                         C63606) *
                        C141353 * C141499 -
                    ((C64975 + C64976) * C63606 + (C64977 + C64978) * C141492 +
                     (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
                      C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                         C141506) *
                        C141353 * C1596) *
                       C141497) *
                  C141247) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C63707 +
             (C275 * C189 + C141353 * C501) * C63607 + C6988 * C63708 +
             C7366 * C141341) *
                C141506 +
            (C64087 + C64088 + C64089 + C64090) * C141492 + C64101 * C63606) *
               C1596 -
           ((C66065 + C66066 + C66067 + C66068) * C63606 +
            (C66069 + C66070 + C66071 + C66072) * C141492 +
            (C11047 * C141341 + C10715 * C63708 +
             (C275 * C1690 + C141353 * C2040) * C63607 +
             (C275 * C1601 + C141353 * C1784) * C63707) *
                C141506) *
               C141499) *
              C2374 +
          (((C10715 * C63707 + C11047 * C63607 + C26595 * C63708 +
             C26930 * C141341) *
                C141506 +
            (C8055 * C63707 + C8389 * C63607 + C23974 * C63708 +
             C24300 * C141341) *
                C141492 +
            (C8053 * C63707 + C8388 * C63607 +
             (C275 * C10472 + C141353 * C10701) * C63708 +
             (C275 * C10597 + C141353 * C11043) * C141341) *
                C63606) *
               C141499 -
           ((C65077 + C65078 + C65079 + C65080) * C63606 +
            (C65081 + C65082 + C65083 + C65084) * C141492 +
            (C10124 * C141341 + C9864 * C63708 + C7366 * C63607 +
             C6988 * C63707) *
                C141506) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                       C141492 * C115 + C63614 * C110 + C63606 * C116) *
                          C275 +
                      (C63610 * C276 + C141506 * C579 + C63612 * C277 +
                       C141492 * C580 + C63614 * C278 + C63606 * C581) *
                          C141353) *
                         C63607 +
                     ((C64841 + C64842 + C64843) * C275 +
                      (C65195 + C65196 + C65197) * C141353) *
                         C141341) *
                        C1596 -
                    (((C68728 + C68729 + C68730) * C141353 +
                      (C68419 + C68420 + C68421) * C275) *
                         C141341 +
                     ((C63614 * C1782 + C63606 * C2124 + C63612 * C1783 +
                       C141492 * C2125 + C63610 * C1784 + C141506 * C2126) *
                          C141353 +
                      (C63614 * C1599 + C63606 * C1604 + C63612 * C1600 +
                       C141492 * C1605 + C63610 * C1601 + C141506 * C1606) *
                          C275) *
                         C63607) *
                        C141499) *
                       C2374 +
                   ((((C68421 + C68420 + C68419) * C275 +
                      (C68730 + C68729 + C68728) * C141353) *
                         C63607 +
                     ((C63610 * C10470 + C141506 * C10473 + C63612 * C10471 +
                       C141492 * C10474 + C63614 * C10472 + C63606 * C10475) *
                          C275 +
                      (C63610 * C10699 + C141506 * C11145 + C63612 * C10700 +
                       C141492 * C11146 + C63614 * C10701 + C63606 * C11147) *
                          C141353) *
                         C141341) *
                        C141499 -
                    (((C67837 + C67838 + C67839) * C141353 +
                      (C67600 + C67601 + C67602) * C275) *
                         C141341 +
                     ((C65197 + C65196 + C65195) * C141353 +
                      (C64843 + C64842 + C64841) * C275) *
                         C63607) *
                        C1596) *
                       C141497) *
                  C141247) /
                 (p * q * std::sqrt(p + q));
    d2eezy[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C275 +
             (C63707 * C276 + C63607 * C635 + C63708 * C1006 +
              C141341 * C1419) *
                 C141353) *
                C141506 +
            ((C63734 + C63735) * C275 + (C64263 + C64264) * C141353) * C141492 +
            C64271 * C63606) *
               C1596 -
           (((C66277 + C66278) * C141353 + (C65639 + C65640) * C275) * C63606 +
            ((C66279 + C66280) * C141353 + (C65643 + C65644) * C275) * C141492 +
            ((C63708 * C3646 + C141341 * C4004 + C63707 * C1784 +
              C63607 * C2197) *
                 C141353 +
             (C63708 * C3490 + C141341 * C3572 + C63707 * C1601 +
              C63607 * C1690) *
                 C275) *
                C141506) *
               C141499) *
              C2374 +
          ((((C63707 * C3490 + C63607 * C3572 + C63708 * C10470 +
              C141341 * C10595) *
                 C275 +
             (C63707 * C3646 + C63607 * C4004 + C63708 * C10699 +
              C141341 * C11255) *
                 C141353) *
                C141506 +
            ((C63707 * C3491 + C63607 * C3573 + C63708 * C10471 +
              C141341 * C10596) *
                 C275 +
             (C63707 * C3647 + C63607 * C4005 + C63708 * C10700 +
              C141341 * C11256) *
                 C141353) *
                C141492 +
            ((C63707 * C3492 + C63607 * C3574 + C63708 * C10472 +
              C141341 * C10597) *
                 C275 +
             (C63707 * C3648 + C63607 * C4006 + C63708 * C10701 +
              C141341 * C11257) *
                 C141353) *
                C63606) *
               C141499 -
           (((C65307 + C65308) * C141353 + (C64603 + C64604) * C275) * C63606 +
            ((C65309 + C65310) * C141353 + (C64607 + C64608) * C275) * C141492 +
            ((C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
              C63607 * C1419) *
                 C141353 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C275) *
                C141506) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C63607 +
             C7709 * C141341) *
                C141506 +
            (C64346 + C64347) * C141492 + C64352 * C63606) *
               C1596 -
           ((C66379 + C66380) * C63606 + (C66381 + C66382) * C141492 +
            (C11367 * C141341 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C63607) *
                C141506) *
               C141499) *
              C2374 +
          (((C11367 * C63607 + C27249 * C141341) * C141506 +
            (C8709 * C63607 + C24611 * C141341) * C141492 +
            (C8708 * C63607 +
             (C713 * C10472 + C11364 + C11364 + C141353 * C11358) * C141341) *
                C63606) *
               C141499 -
           ((C65409 + C65410) * C63606 + (C65411 + C65412) * C141492 +
            (C10372 * C141341 + C7709 * C63607) * C141506) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63609 * C108 + C63616 + C63616 + C141506 * C120 +
                      C63611 * C109 + C63617 + C63617 + C141492 * C121 +
                      C63613 * C110 + C63618 + C63618 + C63606 * C122) *
                         C141353 * C63607 +
                     (C64481 + C64482 + C64483) * C141353 * C141341) *
                        C4148 -
                    ((C68101 + C68102 + C68103) * C141353 * C141341 +
                     (C63613 * C1599 + C65514 + C65514 + C63606 * C1609 +
                      C63611 * C1600 + C65515 + C65515 + C141492 * C1610 +
                      C63609 * C1601 + C65516 + C65516 + C141506 * C1611) *
                         C141353 * C63607) *
                        C141499) *
                       C141281 * C2376 +
                   (((C63609 * C1600 + C65517 + C65517 + C141506 * C1610 +
                      C63611 * C1599 + C65518 + C65518 + C141492 * C1609 +
                      C63613 * C1598 + C65519 + C65519 + C63606 * C1608) *
                         C141353 * C63607 +
                     (C63609 * C3491 + C65520 + C65520 + C141506 * C3499 +
                      C63611 * C3492 + C65521 + C65521 + C141492 * C3500 +
                      C63613 * C3493 + C65522 + C65522 + C63606 * C3501) *
                         C141353 * C141341) *
                        C141499 -
                    ((C64486 + C64485 + C64484) * C141353 * C141341 +
                     (C63613 * C111 + C63625 + C63625 + C63606 * C123 +
                      C63611 * C110 + C63626 + C63626 + C141492 * C122 +
                      C63609 * C109 + C63627 + C63627 + C141506 * C121) *
                         C141353 * C63607) *
                        C4148) *
                       C141281 * C141495)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C63610 +
            (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                C141506 +
            (C63734 + C63735) * C63612 + (C63736 + C63737) * C141492 +
            C63746 * C63614 + C63747 * C63606) *
               C141353 * C4148 -
           ((C65637 + C65638) * C63606 + (C65639 + C65640) * C63614 +
            (C65641 + C65642) * C141492 + (C65643 + C65644) * C63612 +
            (C63708 * C3494 + C141341 * C3576 + C63707 * C1606 +
             C63607 * C1695) *
                C141506 +
            (C63708 * C3490 + C141341 * C3572 + C63707 * C1601 +
             C63607 * C1690) *
                C63610) *
               C141353 * C141499) *
              C141281 * C2376 +
          (((C65644 + C65643) * C63610 + (C65642 + C65641) * C141506 +
            (C65640 + C65639) * C63612 + (C65638 + C65637) * C141492 +
            (C63707 * C1598 + C63607 * C1687 + C63708 * C3493 +
             C141341 * C3575) *
                C63614 +
            (C63707 * C1603 + C63607 * C1692 + C63708 * C3497 +
             C141341 * C3579) *
                C63606) *
               C141353 * C141499 -
           ((C63742 + C63743) * C63606 + (C63744 + C63745) * C63614 +
            (C63741 + C63740) * C141492 + (C63739 + C63738) * C63612 +
            (C63737 + C63736) * C141506 + (C63735 + C63734) * C63610) *
               C141353 * C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C63610 +
             (C275 * C114 + C141353 * C282) * C141506 + C305 * C63612 +
             C306 * C141492 + C307 * C63614 + C308 * C63606) *
                C63607 +
            (C64707 + C64708 + C64709 + C64710 + C64711 + C64712) * C141341) *
               C4148 -
           ((C68300 + C68301 + C68302 + C68303 + C68304 + C68305) * C141341 +
            (C1806 * C63606 + C1807 * C63614 + C1808 * C141492 +
             C1809 * C63612 + (C275 * C1606 + C141353 * C1789) * C141506 +
             (C275 * C1601 + C141353 * C1784) * C63610) *
                C63607) *
               C141499) *
              C141281 * C2376 +
          (((C1809 * C63610 + C1808 * C141506 + C1807 * C63612 +
             C1806 * C141492 + C1805 * C63614 + C1804 * C63606) *
                C63607 +
            (C8055 * C63610 + C8054 * C141506 + C8053 * C63612 +
             C8052 * C141492 + (C275 * C3493 + C141353 * C3649) * C63614 +
             (C275 * C3497 + C141353 * C3653) * C63606) *
                C141341) *
               C141499 -
           ((C64718 + C64717 + C64716 + C64715 + C64714 + C64713) * C141341 +
            (C310 * C63606 + C309 * C63614 + C308 * C141492 + C307 * C63612 +
             C306 * C141506 + C305 * C63610) *
                C63607) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                      C141492 * C115 + C63614 * C110 + C63606 * C116) *
                         C63707 +
                     (C63610 * C189 + C141506 * C362 + C63612 * C190 +
                      C141492 * C363 + C63614 * C191 + C63606 * C364) *
                         C63607 +
                     (C64841 + C64842 + C64843) * C63708 +
                     (C64844 + C64845 + C64846) * C141341) *
                        C141353 * C4148 -
                    ((C68416 + C68417 + C68418) * C141341 +
                     (C68419 + C68420 + C68421) * C63708 +
                     (C63614 * C1688 + C63606 * C1876 + C63612 * C1689 +
                      C141492 * C1877 + C63610 * C1690 + C141506 * C1878) *
                         C63607 +
                     (C63614 * C1599 + C63606 * C1604 + C63612 * C1600 +
                      C141492 * C1605 + C63610 * C1601 + C141506 * C1606) *
                         C63707) *
                        C141353 * C141499) *
                       C141281 * C2376 +
                   (((C63610 * C1600 + C141506 * C1605 + C63612 * C1599 +
                      C141492 * C1604 + C63614 * C1598 + C63606 * C1603) *
                         C63707 +
                     (C63610 * C1689 + C141506 * C1877 + C63612 * C1688 +
                      C141492 * C1876 + C63614 * C1687 + C63606 * C1875) *
                         C63607 +
                     (C63610 * C3491 + C141506 * C3495 + C63612 * C3492 +
                      C141492 * C3496 + C63614 * C3493 + C63606 * C3497) *
                         C63708 +
                     (C63610 * C3573 + C141506 * C3721 + C63612 * C3574 +
                      C141492 * C3722 + C63614 * C3575 + C63606 * C3723) *
                         C141341) *
                        C141353 * C141499 -
                    ((C64852 + C64851 + C64850) * C141341 +
                     (C64849 + C64848 + C64847) * C63708 +
                     (C63614 * C192 + C63606 * C365 + C63612 * C191 +
                      C141492 * C364 + C63610 * C190 + C141506 * C363) *
                         C63607 +
                     (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                      C141492 * C116 + C63610 * C109 + C141506 * C115) *
                         C63707) *
                        C141353 * C4148) *
                       C141281 * C141495)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63969 * C108 + C63972 + C63972 + C63607 * C419 +
                      C63970 * C823 + C63973 + C63973 + C141341 * C1171) *
                         C141506 +
                     (C64006 + C64007) * C141492 + C64012 * C63606) *
                        C141353 * C4148 -
                    ((C65963 + C65964) * C63606 + (C65965 + C65966) * C141492 +
                     (C63970 * C3490 + C65951 + C65951 + C141341 * C3790 +
                      C63969 * C1601 + C65952 + C65952 + C63607 * C1949) *
                         C141506) *
                        C141353 * C141499) *
                       C141281 * C2376 +
                   (((C65966 + C65965) * C141506 + (C65964 + C65963) * C141492 +
                     (C63969 * C1598 + C65953 + C65953 + C63607 * C1946 +
                      C63970 * C3493 + C65954 + C65954 + C141341 * C3793) *
                         C63606) *
                        C141353 * C141499 -
                    ((C64010 + C64011) * C63606 + (C64009 + C64008) * C141492 +
                     (C64007 + C64006) * C141506) *
                        C141353 * C4148) *
                       C141281 * C141495)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C63707 +
             (C275 * C189 + C141353 * C501) * C63607 + C6988 * C63708 +
             C7366 * C141341) *
                C141506 +
            (C64087 + C64088 + C64089 + C64090) * C141492 + C64101 * C63606) *
               C4148 -
           ((C66065 + C66066 + C66067 + C66068) * C63606 +
            (C66069 + C66070 + C66071 + C66072) * C141492 +
            (C11047 * C141341 + C10715 * C63708 +
             (C275 * C1690 + C141353 * C2040) * C63607 +
             (C275 * C1601 + C141353 * C1784) * C63707) *
                C141506) *
               C141499) *
              C141281 * C2376 +
          (((C66072 + C66071 + C66070 + C66069) * C141506 +
            (C66068 + C66067 + C66066 + C66065) * C141492 +
            (C1805 * C63707 + C2052 * C63607 +
             (C275 * C3493 + C141353 * C3649) * C63708 +
             (C275 * C3575 + C141353 * C3867) * C141341) *
                C63606) *
               C141499 -
           ((C64095 + C64096 + C64097 + C64098) * C63606 +
            (C64094 + C64093 + C64092 + C64091) * C141492 +
            (C64090 + C64089 + C64088 + C64087) * C141506) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                       C141492 * C115 + C63614 * C110 + C63606 * C116) *
                          C275 +
                      (C63610 * C276 + C141506 * C579 + C63612 * C277 +
                       C141492 * C580 + C63614 * C278 + C63606 * C581) *
                          C141353) *
                         C63607 +
                     ((C64841 + C64842 + C64843) * C275 +
                      (C65195 + C65196 + C65197) * C141353) *
                         C141341) *
                        C4148 -
                    (((C68728 + C68729 + C68730) * C141353 +
                      (C68419 + C68420 + C68421) * C275) *
                         C141341 +
                     ((C63614 * C1782 + C63606 * C2124 + C63612 * C1783 +
                       C141492 * C2125 + C63610 * C1784 + C141506 * C2126) *
                          C141353 +
                      (C63614 * C1599 + C63606 * C1604 + C63612 * C1600 +
                       C141492 * C1605 + C63610 * C1601 + C141506 * C1606) *
                          C275) *
                         C63607) *
                        C141499) *
                       C141281 * C2376 +
                   ((((C63610 * C1600 + C141506 * C1605 + C63612 * C1599 +
                       C141492 * C1604 + C63614 * C1598 + C63606 * C1603) *
                          C275 +
                      (C63610 * C1783 + C141506 * C2125 + C63612 * C1782 +
                       C141492 * C2124 + C63614 * C1781 + C63606 * C2123) *
                          C141353) *
                         C63607 +
                     ((C63610 * C3491 + C141506 * C3495 + C63612 * C3492 +
                       C141492 * C3496 + C63614 * C3493 + C63606 * C3497) *
                          C275 +
                      (C63610 * C3647 + C141506 * C3935 + C63612 * C3648 +
                       C141492 * C3936 + C63614 * C3649 + C63606 * C3937) *
                          C141353) *
                         C141341) *
                        C141499 -
                    (((C65200 + C65199 + C65198) * C141353 +
                      (C64849 + C64848 + C64847) * C275) *
                         C141341 +
                     ((C63614 * C279 + C63606 * C582 + C63612 * C278 +
                       C141492 * C581 + C63610 * C277 + C141506 * C580) *
                          C141353 +
                      (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                       C141492 * C116 + C63610 * C109 + C141506 * C115) *
                          C275) *
                         C63607) *
                        C4148) *
                       C141281 * C141495)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C275 +
             (C63707 * C276 + C63607 * C635 + C63708 * C1006 +
              C141341 * C1419) *
                 C141353) *
                C141506 +
            ((C63734 + C63735) * C275 + (C64263 + C64264) * C141353) * C141492 +
            C64271 * C63606) *
               C4148 -
           (((C66277 + C66278) * C141353 + (C65639 + C65640) * C275) * C63606 +
            ((C66279 + C66280) * C141353 + (C65643 + C65644) * C275) * C141492 +
            ((C63708 * C3646 + C141341 * C4004 + C63707 * C1784 +
              C63607 * C2197) *
                 C141353 +
             (C63708 * C3490 + C141341 * C3572 + C63707 * C1601 +
              C63607 * C1690) *
                 C275) *
                C141506) *
               C141499) *
              C141281 * C2376 +
          ((((C65644 + C65643) * C275 + (C66280 + C66279) * C141353) * C141506 +
            ((C65640 + C65639) * C275 + (C66278 + C66277) * C141353) * C141492 +
            ((C63707 * C1598 + C63607 * C1687 + C63708 * C3493 +
              C141341 * C3575) *
                 C275 +
             (C63707 * C1781 + C63607 * C2194 + C63708 * C3649 +
              C141341 * C4007) *
                 C141353) *
                C63606) *
               C141499 -
           (((C64267 + C64268) * C141353 + (C63744 + C63745) * C275) * C63606 +
            ((C64266 + C64265) * C141353 + (C63739 + C63738) * C275) * C141492 +
            ((C64264 + C64263) * C141353 + (C63735 + C63734) * C275) *
                C141506) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C63607 +
             C7709 * C141341) *
                C141506 +
            (C64346 + C64347) * C141492 + C64352 * C63606) *
               C4148 -
           ((C66379 + C66380) * C63606 + (C66381 + C66382) * C141492 +
            (C11367 * C141341 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C63607) *
                C141506) *
               C141499) *
              C141281 * C2376 +
          (((C66382 + C66381) * C141506 + (C66380 + C66379) * C141492 +
            (C2303 * C63607 +
             (C713 * C3493 + C4082 + C4082 + C141353 * C4077) * C141341) *
                C63606) *
               C141499 -
           ((C64350 + C64351) * C63606 + (C64349 + C64348) * C141492 +
            (C64347 + C64346) * C141506) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[7] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63609 * C108 + C63616 + C63616 + C141506 * C120 +
                      C63611 * C109 + C63617 + C63617 + C141492 * C121 +
                      C63613 * C110 + C63618 + C63618 + C63606 * C122) *
                         C141353 * C63607 +
                     (C64481 + C64482 + C64483) * C141353 * C141341) *
                        C4148 -
                    ((C68101 + C68102 + C68103) * C141353 * C141341 +
                     (C63613 * C1599 + C65514 + C65514 + C63606 * C1609 +
                      C63611 * C1600 + C65515 + C65515 + C141492 * C1610 +
                      C63609 * C1601 + C65516 + C65516 + C141506 * C1611) *
                         C141353 * C63607) *
                        C141499) *
                       C816 +
                   (((C68103 + C68102 + C68101) * C141353 * C63607 +
                     (C63609 * C10470 + C68092 + C68092 + C141506 * C10476 +
                      C63611 * C10471 + C68093 + C68093 + C141492 * C10477 +
                      C63613 * C10472 + C68094 + C68094 + C63606 * C10478) *
                         C141353 * C141341) *
                        C141499 -
                    ((C67354 + C67355 + C67356) * C141353 * C141341 +
                     (C64483 + C64482 + C64481) * C141353 * C63607) *
                        C4148) *
                       C141497) *
                  C141247) /
                 (p * q * std::sqrt(p + q));
    d2eexy[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C63610 +
            (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                C141506 +
            (C63734 + C63735) * C63612 + (C63736 + C63737) * C141492 +
            C63746 * C63614 + C63747 * C63606) *
               C141353 * C4148 -
           ((C65637 + C65638) * C63606 + (C65639 + C65640) * C63614 +
            (C65641 + C65642) * C141492 + (C65643 + C65644) * C63612 +
            (C63708 * C3494 + C141341 * C3576 + C63707 * C1606 +
             C63607 * C1695) *
                C141506 +
            (C63708 * C3490 + C141341 * C3572 + C63707 * C1601 +
             C63607 * C1690) *
                C63610) *
               C141353 * C141499) *
              C816 +
          (((C63707 * C3490 + C63607 * C3572 + C63708 * C10470 +
             C141341 * C10595) *
                C63610 +
            (C63707 * C3494 + C63607 * C3576 + C63708 * C10473 +
             C141341 * C10598) *
                C141506 +
            (C63707 * C3491 + C63607 * C3573 + C63708 * C10471 +
             C141341 * C10596) *
                C63612 +
            (C63707 * C3495 + C63607 * C3577 + C63708 * C10474 +
             C141341 * C10599) *
                C141492 +
            (C63707 * C3492 + C63607 * C3574 + C63708 * C10472 +
             C141341 * C10597) *
                C63614 +
            (C63707 * C3496 + C63607 * C3578 + C63708 * C10475 +
             C141341 * C10600) *
                C63606) *
               C141353 * C141499 -
           ((C64601 + C64602) * C63606 + (C64603 + C64604) * C63614 +
            (C64605 + C64606) * C141492 + (C64607 + C64608) * C63612 +
            (C63708 * C2964 + C141341 * C3030 + C63707 * C828 + C63607 * C917) *
                C141506 +
            (C63708 * C2960 + C141341 * C3026 + C63707 * C823 + C63607 * C912) *
                C63610) *
               C141353 * C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C63610 +
             (C275 * C114 + C141353 * C282) * C141506 + C305 * C63612 +
             C306 * C141492 + C307 * C63614 + C308 * C63606) *
                C63607 +
            (C64707 + C64708 + C64709 + C64710 + C64711 + C64712) * C141341) *
               C4148 -
           ((C68300 + C68301 + C68302 + C68303 + C68304 + C68305) * C141341 +
            (C1806 * C63606 + C1807 * C63614 + C1808 * C141492 +
             C1809 * C63612 + (C275 * C1606 + C141353 * C1789) * C141506 +
             (C275 * C1601 + C141353 * C1784) * C63610) *
                C63607) *
               C141499) *
              C816 +
          (((C68305 + C68304 + C68303 + C68302 + C68301 + C68300) * C63607 +
            (C26595 * C63610 + C26594 * C141506 + C23974 * C63612 +
             C23973 * C141492 + (C275 * C10472 + C141353 * C10701) * C63614 +
             (C275 * C10475 + C141353 * C10704) * C63606) *
                C141341) *
               C141499 -
           ((C67505 + C67506 + C67507 + C67508 + C67509 + C67510) * C141341 +
            (C64712 + C64711 + C64710 + C64709 + C64708 + C64707) * C63607) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[7] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                      C141492 * C115 + C63614 * C110 + C63606 * C116) *
                         C63707 +
                     (C63610 * C189 + C141506 * C362 + C63612 * C190 +
                      C141492 * C363 + C63614 * C191 + C63606 * C364) *
                         C63607 +
                     (C64841 + C64842 + C64843) * C63708 +
                     (C64844 + C64845 + C64846) * C141341) *
                        C141353 * C4148 -
                    ((C68416 + C68417 + C68418) * C141341 +
                     (C68419 + C68420 + C68421) * C63708 +
                     (C63614 * C1688 + C63606 * C1876 + C63612 * C1689 +
                      C141492 * C1877 + C63610 * C1690 + C141506 * C1878) *
                         C63607 +
                     (C63614 * C1599 + C63606 * C1604 + C63612 * C1600 +
                      C141492 * C1605 + C63610 * C1601 + C141506 * C1606) *
                         C63707) *
                        C141353 * C141499) *
                       C816 +
                   (((C68421 + C68420 + C68419) * C63707 +
                     (C68418 + C68417 + C68416) * C63607 +
                     (C63610 * C10470 + C141506 * C10473 + C63612 * C10471 +
                      C141492 * C10474 + C63614 * C10472 + C63606 * C10475) *
                         C63708 +
                     (C63610 * C10595 + C141506 * C10815 + C63612 * C10596 +
                      C141492 * C10816 + C63614 * C10597 + C63606 * C10817) *
                         C141341) *
                        C141353 * C141499 -
                    ((C67597 + C67598 + C67599) * C141341 +
                     (C67600 + C67601 + C67602) * C63708 +
                     (C64846 + C64845 + C64844) * C63607 +
                     (C64843 + C64842 + C64841) * C63707) *
                        C141353 * C4148) *
                       C141497) *
                  C141247) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[7] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63969 * C108 + C63972 + C63972 + C63607 * C419 +
                      C63970 * C823 + C63973 + C63973 + C141341 * C1171) *
                         C141506 +
                     (C64006 + C64007) * C141492 + C64012 * C63606) *
                        C141353 * C4148 -
                    ((C65963 + C65964) * C63606 + (C65965 + C65966) * C141492 +
                     (C63970 * C3490 + C65951 + C65951 + C141341 * C3790 +
                      C63969 * C1601 + C65952 + C65952 + C63607 * C1949) *
                         C141506) *
                        C141353 * C141499) *
                       C816 +
                   (((C63969 * C3490 + C68520 + C68520 + C63607 * C3790 +
                      C63970 * C10470 + C68521 + C68521 + C141341 * C10934) *
                         C141506 +
                     (C63969 * C3491 + C68522 + C68522 + C63607 * C3791 +
                      C63970 * C10471 + C68523 + C68523 + C141341 * C10935) *
                         C141492 +
                     (C63969 * C3492 + C68524 + C68524 + C63607 * C3792 +
                      C63970 * C10472 + C68525 + C68525 + C141341 * C10936) *
                         C63606) *
                        C141353 * C141499 -
                    ((C64975 + C64976) * C63606 + (C64977 + C64978) * C141492 +
                     (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
                      C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                         C141506) *
                        C141353 * C4148) *
                       C141497) *
                  C141247) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C63707 +
             (C275 * C189 + C141353 * C501) * C63607 + C6988 * C63708 +
             C7366 * C141341) *
                C141506 +
            (C64087 + C64088 + C64089 + C64090) * C141492 + C64101 * C63606) *
               C4148 -
           ((C66065 + C66066 + C66067 + C66068) * C63606 +
            (C66069 + C66070 + C66071 + C66072) * C141492 +
            (C11047 * C141341 + C10715 * C63708 +
             (C275 * C1690 + C141353 * C2040) * C63607 +
             (C275 * C1601 + C141353 * C1784) * C63707) *
                C141506) *
               C141499) *
              C816 +
          (((C10715 * C63707 + C11047 * C63607 + C26595 * C63708 +
             C26930 * C141341) *
                C141506 +
            (C8055 * C63707 + C8389 * C63607 + C23974 * C63708 +
             C24300 * C141341) *
                C141492 +
            (C8053 * C63707 + C8388 * C63607 +
             (C275 * C10472 + C141353 * C10701) * C63708 +
             (C275 * C10597 + C141353 * C11043) * C141341) *
                C63606) *
               C141499 -
           ((C65077 + C65078 + C65079 + C65080) * C63606 +
            (C65081 + C65082 + C65083 + C65084) * C141492 +
            (C10124 * C141341 + C9864 * C63708 + C7366 * C63607 +
             C6988 * C63707) *
                C141506) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[7] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                       C141492 * C115 + C63614 * C110 + C63606 * C116) *
                          C275 +
                      (C63610 * C276 + C141506 * C579 + C63612 * C277 +
                       C141492 * C580 + C63614 * C278 + C63606 * C581) *
                          C141353) *
                         C63607 +
                     ((C64841 + C64842 + C64843) * C275 +
                      (C65195 + C65196 + C65197) * C141353) *
                         C141341) *
                        C4148 -
                    (((C68728 + C68729 + C68730) * C141353 +
                      (C68419 + C68420 + C68421) * C275) *
                         C141341 +
                     ((C63614 * C1782 + C63606 * C2124 + C63612 * C1783 +
                       C141492 * C2125 + C63610 * C1784 + C141506 * C2126) *
                          C141353 +
                      (C63614 * C1599 + C63606 * C1604 + C63612 * C1600 +
                       C141492 * C1605 + C63610 * C1601 + C141506 * C1606) *
                          C275) *
                         C63607) *
                        C141499) *
                       C816 +
                   ((((C68421 + C68420 + C68419) * C275 +
                      (C68730 + C68729 + C68728) * C141353) *
                         C63607 +
                     ((C63610 * C10470 + C141506 * C10473 + C63612 * C10471 +
                       C141492 * C10474 + C63614 * C10472 + C63606 * C10475) *
                          C275 +
                      (C63610 * C10699 + C141506 * C11145 + C63612 * C10700 +
                       C141492 * C11146 + C63614 * C10701 + C63606 * C11147) *
                          C141353) *
                         C141341) *
                        C141499 -
                    (((C67837 + C67838 + C67839) * C141353 +
                      (C67600 + C67601 + C67602) * C275) *
                         C141341 +
                     ((C65197 + C65196 + C65195) * C141353 +
                      (C64843 + C64842 + C64841) * C275) *
                         C63607) *
                        C4148) *
                       C141497) *
                  C141247) /
                 (p * q * std::sqrt(p + q));
    d2eezy[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C275 +
             (C63707 * C276 + C63607 * C635 + C63708 * C1006 +
              C141341 * C1419) *
                 C141353) *
                C141506 +
            ((C63734 + C63735) * C275 + (C64263 + C64264) * C141353) * C141492 +
            C64271 * C63606) *
               C4148 -
           (((C66277 + C66278) * C141353 + (C65639 + C65640) * C275) * C63606 +
            ((C66279 + C66280) * C141353 + (C65643 + C65644) * C275) * C141492 +
            ((C63708 * C3646 + C141341 * C4004 + C63707 * C1784 +
              C63607 * C2197) *
                 C141353 +
             (C63708 * C3490 + C141341 * C3572 + C63707 * C1601 +
              C63607 * C1690) *
                 C275) *
                C141506) *
               C141499) *
              C816 +
          ((((C63707 * C3490 + C63607 * C3572 + C63708 * C10470 +
              C141341 * C10595) *
                 C275 +
             (C63707 * C3646 + C63607 * C4004 + C63708 * C10699 +
              C141341 * C11255) *
                 C141353) *
                C141506 +
            ((C63707 * C3491 + C63607 * C3573 + C63708 * C10471 +
              C141341 * C10596) *
                 C275 +
             (C63707 * C3647 + C63607 * C4005 + C63708 * C10700 +
              C141341 * C11256) *
                 C141353) *
                C141492 +
            ((C63707 * C3492 + C63607 * C3574 + C63708 * C10472 +
              C141341 * C10597) *
                 C275 +
             (C63707 * C3648 + C63607 * C4006 + C63708 * C10701 +
              C141341 * C11257) *
                 C141353) *
                C63606) *
               C141499 -
           (((C65307 + C65308) * C141353 + (C64603 + C64604) * C275) * C63606 +
            ((C65309 + C65310) * C141353 + (C64607 + C64608) * C275) * C141492 +
            ((C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
              C63607 * C1419) *
                 C141353 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C275) *
                C141506) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[7] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C63607 +
             C7709 * C141341) *
                C141506 +
            (C64346 + C64347) * C141492 + C64352 * C63606) *
               C4148 -
           ((C66379 + C66380) * C63606 + (C66381 + C66382) * C141492 +
            (C11367 * C141341 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C63607) *
                C141506) *
               C141499) *
              C816 +
          (((C11367 * C63607 + C27249 * C141341) * C141506 +
            (C8709 * C63607 + C24611 * C141341) * C141492 +
            (C8708 * C63607 +
             (C713 * C10472 + C11364 + C11364 + C141353 * C11358) * C141341) *
                C63606) *
               C141499 -
           ((C65409 + C65410) * C63606 + (C65411 + C65412) * C141492 +
            (C10372 * C141341 + C7709 * C63607) * C141506) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C63609 * C108 + C63616 + C63616 + C141506 * C120 +
                     C63611 * C109 + C63617 + C63617 + C141492 * C121 +
                     C63613 * C110 + C63618 + C63618 + C63606 * C122) *
                        C141353 * C63607 +
                    (C64481 + C64482 + C64483) * C141353 * C141341) *
                       C5322 -
                   ((C68101 + C68102 + C68103) * C141353 * C141341 +
                    (C63613 * C1599 + C65514 + C65514 + C63606 * C1609 +
                     C63611 * C1600 + C65515 + C65515 + C141492 * C1610 +
                     C63609 * C1601 + C65516 + C65516 + C141506 * C1611) *
                        C141353 * C63607) *
                       C5323 +
                   ((C63609 * C5325 + C70765 + C70765 + C141506 * C5333 +
                     C63611 * C5326 + C70766 + C70766 + C141492 * C5334 +
                     C63613 * C5327 + C70767 + C70767 + C63606 * C5335) *
                        C141353 * C63607 +
                    (C63609 * C13205 + C70768 + C70768 + C141506 * C13211 +
                     C63611 * C13206 + C70769 + C70769 + C141492 * C13212 +
                     C63613 * C13207 + C70770 + C70770 + C63606 * C13213) *
                        C141353 * C141341) *
                       C5324) *
                  C141281 * C141247) /
                 (p * q * std::sqrt(p + q));
    d2eexy[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
               C63610 +
           (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
               C141506 +
           (C63734 + C63735) * C63612 + (C63736 + C63737) * C141492 +
           C63746 * C63614 + C63747 * C63606) *
              C141353 * C5322 -
          ((C65637 + C65638) * C63606 + (C65639 + C65640) * C63614 +
           (C65641 + C65642) * C141492 + (C65643 + C65644) * C63612 +
           (C63708 * C3494 + C141341 * C3576 + C63707 * C1606 +
            C63607 * C1695) *
               C141506 +
           (C63708 * C3490 + C141341 * C3572 + C63707 * C1601 +
            C63607 * C1690) *
               C63610) *
              C141353 * C5323 +
          ((C63707 * C5325 + C63607 * C5391 + C63708 * C13205 +
            C141341 * C13294) *
               C63610 +
           (C63707 * C5329 + C63607 * C5395 + C63708 * C13208 +
            C141341 * C13297) *
               C141506 +
           (C63707 * C5326 + C63607 * C5392 + C63708 * C13206 +
            C141341 * C13295) *
               C63612 +
           (C63707 * C5330 + C63607 * C5396 + C63708 * C13209 +
            C141341 * C13298) *
               C141492 +
           (C63707 * C5327 + C63607 * C5393 + C63708 * C13207 +
            C141341 * C13296) *
               C63614 +
           (C63707 * C5331 + C63607 * C5397 + C63708 * C13210 +
            C141341 * C13299) *
               C63606) *
              C141353 * C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C63610 +
            (C275 * C114 + C141353 * C282) * C141506 + C305 * C63612 +
            C306 * C141492 + C307 * C63614 + C308 * C63606) *
               C63607 +
           (C64707 + C64708 + C64709 + C64710 + C64711 + C64712) * C141341) *
              C5322 -
          ((C68300 + C68301 + C68302 + C68303 + C68304 + C68305) * C141341 +
           (C1806 * C63606 + C1807 * C63614 + C1808 * C141492 + C1809 * C63612 +
            (C275 * C1606 + C141353 * C1789) * C141506 +
            (C275 * C1601 + C141353 * C1784) * C63610) *
               C63607) *
              C5323 +
          (((C275 * C5325 + C141353 * C5449) * C63610 +
            (C275 * C5329 + C141353 * C5453) * C141506 +
            (C275 * C5326 + C141353 * C5450) * C63612 +
            (C275 * C5330 + C141353 * C5454) * C141492 +
            (C275 * C5327 + C141353 * C5451) * C63614 +
            (C275 * C5331 + C141353 * C5455) * C63606) *
               C63607 +
           ((C275 * C13205 + C141353 * C13374) * C63610 +
            (C275 * C13208 + C141353 * C13377) * C141506 +
            (C275 * C13206 + C141353 * C13375) * C63612 +
            (C275 * C13209 + C141353 * C13378) * C141492 +
            (C275 * C13207 + C141353 * C13376) * C63614 +
            (C275 * C13210 + C141353 * C13379) * C63606) *
               C141341) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                     C141492 * C115 + C63614 * C110 + C63606 * C116) *
                        C63707 +
                    (C63610 * C189 + C141506 * C362 + C63612 * C190 +
                     C141492 * C363 + C63614 * C191 + C63606 * C364) *
                        C63607 +
                    (C64841 + C64842 + C64843) * C63708 +
                    (C64844 + C64845 + C64846) * C141341) *
                       C141353 * C5322 -
                   ((C68416 + C68417 + C68418) * C141341 +
                    (C68419 + C68420 + C68421) * C63708 +
                    (C63614 * C1688 + C63606 * C1876 + C63612 * C1689 +
                     C141492 * C1877 + C63610 * C1690 + C141506 * C1878) *
                        C63607 +
                    (C63614 * C1599 + C63606 * C1604 + C63612 * C1600 +
                     C141492 * C1605 + C63610 * C1601 + C141506 * C1606) *
                        C63707) *
                       C141353 * C5323 +
                   ((C63610 * C5325 + C141506 * C5329 + C63612 * C5326 +
                     C141492 * C5330 + C63614 * C5327 + C63606 * C5331) *
                        C63707 +
                    (C63610 * C5391 + C141506 * C5507 + C63612 * C5392 +
                     C141492 * C5508 + C63614 * C5393 + C63606 * C5509) *
                        C63607 +
                    (C63610 * C13205 + C141506 * C13208 + C63612 * C13206 +
                     C141492 * C13209 + C63614 * C13207 + C63606 * C13210) *
                        C63708 +
                    (C63610 * C13294 + C141506 * C13454 + C63612 * C13295 +
                     C141492 * C13455 + C63614 * C13296 + C63606 * C13456) *
                        C141341) *
                       C141353 * C5324) *
                  C141281 * C141247) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C63969 * C108 + C63972 + C63972 + C63607 * C419 +
                     C63970 * C823 + C63973 + C63973 + C141341 * C1171) *
                        C141506 +
                    (C64006 + C64007) * C141492 + C64012 * C63606) *
                       C141353 * C5322 -
                   ((C65963 + C65964) * C63606 + (C65965 + C65966) * C141492 +
                    (C63970 * C3490 + C65951 + C65951 + C141341 * C3790 +
                     C63969 * C1601 + C65952 + C65952 + C63607 * C1949) *
                        C141506) *
                       C141353 * C5323 +
                   ((C63969 * C5325 + C71067 + C71067 + C63607 * C5561 +
                     C63970 * C13205 + C71068 + C71068 + C141341 * C13531) *
                        C141506 +
                    (C63969 * C5326 + C71069 + C71069 + C63607 * C5562 +
                     C63970 * C13206 + C71070 + C71070 + C141341 * C13532) *
                        C141492 +
                    (C63969 * C5327 + C71071 + C71071 + C63607 * C5563 +
                     C63970 * C13207 + C71072 + C71072 + C141341 * C13533) *
                        C63606) *
                       C141353 * C5324) *
                  C141281 * C141247) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C63707 +
            (C275 * C189 + C141353 * C501) * C63607 + C6988 * C63708 +
            C7366 * C141341) *
               C141506 +
           (C64087 + C64088 + C64089 + C64090) * C141492 + C64101 * C63606) *
              C5322 -
          ((C66065 + C66066 + C66067 + C66068) * C63606 +
           (C66069 + C66070 + C66071 + C66072) * C141492 +
           (C11047 * C141341 + C10715 * C63708 +
            (C275 * C1690 + C141353 * C2040) * C63607 +
            (C275 * C1601 + C141353 * C1784) * C63707) *
               C141506) *
              C5323 +
          (((C275 * C5325 + C141353 * C5449) * C63707 +
            (C275 * C5391 + C141353 * C5619) * C63607 +
            (C275 * C13205 + C141353 * C13374) * C63708 +
            (C275 * C13294 + C141353 * C13614) * C141341) *
               C141506 +
           ((C275 * C5326 + C141353 * C5450) * C63707 +
            (C275 * C5392 + C141353 * C5620) * C63607 +
            (C275 * C13206 + C141353 * C13375) * C63708 +
            (C275 * C13295 + C141353 * C13615) * C141341) *
               C141492 +
           ((C275 * C5327 + C141353 * C5451) * C63707 +
            (C275 * C5393 + C141353 * C5621) * C63607 +
            (C275 * C13207 + C141353 * C13376) * C63708 +
            (C275 * C13296 + C141353 * C13616) * C141341) *
               C63606) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                      C141492 * C115 + C63614 * C110 + C63606 * C116) *
                         C275 +
                     (C63610 * C276 + C141506 * C579 + C63612 * C277 +
                      C141492 * C580 + C63614 * C278 + C63606 * C581) *
                         C141353) *
                        C63607 +
                    ((C64841 + C64842 + C64843) * C275 +
                     (C65195 + C65196 + C65197) * C141353) *
                        C141341) *
                       C5322 -
                   (((C68728 + C68729 + C68730) * C141353 +
                     (C68419 + C68420 + C68421) * C275) *
                        C141341 +
                    ((C63614 * C1782 + C63606 * C2124 + C63612 * C1783 +
                      C141492 * C2125 + C63610 * C1784 + C141506 * C2126) *
                         C141353 +
                     (C63614 * C1599 + C63606 * C1604 + C63612 * C1600 +
                      C141492 * C1605 + C63610 * C1601 + C141506 * C1606) *
                         C275) *
                        C63607) *
                       C5323 +
                   (((C63610 * C5325 + C141506 * C5329 + C63612 * C5326 +
                      C141492 * C5330 + C63614 * C5327 + C63606 * C5331) *
                         C275 +
                     (C63610 * C5449 + C141506 * C5673 + C63612 * C5450 +
                      C141492 * C5674 + C63614 * C5451 + C63606 * C5675) *
                         C141353) *
                        C63607 +
                    ((C63610 * C13205 + C141506 * C13208 + C63612 * C13206 +
                      C141492 * C13209 + C63614 * C13207 + C63606 * C13210) *
                         C275 +
                     (C63610 * C13374 + C141506 * C13691 + C63612 * C13375 +
                      C141492 * C13692 + C63614 * C13376 + C63606 * C13693) *
                         C141353) *
                        C141341) *
                       C5324) *
                  C141281 * C141247) /
                 (p * q * std::sqrt(p + q));
    d2eezy[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C275 +
            (C63707 * C276 + C63607 * C635 + C63708 * C1006 + C141341 * C1419) *
                C141353) *
               C141506 +
           ((C63734 + C63735) * C275 + (C64263 + C64264) * C141353) * C141492 +
           C64271 * C63606) *
              C5322 -
          (((C66277 + C66278) * C141353 + (C65639 + C65640) * C275) * C63606 +
           ((C66279 + C66280) * C141353 + (C65643 + C65644) * C275) * C141492 +
           ((C63708 * C3646 + C141341 * C4004 + C63707 * C1784 +
             C63607 * C2197) *
                C141353 +
            (C63708 * C3490 + C141341 * C3572 + C63707 * C1601 +
             C63607 * C1690) *
                C275) *
               C141506) *
              C5323 +
          (((C63707 * C5325 + C63607 * C5391 + C63708 * C13205 +
             C141341 * C13294) *
                C275 +
            (C63707 * C5449 + C63607 * C5727 + C63708 * C13374 +
             C141341 * C13768) *
                C141353) *
               C141506 +
           ((C63707 * C5326 + C63607 * C5392 + C63708 * C13206 +
             C141341 * C13295) *
                C275 +
            (C63707 * C5450 + C63607 * C5728 + C63708 * C13375 +
             C141341 * C13769) *
                C141353) *
               C141492 +
           ((C63707 * C5327 + C63607 * C5393 + C63708 * C13207 +
             C141341 * C13296) *
                C275 +
            (C63707 * C5451 + C63607 * C5729 + C63708 * C13376 +
             C141341 * C13770) *
                C141353) *
               C63606) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C63607 +
            C7709 * C141341) *
               C141506 +
           (C64346 + C64347) * C141492 + C64352 * C63606) *
              C5322 -
          ((C66379 + C66380) * C63606 + (C66381 + C66382) * C141492 +
           (C11367 * C141341 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C63607) *
               C141506) *
              C5323 +
          (((C713 * C5325 + C5786 + C5786 + C141353 * C5781) * C63607 +
            (C713 * C13205 + C13849 + C13849 + C141353 * C13845) * C141341) *
               C141506 +
           ((C713 * C5326 + C5787 + C5787 + C141353 * C5782) * C63607 +
            (C713 * C13206 + C13850 + C13850 + C141353 * C13846) * C141341) *
               C141492 +
           ((C713 * C5327 + C5788 + C5788 + C141353 * C5783) * C63607 +
            (C713 * C13207 + C13851 + C13851 + C141353 * C13847) * C141341) *
               C63606) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[9] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C71447 * C108 + C71452 + C71452 + C71442 * C120 +
                     C71449 * C109 + C71453 + C71453 + C141224 * C121) *
                        C141353 * C141507 +
                    (C71447 * C823 + C71454 + C71454 + C71442 * C833 +
                     C71449 * C822 + C71455 + C71455 + C141224 * C832) *
                        C141353 * C141502 +
                    (C71447 * C2960 + C71456 + C71456 + C71442 * C2968 +
                     C71449 * C2961 + C71457 + C71457 + C141224 * C2969) *
                        C141353 * C71446) *
                       C141298 * C141281 * C97 -
                   ((C71449 * C2962 + C71458 + C71458 + C141224 * C2970 +
                     C71447 * C2961 + C71459 + C71459 + C71442 * C2969) *
                        C141353 * C71446 +
                    (C71449 * C821 + C71460 + C71460 + C141224 * C831 +
                     C71447 * C822 + C71461 + C71461 + C71442 * C832) *
                        C141353 * C141502 +
                    (C71449 * C110 + C71462 + C71462 + C141224 * C122 +
                     C71447 * C109 + C71463 + C71463 + C71442 * C121) *
                        C141353 * C141507) *
                       C141298 * C141281 * C98 +
                   ((C71447 * C110 + C71464 + C71464 + C71442 * C122 +
                     C71449 * C111 + C71465 + C71465 + C141224 * C123) *
                        C141353 * C141507 +
                    (C71447 * C821 + C71466 + C71466 + C71442 * C831 +
                     C71449 * C820 + C71467 + C71467 + C141224 * C830) *
                        C141353 * C141502 +
                    (C71447 * C2962 + C71468 + C71468 + C71442 * C2970 +
                     C71449 * C2963 + C71469 + C71469 + C141224 * C2971) *
                        C141353 * C71446) *
                       C141298 * C141281 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[9] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                     C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                        C71448 +
                    (C71543 * C114 + C141507 * C195 + C71544 * C828 +
                     C141502 * C917 + C71545 * C2964 + C71446 * C3030) *
                        C71442 +
                    (C71571 + C71572 + C71573) * C71450 +
                    (C71574 + C71575 + C71576) * C141224) *
                       C141353 * C141298 * C141281 * C97 -
                   ((C71577 + C71578 + C71579) * C141224 +
                    (C71580 + C71581 + C71582) * C71450 +
                    (C71576 + C71575 + C71574) * C71442 +
                    (C71573 + C71572 + C71571) * C71448) *
                       C141353 * C141298 * C141281 * C98 +
                   ((C71582 + C71581 + C71580) * C71448 +
                    (C71579 + C71578 + C71577) * C71442 +
                    (C71543 * C111 + C141507 * C192 + C71544 * C820 +
                     C141502 * C909 + C71545 * C2963 + C71446 * C3029) *
                        C71450 +
                    (C71543 * C117 + C141507 * C198 + C71544 * C825 +
                     C141502 * C914 + C71545 * C2967 + C71446 * C3033) *
                        C141224) *
                       C141353 * C141298 * C141281 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C71448 +
            (C275 * C114 + C141353 * C282) * C71442 + C305 * C71450 +
            C306 * C141224) *
               C141507 +
           (C6988 * C71448 + C6989 * C71442 + C1031 * C71450 +
            C1030 * C141224) *
               C141502 +
           (C9864 * C71448 + C9863 * C71442 + C6993 * C71450 +
            C6992 * C141224) *
               C71446) *
              C141298 * C141281 * C97 -
          ((C6990 * C141224 + C6991 * C71450 + C6992 * C71442 +
            C6993 * C71448) *
               C71446 +
           (C1028 * C141224 + C1029 * C71450 + C1030 * C71442 +
            C1031 * C71448) *
               C141502 +
           (C308 * C141224 + C307 * C71450 + C306 * C71442 + C305 * C71448) *
               C141507) *
              C141298 * C141281 * C98 +
          ((C307 * C71448 + C308 * C71442 + C309 * C71450 + C310 * C141224) *
               C141507 +
           (C1029 * C71448 + C1028 * C71442 + C1027 * C71450 +
            C1026 * C141224) *
               C141502 +
           (C6991 * C71448 + C6990 * C71442 +
            (C275 * C2963 + C141353 * C3087) * C71450 +
            (C275 * C2967 + C141353 * C3091) * C141224) *
               C71446) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
               C71543 +
           (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
               C141507 +
           (C71448 * C823 + C71442 * C828 + C71450 * C822 + C141224 * C827) *
               C71544 +
           (C71448 * C912 + C71442 * C1100 + C71450 * C911 + C141224 * C1099) *
               C141502 +
           (C71448 * C2960 + C71442 * C2964 + C71450 * C2961 +
            C141224 * C2965) *
               C71545 +
           (C71448 * C3026 + C71442 * C3142 + C71450 * C3027 +
            C141224 * C3143) *
               C71446) *
              C141353 * C141298 * C141281 * C97 -
          ((C71450 * C3028 + C141224 * C3144 + C71448 * C3027 +
            C71442 * C3143) *
               C71446 +
           (C71450 * C2962 + C141224 * C2966 + C71448 * C2961 +
            C71442 * C2965) *
               C71545 +
           (C71450 * C910 + C141224 * C1098 + C71448 * C911 + C71442 * C1099) *
               C141502 +
           (C71450 * C821 + C141224 * C826 + C71448 * C822 + C71442 * C827) *
               C71544 +
           (C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
               C141507 +
           (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
               C71543) *
              C141353 * C141298 * C141281 * C98 +
          ((C71448 * C110 + C71442 * C116 + C71450 * C111 + C141224 * C117) *
               C71543 +
           (C71448 * C191 + C71442 * C364 + C71450 * C192 + C141224 * C365) *
               C141507 +
           (C71448 * C821 + C71442 * C826 + C71450 * C820 + C141224 * C825) *
               C71544 +
           (C71448 * C910 + C71442 * C1098 + C71450 * C909 + C141224 * C1097) *
               C141502 +
           (C71448 * C2962 + C71442 * C2966 + C71450 * C2963 +
            C141224 * C2967) *
               C71545 +
           (C71448 * C3028 + C71442 * C3144 + C71450 * C3029 +
            C141224 * C3145) *
               C71446) *
              C141353 * C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[9] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C71804 * C108 + C71808 + C71808 + C141507 * C419 +
                     C71805 * C823 + C71809 + C71809 + C141502 * C1171 +
                     C71806 * C2960 + C71810 + C71810 + C71446 * C3196) *
                        C71442 +
                    (C71844 + C71845 + C71846) * C141224) *
                       C141353 * C141298 * C141281 * C97 -
                   ((C71847 + C71848 + C71849) * C141224 +
                    (C71846 + C71845 + C71844) * C71442) *
                       C141353 * C141298 * C141281 * C98 +
                   ((C71849 + C71848 + C71847) * C71442 +
                    (C71804 * C111 + C71829 + C71829 + C141507 * C422 +
                     C71805 * C820 + C71830 + C71830 + C141502 * C1168 +
                     C71806 * C2963 + C71831 + C71831 + C71446 * C3199) *
                        C141224) *
                       C141353 * C141298 * C141281 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C71543 +
            (C275 * C189 + C141353 * C501) * C141507 + C6988 * C71544 +
            C7366 * C141502 + C9864 * C71545 + C10124 * C71446) *
               C71442 +
           (C71924 + C71925 + C71926 + C71927 + C71928 + C71929) * C141224) *
              C141298 * C141281 * C97 -
          ((C71930 + C71931 + C71932 + C71933 + C71934 + C71935) * C141224 +
           (C71929 + C71928 + C71927 + C71926 + C71925 + C71924) * C71442) *
              C141298 * C141281 * C98 +
          ((C71935 + C71934 + C71933 + C71932 + C71931 + C71930) * C71442 +
           (C309 * C71543 + C522 * C141507 + C1027 * C71544 + C1274 * C141502 +
            (C275 * C2963 + C141353 * C3087) * C71545 +
            (C275 * C3029 + C141353 * C3257) * C71446) *
               C141224) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezx[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C275 +
            (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                C141353) *
               C141507 +
           ((C71448 * C823 + C71442 * C828 + C71450 * C822 + C141224 * C827) *
                C275 +
            (C71448 * C1006 + C71442 * C1348 + C71450 * C1005 +
             C141224 * C1347) *
                C141353) *
               C141502 +
           ((C71448 * C2960 + C71442 * C2964 + C71450 * C2961 +
             C141224 * C2965) *
                C275 +
            (C71448 * C3084 + C71442 * C3308 + C71450 * C3085 +
             C141224 * C3309) *
                C141353) *
               C71446) *
              C141298 * C141281 * C97 -
          (((C71450 * C3086 + C141224 * C3310 + C71448 * C3085 +
             C71442 * C3309) *
                C141353 +
            (C71450 * C2962 + C141224 * C2966 + C71448 * C2961 +
             C71442 * C2965) *
                C275) *
               C71446 +
           ((C71450 * C1004 + C141224 * C1346 + C71448 * C1005 +
             C71442 * C1347) *
                C141353 +
            (C71450 * C821 + C141224 * C826 + C71448 * C822 + C71442 * C827) *
                C275) *
               C141502 +
           ((C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                C141353 +
            (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                C275) *
               C141507) *
              C141298 * C141281 * C98 +
          (((C71448 * C110 + C71442 * C116 + C71450 * C111 + C141224 * C117) *
                C275 +
            (C71448 * C278 + C71442 * C581 + C71450 * C279 + C141224 * C582) *
                C141353) *
               C141507 +
           ((C71448 * C821 + C71442 * C826 + C71450 * C820 + C141224 * C825) *
                C275 +
            (C71448 * C1004 + C71442 * C1346 + C71450 * C1003 +
             C141224 * C1345) *
                C141353) *
               C141502 +
           ((C71448 * C2962 + C71442 * C2966 + C71450 * C2963 +
             C141224 * C2967) *
                C275 +
            (C71448 * C3086 + C71442 * C3310 + C71450 * C3087 +
             C141224 * C3311) *
                C141353) *
               C71446) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezy[9] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                      C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                         C275 +
                     (C71543 * C276 + C141507 * C635 + C71544 * C1006 +
                      C141502 * C1419 + C71545 * C3084 + C71446 * C3362) *
                         C141353) *
                        C71442 +
                    ((C71571 + C71572 + C71573) * C275 +
                     (C72096 + C72097 + C72098) * C141353) *
                        C141224) *
                       C141298 * C141281 * C97 -
                   (((C72099 + C72100 + C72101) * C141353 +
                     (C71580 + C71581 + C71582) * C275) *
                        C141224 +
                    ((C72098 + C72097 + C72096) * C141353 +
                     (C71573 + C71572 + C71571) * C275) *
                        C71442) *
                       C141298 * C141281 * C98 +
                   (((C71582 + C71581 + C71580) * C275 +
                     (C72101 + C72100 + C72099) * C141353) *
                        C71442 +
                    ((C71543 * C111 + C141507 * C192 + C71544 * C820 +
                      C141502 * C909 + C71545 * C2963 + C71446 * C3029) *
                         C275 +
                     (C71543 * C279 + C141507 * C638 + C71544 * C1003 +
                      C141502 * C1416 + C71545 * C3087 + C71446 * C3365) *
                         C141353) *
                        C141224) *
                       C141298 * C141281 * C99)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141507 +
            C7709 * C141502 + C10372 * C71446) *
               C71442 +
           (C72176 + C72177 + C72178) * C141224) *
              C141298 * C141281 * C97 -
          ((C72179 + C72180 + C72181) * C141224 +
           (C72178 + C72177 + C72176) * C71442) *
              C141298 * C141281 * C98 +
          ((C72181 + C72180 + C72179) * C71442 +
           (C745 * C141507 + C1525 * C141502 +
            (C713 * C2963 + C3424 + C3424 + C141353 * C3419) * C71446) *
               C141224) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexx[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71447 * C108 + C71452 + C71452 + C71442 * C120 +
                       C71449 * C109 + C71453 + C71453 + C141224 * C121) *
                          C141353 * C141507 +
                      (C72316 + C72317) * C141353 * C141502 +
                      (C72318 + C72319) * C141353 * C71446) *
                         C141298 * C816 -
                     ((C71449 * C9668 + C72288 + C72288 + C141224 * C9674 +
                       C71447 * C9667 + C72289 + C72289 + C71442 * C9673) *
                          C141353 * C71446 +
                      (C72319 + C72318) * C141353 * C141502 +
                      (C72317 + C72316) * C141353 * C141507) *
                         C141298 * C141497) *
                        C818 +
                    (((C72320 + C72321) * C141353 * C141507 +
                      (C72322 + C72323) * C141353 * C141502 +
                      (C71447 * C9668 + C72298 + C72298 + C71442 * C9674 +
                       C71449 * C9669 + C72299 + C72299 + C141224 * C9675) *
                          C141353 * C71446) *
                         C141298 * C141497 -
                     ((C72323 + C72322) * C141353 * C71446 +
                      (C72321 + C72320) * C141353 * C141502 +
                      (C71449 * C110 + C71462 + C71462 + C141224 * C122 +
                       C71447 * C109 + C71463 + C71463 + C71442 * C121) *
                          C141353 * C141507) *
                         C141298 * C816) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                       C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                          C71448 +
                      (C71543 * C114 + C141507 * C195 + C71544 * C828 +
                       C141502 * C917 + C71545 * C2964 + C71446 * C3030) *
                          C71442 +
                      (C71571 + C71572 + C71573) * C71450 +
                      (C71574 + C71575 + C71576) * C141224) *
                         C141353 * C141298 * C816 -
                     ((C72434 + C72435 + C72436) * C141224 +
                      (C72437 + C72438 + C72439) * C71450 +
                      (C71545 * C9670 + C71446 * C9771 + C71544 * C2964 +
                       C141502 * C3030 + C71543 * C828 + C141507 * C917) *
                          C71442 +
                      (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                       C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                          C71448) *
                         C141353 * C141298 * C141497) *
                        C818 +
                    (((C72439 + C72438 + C72437) * C71448 +
                      (C72436 + C72435 + C72434) * C71442 +
                      (C71543 * C821 + C141507 * C910 + C71544 * C2962 +
                       C141502 * C3028 + C71545 * C9669 + C71446 * C9770) *
                          C71450 +
                      (C71543 * C826 + C141507 * C915 + C71544 * C2966 +
                       C141502 * C3032 + C71545 * C9672 + C71446 * C9773) *
                          C141224) *
                         C141353 * C141298 * C141497 -
                     ((C71577 + C71578 + C71579) * C141224 +
                      (C71580 + C71581 + C71582) * C71450 +
                      (C71576 + C71575 + C71574) * C71442 +
                      (C71573 + C71572 + C71571) * C71448) *
                         C141353 * C141298 * C816) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C71448 +
             (C275 * C114 + C141353 * C282) * C71442 + C305 * C71450 +
             C306 * C141224) *
                C141507 +
            (C72538 + C72539 + C72540 + C72541) * C141502 +
            (C72542 + C72543 + C72544 + C72545) * C71446) *
               C141298 * C816 -
           ((C22933 * C141224 + C22934 * C71450 + C25753 * C71442 +
             C25754 * C71448) *
                C71446 +
            (C72545 + C72544 + C72543 + C72542) * C141502 +
            (C72541 + C72540 + C72539 + C72538) * C141507) *
               C141298 * C141497) *
              C818 +
          (((C72546 + C72547 + C72548 + C72549) * C141507 +
            (C72550 + C72551 + C72552 + C72553) * C141502 +
            (C22934 * C71448 + C22933 * C71442 +
             (C275 * C9669 + C141353 * C9850) * C71450 +
             (C275 * C9672 + C141353 * C9853) * C141224) *
                C71446) *
               C141298 * C141497 -
           ((C72553 + C72552 + C72551 + C72550) * C71446 +
            (C72549 + C72548 + C72547 + C72546) * C141502 +
            (C308 * C141224 + C307 * C71450 + C306 * C71442 + C305 * C71448) *
                C141507) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C71543 +
            (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                C141507 +
            (C72684 + C72685) * C71544 + (C72686 + C72687) * C141502 +
            (C72688 + C72689) * C71545 + (C72690 + C72691) * C71446) *
               C141353 * C141298 * C816 -
           ((C71450 * C9769 + C141224 * C9941 + C71448 * C9768 +
             C71442 * C9940) *
                C71446 +
            (C71450 * C9668 + C141224 * C9671 + C71448 * C9667 +
             C71442 * C9670) *
                C71545 +
            (C72691 + C72690) * C141502 + (C72689 + C72688) * C71544 +
            (C72687 + C72686) * C141507 + (C72685 + C72684) * C71543) *
               C141353 * C141298 * C141497) *
              C818 +
          (((C72692 + C72693) * C71543 + (C72694 + C72695) * C141507 +
            (C72696 + C72697) * C71544 + (C72698 + C72699) * C141502 +
            (C71448 * C9668 + C71442 * C9671 + C71450 * C9669 +
             C141224 * C9672) *
                C71545 +
            (C71448 * C9769 + C71442 * C9941 + C71450 * C9770 +
             C141224 * C9942) *
                C71446) *
               C141353 * C141298 * C141497 -
           ((C72699 + C72698) * C71446 + (C72697 + C72696) * C71545 +
            (C72695 + C72694) * C141502 + (C72693 + C72692) * C71544 +
            (C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                C141507 +
            (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                C71543) *
               C141353 * C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71804 * C108 + C71808 + C71808 + C141507 * C419 +
                       C71805 * C823 + C71809 + C71809 + C141502 * C1171 +
                       C71806 * C2960 + C71810 + C71810 + C71446 * C3196) *
                          C71442 +
                      (C71844 + C71845 + C71846) * C141224) *
                         C141353 * C141298 * C816 -
                     ((C72819 + C72820 + C72821) * C141224 +
                      (C71806 * C9667 + C72807 + C72807 + C71446 * C10035 +
                       C71805 * C2960 + C72808 + C72808 + C141502 * C3196 +
                       C71804 * C823 + C72809 + C72809 + C141507 * C1171) *
                          C71442) *
                         C141353 * C141298 * C141497) *
                        C818 +
                    (((C72821 + C72820 + C72819) * C71442 +
                      (C71804 * C821 + C72810 + C72810 + C141507 * C1169 +
                       C71805 * C2962 + C72811 + C72811 + C141502 * C3198 +
                       C71806 * C9669 + C72812 + C72812 + C71446 * C10037) *
                          C141224) *
                         C141353 * C141298 * C141497 -
                     ((C71847 + C71848 + C71849) * C141224 +
                      (C71846 + C71845 + C71844) * C71442) *
                         C141353 * C141298 * C816) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C71543 +
             (C275 * C189 + C141353 * C501) * C141507 + C6988 * C71544 +
             C7366 * C141502 + C9864 * C71545 + C10124 * C71446) *
                C71442 +
            (C71924 + C71925 + C71926 + C71927 + C71928 + C71929) * C141224) *
               C141298 * C816 -
           ((C72920 + C72921 + C72922 + C72923 + C72924 + C72925) * C141224 +
            (C26008 * C71446 + C25754 * C71545 + C10124 * C141502 +
             C9864 * C71544 + C7366 * C141507 + C6988 * C71543) *
                C71442) *
               C141298 * C141497) *
              C818 +
          (((C72925 + C72924 + C72923 + C72922 + C72921 + C72920) * C71442 +
            (C1029 * C71543 + C1275 * C141507 + C6991 * C71544 +
             C7367 * C141502 + (C275 * C9669 + C141353 * C9850) * C71545 +
             (C275 * C9770 + C141353 * C10120) * C71446) *
                C141224) *
               C141298 * C141497 -
           ((C71930 + C71931 + C71932 + C71933 + C71934 + C71935) * C141224 +
            (C71929 + C71928 + C71927 + C71926 + C71925 + C71924) * C71442) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C275 +
             (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                 C141353) *
                C141507 +
            ((C72684 + C72685) * C275 + (C73040 + C73041) * C141353) * C141502 +
            ((C72688 + C72689) * C275 + (C73042 + C73043) * C141353) * C71446) *
               C141298 * C816 -
           (((C71450 * C9849 + C141224 * C10199 + C71448 * C9848 +
              C71442 * C10198) *
                 C141353 +
             (C71450 * C9668 + C141224 * C9671 + C71448 * C9667 +
              C71442 * C9670) *
                 C275) *
                C71446 +
            ((C73043 + C73042) * C141353 + (C72689 + C72688) * C275) * C141502 +
            ((C73041 + C73040) * C141353 + (C72685 + C72684) * C275) *
                C141507) *
               C141298 * C141497) *
              C818 +
          ((((C72692 + C72693) * C275 + (C73044 + C73045) * C141353) * C141507 +
            ((C72696 + C72697) * C275 + (C73046 + C73047) * C141353) * C141502 +
            ((C71448 * C9668 + C71442 * C9671 + C71450 * C9669 +
              C141224 * C9672) *
                 C275 +
             (C71448 * C9849 + C71442 * C10199 + C71450 * C9850 +
              C141224 * C10200) *
                 C141353) *
                C71446) *
               C141298 * C141497 -
           (((C73047 + C73046) * C141353 + (C72697 + C72696) * C275) * C71446 +
            ((C73045 + C73044) * C141353 + (C72693 + C72692) * C275) * C141502 +
            ((C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                 C141353 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C275) *
                C141507) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                        C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                           C275 +
                       (C71543 * C276 + C141507 * C635 + C71544 * C1006 +
                        C141502 * C1419 + C71545 * C3084 + C71446 * C3362) *
                           C141353) *
                          C71442 +
                      ((C71571 + C71572 + C71573) * C275 +
                       (C72096 + C72097 + C72098) * C141353) *
                          C141224) *
                         C141298 * C816 -
                     (((C73152 + C73153 + C73154) * C141353 +
                       (C72437 + C72438 + C72439) * C275) *
                          C141224 +
                      ((C71545 * C9848 + C71446 * C10284 + C71544 * C3084 +
                        C141502 * C3362 + C71543 * C1006 + C141507 * C1419) *
                           C141353 +
                       (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                        C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                           C275) *
                          C71442) *
                         C141298 * C141497) *
                        C818 +
                    ((((C72439 + C72438 + C72437) * C275 +
                       (C73154 + C73153 + C73152) * C141353) *
                          C71442 +
                      ((C71543 * C821 + C141507 * C910 + C71544 * C2962 +
                        C141502 * C3028 + C71545 * C9669 + C71446 * C9770) *
                           C275 +
                       (C71543 * C1004 + C141507 * C1417 + C71544 * C3086 +
                        C141502 * C3364 + C71545 * C9850 + C71446 * C10286) *
                           C141353) *
                          C141224) *
                         C141298 * C141497 -
                     (((C72099 + C72100 + C72101) * C141353 +
                       (C71580 + C71581 + C71582) * C275) *
                          C141224 +
                      ((C72098 + C72097 + C72096) * C141353 +
                       (C71573 + C71572 + C71571) * C275) *
                          C71442) *
                         C141298 * C816) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C141507 +
             C7709 * C141502 + C10372 * C71446) *
                C71442 +
            (C72176 + C72177 + C72178) * C141224) *
               C141298 * C816 -
           ((C73253 + C73254 + C73255) * C141224 +
            (C26253 * C71446 + C10372 * C141502 + C7709 * C141507) * C71442) *
               C141298 * C141497) *
              C818 +
          (((C73255 + C73254 + C73253) * C71442 +
            (C1526 * C141507 + C7710 * C141502 +
             (C713 * C9669 + C10369 + C10369 + C141353 * C10363) * C71446) *
                C141224) *
               C141298 * C141497 -
           ((C72179 + C72180 + C72181) * C141224 +
            (C72178 + C72177 + C72176) * C71442) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71447 * C108 + C71452 + C71452 + C71442 * C120 +
                       C71449 * C109 + C71453 + C71453 + C141224 * C121) *
                          C141353 * C141507 +
                      (C72316 + C72317) * C141353 * C141502 +
                      (C72318 + C72319) * C141353 * C71446) *
                         C1596 -
                     ((C71449 * C10471 + C73354 + C73354 + C141224 * C10477 +
                       C71447 * C10470 + C73355 + C73355 + C71442 * C10476) *
                          C141353 * C71446 +
                      (C71449 * C3491 + C73356 + C73356 + C141224 * C3499 +
                       C71447 * C3490 + C73357 + C73357 + C71442 * C3498) *
                          C141353 * C141502 +
                      (C71449 * C1600 + C73358 + C73358 + C141224 * C1610 +
                       C71447 * C1601 + C73359 + C73359 + C71442 * C1611) *
                          C141353 * C141507) *
                         C141499) *
                        C141281 * C818 +
                    (((C71447 * C1600 + C73360 + C73360 + C71442 * C1610 +
                       C71449 * C1599 + C73361 + C73361 + C141224 * C1609) *
                          C141353 * C141507 +
                      (C71447 * C3491 + C73362 + C73362 + C71442 * C3499 +
                       C71449 * C3492 + C73363 + C73363 + C141224 * C3500) *
                          C141353 * C141502 +
                      (C71447 * C10471 + C73364 + C73364 + C71442 * C10477 +
                       C71449 * C10472 + C73365 + C73365 + C141224 * C10478) *
                          C141353 * C71446) *
                         C141499 -
                     ((C72323 + C72322) * C141353 * C71446 +
                      (C72321 + C72320) * C141353 * C141502 +
                      (C71449 * C110 + C71462 + C71462 + C141224 * C122 +
                       C71447 * C109 + C71463 + C71463 + C71442 * C121) *
                          C141353 * C141507) *
                         C1596) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                       C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                          C71448 +
                      (C71543 * C114 + C141507 * C195 + C71544 * C828 +
                       C141502 * C917 + C71545 * C2964 + C71446 * C3030) *
                          C71442 +
                      (C71571 + C71572 + C71573) * C71450 +
                      (C71574 + C71575 + C71576) * C141224) *
                         C141353 * C1596 -
                     ((C73476 + C73477 + C73478) * C141224 +
                      (C73479 + C73480 + C73481) * C71450 +
                      (C71545 * C10473 + C71446 * C10598 + C71544 * C3494 +
                       C141502 * C3576 + C71543 * C1606 + C141507 * C1695) *
                          C71442 +
                      (C71545 * C10470 + C71446 * C10595 + C71544 * C3490 +
                       C141502 * C3572 + C71543 * C1601 + C141507 * C1690) *
                          C71448) *
                         C141353 * C141499) *
                        C141281 * C818 +
                    (((C73481 + C73480 + C73479) * C71448 +
                      (C73478 + C73477 + C73476) * C71442 +
                      (C71543 * C1599 + C141507 * C1688 + C71544 * C3492 +
                       C141502 * C3574 + C71545 * C10472 + C71446 * C10597) *
                          C71450 +
                      (C71543 * C1604 + C141507 * C1693 + C71544 * C3496 +
                       C141502 * C3578 + C71545 * C10475 + C71446 * C10600) *
                          C141224) *
                         C141353 * C141499 -
                     ((C71577 + C71578 + C71579) * C141224 +
                      (C71580 + C71581 + C71582) * C71450 +
                      (C71576 + C71575 + C71574) * C71442 +
                      (C71573 + C71572 + C71571) * C71448) *
                         C141353 * C1596) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C71448 +
             (C275 * C114 + C141353 * C282) * C71442 + C305 * C71450 +
             C306 * C141224) *
                C141507 +
            (C72538 + C72539 + C72540 + C72541) * C141502 +
            (C72542 + C72543 + C72544 + C72545) * C71446) *
               C1596 -
           ((C23973 * C141224 + C23974 * C71450 + C26594 * C71442 +
             C26595 * C71448) *
                C71446 +
            (C8054 * C141224 + C8055 * C71450 + C10714 * C71442 +
             C10715 * C71448) *
                C141502 +
            (C1808 * C141224 + C1809 * C71450 +
             (C275 * C1606 + C141353 * C1789) * C71442 +
             (C275 * C1601 + C141353 * C1784) * C71448) *
                C141507) *
               C141499) *
              C141281 * C818 +
          (((C1809 * C71448 + C1808 * C71442 + C1807 * C71450 +
             C1806 * C141224) *
                C141507 +
            (C8055 * C71448 + C8054 * C71442 + C8053 * C71450 +
             C8052 * C141224) *
                C141502 +
            (C23974 * C71448 + C23973 * C71442 +
             (C275 * C10472 + C141353 * C10701) * C71450 +
             (C275 * C10475 + C141353 * C10704) * C141224) *
                C71446) *
               C141499 -
           ((C72553 + C72552 + C72551 + C72550) * C71446 +
            (C72549 + C72548 + C72547 + C72546) * C141502 +
            (C308 * C141224 + C307 * C71450 + C306 * C71442 + C305 * C71448) *
                C141507) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C71543 +
            (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                C141507 +
            (C72684 + C72685) * C71544 + (C72686 + C72687) * C141502 +
            (C72688 + C72689) * C71545 + (C72690 + C72691) * C71446) *
               C141353 * C1596 -
           ((C71450 * C10596 + C141224 * C10816 + C71448 * C10595 +
             C71442 * C10815) *
                C71446 +
            (C71450 * C10471 + C141224 * C10474 + C71448 * C10470 +
             C71442 * C10473) *
                C71545 +
            (C71450 * C3573 + C141224 * C3721 + C71448 * C3572 +
             C71442 * C3720) *
                C141502 +
            (C71450 * C3491 + C141224 * C3495 + C71448 * C3490 +
             C71442 * C3494) *
                C71544 +
            (C71450 * C1689 + C141224 * C1877 + C71448 * C1690 +
             C71442 * C1878) *
                C141507 +
            (C71450 * C1600 + C141224 * C1605 + C71448 * C1601 +
             C71442 * C1606) *
                C71543) *
               C141353 * C141499) *
              C141281 * C818 +
          (((C71448 * C1600 + C71442 * C1605 + C71450 * C1599 +
             C141224 * C1604) *
                C71543 +
            (C71448 * C1689 + C71442 * C1877 + C71450 * C1688 +
             C141224 * C1876) *
                C141507 +
            (C71448 * C3491 + C71442 * C3495 + C71450 * C3492 +
             C141224 * C3496) *
                C71544 +
            (C71448 * C3573 + C71442 * C3721 + C71450 * C3574 +
             C141224 * C3722) *
                C141502 +
            (C71448 * C10471 + C71442 * C10474 + C71450 * C10472 +
             C141224 * C10475) *
                C71545 +
            (C71448 * C10596 + C71442 * C10816 + C71450 * C10597 +
             C141224 * C10817) *
                C71446) *
               C141353 * C141499 -
           ((C72699 + C72698) * C71446 + (C72697 + C72696) * C71545 +
            (C72695 + C72694) * C141502 + (C72693 + C72692) * C71544 +
            (C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                C141507 +
            (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                C71543) *
               C141353 * C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71804 * C108 + C71808 + C71808 + C141507 * C419 +
                       C71805 * C823 + C71809 + C71809 + C141502 * C1171 +
                       C71806 * C2960 + C71810 + C71810 + C71446 * C3196) *
                          C71442 +
                      (C71844 + C71845 + C71846) * C141224) *
                         C141353 * C1596 -
                     ((C73797 + C73798 + C73799) * C141224 +
                      (C71806 * C10470 + C73785 + C73785 + C71446 * C10934 +
                       C71805 * C3490 + C73786 + C73786 + C141502 * C3790 +
                       C71804 * C1601 + C73787 + C73787 + C141507 * C1949) *
                          C71442) *
                         C141353 * C141499) *
                        C141281 * C818 +
                    (((C73799 + C73798 + C73797) * C71442 +
                      (C71804 * C1599 + C73788 + C73788 + C141507 * C1947 +
                       C71805 * C3492 + C73789 + C73789 + C141502 * C3792 +
                       C71806 * C10472 + C73790 + C73790 + C71446 * C10936) *
                          C141224) *
                         C141353 * C141499 -
                     ((C71847 + C71848 + C71849) * C141224 +
                      (C71846 + C71845 + C71844) * C71442) *
                         C141353 * C1596) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C71543 +
             (C275 * C189 + C141353 * C501) * C141507 + C6988 * C71544 +
             C7366 * C141502 + C9864 * C71545 + C10124 * C71446) *
                C71442 +
            (C71924 + C71925 + C71926 + C71927 + C71928 + C71929) * C141224) *
               C1596 -
           ((C73898 + C73899 + C73900 + C73901 + C73902 + C73903) * C141224 +
            (C26930 * C71446 + C26595 * C71545 + C11047 * C141502 +
             C10715 * C71544 + (C275 * C1690 + C141353 * C2040) * C141507 +
             (C275 * C1601 + C141353 * C1784) * C71543) *
                C71442) *
               C141499) *
              C141281 * C818 +
          (((C73903 + C73902 + C73901 + C73900 + C73899 + C73898) * C71442 +
            (C1807 * C71543 + C2053 * C141507 + C8053 * C71544 +
             C8388 * C141502 + (C275 * C10472 + C141353 * C10701) * C71545 +
             (C275 * C10597 + C141353 * C11043) * C71446) *
                C141224) *
               C141499 -
           ((C71930 + C71931 + C71932 + C71933 + C71934 + C71935) * C141224 +
            (C71929 + C71928 + C71927 + C71926 + C71925 + C71924) * C71442) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C275 +
             (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                 C141353) *
                C141507 +
            ((C72684 + C72685) * C275 + (C73040 + C73041) * C141353) * C141502 +
            ((C72688 + C72689) * C275 + (C73042 + C73043) * C141353) * C71446) *
               C1596 -
           (((C71450 * C10700 + C141224 * C11146 + C71448 * C10699 +
              C71442 * C11145) *
                 C141353 +
             (C71450 * C10471 + C141224 * C10474 + C71448 * C10470 +
              C71442 * C10473) *
                 C275) *
                C71446 +
            ((C71450 * C3647 + C141224 * C3935 + C71448 * C3646 +
              C71442 * C3934) *
                 C141353 +
             (C71450 * C3491 + C141224 * C3495 + C71448 * C3490 +
              C71442 * C3494) *
                 C275) *
                C141502 +
            ((C71450 * C1783 + C141224 * C2125 + C71448 * C1784 +
              C71442 * C2126) *
                 C141353 +
             (C71450 * C1600 + C141224 * C1605 + C71448 * C1601 +
              C71442 * C1606) *
                 C275) *
                C141507) *
               C141499) *
              C141281 * C818 +
          ((((C71448 * C1600 + C71442 * C1605 + C71450 * C1599 +
              C141224 * C1604) *
                 C275 +
             (C71448 * C1783 + C71442 * C2125 + C71450 * C1782 +
              C141224 * C2124) *
                 C141353) *
                C141507 +
            ((C71448 * C3491 + C71442 * C3495 + C71450 * C3492 +
              C141224 * C3496) *
                 C275 +
             (C71448 * C3647 + C71442 * C3935 + C71450 * C3648 +
              C141224 * C3936) *
                 C141353) *
                C141502 +
            ((C71448 * C10471 + C71442 * C10474 + C71450 * C10472 +
              C141224 * C10475) *
                 C275 +
             (C71448 * C10700 + C71442 * C11146 + C71450 * C10701 +
              C141224 * C11147) *
                 C141353) *
                C71446) *
               C141499 -
           (((C73047 + C73046) * C141353 + (C72697 + C72696) * C275) * C71446 +
            ((C73045 + C73044) * C141353 + (C72693 + C72692) * C275) * C141502 +
            ((C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                 C141353 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C275) *
                C141507) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                        C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                           C275 +
                       (C71543 * C276 + C141507 * C635 + C71544 * C1006 +
                        C141502 * C1419 + C71545 * C3084 + C71446 * C3362) *
                           C141353) *
                          C71442 +
                      ((C71571 + C71572 + C71573) * C275 +
                       (C72096 + C72097 + C72098) * C141353) *
                          C141224) *
                         C1596 -
                     (((C74106 + C74107 + C74108) * C141353 +
                       (C73479 + C73480 + C73481) * C275) *
                          C141224 +
                      ((C71545 * C10699 + C71446 * C11255 + C71544 * C3646 +
                        C141502 * C4004 + C71543 * C1784 + C141507 * C2197) *
                           C141353 +
                       (C71545 * C10470 + C71446 * C10595 + C71544 * C3490 +
                        C141502 * C3572 + C71543 * C1601 + C141507 * C1690) *
                           C275) *
                          C71442) *
                         C141499) *
                        C141281 * C818 +
                    ((((C73481 + C73480 + C73479) * C275 +
                       (C74108 + C74107 + C74106) * C141353) *
                          C71442 +
                      ((C71543 * C1599 + C141507 * C1688 + C71544 * C3492 +
                        C141502 * C3574 + C71545 * C10472 + C71446 * C10597) *
                           C275 +
                       (C71543 * C1782 + C141507 * C2195 + C71544 * C3648 +
                        C141502 * C4006 + C71545 * C10701 + C71446 * C11257) *
                           C141353) *
                          C141224) *
                         C141499 -
                     (((C72099 + C72100 + C72101) * C141353 +
                       (C71580 + C71581 + C71582) * C275) *
                          C141224 +
                      ((C72098 + C72097 + C72096) * C141353 +
                       (C71573 + C71572 + C71571) * C275) *
                          C71442) *
                         C1596) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C141507 +
             C7709 * C141502 + C10372 * C71446) *
                C71442 +
            (C72176 + C72177 + C72178) * C141224) *
               C1596 -
           ((C74207 + C74208 + C74209) * C141224 +
            (C27249 * C71446 + C11367 * C141502 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141507) *
                C71442) *
               C141499) *
              C141281 * C818 +
          (((C74209 + C74208 + C74207) * C71442 +
            (C2304 * C141507 + C8708 * C141502 +
             (C713 * C10472 + C11364 + C11364 + C141353 * C11358) * C71446) *
                C141224) *
               C141499 -
           ((C72179 + C72180 + C72181) * C141224 +
            (C72178 + C72177 + C72176) * C71442) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[12] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71447 * C108 + C71452 + C71452 + C71442 * C120 +
                       C71449 * C109 + C71453 + C71453 + C141224 * C121) *
                          C141353 * C141507 +
                      (C72316 + C72317) * C141353 * C141502 +
                      (C72318 + C72319) * C141353 * C71446) *
                         C141298 * C2374 -
                     ((C71449 * C9668 + C72288 + C72288 + C141224 * C9674 +
                       C71447 * C9667 + C72289 + C72289 + C71442 * C9673) *
                          C141353 * C71446 +
                      (C72319 + C72318) * C141353 * C141502 +
                      (C72317 + C72316) * C141353 * C141507) *
                         C141298 * C141497) *
                        C2376 +
                    (((C72320 + C72321) * C141353 * C141507 +
                      (C72322 + C72323) * C141353 * C141502 +
                      (C71447 * C9668 + C72298 + C72298 + C71442 * C9674 +
                       C71449 * C9669 + C72299 + C72299 + C141224 * C9675) *
                          C141353 * C71446) *
                         C141298 * C141497 -
                     ((C72323 + C72322) * C141353 * C71446 +
                      (C72321 + C72320) * C141353 * C141502 +
                      (C71449 * C110 + C71462 + C71462 + C141224 * C122 +
                       C71447 * C109 + C71463 + C71463 + C71442 * C121) *
                          C141353 * C141507) *
                         C141298 * C2374) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[12] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                       C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                          C71448 +
                      (C71543 * C114 + C141507 * C195 + C71544 * C828 +
                       C141502 * C917 + C71545 * C2964 + C71446 * C3030) *
                          C71442 +
                      (C71571 + C71572 + C71573) * C71450 +
                      (C71574 + C71575 + C71576) * C141224) *
                         C141353 * C141298 * C2374 -
                     ((C72434 + C72435 + C72436) * C141224 +
                      (C72437 + C72438 + C72439) * C71450 +
                      (C71545 * C9670 + C71446 * C9771 + C71544 * C2964 +
                       C141502 * C3030 + C71543 * C828 + C141507 * C917) *
                          C71442 +
                      (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                       C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                          C71448) *
                         C141353 * C141298 * C141497) *
                        C2376 +
                    (((C72439 + C72438 + C72437) * C71448 +
                      (C72436 + C72435 + C72434) * C71442 +
                      (C71543 * C821 + C141507 * C910 + C71544 * C2962 +
                       C141502 * C3028 + C71545 * C9669 + C71446 * C9770) *
                          C71450 +
                      (C71543 * C826 + C141507 * C915 + C71544 * C2966 +
                       C141502 * C3032 + C71545 * C9672 + C71446 * C9773) *
                          C141224) *
                         C141353 * C141298 * C141497 -
                     ((C71577 + C71578 + C71579) * C141224 +
                      (C71580 + C71581 + C71582) * C71450 +
                      (C71576 + C71575 + C71574) * C71442 +
                      (C71573 + C71572 + C71571) * C71448) *
                         C141353 * C141298 * C2374) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C71448 +
             (C275 * C114 + C141353 * C282) * C71442 + C305 * C71450 +
             C306 * C141224) *
                C141507 +
            (C72538 + C72539 + C72540 + C72541) * C141502 +
            (C72542 + C72543 + C72544 + C72545) * C71446) *
               C141298 * C2374 -
           ((C22933 * C141224 + C22934 * C71450 + C25753 * C71442 +
             C25754 * C71448) *
                C71446 +
            (C72545 + C72544 + C72543 + C72542) * C141502 +
            (C72541 + C72540 + C72539 + C72538) * C141507) *
               C141298 * C141497) *
              C2376 +
          (((C72546 + C72547 + C72548 + C72549) * C141507 +
            (C72550 + C72551 + C72552 + C72553) * C141502 +
            (C22934 * C71448 + C22933 * C71442 +
             (C275 * C9669 + C141353 * C9850) * C71450 +
             (C275 * C9672 + C141353 * C9853) * C141224) *
                C71446) *
               C141298 * C141497 -
           ((C72553 + C72552 + C72551 + C72550) * C71446 +
            (C72549 + C72548 + C72547 + C72546) * C141502 +
            (C308 * C141224 + C307 * C71450 + C306 * C71442 + C305 * C71448) *
                C141507) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C71543 +
            (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                C141507 +
            (C72684 + C72685) * C71544 + (C72686 + C72687) * C141502 +
            (C72688 + C72689) * C71545 + (C72690 + C72691) * C71446) *
               C141353 * C141298 * C2374 -
           ((C71450 * C9769 + C141224 * C9941 + C71448 * C9768 +
             C71442 * C9940) *
                C71446 +
            (C71450 * C9668 + C141224 * C9671 + C71448 * C9667 +
             C71442 * C9670) *
                C71545 +
            (C72691 + C72690) * C141502 + (C72689 + C72688) * C71544 +
            (C72687 + C72686) * C141507 + (C72685 + C72684) * C71543) *
               C141353 * C141298 * C141497) *
              C2376 +
          (((C72692 + C72693) * C71543 + (C72694 + C72695) * C141507 +
            (C72696 + C72697) * C71544 + (C72698 + C72699) * C141502 +
            (C71448 * C9668 + C71442 * C9671 + C71450 * C9669 +
             C141224 * C9672) *
                C71545 +
            (C71448 * C9769 + C71442 * C9941 + C71450 * C9770 +
             C141224 * C9942) *
                C71446) *
               C141353 * C141298 * C141497 -
           ((C72699 + C72698) * C71446 + (C72697 + C72696) * C71545 +
            (C72695 + C72694) * C141502 + (C72693 + C72692) * C71544 +
            (C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                C141507 +
            (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                C71543) *
               C141353 * C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[12] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71804 * C108 + C71808 + C71808 + C141507 * C419 +
                       C71805 * C823 + C71809 + C71809 + C141502 * C1171 +
                       C71806 * C2960 + C71810 + C71810 + C71446 * C3196) *
                          C71442 +
                      (C71844 + C71845 + C71846) * C141224) *
                         C141353 * C141298 * C2374 -
                     ((C72819 + C72820 + C72821) * C141224 +
                      (C71806 * C9667 + C72807 + C72807 + C71446 * C10035 +
                       C71805 * C2960 + C72808 + C72808 + C141502 * C3196 +
                       C71804 * C823 + C72809 + C72809 + C141507 * C1171) *
                          C71442) *
                         C141353 * C141298 * C141497) *
                        C2376 +
                    (((C72821 + C72820 + C72819) * C71442 +
                      (C71804 * C821 + C72810 + C72810 + C141507 * C1169 +
                       C71805 * C2962 + C72811 + C72811 + C141502 * C3198 +
                       C71806 * C9669 + C72812 + C72812 + C71446 * C10037) *
                          C141224) *
                         C141353 * C141298 * C141497 -
                     ((C71847 + C71848 + C71849) * C141224 +
                      (C71846 + C71845 + C71844) * C71442) *
                         C141353 * C141298 * C2374) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C71543 +
             (C275 * C189 + C141353 * C501) * C141507 + C6988 * C71544 +
             C7366 * C141502 + C9864 * C71545 + C10124 * C71446) *
                C71442 +
            (C71924 + C71925 + C71926 + C71927 + C71928 + C71929) * C141224) *
               C141298 * C2374 -
           ((C72920 + C72921 + C72922 + C72923 + C72924 + C72925) * C141224 +
            (C26008 * C71446 + C25754 * C71545 + C10124 * C141502 +
             C9864 * C71544 + C7366 * C141507 + C6988 * C71543) *
                C71442) *
               C141298 * C141497) *
              C2376 +
          (((C72925 + C72924 + C72923 + C72922 + C72921 + C72920) * C71442 +
            (C1029 * C71543 + C1275 * C141507 + C6991 * C71544 +
             C7367 * C141502 + (C275 * C9669 + C141353 * C9850) * C71545 +
             (C275 * C9770 + C141353 * C10120) * C71446) *
                C141224) *
               C141298 * C141497 -
           ((C71930 + C71931 + C71932 + C71933 + C71934 + C71935) * C141224 +
            (C71929 + C71928 + C71927 + C71926 + C71925 + C71924) * C71442) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C275 +
             (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                 C141353) *
                C141507 +
            ((C72684 + C72685) * C275 + (C73040 + C73041) * C141353) * C141502 +
            ((C72688 + C72689) * C275 + (C73042 + C73043) * C141353) * C71446) *
               C141298 * C2374 -
           (((C71450 * C9849 + C141224 * C10199 + C71448 * C9848 +
              C71442 * C10198) *
                 C141353 +
             (C71450 * C9668 + C141224 * C9671 + C71448 * C9667 +
              C71442 * C9670) *
                 C275) *
                C71446 +
            ((C73043 + C73042) * C141353 + (C72689 + C72688) * C275) * C141502 +
            ((C73041 + C73040) * C141353 + (C72685 + C72684) * C275) *
                C141507) *
               C141298 * C141497) *
              C2376 +
          ((((C72692 + C72693) * C275 + (C73044 + C73045) * C141353) * C141507 +
            ((C72696 + C72697) * C275 + (C73046 + C73047) * C141353) * C141502 +
            ((C71448 * C9668 + C71442 * C9671 + C71450 * C9669 +
              C141224 * C9672) *
                 C275 +
             (C71448 * C9849 + C71442 * C10199 + C71450 * C9850 +
              C141224 * C10200) *
                 C141353) *
                C71446) *
               C141298 * C141497 -
           (((C73047 + C73046) * C141353 + (C72697 + C72696) * C275) * C71446 +
            ((C73045 + C73044) * C141353 + (C72693 + C72692) * C275) * C141502 +
            ((C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                 C141353 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C275) *
                C141507) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[12] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                        C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                           C275 +
                       (C71543 * C276 + C141507 * C635 + C71544 * C1006 +
                        C141502 * C1419 + C71545 * C3084 + C71446 * C3362) *
                           C141353) *
                          C71442 +
                      ((C71571 + C71572 + C71573) * C275 +
                       (C72096 + C72097 + C72098) * C141353) *
                          C141224) *
                         C141298 * C2374 -
                     (((C73152 + C73153 + C73154) * C141353 +
                       (C72437 + C72438 + C72439) * C275) *
                          C141224 +
                      ((C71545 * C9848 + C71446 * C10284 + C71544 * C3084 +
                        C141502 * C3362 + C71543 * C1006 + C141507 * C1419) *
                           C141353 +
                       (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                        C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                           C275) *
                          C71442) *
                         C141298 * C141497) *
                        C2376 +
                    ((((C72439 + C72438 + C72437) * C275 +
                       (C73154 + C73153 + C73152) * C141353) *
                          C71442 +
                      ((C71543 * C821 + C141507 * C910 + C71544 * C2962 +
                        C141502 * C3028 + C71545 * C9669 + C71446 * C9770) *
                           C275 +
                       (C71543 * C1004 + C141507 * C1417 + C71544 * C3086 +
                        C141502 * C3364 + C71545 * C9850 + C71446 * C10286) *
                           C141353) *
                          C141224) *
                         C141298 * C141497 -
                     (((C72099 + C72100 + C72101) * C141353 +
                       (C71580 + C71581 + C71582) * C275) *
                          C141224 +
                      ((C72098 + C72097 + C72096) * C141353 +
                       (C71573 + C71572 + C71571) * C275) *
                          C71442) *
                         C141298 * C2374) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[12] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C141507 +
             C7709 * C141502 + C10372 * C71446) *
                C71442 +
            (C72176 + C72177 + C72178) * C141224) *
               C141298 * C2374 -
           ((C73253 + C73254 + C73255) * C141224 +
            (C26253 * C71446 + C10372 * C141502 + C7709 * C141507) * C71442) *
               C141298 * C141497) *
              C2376 +
          (((C73255 + C73254 + C73253) * C71442 +
            (C1526 * C141507 + C7710 * C141502 +
             (C713 * C9669 + C10369 + C10369 + C141353 * C10363) * C71446) *
                C141224) *
               C141298 * C141497 -
           ((C72179 + C72180 + C72181) * C141224 +
            (C72178 + C72177 + C72176) * C71442) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C71447 * C108 + C71452 + C71452 + C71442 * C120 +
                      C71449 * C109 + C71453 + C71453 + C141224 * C121) *
                         C141353 * C141507 +
                     (C72316 + C72317) * C141353 * C141502 + C75173 * C71446) *
                        C141298 * C2956 -
                    ((C75178 + C75179) * C141353 * C71446 +
                     (C72319 + C72318) * C141353 * C141502 +
                     (C72317 + C72316) * C141353 * C141507) *
                        C141298 * C2957 +
                    (C75173 * C141507 + (C75179 + C75178) * C141353 * C141502 +
                     (C71447 * C25568 + C75171 + C75171 + C71442 * C25572 +
                      C71449 * C25569 + C75172 + C75172 + C141224 * C25573) *
                         C141353 * C71446) *
                        C141298 * C2958) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexy[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                      C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                         C71448 +
                     (C71543 * C114 + C141507 * C195 + C71544 * C828 +
                      C141502 * C917 + C71545 * C2964 + C71446 * C3030) *
                         C71442 +
                     (C71571 + C71572 + C71573) * C71450 +
                     (C71574 + C71575 + C71576) * C141224) *
                        C141353 * C141298 * C2956 -
                    ((C72434 + C72435 + C72436) * C141224 +
                     (C72437 + C72438 + C72439) * C71450 +
                     (C71545 * C9670 + C71446 * C9771 + C71544 * C2964 +
                      C141502 * C3030 + C71543 * C828 + C141507 * C917) *
                         C71442 +
                     (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                      C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                         C71448) *
                        C141353 * C141298 * C2957 +
                    ((C71543 * C2960 + C141507 * C3026 + C71544 * C9667 +
                      C141502 * C9768 + C71545 * C25568 + C71446 * C25662) *
                         C71448 +
                     (C71543 * C2964 + C141507 * C3030 + C71544 * C9670 +
                      C141502 * C9771 + C71545 * C25570 + C71446 * C25664) *
                         C71442 +
                     (C71543 * C2961 + C141507 * C3027 + C71544 * C9668 +
                      C141502 * C9769 + C71545 * C25569 + C71446 * C25663) *
                         C71450 +
                     (C71543 * C2965 + C141507 * C3031 + C71544 * C9671 +
                      C141502 * C9772 + C71545 * C25571 + C71446 * C25665) *
                         C141224) *
                        C141353 * C141298 * C2958) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexz[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C71448 +
            (C275 * C114 + C141353 * C282) * C71442 + C305 * C71450 +
            C306 * C141224) *
               C141507 +
           (C72538 + C72539 + C72540 + C72541) * C141502 + C75334 * C71446) *
              C141298 * C2956 -
          ((C75329 + C75330 + C75331 + C75332) * C71446 +
           (C72545 + C72544 + C72543 + C72542) * C141502 +
           (C72541 + C72540 + C72539 + C72538) * C141507) *
              C141298 * C2957 +
          (C75334 * C141507 + (C75332 + C75331 + C75330 + C75329) * C141502 +
           (C32302 * C71448 + C32301 * C71442 +
            (C275 * C25569 + C141353 * C25741) * C71450 +
            (C275 * C25571 + C141353 * C25743) * C141224) *
               C71446) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
               C71543 +
           (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
               C141507 +
           (C72684 + C72685) * C71544 + (C72686 + C72687) * C141502 +
           C75409 * C71545 + C75410 * C71446) *
              C141353 * C141298 * C2956 -
          ((C75419 + C75420) * C71446 + (C75421 + C75422) * C71545 +
           (C72691 + C72690) * C141502 + (C72689 + C72688) * C71544 +
           (C72687 + C72686) * C141507 + (C72685 + C72684) * C71543) *
              C141353 * C141298 * C2957 +
          (C75409 * C71543 + C75410 * C141507 + (C75422 + C75421) * C71544 +
           (C75420 + C75419) * C141502 +
           (C71448 * C25568 + C71442 * C25570 + C71450 * C25569 +
            C141224 * C25571) *
               C71545 +
           (C71448 * C25662 + C71442 * C25831 + C71450 * C25663 +
            C141224 * C25832) *
               C71446) *
              C141353 * C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C71804 * C108 + C71808 + C71808 + C141507 * C419 +
                      C71805 * C823 + C71809 + C71809 + C141502 * C1171 +
                      C71806 * C2960 + C71810 + C71810 + C71446 * C3196) *
                         C71442 +
                     (C71844 + C71845 + C71846) * C141224) *
                        C141353 * C141298 * C2956 -
                    ((C72819 + C72820 + C72821) * C141224 +
                     (C71806 * C9667 + C72807 + C72807 + C71446 * C10035 +
                      C71805 * C2960 + C72808 + C72808 + C141502 * C3196 +
                      C71804 * C823 + C72809 + C72809 + C141507 * C1171) *
                         C71442) *
                        C141353 * C141298 * C2957 +
                    ((C71804 * C2960 + C75497 + C75497 + C141507 * C3196 +
                      C71805 * C9667 + C75498 + C75498 + C141502 * C10035 +
                      C71806 * C25568 + C75499 + C75499 + C71446 * C25921) *
                         C71442 +
                     (C71804 * C2961 + C75500 + C75500 + C141507 * C3197 +
                      C71805 * C9668 + C75501 + C75501 + C141502 * C10036 +
                      C71806 * C25569 + C75502 + C75502 + C71446 * C25922) *
                         C141224) *
                        C141353 * C141298 * C2958) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C71543 +
            (C275 * C189 + C141353 * C501) * C141507 + C6988 * C71544 +
            C7366 * C141502 + C9864 * C71545 + C10124 * C71446) *
               C71442 +
           (C71924 + C71925 + C71926 + C71927 + C71928 + C71929) * C141224) *
              C141298 * C2956 -
          ((C72920 + C72921 + C72922 + C72923 + C72924 + C72925) * C141224 +
           (C26008 * C71446 + C25754 * C71545 + C10124 * C141502 +
            C9864 * C71544 + C7366 * C141507 + C6988 * C71543) *
               C71442) *
              C141298 * C2957 +
          ((C9864 * C71543 + C10124 * C141507 + C25754 * C71544 +
            C26008 * C141502 + C32302 * C71545 + C32470 * C71446) *
               C71442 +
           (C6993 * C71543 + C7368 * C141507 + C22934 * C71544 +
            C23308 * C141502 + (C275 * C25569 + C141353 * C25741) * C71545 +
            (C275 * C25663 + C141353 * C26004) * C71446) *
               C141224) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C275 +
            (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                C141353) *
               C141507 +
           ((C72684 + C72685) * C275 + (C73040 + C73041) * C141353) * C141502 +
           C75660 * C71446) *
              C141298 * C2956 -
          (((C75658 + C75659) * C141353 + (C75421 + C75422) * C275) * C71446 +
           ((C73043 + C73042) * C141353 + (C72689 + C72688) * C275) * C141502 +
           ((C73041 + C73040) * C141353 + (C72685 + C72684) * C275) * C141507) *
              C141298 * C2957 +
          (C75660 * C141507 +
           ((C75422 + C75421) * C275 + (C75659 + C75658) * C141353) * C141502 +
           ((C71448 * C25568 + C71442 * C25570 + C71450 * C25569 +
             C141224 * C25571) *
                C275 +
            (C71448 * C25740 + C71442 * C26082 + C71450 * C25741 +
             C141224 * C26083) *
                C141353) *
               C71446) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                       C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                          C275 +
                      (C71543 * C276 + C141507 * C635 + C71544 * C1006 +
                       C141502 * C1419 + C71545 * C3084 + C71446 * C3362) *
                          C141353) *
                         C71442 +
                     ((C71571 + C71572 + C71573) * C275 +
                      (C72096 + C72097 + C72098) * C141353) *
                         C141224) *
                        C141298 * C2956 -
                    (((C73152 + C73153 + C73154) * C141353 +
                      (C72437 + C72438 + C72439) * C275) *
                         C141224 +
                     ((C71545 * C9848 + C71446 * C10284 + C71544 * C3084 +
                       C141502 * C3362 + C71543 * C1006 + C141507 * C1419) *
                          C141353 +
                      (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                       C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                          C275) *
                         C71442) *
                        C141298 * C2957 +
                    (((C71543 * C2960 + C141507 * C3026 + C71544 * C9667 +
                       C141502 * C9768 + C71545 * C25568 + C71446 * C25662) *
                          C275 +
                      (C71543 * C3084 + C141507 * C3362 + C71544 * C9848 +
                       C141502 * C10284 + C71545 * C25740 + C71446 * C26168) *
                          C141353) *
                         C71442 +
                     ((C71543 * C2961 + C141507 * C3027 + C71544 * C9668 +
                       C141502 * C9769 + C71545 * C25569 + C71446 * C25663) *
                          C275 +
                      (C71543 * C3085 + C141507 * C3363 + C71544 * C9849 +
                       C141502 * C10285 + C71545 * C25741 + C71446 * C26169) *
                          C141353) *
                         C141224) *
                        C141298 * C2958) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezz[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141507 +
            C7709 * C141502 + C10372 * C71446) *
               C71442 +
           (C72176 + C72177 + C72178) * C141224) *
              C141298 * C2956 -
          ((C73253 + C73254 + C73255) * C141224 +
           (C26253 * C71446 + C10372 * C141502 + C7709 * C141507) * C71442) *
              C141298 * C2957 +
          ((C10372 * C141507 + C26253 * C141502 + C32636 * C71446) * C71442 +
           (C7711 * C141507 + C23643 * C141502 +
            (C713 * C25569 + C26250 + C26250 + C141353 * C26245) * C71446) *
               C141224) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[14] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71447 * C108 + C71452 + C71452 + C71442 * C120 +
                       C71449 * C109 + C71453 + C71453 + C141224 * C121) *
                          C141353 * C141507 +
                      (C72316 + C72317) * C141353 * C141502 + C75173 * C71446) *
                         C1596 -
                     ((C75925 + C75926) * C141353 * C71446 +
                      (C75927 + C75928) * C141353 * C141502 +
                      (C71449 * C1600 + C73358 + C73358 + C141224 * C1610 +
                       C71447 * C1601 + C73359 + C73359 + C71442 * C1611) *
                          C141353 * C141507) *
                         C141499) *
                        C2374 +
                    (((C75928 + C75927) * C141353 * C141507 +
                      (C75926 + C75925) * C141353 * C141502 +
                      (C71447 * C26351 + C75915 + C75915 + C71442 * C26355 +
                       C71449 * C26352 + C75916 + C75916 + C141224 * C26356) *
                          C141353 * C71446) *
                         C141499 -
                     ((C75178 + C75179) * C141353 * C71446 +
                      (C72319 + C72318) * C141353 * C141502 +
                      (C72317 + C72316) * C141353 * C141507) *
                         C1596) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexy[14] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                       C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                          C71448 +
                      (C71543 * C114 + C141507 * C195 + C71544 * C828 +
                       C141502 * C917 + C71545 * C2964 + C71446 * C3030) *
                          C71442 +
                      (C71571 + C71572 + C71573) * C71450 +
                      (C71574 + C71575 + C71576) * C141224) *
                         C141353 * C1596 -
                     ((C73476 + C73477 + C73478) * C141224 +
                      (C73479 + C73480 + C73481) * C71450 +
                      (C71545 * C10473 + C71446 * C10598 + C71544 * C3494 +
                       C141502 * C3576 + C71543 * C1606 + C141507 * C1695) *
                          C71442 +
                      (C71545 * C10470 + C71446 * C10595 + C71544 * C3490 +
                       C141502 * C3572 + C71543 * C1601 + C141507 * C1690) *
                          C71448) *
                         C141353 * C141499) *
                        C2374 +
                    (((C71543 * C3490 + C141507 * C3572 + C71544 * C10470 +
                       C141502 * C10595 + C71545 * C26351 + C71446 * C26477) *
                          C71448 +
                      (C71543 * C3494 + C141507 * C3576 + C71544 * C10473 +
                       C141502 * C10598 + C71545 * C26353 + C71446 * C26479) *
                          C71442 +
                      (C71543 * C3491 + C141507 * C3573 + C71544 * C10471 +
                       C141502 * C10596 + C71545 * C26352 + C71446 * C26478) *
                          C71450 +
                      (C71543 * C3495 + C141507 * C3577 + C71544 * C10474 +
                       C141502 * C10599 + C71545 * C26354 + C71446 * C26480) *
                          C141224) *
                         C141353 * C141499 -
                     ((C72434 + C72435 + C72436) * C141224 +
                      (C72437 + C72438 + C72439) * C71450 +
                      (C71545 * C9670 + C71446 * C9771 + C71544 * C2964 +
                       C141502 * C3030 + C71543 * C828 + C141507 * C917) *
                          C71442 +
                      (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                       C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                          C71448) *
                         C141353 * C1596) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexz[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C71448 +
             (C275 * C114 + C141353 * C282) * C71442 + C305 * C71450 +
             C306 * C141224) *
                C141507 +
            (C72538 + C72539 + C72540 + C72541) * C141502 + C75334 * C71446) *
               C1596 -
           ((C76125 + C76126 + C76127 + C76128) * C71446 +
            (C76129 + C76130 + C76131 + C76132) * C141502 +
            (C1808 * C141224 + C1809 * C71450 +
             (C275 * C1606 + C141353 * C1789) * C71442 +
             (C275 * C1601 + C141353 * C1784) * C71448) *
                C141507) *
               C141499) *
              C2374 +
          (((C76132 + C76131 + C76130 + C76129) * C141507 +
            (C76128 + C76127 + C76126 + C76125) * C141502 +
            (C32870 * C71448 + C32869 * C71442 +
             (C275 * C26352 + C141353 * C26580) * C71450 +
             (C275 * C26354 + C141353 * C26582) * C141224) *
                C71446) *
               C141499 -
           ((C75329 + C75330 + C75331 + C75332) * C71446 +
            (C72545 + C72544 + C72543 + C72542) * C141502 +
            (C72541 + C72540 + C72539 + C72538) * C141507) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C71543 +
            (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                C141507 +
            (C72684 + C72685) * C71544 + (C72686 + C72687) * C141502 +
            C75409 * C71545 + C75410 * C71446) *
               C141353 * C1596 -
           ((C76247 + C76248) * C71446 + (C76249 + C76250) * C71545 +
            (C76251 + C76252) * C141502 + (C76253 + C76254) * C71544 +
            (C71450 * C1689 + C141224 * C1877 + C71448 * C1690 +
             C71442 * C1878) *
                C141507 +
            (C71450 * C1600 + C141224 * C1605 + C71448 * C1601 +
             C71442 * C1606) *
                C71543) *
               C141353 * C141499) *
              C2374 +
          (((C76254 + C76253) * C71543 + (C76252 + C76251) * C141507 +
            (C76250 + C76249) * C71544 + (C76248 + C76247) * C141502 +
            (C71448 * C26351 + C71442 * C26353 + C71450 * C26352 +
             C141224 * C26354) *
                C71545 +
            (C71448 * C26477 + C71442 * C26695 + C71450 * C26478 +
             C141224 * C26696) *
                C71446) *
               C141353 * C141499 -
           ((C75419 + C75420) * C71446 + (C75421 + C75422) * C71545 +
            (C72691 + C72690) * C141502 + (C72689 + C72688) * C71544 +
            (C72687 + C72686) * C141507 + (C72685 + C72684) * C71543) *
               C141353 * C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[14] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71804 * C108 + C71808 + C71808 + C141507 * C419 +
                       C71805 * C823 + C71809 + C71809 + C141502 * C1171 +
                       C71806 * C2960 + C71810 + C71810 + C71446 * C3196) *
                          C71442 +
                      (C71844 + C71845 + C71846) * C141224) *
                         C141353 * C1596 -
                     ((C73797 + C73798 + C73799) * C141224 +
                      (C71806 * C10470 + C73785 + C73785 + C71446 * C10934 +
                       C71805 * C3490 + C73786 + C73786 + C141502 * C3790 +
                       C71804 * C1601 + C73787 + C73787 + C141507 * C1949) *
                          C71442) *
                         C141353 * C141499) *
                        C2374 +
                    (((C71804 * C3490 + C76353 + C76353 + C141507 * C3790 +
                       C71805 * C10470 + C76354 + C76354 + C141502 * C10934 +
                       C71806 * C26351 + C76355 + C76355 + C71446 * C26819) *
                          C71442 +
                      (C71804 * C3491 + C76356 + C76356 + C141507 * C3791 +
                       C71805 * C10471 + C76357 + C76357 + C141502 * C10935 +
                       C71806 * C26352 + C76358 + C76358 + C71446 * C26820) *
                          C141224) *
                         C141353 * C141499 -
                     ((C72819 + C72820 + C72821) * C141224 +
                      (C71806 * C9667 + C72807 + C72807 + C71446 * C10035 +
                       C71805 * C2960 + C72808 + C72808 + C141502 * C3196 +
                       C71804 * C823 + C72809 + C72809 + C141507 * C1171) *
                          C71442) *
                         C141353 * C1596) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C71543 +
             (C275 * C189 + C141353 * C501) * C141507 + C6988 * C71544 +
             C7366 * C141502 + C9864 * C71545 + C10124 * C71446) *
                C71442 +
            (C71924 + C71925 + C71926 + C71927 + C71928 + C71929) * C141224) *
               C1596 -
           ((C73898 + C73899 + C73900 + C73901 + C73902 + C73903) * C141224 +
            (C26930 * C71446 + C26595 * C71545 + C11047 * C141502 +
             C10715 * C71544 + (C275 * C1690 + C141353 * C2040) * C141507 +
             (C275 * C1601 + C141353 * C1784) * C71543) *
                C71442) *
               C141499) *
              C2374 +
          (((C10715 * C71543 + C11047 * C141507 + C26595 * C71544 +
             C26930 * C141502 + C32870 * C71545 + C33098 * C71446) *
                C71442 +
            (C8055 * C71543 + C8389 * C141507 + C23974 * C71544 +
             C24300 * C141502 + (C275 * C26352 + C141353 * C26580) * C71545 +
             (C275 * C26478 + C141353 * C26926) * C71446) *
                C141224) *
               C141499 -
           ((C72920 + C72921 + C72922 + C72923 + C72924 + C72925) * C141224 +
            (C26008 * C71446 + C25754 * C71545 + C10124 * C141502 +
             C9864 * C71544 + C7366 * C141507 + C6988 * C71543) *
                C71442) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C275 +
             (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                 C141353) *
                C141507 +
            ((C72684 + C72685) * C275 + (C73040 + C73041) * C141353) * C141502 +
            C75660 * C71446) *
               C1596 -
           (((C76563 + C76564) * C141353 + (C76249 + C76250) * C275) * C71446 +
            ((C76565 + C76566) * C141353 + (C76253 + C76254) * C275) * C141502 +
            ((C71450 * C1783 + C141224 * C2125 + C71448 * C1784 +
              C71442 * C2126) *
                 C141353 +
             (C71450 * C1600 + C141224 * C1605 + C71448 * C1601 +
              C71442 * C1606) *
                 C275) *
                C141507) *
               C141499) *
              C2374 +
          ((((C76254 + C76253) * C275 + (C76566 + C76565) * C141353) * C141507 +
            ((C76250 + C76249) * C275 + (C76564 + C76563) * C141353) * C141502 +
            ((C71448 * C26351 + C71442 * C26353 + C71450 * C26352 +
              C141224 * C26354) *
                 C275 +
             (C71448 * C26579 + C71442 * C27028 + C71450 * C26580 +
              C141224 * C27029) *
                 C141353) *
                C71446) *
               C141499 -
           (((C75658 + C75659) * C141353 + (C75421 + C75422) * C275) * C71446 +
            ((C73043 + C73042) * C141353 + (C72689 + C72688) * C275) * C141502 +
            ((C73041 + C73040) * C141353 + (C72685 + C72684) * C275) *
                C141507) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[14] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                        C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                           C275 +
                       (C71543 * C276 + C141507 * C635 + C71544 * C1006 +
                        C141502 * C1419 + C71545 * C3084 + C71446 * C3362) *
                           C141353) *
                          C71442 +
                      ((C71571 + C71572 + C71573) * C275 +
                       (C72096 + C72097 + C72098) * C141353) *
                          C141224) *
                         C1596 -
                     (((C74106 + C74107 + C74108) * C141353 +
                       (C73479 + C73480 + C73481) * C275) *
                          C141224 +
                      ((C71545 * C10699 + C71446 * C11255 + C71544 * C3646 +
                        C141502 * C4004 + C71543 * C1784 + C141507 * C2197) *
                           C141353 +
                       (C71545 * C10470 + C71446 * C10595 + C71544 * C3490 +
                        C141502 * C3572 + C71543 * C1601 + C141507 * C1690) *
                           C275) *
                          C71442) *
                         C141499) *
                        C2374 +
                    ((((C71543 * C3490 + C141507 * C3572 + C71544 * C10470 +
                        C141502 * C10595 + C71545 * C26351 + C71446 * C26477) *
                           C275 +
                       (C71543 * C3646 + C141507 * C4004 + C71544 * C10699 +
                        C141502 * C11255 + C71545 * C26579 + C71446 * C27140) *
                           C141353) *
                          C71442 +
                      ((C71543 * C3491 + C141507 * C3573 + C71544 * C10471 +
                        C141502 * C10596 + C71545 * C26352 + C71446 * C26478) *
                           C275 +
                       (C71543 * C3647 + C141507 * C4005 + C71544 * C10700 +
                        C141502 * C11256 + C71545 * C26580 + C71446 * C27141) *
                           C141353) *
                          C141224) *
                         C141499 -
                     (((C73152 + C73153 + C73154) * C141353 +
                       (C72437 + C72438 + C72439) * C275) *
                          C141224 +
                      ((C71545 * C9848 + C71446 * C10284 + C71544 * C3084 +
                        C141502 * C3362 + C71543 * C1006 + C141507 * C1419) *
                           C141353 +
                       (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                        C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                           C275) *
                          C71442) *
                         C1596) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezz[14] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C141507 +
             C7709 * C141502 + C10372 * C71446) *
                C71442 +
            (C72176 + C72177 + C72178) * C141224) *
               C1596 -
           ((C74207 + C74208 + C74209) * C141224 +
            (C27249 * C71446 + C11367 * C141502 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141507) *
                C71442) *
               C141499) *
              C2374 +
          (((C11367 * C141507 + C27249 * C141502 + C33320 * C71446) * C71442 +
            (C8709 * C141507 + C24611 * C141502 +
             (C713 * C26352 + C27246 + C27246 + C141353 * C27241) * C71446) *
                C141224) *
               C141499 -
           ((C73253 + C73254 + C73255) * C141224 +
            (C26253 * C71446 + C10372 * C141502 + C7709 * C141507) * C71442) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[15] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71447 * C108 + C71452 + C71452 + C71442 * C120 +
                       C71449 * C109 + C71453 + C71453 + C141224 * C121) *
                          C141353 * C141507 +
                      (C72316 + C72317) * C141353 * C141502 + C75173 * C71446) *
                         C4148 -
                     ((C75925 + C75926) * C141353 * C71446 +
                      (C75927 + C75928) * C141353 * C141502 +
                      (C71449 * C1600 + C73358 + C73358 + C141224 * C1610 +
                       C71447 * C1601 + C73359 + C73359 + C71442 * C1611) *
                          C141353 * C141507) *
                         C141499) *
                        C141281 * C2376 +
                    (((C71447 * C1600 + C73360 + C73360 + C71442 * C1610 +
                       C71449 * C1599 + C73361 + C73361 + C141224 * C1609) *
                          C141353 * C141507 +
                      (C71447 * C3491 + C73362 + C73362 + C71442 * C3499 +
                       C71449 * C3492 + C73363 + C73363 + C141224 * C3500) *
                          C141353 * C141502 +
                      (C71447 * C10471 + C73364 + C73364 + C71442 * C10477 +
                       C71449 * C10472 + C73365 + C73365 + C141224 * C10478) *
                          C141353 * C71446) *
                         C141499 -
                     ((C72323 + C72322) * C141353 * C71446 +
                      (C72321 + C72320) * C141353 * C141502 +
                      (C71449 * C110 + C71462 + C71462 + C141224 * C122 +
                       C71447 * C109 + C71463 + C71463 + C71442 * C121) *
                          C141353 * C141507) *
                         C4148) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[15] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                       C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                          C71448 +
                      (C71543 * C114 + C141507 * C195 + C71544 * C828 +
                       C141502 * C917 + C71545 * C2964 + C71446 * C3030) *
                          C71442 +
                      (C71571 + C71572 + C71573) * C71450 +
                      (C71574 + C71575 + C71576) * C141224) *
                         C141353 * C4148 -
                     ((C73476 + C73477 + C73478) * C141224 +
                      (C73479 + C73480 + C73481) * C71450 +
                      (C71545 * C10473 + C71446 * C10598 + C71544 * C3494 +
                       C141502 * C3576 + C71543 * C1606 + C141507 * C1695) *
                          C71442 +
                      (C71545 * C10470 + C71446 * C10595 + C71544 * C3490 +
                       C141502 * C3572 + C71543 * C1601 + C141507 * C1690) *
                          C71448) *
                         C141353 * C141499) *
                        C141281 * C2376 +
                    (((C73481 + C73480 + C73479) * C71448 +
                      (C73478 + C73477 + C73476) * C71442 +
                      (C71543 * C1599 + C141507 * C1688 + C71544 * C3492 +
                       C141502 * C3574 + C71545 * C10472 + C71446 * C10597) *
                          C71450 +
                      (C71543 * C1604 + C141507 * C1693 + C71544 * C3496 +
                       C141502 * C3578 + C71545 * C10475 + C71446 * C10600) *
                          C141224) *
                         C141353 * C141499 -
                     ((C71577 + C71578 + C71579) * C141224 +
                      (C71580 + C71581 + C71582) * C71450 +
                      (C71576 + C71575 + C71574) * C71442 +
                      (C71573 + C71572 + C71571) * C71448) *
                         C141353 * C4148) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C71448 +
             (C275 * C114 + C141353 * C282) * C71442 + C305 * C71450 +
             C306 * C141224) *
                C141507 +
            (C72538 + C72539 + C72540 + C72541) * C141502 + C75334 * C71446) *
               C4148 -
           ((C76125 + C76126 + C76127 + C76128) * C71446 +
            (C76129 + C76130 + C76131 + C76132) * C141502 +
            (C1808 * C141224 + C1809 * C71450 +
             (C275 * C1606 + C141353 * C1789) * C71442 +
             (C275 * C1601 + C141353 * C1784) * C71448) *
                C141507) *
               C141499) *
              C141281 * C2376 +
          (((C1809 * C71448 + C1808 * C71442 + C1807 * C71450 +
             C1806 * C141224) *
                C141507 +
            (C8055 * C71448 + C8054 * C71442 + C8053 * C71450 +
             C8052 * C141224) *
                C141502 +
            (C23974 * C71448 + C23973 * C71442 +
             (C275 * C10472 + C141353 * C10701) * C71450 +
             (C275 * C10475 + C141353 * C10704) * C141224) *
                C71446) *
               C141499 -
           ((C72553 + C72552 + C72551 + C72550) * C71446 +
            (C72549 + C72548 + C72547 + C72546) * C141502 +
            (C308 * C141224 + C307 * C71450 + C306 * C71442 + C305 * C71448) *
                C141507) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C71543 +
            (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                C141507 +
            (C72684 + C72685) * C71544 + (C72686 + C72687) * C141502 +
            C75409 * C71545 + C75410 * C71446) *
               C141353 * C4148 -
           ((C76247 + C76248) * C71446 + (C76249 + C76250) * C71545 +
            (C76251 + C76252) * C141502 + (C76253 + C76254) * C71544 +
            (C71450 * C1689 + C141224 * C1877 + C71448 * C1690 +
             C71442 * C1878) *
                C141507 +
            (C71450 * C1600 + C141224 * C1605 + C71448 * C1601 +
             C71442 * C1606) *
                C71543) *
               C141353 * C141499) *
              C141281 * C2376 +
          (((C71448 * C1600 + C71442 * C1605 + C71450 * C1599 +
             C141224 * C1604) *
                C71543 +
            (C71448 * C1689 + C71442 * C1877 + C71450 * C1688 +
             C141224 * C1876) *
                C141507 +
            (C71448 * C3491 + C71442 * C3495 + C71450 * C3492 +
             C141224 * C3496) *
                C71544 +
            (C71448 * C3573 + C71442 * C3721 + C71450 * C3574 +
             C141224 * C3722) *
                C141502 +
            (C71448 * C10471 + C71442 * C10474 + C71450 * C10472 +
             C141224 * C10475) *
                C71545 +
            (C71448 * C10596 + C71442 * C10816 + C71450 * C10597 +
             C141224 * C10817) *
                C71446) *
               C141353 * C141499 -
           ((C72699 + C72698) * C71446 + (C72697 + C72696) * C71545 +
            (C72695 + C72694) * C141502 + (C72693 + C72692) * C71544 +
            (C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                C141507 +
            (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                C71543) *
               C141353 * C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[15] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71804 * C108 + C71808 + C71808 + C141507 * C419 +
                       C71805 * C823 + C71809 + C71809 + C141502 * C1171 +
                       C71806 * C2960 + C71810 + C71810 + C71446 * C3196) *
                          C71442 +
                      (C71844 + C71845 + C71846) * C141224) *
                         C141353 * C4148 -
                     ((C73797 + C73798 + C73799) * C141224 +
                      (C71806 * C10470 + C73785 + C73785 + C71446 * C10934 +
                       C71805 * C3490 + C73786 + C73786 + C141502 * C3790 +
                       C71804 * C1601 + C73787 + C73787 + C141507 * C1949) *
                          C71442) *
                         C141353 * C141499) *
                        C141281 * C2376 +
                    (((C73799 + C73798 + C73797) * C71442 +
                      (C71804 * C1599 + C73788 + C73788 + C141507 * C1947 +
                       C71805 * C3492 + C73789 + C73789 + C141502 * C3792 +
                       C71806 * C10472 + C73790 + C73790 + C71446 * C10936) *
                          C141224) *
                         C141353 * C141499 -
                     ((C71847 + C71848 + C71849) * C141224 +
                      (C71846 + C71845 + C71844) * C71442) *
                         C141353 * C4148) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C71543 +
             (C275 * C189 + C141353 * C501) * C141507 + C6988 * C71544 +
             C7366 * C141502 + C9864 * C71545 + C10124 * C71446) *
                C71442 +
            (C71924 + C71925 + C71926 + C71927 + C71928 + C71929) * C141224) *
               C4148 -
           ((C73898 + C73899 + C73900 + C73901 + C73902 + C73903) * C141224 +
            (C26930 * C71446 + C26595 * C71545 + C11047 * C141502 +
             C10715 * C71544 + (C275 * C1690 + C141353 * C2040) * C141507 +
             (C275 * C1601 + C141353 * C1784) * C71543) *
                C71442) *
               C141499) *
              C141281 * C2376 +
          (((C73903 + C73902 + C73901 + C73900 + C73899 + C73898) * C71442 +
            (C1807 * C71543 + C2053 * C141507 + C8053 * C71544 +
             C8388 * C141502 + (C275 * C10472 + C141353 * C10701) * C71545 +
             (C275 * C10597 + C141353 * C11043) * C71446) *
                C141224) *
               C141499 -
           ((C71930 + C71931 + C71932 + C71933 + C71934 + C71935) * C141224 +
            (C71929 + C71928 + C71927 + C71926 + C71925 + C71924) * C71442) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C275 +
             (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                 C141353) *
                C141507 +
            ((C72684 + C72685) * C275 + (C73040 + C73041) * C141353) * C141502 +
            C75660 * C71446) *
               C4148 -
           (((C76563 + C76564) * C141353 + (C76249 + C76250) * C275) * C71446 +
            ((C76565 + C76566) * C141353 + (C76253 + C76254) * C275) * C141502 +
            ((C71450 * C1783 + C141224 * C2125 + C71448 * C1784 +
              C71442 * C2126) *
                 C141353 +
             (C71450 * C1600 + C141224 * C1605 + C71448 * C1601 +
              C71442 * C1606) *
                 C275) *
                C141507) *
               C141499) *
              C141281 * C2376 +
          ((((C71448 * C1600 + C71442 * C1605 + C71450 * C1599 +
              C141224 * C1604) *
                 C275 +
             (C71448 * C1783 + C71442 * C2125 + C71450 * C1782 +
              C141224 * C2124) *
                 C141353) *
                C141507 +
            ((C71448 * C3491 + C71442 * C3495 + C71450 * C3492 +
              C141224 * C3496) *
                 C275 +
             (C71448 * C3647 + C71442 * C3935 + C71450 * C3648 +
              C141224 * C3936) *
                 C141353) *
                C141502 +
            ((C71448 * C10471 + C71442 * C10474 + C71450 * C10472 +
              C141224 * C10475) *
                 C275 +
             (C71448 * C10700 + C71442 * C11146 + C71450 * C10701 +
              C141224 * C11147) *
                 C141353) *
                C71446) *
               C141499 -
           (((C73047 + C73046) * C141353 + (C72697 + C72696) * C275) * C71446 +
            ((C73045 + C73044) * C141353 + (C72693 + C72692) * C275) * C141502 +
            ((C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                 C141353 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C275) *
                C141507) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[15] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                        C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                           C275 +
                       (C71543 * C276 + C141507 * C635 + C71544 * C1006 +
                        C141502 * C1419 + C71545 * C3084 + C71446 * C3362) *
                           C141353) *
                          C71442 +
                      ((C71571 + C71572 + C71573) * C275 +
                       (C72096 + C72097 + C72098) * C141353) *
                          C141224) *
                         C4148 -
                     (((C74106 + C74107 + C74108) * C141353 +
                       (C73479 + C73480 + C73481) * C275) *
                          C141224 +
                      ((C71545 * C10699 + C71446 * C11255 + C71544 * C3646 +
                        C141502 * C4004 + C71543 * C1784 + C141507 * C2197) *
                           C141353 +
                       (C71545 * C10470 + C71446 * C10595 + C71544 * C3490 +
                        C141502 * C3572 + C71543 * C1601 + C141507 * C1690) *
                           C275) *
                          C71442) *
                         C141499) *
                        C141281 * C2376 +
                    ((((C73481 + C73480 + C73479) * C275 +
                       (C74108 + C74107 + C74106) * C141353) *
                          C71442 +
                      ((C71543 * C1599 + C141507 * C1688 + C71544 * C3492 +
                        C141502 * C3574 + C71545 * C10472 + C71446 * C10597) *
                           C275 +
                       (C71543 * C1782 + C141507 * C2195 + C71544 * C3648 +
                        C141502 * C4006 + C71545 * C10701 + C71446 * C11257) *
                           C141353) *
                          C141224) *
                         C141499 -
                     (((C72099 + C72100 + C72101) * C141353 +
                       (C71580 + C71581 + C71582) * C275) *
                          C141224 +
                      ((C72098 + C72097 + C72096) * C141353 +
                       (C71573 + C71572 + C71571) * C275) *
                          C71442) *
                         C4148) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C141507 +
             C7709 * C141502 + C10372 * C71446) *
                C71442 +
            (C72176 + C72177 + C72178) * C141224) *
               C4148 -
           ((C74207 + C74208 + C74209) * C141224 +
            (C27249 * C71446 + C11367 * C141502 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141507) *
                C71442) *
               C141499) *
              C141281 * C2376 +
          (((C74209 + C74208 + C74207) * C71442 +
            (C2304 * C141507 + C8708 * C141502 +
             (C713 * C10472 + C11364 + C11364 + C141353 * C11358) * C71446) *
                C141224) *
               C141499 -
           ((C72179 + C72180 + C72181) * C141224 +
            (C72178 + C72177 + C72176) * C71442) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[16] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71447 * C108 + C71452 + C71452 + C71442 * C120 +
                       C71449 * C109 + C71453 + C71453 + C141224 * C121) *
                          C141353 * C141507 +
                      (C72316 + C72317) * C141353 * C141502 + C75173 * C71446) *
                         C4148 -
                     ((C75925 + C75926) * C141353 * C71446 +
                      (C75927 + C75928) * C141353 * C141502 +
                      (C71449 * C1600 + C73358 + C73358 + C141224 * C1610 +
                       C71447 * C1601 + C73359 + C73359 + C71442 * C1611) *
                          C141353 * C141507) *
                         C141499) *
                        C816 +
                    (((C75928 + C75927) * C141353 * C141507 +
                      (C75926 + C75925) * C141353 * C141502 +
                      (C71447 * C26351 + C75915 + C75915 + C71442 * C26355 +
                       C71449 * C26352 + C75916 + C75916 + C141224 * C26356) *
                          C141353 * C71446) *
                         C141499 -
                     ((C75178 + C75179) * C141353 * C71446 +
                      (C72319 + C72318) * C141353 * C141502 +
                      (C72317 + C72316) * C141353 * C141507) *
                         C4148) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexy[16] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                       C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                          C71448 +
                      (C71543 * C114 + C141507 * C195 + C71544 * C828 +
                       C141502 * C917 + C71545 * C2964 + C71446 * C3030) *
                          C71442 +
                      (C71571 + C71572 + C71573) * C71450 +
                      (C71574 + C71575 + C71576) * C141224) *
                         C141353 * C4148 -
                     ((C73476 + C73477 + C73478) * C141224 +
                      (C73479 + C73480 + C73481) * C71450 +
                      (C71545 * C10473 + C71446 * C10598 + C71544 * C3494 +
                       C141502 * C3576 + C71543 * C1606 + C141507 * C1695) *
                          C71442 +
                      (C71545 * C10470 + C71446 * C10595 + C71544 * C3490 +
                       C141502 * C3572 + C71543 * C1601 + C141507 * C1690) *
                          C71448) *
                         C141353 * C141499) *
                        C816 +
                    (((C71543 * C3490 + C141507 * C3572 + C71544 * C10470 +
                       C141502 * C10595 + C71545 * C26351 + C71446 * C26477) *
                          C71448 +
                      (C71543 * C3494 + C141507 * C3576 + C71544 * C10473 +
                       C141502 * C10598 + C71545 * C26353 + C71446 * C26479) *
                          C71442 +
                      (C71543 * C3491 + C141507 * C3573 + C71544 * C10471 +
                       C141502 * C10596 + C71545 * C26352 + C71446 * C26478) *
                          C71450 +
                      (C71543 * C3495 + C141507 * C3577 + C71544 * C10474 +
                       C141502 * C10599 + C71545 * C26354 + C71446 * C26480) *
                          C141224) *
                         C141353 * C141499 -
                     ((C72434 + C72435 + C72436) * C141224 +
                      (C72437 + C72438 + C72439) * C71450 +
                      (C71545 * C9670 + C71446 * C9771 + C71544 * C2964 +
                       C141502 * C3030 + C71543 * C828 + C141507 * C917) *
                          C71442 +
                      (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                       C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                          C71448) *
                         C141353 * C4148) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexz[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C71448 +
             (C275 * C114 + C141353 * C282) * C71442 + C305 * C71450 +
             C306 * C141224) *
                C141507 +
            (C72538 + C72539 + C72540 + C72541) * C141502 + C75334 * C71446) *
               C4148 -
           ((C76125 + C76126 + C76127 + C76128) * C71446 +
            (C76129 + C76130 + C76131 + C76132) * C141502 +
            (C1808 * C141224 + C1809 * C71450 +
             (C275 * C1606 + C141353 * C1789) * C71442 +
             (C275 * C1601 + C141353 * C1784) * C71448) *
                C141507) *
               C141499) *
              C816 +
          (((C76132 + C76131 + C76130 + C76129) * C141507 +
            (C76128 + C76127 + C76126 + C76125) * C141502 +
            (C32870 * C71448 + C32869 * C71442 +
             (C275 * C26352 + C141353 * C26580) * C71450 +
             (C275 * C26354 + C141353 * C26582) * C141224) *
                C71446) *
               C141499 -
           ((C75329 + C75330 + C75331 + C75332) * C71446 +
            (C72545 + C72544 + C72543 + C72542) * C141502 +
            (C72541 + C72540 + C72539 + C72538) * C141507) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C71543 +
            (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                C141507 +
            (C72684 + C72685) * C71544 + (C72686 + C72687) * C141502 +
            C75409 * C71545 + C75410 * C71446) *
               C141353 * C4148 -
           ((C76247 + C76248) * C71446 + (C76249 + C76250) * C71545 +
            (C76251 + C76252) * C141502 + (C76253 + C76254) * C71544 +
            (C71450 * C1689 + C141224 * C1877 + C71448 * C1690 +
             C71442 * C1878) *
                C141507 +
            (C71450 * C1600 + C141224 * C1605 + C71448 * C1601 +
             C71442 * C1606) *
                C71543) *
               C141353 * C141499) *
              C816 +
          (((C76254 + C76253) * C71543 + (C76252 + C76251) * C141507 +
            (C76250 + C76249) * C71544 + (C76248 + C76247) * C141502 +
            (C71448 * C26351 + C71442 * C26353 + C71450 * C26352 +
             C141224 * C26354) *
                C71545 +
            (C71448 * C26477 + C71442 * C26695 + C71450 * C26478 +
             C141224 * C26696) *
                C71446) *
               C141353 * C141499 -
           ((C75419 + C75420) * C71446 + (C75421 + C75422) * C71545 +
            (C72691 + C72690) * C141502 + (C72689 + C72688) * C71544 +
            (C72687 + C72686) * C141507 + (C72685 + C72684) * C71543) *
               C141353 * C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[16] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71804 * C108 + C71808 + C71808 + C141507 * C419 +
                       C71805 * C823 + C71809 + C71809 + C141502 * C1171 +
                       C71806 * C2960 + C71810 + C71810 + C71446 * C3196) *
                          C71442 +
                      (C71844 + C71845 + C71846) * C141224) *
                         C141353 * C4148 -
                     ((C73797 + C73798 + C73799) * C141224 +
                      (C71806 * C10470 + C73785 + C73785 + C71446 * C10934 +
                       C71805 * C3490 + C73786 + C73786 + C141502 * C3790 +
                       C71804 * C1601 + C73787 + C73787 + C141507 * C1949) *
                          C71442) *
                         C141353 * C141499) *
                        C816 +
                    (((C71804 * C3490 + C76353 + C76353 + C141507 * C3790 +
                       C71805 * C10470 + C76354 + C76354 + C141502 * C10934 +
                       C71806 * C26351 + C76355 + C76355 + C71446 * C26819) *
                          C71442 +
                      (C71804 * C3491 + C76356 + C76356 + C141507 * C3791 +
                       C71805 * C10471 + C76357 + C76357 + C141502 * C10935 +
                       C71806 * C26352 + C76358 + C76358 + C71446 * C26820) *
                          C141224) *
                         C141353 * C141499 -
                     ((C72819 + C72820 + C72821) * C141224 +
                      (C71806 * C9667 + C72807 + C72807 + C71446 * C10035 +
                       C71805 * C2960 + C72808 + C72808 + C141502 * C3196 +
                       C71804 * C823 + C72809 + C72809 + C141507 * C1171) *
                          C71442) *
                         C141353 * C4148) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C71543 +
             (C275 * C189 + C141353 * C501) * C141507 + C6988 * C71544 +
             C7366 * C141502 + C9864 * C71545 + C10124 * C71446) *
                C71442 +
            (C71924 + C71925 + C71926 + C71927 + C71928 + C71929) * C141224) *
               C4148 -
           ((C73898 + C73899 + C73900 + C73901 + C73902 + C73903) * C141224 +
            (C26930 * C71446 + C26595 * C71545 + C11047 * C141502 +
             C10715 * C71544 + (C275 * C1690 + C141353 * C2040) * C141507 +
             (C275 * C1601 + C141353 * C1784) * C71543) *
                C71442) *
               C141499) *
              C816 +
          (((C10715 * C71543 + C11047 * C141507 + C26595 * C71544 +
             C26930 * C141502 + C32870 * C71545 + C33098 * C71446) *
                C71442 +
            (C8055 * C71543 + C8389 * C141507 + C23974 * C71544 +
             C24300 * C141502 + (C275 * C26352 + C141353 * C26580) * C71545 +
             (C275 * C26478 + C141353 * C26926) * C71446) *
                C141224) *
               C141499 -
           ((C72920 + C72921 + C72922 + C72923 + C72924 + C72925) * C141224 +
            (C26008 * C71446 + C25754 * C71545 + C10124 * C141502 +
             C9864 * C71544 + C7366 * C141507 + C6988 * C71543) *
                C71442) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C275 +
             (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                 C141353) *
                C141507 +
            ((C72684 + C72685) * C275 + (C73040 + C73041) * C141353) * C141502 +
            C75660 * C71446) *
               C4148 -
           (((C76563 + C76564) * C141353 + (C76249 + C76250) * C275) * C71446 +
            ((C76565 + C76566) * C141353 + (C76253 + C76254) * C275) * C141502 +
            ((C71450 * C1783 + C141224 * C2125 + C71448 * C1784 +
              C71442 * C2126) *
                 C141353 +
             (C71450 * C1600 + C141224 * C1605 + C71448 * C1601 +
              C71442 * C1606) *
                 C275) *
                C141507) *
               C141499) *
              C816 +
          ((((C76254 + C76253) * C275 + (C76566 + C76565) * C141353) * C141507 +
            ((C76250 + C76249) * C275 + (C76564 + C76563) * C141353) * C141502 +
            ((C71448 * C26351 + C71442 * C26353 + C71450 * C26352 +
              C141224 * C26354) *
                 C275 +
             (C71448 * C26579 + C71442 * C27028 + C71450 * C26580 +
              C141224 * C27029) *
                 C141353) *
                C71446) *
               C141499 -
           (((C75658 + C75659) * C141353 + (C75421 + C75422) * C275) * C71446 +
            ((C73043 + C73042) * C141353 + (C72689 + C72688) * C275) * C141502 +
            ((C73041 + C73040) * C141353 + (C72685 + C72684) * C275) *
                C141507) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[16] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                        C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                           C275 +
                       (C71543 * C276 + C141507 * C635 + C71544 * C1006 +
                        C141502 * C1419 + C71545 * C3084 + C71446 * C3362) *
                           C141353) *
                          C71442 +
                      ((C71571 + C71572 + C71573) * C275 +
                       (C72096 + C72097 + C72098) * C141353) *
                          C141224) *
                         C4148 -
                     (((C74106 + C74107 + C74108) * C141353 +
                       (C73479 + C73480 + C73481) * C275) *
                          C141224 +
                      ((C71545 * C10699 + C71446 * C11255 + C71544 * C3646 +
                        C141502 * C4004 + C71543 * C1784 + C141507 * C2197) *
                           C141353 +
                       (C71545 * C10470 + C71446 * C10595 + C71544 * C3490 +
                        C141502 * C3572 + C71543 * C1601 + C141507 * C1690) *
                           C275) *
                          C71442) *
                         C141499) *
                        C816 +
                    ((((C71543 * C3490 + C141507 * C3572 + C71544 * C10470 +
                        C141502 * C10595 + C71545 * C26351 + C71446 * C26477) *
                           C275 +
                       (C71543 * C3646 + C141507 * C4004 + C71544 * C10699 +
                        C141502 * C11255 + C71545 * C26579 + C71446 * C27140) *
                           C141353) *
                          C71442 +
                      ((C71543 * C3491 + C141507 * C3573 + C71544 * C10471 +
                        C141502 * C10596 + C71545 * C26352 + C71446 * C26478) *
                           C275 +
                       (C71543 * C3647 + C141507 * C4005 + C71544 * C10700 +
                        C141502 * C11256 + C71545 * C26580 + C71446 * C27141) *
                           C141353) *
                          C141224) *
                         C141499 -
                     (((C73152 + C73153 + C73154) * C141353 +
                       (C72437 + C72438 + C72439) * C275) *
                          C141224 +
                      ((C71545 * C9848 + C71446 * C10284 + C71544 * C3084 +
                        C141502 * C3362 + C71543 * C1006 + C141507 * C1419) *
                           C141353 +
                       (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                        C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                           C275) *
                          C71442) *
                         C4148) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezz[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C141507 +
             C7709 * C141502 + C10372 * C71446) *
                C71442 +
            (C72176 + C72177 + C72178) * C141224) *
               C4148 -
           ((C74207 + C74208 + C74209) * C141224 +
            (C27249 * C71446 + C11367 * C141502 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141507) *
                C71442) *
               C141499) *
              C816 +
          (((C11367 * C141507 + C27249 * C141502 + C33320 * C71446) * C71442 +
            (C8709 * C141507 + C24611 * C141502 +
             (C713 * C26352 + C27246 + C27246 + C141353 * C27241) * C71446) *
                C141224) *
               C141499 -
           ((C73253 + C73254 + C73255) * C141224 +
            (C26253 * C71446 + C10372 * C141502 + C7709 * C141507) * C71442) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[17] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C71447 * C108 + C71452 + C71452 + C71442 * C120 +
                      C71449 * C109 + C71453 + C71453 + C141224 * C121) *
                         C141353 * C141507 +
                     (C72316 + C72317) * C141353 * C141502 + C75173 * C71446) *
                        C5322 -
                    ((C75925 + C75926) * C141353 * C71446 +
                     (C75927 + C75928) * C141353 * C141502 +
                     (C71449 * C1600 + C73358 + C73358 + C141224 * C1610 +
                      C71447 * C1601 + C73359 + C73359 + C71442 * C1611) *
                         C141353 * C141507) *
                        C5323 +
                    ((C71447 * C5325 + C78601 + C78601 + C71442 * C5333 +
                      C71449 * C5326 + C78602 + C78602 + C141224 * C5334) *
                         C141353 * C141507 +
                     (C71447 * C13205 + C78603 + C78603 + C71442 * C13211 +
                      C71449 * C13206 + C78604 + C78604 + C141224 * C13212) *
                         C141353 * C141502 +
                     (C71447 * C29087 + C78605 + C78605 + C71442 * C29091 +
                      C71449 * C29088 + C78606 + C78606 + C141224 * C29092) *
                         C141353 * C71446) *
                        C5324) *
                   C141281 * C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexy[17] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                      C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                         C71448 +
                     (C71543 * C114 + C141507 * C195 + C71544 * C828 +
                      C141502 * C917 + C71545 * C2964 + C71446 * C3030) *
                         C71442 +
                     (C71571 + C71572 + C71573) * C71450 +
                     (C71574 + C71575 + C71576) * C141224) *
                        C141353 * C5322 -
                    ((C73476 + C73477 + C73478) * C141224 +
                     (C73479 + C73480 + C73481) * C71450 +
                     (C71545 * C10473 + C71446 * C10598 + C71544 * C3494 +
                      C141502 * C3576 + C71543 * C1606 + C141507 * C1695) *
                         C71442 +
                     (C71545 * C10470 + C71446 * C10595 + C71544 * C3490 +
                      C141502 * C3572 + C71543 * C1601 + C141507 * C1690) *
                         C71448) *
                        C141353 * C5323 +
                    ((C71543 * C5325 + C141507 * C5391 + C71544 * C13205 +
                      C141502 * C13294 + C71545 * C29087 + C71446 * C29173) *
                         C71448 +
                     (C71543 * C5329 + C141507 * C5395 + C71544 * C13208 +
                      C141502 * C13297 + C71545 * C29089 + C71446 * C29175) *
                         C71442 +
                     (C71543 * C5326 + C141507 * C5392 + C71544 * C13206 +
                      C141502 * C13295 + C71545 * C29088 + C71446 * C29174) *
                         C71450 +
                     (C71543 * C5330 + C141507 * C5396 + C71544 * C13209 +
                      C141502 * C13298 + C71545 * C29090 + C71446 * C29176) *
                         C141224) *
                        C141353 * C5324) *
                   C141281 * C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexz[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C71448 +
            (C275 * C114 + C141353 * C282) * C71442 + C305 * C71450 +
            C306 * C141224) *
               C141507 +
           (C72538 + C72539 + C72540 + C72541) * C141502 + C75334 * C71446) *
              C5322 -
          ((C76125 + C76126 + C76127 + C76128) * C71446 +
           (C76129 + C76130 + C76131 + C76132) * C141502 +
           (C1808 * C141224 + C1809 * C71450 +
            (C275 * C1606 + C141353 * C1789) * C71442 +
            (C275 * C1601 + C141353 * C1784) * C71448) *
               C141507) *
              C5323 +
          (((C275 * C5325 + C141353 * C5449) * C71448 +
            (C275 * C5329 + C141353 * C5453) * C71442 +
            (C275 * C5326 + C141353 * C5450) * C71450 +
            (C275 * C5330 + C141353 * C5454) * C141224) *
               C141507 +
           ((C275 * C13205 + C141353 * C13374) * C71448 +
            (C275 * C13208 + C141353 * C13377) * C71442 +
            (C275 * C13206 + C141353 * C13375) * C71450 +
            (C275 * C13209 + C141353 * C13378) * C141224) *
               C141502 +
           ((C275 * C29087 + C141353 * C29251) * C71448 +
            (C275 * C29089 + C141353 * C29253) * C71442 +
            (C275 * C29088 + C141353 * C29252) * C71450 +
            (C275 * C29090 + C141353 * C29254) * C141224) *
               C71446) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
               C71543 +
           (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
               C141507 +
           (C72684 + C72685) * C71544 + (C72686 + C72687) * C141502 +
           C75409 * C71545 + C75410 * C71446) *
              C141353 * C5322 -
          ((C76247 + C76248) * C71446 + (C76249 + C76250) * C71545 +
           (C76251 + C76252) * C141502 + (C76253 + C76254) * C71544 +
           (C71450 * C1689 + C141224 * C1877 + C71448 * C1690 +
            C71442 * C1878) *
               C141507 +
           (C71450 * C1600 + C141224 * C1605 + C71448 * C1601 +
            C71442 * C1606) *
               C71543) *
              C141353 * C5323 +
          ((C71448 * C5325 + C71442 * C5329 + C71450 * C5326 +
            C141224 * C5330) *
               C71543 +
           (C71448 * C5391 + C71442 * C5507 + C71450 * C5392 +
            C141224 * C5508) *
               C141507 +
           (C71448 * C13205 + C71442 * C13208 + C71450 * C13206 +
            C141224 * C13209) *
               C71544 +
           (C71448 * C13294 + C71442 * C13454 + C71450 * C13295 +
            C141224 * C13455) *
               C141502 +
           (C71448 * C29087 + C71442 * C29089 + C71450 * C29088 +
            C141224 * C29090) *
               C71545 +
           (C71448 * C29173 + C71442 * C29329 + C71450 * C29174 +
            C141224 * C29330) *
               C71446) *
              C141353 * C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[17] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C71804 * C108 + C71808 + C71808 + C141507 * C419 +
                      C71805 * C823 + C71809 + C71809 + C141502 * C1171 +
                      C71806 * C2960 + C71810 + C71810 + C71446 * C3196) *
                         C71442 +
                     (C71844 + C71845 + C71846) * C141224) *
                        C141353 * C5322 -
                    ((C73797 + C73798 + C73799) * C141224 +
                     (C71806 * C10470 + C73785 + C73785 + C71446 * C10934 +
                      C71805 * C3490 + C73786 + C73786 + C141502 * C3790 +
                      C71804 * C1601 + C73787 + C73787 + C141507 * C1949) *
                         C71442) *
                        C141353 * C5323 +
                    ((C71804 * C5325 + C78903 + C78903 + C141507 * C5561 +
                      C71805 * C13205 + C78904 + C78904 + C141502 * C13531 +
                      C71806 * C29087 + C78905 + C78905 + C71446 * C29405) *
                         C71442 +
                     (C71804 * C5326 + C78906 + C78906 + C141507 * C5562 +
                      C71805 * C13206 + C78907 + C78907 + C141502 * C13532 +
                      C71806 * C29088 + C78908 + C78908 + C71446 * C29406) *
                         C141224) *
                        C141353 * C5324) *
                   C141281 * C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C71543 +
            (C275 * C189 + C141353 * C501) * C141507 + C6988 * C71544 +
            C7366 * C141502 + C9864 * C71545 + C10124 * C71446) *
               C71442 +
           (C71924 + C71925 + C71926 + C71927 + C71928 + C71929) * C141224) *
              C5322 -
          ((C73898 + C73899 + C73900 + C73901 + C73902 + C73903) * C141224 +
           (C26930 * C71446 + C26595 * C71545 + C11047 * C141502 +
            C10715 * C71544 + (C275 * C1690 + C141353 * C2040) * C141507 +
            (C275 * C1601 + C141353 * C1784) * C71543) *
               C71442) *
              C5323 +
          (((C275 * C5325 + C141353 * C5449) * C71543 +
            (C275 * C5391 + C141353 * C5619) * C141507 +
            (C275 * C13205 + C141353 * C13374) * C71544 +
            (C275 * C13294 + C141353 * C13614) * C141502 +
            (C275 * C29087 + C141353 * C29251) * C71545 +
            (C275 * C29173 + C141353 * C29487) * C71446) *
               C71442 +
           ((C275 * C5326 + C141353 * C5450) * C71543 +
            (C275 * C5392 + C141353 * C5620) * C141507 +
            (C275 * C13206 + C141353 * C13375) * C71544 +
            (C275 * C13295 + C141353 * C13615) * C141502 +
            (C275 * C29088 + C141353 * C29252) * C71545 +
            (C275 * C29174 + C141353 * C29488) * C71446) *
               C141224) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C275 +
            (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                C141353) *
               C141507 +
           ((C72684 + C72685) * C275 + (C73040 + C73041) * C141353) * C141502 +
           C75660 * C71446) *
              C5322 -
          (((C76563 + C76564) * C141353 + (C76249 + C76250) * C275) * C71446 +
           ((C76565 + C76566) * C141353 + (C76253 + C76254) * C275) * C141502 +
           ((C71450 * C1783 + C141224 * C2125 + C71448 * C1784 +
             C71442 * C2126) *
                C141353 +
            (C71450 * C1600 + C141224 * C1605 + C71448 * C1601 +
             C71442 * C1606) *
                C275) *
               C141507) *
              C5323 +
          (((C71448 * C5325 + C71442 * C5329 + C71450 * C5326 +
             C141224 * C5330) *
                C275 +
            (C71448 * C5449 + C71442 * C5673 + C71450 * C5450 +
             C141224 * C5674) *
                C141353) *
               C141507 +
           ((C71448 * C13205 + C71442 * C13208 + C71450 * C13206 +
             C141224 * C13209) *
                C275 +
            (C71448 * C13374 + C71442 * C13691 + C71450 * C13375 +
             C141224 * C13692) *
                C141353) *
               C141502 +
           ((C71448 * C29087 + C71442 * C29089 + C71450 * C29088 +
             C141224 * C29090) *
                C275 +
            (C71448 * C29251 + C71442 * C29563 + C71450 * C29252 +
             C141224 * C29564) *
                C141353) *
               C71446) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[17] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                       C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                          C275 +
                      (C71543 * C276 + C141507 * C635 + C71544 * C1006 +
                       C141502 * C1419 + C71545 * C3084 + C71446 * C3362) *
                          C141353) *
                         C71442 +
                     ((C71571 + C71572 + C71573) * C275 +
                      (C72096 + C72097 + C72098) * C141353) *
                         C141224) *
                        C5322 -
                    (((C74106 + C74107 + C74108) * C141353 +
                      (C73479 + C73480 + C73481) * C275) *
                         C141224 +
                     ((C71545 * C10699 + C71446 * C11255 + C71544 * C3646 +
                       C141502 * C4004 + C71543 * C1784 + C141507 * C2197) *
                          C141353 +
                      (C71545 * C10470 + C71446 * C10595 + C71544 * C3490 +
                       C141502 * C3572 + C71543 * C1601 + C141507 * C1690) *
                          C275) *
                         C71442) *
                        C5323 +
                    (((C71543 * C5325 + C141507 * C5391 + C71544 * C13205 +
                       C141502 * C13294 + C71545 * C29087 + C71446 * C29173) *
                          C275 +
                      (C71543 * C5449 + C141507 * C5727 + C71544 * C13374 +
                       C141502 * C13768 + C71545 * C29251 + C71446 * C29639) *
                          C141353) *
                         C71442 +
                     ((C71543 * C5326 + C141507 * C5392 + C71544 * C13206 +
                       C141502 * C13295 + C71545 * C29088 + C71446 * C29174) *
                          C275 +
                      (C71543 * C5450 + C141507 * C5728 + C71544 * C13375 +
                       C141502 * C13769 + C71545 * C29252 + C71446 * C29640) *
                          C141353) *
                         C141224) *
                        C5324) *
                   C141281 * C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezz[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141507 +
            C7709 * C141502 + C10372 * C71446) *
               C71442 +
           (C72176 + C72177 + C72178) * C141224) *
              C5322 -
          ((C74207 + C74208 + C74209) * C141224 +
           (C27249 * C71446 + C11367 * C141502 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141507) *
               C71442) *
              C5323 +
          (((C713 * C5325 + C5786 + C5786 + C141353 * C5781) * C141507 +
            (C713 * C13205 + C13849 + C13849 + C141353 * C13845) * C141502 +
            (C713 * C29087 + C29718 + C29718 + C141353 * C29715) * C71446) *
               C71442 +
           ((C713 * C5326 + C5787 + C5787 + C141353 * C5782) * C141507 +
            (C713 * C13206 + C13850 + C13850 + C141353 * C13846) * C141502 +
            (C713 * C29088 + C29719 + C29719 + C141353 * C29716) * C71446) *
               C141224) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
             C71453 + C71453 + C141224 * C121) *
                C141479 +
            (C71447 * C1601 + C73359 + C73359 + C71442 * C1611 +
             C71449 * C1600 + C73358 + C73358 + C141224 * C1610) *
                C141365) *
               C63607 +
           ((C72316 + C72317) * C141479 + (C75928 + C75927) * C141365) *
               C141341) *
              C141298 * C141281 * C97 -
          (((C71449 * C3492 + C73363 + C73363 + C141224 * C3500 +
             C71447 * C3491 + C73362 + C73362 + C71442 * C3499) *
                C141365 +
            (C72321 + C72320) * C141479) *
               C141341 +
           ((C71449 * C1599 + C73361 + C73361 + C141224 * C1609 +
             C71447 * C1600 + C73360 + C73360 + C71442 * C1610) *
                C141365 +
            (C71449 * C110 + C71462 + C71462 + C141224 * C122 + C71447 * C109 +
             C71463 + C71463 + C71442 * C121) *
                C141479) *
               C63607) *
              C141298 * C141281 * C98 +
          (((C71447 * C110 + C71464 + C71464 + C71442 * C122 + C71449 * C111 +
             C71465 + C71465 + C141224 * C123) *
                C141479 +
            (C71447 * C1599 + C79303 + C79303 + C71442 * C1609 +
             C71449 * C1598 + C79304 + C79304 + C141224 * C1608) *
                C141365) *
               C63607 +
           ((C71447 * C821 + C71466 + C71466 + C71442 * C831 + C71449 * C820 +
             C71467 + C71467 + C141224 * C830) *
                C141479 +
            (C71447 * C3492 + C79305 + C79305 + C71442 * C3500 +
             C71449 * C3493 + C79306 + C79306 + C141224 * C3501) *
                C141365) *
               C141341) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C71448 +
            (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                C71442 +
            (C63734 + C63735) * C71450 + (C63736 + C63737) * C141224) *
               C141479 +
           ((C63707 * C1601 + C63607 * C1690 + C63708 * C3490 +
             C141341 * C3572) *
                C71448 +
            (C63707 * C1606 + C63607 * C1695 + C63708 * C3494 +
             C141341 * C3576) *
                C71442 +
            (C65644 + C65643) * C71450 + (C65642 + C65641) * C141224) *
               C141365) *
              C141298 * C141281 * C97 -
          (((C65637 + C65638) * C141224 + (C65639 + C65640) * C71450 +
            (C65641 + C65642) * C71442 + (C65643 + C65644) * C71448) *
               C141365 +
           ((C63741 + C63740) * C141224 + (C63739 + C63738) * C71450 +
            (C63737 + C63736) * C71442 + (C63735 + C63734) * C71448) *
               C141479) *
              C141298 * C141281 * C98 +
          ((C63746 * C71448 + C63747 * C71442 + (C63745 + C63744) * C71450 +
            (C63743 + C63742) * C141224) *
               C141479 +
           ((C65640 + C65639) * C71448 + (C65638 + C65637) * C71442 +
            (C63707 * C1598 + C63607 * C1687 + C63708 * C3493 +
             C141341 * C3575) *
                C71450 +
            (C63707 * C1603 + C63607 * C1692 + C63708 * C3497 +
             C141341 * C3579) *
                C141224) *
               C141365) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C71448 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C71442 +
            (C14105 + C14106) * C71450 + (C14107 + C14108) * C141224) *
               C63607 +
           ((C35986 + C35987) * C71448 + (C35988 + C35989) * C71442 +
            (C14973 + C14972) * C71450 + (C14971 + C14970) * C141224) *
               C141341) *
              C141298 * C141281 * C97 -
          (((C14966 + C14967) * C141224 + (C14968 + C14969) * C71450 +
            (C14970 + C14971) * C71442 + (C14972 + C14973) * C71448) *
               C141341 +
           ((C14112 + C14111) * C141224 + (C14110 + C14109) * C71450 +
            (C14108 + C14107) * C71442 + (C14106 + C14105) * C71448) *
               C63607) *
              C141298 * C141281 * C98 +
          ((C14117 * C71448 + C14118 * C71442 + (C14116 + C14115) * C71450 +
            (C14114 + C14113) * C141224) *
               C63607 +
           ((C14969 + C14968) * C71448 + (C14967 + C14966) * C71442 +
            (C14078 * C820 + C141479 * C1003 + C14079 * C3493 +
             C141365 * C3649) *
                C71450 +
            (C14078 * C825 + C141479 * C1008 + C14079 * C3497 +
             C141365 * C3653) *
                C141224) *
               C141341) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C63707 +
            (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                C63607 +
            (C72684 + C72685) * C63708 + (C72686 + C72687) * C141341) *
               C141479 +
           ((C71448 * C1601 + C71442 * C1606 + C71450 * C1600 +
             C141224 * C1605) *
                C63707 +
            (C71448 * C1690 + C71442 * C1878 + C71450 * C1689 +
             C141224 * C1877) *
                C63607 +
            (C76254 + C76253) * C63708 + (C76252 + C76251) * C141341) *
               C141365) *
              C141298 * C141281 * C97 -
          (((C71450 * C3574 + C141224 * C3722 + C71448 * C3573 +
             C71442 * C3721) *
                C141341 +
            (C71450 * C3492 + C141224 * C3496 + C71448 * C3491 +
             C71442 * C3495) *
                C63708 +
            (C71450 * C1688 + C141224 * C1876 + C71448 * C1689 +
             C71442 * C1877) *
                C63607 +
            (C71450 * C1599 + C141224 * C1604 + C71448 * C1600 +
             C71442 * C1605) *
                C63707) *
               C141365 +
           ((C72695 + C72694) * C141341 + (C72693 + C72692) * C63708 +
            (C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                C63607 +
            (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                C63707) *
               C141479) *
              C141298 * C141281 * C98 +
          (((C71448 * C110 + C71442 * C116 + C71450 * C111 + C141224 * C117) *
                C63707 +
            (C71448 * C191 + C71442 * C364 + C71450 * C192 + C141224 * C365) *
                C63607 +
            (C71448 * C821 + C71442 * C826 + C71450 * C820 + C141224 * C825) *
                C63708 +
            (C71448 * C910 + C71442 * C1098 + C71450 * C909 + C141224 * C1097) *
                C141341) *
               C141479 +
           ((C71448 * C1599 + C71442 * C1604 + C71450 * C1598 +
             C141224 * C1603) *
                C63707 +
            (C71448 * C1688 + C71442 * C1876 + C71450 * C1687 +
             C141224 * C1875) *
                C63607 +
            (C71448 * C3492 + C71442 * C3496 + C71450 * C3493 +
             C141224 * C3497) *
                C63708 +
            (C71448 * C3574 + C71442 * C3722 + C71450 * C3575 +
             C141224 * C3723) *
                C141341) *
               C141365) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
             C63973 + C63973 + C141341 * C1171) *
                C71442 +
            (C64006 + C64007) * C141224) *
               C141479 +
           ((C63969 * C1601 + C65952 + C65952 + C63607 * C1949 +
             C63970 * C3490 + C65951 + C65951 + C141341 * C3790) *
                C71442 +
            (C65966 + C65965) * C141224) *
               C141365) *
              C141298 * C141281 * C97 -
          (((C65963 + C65964) * C141224 + (C65965 + C65966) * C71442) *
               C141365 +
           ((C64009 + C64008) * C141224 + (C64007 + C64006) * C71442) *
               C141479) *
              C141298 * C141281 * C98 +
          ((C64012 * C71442 + (C64011 + C64010) * C141224) * C141479 +
           ((C65964 + C65963) * C71442 +
            (C63969 * C1598 + C65953 + C65953 + C63607 * C1946 +
             C63970 * C3493 + C65954 + C65954 + C141341 * C3793) *
                C141224) *
               C141365) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C63707 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C63607 +
            (C35986 + C35987) * C63708 + (C36316 + C36317) * C141341) *
               C71442 +
           ((C14105 + C14106) * C63707 + (C14354 + C14355) * C63607 +
            (C14973 + C14972) * C63708 + (C15289 + C15288) * C141341) *
               C141224) *
              C141298 * C141281 * C97 -
          (((C15286 + C15287) * C141341 + (C14968 + C14969) * C63708 +
            (C14357 + C14356) * C63607 + (C14110 + C14109) * C63707) *
               C141224 +
           ((C15288 + C15289) * C141341 + (C14972 + C14973) * C63708 +
            (C14355 + C14354) * C63607 + (C14106 + C14105) * C63707) *
               C71442) *
              C141298 * C141281 * C98 +
          ((C14117 * C63707 + C14360 * C63607 + (C14969 + C14968) * C63708 +
            (C15287 + C15286) * C141341) *
               C71442 +
           ((C14116 + C14115) * C63707 + (C14359 + C14358) * C63607 +
            (C14078 * C820 + C141479 * C1003 + C14079 * C3493 +
             C141365 * C3649) *
                C63708 +
            (C14078 * C909 + C141479 * C1259 + C14079 * C3575 +
             C141365 * C3867) *
                C141341) *
               C141224) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezx[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C14078 +
            (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                C141479 +
            (C71448 * C1601 + C71442 * C1606 + C71450 * C1600 +
             C141224 * C1605) *
                C14079 +
            (C71448 * C1784 + C71442 * C2126 + C71450 * C1783 +
             C141224 * C2125) *
                C141365) *
               C63607 +
           ((C72684 + C72685) * C14078 + (C73040 + C73041) * C141479 +
            (C76254 + C76253) * C14079 + (C76566 + C76565) * C141365) *
               C141341) *
              C141298 * C141281 * C97 -
          (((C71450 * C3648 + C141224 * C3936 + C71448 * C3647 +
             C71442 * C3935) *
                C141365 +
            (C71450 * C3492 + C141224 * C3496 + C71448 * C3491 +
             C71442 * C3495) *
                C14079 +
            (C73045 + C73044) * C141479 + (C72693 + C72692) * C14078) *
               C141341 +
           ((C71450 * C1782 + C141224 * C2124 + C71448 * C1783 +
             C71442 * C2125) *
                C141365 +
            (C71450 * C1599 + C141224 * C1604 + C71448 * C1600 +
             C71442 * C1605) *
                C14079 +
            (C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                C141479 +
            (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                C14078) *
               C63607) *
              C141298 * C141281 * C98 +
          (((C71448 * C110 + C71442 * C116 + C71450 * C111 + C141224 * C117) *
                C14078 +
            (C71448 * C278 + C71442 * C581 + C71450 * C279 + C141224 * C582) *
                C141479 +
            (C71448 * C1599 + C71442 * C1604 + C71450 * C1598 +
             C141224 * C1603) *
                C14079 +
            (C71448 * C1782 + C71442 * C2124 + C71450 * C1781 +
             C141224 * C2123) *
                C141365) *
               C63607 +
           ((C71448 * C821 + C71442 * C826 + C71450 * C820 + C141224 * C825) *
                C14078 +
            (C71448 * C1004 + C71442 * C1346 + C71450 * C1003 +
             C141224 * C1345) *
                C141479 +
            (C71448 * C3492 + C71442 * C3496 + C71450 * C3493 +
             C141224 * C3497) *
                C14079 +
            (C71448 * C3648 + C71442 * C3936 + C71450 * C3649 +
             C141224 * C3937) *
                C141365) *
               C141341) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezy[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C14078 +
            (C63707 * C276 + C63607 * C635 + C63708 * C1006 + C141341 * C1419) *
                C141479 +
            (C63707 * C1601 + C63607 * C1690 + C63708 * C3490 +
             C141341 * C3572) *
                C14079 +
            (C63707 * C1784 + C63607 * C2197 + C63708 * C3646 +
             C141341 * C4004) *
                C141365) *
               C71442 +
           ((C63734 + C63735) * C14078 + (C64263 + C64264) * C141479 +
            (C65644 + C65643) * C14079 + (C66280 + C66279) * C141365) *
               C141224) *
              C141298 * C141281 * C97 -
          (((C66277 + C66278) * C141365 + (C65639 + C65640) * C14079 +
            (C64266 + C64265) * C141479 + (C63739 + C63738) * C14078) *
               C141224 +
           ((C66279 + C66280) * C141365 + (C65643 + C65644) * C14079 +
            (C64264 + C64263) * C141479 + (C63735 + C63734) * C14078) *
               C71442) *
              C141298 * C141281 * C98 +
          ((C63746 * C14078 + C64269 * C141479 + (C65640 + C65639) * C14079 +
            (C66278 + C66277) * C141365) *
               C71442 +
           ((C63745 + C63744) * C14078 + (C64268 + C64267) * C141479 +
            (C63707 * C1598 + C63607 * C1687 + C63708 * C3493 +
             C141341 * C3575) *
                C14079 +
            (C63707 * C1781 + C63607 * C2194 + C63708 * C3649 +
             C141341 * C4007) *
                C141365) *
               C141224) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 + C14600 * C1601 +
             C14603 + C14603 + C141365 * C2283) *
                C63607 +
            (C36666 + C36667) * C141341) *
               C71442 +
           ((C14636 + C14637) * C63607 + (C15625 + C15624) * C141341) *
               C141224) *
              C141298 * C141281 * C97 -
          (((C15622 + C15623) * C141341 + (C14639 + C14638) * C63607) *
               C141224 +
           ((C15624 + C15625) * C141341 + (C14637 + C14636) * C63607) *
               C71442) *
              C141298 * C141281 * C98 +
          ((C14642 * C63607 + (C15623 + C15622) * C141341) * C71442 +
           ((C14641 + C14640) * C63607 +
            (C14599 * C820 + C15612 + C15612 + C141479 * C1502 +
             C14600 * C3493 + C15613 + C15613 + C141365 * C4077) *
                C141341) *
               C141224) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexx[19] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
              C71453 + C71453 + C141224 * C121) *
                 C141479 +
             (C71447 * C1601 + C73359 + C73359 + C71442 * C1611 +
              C71449 * C1600 + C73358 + C73358 + C141224 * C1610) *
                 C141365) *
                C63607 +
            ((C72316 + C72317) * C141479 + (C75928 + C75927) * C141365) *
                C141341) *
               C141298 * C816 -
           (((C75925 + C75926) * C141365 + (C72319 + C72318) * C141479) *
                C141341 +
            ((C75927 + C75928) * C141365 + (C72317 + C72316) * C141479) *
                C63607) *
               C141298 * C141497) *
              C818 +
          ((((C72320 + C72321) * C141479 + (C80229 + C80230) * C141365) *
                C63607 +
            ((C72322 + C72323) * C141479 +
             (C71447 * C10471 + C73364 + C73364 + C71442 * C10477 +
              C71449 * C10472 + C73365 + C73365 + C141224 * C10478) *
                 C141365) *
                C141341) *
               C141298 * C141497 -
           (((C80230 + C80229) * C141365 + (C72321 + C72320) * C141479) *
                C141341 +
            ((C71449 * C1599 + C73361 + C73361 + C141224 * C1609 +
              C71447 * C1600 + C73360 + C73360 + C71442 * C1610) *
                 C141365 +
             (C71449 * C110 + C71462 + C71462 + C141224 * C122 + C71447 * C109 +
              C71463 + C71463 + C71442 * C121) *
                 C141479) *
                C63607) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[19] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C71448 +
             (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                 C71442 +
             (C63734 + C63735) * C71450 + (C63736 + C63737) * C141224) *
                C141479 +
            ((C63707 * C1601 + C63607 * C1690 + C63708 * C3490 +
              C141341 * C3572) *
                 C71448 +
             (C63707 * C1606 + C63607 * C1695 + C63708 * C3494 +
              C141341 * C3576) *
                 C71442 +
             (C65644 + C65643) * C71450 + (C65642 + C65641) * C141224) *
                C141365) *
               C141298 * C816 -
           (((C80369 + C80370) * C141224 + (C80371 + C80372) * C71450 +
             (C63708 * C10473 + C141341 * C10598 + C63707 * C3494 +
              C63607 * C3576) *
                 C71442 +
             (C63708 * C10470 + C141341 * C10595 + C63707 * C3490 +
              C63607 * C3572) *
                 C71448) *
                C141365 +
            ((C64605 + C64606) * C141224 + (C64607 + C64608) * C71450 +
             (C63708 * C2964 + C141341 * C3030 + C63707 * C828 +
              C63607 * C917) *
                 C71442 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C71448) *
                C141479) *
               C141298 * C141497) *
              C818 +
          ((((C64608 + C64607) * C71448 + (C64606 + C64605) * C71442 +
             (C64604 + C64603) * C71450 + (C64602 + C64601) * C141224) *
                C141479 +
            ((C80372 + C80371) * C71448 + (C80370 + C80369) * C71442 +
             (C63707 * C3492 + C63607 * C3574 + C63708 * C10472 +
              C141341 * C10597) *
                 C71450 +
             (C63707 * C3496 + C63607 * C3578 + C63708 * C10475 +
              C141341 * C10600) *
                 C141224) *
                C141365) *
               C141298 * C141497 -
           (((C65637 + C65638) * C141224 + (C65639 + C65640) * C71450 +
             (C65641 + C65642) * C71442 + (C65643 + C65644) * C71448) *
                C141365 +
            ((C63741 + C63740) * C141224 + (C63739 + C63738) * C71450 +
             (C63737 + C63736) * C71442 + (C63735 + C63734) * C71448) *
                C141479) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[19] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C71448 +
             (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
              C141365 * C1789) *
                 C71442 +
             (C14105 + C14106) * C71450 + (C14107 + C14108) * C141224) *
                C63607 +
            ((C35986 + C35987) * C71448 + (C35988 + C35989) * C71442 +
             C80503 * C71450 + C80504 * C141224) *
                C141341) *
               C141298 * C816 -
           (((C35997 + C35996) * C141224 + (C35995 + C35994) * C71450 +
             (C35993 + C35992) * C71442 + (C35991 + C35990) * C71448) *
                C141341 +
            (C80505 * C141224 + C80506 * C71450 + (C35989 + C35988) * C71442 +
             (C35987 + C35986) * C71448) *
                C63607) *
               C141298 * C141497) *
              C818 +
          (((C80503 * C71448 + C80504 * C71442 + (C14969 + C14968) * C71450 +
             (C14967 + C14966) * C141224) *
                C63607 +
            ((C35994 + C35995) * C71448 + (C35996 + C35997) * C71442 +
             (C14078 * C2962 + C141479 * C3086 + C14079 * C10472 +
              C141365 * C10701) *
                 C71450 +
             (C14078 * C2966 + C141479 * C3090 + C14079 * C10475 +
              C141365 * C10704) *
                 C141224) *
                C141341) *
               C141298 * C141497 -
           (((C14966 + C14967) * C141224 + (C14968 + C14969) * C71450 +
             C80505 * C71442 + C80506 * C71448) *
                C141341 +
            ((C14112 + C14111) * C141224 + (C14110 + C14109) * C71450 +
             (C14108 + C14107) * C71442 + (C14106 + C14105) * C71448) *
                C63607) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[19] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C63707 +
             (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                 C63607 +
             (C72684 + C72685) * C63708 + (C72686 + C72687) * C141341) *
                C141479 +
            ((C71448 * C1601 + C71442 * C1606 + C71450 * C1600 +
              C141224 * C1605) *
                 C63707 +
             (C71448 * C1690 + C71442 * C1878 + C71450 * C1689 +
              C141224 * C1877) *
                 C63607 +
             (C76254 + C76253) * C63708 + (C76252 + C76251) * C141341) *
                C141365) *
               C141298 * C816 -
           (((C76247 + C76248) * C141341 + (C76249 + C76250) * C63708 +
             (C76251 + C76252) * C63607 + (C76253 + C76254) * C63707) *
                C141365 +
            ((C72691 + C72690) * C141341 + (C72689 + C72688) * C63708 +
             (C72687 + C72686) * C63607 + (C72685 + C72684) * C63707) *
                C141479) *
               C141298 * C141497) *
              C818 +
          ((((C72692 + C72693) * C63707 + (C72694 + C72695) * C63607 +
             (C72696 + C72697) * C63708 + (C72698 + C72699) * C141341) *
                C141479 +
            ((C80645 + C80646) * C63707 + (C80647 + C80648) * C63607 +
             (C71448 * C10471 + C71442 * C10474 + C71450 * C10472 +
              C141224 * C10475) *
                 C63708 +
             (C71448 * C10596 + C71442 * C10816 + C71450 * C10597 +
              C141224 * C10817) *
                 C141341) *
                C141365) *
               C141298 * C141497 -
           (((C80648 + C80647) * C141341 + (C80646 + C80645) * C63708 +
             (C71450 * C1688 + C141224 * C1876 + C71448 * C1689 +
              C71442 * C1877) *
                 C63607 +
             (C71450 * C1599 + C141224 * C1604 + C71448 * C1600 +
              C71442 * C1605) *
                 C63707) *
                C141365 +
            ((C72695 + C72694) * C141341 + (C72693 + C72692) * C63708 +
             (C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                 C63607 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C63707) *
                C141479) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[19] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
              C63973 + C63973 + C141341 * C1171) *
                 C71442 +
             (C64006 + C64007) * C141224) *
                C141479 +
            ((C63969 * C1601 + C65952 + C65952 + C63607 * C1949 +
              C63970 * C3490 + C65951 + C65951 + C141341 * C3790) *
                 C71442 +
             (C65966 + C65965) * C141224) *
                C141365) *
               C141298 * C816 -
           (((C80787 + C80788) * C141224 +
             (C63970 * C10470 + C68521 + C68521 + C141341 * C10934 +
              C63969 * C3490 + C68520 + C68520 + C63607 * C3790) *
                 C71442) *
                C141365 +
            ((C64977 + C64978) * C141224 +
             (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
              C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                 C71442) *
                C141479) *
               C141298 * C141497) *
              C818 +
          ((((C64978 + C64977) * C71442 + (C64976 + C64975) * C141224) *
                C141479 +
            ((C80788 + C80787) * C71442 +
             (C63969 * C3492 + C68524 + C68524 + C63607 * C3792 +
              C63970 * C10472 + C68525 + C68525 + C141341 * C10936) *
                 C141224) *
                C141365) *
               C141298 * C141497 -
           (((C65963 + C65964) * C141224 + (C65965 + C65966) * C71442) *
                C141365 +
            ((C64009 + C64008) * C141224 + (C64007 + C64006) * C71442) *
                C141479) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[19] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C63707 +
             (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
              C141365 * C2040) *
                 C63607 +
             (C35986 + C35987) * C63708 + (C36316 + C36317) * C141341) *
                C71442 +
            ((C14105 + C14106) * C63707 + (C14354 + C14355) * C63607 +
             C80503 * C63708 + C80919 * C141341) *
                C141224) *
               C141298 * C816 -
           (((C36321 + C36320) * C141341 + (C35995 + C35994) * C63708 +
             C80920 * C63607 + C80506 * C63707) *
                C141224 +
            ((C36319 + C36318) * C141341 + (C35991 + C35990) * C63708 +
             (C36317 + C36316) * C63607 + (C35987 + C35986) * C63707) *
                C71442) *
               C141298 * C141497) *
              C818 +
          (((C80503 * C63707 + C80919 * C63607 + (C35994 + C35995) * C63708 +
             (C36320 + C36321) * C141341) *
                C71442 +
            ((C14969 + C14968) * C63707 + (C15287 + C15286) * C63607 +
             (C14078 * C2962 + C141479 * C3086 + C14079 * C10472 +
              C141365 * C10701) *
                 C63708 +
             (C14078 * C3028 + C141479 * C3256 + C14079 * C10597 +
              C141365 * C11043) *
                 C141341) *
                C141224) *
               C141298 * C141497 -
           (((C15286 + C15287) * C141341 + (C14968 + C14969) * C63708 +
             (C14357 + C14356) * C63607 + (C14110 + C14109) * C63707) *
                C141224 +
            (C80920 * C141341 + C80506 * C63708 + (C14355 + C14354) * C63607 +
             (C14106 + C14105) * C63707) *
                C71442) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[19] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C14078 +
             (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                 C141479 +
             (C71448 * C1601 + C71442 * C1606 + C71450 * C1600 +
              C141224 * C1605) *
                 C14079 +
             (C71448 * C1784 + C71442 * C2126 + C71450 * C1783 +
              C141224 * C2125) *
                 C141365) *
                C63607 +
            ((C72684 + C72685) * C14078 + (C73040 + C73041) * C141479 +
             (C76254 + C76253) * C14079 + (C76566 + C76565) * C141365) *
                C141341) *
               C141298 * C816 -
           (((C76563 + C76564) * C141365 + (C76249 + C76250) * C14079 +
             (C73043 + C73042) * C141479 + (C72689 + C72688) * C14078) *
                C141341 +
            ((C76565 + C76566) * C141365 + (C76253 + C76254) * C14079 +
             (C73041 + C73040) * C141479 + (C72685 + C72684) * C14078) *
                C63607) *
               C141298 * C141497) *
              C818 +
          ((((C72692 + C72693) * C14078 + (C73044 + C73045) * C141479 +
             (C80645 + C80646) * C14079 + (C81055 + C81056) * C141365) *
                C63607 +
            ((C72696 + C72697) * C14078 + (C73046 + C73047) * C141479 +
             (C71448 * C10471 + C71442 * C10474 + C71450 * C10472 +
              C141224 * C10475) *
                 C14079 +
             (C71448 * C10700 + C71442 * C11146 + C71450 * C10701 +
              C141224 * C11147) *
                 C141365) *
                C141341) *
               C141298 * C141497 -
           (((C81056 + C81055) * C141365 + (C80646 + C80645) * C14079 +
             (C73045 + C73044) * C141479 + (C72693 + C72692) * C14078) *
                C141341 +
            ((C71450 * C1782 + C141224 * C2124 + C71448 * C1783 +
              C71442 * C2125) *
                 C141365 +
             (C71450 * C1599 + C141224 * C1604 + C71448 * C1600 +
              C71442 * C1605) *
                 C14079 +
             (C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                 C141479 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C14078) *
                C63607) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[19] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C14078 +
             (C63707 * C276 + C63607 * C635 + C63708 * C1006 +
              C141341 * C1419) *
                 C141479 +
             (C63707 * C1601 + C63607 * C1690 + C63708 * C3490 +
              C141341 * C3572) *
                 C14079 +
             (C63707 * C1784 + C63607 * C2197 + C63708 * C3646 +
              C141341 * C4004) *
                 C141365) *
                C71442 +
            ((C63734 + C63735) * C14078 + (C64263 + C64264) * C141479 +
             (C65644 + C65643) * C14079 + (C66280 + C66279) * C141365) *
                C141224) *
               C141298 * C816 -
           (((C81191 + C81192) * C141365 + (C80371 + C80372) * C14079 +
             (C65309 + C65310) * C141479 + (C64607 + C64608) * C14078) *
                C141224 +
            ((C63708 * C10699 + C141341 * C11255 + C63707 * C3646 +
              C63607 * C4004) *
                 C141365 +
             (C63708 * C10470 + C141341 * C10595 + C63707 * C3490 +
              C63607 * C3572) *
                 C14079 +
             (C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
              C63607 * C1419) *
                 C141479 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C14078) *
                C71442) *
               C141298 * C141497) *
              C818 +
          ((((C64608 + C64607) * C14078 + (C65310 + C65309) * C141479 +
             (C80372 + C80371) * C14079 + (C81192 + C81191) * C141365) *
                C71442 +
            ((C64604 + C64603) * C14078 + (C65308 + C65307) * C141479 +
             (C63707 * C3492 + C63607 * C3574 + C63708 * C10472 +
              C141341 * C10597) *
                 C14079 +
             (C63707 * C3648 + C63607 * C4006 + C63708 * C10701 +
              C141341 * C11257) *
                 C141365) *
                C141224) *
               C141298 * C141497 -
           (((C66277 + C66278) * C141365 + (C65639 + C65640) * C14079 +
             (C64266 + C64265) * C141479 + (C63739 + C63738) * C14078) *
                C141224 +
            ((C66279 + C66280) * C141365 + (C65643 + C65644) * C14079 +
             (C64264 + C64263) * C141479 + (C63735 + C63734) * C14078) *
                C71442) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[19] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
              C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                 C63607 +
             (C36666 + C36667) * C141341) *
                C71442 +
            ((C14636 + C14637) * C63607 + C81323 * C141341) * C141224) *
               C141298 * C816 -
           (((C36671 + C36670) * C141341 + C81324 * C63607) * C141224 +
            ((C36669 + C36668) * C141341 + (C36667 + C36666) * C63607) *
                C71442) *
               C141298 * C141497) *
              C818 +
          (((C81323 * C63607 + (C36670 + C36671) * C141341) * C71442 +
            ((C15623 + C15622) * C63607 +
             (C14599 * C2962 + C18282 + C18282 + C141479 * C3418 +
              C14600 * C10472 + C18283 + C18283 + C141365 * C11358) *
                 C141341) *
                C141224) *
               C141298 * C141497 -
           (((C15622 + C15623) * C141341 + (C14639 + C14638) * C63607) *
                C141224 +
            (C81324 * C141341 + (C14637 + C14636) * C63607) * C71442) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
              C71453 + C71453 + C141224 * C121) *
                 C141479 +
             (C81475 + C81476) * C141365) *
                C63607 +
            ((C72316 + C72317) * C141479 + (C75928 + C75927) * C141365) *
                C141341) *
               C1596 -
           (((C71449 * C13206 + C78604 + C78604 + C141224 * C13212 +
              C71447 * C13205 + C78603 + C78603 + C71442 * C13211) *
                 C141365 +
             (C75927 + C75928) * C141479) *
                C141341 +
            ((C71449 * C5326 + C78602 + C78602 + C141224 * C5334 +
              C71447 * C5325 + C78601 + C78601 + C71442 * C5333) *
                 C141365 +
             (C81476 + C81475) * C141479) *
                C63607) *
               C141499) *
              C141281 * C818 +
          ((((C81477 + C81478) * C141479 +
             (C71447 * C5326 + C81463 + C81463 + C71442 * C5334 +
              C71449 * C5327 + C81464 + C81464 + C141224 * C5335) *
                 C141365) *
                C63607 +
            ((C80229 + C80230) * C141479 +
             (C71447 * C13206 + C81465 + C81465 + C71442 * C13212 +
              C71449 * C13207 + C81466 + C81466 + C141224 * C13213) *
                 C141365) *
                C141341) *
               C141499 -
           (((C80230 + C80229) * C141365 + (C72321 + C72320) * C141479) *
                C141341 +
            ((C81478 + C81477) * C141365 +
             (C71449 * C110 + C71462 + C71462 + C141224 * C122 + C71447 * C109 +
              C71463 + C71463 + C71442 * C121) *
                 C141479) *
                C63607) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C71448 +
             (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                 C71442 +
             (C63734 + C63735) * C71450 + (C63736 + C63737) * C141224) *
                C141479 +
            ((C81629 + C81630) * C71448 + (C81631 + C81632) * C71442 +
             C81617 * C71450 + C81618 * C141224) *
                C141365) *
               C1596 -
           (((C81633 + C81634) * C141224 + (C81635 + C81636) * C71450 +
             (C63708 * C13208 + C141341 * C13297 + C63707 * C5329 +
              C63607 * C5395) *
                 C71442 +
             (C63708 * C13205 + C141341 * C13294 + C63707 * C5325 +
              C63607 * C5391) *
                 C71448) *
                C141365 +
            (C81627 * C141224 + C81628 * C71450 + (C81632 + C81631) * C71442 +
             (C81630 + C81629) * C71448) *
                C141479) *
               C141499) *
              C141281 * C818 +
          (((C81617 * C71448 + C81618 * C71442 + (C65640 + C65639) * C71450 +
             (C65638 + C65637) * C141224) *
                C141479 +
            ((C81636 + C81635) * C71448 + (C81634 + C81633) * C71442 +
             (C63707 * C5327 + C63607 * C5393 + C63708 * C13207 +
              C141341 * C13296) *
                 C71450 +
             (C63707 * C5331 + C63607 * C5397 + C63708 * C13210 +
              C141341 * C13299) *
                 C141224) *
                C141365) *
               C141499 -
           (((C65637 + C65638) * C141224 + (C65639 + C65640) * C71450 +
             C81627 * C71442 + C81628 * C71448) *
                C141365 +
            ((C63741 + C63740) * C141224 + (C63739 + C63738) * C71450 +
             (C63737 + C63736) * C71442 + (C63735 + C63734) * C71448) *
                C141479) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C71448 +
             (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
              C141365 * C1789) *
                 C71442 +
             (C14105 + C14106) * C71450 + (C14107 + C14108) * C141224) *
                C63607 +
            ((C35986 + C35987) * C71448 + (C35988 + C35989) * C71442 +
             C80503 * C71450 + C80504 * C141224) *
                C141341) *
               C1596 -
           (((C81775 + C81776) * C141224 + (C81777 + C81778) * C71450 +
             (C39587 + C39588) * C71442 + (C39589 + C39590) * C71448) *
                C141341 +
            ((C16003 + C16004) * C141224 + (C16005 + C16006) * C71450 +
             (C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
              C141479 * C1789) *
                 C71442 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C71448) *
                C63607) *
               C141499) *
              C141281 * C818 +
          ((((C16006 + C16005) * C71448 + (C16004 + C16003) * C71442 +
             (C16002 + C16001) * C71450 + (C16000 + C15999) * C141224) *
                C63607 +
            ((C81778 + C81777) * C71448 + (C81776 + C81775) * C71442 +
             (C14078 * C3492 + C141479 * C3648 + C14079 * C13207 +
              C141365 * C13376) *
                 C71450 +
             (C14078 * C3496 + C141479 * C3652 + C14079 * C13210 +
              C141365 * C13379) *
                 C141224) *
                C141341) *
               C141499 -
           (((C14966 + C14967) * C141224 + (C14968 + C14969) * C71450 +
             C80505 * C71442 + C80506 * C71448) *
                C141341 +
            ((C14112 + C14111) * C141224 + (C14110 + C14109) * C71450 +
             (C14108 + C14107) * C71442 + (C14106 + C14105) * C71448) *
                C63607) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C63707 +
             (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                 C63607 +
             (C72684 + C72685) * C63708 + (C72686 + C72687) * C141341) *
                C141479 +
            ((C81925 + C81926) * C63707 + (C81927 + C81928) * C63607 +
             (C76254 + C76253) * C63708 + (C76252 + C76251) * C141341) *
                C141365) *
               C1596 -
           (((C71450 * C13295 + C141224 * C13455 + C71448 * C13294 +
              C71442 * C13454) *
                 C141341 +
             (C71450 * C13206 + C141224 * C13209 + C71448 * C13205 +
              C71442 * C13208) *
                 C63708 +
             (C71450 * C5392 + C141224 * C5508 + C71448 * C5391 +
              C71442 * C5507) *
                 C63607 +
             (C71450 * C5326 + C141224 * C5330 + C71448 * C5325 +
              C71442 * C5329) *
                 C63707) *
                C141365 +
            ((C76251 + C76252) * C141341 + (C76253 + C76254) * C63708 +
             (C81928 + C81927) * C63607 + (C81926 + C81925) * C63707) *
                C141479) *
               C141499) *
              C141281 * C818 +
          ((((C81929 + C81930) * C63707 + (C81931 + C81932) * C63607 +
             (C80645 + C80646) * C63708 + (C80647 + C80648) * C141341) *
                C141479 +
            ((C71448 * C5326 + C71442 * C5330 + C71450 * C5327 +
              C141224 * C5331) *
                 C63707 +
             (C71448 * C5392 + C71442 * C5508 + C71450 * C5393 +
              C141224 * C5509) *
                 C63607 +
             (C71448 * C13206 + C71442 * C13209 + C71450 * C13207 +
              C141224 * C13210) *
                 C63708 +
             (C71448 * C13295 + C71442 * C13455 + C71450 * C13296 +
              C141224 * C13456) *
                 C141341) *
                C141365) *
               C141499 -
           (((C80648 + C80647) * C141341 + (C80646 + C80645) * C63708 +
             (C81932 + C81931) * C63607 + (C81930 + C81929) * C63707) *
                C141365 +
            ((C72695 + C72694) * C141341 + (C72693 + C72692) * C63708 +
             (C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                 C63607 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C63707) *
                C141479) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
              C63973 + C63973 + C141341 * C1171) *
                 C71442 +
             (C64006 + C64007) * C141224) *
                C141479 +
            ((C82081 + C82082) * C71442 + C82067 * C141224) * C141365) *
               C1596 -
           (((C82083 + C82084) * C141224 +
             (C63970 * C13205 + C71068 + C71068 + C141341 * C13531 +
              C63969 * C5325 + C71067 + C71067 + C63607 * C5561) *
                 C71442) *
                C141365 +
            (C82072 * C141224 + (C82082 + C82081) * C71442) * C141479) *
               C141499) *
              C141281 * C818 +
          (((C82067 * C71442 + (C65964 + C65963) * C141224) * C141479 +
            ((C82084 + C82083) * C71442 +
             (C63969 * C5327 + C71071 + C71071 + C63607 * C5563 +
              C63970 * C13207 + C71072 + C71072 + C141341 * C13533) *
                 C141224) *
                C141365) *
               C141499 -
           (((C65963 + C65964) * C141224 + C82072 * C71442) * C141365 +
            ((C64009 + C64008) * C141224 + (C64007 + C64006) * C71442) *
                C141479) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C63707 +
             (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
              C141365 * C2040) *
                 C63607 +
             (C35986 + C35987) * C63708 + (C36316 + C36317) * C141341) *
                C71442 +
            ((C14105 + C14106) * C63707 + (C14354 + C14355) * C63607 +
             C80503 * C63708 + C80919 * C141341) *
                C141224) *
               C1596 -
           (((C82219 + C82220) * C141341 + (C81777 + C81778) * C63708 +
             (C16368 + C16369) * C63607 + (C16005 + C16006) * C63707) *
                C141224 +
            ((C39931 + C39932) * C141341 + (C39589 + C39590) * C63708 +
             (C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
              C141479 * C2040) *
                 C63607 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C63707) *
                C71442) *
               C141499) *
              C141281 * C818 +
          ((((C16006 + C16005) * C63707 + (C16369 + C16368) * C63607 +
             (C81778 + C81777) * C63708 + (C82220 + C82219) * C141341) *
                C71442 +
            ((C16002 + C16001) * C63707 + (C16367 + C16366) * C63607 +
             (C14078 * C3492 + C141479 * C3648 + C14079 * C13207 +
              C141365 * C13376) *
                 C63708 +
             (C14078 * C3574 + C141479 * C3866 + C14079 * C13296 +
              C141365 * C13616) *
                 C141341) *
                C141224) *
               C141499 -
           (((C15286 + C15287) * C141341 + (C14968 + C14969) * C63708 +
             (C14357 + C14356) * C63607 + (C14110 + C14109) * C63707) *
                C141224 +
            (C80920 * C141341 + C80506 * C63708 + (C14355 + C14354) * C63607 +
             (C14106 + C14105) * C63707) *
                C71442) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C14078 +
             (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                 C141479 +
             (C81925 + C81926) * C14079 + (C82359 + C82360) * C141365) *
                C63607 +
            ((C72684 + C72685) * C14078 + (C73040 + C73041) * C141479 +
             (C76254 + C76253) * C14079 + (C76566 + C76565) * C141365) *
                C141341) *
               C1596 -
           (((C71450 * C13375 + C141224 * C13692 + C71448 * C13374 +
              C71442 * C13691) *
                 C141365 +
             (C71450 * C13206 + C141224 * C13209 + C71448 * C13205 +
              C71442 * C13208) *
                 C14079 +
             (C76565 + C76566) * C141479 + (C76253 + C76254) * C14078) *
                C141341 +
            ((C71450 * C5450 + C141224 * C5674 + C71448 * C5449 +
              C71442 * C5673) *
                 C141365 +
             (C71450 * C5326 + C141224 * C5330 + C71448 * C5325 +
              C71442 * C5329) *
                 C14079 +
             (C82360 + C82359) * C141479 + (C81926 + C81925) * C14078) *
                C63607) *
               C141499) *
              C141281 * C818 +
          ((((C81929 + C81930) * C14078 + (C82361 + C82362) * C141479 +
             (C71448 * C5326 + C71442 * C5330 + C71450 * C5327 +
              C141224 * C5331) *
                 C14079 +
             (C71448 * C5450 + C71442 * C5674 + C71450 * C5451 +
              C141224 * C5675) *
                 C141365) *
                C63607 +
            ((C80645 + C80646) * C14078 + (C81055 + C81056) * C141479 +
             (C71448 * C13206 + C71442 * C13209 + C71450 * C13207 +
              C141224 * C13210) *
                 C14079 +
             (C71448 * C13375 + C71442 * C13692 + C71450 * C13376 +
              C141224 * C13693) *
                 C141365) *
                C141341) *
               C141499 -
           (((C81056 + C81055) * C141365 + (C80646 + C80645) * C14079 +
             (C73045 + C73044) * C141479 + (C72693 + C72692) * C14078) *
                C141341 +
            ((C82362 + C82361) * C141365 + (C81930 + C81929) * C14079 +
             (C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                 C141479 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C14078) *
                C63607) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C14078 +
             (C63707 * C276 + C63607 * C635 + C63708 * C1006 +
              C141341 * C1419) *
                 C141479 +
             (C81629 + C81630) * C14079 + (C82503 + C82504) * C141365) *
                C71442 +
            ((C63734 + C63735) * C14078 + (C64263 + C64264) * C141479 +
             C81617 * C14079 + C82497 * C141365) *
                C141224) *
               C1596 -
           (((C82505 + C82506) * C141365 + (C81635 + C81636) * C14079 +
             C82502 * C141479 + C81628 * C14078) *
                C141224 +
            ((C63708 * C13374 + C141341 * C13768 + C63707 * C5449 +
              C63607 * C5727) *
                 C141365 +
             (C63708 * C13205 + C141341 * C13294 + C63707 * C5325 +
              C63607 * C5391) *
                 C14079 +
             (C82504 + C82503) * C141479 + (C81630 + C81629) * C14078) *
                C71442) *
               C141499) *
              C141281 * C818 +
          (((C81617 * C14078 + C82497 * C141479 + (C81636 + C81635) * C14079 +
             (C82506 + C82505) * C141365) *
                C71442 +
            ((C65640 + C65639) * C14078 + (C66278 + C66277) * C141479 +
             (C63707 * C5327 + C63607 * C5393 + C63708 * C13207 +
              C141341 * C13296) *
                 C14079 +
             (C63707 * C5451 + C63607 * C5729 + C63708 * C13376 +
              C141341 * C13770) *
                 C141365) *
                C141224) *
               C141499 -
           (((C66277 + C66278) * C141365 + (C65639 + C65640) * C14079 +
             (C64266 + C64265) * C141479 + (C63739 + C63738) * C14078) *
                C141224 +
            (C82502 * C141365 + C81628 * C14079 + (C64264 + C64263) * C141479 +
             (C63735 + C63734) * C14078) *
                C71442) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
              C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                 C63607 +
             (C36666 + C36667) * C141341) *
                C71442 +
            ((C14636 + C14637) * C63607 + C81323 * C141341) * C141224) *
               C1596 -
           (((C82645 + C82646) * C141341 + (C16725 + C16726) * C63607) *
                C141224 +
            ((C40270 + C40271) * C141341 +
             (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
              C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                 C63607) *
                C71442) *
               C141499) *
              C141281 * C818 +
          ((((C16726 + C16725) * C63607 + (C82646 + C82645) * C141341) *
                C71442 +
            ((C16724 + C16723) * C63607 +
             (C14599 * C3492 + C19196 + C19196 + C141479 * C4076 +
              C14600 * C13207 + C19197 + C19197 + C141365 * C13847) *
                 C141341) *
                C141224) *
               C141499 -
           (((C15622 + C15623) * C141341 + (C14639 + C14638) * C63607) *
                C141224 +
            (C81324 * C141341 + (C14637 + C14636) * C63607) * C71442) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
              C71453 + C71453 + C141224 * C121) *
                 C141479 +
             (C81475 + C81476) * C141365) *
                C63607 +
            ((C72316 + C72317) * C141479 + (C75928 + C75927) * C141365) *
                C141341) *
               C141298 * C2374 -
           (((C75925 + C75926) * C141365 + (C72319 + C72318) * C141479) *
                C141341 +
            ((C75927 + C75928) * C141365 + (C72317 + C72316) * C141479) *
                C63607) *
               C141298 * C141497) *
              C2376 +
          ((((C72320 + C72321) * C141479 + (C80229 + C80230) * C141365) *
                C63607 +
            ((C72322 + C72323) * C141479 +
             (C71447 * C10471 + C73364 + C73364 + C71442 * C10477 +
              C71449 * C10472 + C73365 + C73365 + C141224 * C10478) *
                 C141365) *
                C141341) *
               C141298 * C141497 -
           (((C80230 + C80229) * C141365 + (C72321 + C72320) * C141479) *
                C141341 +
            ((C81478 + C81477) * C141365 +
             (C71449 * C110 + C71462 + C71462 + C141224 * C122 + C71447 * C109 +
              C71463 + C71463 + C71442 * C121) *
                 C141479) *
                C63607) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C71448 +
             (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                 C71442 +
             (C63734 + C63735) * C71450 + (C63736 + C63737) * C141224) *
                C141479 +
            ((C81629 + C81630) * C71448 + (C81631 + C81632) * C71442 +
             C81617 * C71450 + C81618 * C141224) *
                C141365) *
               C141298 * C2374 -
           (((C80369 + C80370) * C141224 + (C80371 + C80372) * C71450 +
             (C63708 * C10473 + C141341 * C10598 + C63707 * C3494 +
              C63607 * C3576) *
                 C71442 +
             (C63708 * C10470 + C141341 * C10595 + C63707 * C3490 +
              C63607 * C3572) *
                 C71448) *
                C141365 +
            ((C64605 + C64606) * C141224 + (C64607 + C64608) * C71450 +
             (C63708 * C2964 + C141341 * C3030 + C63707 * C828 +
              C63607 * C917) *
                 C71442 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C71448) *
                C141479) *
               C141298 * C141497) *
              C2376 +
          ((((C64608 + C64607) * C71448 + (C64606 + C64605) * C71442 +
             (C64604 + C64603) * C71450 + (C64602 + C64601) * C141224) *
                C141479 +
            ((C80372 + C80371) * C71448 + (C80370 + C80369) * C71442 +
             (C63707 * C3492 + C63607 * C3574 + C63708 * C10472 +
              C141341 * C10597) *
                 C71450 +
             (C63707 * C3496 + C63607 * C3578 + C63708 * C10475 +
              C141341 * C10600) *
                 C141224) *
                C141365) *
               C141298 * C141497 -
           (((C65637 + C65638) * C141224 + (C65639 + C65640) * C71450 +
             C81627 * C71442 + C81628 * C71448) *
                C141365 +
            ((C63741 + C63740) * C141224 + (C63739 + C63738) * C71450 +
             (C63737 + C63736) * C71442 + (C63735 + C63734) * C71448) *
                C141479) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C71448 +
             (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
              C141365 * C1789) *
                 C71442 +
             (C14105 + C14106) * C71450 + (C14107 + C14108) * C141224) *
                C63607 +
            ((C35986 + C35987) * C71448 + (C35988 + C35989) * C71442 +
             C80503 * C71450 + C80504 * C141224) *
                C141341) *
               C141298 * C2374 -
           (((C35997 + C35996) * C141224 + (C35995 + C35994) * C71450 +
             (C35993 + C35992) * C71442 + (C35991 + C35990) * C71448) *
                C141341 +
            (C80505 * C141224 + C80506 * C71450 + (C35989 + C35988) * C71442 +
             (C35987 + C35986) * C71448) *
                C63607) *
               C141298 * C141497) *
              C2376 +
          (((C80503 * C71448 + C80504 * C71442 + (C14969 + C14968) * C71450 +
             (C14967 + C14966) * C141224) *
                C63607 +
            ((C35994 + C35995) * C71448 + (C35996 + C35997) * C71442 +
             (C14078 * C2962 + C141479 * C3086 + C14079 * C10472 +
              C141365 * C10701) *
                 C71450 +
             (C14078 * C2966 + C141479 * C3090 + C14079 * C10475 +
              C141365 * C10704) *
                 C141224) *
                C141341) *
               C141298 * C141497 -
           (((C14966 + C14967) * C141224 + (C14968 + C14969) * C71450 +
             C80505 * C71442 + C80506 * C71448) *
                C141341 +
            ((C14112 + C14111) * C141224 + (C14110 + C14109) * C71450 +
             (C14108 + C14107) * C71442 + (C14106 + C14105) * C71448) *
                C63607) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C63707 +
             (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                 C63607 +
             (C72684 + C72685) * C63708 + (C72686 + C72687) * C141341) *
                C141479 +
            ((C81925 + C81926) * C63707 + (C81927 + C81928) * C63607 +
             (C76254 + C76253) * C63708 + (C76252 + C76251) * C141341) *
                C141365) *
               C141298 * C2374 -
           (((C76247 + C76248) * C141341 + (C76249 + C76250) * C63708 +
             (C76251 + C76252) * C63607 + (C76253 + C76254) * C63707) *
                C141365 +
            ((C72691 + C72690) * C141341 + (C72689 + C72688) * C63708 +
             (C72687 + C72686) * C63607 + (C72685 + C72684) * C63707) *
                C141479) *
               C141298 * C141497) *
              C2376 +
          ((((C72692 + C72693) * C63707 + (C72694 + C72695) * C63607 +
             (C72696 + C72697) * C63708 + (C72698 + C72699) * C141341) *
                C141479 +
            ((C80645 + C80646) * C63707 + (C80647 + C80648) * C63607 +
             (C71448 * C10471 + C71442 * C10474 + C71450 * C10472 +
              C141224 * C10475) *
                 C63708 +
             (C71448 * C10596 + C71442 * C10816 + C71450 * C10597 +
              C141224 * C10817) *
                 C141341) *
                C141365) *
               C141298 * C141497 -
           (((C80648 + C80647) * C141341 + (C80646 + C80645) * C63708 +
             (C81932 + C81931) * C63607 + (C81930 + C81929) * C63707) *
                C141365 +
            ((C72695 + C72694) * C141341 + (C72693 + C72692) * C63708 +
             (C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                 C63607 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C63707) *
                C141479) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
              C63973 + C63973 + C141341 * C1171) *
                 C71442 +
             (C64006 + C64007) * C141224) *
                C141479 +
            ((C82081 + C82082) * C71442 + C82067 * C141224) * C141365) *
               C141298 * C2374 -
           (((C80787 + C80788) * C141224 +
             (C63970 * C10470 + C68521 + C68521 + C141341 * C10934 +
              C63969 * C3490 + C68520 + C68520 + C63607 * C3790) *
                 C71442) *
                C141365 +
            ((C64977 + C64978) * C141224 +
             (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
              C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                 C71442) *
                C141479) *
               C141298 * C141497) *
              C2376 +
          ((((C64978 + C64977) * C71442 + (C64976 + C64975) * C141224) *
                C141479 +
            ((C80788 + C80787) * C71442 +
             (C63969 * C3492 + C68524 + C68524 + C63607 * C3792 +
              C63970 * C10472 + C68525 + C68525 + C141341 * C10936) *
                 C141224) *
                C141365) *
               C141298 * C141497 -
           (((C65963 + C65964) * C141224 + C82072 * C71442) * C141365 +
            ((C64009 + C64008) * C141224 + (C64007 + C64006) * C71442) *
                C141479) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C63707 +
             (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
              C141365 * C2040) *
                 C63607 +
             (C35986 + C35987) * C63708 + (C36316 + C36317) * C141341) *
                C71442 +
            ((C14105 + C14106) * C63707 + (C14354 + C14355) * C63607 +
             C80503 * C63708 + C80919 * C141341) *
                C141224) *
               C141298 * C2374 -
           (((C36321 + C36320) * C141341 + (C35995 + C35994) * C63708 +
             C80920 * C63607 + C80506 * C63707) *
                C141224 +
            ((C36319 + C36318) * C141341 + (C35991 + C35990) * C63708 +
             (C36317 + C36316) * C63607 + (C35987 + C35986) * C63707) *
                C71442) *
               C141298 * C141497) *
              C2376 +
          (((C80503 * C63707 + C80919 * C63607 + (C35994 + C35995) * C63708 +
             (C36320 + C36321) * C141341) *
                C71442 +
            ((C14969 + C14968) * C63707 + (C15287 + C15286) * C63607 +
             (C14078 * C2962 + C141479 * C3086 + C14079 * C10472 +
              C141365 * C10701) *
                 C63708 +
             (C14078 * C3028 + C141479 * C3256 + C14079 * C10597 +
              C141365 * C11043) *
                 C141341) *
                C141224) *
               C141298 * C141497 -
           (((C15286 + C15287) * C141341 + (C14968 + C14969) * C63708 +
             (C14357 + C14356) * C63607 + (C14110 + C14109) * C63707) *
                C141224 +
            (C80920 * C141341 + C80506 * C63708 + (C14355 + C14354) * C63607 +
             (C14106 + C14105) * C63707) *
                C71442) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C14078 +
             (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                 C141479 +
             (C81925 + C81926) * C14079 + (C82359 + C82360) * C141365) *
                C63607 +
            ((C72684 + C72685) * C14078 + (C73040 + C73041) * C141479 +
             (C76254 + C76253) * C14079 + (C76566 + C76565) * C141365) *
                C141341) *
               C141298 * C2374 -
           (((C76563 + C76564) * C141365 + (C76249 + C76250) * C14079 +
             (C73043 + C73042) * C141479 + (C72689 + C72688) * C14078) *
                C141341 +
            ((C76565 + C76566) * C141365 + (C76253 + C76254) * C14079 +
             (C73041 + C73040) * C141479 + (C72685 + C72684) * C14078) *
                C63607) *
               C141298 * C141497) *
              C2376 +
          ((((C72692 + C72693) * C14078 + (C73044 + C73045) * C141479 +
             (C80645 + C80646) * C14079 + (C81055 + C81056) * C141365) *
                C63607 +
            ((C72696 + C72697) * C14078 + (C73046 + C73047) * C141479 +
             (C71448 * C10471 + C71442 * C10474 + C71450 * C10472 +
              C141224 * C10475) *
                 C14079 +
             (C71448 * C10700 + C71442 * C11146 + C71450 * C10701 +
              C141224 * C11147) *
                 C141365) *
                C141341) *
               C141298 * C141497 -
           (((C81056 + C81055) * C141365 + (C80646 + C80645) * C14079 +
             (C73045 + C73044) * C141479 + (C72693 + C72692) * C14078) *
                C141341 +
            ((C82362 + C82361) * C141365 + (C81930 + C81929) * C14079 +
             (C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                 C141479 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C14078) *
                C63607) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C14078 +
             (C63707 * C276 + C63607 * C635 + C63708 * C1006 +
              C141341 * C1419) *
                 C141479 +
             (C81629 + C81630) * C14079 + (C82503 + C82504) * C141365) *
                C71442 +
            ((C63734 + C63735) * C14078 + (C64263 + C64264) * C141479 +
             C81617 * C14079 + C82497 * C141365) *
                C141224) *
               C141298 * C2374 -
           (((C81191 + C81192) * C141365 + (C80371 + C80372) * C14079 +
             (C65309 + C65310) * C141479 + (C64607 + C64608) * C14078) *
                C141224 +
            ((C63708 * C10699 + C141341 * C11255 + C63707 * C3646 +
              C63607 * C4004) *
                 C141365 +
             (C63708 * C10470 + C141341 * C10595 + C63707 * C3490 +
              C63607 * C3572) *
                 C14079 +
             (C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
              C63607 * C1419) *
                 C141479 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C14078) *
                C71442) *
               C141298 * C141497) *
              C2376 +
          ((((C64608 + C64607) * C14078 + (C65310 + C65309) * C141479 +
             (C80372 + C80371) * C14079 + (C81192 + C81191) * C141365) *
                C71442 +
            ((C64604 + C64603) * C14078 + (C65308 + C65307) * C141479 +
             (C63707 * C3492 + C63607 * C3574 + C63708 * C10472 +
              C141341 * C10597) *
                 C14079 +
             (C63707 * C3648 + C63607 * C4006 + C63708 * C10701 +
              C141341 * C11257) *
                 C141365) *
                C141224) *
               C141298 * C141497 -
           (((C66277 + C66278) * C141365 + (C65639 + C65640) * C14079 +
             (C64266 + C64265) * C141479 + (C63739 + C63738) * C14078) *
                C141224 +
            (C82502 * C141365 + C81628 * C14079 + (C64264 + C64263) * C141479 +
             (C63735 + C63734) * C14078) *
                C71442) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
              C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                 C63607 +
             (C36666 + C36667) * C141341) *
                C71442 +
            ((C14636 + C14637) * C63607 + C81323 * C141341) * C141224) *
               C141298 * C2374 -
           (((C36671 + C36670) * C141341 + C81324 * C63607) * C141224 +
            ((C36669 + C36668) * C141341 + (C36667 + C36666) * C63607) *
                C71442) *
               C141298 * C141497) *
              C2376 +
          (((C81323 * C63607 + (C36670 + C36671) * C141341) * C71442 +
            ((C15623 + C15622) * C63607 +
             (C14599 * C2962 + C18282 + C18282 + C141479 * C3418 +
              C14600 * C10472 + C18283 + C18283 + C141365 * C11358) *
                 C141341) *
                C141224) *
               C141298 * C141497 -
           (((C15622 + C15623) * C141341 + (C14639 + C14638) * C63607) *
                C141224 +
            (C81324 * C141341 + (C14637 + C14636) * C63607) * C71442) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[22] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
             C71453 + C71453 + C141224 * C121) *
                C141479 +
            (C81475 + C81476) * C141365) *
               C63607 +
           ((C72316 + C72317) * C141479 + (C75928 + C75927) * C141365) *
               C141341) *
              C141298 * C2956 -
          (((C75925 + C75926) * C141365 + (C72319 + C72318) * C141479) *
               C141341 +
           ((C75927 + C75928) * C141365 + (C72317 + C72316) * C141479) *
               C63607) *
              C141298 * C2957 +
          ((C75166 * C141479 + (C75926 + C75925) * C141365) * C63607 +
           ((C75179 + C75178) * C141479 +
            (C71447 * C26351 + C75915 + C75915 + C71442 * C26355 +
             C71449 * C26352 + C75916 + C75916 + C141224 * C26356) *
                C141365) *
               C141341) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[22] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C71448 +
            (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                C71442 +
            (C63734 + C63735) * C71450 + (C63736 + C63737) * C141224) *
               C141479 +
           ((C81629 + C81630) * C71448 + (C81631 + C81632) * C71442 +
            C81617 * C71450 + C81618 * C141224) *
               C141365) *
              C141298 * C2956 -
          (((C80369 + C80370) * C141224 + (C80371 + C80372) * C71450 +
            (C63708 * C10473 + C141341 * C10598 + C63707 * C3494 +
             C63607 * C3576) *
                C71442 +
            (C63708 * C10470 + C141341 * C10595 + C63707 * C3490 +
             C63607 * C3572) *
                C71448) *
               C141365 +
           ((C64605 + C64606) * C141224 + (C64607 + C64608) * C71450 +
            (C63708 * C2964 + C141341 * C3030 + C63707 * C828 + C63607 * C917) *
                C71442 +
            (C63708 * C2960 + C141341 * C3026 + C63707 * C823 + C63607 * C912) *
                C71448) *
               C141479) *
              C141298 * C2957 +
          (((C63707 * C2960 + C63607 * C3026 + C63708 * C9667 +
             C141341 * C9768) *
                C71448 +
            (C63707 * C2964 + C63607 * C3030 + C63708 * C9670 +
             C141341 * C9771) *
                C71442 +
            (C63707 * C2961 + C63607 * C3027 + C63708 * C9668 +
             C141341 * C9769) *
                C71450 +
            (C63707 * C2965 + C63607 * C3031 + C63708 * C9671 +
             C141341 * C9772) *
                C141224) *
               C141479 +
           ((C63707 * C10470 + C63607 * C10595 + C63708 * C26351 +
             C141341 * C26477) *
                C71448 +
            (C63707 * C10473 + C63607 * C10598 + C63708 * C26353 +
             C141341 * C26479) *
                C71442 +
            (C63707 * C10471 + C63607 * C10596 + C63708 * C26352 +
             C141341 * C26478) *
                C71450 +
            (C63707 * C10474 + C63607 * C10599 + C63708 * C26354 +
             C141341 * C26480) *
                C141224) *
               C141365) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[22] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C71448 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C71442 +
            (C14105 + C14106) * C71450 + (C14107 + C14108) * C141224) *
               C63607 +
           ((C35986 + C35987) * C71448 + (C35988 + C35989) * C71442 +
            C80503 * C71450 + C80504 * C141224) *
               C141341) *
              C141298 * C2956 -
          (((C35997 + C35996) * C141224 + (C35995 + C35994) * C71450 +
            (C35993 + C35992) * C71442 + (C35991 + C35990) * C71448) *
               C141341 +
           (C80505 * C141224 + C80506 * C71450 + (C35989 + C35988) * C71442 +
            (C35987 + C35986) * C71448) *
               C63607) *
              C141298 * C2957 +
          ((C38750 * C71448 + C38751 * C71442 + (C35994 + C35995) * C71450 +
            (C35996 + C35997) * C141224) *
               C63607 +
           ((C38765 + C38764) * C71448 + (C38763 + C38762) * C71442 +
            (C14078 * C9668 + C141479 * C9849 + C14079 * C26352 +
             C141365 * C26580) *
                C71450 +
            (C14078 * C9671 + C141479 * C9852 + C14079 * C26354 +
             C141365 * C26582) *
                C141224) *
               C141341) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[22] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C63707 +
            (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                C63607 +
            (C72684 + C72685) * C63708 + (C72686 + C72687) * C141341) *
               C141479 +
           ((C81925 + C81926) * C63707 + (C81927 + C81928) * C63607 +
            (C76254 + C76253) * C63708 + (C76252 + C76251) * C141341) *
               C141365) *
              C141298 * C2956 -
          (((C76247 + C76248) * C141341 + (C76249 + C76250) * C63708 +
            (C76251 + C76252) * C63607 + (C76253 + C76254) * C63707) *
               C141365 +
           ((C72691 + C72690) * C141341 + (C72689 + C72688) * C63708 +
            (C72687 + C72686) * C63607 + (C72685 + C72684) * C63707) *
               C141479) *
              C141298 * C2957 +
          ((C75409 * C63707 + C75410 * C63607 + (C75422 + C75421) * C63708 +
            (C75420 + C75419) * C141341) *
               C141479 +
           ((C76250 + C76249) * C63707 + (C76248 + C76247) * C63607 +
            (C71448 * C26351 + C71442 * C26353 + C71450 * C26352 +
             C141224 * C26354) *
                C63708 +
            (C71448 * C26477 + C71442 * C26695 + C71450 * C26478 +
             C141224 * C26696) *
                C141341) *
               C141365) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[22] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
             C63973 + C63973 + C141341 * C1171) *
                C71442 +
            (C64006 + C64007) * C141224) *
               C141479 +
           ((C82081 + C82082) * C71442 + C82067 * C141224) * C141365) *
              C141298 * C2956 -
          (((C80787 + C80788) * C141224 +
            (C63970 * C10470 + C68521 + C68521 + C141341 * C10934 +
             C63969 * C3490 + C68520 + C68520 + C63607 * C3790) *
                C71442) *
               C141365 +
           ((C64977 + C64978) * C141224 +
            (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
             C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                C71442) *
               C141479) *
              C141298 * C2957 +
          (((C63969 * C2960 + C67677 + C67677 + C63607 * C3196 +
             C63970 * C9667 + C67678 + C67678 + C141341 * C10035) *
                C71442 +
            (C63969 * C2961 + C67679 + C67679 + C63607 * C3197 +
             C63970 * C9668 + C67680 + C67680 + C141341 * C10036) *
                C141224) *
               C141479 +
           ((C63969 * C10470 + C84307 + C84307 + C63607 * C10934 +
             C63970 * C26351 + C84308 + C84308 + C141341 * C26819) *
                C71442 +
            (C63969 * C10471 + C84309 + C84309 + C63607 * C10935 +
             C63970 * C26352 + C84310 + C84310 + C141341 * C26820) *
                C141224) *
               C141365) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[22] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C63707 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C63607 +
            (C35986 + C35987) * C63708 + (C36316 + C36317) * C141341) *
               C71442 +
           ((C14105 + C14106) * C63707 + (C14354 + C14355) * C63607 +
            C80503 * C63708 + C80919 * C141341) *
               C141224) *
              C141298 * C2956 -
          (((C36321 + C36320) * C141341 + (C35995 + C35994) * C63708 +
            C80920 * C63607 + C80506 * C63707) *
               C141224 +
           ((C36319 + C36318) * C141341 + (C35991 + C35990) * C63708 +
            (C36317 + C36316) * C63607 + (C35987 + C35986) * C63707) *
               C71442) *
              C141298 * C2957 +
          ((C38750 * C63707 + C38992 * C63607 + (C38765 + C38764) * C63708 +
            (C38998 + C38997) * C141341) *
               C71442 +
           ((C35994 + C35995) * C63707 + (C36320 + C36321) * C63607 +
            (C14078 * C9668 + C141479 * C9849 + C14079 * C26352 +
             C141365 * C26580) *
                C63708 +
            (C14078 * C9769 + C141479 * C10119 + C14079 * C26478 +
             C141365 * C26926) *
                C141341) *
               C141224) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[22] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C14078 +
            (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                C141479 +
            (C81925 + C81926) * C14079 + (C82359 + C82360) * C141365) *
               C63607 +
           ((C72684 + C72685) * C14078 + (C73040 + C73041) * C141479 +
            (C76254 + C76253) * C14079 + (C76566 + C76565) * C141365) *
               C141341) *
              C141298 * C2956 -
          (((C76563 + C76564) * C141365 + (C76249 + C76250) * C14079 +
            (C73043 + C73042) * C141479 + (C72689 + C72688) * C14078) *
               C141341 +
           ((C76565 + C76566) * C141365 + (C76253 + C76254) * C14079 +
            (C73041 + C73040) * C141479 + (C72685 + C72684) * C14078) *
               C63607) *
              C141298 * C2957 +
          ((C75409 * C14078 + C75652 * C141479 + (C76250 + C76249) * C14079 +
            (C76564 + C76563) * C141365) *
               C63607 +
           ((C75422 + C75421) * C14078 + (C75659 + C75658) * C141479 +
            (C71448 * C26351 + C71442 * C26353 + C71450 * C26352 +
             C141224 * C26354) *
                C14079 +
            (C71448 * C26579 + C71442 * C27028 + C71450 * C26580 +
             C141224 * C27029) *
                C141365) *
               C141341) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[22] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C14078 +
            (C63707 * C276 + C63607 * C635 + C63708 * C1006 + C141341 * C1419) *
                C141479 +
            (C81629 + C81630) * C14079 + (C82503 + C82504) * C141365) *
               C71442 +
           ((C63734 + C63735) * C14078 + (C64263 + C64264) * C141479 +
            C81617 * C14079 + C82497 * C141365) *
               C141224) *
              C141298 * C2956 -
          (((C81191 + C81192) * C141365 + (C80371 + C80372) * C14079 +
            (C65309 + C65310) * C141479 + (C64607 + C64608) * C14078) *
               C141224 +
           ((C63708 * C10699 + C141341 * C11255 + C63707 * C3646 +
             C63607 * C4004) *
                C141365 +
            (C63708 * C10470 + C141341 * C10595 + C63707 * C3490 +
             C63607 * C3572) *
                C14079 +
            (C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
             C63607 * C1419) *
                C141479 +
            (C63708 * C2960 + C141341 * C3026 + C63707 * C823 + C63607 * C912) *
                C14078) *
               C71442) *
              C141298 * C2957 +
          (((C63707 * C2960 + C63607 * C3026 + C63708 * C9667 +
             C141341 * C9768) *
                C14078 +
            (C63707 * C3084 + C63607 * C3362 + C63708 * C9848 +
             C141341 * C10284) *
                C141479 +
            (C63707 * C10470 + C63607 * C10595 + C63708 * C26351 +
             C141341 * C26477) *
                C14079 +
            (C63707 * C10699 + C63607 * C11255 + C63708 * C26579 +
             C141341 * C27140) *
                C141365) *
               C71442 +
           ((C63707 * C2961 + C63607 * C3027 + C63708 * C9668 +
             C141341 * C9769) *
                C14078 +
            (C63707 * C3085 + C63607 * C3363 + C63708 * C9849 +
             C141341 * C10285) *
                C141479 +
            (C63707 * C10471 + C63607 * C10596 + C63708 * C26352 +
             C141341 * C26478) *
                C14079 +
            (C63707 * C10700 + C63607 * C11256 + C63708 * C26580 +
             C141341 * C27141) *
                C141365) *
               C141224) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[22] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 + C14600 * C1601 +
             C14603 + C14603 + C141365 * C2283) *
                C63607 +
            (C36666 + C36667) * C141341) *
               C71442 +
           ((C14636 + C14637) * C63607 + C81323 * C141341) * C141224) *
              C141298 * C2956 -
          (((C36671 + C36670) * C141341 + C81324 * C63607) * C141224 +
           ((C36669 + C36668) * C141341 + (C36667 + C36666) * C63607) *
               C71442) *
              C141298 * C2957 +
          ((C39228 * C63607 + (C39240 + C39239) * C141341) * C71442 +
           ((C36670 + C36671) * C63607 +
            (C14599 * C9668 + C36652 + C36652 + C141479 * C10362 +
             C14600 * C26352 + C36653 + C36653 + C141365 * C27241) *
                C141341) *
               C141224) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
              C71453 + C71453 + C141224 * C121) *
                 C141479 +
             (C81475 + C81476) * C141365) *
                C63607 +
            ((C72316 + C72317) * C141479 + C84833 * C141365) * C141341) *
               C1596 -
           (((C84843 + C84844) * C141365 + C84838 * C141479) * C141341 +
            ((C71449 * C5326 + C78602 + C78602 + C141224 * C5334 +
              C71447 * C5325 + C78601 + C78601 + C71442 * C5333) *
                 C141365 +
             (C81476 + C81475) * C141479) *
                C63607) *
               C141499) *
              C2374 +
          (((C84833 * C141479 + (C84844 + C84843) * C141365) * C63607 +
            ((C75926 + C75925) * C141479 +
             (C71447 * C29087 + C78605 + C78605 + C71442 * C29091 +
              C71449 * C29088 + C78606 + C78606 + C141224 * C29092) *
                 C141365) *
                C141341) *
               C141499 -
           (((C75925 + C75926) * C141365 + (C72319 + C72318) * C141479) *
                C141341 +
            (C84838 * C141365 + (C72317 + C72316) * C141479) * C63607) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C71448 +
             (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                 C71442 +
             (C63734 + C63735) * C71450 + (C63736 + C63737) * C141224) *
                C141479 +
            ((C81629 + C81630) * C71448 + (C81631 + C81632) * C71442 +
             C81617 * C71450 + C81618 * C141224) *
                C141365) *
               C1596 -
           (((C81633 + C81634) * C141224 + (C81635 + C81636) * C71450 +
             (C63708 * C13208 + C141341 * C13297 + C63707 * C5329 +
              C63607 * C5395) *
                 C71442 +
             (C63708 * C13205 + C141341 * C13294 + C63707 * C5325 +
              C63607 * C5391) *
                 C71448) *
                C141365 +
            (C81627 * C141224 + C81628 * C71450 + (C81632 + C81631) * C71442 +
             (C81630 + C81629) * C71448) *
                C141479) *
               C141499) *
              C2374 +
          ((((C84983 + C84984) * C71448 + (C84985 + C84986) * C71442 +
             (C80372 + C80371) * C71450 + (C80370 + C80369) * C141224) *
                C141479 +
            ((C63707 * C13205 + C63607 * C13294 + C63708 * C29087 +
              C141341 * C29173) *
                 C71448 +
             (C63707 * C13208 + C63607 * C13297 + C63708 * C29089 +
              C141341 * C29175) *
                 C71442 +
             (C63707 * C13206 + C63607 * C13295 + C63708 * C29088 +
              C141341 * C29174) *
                 C71450 +
             (C63707 * C13209 + C63607 * C13298 + C63708 * C29090 +
              C141341 * C29176) *
                 C141224) *
                C141365) *
               C141499 -
           (((C80369 + C80370) * C141224 + (C80371 + C80372) * C71450 +
             (C84986 + C84985) * C71442 + (C84984 + C84983) * C71448) *
                C141365 +
            ((C64605 + C64606) * C141224 + (C64607 + C64608) * C71450 +
             (C63708 * C2964 + C141341 * C3030 + C63707 * C828 +
              C63607 * C917) *
                 C71442 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C71448) *
                C141479) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C71448 +
             (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
              C141365 * C1789) *
                 C71442 +
             (C14105 + C14106) * C71450 + (C14107 + C14108) * C141224) *
                C63607 +
            ((C35986 + C35987) * C71448 + (C35988 + C35989) * C71442 +
             C80503 * C71450 + C80504 * C141224) *
                C141341) *
               C1596 -
           (((C81775 + C81776) * C141224 + (C81777 + C81778) * C71450 +
             (C39587 + C39588) * C71442 + (C39589 + C39590) * C71448) *
                C141341 +
            ((C16003 + C16004) * C141224 + (C16005 + C16006) * C71450 +
             (C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
              C141479 * C1789) *
                 C71442 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C71448) *
                C63607) *
               C141499) *
              C2374 +
          ((((C39590 + C39589) * C71448 + (C39588 + C39587) * C71442 +
             (C81778 + C81777) * C71450 + (C81776 + C81775) * C141224) *
                C63607 +
            ((C39586 + C39585) * C71448 + (C39584 + C39583) * C71442 +
             (C14078 * C10471 + C141479 * C10700 + C14079 * C29088 +
              C141365 * C29252) *
                 C71450 +
             (C14078 * C10474 + C141479 * C10703 + C14079 * C29090 +
              C141365 * C29254) *
                 C141224) *
                C141341) *
               C141499 -
           (((C35997 + C35996) * C141224 + (C35995 + C35994) * C71450 +
             (C35993 + C35992) * C71442 + (C35991 + C35990) * C71448) *
                C141341 +
            (C80505 * C141224 + C80506 * C71450 + (C35989 + C35988) * C71442 +
             (C35987 + C35986) * C71448) *
                C63607) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C63707 +
             (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                 C63607 +
             (C72684 + C72685) * C63708 + (C72686 + C72687) * C141341) *
                C141479 +
            ((C81925 + C81926) * C63707 + (C81927 + C81928) * C63607 +
             C85247 * C63708 + C85248 * C141341) *
                C141365) *
               C1596 -
           (((C85259 + C85260) * C141341 + (C85261 + C85262) * C63708 +
             (C71450 * C5392 + C141224 * C5508 + C71448 * C5391 +
              C71442 * C5507) *
                 C63607 +
             (C71450 * C5326 + C141224 * C5330 + C71448 * C5325 +
              C71442 * C5329) *
                 C63707) *
                C141365 +
            (C85257 * C141341 + C85258 * C63708 + (C81928 + C81927) * C63607 +
             (C81926 + C81925) * C63707) *
                C141479) *
               C141499) *
              C2374 +
          (((C85247 * C63707 + C85248 * C63607 + (C76250 + C76249) * C63708 +
             (C76248 + C76247) * C141341) *
                C141479 +
            ((C85262 + C85261) * C63707 + (C85260 + C85259) * C63607 +
             (C71448 * C29087 + C71442 * C29089 + C71450 * C29088 +
              C141224 * C29090) *
                 C63708 +
             (C71448 * C29173 + C71442 * C29329 + C71450 * C29174 +
              C141224 * C29330) *
                 C141341) *
                C141365) *
               C141499 -
           (((C76247 + C76248) * C141341 + (C76249 + C76250) * C63708 +
             C85257 * C63607 + C85258 * C63707) *
                C141365 +
            ((C72691 + C72690) * C141341 + (C72689 + C72688) * C63708 +
             (C72687 + C72686) * C63607 + (C72685 + C72684) * C63707) *
                C141479) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
              C63973 + C63973 + C141341 * C1171) *
                 C71442 +
             (C64006 + C64007) * C141224) *
                C141479 +
            ((C82081 + C82082) * C71442 + C82067 * C141224) * C141365) *
               C1596 -
           (((C82083 + C82084) * C141224 +
             (C63970 * C13205 + C71068 + C71068 + C141341 * C13531 +
              C63969 * C5325 + C71067 + C71067 + C63607 * C5561) *
                 C71442) *
                C141365 +
            (C82072 * C141224 + (C82082 + C82081) * C71442) * C141479) *
               C141499) *
              C2374 +
          ((((C85405 + C85406) * C71442 + (C80788 + C80787) * C141224) *
                C141479 +
            ((C63969 * C13205 + C85397 + C85397 + C63607 * C13531 +
              C63970 * C29087 + C85398 + C85398 + C141341 * C29405) *
                 C71442 +
             (C63969 * C13206 + C85399 + C85399 + C63607 * C13532 +
              C63970 * C29088 + C85400 + C85400 + C141341 * C29406) *
                 C141224) *
                C141365) *
               C141499 -
           (((C80787 + C80788) * C141224 + (C85406 + C85405) * C71442) *
                C141365 +
            ((C64977 + C64978) * C141224 +
             (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
              C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                 C71442) *
                C141479) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C63707 +
             (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
              C141365 * C2040) *
                 C63607 +
             (C35986 + C35987) * C63708 + (C36316 + C36317) * C141341) *
                C71442 +
            ((C14105 + C14106) * C63707 + (C14354 + C14355) * C63607 +
             C80503 * C63708 + C80919 * C141341) *
                C141224) *
               C1596 -
           (((C82219 + C82220) * C141341 + (C81777 + C81778) * C63708 +
             (C16368 + C16369) * C63607 + (C16005 + C16006) * C63707) *
                C141224 +
            ((C39931 + C39932) * C141341 + (C39589 + C39590) * C63708 +
             (C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
              C141479 * C2040) *
                 C63607 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C63707) *
                C71442) *
               C141499) *
              C2374 +
          ((((C39590 + C39589) * C63707 + (C39932 + C39931) * C63607 +
             (C39586 + C39585) * C63708 + (C39930 + C39929) * C141341) *
                C71442 +
            ((C81778 + C81777) * C63707 + (C82220 + C82219) * C63607 +
             (C14078 * C10471 + C141479 * C10700 + C14079 * C29088 +
              C141365 * C29252) *
                 C63708 +
             (C14078 * C10596 + C141479 * C11042 + C14079 * C29174 +
              C141365 * C29488) *
                 C141341) *
                C141224) *
               C141499 -
           (((C36321 + C36320) * C141341 + (C35995 + C35994) * C63708 +
             C80920 * C63607 + C80506 * C63707) *
                C141224 +
            ((C36319 + C36318) * C141341 + (C35991 + C35990) * C63708 +
             (C36317 + C36316) * C63607 + (C35987 + C35986) * C63707) *
                C71442) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C14078 +
             (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                 C141479 +
             (C81925 + C81926) * C14079 + (C82359 + C82360) * C141365) *
                C63607 +
            ((C72684 + C72685) * C14078 + (C73040 + C73041) * C141479 +
             C85247 * C14079 + C85667 * C141365) *
                C141341) *
               C1596 -
           (((C85673 + C85674) * C141365 + (C85261 + C85262) * C14079 +
             C85672 * C141479 + C85258 * C14078) *
                C141341 +
            ((C71450 * C5450 + C141224 * C5674 + C71448 * C5449 +
              C71442 * C5673) *
                 C141365 +
             (C71450 * C5326 + C141224 * C5330 + C71448 * C5325 +
              C71442 * C5329) *
                 C14079 +
             (C82360 + C82359) * C141479 + (C81926 + C81925) * C14078) *
                C63607) *
               C141499) *
              C2374 +
          (((C85247 * C14078 + C85667 * C141479 + (C85262 + C85261) * C14079 +
             (C85674 + C85673) * C141365) *
                C63607 +
            ((C76250 + C76249) * C14078 + (C76564 + C76563) * C141479 +
             (C71448 * C29087 + C71442 * C29089 + C71450 * C29088 +
              C141224 * C29090) *
                 C14079 +
             (C71448 * C29251 + C71442 * C29563 + C71450 * C29252 +
              C141224 * C29564) *
                 C141365) *
                C141341) *
               C141499 -
           (((C76563 + C76564) * C141365 + (C76249 + C76250) * C14079 +
             (C73043 + C73042) * C141479 + (C72689 + C72688) * C14078) *
                C141341 +
            (C85672 * C141365 + C85258 * C14079 + (C73041 + C73040) * C141479 +
             (C72685 + C72684) * C14078) *
                C63607) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C14078 +
             (C63707 * C276 + C63607 * C635 + C63708 * C1006 +
              C141341 * C1419) *
                 C141479 +
             (C81629 + C81630) * C14079 + (C82503 + C82504) * C141365) *
                C71442 +
            ((C63734 + C63735) * C14078 + (C64263 + C64264) * C141479 +
             C81617 * C14079 + C82497 * C141365) *
                C141224) *
               C1596 -
           (((C82505 + C82506) * C141365 + (C81635 + C81636) * C14079 +
             C82502 * C141479 + C81628 * C14078) *
                C141224 +
            ((C63708 * C13374 + C141341 * C13768 + C63707 * C5449 +
              C63607 * C5727) *
                 C141365 +
             (C63708 * C13205 + C141341 * C13294 + C63707 * C5325 +
              C63607 * C5391) *
                 C14079 +
             (C82504 + C82503) * C141479 + (C81630 + C81629) * C14078) *
                C71442) *
               C141499) *
              C2374 +
          ((((C84983 + C84984) * C14078 + (C85809 + C85810) * C141479 +
             (C63707 * C13205 + C63607 * C13294 + C63708 * C29087 +
              C141341 * C29173) *
                 C14079 +
             (C63707 * C13374 + C63607 * C13768 + C63708 * C29251 +
              C141341 * C29639) *
                 C141365) *
                C71442 +
            ((C80372 + C80371) * C14078 + (C81192 + C81191) * C141479 +
             (C63707 * C13206 + C63607 * C13295 + C63708 * C29088 +
              C141341 * C29174) *
                 C14079 +
             (C63707 * C13375 + C63607 * C13769 + C63708 * C29252 +
              C141341 * C29640) *
                 C141365) *
                C141224) *
               C141499 -
           (((C81191 + C81192) * C141365 + (C80371 + C80372) * C14079 +
             (C65309 + C65310) * C141479 + (C64607 + C64608) * C14078) *
                C141224 +
            ((C85810 + C85809) * C141365 + (C84984 + C84983) * C14079 +
             (C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
              C63607 * C1419) *
                 C141479 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C14078) *
                C71442) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
              C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                 C63607 +
             (C36666 + C36667) * C141341) *
                C71442 +
            ((C14636 + C14637) * C63607 + C81323 * C141341) * C141224) *
               C1596 -
           (((C82645 + C82646) * C141341 + (C16725 + C16726) * C63607) *
                C141224 +
            ((C40270 + C40271) * C141341 +
             (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
              C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                 C63607) *
                C71442) *
               C141499) *
              C2374 +
          ((((C40271 + C40270) * C63607 + (C40269 + C40268) * C141341) *
                C71442 +
            ((C82646 + C82645) * C63607 +
             (C14599 * C10471 + C37641 + C37641 + C141479 * C11357 +
              C14600 * C29088 + C37642 + C37642 + C141365 * C29716) *
                 C141341) *
                C141224) *
               C141499 -
           (((C36671 + C36670) * C141341 + C81324 * C63607) * C141224 +
            ((C36669 + C36668) * C141341 + (C36667 + C36666) * C63607) *
                C71442) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[24] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
              C71453 + C71453 + C141224 * C121) *
                 C141479 +
             (C81475 + C81476) * C141365) *
                C63607 +
            ((C72316 + C72317) * C141479 + C84833 * C141365) * C141341) *
               C4148 -
           (((C84843 + C84844) * C141365 + C84838 * C141479) * C141341 +
            ((C71449 * C5326 + C78602 + C78602 + C141224 * C5334 +
              C71447 * C5325 + C78601 + C78601 + C71442 * C5333) *
                 C141365 +
             (C81476 + C81475) * C141479) *
                C63607) *
               C141499) *
              C141281 * C2376 +
          ((((C81477 + C81478) * C141479 +
             (C71447 * C5326 + C81463 + C81463 + C71442 * C5334 +
              C71449 * C5327 + C81464 + C81464 + C141224 * C5335) *
                 C141365) *
                C63607 +
            ((C80229 + C80230) * C141479 +
             (C71447 * C13206 + C81465 + C81465 + C71442 * C13212 +
              C71449 * C13207 + C81466 + C81466 + C141224 * C13213) *
                 C141365) *
                C141341) *
               C141499 -
           (((C80230 + C80229) * C141365 + (C72321 + C72320) * C141479) *
                C141341 +
            ((C81478 + C81477) * C141365 +
             (C71449 * C110 + C71462 + C71462 + C141224 * C122 + C71447 * C109 +
              C71463 + C71463 + C71442 * C121) *
                 C141479) *
                C63607) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[24] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C71448 +
             (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                 C71442 +
             (C63734 + C63735) * C71450 + (C63736 + C63737) * C141224) *
                C141479 +
            ((C81629 + C81630) * C71448 + (C81631 + C81632) * C71442 +
             C81617 * C71450 + C81618 * C141224) *
                C141365) *
               C4148 -
           (((C81633 + C81634) * C141224 + (C81635 + C81636) * C71450 +
             (C63708 * C13208 + C141341 * C13297 + C63707 * C5329 +
              C63607 * C5395) *
                 C71442 +
             (C63708 * C13205 + C141341 * C13294 + C63707 * C5325 +
              C63607 * C5391) *
                 C71448) *
                C141365 +
            (C81627 * C141224 + C81628 * C71450 + (C81632 + C81631) * C71442 +
             (C81630 + C81629) * C71448) *
                C141479) *
               C141499) *
              C141281 * C2376 +
          (((C81617 * C71448 + C81618 * C71442 + (C65640 + C65639) * C71450 +
             (C65638 + C65637) * C141224) *
                C141479 +
            ((C81636 + C81635) * C71448 + (C81634 + C81633) * C71442 +
             (C63707 * C5327 + C63607 * C5393 + C63708 * C13207 +
              C141341 * C13296) *
                 C71450 +
             (C63707 * C5331 + C63607 * C5397 + C63708 * C13210 +
              C141341 * C13299) *
                 C141224) *
                C141365) *
               C141499 -
           (((C65637 + C65638) * C141224 + (C65639 + C65640) * C71450 +
             C81627 * C71442 + C81628 * C71448) *
                C141365 +
            ((C63741 + C63740) * C141224 + (C63739 + C63738) * C71450 +
             (C63737 + C63736) * C71442 + (C63735 + C63734) * C71448) *
                C141479) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[24] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C71448 +
             (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
              C141365 * C1789) *
                 C71442 +
             (C14105 + C14106) * C71450 + (C14107 + C14108) * C141224) *
                C63607 +
            ((C35986 + C35987) * C71448 + (C35988 + C35989) * C71442 +
             C80503 * C71450 + C80504 * C141224) *
                C141341) *
               C4148 -
           (((C81775 + C81776) * C141224 + (C81777 + C81778) * C71450 +
             (C39587 + C39588) * C71442 + (C39589 + C39590) * C71448) *
                C141341 +
            ((C16003 + C16004) * C141224 + (C16005 + C16006) * C71450 +
             (C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
              C141479 * C1789) *
                 C71442 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C71448) *
                C63607) *
               C141499) *
              C141281 * C2376 +
          ((((C16006 + C16005) * C71448 + (C16004 + C16003) * C71442 +
             (C16002 + C16001) * C71450 + (C16000 + C15999) * C141224) *
                C63607 +
            ((C81778 + C81777) * C71448 + (C81776 + C81775) * C71442 +
             (C14078 * C3492 + C141479 * C3648 + C14079 * C13207 +
              C141365 * C13376) *
                 C71450 +
             (C14078 * C3496 + C141479 * C3652 + C14079 * C13210 +
              C141365 * C13379) *
                 C141224) *
                C141341) *
               C141499 -
           (((C14966 + C14967) * C141224 + (C14968 + C14969) * C71450 +
             C80505 * C71442 + C80506 * C71448) *
                C141341 +
            ((C14112 + C14111) * C141224 + (C14110 + C14109) * C71450 +
             (C14108 + C14107) * C71442 + (C14106 + C14105) * C71448) *
                C63607) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[24] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C63707 +
             (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                 C63607 +
             (C72684 + C72685) * C63708 + (C72686 + C72687) * C141341) *
                C141479 +
            ((C81925 + C81926) * C63707 + (C81927 + C81928) * C63607 +
             C85247 * C63708 + C85248 * C141341) *
                C141365) *
               C4148 -
           (((C85259 + C85260) * C141341 + (C85261 + C85262) * C63708 +
             (C71450 * C5392 + C141224 * C5508 + C71448 * C5391 +
              C71442 * C5507) *
                 C63607 +
             (C71450 * C5326 + C141224 * C5330 + C71448 * C5325 +
              C71442 * C5329) *
                 C63707) *
                C141365 +
            (C85257 * C141341 + C85258 * C63708 + (C81928 + C81927) * C63607 +
             (C81926 + C81925) * C63707) *
                C141479) *
               C141499) *
              C141281 * C2376 +
          ((((C81929 + C81930) * C63707 + (C81931 + C81932) * C63607 +
             (C80645 + C80646) * C63708 + (C80647 + C80648) * C141341) *
                C141479 +
            ((C71448 * C5326 + C71442 * C5330 + C71450 * C5327 +
              C141224 * C5331) *
                 C63707 +
             (C71448 * C5392 + C71442 * C5508 + C71450 * C5393 +
              C141224 * C5509) *
                 C63607 +
             (C71448 * C13206 + C71442 * C13209 + C71450 * C13207 +
              C141224 * C13210) *
                 C63708 +
             (C71448 * C13295 + C71442 * C13455 + C71450 * C13296 +
              C141224 * C13456) *
                 C141341) *
                C141365) *
               C141499 -
           (((C80648 + C80647) * C141341 + (C80646 + C80645) * C63708 +
             (C81932 + C81931) * C63607 + (C81930 + C81929) * C63707) *
                C141365 +
            ((C72695 + C72694) * C141341 + (C72693 + C72692) * C63708 +
             (C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                 C63607 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C63707) *
                C141479) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[24] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
              C63973 + C63973 + C141341 * C1171) *
                 C71442 +
             (C64006 + C64007) * C141224) *
                C141479 +
            ((C82081 + C82082) * C71442 + C82067 * C141224) * C141365) *
               C4148 -
           (((C82083 + C82084) * C141224 +
             (C63970 * C13205 + C71068 + C71068 + C141341 * C13531 +
              C63969 * C5325 + C71067 + C71067 + C63607 * C5561) *
                 C71442) *
                C141365 +
            (C82072 * C141224 + (C82082 + C82081) * C71442) * C141479) *
               C141499) *
              C141281 * C2376 +
          (((C82067 * C71442 + (C65964 + C65963) * C141224) * C141479 +
            ((C82084 + C82083) * C71442 +
             (C63969 * C5327 + C71071 + C71071 + C63607 * C5563 +
              C63970 * C13207 + C71072 + C71072 + C141341 * C13533) *
                 C141224) *
                C141365) *
               C141499 -
           (((C65963 + C65964) * C141224 + C82072 * C71442) * C141365 +
            ((C64009 + C64008) * C141224 + (C64007 + C64006) * C71442) *
                C141479) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[24] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C63707 +
             (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
              C141365 * C2040) *
                 C63607 +
             (C35986 + C35987) * C63708 + (C36316 + C36317) * C141341) *
                C71442 +
            ((C14105 + C14106) * C63707 + (C14354 + C14355) * C63607 +
             C80503 * C63708 + C80919 * C141341) *
                C141224) *
               C4148 -
           (((C82219 + C82220) * C141341 + (C81777 + C81778) * C63708 +
             (C16368 + C16369) * C63607 + (C16005 + C16006) * C63707) *
                C141224 +
            ((C39931 + C39932) * C141341 + (C39589 + C39590) * C63708 +
             (C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
              C141479 * C2040) *
                 C63607 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C63707) *
                C71442) *
               C141499) *
              C141281 * C2376 +
          ((((C16006 + C16005) * C63707 + (C16369 + C16368) * C63607 +
             (C81778 + C81777) * C63708 + (C82220 + C82219) * C141341) *
                C71442 +
            ((C16002 + C16001) * C63707 + (C16367 + C16366) * C63607 +
             (C14078 * C3492 + C141479 * C3648 + C14079 * C13207 +
              C141365 * C13376) *
                 C63708 +
             (C14078 * C3574 + C141479 * C3866 + C14079 * C13296 +
              C141365 * C13616) *
                 C141341) *
                C141224) *
               C141499 -
           (((C15286 + C15287) * C141341 + (C14968 + C14969) * C63708 +
             (C14357 + C14356) * C63607 + (C14110 + C14109) * C63707) *
                C141224 +
            (C80920 * C141341 + C80506 * C63708 + (C14355 + C14354) * C63607 +
             (C14106 + C14105) * C63707) *
                C71442) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[24] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C14078 +
             (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                 C141479 +
             (C81925 + C81926) * C14079 + (C82359 + C82360) * C141365) *
                C63607 +
            ((C72684 + C72685) * C14078 + (C73040 + C73041) * C141479 +
             C85247 * C14079 + C85667 * C141365) *
                C141341) *
               C4148 -
           (((C85673 + C85674) * C141365 + (C85261 + C85262) * C14079 +
             C85672 * C141479 + C85258 * C14078) *
                C141341 +
            ((C71450 * C5450 + C141224 * C5674 + C71448 * C5449 +
              C71442 * C5673) *
                 C141365 +
             (C71450 * C5326 + C141224 * C5330 + C71448 * C5325 +
              C71442 * C5329) *
                 C14079 +
             (C82360 + C82359) * C141479 + (C81926 + C81925) * C14078) *
                C63607) *
               C141499) *
              C141281 * C2376 +
          ((((C81929 + C81930) * C14078 + (C82361 + C82362) * C141479 +
             (C71448 * C5326 + C71442 * C5330 + C71450 * C5327 +
              C141224 * C5331) *
                 C14079 +
             (C71448 * C5450 + C71442 * C5674 + C71450 * C5451 +
              C141224 * C5675) *
                 C141365) *
                C63607 +
            ((C80645 + C80646) * C14078 + (C81055 + C81056) * C141479 +
             (C71448 * C13206 + C71442 * C13209 + C71450 * C13207 +
              C141224 * C13210) *
                 C14079 +
             (C71448 * C13375 + C71442 * C13692 + C71450 * C13376 +
              C141224 * C13693) *
                 C141365) *
                C141341) *
               C141499 -
           (((C81056 + C81055) * C141365 + (C80646 + C80645) * C14079 +
             (C73045 + C73044) * C141479 + (C72693 + C72692) * C14078) *
                C141341 +
            ((C82362 + C82361) * C141365 + (C81930 + C81929) * C14079 +
             (C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                 C141479 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C14078) *
                C63607) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[24] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C14078 +
             (C63707 * C276 + C63607 * C635 + C63708 * C1006 +
              C141341 * C1419) *
                 C141479 +
             (C81629 + C81630) * C14079 + (C82503 + C82504) * C141365) *
                C71442 +
            ((C63734 + C63735) * C14078 + (C64263 + C64264) * C141479 +
             C81617 * C14079 + C82497 * C141365) *
                C141224) *
               C4148 -
           (((C82505 + C82506) * C141365 + (C81635 + C81636) * C14079 +
             C82502 * C141479 + C81628 * C14078) *
                C141224 +
            ((C63708 * C13374 + C141341 * C13768 + C63707 * C5449 +
              C63607 * C5727) *
                 C141365 +
             (C63708 * C13205 + C141341 * C13294 + C63707 * C5325 +
              C63607 * C5391) *
                 C14079 +
             (C82504 + C82503) * C141479 + (C81630 + C81629) * C14078) *
                C71442) *
               C141499) *
              C141281 * C2376 +
          (((C81617 * C14078 + C82497 * C141479 + (C81636 + C81635) * C14079 +
             (C82506 + C82505) * C141365) *
                C71442 +
            ((C65640 + C65639) * C14078 + (C66278 + C66277) * C141479 +
             (C63707 * C5327 + C63607 * C5393 + C63708 * C13207 +
              C141341 * C13296) *
                 C14079 +
             (C63707 * C5451 + C63607 * C5729 + C63708 * C13376 +
              C141341 * C13770) *
                 C141365) *
                C141224) *
               C141499 -
           (((C66277 + C66278) * C141365 + (C65639 + C65640) * C14079 +
             (C64266 + C64265) * C141479 + (C63739 + C63738) * C14078) *
                C141224 +
            (C82502 * C141365 + C81628 * C14079 + (C64264 + C64263) * C141479 +
             (C63735 + C63734) * C14078) *
                C71442) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[24] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
              C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                 C63607 +
             (C36666 + C36667) * C141341) *
                C71442 +
            ((C14636 + C14637) * C63607 + C81323 * C141341) * C141224) *
               C4148 -
           (((C82645 + C82646) * C141341 + (C16725 + C16726) * C63607) *
                C141224 +
            ((C40270 + C40271) * C141341 +
             (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
              C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                 C63607) *
                C71442) *
               C141499) *
              C141281 * C2376 +
          ((((C16726 + C16725) * C63607 + (C82646 + C82645) * C141341) *
                C71442 +
            ((C16724 + C16723) * C63607 +
             (C14599 * C3492 + C19196 + C19196 + C141479 * C4076 +
              C14600 * C13207 + C19197 + C19197 + C141365 * C13847) *
                 C141341) *
                C141224) *
               C141499 -
           (((C15622 + C15623) * C141341 + (C14639 + C14638) * C63607) *
                C141224 +
            (C81324 * C141341 + (C14637 + C14636) * C63607) * C71442) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
              C71453 + C71453 + C141224 * C121) *
                 C141479 +
             (C81475 + C81476) * C141365) *
                C63607 +
            ((C72316 + C72317) * C141479 + C84833 * C141365) * C141341) *
               C4148 -
           (((C84843 + C84844) * C141365 + C84838 * C141479) * C141341 +
            ((C71449 * C5326 + C78602 + C78602 + C141224 * C5334 +
              C71447 * C5325 + C78601 + C78601 + C71442 * C5333) *
                 C141365 +
             (C81476 + C81475) * C141479) *
                C63607) *
               C141499) *
              C816 +
          (((C84833 * C141479 + (C84844 + C84843) * C141365) * C63607 +
            ((C75926 + C75925) * C141479 +
             (C71447 * C29087 + C78605 + C78605 + C71442 * C29091 +
              C71449 * C29088 + C78606 + C78606 + C141224 * C29092) *
                 C141365) *
                C141341) *
               C141499 -
           (((C75925 + C75926) * C141365 + (C72319 + C72318) * C141479) *
                C141341 +
            (C84838 * C141365 + (C72317 + C72316) * C141479) * C63607) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C71448 +
             (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                 C71442 +
             (C63734 + C63735) * C71450 + (C63736 + C63737) * C141224) *
                C141479 +
            ((C81629 + C81630) * C71448 + (C81631 + C81632) * C71442 +
             C81617 * C71450 + C81618 * C141224) *
                C141365) *
               C4148 -
           (((C81633 + C81634) * C141224 + (C81635 + C81636) * C71450 +
             (C63708 * C13208 + C141341 * C13297 + C63707 * C5329 +
              C63607 * C5395) *
                 C71442 +
             (C63708 * C13205 + C141341 * C13294 + C63707 * C5325 +
              C63607 * C5391) *
                 C71448) *
                C141365 +
            (C81627 * C141224 + C81628 * C71450 + (C81632 + C81631) * C71442 +
             (C81630 + C81629) * C71448) *
                C141479) *
               C141499) *
              C816 +
          ((((C84983 + C84984) * C71448 + (C84985 + C84986) * C71442 +
             (C80372 + C80371) * C71450 + (C80370 + C80369) * C141224) *
                C141479 +
            ((C63707 * C13205 + C63607 * C13294 + C63708 * C29087 +
              C141341 * C29173) *
                 C71448 +
             (C63707 * C13208 + C63607 * C13297 + C63708 * C29089 +
              C141341 * C29175) *
                 C71442 +
             (C63707 * C13206 + C63607 * C13295 + C63708 * C29088 +
              C141341 * C29174) *
                 C71450 +
             (C63707 * C13209 + C63607 * C13298 + C63708 * C29090 +
              C141341 * C29176) *
                 C141224) *
                C141365) *
               C141499 -
           (((C80369 + C80370) * C141224 + (C80371 + C80372) * C71450 +
             (C84986 + C84985) * C71442 + (C84984 + C84983) * C71448) *
                C141365 +
            ((C64605 + C64606) * C141224 + (C64607 + C64608) * C71450 +
             (C63708 * C2964 + C141341 * C3030 + C63707 * C828 +
              C63607 * C917) *
                 C71442 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C71448) *
                C141479) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C71448 +
             (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
              C141365 * C1789) *
                 C71442 +
             (C14105 + C14106) * C71450 + (C14107 + C14108) * C141224) *
                C63607 +
            ((C35986 + C35987) * C71448 + (C35988 + C35989) * C71442 +
             C80503 * C71450 + C80504 * C141224) *
                C141341) *
               C4148 -
           (((C81775 + C81776) * C141224 + (C81777 + C81778) * C71450 +
             (C39587 + C39588) * C71442 + (C39589 + C39590) * C71448) *
                C141341 +
            ((C16003 + C16004) * C141224 + (C16005 + C16006) * C71450 +
             (C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
              C141479 * C1789) *
                 C71442 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C71448) *
                C63607) *
               C141499) *
              C816 +
          ((((C39590 + C39589) * C71448 + (C39588 + C39587) * C71442 +
             (C81778 + C81777) * C71450 + (C81776 + C81775) * C141224) *
                C63607 +
            ((C39586 + C39585) * C71448 + (C39584 + C39583) * C71442 +
             (C14078 * C10471 + C141479 * C10700 + C14079 * C29088 +
              C141365 * C29252) *
                 C71450 +
             (C14078 * C10474 + C141479 * C10703 + C14079 * C29090 +
              C141365 * C29254) *
                 C141224) *
                C141341) *
               C141499 -
           (((C35997 + C35996) * C141224 + (C35995 + C35994) * C71450 +
             (C35993 + C35992) * C71442 + (C35991 + C35990) * C71448) *
                C141341 +
            (C80505 * C141224 + C80506 * C71450 + (C35989 + C35988) * C71442 +
             (C35987 + C35986) * C71448) *
                C63607) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C63707 +
             (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                 C63607 +
             (C72684 + C72685) * C63708 + (C72686 + C72687) * C141341) *
                C141479 +
            ((C81925 + C81926) * C63707 + (C81927 + C81928) * C63607 +
             C85247 * C63708 + C85248 * C141341) *
                C141365) *
               C4148 -
           (((C85259 + C85260) * C141341 + (C85261 + C85262) * C63708 +
             (C71450 * C5392 + C141224 * C5508 + C71448 * C5391 +
              C71442 * C5507) *
                 C63607 +
             (C71450 * C5326 + C141224 * C5330 + C71448 * C5325 +
              C71442 * C5329) *
                 C63707) *
                C141365 +
            (C85257 * C141341 + C85258 * C63708 + (C81928 + C81927) * C63607 +
             (C81926 + C81925) * C63707) *
                C141479) *
               C141499) *
              C816 +
          (((C85247 * C63707 + C85248 * C63607 + (C76250 + C76249) * C63708 +
             (C76248 + C76247) * C141341) *
                C141479 +
            ((C85262 + C85261) * C63707 + (C85260 + C85259) * C63607 +
             (C71448 * C29087 + C71442 * C29089 + C71450 * C29088 +
              C141224 * C29090) *
                 C63708 +
             (C71448 * C29173 + C71442 * C29329 + C71450 * C29174 +
              C141224 * C29330) *
                 C141341) *
                C141365) *
               C141499 -
           (((C76247 + C76248) * C141341 + (C76249 + C76250) * C63708 +
             C85257 * C63607 + C85258 * C63707) *
                C141365 +
            ((C72691 + C72690) * C141341 + (C72689 + C72688) * C63708 +
             (C72687 + C72686) * C63607 + (C72685 + C72684) * C63707) *
                C141479) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
              C63973 + C63973 + C141341 * C1171) *
                 C71442 +
             (C64006 + C64007) * C141224) *
                C141479 +
            ((C82081 + C82082) * C71442 + C82067 * C141224) * C141365) *
               C4148 -
           (((C82083 + C82084) * C141224 +
             (C63970 * C13205 + C71068 + C71068 + C141341 * C13531 +
              C63969 * C5325 + C71067 + C71067 + C63607 * C5561) *
                 C71442) *
                C141365 +
            (C82072 * C141224 + (C82082 + C82081) * C71442) * C141479) *
               C141499) *
              C816 +
          ((((C85405 + C85406) * C71442 + (C80788 + C80787) * C141224) *
                C141479 +
            ((C63969 * C13205 + C85397 + C85397 + C63607 * C13531 +
              C63970 * C29087 + C85398 + C85398 + C141341 * C29405) *
                 C71442 +
             (C63969 * C13206 + C85399 + C85399 + C63607 * C13532 +
              C63970 * C29088 + C85400 + C85400 + C141341 * C29406) *
                 C141224) *
                C141365) *
               C141499 -
           (((C80787 + C80788) * C141224 + (C85406 + C85405) * C71442) *
                C141365 +
            ((C64977 + C64978) * C141224 +
             (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
              C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                 C71442) *
                C141479) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C63707 +
             (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
              C141365 * C2040) *
                 C63607 +
             (C35986 + C35987) * C63708 + (C36316 + C36317) * C141341) *
                C71442 +
            ((C14105 + C14106) * C63707 + (C14354 + C14355) * C63607 +
             C80503 * C63708 + C80919 * C141341) *
                C141224) *
               C4148 -
           (((C82219 + C82220) * C141341 + (C81777 + C81778) * C63708 +
             (C16368 + C16369) * C63607 + (C16005 + C16006) * C63707) *
                C141224 +
            ((C39931 + C39932) * C141341 + (C39589 + C39590) * C63708 +
             (C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
              C141479 * C2040) *
                 C63607 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C63707) *
                C71442) *
               C141499) *
              C816 +
          ((((C39590 + C39589) * C63707 + (C39932 + C39931) * C63607 +
             (C39586 + C39585) * C63708 + (C39930 + C39929) * C141341) *
                C71442 +
            ((C81778 + C81777) * C63707 + (C82220 + C82219) * C63607 +
             (C14078 * C10471 + C141479 * C10700 + C14079 * C29088 +
              C141365 * C29252) *
                 C63708 +
             (C14078 * C10596 + C141479 * C11042 + C14079 * C29174 +
              C141365 * C29488) *
                 C141341) *
                C141224) *
               C141499 -
           (((C36321 + C36320) * C141341 + (C35995 + C35994) * C63708 +
             C80920 * C63607 + C80506 * C63707) *
                C141224 +
            ((C36319 + C36318) * C141341 + (C35991 + C35990) * C63708 +
             (C36317 + C36316) * C63607 + (C35987 + C35986) * C63707) *
                C71442) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C14078 +
             (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                 C141479 +
             (C81925 + C81926) * C14079 + (C82359 + C82360) * C141365) *
                C63607 +
            ((C72684 + C72685) * C14078 + (C73040 + C73041) * C141479 +
             C85247 * C14079 + C85667 * C141365) *
                C141341) *
               C4148 -
           (((C85673 + C85674) * C141365 + (C85261 + C85262) * C14079 +
             C85672 * C141479 + C85258 * C14078) *
                C141341 +
            ((C71450 * C5450 + C141224 * C5674 + C71448 * C5449 +
              C71442 * C5673) *
                 C141365 +
             (C71450 * C5326 + C141224 * C5330 + C71448 * C5325 +
              C71442 * C5329) *
                 C14079 +
             (C82360 + C82359) * C141479 + (C81926 + C81925) * C14078) *
                C63607) *
               C141499) *
              C816 +
          (((C85247 * C14078 + C85667 * C141479 + (C85262 + C85261) * C14079 +
             (C85674 + C85673) * C141365) *
                C63607 +
            ((C76250 + C76249) * C14078 + (C76564 + C76563) * C141479 +
             (C71448 * C29087 + C71442 * C29089 + C71450 * C29088 +
              C141224 * C29090) *
                 C14079 +
             (C71448 * C29251 + C71442 * C29563 + C71450 * C29252 +
              C141224 * C29564) *
                 C141365) *
                C141341) *
               C141499 -
           (((C76563 + C76564) * C141365 + (C76249 + C76250) * C14079 +
             (C73043 + C73042) * C141479 + (C72689 + C72688) * C14078) *
                C141341 +
            (C85672 * C141365 + C85258 * C14079 + (C73041 + C73040) * C141479 +
             (C72685 + C72684) * C14078) *
                C63607) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C14078 +
             (C63707 * C276 + C63607 * C635 + C63708 * C1006 +
              C141341 * C1419) *
                 C141479 +
             (C81629 + C81630) * C14079 + (C82503 + C82504) * C141365) *
                C71442 +
            ((C63734 + C63735) * C14078 + (C64263 + C64264) * C141479 +
             C81617 * C14079 + C82497 * C141365) *
                C141224) *
               C4148 -
           (((C82505 + C82506) * C141365 + (C81635 + C81636) * C14079 +
             C82502 * C141479 + C81628 * C14078) *
                C141224 +
            ((C63708 * C13374 + C141341 * C13768 + C63707 * C5449 +
              C63607 * C5727) *
                 C141365 +
             (C63708 * C13205 + C141341 * C13294 + C63707 * C5325 +
              C63607 * C5391) *
                 C14079 +
             (C82504 + C82503) * C141479 + (C81630 + C81629) * C14078) *
                C71442) *
               C141499) *
              C816 +
          ((((C84983 + C84984) * C14078 + (C85809 + C85810) * C141479 +
             (C63707 * C13205 + C63607 * C13294 + C63708 * C29087 +
              C141341 * C29173) *
                 C14079 +
             (C63707 * C13374 + C63607 * C13768 + C63708 * C29251 +
              C141341 * C29639) *
                 C141365) *
                C71442 +
            ((C80372 + C80371) * C14078 + (C81192 + C81191) * C141479 +
             (C63707 * C13206 + C63607 * C13295 + C63708 * C29088 +
              C141341 * C29174) *
                 C14079 +
             (C63707 * C13375 + C63607 * C13769 + C63708 * C29252 +
              C141341 * C29640) *
                 C141365) *
                C141224) *
               C141499 -
           (((C81191 + C81192) * C141365 + (C80371 + C80372) * C14079 +
             (C65309 + C65310) * C141479 + (C64607 + C64608) * C14078) *
                C141224 +
            ((C85810 + C85809) * C141365 + (C84984 + C84983) * C14079 +
             (C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
              C63607 * C1419) *
                 C141479 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C14078) *
                C71442) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
              C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                 C63607 +
             (C36666 + C36667) * C141341) *
                C71442 +
            ((C14636 + C14637) * C63607 + C81323 * C141341) * C141224) *
               C4148 -
           (((C82645 + C82646) * C141341 + (C16725 + C16726) * C63607) *
                C141224 +
            ((C40270 + C40271) * C141341 +
             (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
              C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                 C63607) *
                C71442) *
               C141499) *
              C816 +
          ((((C40271 + C40270) * C63607 + (C40269 + C40268) * C141341) *
                C71442 +
            ((C82646 + C82645) * C63607 +
             (C14599 * C10471 + C37641 + C37641 + C141479 * C11357 +
              C14600 * C29088 + C37642 + C37642 + C141365 * C29716) *
                 C141341) *
                C141224) *
               C141499 -
           (((C36671 + C36670) * C141341 + C81324 * C63607) * C141224 +
            ((C36669 + C36668) * C141341 + (C36667 + C36666) * C63607) *
                C71442) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
             C71453 + C71453 + C141224 * C121) *
                C141479 +
            (C81475 + C81476) * C141365) *
               C63607 +
           ((C72316 + C72317) * C141479 + C84833 * C141365) * C141341) *
              C5322 -
          (((C84843 + C84844) * C141365 + C84838 * C141479) * C141341 +
           ((C88391 + C88392) * C141365 + (C81476 + C81475) * C141479) *
               C63607) *
              C5323 +
          (((C88392 + C88391) * C141479 +
            (C71447 * C21035 + C88383 + C88383 + C71442 * C21041 +
             C71449 * C21036 + C88384 + C88384 + C141224 * C21042) *
                C141365) *
               C63607 +
           ((C84844 + C84843) * C141479 +
            (C71447 * C42109 + C88385 + C88385 + C71442 * C42113 +
             C71449 * C47290 + C88386 + C88386 + C141224 * C47292) *
                C141365) *
               C141341) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C71448 +
            (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                C71442 +
            (C63734 + C63735) * C71450 + (C63736 + C63737) * C141224) *
               C141479 +
           ((C81629 + C81630) * C71448 + (C81631 + C81632) * C71442 +
            C81617 * C71450 + C81618 * C141224) *
               C141365) *
              C5322 -
          (((C81633 + C81634) * C141224 + (C81635 + C81636) * C71450 +
            (C88499 + C88500) * C71442 + (C88501 + C88502) * C71448) *
               C141365 +
           (C81627 * C141224 + C81628 * C71450 + (C81632 + C81631) * C71442 +
            (C81630 + C81629) * C71448) *
               C141479) *
              C5323 +
          (((C88502 + C88501) * C71448 + (C88500 + C88499) * C71442 +
            (C81636 + C81635) * C71450 + (C81634 + C81633) * C141224) *
               C141479 +
           ((C63707 * C21035 + C63607 * C21136 + C63708 * C42109 +
             C141341 * C42197) *
                C71448 +
            (C63707 * C21038 + C63607 * C21139 + C63708 * C42111 +
             C141341 * C42199) *
                C71442 +
            (C63707 * C21036 + C63607 * C21137 + C63708 * C47290 +
             C141341 * C47403) *
                C71450 +
            (C63707 * C21039 + C63607 * C21140 + C63708 * C47291 +
             C141341 * C47404) *
                C141224) *
               C141365) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C71448 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C71442 +
            (C14105 + C14106) * C71450 + (C14107 + C14108) * C141224) *
               C63607 +
           ((C35986 + C35987) * C71448 + (C35988 + C35989) * C71442 +
            C80503 * C71450 + C80504 * C141224) *
               C141341) *
              C5322 -
          (((C81775 + C81776) * C141224 + (C81777 + C81778) * C71450 +
            (C39587 + C39588) * C71442 + (C39589 + C39590) * C71448) *
               C141341 +
           ((C16003 + C16004) * C141224 + (C16005 + C16006) * C71450 +
            (C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
             C141479 * C1789) *
                C71442 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C71448) *
               C63607) *
              C5323 +
          (((C14078 * C5325 + C141479 * C5449 + C14079 * C21035 +
             C141365 * C21228) *
                C71448 +
            (C14078 * C5329 + C141479 * C5453 + C14079 * C21038 +
             C141365 * C21231) *
                C71442 +
            (C14078 * C5326 + C141479 * C5450 + C14079 * C21036 +
             C141365 * C21229) *
                C71450 +
            (C14078 * C5330 + C141479 * C5454 + C14079 * C21039 +
             C141365 * C21232) *
                C141224) *
               C63607 +
           ((C14078 * C13205 + C141479 * C13374 + C14079 * C42109 +
             C141365 * C42293) *
                C71448 +
            (C14078 * C13208 + C141479 * C13377 + C14079 * C42111 +
             C141365 * C42295) *
                C71442 +
            (C14078 * C13206 + C141479 * C13375 + C14079 * C47290 +
             C141365 * C47517) *
                C71450 +
            (C14078 * C13209 + C141479 * C13378 + C14079 * C47291 +
             C141365 * C47518) *
                C141224) *
               C141341) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C63707 +
            (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                C63607 +
            (C72684 + C72685) * C63708 + (C72686 + C72687) * C141341) *
               C141479 +
           ((C81925 + C81926) * C63707 + (C81927 + C81928) * C63607 +
            C85247 * C63708 + C85248 * C141341) *
               C141365) *
              C5322 -
          (((C85259 + C85260) * C141341 + (C85261 + C85262) * C63708 +
            (C88707 + C88708) * C63607 + (C88709 + C88710) * C63707) *
               C141365 +
           (C85257 * C141341 + C85258 * C63708 + (C81928 + C81927) * C63607 +
            (C81926 + C81925) * C63707) *
               C141479) *
              C5323 +
          (((C88710 + C88709) * C63707 + (C88708 + C88707) * C63607 +
            (C85262 + C85261) * C63708 + (C85260 + C85259) * C141341) *
               C141479 +
           ((C71448 * C21035 + C71442 * C21038 + C71450 * C21036 +
             C141224 * C21039) *
                C63707 +
            (C71448 * C21136 + C71442 * C21308 + C71450 * C21137 +
             C141224 * C21309) *
                C63607 +
            (C71448 * C42109 + C71442 * C42111 + C71450 * C47290 +
             C141224 * C47291) *
                C63708 +
            (C71448 * C42197 + C71442 * C42371 + C71450 * C47403 +
             C141224 * C47617) *
                C141341) *
               C141365) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
             C63973 + C63973 + C141341 * C1171) *
                C71442 +
            (C64006 + C64007) * C141224) *
               C141479 +
           ((C82081 + C82082) * C71442 + C82067 * C141224) * C141365) *
              C5322 -
          (((C82083 + C82084) * C141224 + (C88821 + C88822) * C71442) *
               C141365 +
           (C82072 * C141224 + (C82082 + C82081) * C71442) * C141479) *
              C5323 +
          (((C88822 + C88821) * C71442 + (C82084 + C82083) * C141224) *
               C141479 +
           ((C63969 * C21035 + C88813 + C88813 + C63607 * C21403 +
             C63970 * C42109 + C88814 + C88814 + C141341 * C42459) *
                C71442 +
            (C63969 * C21036 + C88815 + C88815 + C63607 * C21404 +
             C63970 * C47290 + C88816 + C88816 + C141341 * C47728) *
                C141224) *
               C141365) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C63707 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C63607 +
            (C35986 + C35987) * C63708 + (C36316 + C36317) * C141341) *
               C71442 +
           ((C14105 + C14106) * C63707 + (C14354 + C14355) * C63607 +
            C80503 * C63708 + C80919 * C141341) *
               C141224) *
              C5322 -
          (((C82219 + C82220) * C141341 + (C81777 + C81778) * C63708 +
            (C16368 + C16369) * C63607 + (C16005 + C16006) * C63707) *
               C141224 +
           ((C39931 + C39932) * C141341 + (C39589 + C39590) * C63708 +
            (C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
             C141479 * C2040) *
                C63607 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C63707) *
               C71442) *
              C5323 +
          (((C14078 * C5325 + C141479 * C5449 + C14079 * C21035 +
             C141365 * C21228) *
                C63707 +
            (C14078 * C5391 + C141479 * C5619 + C14079 * C21136 +
             C141365 * C21491) *
                C63607 +
            (C14078 * C13205 + C141479 * C13374 + C14079 * C42109 +
             C141365 * C42293) *
                C63708 +
            (C14078 * C13294 + C141479 * C13614 + C14079 * C42197 +
             C141365 * C42553) *
                C141341) *
               C71442 +
           ((C14078 * C5326 + C141479 * C5450 + C14079 * C21036 +
             C141365 * C21229) *
                C63707 +
            (C14078 * C5392 + C141479 * C5620 + C14079 * C21137 +
             C141365 * C21492) *
                C63607 +
            (C14078 * C13206 + C141479 * C13375 + C14079 * C47290 +
             C141365 * C47517) *
                C63708 +
            (C14078 * C13295 + C141479 * C13615 + C14079 * C47403 +
             C141365 * C47838) *
                C141341) *
               C141224) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C14078 +
            (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                C141479 +
            (C81925 + C81926) * C14079 + (C82359 + C82360) * C141365) *
               C63607 +
           ((C72684 + C72685) * C14078 + (C73040 + C73041) * C141479 +
            C85247 * C14079 + C85667 * C141365) *
               C141341) *
              C5322 -
          (((C85673 + C85674) * C141365 + (C85261 + C85262) * C14079 +
            C85672 * C141479 + C85258 * C14078) *
               C141341 +
           ((C89023 + C89024) * C141365 + (C88709 + C88710) * C14079 +
            (C82360 + C82359) * C141479 + (C81926 + C81925) * C14078) *
               C63607) *
              C5323 +
          (((C88710 + C88709) * C14078 + (C89024 + C89023) * C141479 +
            (C71448 * C21035 + C71442 * C21038 + C71450 * C21036 +
             C141224 * C21039) *
                C14079 +
            (C71448 * C21228 + C71442 * C21568 + C71450 * C21229 +
             C141224 * C21569) *
                C141365) *
               C63607 +
           ((C85262 + C85261) * C14078 + (C85674 + C85673) * C141479 +
            (C71448 * C42109 + C71442 * C42111 + C71450 * C47290 +
             C141224 * C47291) *
                C14079 +
            (C71448 * C42293 + C71442 * C42629 + C71450 * C47517 +
             C141224 * C47937) *
                C141365) *
               C141341) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C14078 +
            (C63707 * C276 + C63607 * C635 + C63708 * C1006 + C141341 * C1419) *
                C141479 +
            (C81629 + C81630) * C14079 + (C82503 + C82504) * C141365) *
               C71442 +
           ((C63734 + C63735) * C14078 + (C64263 + C64264) * C141479 +
            C81617 * C14079 + C82497 * C141365) *
               C141224) *
              C5322 -
          (((C82505 + C82506) * C141365 + (C81635 + C81636) * C14079 +
            C82502 * C141479 + C81628 * C14078) *
               C141224 +
           ((C89127 + C89128) * C141365 + (C88501 + C88502) * C14079 +
            (C82504 + C82503) * C141479 + (C81630 + C81629) * C14078) *
               C71442) *
              C5323 +
          (((C88502 + C88501) * C14078 + (C89128 + C89127) * C141479 +
            (C63707 * C21035 + C63607 * C21136 + C63708 * C42109 +
             C141341 * C42197) *
                C14079 +
            (C63707 * C21228 + C63607 * C21654 + C63708 * C42293 +
             C141341 * C42708) *
                C141365) *
               C71442 +
           ((C81636 + C81635) * C14078 + (C82506 + C82505) * C141479 +
            (C63707 * C21036 + C63607 * C21137 + C63708 * C47290 +
             C141341 * C47403) *
                C14079 +
            (C63707 * C21229 + C63607 * C21655 + C63708 * C47517 +
             C141341 * C48042) *
                C141365) *
               C141224) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 + C14600 * C1601 +
             C14603 + C14603 + C141365 * C2283) *
                C63607 +
            (C36666 + C36667) * C141341) *
               C71442 +
           ((C14636 + C14637) * C63607 + C81323 * C141341) * C141224) *
              C5322 -
          (((C82645 + C82646) * C141341 + (C16725 + C16726) * C63607) *
               C141224 +
           ((C40270 + C40271) * C141341 +
            (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
             C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                C63607) *
               C71442) *
              C5323 +
          (((C14599 * C5325 + C21738 + C21738 + C141479 * C5781 +
             C14600 * C21035 + C21739 + C21739 + C141365 * C21734) *
                C63607 +
            (C14599 * C13205 + C42796 + C42796 + C141479 * C13845 +
             C14600 * C42109 + C42797 + C42797 + C141365 * C42793) *
                C141341) *
               C71442 +
           ((C14599 * C5326 + C21740 + C21740 + C141479 * C5782 +
             C14600 * C21036 + C21741 + C21741 + C141365 * C21735) *
                C63607 +
            (C14599 * C13206 + C89227 + C89227 + C141479 * C13846 +
             C14600 * C47290 + C89228 + C89228 + C141365 * C48144) *
                C141341) *
               C141224) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
             C21828 + C21828 + C141224 * C121) *
                C89302 +
            (C44678 + C44679) * C141365) *
               C63607 +
           ((C22691 + C22692) * C89302 + (C26379 + C26378) * C141365) *
               C141341) *
              C141298 * C141281 * C97 -
          (((C21824 * C3492 + C23752 + C23752 + C141224 * C3500 +
             C21822 * C3491 + C23751 + C23751 + C141462 * C3499) *
                C141365 +
            (C22696 + C22695) * C89302) *
               C141341 +
           ((C44683 + C44682) * C141365 +
            (C21824 * C110 + C21837 + C21837 + C141224 * C122 + C21822 * C109 +
             C21838 + C21838 + C141462 * C121) *
                C89302) *
               C63607) *
              C141298 * C141281 * C98 +
          (((C21822 * C110 + C21839 + C21839 + C141462 * C122 + C21824 * C111 +
             C21840 + C21840 + C141224 * C123) *
                C89302 +
            (C21822 * C1599 + C42879 + C42879 + C141462 * C1609 +
             C21824 * C1598 + C42880 + C42880 + C141224 * C1608) *
                C141365) *
               C63607 +
           ((C21822 * C821 + C21841 + C21841 + C141462 * C831 + C21824 * C820 +
             C21842 + C21842 + C141224 * C830) *
                C89302 +
            (C21822 * C3492 + C114591 + C114591 + C141462 * C3500 +
             C21824 * C3493 + C114592 + C114592 + C141224 * C3501) *
                C141365) *
               C141341) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C139366 +
            (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                C141462 +
            (C63734 + C63735) * C139356 + (C63736 + C63737) * C141224) *
               C89302 +
           ((C81629 + C81630) * C139366 + (C81631 + C81632) * C141462 +
            C81617 * C139356 + C81618 * C141224) *
               C141365) *
              C141298 * C141281 * C97 -
          (((C65637 + C65638) * C141224 + (C65639 + C65640) * C139356 +
            C81627 * C141462 + C81628 * C139366) *
               C141365 +
           ((C63741 + C63740) * C141224 + (C63739 + C63738) * C139356 +
            (C63737 + C63736) * C141462 + (C63735 + C63734) * C139366) *
               C89302) *
              C141298 * C141281 * C98 +
          ((C63746 * C139366 + C63747 * C141462 + (C63745 + C63744) * C139356 +
            (C63743 + C63742) * C141224) *
               C89302 +
           ((C65640 + C65639) * C139366 + (C65638 + C65637) * C141462 +
            (C63707 * C1598 + C63607 * C1687 + C63708 * C3493 +
             C141341 * C3575) *
                C139356 +
            (C63707 * C1603 + C63607 * C1692 + C63708 * C3497 +
             C141341 * C3579) *
                C141224) *
               C141365) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C139366 +
            (C89455 * C114 + C89302 * C282 + C89456 * C1606 + C141365 * C1789) *
                C141462 +
            (C89482 + C89483) * C139356 + (C89484 + C89485) * C141224) *
               C63607 +
           ((C98279 + C98280) * C139366 + (C98281 + C98282) * C141462 +
            C98267 * C139356 + C98268 * C141224) *
               C141341) *
              C141298 * C141281 * C97 -
          (((C90331 + C90332) * C141224 + (C90333 + C90334) * C139356 +
            C98277 * C141462 + C98278 * C139366) *
               C141341 +
           ((C89489 + C89488) * C141224 + (C89487 + C89486) * C139356 +
            (C89485 + C89484) * C141462 + (C89483 + C89482) * C139366) *
               C63607) *
              C141298 * C141281 * C98 +
          ((C89494 * C139366 + C89495 * C141462 + (C89493 + C89492) * C139356 +
            (C89491 + C89490) * C141224) *
               C63607 +
           ((C90334 + C90333) * C139366 + (C90332 + C90331) * C141462 +
            (C89455 * C820 + C89302 * C1003 + C89456 * C3493 +
             C141365 * C3649) *
                C139356 +
            (C89455 * C825 + C89302 * C1008 + C89456 * C3497 +
             C141365 * C3653) *
                C141224) *
               C141341) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C63707 +
            (C139366 * C189 + C141462 * C362 + C139356 * C190 +
             C141224 * C363) *
                C63607 +
            (C23065 + C23066) * C63708 + (C23067 + C23068) * C141341) *
               C89302 +
           ((C45052 + C45053) * C63707 + (C45054 + C45055) * C63607 +
            (C26721 + C26720) * C63708 + (C26719 + C26718) * C141341) *
               C141365) *
              C141298 * C141281 * C97 -
          (((C139356 * C3574 + C141224 * C3722 + C139366 * C3573 +
             C141462 * C3721) *
                C141341 +
            (C139356 * C3492 + C141224 * C3496 + C139366 * C3491 +
             C141462 * C3495) *
                C63708 +
            (C45063 + C45062) * C63607 + (C45061 + C45060) * C63707) *
               C141365 +
           ((C23076 + C23075) * C141341 + (C23074 + C23073) * C63708 +
            (C139356 * C191 + C141224 * C364 + C139366 * C190 +
             C141462 * C363) *
                C63607 +
            (C139356 * C110 + C141224 * C116 + C139366 * C109 +
             C141462 * C115) *
                C63707) *
               C89302) *
              C141298 * C141281 * C98 +
          (((C139366 * C110 + C141462 * C116 + C139356 * C111 +
             C141224 * C117) *
                C63707 +
            (C139366 * C191 + C141462 * C364 + C139356 * C192 +
             C141224 * C365) *
                C63607 +
            (C139366 * C821 + C141462 * C826 + C139356 * C820 +
             C141224 * C825) *
                C63708 +
            (C139366 * C910 + C141462 * C1098 + C139356 * C909 +
             C141224 * C1097) *
                C141341) *
               C89302 +
           ((C139366 * C1599 + C141462 * C1604 + C139356 * C1598 +
             C141224 * C1603) *
                C63707 +
            (C139366 * C1688 + C141462 * C1876 + C139356 * C1687 +
             C141224 * C1875) *
                C63607 +
            (C139366 * C3492 + C141462 * C3496 + C139356 * C3493 +
             C141224 * C3497) *
                C63708 +
            (C139366 * C3574 + C141462 * C3722 + C139356 * C3575 +
             C141224 * C3723) *
                C141341) *
               C141365) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
             C63973 + C63973 + C141341 * C1171) *
                C141462 +
            (C64006 + C64007) * C141224) *
               C89302 +
           ((C82081 + C82082) * C141462 + C82067 * C141224) * C141365) *
              C141298 * C141281 * C97 -
          (((C65963 + C65964) * C141224 + C82072 * C141462) * C141365 +
           ((C64009 + C64008) * C141224 + (C64007 + C64006) * C141462) *
               C89302) *
              C141298 * C141281 * C98 +
          ((C64012 * C141462 + (C64011 + C64010) * C141224) * C89302 +
           ((C65964 + C65963) * C141462 +
            (C63969 * C1598 + C65953 + C65953 + C63607 * C1946 +
             C63970 * C3493 + C65954 + C65954 + C141341 * C3793) *
                C141224) *
               C141365) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C63707 +
            (C89455 * C189 + C89302 * C501 + C89456 * C1690 + C141365 * C2040) *
                C63607 +
            (C98279 + C98280) * C63708 + (C98697 + C98698) * C141341) *
               C141462 +
           ((C89482 + C89483) * C63707 + (C89731 + C89732) * C63607 +
            C98267 * C63708 + C98691 * C141341) *
               C141224) *
              C141298 * C141281 * C97 -
          (((C90641 + C90642) * C141341 + (C90333 + C90334) * C63708 +
            (C89734 + C89733) * C63607 + (C89487 + C89486) * C63707) *
               C141224 +
           (C98696 * C141341 + C98278 * C63708 + (C89732 + C89731) * C63607 +
            (C89483 + C89482) * C63707) *
               C141462) *
              C141298 * C141281 * C98 +
          ((C89494 * C63707 + C89737 * C63607 + (C90334 + C90333) * C63708 +
            (C90642 + C90641) * C141341) *
               C141462 +
           ((C89493 + C89492) * C63707 + (C89736 + C89735) * C63607 +
            (C89455 * C820 + C89302 * C1003 + C89456 * C3493 +
             C141365 * C3649) *
                C63708 +
            (C89455 * C909 + C89302 * C1259 + C89456 * C3575 +
             C141365 * C3867) *
                C141341) *
               C141224) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezx[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C89455 +
            (C139366 * C276 + C141462 * C579 + C139356 * C277 +
             C141224 * C580) *
                C89302 +
            (C45052 + C45053) * C89456 + (C45400 + C45401) * C141365) *
               C63607 +
           ((C23065 + C23066) * C89455 + (C23424 + C23425) * C89302 +
            (C26721 + C26720) * C89456 + (C27042 + C27041) * C141365) *
               C141341) *
              C141298 * C141281 * C97 -
          (((C139356 * C3648 + C141224 * C3936 + C139366 * C3647 +
             C141462 * C3935) *
                C141365 +
            (C139356 * C3492 + C141224 * C3496 + C139366 * C3491 +
             C141462 * C3495) *
                C89456 +
            (C23429 + C23428) * C89302 + (C23074 + C23073) * C89455) *
               C141341 +
           ((C45405 + C45404) * C141365 + (C45061 + C45060) * C89456 +
            (C139356 * C278 + C141224 * C581 + C139366 * C277 +
             C141462 * C580) *
                C89302 +
            (C139356 * C110 + C141224 * C116 + C139366 * C109 +
             C141462 * C115) *
                C89455) *
               C63607) *
              C141298 * C141281 * C98 +
          (((C139366 * C110 + C141462 * C116 + C139356 * C111 +
             C141224 * C117) *
                C89455 +
            (C139366 * C278 + C141462 * C581 + C139356 * C279 +
             C141224 * C582) *
                C89302 +
            (C139366 * C1599 + C141462 * C1604 + C139356 * C1598 +
             C141224 * C1603) *
                C89456 +
            (C139366 * C1782 + C141462 * C2124 + C139356 * C1781 +
             C141224 * C2123) *
                C141365) *
               C63607 +
           ((C139366 * C821 + C141462 * C826 + C139356 * C820 +
             C141224 * C825) *
                C89455 +
            (C139366 * C1004 + C141462 * C1346 + C139356 * C1003 +
             C141224 * C1345) *
                C89302 +
            (C139366 * C3492 + C141462 * C3496 + C139356 * C3493 +
             C141224 * C3497) *
                C89456 +
            (C139366 * C3648 + C141462 * C3936 + C139356 * C3649 +
             C141224 * C3937) *
                C141365) *
               C141341) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezy[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C89455 +
            (C63707 * C276 + C63607 * C635 + C63708 * C1006 + C141341 * C1419) *
                C89302 +
            (C81629 + C81630) * C89456 + (C82503 + C82504) * C141365) *
               C141462 +
           ((C63734 + C63735) * C89455 + (C64263 + C64264) * C89302 +
            C81617 * C89456 + C82497 * C141365) *
               C141224) *
              C141298 * C141281 * C97 -
          (((C66277 + C66278) * C141365 + (C65639 + C65640) * C89456 +
            (C64266 + C64265) * C89302 + (C63739 + C63738) * C89455) *
               C141224 +
           (C82502 * C141365 + C81628 * C89456 + (C64264 + C64263) * C89302 +
            (C63735 + C63734) * C89455) *
               C141462) *
              C141298 * C141281 * C98 +
          ((C63746 * C89455 + C64269 * C89302 + (C65640 + C65639) * C89456 +
            (C66278 + C66277) * C141365) *
               C141462 +
           ((C63745 + C63744) * C89455 + (C64268 + C64267) * C89302 +
            (C63707 * C1598 + C63607 * C1687 + C63708 * C3493 +
             C141341 * C3575) *
                C89456 +
            (C63707 * C1781 + C63607 * C2194 + C63708 * C3649 +
             C141341 * C4007) *
                C141365) *
               C141224) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[27] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
             C89980 + C89980 + C141365 * C2283) *
                C63607 +
            (C99115 + C99116) * C141341) *
               C141462 +
           ((C90013 + C90014) * C63607 + C99101 * C141341) * C141224) *
              C141298 * C141281 * C97 -
          (((C90971 + C90972) * C141341 + (C90016 + C90015) * C63607) *
               C141224 +
           (C99106 * C141341 + (C90014 + C90013) * C63607) * C141462) *
              C141298 * C141281 * C98 +
          ((C90019 * C63607 + (C90972 + C90971) * C141341) * C141462 +
           ((C90018 + C90017) * C63607 +
            (C89976 * C820 + C90961 + C90961 + C89302 * C1502 + C89977 * C3493 +
             C90962 + C90962 + C141365 * C4077) *
                C141341) *
               C141224) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexx[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
              C21828 + C21828 + C141224 * C121) *
                 C89302 +
             (C44678 + C44679) * C141365) *
                C63607 +
            ((C22691 + C22692) * C89302 + (C26379 + C26378) * C141365) *
                C141341) *
               C141298 * C816 -
           (((C26376 + C26377) * C141365 + (C22694 + C22693) * C89302) *
                C141341 +
            ((C26378 + C26379) * C141365 + (C22692 + C22691) * C89302) *
                C63607) *
               C141298 * C141497) *
              C818 +
          ((((C22695 + C22696) * C89302 + (C115515 + C115516) * C141365) *
                C63607 +
            ((C22697 + C22698) * C89302 +
             (C21822 * C10471 + C23753 + C23753 + C141462 * C10477 +
              C21824 * C10472 + C23754 + C23754 + C141224 * C10478) *
                 C141365) *
                C141341) *
               C141298 * C141497 -
           (((C115516 + C115515) * C141365 + (C22696 + C22695) * C89302) *
                C141341 +
            ((C44683 + C44682) * C141365 +
             (C21824 * C110 + C21837 + C21837 + C141224 * C122 + C21822 * C109 +
              C21838 + C21838 + C141462 * C121) *
                 C89302) *
                C63607) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C139366 +
             (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                 C141462 +
             (C63734 + C63735) * C139356 + (C63736 + C63737) * C141224) *
                C89302 +
            ((C81629 + C81630) * C139366 + (C81631 + C81632) * C141462 +
             C81617 * C139356 + C81618 * C141224) *
                C141365) *
               C141298 * C816 -
           (((C80369 + C80370) * C141224 + (C80371 + C80372) * C139356 +
             (C84986 + C84985) * C141462 + (C84984 + C84983) * C139366) *
                C141365 +
            ((C64605 + C64606) * C141224 + (C64607 + C64608) * C139356 +
             (C63708 * C2964 + C141341 * C3030 + C63707 * C828 +
              C63607 * C917) *
                 C141462 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C139366) *
                C89302) *
               C141298 * C141497) *
              C818 +
          ((((C64608 + C64607) * C139366 + (C64606 + C64605) * C141462 +
             (C64604 + C64603) * C139356 + (C64602 + C64601) * C141224) *
                C89302 +
            ((C80372 + C80371) * C139366 + (C80370 + C80369) * C141462 +
             (C63707 * C3492 + C63607 * C3574 + C63708 * C10472 +
              C141341 * C10597) *
                 C139356 +
             (C63707 * C3496 + C63607 * C3578 + C63708 * C10475 +
              C141341 * C10600) *
                 C141224) *
                C141365) *
               C141298 * C141497 -
           (((C65637 + C65638) * C141224 + (C65639 + C65640) * C139356 +
             C81627 * C141462 + C81628 * C139366) *
                C141365 +
            ((C63741 + C63740) * C141224 + (C63739 + C63738) * C139356 +
             (C63737 + C63736) * C141462 + (C63735 + C63734) * C139366) *
                C89302) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C139366 +
             (C89455 * C114 + C89302 * C282 + C89456 * C1606 +
              C141365 * C1789) *
                 C141462 +
             (C89482 + C89483) * C139356 + (C89484 + C89485) * C141224) *
                C63607 +
            ((C98279 + C98280) * C139366 + (C98281 + C98282) * C141462 +
             C98267 * C139356 + C98268 * C141224) *
                C141341) *
               C141298 * C816 -
           (((C98283 + C98284) * C141224 + (C98285 + C98286) * C139356 +
             (C101797 + C101798) * C141462 + (C101799 + C101800) * C139366) *
                C141341 +
            (C98277 * C141224 + C98278 * C139356 + (C98282 + C98281) * C141462 +
             (C98280 + C98279) * C139366) *
                C63607) *
               C141298 * C141497) *
              C818 +
          (((C98267 * C139366 + C98268 * C141462 + (C90334 + C90333) * C139356 +
             (C90332 + C90331) * C141224) *
                C63607 +
            ((C98286 + C98285) * C139366 + (C98284 + C98283) * C141462 +
             (C89455 * C2962 + C89302 * C3086 + C89456 * C10472 +
              C141365 * C10701) *
                 C139356 +
             (C89455 * C2966 + C89302 * C3090 + C89456 * C10475 +
              C141365 * C10704) *
                 C141224) *
                C141341) *
               C141298 * C141497 -
           (((C90331 + C90332) * C141224 + (C90333 + C90334) * C139356 +
             C98277 * C141462 + C98278 * C139366) *
                C141341 +
            ((C89489 + C89488) * C141224 + (C89487 + C89486) * C139356 +
             (C89485 + C89484) * C141462 + (C89483 + C89482) * C139366) *
                C63607) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C63707 +
             (C139366 * C189 + C141462 * C362 + C139356 * C190 +
              C141224 * C363) *
                 C63607 +
             (C23065 + C23066) * C63708 + (C23067 + C23068) * C141341) *
                C89302 +
            ((C45052 + C45053) * C63707 + (C45054 + C45055) * C63607 +
             (C26721 + C26720) * C63708 + (C26719 + C26718) * C141341) *
                C141365) *
               C141298 * C816 -
           (((C26714 + C26715) * C141341 + (C26716 + C26717) * C63708 +
             (C26718 + C26719) * C63607 + (C26720 + C26721) * C63707) *
                C141365 +
            ((C23072 + C23071) * C141341 + (C23070 + C23069) * C63708 +
             (C23068 + C23067) * C63607 + (C23066 + C23065) * C63707) *
                C89302) *
               C141298 * C141497) *
              C818 +
          ((((C23073 + C23074) * C63707 + (C23075 + C23076) * C63607 +
             (C23077 + C23078) * C63708 + (C23079 + C23080) * C141341) *
                C89302 +
            ((C115915 + C115916) * C63707 + (C115917 + C115918) * C63607 +
             (C139366 * C10471 + C141462 * C10474 + C139356 * C10472 +
              C141224 * C10475) *
                 C63708 +
             (C139366 * C10596 + C141462 * C10816 + C139356 * C10597 +
              C141224 * C10817) *
                 C141341) *
                C141365) *
               C141298 * C141497 -
           (((C115918 + C115917) * C141341 + (C115916 + C115915) * C63708 +
             (C45063 + C45062) * C63607 + (C45061 + C45060) * C63707) *
                C141365 +
            ((C23076 + C23075) * C141341 + (C23074 + C23073) * C63708 +
             (C139356 * C191 + C141224 * C364 + C139366 * C190 +
              C141462 * C363) *
                 C63607 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C63707) *
                C89302) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
              C63973 + C63973 + C141341 * C1171) *
                 C141462 +
             (C64006 + C64007) * C141224) *
                C89302 +
            ((C82081 + C82082) * C141462 + C82067 * C141224) * C141365) *
               C141298 * C816 -
           (((C80787 + C80788) * C141224 + (C85406 + C85405) * C141462) *
                C141365 +
            ((C64977 + C64978) * C141224 +
             (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
              C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                 C141462) *
                C89302) *
               C141298 * C141497) *
              C818 +
          ((((C64978 + C64977) * C141462 + (C64976 + C64975) * C141224) *
                C89302 +
            ((C80788 + C80787) * C141462 +
             (C63969 * C3492 + C68524 + C68524 + C63607 * C3792 +
              C63970 * C10472 + C68525 + C68525 + C141341 * C10936) *
                 C141224) *
                C141365) *
               C141298 * C141497 -
           (((C65963 + C65964) * C141224 + C82072 * C141462) * C141365 +
            ((C64009 + C64008) * C141224 + (C64007 + C64006) * C141462) *
                C89302) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C63707 +
             (C89455 * C189 + C89302 * C501 + C89456 * C1690 +
              C141365 * C2040) *
                 C63607 +
             (C98279 + C98280) * C63708 + (C98697 + C98698) * C141341) *
                C141462 +
            ((C89482 + C89483) * C63707 + (C89731 + C89732) * C63607 +
             C98267 * C63708 + C98691 * C141341) *
                C141224) *
               C141298 * C816 -
           (((C98699 + C98700) * C141341 + (C98285 + C98286) * C63708 +
             C98696 * C63607 + C98278 * C63707) *
                C141224 +
            ((C102101 + C102102) * C141341 + (C101799 + C101800) * C63708 +
             (C98698 + C98697) * C63607 + (C98280 + C98279) * C63707) *
                C141462) *
               C141298 * C141497) *
              C818 +
          (((C98267 * C63707 + C98691 * C63607 + (C98286 + C98285) * C63708 +
             (C98700 + C98699) * C141341) *
                C141462 +
            ((C90334 + C90333) * C63707 + (C90642 + C90641) * C63607 +
             (C89455 * C2962 + C89302 * C3086 + C89456 * C10472 +
              C141365 * C10701) *
                 C63708 +
             (C89455 * C3028 + C89302 * C3256 + C89456 * C10597 +
              C141365 * C11043) *
                 C141341) *
                C141224) *
               C141298 * C141497 -
           (((C90641 + C90642) * C141341 + (C90333 + C90334) * C63708 +
             (C89734 + C89733) * C63607 + (C89487 + C89486) * C63707) *
                C141224 +
            (C98696 * C141341 + C98278 * C63708 + (C89732 + C89731) * C63607 +
             (C89483 + C89482) * C63707) *
                C141462) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C89455 +
             (C139366 * C276 + C141462 * C579 + C139356 * C277 +
              C141224 * C580) *
                 C89302 +
             (C45052 + C45053) * C89456 + (C45400 + C45401) * C141365) *
                C63607 +
            ((C23065 + C23066) * C89455 + (C23424 + C23425) * C89302 +
             (C26721 + C26720) * C89456 + (C27042 + C27041) * C141365) *
                C141341) *
               C141298 * C816 -
           (((C27039 + C27040) * C141365 + (C26716 + C26717) * C89456 +
             (C23427 + C23426) * C89302 + (C23070 + C23069) * C89455) *
                C141341 +
            ((C27041 + C27042) * C141365 + (C26720 + C26721) * C89456 +
             (C23425 + C23424) * C89302 + (C23066 + C23065) * C89455) *
                C63607) *
               C141298 * C141497) *
              C818 +
          ((((C23073 + C23074) * C89455 + (C23428 + C23429) * C89302 +
             (C115915 + C115916) * C89456 + (C116313 + C116314) * C141365) *
                C63607 +
            ((C23077 + C23078) * C89455 + (C23430 + C23431) * C89302 +
             (C139366 * C10471 + C141462 * C10474 + C139356 * C10472 +
              C141224 * C10475) *
                 C89456 +
             (C139366 * C10700 + C141462 * C11146 + C139356 * C10701 +
              C141224 * C11147) *
                 C141365) *
                C141341) *
               C141298 * C141497 -
           (((C116314 + C116313) * C141365 + (C115916 + C115915) * C89456 +
             (C23429 + C23428) * C89302 + (C23074 + C23073) * C89455) *
                C141341 +
            ((C45405 + C45404) * C141365 + (C45061 + C45060) * C89456 +
             (C139356 * C278 + C141224 * C581 + C139366 * C277 +
              C141462 * C580) *
                 C89302 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C89455) *
                C63607) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C89455 +
             (C63707 * C276 + C63607 * C635 + C63708 * C1006 +
              C141341 * C1419) *
                 C89302 +
             (C81629 + C81630) * C89456 + (C82503 + C82504) * C141365) *
                C141462 +
            ((C63734 + C63735) * C89455 + (C64263 + C64264) * C89302 +
             C81617 * C89456 + C82497 * C141365) *
                C141224) *
               C141298 * C816 -
           (((C81191 + C81192) * C141365 + (C80371 + C80372) * C89456 +
             (C65309 + C65310) * C89302 + (C64607 + C64608) * C89455) *
                C141224 +
            ((C85810 + C85809) * C141365 + (C84984 + C84983) * C89456 +
             (C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
              C63607 * C1419) *
                 C89302 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C89455) *
                C141462) *
               C141298 * C141497) *
              C818 +
          ((((C64608 + C64607) * C89455 + (C65310 + C65309) * C89302 +
             (C80372 + C80371) * C89456 + (C81192 + C81191) * C141365) *
                C141462 +
            ((C64604 + C64603) * C89455 + (C65308 + C65307) * C89302 +
             (C63707 * C3492 + C63607 * C3574 + C63708 * C10472 +
              C141341 * C10597) *
                 C89456 +
             (C63707 * C3648 + C63607 * C4006 + C63708 * C10701 +
              C141341 * C11257) *
                 C141365) *
                C141224) *
               C141298 * C141497 -
           (((C66277 + C66278) * C141365 + (C65639 + C65640) * C89456 +
             (C64266 + C64265) * C89302 + (C63739 + C63738) * C89455) *
                C141224 +
            (C82502 * C141365 + C81628 * C89456 + (C64264 + C64263) * C89302 +
             (C63735 + C63734) * C89455) *
                C141462) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
              C89980 + C89980 + C141365 * C2283) *
                 C63607 +
             (C99115 + C99116) * C141341) *
                C141462 +
            ((C90013 + C90014) * C63607 + C99101 * C141341) * C141224) *
               C141298 * C816 -
           (((C99117 + C99118) * C141341 + C99106 * C63607) * C141224 +
            ((C102409 + C102410) * C141341 + (C99116 + C99115) * C63607) *
                C141462) *
               C141298 * C141497) *
              C818 +
          (((C99101 * C63607 + (C99118 + C99117) * C141341) * C141462 +
            ((C90972 + C90971) * C63607 +
             (C89976 * C2962 + C93586 + C93586 + C89302 * C3418 +
              C89977 * C10472 + C93587 + C93587 + C141365 * C11358) *
                 C141341) *
                C141224) *
               C141298 * C141497 -
           (((C90971 + C90972) * C141341 + (C90016 + C90015) * C63607) *
                C141224 +
            (C99106 * C141341 + (C90014 + C90013) * C63607) * C141462) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
              C21828 + C21828 + C141224 * C121) *
                 C89302 +
             (C44678 + C44679) * C141365) *
                C63607 +
            ((C22691 + C22692) * C89302 + (C26379 + C26378) * C141365) *
                C141341) *
               C1596 -
           (((C47305 + C47304) * C141365 + (C26378 + C26379) * C89302) *
                C141341 +
            ((C44681 + C44680) * C141365 + (C44679 + C44678) * C89302) *
                C63607) *
               C141499) *
              C141281 * C818 +
          ((((C44682 + C44683) * C89302 + (C44684 + C44685) * C141365) *
                C63607 +
            ((C115515 + C115516) * C89302 +
             (C21822 * C13206 + C43687 + C43687 + C141462 * C13212 +
              C21824 * C13207 + C43688 + C43688 + C141224 * C13213) *
                 C141365) *
                C141341) *
               C141499 -
           (((C115516 + C115515) * C141365 + (C22696 + C22695) * C89302) *
                C141341 +
            ((C44683 + C44682) * C141365 +
             (C21824 * C110 + C21837 + C21837 + C141224 * C122 + C21822 * C109 +
              C21838 + C21838 + C141462 * C121) *
                 C89302) *
                C63607) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C139366 +
             (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                 C141462 +
             (C63734 + C63735) * C139356 + (C63736 + C63737) * C141224) *
                C89302 +
            ((C81629 + C81630) * C139366 + (C81631 + C81632) * C141462 +
             C81617 * C139356 + C81618 * C141224) *
                C141365) *
               C1596 -
           (((C81633 + C81634) * C141224 + (C81635 + C81636) * C139356 +
             (C88499 + C88500) * C141462 + (C88501 + C88502) * C139366) *
                C141365 +
            (C81627 * C141224 + C81628 * C139356 + (C81632 + C81631) * C141462 +
             (C81630 + C81629) * C139366) *
                C89302) *
               C141499) *
              C141281 * C818 +
          (((C81617 * C139366 + C81618 * C141462 + (C65640 + C65639) * C139356 +
             (C65638 + C65637) * C141224) *
                C89302 +
            ((C81636 + C81635) * C139366 + (C81634 + C81633) * C141462 +
             (C63707 * C5327 + C63607 * C5393 + C63708 * C13207 +
              C141341 * C13296) *
                 C139356 +
             (C63707 * C5331 + C63607 * C5397 + C63708 * C13210 +
              C141341 * C13299) *
                 C141224) *
                C141365) *
               C141499 -
           (((C65637 + C65638) * C141224 + (C65639 + C65640) * C139356 +
             C81627 * C141462 + C81628 * C139366) *
                C141365 +
            ((C63741 + C63740) * C141224 + (C63739 + C63738) * C139356 +
             (C63737 + C63736) * C141462 + (C63735 + C63734) * C139366) *
                C89302) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C139366 +
             (C89455 * C114 + C89302 * C282 + C89456 * C1606 +
              C141365 * C1789) *
                 C141462 +
             (C89482 + C89483) * C139356 + (C89484 + C89485) * C141224) *
                C63607 +
            ((C98279 + C98280) * C139366 + (C98281 + C98282) * C141462 +
             C98267 * C139356 + C98268 * C141224) *
                C141341) *
               C1596 -
           (((C99521 + C99522) * C141224 + (C99523 + C99524) * C139356 +
             (C102809 + C102810) * C141462 + (C102811 + C102812) * C139366) *
                C141341 +
            ((C91334 + C91335) * C141224 + (C91336 + C91337) * C139356 +
             (C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
              C89302 * C1789) *
                 C141462 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C139366) *
                C63607) *
               C141499) *
              C141281 * C818 +
          ((((C91337 + C91336) * C139366 + (C91335 + C91334) * C141462 +
             (C91333 + C91332) * C139356 + (C91331 + C91330) * C141224) *
                C63607 +
            ((C99524 + C99523) * C139366 + (C99522 + C99521) * C141462 +
             (C89455 * C3492 + C89302 * C3648 + C89456 * C13207 +
              C141365 * C13376) *
                 C139356 +
             (C89455 * C3496 + C89302 * C3652 + C89456 * C13210 +
              C141365 * C13379) *
                 C141224) *
                C141341) *
               C141499 -
           (((C90331 + C90332) * C141224 + (C90333 + C90334) * C139356 +
             C98277 * C141462 + C98278 * C139366) *
                C141341 +
            ((C89489 + C89488) * C141224 + (C89487 + C89486) * C139356 +
             (C89485 + C89484) * C141462 + (C89483 + C89482) * C139366) *
                C63607) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C63707 +
             (C139366 * C189 + C141462 * C362 + C139356 * C190 +
              C141224 * C363) *
                 C63607 +
             (C23065 + C23066) * C63708 + (C23067 + C23068) * C141341) *
                C89302 +
            ((C45052 + C45053) * C63707 + (C45054 + C45055) * C63607 +
             (C26721 + C26720) * C63708 + (C26719 + C26718) * C141341) *
                C141365) *
               C1596 -
           (((C47630 + C47629) * C141341 + (C47628 + C47627) * C63708 +
             (C45059 + C45058) * C63607 + (C45057 + C45056) * C63707) *
                C141365 +
            ((C26718 + C26719) * C141341 + (C26720 + C26721) * C63708 +
             (C45055 + C45054) * C63607 + (C45053 + C45052) * C63707) *
                C89302) *
               C141499) *
              C141281 * C818 +
          ((((C45060 + C45061) * C63707 + (C45062 + C45063) * C63607 +
             (C115915 + C115916) * C63708 + (C115917 + C115918) * C141341) *
                C89302 +
            ((C45064 + C45065) * C63707 + (C45066 + C45067) * C63607 +
             (C139366 * C13206 + C141462 * C13209 + C139356 * C13207 +
              C141224 * C13210) *
                 C63708 +
             (C139366 * C13295 + C141462 * C13455 + C139356 * C13296 +
              C141224 * C13456) *
                 C141341) *
                C141365) *
               C141499 -
           (((C115918 + C115917) * C141341 + (C115916 + C115915) * C63708 +
             (C45063 + C45062) * C63607 + (C45061 + C45060) * C63707) *
                C141365 +
            ((C23076 + C23075) * C141341 + (C23074 + C23073) * C63708 +
             (C139356 * C191 + C141224 * C364 + C139366 * C190 +
              C141462 * C363) *
                 C63607 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C63707) *
                C89302) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
              C63973 + C63973 + C141341 * C1171) *
                 C141462 +
             (C64006 + C64007) * C141224) *
                C89302 +
            ((C82081 + C82082) * C141462 + C82067 * C141224) * C141365) *
               C1596 -
           (((C82083 + C82084) * C141224 + (C88821 + C88822) * C141462) *
                C141365 +
            (C82072 * C141224 + (C82082 + C82081) * C141462) * C89302) *
               C141499) *
              C141281 * C818 +
          (((C82067 * C141462 + (C65964 + C65963) * C141224) * C89302 +
            ((C82084 + C82083) * C141462 +
             (C63969 * C5327 + C71071 + C71071 + C63607 * C5563 +
              C63970 * C13207 + C71072 + C71072 + C141341 * C13533) *
                 C141224) *
                C141365) *
               C141499 -
           (((C65963 + C65964) * C141224 + C82072 * C141462) * C141365 +
            ((C64009 + C64008) * C141224 + (C64007 + C64006) * C141462) *
                C89302) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C63707 +
             (C89455 * C189 + C89302 * C501 + C89456 * C1690 +
              C141365 * C2040) *
                 C63607 +
             (C98279 + C98280) * C63708 + (C98697 + C98698) * C141341) *
                C141462 +
            ((C89482 + C89483) * C63707 + (C89731 + C89732) * C63607 +
             C98267 * C63708 + C98691 * C141341) *
                C141224) *
               C1596 -
           (((C99921 + C99922) * C141341 + (C99523 + C99524) * C63708 +
             (C91684 + C91685) * C63607 + (C91336 + C91337) * C63707) *
                C141224 +
            ((C103207 + C103208) * C141341 + (C102811 + C102812) * C63708 +
             (C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
              C89302 * C2040) *
                 C63607 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C63707) *
                C141462) *
               C141499) *
              C141281 * C818 +
          ((((C91337 + C91336) * C63707 + (C91685 + C91684) * C63607 +
             (C99524 + C99523) * C63708 + (C99922 + C99921) * C141341) *
                C141462 +
            ((C91333 + C91332) * C63707 + (C91683 + C91682) * C63607 +
             (C89455 * C3492 + C89302 * C3648 + C89456 * C13207 +
              C141365 * C13376) *
                 C63708 +
             (C89455 * C3574 + C89302 * C3866 + C89456 * C13296 +
              C141365 * C13616) *
                 C141341) *
                C141224) *
               C141499 -
           (((C90641 + C90642) * C141341 + (C90333 + C90334) * C63708 +
             (C89734 + C89733) * C63607 + (C89487 + C89486) * C63707) *
                C141224 +
            (C98696 * C141341 + C98278 * C63708 + (C89732 + C89731) * C63607 +
             (C89483 + C89482) * C63707) *
                C141462) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C89455 +
             (C139366 * C276 + C141462 * C579 + C139356 * C277 +
              C141224 * C580) *
                 C89302 +
             (C45052 + C45053) * C89456 + (C45400 + C45401) * C141365) *
                C63607 +
            ((C23065 + C23066) * C89455 + (C23424 + C23425) * C89302 +
             (C26721 + C26720) * C89456 + (C27042 + C27041) * C141365) *
                C141341) *
               C1596 -
           (((C47944 + C47943) * C141365 + (C47628 + C47627) * C89456 +
             (C27041 + C27042) * C89302 + (C26720 + C26721) * C89455) *
                C141341 +
            ((C45403 + C45402) * C141365 + (C45057 + C45056) * C89456 +
             (C45401 + C45400) * C89302 + (C45053 + C45052) * C89455) *
                C63607) *
               C141499) *
              C141281 * C818 +
          ((((C45060 + C45061) * C89455 + (C45404 + C45405) * C89302 +
             (C45064 + C45065) * C89456 + (C45406 + C45407) * C141365) *
                C63607 +
            ((C115915 + C115916) * C89455 + (C116313 + C116314) * C89302 +
             (C139366 * C13206 + C141462 * C13209 + C139356 * C13207 +
              C141224 * C13210) *
                 C89456 +
             (C139366 * C13375 + C141462 * C13692 + C139356 * C13376 +
              C141224 * C13693) *
                 C141365) *
                C141341) *
               C141499 -
           (((C116314 + C116313) * C141365 + (C115916 + C115915) * C89456 +
             (C23429 + C23428) * C89302 + (C23074 + C23073) * C89455) *
                C141341 +
            ((C45405 + C45404) * C141365 + (C45061 + C45060) * C89456 +
             (C139356 * C278 + C141224 * C581 + C139366 * C277 +
              C141462 * C580) *
                 C89302 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C89455) *
                C63607) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C89455 +
             (C63707 * C276 + C63607 * C635 + C63708 * C1006 +
              C141341 * C1419) *
                 C89302 +
             (C81629 + C81630) * C89456 + (C82503 + C82504) * C141365) *
                C141462 +
            ((C63734 + C63735) * C89455 + (C64263 + C64264) * C89302 +
             C81617 * C89456 + C82497 * C141365) *
                C141224) *
               C1596 -
           (((C82505 + C82506) * C141365 + (C81635 + C81636) * C89456 +
             C82502 * C89302 + C81628 * C89455) *
                C141224 +
            ((C89127 + C89128) * C141365 + (C88501 + C88502) * C89456 +
             (C82504 + C82503) * C89302 + (C81630 + C81629) * C89455) *
                C141462) *
               C141499) *
              C141281 * C818 +
          (((C81617 * C89455 + C82497 * C89302 + (C81636 + C81635) * C89456 +
             (C82506 + C82505) * C141365) *
                C141462 +
            ((C65640 + C65639) * C89455 + (C66278 + C66277) * C89302 +
             (C63707 * C5327 + C63607 * C5393 + C63708 * C13207 +
              C141341 * C13296) *
                 C89456 +
             (C63707 * C5451 + C63607 * C5729 + C63708 * C13376 +
              C141341 * C13770) *
                 C141365) *
                C141224) *
               C141499 -
           (((C66277 + C66278) * C141365 + (C65639 + C65640) * C89456 +
             (C64266 + C64265) * C89302 + (C63739 + C63738) * C89455) *
                C141224 +
            (C82502 * C141365 + C81628 * C89456 + (C64264 + C64263) * C89302 +
             (C63735 + C63734) * C89455) *
                C141462) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[29] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
              C89980 + C89980 + C141365 * C2283) *
                 C63607 +
             (C99115 + C99116) * C141341) *
                C141462 +
            ((C90013 + C90014) * C63607 + C99101 * C141341) * C141224) *
               C1596 -
           (((C100323 + C100324) * C141341 + (C92032 + C92033) * C63607) *
                C141224 +
            ((C103611 + C103612) * C141341 +
             (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
              C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                 C63607) *
                C141462) *
               C141499) *
              C141281 * C818 +
          ((((C92033 + C92032) * C63607 + (C100324 + C100323) * C141341) *
                C141462 +
            ((C92031 + C92030) * C63607 +
             (C89976 * C3492 + C94483 + C94483 + C89302 * C4076 +
              C89977 * C13207 + C94484 + C94484 + C141365 * C13847) *
                 C141341) *
                C141224) *
               C141499 -
           (((C90971 + C90972) * C141341 + (C90016 + C90015) * C63607) *
                C141224 +
            (C99106 * C141341 + (C90014 + C90013) * C63607) * C141462) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
              C21828 + C21828 + C141224 * C121) *
                 C89302 +
             (C44678 + C44679) * C141365) *
                C63607 +
            ((C22691 + C22692) * C89302 + (C26379 + C26378) * C141365) *
                C141341) *
               C141298 * C2374 -
           (((C26376 + C26377) * C141365 + (C22694 + C22693) * C89302) *
                C141341 +
            ((C26378 + C26379) * C141365 + (C22692 + C22691) * C89302) *
                C63607) *
               C141298 * C141497) *
              C2376 +
          ((((C22695 + C22696) * C89302 + (C115515 + C115516) * C141365) *
                C63607 +
            ((C22697 + C22698) * C89302 +
             (C21822 * C10471 + C23753 + C23753 + C141462 * C10477 +
              C21824 * C10472 + C23754 + C23754 + C141224 * C10478) *
                 C141365) *
                C141341) *
               C141298 * C141497 -
           (((C115516 + C115515) * C141365 + (C22696 + C22695) * C89302) *
                C141341 +
            ((C44683 + C44682) * C141365 +
             (C21824 * C110 + C21837 + C21837 + C141224 * C122 + C21822 * C109 +
              C21838 + C21838 + C141462 * C121) *
                 C89302) *
                C63607) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C139366 +
             (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                 C141462 +
             (C63734 + C63735) * C139356 + (C63736 + C63737) * C141224) *
                C89302 +
            ((C81629 + C81630) * C139366 + (C81631 + C81632) * C141462 +
             C81617 * C139356 + C81618 * C141224) *
                C141365) *
               C141298 * C2374 -
           (((C80369 + C80370) * C141224 + (C80371 + C80372) * C139356 +
             (C84986 + C84985) * C141462 + (C84984 + C84983) * C139366) *
                C141365 +
            ((C64605 + C64606) * C141224 + (C64607 + C64608) * C139356 +
             (C63708 * C2964 + C141341 * C3030 + C63707 * C828 +
              C63607 * C917) *
                 C141462 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C139366) *
                C89302) *
               C141298 * C141497) *
              C2376 +
          ((((C64608 + C64607) * C139366 + (C64606 + C64605) * C141462 +
             (C64604 + C64603) * C139356 + (C64602 + C64601) * C141224) *
                C89302 +
            ((C80372 + C80371) * C139366 + (C80370 + C80369) * C141462 +
             (C63707 * C3492 + C63607 * C3574 + C63708 * C10472 +
              C141341 * C10597) *
                 C139356 +
             (C63707 * C3496 + C63607 * C3578 + C63708 * C10475 +
              C141341 * C10600) *
                 C141224) *
                C141365) *
               C141298 * C141497 -
           (((C65637 + C65638) * C141224 + (C65639 + C65640) * C139356 +
             C81627 * C141462 + C81628 * C139366) *
                C141365 +
            ((C63741 + C63740) * C141224 + (C63739 + C63738) * C139356 +
             (C63737 + C63736) * C141462 + (C63735 + C63734) * C139366) *
                C89302) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C139366 +
             (C89455 * C114 + C89302 * C282 + C89456 * C1606 +
              C141365 * C1789) *
                 C141462 +
             (C89482 + C89483) * C139356 + (C89484 + C89485) * C141224) *
                C63607 +
            ((C98279 + C98280) * C139366 + (C98281 + C98282) * C141462 +
             C98267 * C139356 + C98268 * C141224) *
                C141341) *
               C141298 * C2374 -
           (((C98283 + C98284) * C141224 + (C98285 + C98286) * C139356 +
             (C101797 + C101798) * C141462 + (C101799 + C101800) * C139366) *
                C141341 +
            (C98277 * C141224 + C98278 * C139356 + (C98282 + C98281) * C141462 +
             (C98280 + C98279) * C139366) *
                C63607) *
               C141298 * C141497) *
              C2376 +
          (((C98267 * C139366 + C98268 * C141462 + (C90334 + C90333) * C139356 +
             (C90332 + C90331) * C141224) *
                C63607 +
            ((C98286 + C98285) * C139366 + (C98284 + C98283) * C141462 +
             (C89455 * C2962 + C89302 * C3086 + C89456 * C10472 +
              C141365 * C10701) *
                 C139356 +
             (C89455 * C2966 + C89302 * C3090 + C89456 * C10475 +
              C141365 * C10704) *
                 C141224) *
                C141341) *
               C141298 * C141497 -
           (((C90331 + C90332) * C141224 + (C90333 + C90334) * C139356 +
             C98277 * C141462 + C98278 * C139366) *
                C141341 +
            ((C89489 + C89488) * C141224 + (C89487 + C89486) * C139356 +
             (C89485 + C89484) * C141462 + (C89483 + C89482) * C139366) *
                C63607) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C63707 +
             (C139366 * C189 + C141462 * C362 + C139356 * C190 +
              C141224 * C363) *
                 C63607 +
             (C23065 + C23066) * C63708 + (C23067 + C23068) * C141341) *
                C89302 +
            ((C45052 + C45053) * C63707 + (C45054 + C45055) * C63607 +
             (C26721 + C26720) * C63708 + (C26719 + C26718) * C141341) *
                C141365) *
               C141298 * C2374 -
           (((C26714 + C26715) * C141341 + (C26716 + C26717) * C63708 +
             (C26718 + C26719) * C63607 + (C26720 + C26721) * C63707) *
                C141365 +
            ((C23072 + C23071) * C141341 + (C23070 + C23069) * C63708 +
             (C23068 + C23067) * C63607 + (C23066 + C23065) * C63707) *
                C89302) *
               C141298 * C141497) *
              C2376 +
          ((((C23073 + C23074) * C63707 + (C23075 + C23076) * C63607 +
             (C23077 + C23078) * C63708 + (C23079 + C23080) * C141341) *
                C89302 +
            ((C115915 + C115916) * C63707 + (C115917 + C115918) * C63607 +
             (C139366 * C10471 + C141462 * C10474 + C139356 * C10472 +
              C141224 * C10475) *
                 C63708 +
             (C139366 * C10596 + C141462 * C10816 + C139356 * C10597 +
              C141224 * C10817) *
                 C141341) *
                C141365) *
               C141298 * C141497 -
           (((C115918 + C115917) * C141341 + (C115916 + C115915) * C63708 +
             (C45063 + C45062) * C63607 + (C45061 + C45060) * C63707) *
                C141365 +
            ((C23076 + C23075) * C141341 + (C23074 + C23073) * C63708 +
             (C139356 * C191 + C141224 * C364 + C139366 * C190 +
              C141462 * C363) *
                 C63607 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C63707) *
                C89302) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
              C63973 + C63973 + C141341 * C1171) *
                 C141462 +
             (C64006 + C64007) * C141224) *
                C89302 +
            ((C82081 + C82082) * C141462 + C82067 * C141224) * C141365) *
               C141298 * C2374 -
           (((C80787 + C80788) * C141224 + (C85406 + C85405) * C141462) *
                C141365 +
            ((C64977 + C64978) * C141224 +
             (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
              C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                 C141462) *
                C89302) *
               C141298 * C141497) *
              C2376 +
          ((((C64978 + C64977) * C141462 + (C64976 + C64975) * C141224) *
                C89302 +
            ((C80788 + C80787) * C141462 +
             (C63969 * C3492 + C68524 + C68524 + C63607 * C3792 +
              C63970 * C10472 + C68525 + C68525 + C141341 * C10936) *
                 C141224) *
                C141365) *
               C141298 * C141497 -
           (((C65963 + C65964) * C141224 + C82072 * C141462) * C141365 +
            ((C64009 + C64008) * C141224 + (C64007 + C64006) * C141462) *
                C89302) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C63707 +
             (C89455 * C189 + C89302 * C501 + C89456 * C1690 +
              C141365 * C2040) *
                 C63607 +
             (C98279 + C98280) * C63708 + (C98697 + C98698) * C141341) *
                C141462 +
            ((C89482 + C89483) * C63707 + (C89731 + C89732) * C63607 +
             C98267 * C63708 + C98691 * C141341) *
                C141224) *
               C141298 * C2374 -
           (((C98699 + C98700) * C141341 + (C98285 + C98286) * C63708 +
             C98696 * C63607 + C98278 * C63707) *
                C141224 +
            ((C102101 + C102102) * C141341 + (C101799 + C101800) * C63708 +
             (C98698 + C98697) * C63607 + (C98280 + C98279) * C63707) *
                C141462) *
               C141298 * C141497) *
              C2376 +
          (((C98267 * C63707 + C98691 * C63607 + (C98286 + C98285) * C63708 +
             (C98700 + C98699) * C141341) *
                C141462 +
            ((C90334 + C90333) * C63707 + (C90642 + C90641) * C63607 +
             (C89455 * C2962 + C89302 * C3086 + C89456 * C10472 +
              C141365 * C10701) *
                 C63708 +
             (C89455 * C3028 + C89302 * C3256 + C89456 * C10597 +
              C141365 * C11043) *
                 C141341) *
                C141224) *
               C141298 * C141497 -
           (((C90641 + C90642) * C141341 + (C90333 + C90334) * C63708 +
             (C89734 + C89733) * C63607 + (C89487 + C89486) * C63707) *
                C141224 +
            (C98696 * C141341 + C98278 * C63708 + (C89732 + C89731) * C63607 +
             (C89483 + C89482) * C63707) *
                C141462) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C89455 +
             (C139366 * C276 + C141462 * C579 + C139356 * C277 +
              C141224 * C580) *
                 C89302 +
             (C45052 + C45053) * C89456 + (C45400 + C45401) * C141365) *
                C63607 +
            ((C23065 + C23066) * C89455 + (C23424 + C23425) * C89302 +
             (C26721 + C26720) * C89456 + (C27042 + C27041) * C141365) *
                C141341) *
               C141298 * C2374 -
           (((C27039 + C27040) * C141365 + (C26716 + C26717) * C89456 +
             (C23427 + C23426) * C89302 + (C23070 + C23069) * C89455) *
                C141341 +
            ((C27041 + C27042) * C141365 + (C26720 + C26721) * C89456 +
             (C23425 + C23424) * C89302 + (C23066 + C23065) * C89455) *
                C63607) *
               C141298 * C141497) *
              C2376 +
          ((((C23073 + C23074) * C89455 + (C23428 + C23429) * C89302 +
             (C115915 + C115916) * C89456 + (C116313 + C116314) * C141365) *
                C63607 +
            ((C23077 + C23078) * C89455 + (C23430 + C23431) * C89302 +
             (C139366 * C10471 + C141462 * C10474 + C139356 * C10472 +
              C141224 * C10475) *
                 C89456 +
             (C139366 * C10700 + C141462 * C11146 + C139356 * C10701 +
              C141224 * C11147) *
                 C141365) *
                C141341) *
               C141298 * C141497 -
           (((C116314 + C116313) * C141365 + (C115916 + C115915) * C89456 +
             (C23429 + C23428) * C89302 + (C23074 + C23073) * C89455) *
                C141341 +
            ((C45405 + C45404) * C141365 + (C45061 + C45060) * C89456 +
             (C139356 * C278 + C141224 * C581 + C139366 * C277 +
              C141462 * C580) *
                 C89302 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C89455) *
                C63607) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C89455 +
             (C63707 * C276 + C63607 * C635 + C63708 * C1006 +
              C141341 * C1419) *
                 C89302 +
             (C81629 + C81630) * C89456 + (C82503 + C82504) * C141365) *
                C141462 +
            ((C63734 + C63735) * C89455 + (C64263 + C64264) * C89302 +
             C81617 * C89456 + C82497 * C141365) *
                C141224) *
               C141298 * C2374 -
           (((C81191 + C81192) * C141365 + (C80371 + C80372) * C89456 +
             (C65309 + C65310) * C89302 + (C64607 + C64608) * C89455) *
                C141224 +
            ((C85810 + C85809) * C141365 + (C84984 + C84983) * C89456 +
             (C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
              C63607 * C1419) *
                 C89302 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C89455) *
                C141462) *
               C141298 * C141497) *
              C2376 +
          ((((C64608 + C64607) * C89455 + (C65310 + C65309) * C89302 +
             (C80372 + C80371) * C89456 + (C81192 + C81191) * C141365) *
                C141462 +
            ((C64604 + C64603) * C89455 + (C65308 + C65307) * C89302 +
             (C63707 * C3492 + C63607 * C3574 + C63708 * C10472 +
              C141341 * C10597) *
                 C89456 +
             (C63707 * C3648 + C63607 * C4006 + C63708 * C10701 +
              C141341 * C11257) *
                 C141365) *
                C141224) *
               C141298 * C141497 -
           (((C66277 + C66278) * C141365 + (C65639 + C65640) * C89456 +
             (C64266 + C64265) * C89302 + (C63739 + C63738) * C89455) *
                C141224 +
            (C82502 * C141365 + C81628 * C89456 + (C64264 + C64263) * C89302 +
             (C63735 + C63734) * C89455) *
                C141462) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
              C89980 + C89980 + C141365 * C2283) *
                 C63607 +
             (C99115 + C99116) * C141341) *
                C141462 +
            ((C90013 + C90014) * C63607 + C99101 * C141341) * C141224) *
               C141298 * C2374 -
           (((C99117 + C99118) * C141341 + C99106 * C63607) * C141224 +
            ((C102409 + C102410) * C141341 + (C99116 + C99115) * C63607) *
                C141462) *
               C141298 * C141497) *
              C2376 +
          (((C99101 * C63607 + (C99118 + C99117) * C141341) * C141462 +
            ((C90972 + C90971) * C63607 +
             (C89976 * C2962 + C93586 + C93586 + C89302 * C3418 +
              C89977 * C10472 + C93587 + C93587 + C141365 * C11358) *
                 C141341) *
                C141224) *
               C141298 * C141497 -
           (((C90971 + C90972) * C141341 + (C90016 + C90015) * C63607) *
                C141224 +
            (C99106 * C141341 + (C90014 + C90013) * C63607) * C141462) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
             C21828 + C21828 + C141224 * C121) *
                C89302 +
            (C44678 + C44679) * C141365) *
               C63607 +
           ((C22691 + C22692) * C89302 + (C26379 + C26378) * C141365) *
               C141341) *
              C141298 * C2956 -
          (((C26376 + C26377) * C141365 + (C22694 + C22693) * C89302) *
               C141341 +
           ((C26378 + C26379) * C141365 + (C22692 + C22691) * C89302) *
               C63607) *
              C141298 * C2957 +
          ((C25575 * C89302 + (C26377 + C26376) * C141365) * C63607 +
           ((C25588 + C25587) * C89302 +
            (C21822 * C26351 + C26366 + C26366 + C141462 * C26355 +
             C21824 * C26352 + C26367 + C26367 + C141224 * C26356) *
                C141365) *
               C141341) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C139366 +
            (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                C141462 +
            (C63734 + C63735) * C139356 + (C63736 + C63737) * C141224) *
               C89302 +
           ((C81629 + C81630) * C139366 + (C81631 + C81632) * C141462 +
            C81617 * C139356 + C81618 * C141224) *
               C141365) *
              C141298 * C2956 -
          (((C80369 + C80370) * C141224 + (C80371 + C80372) * C139356 +
            (C84986 + C84985) * C141462 + (C84984 + C84983) * C139366) *
               C141365 +
           ((C64605 + C64606) * C141224 + (C64607 + C64608) * C139356 +
            (C63708 * C2964 + C141341 * C3030 + C63707 * C828 + C63607 * C917) *
                C141462 +
            (C63708 * C2960 + C141341 * C3026 + C63707 * C823 + C63607 * C912) *
                C139366) *
               C89302) *
              C141298 * C2957 +
          (((C63707 * C2960 + C63607 * C3026 + C63708 * C9667 +
             C141341 * C9768) *
                C139366 +
            (C63707 * C2964 + C63607 * C3030 + C63708 * C9670 +
             C141341 * C9771) *
                C141462 +
            (C63707 * C2961 + C63607 * C3027 + C63708 * C9668 +
             C141341 * C9769) *
                C139356 +
            (C63707 * C2965 + C63607 * C3031 + C63708 * C9671 +
             C141341 * C9772) *
                C141224) *
               C89302 +
           ((C63707 * C10470 + C63607 * C10595 + C63708 * C26351 +
             C141341 * C26477) *
                C139366 +
            (C63707 * C10473 + C63607 * C10598 + C63708 * C26353 +
             C141341 * C26479) *
                C141462 +
            (C63707 * C10471 + C63607 * C10596 + C63708 * C26352 +
             C141341 * C26478) *
                C139356 +
            (C63707 * C10474 + C63607 * C10599 + C63708 * C26354 +
             C141341 * C26480) *
                C141224) *
               C141365) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C139366 +
            (C89455 * C114 + C89302 * C282 + C89456 * C1606 + C141365 * C1789) *
                C141462 +
            (C89482 + C89483) * C139356 + (C89484 + C89485) * C141224) *
               C63607 +
           ((C98279 + C98280) * C139366 + (C98281 + C98282) * C141462 +
            C98267 * C139356 + C98268 * C141224) *
               C141341) *
              C141298 * C2956 -
          (((C98283 + C98284) * C141224 + (C98285 + C98286) * C139356 +
            (C101797 + C101798) * C141462 + (C101799 + C101800) * C139366) *
               C141341 +
           (C98277 * C141224 + C98278 * C139356 + (C98282 + C98281) * C141462 +
            (C98280 + C98279) * C139366) *
               C63607) *
              C141298 * C2957 +
          (((C101800 + C101799) * C139366 + (C101798 + C101797) * C141462 +
            (C98286 + C98285) * C139356 + (C98284 + C98283) * C141224) *
               C63607 +
           ((C89455 * C9667 + C89302 * C9848 + C89456 * C26351 +
             C141365 * C26579) *
                C139366 +
            (C89455 * C9670 + C89302 * C9851 + C89456 * C26353 +
             C141365 * C26581) *
                C141462 +
            (C89455 * C9668 + C89302 * C9849 + C89456 * C26352 +
             C141365 * C26580) *
                C139356 +
            (C89455 * C9671 + C89302 * C9852 + C89456 * C26354 +
             C141365 * C26582) *
                C141224) *
               C141341) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C63707 +
            (C139366 * C189 + C141462 * C362 + C139356 * C190 +
             C141224 * C363) *
                C63607 +
            (C23065 + C23066) * C63708 + (C23067 + C23068) * C141341) *
               C89302 +
           ((C45052 + C45053) * C63707 + (C45054 + C45055) * C63607 +
            (C26721 + C26720) * C63708 + (C26719 + C26718) * C141341) *
               C141365) *
              C141298 * C2956 -
          (((C26714 + C26715) * C141341 + (C26716 + C26717) * C63708 +
            (C26718 + C26719) * C63607 + (C26720 + C26721) * C63707) *
               C141365 +
           ((C23072 + C23071) * C141341 + (C23070 + C23069) * C63708 +
            (C23068 + C23067) * C63607 + (C23066 + C23065) * C63707) *
               C89302) *
              C141298 * C2957 +
          ((C25834 * C63707 + C25835 * C63607 + (C25847 + C25846) * C63708 +
            (C25845 + C25844) * C141341) *
               C89302 +
           ((C26717 + C26716) * C63707 + (C26715 + C26714) * C63607 +
            (C139366 * C26351 + C141462 * C26353 + C139356 * C26352 +
             C141224 * C26354) *
                C63708 +
            (C139366 * C26477 + C141462 * C26695 + C139356 * C26478 +
             C141224 * C26696) *
                C141341) *
               C141365) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
             C63973 + C63973 + C141341 * C1171) *
                C141462 +
            (C64006 + C64007) * C141224) *
               C89302 +
           ((C82081 + C82082) * C141462 + C82067 * C141224) * C141365) *
              C141298 * C2956 -
          (((C80787 + C80788) * C141224 + (C85406 + C85405) * C141462) *
               C141365 +
           ((C64977 + C64978) * C141224 +
            (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
             C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                C141462) *
               C89302) *
              C141298 * C2957 +
          (((C63969 * C2960 + C67677 + C67677 + C63607 * C3196 +
             C63970 * C9667 + C67678 + C67678 + C141341 * C10035) *
                C141462 +
            (C63969 * C2961 + C67679 + C67679 + C63607 * C3197 +
             C63970 * C9668 + C67680 + C67680 + C141341 * C10036) *
                C141224) *
               C89302 +
           ((C63969 * C10470 + C84307 + C84307 + C63607 * C10934 +
             C63970 * C26351 + C84308 + C84308 + C141341 * C26819) *
                C141462 +
            (C63969 * C10471 + C84309 + C84309 + C63607 * C10935 +
             C63970 * C26352 + C84310 + C84310 + C141341 * C26820) *
                C141224) *
               C141365) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C63707 +
            (C89455 * C189 + C89302 * C501 + C89456 * C1690 + C141365 * C2040) *
                C63607 +
            (C98279 + C98280) * C63708 + (C98697 + C98698) * C141341) *
               C141462 +
           ((C89482 + C89483) * C63707 + (C89731 + C89732) * C63607 +
            C98267 * C63708 + C98691 * C141341) *
               C141224) *
              C141298 * C2956 -
          (((C98699 + C98700) * C141341 + (C98285 + C98286) * C63708 +
            C98696 * C63607 + C98278 * C63707) *
               C141224 +
           ((C102101 + C102102) * C141341 + (C101799 + C101800) * C63708 +
            (C98698 + C98697) * C63607 + (C98280 + C98279) * C63707) *
               C141462) *
              C141298 * C2957 +
          (((C101800 + C101799) * C63707 + (C102102 + C102101) * C63607 +
            (C89455 * C9667 + C89302 * C9848 + C89456 * C26351 +
             C141365 * C26579) *
                C63708 +
            (C89455 * C9768 + C89302 * C10118 + C89456 * C26477 +
             C141365 * C26925) *
                C141341) *
               C141462 +
           ((C98286 + C98285) * C63707 + (C98700 + C98699) * C63607 +
            (C89455 * C9668 + C89302 * C9849 + C89456 * C26352 +
             C141365 * C26580) *
                C63708 +
            (C89455 * C9769 + C89302 * C10119 + C89456 * C26478 +
             C141365 * C26926) *
                C141341) *
               C141224) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C89455 +
            (C139366 * C276 + C141462 * C579 + C139356 * C277 +
             C141224 * C580) *
                C89302 +
            (C45052 + C45053) * C89456 + (C45400 + C45401) * C141365) *
               C63607 +
           ((C23065 + C23066) * C89455 + (C23424 + C23425) * C89302 +
            (C26721 + C26720) * C89456 + (C27042 + C27041) * C141365) *
               C141341) *
              C141298 * C2956 -
          (((C27039 + C27040) * C141365 + (C26716 + C26717) * C89456 +
            (C23427 + C23426) * C89302 + (C23070 + C23069) * C89455) *
               C141341 +
           ((C27041 + C27042) * C141365 + (C26720 + C26721) * C89456 +
            (C23425 + C23424) * C89302 + (C23066 + C23065) * C89455) *
               C63607) *
              C141298 * C2957 +
          ((C25834 * C89455 + C26086 * C89302 + (C26717 + C26716) * C89456 +
            (C27040 + C27039) * C141365) *
               C63607 +
           ((C25847 + C25846) * C89455 + (C26093 + C26092) * C89302 +
            (C139366 * C26351 + C141462 * C26353 + C139356 * C26352 +
             C141224 * C26354) *
                C89456 +
            (C139366 * C26579 + C141462 * C27028 + C139356 * C26580 +
             C141224 * C27029) *
                C141365) *
               C141341) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C89455 +
            (C63707 * C276 + C63607 * C635 + C63708 * C1006 + C141341 * C1419) *
                C89302 +
            (C81629 + C81630) * C89456 + (C82503 + C82504) * C141365) *
               C141462 +
           ((C63734 + C63735) * C89455 + (C64263 + C64264) * C89302 +
            C81617 * C89456 + C82497 * C141365) *
               C141224) *
              C141298 * C2956 -
          (((C81191 + C81192) * C141365 + (C80371 + C80372) * C89456 +
            (C65309 + C65310) * C89302 + (C64607 + C64608) * C89455) *
               C141224 +
           ((C85810 + C85809) * C141365 + (C84984 + C84983) * C89456 +
            (C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
             C63607 * C1419) *
                C89302 +
            (C63708 * C2960 + C141341 * C3026 + C63707 * C823 + C63607 * C912) *
                C89455) *
               C141462) *
              C141298 * C2957 +
          (((C63707 * C2960 + C63607 * C3026 + C63708 * C9667 +
             C141341 * C9768) *
                C89455 +
            (C63707 * C3084 + C63607 * C3362 + C63708 * C9848 +
             C141341 * C10284) *
                C89302 +
            (C63707 * C10470 + C63607 * C10595 + C63708 * C26351 +
             C141341 * C26477) *
                C89456 +
            (C63707 * C10699 + C63607 * C11255 + C63708 * C26579 +
             C141341 * C27140) *
                C141365) *
               C141462 +
           ((C63707 * C2961 + C63607 * C3027 + C63708 * C9668 +
             C141341 * C9769) *
                C89455 +
            (C63707 * C3085 + C63607 * C3363 + C63708 * C9849 +
             C141341 * C10285) *
                C89302 +
            (C63707 * C10471 + C63607 * C10596 + C63708 * C26352 +
             C141341 * C26478) *
                C89456 +
            (C63707 * C10700 + C63607 * C11256 + C63708 * C26580 +
             C141341 * C27141) *
                C141365) *
               C141224) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
             C89980 + C89980 + C141365 * C2283) *
                C63607 +
            (C99115 + C99116) * C141341) *
               C141462 +
           ((C90013 + C90014) * C63607 + C99101 * C141341) * C141224) *
              C141298 * C2956 -
          (((C99117 + C99118) * C141341 + C99106 * C63607) * C141224 +
           ((C102409 + C102410) * C141341 + (C99116 + C99115) * C63607) *
               C141462) *
              C141298 * C2957 +
          (((C102410 + C102409) * C63607 +
            (C89976 * C9667 + C102401 + C102401 + C89302 * C10361 +
             C89977 * C26351 + C102402 + C102402 + C141365 * C27240) *
                C141341) *
               C141462 +
           ((C99118 + C99117) * C63607 +
            (C89976 * C9668 + C102403 + C102403 + C89302 * C10362 +
             C89977 * C26352 + C102404 + C102404 + C141365 * C27241) *
                C141341) *
               C141224) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
              C21828 + C21828 + C141224 * C121) *
                 C89302 +
             (C44678 + C44679) * C141365) *
                C63607 +
            ((C22691 + C22692) * C89302 + C119927 * C141365) * C141341) *
               C1596 -
           (((C47305 + C47304) * C141365 + C119928 * C89302) * C141341 +
            ((C44681 + C44680) * C141365 + (C44679 + C44678) * C89302) *
                C63607) *
               C141499) *
              C2374 +
          (((C119927 * C89302 + (C47304 + C47305) * C141365) * C63607 +
            ((C26377 + C26376) * C89302 +
             (C21822 * C29087 + C29098 + C29098 + C141462 * C29091 +
              C21824 * C29088 + C29099 + C29099 + C141224 * C29092) *
                 C141365) *
                C141341) *
               C141499 -
           (((C26376 + C26377) * C141365 + (C22694 + C22693) * C89302) *
                C141341 +
            (C119928 * C141365 + (C22692 + C22691) * C89302) * C63607) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C139366 +
             (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                 C141462 +
             (C63734 + C63735) * C139356 + (C63736 + C63737) * C141224) *
                C89302 +
            ((C81629 + C81630) * C139366 + (C81631 + C81632) * C141462 +
             C81617 * C139356 + C81618 * C141224) *
                C141365) *
               C1596 -
           (((C81633 + C81634) * C141224 + (C81635 + C81636) * C139356 +
             (C88499 + C88500) * C141462 + (C88501 + C88502) * C139366) *
                C141365 +
            (C81627 * C141224 + C81628 * C139356 + (C81632 + C81631) * C141462 +
             (C81630 + C81629) * C139366) *
                C89302) *
               C141499) *
              C2374 +
          ((((C84983 + C84984) * C139366 + (C84985 + C84986) * C141462 +
             (C80372 + C80371) * C139356 + (C80370 + C80369) * C141224) *
                C89302 +
            ((C63707 * C13205 + C63607 * C13294 + C63708 * C29087 +
              C141341 * C29173) *
                 C139366 +
             (C63707 * C13208 + C63607 * C13297 + C63708 * C29089 +
              C141341 * C29175) *
                 C141462 +
             (C63707 * C13206 + C63607 * C13295 + C63708 * C29088 +
              C141341 * C29174) *
                 C139356 +
             (C63707 * C13209 + C63607 * C13298 + C63708 * C29090 +
              C141341 * C29176) *
                 C141224) *
                C141365) *
               C141499 -
           (((C80369 + C80370) * C141224 + (C80371 + C80372) * C139356 +
             (C84986 + C84985) * C141462 + (C84984 + C84983) * C139366) *
                C141365 +
            ((C64605 + C64606) * C141224 + (C64607 + C64608) * C139356 +
             (C63708 * C2964 + C141341 * C3030 + C63707 * C828 +
              C63607 * C917) *
                 C141462 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C139366) *
                C89302) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C139366 +
             (C89455 * C114 + C89302 * C282 + C89456 * C1606 +
              C141365 * C1789) *
                 C141462 +
             (C89482 + C89483) * C139356 + (C89484 + C89485) * C141224) *
                C63607 +
            ((C98279 + C98280) * C139366 + (C98281 + C98282) * C141462 +
             C98267 * C139356 + C98268 * C141224) *
                C141341) *
               C1596 -
           (((C99521 + C99522) * C141224 + (C99523 + C99524) * C139356 +
             (C102809 + C102810) * C141462 + (C102811 + C102812) * C139366) *
                C141341 +
            ((C91334 + C91335) * C141224 + (C91336 + C91337) * C139356 +
             (C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
              C89302 * C1789) *
                 C141462 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C139366) *
                C63607) *
               C141499) *
              C2374 +
          ((((C102812 + C102811) * C139366 + (C102810 + C102809) * C141462 +
             (C99524 + C99523) * C139356 + (C99522 + C99521) * C141224) *
                C63607 +
            ((C89455 * C10470 + C89302 * C10699 + C89456 * C29087 +
              C141365 * C29251) *
                 C139366 +
             (C89455 * C10473 + C89302 * C10702 + C89456 * C29089 +
              C141365 * C29253) *
                 C141462 +
             (C89455 * C10471 + C89302 * C10700 + C89456 * C29088 +
              C141365 * C29252) *
                 C139356 +
             (C89455 * C10474 + C89302 * C10703 + C89456 * C29090 +
              C141365 * C29254) *
                 C141224) *
                C141341) *
               C141499 -
           (((C98283 + C98284) * C141224 + (C98285 + C98286) * C139356 +
             (C101797 + C101798) * C141462 + (C101799 + C101800) * C139366) *
                C141341 +
            (C98277 * C141224 + C98278 * C139356 + (C98282 + C98281) * C141462 +
             (C98280 + C98279) * C139366) *
                C63607) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C63707 +
             (C139366 * C189 + C141462 * C362 + C139356 * C190 +
              C141224 * C363) *
                 C63607 +
             (C23065 + C23066) * C63708 + (C23067 + C23068) * C141341) *
                C89302 +
            ((C45052 + C45053) * C63707 + (C45054 + C45055) * C63607 +
             C120319 * C63708 + C120320 * C141341) *
                C141365) *
               C1596 -
           (((C47630 + C47629) * C141341 + (C47628 + C47627) * C63708 +
             (C45059 + C45058) * C63607 + (C45057 + C45056) * C63707) *
                C141365 +
            (C120321 * C141341 + C120322 * C63708 + (C45055 + C45054) * C63607 +
             (C45053 + C45052) * C63707) *
                C89302) *
               C141499) *
              C2374 +
          (((C120319 * C63707 + C120320 * C63607 + (C26717 + C26716) * C63708 +
             (C26715 + C26714) * C141341) *
                C89302 +
            ((C47627 + C47628) * C63707 + (C47629 + C47630) * C63607 +
             (C139366 * C29087 + C141462 * C29089 + C139356 * C29088 +
              C141224 * C29090) *
                 C63708 +
             (C139366 * C29173 + C141462 * C29329 + C139356 * C29174 +
              C141224 * C29330) *
                 C141341) *
                C141365) *
               C141499 -
           (((C26714 + C26715) * C141341 + (C26716 + C26717) * C63708 +
             C120321 * C63607 + C120322 * C63707) *
                C141365 +
            ((C23072 + C23071) * C141341 + (C23070 + C23069) * C63708 +
             (C23068 + C23067) * C63607 + (C23066 + C23065) * C63707) *
                C89302) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
              C63973 + C63973 + C141341 * C1171) *
                 C141462 +
             (C64006 + C64007) * C141224) *
                C89302 +
            ((C82081 + C82082) * C141462 + C82067 * C141224) * C141365) *
               C1596 -
           (((C82083 + C82084) * C141224 + (C88821 + C88822) * C141462) *
                C141365 +
            (C82072 * C141224 + (C82082 + C82081) * C141462) * C89302) *
               C141499) *
              C2374 +
          ((((C85405 + C85406) * C141462 + (C80788 + C80787) * C141224) *
                C89302 +
            ((C63969 * C13205 + C85397 + C85397 + C63607 * C13531 +
              C63970 * C29087 + C85398 + C85398 + C141341 * C29405) *
                 C141462 +
             (C63969 * C13206 + C85399 + C85399 + C63607 * C13532 +
              C63970 * C29088 + C85400 + C85400 + C141341 * C29406) *
                 C141224) *
                C141365) *
               C141499 -
           (((C80787 + C80788) * C141224 + (C85406 + C85405) * C141462) *
                C141365 +
            ((C64977 + C64978) * C141224 +
             (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
              C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                 C141462) *
                C89302) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C63707 +
             (C89455 * C189 + C89302 * C501 + C89456 * C1690 +
              C141365 * C2040) *
                 C63607 +
             (C98279 + C98280) * C63708 + (C98697 + C98698) * C141341) *
                C141462 +
            ((C89482 + C89483) * C63707 + (C89731 + C89732) * C63607 +
             C98267 * C63708 + C98691 * C141341) *
                C141224) *
               C1596 -
           (((C99921 + C99922) * C141341 + (C99523 + C99524) * C63708 +
             (C91684 + C91685) * C63607 + (C91336 + C91337) * C63707) *
                C141224 +
            ((C103207 + C103208) * C141341 + (C102811 + C102812) * C63708 +
             (C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
              C89302 * C2040) *
                 C63607 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C63707) *
                C141462) *
               C141499) *
              C2374 +
          ((((C102812 + C102811) * C63707 + (C103208 + C103207) * C63607 +
             (C89455 * C10470 + C89302 * C10699 + C89456 * C29087 +
              C141365 * C29251) *
                 C63708 +
             (C89455 * C10595 + C89302 * C11041 + C89456 * C29173 +
              C141365 * C29487) *
                 C141341) *
                C141462 +
            ((C99524 + C99523) * C63707 + (C99922 + C99921) * C63607 +
             (C89455 * C10471 + C89302 * C10700 + C89456 * C29088 +
              C141365 * C29252) *
                 C63708 +
             (C89455 * C10596 + C89302 * C11042 + C89456 * C29174 +
              C141365 * C29488) *
                 C141341) *
                C141224) *
               C141499 -
           (((C98699 + C98700) * C141341 + (C98285 + C98286) * C63708 +
             C98696 * C63607 + C98278 * C63707) *
                C141224 +
            ((C102101 + C102102) * C141341 + (C101799 + C101800) * C63708 +
             (C98698 + C98697) * C63607 + (C98280 + C98279) * C63707) *
                C141462) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C89455 +
             (C139366 * C276 + C141462 * C579 + C139356 * C277 +
              C141224 * C580) *
                 C89302 +
             (C45052 + C45053) * C89456 + (C45400 + C45401) * C141365) *
                C63607 +
            ((C23065 + C23066) * C89455 + (C23424 + C23425) * C89302 +
             C120319 * C89456 + C120713 * C141365) *
                C141341) *
               C1596 -
           (((C47944 + C47943) * C141365 + (C47628 + C47627) * C89456 +
             C120714 * C89302 + C120322 * C89455) *
                C141341 +
            ((C45403 + C45402) * C141365 + (C45057 + C45056) * C89456 +
             (C45401 + C45400) * C89302 + (C45053 + C45052) * C89455) *
                C63607) *
               C141499) *
              C2374 +
          (((C120319 * C89455 + C120713 * C89302 + (C47627 + C47628) * C89456 +
             (C47943 + C47944) * C141365) *
                C63607 +
            ((C26717 + C26716) * C89455 + (C27040 + C27039) * C89302 +
             (C139366 * C29087 + C141462 * C29089 + C139356 * C29088 +
              C141224 * C29090) *
                 C89456 +
             (C139366 * C29251 + C141462 * C29563 + C139356 * C29252 +
              C141224 * C29564) *
                 C141365) *
                C141341) *
               C141499 -
           (((C27039 + C27040) * C141365 + (C26716 + C26717) * C89456 +
             (C23427 + C23426) * C89302 + (C23070 + C23069) * C89455) *
                C141341 +
            (C120714 * C141365 + C120322 * C89456 + (C23425 + C23424) * C89302 +
             (C23066 + C23065) * C89455) *
                C63607) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C89455 +
             (C63707 * C276 + C63607 * C635 + C63708 * C1006 +
              C141341 * C1419) *
                 C89302 +
             (C81629 + C81630) * C89456 + (C82503 + C82504) * C141365) *
                C141462 +
            ((C63734 + C63735) * C89455 + (C64263 + C64264) * C89302 +
             C81617 * C89456 + C82497 * C141365) *
                C141224) *
               C1596 -
           (((C82505 + C82506) * C141365 + (C81635 + C81636) * C89456 +
             C82502 * C89302 + C81628 * C89455) *
                C141224 +
            ((C89127 + C89128) * C141365 + (C88501 + C88502) * C89456 +
             (C82504 + C82503) * C89302 + (C81630 + C81629) * C89455) *
                C141462) *
               C141499) *
              C2374 +
          ((((C84983 + C84984) * C89455 + (C85809 + C85810) * C89302 +
             (C63707 * C13205 + C63607 * C13294 + C63708 * C29087 +
              C141341 * C29173) *
                 C89456 +
             (C63707 * C13374 + C63607 * C13768 + C63708 * C29251 +
              C141341 * C29639) *
                 C141365) *
                C141462 +
            ((C80372 + C80371) * C89455 + (C81192 + C81191) * C89302 +
             (C63707 * C13206 + C63607 * C13295 + C63708 * C29088 +
              C141341 * C29174) *
                 C89456 +
             (C63707 * C13375 + C63607 * C13769 + C63708 * C29252 +
              C141341 * C29640) *
                 C141365) *
                C141224) *
               C141499 -
           (((C81191 + C81192) * C141365 + (C80371 + C80372) * C89456 +
             (C65309 + C65310) * C89302 + (C64607 + C64608) * C89455) *
                C141224 +
            ((C85810 + C85809) * C141365 + (C84984 + C84983) * C89456 +
             (C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
              C63607 * C1419) *
                 C89302 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C89455) *
                C141462) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
              C89980 + C89980 + C141365 * C2283) *
                 C63607 +
             (C99115 + C99116) * C141341) *
                C141462 +
            ((C90013 + C90014) * C63607 + C99101 * C141341) * C141224) *
               C1596 -
           (((C100323 + C100324) * C141341 + (C92032 + C92033) * C63607) *
                C141224 +
            ((C103611 + C103612) * C141341 +
             (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
              C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                 C63607) *
                C141462) *
               C141499) *
              C2374 +
          ((((C103612 + C103611) * C63607 +
             (C89976 * C10470 + C103603 + C103603 + C89302 * C11356 +
              C89977 * C29087 + C103604 + C103604 + C141365 * C29715) *
                 C141341) *
                C141462 +
            ((C100324 + C100323) * C63607 +
             (C89976 * C10471 + C103605 + C103605 + C89302 * C11357 +
              C89977 * C29088 + C103606 + C103606 + C141365 * C29716) *
                 C141341) *
                C141224) *
               C141499 -
           (((C99117 + C99118) * C141341 + C99106 * C63607) * C141224 +
            ((C102409 + C102410) * C141341 + (C99116 + C99115) * C63607) *
                C141462) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
              C21828 + C21828 + C141224 * C121) *
                 C89302 +
             (C44678 + C44679) * C141365) *
                C63607 +
            ((C22691 + C22692) * C89302 + C119927 * C141365) * C141341) *
               C4148 -
           (((C47305 + C47304) * C141365 + C119928 * C89302) * C141341 +
            ((C44681 + C44680) * C141365 + (C44679 + C44678) * C89302) *
                C63607) *
               C141499) *
              C141281 * C2376 +
          ((((C44682 + C44683) * C89302 + (C44684 + C44685) * C141365) *
                C63607 +
            ((C115515 + C115516) * C89302 +
             (C21822 * C13206 + C43687 + C43687 + C141462 * C13212 +
              C21824 * C13207 + C43688 + C43688 + C141224 * C13213) *
                 C141365) *
                C141341) *
               C141499 -
           (((C115516 + C115515) * C141365 + (C22696 + C22695) * C89302) *
                C141341 +
            ((C44683 + C44682) * C141365 +
             (C21824 * C110 + C21837 + C21837 + C141224 * C122 + C21822 * C109 +
              C21838 + C21838 + C141462 * C121) *
                 C89302) *
                C63607) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C139366 +
             (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                 C141462 +
             (C63734 + C63735) * C139356 + (C63736 + C63737) * C141224) *
                C89302 +
            ((C81629 + C81630) * C139366 + (C81631 + C81632) * C141462 +
             C81617 * C139356 + C81618 * C141224) *
                C141365) *
               C4148 -
           (((C81633 + C81634) * C141224 + (C81635 + C81636) * C139356 +
             (C88499 + C88500) * C141462 + (C88501 + C88502) * C139366) *
                C141365 +
            (C81627 * C141224 + C81628 * C139356 + (C81632 + C81631) * C141462 +
             (C81630 + C81629) * C139366) *
                C89302) *
               C141499) *
              C141281 * C2376 +
          (((C81617 * C139366 + C81618 * C141462 + (C65640 + C65639) * C139356 +
             (C65638 + C65637) * C141224) *
                C89302 +
            ((C81636 + C81635) * C139366 + (C81634 + C81633) * C141462 +
             (C63707 * C5327 + C63607 * C5393 + C63708 * C13207 +
              C141341 * C13296) *
                 C139356 +
             (C63707 * C5331 + C63607 * C5397 + C63708 * C13210 +
              C141341 * C13299) *
                 C141224) *
                C141365) *
               C141499 -
           (((C65637 + C65638) * C141224 + (C65639 + C65640) * C139356 +
             C81627 * C141462 + C81628 * C139366) *
                C141365 +
            ((C63741 + C63740) * C141224 + (C63739 + C63738) * C139356 +
             (C63737 + C63736) * C141462 + (C63735 + C63734) * C139366) *
                C89302) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C139366 +
             (C89455 * C114 + C89302 * C282 + C89456 * C1606 +
              C141365 * C1789) *
                 C141462 +
             (C89482 + C89483) * C139356 + (C89484 + C89485) * C141224) *
                C63607 +
            ((C98279 + C98280) * C139366 + (C98281 + C98282) * C141462 +
             C98267 * C139356 + C98268 * C141224) *
                C141341) *
               C4148 -
           (((C99521 + C99522) * C141224 + (C99523 + C99524) * C139356 +
             (C102809 + C102810) * C141462 + (C102811 + C102812) * C139366) *
                C141341 +
            ((C91334 + C91335) * C141224 + (C91336 + C91337) * C139356 +
             (C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
              C89302 * C1789) *
                 C141462 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C139366) *
                C63607) *
               C141499) *
              C141281 * C2376 +
          ((((C91337 + C91336) * C139366 + (C91335 + C91334) * C141462 +
             (C91333 + C91332) * C139356 + (C91331 + C91330) * C141224) *
                C63607 +
            ((C99524 + C99523) * C139366 + (C99522 + C99521) * C141462 +
             (C89455 * C3492 + C89302 * C3648 + C89456 * C13207 +
              C141365 * C13376) *
                 C139356 +
             (C89455 * C3496 + C89302 * C3652 + C89456 * C13210 +
              C141365 * C13379) *
                 C141224) *
                C141341) *
               C141499 -
           (((C90331 + C90332) * C141224 + (C90333 + C90334) * C139356 +
             C98277 * C141462 + C98278 * C139366) *
                C141341 +
            ((C89489 + C89488) * C141224 + (C89487 + C89486) * C139356 +
             (C89485 + C89484) * C141462 + (C89483 + C89482) * C139366) *
                C63607) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C63707 +
             (C139366 * C189 + C141462 * C362 + C139356 * C190 +
              C141224 * C363) *
                 C63607 +
             (C23065 + C23066) * C63708 + (C23067 + C23068) * C141341) *
                C89302 +
            ((C45052 + C45053) * C63707 + (C45054 + C45055) * C63607 +
             C120319 * C63708 + C120320 * C141341) *
                C141365) *
               C4148 -
           (((C47630 + C47629) * C141341 + (C47628 + C47627) * C63708 +
             (C45059 + C45058) * C63607 + (C45057 + C45056) * C63707) *
                C141365 +
            (C120321 * C141341 + C120322 * C63708 + (C45055 + C45054) * C63607 +
             (C45053 + C45052) * C63707) *
                C89302) *
               C141499) *
              C141281 * C2376 +
          ((((C45060 + C45061) * C63707 + (C45062 + C45063) * C63607 +
             (C115915 + C115916) * C63708 + (C115917 + C115918) * C141341) *
                C89302 +
            ((C45064 + C45065) * C63707 + (C45066 + C45067) * C63607 +
             (C139366 * C13206 + C141462 * C13209 + C139356 * C13207 +
              C141224 * C13210) *
                 C63708 +
             (C139366 * C13295 + C141462 * C13455 + C139356 * C13296 +
              C141224 * C13456) *
                 C141341) *
                C141365) *
               C141499 -
           (((C115918 + C115917) * C141341 + (C115916 + C115915) * C63708 +
             (C45063 + C45062) * C63607 + (C45061 + C45060) * C63707) *
                C141365 +
            ((C23076 + C23075) * C141341 + (C23074 + C23073) * C63708 +
             (C139356 * C191 + C141224 * C364 + C139366 * C190 +
              C141462 * C363) *
                 C63607 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C63707) *
                C89302) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
              C63973 + C63973 + C141341 * C1171) *
                 C141462 +
             (C64006 + C64007) * C141224) *
                C89302 +
            ((C82081 + C82082) * C141462 + C82067 * C141224) * C141365) *
               C4148 -
           (((C82083 + C82084) * C141224 + (C88821 + C88822) * C141462) *
                C141365 +
            (C82072 * C141224 + (C82082 + C82081) * C141462) * C89302) *
               C141499) *
              C141281 * C2376 +
          (((C82067 * C141462 + (C65964 + C65963) * C141224) * C89302 +
            ((C82084 + C82083) * C141462 +
             (C63969 * C5327 + C71071 + C71071 + C63607 * C5563 +
              C63970 * C13207 + C71072 + C71072 + C141341 * C13533) *
                 C141224) *
                C141365) *
               C141499 -
           (((C65963 + C65964) * C141224 + C82072 * C141462) * C141365 +
            ((C64009 + C64008) * C141224 + (C64007 + C64006) * C141462) *
                C89302) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C63707 +
             (C89455 * C189 + C89302 * C501 + C89456 * C1690 +
              C141365 * C2040) *
                 C63607 +
             (C98279 + C98280) * C63708 + (C98697 + C98698) * C141341) *
                C141462 +
            ((C89482 + C89483) * C63707 + (C89731 + C89732) * C63607 +
             C98267 * C63708 + C98691 * C141341) *
                C141224) *
               C4148 -
           (((C99921 + C99922) * C141341 + (C99523 + C99524) * C63708 +
             (C91684 + C91685) * C63607 + (C91336 + C91337) * C63707) *
                C141224 +
            ((C103207 + C103208) * C141341 + (C102811 + C102812) * C63708 +
             (C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
              C89302 * C2040) *
                 C63607 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C63707) *
                C141462) *
               C141499) *
              C141281 * C2376 +
          ((((C91337 + C91336) * C63707 + (C91685 + C91684) * C63607 +
             (C99524 + C99523) * C63708 + (C99922 + C99921) * C141341) *
                C141462 +
            ((C91333 + C91332) * C63707 + (C91683 + C91682) * C63607 +
             (C89455 * C3492 + C89302 * C3648 + C89456 * C13207 +
              C141365 * C13376) *
                 C63708 +
             (C89455 * C3574 + C89302 * C3866 + C89456 * C13296 +
              C141365 * C13616) *
                 C141341) *
                C141224) *
               C141499 -
           (((C90641 + C90642) * C141341 + (C90333 + C90334) * C63708 +
             (C89734 + C89733) * C63607 + (C89487 + C89486) * C63707) *
                C141224 +
            (C98696 * C141341 + C98278 * C63708 + (C89732 + C89731) * C63607 +
             (C89483 + C89482) * C63707) *
                C141462) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C89455 +
             (C139366 * C276 + C141462 * C579 + C139356 * C277 +
              C141224 * C580) *
                 C89302 +
             (C45052 + C45053) * C89456 + (C45400 + C45401) * C141365) *
                C63607 +
            ((C23065 + C23066) * C89455 + (C23424 + C23425) * C89302 +
             C120319 * C89456 + C120713 * C141365) *
                C141341) *
               C4148 -
           (((C47944 + C47943) * C141365 + (C47628 + C47627) * C89456 +
             C120714 * C89302 + C120322 * C89455) *
                C141341 +
            ((C45403 + C45402) * C141365 + (C45057 + C45056) * C89456 +
             (C45401 + C45400) * C89302 + (C45053 + C45052) * C89455) *
                C63607) *
               C141499) *
              C141281 * C2376 +
          ((((C45060 + C45061) * C89455 + (C45404 + C45405) * C89302 +
             (C45064 + C45065) * C89456 + (C45406 + C45407) * C141365) *
                C63607 +
            ((C115915 + C115916) * C89455 + (C116313 + C116314) * C89302 +
             (C139366 * C13206 + C141462 * C13209 + C139356 * C13207 +
              C141224 * C13210) *
                 C89456 +
             (C139366 * C13375 + C141462 * C13692 + C139356 * C13376 +
              C141224 * C13693) *
                 C141365) *
                C141341) *
               C141499 -
           (((C116314 + C116313) * C141365 + (C115916 + C115915) * C89456 +
             (C23429 + C23428) * C89302 + (C23074 + C23073) * C89455) *
                C141341 +
            ((C45405 + C45404) * C141365 + (C45061 + C45060) * C89456 +
             (C139356 * C278 + C141224 * C581 + C139366 * C277 +
              C141462 * C580) *
                 C89302 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C89455) *
                C63607) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C89455 +
             (C63707 * C276 + C63607 * C635 + C63708 * C1006 +
              C141341 * C1419) *
                 C89302 +
             (C81629 + C81630) * C89456 + (C82503 + C82504) * C141365) *
                C141462 +
            ((C63734 + C63735) * C89455 + (C64263 + C64264) * C89302 +
             C81617 * C89456 + C82497 * C141365) *
                C141224) *
               C4148 -
           (((C82505 + C82506) * C141365 + (C81635 + C81636) * C89456 +
             C82502 * C89302 + C81628 * C89455) *
                C141224 +
            ((C89127 + C89128) * C141365 + (C88501 + C88502) * C89456 +
             (C82504 + C82503) * C89302 + (C81630 + C81629) * C89455) *
                C141462) *
               C141499) *
              C141281 * C2376 +
          (((C81617 * C89455 + C82497 * C89302 + (C81636 + C81635) * C89456 +
             (C82506 + C82505) * C141365) *
                C141462 +
            ((C65640 + C65639) * C89455 + (C66278 + C66277) * C89302 +
             (C63707 * C5327 + C63607 * C5393 + C63708 * C13207 +
              C141341 * C13296) *
                 C89456 +
             (C63707 * C5451 + C63607 * C5729 + C63708 * C13376 +
              C141341 * C13770) *
                 C141365) *
                C141224) *
               C141499 -
           (((C66277 + C66278) * C141365 + (C65639 + C65640) * C89456 +
             (C64266 + C64265) * C89302 + (C63739 + C63738) * C89455) *
                C141224 +
            (C82502 * C141365 + C81628 * C89456 + (C64264 + C64263) * C89302 +
             (C63735 + C63734) * C89455) *
                C141462) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
              C89980 + C89980 + C141365 * C2283) *
                 C63607 +
             (C99115 + C99116) * C141341) *
                C141462 +
            ((C90013 + C90014) * C63607 + C99101 * C141341) * C141224) *
               C4148 -
           (((C100323 + C100324) * C141341 + (C92032 + C92033) * C63607) *
                C141224 +
            ((C103611 + C103612) * C141341 +
             (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
              C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                 C63607) *
                C141462) *
               C141499) *
              C141281 * C2376 +
          ((((C92033 + C92032) * C63607 + (C100324 + C100323) * C141341) *
                C141462 +
            ((C92031 + C92030) * C63607 +
             (C89976 * C3492 + C94483 + C94483 + C89302 * C4076 +
              C89977 * C13207 + C94484 + C94484 + C141365 * C13847) *
                 C141341) *
                C141224) *
               C141499 -
           (((C90971 + C90972) * C141341 + (C90016 + C90015) * C63607) *
                C141224 +
            (C99106 * C141341 + (C90014 + C90013) * C63607) * C141462) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
              C21828 + C21828 + C141224 * C121) *
                 C89302 +
             (C44678 + C44679) * C141365) *
                C63607 +
            ((C22691 + C22692) * C89302 + C119927 * C141365) * C141341) *
               C4148 -
           (((C47305 + C47304) * C141365 + C119928 * C89302) * C141341 +
            ((C44681 + C44680) * C141365 + (C44679 + C44678) * C89302) *
                C63607) *
               C141499) *
              C816 +
          (((C119927 * C89302 + (C47304 + C47305) * C141365) * C63607 +
            ((C26377 + C26376) * C89302 +
             (C21822 * C29087 + C29098 + C29098 + C141462 * C29091 +
              C21824 * C29088 + C29099 + C29099 + C141224 * C29092) *
                 C141365) *
                C141341) *
               C141499 -
           (((C26376 + C26377) * C141365 + (C22694 + C22693) * C89302) *
                C141341 +
            (C119928 * C141365 + (C22692 + C22691) * C89302) * C63607) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C139366 +
             (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                 C141462 +
             (C63734 + C63735) * C139356 + (C63736 + C63737) * C141224) *
                C89302 +
            ((C81629 + C81630) * C139366 + (C81631 + C81632) * C141462 +
             C81617 * C139356 + C81618 * C141224) *
                C141365) *
               C4148 -
           (((C81633 + C81634) * C141224 + (C81635 + C81636) * C139356 +
             (C88499 + C88500) * C141462 + (C88501 + C88502) * C139366) *
                C141365 +
            (C81627 * C141224 + C81628 * C139356 + (C81632 + C81631) * C141462 +
             (C81630 + C81629) * C139366) *
                C89302) *
               C141499) *
              C816 +
          ((((C84983 + C84984) * C139366 + (C84985 + C84986) * C141462 +
             (C80372 + C80371) * C139356 + (C80370 + C80369) * C141224) *
                C89302 +
            ((C63707 * C13205 + C63607 * C13294 + C63708 * C29087 +
              C141341 * C29173) *
                 C139366 +
             (C63707 * C13208 + C63607 * C13297 + C63708 * C29089 +
              C141341 * C29175) *
                 C141462 +
             (C63707 * C13206 + C63607 * C13295 + C63708 * C29088 +
              C141341 * C29174) *
                 C139356 +
             (C63707 * C13209 + C63607 * C13298 + C63708 * C29090 +
              C141341 * C29176) *
                 C141224) *
                C141365) *
               C141499 -
           (((C80369 + C80370) * C141224 + (C80371 + C80372) * C139356 +
             (C84986 + C84985) * C141462 + (C84984 + C84983) * C139366) *
                C141365 +
            ((C64605 + C64606) * C141224 + (C64607 + C64608) * C139356 +
             (C63708 * C2964 + C141341 * C3030 + C63707 * C828 +
              C63607 * C917) *
                 C141462 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C139366) *
                C89302) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C139366 +
             (C89455 * C114 + C89302 * C282 + C89456 * C1606 +
              C141365 * C1789) *
                 C141462 +
             (C89482 + C89483) * C139356 + (C89484 + C89485) * C141224) *
                C63607 +
            ((C98279 + C98280) * C139366 + (C98281 + C98282) * C141462 +
             C98267 * C139356 + C98268 * C141224) *
                C141341) *
               C4148 -
           (((C99521 + C99522) * C141224 + (C99523 + C99524) * C139356 +
             (C102809 + C102810) * C141462 + (C102811 + C102812) * C139366) *
                C141341 +
            ((C91334 + C91335) * C141224 + (C91336 + C91337) * C139356 +
             (C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
              C89302 * C1789) *
                 C141462 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C139366) *
                C63607) *
               C141499) *
              C816 +
          ((((C102812 + C102811) * C139366 + (C102810 + C102809) * C141462 +
             (C99524 + C99523) * C139356 + (C99522 + C99521) * C141224) *
                C63607 +
            ((C89455 * C10470 + C89302 * C10699 + C89456 * C29087 +
              C141365 * C29251) *
                 C139366 +
             (C89455 * C10473 + C89302 * C10702 + C89456 * C29089 +
              C141365 * C29253) *
                 C141462 +
             (C89455 * C10471 + C89302 * C10700 + C89456 * C29088 +
              C141365 * C29252) *
                 C139356 +
             (C89455 * C10474 + C89302 * C10703 + C89456 * C29090 +
              C141365 * C29254) *
                 C141224) *
                C141341) *
               C141499 -
           (((C98283 + C98284) * C141224 + (C98285 + C98286) * C139356 +
             (C101797 + C101798) * C141462 + (C101799 + C101800) * C139366) *
                C141341 +
            (C98277 * C141224 + C98278 * C139356 + (C98282 + C98281) * C141462 +
             (C98280 + C98279) * C139366) *
                C63607) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C63707 +
             (C139366 * C189 + C141462 * C362 + C139356 * C190 +
              C141224 * C363) *
                 C63607 +
             (C23065 + C23066) * C63708 + (C23067 + C23068) * C141341) *
                C89302 +
            ((C45052 + C45053) * C63707 + (C45054 + C45055) * C63607 +
             C120319 * C63708 + C120320 * C141341) *
                C141365) *
               C4148 -
           (((C47630 + C47629) * C141341 + (C47628 + C47627) * C63708 +
             (C45059 + C45058) * C63607 + (C45057 + C45056) * C63707) *
                C141365 +
            (C120321 * C141341 + C120322 * C63708 + (C45055 + C45054) * C63607 +
             (C45053 + C45052) * C63707) *
                C89302) *
               C141499) *
              C816 +
          (((C120319 * C63707 + C120320 * C63607 + (C26717 + C26716) * C63708 +
             (C26715 + C26714) * C141341) *
                C89302 +
            ((C47627 + C47628) * C63707 + (C47629 + C47630) * C63607 +
             (C139366 * C29087 + C141462 * C29089 + C139356 * C29088 +
              C141224 * C29090) *
                 C63708 +
             (C139366 * C29173 + C141462 * C29329 + C139356 * C29174 +
              C141224 * C29330) *
                 C141341) *
                C141365) *
               C141499 -
           (((C26714 + C26715) * C141341 + (C26716 + C26717) * C63708 +
             C120321 * C63607 + C120322 * C63707) *
                C141365 +
            ((C23072 + C23071) * C141341 + (C23070 + C23069) * C63708 +
             (C23068 + C23067) * C63607 + (C23066 + C23065) * C63707) *
                C89302) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
              C63973 + C63973 + C141341 * C1171) *
                 C141462 +
             (C64006 + C64007) * C141224) *
                C89302 +
            ((C82081 + C82082) * C141462 + C82067 * C141224) * C141365) *
               C4148 -
           (((C82083 + C82084) * C141224 + (C88821 + C88822) * C141462) *
                C141365 +
            (C82072 * C141224 + (C82082 + C82081) * C141462) * C89302) *
               C141499) *
              C816 +
          ((((C85405 + C85406) * C141462 + (C80788 + C80787) * C141224) *
                C89302 +
            ((C63969 * C13205 + C85397 + C85397 + C63607 * C13531 +
              C63970 * C29087 + C85398 + C85398 + C141341 * C29405) *
                 C141462 +
             (C63969 * C13206 + C85399 + C85399 + C63607 * C13532 +
              C63970 * C29088 + C85400 + C85400 + C141341 * C29406) *
                 C141224) *
                C141365) *
               C141499 -
           (((C80787 + C80788) * C141224 + (C85406 + C85405) * C141462) *
                C141365 +
            ((C64977 + C64978) * C141224 +
             (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
              C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                 C141462) *
                C89302) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C63707 +
             (C89455 * C189 + C89302 * C501 + C89456 * C1690 +
              C141365 * C2040) *
                 C63607 +
             (C98279 + C98280) * C63708 + (C98697 + C98698) * C141341) *
                C141462 +
            ((C89482 + C89483) * C63707 + (C89731 + C89732) * C63607 +
             C98267 * C63708 + C98691 * C141341) *
                C141224) *
               C4148 -
           (((C99921 + C99922) * C141341 + (C99523 + C99524) * C63708 +
             (C91684 + C91685) * C63607 + (C91336 + C91337) * C63707) *
                C141224 +
            ((C103207 + C103208) * C141341 + (C102811 + C102812) * C63708 +
             (C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
              C89302 * C2040) *
                 C63607 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C63707) *
                C141462) *
               C141499) *
              C816 +
          ((((C102812 + C102811) * C63707 + (C103208 + C103207) * C63607 +
             (C89455 * C10470 + C89302 * C10699 + C89456 * C29087 +
              C141365 * C29251) *
                 C63708 +
             (C89455 * C10595 + C89302 * C11041 + C89456 * C29173 +
              C141365 * C29487) *
                 C141341) *
                C141462 +
            ((C99524 + C99523) * C63707 + (C99922 + C99921) * C63607 +
             (C89455 * C10471 + C89302 * C10700 + C89456 * C29088 +
              C141365 * C29252) *
                 C63708 +
             (C89455 * C10596 + C89302 * C11042 + C89456 * C29174 +
              C141365 * C29488) *
                 C141341) *
                C141224) *
               C141499 -
           (((C98699 + C98700) * C141341 + (C98285 + C98286) * C63708 +
             C98696 * C63607 + C98278 * C63707) *
                C141224 +
            ((C102101 + C102102) * C141341 + (C101799 + C101800) * C63708 +
             (C98698 + C98697) * C63607 + (C98280 + C98279) * C63707) *
                C141462) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C89455 +
             (C139366 * C276 + C141462 * C579 + C139356 * C277 +
              C141224 * C580) *
                 C89302 +
             (C45052 + C45053) * C89456 + (C45400 + C45401) * C141365) *
                C63607 +
            ((C23065 + C23066) * C89455 + (C23424 + C23425) * C89302 +
             C120319 * C89456 + C120713 * C141365) *
                C141341) *
               C4148 -
           (((C47944 + C47943) * C141365 + (C47628 + C47627) * C89456 +
             C120714 * C89302 + C120322 * C89455) *
                C141341 +
            ((C45403 + C45402) * C141365 + (C45057 + C45056) * C89456 +
             (C45401 + C45400) * C89302 + (C45053 + C45052) * C89455) *
                C63607) *
               C141499) *
              C816 +
          (((C120319 * C89455 + C120713 * C89302 + (C47627 + C47628) * C89456 +
             (C47943 + C47944) * C141365) *
                C63607 +
            ((C26717 + C26716) * C89455 + (C27040 + C27039) * C89302 +
             (C139366 * C29087 + C141462 * C29089 + C139356 * C29088 +
              C141224 * C29090) *
                 C89456 +
             (C139366 * C29251 + C141462 * C29563 + C139356 * C29252 +
              C141224 * C29564) *
                 C141365) *
                C141341) *
               C141499 -
           (((C27039 + C27040) * C141365 + (C26716 + C26717) * C89456 +
             (C23427 + C23426) * C89302 + (C23070 + C23069) * C89455) *
                C141341 +
            (C120714 * C141365 + C120322 * C89456 + (C23425 + C23424) * C89302 +
             (C23066 + C23065) * C89455) *
                C63607) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C89455 +
             (C63707 * C276 + C63607 * C635 + C63708 * C1006 +
              C141341 * C1419) *
                 C89302 +
             (C81629 + C81630) * C89456 + (C82503 + C82504) * C141365) *
                C141462 +
            ((C63734 + C63735) * C89455 + (C64263 + C64264) * C89302 +
             C81617 * C89456 + C82497 * C141365) *
                C141224) *
               C4148 -
           (((C82505 + C82506) * C141365 + (C81635 + C81636) * C89456 +
             C82502 * C89302 + C81628 * C89455) *
                C141224 +
            ((C89127 + C89128) * C141365 + (C88501 + C88502) * C89456 +
             (C82504 + C82503) * C89302 + (C81630 + C81629) * C89455) *
                C141462) *
               C141499) *
              C816 +
          ((((C84983 + C84984) * C89455 + (C85809 + C85810) * C89302 +
             (C63707 * C13205 + C63607 * C13294 + C63708 * C29087 +
              C141341 * C29173) *
                 C89456 +
             (C63707 * C13374 + C63607 * C13768 + C63708 * C29251 +
              C141341 * C29639) *
                 C141365) *
                C141462 +
            ((C80372 + C80371) * C89455 + (C81192 + C81191) * C89302 +
             (C63707 * C13206 + C63607 * C13295 + C63708 * C29088 +
              C141341 * C29174) *
                 C89456 +
             (C63707 * C13375 + C63607 * C13769 + C63708 * C29252 +
              C141341 * C29640) *
                 C141365) *
                C141224) *
               C141499 -
           (((C81191 + C81192) * C141365 + (C80371 + C80372) * C89456 +
             (C65309 + C65310) * C89302 + (C64607 + C64608) * C89455) *
                C141224 +
            ((C85810 + C85809) * C141365 + (C84984 + C84983) * C89456 +
             (C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
              C63607 * C1419) *
                 C89302 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C89455) *
                C141462) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
              C89980 + C89980 + C141365 * C2283) *
                 C63607 +
             (C99115 + C99116) * C141341) *
                C141462 +
            ((C90013 + C90014) * C63607 + C99101 * C141341) * C141224) *
               C4148 -
           (((C100323 + C100324) * C141341 + (C92032 + C92033) * C63607) *
                C141224 +
            ((C103611 + C103612) * C141341 +
             (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
              C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                 C63607) *
                C141462) *
               C141499) *
              C816 +
          ((((C103612 + C103611) * C63607 +
             (C89976 * C10470 + C103603 + C103603 + C89302 * C11356 +
              C89977 * C29087 + C103604 + C103604 + C141365 * C29715) *
                 C141341) *
                C141462 +
            ((C100324 + C100323) * C63607 +
             (C89976 * C10471 + C103605 + C103605 + C89302 * C11357 +
              C89977 * C29088 + C103606 + C103606 + C141365 * C29716) *
                 C141341) *
                C141224) *
               C141499 -
           (((C99117 + C99118) * C141341 + C99106 * C63607) * C141224 +
            ((C102409 + C102410) * C141341 + (C99116 + C99115) * C63607) *
                C141462) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
             C21828 + C21828 + C141224 * C121) *
                C89302 +
            (C44678 + C44679) * C141365) *
               C63607 +
           ((C22691 + C22692) * C89302 + C119927 * C141365) * C141341) *
              C5322 -
          (((C47305 + C47304) * C141365 + C119928 * C89302) * C141341 +
           ((C44681 + C44680) * C141365 + (C44679 + C44678) * C89302) *
               C63607) *
              C5323 +
          ((C49996 * C89302 + (C50008 + C50007) * C141365) * C63607 +
           ((C47304 + C47305) * C89302 +
            (C21822 * C42109 + C47298 + C47298 + C141462 * C42113 +
             C21824 * C47290 + C47299 + C47299 + C141224 * C47292) *
                C141365) *
               C141341) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C139366 +
            (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                C141462 +
            (C63734 + C63735) * C139356 + (C63736 + C63737) * C141224) *
               C89302 +
           ((C81629 + C81630) * C139366 + (C81631 + C81632) * C141462 +
            C81617 * C139356 + C81618 * C141224) *
               C141365) *
              C5322 -
          (((C81633 + C81634) * C141224 + (C81635 + C81636) * C139356 +
            (C88499 + C88500) * C141462 + (C88501 + C88502) * C139366) *
               C141365 +
           (C81627 * C141224 + C81628 * C139356 + (C81632 + C81631) * C141462 +
            (C81630 + C81629) * C139366) *
               C89302) *
              C5323 +
          (((C88502 + C88501) * C139366 + (C88500 + C88499) * C141462 +
            (C81636 + C81635) * C139356 + (C81634 + C81633) * C141224) *
               C89302 +
           ((C63707 * C21035 + C63607 * C21136 + C63708 * C42109 +
             C141341 * C42197) *
                C139366 +
            (C63707 * C21038 + C63607 * C21139 + C63708 * C42111 +
             C141341 * C42199) *
                C141462 +
            (C63707 * C21036 + C63607 * C21137 + C63708 * C47290 +
             C141341 * C47403) *
                C139356 +
            (C63707 * C21039 + C63607 * C21140 + C63708 * C47291 +
             C141341 * C47404) *
                C141224) *
               C141365) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C139366 +
            (C89455 * C114 + C89302 * C282 + C89456 * C1606 + C141365 * C1789) *
                C141462 +
            (C89482 + C89483) * C139356 + (C89484 + C89485) * C141224) *
               C63607 +
           ((C98279 + C98280) * C139366 + (C98281 + C98282) * C141462 +
            C98267 * C139356 + C98268 * C141224) *
               C141341) *
              C5322 -
          (((C99521 + C99522) * C141224 + (C99523 + C99524) * C139356 +
            (C102809 + C102810) * C141462 + (C102811 + C102812) * C139366) *
               C141341 +
           ((C91334 + C91335) * C141224 + (C91336 + C91337) * C139356 +
            (C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
             C89302 * C1789) *
                C141462 +
            (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
             C89302 * C1784) *
                C139366) *
               C63607) *
              C5323 +
          (((C89455 * C5325 + C89302 * C5449 + C89456 * C21035 +
             C141365 * C21228) *
                C139366 +
            (C89455 * C5329 + C89302 * C5453 + C89456 * C21038 +
             C141365 * C21231) *
                C141462 +
            (C89455 * C5326 + C89302 * C5450 + C89456 * C21036 +
             C141365 * C21229) *
                C139356 +
            (C89455 * C5330 + C89302 * C5454 + C89456 * C21039 +
             C141365 * C21232) *
                C141224) *
               C63607 +
           ((C89455 * C13205 + C89302 * C13374 + C89456 * C42109 +
             C141365 * C42293) *
                C139366 +
            (C89455 * C13208 + C89302 * C13377 + C89456 * C42111 +
             C141365 * C42295) *
                C141462 +
            (C89455 * C13206 + C89302 * C13375 + C89456 * C47290 +
             C141365 * C47517) *
                C139356 +
            (C89455 * C13209 + C89302 * C13378 + C89456 * C47291 +
             C141365 * C47518) *
                C141224) *
               C141341) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C63707 +
            (C139366 * C189 + C141462 * C362 + C139356 * C190 +
             C141224 * C363) *
                C63607 +
            (C23065 + C23066) * C63708 + (C23067 + C23068) * C141341) *
               C89302 +
           ((C45052 + C45053) * C63707 + (C45054 + C45055) * C63607 +
            C120319 * C63708 + C120320 * C141341) *
               C141365) *
              C5322 -
          (((C47630 + C47629) * C141341 + (C47628 + C47627) * C63708 +
            (C45059 + C45058) * C63607 + (C45057 + C45056) * C63707) *
               C141365 +
           (C120321 * C141341 + C120322 * C63708 + (C45055 + C45054) * C63607 +
            (C45053 + C45052) * C63707) *
               C89302) *
              C5323 +
          ((C50254 * C63707 + C50255 * C63607 + (C47627 + C47628) * C63708 +
            (C47629 + C47630) * C141341) *
               C89302 +
           ((C50269 + C50268) * C63707 + (C50267 + C50266) * C63607 +
            (C139366 * C42109 + C141462 * C42111 + C139356 * C47290 +
             C141224 * C47291) *
                C63708 +
            (C139366 * C42197 + C141462 * C42371 + C139356 * C47403 +
             C141224 * C47617) *
                C141341) *
               C141365) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
             C63973 + C63973 + C141341 * C1171) *
                C141462 +
            (C64006 + C64007) * C141224) *
               C89302 +
           ((C82081 + C82082) * C141462 + C82067 * C141224) * C141365) *
              C5322 -
          (((C82083 + C82084) * C141224 + (C88821 + C88822) * C141462) *
               C141365 +
           (C82072 * C141224 + (C82082 + C82081) * C141462) * C89302) *
              C5323 +
          (((C88822 + C88821) * C141462 + (C82084 + C82083) * C141224) *
               C89302 +
           ((C63969 * C21035 + C88813 + C88813 + C63607 * C21403 +
             C63970 * C42109 + C88814 + C88814 + C141341 * C42459) *
                C141462 +
            (C63969 * C21036 + C88815 + C88815 + C63607 * C21404 +
             C63970 * C47290 + C88816 + C88816 + C141341 * C47728) *
                C141224) *
               C141365) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C63707 +
            (C89455 * C189 + C89302 * C501 + C89456 * C1690 + C141365 * C2040) *
                C63607 +
            (C98279 + C98280) * C63708 + (C98697 + C98698) * C141341) *
               C141462 +
           ((C89482 + C89483) * C63707 + (C89731 + C89732) * C63607 +
            C98267 * C63708 + C98691 * C141341) *
               C141224) *
              C5322 -
          (((C99921 + C99922) * C141341 + (C99523 + C99524) * C63708 +
            (C91684 + C91685) * C63607 + (C91336 + C91337) * C63707) *
               C141224 +
           ((C103207 + C103208) * C141341 + (C102811 + C102812) * C63708 +
            (C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
             C89302 * C2040) *
                C63607 +
            (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
             C89302 * C1784) *
                C63707) *
               C141462) *
              C5323 +
          (((C89455 * C5325 + C89302 * C5449 + C89456 * C21035 +
             C141365 * C21228) *
                C63707 +
            (C89455 * C5391 + C89302 * C5619 + C89456 * C21136 +
             C141365 * C21491) *
                C63607 +
            (C89455 * C13205 + C89302 * C13374 + C89456 * C42109 +
             C141365 * C42293) *
                C63708 +
            (C89455 * C13294 + C89302 * C13614 + C89456 * C42197 +
             C141365 * C42553) *
                C141341) *
               C141462 +
           ((C89455 * C5326 + C89302 * C5450 + C89456 * C21036 +
             C141365 * C21229) *
                C63707 +
            (C89455 * C5392 + C89302 * C5620 + C89456 * C21137 +
             C141365 * C21492) *
                C63607 +
            (C89455 * C13206 + C89302 * C13375 + C89456 * C47290 +
             C141365 * C47517) *
                C63708 +
            (C89455 * C13295 + C89302 * C13615 + C89456 * C47403 +
             C141365 * C47838) *
                C141341) *
               C141224) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C89455 +
            (C139366 * C276 + C141462 * C579 + C139356 * C277 +
             C141224 * C580) *
                C89302 +
            (C45052 + C45053) * C89456 + (C45400 + C45401) * C141365) *
               C63607 +
           ((C23065 + C23066) * C89455 + (C23424 + C23425) * C89302 +
            C120319 * C89456 + C120713 * C141365) *
               C141341) *
              C5322 -
          (((C47944 + C47943) * C141365 + (C47628 + C47627) * C89456 +
            C120714 * C89302 + C120322 * C89455) *
               C141341 +
           ((C45403 + C45402) * C141365 + (C45057 + C45056) * C89456 +
            (C45401 + C45400) * C89302 + (C45053 + C45052) * C89455) *
               C63607) *
              C5323 +
          ((C50254 * C89455 + C50509 * C89302 + (C50269 + C50268) * C89456 +
            (C50515 + C50514) * C141365) *
               C63607 +
           ((C47627 + C47628) * C89455 + (C47943 + C47944) * C89302 +
            (C139366 * C42109 + C141462 * C42111 + C139356 * C47290 +
             C141224 * C47291) *
                C89456 +
            (C139366 * C42293 + C141462 * C42629 + C139356 * C47517 +
             C141224 * C47937) *
                C141365) *
               C141341) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C89455 +
            (C63707 * C276 + C63607 * C635 + C63708 * C1006 + C141341 * C1419) *
                C89302 +
            (C81629 + C81630) * C89456 + (C82503 + C82504) * C141365) *
               C141462 +
           ((C63734 + C63735) * C89455 + (C64263 + C64264) * C89302 +
            C81617 * C89456 + C82497 * C141365) *
               C141224) *
              C5322 -
          (((C82505 + C82506) * C141365 + (C81635 + C81636) * C89456 +
            C82502 * C89302 + C81628 * C89455) *
               C141224 +
           ((C89127 + C89128) * C141365 + (C88501 + C88502) * C89456 +
            (C82504 + C82503) * C89302 + (C81630 + C81629) * C89455) *
               C141462) *
              C5323 +
          (((C88502 + C88501) * C89455 + (C89128 + C89127) * C89302 +
            (C63707 * C21035 + C63607 * C21136 + C63708 * C42109 +
             C141341 * C42197) *
                C89456 +
            (C63707 * C21228 + C63607 * C21654 + C63708 * C42293 +
             C141341 * C42708) *
                C141365) *
               C141462 +
           ((C81636 + C81635) * C89455 + (C82506 + C82505) * C89302 +
            (C63707 * C21036 + C63607 * C21137 + C63708 * C47290 +
             C141341 * C47403) *
                C89456 +
            (C63707 * C21229 + C63607 * C21655 + C63708 * C47517 +
             C141341 * C48042) *
                C141365) *
               C141224) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
             C89980 + C89980 + C141365 * C2283) *
                C63607 +
            (C99115 + C99116) * C141341) *
               C141462 +
           ((C90013 + C90014) * C63607 + C99101 * C141341) * C141224) *
              C5322 -
          (((C100323 + C100324) * C141341 + (C92032 + C92033) * C63607) *
               C141224 +
           ((C103611 + C103612) * C141341 +
            (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
             C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                C63607) *
               C141462) *
              C5323 +
          (((C89976 * C5325 + C96969 + C96969 + C89302 * C5781 +
             C89977 * C21035 + C96970 + C96970 + C141365 * C21734) *
                C63607 +
            (C89976 * C13205 + C106835 + C106835 + C89302 * C13845 +
             C89977 * C42109 + C106836 + C106836 + C141365 * C42793) *
                C141341) *
               C141462 +
           ((C89976 * C5326 + C96971 + C96971 + C89302 * C5782 +
             C89977 * C21036 + C96972 + C96972 + C141365 * C21735) *
                C63607 +
            (C89976 * C13206 + C106837 + C106837 + C89302 * C13846 +
             C89977 * C47290 + C106838 + C106838 + C141365 * C48144) *
                C141341) *
               C141224) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C89302 +
            C36781 * C141365) *
               C141507 +
           (C30301 * C89302 + C32721 * C141365) * C141502 +
           (C30302 * C89302 + C32720 * C141365) * C71446) *
              C141298 * C141281 * C97 -
          ((C35763 * C141365 + C30305 * C89302) * C71446 +
           (C35762 * C141365 + C30304 * C89302) * C141502 +
           (C36782 * C141365 +
            (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C89302) *
               C141507) *
              C141298 * C141281 * C98 +
          (((C29774 * C110 + C29785 + C29785 + C141219 * C122) * C89302 +
            (C29774 * C1599 + C35055 + C35055 + C141219 * C1609) * C141365) *
               C141507 +
           ((C29774 * C821 + C29786 + C29786 + C141219 * C831) * C89302 +
            (C29774 * C3492 + C35056 + C35056 + C141219 * C3500) * C141365) *
               C141502 +
           ((C29774 * C2962 + C29787 + C29787 + C141219 * C2970) * C89302 +
            (C29774 * C10472 + C35057 + C35057 + C141219 * C10478) * C141365) *
               C71446) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[36] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                       C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                          C29775 +
                      (C71543 * C114 + C141507 * C195 + C71544 * C828 +
                       C141502 * C917 + C71545 * C2964 + C71446 * C3030) *
                          C141219) *
                         C89302 +
                     ((C71543 * C1601 + C141507 * C1690 + C71544 * C3490 +
                       C141502 * C3572 + C71545 * C10470 + C71446 * C10595) *
                          C29775 +
                      (C71543 * C1606 + C141507 * C1695 + C71544 * C3494 +
                       C141502 * C3576 + C71545 * C10473 + C71446 * C10598) *
                          C141219) *
                         C141365) *
                        C141298 * C141281 * C97 -
                    (((C73476 + C73477 + C73478) * C141219 +
                      (C73479 + C73480 + C73481) * C29775) *
                         C141365 +
                     ((C71576 + C71575 + C71574) * C141219 +
                      (C71573 + C71572 + C71571) * C29775) *
                         C89302) *
                        C141298 * C141281 * C98 +
                    (((C71582 + C71581 + C71580) * C29775 +
                      (C71579 + C71578 + C71577) * C141219) *
                         C89302 +
                     ((C71543 * C1599 + C141507 * C1688 + C71544 * C3492 +
                       C141502 * C3574 + C71545 * C10472 + C71446 * C10597) *
                          C29775 +
                      (C71543 * C1604 + C141507 * C1693 + C71544 * C3496 +
                       C141502 * C3578 + C71545 * C10475 + C71446 * C10600) *
                          C141219) *
                         C141365) *
                        C141298 * C141281 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C29775 +
            (C89455 * C114 + C89302 * C282 + C89456 * C1606 + C141365 * C1789) *
                C141219) *
               C141507 +
           ((C98279 + C98280) * C29775 + (C98281 + C98282) * C141219) *
               C141502 +
           ((C101800 + C101799) * C29775 + (C101798 + C101797) * C141219) *
               C71446) *
              C141298 * C141281 * C97 -
          (((C98283 + C98284) * C141219 + (C98285 + C98286) * C29775) * C71446 +
           (C98277 * C141219 + C98278 * C29775) * C141502 +
           ((C89485 + C89484) * C141219 + (C89483 + C89482) * C29775) *
               C141507) *
              C141298 * C141281 * C98 +
          ((C89494 * C29775 + C89495 * C141219) * C141507 +
           ((C90334 + C90333) * C29775 + (C90332 + C90331) * C141219) *
               C141502 +
           ((C89455 * C2962 + C89302 * C3086 + C89456 * C10472 +
             C141365 * C10701) *
                C29775 +
            (C89455 * C2966 + C89302 * C3090 + C89456 * C10475 +
             C141365 * C10704) *
                C141219) *
               C71446) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C71543 +
            (C29775 * C189 + C141219 * C362) * C141507 + C30547 * C71544 +
            C30548 * C141502 + C30549 * C71545 + C30550 * C71446) *
               C89302 +
           (C37111 * C71543 + C37112 * C141507 + C32957 * C71544 +
            C32956 * C141502 + C32955 * C71545 + C32954 * C71446) *
               C141365) *
              C141298 * C141281 * C97 -
          ((C36107 * C71446 + C36106 * C71545 + C36105 * C141502 +
            C36104 * C71544 + C37114 * C141507 + C37113 * C71543) *
               C141365 +
           (C30556 * C71446 + C30555 * C71545 + C30554 * C141502 +
            C30553 * C71544 + (C29775 * C190 + C141219 * C363) * C141507 +
            (C29775 * C109 + C141219 * C115) * C71543) *
               C89302) *
              C141298 * C141281 * C98 +
          (((C29775 * C110 + C141219 * C116) * C71543 +
            (C29775 * C191 + C141219 * C364) * C141507 +
            (C29775 * C821 + C141219 * C826) * C71544 +
            (C29775 * C910 + C141219 * C1098) * C141502 +
            (C29775 * C2962 + C141219 * C2966) * C71545 +
            (C29775 * C3028 + C141219 * C3144) * C71446) *
               C89302 +
           ((C29775 * C1599 + C141219 * C1604) * C71543 +
            (C29775 * C1688 + C141219 * C1876) * C141507 +
            (C29775 * C3492 + C141219 * C3496) * C71544 +
            (C29775 * C3574 + C141219 * C3722) * C141502 +
            (C29775 * C10472 + C141219 * C10475) * C71545 +
            (C29775 * C10597 + C141219 * C10817) * C71446) *
               C141365) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[36] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C71804 * C108 + C71808 + C71808 + C141507 * C419 +
                      C71805 * C823 + C71809 + C71809 + C141502 * C1171 +
                      C71806 * C2960 + C71810 + C71810 + C71446 * C3196) *
                         C141219 * C89302 +
                     (C71804 * C1601 + C73787 + C73787 + C141507 * C1949 +
                      C71805 * C3490 + C73786 + C73786 + C141502 * C3790 +
                      C71806 * C10470 + C73785 + C73785 + C71446 * C10934) *
                         C141219 * C141365) *
                        C141298 * C141281 * C97 -
                    ((C73797 + C73798 + C73799) * C141219 * C141365 +
                     (C71846 + C71845 + C71844) * C141219 * C89302) *
                        C141298 * C141281 * C98 +
                    ((C71849 + C71848 + C71847) * C141219 * C89302 +
                     (C71804 * C1599 + C73788 + C73788 + C141507 * C1947 +
                      C71805 * C3492 + C73789 + C73789 + C141502 * C3792 +
                      C71806 * C10472 + C73790 + C73790 + C71446 * C10936) *
                         C141219 * C141365) *
                        C141298 * C141281 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
               C71543 +
           (C89455 * C189 + C89302 * C501 + C89456 * C1690 + C141365 * C2040) *
               C141507 +
           (C98279 + C98280) * C71544 + (C98697 + C98698) * C141502 +
           (C101800 + C101799) * C71545 + (C102102 + C102101) * C71446) *
              C141219 * C141298 * C141281 * C97 -
          ((C98699 + C98700) * C71446 + (C98285 + C98286) * C71545 +
           C98696 * C141502 + C98278 * C71544 + (C89732 + C89731) * C141507 +
           (C89483 + C89482) * C71543) *
              C141219 * C141298 * C141281 * C98 +
          (C89494 * C71543 + C89737 * C141507 + (C90334 + C90333) * C71544 +
           (C90642 + C90641) * C141502 +
           (C89455 * C2962 + C89302 * C3086 + C89456 * C10472 +
            C141365 * C10701) *
               C71545 +
           (C89455 * C3028 + C89302 * C3256 + C89456 * C10597 +
            C141365 * C11043) *
               C71446) *
              C141219 * C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezx[36] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C29775 * C108 + C141219 * C114) * C89455 +
                      (C29775 * C276 + C141219 * C579) * C89302 +
                      C37111 * C89456 + C37432 * C141365) *
                         C141507 +
                     (C30547 * C89455 + C30783 * C89302 + C32957 * C89456 +
                      C33177 * C141365) *
                         C141502 +
                     (C30549 * C89455 + C30784 * C89302 + C32955 * C89456 +
                      C33176 * C141365) *
                         C71446) *
                        C141298 * C141281 * C97 -
                    ((C36439 * C141365 + C36106 * C89456 + C30787 * C89302 +
                      C30555 * C89455) *
                         C71446 +
                     (C36438 * C141365 + C36104 * C89456 + C30786 * C89302 +
                      C30553 * C89455) *
                         C141502 +
                     (C37433 * C141365 + C37113 * C89456 +
                      (C29775 * C277 + C141219 * C580) * C89302 +
                      (C29775 * C109 + C141219 * C115) * C89455) *
                         C141507) *
                        C141298 * C141281 * C98 +
                    (((C29775 * C110 + C141219 * C116) * C89455 +
                      (C29775 * C278 + C141219 * C581) * C89302 +
                      (C29775 * C1599 + C141219 * C1604) * C89456 +
                      (C29775 * C1782 + C141219 * C2124) * C141365) *
                         C141507 +
                     ((C29775 * C821 + C141219 * C826) * C89455 +
                      (C29775 * C1004 + C141219 * C1346) * C89302 +
                      (C29775 * C3492 + C141219 * C3496) * C89456 +
                      (C29775 * C3648 + C141219 * C3936) * C141365) *
                         C141502 +
                     ((C29775 * C2962 + C141219 * C2966) * C89455 +
                      (C29775 * C3086 + C141219 * C3310) * C89302 +
                      (C29775 * C10472 + C141219 * C10475) * C89456 +
                      (C29775 * C10701 + C141219 * C11147) * C141365) *
                         C71446) *
                        C141298 * C141281 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[36] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                      C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                         C89455 +
                     (C71543 * C276 + C141507 * C635 + C71544 * C1006 +
                      C141502 * C1419 + C71545 * C3084 + C71446 * C3362) *
                         C89302 +
                     (C71543 * C1601 + C141507 * C1690 + C71544 * C3490 +
                      C141502 * C3572 + C71545 * C10470 + C71446 * C10595) *
                         C89456 +
                     (C71543 * C1784 + C141507 * C2197 + C71544 * C3646 +
                      C141502 * C4004 + C71545 * C10699 + C71446 * C11255) *
                         C141365) *
                        C141219 * C141298 * C141281 * C97 -
                    ((C74106 + C74107 + C74108) * C141365 +
                     (C73479 + C73480 + C73481) * C89456 +
                     (C72098 + C72097 + C72096) * C89302 +
                     (C71573 + C71572 + C71571) * C89455) *
                        C141219 * C141298 * C141281 * C98 +
                    ((C71582 + C71581 + C71580) * C89455 +
                     (C72101 + C72100 + C72099) * C89302 +
                     (C71543 * C1599 + C141507 * C1688 + C71544 * C3492 +
                      C141502 * C3574 + C71545 * C10472 + C71446 * C10597) *
                         C89456 +
                     (C71543 * C1782 + C141507 * C2195 + C71544 * C3648 +
                      C141502 * C4006 + C71545 * C10701 + C71446 * C11257) *
                         C141365) *
                        C141219 * C141298 * C141281 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
            C89980 + C89980 + C141365 * C2283) *
               C141507 +
           (C99115 + C99116) * C141502 + (C102410 + C102409) * C71446) *
              C141219 * C141298 * C141281 * C97 -
          ((C99117 + C99118) * C71446 + C99106 * C141502 +
           (C90014 + C90013) * C141507) *
              C141219 * C141298 * C141281 * C98 +
          (C90019 * C141507 + (C90972 + C90971) * C141502 +
           (C89976 * C2962 + C93586 + C93586 + C89302 * C3418 +
            C89977 * C10472 + C93587 + C93587 + C141365 * C11358) *
               C71446) *
              C141219 * C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexx[37] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C89302 +
             C36781 * C141365) *
                C141507 +
            (C124961 + C124962) * C141502 + (C124963 + C124964) * C71446) *
               C141298 * C816 -
           ((C32719 * C141365 + C30303 * C89302) * C71446 +
            (C124964 + C124963) * C141502 + (C124962 + C124961) * C141507) *
               C141298 * C141497) *
              C818 +
          (((C124965 + C124966) * C141507 + (C124967 + C124968) * C141502 +
            (C30306 * C89302 +
             (C29774 * C26352 + C31000 + C31000 + C141219 * C26356) * C141365) *
                C71446) *
               C141298 * C141497 -
           ((C124968 + C124967) * C71446 + (C124966 + C124965) * C141502 +
            (C36782 * C141365 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C89302) *
                C141507) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[37] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                        C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                           C29775 +
                       (C71543 * C114 + C141507 * C195 + C71544 * C828 +
                        C141502 * C917 + C71545 * C2964 + C71446 * C3030) *
                           C141219) *
                          C89302 +
                      ((C71543 * C1601 + C141507 * C1690 + C71544 * C3490 +
                        C141502 * C3572 + C71545 * C10470 + C71446 * C10595) *
                           C29775 +
                       (C71543 * C1606 + C141507 * C1695 + C71544 * C3494 +
                        C141502 * C3576 + C71545 * C10473 + C71446 * C10598) *
                           C141219) *
                          C141365) *
                         C141298 * C816 -
                     (((C71545 * C26353 + C71446 * C26479 + C71544 * C10473 +
                        C141502 * C10598 + C71543 * C3494 + C141507 * C3576) *
                           C141219 +
                       (C71545 * C26351 + C71446 * C26477 + C71544 * C10470 +
                        C141502 * C10595 + C71543 * C3490 + C141507 * C3572) *
                           C29775) *
                          C141365 +
                      ((C71545 * C9670 + C71446 * C9771 + C71544 * C2964 +
                        C141502 * C3030 + C71543 * C828 + C141507 * C917) *
                           C141219 +
                       (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                        C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                           C29775) *
                          C89302) *
                         C141298 * C141497) *
                        C818 +
                    ((((C72439 + C72438 + C72437) * C29775 +
                       (C72436 + C72435 + C72434) * C141219) *
                          C89302 +
                      ((C71543 * C3491 + C141507 * C3573 + C71544 * C10471 +
                        C141502 * C10596 + C71545 * C26352 + C71446 * C26478) *
                           C29775 +
                       (C71543 * C3495 + C141507 * C3577 + C71544 * C10474 +
                        C141502 * C10599 + C71545 * C26354 + C71446 * C26480) *
                           C141219) *
                          C141365) *
                         C141298 * C141497 -
                     (((C73476 + C73477 + C73478) * C141219 +
                       (C73479 + C73480 + C73481) * C29775) *
                          C141365 +
                      ((C71576 + C71575 + C71574) * C141219 +
                       (C71573 + C71572 + C71571) * C29775) *
                          C89302) *
                         C141298 * C816) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[37] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C29775 +
             (C89455 * C114 + C89302 * C282 + C89456 * C1606 +
              C141365 * C1789) *
                 C141219) *
                C141507 +
            ((C98279 + C98280) * C29775 + (C98281 + C98282) * C141219) *
                C141502 +
            ((C101800 + C101799) * C29775 + (C101798 + C101797) * C141219) *
                C71446) *
               C141298 * C816 -
           (((C89456 * C26353 + C141365 * C26581 + C89455 * C9670 +
              C89302 * C9851) *
                 C141219 +
             (C89456 * C26351 + C141365 * C26579 + C89455 * C9667 +
              C89302 * C9848) *
                 C29775) *
                C71446 +
            ((C101797 + C101798) * C141219 + (C101799 + C101800) * C29775) *
                C141502 +
            ((C98282 + C98281) * C141219 + (C98280 + C98279) * C29775) *
                C141507) *
               C141298 * C141497) *
              C818 +
          (((C98267 * C29775 + C98268 * C141219) * C141507 +
            ((C98286 + C98285) * C29775 + (C98284 + C98283) * C141219) *
                C141502 +
            ((C89455 * C9668 + C89302 * C9849 + C89456 * C26352 +
              C141365 * C26580) *
                 C29775 +
             (C89455 * C9671 + C89302 * C9852 + C89456 * C26354 +
              C141365 * C26582) *
                 C141219) *
                C71446) *
               C141298 * C141497 -
           (((C98283 + C98284) * C141219 + (C98285 + C98286) * C29775) *
                C71446 +
            (C98277 * C141219 + C98278 * C29775) * C141502 +
            ((C89485 + C89484) * C141219 + (C89483 + C89482) * C29775) *
                C141507) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[37] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C71543 +
             (C29775 * C189 + C141219 * C362) * C141507 + C30547 * C71544 +
             C30548 * C141502 + C30549 * C71545 + C30550 * C71446) *
                C89302 +
            (C37111 * C71543 + C37112 * C141507 + C32957 * C71544 +
             C32956 * C141502 + C32955 * C71545 + C32954 * C71446) *
                C141365) *
               C141298 * C816 -
           ((C32952 * C71446 + C32953 * C71545 + C32954 * C141502 +
             C32955 * C71544 + C32956 * C141507 + C32957 * C71543) *
                C141365 +
            (C30552 * C71446 + C30551 * C71545 + C30550 * C141502 +
             C30549 * C71544 + C30548 * C141507 + C30547 * C71543) *
                C89302) *
               C141298 * C141497) *
              C818 +
          (((C30553 * C71543 + C30554 * C141507 + C30555 * C71544 +
             C30556 * C141502 + C30557 * C71545 + C30558 * C71446) *
                C89302 +
            (C36104 * C71543 + C36105 * C141507 + C36106 * C71544 +
             C36107 * C141502 + (C29775 * C26352 + C141219 * C26354) * C71545 +
             (C29775 * C26478 + C141219 * C26696) * C71446) *
                C141365) *
               C141298 * C141497 -
           ((C36107 * C71446 + C36106 * C71545 + C36105 * C141502 +
             C36104 * C71544 + C37114 * C141507 + C37113 * C71543) *
                C141365 +
            (C30556 * C71446 + C30555 * C71545 + C30554 * C141502 +
             C30553 * C71544 + (C29775 * C190 + C141219 * C363) * C141507 +
             (C29775 * C109 + C141219 * C115) * C71543) *
                C89302) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[37] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71804 * C108 + C71808 + C71808 + C141507 * C419 +
                       C71805 * C823 + C71809 + C71809 + C141502 * C1171 +
                       C71806 * C2960 + C71810 + C71810 + C71446 * C3196) *
                          C141219 * C89302 +
                      (C71804 * C1601 + C73787 + C73787 + C141507 * C1949 +
                       C71805 * C3490 + C73786 + C73786 + C141502 * C3790 +
                       C71806 * C10470 + C73785 + C73785 + C71446 * C10934) *
                          C141219 * C141365) *
                         C141298 * C816 -
                     ((C71806 * C26351 + C76355 + C76355 + C71446 * C26819 +
                       C71805 * C10470 + C76354 + C76354 + C141502 * C10934 +
                       C71804 * C3490 + C76353 + C76353 + C141507 * C3790) *
                          C141219 * C141365 +
                      (C71806 * C9667 + C72807 + C72807 + C71446 * C10035 +
                       C71805 * C2960 + C72808 + C72808 + C141502 * C3196 +
                       C71804 * C823 + C72809 + C72809 + C141507 * C1171) *
                          C141219 * C89302) *
                         C141298 * C141497) *
                        C818 +
                    (((C72821 + C72820 + C72819) * C141219 * C89302 +
                      (C71804 * C3491 + C76356 + C76356 + C141507 * C3791 +
                       C71805 * C10471 + C76357 + C76357 + C141502 * C10935 +
                       C71806 * C26352 + C76358 + C76358 + C71446 * C26820) *
                          C141219 * C141365) *
                         C141298 * C141497 -
                     ((C73797 + C73798 + C73799) * C141219 * C141365 +
                      (C71846 + C71845 + C71844) * C141219 * C89302) *
                         C141298 * C816) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[37] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C71543 +
            (C89455 * C189 + C89302 * C501 + C89456 * C1690 + C141365 * C2040) *
                C141507 +
            (C98279 + C98280) * C71544 + (C98697 + C98698) * C141502 +
            (C101800 + C101799) * C71545 + (C102102 + C102101) * C71446) *
               C141219 * C141298 * C816 -
           ((C89456 * C26477 + C141365 * C26925 + C89455 * C9768 +
             C89302 * C10118) *
                C71446 +
            (C89456 * C26351 + C141365 * C26579 + C89455 * C9667 +
             C89302 * C9848) *
                C71545 +
            (C102101 + C102102) * C141502 + (C101799 + C101800) * C71544 +
            (C98698 + C98697) * C141507 + (C98280 + C98279) * C71543) *
               C141219 * C141298 * C141497) *
              C818 +
          ((C98267 * C71543 + C98691 * C141507 + (C98286 + C98285) * C71544 +
            (C98700 + C98699) * C141502 +
            (C89455 * C9668 + C89302 * C9849 + C89456 * C26352 +
             C141365 * C26580) *
                C71545 +
            (C89455 * C9769 + C89302 * C10119 + C89456 * C26478 +
             C141365 * C26926) *
                C71446) *
               C141219 * C141298 * C141497 -
           ((C98699 + C98700) * C71446 + (C98285 + C98286) * C71545 +
            C98696 * C141502 + C98278 * C71544 + (C89732 + C89731) * C141507 +
            (C89483 + C89482) * C71543) *
               C141219 * C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[37] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C89455 +
                       (C29775 * C276 + C141219 * C579) * C89302 +
                       C37111 * C89456 + C37432 * C141365) *
                          C141507 +
                      (C125557 + C125558 + C125559 + C125560) * C141502 +
                      (C125561 + C125562 + C125563 + C125564) * C71446) *
                         C141298 * C816 -
                     ((C33175 * C141365 + C32953 * C89456 + C30785 * C89302 +
                       C30551 * C89455) *
                          C71446 +
                      (C125564 + C125563 + C125562 + C125561) * C141502 +
                      (C125560 + C125559 + C125558 + C125557) * C141507) *
                         C141298 * C141497) *
                        C818 +
                    (((C125565 + C125566 + C125567 + C125568) * C141507 +
                      (C125569 + C125570 + C125571 + C125572) * C141502 +
                      (C30557 * C89455 + C30788 * C89302 +
                       (C29775 * C26352 + C141219 * C26354) * C89456 +
                       (C29775 * C26580 + C141219 * C27029) * C141365) *
                          C71446) *
                         C141298 * C141497 -
                     ((C125572 + C125571 + C125570 + C125569) * C71446 +
                      (C125568 + C125567 + C125566 + C125565) * C141502 +
                      (C37433 * C141365 + C37113 * C89456 +
                       (C29775 * C277 + C141219 * C580) * C89302 +
                       (C29775 * C109 + C141219 * C115) * C89455) *
                          C141507) *
                         C141298 * C816) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[37] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                       C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                          C89455 +
                      (C71543 * C276 + C141507 * C635 + C71544 * C1006 +
                       C141502 * C1419 + C71545 * C3084 + C71446 * C3362) *
                          C89302 +
                      (C71543 * C1601 + C141507 * C1690 + C71544 * C3490 +
                       C141502 * C3572 + C71545 * C10470 + C71446 * C10595) *
                          C89456 +
                      (C71543 * C1784 + C141507 * C2197 + C71544 * C3646 +
                       C141502 * C4004 + C71545 * C10699 + C71446 * C11255) *
                          C141365) *
                         C141219 * C141298 * C816 -
                     ((C71545 * C26579 + C71446 * C27140 + C71544 * C10699 +
                       C141502 * C11255 + C71543 * C3646 + C141507 * C4004) *
                          C141365 +
                      (C71545 * C26351 + C71446 * C26477 + C71544 * C10470 +
                       C141502 * C10595 + C71543 * C3490 + C141507 * C3572) *
                          C89456 +
                      (C71545 * C9848 + C71446 * C10284 + C71544 * C3084 +
                       C141502 * C3362 + C71543 * C1006 + C141507 * C1419) *
                          C89302 +
                      (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                       C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                          C89455) *
                         C141219 * C141298 * C141497) *
                        C818 +
                    (((C72439 + C72438 + C72437) * C89455 +
                      (C73154 + C73153 + C73152) * C89302 +
                      (C71543 * C3491 + C141507 * C3573 + C71544 * C10471 +
                       C141502 * C10596 + C71545 * C26352 + C71446 * C26478) *
                          C89456 +
                      (C71543 * C3647 + C141507 * C4005 + C71544 * C10700 +
                       C141502 * C11256 + C71545 * C26580 + C71446 * C27141) *
                          C141365) *
                         C141219 * C141298 * C141497 -
                     ((C74106 + C74107 + C74108) * C141365 +
                      (C73479 + C73480 + C73481) * C89456 +
                      (C72098 + C72097 + C72096) * C89302 +
                      (C71573 + C71572 + C71571) * C89455) *
                         C141219 * C141298 * C816) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[37] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
             C89980 + C89980 + C141365 * C2283) *
                C141507 +
            (C99115 + C99116) * C141502 + (C102410 + C102409) * C71446) *
               C141219 * C141298 * C816 -
           ((C89977 * C26351 + C102402 + C102402 + C141365 * C27240 +
             C89976 * C9667 + C102401 + C102401 + C89302 * C10361) *
                C71446 +
            (C102409 + C102410) * C141502 + (C99116 + C99115) * C141507) *
               C141219 * C141298 * C141497) *
              C818 +
          ((C99101 * C141507 + (C99118 + C99117) * C141502 +
            (C89976 * C9668 + C102403 + C102403 + C89302 * C10362 +
             C89977 * C26352 + C102404 + C102404 + C141365 * C27241) *
                C71446) *
               C141219 * C141298 * C141497 -
           ((C99117 + C99118) * C71446 + C99106 * C141502 +
            (C90014 + C90013) * C141507) *
               C141219 * C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C89302 +
             C36781 * C141365) *
                C141507 +
            (C124961 + C124962) * C141502 + (C124963 + C124964) * C71446) *
               C1596 -
           ((C39349 * C141365 + C32720 * C89302) * C71446 +
            (C39350 * C141365 + C32721 * C89302) * C141502 +
            (C42123 * C141365 + C36781 * C89302) * C141507) *
               C141499) *
              C141281 * C818 +
          (((C36782 * C89302 + C52409 * C141365) * C141507 +
            (C35762 * C89302 + C51452 * C141365) * C141502 +
            (C35763 * C89302 +
             (C29774 * C29088 + C36776 + C36776 + C141219 * C29092) * C141365) *
                C71446) *
               C141499 -
           ((C124968 + C124967) * C71446 + (C124966 + C124965) * C141502 +
            (C36782 * C141365 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C89302) *
                C141507) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[38] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                        C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                           C29775 +
                       (C71543 * C114 + C141507 * C195 + C71544 * C828 +
                        C141502 * C917 + C71545 * C2964 + C71446 * C3030) *
                           C141219) *
                          C89302 +
                      ((C125977 + C125978 + C125979) * C29775 +
                       (C125980 + C125981 + C125982) * C141219) *
                          C141365) *
                         C1596 -
                     (((C71545 * C29089 + C71446 * C29175 + C71544 * C13208 +
                        C141502 * C13297 + C71543 * C5329 + C141507 * C5395) *
                           C141219 +
                       (C71545 * C29087 + C71446 * C29173 + C71544 * C13205 +
                        C141502 * C13294 + C71543 * C5325 + C141507 * C5391) *
                           C29775) *
                          C141365 +
                      ((C125982 + C125981 + C125980) * C141219 +
                       (C125979 + C125978 + C125977) * C29775) *
                          C89302) *
                         C141499) *
                        C141281 * C818 +
                    ((((C73481 + C73480 + C73479) * C29775 +
                       (C73478 + C73477 + C73476) * C141219) *
                          C89302 +
                      ((C71543 * C5326 + C141507 * C5392 + C71544 * C13206 +
                        C141502 * C13295 + C71545 * C29088 + C71446 * C29174) *
                           C29775 +
                       (C71543 * C5330 + C141507 * C5396 + C71544 * C13209 +
                        C141502 * C13298 + C71545 * C29090 + C71446 * C29176) *
                           C141219) *
                          C141365) *
                         C141499 -
                     (((C73476 + C73477 + C73478) * C141219 +
                       (C73479 + C73480 + C73481) * C29775) *
                          C141365 +
                      ((C71576 + C71575 + C71574) * C141219 +
                       (C71573 + C71572 + C71571) * C29775) *
                          C89302) *
                         C1596) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C29775 +
             (C89455 * C114 + C89302 * C282 + C89456 * C1606 +
              C141365 * C1789) *
                 C141219) *
                C141507 +
            ((C98279 + C98280) * C29775 + (C98281 + C98282) * C141219) *
                C141502 +
            ((C101800 + C101799) * C29775 + (C101798 + C101797) * C141219) *
                C71446) *
               C1596 -
           (((C89456 * C29089 + C141365 * C29253 + C89455 * C10473 +
              C89302 * C10702) *
                 C141219 +
             (C89456 * C29087 + C141365 * C29251 + C89455 * C10470 +
              C89302 * C10699) *
                 C29775) *
                C71446 +
            ((C102809 + C102810) * C141219 + (C102811 + C102812) * C29775) *
                C141502 +
            ((C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
              C89302 * C1789) *
                 C141219 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C29775) *
                C141507) *
               C141499) *
              C141281 * C818 +
          ((((C91337 + C91336) * C29775 + (C91335 + C91334) * C141219) *
                C141507 +
            ((C99524 + C99523) * C29775 + (C99522 + C99521) * C141219) *
                C141502 +
            ((C89455 * C10471 + C89302 * C10700 + C89456 * C29088 +
              C141365 * C29252) *
                 C29775 +
             (C89455 * C10474 + C89302 * C10703 + C89456 * C29090 +
              C141365 * C29254) *
                 C141219) *
                C71446) *
               C141499 -
           (((C98283 + C98284) * C141219 + (C98285 + C98286) * C29775) *
                C71446 +
            (C98277 * C141219 + C98278 * C29775) * C141502 +
            ((C89485 + C89484) * C141219 + (C89483 + C89482) * C29775) *
                C141507) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C71543 +
             (C29775 * C189 + C141219 * C362) * C141507 + C30547 * C71544 +
             C30548 * C141502 + C30549 * C71545 + C30550 * C71446) *
                C89302 +
            (C126179 + C126180 + C126181 + C126182 + C126183 + C126184) *
                C141365) *
               C1596 -
           ((C39703 * C71446 + C39704 * C71545 + C39705 * C141502 +
             C39706 * C71544 + C42382 * C141507 + C42383 * C71543) *
                C141365 +
            (C126184 + C126183 + C126182 + C126181 + C126180 + C126179) *
                C89302) *
               C141499) *
              C141281 * C818 +
          (((C126185 + C126186 + C126187 + C126188 + C126189 + C126190) *
                C89302 +
            (C52758 * C71543 + C52759 * C141507 + C51770 * C71544 +
             C51771 * C141502 + (C29775 * C29088 + C141219 * C29090) * C71545 +
             (C29775 * C29174 + C141219 * C29330) * C71446) *
                C141365) *
               C141499 -
           ((C126190 + C126189 + C126188 + C126187 + C126186 + C126185) *
                C141365 +
            (C30556 * C71446 + C30555 * C71545 + C30554 * C141502 +
             C30553 * C71544 + (C29775 * C190 + C141219 * C363) * C141507 +
             (C29775 * C109 + C141219 * C115) * C71543) *
                C89302) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[38] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71804 * C108 + C71808 + C71808 + C141507 * C419 +
                       C71805 * C823 + C71809 + C71809 + C141502 * C1171 +
                       C71806 * C2960 + C71810 + C71810 + C71446 * C3196) *
                          C141219 * C89302 +
                      (C126301 + C126302 + C126303) * C141219 * C141365) *
                         C1596 -
                     ((C71806 * C29087 + C78905 + C78905 + C71446 * C29405 +
                       C71805 * C13205 + C78904 + C78904 + C141502 * C13531 +
                       C71804 * C5325 + C78903 + C78903 + C141507 * C5561) *
                          C141219 * C141365 +
                      (C126303 + C126302 + C126301) * C141219 * C89302) *
                         C141499) *
                        C141281 * C818 +
                    (((C73799 + C73798 + C73797) * C141219 * C89302 +
                      (C71804 * C5326 + C78906 + C78906 + C141507 * C5562 +
                       C71805 * C13206 + C78907 + C78907 + C141502 * C13532 +
                       C71806 * C29088 + C78908 + C78908 + C71446 * C29406) *
                          C141219 * C141365) *
                         C141499 -
                     ((C73797 + C73798 + C73799) * C141219 * C141365 +
                      (C71846 + C71845 + C71844) * C141219 * C89302) *
                         C1596) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C71543 +
            (C89455 * C189 + C89302 * C501 + C89456 * C1690 + C141365 * C2040) *
                C141507 +
            (C98279 + C98280) * C71544 + (C98697 + C98698) * C141502 +
            (C101800 + C101799) * C71545 + (C102102 + C102101) * C71446) *
               C141219 * C1596 -
           ((C89456 * C29173 + C141365 * C29487 + C89455 * C10595 +
             C89302 * C11041) *
                C71446 +
            (C89456 * C29087 + C141365 * C29251 + C89455 * C10470 +
             C89302 * C10699) *
                C71545 +
            (C103207 + C103208) * C141502 + (C102811 + C102812) * C71544 +
            (C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
             C89302 * C2040) *
                C141507 +
            (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
             C89302 * C1784) *
                C71543) *
               C141219 * C141499) *
              C141281 * C818 +
          (((C91337 + C91336) * C71543 + (C91685 + C91684) * C141507 +
            (C99524 + C99523) * C71544 + (C99922 + C99921) * C141502 +
            (C89455 * C10471 + C89302 * C10700 + C89456 * C29088 +
             C141365 * C29252) *
                C71545 +
            (C89455 * C10596 + C89302 * C11042 + C89456 * C29174 +
             C141365 * C29488) *
                C71446) *
               C141219 * C141499 -
           ((C98699 + C98700) * C71446 + (C98285 + C98286) * C71545 +
            C98696 * C141502 + C98278 * C71544 + (C89732 + C89731) * C141507 +
            (C89483 + C89482) * C71543) *
               C141219 * C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[38] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C89455 +
                       (C29775 * C276 + C141219 * C579) * C89302 +
                       C37111 * C89456 + C37432 * C141365) *
                          C141507 +
                      (C125557 + C125558 + C125559 + C125560) * C141502 +
                      (C125561 + C125562 + C125563 + C125564) * C71446) *
                         C1596 -
                     ((C40041 * C141365 + C39704 * C89456 + C33176 * C89302 +
                       C32955 * C89455) *
                          C71446 +
                      (C40042 * C141365 + C39706 * C89456 + C33177 * C89302 +
                       C32957 * C89455) *
                          C141502 +
                      (C42634 * C141365 + C42383 * C89456 + C37432 * C89302 +
                       C37111 * C89455) *
                          C141507) *
                         C141499) *
                        C141281 * C818 +
                    (((C37113 * C89455 + C37433 * C89302 + C52758 * C89456 +
                       C53092 * C141365) *
                          C141507 +
                      (C36104 * C89455 + C36438 * C89302 + C51770 * C89456 +
                       C52092 * C141365) *
                          C141502 +
                      (C36106 * C89455 + C36439 * C89302 +
                       (C29775 * C29088 + C141219 * C29090) * C89456 +
                       (C29775 * C29252 + C141219 * C29564) * C141365) *
                          C71446) *
                         C141499 -
                     ((C125572 + C125571 + C125570 + C125569) * C71446 +
                      (C125568 + C125567 + C125566 + C125565) * C141502 +
                      (C37433 * C141365 + C37113 * C89456 +
                       (C29775 * C277 + C141219 * C580) * C89302 +
                       (C29775 * C109 + C141219 * C115) * C89455) *
                          C141507) *
                         C1596) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[38] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                       C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                          C89455 +
                      (C71543 * C276 + C141507 * C635 + C71544 * C1006 +
                       C141502 * C1419 + C71545 * C3084 + C71446 * C3362) *
                          C89302 +
                      (C125977 + C125978 + C125979) * C89456 +
                      (C126604 + C126605 + C126606) * C141365) *
                         C141219 * C1596 -
                     ((C71545 * C29251 + C71446 * C29639 + C71544 * C13374 +
                       C141502 * C13768 + C71543 * C5449 + C141507 * C5727) *
                          C141365 +
                      (C71545 * C29087 + C71446 * C29173 + C71544 * C13205 +
                       C141502 * C13294 + C71543 * C5325 + C141507 * C5391) *
                          C89456 +
                      (C126606 + C126605 + C126604) * C89302 +
                      (C125979 + C125978 + C125977) * C89455) *
                         C141219 * C141499) *
                        C141281 * C818 +
                    (((C73481 + C73480 + C73479) * C89455 +
                      (C74108 + C74107 + C74106) * C89302 +
                      (C71543 * C5326 + C141507 * C5392 + C71544 * C13206 +
                       C141502 * C13295 + C71545 * C29088 + C71446 * C29174) *
                          C89456 +
                      (C71543 * C5450 + C141507 * C5728 + C71544 * C13375 +
                       C141502 * C13769 + C71545 * C29252 + C71446 * C29640) *
                          C141365) *
                         C141219 * C141499 -
                     ((C74106 + C74107 + C74108) * C141365 +
                      (C73479 + C73480 + C73481) * C89456 +
                      (C72098 + C72097 + C72096) * C89302 +
                      (C71573 + C71572 + C71571) * C89455) *
                         C141219 * C1596) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
             C89980 + C89980 + C141365 * C2283) *
                C141507 +
            (C99115 + C99116) * C141502 + (C102410 + C102409) * C71446) *
               C141219 * C1596 -
           ((C89977 * C29087 + C103604 + C103604 + C141365 * C29715 +
             C89976 * C10470 + C103603 + C103603 + C89302 * C11356) *
                C71446 +
            (C103611 + C103612) * C141502 +
            (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
             C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                C141507) *
               C141219 * C141499) *
              C141281 * C818 +
          (((C92033 + C92032) * C141507 + (C100324 + C100323) * C141502 +
            (C89976 * C10471 + C103605 + C103605 + C89302 * C11357 +
             C89977 * C29088 + C103606 + C103606 + C141365 * C29716) *
                C71446) *
               C141219 * C141499 -
           ((C99117 + C99118) * C71446 + C99106 * C141502 +
            (C90014 + C90013) * C141507) *
               C141219 * C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[39] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C89302 +
             C36781 * C141365) *
                C141507 +
            (C124961 + C124962) * C141502 + (C124963 + C124964) * C71446) *
               C141298 * C2374 -
           ((C32719 * C141365 + C30303 * C89302) * C71446 +
            (C124964 + C124963) * C141502 + (C124962 + C124961) * C141507) *
               C141298 * C141497) *
              C2376 +
          (((C124965 + C124966) * C141507 + (C124967 + C124968) * C141502 +
            (C30306 * C89302 +
             (C29774 * C26352 + C31000 + C31000 + C141219 * C26356) * C141365) *
                C71446) *
               C141298 * C141497 -
           ((C124968 + C124967) * C71446 + (C124966 + C124965) * C141502 +
            (C36782 * C141365 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C89302) *
                C141507) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[39] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                        C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                           C29775 +
                       (C71543 * C114 + C141507 * C195 + C71544 * C828 +
                        C141502 * C917 + C71545 * C2964 + C71446 * C3030) *
                           C141219) *
                          C89302 +
                      ((C125977 + C125978 + C125979) * C29775 +
                       (C125980 + C125981 + C125982) * C141219) *
                          C141365) *
                         C141298 * C2374 -
                     (((C71545 * C26353 + C71446 * C26479 + C71544 * C10473 +
                        C141502 * C10598 + C71543 * C3494 + C141507 * C3576) *
                           C141219 +
                       (C71545 * C26351 + C71446 * C26477 + C71544 * C10470 +
                        C141502 * C10595 + C71543 * C3490 + C141507 * C3572) *
                           C29775) *
                          C141365 +
                      ((C71545 * C9670 + C71446 * C9771 + C71544 * C2964 +
                        C141502 * C3030 + C71543 * C828 + C141507 * C917) *
                           C141219 +
                       (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                        C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                           C29775) *
                          C89302) *
                         C141298 * C141497) *
                        C2376 +
                    ((((C72439 + C72438 + C72437) * C29775 +
                       (C72436 + C72435 + C72434) * C141219) *
                          C89302 +
                      ((C71543 * C3491 + C141507 * C3573 + C71544 * C10471 +
                        C141502 * C10596 + C71545 * C26352 + C71446 * C26478) *
                           C29775 +
                       (C71543 * C3495 + C141507 * C3577 + C71544 * C10474 +
                        C141502 * C10599 + C71545 * C26354 + C71446 * C26480) *
                           C141219) *
                          C141365) *
                         C141298 * C141497 -
                     (((C73476 + C73477 + C73478) * C141219 +
                       (C73479 + C73480 + C73481) * C29775) *
                          C141365 +
                      ((C71576 + C71575 + C71574) * C141219 +
                       (C71573 + C71572 + C71571) * C29775) *
                          C89302) *
                         C141298 * C2374) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[39] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C29775 +
             (C89455 * C114 + C89302 * C282 + C89456 * C1606 +
              C141365 * C1789) *
                 C141219) *
                C141507 +
            ((C98279 + C98280) * C29775 + (C98281 + C98282) * C141219) *
                C141502 +
            ((C101800 + C101799) * C29775 + (C101798 + C101797) * C141219) *
                C71446) *
               C141298 * C2374 -
           (((C89456 * C26353 + C141365 * C26581 + C89455 * C9670 +
              C89302 * C9851) *
                 C141219 +
             (C89456 * C26351 + C141365 * C26579 + C89455 * C9667 +
              C89302 * C9848) *
                 C29775) *
                C71446 +
            ((C101797 + C101798) * C141219 + (C101799 + C101800) * C29775) *
                C141502 +
            ((C98282 + C98281) * C141219 + (C98280 + C98279) * C29775) *
                C141507) *
               C141298 * C141497) *
              C2376 +
          (((C98267 * C29775 + C98268 * C141219) * C141507 +
            ((C98286 + C98285) * C29775 + (C98284 + C98283) * C141219) *
                C141502 +
            ((C89455 * C9668 + C89302 * C9849 + C89456 * C26352 +
              C141365 * C26580) *
                 C29775 +
             (C89455 * C9671 + C89302 * C9852 + C89456 * C26354 +
              C141365 * C26582) *
                 C141219) *
                C71446) *
               C141298 * C141497 -
           (((C98283 + C98284) * C141219 + (C98285 + C98286) * C29775) *
                C71446 +
            (C98277 * C141219 + C98278 * C29775) * C141502 +
            ((C89485 + C89484) * C141219 + (C89483 + C89482) * C29775) *
                C141507) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[39] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C71543 +
             (C29775 * C189 + C141219 * C362) * C141507 + C30547 * C71544 +
             C30548 * C141502 + C30549 * C71545 + C30550 * C71446) *
                C89302 +
            (C126179 + C126180 + C126181 + C126182 + C126183 + C126184) *
                C141365) *
               C141298 * C2374 -
           ((C32952 * C71446 + C32953 * C71545 + C32954 * C141502 +
             C32955 * C71544 + C32956 * C141507 + C32957 * C71543) *
                C141365 +
            (C30552 * C71446 + C30551 * C71545 + C30550 * C141502 +
             C30549 * C71544 + C30548 * C141507 + C30547 * C71543) *
                C89302) *
               C141298 * C141497) *
              C2376 +
          (((C30553 * C71543 + C30554 * C141507 + C30555 * C71544 +
             C30556 * C141502 + C30557 * C71545 + C30558 * C71446) *
                C89302 +
            (C36104 * C71543 + C36105 * C141507 + C36106 * C71544 +
             C36107 * C141502 + (C29775 * C26352 + C141219 * C26354) * C71545 +
             (C29775 * C26478 + C141219 * C26696) * C71446) *
                C141365) *
               C141298 * C141497 -
           ((C126190 + C126189 + C126188 + C126187 + C126186 + C126185) *
                C141365 +
            (C30556 * C71446 + C30555 * C71545 + C30554 * C141502 +
             C30553 * C71544 + (C29775 * C190 + C141219 * C363) * C141507 +
             (C29775 * C109 + C141219 * C115) * C71543) *
                C89302) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[39] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71804 * C108 + C71808 + C71808 + C141507 * C419 +
                       C71805 * C823 + C71809 + C71809 + C141502 * C1171 +
                       C71806 * C2960 + C71810 + C71810 + C71446 * C3196) *
                          C141219 * C89302 +
                      (C126301 + C126302 + C126303) * C141219 * C141365) *
                         C141298 * C2374 -
                     ((C71806 * C26351 + C76355 + C76355 + C71446 * C26819 +
                       C71805 * C10470 + C76354 + C76354 + C141502 * C10934 +
                       C71804 * C3490 + C76353 + C76353 + C141507 * C3790) *
                          C141219 * C141365 +
                      (C71806 * C9667 + C72807 + C72807 + C71446 * C10035 +
                       C71805 * C2960 + C72808 + C72808 + C141502 * C3196 +
                       C71804 * C823 + C72809 + C72809 + C141507 * C1171) *
                          C141219 * C89302) *
                         C141298 * C141497) *
                        C2376 +
                    (((C72821 + C72820 + C72819) * C141219 * C89302 +
                      (C71804 * C3491 + C76356 + C76356 + C141507 * C3791 +
                       C71805 * C10471 + C76357 + C76357 + C141502 * C10935 +
                       C71806 * C26352 + C76358 + C76358 + C71446 * C26820) *
                          C141219 * C141365) *
                         C141298 * C141497 -
                     ((C73797 + C73798 + C73799) * C141219 * C141365 +
                      (C71846 + C71845 + C71844) * C141219 * C89302) *
                         C141298 * C2374) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[39] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C71543 +
            (C89455 * C189 + C89302 * C501 + C89456 * C1690 + C141365 * C2040) *
                C141507 +
            (C98279 + C98280) * C71544 + (C98697 + C98698) * C141502 +
            (C101800 + C101799) * C71545 + (C102102 + C102101) * C71446) *
               C141219 * C141298 * C2374 -
           ((C89456 * C26477 + C141365 * C26925 + C89455 * C9768 +
             C89302 * C10118) *
                C71446 +
            (C89456 * C26351 + C141365 * C26579 + C89455 * C9667 +
             C89302 * C9848) *
                C71545 +
            (C102101 + C102102) * C141502 + (C101799 + C101800) * C71544 +
            (C98698 + C98697) * C141507 + (C98280 + C98279) * C71543) *
               C141219 * C141298 * C141497) *
              C2376 +
          ((C98267 * C71543 + C98691 * C141507 + (C98286 + C98285) * C71544 +
            (C98700 + C98699) * C141502 +
            (C89455 * C9668 + C89302 * C9849 + C89456 * C26352 +
             C141365 * C26580) *
                C71545 +
            (C89455 * C9769 + C89302 * C10119 + C89456 * C26478 +
             C141365 * C26926) *
                C71446) *
               C141219 * C141298 * C141497 -
           ((C98699 + C98700) * C71446 + (C98285 + C98286) * C71545 +
            C98696 * C141502 + C98278 * C71544 + (C89732 + C89731) * C141507 +
            (C89483 + C89482) * C71543) *
               C141219 * C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[39] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C89455 +
                       (C29775 * C276 + C141219 * C579) * C89302 +
                       C37111 * C89456 + C37432 * C141365) *
                          C141507 +
                      (C125557 + C125558 + C125559 + C125560) * C141502 +
                      (C125561 + C125562 + C125563 + C125564) * C71446) *
                         C141298 * C2374 -
                     ((C33175 * C141365 + C32953 * C89456 + C30785 * C89302 +
                       C30551 * C89455) *
                          C71446 +
                      (C125564 + C125563 + C125562 + C125561) * C141502 +
                      (C125560 + C125559 + C125558 + C125557) * C141507) *
                         C141298 * C141497) *
                        C2376 +
                    (((C125565 + C125566 + C125567 + C125568) * C141507 +
                      (C125569 + C125570 + C125571 + C125572) * C141502 +
                      (C30557 * C89455 + C30788 * C89302 +
                       (C29775 * C26352 + C141219 * C26354) * C89456 +
                       (C29775 * C26580 + C141219 * C27029) * C141365) *
                          C71446) *
                         C141298 * C141497 -
                     ((C125572 + C125571 + C125570 + C125569) * C71446 +
                      (C125568 + C125567 + C125566 + C125565) * C141502 +
                      (C37433 * C141365 + C37113 * C89456 +
                       (C29775 * C277 + C141219 * C580) * C89302 +
                       (C29775 * C109 + C141219 * C115) * C89455) *
                          C141507) *
                         C141298 * C2374) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[39] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                       C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                          C89455 +
                      (C71543 * C276 + C141507 * C635 + C71544 * C1006 +
                       C141502 * C1419 + C71545 * C3084 + C71446 * C3362) *
                          C89302 +
                      (C125977 + C125978 + C125979) * C89456 +
                      (C126604 + C126605 + C126606) * C141365) *
                         C141219 * C141298 * C2374 -
                     ((C71545 * C26579 + C71446 * C27140 + C71544 * C10699 +
                       C141502 * C11255 + C71543 * C3646 + C141507 * C4004) *
                          C141365 +
                      (C71545 * C26351 + C71446 * C26477 + C71544 * C10470 +
                       C141502 * C10595 + C71543 * C3490 + C141507 * C3572) *
                          C89456 +
                      (C71545 * C9848 + C71446 * C10284 + C71544 * C3084 +
                       C141502 * C3362 + C71543 * C1006 + C141507 * C1419) *
                          C89302 +
                      (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                       C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                          C89455) *
                         C141219 * C141298 * C141497) *
                        C2376 +
                    (((C72439 + C72438 + C72437) * C89455 +
                      (C73154 + C73153 + C73152) * C89302 +
                      (C71543 * C3491 + C141507 * C3573 + C71544 * C10471 +
                       C141502 * C10596 + C71545 * C26352 + C71446 * C26478) *
                          C89456 +
                      (C71543 * C3647 + C141507 * C4005 + C71544 * C10700 +
                       C141502 * C11256 + C71545 * C26580 + C71446 * C27141) *
                          C141365) *
                         C141219 * C141298 * C141497 -
                     ((C74106 + C74107 + C74108) * C141365 +
                      (C73479 + C73480 + C73481) * C89456 +
                      (C72098 + C72097 + C72096) * C89302 +
                      (C71573 + C71572 + C71571) * C89455) *
                         C141219 * C141298 * C2374) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[39] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
             C89980 + C89980 + C141365 * C2283) *
                C141507 +
            (C99115 + C99116) * C141502 + (C102410 + C102409) * C71446) *
               C141219 * C141298 * C2374 -
           ((C89977 * C26351 + C102402 + C102402 + C141365 * C27240 +
             C89976 * C9667 + C102401 + C102401 + C89302 * C10361) *
                C71446 +
            (C102409 + C102410) * C141502 + (C99116 + C99115) * C141507) *
               C141219 * C141298 * C141497) *
              C2376 +
          ((C99101 * C141507 + (C99118 + C99117) * C141502 +
            (C89976 * C9668 + C102403 + C102403 + C89302 * C10362 +
             C89977 * C26352 + C102404 + C102404 + C141365 * C27241) *
                C71446) *
               C141219 * C141298 * C141497 -
           ((C99117 + C99118) * C71446 + C99106 * C141502 +
            (C90014 + C90013) * C141507) *
               C141219 * C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C89302 +
            C36781 * C141365) *
               C141507 +
           (C124961 + C124962) * C141502 + C127661 * C71446) *
              C141298 * C2956 -
          ((C127662 + C127663) * C71446 + (C124964 + C124963) * C141502 +
           (C124962 + C124961) * C141507) *
              C141298 * C2957 +
          (C127661 * C141507 + (C127663 + C127662) * C141502 +
           (C32189 * C89302 +
            (C29774 * C32702 + C32712 + C32712 + C141219 * C32704) * C141365) *
               C71446) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[40] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                       C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                          C29775 +
                      (C71543 * C114 + C141507 * C195 + C71544 * C828 +
                       C141502 * C917 + C71545 * C2964 + C71446 * C3030) *
                          C141219) *
                         C89302 +
                     ((C125977 + C125978 + C125979) * C29775 +
                      (C125980 + C125981 + C125982) * C141219) *
                         C141365) *
                        C141298 * C2956 -
                    (((C71545 * C26353 + C71446 * C26479 + C71544 * C10473 +
                       C141502 * C10598 + C71543 * C3494 + C141507 * C3576) *
                          C141219 +
                      (C71545 * C26351 + C71446 * C26477 + C71544 * C10470 +
                       C141502 * C10595 + C71543 * C3490 + C141507 * C3572) *
                          C29775) *
                         C141365 +
                     ((C71545 * C9670 + C71446 * C9771 + C71544 * C2964 +
                       C141502 * C3030 + C71543 * C828 + C141507 * C917) *
                          C141219 +
                      (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                       C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                          C29775) *
                         C89302) *
                        C141298 * C2957 +
                    (((C71543 * C2960 + C141507 * C3026 + C71544 * C9667 +
                       C141502 * C9768 + C71545 * C25568 + C71446 * C25662) *
                          C29775 +
                      (C71543 * C2964 + C141507 * C3030 + C71544 * C9670 +
                       C141502 * C9771 + C71545 * C25570 + C71446 * C25664) *
                          C141219) *
                         C89302 +
                     ((C71543 * C10470 + C141507 * C10595 + C71544 * C26351 +
                       C141502 * C26477 + C71545 * C32702 + C71446 * C32790) *
                          C29775 +
                      (C71543 * C10473 + C141507 * C10598 + C71544 * C26353 +
                       C141502 * C26479 + C71545 * C32703 + C71446 * C32791) *
                          C141219) *
                         C141365) *
                        C141298 * C2958) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexz[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C29775 +
            (C89455 * C114 + C89302 * C282 + C89456 * C1606 + C141365 * C1789) *
                C141219) *
               C141507 +
           ((C98279 + C98280) * C29775 + (C98281 + C98282) * C141219) *
               C141502 +
           C127828 * C71446) *
              C141298 * C2956 -
          (((C127824 + C127825) * C141219 + (C127826 + C127827) * C29775) *
               C71446 +
           ((C101797 + C101798) * C141219 + (C101799 + C101800) * C29775) *
               C141502 +
           ((C98282 + C98281) * C141219 + (C98280 + C98279) * C29775) *
               C141507) *
              C141298 * C2957 +
          (C127828 * C141507 +
           ((C127827 + C127826) * C29775 + (C127825 + C127824) * C141219) *
               C141502 +
           ((C89455 * C25568 + C89302 * C25740 + C89456 * C32702 +
             C141365 * C32858) *
                C29775 +
            (C89455 * C25570 + C89302 * C25742 + C89456 * C32703 +
             C141365 * C32859) *
                C141219) *
               C71446) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C71543 +
            (C29775 * C189 + C141219 * C362) * C141507 + C30547 * C71544 +
            C30548 * C141502 + C30549 * C71545 + C30550 * C71446) *
               C89302 +
           (C126179 + C126180 + C126181 + C126182 + C126183 + C126184) *
               C141365) *
              C141298 * C2956 -
          ((C32952 * C71446 + C32953 * C71545 + C32954 * C141502 +
            C32955 * C71544 + C32956 * C141507 + C32957 * C71543) *
               C141365 +
           (C30552 * C71446 + C30551 * C71545 + C30550 * C141502 +
            C30549 * C71544 + C30548 * C141507 + C30547 * C71543) *
               C89302) *
              C141298 * C2957 +
          ((C30549 * C71543 + C30550 * C141507 + C30551 * C71544 +
            C30552 * C141502 + C32361 * C71545 + C32360 * C71446) *
               C89302 +
           (C32955 * C71543 + C32954 * C141507 + C32953 * C71544 +
            C32952 * C141502 + (C29775 * C32702 + C141219 * C32703) * C71545 +
            (C29775 * C32790 + C141219 * C32938) * C71446) *
               C141365) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[40] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C71804 * C108 + C71808 + C71808 + C141507 * C419 +
                      C71805 * C823 + C71809 + C71809 + C141502 * C1171 +
                      C71806 * C2960 + C71810 + C71810 + C71446 * C3196) *
                         C141219 * C89302 +
                     (C126301 + C126302 + C126303) * C141219 * C141365) *
                        C141298 * C2956 -
                    ((C71806 * C26351 + C76355 + C76355 + C71446 * C26819 +
                      C71805 * C10470 + C76354 + C76354 + C141502 * C10934 +
                      C71804 * C3490 + C76353 + C76353 + C141507 * C3790) *
                         C141219 * C141365 +
                     (C71806 * C9667 + C72807 + C72807 + C71446 * C10035 +
                      C71805 * C2960 + C72808 + C72808 + C141502 * C3196 +
                      C71804 * C823 + C72809 + C72809 + C141507 * C1171) *
                         C141219 * C89302) *
                        C141298 * C2957 +
                    ((C71804 * C2960 + C75497 + C75497 + C141507 * C3196 +
                      C71805 * C9667 + C75498 + C75498 + C141502 * C10035 +
                      C71806 * C25568 + C75499 + C75499 + C71446 * C25921) *
                         C141219 * C89302 +
                     (C71804 * C10470 + C127977 + C127977 + C141507 * C10934 +
                      C71805 * C26351 + C127978 + C127978 + C141502 * C26819 +
                      C71806 * C32702 + C127979 + C127979 + C71446 * C33023) *
                         C141219 * C141365) *
                        C141298 * C2958) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
               C71543 +
           (C89455 * C189 + C89302 * C501 + C89456 * C1690 + C141365 * C2040) *
               C141507 +
           (C98279 + C98280) * C71544 + (C98697 + C98698) * C141502 +
           C127812 * C71545 + C128054 * C71446) *
              C141219 * C141298 * C2956 -
          ((C128059 + C128060) * C71446 + (C127826 + C127827) * C71545 +
           (C102101 + C102102) * C141502 + (C101799 + C101800) * C71544 +
           (C98698 + C98697) * C141507 + (C98280 + C98279) * C71543) *
              C141219 * C141298 * C2957 +
          (C127812 * C71543 + C128054 * C141507 + (C127827 + C127826) * C71544 +
           (C128060 + C128059) * C141502 +
           (C89455 * C25568 + C89302 * C25740 + C89456 * C32702 +
            C141365 * C32858) *
               C71545 +
           (C89455 * C25662 + C89302 * C26003 + C89456 * C32790 +
            C141365 * C33094) *
               C71446) *
              C141219 * C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[40] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C29775 * C108 + C141219 * C114) * C89455 +
                      (C29775 * C276 + C141219 * C579) * C89302 +
                      C37111 * C89456 + C37432 * C141365) *
                         C141507 +
                     (C125557 + C125558 + C125559 + C125560) * C141502 +
                     C128141 * C71446) *
                        C141298 * C2956 -
                    ((C128136 + C128137 + C128138 + C128139) * C71446 +
                     (C125564 + C125563 + C125562 + C125561) * C141502 +
                     (C125560 + C125559 + C125558 + C125557) * C141507) *
                        C141298 * C2957 +
                    (C128141 * C141507 +
                     (C128139 + C128138 + C128137 + C128136) * C141502 +
                     (C32361 * C89455 + C32527 * C89302 +
                      (C29775 * C32702 + C141219 * C32703) * C89456 +
                      (C29775 * C32858 + C141219 * C33164) * C141365) *
                         C71446) *
                        C141298 * C2958) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezy[40] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                      C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                         C89455 +
                     (C71543 * C276 + C141507 * C635 + C71544 * C1006 +
                      C141502 * C1419 + C71545 * C3084 + C71446 * C3362) *
                         C89302 +
                     (C125977 + C125978 + C125979) * C89456 +
                     (C126604 + C126605 + C126606) * C141365) *
                        C141219 * C141298 * C2956 -
                    ((C71545 * C26579 + C71446 * C27140 + C71544 * C10699 +
                      C141502 * C11255 + C71543 * C3646 + C141507 * C4004) *
                         C141365 +
                     (C71545 * C26351 + C71446 * C26477 + C71544 * C10470 +
                      C141502 * C10595 + C71543 * C3490 + C141507 * C3572) *
                         C89456 +
                     (C71545 * C9848 + C71446 * C10284 + C71544 * C3084 +
                      C141502 * C3362 + C71543 * C1006 + C141507 * C1419) *
                         C89302 +
                     (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                      C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                         C89455) *
                        C141219 * C141298 * C2957 +
                    ((C71543 * C2960 + C141507 * C3026 + C71544 * C9667 +
                      C141502 * C9768 + C71545 * C25568 + C71446 * C25662) *
                         C89455 +
                     (C71543 * C3084 + C141507 * C3362 + C71544 * C9848 +
                      C141502 * C10284 + C71545 * C25740 + C71446 * C26168) *
                         C89302 +
                     (C71543 * C10470 + C141507 * C10595 + C71544 * C26351 +
                      C141502 * C26477 + C71545 * C32702 + C71446 * C32790) *
                         C89456 +
                     (C71543 * C10699 + C141507 * C11255 + C71544 * C26579 +
                      C141502 * C27140 + C71545 * C32858 + C71446 * C33246) *
                         C141365) *
                        C141219 * C141298 * C2958) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezz[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
            C89980 + C89980 + C141365 * C2283) *
               C141507 +
           (C99115 + C99116) * C141502 + C128290 * C71446) *
              C141219 * C141298 * C2956 -
          ((C128301 + C128302) * C71446 + (C102409 + C102410) * C141502 +
           (C99116 + C99115) * C141507) *
              C141219 * C141298 * C2957 +
          (C128290 * C141507 + (C128302 + C128301) * C141502 +
           (C89976 * C25568 + C128295 + C128295 + C89302 * C26244 +
            C89977 * C32702 + C128296 + C128296 + C141365 * C33313) *
               C71446) *
              C141219 * C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C89302 +
             C36781 * C141365) *
                C141507 +
            (C124961 + C124962) * C141502 + C127661 * C71446) *
               C1596 -
           ((C128401 + C128402) * C71446 + (C128403 + C128404) * C141502 +
            (C42123 * C141365 + C36781 * C89302) * C141507) *
               C141499) *
              C2374 +
          (((C128404 + C128403) * C141507 + (C128402 + C128401) * C141502 +
            (C32719 * C89302 +
             (C29774 * C34558 + C34565 + C34565 + C141219 * C34560) * C141365) *
                C71446) *
               C141499 -
           ((C127662 + C127663) * C71446 + (C124964 + C124963) * C141502 +
            (C124962 + C124961) * C141507) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[41] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                        C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                           C29775 +
                       (C71543 * C114 + C141507 * C195 + C71544 * C828 +
                        C141502 * C917 + C71545 * C2964 + C71446 * C3030) *
                           C141219) *
                          C89302 +
                      ((C125977 + C125978 + C125979) * C29775 +
                       (C125980 + C125981 + C125982) * C141219) *
                          C141365) *
                         C1596 -
                     (((C71545 * C29089 + C71446 * C29175 + C71544 * C13208 +
                        C141502 * C13297 + C71543 * C5329 + C141507 * C5395) *
                           C141219 +
                       (C71545 * C29087 + C71446 * C29173 + C71544 * C13205 +
                        C141502 * C13294 + C71543 * C5325 + C141507 * C5391) *
                           C29775) *
                          C141365 +
                      ((C125982 + C125981 + C125980) * C141219 +
                       (C125979 + C125978 + C125977) * C29775) *
                          C89302) *
                         C141499) *
                        C2374 +
                    ((((C128515 + C128516 + C128517) * C29775 +
                       (C128518 + C128519 + C128520) * C141219) *
                          C89302 +
                      ((C71543 * C13205 + C141507 * C13294 + C71544 * C29087 +
                        C141502 * C29173 + C71545 * C34558 + C71446 * C34615) *
                           C29775 +
                       (C71543 * C13208 + C141507 * C13297 + C71544 * C29089 +
                        C141502 * C29175 + C71545 * C34559 + C71446 * C34616) *
                           C141219) *
                          C141365) *
                         C141499 -
                     (((C128520 + C128519 + C128518) * C141219 +
                       (C128517 + C128516 + C128515) * C29775) *
                          C141365 +
                      ((C71545 * C9670 + C71446 * C9771 + C71544 * C2964 +
                        C141502 * C3030 + C71543 * C828 + C141507 * C917) *
                           C141219 +
                       (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                        C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                           C29775) *
                          C89302) *
                         C1596) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexz[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C29775 +
             (C89455 * C114 + C89302 * C282 + C89456 * C1606 +
              C141365 * C1789) *
                 C141219) *
                C141507 +
            ((C98279 + C98280) * C29775 + (C98281 + C98282) * C141219) *
                C141502 +
            C127828 * C71446) *
               C1596 -
           (((C128627 + C128628) * C141219 + (C128629 + C128630) * C29775) *
                C71446 +
            ((C102809 + C102810) * C141219 + (C102811 + C102812) * C29775) *
                C141502 +
            ((C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
              C89302 * C1789) *
                 C141219 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C29775) *
                C141507) *
               C141499) *
              C2374 +
          ((((C102812 + C102811) * C29775 + (C102810 + C102809) * C141219) *
                C141507 +
            ((C128630 + C128629) * C29775 + (C128628 + C128627) * C141219) *
                C141502 +
            ((C89455 * C26351 + C89302 * C26579 + C89456 * C34558 +
              C141365 * C34667) *
                 C29775 +
             (C89455 * C26353 + C89302 * C26581 + C89456 * C34559 +
              C141365 * C34668) *
                 C141219) *
                C71446) *
               C141499 -
           (((C127824 + C127825) * C141219 + (C127826 + C127827) * C29775) *
                C71446 +
            ((C101797 + C101798) * C141219 + (C101799 + C101800) * C29775) *
                C141502 +
            ((C98282 + C98281) * C141219 + (C98280 + C98279) * C29775) *
                C141507) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C71543 +
             (C29775 * C189 + C141219 * C362) * C141507 + C30547 * C71544 +
             C30548 * C141502 + C30549 * C71545 + C30550 * C71446) *
                C89302 +
            (C126179 + C126180 + C126181 + C126182 + C126183 + C126184) *
                C141365) *
               C1596 -
           ((C39703 * C71446 + C39704 * C71545 + C39705 * C141502 +
             C39706 * C71544 + C42382 * C141507 + C42383 * C71543) *
                C141365 +
            (C126184 + C126183 + C126182 + C126181 + C126180 + C126179) *
                C89302) *
               C141499) *
              C2374 +
          (((C128729 + C128730 + C128731 + C128732 + C128733 + C128734) *
                C89302 +
            (C39706 * C71543 + C39705 * C141507 + C39704 * C71544 +
             C39703 * C141502 + (C29775 * C34558 + C141219 * C34559) * C71545 +
             (C29775 * C34615 + C141219 * C34719) * C71446) *
                C141365) *
               C141499 -
           ((C128734 + C128733 + C128732 + C128731 + C128730 + C128729) *
                C141365 +
            (C30552 * C71446 + C30551 * C71545 + C30550 * C141502 +
             C30549 * C71544 + C30548 * C141507 + C30547 * C71543) *
                C89302) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[41] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71804 * C108 + C71808 + C71808 + C141507 * C419 +
                       C71805 * C823 + C71809 + C71809 + C141502 * C1171 +
                       C71806 * C2960 + C71810 + C71810 + C71446 * C3196) *
                          C141219 * C89302 +
                      (C126301 + C126302 + C126303) * C141219 * C141365) *
                         C1596 -
                     ((C71806 * C29087 + C78905 + C78905 + C71446 * C29405 +
                       C71805 * C13205 + C78904 + C78904 + C141502 * C13531 +
                       C71804 * C5325 + C78903 + C78903 + C141507 * C5561) *
                          C141219 * C141365 +
                      (C126303 + C126302 + C126301) * C141219 * C89302) *
                         C141499) *
                        C2374 +
                    (((C128848 + C128849 + C128850) * C141219 * C89302 +
                      (C71804 * C13205 + C128839 + C128839 + C141507 * C13531 +
                       C71805 * C29087 + C128840 + C128840 + C141502 * C29405 +
                       C71806 * C34558 + C128841 + C128841 + C71446 * C34770) *
                          C141219 * C141365) *
                         C141499 -
                     ((C128850 + C128849 + C128848) * C141219 * C141365 +
                      (C71806 * C9667 + C72807 + C72807 + C71446 * C10035 +
                       C71805 * C2960 + C72808 + C72808 + C141502 * C3196 +
                       C71804 * C823 + C72809 + C72809 + C141507 * C1171) *
                          C141219 * C89302) *
                         C1596) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C71543 +
            (C89455 * C189 + C89302 * C501 + C89456 * C1690 + C141365 * C2040) *
                C141507 +
            (C98279 + C98280) * C71544 + (C98697 + C98698) * C141502 +
            C127812 * C71545 + C128054 * C71446) *
               C141219 * C1596 -
           ((C128953 + C128954) * C71446 + (C128629 + C128630) * C71545 +
            (C103207 + C103208) * C141502 + (C102811 + C102812) * C71544 +
            (C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
             C89302 * C2040) *
                C141507 +
            (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
             C89302 * C1784) *
                C71543) *
               C141219 * C141499) *
              C2374 +
          (((C102812 + C102811) * C71543 + (C103208 + C103207) * C141507 +
            (C128630 + C128629) * C71544 + (C128954 + C128953) * C141502 +
            (C89455 * C26351 + C89302 * C26579 + C89456 * C34558 +
             C141365 * C34667) *
                C71545 +
            (C89455 * C26477 + C89302 * C26925 + C89456 * C34615 +
             C141365 * C34825) *
                C71446) *
               C141219 * C141499 -
           ((C128059 + C128060) * C71446 + (C127826 + C127827) * C71545 +
            (C102101 + C102102) * C141502 + (C101799 + C101800) * C71544 +
            (C98698 + C98697) * C141507 + (C98280 + C98279) * C71543) *
               C141219 * C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[41] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C89455 +
                       (C29775 * C276 + C141219 * C579) * C89302 +
                       C37111 * C89456 + C37432 * C141365) *
                          C141507 +
                      (C125557 + C125558 + C125559 + C125560) * C141502 +
                      C128141 * C71446) *
                         C1596 -
                     ((C129053 + C129054 + C129055 + C129056) * C71446 +
                      (C129057 + C129058 + C129059 + C129060) * C141502 +
                      (C42634 * C141365 + C42383 * C89456 + C37432 * C89302 +
                       C37111 * C89455) *
                          C141507) *
                         C141499) *
                        C2374 +
                    (((C129060 + C129059 + C129058 + C129057) * C141507 +
                      (C129056 + C129055 + C129054 + C129053) * C141502 +
                      (C32953 * C89455 + C33175 * C89302 +
                       (C29775 * C34558 + C141219 * C34559) * C89456 +
                       (C29775 * C34667 + C141219 * C34876) * C141365) *
                          C71446) *
                         C141499 -
                     ((C128136 + C128137 + C128138 + C128139) * C71446 +
                      (C125564 + C125563 + C125562 + C125561) * C141502 +
                      (C125560 + C125559 + C125558 + C125557) * C141507) *
                         C1596) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezy[41] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                       C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                          C89455 +
                      (C71543 * C276 + C141507 * C635 + C71544 * C1006 +
                       C141502 * C1419 + C71545 * C3084 + C71446 * C3362) *
                          C89302 +
                      (C125977 + C125978 + C125979) * C89456 +
                      (C126604 + C126605 + C126606) * C141365) *
                         C141219 * C1596 -
                     ((C71545 * C29251 + C71446 * C29639 + C71544 * C13374 +
                       C141502 * C13768 + C71543 * C5449 + C141507 * C5727) *
                          C141365 +
                      (C71545 * C29087 + C71446 * C29173 + C71544 * C13205 +
                       C141502 * C13294 + C71543 * C5325 + C141507 * C5391) *
                          C89456 +
                      (C126606 + C126605 + C126604) * C89302 +
                      (C125979 + C125978 + C125977) * C89455) *
                         C141219 * C141499) *
                        C2374 +
                    (((C128515 + C128516 + C128517) * C89455 +
                      (C129165 + C129166 + C129167) * C89302 +
                      (C71543 * C13205 + C141507 * C13294 + C71544 * C29087 +
                       C141502 * C29173 + C71545 * C34558 + C71446 * C34615) *
                          C89456 +
                      (C71543 * C13374 + C141507 * C13768 + C71544 * C29251 +
                       C141502 * C29639 + C71545 * C34667 + C71446 * C34927) *
                          C141365) *
                         C141219 * C141499 -
                     ((C129167 + C129166 + C129165) * C141365 +
                      (C128517 + C128516 + C128515) * C89456 +
                      (C71545 * C9848 + C71446 * C10284 + C71544 * C3084 +
                       C141502 * C3362 + C71543 * C1006 + C141507 * C1419) *
                          C89302 +
                      (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                       C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                          C89455) *
                         C141219 * C1596) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezz[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
             C89980 + C89980 + C141365 * C2283) *
                C141507 +
            (C99115 + C99116) * C141502 + C128290 * C71446) *
               C141219 * C1596 -
           ((C129276 + C129277) * C71446 + (C103611 + C103612) * C141502 +
            (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
             C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                C141507) *
               C141219 * C141499) *
              C2374 +
          (((C103612 + C103611) * C141507 + (C129277 + C129276) * C141502 +
            (C89976 * C26351 + C129270 + C129270 + C89302 * C27240 +
             C89977 * C34558 + C129271 + C129271 + C141365 * C34978) *
                C71446) *
               C141219 * C141499 -
           ((C128301 + C128302) * C71446 + (C102409 + C102410) * C141502 +
            (C99116 + C99115) * C141507) *
               C141219 * C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[42] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C89302 +
             C36781 * C141365) *
                C141507 +
            (C124961 + C124962) * C141502 + C127661 * C71446) *
               C4148 -
           ((C128401 + C128402) * C71446 + (C128403 + C128404) * C141502 +
            (C42123 * C141365 + C36781 * C89302) * C141507) *
               C141499) *
              C141281 * C2376 +
          (((C36782 * C89302 + C52409 * C141365) * C141507 +
            (C35762 * C89302 + C51452 * C141365) * C141502 +
            (C35763 * C89302 +
             (C29774 * C29088 + C36776 + C36776 + C141219 * C29092) * C141365) *
                C71446) *
               C141499 -
           ((C124968 + C124967) * C71446 + (C124966 + C124965) * C141502 +
            (C36782 * C141365 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C89302) *
                C141507) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[42] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                        C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                           C29775 +
                       (C71543 * C114 + C141507 * C195 + C71544 * C828 +
                        C141502 * C917 + C71545 * C2964 + C71446 * C3030) *
                           C141219) *
                          C89302 +
                      ((C125977 + C125978 + C125979) * C29775 +
                       (C125980 + C125981 + C125982) * C141219) *
                          C141365) *
                         C4148 -
                     (((C71545 * C29089 + C71446 * C29175 + C71544 * C13208 +
                        C141502 * C13297 + C71543 * C5329 + C141507 * C5395) *
                           C141219 +
                       (C71545 * C29087 + C71446 * C29173 + C71544 * C13205 +
                        C141502 * C13294 + C71543 * C5325 + C141507 * C5391) *
                           C29775) *
                          C141365 +
                      ((C125982 + C125981 + C125980) * C141219 +
                       (C125979 + C125978 + C125977) * C29775) *
                          C89302) *
                         C141499) *
                        C141281 * C2376 +
                    ((((C73481 + C73480 + C73479) * C29775 +
                       (C73478 + C73477 + C73476) * C141219) *
                          C89302 +
                      ((C71543 * C5326 + C141507 * C5392 + C71544 * C13206 +
                        C141502 * C13295 + C71545 * C29088 + C71446 * C29174) *
                           C29775 +
                       (C71543 * C5330 + C141507 * C5396 + C71544 * C13209 +
                        C141502 * C13298 + C71545 * C29090 + C71446 * C29176) *
                           C141219) *
                          C141365) *
                         C141499 -
                     (((C73476 + C73477 + C73478) * C141219 +
                       (C73479 + C73480 + C73481) * C29775) *
                          C141365 +
                      ((C71576 + C71575 + C71574) * C141219 +
                       (C71573 + C71572 + C71571) * C29775) *
                          C89302) *
                         C4148) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[42] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C29775 +
             (C89455 * C114 + C89302 * C282 + C89456 * C1606 +
              C141365 * C1789) *
                 C141219) *
                C141507 +
            ((C98279 + C98280) * C29775 + (C98281 + C98282) * C141219) *
                C141502 +
            C127828 * C71446) *
               C4148 -
           (((C128627 + C128628) * C141219 + (C128629 + C128630) * C29775) *
                C71446 +
            ((C102809 + C102810) * C141219 + (C102811 + C102812) * C29775) *
                C141502 +
            ((C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
              C89302 * C1789) *
                 C141219 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C29775) *
                C141507) *
               C141499) *
              C141281 * C2376 +
          ((((C91337 + C91336) * C29775 + (C91335 + C91334) * C141219) *
                C141507 +
            ((C99524 + C99523) * C29775 + (C99522 + C99521) * C141219) *
                C141502 +
            ((C89455 * C10471 + C89302 * C10700 + C89456 * C29088 +
              C141365 * C29252) *
                 C29775 +
             (C89455 * C10474 + C89302 * C10703 + C89456 * C29090 +
              C141365 * C29254) *
                 C141219) *
                C71446) *
               C141499 -
           (((C98283 + C98284) * C141219 + (C98285 + C98286) * C29775) *
                C71446 +
            (C98277 * C141219 + C98278 * C29775) * C141502 +
            ((C89485 + C89484) * C141219 + (C89483 + C89482) * C29775) *
                C141507) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[42] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C71543 +
             (C29775 * C189 + C141219 * C362) * C141507 + C30547 * C71544 +
             C30548 * C141502 + C30549 * C71545 + C30550 * C71446) *
                C89302 +
            (C126179 + C126180 + C126181 + C126182 + C126183 + C126184) *
                C141365) *
               C4148 -
           ((C39703 * C71446 + C39704 * C71545 + C39705 * C141502 +
             C39706 * C71544 + C42382 * C141507 + C42383 * C71543) *
                C141365 +
            (C126184 + C126183 + C126182 + C126181 + C126180 + C126179) *
                C89302) *
               C141499) *
              C141281 * C2376 +
          (((C126185 + C126186 + C126187 + C126188 + C126189 + C126190) *
                C89302 +
            (C52758 * C71543 + C52759 * C141507 + C51770 * C71544 +
             C51771 * C141502 + (C29775 * C29088 + C141219 * C29090) * C71545 +
             (C29775 * C29174 + C141219 * C29330) * C71446) *
                C141365) *
               C141499 -
           ((C126190 + C126189 + C126188 + C126187 + C126186 + C126185) *
                C141365 +
            (C30556 * C71446 + C30555 * C71545 + C30554 * C141502 +
             C30553 * C71544 + (C29775 * C190 + C141219 * C363) * C141507 +
             (C29775 * C109 + C141219 * C115) * C71543) *
                C89302) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[42] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71804 * C108 + C71808 + C71808 + C141507 * C419 +
                       C71805 * C823 + C71809 + C71809 + C141502 * C1171 +
                       C71806 * C2960 + C71810 + C71810 + C71446 * C3196) *
                          C141219 * C89302 +
                      (C126301 + C126302 + C126303) * C141219 * C141365) *
                         C4148 -
                     ((C71806 * C29087 + C78905 + C78905 + C71446 * C29405 +
                       C71805 * C13205 + C78904 + C78904 + C141502 * C13531 +
                       C71804 * C5325 + C78903 + C78903 + C141507 * C5561) *
                          C141219 * C141365 +
                      (C126303 + C126302 + C126301) * C141219 * C89302) *
                         C141499) *
                        C141281 * C2376 +
                    (((C73799 + C73798 + C73797) * C141219 * C89302 +
                      (C71804 * C5326 + C78906 + C78906 + C141507 * C5562 +
                       C71805 * C13206 + C78907 + C78907 + C141502 * C13532 +
                       C71806 * C29088 + C78908 + C78908 + C71446 * C29406) *
                          C141219 * C141365) *
                         C141499 -
                     ((C73797 + C73798 + C73799) * C141219 * C141365 +
                      (C71846 + C71845 + C71844) * C141219 * C89302) *
                         C4148) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[42] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C71543 +
            (C89455 * C189 + C89302 * C501 + C89456 * C1690 + C141365 * C2040) *
                C141507 +
            (C98279 + C98280) * C71544 + (C98697 + C98698) * C141502 +
            C127812 * C71545 + C128054 * C71446) *
               C141219 * C4148 -
           ((C128953 + C128954) * C71446 + (C128629 + C128630) * C71545 +
            (C103207 + C103208) * C141502 + (C102811 + C102812) * C71544 +
            (C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
             C89302 * C2040) *
                C141507 +
            (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
             C89302 * C1784) *
                C71543) *
               C141219 * C141499) *
              C141281 * C2376 +
          (((C91337 + C91336) * C71543 + (C91685 + C91684) * C141507 +
            (C99524 + C99523) * C71544 + (C99922 + C99921) * C141502 +
            (C89455 * C10471 + C89302 * C10700 + C89456 * C29088 +
             C141365 * C29252) *
                C71545 +
            (C89455 * C10596 + C89302 * C11042 + C89456 * C29174 +
             C141365 * C29488) *
                C71446) *
               C141219 * C141499 -
           ((C98699 + C98700) * C71446 + (C98285 + C98286) * C71545 +
            C98696 * C141502 + C98278 * C71544 + (C89732 + C89731) * C141507 +
            (C89483 + C89482) * C71543) *
               C141219 * C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[42] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C89455 +
                       (C29775 * C276 + C141219 * C579) * C89302 +
                       C37111 * C89456 + C37432 * C141365) *
                          C141507 +
                      (C125557 + C125558 + C125559 + C125560) * C141502 +
                      C128141 * C71446) *
                         C4148 -
                     ((C129053 + C129054 + C129055 + C129056) * C71446 +
                      (C129057 + C129058 + C129059 + C129060) * C141502 +
                      (C42634 * C141365 + C42383 * C89456 + C37432 * C89302 +
                       C37111 * C89455) *
                          C141507) *
                         C141499) *
                        C141281 * C2376 +
                    (((C37113 * C89455 + C37433 * C89302 + C52758 * C89456 +
                       C53092 * C141365) *
                          C141507 +
                      (C36104 * C89455 + C36438 * C89302 + C51770 * C89456 +
                       C52092 * C141365) *
                          C141502 +
                      (C36106 * C89455 + C36439 * C89302 +
                       (C29775 * C29088 + C141219 * C29090) * C89456 +
                       (C29775 * C29252 + C141219 * C29564) * C141365) *
                          C71446) *
                         C141499 -
                     ((C125572 + C125571 + C125570 + C125569) * C71446 +
                      (C125568 + C125567 + C125566 + C125565) * C141502 +
                      (C37433 * C141365 + C37113 * C89456 +
                       (C29775 * C277 + C141219 * C580) * C89302 +
                       (C29775 * C109 + C141219 * C115) * C89455) *
                          C141507) *
                         C4148) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[42] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                       C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                          C89455 +
                      (C71543 * C276 + C141507 * C635 + C71544 * C1006 +
                       C141502 * C1419 + C71545 * C3084 + C71446 * C3362) *
                          C89302 +
                      (C125977 + C125978 + C125979) * C89456 +
                      (C126604 + C126605 + C126606) * C141365) *
                         C141219 * C4148 -
                     ((C71545 * C29251 + C71446 * C29639 + C71544 * C13374 +
                       C141502 * C13768 + C71543 * C5449 + C141507 * C5727) *
                          C141365 +
                      (C71545 * C29087 + C71446 * C29173 + C71544 * C13205 +
                       C141502 * C13294 + C71543 * C5325 + C141507 * C5391) *
                          C89456 +
                      (C126606 + C126605 + C126604) * C89302 +
                      (C125979 + C125978 + C125977) * C89455) *
                         C141219 * C141499) *
                        C141281 * C2376 +
                    (((C73481 + C73480 + C73479) * C89455 +
                      (C74108 + C74107 + C74106) * C89302 +
                      (C71543 * C5326 + C141507 * C5392 + C71544 * C13206 +
                       C141502 * C13295 + C71545 * C29088 + C71446 * C29174) *
                          C89456 +
                      (C71543 * C5450 + C141507 * C5728 + C71544 * C13375 +
                       C141502 * C13769 + C71545 * C29252 + C71446 * C29640) *
                          C141365) *
                         C141219 * C141499 -
                     ((C74106 + C74107 + C74108) * C141365 +
                      (C73479 + C73480 + C73481) * C89456 +
                      (C72098 + C72097 + C72096) * C89302 +
                      (C71573 + C71572 + C71571) * C89455) *
                         C141219 * C4148) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[42] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
             C89980 + C89980 + C141365 * C2283) *
                C141507 +
            (C99115 + C99116) * C141502 + C128290 * C71446) *
               C141219 * C4148 -
           ((C129276 + C129277) * C71446 + (C103611 + C103612) * C141502 +
            (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
             C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                C141507) *
               C141219 * C141499) *
              C141281 * C2376 +
          (((C92033 + C92032) * C141507 + (C100324 + C100323) * C141502 +
            (C89976 * C10471 + C103605 + C103605 + C89302 * C11357 +
             C89977 * C29088 + C103606 + C103606 + C141365 * C29716) *
                C71446) *
               C141219 * C141499 -
           ((C99117 + C99118) * C71446 + C99106 * C141502 +
            (C90014 + C90013) * C141507) *
               C141219 * C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C89302 +
             C36781 * C141365) *
                C141507 +
            (C124961 + C124962) * C141502 + C127661 * C71446) *
               C4148 -
           ((C128401 + C128402) * C71446 + (C128403 + C128404) * C141502 +
            (C42123 * C141365 + C36781 * C89302) * C141507) *
               C141499) *
              C816 +
          (((C128404 + C128403) * C141507 + (C128402 + C128401) * C141502 +
            (C32719 * C89302 +
             (C29774 * C34558 + C34565 + C34565 + C141219 * C34560) * C141365) *
                C71446) *
               C141499 -
           ((C127662 + C127663) * C71446 + (C124964 + C124963) * C141502 +
            (C124962 + C124961) * C141507) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[43] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                        C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                           C29775 +
                       (C71543 * C114 + C141507 * C195 + C71544 * C828 +
                        C141502 * C917 + C71545 * C2964 + C71446 * C3030) *
                           C141219) *
                          C89302 +
                      ((C125977 + C125978 + C125979) * C29775 +
                       (C125980 + C125981 + C125982) * C141219) *
                          C141365) *
                         C4148 -
                     (((C71545 * C29089 + C71446 * C29175 + C71544 * C13208 +
                        C141502 * C13297 + C71543 * C5329 + C141507 * C5395) *
                           C141219 +
                       (C71545 * C29087 + C71446 * C29173 + C71544 * C13205 +
                        C141502 * C13294 + C71543 * C5325 + C141507 * C5391) *
                           C29775) *
                          C141365 +
                      ((C125982 + C125981 + C125980) * C141219 +
                       (C125979 + C125978 + C125977) * C29775) *
                          C89302) *
                         C141499) *
                        C816 +
                    ((((C128515 + C128516 + C128517) * C29775 +
                       (C128518 + C128519 + C128520) * C141219) *
                          C89302 +
                      ((C71543 * C13205 + C141507 * C13294 + C71544 * C29087 +
                        C141502 * C29173 + C71545 * C34558 + C71446 * C34615) *
                           C29775 +
                       (C71543 * C13208 + C141507 * C13297 + C71544 * C29089 +
                        C141502 * C29175 + C71545 * C34559 + C71446 * C34616) *
                           C141219) *
                          C141365) *
                         C141499 -
                     (((C128520 + C128519 + C128518) * C141219 +
                       (C128517 + C128516 + C128515) * C29775) *
                          C141365 +
                      ((C71545 * C9670 + C71446 * C9771 + C71544 * C2964 +
                        C141502 * C3030 + C71543 * C828 + C141507 * C917) *
                           C141219 +
                       (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                        C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                           C29775) *
                          C89302) *
                         C4148) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexz[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C29775 +
             (C89455 * C114 + C89302 * C282 + C89456 * C1606 +
              C141365 * C1789) *
                 C141219) *
                C141507 +
            ((C98279 + C98280) * C29775 + (C98281 + C98282) * C141219) *
                C141502 +
            C127828 * C71446) *
               C4148 -
           (((C128627 + C128628) * C141219 + (C128629 + C128630) * C29775) *
                C71446 +
            ((C102809 + C102810) * C141219 + (C102811 + C102812) * C29775) *
                C141502 +
            ((C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
              C89302 * C1789) *
                 C141219 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C29775) *
                C141507) *
               C141499) *
              C816 +
          ((((C102812 + C102811) * C29775 + (C102810 + C102809) * C141219) *
                C141507 +
            ((C128630 + C128629) * C29775 + (C128628 + C128627) * C141219) *
                C141502 +
            ((C89455 * C26351 + C89302 * C26579 + C89456 * C34558 +
              C141365 * C34667) *
                 C29775 +
             (C89455 * C26353 + C89302 * C26581 + C89456 * C34559 +
              C141365 * C34668) *
                 C141219) *
                C71446) *
               C141499 -
           (((C127824 + C127825) * C141219 + (C127826 + C127827) * C29775) *
                C71446 +
            ((C101797 + C101798) * C141219 + (C101799 + C101800) * C29775) *
                C141502 +
            ((C98282 + C98281) * C141219 + (C98280 + C98279) * C29775) *
                C141507) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C71543 +
             (C29775 * C189 + C141219 * C362) * C141507 + C30547 * C71544 +
             C30548 * C141502 + C30549 * C71545 + C30550 * C71446) *
                C89302 +
            (C126179 + C126180 + C126181 + C126182 + C126183 + C126184) *
                C141365) *
               C4148 -
           ((C39703 * C71446 + C39704 * C71545 + C39705 * C141502 +
             C39706 * C71544 + C42382 * C141507 + C42383 * C71543) *
                C141365 +
            (C126184 + C126183 + C126182 + C126181 + C126180 + C126179) *
                C89302) *
               C141499) *
              C816 +
          (((C128729 + C128730 + C128731 + C128732 + C128733 + C128734) *
                C89302 +
            (C39706 * C71543 + C39705 * C141507 + C39704 * C71544 +
             C39703 * C141502 + (C29775 * C34558 + C141219 * C34559) * C71545 +
             (C29775 * C34615 + C141219 * C34719) * C71446) *
                C141365) *
               C141499 -
           ((C128734 + C128733 + C128732 + C128731 + C128730 + C128729) *
                C141365 +
            (C30552 * C71446 + C30551 * C71545 + C30550 * C141502 +
             C30549 * C71544 + C30548 * C141507 + C30547 * C71543) *
                C89302) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[43] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71804 * C108 + C71808 + C71808 + C141507 * C419 +
                       C71805 * C823 + C71809 + C71809 + C141502 * C1171 +
                       C71806 * C2960 + C71810 + C71810 + C71446 * C3196) *
                          C141219 * C89302 +
                      (C126301 + C126302 + C126303) * C141219 * C141365) *
                         C4148 -
                     ((C71806 * C29087 + C78905 + C78905 + C71446 * C29405 +
                       C71805 * C13205 + C78904 + C78904 + C141502 * C13531 +
                       C71804 * C5325 + C78903 + C78903 + C141507 * C5561) *
                          C141219 * C141365 +
                      (C126303 + C126302 + C126301) * C141219 * C89302) *
                         C141499) *
                        C816 +
                    (((C128848 + C128849 + C128850) * C141219 * C89302 +
                      (C71804 * C13205 + C128839 + C128839 + C141507 * C13531 +
                       C71805 * C29087 + C128840 + C128840 + C141502 * C29405 +
                       C71806 * C34558 + C128841 + C128841 + C71446 * C34770) *
                          C141219 * C141365) *
                         C141499 -
                     ((C128850 + C128849 + C128848) * C141219 * C141365 +
                      (C71806 * C9667 + C72807 + C72807 + C71446 * C10035 +
                       C71805 * C2960 + C72808 + C72808 + C141502 * C3196 +
                       C71804 * C823 + C72809 + C72809 + C141507 * C1171) *
                          C141219 * C89302) *
                         C4148) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C71543 +
            (C89455 * C189 + C89302 * C501 + C89456 * C1690 + C141365 * C2040) *
                C141507 +
            (C98279 + C98280) * C71544 + (C98697 + C98698) * C141502 +
            C127812 * C71545 + C128054 * C71446) *
               C141219 * C4148 -
           ((C128953 + C128954) * C71446 + (C128629 + C128630) * C71545 +
            (C103207 + C103208) * C141502 + (C102811 + C102812) * C71544 +
            (C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
             C89302 * C2040) *
                C141507 +
            (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
             C89302 * C1784) *
                C71543) *
               C141219 * C141499) *
              C816 +
          (((C102812 + C102811) * C71543 + (C103208 + C103207) * C141507 +
            (C128630 + C128629) * C71544 + (C128954 + C128953) * C141502 +
            (C89455 * C26351 + C89302 * C26579 + C89456 * C34558 +
             C141365 * C34667) *
                C71545 +
            (C89455 * C26477 + C89302 * C26925 + C89456 * C34615 +
             C141365 * C34825) *
                C71446) *
               C141219 * C141499 -
           ((C128059 + C128060) * C71446 + (C127826 + C127827) * C71545 +
            (C102101 + C102102) * C141502 + (C101799 + C101800) * C71544 +
            (C98698 + C98697) * C141507 + (C98280 + C98279) * C71543) *
               C141219 * C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[43] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C89455 +
                       (C29775 * C276 + C141219 * C579) * C89302 +
                       C37111 * C89456 + C37432 * C141365) *
                          C141507 +
                      (C125557 + C125558 + C125559 + C125560) * C141502 +
                      C128141 * C71446) *
                         C4148 -
                     ((C129053 + C129054 + C129055 + C129056) * C71446 +
                      (C129057 + C129058 + C129059 + C129060) * C141502 +
                      (C42634 * C141365 + C42383 * C89456 + C37432 * C89302 +
                       C37111 * C89455) *
                          C141507) *
                         C141499) *
                        C816 +
                    (((C129060 + C129059 + C129058 + C129057) * C141507 +
                      (C129056 + C129055 + C129054 + C129053) * C141502 +
                      (C32953 * C89455 + C33175 * C89302 +
                       (C29775 * C34558 + C141219 * C34559) * C89456 +
                       (C29775 * C34667 + C141219 * C34876) * C141365) *
                          C71446) *
                         C141499 -
                     ((C128136 + C128137 + C128138 + C128139) * C71446 +
                      (C125564 + C125563 + C125562 + C125561) * C141502 +
                      (C125560 + C125559 + C125558 + C125557) * C141507) *
                         C4148) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezy[43] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                       C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                          C89455 +
                      (C71543 * C276 + C141507 * C635 + C71544 * C1006 +
                       C141502 * C1419 + C71545 * C3084 + C71446 * C3362) *
                          C89302 +
                      (C125977 + C125978 + C125979) * C89456 +
                      (C126604 + C126605 + C126606) * C141365) *
                         C141219 * C4148 -
                     ((C71545 * C29251 + C71446 * C29639 + C71544 * C13374 +
                       C141502 * C13768 + C71543 * C5449 + C141507 * C5727) *
                          C141365 +
                      (C71545 * C29087 + C71446 * C29173 + C71544 * C13205 +
                       C141502 * C13294 + C71543 * C5325 + C141507 * C5391) *
                          C89456 +
                      (C126606 + C126605 + C126604) * C89302 +
                      (C125979 + C125978 + C125977) * C89455) *
                         C141219 * C141499) *
                        C816 +
                    (((C128515 + C128516 + C128517) * C89455 +
                      (C129165 + C129166 + C129167) * C89302 +
                      (C71543 * C13205 + C141507 * C13294 + C71544 * C29087 +
                       C141502 * C29173 + C71545 * C34558 + C71446 * C34615) *
                          C89456 +
                      (C71543 * C13374 + C141507 * C13768 + C71544 * C29251 +
                       C141502 * C29639 + C71545 * C34667 + C71446 * C34927) *
                          C141365) *
                         C141219 * C141499 -
                     ((C129167 + C129166 + C129165) * C141365 +
                      (C128517 + C128516 + C128515) * C89456 +
                      (C71545 * C9848 + C71446 * C10284 + C71544 * C3084 +
                       C141502 * C3362 + C71543 * C1006 + C141507 * C1419) *
                          C89302 +
                      (C71545 * C9667 + C71446 * C9768 + C71544 * C2960 +
                       C141502 * C3026 + C71543 * C823 + C141507 * C912) *
                          C89455) *
                         C141219 * C4148) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezz[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
             C89980 + C89980 + C141365 * C2283) *
                C141507 +
            (C99115 + C99116) * C141502 + C128290 * C71446) *
               C141219 * C4148 -
           ((C129276 + C129277) * C71446 + (C103611 + C103612) * C141502 +
            (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
             C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                C141507) *
               C141219 * C141499) *
              C816 +
          (((C103612 + C103611) * C141507 + (C129277 + C129276) * C141502 +
            (C89976 * C26351 + C129270 + C129270 + C89302 * C27240 +
             C89977 * C34558 + C129271 + C129271 + C141365 * C34978) *
                C71446) *
               C141219 * C141499 -
           ((C128301 + C128302) * C71446 + (C102409 + C102410) * C141502 +
            (C99116 + C99115) * C141507) *
               C141219 * C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[44] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C89302 +
            C36781 * C141365) *
               C141507 +
           (C124961 + C124962) * C141502 + C127661 * C71446) *
              C5322 -
          ((C128401 + C128402) * C71446 + (C128403 + C128404) * C141502 +
           (C42123 * C141365 + C36781 * C89302) * C141507) *
              C5323 +
          ((C42123 * C89302 + C57776 * C141365) * C141507 +
           (C39350 * C89302 + C55017 * C141365) * C141502 +
           (C39349 * C89302 +
            (C29774 * C42110 + C42120 + C42120 + C141219 * C42114) * C141365) *
               C71446) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[44] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                       C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                          C29775 +
                      (C71543 * C114 + C141507 * C195 + C71544 * C828 +
                       C141502 * C917 + C71545 * C2964 + C71446 * C3030) *
                          C141219) *
                         C89302 +
                     ((C125977 + C125978 + C125979) * C29775 +
                      (C125980 + C125981 + C125982) * C141219) *
                         C141365) *
                        C5322 -
                    (((C131202 + C131203 + C131204) * C141219 +
                      (C131205 + C131206 + C131207) * C29775) *
                         C141365 +
                     ((C125982 + C125981 + C125980) * C141219 +
                      (C125979 + C125978 + C125977) * C29775) *
                         C89302) *
                        C5323 +
                    (((C131207 + C131206 + C131205) * C29775 +
                      (C131204 + C131203 + C131202) * C141219) *
                         C89302 +
                     ((C71543 * C21035 + C141507 * C21136 + C71544 * C42109 +
                       C141502 * C42197 + C71545 * C42110 + C71446 * C42198) *
                          C29775 +
                      (C71543 * C21038 + C141507 * C21139 + C71544 * C42111 +
                       C141502 * C42199 + C71545 * C42112 + C71446 * C42200) *
                          C141219) *
                         C141365) *
                        C5324) *
                   C141281 * C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexz[44] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C29775 +
            (C89455 * C114 + C89302 * C282 + C89456 * C1606 + C141365 * C1789) *
                C141219) *
               C141507 +
           ((C98279 + C98280) * C29775 + (C98281 + C98282) * C141219) *
               C141502 +
           C127828 * C71446) *
              C5322 -
          (((C128627 + C128628) * C141219 + (C128629 + C128630) * C29775) *
               C71446 +
           ((C102809 + C102810) * C141219 + (C102811 + C102812) * C29775) *
               C141502 +
           ((C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
             C89302 * C1789) *
                C141219 +
            (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
             C89302 * C1784) *
                C29775) *
               C141507) *
              C5323 +
          (((C89455 * C5325 + C89302 * C5449 + C89456 * C21035 +
             C141365 * C21228) *
                C29775 +
            (C89455 * C5329 + C89302 * C5453 + C89456 * C21038 +
             C141365 * C21231) *
                C141219) *
               C141507 +
           ((C89455 * C13205 + C89302 * C13374 + C89456 * C42109 +
             C141365 * C42293) *
                C29775 +
            (C89455 * C13208 + C89302 * C13377 + C89456 * C42111 +
             C141365 * C42295) *
                C141219) *
               C141502 +
           ((C89455 * C29087 + C89302 * C29251 + C89456 * C42110 +
             C141365 * C42294) *
                C29775 +
            (C89455 * C29089 + C89302 * C29253 + C89456 * C42112 +
             C141365 * C42296) *
                C141219) *
               C71446) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[44] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C71543 +
            (C29775 * C189 + C141219 * C362) * C141507 + C30547 * C71544 +
            C30548 * C141502 + C30549 * C71545 + C30550 * C71446) *
               C89302 +
           (C126179 + C126180 + C126181 + C126182 + C126183 + C126184) *
               C141365) *
              C5322 -
          ((C131356 + C131357 + C131358 + C131359 + C131360 + C131361) *
               C141365 +
           (C126184 + C126183 + C126182 + C126181 + C126180 + C126179) *
               C89302) *
              C5323 +
          ((C131361 + C131360 + C131359 + C131358 + C131357 + C131356) *
               C89302 +
           (C58030 * C71543 + C58029 * C141507 + C55368 * C71544 +
            C55367 * C141502 + (C29775 * C42110 + C141219 * C42112) * C71545 +
            (C29775 * C42198 + C141219 * C42372) * C71446) *
               C141365) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[44] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C71804 * C108 + C71808 + C71808 + C141507 * C419 +
                      C71805 * C823 + C71809 + C71809 + C141502 * C1171 +
                      C71806 * C2960 + C71810 + C71810 + C71446 * C3196) *
                         C141219 * C89302 +
                     (C126301 + C126302 + C126303) * C141219 * C141365) *
                        C5322 -
                    ((C131451 + C131452 + C131453) * C141219 * C141365 +
                     (C126303 + C126302 + C126301) * C141219 * C89302) *
                        C5323 +
                    ((C131453 + C131452 + C131451) * C141219 * C89302 +
                     (C71804 * C21035 + C131442 + C131442 + C141507 * C21403 +
                      C71805 * C42109 + C131443 + C131443 + C141502 * C42459 +
                      C71806 * C42110 + C131444 + C131444 + C71446 * C42460) *
                         C141219 * C141365) *
                        C5324) *
                   C141281 * C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[44] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
               C71543 +
           (C89455 * C189 + C89302 * C501 + C89456 * C1690 + C141365 * C2040) *
               C141507 +
           (C98279 + C98280) * C71544 + (C98697 + C98698) * C141502 +
           C127812 * C71545 + C128054 * C71446) *
              C141219 * C5322 -
          ((C128953 + C128954) * C71446 + (C128629 + C128630) * C71545 +
           (C103207 + C103208) * C141502 + (C102811 + C102812) * C71544 +
           (C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
            C89302 * C2040) *
               C141507 +
           (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
            C89302 * C1784) *
               C71543) *
              C141219 * C5323 +
          ((C89455 * C5325 + C89302 * C5449 + C89456 * C21035 +
            C141365 * C21228) *
               C71543 +
           (C89455 * C5391 + C89302 * C5619 + C89456 * C21136 +
            C141365 * C21491) *
               C141507 +
           (C89455 * C13205 + C89302 * C13374 + C89456 * C42109 +
            C141365 * C42293) *
               C71544 +
           (C89455 * C13294 + C89302 * C13614 + C89456 * C42197 +
            C141365 * C42553) *
               C141502 +
           (C89455 * C29087 + C89302 * C29251 + C89456 * C42110 +
            C141365 * C42294) *
               C71545 +
           (C89455 * C29173 + C89302 * C29487 + C89456 * C42198 +
            C141365 * C42554) *
               C71446) *
              C141219 * C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[44] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C29775 * C108 + C141219 * C114) * C89455 +
                      (C29775 * C276 + C141219 * C579) * C89302 +
                      C37111 * C89456 + C37432 * C141365) *
                         C141507 +
                     (C125557 + C125558 + C125559 + C125560) * C141502 +
                     C128141 * C71446) *
                        C5322 -
                    ((C129053 + C129054 + C129055 + C129056) * C71446 +
                     (C129057 + C129058 + C129059 + C129060) * C141502 +
                     (C42634 * C141365 + C42383 * C89456 + C37432 * C89302 +
                      C37111 * C89455) *
                         C141507) *
                        C5323 +
                    ((C42383 * C89455 + C42634 * C89302 + C58030 * C89456 +
                      C58275 * C141365) *
                         C141507 +
                     (C39706 * C89455 + C40042 * C89302 + C55368 * C89456 +
                      C55701 * C141365) *
                         C141502 +
                     (C39704 * C89455 + C40041 * C89302 +
                      (C29775 * C42110 + C141219 * C42112) * C89456 +
                      (C29775 * C42294 + C141219 * C42630) * C141365) *
                         C71446) *
                        C5324) *
                   C141281 * C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezy[44] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C71543 * C108 + C141507 * C189 + C71544 * C823 +
                      C141502 * C912 + C71545 * C2960 + C71446 * C3026) *
                         C89455 +
                     (C71543 * C276 + C141507 * C635 + C71544 * C1006 +
                      C141502 * C1419 + C71545 * C3084 + C71446 * C3362) *
                         C89302 +
                     (C125977 + C125978 + C125979) * C89456 +
                     (C126604 + C126605 + C126606) * C141365) *
                        C141219 * C5322 -
                    ((C131682 + C131683 + C131684) * C141365 +
                     (C131205 + C131206 + C131207) * C89456 +
                     (C126606 + C126605 + C126604) * C89302 +
                     (C125979 + C125978 + C125977) * C89455) *
                        C141219 * C5323 +
                    ((C131207 + C131206 + C131205) * C89455 +
                     (C131684 + C131683 + C131682) * C89302 +
                     (C71543 * C21035 + C141507 * C21136 + C71544 * C42109 +
                      C141502 * C42197 + C71545 * C42110 + C71446 * C42198) *
                         C89456 +
                     (C71543 * C21228 + C141507 * C21654 + C71544 * C42293 +
                      C141502 * C42708 + C71545 * C42294 + C71446 * C42709) *
                         C141365) *
                        C141219 * C5324) *
                   C141281 * C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezz[44] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
            C89980 + C89980 + C141365 * C2283) *
               C141507 +
           (C99115 + C99116) * C141502 + C128290 * C71446) *
              C141219 * C5322 -
          ((C129276 + C129277) * C71446 + (C103611 + C103612) * C141502 +
           (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
            C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
               C141507) *
              C141219 * C5323 +
          ((C89976 * C5325 + C96969 + C96969 + C89302 * C5781 +
            C89977 * C21035 + C96970 + C96970 + C141365 * C21734) *
               C141507 +
           (C89976 * C13205 + C106835 + C106835 + C89302 * C13845 +
            C89977 * C42109 + C106836 + C106836 + C141365 * C42793) *
               C141502 +
           (C89976 * C29087 + C131759 + C131759 + C89302 * C29715 +
            C89977 * C42110 + C131760 + C131760 + C141365 * C42794) *
               C71446) *
              C141219 * C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141508 +
            C36781 * C141505 + C42123 * C106914) *
               C63607 +
           (C30301 * C141508 + C32721 * C141505 + C39350 * C106914) * C141341) *
              C141298 * C141281 * C97 -
          ((C51452 * C106914 + C35762 * C141505 + C30304 * C141508) * C141341 +
           (C52409 * C106914 + C36782 * C141505 +
            (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141508) *
               C63607) *
              C141298 * C141281 * C98 +
          (((C29774 * C110 + C29785 + C29785 + C141219 * C122) * C141508 +
            (C29774 * C1599 + C35055 + C35055 + C141219 * C1609) * C141505 +
            (C29774 * C5327 + C50751 + C50751 + C141219 * C5335) * C106914) *
               C63607 +
           ((C29774 * C821 + C29786 + C29786 + C141219 * C831) * C141508 +
            (C29774 * C3492 + C35056 + C35056 + C141219 * C3500) * C141505 +
            (C29774 * C13207 + C50752 + C50752 + C141219 * C13213) * C106914) *
               C141341) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C29775 +
            (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                C141219) *
               C141508 +
           ((C81629 + C81630) * C29775 + (C81631 + C81632) * C141219) *
               C141505 +
           ((C88502 + C88501) * C29775 + (C88500 + C88499) * C141219) *
               C106914) *
              C141298 * C141281 * C97 -
          (((C81633 + C81634) * C141219 + (C81635 + C81636) * C29775) *
               C106914 +
           (C81627 * C141219 + C81628 * C29775) * C141505 +
           ((C63737 + C63736) * C141219 + (C63735 + C63734) * C29775) *
               C141508) *
              C141298 * C141281 * C98 +
          ((C63746 * C29775 + C63747 * C141219) * C141508 +
           ((C65640 + C65639) * C29775 + (C65638 + C65637) * C141219) *
               C141505 +
           ((C63707 * C5327 + C63607 * C5393 + C63708 * C13207 +
             C141341 * C13296) *
                C29775 +
            (C63707 * C5331 + C63607 * C5397 + C63708 * C13210 +
             C141341 * C13299) *
                C141219) *
               C106914) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[45] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                       C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                          C29775 +
                      (C107065 * C114 + C141508 * C282 + C107066 * C1606 +
                       C141505 * C1789 + C107067 * C5329 + C106914 * C5453) *
                          C141219) *
                         C63607 +
                     ((C107065 * C823 + C141508 * C1006 + C107066 * C3490 +
                       C141505 * C3646 + C107067 * C13205 + C106914 * C13374) *
                          C29775 +
                      (C107065 * C828 + C141508 * C1011 + C107066 * C3494 +
                       C141505 * C3650 + C107067 * C13208 + C106914 * C13377) *
                          C141219) *
                         C141341) *
                        C141298 * C141281 * C97 -
                    (((C107930 + C107931 + C107932) * C141219 +
                      (C107933 + C107934 + C107935) * C29775) *
                         C141341 +
                     ((C107098 + C107097 + C107096) * C141219 +
                      (C107095 + C107094 + C107093) * C29775) *
                         C63607) *
                        C141298 * C141281 * C98 +
                    (((C107104 + C107103 + C107102) * C29775 +
                      (C107101 + C107100 + C107099) * C141219) *
                         C63607 +
                     ((C107065 * C821 + C141508 * C1004 + C107066 * C3492 +
                       C141505 * C3648 + C107067 * C13207 + C106914 * C13376) *
                          C29775 +
                      (C107065 * C826 + C141508 * C1009 + C107066 * C3496 +
                       C141505 * C3652 + C107067 * C13210 + C106914 * C13379) *
                          C141219) *
                         C141341) *
                        C141298 * C141281 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[45] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C29775 * C108 + C141219 * C114) * C63707 +
                      (C29775 * C189 + C141219 * C362) * C63607 +
                      C30547 * C63708 + C30548 * C141341) *
                         C141508 +
                     (C37111 * C63707 + C37112 * C63607 + C32957 * C63708 +
                      C32956 * C141341) *
                         C141505 +
                     (C42383 * C63707 + C42382 * C63607 + C39706 * C63708 +
                      C39705 * C141341) *
                         C106914) *
                        C141298 * C141281 * C97 -
                    ((C51771 * C141341 + C51770 * C63708 + C52759 * C63607 +
                      C52758 * C63707) *
                         C106914 +
                     (C36105 * C141341 + C36104 * C63708 + C37114 * C63607 +
                      C37113 * C63707) *
                         C141505 +
                     (C30554 * C141341 + C30553 * C63708 +
                      (C29775 * C190 + C141219 * C363) * C63607 +
                      (C29775 * C109 + C141219 * C115) * C63707) *
                         C141508) *
                        C141298 * C141281 * C98 +
                    (((C29775 * C110 + C141219 * C116) * C63707 +
                      (C29775 * C191 + C141219 * C364) * C63607 +
                      (C29775 * C821 + C141219 * C826) * C63708 +
                      (C29775 * C910 + C141219 * C1098) * C141341) *
                         C141508 +
                     ((C29775 * C1599 + C141219 * C1604) * C63707 +
                      (C29775 * C1688 + C141219 * C1876) * C63607 +
                      (C29775 * C3492 + C141219 * C3496) * C63708 +
                      (C29775 * C3574 + C141219 * C3722) * C141341) *
                         C141505 +
                     ((C29775 * C5327 + C141219 * C5331) * C63707 +
                      (C29775 * C5393 + C141219 * C5509) * C63607 +
                      (C29775 * C13207 + C141219 * C13210) * C63708 +
                      (C29775 * C13296 + C141219 * C13456) * C141341) *
                         C106914) *
                        C141298 * C141281 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
            C63973 + C63973 + C141341 * C1171) *
               C141219 * C141508 +
           (C82081 + C82082) * C141219 * C141505 +
           (C88822 + C88821) * C141219 * C106914) *
              C141298 * C141281 * C97 -
          ((C82083 + C82084) * C141219 * C106914 + C82072 * C141219 * C141505 +
           (C64007 + C64006) * C141219 * C141508) *
              C141298 * C141281 * C98 +
          (C64012 * C141219 * C141508 + (C65964 + C65963) * C141219 * C141505 +
           (C63969 * C5327 + C71071 + C71071 + C63607 * C5563 +
            C63970 * C13207 + C71072 + C71072 + C141341 * C13533) *
               C141219 * C106914) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[45] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                      C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                         C63707 +
                     (C107065 * C189 + C141508 * C501 + C107066 * C1690 +
                      C141505 * C2040 + C107067 * C5391 + C106914 * C5619) *
                         C63607 +
                     (C107065 * C823 + C141508 * C1006 + C107066 * C3490 +
                      C141505 * C3646 + C107067 * C13205 + C106914 * C13374) *
                         C63708 +
                     (C107065 * C912 + C141508 * C1262 + C107066 * C3572 +
                      C141505 * C3864 + C107067 * C13294 + C106914 * C13614) *
                         C141341) *
                        C141219 * C141298 * C141281 * C97 -
                    ((C108236 + C108237 + C108238) * C141341 +
                     (C107933 + C107934 + C107935) * C63708 +
                     (C107341 + C107340 + C107339) * C63607 +
                     (C107095 + C107094 + C107093) * C63707) *
                        C141219 * C141298 * C141281 * C98 +
                    ((C107104 + C107103 + C107102) * C63707 +
                     (C107344 + C107343 + C107342) * C63607 +
                     (C107065 * C821 + C141508 * C1004 + C107066 * C3492 +
                      C141505 * C3648 + C107067 * C13207 + C106914 * C13376) *
                         C63708 +
                     (C107065 * C910 + C141508 * C1260 + C107066 * C3574 +
                      C141505 * C3866 + C107067 * C13296 + C106914 * C13616) *
                         C141341) *
                        C141219 * C141298 * C141281 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C107065 +
            (C29775 * C276 + C141219 * C579) * C141508 + C37111 * C107066 +
            C37432 * C141505 + C42383 * C107067 + C42634 * C106914) *
               C63607 +
           (C30547 * C107065 + C30783 * C141508 + C32957 * C107066 +
            C33177 * C141505 + C39706 * C107067 + C40042 * C106914) *
               C141341) *
              C141298 * C141281 * C97 -
          ((C52092 * C106914 + C51770 * C107067 + C36438 * C141505 +
            C36104 * C107066 + C30786 * C141508 + C30553 * C107065) *
               C141341 +
           (C53092 * C106914 + C52758 * C107067 + C37433 * C141505 +
            C37113 * C107066 + (C29775 * C277 + C141219 * C580) * C141508 +
            (C29775 * C109 + C141219 * C115) * C107065) *
               C63607) *
              C141298 * C141281 * C98 +
          (((C29775 * C110 + C141219 * C116) * C107065 +
            (C29775 * C278 + C141219 * C581) * C141508 +
            (C29775 * C1599 + C141219 * C1604) * C107066 +
            (C29775 * C1782 + C141219 * C2124) * C141505 +
            (C29775 * C5327 + C141219 * C5331) * C107067 +
            (C29775 * C5451 + C141219 * C5675) * C106914) *
               C63607 +
           ((C29775 * C821 + C141219 * C826) * C107065 +
            (C29775 * C1004 + C141219 * C1346) * C141508 +
            (C29775 * C3492 + C141219 * C3496) * C107066 +
            (C29775 * C3648 + C141219 * C3936) * C141505 +
            (C29775 * C13207 + C141219 * C13210) * C107067 +
            (C29775 * C13376 + C141219 * C13693) * C106914) *
               C141341) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezy[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
               C107065 +
           (C63707 * C276 + C63607 * C635 + C63708 * C1006 + C141341 * C1419) *
               C141508 +
           (C81629 + C81630) * C107066 + (C82503 + C82504) * C141505 +
           (C88502 + C88501) * C107067 + (C89128 + C89127) * C106914) *
              C141219 * C141298 * C141281 * C97 -
          ((C82505 + C82506) * C106914 + (C81635 + C81636) * C107067 +
           C82502 * C141505 + C81628 * C107066 + (C64264 + C64263) * C141508 +
           (C63735 + C63734) * C107065) *
              C141219 * C141298 * C141281 * C98 +
          (C63746 * C107065 + C64269 * C141508 + (C65640 + C65639) * C107066 +
           (C66278 + C66277) * C141505 +
           (C63707 * C5327 + C63607 * C5393 + C63708 * C13207 +
            C141341 * C13296) *
               C107067 +
           (C63707 * C5451 + C63607 * C5729 + C63708 * C13376 +
            C141341 * C13770) *
               C106914) *
              C141219 * C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[45] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C107578 * C108 + C107582 + C107582 + C141508 * C714 +
                      C107579 * C1601 + C107583 + C107583 + C141505 * C2283 +
                      C107580 * C5325 + C107584 + C107584 + C106914 * C5781) *
                         C63607 +
                     (C107578 * C823 + C108550 + C108550 + C141508 * C1505 +
                      C107579 * C3490 + C108549 + C108549 + C141505 * C4074 +
                      C107580 * C13205 + C108548 + C108548 + C106914 * C13845) *
                         C141341) *
                        C141219 * C141298 * C141281 * C97 -
                    ((C108560 + C108561 + C108562) * C141341 +
                     (C107620 + C107619 + C107618) * C63607) *
                        C141219 * C141298 * C141281 * C98 +
                    ((C107623 + C107622 + C107621) * C63607 +
                     (C107578 * C821 + C108551 + C108551 + C141508 * C1503 +
                      C107579 * C3492 + C108552 + C108552 + C141505 * C4076 +
                      C107580 * C13207 + C108553 + C108553 + C106914 * C13847) *
                         C141341) *
                        C141219 * C141298 * C141281 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141508 +
             C36781 * C141505 + C42123 * C106914) *
                C63607 +
            (C132525 + C132526 + C132527) * C141341) *
               C141298 * C816 -
           ((C39349 * C106914 + C32720 * C141505 + C30302 * C141508) * C141341 +
            (C132527 + C132526 + C132525) * C63607) *
               C141298 * C141497) *
              C818 +
          (((C132528 + C132529 + C132530) * C63607 +
            (C30305 * C141508 + C35763 * C141505 +
             (C29774 * C29088 + C36776 + C36776 + C141219 * C29092) * C106914) *
                C141341) *
               C141298 * C141497 -
           ((C132530 + C132529 + C132528) * C141341 +
            (C52409 * C106914 + C36782 * C141505 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141508) *
                C63607) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C29775 +
             (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                 C141219) *
                C141508 +
            ((C81629 + C81630) * C29775 + (C81631 + C81632) * C141219) *
                C141505 +
            ((C88502 + C88501) * C29775 + (C88500 + C88499) * C141219) *
                C106914) *
               C141298 * C816 -
           (((C63708 * C29089 + C141341 * C29175 + C63707 * C13208 +
              C63607 * C13297) *
                 C141219 +
             (C63708 * C29087 + C141341 * C29173 + C63707 * C13205 +
              C63607 * C13294) *
                 C29775) *
                C106914 +
            ((C84986 + C84985) * C141219 + (C84984 + C84983) * C29775) *
                C141505 +
            ((C63708 * C2964 + C141341 * C3030 + C63707 * C828 +
              C63607 * C917) *
                 C141219 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C29775) *
                C141508) *
               C141298 * C141497) *
              C818 +
          ((((C64608 + C64607) * C29775 + (C64606 + C64605) * C141219) *
                C141508 +
            ((C80372 + C80371) * C29775 + (C80370 + C80369) * C141219) *
                C141505 +
            ((C63707 * C13206 + C63607 * C13295 + C63708 * C29088 +
              C141341 * C29174) *
                 C29775 +
             (C63707 * C13209 + C63607 * C13298 + C63708 * C29090 +
              C141341 * C29176) *
                 C141219) *
                C106914) *
               C141298 * C141497 -
           (((C81633 + C81634) * C141219 + (C81635 + C81636) * C29775) *
                C106914 +
            (C81627 * C141219 + C81628 * C29775) * C141505 +
            ((C63737 + C63736) * C141219 + (C63735 + C63734) * C29775) *
                C141508) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
              C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                 C29775 +
             (C107065 * C114 + C141508 * C282 + C107066 * C1606 +
              C141505 * C1789 + C107067 * C5329 + C106914 * C5453) *
                 C141219) *
                C63607 +
            ((C132739 + C132740 + C132741) * C29775 +
             (C132742 + C132743 + C132744) * C141219) *
                C141341) *
               C141298 * C816 -
           (((C107067 * C29089 + C106914 * C29253 + C107066 * C10473 +
              C141505 * C10702 + C107065 * C2964 + C141508 * C3088) *
                 C141219 +
             (C107067 * C29087 + C106914 * C29251 + C107066 * C10470 +
              C141505 * C10699 + C107065 * C2960 + C141508 * C3084) *
                 C29775) *
                C141341 +
            ((C132744 + C132743 + C132742) * C141219 +
             (C132741 + C132740 + C132739) * C29775) *
                C63607) *
               C141298 * C141497) *
              C818 +
          ((((C107935 + C107934 + C107933) * C29775 +
             (C107932 + C107931 + C107930) * C141219) *
                C63607 +
            ((C107065 * C2961 + C141508 * C3085 + C107066 * C10471 +
              C141505 * C10700 + C107067 * C29088 + C106914 * C29252) *
                 C29775 +
             (C107065 * C2965 + C141508 * C3089 + C107066 * C10474 +
              C141505 * C10703 + C107067 * C29090 + C106914 * C29254) *
                 C141219) *
                C141341) *
               C141298 * C141497 -
           (((C107930 + C107931 + C107932) * C141219 +
             (C107933 + C107934 + C107935) * C29775) *
                C141341 +
            ((C107098 + C107097 + C107096) * C141219 +
             (C107095 + C107094 + C107093) * C29775) *
                C63607) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[46] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C63707 +
                       (C29775 * C189 + C141219 * C362) * C63607 +
                       C30547 * C63708 + C30548 * C141341) *
                          C141508 +
                      (C37111 * C63707 + C37112 * C63607 + C32957 * C63708 +
                       C32956 * C141341) *
                          C141505 +
                      (C42383 * C63707 + C42382 * C63607 + C39706 * C63708 +
                       C39705 * C141341) *
                          C106914) *
                         C141298 * C816 -
                     ((C39703 * C141341 + C39704 * C63708 + C39705 * C63607 +
                       C39706 * C63707) *
                          C106914 +
                      (C32954 * C141341 + C32955 * C63708 + C32956 * C63607 +
                       C32957 * C63707) *
                          C141505 +
                      (C30550 * C141341 + C30549 * C63708 + C30548 * C63607 +
                       C30547 * C63707) *
                          C141508) *
                         C141298 * C141497) *
                        C818 +
                    (((C30553 * C63707 + C30554 * C63607 + C30555 * C63708 +
                       C30556 * C141341) *
                          C141508 +
                      (C36104 * C63707 + C36105 * C63607 + C36106 * C63708 +
                       C36107 * C141341) *
                          C141505 +
                      (C51770 * C63707 + C51771 * C63607 +
                       (C29775 * C29088 + C141219 * C29090) * C63708 +
                       (C29775 * C29174 + C141219 * C29330) * C141341) *
                          C106914) *
                         C141298 * C141497 -
                     ((C51771 * C141341 + C51770 * C63708 + C52759 * C63607 +
                       C52758 * C63707) *
                          C106914 +
                      (C36105 * C141341 + C36104 * C63708 + C37114 * C63607 +
                       C37113 * C63707) *
                          C141505 +
                      (C30554 * C141341 + C30553 * C63708 +
                       (C29775 * C190 + C141219 * C363) * C63607 +
                       (C29775 * C109 + C141219 * C115) * C63707) *
                          C141508) *
                         C141298 * C816) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
             C63973 + C63973 + C141341 * C1171) *
                C141219 * C141508 +
            (C82081 + C82082) * C141219 * C141505 +
            (C88822 + C88821) * C141219 * C106914) *
               C141298 * C816 -
           ((C63970 * C29087 + C85398 + C85398 + C141341 * C29405 +
             C63969 * C13205 + C85397 + C85397 + C63607 * C13531) *
                C141219 * C106914 +
            (C85406 + C85405) * C141219 * C141505 +
            (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
             C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                C141219 * C141508) *
               C141298 * C141497) *
              C818 +
          (((C64978 + C64977) * C141219 * C141508 +
            (C80788 + C80787) * C141219 * C141505 +
            (C63969 * C13206 + C85399 + C85399 + C63607 * C13532 +
             C63970 * C29088 + C85400 + C85400 + C141341 * C29406) *
                C141219 * C106914) *
               C141298 * C141497 -
           ((C82083 + C82084) * C141219 * C106914 + C82072 * C141219 * C141505 +
            (C64007 + C64006) * C141219 * C141508) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[46] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                       C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                          C63707 +
                      (C107065 * C189 + C141508 * C501 + C107066 * C1690 +
                       C141505 * C2040 + C107067 * C5391 + C106914 * C5619) *
                          C63607 +
                      (C132739 + C132740 + C132741) * C63708 +
                      (C133045 + C133046 + C133047) * C141341) *
                         C141219 * C141298 * C816 -
                     ((C107067 * C29173 + C106914 * C29487 + C107066 * C10595 +
                       C141505 * C11041 + C107065 * C3026 + C141508 * C3254) *
                          C141341 +
                      (C107067 * C29087 + C106914 * C29251 + C107066 * C10470 +
                       C141505 * C10699 + C107065 * C2960 + C141508 * C3084) *
                          C63708 +
                      (C133047 + C133046 + C133045) * C63607 +
                      (C132741 + C132740 + C132739) * C63707) *
                         C141219 * C141298 * C141497) *
                        C818 +
                    (((C107935 + C107934 + C107933) * C63707 +
                      (C108238 + C108237 + C108236) * C63607 +
                      (C107065 * C2961 + C141508 * C3085 + C107066 * C10471 +
                       C141505 * C10700 + C107067 * C29088 + C106914 * C29252) *
                          C63708 +
                      (C107065 * C3027 + C141508 * C3255 + C107066 * C10596 +
                       C141505 * C11042 + C107067 * C29174 + C106914 * C29488) *
                          C141341) *
                         C141219 * C141298 * C141497 -
                     ((C108236 + C108237 + C108238) * C141341 +
                      (C107933 + C107934 + C107935) * C63708 +
                      (C107341 + C107340 + C107339) * C63607 +
                      (C107095 + C107094 + C107093) * C63707) *
                         C141219 * C141298 * C816) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C107065 +
             (C29775 * C276 + C141219 * C579) * C141508 + C37111 * C107066 +
             C37432 * C141505 + C42383 * C107067 + C42634 * C106914) *
                C63607 +
            (C133146 + C133147 + C133148 + C133149 + C133150 + C133151) *
                C141341) *
               C141298 * C816 -
           ((C40041 * C106914 + C39704 * C107067 + C33176 * C141505 +
             C32955 * C107066 + C30784 * C141508 + C30549 * C107065) *
                C141341 +
            (C133151 + C133150 + C133149 + C133148 + C133147 + C133146) *
                C63607) *
               C141298 * C141497) *
              C818 +
          (((C133152 + C133153 + C133154 + C133155 + C133156 + C133157) *
                C63607 +
            (C30555 * C107065 + C30787 * C141508 + C36106 * C107066 +
             C36439 * C141505 + (C29775 * C29088 + C141219 * C29090) * C107067 +
             (C29775 * C29252 + C141219 * C29564) * C106914) *
                C141341) *
               C141298 * C141497 -
           ((C133157 + C133156 + C133155 + C133154 + C133153 + C133152) *
                C141341 +
            (C53092 * C106914 + C52758 * C107067 + C37433 * C141505 +
             C37113 * C107066 + (C29775 * C277 + C141219 * C580) * C141508 +
             (C29775 * C109 + C141219 * C115) * C107065) *
                C63607) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C107065 +
            (C63707 * C276 + C63607 * C635 + C63708 * C1006 + C141341 * C1419) *
                C141508 +
            (C81629 + C81630) * C107066 + (C82503 + C82504) * C141505 +
            (C88502 + C88501) * C107067 + (C89128 + C89127) * C106914) *
               C141219 * C141298 * C816 -
           ((C63708 * C29251 + C141341 * C29639 + C63707 * C13374 +
             C63607 * C13768) *
                C106914 +
            (C63708 * C29087 + C141341 * C29173 + C63707 * C13205 +
             C63607 * C13294) *
                C107067 +
            (C85810 + C85809) * C141505 + (C84984 + C84983) * C107066 +
            (C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
             C63607 * C1419) *
                C141508 +
            (C63708 * C2960 + C141341 * C3026 + C63707 * C823 + C63607 * C912) *
                C107065) *
               C141219 * C141298 * C141497) *
              C818 +
          (((C64608 + C64607) * C107065 + (C65310 + C65309) * C141508 +
            (C80372 + C80371) * C107066 + (C81192 + C81191) * C141505 +
            (C63707 * C13206 + C63607 * C13295 + C63708 * C29088 +
             C141341 * C29174) *
                C107067 +
            (C63707 * C13375 + C63607 * C13769 + C63708 * C29252 +
             C141341 * C29640) *
                C106914) *
               C141219 * C141298 * C141497 -
           ((C82505 + C82506) * C106914 + (C81635 + C81636) * C107067 +
            C82502 * C141505 + C81628 * C107066 + (C64264 + C64263) * C141508 +
            (C63735 + C63734) * C107065) *
               C141219 * C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C107578 * C108 + C107582 + C107582 + C141508 * C714 +
             C107579 * C1601 + C107583 + C107583 + C141505 * C2283 +
             C107580 * C5325 + C107584 + C107584 + C106914 * C5781) *
                C63607 +
            (C133366 + C133367 + C133368) * C141341) *
               C141219 * C141298 * C816 -
           ((C107580 * C29087 + C111106 + C111106 + C106914 * C29715 +
             C107579 * C10470 + C111105 + C111105 + C141505 * C11356 +
             C107578 * C2960 + C111104 + C111104 + C141508 * C3416) *
                C141341 +
            (C133368 + C133367 + C133366) * C63607) *
               C141219 * C141298 * C141497) *
              C818 +
          (((C108562 + C108561 + C108560) * C63607 +
            (C107578 * C2961 + C111107 + C111107 + C141508 * C3417 +
             C107579 * C10471 + C111108 + C111108 + C141505 * C11357 +
             C107580 * C29088 + C111109 + C111109 + C106914 * C29716) *
                C141341) *
               C141219 * C141298 * C141497 -
           ((C108560 + C108561 + C108562) * C141341 +
            (C107620 + C107619 + C107618) * C63607) *
               C141219 * C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141508 +
             C36781 * C141505 + C42123 * C106914) *
                C63607 +
            (C132525 + C132526 + C132527) * C141341) *
               C1596 -
           ((C55017 * C106914 + C39350 * C141505 + C32721 * C141508) * C141341 +
            (C57776 * C106914 + C42123 * C141505 + C36781 * C141508) * C63607) *
               C141499) *
              C141281 * C818 +
          (((C36782 * C141508 + C52409 * C141505 + C59584 * C106914) * C63607 +
            (C35762 * C141508 + C51452 * C141505 +
             (C29774 * C47290 + C52406 + C52406 + C141219 * C47292) * C106914) *
                C141341) *
               C141499 -
           ((C132530 + C132529 + C132528) * C141341 +
            (C52409 * C106914 + C36782 * C141505 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141508) *
                C63607) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C29775 +
             (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                 C141219) *
                C141508 +
            ((C81629 + C81630) * C29775 + (C81631 + C81632) * C141219) *
                C141505 +
            ((C88502 + C88501) * C29775 + (C88500 + C88499) * C141219) *
                C106914) *
               C1596 -
           (((C63708 * C42111 + C141341 * C42199 + C63707 * C21038 +
              C63607 * C21139) *
                 C141219 +
             (C63708 * C42109 + C141341 * C42197 + C63707 * C21035 +
              C63607 * C21136) *
                 C29775) *
                C106914 +
            ((C88499 + C88500) * C141219 + (C88501 + C88502) * C29775) *
                C141505 +
            ((C81632 + C81631) * C141219 + (C81630 + C81629) * C29775) *
                C141508) *
               C141499) *
              C141281 * C818 +
          (((C81617 * C29775 + C81618 * C141219) * C141508 +
            ((C81636 + C81635) * C29775 + (C81634 + C81633) * C141219) *
                C141505 +
            ((C63707 * C21036 + C63607 * C21137 + C63708 * C47290 +
              C141341 * C47403) *
                 C29775 +
             (C63707 * C21039 + C63607 * C21140 + C63708 * C47291 +
              C141341 * C47404) *
                 C141219) *
                C106914) *
               C141499 -
           (((C81633 + C81634) * C141219 + (C81635 + C81636) * C29775) *
                C106914 +
            (C81627 * C141219 + C81628 * C29775) * C141505 +
            ((C63737 + C63736) * C141219 + (C63735 + C63734) * C29775) *
                C141508) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
              C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                 C29775 +
             (C107065 * C114 + C141508 * C282 + C107066 * C1606 +
              C141505 * C1789 + C107067 * C5329 + C106914 * C5453) *
                 C141219) *
                C63607 +
            ((C132739 + C132740 + C132741) * C29775 +
             (C132742 + C132743 + C132744) * C141219) *
                C141341) *
               C1596 -
           (((C107067 * C42111 + C106914 * C42295 + C107066 * C13208 +
              C141505 * C13377 + C107065 * C3494 + C141508 * C3650) *
                 C141219 +
             (C107067 * C42109 + C106914 * C42293 + C107066 * C13205 +
              C141505 * C13374 + C107065 * C3490 + C141508 * C3646) *
                 C29775) *
                C141341 +
            ((C107067 * C21038 + C106914 * C21231 + C107066 * C5329 +
              C141505 * C5453 + C107065 * C1606 + C141508 * C1789) *
                 C141219 +
             (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
              C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                 C29775) *
                C63607) *
               C141499) *
              C141281 * C818 +
          ((((C108902 + C108901 + C108900) * C29775 +
             (C108899 + C108898 + C108897) * C141219) *
                C63607 +
            ((C107065 * C3491 + C141508 * C3647 + C107066 * C13206 +
              C141505 * C13375 + C107067 * C47290 + C106914 * C47517) *
                 C29775 +
             (C107065 * C3495 + C141508 * C3651 + C107066 * C13209 +
              C141505 * C13378 + C107067 * C47291 + C106914 * C47518) *
                 C141219) *
                C141341) *
               C141499 -
           (((C107930 + C107931 + C107932) * C141219 +
             (C107933 + C107934 + C107935) * C29775) *
                C141341 +
            ((C107098 + C107097 + C107096) * C141219 +
             (C107095 + C107094 + C107093) * C29775) *
                C63607) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[47] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C63707 +
                       (C29775 * C189 + C141219 * C362) * C63607 +
                       C30547 * C63708 + C30548 * C141341) *
                          C141508 +
                      (C133761 + C133762 + C133763 + C133764) * C141505 +
                      (C133765 + C133766 + C133767 + C133768) * C106914) *
                         C1596 -
                     ((C55367 * C141341 + C55368 * C63708 + C58029 * C63607 +
                       C58030 * C63707) *
                          C106914 +
                      (C133768 + C133767 + C133766 + C133765) * C141505 +
                      (C133764 + C133763 + C133762 + C133761) * C141508) *
                         C141499) *
                        C141281 * C818 +
                    (((C133769 + C133770 + C133771 + C133772) * C141508 +
                      (C133773 + C133774 + C133775 + C133776) * C141505 +
                      (C59809 * C63707 + C59810 * C63607 +
                       (C29775 * C47290 + C141219 * C47291) * C63708 +
                       (C29775 * C47403 + C141219 * C47617) * C141341) *
                          C106914) *
                         C141499 -
                     ((C133776 + C133775 + C133774 + C133773) * C106914 +
                      (C133772 + C133771 + C133770 + C133769) * C141505 +
                      (C30554 * C141341 + C30553 * C63708 +
                       (C29775 * C190 + C141219 * C363) * C63607 +
                       (C29775 * C109 + C141219 * C115) * C63707) *
                          C141508) *
                         C1596) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
             C63973 + C63973 + C141341 * C1171) *
                C141219 * C141508 +
            (C82081 + C82082) * C141219 * C141505 +
            (C88822 + C88821) * C141219 * C106914) *
               C1596 -
           ((C63970 * C42109 + C88814 + C88814 + C141341 * C42459 +
             C63969 * C21035 + C88813 + C88813 + C63607 * C21403) *
                C141219 * C106914 +
            (C88821 + C88822) * C141219 * C141505 +
            (C82082 + C82081) * C141219 * C141508) *
               C141499) *
              C141281 * C818 +
          ((C82067 * C141219 * C141508 + (C82084 + C82083) * C141219 * C141505 +
            (C63969 * C21036 + C88815 + C88815 + C63607 * C21404 +
             C63970 * C47290 + C88816 + C88816 + C141341 * C47728) *
                C141219 * C106914) *
               C141499 -
           ((C82083 + C82084) * C141219 * C106914 + C82072 * C141219 * C141505 +
            (C64007 + C64006) * C141219 * C141508) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[47] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                       C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                          C63707 +
                      (C107065 * C189 + C141508 * C501 + C107066 * C1690 +
                       C141505 * C2040 + C107067 * C5391 + C106914 * C5619) *
                          C63607 +
                      (C132739 + C132740 + C132741) * C63708 +
                      (C133045 + C133046 + C133047) * C141341) *
                         C141219 * C1596 -
                     ((C107067 * C42197 + C106914 * C42553 + C107066 * C13294 +
                       C141505 * C13614 + C107065 * C3572 + C141508 * C3864) *
                          C141341 +
                      (C107067 * C42109 + C106914 * C42293 + C107066 * C13205 +
                       C141505 * C13374 + C107065 * C3490 + C141508 * C3646) *
                          C63708 +
                      (C107067 * C21136 + C106914 * C21491 + C107066 * C5391 +
                       C141505 * C5619 + C107065 * C1690 + C141508 * C2040) *
                          C63607 +
                      (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
                       C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                          C63707) *
                         C141219 * C141499) *
                        C141281 * C818 +
                    (((C108902 + C108901 + C108900) * C63707 +
                      (C109225 + C109224 + C109223) * C63607 +
                      (C107065 * C3491 + C141508 * C3647 + C107066 * C13206 +
                       C141505 * C13375 + C107067 * C47290 + C106914 * C47517) *
                          C63708 +
                      (C107065 * C3573 + C141508 * C3865 + C107066 * C13295 +
                       C141505 * C13615 + C107067 * C47403 + C106914 * C47838) *
                          C141341) *
                         C141219 * C141499 -
                     ((C108236 + C108237 + C108238) * C141341 +
                      (C107933 + C107934 + C107935) * C63708 +
                      (C107341 + C107340 + C107339) * C63607 +
                      (C107095 + C107094 + C107093) * C63707) *
                         C141219 * C1596) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C107065 +
             (C29775 * C276 + C141219 * C579) * C141508 + C37111 * C107066 +
             C37432 * C141505 + C42383 * C107067 + C42634 * C106914) *
                C63607 +
            (C133146 + C133147 + C133148 + C133149 + C133150 + C133151) *
                C141341) *
               C1596 -
           ((C55701 * C106914 + C55368 * C107067 + C40042 * C141505 +
             C39706 * C107066 + C33177 * C141508 + C32957 * C107065) *
                C141341 +
            (C58275 * C106914 + C58030 * C107067 + C42634 * C141505 +
             C42383 * C107066 + C37432 * C141508 + C37111 * C107065) *
                C63607) *
               C141499) *
              C141281 * C818 +
          (((C37113 * C107065 + C37433 * C141508 + C52758 * C107066 +
             C53092 * C141505 + C59809 * C107067 + C60019 * C106914) *
                C63607 +
            (C36104 * C107065 + C36438 * C141508 + C51770 * C107066 +
             C52092 * C141505 + (C29775 * C47290 + C141219 * C47291) * C107067 +
             (C29775 * C47517 + C141219 * C47937) * C106914) *
                C141341) *
               C141499 -
           ((C133157 + C133156 + C133155 + C133154 + C133153 + C133152) *
                C141341 +
            (C53092 * C106914 + C52758 * C107067 + C37433 * C141505 +
             C37113 * C107066 + (C29775 * C277 + C141219 * C580) * C141508 +
             (C29775 * C109 + C141219 * C115) * C107065) *
                C63607) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C107065 +
            (C63707 * C276 + C63607 * C635 + C63708 * C1006 + C141341 * C1419) *
                C141508 +
            (C81629 + C81630) * C107066 + (C82503 + C82504) * C141505 +
            (C88502 + C88501) * C107067 + (C89128 + C89127) * C106914) *
               C141219 * C1596 -
           ((C63708 * C42293 + C141341 * C42708 + C63707 * C21228 +
             C63607 * C21654) *
                C106914 +
            (C63708 * C42109 + C141341 * C42197 + C63707 * C21035 +
             C63607 * C21136) *
                C107067 +
            (C89127 + C89128) * C141505 + (C88501 + C88502) * C107066 +
            (C82504 + C82503) * C141508 + (C81630 + C81629) * C107065) *
               C141219 * C141499) *
              C141281 * C818 +
          ((C81617 * C107065 + C82497 * C141508 + (C81636 + C81635) * C107066 +
            (C82506 + C82505) * C141505 +
            (C63707 * C21036 + C63607 * C21137 + C63708 * C47290 +
             C141341 * C47403) *
                C107067 +
            (C63707 * C21229 + C63607 * C21655 + C63708 * C47517 +
             C141341 * C48042) *
                C106914) *
               C141219 * C141499 -
           ((C82505 + C82506) * C106914 + (C81635 + C81636) * C107067 +
            C82502 * C141505 + C81628 * C107066 + (C64264 + C64263) * C141508 +
            (C63735 + C63734) * C107065) *
               C141219 * C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C107578 * C108 + C107582 + C107582 + C141508 * C714 +
             C107579 * C1601 + C107583 + C107583 + C141505 * C2283 +
             C107580 * C5325 + C107584 + C107584 + C106914 * C5781) *
                C63607 +
            (C133366 + C133367 + C133368) * C141341) *
               C141219 * C1596 -
           ((C107580 * C42109 + C112006 + C112006 + C106914 * C42793 +
             C107579 * C13205 + C112005 + C112005 + C141505 * C13845 +
             C107578 * C3490 + C112004 + C112004 + C141508 * C4074) *
                C141341 +
            (C107580 * C21035 + C109541 + C109541 + C106914 * C21734 +
             C107579 * C5325 + C109542 + C109542 + C141505 * C5781 +
             C107578 * C1601 + C109543 + C109543 + C141508 * C2283) *
                C63607) *
               C141219 * C141499) *
              C141281 * C818 +
          (((C109555 + C109554 + C109553) * C63607 +
            (C107578 * C3491 + C112007 + C112007 + C141508 * C4075 +
             C107579 * C13206 + C112008 + C112008 + C141505 * C13846 +
             C107580 * C47290 + C112009 + C112009 + C106914 * C48144) *
                C141341) *
               C141219 * C141499 -
           ((C108560 + C108561 + C108562) * C141341 +
            (C107620 + C107619 + C107618) * C63607) *
               C141219 * C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141508 +
             C36781 * C141505 + C42123 * C106914) *
                C63607 +
            (C132525 + C132526 + C132527) * C141341) *
               C141298 * C2374 -
           ((C39349 * C106914 + C32720 * C141505 + C30302 * C141508) * C141341 +
            (C132527 + C132526 + C132525) * C63607) *
               C141298 * C141497) *
              C2376 +
          (((C132528 + C132529 + C132530) * C63607 +
            (C30305 * C141508 + C35763 * C141505 +
             (C29774 * C29088 + C36776 + C36776 + C141219 * C29092) * C106914) *
                C141341) *
               C141298 * C141497 -
           ((C132530 + C132529 + C132528) * C141341 +
            (C52409 * C106914 + C36782 * C141505 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141508) *
                C63607) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C29775 +
             (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                 C141219) *
                C141508 +
            ((C81629 + C81630) * C29775 + (C81631 + C81632) * C141219) *
                C141505 +
            ((C88502 + C88501) * C29775 + (C88500 + C88499) * C141219) *
                C106914) *
               C141298 * C2374 -
           (((C63708 * C29089 + C141341 * C29175 + C63707 * C13208 +
              C63607 * C13297) *
                 C141219 +
             (C63708 * C29087 + C141341 * C29173 + C63707 * C13205 +
              C63607 * C13294) *
                 C29775) *
                C106914 +
            ((C84986 + C84985) * C141219 + (C84984 + C84983) * C29775) *
                C141505 +
            ((C63708 * C2964 + C141341 * C3030 + C63707 * C828 +
              C63607 * C917) *
                 C141219 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C29775) *
                C141508) *
               C141298 * C141497) *
              C2376 +
          ((((C64608 + C64607) * C29775 + (C64606 + C64605) * C141219) *
                C141508 +
            ((C80372 + C80371) * C29775 + (C80370 + C80369) * C141219) *
                C141505 +
            ((C63707 * C13206 + C63607 * C13295 + C63708 * C29088 +
              C141341 * C29174) *
                 C29775 +
             (C63707 * C13209 + C63607 * C13298 + C63708 * C29090 +
              C141341 * C29176) *
                 C141219) *
                C106914) *
               C141298 * C141497 -
           (((C81633 + C81634) * C141219 + (C81635 + C81636) * C29775) *
                C106914 +
            (C81627 * C141219 + C81628 * C29775) * C141505 +
            ((C63737 + C63736) * C141219 + (C63735 + C63734) * C29775) *
                C141508) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
              C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                 C29775 +
             (C107065 * C114 + C141508 * C282 + C107066 * C1606 +
              C141505 * C1789 + C107067 * C5329 + C106914 * C5453) *
                 C141219) *
                C63607 +
            ((C132739 + C132740 + C132741) * C29775 +
             (C132742 + C132743 + C132744) * C141219) *
                C141341) *
               C141298 * C2374 -
           (((C107067 * C29089 + C106914 * C29253 + C107066 * C10473 +
              C141505 * C10702 + C107065 * C2964 + C141508 * C3088) *
                 C141219 +
             (C107067 * C29087 + C106914 * C29251 + C107066 * C10470 +
              C141505 * C10699 + C107065 * C2960 + C141508 * C3084) *
                 C29775) *
                C141341 +
            ((C132744 + C132743 + C132742) * C141219 +
             (C132741 + C132740 + C132739) * C29775) *
                C63607) *
               C141298 * C141497) *
              C2376 +
          ((((C107935 + C107934 + C107933) * C29775 +
             (C107932 + C107931 + C107930) * C141219) *
                C63607 +
            ((C107065 * C2961 + C141508 * C3085 + C107066 * C10471 +
              C141505 * C10700 + C107067 * C29088 + C106914 * C29252) *
                 C29775 +
             (C107065 * C2965 + C141508 * C3089 + C107066 * C10474 +
              C141505 * C10703 + C107067 * C29090 + C106914 * C29254) *
                 C141219) *
                C141341) *
               C141298 * C141497 -
           (((C107930 + C107931 + C107932) * C141219 +
             (C107933 + C107934 + C107935) * C29775) *
                C141341 +
            ((C107098 + C107097 + C107096) * C141219 +
             (C107095 + C107094 + C107093) * C29775) *
                C63607) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[48] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C63707 +
                       (C29775 * C189 + C141219 * C362) * C63607 +
                       C30547 * C63708 + C30548 * C141341) *
                          C141508 +
                      (C133761 + C133762 + C133763 + C133764) * C141505 +
                      (C133765 + C133766 + C133767 + C133768) * C106914) *
                         C141298 * C2374 -
                     ((C39703 * C141341 + C39704 * C63708 + C39705 * C63607 +
                       C39706 * C63707) *
                          C106914 +
                      (C32954 * C141341 + C32955 * C63708 + C32956 * C63607 +
                       C32957 * C63707) *
                          C141505 +
                      (C30550 * C141341 + C30549 * C63708 + C30548 * C63607 +
                       C30547 * C63707) *
                          C141508) *
                         C141298 * C141497) *
                        C2376 +
                    (((C30553 * C63707 + C30554 * C63607 + C30555 * C63708 +
                       C30556 * C141341) *
                          C141508 +
                      (C36104 * C63707 + C36105 * C63607 + C36106 * C63708 +
                       C36107 * C141341) *
                          C141505 +
                      (C51770 * C63707 + C51771 * C63607 +
                       (C29775 * C29088 + C141219 * C29090) * C63708 +
                       (C29775 * C29174 + C141219 * C29330) * C141341) *
                          C106914) *
                         C141298 * C141497 -
                     ((C133776 + C133775 + C133774 + C133773) * C106914 +
                      (C133772 + C133771 + C133770 + C133769) * C141505 +
                      (C30554 * C141341 + C30553 * C63708 +
                       (C29775 * C190 + C141219 * C363) * C63607 +
                       (C29775 * C109 + C141219 * C115) * C63707) *
                          C141508) *
                         C141298 * C2374) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
             C63973 + C63973 + C141341 * C1171) *
                C141219 * C141508 +
            (C82081 + C82082) * C141219 * C141505 +
            (C88822 + C88821) * C141219 * C106914) *
               C141298 * C2374 -
           ((C63970 * C29087 + C85398 + C85398 + C141341 * C29405 +
             C63969 * C13205 + C85397 + C85397 + C63607 * C13531) *
                C141219 * C106914 +
            (C85406 + C85405) * C141219 * C141505 +
            (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
             C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                C141219 * C141508) *
               C141298 * C141497) *
              C2376 +
          (((C64978 + C64977) * C141219 * C141508 +
            (C80788 + C80787) * C141219 * C141505 +
            (C63969 * C13206 + C85399 + C85399 + C63607 * C13532 +
             C63970 * C29088 + C85400 + C85400 + C141341 * C29406) *
                C141219 * C106914) *
               C141298 * C141497 -
           ((C82083 + C82084) * C141219 * C106914 + C82072 * C141219 * C141505 +
            (C64007 + C64006) * C141219 * C141508) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[48] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                       C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                          C63707 +
                      (C107065 * C189 + C141508 * C501 + C107066 * C1690 +
                       C141505 * C2040 + C107067 * C5391 + C106914 * C5619) *
                          C63607 +
                      (C132739 + C132740 + C132741) * C63708 +
                      (C133045 + C133046 + C133047) * C141341) *
                         C141219 * C141298 * C2374 -
                     ((C107067 * C29173 + C106914 * C29487 + C107066 * C10595 +
                       C141505 * C11041 + C107065 * C3026 + C141508 * C3254) *
                          C141341 +
                      (C107067 * C29087 + C106914 * C29251 + C107066 * C10470 +
                       C141505 * C10699 + C107065 * C2960 + C141508 * C3084) *
                          C63708 +
                      (C133047 + C133046 + C133045) * C63607 +
                      (C132741 + C132740 + C132739) * C63707) *
                         C141219 * C141298 * C141497) *
                        C2376 +
                    (((C107935 + C107934 + C107933) * C63707 +
                      (C108238 + C108237 + C108236) * C63607 +
                      (C107065 * C2961 + C141508 * C3085 + C107066 * C10471 +
                       C141505 * C10700 + C107067 * C29088 + C106914 * C29252) *
                          C63708 +
                      (C107065 * C3027 + C141508 * C3255 + C107066 * C10596 +
                       C141505 * C11042 + C107067 * C29174 + C106914 * C29488) *
                          C141341) *
                         C141219 * C141298 * C141497 -
                     ((C108236 + C108237 + C108238) * C141341 +
                      (C107933 + C107934 + C107935) * C63708 +
                      (C107341 + C107340 + C107339) * C63607 +
                      (C107095 + C107094 + C107093) * C63707) *
                         C141219 * C141298 * C2374) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C107065 +
             (C29775 * C276 + C141219 * C579) * C141508 + C37111 * C107066 +
             C37432 * C141505 + C42383 * C107067 + C42634 * C106914) *
                C63607 +
            (C133146 + C133147 + C133148 + C133149 + C133150 + C133151) *
                C141341) *
               C141298 * C2374 -
           ((C40041 * C106914 + C39704 * C107067 + C33176 * C141505 +
             C32955 * C107066 + C30784 * C141508 + C30549 * C107065) *
                C141341 +
            (C133151 + C133150 + C133149 + C133148 + C133147 + C133146) *
                C63607) *
               C141298 * C141497) *
              C2376 +
          (((C133152 + C133153 + C133154 + C133155 + C133156 + C133157) *
                C63607 +
            (C30555 * C107065 + C30787 * C141508 + C36106 * C107066 +
             C36439 * C141505 + (C29775 * C29088 + C141219 * C29090) * C107067 +
             (C29775 * C29252 + C141219 * C29564) * C106914) *
                C141341) *
               C141298 * C141497 -
           ((C133157 + C133156 + C133155 + C133154 + C133153 + C133152) *
                C141341 +
            (C53092 * C106914 + C52758 * C107067 + C37433 * C141505 +
             C37113 * C107066 + (C29775 * C277 + C141219 * C580) * C141508 +
             (C29775 * C109 + C141219 * C115) * C107065) *
                C63607) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C107065 +
            (C63707 * C276 + C63607 * C635 + C63708 * C1006 + C141341 * C1419) *
                C141508 +
            (C81629 + C81630) * C107066 + (C82503 + C82504) * C141505 +
            (C88502 + C88501) * C107067 + (C89128 + C89127) * C106914) *
               C141219 * C141298 * C2374 -
           ((C63708 * C29251 + C141341 * C29639 + C63707 * C13374 +
             C63607 * C13768) *
                C106914 +
            (C63708 * C29087 + C141341 * C29173 + C63707 * C13205 +
             C63607 * C13294) *
                C107067 +
            (C85810 + C85809) * C141505 + (C84984 + C84983) * C107066 +
            (C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
             C63607 * C1419) *
                C141508 +
            (C63708 * C2960 + C141341 * C3026 + C63707 * C823 + C63607 * C912) *
                C107065) *
               C141219 * C141298 * C141497) *
              C2376 +
          (((C64608 + C64607) * C107065 + (C65310 + C65309) * C141508 +
            (C80372 + C80371) * C107066 + (C81192 + C81191) * C141505 +
            (C63707 * C13206 + C63607 * C13295 + C63708 * C29088 +
             C141341 * C29174) *
                C107067 +
            (C63707 * C13375 + C63607 * C13769 + C63708 * C29252 +
             C141341 * C29640) *
                C106914) *
               C141219 * C141298 * C141497 -
           ((C82505 + C82506) * C106914 + (C81635 + C81636) * C107067 +
            C82502 * C141505 + C81628 * C107066 + (C64264 + C64263) * C141508 +
            (C63735 + C63734) * C107065) *
               C141219 * C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C107578 * C108 + C107582 + C107582 + C141508 * C714 +
             C107579 * C1601 + C107583 + C107583 + C141505 * C2283 +
             C107580 * C5325 + C107584 + C107584 + C106914 * C5781) *
                C63607 +
            (C133366 + C133367 + C133368) * C141341) *
               C141219 * C141298 * C2374 -
           ((C107580 * C29087 + C111106 + C111106 + C106914 * C29715 +
             C107579 * C10470 + C111105 + C111105 + C141505 * C11356 +
             C107578 * C2960 + C111104 + C111104 + C141508 * C3416) *
                C141341 +
            (C133368 + C133367 + C133366) * C63607) *
               C141219 * C141298 * C141497) *
              C2376 +
          (((C108562 + C108561 + C108560) * C63607 +
            (C107578 * C2961 + C111107 + C111107 + C141508 * C3417 +
             C107579 * C10471 + C111108 + C111108 + C141505 * C11357 +
             C107580 * C29088 + C111109 + C111109 + C106914 * C29716) *
                C141341) *
               C141219 * C141298 * C141497 -
           ((C108560 + C108561 + C108562) * C141341 +
            (C107620 + C107619 + C107618) * C63607) *
               C141219 * C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141508 +
            C36781 * C141505 + C42123 * C106914) *
               C63607 +
           (C132525 + C132526 + C132527) * C141341) *
              C141298 * C2956 -
          ((C135223 + C135224 + C135225) * C141341 +
           (C132527 + C132526 + C132525) * C63607) *
              C141298 * C2957 +
          ((C135225 + C135224 + C135223) * C63607 +
           (C30303 * C141508 + C32719 * C141505 +
            (C29774 * C34558 + C34565 + C34565 + C141219 * C34560) * C106914) *
               C141341) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C29775 +
            (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                C141219) *
               C141508 +
           ((C81629 + C81630) * C29775 + (C81631 + C81632) * C141219) *
               C141505 +
           ((C88502 + C88501) * C29775 + (C88500 + C88499) * C141219) *
               C106914) *
              C141298 * C2956 -
          (((C63708 * C29089 + C141341 * C29175 + C63707 * C13208 +
             C63607 * C13297) *
                C141219 +
            (C63708 * C29087 + C141341 * C29173 + C63707 * C13205 +
             C63607 * C13294) *
                C29775) *
               C106914 +
           ((C84986 + C84985) * C141219 + (C84984 + C84983) * C29775) *
               C141505 +
           ((C63708 * C2964 + C141341 * C3030 + C63707 * C828 + C63607 * C917) *
                C141219 +
            (C63708 * C2960 + C141341 * C3026 + C63707 * C823 + C63607 * C912) *
                C29775) *
               C141508) *
              C141298 * C2957 +
          (((C63707 * C2960 + C63607 * C3026 + C63708 * C9667 +
             C141341 * C9768) *
                C29775 +
            (C63707 * C2964 + C63607 * C3030 + C63708 * C9670 +
             C141341 * C9771) *
                C141219) *
               C141508 +
           ((C63707 * C10470 + C63607 * C10595 + C63708 * C26351 +
             C141341 * C26477) *
                C29775 +
            (C63707 * C10473 + C63607 * C10598 + C63708 * C26353 +
             C141341 * C26479) *
                C141219) *
               C141505 +
           ((C63707 * C29087 + C63607 * C29173 + C63708 * C34558 +
             C141341 * C34615) *
                C29775 +
            (C63707 * C29089 + C63607 * C29175 + C63708 * C34559 +
             C141341 * C34616) *
                C141219) *
               C106914) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[49] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                       C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                          C29775 +
                      (C107065 * C114 + C141508 * C282 + C107066 * C1606 +
                       C141505 * C1789 + C107067 * C5329 + C106914 * C5453) *
                          C141219) *
                         C63607 +
                     ((C132739 + C132740 + C132741) * C29775 +
                      (C132742 + C132743 + C132744) * C141219) *
                         C141341) *
                        C141298 * C2956 -
                    (((C135386 + C135387 + C135388) * C141219 +
                      (C135389 + C135390 + C135391) * C29775) *
                         C141341 +
                     ((C132744 + C132743 + C132742) * C141219 +
                      (C132741 + C132740 + C132739) * C29775) *
                         C63607) *
                        C141298 * C2957 +
                    (((C135391 + C135390 + C135389) * C29775 +
                      (C135388 + C135387 + C135386) * C141219) *
                         C63607 +
                     ((C107065 * C9667 + C141508 * C9848 + C107066 * C26351 +
                       C141505 * C26579 + C107067 * C34558 + C106914 * C34667) *
                          C29775 +
                      (C107065 * C9670 + C141508 * C9851 + C107066 * C26353 +
                       C141505 * C26581 + C107067 * C34559 + C106914 * C34668) *
                          C141219) *
                         C141341) *
                        C141298 * C2958) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[49] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C29775 * C108 + C141219 * C114) * C63707 +
                      (C29775 * C189 + C141219 * C362) * C63607 +
                      C30547 * C63708 + C30548 * C141341) *
                         C141508 +
                     (C133761 + C133762 + C133763 + C133764) * C141505 +
                     (C133765 + C133766 + C133767 + C133768) * C106914) *
                        C141298 * C2956 -
                    ((C39703 * C141341 + C39704 * C63708 + C39705 * C63607 +
                      C39706 * C63707) *
                         C106914 +
                     (C32954 * C141341 + C32955 * C63708 + C32956 * C63607 +
                      C32957 * C63707) *
                         C141505 +
                     (C30550 * C141341 + C30549 * C63708 + C30548 * C63607 +
                      C30547 * C63707) *
                         C141508) *
                        C141298 * C2957 +
                    ((C30549 * C63707 + C30550 * C63607 + C30551 * C63708 +
                      C30552 * C141341) *
                         C141508 +
                     (C32955 * C63707 + C32954 * C63607 + C32953 * C63708 +
                      C32952 * C141341) *
                         C141505 +
                     (C39704 * C63707 + C39703 * C63607 +
                      (C29775 * C34558 + C141219 * C34559) * C63708 +
                      (C29775 * C34615 + C141219 * C34719) * C141341) *
                         C106914) *
                        C141298 * C2958) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[49] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63969 * C108 + C63972 + C63972 + C63607 * C419 +
                      C63970 * C823 + C63973 + C63973 + C141341 * C1171) *
                         C141219 * C141508 +
                     (C82081 + C82082) * C141219 * C141505 +
                     (C88822 + C88821) * C141219 * C106914) *
                        C141298 * C2956 -
                    ((C63970 * C29087 + C85398 + C85398 + C141341 * C29405 +
                      C63969 * C13205 + C85397 + C85397 + C63607 * C13531) *
                         C141219 * C106914 +
                     (C85406 + C85405) * C141219 * C141505 +
                     (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
                      C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                         C141219 * C141508) *
                        C141298 * C2957 +
                    ((C63969 * C2960 + C67677 + C67677 + C63607 * C3196 +
                      C63970 * C9667 + C67678 + C67678 + C141341 * C10035) *
                         C141219 * C141508 +
                     (C63969 * C10470 + C84307 + C84307 + C63607 * C10934 +
                      C63970 * C26351 + C84308 + C84308 + C141341 * C26819) *
                         C141219 * C141505 +
                     (C63969 * C29087 + C135540 + C135540 + C63607 * C29405 +
                      C63970 * C34558 + C135541 + C135541 + C141341 * C34770) *
                         C141219 * C106914) *
                        C141298 * C2958) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[49] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                      C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                         C63707 +
                     (C107065 * C189 + C141508 * C501 + C107066 * C1690 +
                      C141505 * C2040 + C107067 * C5391 + C106914 * C5619) *
                         C63607 +
                     (C132739 + C132740 + C132741) * C63708 +
                     (C133045 + C133046 + C133047) * C141341) *
                        C141219 * C141298 * C2956 -
                    ((C135622 + C135623 + C135624) * C141341 +
                     (C135389 + C135390 + C135391) * C63708 +
                     (C133047 + C133046 + C133045) * C63607 +
                     (C132741 + C132740 + C132739) * C63707) *
                        C141219 * C141298 * C2957 +
                    ((C135391 + C135390 + C135389) * C63707 +
                     (C135624 + C135623 + C135622) * C63607 +
                     (C107065 * C9667 + C141508 * C9848 + C107066 * C26351 +
                      C141505 * C26579 + C107067 * C34558 + C106914 * C34667) *
                         C63708 +
                     (C107065 * C9768 + C141508 * C10118 + C107066 * C26477 +
                      C141505 * C26925 + C107067 * C34615 + C106914 * C34825) *
                         C141341) *
                        C141219 * C141298 * C2958) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezx[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C107065 +
            (C29775 * C276 + C141219 * C579) * C141508 + C37111 * C107066 +
            C37432 * C141505 + C42383 * C107067 + C42634 * C106914) *
               C63607 +
           (C133146 + C133147 + C133148 + C133149 + C133150 + C133151) *
               C141341) *
              C141298 * C2956 -
          ((C135699 + C135700 + C135701 + C135702 + C135703 + C135704) *
               C141341 +
           (C133151 + C133150 + C133149 + C133148 + C133147 + C133146) *
               C63607) *
              C141298 * C2957 +
          ((C135704 + C135703 + C135702 + C135701 + C135700 + C135699) *
               C63607 +
           (C30551 * C107065 + C30785 * C141508 + C32953 * C107066 +
            C33175 * C141505 + (C29775 * C34558 + C141219 * C34559) * C107067 +
            (C29775 * C34667 + C141219 * C34876) * C106914) *
               C141341) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
               C107065 +
           (C63707 * C276 + C63607 * C635 + C63708 * C1006 + C141341 * C1419) *
               C141508 +
           (C81629 + C81630) * C107066 + (C82503 + C82504) * C141505 +
           (C88502 + C88501) * C107067 + (C89128 + C89127) * C106914) *
              C141219 * C141298 * C2956 -
          ((C63708 * C29251 + C141341 * C29639 + C63707 * C13374 +
            C63607 * C13768) *
               C106914 +
           (C63708 * C29087 + C141341 * C29173 + C63707 * C13205 +
            C63607 * C13294) *
               C107067 +
           (C85810 + C85809) * C141505 + (C84984 + C84983) * C107066 +
           (C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
            C63607 * C1419) *
               C141508 +
           (C63708 * C2960 + C141341 * C3026 + C63707 * C823 + C63607 * C912) *
               C107065) *
              C141219 * C141298 * C2957 +
          ((C63707 * C2960 + C63607 * C3026 + C63708 * C9667 +
            C141341 * C9768) *
               C107065 +
           (C63707 * C3084 + C63607 * C3362 + C63708 * C9848 +
            C141341 * C10284) *
               C141508 +
           (C63707 * C10470 + C63607 * C10595 + C63708 * C26351 +
            C141341 * C26477) *
               C107066 +
           (C63707 * C10699 + C63607 * C11255 + C63708 * C26579 +
            C141341 * C27140) *
               C141505 +
           (C63707 * C29087 + C63607 * C29173 + C63708 * C34558 +
            C141341 * C34615) *
               C107067 +
           (C63707 * C29251 + C63607 * C29639 + C63708 * C34667 +
            C141341 * C34927) *
               C106914) *
              C141219 * C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[49] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C107578 * C108 + C107582 + C107582 + C141508 * C714 +
                      C107579 * C1601 + C107583 + C107583 + C141505 * C2283 +
                      C107580 * C5325 + C107584 + C107584 + C106914 * C5781) *
                         C63607 +
                     (C133366 + C133367 + C133368) * C141341) *
                        C141219 * C141298 * C2956 -
                    ((C135868 + C135869 + C135870) * C141341 +
                     (C133368 + C133367 + C133366) * C63607) *
                        C141219 * C141298 * C2957 +
                    ((C135870 + C135869 + C135868) * C63607 +
                     (C107578 * C9667 + C135859 + C135859 + C141508 * C10361 +
                      C107579 * C26351 + C135860 + C135860 + C141505 * C27240 +
                      C107580 * C34558 + C135861 + C135861 + C106914 * C34978) *
                         C141341) *
                        C141219 * C141298 * C2958) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexx[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141508 +
             C36781 * C141505 + C42123 * C106914) *
                C63607 +
            (C132525 + C132526 + C132527) * C141341) *
               C1596 -
           ((C135969 + C135970 + C135971) * C141341 +
            (C57776 * C106914 + C42123 * C141505 + C36781 * C141508) * C63607) *
               C141499) *
              C2374 +
          (((C135971 + C135970 + C135969) * C63607 +
            (C32720 * C141508 + C39349 * C141505 +
             (C29774 * C42110 + C42120 + C42120 + C141219 * C42114) * C106914) *
                C141341) *
               C141499 -
           ((C135223 + C135224 + C135225) * C141341 +
            (C132527 + C132526 + C132525) * C63607) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C29775 +
             (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                 C141219) *
                C141508 +
            ((C81629 + C81630) * C29775 + (C81631 + C81632) * C141219) *
                C141505 +
            ((C88502 + C88501) * C29775 + (C88500 + C88499) * C141219) *
                C106914) *
               C1596 -
           (((C63708 * C42111 + C141341 * C42199 + C63707 * C21038 +
              C63607 * C21139) *
                 C141219 +
             (C63708 * C42109 + C141341 * C42197 + C63707 * C21035 +
              C63607 * C21136) *
                 C29775) *
                C106914 +
            ((C88499 + C88500) * C141219 + (C88501 + C88502) * C29775) *
                C141505 +
            ((C81632 + C81631) * C141219 + (C81630 + C81629) * C29775) *
                C141508) *
               C141499) *
              C2374 +
          ((((C84983 + C84984) * C29775 + (C84985 + C84986) * C141219) *
                C141508 +
            ((C136078 + C136079) * C29775 + (C136080 + C136081) * C141219) *
                C141505 +
            ((C63707 * C42109 + C63607 * C42197 + C63708 * C42110 +
              C141341 * C42198) *
                 C29775 +
             (C63707 * C42111 + C63607 * C42199 + C63708 * C42112 +
              C141341 * C42200) *
                 C141219) *
                C106914) *
               C141499 -
           (((C136081 + C136080) * C141219 + (C136079 + C136078) * C29775) *
                C106914 +
            ((C84986 + C84985) * C141219 + (C84984 + C84983) * C29775) *
                C141505 +
            ((C63708 * C2964 + C141341 * C3030 + C63707 * C828 +
              C63607 * C917) *
                 C141219 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C29775) *
                C141508) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
              C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                 C29775 +
             (C107065 * C114 + C141508 * C282 + C107066 * C1606 +
              C141505 * C1789 + C107067 * C5329 + C106914 * C5453) *
                 C141219) *
                C63607 +
            ((C132739 + C132740 + C132741) * C29775 +
             (C132742 + C132743 + C132744) * C141219) *
                C141341) *
               C1596 -
           (((C136192 + C136193 + C136194) * C141219 +
             (C136195 + C136196 + C136197) * C29775) *
                C141341 +
            ((C107067 * C21038 + C106914 * C21231 + C107066 * C5329 +
              C141505 * C5453 + C107065 * C1606 + C141508 * C1789) *
                 C141219 +
             (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
              C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                 C29775) *
                C63607) *
               C141499) *
              C2374 +
          ((((C136197 + C136196 + C136195) * C29775 +
             (C136194 + C136193 + C136192) * C141219) *
                C63607 +
            ((C107065 * C10470 + C141508 * C10699 + C107066 * C29087 +
              C141505 * C29251 + C107067 * C42110 + C106914 * C42294) *
                 C29775 +
             (C107065 * C10473 + C141508 * C10702 + C107066 * C29089 +
              C141505 * C29253 + C107067 * C42112 + C106914 * C42296) *
                 C141219) *
                C141341) *
               C141499 -
           (((C135386 + C135387 + C135388) * C141219 +
             (C135389 + C135390 + C135391) * C29775) *
                C141341 +
            ((C132744 + C132743 + C132742) * C141219 +
             (C132741 + C132740 + C132739) * C29775) *
                C63607) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[50] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C63707 +
                       (C29775 * C189 + C141219 * C362) * C63607 +
                       C30547 * C63708 + C30548 * C141341) *
                          C141508 +
                      (C133761 + C133762 + C133763 + C133764) * C141505 +
                      (C133765 + C133766 + C133767 + C133768) * C106914) *
                         C1596 -
                     ((C55367 * C141341 + C55368 * C63708 + C58029 * C63607 +
                       C58030 * C63707) *
                          C106914 +
                      (C133768 + C133767 + C133766 + C133765) * C141505 +
                      (C133764 + C133763 + C133762 + C133761) * C141508) *
                         C141499) *
                        C2374 +
                    (((C136296 + C136297 + C136298 + C136299) * C141508 +
                      (C136300 + C136301 + C136302 + C136303) * C141505 +
                      (C55368 * C63707 + C55367 * C63607 +
                       (C29775 * C42110 + C141219 * C42112) * C63708 +
                       (C29775 * C42198 + C141219 * C42372) * C141341) *
                          C106914) *
                         C141499 -
                     ((C136303 + C136302 + C136301 + C136300) * C106914 +
                      (C136299 + C136298 + C136297 + C136296) * C141505 +
                      (C30550 * C141341 + C30549 * C63708 + C30548 * C63607 +
                       C30547 * C63707) *
                          C141508) *
                         C1596) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[50] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63969 * C108 + C63972 + C63972 + C63607 * C419 +
                       C63970 * C823 + C63973 + C63973 + C141341 * C1171) *
                          C141219 * C141508 +
                      (C82081 + C82082) * C141219 * C141505 +
                      (C88822 + C88821) * C141219 * C106914) *
                         C1596 -
                     ((C63970 * C42109 + C88814 + C88814 + C141341 * C42459 +
                       C63969 * C21035 + C88813 + C88813 + C63607 * C21403) *
                          C141219 * C106914 +
                      (C88821 + C88822) * C141219 * C141505 +
                      (C82082 + C82081) * C141219 * C141508) *
                         C141499) *
                        C2374 +
                    (((C85405 + C85406) * C141219 * C141508 +
                      (C136412 + C136413) * C141219 * C141505 +
                      (C63969 * C42109 + C136406 + C136406 + C63607 * C42459 +
                       C63970 * C42110 + C136407 + C136407 + C141341 * C42460) *
                          C141219 * C106914) *
                         C141499 -
                     ((C136413 + C136412) * C141219 * C106914 +
                      (C85406 + C85405) * C141219 * C141505 +
                      (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
                       C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                          C141219 * C141508) *
                         C1596) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[50] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                       C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                          C63707 +
                      (C107065 * C189 + C141508 * C501 + C107066 * C1690 +
                       C141505 * C2040 + C107067 * C5391 + C106914 * C5619) *
                          C63607 +
                      (C132739 + C132740 + C132741) * C63708 +
                      (C133045 + C133046 + C133047) * C141341) *
                         C141219 * C1596 -
                     ((C136518 + C136519 + C136520) * C141341 +
                      (C136195 + C136196 + C136197) * C63708 +
                      (C107067 * C21136 + C106914 * C21491 + C107066 * C5391 +
                       C141505 * C5619 + C107065 * C1690 + C141508 * C2040) *
                          C63607 +
                      (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
                       C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                          C63707) *
                         C141219 * C141499) *
                        C2374 +
                    (((C136197 + C136196 + C136195) * C63707 +
                      (C136520 + C136519 + C136518) * C63607 +
                      (C107065 * C10470 + C141508 * C10699 + C107066 * C29087 +
                       C141505 * C29251 + C107067 * C42110 + C106914 * C42294) *
                          C63708 +
                      (C107065 * C10595 + C141508 * C11041 + C107066 * C29173 +
                       C141505 * C29487 + C107067 * C42198 + C106914 * C42554) *
                          C141341) *
                         C141219 * C141499 -
                     ((C135622 + C135623 + C135624) * C141341 +
                      (C135389 + C135390 + C135391) * C63708 +
                      (C133047 + C133046 + C133045) * C63607 +
                      (C132741 + C132740 + C132739) * C63707) *
                         C141219 * C1596) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezx[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C107065 +
             (C29775 * C276 + C141219 * C579) * C141508 + C37111 * C107066 +
             C37432 * C141505 + C42383 * C107067 + C42634 * C106914) *
                C63607 +
            (C133146 + C133147 + C133148 + C133149 + C133150 + C133151) *
                C141341) *
               C1596 -
           ((C136619 + C136620 + C136621 + C136622 + C136623 + C136624) *
                C141341 +
            (C58275 * C106914 + C58030 * C107067 + C42634 * C141505 +
             C42383 * C107066 + C37432 * C141508 + C37111 * C107065) *
                C63607) *
               C141499) *
              C2374 +
          (((C136624 + C136623 + C136622 + C136621 + C136620 + C136619) *
                C63607 +
            (C32955 * C107065 + C33176 * C141508 + C39704 * C107066 +
             C40041 * C141505 + (C29775 * C42110 + C141219 * C42112) * C107067 +
             (C29775 * C42294 + C141219 * C42630) * C106914) *
                C141341) *
               C141499 -
           ((C135699 + C135700 + C135701 + C135702 + C135703 + C135704) *
                C141341 +
            (C133151 + C133150 + C133149 + C133148 + C133147 + C133146) *
                C63607) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C107065 +
            (C63707 * C276 + C63607 * C635 + C63708 * C1006 + C141341 * C1419) *
                C141508 +
            (C81629 + C81630) * C107066 + (C82503 + C82504) * C141505 +
            (C88502 + C88501) * C107067 + (C89128 + C89127) * C106914) *
               C141219 * C1596 -
           ((C63708 * C42293 + C141341 * C42708 + C63707 * C21228 +
             C63607 * C21654) *
                C106914 +
            (C63708 * C42109 + C141341 * C42197 + C63707 * C21035 +
             C63607 * C21136) *
                C107067 +
            (C89127 + C89128) * C141505 + (C88501 + C88502) * C107066 +
            (C82504 + C82503) * C141508 + (C81630 + C81629) * C107065) *
               C141219 * C141499) *
              C2374 +
          (((C84983 + C84984) * C107065 + (C85809 + C85810) * C141508 +
            (C136078 + C136079) * C107066 + (C136727 + C136728) * C141505 +
            (C63707 * C42109 + C63607 * C42197 + C63708 * C42110 +
             C141341 * C42198) *
                C107067 +
            (C63707 * C42293 + C63607 * C42708 + C63708 * C42294 +
             C141341 * C42709) *
                C106914) *
               C141219 * C141499 -
           ((C136728 + C136727) * C106914 + (C136079 + C136078) * C107067 +
            (C85810 + C85809) * C141505 + (C84984 + C84983) * C107066 +
            (C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
             C63607 * C1419) *
                C141508 +
            (C63708 * C2960 + C141341 * C3026 + C63707 * C823 + C63607 * C912) *
                C107065) *
               C141219 * C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C107578 * C108 + C107582 + C107582 + C141508 * C714 +
             C107579 * C1601 + C107583 + C107583 + C141505 * C2283 +
             C107580 * C5325 + C107584 + C107584 + C106914 * C5781) *
                C63607 +
            (C133366 + C133367 + C133368) * C141341) *
               C141219 * C1596 -
           ((C136842 + C136843 + C136844) * C141341 +
            (C107580 * C21035 + C109541 + C109541 + C106914 * C21734 +
             C107579 * C5325 + C109542 + C109542 + C141505 * C5781 +
             C107578 * C1601 + C109543 + C109543 + C141508 * C2283) *
                C63607) *
               C141219 * C141499) *
              C2374 +
          (((C136844 + C136843 + C136842) * C63607 +
            (C107578 * C10470 + C136833 + C136833 + C141508 * C11356 +
             C107579 * C29087 + C136834 + C136834 + C141505 * C29715 +
             C107580 * C42110 + C136835 + C136835 + C106914 * C42794) *
                C141341) *
               C141219 * C141499 -
           ((C135868 + C135869 + C135870) * C141341 +
            (C133368 + C133367 + C133366) * C63607) *
               C141219 * C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141508 +
             C36781 * C141505 + C42123 * C106914) *
                C63607 +
            (C132525 + C132526 + C132527) * C141341) *
               C4148 -
           ((C135969 + C135970 + C135971) * C141341 +
            (C57776 * C106914 + C42123 * C141505 + C36781 * C141508) * C63607) *
               C141499) *
              C141281 * C2376 +
          (((C36782 * C141508 + C52409 * C141505 + C59584 * C106914) * C63607 +
            (C35762 * C141508 + C51452 * C141505 +
             (C29774 * C47290 + C52406 + C52406 + C141219 * C47292) * C106914) *
                C141341) *
               C141499 -
           ((C132530 + C132529 + C132528) * C141341 +
            (C52409 * C106914 + C36782 * C141505 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141508) *
                C63607) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C29775 +
             (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                 C141219) *
                C141508 +
            ((C81629 + C81630) * C29775 + (C81631 + C81632) * C141219) *
                C141505 +
            ((C88502 + C88501) * C29775 + (C88500 + C88499) * C141219) *
                C106914) *
               C4148 -
           (((C63708 * C42111 + C141341 * C42199 + C63707 * C21038 +
              C63607 * C21139) *
                 C141219 +
             (C63708 * C42109 + C141341 * C42197 + C63707 * C21035 +
              C63607 * C21136) *
                 C29775) *
                C106914 +
            ((C88499 + C88500) * C141219 + (C88501 + C88502) * C29775) *
                C141505 +
            ((C81632 + C81631) * C141219 + (C81630 + C81629) * C29775) *
                C141508) *
               C141499) *
              C141281 * C2376 +
          (((C81617 * C29775 + C81618 * C141219) * C141508 +
            ((C81636 + C81635) * C29775 + (C81634 + C81633) * C141219) *
                C141505 +
            ((C63707 * C21036 + C63607 * C21137 + C63708 * C47290 +
              C141341 * C47403) *
                 C29775 +
             (C63707 * C21039 + C63607 * C21140 + C63708 * C47291 +
              C141341 * C47404) *
                 C141219) *
                C106914) *
               C141499 -
           (((C81633 + C81634) * C141219 + (C81635 + C81636) * C29775) *
                C106914 +
            (C81627 * C141219 + C81628 * C29775) * C141505 +
            ((C63737 + C63736) * C141219 + (C63735 + C63734) * C29775) *
                C141508) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
              C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                 C29775 +
             (C107065 * C114 + C141508 * C282 + C107066 * C1606 +
              C141505 * C1789 + C107067 * C5329 + C106914 * C5453) *
                 C141219) *
                C63607 +
            ((C132739 + C132740 + C132741) * C29775 +
             (C132742 + C132743 + C132744) * C141219) *
                C141341) *
               C4148 -
           (((C136192 + C136193 + C136194) * C141219 +
             (C136195 + C136196 + C136197) * C29775) *
                C141341 +
            ((C107067 * C21038 + C106914 * C21231 + C107066 * C5329 +
              C141505 * C5453 + C107065 * C1606 + C141508 * C1789) *
                 C141219 +
             (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
              C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                 C29775) *
                C63607) *
               C141499) *
              C141281 * C2376 +
          ((((C108902 + C108901 + C108900) * C29775 +
             (C108899 + C108898 + C108897) * C141219) *
                C63607 +
            ((C107065 * C3491 + C141508 * C3647 + C107066 * C13206 +
              C141505 * C13375 + C107067 * C47290 + C106914 * C47517) *
                 C29775 +
             (C107065 * C3495 + C141508 * C3651 + C107066 * C13209 +
              C141505 * C13378 + C107067 * C47291 + C106914 * C47518) *
                 C141219) *
                C141341) *
               C141499 -
           (((C107930 + C107931 + C107932) * C141219 +
             (C107933 + C107934 + C107935) * C29775) *
                C141341 +
            ((C107098 + C107097 + C107096) * C141219 +
             (C107095 + C107094 + C107093) * C29775) *
                C63607) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[51] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C63707 +
                       (C29775 * C189 + C141219 * C362) * C63607 +
                       C30547 * C63708 + C30548 * C141341) *
                          C141508 +
                      (C133761 + C133762 + C133763 + C133764) * C141505 +
                      (C133765 + C133766 + C133767 + C133768) * C106914) *
                         C4148 -
                     ((C55367 * C141341 + C55368 * C63708 + C58029 * C63607 +
                       C58030 * C63707) *
                          C106914 +
                      (C133768 + C133767 + C133766 + C133765) * C141505 +
                      (C133764 + C133763 + C133762 + C133761) * C141508) *
                         C141499) *
                        C141281 * C2376 +
                    (((C133769 + C133770 + C133771 + C133772) * C141508 +
                      (C133773 + C133774 + C133775 + C133776) * C141505 +
                      (C59809 * C63707 + C59810 * C63607 +
                       (C29775 * C47290 + C141219 * C47291) * C63708 +
                       (C29775 * C47403 + C141219 * C47617) * C141341) *
                          C106914) *
                         C141499 -
                     ((C133776 + C133775 + C133774 + C133773) * C106914 +
                      (C133772 + C133771 + C133770 + C133769) * C141505 +
                      (C30554 * C141341 + C30553 * C63708 +
                       (C29775 * C190 + C141219 * C363) * C63607 +
                       (C29775 * C109 + C141219 * C115) * C63707) *
                          C141508) *
                         C4148) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
             C63973 + C63973 + C141341 * C1171) *
                C141219 * C141508 +
            (C82081 + C82082) * C141219 * C141505 +
            (C88822 + C88821) * C141219 * C106914) *
               C4148 -
           ((C63970 * C42109 + C88814 + C88814 + C141341 * C42459 +
             C63969 * C21035 + C88813 + C88813 + C63607 * C21403) *
                C141219 * C106914 +
            (C88821 + C88822) * C141219 * C141505 +
            (C82082 + C82081) * C141219 * C141508) *
               C141499) *
              C141281 * C2376 +
          ((C82067 * C141219 * C141508 + (C82084 + C82083) * C141219 * C141505 +
            (C63969 * C21036 + C88815 + C88815 + C63607 * C21404 +
             C63970 * C47290 + C88816 + C88816 + C141341 * C47728) *
                C141219 * C106914) *
               C141499 -
           ((C82083 + C82084) * C141219 * C106914 + C82072 * C141219 * C141505 +
            (C64007 + C64006) * C141219 * C141508) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[51] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                       C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                          C63707 +
                      (C107065 * C189 + C141508 * C501 + C107066 * C1690 +
                       C141505 * C2040 + C107067 * C5391 + C106914 * C5619) *
                          C63607 +
                      (C132739 + C132740 + C132741) * C63708 +
                      (C133045 + C133046 + C133047) * C141341) *
                         C141219 * C4148 -
                     ((C136518 + C136519 + C136520) * C141341 +
                      (C136195 + C136196 + C136197) * C63708 +
                      (C107067 * C21136 + C106914 * C21491 + C107066 * C5391 +
                       C141505 * C5619 + C107065 * C1690 + C141508 * C2040) *
                          C63607 +
                      (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
                       C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                          C63707) *
                         C141219 * C141499) *
                        C141281 * C2376 +
                    (((C108902 + C108901 + C108900) * C63707 +
                      (C109225 + C109224 + C109223) * C63607 +
                      (C107065 * C3491 + C141508 * C3647 + C107066 * C13206 +
                       C141505 * C13375 + C107067 * C47290 + C106914 * C47517) *
                          C63708 +
                      (C107065 * C3573 + C141508 * C3865 + C107066 * C13295 +
                       C141505 * C13615 + C107067 * C47403 + C106914 * C47838) *
                          C141341) *
                         C141219 * C141499 -
                     ((C108236 + C108237 + C108238) * C141341 +
                      (C107933 + C107934 + C107935) * C63708 +
                      (C107341 + C107340 + C107339) * C63607 +
                      (C107095 + C107094 + C107093) * C63707) *
                         C141219 * C4148) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C107065 +
             (C29775 * C276 + C141219 * C579) * C141508 + C37111 * C107066 +
             C37432 * C141505 + C42383 * C107067 + C42634 * C106914) *
                C63607 +
            (C133146 + C133147 + C133148 + C133149 + C133150 + C133151) *
                C141341) *
               C4148 -
           ((C136619 + C136620 + C136621 + C136622 + C136623 + C136624) *
                C141341 +
            (C58275 * C106914 + C58030 * C107067 + C42634 * C141505 +
             C42383 * C107066 + C37432 * C141508 + C37111 * C107065) *
                C63607) *
               C141499) *
              C141281 * C2376 +
          (((C37113 * C107065 + C37433 * C141508 + C52758 * C107066 +
             C53092 * C141505 + C59809 * C107067 + C60019 * C106914) *
                C63607 +
            (C36104 * C107065 + C36438 * C141508 + C51770 * C107066 +
             C52092 * C141505 + (C29775 * C47290 + C141219 * C47291) * C107067 +
             (C29775 * C47517 + C141219 * C47937) * C106914) *
                C141341) *
               C141499 -
           ((C133157 + C133156 + C133155 + C133154 + C133153 + C133152) *
                C141341 +
            (C53092 * C106914 + C52758 * C107067 + C37433 * C141505 +
             C37113 * C107066 + (C29775 * C277 + C141219 * C580) * C141508 +
             (C29775 * C109 + C141219 * C115) * C107065) *
                C63607) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C107065 +
            (C63707 * C276 + C63607 * C635 + C63708 * C1006 + C141341 * C1419) *
                C141508 +
            (C81629 + C81630) * C107066 + (C82503 + C82504) * C141505 +
            (C88502 + C88501) * C107067 + (C89128 + C89127) * C106914) *
               C141219 * C4148 -
           ((C63708 * C42293 + C141341 * C42708 + C63707 * C21228 +
             C63607 * C21654) *
                C106914 +
            (C63708 * C42109 + C141341 * C42197 + C63707 * C21035 +
             C63607 * C21136) *
                C107067 +
            (C89127 + C89128) * C141505 + (C88501 + C88502) * C107066 +
            (C82504 + C82503) * C141508 + (C81630 + C81629) * C107065) *
               C141219 * C141499) *
              C141281 * C2376 +
          ((C81617 * C107065 + C82497 * C141508 + (C81636 + C81635) * C107066 +
            (C82506 + C82505) * C141505 +
            (C63707 * C21036 + C63607 * C21137 + C63708 * C47290 +
             C141341 * C47403) *
                C107067 +
            (C63707 * C21229 + C63607 * C21655 + C63708 * C47517 +
             C141341 * C48042) *
                C106914) *
               C141219 * C141499 -
           ((C82505 + C82506) * C106914 + (C81635 + C81636) * C107067 +
            C82502 * C141505 + C81628 * C107066 + (C64264 + C64263) * C141508 +
            (C63735 + C63734) * C107065) *
               C141219 * C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C107578 * C108 + C107582 + C107582 + C141508 * C714 +
             C107579 * C1601 + C107583 + C107583 + C141505 * C2283 +
             C107580 * C5325 + C107584 + C107584 + C106914 * C5781) *
                C63607 +
            (C133366 + C133367 + C133368) * C141341) *
               C141219 * C4148 -
           ((C136842 + C136843 + C136844) * C141341 +
            (C107580 * C21035 + C109541 + C109541 + C106914 * C21734 +
             C107579 * C5325 + C109542 + C109542 + C141505 * C5781 +
             C107578 * C1601 + C109543 + C109543 + C141508 * C2283) *
                C63607) *
               C141219 * C141499) *
              C141281 * C2376 +
          (((C109555 + C109554 + C109553) * C63607 +
            (C107578 * C3491 + C112007 + C112007 + C141508 * C4075 +
             C107579 * C13206 + C112008 + C112008 + C141505 * C13846 +
             C107580 * C47290 + C112009 + C112009 + C106914 * C48144) *
                C141341) *
               C141219 * C141499 -
           ((C108560 + C108561 + C108562) * C141341 +
            (C107620 + C107619 + C107618) * C63607) *
               C141219 * C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[52] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141508 +
             C36781 * C141505 + C42123 * C106914) *
                C63607 +
            (C132525 + C132526 + C132527) * C141341) *
               C4148 -
           ((C135969 + C135970 + C135971) * C141341 +
            (C57776 * C106914 + C42123 * C141505 + C36781 * C141508) * C63607) *
               C141499) *
              C816 +
          (((C135971 + C135970 + C135969) * C63607 +
            (C32720 * C141508 + C39349 * C141505 +
             (C29774 * C42110 + C42120 + C42120 + C141219 * C42114) * C106914) *
                C141341) *
               C141499 -
           ((C135223 + C135224 + C135225) * C141341 +
            (C132527 + C132526 + C132525) * C63607) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[52] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                 C29775 +
             (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                 C141219) *
                C141508 +
            ((C81629 + C81630) * C29775 + (C81631 + C81632) * C141219) *
                C141505 +
            ((C88502 + C88501) * C29775 + (C88500 + C88499) * C141219) *
                C106914) *
               C4148 -
           (((C63708 * C42111 + C141341 * C42199 + C63707 * C21038 +
              C63607 * C21139) *
                 C141219 +
             (C63708 * C42109 + C141341 * C42197 + C63707 * C21035 +
              C63607 * C21136) *
                 C29775) *
                C106914 +
            ((C88499 + C88500) * C141219 + (C88501 + C88502) * C29775) *
                C141505 +
            ((C81632 + C81631) * C141219 + (C81630 + C81629) * C29775) *
                C141508) *
               C141499) *
              C816 +
          ((((C84983 + C84984) * C29775 + (C84985 + C84986) * C141219) *
                C141508 +
            ((C136078 + C136079) * C29775 + (C136080 + C136081) * C141219) *
                C141505 +
            ((C63707 * C42109 + C63607 * C42197 + C63708 * C42110 +
              C141341 * C42198) *
                 C29775 +
             (C63707 * C42111 + C63607 * C42199 + C63708 * C42112 +
              C141341 * C42200) *
                 C141219) *
                C106914) *
               C141499 -
           (((C136081 + C136080) * C141219 + (C136079 + C136078) * C29775) *
                C106914 +
            ((C84986 + C84985) * C141219 + (C84984 + C84983) * C29775) *
                C141505 +
            ((C63708 * C2964 + C141341 * C3030 + C63707 * C828 +
              C63607 * C917) *
                 C141219 +
             (C63708 * C2960 + C141341 * C3026 + C63707 * C823 +
              C63607 * C912) *
                 C29775) *
                C141508) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[52] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
              C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                 C29775 +
             (C107065 * C114 + C141508 * C282 + C107066 * C1606 +
              C141505 * C1789 + C107067 * C5329 + C106914 * C5453) *
                 C141219) *
                C63607 +
            ((C132739 + C132740 + C132741) * C29775 +
             (C132742 + C132743 + C132744) * C141219) *
                C141341) *
               C4148 -
           (((C136192 + C136193 + C136194) * C141219 +
             (C136195 + C136196 + C136197) * C29775) *
                C141341 +
            ((C107067 * C21038 + C106914 * C21231 + C107066 * C5329 +
              C141505 * C5453 + C107065 * C1606 + C141508 * C1789) *
                 C141219 +
             (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
              C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                 C29775) *
                C63607) *
               C141499) *
              C816 +
          ((((C136197 + C136196 + C136195) * C29775 +
             (C136194 + C136193 + C136192) * C141219) *
                C63607 +
            ((C107065 * C10470 + C141508 * C10699 + C107066 * C29087 +
              C141505 * C29251 + C107067 * C42110 + C106914 * C42294) *
                 C29775 +
             (C107065 * C10473 + C141508 * C10702 + C107066 * C29089 +
              C141505 * C29253 + C107067 * C42112 + C106914 * C42296) *
                 C141219) *
                C141341) *
               C141499 -
           (((C135386 + C135387 + C135388) * C141219 +
             (C135389 + C135390 + C135391) * C29775) *
                C141341 +
            ((C132744 + C132743 + C132742) * C141219 +
             (C132741 + C132740 + C132739) * C29775) *
                C63607) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[52] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C63707 +
                       (C29775 * C189 + C141219 * C362) * C63607 +
                       C30547 * C63708 + C30548 * C141341) *
                          C141508 +
                      (C133761 + C133762 + C133763 + C133764) * C141505 +
                      (C133765 + C133766 + C133767 + C133768) * C106914) *
                         C4148 -
                     ((C55367 * C141341 + C55368 * C63708 + C58029 * C63607 +
                       C58030 * C63707) *
                          C106914 +
                      (C133768 + C133767 + C133766 + C133765) * C141505 +
                      (C133764 + C133763 + C133762 + C133761) * C141508) *
                         C141499) *
                        C816 +
                    (((C136296 + C136297 + C136298 + C136299) * C141508 +
                      (C136300 + C136301 + C136302 + C136303) * C141505 +
                      (C55368 * C63707 + C55367 * C63607 +
                       (C29775 * C42110 + C141219 * C42112) * C63708 +
                       (C29775 * C42198 + C141219 * C42372) * C141341) *
                          C106914) *
                         C141499 -
                     ((C136303 + C136302 + C136301 + C136300) * C106914 +
                      (C136299 + C136298 + C136297 + C136296) * C141505 +
                      (C30550 * C141341 + C30549 * C63708 + C30548 * C63607 +
                       C30547 * C63707) *
                          C141508) *
                         C4148) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[52] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63969 * C108 + C63972 + C63972 + C63607 * C419 +
                       C63970 * C823 + C63973 + C63973 + C141341 * C1171) *
                          C141219 * C141508 +
                      (C82081 + C82082) * C141219 * C141505 +
                      (C88822 + C88821) * C141219 * C106914) *
                         C4148 -
                     ((C63970 * C42109 + C88814 + C88814 + C141341 * C42459 +
                       C63969 * C21035 + C88813 + C88813 + C63607 * C21403) *
                          C141219 * C106914 +
                      (C88821 + C88822) * C141219 * C141505 +
                      (C82082 + C82081) * C141219 * C141508) *
                         C141499) *
                        C816 +
                    (((C85405 + C85406) * C141219 * C141508 +
                      (C136412 + C136413) * C141219 * C141505 +
                      (C63969 * C42109 + C136406 + C136406 + C63607 * C42459 +
                       C63970 * C42110 + C136407 + C136407 + C141341 * C42460) *
                          C141219 * C106914) *
                         C141499 -
                     ((C136413 + C136412) * C141219 * C106914 +
                      (C85406 + C85405) * C141219 * C141505 +
                      (C63970 * C2960 + C64963 + C64963 + C141341 * C3196 +
                       C63969 * C823 + C64964 + C64964 + C63607 * C1171) *
                          C141219 * C141508) *
                         C4148) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[52] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                       C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                          C63707 +
                      (C107065 * C189 + C141508 * C501 + C107066 * C1690 +
                       C141505 * C2040 + C107067 * C5391 + C106914 * C5619) *
                          C63607 +
                      (C132739 + C132740 + C132741) * C63708 +
                      (C133045 + C133046 + C133047) * C141341) *
                         C141219 * C4148 -
                     ((C136518 + C136519 + C136520) * C141341 +
                      (C136195 + C136196 + C136197) * C63708 +
                      (C107067 * C21136 + C106914 * C21491 + C107066 * C5391 +
                       C141505 * C5619 + C107065 * C1690 + C141508 * C2040) *
                          C63607 +
                      (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
                       C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                          C63707) *
                         C141219 * C141499) *
                        C816 +
                    (((C136197 + C136196 + C136195) * C63707 +
                      (C136520 + C136519 + C136518) * C63607 +
                      (C107065 * C10470 + C141508 * C10699 + C107066 * C29087 +
                       C141505 * C29251 + C107067 * C42110 + C106914 * C42294) *
                          C63708 +
                      (C107065 * C10595 + C141508 * C11041 + C107066 * C29173 +
                       C141505 * C29487 + C107067 * C42198 + C106914 * C42554) *
                          C141341) *
                         C141219 * C141499 -
                     ((C135622 + C135623 + C135624) * C141341 +
                      (C135389 + C135390 + C135391) * C63708 +
                      (C133047 + C133046 + C133045) * C63607 +
                      (C132741 + C132740 + C132739) * C63707) *
                         C141219 * C4148) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezx[52] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C107065 +
             (C29775 * C276 + C141219 * C579) * C141508 + C37111 * C107066 +
             C37432 * C141505 + C42383 * C107067 + C42634 * C106914) *
                C63607 +
            (C133146 + C133147 + C133148 + C133149 + C133150 + C133151) *
                C141341) *
               C4148 -
           ((C136619 + C136620 + C136621 + C136622 + C136623 + C136624) *
                C141341 +
            (C58275 * C106914 + C58030 * C107067 + C42634 * C141505 +
             C42383 * C107066 + C37432 * C141508 + C37111 * C107065) *
                C63607) *
               C141499) *
              C816 +
          (((C136624 + C136623 + C136622 + C136621 + C136620 + C136619) *
                C63607 +
            (C32955 * C107065 + C33176 * C141508 + C39704 * C107066 +
             C40041 * C141505 + (C29775 * C42110 + C141219 * C42112) * C107067 +
             (C29775 * C42294 + C141219 * C42630) * C106914) *
                C141341) *
               C141499 -
           ((C135699 + C135700 + C135701 + C135702 + C135703 + C135704) *
                C141341 +
            (C133151 + C133150 + C133149 + C133148 + C133147 + C133146) *
                C63607) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[52] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C107065 +
            (C63707 * C276 + C63607 * C635 + C63708 * C1006 + C141341 * C1419) *
                C141508 +
            (C81629 + C81630) * C107066 + (C82503 + C82504) * C141505 +
            (C88502 + C88501) * C107067 + (C89128 + C89127) * C106914) *
               C141219 * C4148 -
           ((C63708 * C42293 + C141341 * C42708 + C63707 * C21228 +
             C63607 * C21654) *
                C106914 +
            (C63708 * C42109 + C141341 * C42197 + C63707 * C21035 +
             C63607 * C21136) *
                C107067 +
            (C89127 + C89128) * C141505 + (C88501 + C88502) * C107066 +
            (C82504 + C82503) * C141508 + (C81630 + C81629) * C107065) *
               C141219 * C141499) *
              C816 +
          (((C84983 + C84984) * C107065 + (C85809 + C85810) * C141508 +
            (C136078 + C136079) * C107066 + (C136727 + C136728) * C141505 +
            (C63707 * C42109 + C63607 * C42197 + C63708 * C42110 +
             C141341 * C42198) *
                C107067 +
            (C63707 * C42293 + C63607 * C42708 + C63708 * C42294 +
             C141341 * C42709) *
                C106914) *
               C141219 * C141499 -
           ((C136728 + C136727) * C106914 + (C136079 + C136078) * C107067 +
            (C85810 + C85809) * C141505 + (C84984 + C84983) * C107066 +
            (C63708 * C3084 + C141341 * C3362 + C63707 * C1006 +
             C63607 * C1419) *
                C141508 +
            (C63708 * C2960 + C141341 * C3026 + C63707 * C823 + C63607 * C912) *
                C107065) *
               C141219 * C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[52] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C107578 * C108 + C107582 + C107582 + C141508 * C714 +
             C107579 * C1601 + C107583 + C107583 + C141505 * C2283 +
             C107580 * C5325 + C107584 + C107584 + C106914 * C5781) *
                C63607 +
            (C133366 + C133367 + C133368) * C141341) *
               C141219 * C4148 -
           ((C136842 + C136843 + C136844) * C141341 +
            (C107580 * C21035 + C109541 + C109541 + C106914 * C21734 +
             C107579 * C5325 + C109542 + C109542 + C141505 * C5781 +
             C107578 * C1601 + C109543 + C109543 + C141508 * C2283) *
                C63607) *
               C141219 * C141499) *
              C816 +
          (((C136844 + C136843 + C136842) * C63607 +
            (C107578 * C10470 + C136833 + C136833 + C141508 * C11356 +
             C107579 * C29087 + C136834 + C136834 + C141505 * C29715 +
             C107580 * C42110 + C136835 + C136835 + C106914 * C42794) *
                C141341) *
               C141219 * C141499 -
           ((C135868 + C135869 + C135870) * C141341 +
            (C133368 + C133367 + C133366) * C63607) *
               C141219 * C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141508 +
            C36781 * C141505 + C42123 * C106914) *
               C63607 +
           (C132525 + C132526 + C132527) * C141341) *
              C5322 -
          ((C135969 + C135970 + C135971) * C141341 +
           (C57776 * C106914 + C42123 * C141505 + C36781 * C141508) * C63607) *
              C5323 +
          ((C42123 * C141508 + C57776 * C141505 + C63083 * C106914) * C63607 +
           (C39350 * C141508 + C55017 * C141505 +
            (C29774 * C57766 + C57773 + C57773 + C141219 * C57768) * C106914) *
               C141341) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
                C29775 +
            (C63707 * C114 + C63607 * C195 + C63708 * C828 + C141341 * C917) *
                C141219) *
               C141508 +
           ((C81629 + C81630) * C29775 + (C81631 + C81632) * C141219) *
               C141505 +
           C138773 * C106914) *
              C5322 -
          (((C138769 + C138770) * C141219 + (C138771 + C138772) * C29775) *
               C106914 +
           ((C88499 + C88500) * C141219 + (C88501 + C88502) * C29775) *
               C141505 +
           ((C81632 + C81631) * C141219 + (C81630 + C81629) * C29775) *
               C141508) *
              C5323 +
          (C138773 * C141508 +
           ((C138772 + C138771) * C29775 + (C138770 + C138769) * C141219) *
               C141505 +
           ((C63707 * C49989 + C63607 * C50082 + C63708 * C57766 +
             C141341 * C57850) *
                C29775 +
            (C63707 * C49991 + C63607 * C50084 + C63708 * C57767 +
             C141341 * C57851) *
                C141219) *
               C106914) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[53] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                       C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                          C29775 +
                      (C107065 * C114 + C141508 * C282 + C107066 * C1606 +
                       C141505 * C1789 + C107067 * C5329 + C106914 * C5453) *
                          C141219) *
                         C63607 +
                     ((C132739 + C132740 + C132741) * C29775 +
                      (C132742 + C132743 + C132744) * C141219) *
                         C141341) *
                        C5322 -
                    (((C136192 + C136193 + C136194) * C141219 +
                      (C136195 + C136196 + C136197) * C29775) *
                         C141341 +
                     ((C107067 * C21038 + C106914 * C21231 + C107066 * C5329 +
                       C141505 * C5453 + C107065 * C1606 + C141508 * C1789) *
                          C141219 +
                      (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
                       C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                          C29775) *
                         C63607) *
                        C5323 +
                    (((C107065 * C5325 + C141508 * C5449 + C107066 * C21035 +
                       C141505 * C21228 + C107067 * C49989 + C106914 * C50173) *
                          C29775 +
                      (C107065 * C5329 + C141508 * C5453 + C107066 * C21038 +
                       C141505 * C21231 + C107067 * C49991 + C106914 * C50175) *
                          C141219) *
                         C63607 +
                     ((C107065 * C13205 + C141508 * C13374 + C107066 * C42109 +
                       C141505 * C42293 + C107067 * C57766 + C106914 * C57943) *
                          C29775 +
                      (C107065 * C13208 + C141508 * C13377 + C107066 * C42111 +
                       C141505 * C42295 + C107067 * C57767 + C106914 * C57944) *
                          C141219) *
                         C141341) *
                        C5324) *
                   C141281 * C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[53] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C29775 * C108 + C141219 * C114) * C63707 +
                      (C29775 * C189 + C141219 * C362) * C63607 +
                      C30547 * C63708 + C30548 * C141341) *
                         C141508 +
                     (C133761 + C133762 + C133763 + C133764) * C141505 +
                     C138928 * C106914) *
                        C5322 -
                    ((C138923 + C138924 + C138925 + C138926) * C106914 +
                     (C133768 + C133767 + C133766 + C133765) * C141505 +
                     (C133764 + C133763 + C133762 + C133761) * C141508) *
                        C5323 +
                    (C138928 * C141508 +
                     (C138926 + C138925 + C138924 + C138923) * C141505 +
                     (C63256 * C63707 + C63255 * C63607 +
                      (C29775 * C57766 + C141219 * C57767) * C63708 +
                      (C29775 * C57850 + C141219 * C58019) * C141341) *
                         C106914) *
                        C5324) *
                   C141281 * C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C63969 * C108 + C63972 + C63972 + C63607 * C419 + C63970 * C823 +
            C63973 + C63973 + C141341 * C1171) *
               C141219 * C141508 +
           (C82081 + C82082) * C141219 * C141505 + C139010 * C106914) *
              C5322 -
          ((C139015 + C139016) * C141219 * C106914 +
           (C88821 + C88822) * C141219 * C141505 +
           (C82082 + C82081) * C141219 * C141508) *
              C5323 +
          (C139010 * C141508 + (C139016 + C139015) * C141219 * C141505 +
           (C63969 * C49989 + C139008 + C139008 + C63607 * C50344 +
            C63970 * C57766 + C139009 + C139009 + C141341 * C58107) *
               C141219 * C106914) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[53] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                      C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                         C63707 +
                     (C107065 * C189 + C141508 * C501 + C107066 * C1690 +
                      C141505 * C2040 + C107067 * C5391 + C106914 * C5619) *
                         C63607 +
                     (C132739 + C132740 + C132741) * C63708 +
                     (C133045 + C133046 + C133047) * C141341) *
                        C141219 * C5322 -
                    ((C136518 + C136519 + C136520) * C141341 +
                     (C136195 + C136196 + C136197) * C63708 +
                     (C107067 * C21136 + C106914 * C21491 + C107066 * C5391 +
                      C141505 * C5619 + C107065 * C1690 + C141508 * C2040) *
                         C63607 +
                     (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
                      C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                         C63707) *
                        C141219 * C5323 +
                    ((C107065 * C5325 + C141508 * C5449 + C107066 * C21035 +
                      C141505 * C21228 + C107067 * C49989 + C106914 * C50173) *
                         C63707 +
                     (C107065 * C5391 + C141508 * C5619 + C107066 * C21136 +
                      C141505 * C21491 + C107067 * C50082 + C106914 * C50430) *
                         C63607 +
                     (C107065 * C13205 + C141508 * C13374 + C107066 * C42109 +
                      C141505 * C42293 + C107067 * C57766 + C106914 * C57943) *
                         C63708 +
                     (C107065 * C13294 + C141508 * C13614 + C107066 * C42197 +
                      C141505 * C42553 + C107067 * C57850 + C106914 * C58196) *
                         C141341) *
                        C141219 * C5324) *
                   C141281 * C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezx[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C107065 +
            (C29775 * C276 + C141219 * C579) * C141508 + C37111 * C107066 +
            C37432 * C141505 + C42383 * C107067 + C42634 * C106914) *
               C63607 +
           (C133146 + C133147 + C133148 + C133149 + C133150 + C133151) *
               C141341) *
              C5322 -
          ((C136619 + C136620 + C136621 + C136622 + C136623 + C136624) *
               C141341 +
           (C58275 * C106914 + C58030 * C107067 + C42634 * C141505 +
            C42383 * C107066 + C37432 * C141508 + C37111 * C107065) *
               C63607) *
              C5323 +
          ((C42383 * C107065 + C42634 * C141508 + C58030 * C107066 +
            C58275 * C141505 + C63256 * C107067 + C63421 * C106914) *
               C63607 +
           (C39706 * C107065 + C40042 * C141508 + C55368 * C107066 +
            C55701 * C141505 + (C29775 * C57766 + C141219 * C57767) * C107067 +
            (C29775 * C57943 + C141219 * C58271) * C106914) *
               C141341) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C63707 * C108 + C63607 * C189 + C63708 * C823 + C141341 * C912) *
               C107065 +
           (C63707 * C276 + C63607 * C635 + C63708 * C1006 + C141341 * C1419) *
               C141508 +
           (C81629 + C81630) * C107066 + (C82503 + C82504) * C141505 +
           C138757 * C107067 + C139239 * C106914) *
              C141219 * C5322 -
          ((C139244 + C139245) * C106914 + (C138771 + C138772) * C107067 +
           (C89127 + C89128) * C141505 + (C88501 + C88502) * C107066 +
           (C82504 + C82503) * C141508 + (C81630 + C81629) * C107065) *
              C141219 * C5323 +
          (C138757 * C107065 + C139239 * C141508 +
           (C138772 + C138771) * C107066 + (C139245 + C139244) * C141505 +
           (C63707 * C49989 + C63607 * C50082 + C63708 * C57766 +
            C141341 * C57850) *
               C107067 +
           (C63707 * C50173 + C63607 * C50589 + C63708 * C57943 +
            C141341 * C58349) *
               C106914) *
              C141219 * C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[53] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C107578 * C108 + C107582 + C107582 + C141508 * C714 +
                      C107579 * C1601 + C107583 + C107583 + C141505 * C2283 +
                      C107580 * C5325 + C107584 + C107584 + C106914 * C5781) *
                         C63607 +
                     (C133366 + C133367 + C133368) * C141341) *
                        C141219 * C5322 -
                    ((C136842 + C136843 + C136844) * C141341 +
                     (C107580 * C21035 + C109541 + C109541 + C106914 * C21734 +
                      C107579 * C5325 + C109542 + C109542 + C141505 * C5781 +
                      C107578 * C1601 + C109543 + C109543 + C141508 * C2283) *
                         C63607) *
                        C141219 * C5323 +
                    ((C107578 * C5325 + C114487 + C114487 + C141508 * C5781 +
                      C107579 * C21035 + C114488 + C114488 + C141505 * C21734 +
                      C107580 * C49989 + C114489 + C114489 + C106914 * C50668) *
                         C63607 +
                     (C107578 * C13205 + C139320 + C139320 + C141508 * C13845 +
                      C107579 * C42109 + C139321 + C139321 + C141505 * C42793 +
                      C107580 * C57766 + C139322 + C139322 + C106914 * C58431) *
                         C141341) *
                        C141219 * C5324) *
                   C141281 * C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexx[54] += (-std::pow(Pi, 2.5) *
                   (((C21822 * C108 + C21827 + C21827 + C141462 * C120 +
                      C21824 * C109 + C21828 + C21828 + C141224 * C121) *
                         C141353 * C21819 +
                     (C21822 * C823 + C21829 + C21829 + C141462 * C833 +
                      C21824 * C822 + C21830 + C21830 + C141224 * C832) *
                         C141353 * C21820 +
                     (C21822 * C2960 + C21831 + C21831 + C141462 * C2968 +
                      C21824 * C2961 + C21832 + C21832 + C141224 * C2969) *
                         C141353 * C21821) *
                        C141298 * C141281 * C97 -
                    ((C21824 * C2962 + C21833 + C21833 + C141224 * C2970 +
                      C21822 * C2961 + C21834 + C21834 + C141462 * C2969) *
                         C141353 * C21821 +
                     (C21824 * C821 + C21835 + C21835 + C141224 * C831 +
                      C21822 * C822 + C21836 + C21836 + C141462 * C832) *
                         C141353 * C21820 +
                     (C21824 * C110 + C21837 + C21837 + C141224 * C122 +
                      C21822 * C109 + C21838 + C21838 + C141462 * C121) *
                         C141353 * C21819) *
                        C141298 * C141281 * C98 +
                    ((C21822 * C110 + C21839 + C21839 + C141462 * C122 +
                      C21824 * C111 + C21840 + C21840 + C141224 * C123) *
                         C141353 * C21819 +
                     (C21822 * C821 + C21841 + C21841 + C141462 * C831 +
                      C21824 * C820 + C21842 + C21842 + C141224 * C830) *
                         C141353 * C21820 +
                     (C21822 * C2962 + C21843 + C21843 + C141462 * C2970 +
                      C21824 * C2963 + C21844 + C21844 + C141224 * C2971) *
                         C141353 * C21821) *
                        C141298 * C141281 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 +
                     C128 + C128 + C90 * C121 + C104 * C110 + C129 + C129 +
                     C91 * C122 + C106 * C111 + C130 + C130 + C92 * C123) *
                        C141353 * C141327 * C141298 * C141281 * C97 -
                    (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 +
                     C132 + C132 + C91 * C123 + C102 * C110 + C133 + C133 +
                     C90 * C122 + C100 * C109 + C134 + C134 + C89 * C121) *
                        C141353 * C141327 * C141298 * C141281 * C98 +
                    (C100 * C110 + C135 + C135 + C89 * C122 + C102 * C111 +
                     C136 + C136 + C90 * C123 + C104 * C112 + C137 + C137 +
                     C91 * C124 + C106 * C113 + C138 + C138 + C92 * C125) *
                        C141353 * C141327 * C141298 * C141281 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C21822 * C108 + C21827 + C21827 + C141462 * C120 +
                      C21824 * C109 + C21828 + C21828 + C141224 * C121) *
                         C42873 +
                     (C21822 * C1601 + C23748 + C23748 + C141462 * C1611 +
                      C21824 * C1600 + C23747 + C23747 + C141224 * C1610) *
                         C42874 +
                     (C21822 * C5325 + C29094 + C29094 + C141462 * C5333 +
                      C21824 * C5326 + C29095 + C29095 + C141224 * C5334) *
                         C42875) *
                        C141327 * C141298 * C141281 * C97 -
                    ((C21824 * C5327 + C42877 + C42877 + C141224 * C5335 +
                      C21822 * C5326 + C42878 + C42878 + C141462 * C5334) *
                         C42875 +
                     (C21824 * C1599 + C23750 + C23750 + C141224 * C1609 +
                      C21822 * C1600 + C23749 + C23749 + C141462 * C1610) *
                         C42874 +
                     (C21824 * C110 + C21837 + C21837 + C141224 * C122 +
                      C21822 * C109 + C21838 + C21838 + C141462 * C121) *
                         C42873) *
                        C141327 * C141298 * C141281 * C98 +
                    ((C21822 * C110 + C21839 + C21839 + C141462 * C122 +
                      C21824 * C111 + C21840 + C21840 + C141224 * C123) *
                         C42873 +
                     (C21822 * C1599 + C42879 + C42879 + C141462 * C1609 +
                      C21824 * C1598 + C42880 + C42880 + C141224 * C1608) *
                         C42874 +
                     (C21822 * C5327 + C42881 + C42881 + C141462 * C5335 +
                      C21824 * C5328 + C42882 + C42882 + C141224 * C5336) *
                         C42875) *
                        C141327 * C141298 * C141281 * C99)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[54] +=
        (-std::pow(Pi, 2.5) *
         (((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
            C21920 * C2960 + C21821 * C3026) *
               C139366 +
           (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
            C21920 * C2964 + C21821 * C3030) *
               C141462 +
           (C21946 + C21947 + C21948) * C139356 +
           (C21949 + C21950 + C21951) * C141224) *
              C141353 * C141298 * C141281 * C97 -
          ((C21952 + C21953 + C21954) * C141224 +
           (C21955 + C21956 + C21957) * C139356 +
           (C21951 + C21950 + C21949) * C141462 +
           (C21948 + C21947 + C21946) * C139366) *
              C141353 * C141298 * C141281 * C98 +
          ((C21957 + C21956 + C21955) * C139366 +
           (C21954 + C21953 + C21952) * C141462 +
           (C21918 * C111 + C21819 * C192 + C21919 * C820 + C21820 * C909 +
            C21920 * C2963 + C21821 * C3029) *
               C139356 +
           (C21918 * C117 + C21819 * C198 + C21919 * C825 + C21820 * C914 +
            C21920 * C2967 + C21821 * C3033) *
               C141224) *
              C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C188 * C108 + C141327 * C189) * C101 +
           (C188 * C114 + C141327 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C141353 * C141298 * C141281 * C97 -
          (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
           C220 * C103 + C219 * C89 + C218 * C101) *
              C141353 * C141298 * C141281 * C98 +
          (C220 * C101 + C221 * C89 + C222 * C103 + C223 * C90 + C225 * C105 +
           C224 * C91 + (C188 * C113 + C141327 * C194) * C107 +
           (C188 * C119 + C141327 * C200) * C92) *
              C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C139366 +
            (C188 * C114 + C141327 * C195) * C141462 + C218 * C139356 +
            C219 * C141224) *
               C42873 +
           (C15877 * C139366 + C15878 * C141462 + C1715 * C139356 +
            C1714 * C141224) *
               C42874 +
           (C21152 * C139366 + C21151 * C141462 + C15882 * C139356 +
            C15881 * C141224) *
               C42875) *
              C141298 * C141281 * C97 -
          ((C15879 * C141224 + C15880 * C139356 + C15881 * C141462 +
            C15882 * C139366) *
               C42875 +
           (C1712 * C141224 + C1713 * C139356 + C1714 * C141462 +
            C1715 * C139366) *
               C42874 +
           (C221 * C141224 + C220 * C139356 + C219 * C141462 + C218 * C139366) *
               C42873) *
              C141298 * C141281 * C98 +
          ((C220 * C139366 + C221 * C141462 + C222 * C139356 + C223 * C141224) *
               C42873 +
           (C1713 * C139366 + C1712 * C141462 + C1711 * C139356 +
            C1710 * C141224) *
               C42874 +
           (C15880 * C139366 + C15879 * C141462 +
            (C188 * C5328 + C141327 * C5394) * C139356 +
            (C188 * C5332 + C141327 * C5398) * C141224) *
               C42875) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexz[54] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C139366 +
            (C275 * C114 + C141353 * C282) * C141462 + C305 * C139356 +
            C306 * C141224) *
               C21819 +
           (C6988 * C139366 + C6989 * C141462 + C1031 * C139356 +
            C1030 * C141224) *
               C21820 +
           (C9864 * C139366 + C9863 * C141462 + C6993 * C139356 +
            C6992 * C141224) *
               C21821) *
              C141298 * C141281 * C97 -
          ((C6990 * C141224 + C6991 * C139356 + C6992 * C141462 +
            C6993 * C139366) *
               C21821 +
           (C1028 * C141224 + C1029 * C139356 + C1030 * C141462 +
            C1031 * C139366) *
               C21820 +
           (C308 * C141224 + C307 * C139356 + C306 * C141462 + C305 * C139366) *
               C21819) *
              C141298 * C141281 * C98 +
          ((C307 * C139366 + C308 * C141462 + C309 * C139356 + C310 * C141224) *
               C21819 +
           (C1029 * C139366 + C1028 * C141462 + C1027 * C139356 +
            C1026 * C141224) *
               C21820 +
           (C6991 * C139366 + C6990 * C141462 +
            (C275 * C2963 + C141353 * C3087) * C139356 +
            (C275 * C2967 + C141353 * C3091) * C141224) *
               C21821) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C275 * C108 + C141353 * C276) * C101 +
           (C275 * C114 + C141353 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C141327 * C141298 * C141281 * C97 -
          (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
           C307 * C103 + C306 * C89 + C305 * C101) *
              C141327 * C141298 * C141281 * C98 +
          (C307 * C101 + C308 * C89 + C309 * C103 + C310 * C90 + C312 * C105 +
           C311 * C91 + (C275 * C113 + C141353 * C281) * C107 +
           (C275 * C119 + C141353 * C287) * C92) *
              C141327 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
            C43032 * C5325 + C42875 * C5449) *
               C139366 +
           (C43030 * C114 + C42873 * C282 + C43031 * C1606 + C42874 * C1789 +
            C43032 * C5329 + C42875 * C5453) *
               C141462 +
           (C43058 + C43059 + C43060) * C139356 +
           (C43061 + C43062 + C43063) * C141224) *
              C141327 * C141298 * C141281 * C97 -
          ((C43064 + C43065 + C43066) * C141224 +
           (C43067 + C43068 + C43069) * C139356 +
           (C43063 + C43062 + C43061) * C141462 +
           (C43060 + C43059 + C43058) * C139366) *
              C141327 * C141298 * C141281 * C98 +
          ((C43069 + C43068 + C43067) * C139366 +
           (C43066 + C43065 + C43064) * C141462 +
           (C43030 * C111 + C42873 * C279 + C43031 * C1598 + C42874 * C1781 +
            C43032 * C5328 + C42875 * C5452) *
               C139356 +
           (C43030 * C117 + C42873 * C285 + C43031 * C1603 + C42874 * C1786 +
            C43032 * C5332 + C42875 * C5456) *
               C141224) *
              C141327 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[54] +=
        (-std::pow(Pi, 2.5) *
         (((C139366 * C108 + C141462 * C114 + C139356 * C109 + C141224 * C115) *
               C21918 +
           (C139366 * C189 + C141462 * C362 + C139356 * C190 + C141224 * C363) *
               C21819 +
           (C139366 * C823 + C141462 * C828 + C139356 * C822 + C141224 * C827) *
               C21919 +
           (C139366 * C912 + C141462 * C1100 + C139356 * C911 +
            C141224 * C1099) *
               C21820 +
           (C139366 * C2960 + C141462 * C2964 + C139356 * C2961 +
            C141224 * C2965) *
               C21920 +
           (C139366 * C3026 + C141462 * C3142 + C139356 * C3027 +
            C141224 * C3143) *
               C21821) *
              C141353 * C141298 * C141281 * C97 -
          ((C139356 * C3028 + C141224 * C3144 + C139366 * C3027 +
            C141462 * C3143) *
               C21821 +
           (C139356 * C2962 + C141224 * C2966 + C139366 * C2961 +
            C141462 * C2965) *
               C21920 +
           (C139356 * C910 + C141224 * C1098 + C139366 * C911 +
            C141462 * C1099) *
               C21820 +
           (C139356 * C821 + C141224 * C826 + C139366 * C822 + C141462 * C827) *
               C21919 +
           (C139356 * C191 + C141224 * C364 + C139366 * C190 + C141462 * C363) *
               C21819 +
           (C139356 * C110 + C141224 * C116 + C139366 * C109 + C141462 * C115) *
               C21918) *
              C141353 * C141298 * C141281 * C98 +
          ((C139366 * C110 + C141462 * C116 + C139356 * C111 + C141224 * C117) *
               C21918 +
           (C139366 * C191 + C141462 * C364 + C139356 * C192 + C141224 * C365) *
               C21819 +
           (C139366 * C821 + C141462 * C826 + C139356 * C820 + C141224 * C825) *
               C21919 +
           (C139366 * C910 + C141462 * C1098 + C139356 * C909 +
            C141224 * C1097) *
               C21820 +
           (C139366 * C2962 + C141462 * C2966 + C139356 * C2963 +
            C141224 * C2967) *
               C21920 +
           (C139366 * C3028 + C141462 * C3144 + C139356 * C3029 +
            C141224 * C3145) *
               C21821) *
              C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C141327) *
              C141353 * C141298 * C141281 * C97 -
          ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
            C90 * C364 + C101 * C190 + C89 * C363) *
               C141327 +
           (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
            C90 * C116 + C101 * C109 + C89 * C115) *
               C188) *
              C141353 * C141298 * C141281 * C98 +
          ((C101 * C110 + C89 * C116 + C103 * C111 + C90 * C117 + C105 * C112 +
            C91 * C118 + C107 * C113 + C92 * C119) *
               C188 +
           (C101 * C191 + C89 * C364 + C103 * C192 + C90 * C365 + C105 * C193 +
            C91 * C366 + C107 * C194 + C92 * C367) *
               C141327) *
              C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C188 +
            (C139366 * C189 + C141462 * C362 + C139356 * C190 +
             C141224 * C363) *
                C141327) *
               C42873 +
           ((C139366 * C1601 + C141462 * C1606 + C139356 * C1600 +
             C141224 * C1605) *
                C188 +
            (C139366 * C1690 + C141462 * C1878 + C139356 * C1689 +
             C141224 * C1877) *
                C141327) *
               C42874 +
           ((C139366 * C5325 + C141462 * C5329 + C139356 * C5326 +
             C141224 * C5330) *
                C188 +
            (C139366 * C5391 + C141462 * C5507 + C139356 * C5392 +
             C141224 * C5508) *
                C141327) *
               C42875) *
              C141298 * C141281 * C97 -
          (((C139356 * C5393 + C141224 * C5509 + C139366 * C5392 +
             C141462 * C5508) *
                C141327 +
            (C139356 * C5327 + C141224 * C5331 + C139366 * C5326 +
             C141462 * C5330) *
                C188) *
               C42875 +
           ((C139356 * C1688 + C141224 * C1876 + C139366 * C1689 +
             C141462 * C1877) *
                C141327 +
            (C139356 * C1599 + C141224 * C1604 + C139366 * C1600 +
             C141462 * C1605) *
                C188) *
               C42874 +
           ((C139356 * C191 + C141224 * C364 + C139366 * C190 +
             C141462 * C363) *
                C141327 +
            (C139356 * C110 + C141224 * C116 + C139366 * C109 +
             C141462 * C115) *
                C188) *
               C42873) *
              C141298 * C141281 * C98 +
          (((C139366 * C110 + C141462 * C116 + C139356 * C111 +
             C141224 * C117) *
                C188 +
            (C139366 * C191 + C141462 * C364 + C139356 * C192 +
             C141224 * C365) *
                C141327) *
               C42873 +
           ((C139366 * C1599 + C141462 * C1604 + C139356 * C1598 +
             C141224 * C1603) *
                C188 +
            (C139366 * C1688 + C141462 * C1876 + C139356 * C1687 +
             C141224 * C1875) *
                C141327) *
               C42874 +
           ((C139366 * C5327 + C141462 * C5331 + C139356 * C5328 +
             C141224 * C5332) *
                C188 +
            (C139366 * C5393 + C141462 * C5509 + C139356 * C5394 +
             C141224 * C5510) *
                C141327) *
               C42875) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[54] +=
        (-std::pow(Pi, 2.5) *
         (((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
            C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
            C22185 + C21821 * C3196) *
               C141462 +
           (C22219 + C22220 + C22221) * C141224) *
              C141353 * C141298 * C141281 * C97 -
          ((C22222 + C22223 + C22224) * C141224 +
           (C22221 + C22220 + C22219) * C141462) *
              C141353 * C141298 * C141281 * C98 +
          ((C22224 + C22223 + C22222) * C141462 +
           (C22179 * C111 + C22204 + C22204 + C21819 * C422 + C22180 * C820 +
            C22205 + C22205 + C21820 * C1168 + C22181 * C2963 + C22206 +
            C22206 + C21821 * C3199) *
               C141224) *
              C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C141327 * C419) * C89 + C448 * C90 +
           C449 * C91 + C450 * C92) *
              C141353 * C141298 * C141281 * C97 -
          (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) * C141353 *
              C141298 * C141281 * C98 +
          (C449 * C89 + C450 * C90 + C451 * C91 +
           (C418 * C113 + C439 + C439 + C141327 * C424) * C92) *
              C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C141462 +
            C448 * C141224) *
               C42873 +
           (C16256 * C141462 + C1971 * C141224) * C42874 +
           (C21416 * C141462 + C16258 * C141224) * C42875) *
              C141298 * C141281 * C97 -
          ((C16257 * C141224 + C16258 * C141462) * C42875 +
           (C1970 * C141224 + C1971 * C141462) * C42874 +
           (C449 * C141224 + C448 * C141462) * C42873) *
              C141298 * C141281 * C98 +
          ((C449 * C141462 + C450 * C141224) * C42873 +
           (C1970 * C141462 + C1969 * C141224) * C42874 +
           (C16257 * C141462 +
            (C418 * C5328 + C5569 + C5569 + C141327 * C5564) * C141224) *
               C42875) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[54] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C21918 +
            (C275 * C189 + C141353 * C501) * C21819 + C6988 * C21919 +
            C7366 * C21820 + C9864 * C21920 + C10124 * C21821) *
               C141462 +
           (C22299 + C22300 + C22301 + C22302 + C22303 + C22304) * C141224) *
              C141298 * C141281 * C97 -
          ((C22305 + C22306 + C22307 + C22308 + C22309 + C22310) * C141224 +
           (C22304 + C22303 + C22302 + C22301 + C22300 + C22299) * C141462) *
              C141298 * C141281 * C98 +
          ((C22310 + C22309 + C22308 + C22307 + C22306 + C22305) * C141462 +
           (C309 * C21918 + C522 * C21819 + C1027 * C21919 + C1274 * C21820 +
            (C275 * C2963 + C141353 * C3087) * C21920 +
            (C275 * C3029 + C141353 * C3257) * C21821) *
               C141224) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C275 * C108 + C141353 * C276) * C188 +
                                (C275 * C189 + C141353 * C501) * C141327) *
                                   C89 +
                               (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
                                  C141298 * C141281 * C97 -
                              ((C527 + C519) * C92 + (C526 + C514) * C91 +
                               (C525 + C511) * C90 + (C524 + C508) * C89) *
                                  C141298 * C141281 * C98 +
                              (C528 * C89 + C529 * C90 + (C519 + C527) * C91 +
                               ((C275 * C113 + C141353 * C281) * C188 +
                                (C275 * C194 + C141353 * C506) * C141327) *
                                   C92) *
                                  C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
             C43032 * C5325 + C42875 * C5449) *
                C188 +
            (C43030 * C189 + C42873 * C501 + C43031 * C1690 + C42874 * C2040 +
             C43032 * C5391 + C42875 * C5619) *
                C141327) *
               C141462 +
           ((C43058 + C43059 + C43060) * C188 +
            (C43304 + C43305 + C43306) * C141327) *
               C141224) *
              C141298 * C141281 * C97 -
          (((C43307 + C43308 + C43309) * C141327 +
            (C43067 + C43068 + C43069) * C188) *
               C141224 +
           ((C43306 + C43305 + C43304) * C141327 +
            (C43060 + C43059 + C43058) * C188) *
               C141462) *
              C141298 * C141281 * C98 +
          (((C43069 + C43068 + C43067) * C188 +
            (C43309 + C43308 + C43307) * C141327) *
               C141462 +
           ((C43030 * C111 + C42873 * C279 + C43031 * C1598 + C42874 * C1781 +
             C43032 * C5328 + C42875 * C5452) *
                C188 +
            (C43030 * C192 + C42873 * C504 + C43031 * C1687 + C42874 * C2037 +
             C43032 * C5394 + C42875 * C5622) *
                C141327) *
               C141224) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezx[54] +=
        (-std::pow(Pi, 2.5) * ((((C139366 * C108 + C141462 * C114 +
                                  C139356 * C109 + C141224 * C115) *
                                     C275 +
                                 (C139366 * C276 + C141462 * C579 +
                                  C139356 * C277 + C141224 * C580) *
                                     C141353) *
                                    C21819 +
                                ((C139366 * C823 + C141462 * C828 +
                                  C139356 * C822 + C141224 * C827) *
                                     C275 +
                                 (C139366 * C1006 + C141462 * C1348 +
                                  C139356 * C1005 + C141224 * C1347) *
                                     C141353) *
                                    C21820 +
                                ((C139366 * C2960 + C141462 * C2964 +
                                  C139356 * C2961 + C141224 * C2965) *
                                     C275 +
                                 (C139366 * C3084 + C141462 * C3308 +
                                  C139356 * C3085 + C141224 * C3309) *
                                     C141353) *
                                    C21821) *
                                   C141298 * C141281 * C97 -
                               (((C139356 * C3086 + C141224 * C3310 +
                                  C139366 * C3085 + C141462 * C3309) *
                                     C141353 +
                                 (C139356 * C2962 + C141224 * C2966 +
                                  C139366 * C2961 + C141462 * C2965) *
                                     C275) *
                                    C21821 +
                                ((C139356 * C1004 + C141224 * C1346 +
                                  C139366 * C1005 + C141462 * C1347) *
                                     C141353 +
                                 (C139356 * C821 + C141224 * C826 +
                                  C139366 * C822 + C141462 * C827) *
                                     C275) *
                                    C21820 +
                                ((C139356 * C278 + C141224 * C581 +
                                  C139366 * C277 + C141462 * C580) *
                                     C141353 +
                                 (C139356 * C110 + C141224 * C116 +
                                  C139366 * C109 + C141462 * C115) *
                                     C275) *
                                    C21819) *
                                   C141298 * C141281 * C98 +
                               (((C139366 * C110 + C141462 * C116 +
                                  C139356 * C111 + C141224 * C117) *
                                     C275 +
                                 (C139366 * C278 + C141462 * C581 +
                                  C139356 * C279 + C141224 * C582) *
                                     C141353) *
                                    C21819 +
                                ((C139366 * C821 + C141462 * C826 +
                                  C139356 * C820 + C141224 * C825) *
                                     C275 +
                                 (C139366 * C1004 + C141462 * C1346 +
                                  C139356 * C1003 + C141224 * C1345) *
                                     C141353) *
                                    C21820 +
                                ((C139366 * C2962 + C141462 * C2966 +
                                  C139356 * C2963 + C141224 * C2967) *
                                     C275 +
                                 (C139366 * C3086 + C141462 * C3310 +
                                  C139356 * C3087 + C141224 * C3311) *
                                     C141353) *
                                    C21821) *
                                   C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C141353) *
              C141327 * C141298 * C141281 * C97 -
          ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
            C90 * C581 + C101 * C277 + C89 * C580) *
               C141353 +
           (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
            C90 * C116 + C101 * C109 + C89 * C115) *
               C275) *
              C141327 * C141298 * C141281 * C98 +
          ((C101 * C110 + C89 * C116 + C103 * C111 + C90 * C117 + C105 * C112 +
            C91 * C118 + C107 * C113 + C92 * C119) *
               C275 +
           (C101 * C278 + C89 * C581 + C103 * C279 + C90 * C582 + C105 * C280 +
            C91 * C583 + C107 * C281 + C92 * C584) *
               C141353) *
              C141327 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C139366 * C108 + C141462 * C114 + C139356 * C109 + C141224 * C115) *
               C43030 +
           (C139366 * C276 + C141462 * C579 + C139356 * C277 + C141224 * C580) *
               C42873 +
           (C139366 * C1601 + C141462 * C1606 + C139356 * C1600 +
            C141224 * C1605) *
               C43031 +
           (C139366 * C1784 + C141462 * C2126 + C139356 * C1783 +
            C141224 * C2125) *
               C42874 +
           (C139366 * C5325 + C141462 * C5329 + C139356 * C5326 +
            C141224 * C5330) *
               C43032 +
           (C139366 * C5449 + C141462 * C5673 + C139356 * C5450 +
            C141224 * C5674) *
               C42875) *
              C141327 * C141298 * C141281 * C97 -
          ((C139356 * C5451 + C141224 * C5675 + C139366 * C5450 +
            C141462 * C5674) *
               C42875 +
           (C139356 * C5327 + C141224 * C5331 + C139366 * C5326 +
            C141462 * C5330) *
               C43032 +
           (C139356 * C1782 + C141224 * C2124 + C139366 * C1783 +
            C141462 * C2125) *
               C42874 +
           (C139356 * C1599 + C141224 * C1604 + C139366 * C1600 +
            C141462 * C1605) *
               C43031 +
           (C139356 * C278 + C141224 * C581 + C139366 * C277 + C141462 * C580) *
               C42873 +
           (C139356 * C110 + C141224 * C116 + C139366 * C109 + C141462 * C115) *
               C43030) *
              C141327 * C141298 * C141281 * C98 +
          ((C139366 * C110 + C141462 * C116 + C139356 * C111 + C141224 * C117) *
               C43030 +
           (C139366 * C278 + C141462 * C581 + C139356 * C279 + C141224 * C582) *
               C42873 +
           (C139366 * C1599 + C141462 * C1604 + C139356 * C1598 +
            C141224 * C1603) *
               C43031 +
           (C139366 * C1782 + C141462 * C2124 + C139356 * C1781 +
            C141224 * C2123) *
               C42874 +
           (C139366 * C5327 + C141462 * C5331 + C139356 * C5328 +
            C141224 * C5332) *
               C43032 +
           (C139366 * C5451 + C141462 * C5675 + C139356 * C5452 +
            C141224 * C5676) *
               C42875) *
              C141327 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezy[54] +=
        (-std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C275 +
            (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
             C21920 * C3084 + C21821 * C3362) *
                C141353) *
               C141462 +
           ((C21946 + C21947 + C21948) * C275 +
            (C22471 + C22472 + C22473) * C141353) *
               C141224) *
              C141298 * C141281 * C97 -
          (((C22474 + C22475 + C22476) * C141353 +
            (C21955 + C21956 + C21957) * C275) *
               C141224 +
           ((C22473 + C22472 + C22471) * C141353 +
            (C21948 + C21947 + C21946) * C275) *
               C141462) *
              C141298 * C141281 * C98 +
          (((C21957 + C21956 + C21955) * C275 +
            (C22476 + C22475 + C22474) * C141353) *
               C141462 +
           ((C21918 * C111 + C21819 * C192 + C21919 * C820 + C21820 * C909 +
             C21920 * C2963 + C21821 * C3029) *
                C275 +
            (C21918 * C279 + C21819 * C638 + C21919 * C1003 + C21820 * C1416 +
             C21920 * C3087 + C21821 * C3365) *
                C141353) *
               C141224) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C188 * C108 + C141327 * C189) * C275 +
                                (C188 * C276 + C141327 * C635) * C141353) *
                                   C89 +
                               (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                                  C141298 * C141281 * C97 -
                              ((C661 + C653) * C92 + (C660 + C648) * C91 +
                               (C659 + C645) * C90 + (C658 + C642) * C89) *
                                  C141298 * C141281 * C98 +
                              (C662 * C89 + C663 * C90 + (C653 + C661) * C91 +
                               ((C188 * C113 + C141327 * C194) * C275 +
                                (C188 * C281 + C141327 * C640) * C141353) *
                                   C92) *
                                  C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C43030 +
            (C188 * C276 + C141327 * C635) * C42873 + C15877 * C43031 +
            C16596 * C42874 + C21152 * C43032 + C21660 * C42875) *
               C141462 +
           (C43458 + C43459 + C43460 + C43461 + C43462 + C43463) * C141224) *
              C141298 * C141281 * C97 -
          ((C43464 + C43465 + C43466 + C43467 + C43468 + C43469) * C141224 +
           (C43463 + C43462 + C43461 + C43460 + C43459 + C43458) * C141462) *
              C141298 * C141281 * C98 +
          ((C43469 + C43468 + C43467 + C43466 + C43465 + C43464) * C141462 +
           (C222 * C43030 + C656 * C42873 + C1711 * C43031 + C2209 * C42874 +
            (C188 * C5328 + C141327 * C5394) * C43032 +
            (C188 * C5452 + C141327 * C5730) * C42875) *
               C141224) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezz[54] +=
        (-std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C21819 +
            C7709 * C21820 + C10372 * C21821) *
               C141462 +
           (C22551 + C22552 + C22553) * C141224) *
              C141298 * C141281 * C97 -
          ((C22554 + C22555 + C22556) * C141224 +
           (C22553 + C22552 + C22551) * C141462) *
              C141298 * C141281 * C98 +
          ((C22556 + C22555 + C22554) * C141462 +
           (C745 * C21819 + C1525 * C21820 +
            (C713 * C2963 + C3424 + C3424 + C141353 * C3419) * C21821) *
               C141224) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141353 * C714) * C141327 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C141298 * C141281 * C97 -
          (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C141298 *
              C141281 * C98 +
          (C748 * C89 + C749 * C90 + C750 * C91 +
           (C713 * C113 + C734 + C734 + C141353 * C719) * C141327 * C92) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C43543 * C108 + C43547 + C43547 + C42873 * C714 + C43544 * C1601 +
            C43548 + C43548 + C42874 * C2283 + C43545 * C5325 + C43549 +
            C43549 + C42875 * C5781) *
               C141327 * C141462 +
           (C43583 + C43584 + C43585) * C141327 * C141224) *
              C141298 * C141281 * C97 -
          ((C43586 + C43587 + C43588) * C141327 * C141224 +
           (C43585 + C43584 + C43583) * C141327 * C141462) *
              C141298 * C141281 * C98 +
          ((C43588 + C43587 + C43586) * C141327 * C141462 +
           (C43543 * C111 + C43568 + C43568 + C42873 * C717 + C43544 * C1598 +
            C43569 + C43569 + C42874 * C2280 + C43545 * C5328 + C43570 +
            C43570 + C42875 * C5784) *
               C141327 * C141224) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexx[55] += (-std::pow(Pi, 2.5) *
                   ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 +
                       C21824 * C109 + C21828 + C21828 + C141224 * C121) *
                          C141353 * C21819 +
                      (C22691 + C22692) * C141353 * C21820 +
                      (C22693 + C22694) * C141353 * C21821) *
                         C141298 * C816 -
                     ((C21824 * C9668 + C22663 + C22663 + C141224 * C9674 +
                       C21822 * C9667 + C22664 + C22664 + C141462 * C9673) *
                          C141353 * C21821 +
                      (C22694 + C22693) * C141353 * C21820 +
                      (C22692 + C22691) * C141353 * C21819) *
                         C141298 * C141497) *
                        C818 +
                    (((C22695 + C22696) * C141353 * C21819 +
                      (C22697 + C22698) * C141353 * C21820 +
                      (C21822 * C9668 + C22673 + C22673 + C141462 * C9674 +
                       C21824 * C9669 + C22674 + C22674 + C141224 * C9675) *
                          C141353 * C21821) *
                         C141298 * C141497 -
                     ((C22698 + C22697) * C141353 * C21821 +
                      (C22696 + C22695) * C141353 * C21820 +
                      (C21824 * C110 + C21837 + C21837 + C141224 * C122 +
                       C21822 * C109 + C21838 + C21838 + C141462 * C121) *
                          C141353 * C21819) *
                         C141298 * C816) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 +
                      C128 + C128 + C90 * C121 + C104 * C110 + C129 + C129 +
                      C91 * C122 + C106 * C111 + C130 + C130 + C92 * C123) *
                         C141353 * C141327 * C141298 * C816 -
                     (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 +
                      C837 + C837 + C91 * C831 + C102 * C822 + C838 + C838 +
                      C90 * C832 + C100 * C823 + C839 + C839 + C89 * C833) *
                         C141353 * C141327 * C141298 * C141497) *
                        C818 +
                    ((C100 * C822 + C840 + C840 + C89 * C832 + C102 * C821 +
                      C841 + C841 + C90 * C831 + C104 * C820 + C842 + C842 +
                      C91 * C830 + C106 * C824 + C843 + C843 + C92 * C834) *
                         C141353 * C141327 * C141298 * C141497 -
                     (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 +
                      C132 + C132 + C91 * C123 + C102 * C110 + C133 + C133 +
                      C90 * C122 + C100 * C109 + C134 + C134 + C89 * C121) *
                         C141353 * C141327 * C141298 * C816) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 +
                       C21824 * C109 + C21828 + C21828 + C141224 * C121) *
                          C42873 +
                      (C21822 * C1601 + C23748 + C23748 + C141462 * C1611 +
                       C21824 * C1600 + C23747 + C23747 + C141224 * C1610) *
                          C42874 +
                      (C21822 * C5325 + C29094 + C29094 + C141462 * C5333 +
                       C21824 * C5326 + C29095 + C29095 + C141224 * C5334) *
                          C42875) *
                         C141327 * C141298 * C816 -
                     ((C21824 * C13206 + C29097 + C29097 + C141224 * C13212 +
                       C21822 * C13205 + C29096 + C29096 + C141462 * C13211) *
                          C42875 +
                      (C26378 + C26379) * C42874 + (C22692 + C22691) * C42873) *
                         C141327 * C141298 * C141497) *
                        C818 +
                    (((C22695 + C22696) * C42873 +
                      (C21822 * C3491 + C23751 + C23751 + C141462 * C3499 +
                       C21824 * C3492 + C23752 + C23752 + C141224 * C3500) *
                          C42874 +
                      (C21822 * C13206 + C43687 + C43687 + C141462 * C13212 +
                       C21824 * C13207 + C43688 + C43688 + C141224 * C13213) *
                          C42875) *
                         C141327 * C141298 * C141497 -
                     ((C21824 * C5327 + C42877 + C42877 + C141224 * C5335 +
                       C21822 * C5326 + C42878 + C42878 + C141462 * C5334) *
                          C42875 +
                      (C21824 * C1599 + C23750 + C23750 + C141224 * C1609 +
                       C21822 * C1600 + C23749 + C23749 + C141462 * C1610) *
                          C42874 +
                      (C21824 * C110 + C21837 + C21837 + C141224 * C122 +
                       C21822 * C109 + C21838 + C21838 + C141462 * C121) *
                          C42873) *
                         C141327 * C141298 * C816) *
                        C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[55] +=
        (-std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C139366 +
            (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
             C21920 * C2964 + C21821 * C3030) *
                C141462 +
            (C21946 + C21947 + C21948) * C139356 +
            (C21949 + C21950 + C21951) * C141224) *
               C141353 * C141298 * C816 -
           ((C22809 + C22810 + C22811) * C141224 +
            (C22812 + C22813 + C22814) * C139356 +
            (C21920 * C9670 + C21821 * C9771 + C21919 * C2964 + C21820 * C3030 +
             C21918 * C828 + C21819 * C917) *
                C141462 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C139366) *
               C141353 * C141298 * C141497) *
              C818 +
          (((C22814 + C22813 + C22812) * C139366 +
            (C22811 + C22810 + C22809) * C141462 +
            (C21918 * C821 + C21819 * C910 + C21919 * C2962 + C21820 * C3028 +
             C21920 * C9669 + C21821 * C9770) *
                C139356 +
            (C21918 * C826 + C21819 * C915 + C21919 * C2966 + C21820 * C3032 +
             C21920 * C9672 + C21821 * C9773) *
                C141224) *
               C141353 * C141298 * C141497 -
           ((C21952 + C21953 + C21954) * C141224 +
            (C21955 + C21956 + C21957) * C139356 +
            (C21951 + C21950 + C21949) * C141462 +
            (C21948 + C21947 + C21946) * C139366) *
               C141353 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C101 +
            (C188 * C114 + C141327 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141353 * C141298 * C816 -
           (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
            C937 * C103 + (C188 * C828 + C141327 * C917) * C89 +
            (C188 * C823 + C141327 * C912) * C101) *
               C141353 * C141298 * C141497) *
              C818 +
          ((C937 * C101 + C936 * C89 + C935 * C103 + C934 * C90 + C933 * C105 +
            C932 * C91 + (C188 * C824 + C141327 * C913) * C107 +
            (C188 * C829 + C141327 * C918) * C92) *
               C141353 * C141298 * C141497 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C141353 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C139366 +
             (C188 * C114 + C141327 * C195) * C141462 + C218 * C139356 +
             C219 * C141224) *
                C42873 +
            (C15877 * C139366 + C15878 * C141462 + C1715 * C139356 +
             C1714 * C141224) *
                C42874 +
            (C21152 * C139366 + C21151 * C141462 + C15882 * C139356 +
             C15881 * C141224) *
                C42875) *
               C141298 * C816 -
           ((C43791 * C141224 + C43792 * C139356 +
             (C188 * C13208 + C141327 * C13297) * C141462 +
             (C188 * C13205 + C141327 * C13294) * C139366) *
                C42875 +
            (C14850 * C141224 + C14851 * C139356 + C18489 * C141462 +
             C18488 * C139366) *
                C42874 +
            (C936 * C141224 + C937 * C139356 +
             (C188 * C828 + C141327 * C917) * C141462 +
             (C188 * C823 + C141327 * C912) * C139366) *
                C42873) *
               C141298 * C141497) *
              C818 +
          (((C937 * C139366 + C936 * C141462 + C935 * C139356 +
             C934 * C141224) *
                C42873 +
            (C14851 * C139366 + C14850 * C141462 + C14849 * C139356 +
             C14848 * C141224) *
                C42874 +
            (C43792 * C139366 + C43791 * C141462 +
             (C188 * C13207 + C141327 * C13296) * C139356 +
             (C188 * C13210 + C141327 * C13299) * C141224) *
                C42875) *
               C141298 * C141497 -
           ((C15879 * C141224 + C15880 * C139356 + C15881 * C141462 +
             C15882 * C139366) *
                C42875 +
            (C1712 * C141224 + C1713 * C139356 + C1714 * C141462 +
             C1715 * C139366) *
                C42874 +
            (C221 * C141224 + C220 * C139356 + C219 * C141462 +
             C218 * C139366) *
                C42873) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[55] +=
        (-std::pow(Pi, 2.5) * (((((C275 * C108 + C141353 * C276) * C139366 +
                                  (C275 * C114 + C141353 * C282) * C141462 +
                                  C305 * C139356 + C306 * C141224) *
                                     C21819 +
                                 (C22913 + C22914 + C22915 + C22916) * C21820 +
                                 (C22917 + C22918 + C22919 + C22920) * C21821) *
                                    C141298 * C816 -
                                ((C22933 * C141224 + C22934 * C139356 +
                                  (C275 * C9670 + C141353 * C9851) * C141462 +
                                  (C275 * C9667 + C141353 * C9848) * C139366) *
                                     C21821 +
                                 (C22920 + C22919 + C22918 + C22917) * C21820 +
                                 (C22916 + C22915 + C22914 + C22913) * C21819) *
                                    C141298 * C141497) *
                                   C818 +
                               (((C22925 + C22926 + C22927 + C22928) * C21819 +
                                 (C22929 + C22930 + C22931 + C22932) * C21820 +
                                 (C22934 * C139366 + C22933 * C141462 +
                                  (C275 * C9669 + C141353 * C9850) * C139356 +
                                  (C275 * C9672 + C141353 * C9853) * C141224) *
                                     C21821) *
                                    C141298 * C141497 -
                                ((C22932 + C22931 + C22930 + C22929) * C21821 +
                                 (C22928 + C22927 + C22926 + C22925) * C21820 +
                                 (C308 * C141224 + C307 * C139356 +
                                  C306 * C141462 + C305 * C139366) *
                                     C21819) *
                                    C141298 * C816) *
                                   C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C101 +
            (C275 * C114 + C141353 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141327 * C141298 * C816 -
           (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
            C1030 * C90 + C1031 * C103 + (C275 * C828 + C141353 * C1011) * C89 +
            (C275 * C823 + C141353 * C1006) * C101) *
               C141327 * C141298 * C141497) *
              C818 +
          ((C1031 * C101 + C1030 * C89 + C1029 * C103 + C1028 * C90 +
            C1027 * C105 + C1026 * C91 +
            (C275 * C824 + C141353 * C1007) * C107 +
            (C275 * C829 + C141353 * C1012) * C92) *
               C141327 * C141298 * C141497 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C141327 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
             C43032 * C5325 + C42875 * C5449) *
                C139366 +
            (C43030 * C114 + C42873 * C282 + C43031 * C1606 + C42874 * C1789 +
             C43032 * C5329 + C42875 * C5453) *
                C141462 +
            (C43058 + C43059 + C43060) * C139356 +
            (C43061 + C43062 + C43063) * C141224) *
               C141327 * C141298 * C816 -
           ((C43903 + C43904 + C43905) * C141224 +
            (C43906 + C43907 + C43908) * C139356 +
            (C43032 * C13208 + C42875 * C13377 + C43031 * C3494 +
             C42874 * C3650 + C43030 * C828 + C42873 * C1011) *
                C141462 +
            (C43032 * C13205 + C42875 * C13374 + C43031 * C3490 +
             C42874 * C3646 + C43030 * C823 + C42873 * C1006) *
                C139366) *
               C141327 * C141298 * C141497) *
              C818 +
          (((C43908 + C43907 + C43906) * C139366 +
            (C43905 + C43904 + C43903) * C141462 +
            (C43030 * C821 + C42873 * C1004 + C43031 * C3492 + C42874 * C3648 +
             C43032 * C13207 + C42875 * C13376) *
                C139356 +
            (C43030 * C826 + C42873 * C1009 + C43031 * C3496 + C42874 * C3652 +
             C43032 * C13210 + C42875 * C13379) *
                C141224) *
               C141327 * C141298 * C141497 -
           ((C43064 + C43065 + C43066) * C141224 +
            (C43067 + C43068 + C43069) * C139356 +
            (C43063 + C43062 + C43061) * C141462 +
            (C43060 + C43059 + C43058) * C139366) *
               C141327 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[55] +=
        (-std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C21918 +
            (C139366 * C189 + C141462 * C362 + C139356 * C190 +
             C141224 * C363) *
                C21819 +
            (C23065 + C23066) * C21919 + (C23067 + C23068) * C21820 +
            (C23069 + C23070) * C21920 + (C23071 + C23072) * C21821) *
               C141353 * C141298 * C816 -
           ((C139356 * C9769 + C141224 * C9941 + C139366 * C9768 +
             C141462 * C9940) *
                C21821 +
            (C139356 * C9668 + C141224 * C9671 + C139366 * C9667 +
             C141462 * C9670) *
                C21920 +
            (C23072 + C23071) * C21820 + (C23070 + C23069) * C21919 +
            (C23068 + C23067) * C21819 + (C23066 + C23065) * C21918) *
               C141353 * C141298 * C141497) *
              C818 +
          (((C23073 + C23074) * C21918 + (C23075 + C23076) * C21819 +
            (C23077 + C23078) * C21919 + (C23079 + C23080) * C21820 +
            (C139366 * C9668 + C141462 * C9671 + C139356 * C9669 +
             C141224 * C9672) *
                C21920 +
            (C139366 * C9769 + C141462 * C9941 + C139356 * C9770 +
             C141224 * C9942) *
                C21821) *
               C141353 * C141298 * C141497 -
           ((C23080 + C23079) * C21821 + (C23078 + C23077) * C21920 +
            (C23076 + C23075) * C21820 + (C23074 + C23073) * C21919 +
            (C139356 * C191 + C141224 * C364 + C139366 * C190 +
             C141462 * C363) *
                C21819 +
            (C139356 * C110 + C141224 * C116 + C139366 * C109 +
             C141462 * C115) *
                C21918) *
               C141353 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141327) *
               C141353 * C141298 * C816 -
           ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
             C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
                C141327 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C188) *
               C141353 * C141298 * C141497) *
              C818 +
          (((C101 * C822 + C89 * C827 + C103 * C821 + C90 * C826 + C105 * C820 +
             C91 * C825 + C107 * C824 + C92 * C829) *
                C188 +
            (C101 * C911 + C89 * C1099 + C103 * C910 + C90 * C1098 +
             C105 * C909 + C91 * C1097 + C107 * C913 + C92 * C1101) *
                C141327) *
               C141353 * C141298 * C141497 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C141327 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C141353 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C188 +
             (C139366 * C189 + C141462 * C362 + C139356 * C190 +
              C141224 * C363) *
                 C141327) *
                C42873 +
            ((C139366 * C1601 + C141462 * C1606 + C139356 * C1600 +
              C141224 * C1605) *
                 C188 +
             (C139366 * C1690 + C141462 * C1878 + C139356 * C1689 +
              C141224 * C1877) *
                 C141327) *
                C42874 +
            ((C139366 * C5325 + C141462 * C5329 + C139356 * C5326 +
              C141224 * C5330) *
                 C188 +
             (C139366 * C5391 + C141462 * C5507 + C139356 * C5392 +
              C141224 * C5508) *
                 C141327) *
                C42875) *
               C141298 * C816 -
           (((C139356 * C13295 + C141224 * C13455 + C139366 * C13294 +
              C141462 * C13454) *
                 C141327 +
             (C139356 * C13206 + C141224 * C13209 + C139366 * C13205 +
              C141462 * C13208) *
                 C188) *
                C42875 +
            ((C26718 + C26719) * C141327 + (C26720 + C26721) * C188) * C42874 +
            ((C23068 + C23067) * C141327 + (C23066 + C23065) * C188) * C42873) *
               C141298 * C141497) *
              C818 +
          ((((C23073 + C23074) * C188 + (C23075 + C23076) * C141327) * C42873 +
            ((C139366 * C3491 + C141462 * C3495 + C139356 * C3492 +
              C141224 * C3496) *
                 C188 +
             (C139366 * C3573 + C141462 * C3721 + C139356 * C3574 +
              C141224 * C3722) *
                 C141327) *
                C42874 +
            ((C139366 * C13206 + C141462 * C13209 + C139356 * C13207 +
              C141224 * C13210) *
                 C188 +
             (C139366 * C13295 + C141462 * C13455 + C139356 * C13296 +
              C141224 * C13456) *
                 C141327) *
                C42875) *
               C141298 * C141497 -
           (((C139356 * C5393 + C141224 * C5509 + C139366 * C5392 +
              C141462 * C5508) *
                 C141327 +
             (C139356 * C5327 + C141224 * C5331 + C139366 * C5326 +
              C141462 * C5330) *
                 C188) *
                C42875 +
            ((C139356 * C1688 + C141224 * C1876 + C139366 * C1689 +
              C141462 * C1877) *
                 C141327 +
             (C139356 * C1599 + C141224 * C1604 + C139366 * C1600 +
              C141462 * C1605) *
                 C188) *
                C42874 +
            ((C139356 * C191 + C141224 * C364 + C139366 * C190 +
              C141462 * C363) *
                 C141327 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C188) *
                C42873) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[55] +=
        (-std::pow(Pi, 2.5) *
         ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
             C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
             C22185 + C21821 * C3196) *
                C141462 +
            (C22219 + C22220 + C22221) * C141224) *
               C141353 * C141298 * C816 -
           ((C23200 + C23201 + C23202) * C141224 +
            (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
             C22180 * C2960 + C23189 + C23189 + C21820 * C3196 + C22179 * C823 +
             C23190 + C23190 + C21819 * C1171) *
                C141462) *
               C141353 * C141298 * C141497) *
              C818 +
          (((C23202 + C23201 + C23200) * C141462 +
            (C22179 * C821 + C23191 + C23191 + C21819 * C1169 + C22180 * C2962 +
             C23192 + C23192 + C21820 * C3198 + C22181 * C9669 + C23193 +
             C23193 + C21821 * C10037) *
                C141224) *
               C141353 * C141298 * C141497 -
           ((C22222 + C22223 + C22224) * C141224 +
            (C22221 + C22220 + C22219) * C141462) *
               C141353 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C89 + C448 * C90 +
            C449 * C91 + C450 * C92) *
               C141353 * C141298 * C816 -
           (C1191 * C92 + C1192 * C91 + C1193 * C90 +
            (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C89) *
               C141353 * C141298 * C141497) *
              C818 +
          ((C1193 * C89 + C1192 * C90 + C1191 * C91 +
            (C418 * C824 + C1184 + C1184 + C141327 * C1172) * C92) *
               C141353 * C141298 * C141497 -
           (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) * C141353 *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C141462 +
             C448 * C141224) *
                C42873 +
            (C16256 * C141462 + C1971 * C141224) * C42874 +
            (C21416 * C141462 + C16258 * C141224) * C42875) *
               C141298 * C816 -
           ((C44109 * C141224 +
             (C418 * C13205 + C18790 + C18790 + C141327 * C13531) * C141462) *
                C42875 +
            (C15179 * C141224 + C18795 * C141462) * C42874 +
            (C1193 * C141224 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C141462) *
                C42873) *
               C141298 * C141497) *
              C818 +
          (((C1193 * C141462 + C1192 * C141224) * C42873 +
            (C15179 * C141462 + C15178 * C141224) * C42874 +
            (C44109 * C141462 +
             (C418 * C13207 + C18792 + C18792 + C141327 * C13533) * C141224) *
                C42875) *
               C141298 * C141497 -
           ((C16257 * C141224 + C16258 * C141462) * C42875 +
            (C1970 * C141224 + C1971 * C141462) * C42874 +
            (C449 * C141224 + C448 * C141462) * C42873) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[55] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C21918 +
             (C275 * C189 + C141353 * C501) * C21819 + C6988 * C21919 +
             C7366 * C21820 + C9864 * C21920 + C10124 * C21821) *
                C141462 +
            (C22299 + C22300 + C22301 + C22302 + C22303 + C22304) * C141224) *
               C141298 * C816 -
           ((C23309 + C23303 + C23304 + C23305 + C23306 + C23307) * C141224 +
            ((C275 * C9768 + C141353 * C10118) * C21821 +
             (C275 * C9667 + C141353 * C9848) * C21920 + C10124 * C21820 +
             C9864 * C21919 + C7366 * C21819 + C6988 * C21918) *
                C141462) *
               C141298 * C141497) *
              C818 +
          (((C23307 + C23306 + C23305 + C23304 + C23303 + C23309) * C141462 +
            (C1029 * C21918 + C1275 * C21819 + C6991 * C21919 + C7367 * C21820 +
             (C275 * C9669 + C141353 * C9850) * C21920 +
             (C275 * C9770 + C141353 * C10120) * C21821) *
                C141224) *
               C141298 * C141497 -
           ((C22305 + C22306 + C22307 + C22308 + C22309 + C22310) * C141224 +
            (C22304 + C22303 + C22302 + C22301 + C22300 + C22299) * C141462) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C275 * C108 + C141353 * C276) * C188 +
                                 (C275 * C189 + C141353 * C501) * C141327) *
                                    C89 +
                                (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
                                   C141298 * C816 -
                               ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
                                (C1279 + C1273) * C90 +
                                ((C275 * C912 + C141353 * C1262) * C141327 +
                                 (C275 * C823 + C141353 * C1006) * C188) *
                                    C89) *
                                   C141298 * C141497) *
                                  C818 +
                              (((C1273 + C1279) * C89 + (C1270 + C1278) * C90 +
                                (C1267 + C1277) * C91 +
                                ((C275 * C824 + C141353 * C1007) * C188 +
                                 (C275 * C913 + C141353 * C1263) * C141327) *
                                    C92) *
                                   C141298 * C141497 -
                               ((C527 + C519) * C92 + (C526 + C514) * C91 +
                                (C525 + C511) * C90 + (C524 + C508) * C89) *
                                   C141298 * C816) *
                                  C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
              C43032 * C5325 + C42875 * C5449) *
                 C188 +
             (C43030 * C189 + C42873 * C501 + C43031 * C1690 + C42874 * C2040 +
              C43032 * C5391 + C42875 * C5619) *
                 C141327) *
                C141462 +
            ((C43058 + C43059 + C43060) * C188 +
             (C43304 + C43305 + C43306) * C141327) *
                C141224) *
               C141298 * C816 -
           (((C44214 + C44215 + C44216) * C141327 +
             (C43906 + C43907 + C43908) * C188) *
                C141224 +
            ((C43032 * C13294 + C42875 * C13614 + C43031 * C3572 +
              C42874 * C3864 + C43030 * C912 + C42873 * C1262) *
                 C141327 +
             (C43032 * C13205 + C42875 * C13374 + C43031 * C3490 +
              C42874 * C3646 + C43030 * C823 + C42873 * C1006) *
                 C188) *
                C141462) *
               C141298 * C141497) *
              C818 +
          ((((C43908 + C43907 + C43906) * C188 +
             (C44216 + C44215 + C44214) * C141327) *
                C141462 +
            ((C43030 * C821 + C42873 * C1004 + C43031 * C3492 + C42874 * C3648 +
              C43032 * C13207 + C42875 * C13376) *
                 C188 +
             (C43030 * C910 + C42873 * C1260 + C43031 * C3574 + C42874 * C3866 +
              C43032 * C13296 + C42875 * C13616) *
                 C141327) *
                C141224) *
               C141298 * C141497 -
           (((C43307 + C43308 + C43309) * C141327 +
             (C43067 + C43068 + C43069) * C188) *
                C141224 +
            ((C43306 + C43305 + C43304) * C141327 +
             (C43060 + C43059 + C43058) * C188) *
                C141462) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[55] +=
        (-std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C275 +
             (C139366 * C276 + C141462 * C579 + C139356 * C277 +
              C141224 * C580) *
                 C141353) *
                C21819 +
            ((C23065 + C23066) * C275 + (C23424 + C23425) * C141353) * C21820 +
            ((C23069 + C23070) * C275 + (C23426 + C23427) * C141353) * C21821) *
               C141298 * C816 -
           (((C139356 * C9849 + C141224 * C10199 + C139366 * C9848 +
              C141462 * C10198) *
                 C141353 +
             (C139356 * C9668 + C141224 * C9671 + C139366 * C9667 +
              C141462 * C9670) *
                 C275) *
                C21821 +
            ((C23427 + C23426) * C141353 + (C23070 + C23069) * C275) * C21820 +
            ((C23425 + C23424) * C141353 + (C23066 + C23065) * C275) * C21819) *
               C141298 * C141497) *
              C818 +
          ((((C23073 + C23074) * C275 + (C23428 + C23429) * C141353) * C21819 +
            ((C23077 + C23078) * C275 + (C23430 + C23431) * C141353) * C21820 +
            ((C139366 * C9668 + C141462 * C9671 + C139356 * C9669 +
              C141224 * C9672) *
                 C275 +
             (C139366 * C9849 + C141462 * C10199 + C139356 * C9850 +
              C141224 * C10200) *
                 C141353) *
                C21821) *
               C141298 * C141497 -
           (((C23431 + C23430) * C141353 + (C23078 + C23077) * C275) * C21821 +
            ((C23429 + C23428) * C141353 + (C23074 + C23073) * C275) * C21820 +
            ((C139356 * C278 + C141224 * C581 + C139366 * C277 +
              C141462 * C580) *
                 C141353 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C275) *
                C21819) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141353) *
               C141327 * C141298 * C816 -
           ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
             C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
                C141353 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C275) *
               C141327 * C141298 * C141497) *
              C818 +
          (((C101 * C822 + C89 * C827 + C103 * C821 + C90 * C826 + C105 * C820 +
             C91 * C825 + C107 * C824 + C92 * C829) *
                C275 +
            (C101 * C1005 + C89 * C1347 + C103 * C1004 + C90 * C1346 +
             C105 * C1003 + C91 * C1345 + C107 * C1007 + C92 * C1349) *
                C141353) *
               C141327 * C141298 * C141497 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C141353 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C141327 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C43030 +
            (C139366 * C276 + C141462 * C579 + C139356 * C277 +
             C141224 * C580) *
                C42873 +
            (C139366 * C1601 + C141462 * C1606 + C139356 * C1600 +
             C141224 * C1605) *
                C43031 +
            (C139366 * C1784 + C141462 * C2126 + C139356 * C1783 +
             C141224 * C2125) *
                C42874 +
            (C139366 * C5325 + C141462 * C5329 + C139356 * C5326 +
             C141224 * C5330) *
                C43032 +
            (C139366 * C5449 + C141462 * C5673 + C139356 * C5450 +
             C141224 * C5674) *
                C42875) *
               C141327 * C141298 * C816 -
           ((C139356 * C13375 + C141224 * C13692 + C139366 * C13374 +
             C141462 * C13691) *
                C42875 +
            (C139356 * C13206 + C141224 * C13209 + C139366 * C13205 +
             C141462 * C13208) *
                C43032 +
            (C27041 + C27042) * C42874 + (C26720 + C26721) * C43031 +
            (C23425 + C23424) * C42873 + (C23066 + C23065) * C43030) *
               C141327 * C141298 * C141497) *
              C818 +
          (((C23073 + C23074) * C43030 + (C23428 + C23429) * C42873 +
            (C139366 * C3491 + C141462 * C3495 + C139356 * C3492 +
             C141224 * C3496) *
                C43031 +
            (C139366 * C3647 + C141462 * C3935 + C139356 * C3648 +
             C141224 * C3936) *
                C42874 +
            (C139366 * C13206 + C141462 * C13209 + C139356 * C13207 +
             C141224 * C13210) *
                C43032 +
            (C139366 * C13375 + C141462 * C13692 + C139356 * C13376 +
             C141224 * C13693) *
                C42875) *
               C141327 * C141298 * C141497 -
           ((C139356 * C5451 + C141224 * C5675 + C139366 * C5450 +
             C141462 * C5674) *
                C42875 +
            (C139356 * C5327 + C141224 * C5331 + C139366 * C5326 +
             C141462 * C5330) *
                C43032 +
            (C139356 * C1782 + C141224 * C2124 + C139366 * C1783 +
             C141462 * C2125) *
                C42874 +
            (C139356 * C1599 + C141224 * C1604 + C139366 * C1600 +
             C141462 * C1605) *
                C43031 +
            (C139356 * C278 + C141224 * C581 + C139366 * C277 +
             C141462 * C580) *
                C42873 +
            (C139356 * C110 + C141224 * C116 + C139366 * C109 +
             C141462 * C115) *
                C43030) *
               C141327 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezy[55] +=
        (-std::pow(Pi, 2.5) *
         (((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
              C21920 * C2960 + C21821 * C3026) *
                 C275 +
             (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
              C21920 * C3084 + C21821 * C3362) *
                 C141353) *
                C141462 +
            ((C21946 + C21947 + C21948) * C275 +
             (C22471 + C22472 + C22473) * C141353) *
                C141224) *
               C141298 * C816 -
           (((C23536 + C23537 + C23538) * C141353 +
             (C22812 + C22813 + C22814) * C275) *
                C141224 +
            ((C21920 * C9848 + C21821 * C10284 + C21919 * C3084 +
              C21820 * C3362 + C21918 * C1006 + C21819 * C1419) *
                 C141353 +
             (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 +
              C21820 * C3026 + C21918 * C823 + C21819 * C912) *
                 C275) *
                C141462) *
               C141298 * C141497) *
              C818 +
          ((((C22814 + C22813 + C22812) * C275 +
             (C23538 + C23537 + C23536) * C141353) *
                C141462 +
            ((C21918 * C821 + C21819 * C910 + C21919 * C2962 + C21820 * C3028 +
              C21920 * C9669 + C21821 * C9770) *
                 C275 +
             (C21918 * C1004 + C21819 * C1417 + C21919 * C3086 +
              C21820 * C3364 + C21920 * C9850 + C21821 * C10286) *
                 C141353) *
                C141224) *
               C141298 * C141497 -
           (((C22474 + C22475 + C22476) * C141353 +
             (C21955 + C21956 + C21957) * C275) *
                C141224 +
            ((C22473 + C22472 + C22471) * C141353 +
             (C21948 + C21947 + C21946) * C275) *
                C141462) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C188 * C108 + C141327 * C189) * C275 +
                                 (C188 * C276 + C141327 * C635) * C141353) *
                                    C89 +
                                (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                                   C141298 * C816 -
                               ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
                                (C1436 + C1430) * C90 +
                                ((C188 * C1006 + C141327 * C1419) * C141353 +
                                 (C188 * C823 + C141327 * C912) * C275) *
                                    C89) *
                                   C141298 * C141497) *
                                  C818 +
                              (((C1430 + C1436) * C89 + (C1427 + C1435) * C90 +
                                (C1424 + C1434) * C91 +
                                ((C188 * C824 + C141327 * C913) * C275 +
                                 (C188 * C1007 + C141327 * C1420) * C141353) *
                                    C92) *
                                   C141298 * C141497 -
                               ((C661 + C653) * C92 + (C660 + C648) * C91 +
                                (C659 + C645) * C90 + (C658 + C642) * C89) *
                                   C141298 * C816) *
                                  C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C43030 +
             (C188 * C276 + C141327 * C635) * C42873 + C15877 * C43031 +
             C16596 * C42874 + C21152 * C43032 + C21660 * C42875) *
                C141462 +
            (C43458 + C43459 + C43460 + C43461 + C43462 + C43463) * C141224) *
               C141298 * C816 -
           ((C44421 + C44415 + C44416 + C44417 + C44418 + C44419) * C141224 +
            ((C188 * C13374 + C141327 * C13768) * C42875 +
             (C188 * C13205 + C141327 * C13294) * C43032 + C19093 * C42874 +
             C18488 * C43031 + (C188 * C1006 + C141327 * C1419) * C42873 +
             (C188 * C823 + C141327 * C912) * C43030) *
                C141462) *
               C141298 * C141497) *
              C818 +
          (((C44419 + C44418 + C44417 + C44416 + C44415 + C44421) * C141462 +
            (C935 * C43030 + C1432 * C42873 + C14849 * C43031 +
             C15496 * C42874 + (C188 * C13207 + C141327 * C13296) * C43032 +
             (C188 * C13376 + C141327 * C13770) * C42875) *
                C141224) *
               C141298 * C141497 -
           ((C43464 + C43465 + C43466 + C43467 + C43468 + C43469) * C141224 +
            (C43463 + C43462 + C43461 + C43460 + C43459 + C43458) * C141462) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[55] +=
        (-std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C21819 +
             C7709 * C21820 + C10372 * C21821) *
                C141462 +
            (C22551 + C22552 + C22553) * C141224) *
               C141298 * C816 -
           ((C23644 + C23639 + C23640) * C141224 +
            ((C713 * C9667 + C10367 + C10367 + C141353 * C10361) * C21821 +
             C10372 * C21820 + C7709 * C21819) *
                C141462) *
               C141298 * C141497) *
              C818 +
          (((C23640 + C23639 + C23644) * C141462 +
            (C1526 * C21819 + C7710 * C21820 +
             (C713 * C9669 + C10369 + C10369 + C141353 * C10363) * C21821) *
                C141224) *
               C141298 * C141497 -
           ((C22554 + C22555 + C22556) * C141224 +
            (C22553 + C22552 + C22551) * C141462) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141327 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C141298 * C816 -
           (C1528 * C92 + C1529 * C91 + C1530 * C90 +
            (C713 * C823 + C1517 + C1517 + C141353 * C1505) * C141327 * C89) *
               C141298 * C141497) *
              C818 +
          ((C1530 * C89 + C1529 * C90 + C1528 * C91 +
            (C713 * C824 + C1518 + C1518 + C141353 * C1506) * C141327 * C92) *
               C141298 * C141497 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C141298 *
               C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43543 * C108 + C43547 + C43547 + C42873 * C714 + C43544 * C1601 +
             C43548 + C43548 + C42874 * C2283 + C43545 * C5325 + C43549 +
             C43549 + C42875 * C5781) *
                C141327 * C141462 +
            (C43583 + C43584 + C43585) * C141327 * C141224) *
               C141298 * C816 -
           ((C44541 + C44542 + C44543) * C141327 * C141224 +
            (C43545 * C13205 + C44529 + C44529 + C42875 * C13845 +
             C43544 * C3490 + C44530 + C44530 + C42874 * C4074 + C43543 * C823 +
             C44531 + C44531 + C42873 * C1505) *
                C141327 * C141462) *
               C141298 * C141497) *
              C818 +
          (((C44543 + C44542 + C44541) * C141327 * C141462 +
            (C43543 * C821 + C44532 + C44532 + C42873 * C1503 + C43544 * C3492 +
             C44533 + C44533 + C42874 * C4076 + C43545 * C13207 + C44534 +
             C44534 + C42875 * C13847) *
                C141327 * C141224) *
               C141298 * C141497 -
           ((C43586 + C43587 + C43588) * C141327 * C141224 +
            (C43585 + C43584 + C43583) * C141327 * C141462) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[56] +=
        (-std::pow(Pi, 2.5) *
         ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
             C21828 + C21828 + C141224 * C121) *
                C141353 * C21819 +
            (C22691 + C22692) * C141353 * C21820 +
            (C22693 + C22694) * C141353 * C21821) *
               C1596 -
           ((C21824 * C10471 + C23743 + C23743 + C141224 * C10477 +
             C21822 * C10470 + C23744 + C23744 + C141462 * C10476) *
                C141353 * C21821 +
            (C21824 * C3491 + C23745 + C23745 + C141224 * C3499 +
             C21822 * C3490 + C23746 + C23746 + C141462 * C3498) *
                C141353 * C21820 +
            (C21824 * C1600 + C23747 + C23747 + C141224 * C1610 +
             C21822 * C1601 + C23748 + C23748 + C141462 * C1611) *
                C141353 * C21819) *
               C141499) *
              C141281 * C818 +
          (((C21822 * C1600 + C23749 + C23749 + C141462 * C1610 +
             C21824 * C1599 + C23750 + C23750 + C141224 * C1609) *
                C141353 * C21819 +
            (C21822 * C3491 + C23751 + C23751 + C141462 * C3499 +
             C21824 * C3492 + C23752 + C23752 + C141224 * C3500) *
                C141353 * C21820 +
            (C21822 * C10471 + C23753 + C23753 + C141462 * C10477 +
             C21824 * C10472 + C23754 + C23754 + C141224 * C10478) *
                C141353 * C21821) *
               C141499 -
           ((C22698 + C22697) * C141353 * C21821 +
            (C22696 + C22695) * C141353 * C21820 +
            (C21824 * C110 + C21837 + C21837 + C141224 * C122 + C21822 * C109 +
             C21838 + C21838 + C141462 * C121) *
                C141353 * C21819) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C141353 * C141327 * C1596 -
           (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
            C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
            C100 * C1601 + C1617 + C1617 + C89 * C1611) *
               C141353 * C141327 * C141499) *
              C141281 * C818 +
          ((C100 * C1600 + C1618 + C1618 + C89 * C1610 + C102 * C1599 + C1619 +
            C1619 + C90 * C1609 + C104 * C1598 + C1620 + C1620 + C91 * C1608 +
            C106 * C1602 + C1621 + C1621 + C92 * C1612) *
               C141353 * C141327 * C141499 -
           (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 + C132 + C132 +
            C91 * C123 + C102 * C110 + C133 + C133 + C90 * C122 + C100 * C109 +
            C134 + C134 + C89 * C121) *
               C141353 * C141327 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
             C21828 + C21828 + C141224 * C121) *
                C42873 +
            (C44678 + C44679) * C42874 + (C44680 + C44681) * C42875) *
               C141327 * C1596 -
           ((C21824 * C21036 + C44650 + C44650 + C141224 * C21042 +
             C21822 * C21035 + C44651 + C44651 + C141462 * C21041) *
                C42875 +
            (C44681 + C44680) * C42874 + (C44679 + C44678) * C42873) *
               C141327 * C141499) *
              C141281 * C818 +
          (((C44682 + C44683) * C42873 + (C44684 + C44685) * C42874 +
            (C21822 * C21036 + C44660 + C44660 + C141462 * C21042 +
             C21824 * C21037 + C44661 + C44661 + C141224 * C21043) *
                C42875) *
               C141327 * C141499 -
           ((C44685 + C44684) * C42875 + (C44683 + C44682) * C42874 +
            (C21824 * C110 + C21837 + C21837 + C141224 * C122 + C21822 * C109 +
             C21838 + C21838 + C141462 * C121) *
                C42873) *
               C141327 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexy[56] +=
        (-std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C139366 +
            (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
             C21920 * C2964 + C21821 * C3030) *
                C141462 +
            (C21946 + C21947 + C21948) * C139356 +
            (C21949 + C21950 + C21951) * C141224) *
               C141353 * C1596 -
           ((C23865 + C23866 + C23867) * C141224 +
            (C23868 + C23869 + C23870) * C139356 +
            (C21920 * C10473 + C21821 * C10598 + C21919 * C3494 +
             C21820 * C3576 + C21918 * C1606 + C21819 * C1695) *
                C141462 +
            (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
             C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
                C139366) *
               C141353 * C141499) *
              C141281 * C818 +
          (((C23870 + C23869 + C23868) * C139366 +
            (C23867 + C23866 + C23865) * C141462 +
            (C21918 * C1599 + C21819 * C1688 + C21919 * C3492 + C21820 * C3574 +
             C21920 * C10472 + C21821 * C10597) *
                C139356 +
            (C21918 * C1604 + C21819 * C1693 + C21919 * C3496 + C21820 * C3578 +
             C21920 * C10475 + C21821 * C10600) *
                C141224) *
               C141353 * C141499 -
           ((C21952 + C21953 + C21954) * C141224 +
            (C21955 + C21956 + C21957) * C139356 +
            (C21951 + C21950 + C21949) * C141462 +
            (C21948 + C21947 + C21946) * C139366) *
               C141353 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C101 +
            (C188 * C114 + C141327 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141353 * C1596 -
           (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
            C1714 * C90 + C1715 * C103 +
            (C188 * C1606 + C141327 * C1695) * C89 +
            (C188 * C1601 + C141327 * C1690) * C101) *
               C141353 * C141499) *
              C141281 * C818 +
          ((C1715 * C101 + C1714 * C89 + C1713 * C103 + C1712 * C90 +
            C1711 * C105 + C1710 * C91 +
            (C188 * C1602 + C141327 * C1691) * C107 +
            (C188 * C1607 + C141327 * C1696) * C92) *
               C141353 * C141499 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C141353 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C139366 +
             (C188 * C114 + C141327 * C195) * C141462 + C218 * C139356 +
             C219 * C141224) *
                C42873 +
            (C44784 + C44785 + C44786 + C44787) * C42874 +
            (C44788 + C44789 + C44790 + C44791) * C42875) *
               C1596 -
           ((C44804 * C141224 + C44805 * C139356 +
             (C188 * C21038 + C141327 * C21139) * C141462 +
             (C188 * C21035 + C141327 * C21136) * C139366) *
                C42875 +
            (C44791 + C44790 + C44789 + C44788) * C42874 +
            (C44787 + C44786 + C44785 + C44784) * C42873) *
               C141499) *
              C141281 * C818 +
          (((C44796 + C44797 + C44798 + C44799) * C42873 +
            (C44800 + C44801 + C44802 + C44803) * C42874 +
            (C44805 * C139366 + C44804 * C141462 +
             (C188 * C21037 + C141327 * C21138) * C139356 +
             (C188 * C21040 + C141327 * C21141) * C141224) *
                C42875) *
               C141499 -
           ((C44803 + C44802 + C44801 + C44800) * C42875 +
            (C44799 + C44798 + C44797 + C44796) * C42874 +
            (C221 * C141224 + C220 * C139356 + C219 * C141462 +
             C218 * C139366) *
                C42873) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[56] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C139366 +
             (C275 * C114 + C141353 * C282) * C141462 + C305 * C139356 +
             C306 * C141224) *
                C21819 +
            (C22913 + C22914 + C22915 + C22916) * C21820 +
            (C22917 + C22918 + C22919 + C22920) * C21821) *
               C1596 -
           ((C23973 * C141224 + C23974 * C139356 +
             (C275 * C10473 + C141353 * C10702) * C141462 +
             (C275 * C10470 + C141353 * C10699) * C139366) *
                C21821 +
            (C8054 * C141224 + C8055 * C139356 + C10714 * C141462 +
             C10715 * C139366) *
                C21820 +
            (C1808 * C141224 + C1809 * C139356 +
             (C275 * C1606 + C141353 * C1789) * C141462 +
             (C275 * C1601 + C141353 * C1784) * C139366) *
                C21819) *
               C141499) *
              C141281 * C818 +
          (((C1809 * C139366 + C1808 * C141462 + C1807 * C139356 +
             C1806 * C141224) *
                C21819 +
            (C8055 * C139366 + C8054 * C141462 + C8053 * C139356 +
             C8052 * C141224) *
                C21820 +
            (C23974 * C139366 + C23973 * C141462 +
             (C275 * C10472 + C141353 * C10701) * C139356 +
             (C275 * C10475 + C141353 * C10704) * C141224) *
                C21821) *
               C141499 -
           ((C22932 + C22931 + C22930 + C22929) * C21821 +
            (C22928 + C22927 + C22926 + C22925) * C21820 +
            (C308 * C141224 + C307 * C139356 + C306 * C141462 +
             C305 * C139366) *
                C21819) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C101 +
            (C275 * C114 + C141353 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141327 * C1596 -
           (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
            C1808 * C90 + C1809 * C103 +
            (C275 * C1606 + C141353 * C1789) * C89 +
            (C275 * C1601 + C141353 * C1784) * C101) *
               C141327 * C141499) *
              C141281 * C818 +
          ((C1809 * C101 + C1808 * C89 + C1807 * C103 + C1806 * C90 +
            C1805 * C105 + C1804 * C91 +
            (C275 * C1602 + C141353 * C1785) * C107 +
            (C275 * C1607 + C141353 * C1790) * C92) *
               C141327 * C141499 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C141327 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
             C43032 * C5325 + C42875 * C5449) *
                C139366 +
            (C43030 * C114 + C42873 * C282 + C43031 * C1606 + C42874 * C1789 +
             C43032 * C5329 + C42875 * C5453) *
                C141462 +
            (C43058 + C43059 + C43060) * C139356 +
            (C43061 + C43062 + C43063) * C141224) *
               C141327 * C1596 -
           ((C44916 + C44917 + C44918) * C141224 +
            (C44919 + C44920 + C44921) * C139356 +
            (C43032 * C21038 + C42875 * C21231 + C43031 * C5329 +
             C42874 * C5453 + C43030 * C1606 + C42873 * C1789) *
                C141462 +
            (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
             C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                C139366) *
               C141327 * C141499) *
              C141281 * C818 +
          (((C44921 + C44920 + C44919) * C139366 +
            (C44918 + C44917 + C44916) * C141462 +
            (C43030 * C1599 + C42873 * C1782 + C43031 * C5327 + C42874 * C5451 +
             C43032 * C21037 + C42875 * C21230) *
                C139356 +
            (C43030 * C1604 + C42873 * C1787 + C43031 * C5331 + C42874 * C5455 +
             C43032 * C21040 + C42875 * C21233) *
                C141224) *
               C141327 * C141499 -
           ((C43064 + C43065 + C43066) * C141224 +
            (C43067 + C43068 + C43069) * C139356 +
            (C43063 + C43062 + C43061) * C141462 +
            (C43060 + C43059 + C43058) * C139366) *
               C141327 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[56] +=
        (-std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C21918 +
            (C139366 * C189 + C141462 * C362 + C139356 * C190 +
             C141224 * C363) *
                C21819 +
            (C23065 + C23066) * C21919 + (C23067 + C23068) * C21820 +
            (C23069 + C23070) * C21920 + (C23071 + C23072) * C21821) *
               C141353 * C1596 -
           ((C139356 * C10596 + C141224 * C10816 + C139366 * C10595 +
             C141462 * C10815) *
                C21821 +
            (C139356 * C10471 + C141224 * C10474 + C139366 * C10470 +
             C141462 * C10473) *
                C21920 +
            (C139356 * C3573 + C141224 * C3721 + C139366 * C3572 +
             C141462 * C3720) *
                C21820 +
            (C139356 * C3491 + C141224 * C3495 + C139366 * C3490 +
             C141462 * C3494) *
                C21919 +
            (C139356 * C1689 + C141224 * C1877 + C139366 * C1690 +
             C141462 * C1878) *
                C21819 +
            (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
             C141462 * C1606) *
                C21918) *
               C141353 * C141499) *
              C141281 * C818 +
          (((C139366 * C1600 + C141462 * C1605 + C139356 * C1599 +
             C141224 * C1604) *
                C21918 +
            (C139366 * C1689 + C141462 * C1877 + C139356 * C1688 +
             C141224 * C1876) *
                C21819 +
            (C139366 * C3491 + C141462 * C3495 + C139356 * C3492 +
             C141224 * C3496) *
                C21919 +
            (C139366 * C3573 + C141462 * C3721 + C139356 * C3574 +
             C141224 * C3722) *
                C21820 +
            (C139366 * C10471 + C141462 * C10474 + C139356 * C10472 +
             C141224 * C10475) *
                C21920 +
            (C139366 * C10596 + C141462 * C10816 + C139356 * C10597 +
             C141224 * C10817) *
                C21821) *
               C141353 * C141499 -
           ((C23080 + C23079) * C21821 + (C23078 + C23077) * C21920 +
            (C23076 + C23075) * C21820 + (C23074 + C23073) * C21919 +
            (C139356 * C191 + C141224 * C364 + C139366 * C190 +
             C141462 * C363) *
                C21819 +
            (C139356 * C110 + C141224 * C116 + C139366 * C109 +
             C141462 * C115) *
                C21918) *
               C141353 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141327) *
               C141353 * C1596 -
           ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
             C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
                C141327 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C188) *
               C141353 * C141499) *
              C141281 * C818 +
          (((C101 * C1600 + C89 * C1605 + C103 * C1599 + C90 * C1604 +
             C105 * C1598 + C91 * C1603 + C107 * C1602 + C92 * C1607) *
                C188 +
            (C101 * C1689 + C89 * C1877 + C103 * C1688 + C90 * C1876 +
             C105 * C1687 + C91 * C1875 + C107 * C1691 + C92 * C1879) *
                C141327) *
               C141353 * C141499 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C141327 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C141353 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C188 +
             (C139366 * C189 + C141462 * C362 + C139356 * C190 +
              C141224 * C363) *
                 C141327) *
                C42873 +
            ((C45052 + C45053) * C188 + (C45054 + C45055) * C141327) * C42874 +
            ((C45056 + C45057) * C188 + (C45058 + C45059) * C141327) * C42875) *
               C1596 -
           (((C139356 * C21137 + C141224 * C21309 + C139366 * C21136 +
              C141462 * C21308) *
                 C141327 +
             (C139356 * C21036 + C141224 * C21039 + C139366 * C21035 +
              C141462 * C21038) *
                 C188) *
                C42875 +
            ((C45059 + C45058) * C141327 + (C45057 + C45056) * C188) * C42874 +
            ((C45055 + C45054) * C141327 + (C45053 + C45052) * C188) * C42873) *
               C141499) *
              C141281 * C818 +
          ((((C45060 + C45061) * C188 + (C45062 + C45063) * C141327) * C42873 +
            ((C45064 + C45065) * C188 + (C45066 + C45067) * C141327) * C42874 +
            ((C139366 * C21036 + C141462 * C21039 + C139356 * C21037 +
              C141224 * C21040) *
                 C188 +
             (C139366 * C21137 + C141462 * C21309 + C139356 * C21138 +
              C141224 * C21310) *
                 C141327) *
                C42875) *
               C141499 -
           (((C45067 + C45066) * C141327 + (C45065 + C45064) * C188) * C42875 +
            ((C45063 + C45062) * C141327 + (C45061 + C45060) * C188) * C42874 +
            ((C139356 * C191 + C141224 * C364 + C139366 * C190 +
              C141462 * C363) *
                 C141327 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C188) *
                C42873) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[56] +=
        (-std::pow(Pi, 2.5) *
         ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
             C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
             C22185 + C21821 * C3196) *
                C141462 +
            (C22219 + C22220 + C22221) * C141224) *
               C141353 * C1596 -
           ((C24192 + C24193 + C24194) * C141224 +
            (C22181 * C10470 + C24180 + C24180 + C21821 * C10934 +
             C22180 * C3490 + C24181 + C24181 + C21820 * C3790 +
             C22179 * C1601 + C24182 + C24182 + C21819 * C1949) *
                C141462) *
               C141353 * C141499) *
              C141281 * C818 +
          (((C24194 + C24193 + C24192) * C141462 +
            (C22179 * C1599 + C24183 + C24183 + C21819 * C1947 +
             C22180 * C3492 + C24184 + C24184 + C21820 * C3792 +
             C22181 * C10472 + C24185 + C24185 + C21821 * C10936) *
                C141224) *
               C141353 * C141499 -
           ((C22222 + C22223 + C22224) * C141224 +
            (C22221 + C22220 + C22219) * C141462) *
               C141353 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C89 + C448 * C90 +
            C449 * C91 + C450 * C92) *
               C141353 * C1596 -
           (C1969 * C92 + C1970 * C91 + C1971 * C90 +
            (C418 * C1601 + C1961 + C1961 + C141327 * C1949) * C89) *
               C141353 * C141499) *
              C141281 * C818 +
          ((C1971 * C89 + C1970 * C90 + C1969 * C91 +
            (C418 * C1602 + C1962 + C1962 + C141327 * C1950) * C92) *
               C141353 * C141499 -
           (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) * C141353 *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C141462 +
             C448 * C141224) *
                C42873 +
            (C45166 + C45167) * C42874 + (C45168 + C45169) * C42875) *
               C1596 -
           ((C45178 * C141224 +
             (C418 * C21035 + C21411 + C21411 + C141327 * C21403) * C141462) *
                C42875 +
            (C45169 + C45168) * C42874 + (C45167 + C45166) * C42873) *
               C141499) *
              C141281 * C818 +
          (((C45172 + C45173) * C42873 + (C45174 + C45175) * C42874 +
            (C45178 * C141462 +
             (C418 * C21037 + C21413 + C21413 + C141327 * C21405) * C141224) *
                C42875) *
               C141499 -
           ((C45175 + C45174) * C42875 + (C45173 + C45172) * C42874 +
            (C449 * C141224 + C448 * C141462) * C42873) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[56] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C21918 +
             (C275 * C189 + C141353 * C501) * C21819 + C6988 * C21919 +
             C7366 * C21820 + C9864 * C21920 + C10124 * C21821) *
                C141462 +
            (C22299 + C22300 + C22301 + C22302 + C22303 + C22304) * C141224) *
               C1596 -
           ((C24301 + C24295 + C24296 + C24297 + C24298 + C24299) * C141224 +
            ((C275 * C10595 + C141353 * C11041) * C21821 +
             (C275 * C10470 + C141353 * C10699) * C21920 + C11047 * C21820 +
             C10715 * C21919 + (C275 * C1690 + C141353 * C2040) * C21819 +
             (C275 * C1601 + C141353 * C1784) * C21918) *
                C141462) *
               C141499) *
              C141281 * C818 +
          (((C24299 + C24298 + C24297 + C24296 + C24295 + C24301) * C141462 +
            (C1807 * C21918 + C2053 * C21819 + C8053 * C21919 + C8388 * C21820 +
             (C275 * C10472 + C141353 * C10701) * C21920 +
             (C275 * C10597 + C141353 * C11043) * C21821) *
                C141224) *
               C141499 -
           ((C22305 + C22306 + C22307 + C22308 + C22309 + C22310) * C141224 +
            (C22304 + C22303 + C22302 + C22301 + C22300 + C22299) * C141462) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C275 * C108 + C141353 * C276) * C188 +
                                 (C275 * C189 + C141353 * C501) * C141327) *
                                    C89 +
                                (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
                                   C1596 -
                               ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
                                (C2057 + C2051) * C90 +
                                ((C275 * C1690 + C141353 * C2040) * C141327 +
                                 (C275 * C1601 + C141353 * C1784) * C188) *
                                    C89) *
                                   C141499) *
                                  C141281 * C818 +
                              (((C2051 + C2057) * C89 + (C2048 + C2056) * C90 +
                                (C2045 + C2055) * C91 +
                                ((C275 * C1602 + C141353 * C1785) * C188 +
                                 (C275 * C1691 + C141353 * C2041) * C141327) *
                                    C92) *
                                   C141499 -
                               ((C527 + C519) * C92 + (C526 + C514) * C91 +
                                (C525 + C511) * C90 + (C524 + C508) * C89) *
                                   C1596) *
                                  C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
              C43032 * C5325 + C42875 * C5449) *
                 C188 +
             (C43030 * C189 + C42873 * C501 + C43031 * C1690 + C42874 * C2040 +
              C43032 * C5391 + C42875 * C5619) *
                 C141327) *
                C141462 +
            ((C43058 + C43059 + C43060) * C188 +
             (C43304 + C43305 + C43306) * C141327) *
                C141224) *
               C1596 -
           (((C45283 + C45284 + C45285) * C141327 +
             (C44919 + C44920 + C44921) * C188) *
                C141224 +
            ((C43032 * C21136 + C42875 * C21491 + C43031 * C5391 +
              C42874 * C5619 + C43030 * C1690 + C42873 * C2040) *
                 C141327 +
             (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
              C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                 C188) *
                C141462) *
               C141499) *
              C141281 * C818 +
          ((((C44921 + C44920 + C44919) * C188 +
             (C45285 + C45284 + C45283) * C141327) *
                C141462 +
            ((C43030 * C1599 + C42873 * C1782 + C43031 * C5327 +
              C42874 * C5451 + C43032 * C21037 + C42875 * C21230) *
                 C188 +
             (C43030 * C1688 + C42873 * C2038 + C43031 * C5393 +
              C42874 * C5621 + C43032 * C21138 + C42875 * C21493) *
                 C141327) *
                C141224) *
               C141499 -
           (((C43307 + C43308 + C43309) * C141327 +
             (C43067 + C43068 + C43069) * C188) *
                C141224 +
            ((C43306 + C43305 + C43304) * C141327 +
             (C43060 + C43059 + C43058) * C188) *
                C141462) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[56] +=
        (-std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C275 +
             (C139366 * C276 + C141462 * C579 + C139356 * C277 +
              C141224 * C580) *
                 C141353) *
                C21819 +
            ((C23065 + C23066) * C275 + (C23424 + C23425) * C141353) * C21820 +
            ((C23069 + C23070) * C275 + (C23426 + C23427) * C141353) * C21821) *
               C1596 -
           (((C139356 * C10700 + C141224 * C11146 + C139366 * C10699 +
              C141462 * C11145) *
                 C141353 +
             (C139356 * C10471 + C141224 * C10474 + C139366 * C10470 +
              C141462 * C10473) *
                 C275) *
                C21821 +
            ((C139356 * C3647 + C141224 * C3935 + C139366 * C3646 +
              C141462 * C3934) *
                 C141353 +
             (C139356 * C3491 + C141224 * C3495 + C139366 * C3490 +
              C141462 * C3494) *
                 C275) *
                C21820 +
            ((C139356 * C1783 + C141224 * C2125 + C139366 * C1784 +
              C141462 * C2126) *
                 C141353 +
             (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
              C141462 * C1606) *
                 C275) *
                C21819) *
               C141499) *
              C141281 * C818 +
          ((((C139366 * C1600 + C141462 * C1605 + C139356 * C1599 +
              C141224 * C1604) *
                 C275 +
             (C139366 * C1783 + C141462 * C2125 + C139356 * C1782 +
              C141224 * C2124) *
                 C141353) *
                C21819 +
            ((C139366 * C3491 + C141462 * C3495 + C139356 * C3492 +
              C141224 * C3496) *
                 C275 +
             (C139366 * C3647 + C141462 * C3935 + C139356 * C3648 +
              C141224 * C3936) *
                 C141353) *
                C21820 +
            ((C139366 * C10471 + C141462 * C10474 + C139356 * C10472 +
              C141224 * C10475) *
                 C275 +
             (C139366 * C10700 + C141462 * C11146 + C139356 * C10701 +
              C141224 * C11147) *
                 C141353) *
                C21821) *
               C141499 -
           (((C23431 + C23430) * C141353 + (C23078 + C23077) * C275) * C21821 +
            ((C23429 + C23428) * C141353 + (C23074 + C23073) * C275) * C21820 +
            ((C139356 * C278 + C141224 * C581 + C139366 * C277 +
              C141462 * C580) *
                 C141353 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C275) *
                C21819) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141353) *
               C141327 * C1596 -
           ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
             C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
                C141353 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C275) *
               C141327 * C141499) *
              C141281 * C818 +
          (((C101 * C1600 + C89 * C1605 + C103 * C1599 + C90 * C1604 +
             C105 * C1598 + C91 * C1603 + C107 * C1602 + C92 * C1607) *
                C275 +
            (C101 * C1783 + C89 * C2125 + C103 * C1782 + C90 * C2124 +
             C105 * C1781 + C91 * C2123 + C107 * C1785 + C92 * C2127) *
                C141353) *
               C141327 * C141499 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C141353 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C141327 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C43030 +
            (C139366 * C276 + C141462 * C579 + C139356 * C277 +
             C141224 * C580) *
                C42873 +
            (C45052 + C45053) * C43031 + (C45400 + C45401) * C42874 +
            (C45056 + C45057) * C43032 + (C45402 + C45403) * C42875) *
               C141327 * C1596 -
           ((C139356 * C21229 + C141224 * C21569 + C139366 * C21228 +
             C141462 * C21568) *
                C42875 +
            (C139356 * C21036 + C141224 * C21039 + C139366 * C21035 +
             C141462 * C21038) *
                C43032 +
            (C45403 + C45402) * C42874 + (C45057 + C45056) * C43031 +
            (C45401 + C45400) * C42873 + (C45053 + C45052) * C43030) *
               C141327 * C141499) *
              C141281 * C818 +
          (((C45060 + C45061) * C43030 + (C45404 + C45405) * C42873 +
            (C45064 + C45065) * C43031 + (C45406 + C45407) * C42874 +
            (C139366 * C21036 + C141462 * C21039 + C139356 * C21037 +
             C141224 * C21040) *
                C43032 +
            (C139366 * C21229 + C141462 * C21569 + C139356 * C21230 +
             C141224 * C21570) *
                C42875) *
               C141327 * C141499 -
           ((C45407 + C45406) * C42875 + (C45065 + C45064) * C43032 +
            (C45405 + C45404) * C42874 + (C45061 + C45060) * C43031 +
            (C139356 * C278 + C141224 * C581 + C139366 * C277 +
             C141462 * C580) *
                C42873 +
            (C139356 * C110 + C141224 * C116 + C139366 * C109 +
             C141462 * C115) *
                C43030) *
               C141327 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezy[56] +=
        (-std::pow(Pi, 2.5) *
         (((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
              C21920 * C2960 + C21821 * C3026) *
                 C275 +
             (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
              C21920 * C3084 + C21821 * C3362) *
                 C141353) *
                C141462 +
            ((C21946 + C21947 + C21948) * C275 +
             (C22471 + C22472 + C22473) * C141353) *
                C141224) *
               C1596 -
           (((C24504 + C24505 + C24506) * C141353 +
             (C23868 + C23869 + C23870) * C275) *
                C141224 +
            ((C21920 * C10699 + C21821 * C11255 + C21919 * C3646 +
              C21820 * C4004 + C21918 * C1784 + C21819 * C2197) *
                 C141353 +
             (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
              C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
                 C275) *
                C141462) *
               C141499) *
              C141281 * C818 +
          ((((C23870 + C23869 + C23868) * C275 +
             (C24506 + C24505 + C24504) * C141353) *
                C141462 +
            ((C21918 * C1599 + C21819 * C1688 + C21919 * C3492 +
              C21820 * C3574 + C21920 * C10472 + C21821 * C10597) *
                 C275 +
             (C21918 * C1782 + C21819 * C2195 + C21919 * C3648 +
              C21820 * C4006 + C21920 * C10701 + C21821 * C11257) *
                 C141353) *
                C141224) *
               C141499 -
           (((C22474 + C22475 + C22476) * C141353 +
             (C21955 + C21956 + C21957) * C275) *
                C141224 +
            ((C22473 + C22472 + C22471) * C141353 +
             (C21948 + C21947 + C21946) * C275) *
                C141462) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C188 * C108 + C141327 * C189) * C275 +
                                 (C188 * C276 + C141327 * C635) * C141353) *
                                    C89 +
                                (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                                   C1596 -
                               ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
                                (C2214 + C2208) * C90 +
                                ((C188 * C1784 + C141327 * C2197) * C141353 +
                                 (C188 * C1601 + C141327 * C1690) * C275) *
                                    C89) *
                                   C141499) *
                                  C141281 * C818 +
                              (((C2208 + C2214) * C89 + (C2205 + C2213) * C90 +
                                (C2202 + C2212) * C91 +
                                ((C188 * C1602 + C141327 * C1691) * C275 +
                                 (C188 * C1785 + C141327 * C2198) * C141353) *
                                    C92) *
                                   C141499 -
                               ((C661 + C653) * C92 + (C660 + C648) * C91 +
                                (C659 + C645) * C90 + (C658 + C642) * C89) *
                                   C1596) *
                                  C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C43030 +
             (C188 * C276 + C141327 * C635) * C42873 + C15877 * C43031 +
             C16596 * C42874 + C21152 * C43032 + C21660 * C42875) *
                C141462 +
            (C43458 + C43459 + C43460 + C43461 + C43462 + C43463) * C141224) *
               C1596 -
           ((C45514 + C45508 + C45509 + C45510 + C45511 + C45512) * C141224 +
            ((C188 * C21228 + C141327 * C21654) * C42875 +
             (C188 * C21035 + C141327 * C21136) * C43032 + C21660 * C42874 +
             C21152 * C43031 + C16596 * C42873 + C15877 * C43030) *
                C141462) *
               C141499) *
              C141281 * C818 +
          (((C45512 + C45511 + C45510 + C45509 + C45508 + C45514) * C141462 +
            (C1713 * C43030 + C2210 * C42873 + C15880 * C43031 +
             C16597 * C42874 + (C188 * C21037 + C141327 * C21138) * C43032 +
             (C188 * C21230 + C141327 * C21656) * C42875) *
                C141224) *
               C141499 -
           ((C43464 + C43465 + C43466 + C43467 + C43468 + C43469) * C141224 +
            (C43463 + C43462 + C43461 + C43460 + C43459 + C43458) * C141462) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[56] +=
        (-std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C21819 +
             C7709 * C21820 + C10372 * C21821) *
                C141462 +
            (C22551 + C22552 + C22553) * C141224) *
               C1596 -
           ((C24612 + C24607 + C24608) * C141224 +
            ((C713 * C10470 + C11362 + C11362 + C141353 * C11356) * C21821 +
             C11367 * C21820 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C21819) *
                C141462) *
               C141499) *
              C141281 * C818 +
          (((C24608 + C24607 + C24612) * C141462 +
            (C2304 * C21819 + C8708 * C21820 +
             (C713 * C10472 + C11364 + C11364 + C141353 * C11358) * C21821) *
                C141224) *
               C141499 -
           ((C22554 + C22555 + C22556) * C141224 +
            (C22553 + C22552 + C22551) * C141462) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141327 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C1596 -
           (C2306 * C92 + C2307 * C91 + C2308 * C90 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141327 * C89) *
               C141499) *
              C141281 * C818 +
          ((C2308 * C89 + C2307 * C90 + C2306 * C91 +
            (C713 * C1602 + C2296 + C2296 + C141353 * C2284) * C141327 * C92) *
               C141499 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43543 * C108 + C43547 + C43547 + C42873 * C714 + C43544 * C1601 +
             C43548 + C43548 + C42874 * C2283 + C43545 * C5325 + C43549 +
             C43549 + C42875 * C5781) *
                C141327 * C141462 +
            (C43583 + C43584 + C43585) * C141327 * C141224) *
               C1596 -
           ((C45634 + C45635 + C45636) * C141327 * C141224 +
            (C43545 * C21035 + C45622 + C45622 + C42875 * C21734 +
             C43544 * C5325 + C45623 + C45623 + C42874 * C5781 +
             C43543 * C1601 + C45624 + C45624 + C42873 * C2283) *
                C141327 * C141462) *
               C141499) *
              C141281 * C818 +
          (((C45636 + C45635 + C45634) * C141327 * C141462 +
            (C43543 * C1599 + C45625 + C45625 + C42873 * C2281 +
             C43544 * C5327 + C45626 + C45626 + C42874 * C5783 +
             C43545 * C21037 + C45627 + C45627 + C42875 * C21736) *
                C141327 * C141224) *
               C141499 -
           ((C43586 + C43587 + C43588) * C141327 * C141224 +
            (C43585 + C43584 + C43583) * C141327 * C141462) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[57] += (-std::pow(Pi, 2.5) *
                   ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 +
                       C21824 * C109 + C21828 + C21828 + C141224 * C121) *
                          C141353 * C21819 +
                      (C22691 + C22692) * C141353 * C21820 +
                      (C22693 + C22694) * C141353 * C21821) *
                         C141298 * C2374 -
                     ((C21824 * C9668 + C22663 + C22663 + C141224 * C9674 +
                       C21822 * C9667 + C22664 + C22664 + C141462 * C9673) *
                          C141353 * C21821 +
                      (C22694 + C22693) * C141353 * C21820 +
                      (C22692 + C22691) * C141353 * C21819) *
                         C141298 * C141497) *
                        C2376 +
                    (((C22695 + C22696) * C141353 * C21819 +
                      (C22697 + C22698) * C141353 * C21820 +
                      (C21822 * C9668 + C22673 + C22673 + C141462 * C9674 +
                       C21824 * C9669 + C22674 + C22674 + C141224 * C9675) *
                          C141353 * C21821) *
                         C141298 * C141497 -
                     ((C22698 + C22697) * C141353 * C21821 +
                      (C22696 + C22695) * C141353 * C21820 +
                      (C21824 * C110 + C21837 + C21837 + C141224 * C122 +
                       C21822 * C109 + C21838 + C21838 + C141462 * C121) *
                          C141353 * C21819) *
                         C141298 * C2374) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 +
                      C128 + C128 + C90 * C121 + C104 * C110 + C129 + C129 +
                      C91 * C122 + C106 * C111 + C130 + C130 + C92 * C123) *
                         C141353 * C141327 * C141298 * C2374 -
                     (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 +
                      C837 + C837 + C91 * C831 + C102 * C822 + C838 + C838 +
                      C90 * C832 + C100 * C823 + C839 + C839 + C89 * C833) *
                         C141353 * C141327 * C141298 * C141497) *
                        C2376 +
                    ((C100 * C822 + C840 + C840 + C89 * C832 + C102 * C821 +
                      C841 + C841 + C90 * C831 + C104 * C820 + C842 + C842 +
                      C91 * C830 + C106 * C824 + C843 + C843 + C92 * C834) *
                         C141353 * C141327 * C141298 * C141497 -
                     (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 +
                      C132 + C132 + C91 * C123 + C102 * C110 + C133 + C133 +
                      C90 * C122 + C100 * C109 + C134 + C134 + C89 * C121) *
                         C141353 * C141327 * C141298 * C2374) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 +
                       C21824 * C109 + C21828 + C21828 + C141224 * C121) *
                          C42873 +
                      (C44678 + C44679) * C42874 + (C44680 + C44681) * C42875) *
                         C141327 * C141298 * C2374 -
                     ((C21824 * C13206 + C29097 + C29097 + C141224 * C13212 +
                       C21822 * C13205 + C29096 + C29096 + C141462 * C13211) *
                          C42875 +
                      (C26378 + C26379) * C42874 + (C22692 + C22691) * C42873) *
                         C141327 * C141298 * C141497) *
                        C2376 +
                    (((C22695 + C22696) * C42873 +
                      (C21822 * C3491 + C23751 + C23751 + C141462 * C3499 +
                       C21824 * C3492 + C23752 + C23752 + C141224 * C3500) *
                          C42874 +
                      (C21822 * C13206 + C43687 + C43687 + C141462 * C13212 +
                       C21824 * C13207 + C43688 + C43688 + C141224 * C13213) *
                          C42875) *
                         C141327 * C141298 * C141497 -
                     ((C44685 + C44684) * C42875 + (C44683 + C44682) * C42874 +
                      (C21824 * C110 + C21837 + C21837 + C141224 * C122 +
                       C21822 * C109 + C21838 + C21838 + C141462 * C121) *
                          C42873) *
                         C141327 * C141298 * C2374) *
                        C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[57] +=
        (-std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C139366 +
            (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
             C21920 * C2964 + C21821 * C3030) *
                C141462 +
            (C21946 + C21947 + C21948) * C139356 +
            (C21949 + C21950 + C21951) * C141224) *
               C141353 * C141298 * C2374 -
           ((C22809 + C22810 + C22811) * C141224 +
            (C22812 + C22813 + C22814) * C139356 +
            (C21920 * C9670 + C21821 * C9771 + C21919 * C2964 + C21820 * C3030 +
             C21918 * C828 + C21819 * C917) *
                C141462 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C139366) *
               C141353 * C141298 * C141497) *
              C2376 +
          (((C22814 + C22813 + C22812) * C139366 +
            (C22811 + C22810 + C22809) * C141462 +
            (C21918 * C821 + C21819 * C910 + C21919 * C2962 + C21820 * C3028 +
             C21920 * C9669 + C21821 * C9770) *
                C139356 +
            (C21918 * C826 + C21819 * C915 + C21919 * C2966 + C21820 * C3032 +
             C21920 * C9672 + C21821 * C9773) *
                C141224) *
               C141353 * C141298 * C141497 -
           ((C21952 + C21953 + C21954) * C141224 +
            (C21955 + C21956 + C21957) * C139356 +
            (C21951 + C21950 + C21949) * C141462 +
            (C21948 + C21947 + C21946) * C139366) *
               C141353 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C101 +
            (C188 * C114 + C141327 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141353 * C141298 * C2374 -
           (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
            C937 * C103 + (C188 * C828 + C141327 * C917) * C89 +
            (C188 * C823 + C141327 * C912) * C101) *
               C141353 * C141298 * C141497) *
              C2376 +
          ((C937 * C101 + C936 * C89 + C935 * C103 + C934 * C90 + C933 * C105 +
            C932 * C91 + (C188 * C824 + C141327 * C913) * C107 +
            (C188 * C829 + C141327 * C918) * C92) *
               C141353 * C141298 * C141497 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C141353 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C139366 +
             (C188 * C114 + C141327 * C195) * C141462 + C218 * C139356 +
             C219 * C141224) *
                C42873 +
            (C44784 + C44785 + C44786 + C44787) * C42874 +
            (C44788 + C44789 + C44790 + C44791) * C42875) *
               C141298 * C2374 -
           ((C43791 * C141224 + C43792 * C139356 +
             (C188 * C13208 + C141327 * C13297) * C141462 +
             (C188 * C13205 + C141327 * C13294) * C139366) *
                C42875 +
            (C14850 * C141224 + C14851 * C139356 + C18489 * C141462 +
             C18488 * C139366) *
                C42874 +
            (C936 * C141224 + C937 * C139356 +
             (C188 * C828 + C141327 * C917) * C141462 +
             (C188 * C823 + C141327 * C912) * C139366) *
                C42873) *
               C141298 * C141497) *
              C2376 +
          (((C937 * C139366 + C936 * C141462 + C935 * C139356 +
             C934 * C141224) *
                C42873 +
            (C14851 * C139366 + C14850 * C141462 + C14849 * C139356 +
             C14848 * C141224) *
                C42874 +
            (C43792 * C139366 + C43791 * C141462 +
             (C188 * C13207 + C141327 * C13296) * C139356 +
             (C188 * C13210 + C141327 * C13299) * C141224) *
                C42875) *
               C141298 * C141497 -
           ((C44803 + C44802 + C44801 + C44800) * C42875 +
            (C44799 + C44798 + C44797 + C44796) * C42874 +
            (C221 * C141224 + C220 * C139356 + C219 * C141462 +
             C218 * C139366) *
                C42873) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[57] +=
        (-std::pow(Pi, 2.5) * (((((C275 * C108 + C141353 * C276) * C139366 +
                                  (C275 * C114 + C141353 * C282) * C141462 +
                                  C305 * C139356 + C306 * C141224) *
                                     C21819 +
                                 (C22913 + C22914 + C22915 + C22916) * C21820 +
                                 (C22917 + C22918 + C22919 + C22920) * C21821) *
                                    C141298 * C2374 -
                                ((C22933 * C141224 + C22934 * C139356 +
                                  (C275 * C9670 + C141353 * C9851) * C141462 +
                                  (C275 * C9667 + C141353 * C9848) * C139366) *
                                     C21821 +
                                 (C22920 + C22919 + C22918 + C22917) * C21820 +
                                 (C22916 + C22915 + C22914 + C22913) * C21819) *
                                    C141298 * C141497) *
                                   C2376 +
                               (((C22925 + C22926 + C22927 + C22928) * C21819 +
                                 (C22929 + C22930 + C22931 + C22932) * C21820 +
                                 (C22934 * C139366 + C22933 * C141462 +
                                  (C275 * C9669 + C141353 * C9850) * C139356 +
                                  (C275 * C9672 + C141353 * C9853) * C141224) *
                                     C21821) *
                                    C141298 * C141497 -
                                ((C22932 + C22931 + C22930 + C22929) * C21821 +
                                 (C22928 + C22927 + C22926 + C22925) * C21820 +
                                 (C308 * C141224 + C307 * C139356 +
                                  C306 * C141462 + C305 * C139366) *
                                     C21819) *
                                    C141298 * C2374) *
                                   C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C101 +
            (C275 * C114 + C141353 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141327 * C141298 * C2374 -
           (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
            C1030 * C90 + C1031 * C103 + (C275 * C828 + C141353 * C1011) * C89 +
            (C275 * C823 + C141353 * C1006) * C101) *
               C141327 * C141298 * C141497) *
              C2376 +
          ((C1031 * C101 + C1030 * C89 + C1029 * C103 + C1028 * C90 +
            C1027 * C105 + C1026 * C91 +
            (C275 * C824 + C141353 * C1007) * C107 +
            (C275 * C829 + C141353 * C1012) * C92) *
               C141327 * C141298 * C141497 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C141327 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
             C43032 * C5325 + C42875 * C5449) *
                C139366 +
            (C43030 * C114 + C42873 * C282 + C43031 * C1606 + C42874 * C1789 +
             C43032 * C5329 + C42875 * C5453) *
                C141462 +
            (C43058 + C43059 + C43060) * C139356 +
            (C43061 + C43062 + C43063) * C141224) *
               C141327 * C141298 * C2374 -
           ((C43903 + C43904 + C43905) * C141224 +
            (C43906 + C43907 + C43908) * C139356 +
            (C43032 * C13208 + C42875 * C13377 + C43031 * C3494 +
             C42874 * C3650 + C43030 * C828 + C42873 * C1011) *
                C141462 +
            (C43032 * C13205 + C42875 * C13374 + C43031 * C3490 +
             C42874 * C3646 + C43030 * C823 + C42873 * C1006) *
                C139366) *
               C141327 * C141298 * C141497) *
              C2376 +
          (((C43908 + C43907 + C43906) * C139366 +
            (C43905 + C43904 + C43903) * C141462 +
            (C43030 * C821 + C42873 * C1004 + C43031 * C3492 + C42874 * C3648 +
             C43032 * C13207 + C42875 * C13376) *
                C139356 +
            (C43030 * C826 + C42873 * C1009 + C43031 * C3496 + C42874 * C3652 +
             C43032 * C13210 + C42875 * C13379) *
                C141224) *
               C141327 * C141298 * C141497 -
           ((C43064 + C43065 + C43066) * C141224 +
            (C43067 + C43068 + C43069) * C139356 +
            (C43063 + C43062 + C43061) * C141462 +
            (C43060 + C43059 + C43058) * C139366) *
               C141327 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[57] +=
        (-std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C21918 +
            (C139366 * C189 + C141462 * C362 + C139356 * C190 +
             C141224 * C363) *
                C21819 +
            (C23065 + C23066) * C21919 + (C23067 + C23068) * C21820 +
            (C23069 + C23070) * C21920 + (C23071 + C23072) * C21821) *
               C141353 * C141298 * C2374 -
           ((C139356 * C9769 + C141224 * C9941 + C139366 * C9768 +
             C141462 * C9940) *
                C21821 +
            (C139356 * C9668 + C141224 * C9671 + C139366 * C9667 +
             C141462 * C9670) *
                C21920 +
            (C23072 + C23071) * C21820 + (C23070 + C23069) * C21919 +
            (C23068 + C23067) * C21819 + (C23066 + C23065) * C21918) *
               C141353 * C141298 * C141497) *
              C2376 +
          (((C23073 + C23074) * C21918 + (C23075 + C23076) * C21819 +
            (C23077 + C23078) * C21919 + (C23079 + C23080) * C21820 +
            (C139366 * C9668 + C141462 * C9671 + C139356 * C9669 +
             C141224 * C9672) *
                C21920 +
            (C139366 * C9769 + C141462 * C9941 + C139356 * C9770 +
             C141224 * C9942) *
                C21821) *
               C141353 * C141298 * C141497 -
           ((C23080 + C23079) * C21821 + (C23078 + C23077) * C21920 +
            (C23076 + C23075) * C21820 + (C23074 + C23073) * C21919 +
            (C139356 * C191 + C141224 * C364 + C139366 * C190 +
             C141462 * C363) *
                C21819 +
            (C139356 * C110 + C141224 * C116 + C139366 * C109 +
             C141462 * C115) *
                C21918) *
               C141353 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141327) *
               C141353 * C141298 * C2374 -
           ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
             C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
                C141327 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C188) *
               C141353 * C141298 * C141497) *
              C2376 +
          (((C101 * C822 + C89 * C827 + C103 * C821 + C90 * C826 + C105 * C820 +
             C91 * C825 + C107 * C824 + C92 * C829) *
                C188 +
            (C101 * C911 + C89 * C1099 + C103 * C910 + C90 * C1098 +
             C105 * C909 + C91 * C1097 + C107 * C913 + C92 * C1101) *
                C141327) *
               C141353 * C141298 * C141497 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C141327 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C141353 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C188 +
             (C139366 * C189 + C141462 * C362 + C139356 * C190 +
              C141224 * C363) *
                 C141327) *
                C42873 +
            ((C45052 + C45053) * C188 + (C45054 + C45055) * C141327) * C42874 +
            ((C45056 + C45057) * C188 + (C45058 + C45059) * C141327) * C42875) *
               C141298 * C2374 -
           (((C139356 * C13295 + C141224 * C13455 + C139366 * C13294 +
              C141462 * C13454) *
                 C141327 +
             (C139356 * C13206 + C141224 * C13209 + C139366 * C13205 +
              C141462 * C13208) *
                 C188) *
                C42875 +
            ((C26718 + C26719) * C141327 + (C26720 + C26721) * C188) * C42874 +
            ((C23068 + C23067) * C141327 + (C23066 + C23065) * C188) * C42873) *
               C141298 * C141497) *
              C2376 +
          ((((C23073 + C23074) * C188 + (C23075 + C23076) * C141327) * C42873 +
            ((C139366 * C3491 + C141462 * C3495 + C139356 * C3492 +
              C141224 * C3496) *
                 C188 +
             (C139366 * C3573 + C141462 * C3721 + C139356 * C3574 +
              C141224 * C3722) *
                 C141327) *
                C42874 +
            ((C139366 * C13206 + C141462 * C13209 + C139356 * C13207 +
              C141224 * C13210) *
                 C188 +
             (C139366 * C13295 + C141462 * C13455 + C139356 * C13296 +
              C141224 * C13456) *
                 C141327) *
                C42875) *
               C141298 * C141497 -
           (((C45067 + C45066) * C141327 + (C45065 + C45064) * C188) * C42875 +
            ((C45063 + C45062) * C141327 + (C45061 + C45060) * C188) * C42874 +
            ((C139356 * C191 + C141224 * C364 + C139366 * C190 +
              C141462 * C363) *
                 C141327 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C188) *
                C42873) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[57] +=
        (-std::pow(Pi, 2.5) *
         ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
             C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
             C22185 + C21821 * C3196) *
                C141462 +
            (C22219 + C22220 + C22221) * C141224) *
               C141353 * C141298 * C2374 -
           ((C23200 + C23201 + C23202) * C141224 +
            (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
             C22180 * C2960 + C23189 + C23189 + C21820 * C3196 + C22179 * C823 +
             C23190 + C23190 + C21819 * C1171) *
                C141462) *
               C141353 * C141298 * C141497) *
              C2376 +
          (((C23202 + C23201 + C23200) * C141462 +
            (C22179 * C821 + C23191 + C23191 + C21819 * C1169 + C22180 * C2962 +
             C23192 + C23192 + C21820 * C3198 + C22181 * C9669 + C23193 +
             C23193 + C21821 * C10037) *
                C141224) *
               C141353 * C141298 * C141497 -
           ((C22222 + C22223 + C22224) * C141224 +
            (C22221 + C22220 + C22219) * C141462) *
               C141353 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C89 + C448 * C90 +
            C449 * C91 + C450 * C92) *
               C141353 * C141298 * C2374 -
           (C1191 * C92 + C1192 * C91 + C1193 * C90 +
            (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C89) *
               C141353 * C141298 * C141497) *
              C2376 +
          ((C1193 * C89 + C1192 * C90 + C1191 * C91 +
            (C418 * C824 + C1184 + C1184 + C141327 * C1172) * C92) *
               C141353 * C141298 * C141497 -
           (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) * C141353 *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C141462 +
             C448 * C141224) *
                C42873 +
            (C45166 + C45167) * C42874 + (C45168 + C45169) * C42875) *
               C141298 * C2374 -
           ((C44109 * C141224 +
             (C418 * C13205 + C18790 + C18790 + C141327 * C13531) * C141462) *
                C42875 +
            (C15179 * C141224 + C18795 * C141462) * C42874 +
            (C1193 * C141224 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C141462) *
                C42873) *
               C141298 * C141497) *
              C2376 +
          (((C1193 * C141462 + C1192 * C141224) * C42873 +
            (C15179 * C141462 + C15178 * C141224) * C42874 +
            (C44109 * C141462 +
             (C418 * C13207 + C18792 + C18792 + C141327 * C13533) * C141224) *
                C42875) *
               C141298 * C141497 -
           ((C45175 + C45174) * C42875 + (C45173 + C45172) * C42874 +
            (C449 * C141224 + C448 * C141462) * C42873) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[57] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C21918 +
             (C275 * C189 + C141353 * C501) * C21819 + C6988 * C21919 +
             C7366 * C21820 + C9864 * C21920 + C10124 * C21821) *
                C141462 +
            (C22299 + C22300 + C22301 + C22302 + C22303 + C22304) * C141224) *
               C141298 * C2374 -
           ((C23309 + C23303 + C23304 + C23305 + C23306 + C23307) * C141224 +
            ((C275 * C9768 + C141353 * C10118) * C21821 +
             (C275 * C9667 + C141353 * C9848) * C21920 + C10124 * C21820 +
             C9864 * C21919 + C7366 * C21819 + C6988 * C21918) *
                C141462) *
               C141298 * C141497) *
              C2376 +
          (((C23307 + C23306 + C23305 + C23304 + C23303 + C23309) * C141462 +
            (C1029 * C21918 + C1275 * C21819 + C6991 * C21919 + C7367 * C21820 +
             (C275 * C9669 + C141353 * C9850) * C21920 +
             (C275 * C9770 + C141353 * C10120) * C21821) *
                C141224) *
               C141298 * C141497 -
           ((C22305 + C22306 + C22307 + C22308 + C22309 + C22310) * C141224 +
            (C22304 + C22303 + C22302 + C22301 + C22300 + C22299) * C141462) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C275 * C108 + C141353 * C276) * C188 +
                                 (C275 * C189 + C141353 * C501) * C141327) *
                                    C89 +
                                (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
                                   C141298 * C2374 -
                               ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
                                (C1279 + C1273) * C90 +
                                ((C275 * C912 + C141353 * C1262) * C141327 +
                                 (C275 * C823 + C141353 * C1006) * C188) *
                                    C89) *
                                   C141298 * C141497) *
                                  C2376 +
                              (((C1273 + C1279) * C89 + (C1270 + C1278) * C90 +
                                (C1267 + C1277) * C91 +
                                ((C275 * C824 + C141353 * C1007) * C188 +
                                 (C275 * C913 + C141353 * C1263) * C141327) *
                                    C92) *
                                   C141298 * C141497 -
                               ((C527 + C519) * C92 + (C526 + C514) * C91 +
                                (C525 + C511) * C90 + (C524 + C508) * C89) *
                                   C141298 * C2374) *
                                  C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
              C43032 * C5325 + C42875 * C5449) *
                 C188 +
             (C43030 * C189 + C42873 * C501 + C43031 * C1690 + C42874 * C2040 +
              C43032 * C5391 + C42875 * C5619) *
                 C141327) *
                C141462 +
            ((C43058 + C43059 + C43060) * C188 +
             (C43304 + C43305 + C43306) * C141327) *
                C141224) *
               C141298 * C2374 -
           (((C44214 + C44215 + C44216) * C141327 +
             (C43906 + C43907 + C43908) * C188) *
                C141224 +
            ((C43032 * C13294 + C42875 * C13614 + C43031 * C3572 +
              C42874 * C3864 + C43030 * C912 + C42873 * C1262) *
                 C141327 +
             (C43032 * C13205 + C42875 * C13374 + C43031 * C3490 +
              C42874 * C3646 + C43030 * C823 + C42873 * C1006) *
                 C188) *
                C141462) *
               C141298 * C141497) *
              C2376 +
          ((((C43908 + C43907 + C43906) * C188 +
             (C44216 + C44215 + C44214) * C141327) *
                C141462 +
            ((C43030 * C821 + C42873 * C1004 + C43031 * C3492 + C42874 * C3648 +
              C43032 * C13207 + C42875 * C13376) *
                 C188 +
             (C43030 * C910 + C42873 * C1260 + C43031 * C3574 + C42874 * C3866 +
              C43032 * C13296 + C42875 * C13616) *
                 C141327) *
                C141224) *
               C141298 * C141497 -
           (((C43307 + C43308 + C43309) * C141327 +
             (C43067 + C43068 + C43069) * C188) *
                C141224 +
            ((C43306 + C43305 + C43304) * C141327 +
             (C43060 + C43059 + C43058) * C188) *
                C141462) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[57] +=
        (-std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C275 +
             (C139366 * C276 + C141462 * C579 + C139356 * C277 +
              C141224 * C580) *
                 C141353) *
                C21819 +
            ((C23065 + C23066) * C275 + (C23424 + C23425) * C141353) * C21820 +
            ((C23069 + C23070) * C275 + (C23426 + C23427) * C141353) * C21821) *
               C141298 * C2374 -
           (((C139356 * C9849 + C141224 * C10199 + C139366 * C9848 +
              C141462 * C10198) *
                 C141353 +
             (C139356 * C9668 + C141224 * C9671 + C139366 * C9667 +
              C141462 * C9670) *
                 C275) *
                C21821 +
            ((C23427 + C23426) * C141353 + (C23070 + C23069) * C275) * C21820 +
            ((C23425 + C23424) * C141353 + (C23066 + C23065) * C275) * C21819) *
               C141298 * C141497) *
              C2376 +
          ((((C23073 + C23074) * C275 + (C23428 + C23429) * C141353) * C21819 +
            ((C23077 + C23078) * C275 + (C23430 + C23431) * C141353) * C21820 +
            ((C139366 * C9668 + C141462 * C9671 + C139356 * C9669 +
              C141224 * C9672) *
                 C275 +
             (C139366 * C9849 + C141462 * C10199 + C139356 * C9850 +
              C141224 * C10200) *
                 C141353) *
                C21821) *
               C141298 * C141497 -
           (((C23431 + C23430) * C141353 + (C23078 + C23077) * C275) * C21821 +
            ((C23429 + C23428) * C141353 + (C23074 + C23073) * C275) * C21820 +
            ((C139356 * C278 + C141224 * C581 + C139366 * C277 +
              C141462 * C580) *
                 C141353 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C275) *
                C21819) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141353) *
               C141327 * C141298 * C2374 -
           ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
             C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
                C141353 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C275) *
               C141327 * C141298 * C141497) *
              C2376 +
          (((C101 * C822 + C89 * C827 + C103 * C821 + C90 * C826 + C105 * C820 +
             C91 * C825 + C107 * C824 + C92 * C829) *
                C275 +
            (C101 * C1005 + C89 * C1347 + C103 * C1004 + C90 * C1346 +
             C105 * C1003 + C91 * C1345 + C107 * C1007 + C92 * C1349) *
                C141353) *
               C141327 * C141298 * C141497 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C141353 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C141327 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C43030 +
            (C139366 * C276 + C141462 * C579 + C139356 * C277 +
             C141224 * C580) *
                C42873 +
            (C45052 + C45053) * C43031 + (C45400 + C45401) * C42874 +
            (C45056 + C45057) * C43032 + (C45402 + C45403) * C42875) *
               C141327 * C141298 * C2374 -
           ((C139356 * C13375 + C141224 * C13692 + C139366 * C13374 +
             C141462 * C13691) *
                C42875 +
            (C139356 * C13206 + C141224 * C13209 + C139366 * C13205 +
             C141462 * C13208) *
                C43032 +
            (C27041 + C27042) * C42874 + (C26720 + C26721) * C43031 +
            (C23425 + C23424) * C42873 + (C23066 + C23065) * C43030) *
               C141327 * C141298 * C141497) *
              C2376 +
          (((C23073 + C23074) * C43030 + (C23428 + C23429) * C42873 +
            (C139366 * C3491 + C141462 * C3495 + C139356 * C3492 +
             C141224 * C3496) *
                C43031 +
            (C139366 * C3647 + C141462 * C3935 + C139356 * C3648 +
             C141224 * C3936) *
                C42874 +
            (C139366 * C13206 + C141462 * C13209 + C139356 * C13207 +
             C141224 * C13210) *
                C43032 +
            (C139366 * C13375 + C141462 * C13692 + C139356 * C13376 +
             C141224 * C13693) *
                C42875) *
               C141327 * C141298 * C141497 -
           ((C45407 + C45406) * C42875 + (C45065 + C45064) * C43032 +
            (C45405 + C45404) * C42874 + (C45061 + C45060) * C43031 +
            (C139356 * C278 + C141224 * C581 + C139366 * C277 +
             C141462 * C580) *
                C42873 +
            (C139356 * C110 + C141224 * C116 + C139366 * C109 +
             C141462 * C115) *
                C43030) *
               C141327 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezy[57] +=
        (-std::pow(Pi, 2.5) *
         (((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
              C21920 * C2960 + C21821 * C3026) *
                 C275 +
             (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
              C21920 * C3084 + C21821 * C3362) *
                 C141353) *
                C141462 +
            ((C21946 + C21947 + C21948) * C275 +
             (C22471 + C22472 + C22473) * C141353) *
                C141224) *
               C141298 * C2374 -
           (((C23536 + C23537 + C23538) * C141353 +
             (C22812 + C22813 + C22814) * C275) *
                C141224 +
            ((C21920 * C9848 + C21821 * C10284 + C21919 * C3084 +
              C21820 * C3362 + C21918 * C1006 + C21819 * C1419) *
                 C141353 +
             (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 +
              C21820 * C3026 + C21918 * C823 + C21819 * C912) *
                 C275) *
                C141462) *
               C141298 * C141497) *
              C2376 +
          ((((C22814 + C22813 + C22812) * C275 +
             (C23538 + C23537 + C23536) * C141353) *
                C141462 +
            ((C21918 * C821 + C21819 * C910 + C21919 * C2962 + C21820 * C3028 +
              C21920 * C9669 + C21821 * C9770) *
                 C275 +
             (C21918 * C1004 + C21819 * C1417 + C21919 * C3086 +
              C21820 * C3364 + C21920 * C9850 + C21821 * C10286) *
                 C141353) *
                C141224) *
               C141298 * C141497 -
           (((C22474 + C22475 + C22476) * C141353 +
             (C21955 + C21956 + C21957) * C275) *
                C141224 +
            ((C22473 + C22472 + C22471) * C141353 +
             (C21948 + C21947 + C21946) * C275) *
                C141462) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C188 * C108 + C141327 * C189) * C275 +
                                 (C188 * C276 + C141327 * C635) * C141353) *
                                    C89 +
                                (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                                   C141298 * C2374 -
                               ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
                                (C1436 + C1430) * C90 +
                                ((C188 * C1006 + C141327 * C1419) * C141353 +
                                 (C188 * C823 + C141327 * C912) * C275) *
                                    C89) *
                                   C141298 * C141497) *
                                  C2376 +
                              (((C1430 + C1436) * C89 + (C1427 + C1435) * C90 +
                                (C1424 + C1434) * C91 +
                                ((C188 * C824 + C141327 * C913) * C275 +
                                 (C188 * C1007 + C141327 * C1420) * C141353) *
                                    C92) *
                                   C141298 * C141497 -
                               ((C661 + C653) * C92 + (C660 + C648) * C91 +
                                (C659 + C645) * C90 + (C658 + C642) * C89) *
                                   C141298 * C2374) *
                                  C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C43030 +
             (C188 * C276 + C141327 * C635) * C42873 + C15877 * C43031 +
             C16596 * C42874 + C21152 * C43032 + C21660 * C42875) *
                C141462 +
            (C43458 + C43459 + C43460 + C43461 + C43462 + C43463) * C141224) *
               C141298 * C2374 -
           ((C44421 + C44415 + C44416 + C44417 + C44418 + C44419) * C141224 +
            ((C188 * C13374 + C141327 * C13768) * C42875 +
             (C188 * C13205 + C141327 * C13294) * C43032 + C19093 * C42874 +
             C18488 * C43031 + (C188 * C1006 + C141327 * C1419) * C42873 +
             (C188 * C823 + C141327 * C912) * C43030) *
                C141462) *
               C141298 * C141497) *
              C2376 +
          (((C44419 + C44418 + C44417 + C44416 + C44415 + C44421) * C141462 +
            (C935 * C43030 + C1432 * C42873 + C14849 * C43031 +
             C15496 * C42874 + (C188 * C13207 + C141327 * C13296) * C43032 +
             (C188 * C13376 + C141327 * C13770) * C42875) *
                C141224) *
               C141298 * C141497 -
           ((C43464 + C43465 + C43466 + C43467 + C43468 + C43469) * C141224 +
            (C43463 + C43462 + C43461 + C43460 + C43459 + C43458) * C141462) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[57] +=
        (-std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C21819 +
             C7709 * C21820 + C10372 * C21821) *
                C141462 +
            (C22551 + C22552 + C22553) * C141224) *
               C141298 * C2374 -
           ((C23644 + C23639 + C23640) * C141224 +
            ((C713 * C9667 + C10367 + C10367 + C141353 * C10361) * C21821 +
             C10372 * C21820 + C7709 * C21819) *
                C141462) *
               C141298 * C141497) *
              C2376 +
          (((C23640 + C23639 + C23644) * C141462 +
            (C1526 * C21819 + C7710 * C21820 +
             (C713 * C9669 + C10369 + C10369 + C141353 * C10363) * C21821) *
                C141224) *
               C141298 * C141497 -
           ((C22554 + C22555 + C22556) * C141224 +
            (C22553 + C22552 + C22551) * C141462) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141327 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C141298 * C2374 -
           (C1528 * C92 + C1529 * C91 + C1530 * C90 +
            (C713 * C823 + C1517 + C1517 + C141353 * C1505) * C141327 * C89) *
               C141298 * C141497) *
              C2376 +
          ((C1530 * C89 + C1529 * C90 + C1528 * C91 +
            (C713 * C824 + C1518 + C1518 + C141353 * C1506) * C141327 * C92) *
               C141298 * C141497 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C141298 *
               C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43543 * C108 + C43547 + C43547 + C42873 * C714 + C43544 * C1601 +
             C43548 + C43548 + C42874 * C2283 + C43545 * C5325 + C43549 +
             C43549 + C42875 * C5781) *
                C141327 * C141462 +
            (C43583 + C43584 + C43585) * C141327 * C141224) *
               C141298 * C2374 -
           ((C44541 + C44542 + C44543) * C141327 * C141224 +
            (C43545 * C13205 + C44529 + C44529 + C42875 * C13845 +
             C43544 * C3490 + C44530 + C44530 + C42874 * C4074 + C43543 * C823 +
             C44531 + C44531 + C42873 * C1505) *
                C141327 * C141462) *
               C141298 * C141497) *
              C2376 +
          (((C44543 + C44542 + C44541) * C141327 * C141462 +
            (C43543 * C821 + C44532 + C44532 + C42873 * C1503 + C43544 * C3492 +
             C44533 + C44533 + C42874 * C4076 + C43545 * C13207 + C44534 +
             C44534 + C42875 * C13847) *
                C141327 * C141224) *
               C141298 * C141497 -
           ((C43586 + C43587 + C43588) * C141327 * C141224 +
            (C43585 + C43584 + C43583) * C141327 * C141462) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[58] +=
        (-std::pow(Pi, 2.5) *
         (((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
            C21828 + C21828 + C141224 * C121) *
               C141353 * C21819 +
           (C22691 + C22692) * C141353 * C21820 + C25582 * C21821) *
              C141298 * C2956 -
          ((C25587 + C25588) * C141353 * C21821 +
           (C22694 + C22693) * C141353 * C21820 +
           (C22692 + C22691) * C141353 * C21819) *
              C141298 * C2957 +
          (C25582 * C21819 + (C25588 + C25587) * C141353 * C21820 +
           (C21822 * C25568 + C25580 + C25580 + C141462 * C25572 +
            C21824 * C25569 + C25581 + C25581 + C141224 * C25573) *
               C141353 * C21821) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
           C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
           C130 + C130 + C92 * C123) *
              C141353 * C141327 * C141298 * C2956 -
          (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 + C837 + C837 +
           C91 * C831 + C102 * C822 + C838 + C838 + C90 * C832 + C100 * C823 +
           C839 + C839 + C89 * C833) *
              C141353 * C141327 * C141298 * C2957 +
          (C100 * C2960 + C2973 + C2973 + C89 * C2968 + C102 * C2961 + C2974 +
           C2974 + C90 * C2969 + C104 * C2962 + C2975 + C2975 + C91 * C2970 +
           C106 * C2963 + C2976 + C2976 + C92 * C2971) *
              C141353 * C141327 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
            C21828 + C21828 + C141224 * C121) *
               C42873 +
           (C44678 + C44679) * C42874 + (C44680 + C44681) * C42875) *
              C141327 * C141298 * C2956 -
          ((C21824 * C13206 + C29097 + C29097 + C141224 * C13212 +
            C21822 * C13205 + C29096 + C29096 + C141462 * C13211) *
               C42875 +
           (C26378 + C26379) * C42874 + (C22692 + C22691) * C42873) *
              C141327 * C141298 * C2957 +
          (C25575 * C42873 + (C26377 + C26376) * C42874 +
           (C21822 * C29087 + C29098 + C29098 + C141462 * C29091 +
            C21824 * C29088 + C29099 + C29099 + C141224 * C29092) *
               C42875) *
              C141327 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[58] +=
        (-std::pow(Pi, 2.5) *
         (((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
            C21920 * C2960 + C21821 * C3026) *
               C139366 +
           (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
            C21920 * C2964 + C21821 * C3030) *
               C141462 +
           (C21946 + C21947 + C21948) * C139356 +
           (C21949 + C21950 + C21951) * C141224) *
              C141353 * C141298 * C2956 -
          ((C22809 + C22810 + C22811) * C141224 +
           (C22812 + C22813 + C22814) * C139356 +
           (C21920 * C9670 + C21821 * C9771 + C21919 * C2964 + C21820 * C3030 +
            C21918 * C828 + C21819 * C917) *
               C141462 +
           (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
            C21918 * C823 + C21819 * C912) *
               C139366) *
              C141353 * C141298 * C2957 +
          ((C21918 * C2960 + C21819 * C3026 + C21919 * C9667 + C21820 * C9768 +
            C21920 * C25568 + C21821 * C25662) *
               C139366 +
           (C21918 * C2964 + C21819 * C3030 + C21919 * C9670 + C21820 * C9771 +
            C21920 * C25570 + C21821 * C25664) *
               C141462 +
           (C21918 * C2961 + C21819 * C3027 + C21919 * C9668 + C21820 * C9769 +
            C21920 * C25569 + C21821 * C25663) *
               C139356 +
           (C21918 * C2965 + C21819 * C3031 + C21919 * C9671 + C21820 * C9772 +
            C21920 * C25571 + C21821 * C25665) *
               C141224) *
              C141353 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C188 * C108 + C141327 * C189) * C101 +
           (C188 * C114 + C141327 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C141353 * C141298 * C2956 -
          (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
           C937 * C103 + (C188 * C828 + C141327 * C917) * C89 +
           (C188 * C823 + C141327 * C912) * C101) *
              C141353 * C141298 * C2957 +
          ((C188 * C2960 + C141327 * C3026) * C101 +
           (C188 * C2964 + C141327 * C3030) * C89 +
           (C188 * C2961 + C141327 * C3027) * C103 +
           (C188 * C2965 + C141327 * C3031) * C90 +
           (C188 * C2962 + C141327 * C3028) * C105 +
           (C188 * C2966 + C141327 * C3032) * C91 +
           (C188 * C2963 + C141327 * C3029) * C107 +
           (C188 * C2967 + C141327 * C3033) * C92) *
              C141353 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C139366 +
            (C188 * C114 + C141327 * C195) * C141462 + C218 * C139356 +
            C219 * C141224) *
               C42873 +
           (C44784 + C44785 + C44786 + C44787) * C42874 +
           (C44788 + C44789 + C44790 + C44791) * C42875) *
              C141298 * C2956 -
          ((C43791 * C141224 + C43792 * C139356 +
            (C188 * C13208 + C141327 * C13297) * C141462 +
            (C188 * C13205 + C141327 * C13294) * C139366) *
               C42875 +
           (C14850 * C141224 + C14851 * C139356 + C18489 * C141462 +
            C18488 * C139366) *
               C42874 +
           (C936 * C141224 + C937 * C139356 +
            (C188 * C828 + C141327 * C917) * C141462 +
            (C188 * C823 + C141327 * C912) * C139366) *
               C42873) *
              C141298 * C2957 +
          (((C188 * C2960 + C141327 * C3026) * C139366 +
            (C188 * C2964 + C141327 * C3030) * C141462 +
            (C188 * C2961 + C141327 * C3027) * C139356 +
            (C188 * C2965 + C141327 * C3031) * C141224) *
               C42873 +
           ((C188 * C10470 + C141327 * C10595) * C139366 +
            (C188 * C10473 + C141327 * C10598) * C141462 +
            (C188 * C10471 + C141327 * C10596) * C139356 +
            (C188 * C10474 + C141327 * C10599) * C141224) *
               C42874 +
           ((C188 * C29087 + C141327 * C29173) * C139366 +
            (C188 * C29089 + C141327 * C29175) * C141462 +
            (C188 * C29088 + C141327 * C29174) * C139356 +
            (C188 * C29090 + C141327 * C29176) * C141224) *
               C42875) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[58] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C139366 +
            (C275 * C114 + C141353 * C282) * C141462 + C305 * C139356 +
            C306 * C141224) *
               C21819 +
           (C22913 + C22914 + C22915 + C22916) * C21820 + C25755 * C21821) *
              C141298 * C2956 -
          ((C25746 + C25747 + C25756 + C25757) * C21821 +
           (C22920 + C22919 + C22918 + C22917) * C21820 +
           (C22916 + C22915 + C22914 + C22913) * C21819) *
              C141298 * C2957 +
          (C25755 * C21819 + (C25757 + C25756 + C25747 + C25746) * C21820 +
           ((C275 * C25568 + C141353 * C25740) * C139366 +
            (C275 * C25570 + C141353 * C25742) * C141462 +
            (C275 * C25569 + C141353 * C25741) * C139356 +
            (C275 * C25571 + C141353 * C25743) * C141224) *
               C21821) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C275 * C108 + C141353 * C276) * C101 +
           (C275 * C114 + C141353 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C141327 * C141298 * C2956 -
          (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
           C1030 * C90 + C1031 * C103 + (C275 * C828 + C141353 * C1011) * C89 +
           (C275 * C823 + C141353 * C1006) * C101) *
              C141327 * C141298 * C2957 +
          ((C275 * C2960 + C141353 * C3084) * C101 +
           (C275 * C2964 + C141353 * C3088) * C89 +
           (C275 * C2961 + C141353 * C3085) * C103 +
           (C275 * C2965 + C141353 * C3089) * C90 +
           (C275 * C2962 + C141353 * C3086) * C105 +
           (C275 * C2966 + C141353 * C3090) * C91 +
           (C275 * C2963 + C141353 * C3087) * C107 +
           (C275 * C2967 + C141353 * C3091) * C92) *
              C141327 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
            C43032 * C5325 + C42875 * C5449) *
               C139366 +
           (C43030 * C114 + C42873 * C282 + C43031 * C1606 + C42874 * C1789 +
            C43032 * C5329 + C42875 * C5453) *
               C141462 +
           (C43058 + C43059 + C43060) * C139356 +
           (C43061 + C43062 + C43063) * C141224) *
              C141327 * C141298 * C2956 -
          ((C43903 + C43904 + C43905) * C141224 +
           (C43906 + C43907 + C43908) * C139356 +
           (C43032 * C13208 + C42875 * C13377 + C43031 * C3494 +
            C42874 * C3650 + C43030 * C828 + C42873 * C1011) *
               C141462 +
           (C43032 * C13205 + C42875 * C13374 + C43031 * C3490 +
            C42874 * C3646 + C43030 * C823 + C42873 * C1006) *
               C139366) *
              C141327 * C141298 * C2957 +
          ((C43030 * C2960 + C42873 * C3084 + C43031 * C10470 +
            C42874 * C10699 + C43032 * C29087 + C42875 * C29251) *
               C139366 +
           (C43030 * C2964 + C42873 * C3088 + C43031 * C10473 +
            C42874 * C10702 + C43032 * C29089 + C42875 * C29253) *
               C141462 +
           (C43030 * C2961 + C42873 * C3085 + C43031 * C10471 +
            C42874 * C10700 + C43032 * C29088 + C42875 * C29252) *
               C139356 +
           (C43030 * C2965 + C42873 * C3089 + C43031 * C10474 +
            C42874 * C10703 + C43032 * C29090 + C42875 * C29254) *
               C141224) *
              C141327 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[58] +=
        (-std::pow(Pi, 2.5) *
         (((C139366 * C108 + C141462 * C114 + C139356 * C109 + C141224 * C115) *
               C21918 +
           (C139366 * C189 + C141462 * C362 + C139356 * C190 + C141224 * C363) *
               C21819 +
           (C23065 + C23066) * C21919 + (C23067 + C23068) * C21820 +
           C25834 * C21920 + C25835 * C21821) *
              C141353 * C141298 * C2956 -
          ((C25844 + C25845) * C21821 + (C25846 + C25847) * C21920 +
           (C23072 + C23071) * C21820 + (C23070 + C23069) * C21919 +
           (C23068 + C23067) * C21819 + (C23066 + C23065) * C21918) *
              C141353 * C141298 * C2957 +
          (C25834 * C21918 + C25835 * C21819 + (C25847 + C25846) * C21919 +
           (C25845 + C25844) * C21820 +
           (C139366 * C25568 + C141462 * C25570 + C139356 * C25569 +
            C141224 * C25571) *
               C21920 +
           (C139366 * C25662 + C141462 * C25831 + C139356 * C25663 +
            C141224 * C25832) *
               C21821) *
              C141353 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C141327) *
              C141353 * C141298 * C2956 -
          ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
            C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
               C141327 +
           (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
            C90 * C827 + C101 * C823 + C89 * C828) *
               C188) *
              C141353 * C141298 * C2957 +
          ((C101 * C2960 + C89 * C2964 + C103 * C2961 + C90 * C2965 +
            C105 * C2962 + C91 * C2966 + C107 * C2963 + C92 * C2967) *
               C188 +
           (C101 * C3026 + C89 * C3142 + C103 * C3027 + C90 * C3143 +
            C105 * C3028 + C91 * C3144 + C107 * C3029 + C92 * C3145) *
               C141327) *
              C141353 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C188 +
            (C139366 * C189 + C141462 * C362 + C139356 * C190 +
             C141224 * C363) *
                C141327) *
               C42873 +
           ((C45052 + C45053) * C188 + (C45054 + C45055) * C141327) * C42874 +
           ((C45056 + C45057) * C188 + (C45058 + C45059) * C141327) * C42875) *
              C141298 * C2956 -
          (((C139356 * C13295 + C141224 * C13455 + C139366 * C13294 +
             C141462 * C13454) *
                C141327 +
            (C139356 * C13206 + C141224 * C13209 + C139366 * C13205 +
             C141462 * C13208) *
                C188) *
               C42875 +
           ((C26718 + C26719) * C141327 + (C26720 + C26721) * C188) * C42874 +
           ((C23068 + C23067) * C141327 + (C23066 + C23065) * C188) * C42873) *
              C141298 * C2957 +
          ((C25834 * C188 + C25835 * C141327) * C42873 +
           ((C26717 + C26716) * C188 + (C26715 + C26714) * C141327) * C42874 +
           ((C139366 * C29087 + C141462 * C29089 + C139356 * C29088 +
             C141224 * C29090) *
                C188 +
            (C139366 * C29173 + C141462 * C29329 + C139356 * C29174 +
             C141224 * C29330) *
                C141327) *
               C42875) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[58] +=
        (-std::pow(Pi, 2.5) *
         (((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
            C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
            C22185 + C21821 * C3196) *
               C141462 +
           (C22219 + C22220 + C22221) * C141224) *
              C141353 * C141298 * C2956 -
          ((C23200 + C23201 + C23202) * C141224 +
           (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
            C22180 * C2960 + C23189 + C23189 + C21820 * C3196 + C22179 * C823 +
            C23190 + C23190 + C21819 * C1171) *
               C141462) *
              C141353 * C141298 * C2957 +
          ((C22179 * C2960 + C25924 + C25924 + C21819 * C3196 + C22180 * C9667 +
            C25925 + C25925 + C21820 * C10035 + C22181 * C25568 + C25926 +
            C25926 + C21821 * C25921) *
               C141462 +
           (C22179 * C2961 + C25927 + C25927 + C21819 * C3197 + C22180 * C9668 +
            C25928 + C25928 + C21820 * C10036 + C22181 * C25569 + C25929 +
            C25929 + C21821 * C25922) *
               C141224) *
              C141353 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C141327 * C419) * C89 + C448 * C90 +
           C449 * C91 + C450 * C92) *
              C141353 * C141298 * C2956 -
          (C1191 * C92 + C1192 * C91 + C1193 * C90 +
           (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C89) *
              C141353 * C141298 * C2957 +
          ((C418 * C2960 + C3201 + C3201 + C141327 * C3196) * C89 +
           (C418 * C2961 + C3202 + C3202 + C141327 * C3197) * C90 +
           (C418 * C2962 + C3203 + C3203 + C141327 * C3198) * C91 +
           (C418 * C2963 + C3204 + C3204 + C141327 * C3199) * C92) *
              C141353 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C141462 +
            C448 * C141224) *
               C42873 +
           (C45166 + C45167) * C42874 + (C45168 + C45169) * C42875) *
              C141298 * C2956 -
          ((C44109 * C141224 +
            (C418 * C13205 + C18790 + C18790 + C141327 * C13531) * C141462) *
               C42875 +
           (C15179 * C141224 + C18795 * C141462) * C42874 +
           (C1193 * C141224 +
            (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C141462) *
               C42873) *
              C141298 * C2957 +
          (((C418 * C2960 + C3201 + C3201 + C141327 * C3196) * C141462 +
            (C418 * C2961 + C3202 + C3202 + C141327 * C3197) * C141224) *
               C42873 +
           ((C418 * C10470 + C17979 + C17979 + C141327 * C10934) * C141462 +
            (C418 * C10471 + C17980 + C17980 + C141327 * C10935) * C141224) *
               C42874 +
           ((C418 * C29087 + C46889 + C46889 + C141327 * C29405) * C141462 +
            (C418 * C29088 + C46890 + C46890 + C141327 * C29406) * C141224) *
               C42875) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyz[58] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C21918 +
            (C275 * C189 + C141353 * C501) * C21819 + C6988 * C21919 +
            C7366 * C21820 + C9864 * C21920 + C10124 * C21821) *
               C141462 +
           (C22299 + C22300 + C22301 + C22302 + C22303 + C22304) * C141224) *
              C141298 * C2956 -
          ((C23309 + C23303 + C23304 + C23305 + C23306 + C23307) * C141224 +
           (C26008 * C21821 + C25754 * C21920 + C10124 * C21820 +
            C9864 * C21919 + C7366 * C21819 + C6988 * C21918) *
               C141462) *
              C141298 * C2957 +
          ((C9864 * C21918 + C10124 * C21819 + C25754 * C21919 +
            C26008 * C21820 + (C275 * C25568 + C141353 * C25740) * C21920 +
            (C275 * C25662 + C141353 * C26003) * C21821) *
               C141462 +
           (C6993 * C21918 + C7368 * C21819 + C22934 * C21919 +
            C23308 * C21820 + (C275 * C25569 + C141353 * C25741) * C21920 +
            (C275 * C25663 + C141353 * C26004) * C21821) *
               C141224) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C188 +
            (C275 * C189 + C141353 * C501) * C141327) *
               C89 +
           (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
              C141298 * C2956 -
          ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
           (C1279 + C1273) * C90 +
           ((C275 * C912 + C141353 * C1262) * C141327 +
            (C275 * C823 + C141353 * C1006) * C188) *
               C89) *
              C141298 * C2957 +
          (((C275 * C2960 + C141353 * C3084) * C188 +
            (C275 * C3026 + C141353 * C3254) * C141327) *
               C89 +
           ((C275 * C2961 + C141353 * C3085) * C188 +
            (C275 * C3027 + C141353 * C3255) * C141327) *
               C90 +
           ((C275 * C2962 + C141353 * C3086) * C188 +
            (C275 * C3028 + C141353 * C3256) * C141327) *
               C91 +
           ((C275 * C2963 + C141353 * C3087) * C188 +
            (C275 * C3029 + C141353 * C3257) * C141327) *
               C92) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
             C43032 * C5325 + C42875 * C5449) *
                C188 +
            (C43030 * C189 + C42873 * C501 + C43031 * C1690 + C42874 * C2040 +
             C43032 * C5391 + C42875 * C5619) *
                C141327) *
               C141462 +
           ((C43058 + C43059 + C43060) * C188 +
            (C43304 + C43305 + C43306) * C141327) *
               C141224) *
              C141298 * C2956 -
          (((C44214 + C44215 + C44216) * C141327 +
            (C43906 + C43907 + C43908) * C188) *
               C141224 +
           ((C43032 * C13294 + C42875 * C13614 + C43031 * C3572 +
             C42874 * C3864 + C43030 * C912 + C42873 * C1262) *
                C141327 +
            (C43032 * C13205 + C42875 * C13374 + C43031 * C3490 +
             C42874 * C3646 + C43030 * C823 + C42873 * C1006) *
                C188) *
               C141462) *
              C141298 * C2957 +
          (((C43030 * C2960 + C42873 * C3084 + C43031 * C10470 +
             C42874 * C10699 + C43032 * C29087 + C42875 * C29251) *
                C188 +
            (C43030 * C3026 + C42873 * C3254 + C43031 * C10595 +
             C42874 * C11041 + C43032 * C29173 + C42875 * C29487) *
                C141327) *
               C141462 +
           ((C43030 * C2961 + C42873 * C3085 + C43031 * C10471 +
             C42874 * C10700 + C43032 * C29088 + C42875 * C29252) *
                C188 +
            (C43030 * C3027 + C42873 * C3255 + C43031 * C10596 +
             C42874 * C11042 + C43032 * C29174 + C42875 * C29488) *
                C141327) *
               C141224) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezx[58] +=
        (-std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C275 +
            (C139366 * C276 + C141462 * C579 + C139356 * C277 +
             C141224 * C580) *
                C141353) *
               C21819 +
           ((C23065 + C23066) * C275 + (C23424 + C23425) * C141353) * C21820 +
           C26094 * C21821) *
              C141298 * C2956 -
          (((C26092 + C26093) * C141353 + (C25846 + C25847) * C275) * C21821 +
           ((C23427 + C23426) * C141353 + (C23070 + C23069) * C275) * C21820 +
           ((C23425 + C23424) * C141353 + (C23066 + C23065) * C275) * C21819) *
              C141298 * C2957 +
          (C26094 * C21819 +
           ((C25847 + C25846) * C275 + (C26093 + C26092) * C141353) * C21820 +
           ((C139366 * C25568 + C141462 * C25570 + C139356 * C25569 +
             C141224 * C25571) *
                C275 +
            (C139366 * C25740 + C141462 * C26082 + C139356 * C25741 +
             C141224 * C26083) *
                C141353) *
               C21821) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C141353) *
              C141327 * C141298 * C2956 -
          ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
            C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
               C141353 +
           (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
            C90 * C827 + C101 * C823 + C89 * C828) *
               C275) *
              C141327 * C141298 * C2957 +
          ((C101 * C2960 + C89 * C2964 + C103 * C2961 + C90 * C2965 +
            C105 * C2962 + C91 * C2966 + C107 * C2963 + C92 * C2967) *
               C275 +
           (C101 * C3084 + C89 * C3308 + C103 * C3085 + C90 * C3309 +
            C105 * C3086 + C91 * C3310 + C107 * C3087 + C92 * C3311) *
               C141353) *
              C141327 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C139366 * C108 + C141462 * C114 + C139356 * C109 + C141224 * C115) *
               C43030 +
           (C139366 * C276 + C141462 * C579 + C139356 * C277 + C141224 * C580) *
               C42873 +
           (C45052 + C45053) * C43031 + (C45400 + C45401) * C42874 +
           (C45056 + C45057) * C43032 + (C45402 + C45403) * C42875) *
              C141327 * C141298 * C2956 -
          ((C139356 * C13375 + C141224 * C13692 + C139366 * C13374 +
            C141462 * C13691) *
               C42875 +
           (C139356 * C13206 + C141224 * C13209 + C139366 * C13205 +
            C141462 * C13208) *
               C43032 +
           (C27041 + C27042) * C42874 + (C26720 + C26721) * C43031 +
           (C23425 + C23424) * C42873 + (C23066 + C23065) * C43030) *
              C141327 * C141298 * C2957 +
          (C25834 * C43030 + C26086 * C42873 + (C26717 + C26716) * C43031 +
           (C27040 + C27039) * C42874 +
           (C139366 * C29087 + C141462 * C29089 + C139356 * C29088 +
            C141224 * C29090) *
               C43032 +
           (C139366 * C29251 + C141462 * C29563 + C139356 * C29252 +
            C141224 * C29564) *
               C42875) *
              C141327 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[58] +=
        (-std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C275 +
            (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
             C21920 * C3084 + C21821 * C3362) *
                C141353) *
               C141462 +
           ((C21946 + C21947 + C21948) * C275 +
            (C22471 + C22472 + C22473) * C141353) *
               C141224) *
              C141298 * C2956 -
          (((C23536 + C23537 + C23538) * C141353 +
            (C22812 + C22813 + C22814) * C275) *
               C141224 +
           ((C21920 * C9848 + C21821 * C10284 + C21919 * C3084 +
             C21820 * C3362 + C21918 * C1006 + C21819 * C1419) *
                C141353 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C275) *
               C141462) *
              C141298 * C2957 +
          (((C21918 * C2960 + C21819 * C3026 + C21919 * C9667 + C21820 * C9768 +
             C21920 * C25568 + C21821 * C25662) *
                C275 +
            (C21918 * C3084 + C21819 * C3362 + C21919 * C9848 +
             C21820 * C10284 + C21920 * C25740 + C21821 * C26168) *
                C141353) *
               C141462 +
           ((C21918 * C2961 + C21819 * C3027 + C21919 * C9668 + C21820 * C9769 +
             C21920 * C25569 + C21821 * C25663) *
                C275 +
            (C21918 * C3085 + C21819 * C3363 + C21919 * C9849 +
             C21820 * C10285 + C21920 * C25741 + C21821 * C26169) *
                C141353) *
               C141224) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C275 +
            (C188 * C276 + C141327 * C635) * C141353) *
               C89 +
           (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
              C141298 * C2956 -
          ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
           (C1436 + C1430) * C90 +
           ((C188 * C1006 + C141327 * C1419) * C141353 +
            (C188 * C823 + C141327 * C912) * C275) *
               C89) *
              C141298 * C2957 +
          (((C188 * C2960 + C141327 * C3026) * C275 +
            (C188 * C3084 + C141327 * C3362) * C141353) *
               C89 +
           ((C188 * C2961 + C141327 * C3027) * C275 +
            (C188 * C3085 + C141327 * C3363) * C141353) *
               C90 +
           ((C188 * C2962 + C141327 * C3028) * C275 +
            (C188 * C3086 + C141327 * C3364) * C141353) *
               C91 +
           ((C188 * C2963 + C141327 * C3029) * C275 +
            (C188 * C3087 + C141327 * C3365) * C141353) *
               C92) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C43030 +
            (C188 * C276 + C141327 * C635) * C42873 + C15877 * C43031 +
            C16596 * C42874 + C21152 * C43032 + C21660 * C42875) *
               C141462 +
           (C43458 + C43459 + C43460 + C43461 + C43462 + C43463) * C141224) *
              C141298 * C2956 -
          ((C44421 + C44415 + C44416 + C44417 + C44418 + C44419) * C141224 +
           ((C188 * C13374 + C141327 * C13768) * C42875 +
            (C188 * C13205 + C141327 * C13294) * C43032 + C19093 * C42874 +
            C18488 * C43031 + (C188 * C1006 + C141327 * C1419) * C42873 +
            (C188 * C823 + C141327 * C912) * C43030) *
               C141462) *
              C141298 * C2957 +
          (((C188 * C2960 + C141327 * C3026) * C43030 +
            (C188 * C3084 + C141327 * C3362) * C42873 +
            (C188 * C10470 + C141327 * C10595) * C43031 +
            (C188 * C10699 + C141327 * C11255) * C42874 +
            (C188 * C29087 + C141327 * C29173) * C43032 +
            (C188 * C29251 + C141327 * C29639) * C42875) *
               C141462 +
           ((C188 * C2961 + C141327 * C3027) * C43030 +
            (C188 * C3085 + C141327 * C3363) * C42873 +
            (C188 * C10471 + C141327 * C10596) * C43031 +
            (C188 * C10700 + C141327 * C11256) * C42874 +
            (C188 * C29088 + C141327 * C29174) * C43032 +
            (C188 * C29252 + C141327 * C29640) * C42875) *
               C141224) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[58] +=
        (-std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C21819 +
            C7709 * C21820 + C10372 * C21821) *
               C141462 +
           (C22551 + C22552 + C22553) * C141224) *
              C141298 * C2956 -
          ((C23644 + C23639 + C23640) * C141224 +
           (C26253 * C21821 + C10372 * C21820 + C7709 * C21819) * C141462) *
              C141298 * C2957 +
          ((C10372 * C21819 + C26253 * C21820 +
            (C713 * C25568 + C26249 + C26249 + C141353 * C26244) * C21821) *
               C141462 +
           (C7711 * C21819 + C23643 * C21820 +
            (C713 * C25569 + C26250 + C26250 + C141353 * C26245) * C21821) *
               C141224) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141353 * C714) * C141327 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C141298 * C2956 -
          (C1528 * C92 + C1529 * C91 + C1530 * C90 +
           (C713 * C823 + C1517 + C1517 + C141353 * C1505) * C141327 * C89) *
              C141298 * C2957 +
          ((C713 * C2960 + C3421 + C3421 + C141353 * C3416) * C141327 * C89 +
           (C713 * C2961 + C3422 + C3422 + C141353 * C3417) * C141327 * C90 +
           (C713 * C2962 + C3423 + C3423 + C141353 * C3418) * C141327 * C91 +
           (C713 * C2963 + C3424 + C3424 + C141353 * C3419) * C141327 * C92) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C43543 * C108 + C43547 + C43547 + C42873 * C714 + C43544 * C1601 +
            C43548 + C43548 + C42874 * C2283 + C43545 * C5325 + C43549 +
            C43549 + C42875 * C5781) *
               C141327 * C141462 +
           (C43583 + C43584 + C43585) * C141327 * C141224) *
              C141298 * C2956 -
          ((C44541 + C44542 + C44543) * C141327 * C141224 +
           (C43545 * C13205 + C44529 + C44529 + C42875 * C13845 +
            C43544 * C3490 + C44530 + C44530 + C42874 * C4074 + C43543 * C823 +
            C44531 + C44531 + C42873 * C1505) *
               C141327 * C141462) *
              C141298 * C2957 +
          ((C43543 * C2960 + C47187 + C47187 + C42873 * C3416 +
            C43544 * C10470 + C47188 + C47188 + C42874 * C11356 +
            C43545 * C29087 + C47189 + C47189 + C42875 * C29715) *
               C141327 * C141462 +
           (C43543 * C2961 + C47190 + C47190 + C42873 * C3417 +
            C43544 * C10471 + C47191 + C47191 + C42874 * C11357 +
            C43545 * C29088 + C47192 + C47192 + C42875 * C29716) *
               C141327 * C141224) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexx[59] +=
        (-std::pow(Pi, 2.5) *
         ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
             C21828 + C21828 + C141224 * C121) *
                C141353 * C21819 +
            (C22691 + C22692) * C141353 * C21820 + C25582 * C21821) *
               C1596 -
           ((C26376 + C26377) * C141353 * C21821 +
            (C26378 + C26379) * C141353 * C21820 +
            (C21824 * C1600 + C23747 + C23747 + C141224 * C1610 +
             C21822 * C1601 + C23748 + C23748 + C141462 * C1611) *
                C141353 * C21819) *
               C141499) *
              C2374 +
          (((C26379 + C26378) * C141353 * C21819 +
            (C26377 + C26376) * C141353 * C21820 +
            (C21822 * C26351 + C26366 + C26366 + C141462 * C26355 +
             C21824 * C26352 + C26367 + C26367 + C141224 * C26356) *
                C141353 * C21821) *
               C141499 -
           ((C25587 + C25588) * C141353 * C21821 +
            (C22694 + C22693) * C141353 * C21820 +
            (C22692 + C22691) * C141353 * C21819) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C141353 * C141327 * C1596 -
           (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
            C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
            C100 * C1601 + C1617 + C1617 + C89 * C1611) *
               C141353 * C141327 * C141499) *
              C2374 +
          ((C100 * C3490 + C3503 + C3503 + C89 * C3498 + C102 * C3491 + C3504 +
            C3504 + C90 * C3499 + C104 * C3492 + C3505 + C3505 + C91 * C3500 +
            C106 * C3493 + C3506 + C3506 + C92 * C3501) *
               C141353 * C141327 * C141499 -
           (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 + C837 + C837 +
            C91 * C831 + C102 * C822 + C838 + C838 + C90 * C832 + C100 * C823 +
            C839 + C839 + C89 * C833) *
               C141353 * C141327 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
             C21828 + C21828 + C141224 * C121) *
                C42873 +
            (C44678 + C44679) * C42874 + (C44680 + C44681) * C42875) *
               C141327 * C1596 -
           ((C21824 * C21036 + C44650 + C44650 + C141224 * C21042 +
             C21822 * C21035 + C44651 + C44651 + C141462 * C21041) *
                C42875 +
            (C44681 + C44680) * C42874 + (C44679 + C44678) * C42873) *
               C141327 * C141499) *
              C2374 +
          (((C26379 + C26378) * C42873 + (C47304 + C47305) * C42874 +
            (C21822 * C42109 + C47298 + C47298 + C141462 * C42113 +
             C21824 * C47290 + C47299 + C47299 + C141224 * C47292) *
                C42875) *
               C141327 * C141499 -
           ((C47305 + C47304) * C42875 + (C26378 + C26379) * C42874 +
            (C22692 + C22691) * C42873) *
               C141327 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[59] +=
        (-std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C139366 +
            (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
             C21920 * C2964 + C21821 * C3030) *
                C141462 +
            (C21946 + C21947 + C21948) * C139356 +
            (C21949 + C21950 + C21951) * C141224) *
               C141353 * C1596 -
           ((C23865 + C23866 + C23867) * C141224 +
            (C23868 + C23869 + C23870) * C139356 +
            (C21920 * C10473 + C21821 * C10598 + C21919 * C3494 +
             C21820 * C3576 + C21918 * C1606 + C21819 * C1695) *
                C141462 +
            (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
             C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
                C139366) *
               C141353 * C141499) *
              C2374 +
          (((C21918 * C3490 + C21819 * C3572 + C21919 * C10470 +
             C21820 * C10595 + C21920 * C26351 + C21821 * C26477) *
                C139366 +
            (C21918 * C3494 + C21819 * C3576 + C21919 * C10473 +
             C21820 * C10598 + C21920 * C26353 + C21821 * C26479) *
                C141462 +
            (C21918 * C3491 + C21819 * C3573 + C21919 * C10471 +
             C21820 * C10596 + C21920 * C26352 + C21821 * C26478) *
                C139356 +
            (C21918 * C3495 + C21819 * C3577 + C21919 * C10474 +
             C21820 * C10599 + C21920 * C26354 + C21821 * C26480) *
                C141224) *
               C141353 * C141499 -
           ((C22809 + C22810 + C22811) * C141224 +
            (C22812 + C22813 + C22814) * C139356 +
            (C21920 * C9670 + C21821 * C9771 + C21919 * C2964 + C21820 * C3030 +
             C21918 * C828 + C21819 * C917) *
                C141462 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C139366) *
               C141353 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C101 +
            (C188 * C114 + C141327 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141353 * C1596 -
           (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
            C1714 * C90 + C1715 * C103 +
            (C188 * C1606 + C141327 * C1695) * C89 +
            (C188 * C1601 + C141327 * C1690) * C101) *
               C141353 * C141499) *
              C2374 +
          (((C188 * C3490 + C141327 * C3572) * C101 +
            (C188 * C3494 + C141327 * C3576) * C89 +
            (C188 * C3491 + C141327 * C3573) * C103 +
            (C188 * C3495 + C141327 * C3577) * C90 +
            (C188 * C3492 + C141327 * C3574) * C105 +
            (C188 * C3496 + C141327 * C3578) * C91 +
            (C188 * C3493 + C141327 * C3575) * C107 +
            (C188 * C3497 + C141327 * C3579) * C92) *
               C141353 * C141499 -
           (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
            C937 * C103 + (C188 * C828 + C141327 * C917) * C89 +
            (C188 * C823 + C141327 * C912) * C101) *
               C141353 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C139366 +
             (C188 * C114 + C141327 * C195) * C141462 + C218 * C139356 +
             C219 * C141224) *
                C42873 +
            (C44784 + C44785 + C44786 + C44787) * C42874 +
            (C44788 + C44789 + C44790 + C44791) * C42875) *
               C1596 -
           ((C44804 * C141224 + C44805 * C139356 +
             (C188 * C21038 + C141327 * C21139) * C141462 +
             (C188 * C21035 + C141327 * C21136) * C139366) *
                C42875 +
            (C44791 + C44790 + C44789 + C44788) * C42874 +
            (C44787 + C44786 + C44785 + C44784) * C42873) *
               C141499) *
              C2374 +
          (((C47406 + C47407 + C47408 + C47409) * C42873 +
            (C47418 + C47419 + C47414 + C47415) * C42874 +
            ((C188 * C42109 + C141327 * C42197) * C139366 +
             (C188 * C42111 + C141327 * C42199) * C141462 +
             (C188 * C47290 + C141327 * C47403) * C139356 +
             (C188 * C47291 + C141327 * C47404) * C141224) *
                C42875) *
               C141499 -
           ((C47415 + C47414 + C47419 + C47418) * C42875 +
            (C47409 + C47408 + C47407 + C47406) * C42874 +
            (C936 * C141224 + C937 * C139356 +
             (C188 * C828 + C141327 * C917) * C141462 +
             (C188 * C823 + C141327 * C912) * C139366) *
                C42873) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[59] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C139366 +
             (C275 * C114 + C141353 * C282) * C141462 + C305 * C139356 +
             C306 * C141224) *
                C21819 +
            (C22913 + C22914 + C22915 + C22916) * C21820 + C25755 * C21821) *
               C1596 -
           ((C26584 + C26585 + C26596 + C26597) * C21821 +
            (C26590 + C26591 + C26592 + C26593) * C21820 +
            (C1808 * C141224 + C1809 * C139356 +
             (C275 * C1606 + C141353 * C1789) * C141462 +
             (C275 * C1601 + C141353 * C1784) * C139366) *
                C21819) *
               C141499) *
              C2374 +
          (((C26593 + C26592 + C26591 + C26590) * C21819 +
            (C26597 + C26596 + C26585 + C26584) * C21820 +
            ((C275 * C26351 + C141353 * C26579) * C139366 +
             (C275 * C26353 + C141353 * C26581) * C141462 +
             (C275 * C26352 + C141353 * C26580) * C139356 +
             (C275 * C26354 + C141353 * C26582) * C141224) *
                C21821) *
               C141499 -
           ((C25746 + C25747 + C25756 + C25757) * C21821 +
            (C22920 + C22919 + C22918 + C22917) * C21820 +
            (C22916 + C22915 + C22914 + C22913) * C21819) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C101 +
            (C275 * C114 + C141353 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141327 * C1596 -
           (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
            C1808 * C90 + C1809 * C103 +
            (C275 * C1606 + C141353 * C1789) * C89 +
            (C275 * C1601 + C141353 * C1784) * C101) *
               C141327 * C141499) *
              C2374 +
          (((C275 * C3490 + C141353 * C3646) * C101 +
            (C275 * C3494 + C141353 * C3650) * C89 +
            (C275 * C3491 + C141353 * C3647) * C103 +
            (C275 * C3495 + C141353 * C3651) * C90 +
            (C275 * C3492 + C141353 * C3648) * C105 +
            (C275 * C3496 + C141353 * C3652) * C91 +
            (C275 * C3493 + C141353 * C3649) * C107 +
            (C275 * C3497 + C141353 * C3653) * C92) *
               C141327 * C141499 -
           (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
            C1030 * C90 + C1031 * C103 + (C275 * C828 + C141353 * C1011) * C89 +
            (C275 * C823 + C141353 * C1006) * C101) *
               C141327 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
             C43032 * C5325 + C42875 * C5449) *
                C139366 +
            (C43030 * C114 + C42873 * C282 + C43031 * C1606 + C42874 * C1789 +
             C43032 * C5329 + C42875 * C5453) *
                C141462 +
            (C43058 + C43059 + C43060) * C139356 +
            (C43061 + C43062 + C43063) * C141224) *
               C141327 * C1596 -
           ((C44916 + C44917 + C44918) * C141224 +
            (C44919 + C44920 + C44921) * C139356 +
            (C43032 * C21038 + C42875 * C21231 + C43031 * C5329 +
             C42874 * C5453 + C43030 * C1606 + C42873 * C1789) *
                C141462 +
            (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
             C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                C139366) *
               C141327 * C141499) *
              C2374 +
          (((C43030 * C3490 + C42873 * C3646 + C43031 * C13205 +
             C42874 * C13374 + C43032 * C42109 + C42875 * C42293) *
                C139366 +
            (C43030 * C3494 + C42873 * C3650 + C43031 * C13208 +
             C42874 * C13377 + C43032 * C42111 + C42875 * C42295) *
                C141462 +
            (C43030 * C3491 + C42873 * C3647 + C43031 * C13206 +
             C42874 * C13375 + C43032 * C47290 + C42875 * C47517) *
                C139356 +
            (C43030 * C3495 + C42873 * C3651 + C43031 * C13209 +
             C42874 * C13378 + C43032 * C47291 + C42875 * C47518) *
                C141224) *
               C141327 * C141499 -
           ((C43903 + C43904 + C43905) * C141224 +
            (C43906 + C43907 + C43908) * C139356 +
            (C43032 * C13208 + C42875 * C13377 + C43031 * C3494 +
             C42874 * C3650 + C43030 * C828 + C42873 * C1011) *
                C141462 +
            (C43032 * C13205 + C42875 * C13374 + C43031 * C3490 +
             C42874 * C3646 + C43030 * C823 + C42873 * C1006) *
                C139366) *
               C141327 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[59] +=
        (-std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C21918 +
            (C139366 * C189 + C141462 * C362 + C139356 * C190 +
             C141224 * C363) *
                C21819 +
            (C23065 + C23066) * C21919 + (C23067 + C23068) * C21820 +
            C25834 * C21920 + C25835 * C21821) *
               C141353 * C1596 -
           ((C26714 + C26715) * C21821 + (C26716 + C26717) * C21920 +
            (C26718 + C26719) * C21820 + (C26720 + C26721) * C21919 +
            (C139356 * C1689 + C141224 * C1877 + C139366 * C1690 +
             C141462 * C1878) *
                C21819 +
            (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
             C141462 * C1606) *
                C21918) *
               C141353 * C141499) *
              C2374 +
          (((C26721 + C26720) * C21918 + (C26719 + C26718) * C21819 +
            (C26717 + C26716) * C21919 + (C26715 + C26714) * C21820 +
            (C139366 * C26351 + C141462 * C26353 + C139356 * C26352 +
             C141224 * C26354) *
                C21920 +
            (C139366 * C26477 + C141462 * C26695 + C139356 * C26478 +
             C141224 * C26696) *
                C21821) *
               C141353 * C141499 -
           ((C25844 + C25845) * C21821 + (C25846 + C25847) * C21920 +
            (C23072 + C23071) * C21820 + (C23070 + C23069) * C21919 +
            (C23068 + C23067) * C21819 + (C23066 + C23065) * C21918) *
               C141353 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141327) *
               C141353 * C1596 -
           ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
             C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
                C141327 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C188) *
               C141353 * C141499) *
              C2374 +
          (((C101 * C3490 + C89 * C3494 + C103 * C3491 + C90 * C3495 +
             C105 * C3492 + C91 * C3496 + C107 * C3493 + C92 * C3497) *
                C188 +
            (C101 * C3572 + C89 * C3720 + C103 * C3573 + C90 * C3721 +
             C105 * C3574 + C91 * C3722 + C107 * C3575 + C92 * C3723) *
                C141327) *
               C141353 * C141499 -
           ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
             C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
                C141327 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C188) *
               C141353 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C188 +
             (C139366 * C189 + C141462 * C362 + C139356 * C190 +
              C141224 * C363) *
                 C141327) *
                C42873 +
            ((C45052 + C45053) * C188 + (C45054 + C45055) * C141327) * C42874 +
            ((C45056 + C45057) * C188 + (C45058 + C45059) * C141327) * C42875) *
               C1596 -
           (((C139356 * C21137 + C141224 * C21309 + C139366 * C21136 +
              C141462 * C21308) *
                 C141327 +
             (C139356 * C21036 + C141224 * C21039 + C139366 * C21035 +
              C141462 * C21038) *
                 C188) *
                C42875 +
            ((C45059 + C45058) * C141327 + (C45057 + C45056) * C188) * C42874 +
            ((C45055 + C45054) * C141327 + (C45053 + C45052) * C188) * C42873) *
               C141499) *
              C2374 +
          ((((C26721 + C26720) * C188 + (C26719 + C26718) * C141327) * C42873 +
            ((C47627 + C47628) * C188 + (C47629 + C47630) * C141327) * C42874 +
            ((C139366 * C42109 + C141462 * C42111 + C139356 * C47290 +
              C141224 * C47291) *
                 C188 +
             (C139366 * C42197 + C141462 * C42371 + C139356 * C47403 +
              C141224 * C47617) *
                 C141327) *
                C42875) *
               C141499 -
           (((C47630 + C47629) * C141327 + (C47628 + C47627) * C188) * C42875 +
            ((C26718 + C26719) * C141327 + (C26720 + C26721) * C188) * C42874 +
            ((C23068 + C23067) * C141327 + (C23066 + C23065) * C188) * C42873) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[59] +=
        (-std::pow(Pi, 2.5) *
         ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
             C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
             C22185 + C21821 * C3196) *
                C141462 +
            (C22219 + C22220 + C22221) * C141224) *
               C141353 * C1596 -
           ((C24192 + C24193 + C24194) * C141224 +
            (C22181 * C10470 + C24180 + C24180 + C21821 * C10934 +
             C22180 * C3490 + C24181 + C24181 + C21820 * C3790 +
             C22179 * C1601 + C24182 + C24182 + C21819 * C1949) *
                C141462) *
               C141353 * C141499) *
              C2374 +
          (((C22179 * C3490 + C26822 + C26822 + C21819 * C3790 +
             C22180 * C10470 + C26823 + C26823 + C21820 * C10934 +
             C22181 * C26351 + C26824 + C26824 + C21821 * C26819) *
                C141462 +
            (C22179 * C3491 + C26825 + C26825 + C21819 * C3791 +
             C22180 * C10471 + C26826 + C26826 + C21820 * C10935 +
             C22181 * C26352 + C26827 + C26827 + C21821 * C26820) *
                C141224) *
               C141353 * C141499 -
           ((C23200 + C23201 + C23202) * C141224 +
            (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
             C22180 * C2960 + C23189 + C23189 + C21820 * C3196 + C22179 * C823 +
             C23190 + C23190 + C21819 * C1171) *
                C141462) *
               C141353 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C89 + C448 * C90 +
            C449 * C91 + C450 * C92) *
               C141353 * C1596 -
           (C1969 * C92 + C1970 * C91 + C1971 * C90 +
            (C418 * C1601 + C1961 + C1961 + C141327 * C1949) * C89) *
               C141353 * C141499) *
              C2374 +
          (((C418 * C3490 + C3795 + C3795 + C141327 * C3790) * C89 +
            (C418 * C3491 + C3796 + C3796 + C141327 * C3791) * C90 +
            (C418 * C3492 + C3797 + C3797 + C141327 * C3792) * C91 +
            (C418 * C3493 + C3798 + C3798 + C141327 * C3793) * C92) *
               C141353 * C141499 -
           (C1191 * C92 + C1192 * C91 + C1193 * C90 +
            (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C89) *
               C141353 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C141462 +
             C448 * C141224) *
                C42873 +
            (C45166 + C45167) * C42874 + (C45168 + C45169) * C42875) *
               C1596 -
           ((C45178 * C141224 +
             (C418 * C21035 + C21411 + C21411 + C141327 * C21403) * C141462) *
                C42875 +
            (C45169 + C45168) * C42874 + (C45167 + C45166) * C42873) *
               C141499) *
              C2374 +
          (((C47730 + C47731) * C42873 + (C47740 + C47734) * C42874 +
            ((C418 * C42109 + C47735 + C47735 + C141327 * C42459) * C141462 +
             (C418 * C47290 + C47736 + C47736 + C141327 * C47728) * C141224) *
                C42875) *
               C141499 -
           ((C47734 + C47740) * C42875 + (C47731 + C47730) * C42874 +
            (C1193 * C141224 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C141462) *
                C42873) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyz[59] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C21918 +
             (C275 * C189 + C141353 * C501) * C21819 + C6988 * C21919 +
             C7366 * C21820 + C9864 * C21920 + C10124 * C21821) *
                C141462 +
            (C22299 + C22300 + C22301 + C22302 + C22303 + C22304) * C141224) *
               C1596 -
           ((C24301 + C24295 + C24296 + C24297 + C24298 + C24299) * C141224 +
            (C26930 * C21821 + C26595 * C21920 + C11047 * C21820 +
             C10715 * C21919 + (C275 * C1690 + C141353 * C2040) * C21819 +
             (C275 * C1601 + C141353 * C1784) * C21918) *
                C141462) *
               C141499) *
              C2374 +
          (((C10715 * C21918 + C11047 * C21819 + C26595 * C21919 +
             C26930 * C21820 + (C275 * C26351 + C141353 * C26579) * C21920 +
             (C275 * C26477 + C141353 * C26925) * C21821) *
                C141462 +
            (C8055 * C21918 + C8389 * C21819 + C23974 * C21919 +
             C24300 * C21820 + (C275 * C26352 + C141353 * C26580) * C21920 +
             (C275 * C26478 + C141353 * C26926) * C21821) *
                C141224) *
               C141499 -
           ((C23309 + C23303 + C23304 + C23305 + C23306 + C23307) * C141224 +
            (C26008 * C21821 + C25754 * C21920 + C10124 * C21820 +
             C9864 * C21919 + C7366 * C21819 + C6988 * C21918) *
                C141462) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C188 +
             (C275 * C189 + C141353 * C501) * C141327) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C1596 -
           ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
            (C2057 + C2051) * C90 +
            ((C275 * C1690 + C141353 * C2040) * C141327 +
             (C275 * C1601 + C141353 * C1784) * C188) *
                C89) *
               C141499) *
              C2374 +
          ((((C275 * C3490 + C141353 * C3646) * C188 +
             (C275 * C3572 + C141353 * C3864) * C141327) *
                C89 +
            ((C275 * C3491 + C141353 * C3647) * C188 +
             (C275 * C3573 + C141353 * C3865) * C141327) *
                C90 +
            ((C275 * C3492 + C141353 * C3648) * C188 +
             (C275 * C3574 + C141353 * C3866) * C141327) *
                C91 +
            ((C275 * C3493 + C141353 * C3649) * C188 +
             (C275 * C3575 + C141353 * C3867) * C141327) *
                C92) *
               C141499 -
           ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
            (C1279 + C1273) * C90 +
            ((C275 * C912 + C141353 * C1262) * C141327 +
             (C275 * C823 + C141353 * C1006) * C188) *
                C89) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
              C43032 * C5325 + C42875 * C5449) *
                 C188 +
             (C43030 * C189 + C42873 * C501 + C43031 * C1690 + C42874 * C2040 +
              C43032 * C5391 + C42875 * C5619) *
                 C141327) *
                C141462 +
            ((C43058 + C43059 + C43060) * C188 +
             (C43304 + C43305 + C43306) * C141327) *
                C141224) *
               C1596 -
           (((C45283 + C45284 + C45285) * C141327 +
             (C44919 + C44920 + C44921) * C188) *
                C141224 +
            ((C43032 * C21136 + C42875 * C21491 + C43031 * C5391 +
              C42874 * C5619 + C43030 * C1690 + C42873 * C2040) *
                 C141327 +
             (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
              C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                 C188) *
                C141462) *
               C141499) *
              C2374 +
          ((((C43030 * C3490 + C42873 * C3646 + C43031 * C13205 +
              C42874 * C13374 + C43032 * C42109 + C42875 * C42293) *
                 C188 +
             (C43030 * C3572 + C42873 * C3864 + C43031 * C13294 +
              C42874 * C13614 + C43032 * C42197 + C42875 * C42553) *
                 C141327) *
                C141462 +
            ((C43030 * C3491 + C42873 * C3647 + C43031 * C13206 +
              C42874 * C13375 + C43032 * C47290 + C42875 * C47517) *
                 C188 +
             (C43030 * C3573 + C42873 * C3865 + C43031 * C13295 +
              C42874 * C13615 + C43032 * C47403 + C42875 * C47838) *
                 C141327) *
                C141224) *
               C141499 -
           (((C44214 + C44215 + C44216) * C141327 +
             (C43906 + C43907 + C43908) * C188) *
                C141224 +
            ((C43032 * C13294 + C42875 * C13614 + C43031 * C3572 +
              C42874 * C3864 + C43030 * C912 + C42873 * C1262) *
                 C141327 +
             (C43032 * C13205 + C42875 * C13374 + C43031 * C3490 +
              C42874 * C3646 + C43030 * C823 + C42873 * C1006) *
                 C188) *
                C141462) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezx[59] +=
        (-std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C275 +
             (C139366 * C276 + C141462 * C579 + C139356 * C277 +
              C141224 * C580) *
                 C141353) *
                C21819 +
            ((C23065 + C23066) * C275 + (C23424 + C23425) * C141353) * C21820 +
            C26094 * C21821) *
               C1596 -
           (((C27039 + C27040) * C141353 + (C26716 + C26717) * C275) * C21821 +
            ((C27041 + C27042) * C141353 + (C26720 + C26721) * C275) * C21820 +
            ((C139356 * C1783 + C141224 * C2125 + C139366 * C1784 +
              C141462 * C2126) *
                 C141353 +
             (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
              C141462 * C1606) *
                 C275) *
                C21819) *
               C141499) *
              C2374 +
          ((((C26721 + C26720) * C275 + (C27042 + C27041) * C141353) * C21819 +
            ((C26717 + C26716) * C275 + (C27040 + C27039) * C141353) * C21820 +
            ((C139366 * C26351 + C141462 * C26353 + C139356 * C26352 +
              C141224 * C26354) *
                 C275 +
             (C139366 * C26579 + C141462 * C27028 + C139356 * C26580 +
              C141224 * C27029) *
                 C141353) *
                C21821) *
               C141499 -
           (((C26092 + C26093) * C141353 + (C25846 + C25847) * C275) * C21821 +
            ((C23427 + C23426) * C141353 + (C23070 + C23069) * C275) * C21820 +
            ((C23425 + C23424) * C141353 + (C23066 + C23065) * C275) * C21819) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141353) *
               C141327 * C1596 -
           ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
             C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
                C141353 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C275) *
               C141327 * C141499) *
              C2374 +
          (((C101 * C3490 + C89 * C3494 + C103 * C3491 + C90 * C3495 +
             C105 * C3492 + C91 * C3496 + C107 * C3493 + C92 * C3497) *
                C275 +
            (C101 * C3646 + C89 * C3934 + C103 * C3647 + C90 * C3935 +
             C105 * C3648 + C91 * C3936 + C107 * C3649 + C92 * C3937) *
                C141353) *
               C141327 * C141499 -
           ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
             C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
                C141353 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C275) *
               C141327 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C43030 +
            (C139366 * C276 + C141462 * C579 + C139356 * C277 +
             C141224 * C580) *
                C42873 +
            (C45052 + C45053) * C43031 + (C45400 + C45401) * C42874 +
            (C45056 + C45057) * C43032 + (C45402 + C45403) * C42875) *
               C141327 * C1596 -
           ((C139356 * C21229 + C141224 * C21569 + C139366 * C21228 +
             C141462 * C21568) *
                C42875 +
            (C139356 * C21036 + C141224 * C21039 + C139366 * C21035 +
             C141462 * C21038) *
                C43032 +
            (C45403 + C45402) * C42874 + (C45057 + C45056) * C43031 +
            (C45401 + C45400) * C42873 + (C45053 + C45052) * C43030) *
               C141327 * C141499) *
              C2374 +
          (((C26721 + C26720) * C43030 + (C27042 + C27041) * C42873 +
            (C47627 + C47628) * C43031 + (C47943 + C47944) * C42874 +
            (C139366 * C42109 + C141462 * C42111 + C139356 * C47290 +
             C141224 * C47291) *
                C43032 +
            (C139366 * C42293 + C141462 * C42629 + C139356 * C47517 +
             C141224 * C47937) *
                C42875) *
               C141327 * C141499 -
           ((C47944 + C47943) * C42875 + (C47628 + C47627) * C43032 +
            (C27041 + C27042) * C42874 + (C26720 + C26721) * C43031 +
            (C23425 + C23424) * C42873 + (C23066 + C23065) * C43030) *
               C141327 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[59] +=
        (-std::pow(Pi, 2.5) *
         (((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
              C21920 * C2960 + C21821 * C3026) *
                 C275 +
             (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
              C21920 * C3084 + C21821 * C3362) *
                 C141353) *
                C141462 +
            ((C21946 + C21947 + C21948) * C275 +
             (C22471 + C22472 + C22473) * C141353) *
                C141224) *
               C1596 -
           (((C24504 + C24505 + C24506) * C141353 +
             (C23868 + C23869 + C23870) * C275) *
                C141224 +
            ((C21920 * C10699 + C21821 * C11255 + C21919 * C3646 +
              C21820 * C4004 + C21918 * C1784 + C21819 * C2197) *
                 C141353 +
             (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
              C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
                 C275) *
                C141462) *
               C141499) *
              C2374 +
          ((((C21918 * C3490 + C21819 * C3572 + C21919 * C10470 +
              C21820 * C10595 + C21920 * C26351 + C21821 * C26477) *
                 C275 +
             (C21918 * C3646 + C21819 * C4004 + C21919 * C10699 +
              C21820 * C11255 + C21920 * C26579 + C21821 * C27140) *
                 C141353) *
                C141462 +
            ((C21918 * C3491 + C21819 * C3573 + C21919 * C10471 +
              C21820 * C10596 + C21920 * C26352 + C21821 * C26478) *
                 C275 +
             (C21918 * C3647 + C21819 * C4005 + C21919 * C10700 +
              C21820 * C11256 + C21920 * C26580 + C21821 * C27141) *
                 C141353) *
                C141224) *
               C141499 -
           (((C23536 + C23537 + C23538) * C141353 +
             (C22812 + C22813 + C22814) * C275) *
                C141224 +
            ((C21920 * C9848 + C21821 * C10284 + C21919 * C3084 +
              C21820 * C3362 + C21918 * C1006 + C21819 * C1419) *
                 C141353 +
             (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 +
              C21820 * C3026 + C21918 * C823 + C21819 * C912) *
                 C275) *
                C141462) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C275 +
             (C188 * C276 + C141327 * C635) * C141353) *
                C89 +
            (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
               C1596 -
           ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
            (C2214 + C2208) * C90 +
            ((C188 * C1784 + C141327 * C2197) * C141353 +
             (C188 * C1601 + C141327 * C1690) * C275) *
                C89) *
               C141499) *
              C2374 +
          ((((C188 * C3490 + C141327 * C3572) * C275 +
             (C188 * C3646 + C141327 * C4004) * C141353) *
                C89 +
            ((C188 * C3491 + C141327 * C3573) * C275 +
             (C188 * C3647 + C141327 * C4005) * C141353) *
                C90 +
            ((C188 * C3492 + C141327 * C3574) * C275 +
             (C188 * C3648 + C141327 * C4006) * C141353) *
                C91 +
            ((C188 * C3493 + C141327 * C3575) * C275 +
             (C188 * C3649 + C141327 * C4007) * C141353) *
                C92) *
               C141499 -
           ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
            (C1436 + C1430) * C90 +
            ((C188 * C1006 + C141327 * C1419) * C141353 +
             (C188 * C823 + C141327 * C912) * C275) *
                C89) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C43030 +
             (C188 * C276 + C141327 * C635) * C42873 + C15877 * C43031 +
             C16596 * C42874 + C21152 * C43032 + C21660 * C42875) *
                C141462 +
            (C43458 + C43459 + C43460 + C43461 + C43462 + C43463) * C141224) *
               C1596 -
           ((C45514 + C45508 + C45509 + C45510 + C45511 + C45512) * C141224 +
            ((C188 * C21228 + C141327 * C21654) * C42875 +
             (C188 * C21035 + C141327 * C21136) * C43032 + C21660 * C42874 +
             C21152 * C43031 + C16596 * C42873 + C15877 * C43030) *
                C141462) *
               C141499) *
              C2374 +
          (((C18488 * C43030 + C19093 * C42873 + C47416 * C43031 +
             C48046 * C42874 + (C188 * C42109 + C141327 * C42197) * C43032 +
             (C188 * C42293 + C141327 * C42708) * C42875) *
                C141462 +
            (C14851 * C43030 + C15497 * C42873 + C43792 * C43031 +
             C44420 * C42874 + (C188 * C47290 + C141327 * C47403) * C43032 +
             (C188 * C47517 + C141327 * C48042) * C42875) *
                C141224) *
               C141499 -
           ((C44421 + C44415 + C44416 + C44417 + C44418 + C44419) * C141224 +
            (C48046 * C42875 + C47416 * C43032 + C19093 * C42874 +
             C18488 * C43031 + (C188 * C1006 + C141327 * C1419) * C42873 +
             (C188 * C823 + C141327 * C912) * C43030) *
                C141462) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[59] +=
        (-std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C21819 +
             C7709 * C21820 + C10372 * C21821) *
                C141462 +
            (C22551 + C22552 + C22553) * C141224) *
               C1596 -
           ((C24612 + C24607 + C24608) * C141224 +
            (C27249 * C21821 + C11367 * C21820 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C21819) *
                C141462) *
               C141499) *
              C2374 +
          (((C11367 * C21819 + C27249 * C21820 +
             (C713 * C26351 + C27245 + C27245 + C141353 * C27240) * C21821) *
                C141462 +
            (C8709 * C21819 + C24611 * C21820 +
             (C713 * C26352 + C27246 + C27246 + C141353 * C27241) * C21821) *
                C141224) *
               C141499 -
           ((C23644 + C23639 + C23640) * C141224 +
            (C26253 * C21821 + C10372 * C21820 + C7709 * C21819) * C141462) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141327 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C1596 -
           (C2306 * C92 + C2307 * C91 + C2308 * C90 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141327 * C89) *
               C141499) *
              C2374 +
          (((C713 * C3490 + C4079 + C4079 + C141353 * C4074) * C141327 * C89 +
            (C713 * C3491 + C4080 + C4080 + C141353 * C4075) * C141327 * C90 +
            (C713 * C3492 + C4081 + C4081 + C141353 * C4076) * C141327 * C91 +
            (C713 * C3493 + C4082 + C4082 + C141353 * C4077) * C141327 * C92) *
               C141499 -
           (C1528 * C92 + C1529 * C91 + C1530 * C90 +
            (C713 * C823 + C1517 + C1517 + C141353 * C1505) * C141327 * C89) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43543 * C108 + C43547 + C43547 + C42873 * C714 + C43544 * C1601 +
             C43548 + C43548 + C42874 * C2283 + C43545 * C5325 + C43549 +
             C43549 + C42875 * C5781) *
                C141327 * C141462 +
            (C43583 + C43584 + C43585) * C141327 * C141224) *
               C1596 -
           ((C45634 + C45635 + C45636) * C141327 * C141224 +
            (C43545 * C21035 + C45622 + C45622 + C42875 * C21734 +
             C43544 * C5325 + C45623 + C45623 + C42874 * C5781 +
             C43543 * C1601 + C45624 + C45624 + C42873 * C2283) *
                C141327 * C141462) *
               C141499) *
              C2374 +
          (((C43543 * C3490 + C48146 + C48146 + C42873 * C4074 +
             C43544 * C13205 + C48147 + C48147 + C42874 * C13845 +
             C43545 * C42109 + C48148 + C48148 + C42875 * C42793) *
                C141327 * C141462 +
            (C43543 * C3491 + C48149 + C48149 + C42873 * C4075 +
             C43544 * C13206 + C48150 + C48150 + C42874 * C13846 +
             C43545 * C47290 + C48151 + C48151 + C42875 * C48144) *
                C141327 * C141224) *
               C141499 -
           ((C44541 + C44542 + C44543) * C141327 * C141224 +
            (C43545 * C13205 + C44529 + C44529 + C42875 * C13845 +
             C43544 * C3490 + C44530 + C44530 + C42874 * C4074 + C43543 * C823 +
             C44531 + C44531 + C42873 * C1505) *
                C141327 * C141462) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexx[60] +=
        (-std::pow(Pi, 2.5) *
         ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
             C21828 + C21828 + C141224 * C121) *
                C141353 * C21819 +
            (C22691 + C22692) * C141353 * C21820 + C25582 * C21821) *
               C4148 -
           ((C26376 + C26377) * C141353 * C21821 +
            (C26378 + C26379) * C141353 * C21820 +
            (C21824 * C1600 + C23747 + C23747 + C141224 * C1610 +
             C21822 * C1601 + C23748 + C23748 + C141462 * C1611) *
                C141353 * C21819) *
               C141499) *
              C141281 * C2376 +
          (((C21822 * C1600 + C23749 + C23749 + C141462 * C1610 +
             C21824 * C1599 + C23750 + C23750 + C141224 * C1609) *
                C141353 * C21819 +
            (C21822 * C3491 + C23751 + C23751 + C141462 * C3499 +
             C21824 * C3492 + C23752 + C23752 + C141224 * C3500) *
                C141353 * C21820 +
            (C21822 * C10471 + C23753 + C23753 + C141462 * C10477 +
             C21824 * C10472 + C23754 + C23754 + C141224 * C10478) *
                C141353 * C21821) *
               C141499 -
           ((C22698 + C22697) * C141353 * C21821 +
            (C22696 + C22695) * C141353 * C21820 +
            (C21824 * C110 + C21837 + C21837 + C141224 * C122 + C21822 * C109 +
             C21838 + C21838 + C141462 * C121) *
                C141353 * C21819) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C141353 * C141327 * C4148 -
           (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
            C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
            C100 * C1601 + C1617 + C1617 + C89 * C1611) *
               C141353 * C141327 * C141499) *
              C141281 * C2376 +
          ((C100 * C1600 + C1618 + C1618 + C89 * C1610 + C102 * C1599 + C1619 +
            C1619 + C90 * C1609 + C104 * C1598 + C1620 + C1620 + C91 * C1608 +
            C106 * C1602 + C1621 + C1621 + C92 * C1612) *
               C141353 * C141327 * C141499 -
           (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 + C132 + C132 +
            C91 * C123 + C102 * C110 + C133 + C133 + C90 * C122 + C100 * C109 +
            C134 + C134 + C89 * C121) *
               C141353 * C141327 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
             C21828 + C21828 + C141224 * C121) *
                C42873 +
            (C44678 + C44679) * C42874 + (C44680 + C44681) * C42875) *
               C141327 * C4148 -
           ((C21824 * C21036 + C44650 + C44650 + C141224 * C21042 +
             C21822 * C21035 + C44651 + C44651 + C141462 * C21041) *
                C42875 +
            (C44681 + C44680) * C42874 + (C44679 + C44678) * C42873) *
               C141327 * C141499) *
              C141281 * C2376 +
          (((C44682 + C44683) * C42873 + (C44684 + C44685) * C42874 +
            (C21822 * C21036 + C44660 + C44660 + C141462 * C21042 +
             C21824 * C21037 + C44661 + C44661 + C141224 * C21043) *
                C42875) *
               C141327 * C141499 -
           ((C44685 + C44684) * C42875 + (C44683 + C44682) * C42874 +
            (C21824 * C110 + C21837 + C21837 + C141224 * C122 + C21822 * C109 +
             C21838 + C21838 + C141462 * C121) *
                C42873) *
               C141327 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexy[60] +=
        (-std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C139366 +
            (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
             C21920 * C2964 + C21821 * C3030) *
                C141462 +
            (C21946 + C21947 + C21948) * C139356 +
            (C21949 + C21950 + C21951) * C141224) *
               C141353 * C4148 -
           ((C23865 + C23866 + C23867) * C141224 +
            (C23868 + C23869 + C23870) * C139356 +
            (C21920 * C10473 + C21821 * C10598 + C21919 * C3494 +
             C21820 * C3576 + C21918 * C1606 + C21819 * C1695) *
                C141462 +
            (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
             C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
                C139366) *
               C141353 * C141499) *
              C141281 * C2376 +
          (((C23870 + C23869 + C23868) * C139366 +
            (C23867 + C23866 + C23865) * C141462 +
            (C21918 * C1599 + C21819 * C1688 + C21919 * C3492 + C21820 * C3574 +
             C21920 * C10472 + C21821 * C10597) *
                C139356 +
            (C21918 * C1604 + C21819 * C1693 + C21919 * C3496 + C21820 * C3578 +
             C21920 * C10475 + C21821 * C10600) *
                C141224) *
               C141353 * C141499 -
           ((C21952 + C21953 + C21954) * C141224 +
            (C21955 + C21956 + C21957) * C139356 +
            (C21951 + C21950 + C21949) * C141462 +
            (C21948 + C21947 + C21946) * C139366) *
               C141353 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C101 +
            (C188 * C114 + C141327 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141353 * C4148 -
           (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
            C1714 * C90 + C1715 * C103 +
            (C188 * C1606 + C141327 * C1695) * C89 +
            (C188 * C1601 + C141327 * C1690) * C101) *
               C141353 * C141499) *
              C141281 * C2376 +
          ((C1715 * C101 + C1714 * C89 + C1713 * C103 + C1712 * C90 +
            C1711 * C105 + C1710 * C91 +
            (C188 * C1602 + C141327 * C1691) * C107 +
            (C188 * C1607 + C141327 * C1696) * C92) *
               C141353 * C141499 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C141353 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C139366 +
             (C188 * C114 + C141327 * C195) * C141462 + C218 * C139356 +
             C219 * C141224) *
                C42873 +
            (C44784 + C44785 + C44786 + C44787) * C42874 +
            (C44788 + C44789 + C44790 + C44791) * C42875) *
               C4148 -
           ((C44804 * C141224 + C44805 * C139356 +
             (C188 * C21038 + C141327 * C21139) * C141462 +
             (C188 * C21035 + C141327 * C21136) * C139366) *
                C42875 +
            (C44791 + C44790 + C44789 + C44788) * C42874 +
            (C44787 + C44786 + C44785 + C44784) * C42873) *
               C141499) *
              C141281 * C2376 +
          (((C44796 + C44797 + C44798 + C44799) * C42873 +
            (C44800 + C44801 + C44802 + C44803) * C42874 +
            (C44805 * C139366 + C44804 * C141462 +
             (C188 * C21037 + C141327 * C21138) * C139356 +
             (C188 * C21040 + C141327 * C21141) * C141224) *
                C42875) *
               C141499 -
           ((C44803 + C44802 + C44801 + C44800) * C42875 +
            (C44799 + C44798 + C44797 + C44796) * C42874 +
            (C221 * C141224 + C220 * C139356 + C219 * C141462 +
             C218 * C139366) *
                C42873) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[60] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C139366 +
             (C275 * C114 + C141353 * C282) * C141462 + C305 * C139356 +
             C306 * C141224) *
                C21819 +
            (C22913 + C22914 + C22915 + C22916) * C21820 + C25755 * C21821) *
               C4148 -
           ((C26584 + C26585 + C26596 + C26597) * C21821 +
            (C26590 + C26591 + C26592 + C26593) * C21820 +
            (C1808 * C141224 + C1809 * C139356 +
             (C275 * C1606 + C141353 * C1789) * C141462 +
             (C275 * C1601 + C141353 * C1784) * C139366) *
                C21819) *
               C141499) *
              C141281 * C2376 +
          (((C1809 * C139366 + C1808 * C141462 + C1807 * C139356 +
             C1806 * C141224) *
                C21819 +
            (C8055 * C139366 + C8054 * C141462 + C8053 * C139356 +
             C8052 * C141224) *
                C21820 +
            (C23974 * C139366 + C23973 * C141462 +
             (C275 * C10472 + C141353 * C10701) * C139356 +
             (C275 * C10475 + C141353 * C10704) * C141224) *
                C21821) *
               C141499 -
           ((C22932 + C22931 + C22930 + C22929) * C21821 +
            (C22928 + C22927 + C22926 + C22925) * C21820 +
            (C308 * C141224 + C307 * C139356 + C306 * C141462 +
             C305 * C139366) *
                C21819) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C101 +
            (C275 * C114 + C141353 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141327 * C4148 -
           (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
            C1808 * C90 + C1809 * C103 +
            (C275 * C1606 + C141353 * C1789) * C89 +
            (C275 * C1601 + C141353 * C1784) * C101) *
               C141327 * C141499) *
              C141281 * C2376 +
          ((C1809 * C101 + C1808 * C89 + C1807 * C103 + C1806 * C90 +
            C1805 * C105 + C1804 * C91 +
            (C275 * C1602 + C141353 * C1785) * C107 +
            (C275 * C1607 + C141353 * C1790) * C92) *
               C141327 * C141499 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C141327 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
             C43032 * C5325 + C42875 * C5449) *
                C139366 +
            (C43030 * C114 + C42873 * C282 + C43031 * C1606 + C42874 * C1789 +
             C43032 * C5329 + C42875 * C5453) *
                C141462 +
            (C43058 + C43059 + C43060) * C139356 +
            (C43061 + C43062 + C43063) * C141224) *
               C141327 * C4148 -
           ((C44916 + C44917 + C44918) * C141224 +
            (C44919 + C44920 + C44921) * C139356 +
            (C43032 * C21038 + C42875 * C21231 + C43031 * C5329 +
             C42874 * C5453 + C43030 * C1606 + C42873 * C1789) *
                C141462 +
            (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
             C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                C139366) *
               C141327 * C141499) *
              C141281 * C2376 +
          (((C44921 + C44920 + C44919) * C139366 +
            (C44918 + C44917 + C44916) * C141462 +
            (C43030 * C1599 + C42873 * C1782 + C43031 * C5327 + C42874 * C5451 +
             C43032 * C21037 + C42875 * C21230) *
                C139356 +
            (C43030 * C1604 + C42873 * C1787 + C43031 * C5331 + C42874 * C5455 +
             C43032 * C21040 + C42875 * C21233) *
                C141224) *
               C141327 * C141499 -
           ((C43064 + C43065 + C43066) * C141224 +
            (C43067 + C43068 + C43069) * C139356 +
            (C43063 + C43062 + C43061) * C141462 +
            (C43060 + C43059 + C43058) * C139366) *
               C141327 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[60] +=
        (-std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C21918 +
            (C139366 * C189 + C141462 * C362 + C139356 * C190 +
             C141224 * C363) *
                C21819 +
            (C23065 + C23066) * C21919 + (C23067 + C23068) * C21820 +
            C25834 * C21920 + C25835 * C21821) *
               C141353 * C4148 -
           ((C26714 + C26715) * C21821 + (C26716 + C26717) * C21920 +
            (C26718 + C26719) * C21820 + (C26720 + C26721) * C21919 +
            (C139356 * C1689 + C141224 * C1877 + C139366 * C1690 +
             C141462 * C1878) *
                C21819 +
            (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
             C141462 * C1606) *
                C21918) *
               C141353 * C141499) *
              C141281 * C2376 +
          (((C139366 * C1600 + C141462 * C1605 + C139356 * C1599 +
             C141224 * C1604) *
                C21918 +
            (C139366 * C1689 + C141462 * C1877 + C139356 * C1688 +
             C141224 * C1876) *
                C21819 +
            (C139366 * C3491 + C141462 * C3495 + C139356 * C3492 +
             C141224 * C3496) *
                C21919 +
            (C139366 * C3573 + C141462 * C3721 + C139356 * C3574 +
             C141224 * C3722) *
                C21820 +
            (C139366 * C10471 + C141462 * C10474 + C139356 * C10472 +
             C141224 * C10475) *
                C21920 +
            (C139366 * C10596 + C141462 * C10816 + C139356 * C10597 +
             C141224 * C10817) *
                C21821) *
               C141353 * C141499 -
           ((C23080 + C23079) * C21821 + (C23078 + C23077) * C21920 +
            (C23076 + C23075) * C21820 + (C23074 + C23073) * C21919 +
            (C139356 * C191 + C141224 * C364 + C139366 * C190 +
             C141462 * C363) *
                C21819 +
            (C139356 * C110 + C141224 * C116 + C139366 * C109 +
             C141462 * C115) *
                C21918) *
               C141353 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141327) *
               C141353 * C4148 -
           ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
             C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
                C141327 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C188) *
               C141353 * C141499) *
              C141281 * C2376 +
          (((C101 * C1600 + C89 * C1605 + C103 * C1599 + C90 * C1604 +
             C105 * C1598 + C91 * C1603 + C107 * C1602 + C92 * C1607) *
                C188 +
            (C101 * C1689 + C89 * C1877 + C103 * C1688 + C90 * C1876 +
             C105 * C1687 + C91 * C1875 + C107 * C1691 + C92 * C1879) *
                C141327) *
               C141353 * C141499 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C141327 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C141353 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C188 +
             (C139366 * C189 + C141462 * C362 + C139356 * C190 +
              C141224 * C363) *
                 C141327) *
                C42873 +
            ((C45052 + C45053) * C188 + (C45054 + C45055) * C141327) * C42874 +
            ((C45056 + C45057) * C188 + (C45058 + C45059) * C141327) * C42875) *
               C4148 -
           (((C139356 * C21137 + C141224 * C21309 + C139366 * C21136 +
              C141462 * C21308) *
                 C141327 +
             (C139356 * C21036 + C141224 * C21039 + C139366 * C21035 +
              C141462 * C21038) *
                 C188) *
                C42875 +
            ((C45059 + C45058) * C141327 + (C45057 + C45056) * C188) * C42874 +
            ((C45055 + C45054) * C141327 + (C45053 + C45052) * C188) * C42873) *
               C141499) *
              C141281 * C2376 +
          ((((C45060 + C45061) * C188 + (C45062 + C45063) * C141327) * C42873 +
            ((C45064 + C45065) * C188 + (C45066 + C45067) * C141327) * C42874 +
            ((C139366 * C21036 + C141462 * C21039 + C139356 * C21037 +
              C141224 * C21040) *
                 C188 +
             (C139366 * C21137 + C141462 * C21309 + C139356 * C21138 +
              C141224 * C21310) *
                 C141327) *
                C42875) *
               C141499 -
           (((C45067 + C45066) * C141327 + (C45065 + C45064) * C188) * C42875 +
            ((C45063 + C45062) * C141327 + (C45061 + C45060) * C188) * C42874 +
            ((C139356 * C191 + C141224 * C364 + C139366 * C190 +
              C141462 * C363) *
                 C141327 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C188) *
                C42873) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[60] +=
        (-std::pow(Pi, 2.5) *
         ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
             C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
             C22185 + C21821 * C3196) *
                C141462 +
            (C22219 + C22220 + C22221) * C141224) *
               C141353 * C4148 -
           ((C24192 + C24193 + C24194) * C141224 +
            (C22181 * C10470 + C24180 + C24180 + C21821 * C10934 +
             C22180 * C3490 + C24181 + C24181 + C21820 * C3790 +
             C22179 * C1601 + C24182 + C24182 + C21819 * C1949) *
                C141462) *
               C141353 * C141499) *
              C141281 * C2376 +
          (((C24194 + C24193 + C24192) * C141462 +
            (C22179 * C1599 + C24183 + C24183 + C21819 * C1947 +
             C22180 * C3492 + C24184 + C24184 + C21820 * C3792 +
             C22181 * C10472 + C24185 + C24185 + C21821 * C10936) *
                C141224) *
               C141353 * C141499 -
           ((C22222 + C22223 + C22224) * C141224 +
            (C22221 + C22220 + C22219) * C141462) *
               C141353 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C89 + C448 * C90 +
            C449 * C91 + C450 * C92) *
               C141353 * C4148 -
           (C1969 * C92 + C1970 * C91 + C1971 * C90 +
            (C418 * C1601 + C1961 + C1961 + C141327 * C1949) * C89) *
               C141353 * C141499) *
              C141281 * C2376 +
          ((C1971 * C89 + C1970 * C90 + C1969 * C91 +
            (C418 * C1602 + C1962 + C1962 + C141327 * C1950) * C92) *
               C141353 * C141499 -
           (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) * C141353 *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C141462 +
             C448 * C141224) *
                C42873 +
            (C45166 + C45167) * C42874 + (C45168 + C45169) * C42875) *
               C4148 -
           ((C45178 * C141224 +
             (C418 * C21035 + C21411 + C21411 + C141327 * C21403) * C141462) *
                C42875 +
            (C45169 + C45168) * C42874 + (C45167 + C45166) * C42873) *
               C141499) *
              C141281 * C2376 +
          (((C45172 + C45173) * C42873 + (C45174 + C45175) * C42874 +
            (C45178 * C141462 +
             (C418 * C21037 + C21413 + C21413 + C141327 * C21405) * C141224) *
                C42875) *
               C141499 -
           ((C45175 + C45174) * C42875 + (C45173 + C45172) * C42874 +
            (C449 * C141224 + C448 * C141462) * C42873) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[60] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C21918 +
             (C275 * C189 + C141353 * C501) * C21819 + C6988 * C21919 +
             C7366 * C21820 + C9864 * C21920 + C10124 * C21821) *
                C141462 +
            (C22299 + C22300 + C22301 + C22302 + C22303 + C22304) * C141224) *
               C4148 -
           ((C24301 + C24295 + C24296 + C24297 + C24298 + C24299) * C141224 +
            (C26930 * C21821 + C26595 * C21920 + C11047 * C21820 +
             C10715 * C21919 + (C275 * C1690 + C141353 * C2040) * C21819 +
             (C275 * C1601 + C141353 * C1784) * C21918) *
                C141462) *
               C141499) *
              C141281 * C2376 +
          (((C24299 + C24298 + C24297 + C24296 + C24295 + C24301) * C141462 +
            (C1807 * C21918 + C2053 * C21819 + C8053 * C21919 + C8388 * C21820 +
             (C275 * C10472 + C141353 * C10701) * C21920 +
             (C275 * C10597 + C141353 * C11043) * C21821) *
                C141224) *
               C141499 -
           ((C22305 + C22306 + C22307 + C22308 + C22309 + C22310) * C141224 +
            (C22304 + C22303 + C22302 + C22301 + C22300 + C22299) * C141462) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C275 * C108 + C141353 * C276) * C188 +
                                 (C275 * C189 + C141353 * C501) * C141327) *
                                    C89 +
                                (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
                                   C4148 -
                               ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
                                (C2057 + C2051) * C90 +
                                ((C275 * C1690 + C141353 * C2040) * C141327 +
                                 (C275 * C1601 + C141353 * C1784) * C188) *
                                    C89) *
                                   C141499) *
                                  C141281 * C2376 +
                              (((C2051 + C2057) * C89 + (C2048 + C2056) * C90 +
                                (C2045 + C2055) * C91 +
                                ((C275 * C1602 + C141353 * C1785) * C188 +
                                 (C275 * C1691 + C141353 * C2041) * C141327) *
                                    C92) *
                                   C141499 -
                               ((C527 + C519) * C92 + (C526 + C514) * C91 +
                                (C525 + C511) * C90 + (C524 + C508) * C89) *
                                   C4148) *
                                  C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
              C43032 * C5325 + C42875 * C5449) *
                 C188 +
             (C43030 * C189 + C42873 * C501 + C43031 * C1690 + C42874 * C2040 +
              C43032 * C5391 + C42875 * C5619) *
                 C141327) *
                C141462 +
            ((C43058 + C43059 + C43060) * C188 +
             (C43304 + C43305 + C43306) * C141327) *
                C141224) *
               C4148 -
           (((C45283 + C45284 + C45285) * C141327 +
             (C44919 + C44920 + C44921) * C188) *
                C141224 +
            ((C43032 * C21136 + C42875 * C21491 + C43031 * C5391 +
              C42874 * C5619 + C43030 * C1690 + C42873 * C2040) *
                 C141327 +
             (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
              C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                 C188) *
                C141462) *
               C141499) *
              C141281 * C2376 +
          ((((C44921 + C44920 + C44919) * C188 +
             (C45285 + C45284 + C45283) * C141327) *
                C141462 +
            ((C43030 * C1599 + C42873 * C1782 + C43031 * C5327 +
              C42874 * C5451 + C43032 * C21037 + C42875 * C21230) *
                 C188 +
             (C43030 * C1688 + C42873 * C2038 + C43031 * C5393 +
              C42874 * C5621 + C43032 * C21138 + C42875 * C21493) *
                 C141327) *
                C141224) *
               C141499 -
           (((C43307 + C43308 + C43309) * C141327 +
             (C43067 + C43068 + C43069) * C188) *
                C141224 +
            ((C43306 + C43305 + C43304) * C141327 +
             (C43060 + C43059 + C43058) * C188) *
                C141462) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[60] +=
        (-std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C275 +
             (C139366 * C276 + C141462 * C579 + C139356 * C277 +
              C141224 * C580) *
                 C141353) *
                C21819 +
            ((C23065 + C23066) * C275 + (C23424 + C23425) * C141353) * C21820 +
            C26094 * C21821) *
               C4148 -
           (((C27039 + C27040) * C141353 + (C26716 + C26717) * C275) * C21821 +
            ((C27041 + C27042) * C141353 + (C26720 + C26721) * C275) * C21820 +
            ((C139356 * C1783 + C141224 * C2125 + C139366 * C1784 +
              C141462 * C2126) *
                 C141353 +
             (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
              C141462 * C1606) *
                 C275) *
                C21819) *
               C141499) *
              C141281 * C2376 +
          ((((C139366 * C1600 + C141462 * C1605 + C139356 * C1599 +
              C141224 * C1604) *
                 C275 +
             (C139366 * C1783 + C141462 * C2125 + C139356 * C1782 +
              C141224 * C2124) *
                 C141353) *
                C21819 +
            ((C139366 * C3491 + C141462 * C3495 + C139356 * C3492 +
              C141224 * C3496) *
                 C275 +
             (C139366 * C3647 + C141462 * C3935 + C139356 * C3648 +
              C141224 * C3936) *
                 C141353) *
                C21820 +
            ((C139366 * C10471 + C141462 * C10474 + C139356 * C10472 +
              C141224 * C10475) *
                 C275 +
             (C139366 * C10700 + C141462 * C11146 + C139356 * C10701 +
              C141224 * C11147) *
                 C141353) *
                C21821) *
               C141499 -
           (((C23431 + C23430) * C141353 + (C23078 + C23077) * C275) * C21821 +
            ((C23429 + C23428) * C141353 + (C23074 + C23073) * C275) * C21820 +
            ((C139356 * C278 + C141224 * C581 + C139366 * C277 +
              C141462 * C580) *
                 C141353 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C275) *
                C21819) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141353) *
               C141327 * C4148 -
           ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
             C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
                C141353 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C275) *
               C141327 * C141499) *
              C141281 * C2376 +
          (((C101 * C1600 + C89 * C1605 + C103 * C1599 + C90 * C1604 +
             C105 * C1598 + C91 * C1603 + C107 * C1602 + C92 * C1607) *
                C275 +
            (C101 * C1783 + C89 * C2125 + C103 * C1782 + C90 * C2124 +
             C105 * C1781 + C91 * C2123 + C107 * C1785 + C92 * C2127) *
                C141353) *
               C141327 * C141499 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C141353 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C141327 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C43030 +
            (C139366 * C276 + C141462 * C579 + C139356 * C277 +
             C141224 * C580) *
                C42873 +
            (C45052 + C45053) * C43031 + (C45400 + C45401) * C42874 +
            (C45056 + C45057) * C43032 + (C45402 + C45403) * C42875) *
               C141327 * C4148 -
           ((C139356 * C21229 + C141224 * C21569 + C139366 * C21228 +
             C141462 * C21568) *
                C42875 +
            (C139356 * C21036 + C141224 * C21039 + C139366 * C21035 +
             C141462 * C21038) *
                C43032 +
            (C45403 + C45402) * C42874 + (C45057 + C45056) * C43031 +
            (C45401 + C45400) * C42873 + (C45053 + C45052) * C43030) *
               C141327 * C141499) *
              C141281 * C2376 +
          (((C45060 + C45061) * C43030 + (C45404 + C45405) * C42873 +
            (C45064 + C45065) * C43031 + (C45406 + C45407) * C42874 +
            (C139366 * C21036 + C141462 * C21039 + C139356 * C21037 +
             C141224 * C21040) *
                C43032 +
            (C139366 * C21229 + C141462 * C21569 + C139356 * C21230 +
             C141224 * C21570) *
                C42875) *
               C141327 * C141499 -
           ((C45407 + C45406) * C42875 + (C45065 + C45064) * C43032 +
            (C45405 + C45404) * C42874 + (C45061 + C45060) * C43031 +
            (C139356 * C278 + C141224 * C581 + C139366 * C277 +
             C141462 * C580) *
                C42873 +
            (C139356 * C110 + C141224 * C116 + C139366 * C109 +
             C141462 * C115) *
                C43030) *
               C141327 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezy[60] +=
        (-std::pow(Pi, 2.5) *
         (((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
              C21920 * C2960 + C21821 * C3026) *
                 C275 +
             (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
              C21920 * C3084 + C21821 * C3362) *
                 C141353) *
                C141462 +
            ((C21946 + C21947 + C21948) * C275 +
             (C22471 + C22472 + C22473) * C141353) *
                C141224) *
               C4148 -
           (((C24504 + C24505 + C24506) * C141353 +
             (C23868 + C23869 + C23870) * C275) *
                C141224 +
            ((C21920 * C10699 + C21821 * C11255 + C21919 * C3646 +
              C21820 * C4004 + C21918 * C1784 + C21819 * C2197) *
                 C141353 +
             (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
              C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
                 C275) *
                C141462) *
               C141499) *
              C141281 * C2376 +
          ((((C23870 + C23869 + C23868) * C275 +
             (C24506 + C24505 + C24504) * C141353) *
                C141462 +
            ((C21918 * C1599 + C21819 * C1688 + C21919 * C3492 +
              C21820 * C3574 + C21920 * C10472 + C21821 * C10597) *
                 C275 +
             (C21918 * C1782 + C21819 * C2195 + C21919 * C3648 +
              C21820 * C4006 + C21920 * C10701 + C21821 * C11257) *
                 C141353) *
                C141224) *
               C141499 -
           (((C22474 + C22475 + C22476) * C141353 +
             (C21955 + C21956 + C21957) * C275) *
                C141224 +
            ((C22473 + C22472 + C22471) * C141353 +
             (C21948 + C21947 + C21946) * C275) *
                C141462) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C188 * C108 + C141327 * C189) * C275 +
                                 (C188 * C276 + C141327 * C635) * C141353) *
                                    C89 +
                                (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                                   C4148 -
                               ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
                                (C2214 + C2208) * C90 +
                                ((C188 * C1784 + C141327 * C2197) * C141353 +
                                 (C188 * C1601 + C141327 * C1690) * C275) *
                                    C89) *
                                   C141499) *
                                  C141281 * C2376 +
                              (((C2208 + C2214) * C89 + (C2205 + C2213) * C90 +
                                (C2202 + C2212) * C91 +
                                ((C188 * C1602 + C141327 * C1691) * C275 +
                                 (C188 * C1785 + C141327 * C2198) * C141353) *
                                    C92) *
                                   C141499 -
                               ((C661 + C653) * C92 + (C660 + C648) * C91 +
                                (C659 + C645) * C90 + (C658 + C642) * C89) *
                                   C4148) *
                                  C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C43030 +
             (C188 * C276 + C141327 * C635) * C42873 + C15877 * C43031 +
             C16596 * C42874 + C21152 * C43032 + C21660 * C42875) *
                C141462 +
            (C43458 + C43459 + C43460 + C43461 + C43462 + C43463) * C141224) *
               C4148 -
           ((C45514 + C45508 + C45509 + C45510 + C45511 + C45512) * C141224 +
            ((C188 * C21228 + C141327 * C21654) * C42875 +
             (C188 * C21035 + C141327 * C21136) * C43032 + C21660 * C42874 +
             C21152 * C43031 + C16596 * C42873 + C15877 * C43030) *
                C141462) *
               C141499) *
              C141281 * C2376 +
          (((C45512 + C45511 + C45510 + C45509 + C45508 + C45514) * C141462 +
            (C1713 * C43030 + C2210 * C42873 + C15880 * C43031 +
             C16597 * C42874 + (C188 * C21037 + C141327 * C21138) * C43032 +
             (C188 * C21230 + C141327 * C21656) * C42875) *
                C141224) *
               C141499 -
           ((C43464 + C43465 + C43466 + C43467 + C43468 + C43469) * C141224 +
            (C43463 + C43462 + C43461 + C43460 + C43459 + C43458) * C141462) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[60] +=
        (-std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C21819 +
             C7709 * C21820 + C10372 * C21821) *
                C141462 +
            (C22551 + C22552 + C22553) * C141224) *
               C4148 -
           ((C24612 + C24607 + C24608) * C141224 +
            (C27249 * C21821 + C11367 * C21820 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C21819) *
                C141462) *
               C141499) *
              C141281 * C2376 +
          (((C24608 + C24607 + C24612) * C141462 +
            (C2304 * C21819 + C8708 * C21820 +
             (C713 * C10472 + C11364 + C11364 + C141353 * C11358) * C21821) *
                C141224) *
               C141499 -
           ((C22554 + C22555 + C22556) * C141224 +
            (C22553 + C22552 + C22551) * C141462) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141327 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C4148 -
           (C2306 * C92 + C2307 * C91 + C2308 * C90 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141327 * C89) *
               C141499) *
              C141281 * C2376 +
          ((C2308 * C89 + C2307 * C90 + C2306 * C91 +
            (C713 * C1602 + C2296 + C2296 + C141353 * C2284) * C141327 * C92) *
               C141499 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43543 * C108 + C43547 + C43547 + C42873 * C714 + C43544 * C1601 +
             C43548 + C43548 + C42874 * C2283 + C43545 * C5325 + C43549 +
             C43549 + C42875 * C5781) *
                C141327 * C141462 +
            (C43583 + C43584 + C43585) * C141327 * C141224) *
               C4148 -
           ((C45634 + C45635 + C45636) * C141327 * C141224 +
            (C43545 * C21035 + C45622 + C45622 + C42875 * C21734 +
             C43544 * C5325 + C45623 + C45623 + C42874 * C5781 +
             C43543 * C1601 + C45624 + C45624 + C42873 * C2283) *
                C141327 * C141462) *
               C141499) *
              C141281 * C2376 +
          (((C45636 + C45635 + C45634) * C141327 * C141462 +
            (C43543 * C1599 + C45625 + C45625 + C42873 * C2281 +
             C43544 * C5327 + C45626 + C45626 + C42874 * C5783 +
             C43545 * C21037 + C45627 + C45627 + C42875 * C21736) *
                C141327 * C141224) *
               C141499 -
           ((C43586 + C43587 + C43588) * C141327 * C141224 +
            (C43585 + C43584 + C43583) * C141327 * C141462) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[61] +=
        (-std::pow(Pi, 2.5) *
         ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
             C21828 + C21828 + C141224 * C121) *
                C141353 * C21819 +
            (C22691 + C22692) * C141353 * C21820 + C25582 * C21821) *
               C4148 -
           ((C26376 + C26377) * C141353 * C21821 +
            (C26378 + C26379) * C141353 * C21820 +
            (C21824 * C1600 + C23747 + C23747 + C141224 * C1610 +
             C21822 * C1601 + C23748 + C23748 + C141462 * C1611) *
                C141353 * C21819) *
               C141499) *
              C816 +
          (((C26379 + C26378) * C141353 * C21819 +
            (C26377 + C26376) * C141353 * C21820 +
            (C21822 * C26351 + C26366 + C26366 + C141462 * C26355 +
             C21824 * C26352 + C26367 + C26367 + C141224 * C26356) *
                C141353 * C21821) *
               C141499 -
           ((C25587 + C25588) * C141353 * C21821 +
            (C22694 + C22693) * C141353 * C21820 +
            (C22692 + C22691) * C141353 * C21819) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C141353 * C141327 * C4148 -
           (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
            C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
            C100 * C1601 + C1617 + C1617 + C89 * C1611) *
               C141353 * C141327 * C141499) *
              C816 +
          ((C100 * C3490 + C3503 + C3503 + C89 * C3498 + C102 * C3491 + C3504 +
            C3504 + C90 * C3499 + C104 * C3492 + C3505 + C3505 + C91 * C3500 +
            C106 * C3493 + C3506 + C3506 + C92 * C3501) *
               C141353 * C141327 * C141499 -
           (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 + C837 + C837 +
            C91 * C831 + C102 * C822 + C838 + C838 + C90 * C832 + C100 * C823 +
            C839 + C839 + C89 * C833) *
               C141353 * C141327 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
             C21828 + C21828 + C141224 * C121) *
                C42873 +
            (C44678 + C44679) * C42874 + (C44680 + C44681) * C42875) *
               C141327 * C4148 -
           ((C21824 * C21036 + C44650 + C44650 + C141224 * C21042 +
             C21822 * C21035 + C44651 + C44651 + C141462 * C21041) *
                C42875 +
            (C44681 + C44680) * C42874 + (C44679 + C44678) * C42873) *
               C141327 * C141499) *
              C816 +
          (((C26379 + C26378) * C42873 + (C47304 + C47305) * C42874 +
            (C21822 * C42109 + C47298 + C47298 + C141462 * C42113 +
             C21824 * C47290 + C47299 + C47299 + C141224 * C47292) *
                C42875) *
               C141327 * C141499 -
           ((C47305 + C47304) * C42875 + (C26378 + C26379) * C42874 +
            (C22692 + C22691) * C42873) *
               C141327 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[61] +=
        (-std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C139366 +
            (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
             C21920 * C2964 + C21821 * C3030) *
                C141462 +
            (C21946 + C21947 + C21948) * C139356 +
            (C21949 + C21950 + C21951) * C141224) *
               C141353 * C4148 -
           ((C23865 + C23866 + C23867) * C141224 +
            (C23868 + C23869 + C23870) * C139356 +
            (C21920 * C10473 + C21821 * C10598 + C21919 * C3494 +
             C21820 * C3576 + C21918 * C1606 + C21819 * C1695) *
                C141462 +
            (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
             C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
                C139366) *
               C141353 * C141499) *
              C816 +
          (((C21918 * C3490 + C21819 * C3572 + C21919 * C10470 +
             C21820 * C10595 + C21920 * C26351 + C21821 * C26477) *
                C139366 +
            (C21918 * C3494 + C21819 * C3576 + C21919 * C10473 +
             C21820 * C10598 + C21920 * C26353 + C21821 * C26479) *
                C141462 +
            (C21918 * C3491 + C21819 * C3573 + C21919 * C10471 +
             C21820 * C10596 + C21920 * C26352 + C21821 * C26478) *
                C139356 +
            (C21918 * C3495 + C21819 * C3577 + C21919 * C10474 +
             C21820 * C10599 + C21920 * C26354 + C21821 * C26480) *
                C141224) *
               C141353 * C141499 -
           ((C22809 + C22810 + C22811) * C141224 +
            (C22812 + C22813 + C22814) * C139356 +
            (C21920 * C9670 + C21821 * C9771 + C21919 * C2964 + C21820 * C3030 +
             C21918 * C828 + C21819 * C917) *
                C141462 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C139366) *
               C141353 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C101 +
            (C188 * C114 + C141327 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141353 * C4148 -
           (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
            C1714 * C90 + C1715 * C103 +
            (C188 * C1606 + C141327 * C1695) * C89 +
            (C188 * C1601 + C141327 * C1690) * C101) *
               C141353 * C141499) *
              C816 +
          (((C188 * C3490 + C141327 * C3572) * C101 +
            (C188 * C3494 + C141327 * C3576) * C89 +
            (C188 * C3491 + C141327 * C3573) * C103 +
            (C188 * C3495 + C141327 * C3577) * C90 +
            (C188 * C3492 + C141327 * C3574) * C105 +
            (C188 * C3496 + C141327 * C3578) * C91 +
            (C188 * C3493 + C141327 * C3575) * C107 +
            (C188 * C3497 + C141327 * C3579) * C92) *
               C141353 * C141499 -
           (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
            C937 * C103 + (C188 * C828 + C141327 * C917) * C89 +
            (C188 * C823 + C141327 * C912) * C101) *
               C141353 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C139366 +
             (C188 * C114 + C141327 * C195) * C141462 + C218 * C139356 +
             C219 * C141224) *
                C42873 +
            (C44784 + C44785 + C44786 + C44787) * C42874 +
            (C44788 + C44789 + C44790 + C44791) * C42875) *
               C4148 -
           ((C44804 * C141224 + C44805 * C139356 +
             (C188 * C21038 + C141327 * C21139) * C141462 +
             (C188 * C21035 + C141327 * C21136) * C139366) *
                C42875 +
            (C44791 + C44790 + C44789 + C44788) * C42874 +
            (C44787 + C44786 + C44785 + C44784) * C42873) *
               C141499) *
              C816 +
          (((C47406 + C47407 + C47408 + C47409) * C42873 +
            (C47418 + C47419 + C47414 + C47415) * C42874 +
            ((C188 * C42109 + C141327 * C42197) * C139366 +
             (C188 * C42111 + C141327 * C42199) * C141462 +
             (C188 * C47290 + C141327 * C47403) * C139356 +
             (C188 * C47291 + C141327 * C47404) * C141224) *
                C42875) *
               C141499 -
           ((C47415 + C47414 + C47419 + C47418) * C42875 +
            (C47409 + C47408 + C47407 + C47406) * C42874 +
            (C936 * C141224 + C937 * C139356 +
             (C188 * C828 + C141327 * C917) * C141462 +
             (C188 * C823 + C141327 * C912) * C139366) *
                C42873) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[61] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C139366 +
             (C275 * C114 + C141353 * C282) * C141462 + C305 * C139356 +
             C306 * C141224) *
                C21819 +
            (C22913 + C22914 + C22915 + C22916) * C21820 + C25755 * C21821) *
               C4148 -
           ((C26584 + C26585 + C26596 + C26597) * C21821 +
            (C26590 + C26591 + C26592 + C26593) * C21820 +
            (C1808 * C141224 + C1809 * C139356 +
             (C275 * C1606 + C141353 * C1789) * C141462 +
             (C275 * C1601 + C141353 * C1784) * C139366) *
                C21819) *
               C141499) *
              C816 +
          (((C26593 + C26592 + C26591 + C26590) * C21819 +
            (C26597 + C26596 + C26585 + C26584) * C21820 +
            ((C275 * C26351 + C141353 * C26579) * C139366 +
             (C275 * C26353 + C141353 * C26581) * C141462 +
             (C275 * C26352 + C141353 * C26580) * C139356 +
             (C275 * C26354 + C141353 * C26582) * C141224) *
                C21821) *
               C141499 -
           ((C25746 + C25747 + C25756 + C25757) * C21821 +
            (C22920 + C22919 + C22918 + C22917) * C21820 +
            (C22916 + C22915 + C22914 + C22913) * C21819) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C101 +
            (C275 * C114 + C141353 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141327 * C4148 -
           (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
            C1808 * C90 + C1809 * C103 +
            (C275 * C1606 + C141353 * C1789) * C89 +
            (C275 * C1601 + C141353 * C1784) * C101) *
               C141327 * C141499) *
              C816 +
          (((C275 * C3490 + C141353 * C3646) * C101 +
            (C275 * C3494 + C141353 * C3650) * C89 +
            (C275 * C3491 + C141353 * C3647) * C103 +
            (C275 * C3495 + C141353 * C3651) * C90 +
            (C275 * C3492 + C141353 * C3648) * C105 +
            (C275 * C3496 + C141353 * C3652) * C91 +
            (C275 * C3493 + C141353 * C3649) * C107 +
            (C275 * C3497 + C141353 * C3653) * C92) *
               C141327 * C141499 -
           (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
            C1030 * C90 + C1031 * C103 + (C275 * C828 + C141353 * C1011) * C89 +
            (C275 * C823 + C141353 * C1006) * C101) *
               C141327 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
             C43032 * C5325 + C42875 * C5449) *
                C139366 +
            (C43030 * C114 + C42873 * C282 + C43031 * C1606 + C42874 * C1789 +
             C43032 * C5329 + C42875 * C5453) *
                C141462 +
            (C43058 + C43059 + C43060) * C139356 +
            (C43061 + C43062 + C43063) * C141224) *
               C141327 * C4148 -
           ((C44916 + C44917 + C44918) * C141224 +
            (C44919 + C44920 + C44921) * C139356 +
            (C43032 * C21038 + C42875 * C21231 + C43031 * C5329 +
             C42874 * C5453 + C43030 * C1606 + C42873 * C1789) *
                C141462 +
            (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
             C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                C139366) *
               C141327 * C141499) *
              C816 +
          (((C43030 * C3490 + C42873 * C3646 + C43031 * C13205 +
             C42874 * C13374 + C43032 * C42109 + C42875 * C42293) *
                C139366 +
            (C43030 * C3494 + C42873 * C3650 + C43031 * C13208 +
             C42874 * C13377 + C43032 * C42111 + C42875 * C42295) *
                C141462 +
            (C43030 * C3491 + C42873 * C3647 + C43031 * C13206 +
             C42874 * C13375 + C43032 * C47290 + C42875 * C47517) *
                C139356 +
            (C43030 * C3495 + C42873 * C3651 + C43031 * C13209 +
             C42874 * C13378 + C43032 * C47291 + C42875 * C47518) *
                C141224) *
               C141327 * C141499 -
           ((C43903 + C43904 + C43905) * C141224 +
            (C43906 + C43907 + C43908) * C139356 +
            (C43032 * C13208 + C42875 * C13377 + C43031 * C3494 +
             C42874 * C3650 + C43030 * C828 + C42873 * C1011) *
                C141462 +
            (C43032 * C13205 + C42875 * C13374 + C43031 * C3490 +
             C42874 * C3646 + C43030 * C823 + C42873 * C1006) *
                C139366) *
               C141327 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[61] +=
        (-std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C21918 +
            (C139366 * C189 + C141462 * C362 + C139356 * C190 +
             C141224 * C363) *
                C21819 +
            (C23065 + C23066) * C21919 + (C23067 + C23068) * C21820 +
            C25834 * C21920 + C25835 * C21821) *
               C141353 * C4148 -
           ((C26714 + C26715) * C21821 + (C26716 + C26717) * C21920 +
            (C26718 + C26719) * C21820 + (C26720 + C26721) * C21919 +
            (C139356 * C1689 + C141224 * C1877 + C139366 * C1690 +
             C141462 * C1878) *
                C21819 +
            (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
             C141462 * C1606) *
                C21918) *
               C141353 * C141499) *
              C816 +
          (((C26721 + C26720) * C21918 + (C26719 + C26718) * C21819 +
            (C26717 + C26716) * C21919 + (C26715 + C26714) * C21820 +
            (C139366 * C26351 + C141462 * C26353 + C139356 * C26352 +
             C141224 * C26354) *
                C21920 +
            (C139366 * C26477 + C141462 * C26695 + C139356 * C26478 +
             C141224 * C26696) *
                C21821) *
               C141353 * C141499 -
           ((C25844 + C25845) * C21821 + (C25846 + C25847) * C21920 +
            (C23072 + C23071) * C21820 + (C23070 + C23069) * C21919 +
            (C23068 + C23067) * C21819 + (C23066 + C23065) * C21918) *
               C141353 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141327) *
               C141353 * C4148 -
           ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
             C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
                C141327 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C188) *
               C141353 * C141499) *
              C816 +
          (((C101 * C3490 + C89 * C3494 + C103 * C3491 + C90 * C3495 +
             C105 * C3492 + C91 * C3496 + C107 * C3493 + C92 * C3497) *
                C188 +
            (C101 * C3572 + C89 * C3720 + C103 * C3573 + C90 * C3721 +
             C105 * C3574 + C91 * C3722 + C107 * C3575 + C92 * C3723) *
                C141327) *
               C141353 * C141499 -
           ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
             C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
                C141327 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C188) *
               C141353 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C188 +
             (C139366 * C189 + C141462 * C362 + C139356 * C190 +
              C141224 * C363) *
                 C141327) *
                C42873 +
            ((C45052 + C45053) * C188 + (C45054 + C45055) * C141327) * C42874 +
            ((C45056 + C45057) * C188 + (C45058 + C45059) * C141327) * C42875) *
               C4148 -
           (((C139356 * C21137 + C141224 * C21309 + C139366 * C21136 +
              C141462 * C21308) *
                 C141327 +
             (C139356 * C21036 + C141224 * C21039 + C139366 * C21035 +
              C141462 * C21038) *
                 C188) *
                C42875 +
            ((C45059 + C45058) * C141327 + (C45057 + C45056) * C188) * C42874 +
            ((C45055 + C45054) * C141327 + (C45053 + C45052) * C188) * C42873) *
               C141499) *
              C816 +
          ((((C26721 + C26720) * C188 + (C26719 + C26718) * C141327) * C42873 +
            ((C47627 + C47628) * C188 + (C47629 + C47630) * C141327) * C42874 +
            ((C139366 * C42109 + C141462 * C42111 + C139356 * C47290 +
              C141224 * C47291) *
                 C188 +
             (C139366 * C42197 + C141462 * C42371 + C139356 * C47403 +
              C141224 * C47617) *
                 C141327) *
                C42875) *
               C141499 -
           (((C47630 + C47629) * C141327 + (C47628 + C47627) * C188) * C42875 +
            ((C26718 + C26719) * C141327 + (C26720 + C26721) * C188) * C42874 +
            ((C23068 + C23067) * C141327 + (C23066 + C23065) * C188) * C42873) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[61] +=
        (-std::pow(Pi, 2.5) *
         ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
             C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
             C22185 + C21821 * C3196) *
                C141462 +
            (C22219 + C22220 + C22221) * C141224) *
               C141353 * C4148 -
           ((C24192 + C24193 + C24194) * C141224 +
            (C22181 * C10470 + C24180 + C24180 + C21821 * C10934 +
             C22180 * C3490 + C24181 + C24181 + C21820 * C3790 +
             C22179 * C1601 + C24182 + C24182 + C21819 * C1949) *
                C141462) *
               C141353 * C141499) *
              C816 +
          (((C22179 * C3490 + C26822 + C26822 + C21819 * C3790 +
             C22180 * C10470 + C26823 + C26823 + C21820 * C10934 +
             C22181 * C26351 + C26824 + C26824 + C21821 * C26819) *
                C141462 +
            (C22179 * C3491 + C26825 + C26825 + C21819 * C3791 +
             C22180 * C10471 + C26826 + C26826 + C21820 * C10935 +
             C22181 * C26352 + C26827 + C26827 + C21821 * C26820) *
                C141224) *
               C141353 * C141499 -
           ((C23200 + C23201 + C23202) * C141224 +
            (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
             C22180 * C2960 + C23189 + C23189 + C21820 * C3196 + C22179 * C823 +
             C23190 + C23190 + C21819 * C1171) *
                C141462) *
               C141353 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C89 + C448 * C90 +
            C449 * C91 + C450 * C92) *
               C141353 * C4148 -
           (C1969 * C92 + C1970 * C91 + C1971 * C90 +
            (C418 * C1601 + C1961 + C1961 + C141327 * C1949) * C89) *
               C141353 * C141499) *
              C816 +
          (((C418 * C3490 + C3795 + C3795 + C141327 * C3790) * C89 +
            (C418 * C3491 + C3796 + C3796 + C141327 * C3791) * C90 +
            (C418 * C3492 + C3797 + C3797 + C141327 * C3792) * C91 +
            (C418 * C3493 + C3798 + C3798 + C141327 * C3793) * C92) *
               C141353 * C141499 -
           (C1191 * C92 + C1192 * C91 + C1193 * C90 +
            (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C89) *
               C141353 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C141462 +
             C448 * C141224) *
                C42873 +
            (C45166 + C45167) * C42874 + (C45168 + C45169) * C42875) *
               C4148 -
           ((C45178 * C141224 +
             (C418 * C21035 + C21411 + C21411 + C141327 * C21403) * C141462) *
                C42875 +
            (C45169 + C45168) * C42874 + (C45167 + C45166) * C42873) *
               C141499) *
              C816 +
          (((C47730 + C47731) * C42873 + (C47740 + C47734) * C42874 +
            ((C418 * C42109 + C47735 + C47735 + C141327 * C42459) * C141462 +
             (C418 * C47290 + C47736 + C47736 + C141327 * C47728) * C141224) *
                C42875) *
               C141499 -
           ((C47734 + C47740) * C42875 + (C47731 + C47730) * C42874 +
            (C1193 * C141224 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C141462) *
                C42873) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyz[61] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C21918 +
             (C275 * C189 + C141353 * C501) * C21819 + C6988 * C21919 +
             C7366 * C21820 + C9864 * C21920 + C10124 * C21821) *
                C141462 +
            (C22299 + C22300 + C22301 + C22302 + C22303 + C22304) * C141224) *
               C4148 -
           ((C24301 + C24295 + C24296 + C24297 + C24298 + C24299) * C141224 +
            (C26930 * C21821 + C26595 * C21920 + C11047 * C21820 +
             C10715 * C21919 + (C275 * C1690 + C141353 * C2040) * C21819 +
             (C275 * C1601 + C141353 * C1784) * C21918) *
                C141462) *
               C141499) *
              C816 +
          (((C10715 * C21918 + C11047 * C21819 + C26595 * C21919 +
             C26930 * C21820 + (C275 * C26351 + C141353 * C26579) * C21920 +
             (C275 * C26477 + C141353 * C26925) * C21821) *
                C141462 +
            (C8055 * C21918 + C8389 * C21819 + C23974 * C21919 +
             C24300 * C21820 + (C275 * C26352 + C141353 * C26580) * C21920 +
             (C275 * C26478 + C141353 * C26926) * C21821) *
                C141224) *
               C141499 -
           ((C23309 + C23303 + C23304 + C23305 + C23306 + C23307) * C141224 +
            (C26008 * C21821 + C25754 * C21920 + C10124 * C21820 +
             C9864 * C21919 + C7366 * C21819 + C6988 * C21918) *
                C141462) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C188 +
             (C275 * C189 + C141353 * C501) * C141327) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C4148 -
           ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
            (C2057 + C2051) * C90 +
            ((C275 * C1690 + C141353 * C2040) * C141327 +
             (C275 * C1601 + C141353 * C1784) * C188) *
                C89) *
               C141499) *
              C816 +
          ((((C275 * C3490 + C141353 * C3646) * C188 +
             (C275 * C3572 + C141353 * C3864) * C141327) *
                C89 +
            ((C275 * C3491 + C141353 * C3647) * C188 +
             (C275 * C3573 + C141353 * C3865) * C141327) *
                C90 +
            ((C275 * C3492 + C141353 * C3648) * C188 +
             (C275 * C3574 + C141353 * C3866) * C141327) *
                C91 +
            ((C275 * C3493 + C141353 * C3649) * C188 +
             (C275 * C3575 + C141353 * C3867) * C141327) *
                C92) *
               C141499 -
           ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
            (C1279 + C1273) * C90 +
            ((C275 * C912 + C141353 * C1262) * C141327 +
             (C275 * C823 + C141353 * C1006) * C188) *
                C89) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
              C43032 * C5325 + C42875 * C5449) *
                 C188 +
             (C43030 * C189 + C42873 * C501 + C43031 * C1690 + C42874 * C2040 +
              C43032 * C5391 + C42875 * C5619) *
                 C141327) *
                C141462 +
            ((C43058 + C43059 + C43060) * C188 +
             (C43304 + C43305 + C43306) * C141327) *
                C141224) *
               C4148 -
           (((C45283 + C45284 + C45285) * C141327 +
             (C44919 + C44920 + C44921) * C188) *
                C141224 +
            ((C43032 * C21136 + C42875 * C21491 + C43031 * C5391 +
              C42874 * C5619 + C43030 * C1690 + C42873 * C2040) *
                 C141327 +
             (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
              C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                 C188) *
                C141462) *
               C141499) *
              C816 +
          ((((C43030 * C3490 + C42873 * C3646 + C43031 * C13205 +
              C42874 * C13374 + C43032 * C42109 + C42875 * C42293) *
                 C188 +
             (C43030 * C3572 + C42873 * C3864 + C43031 * C13294 +
              C42874 * C13614 + C43032 * C42197 + C42875 * C42553) *
                 C141327) *
                C141462 +
            ((C43030 * C3491 + C42873 * C3647 + C43031 * C13206 +
              C42874 * C13375 + C43032 * C47290 + C42875 * C47517) *
                 C188 +
             (C43030 * C3573 + C42873 * C3865 + C43031 * C13295 +
              C42874 * C13615 + C43032 * C47403 + C42875 * C47838) *
                 C141327) *
                C141224) *
               C141499 -
           (((C44214 + C44215 + C44216) * C141327 +
             (C43906 + C43907 + C43908) * C188) *
                C141224 +
            ((C43032 * C13294 + C42875 * C13614 + C43031 * C3572 +
              C42874 * C3864 + C43030 * C912 + C42873 * C1262) *
                 C141327 +
             (C43032 * C13205 + C42875 * C13374 + C43031 * C3490 +
              C42874 * C3646 + C43030 * C823 + C42873 * C1006) *
                 C188) *
                C141462) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezx[61] +=
        (-std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C275 +
             (C139366 * C276 + C141462 * C579 + C139356 * C277 +
              C141224 * C580) *
                 C141353) *
                C21819 +
            ((C23065 + C23066) * C275 + (C23424 + C23425) * C141353) * C21820 +
            C26094 * C21821) *
               C4148 -
           (((C27039 + C27040) * C141353 + (C26716 + C26717) * C275) * C21821 +
            ((C27041 + C27042) * C141353 + (C26720 + C26721) * C275) * C21820 +
            ((C139356 * C1783 + C141224 * C2125 + C139366 * C1784 +
              C141462 * C2126) *
                 C141353 +
             (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
              C141462 * C1606) *
                 C275) *
                C21819) *
               C141499) *
              C816 +
          ((((C26721 + C26720) * C275 + (C27042 + C27041) * C141353) * C21819 +
            ((C26717 + C26716) * C275 + (C27040 + C27039) * C141353) * C21820 +
            ((C139366 * C26351 + C141462 * C26353 + C139356 * C26352 +
              C141224 * C26354) *
                 C275 +
             (C139366 * C26579 + C141462 * C27028 + C139356 * C26580 +
              C141224 * C27029) *
                 C141353) *
                C21821) *
               C141499 -
           (((C26092 + C26093) * C141353 + (C25846 + C25847) * C275) * C21821 +
            ((C23427 + C23426) * C141353 + (C23070 + C23069) * C275) * C21820 +
            ((C23425 + C23424) * C141353 + (C23066 + C23065) * C275) * C21819) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141353) *
               C141327 * C4148 -
           ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
             C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
                C141353 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C275) *
               C141327 * C141499) *
              C816 +
          (((C101 * C3490 + C89 * C3494 + C103 * C3491 + C90 * C3495 +
             C105 * C3492 + C91 * C3496 + C107 * C3493 + C92 * C3497) *
                C275 +
            (C101 * C3646 + C89 * C3934 + C103 * C3647 + C90 * C3935 +
             C105 * C3648 + C91 * C3936 + C107 * C3649 + C92 * C3937) *
                C141353) *
               C141327 * C141499 -
           ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
             C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
                C141353 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C275) *
               C141327 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C43030 +
            (C139366 * C276 + C141462 * C579 + C139356 * C277 +
             C141224 * C580) *
                C42873 +
            (C45052 + C45053) * C43031 + (C45400 + C45401) * C42874 +
            (C45056 + C45057) * C43032 + (C45402 + C45403) * C42875) *
               C141327 * C4148 -
           ((C139356 * C21229 + C141224 * C21569 + C139366 * C21228 +
             C141462 * C21568) *
                C42875 +
            (C139356 * C21036 + C141224 * C21039 + C139366 * C21035 +
             C141462 * C21038) *
                C43032 +
            (C45403 + C45402) * C42874 + (C45057 + C45056) * C43031 +
            (C45401 + C45400) * C42873 + (C45053 + C45052) * C43030) *
               C141327 * C141499) *
              C816 +
          (((C26721 + C26720) * C43030 + (C27042 + C27041) * C42873 +
            (C47627 + C47628) * C43031 + (C47943 + C47944) * C42874 +
            (C139366 * C42109 + C141462 * C42111 + C139356 * C47290 +
             C141224 * C47291) *
                C43032 +
            (C139366 * C42293 + C141462 * C42629 + C139356 * C47517 +
             C141224 * C47937) *
                C42875) *
               C141327 * C141499 -
           ((C47944 + C47943) * C42875 + (C47628 + C47627) * C43032 +
            (C27041 + C27042) * C42874 + (C26720 + C26721) * C43031 +
            (C23425 + C23424) * C42873 + (C23066 + C23065) * C43030) *
               C141327 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[61] +=
        (-std::pow(Pi, 2.5) *
         (((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
              C21920 * C2960 + C21821 * C3026) *
                 C275 +
             (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
              C21920 * C3084 + C21821 * C3362) *
                 C141353) *
                C141462 +
            ((C21946 + C21947 + C21948) * C275 +
             (C22471 + C22472 + C22473) * C141353) *
                C141224) *
               C4148 -
           (((C24504 + C24505 + C24506) * C141353 +
             (C23868 + C23869 + C23870) * C275) *
                C141224 +
            ((C21920 * C10699 + C21821 * C11255 + C21919 * C3646 +
              C21820 * C4004 + C21918 * C1784 + C21819 * C2197) *
                 C141353 +
             (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
              C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
                 C275) *
                C141462) *
               C141499) *
              C816 +
          ((((C21918 * C3490 + C21819 * C3572 + C21919 * C10470 +
              C21820 * C10595 + C21920 * C26351 + C21821 * C26477) *
                 C275 +
             (C21918 * C3646 + C21819 * C4004 + C21919 * C10699 +
              C21820 * C11255 + C21920 * C26579 + C21821 * C27140) *
                 C141353) *
                C141462 +
            ((C21918 * C3491 + C21819 * C3573 + C21919 * C10471 +
              C21820 * C10596 + C21920 * C26352 + C21821 * C26478) *
                 C275 +
             (C21918 * C3647 + C21819 * C4005 + C21919 * C10700 +
              C21820 * C11256 + C21920 * C26580 + C21821 * C27141) *
                 C141353) *
                C141224) *
               C141499 -
           (((C23536 + C23537 + C23538) * C141353 +
             (C22812 + C22813 + C22814) * C275) *
                C141224 +
            ((C21920 * C9848 + C21821 * C10284 + C21919 * C3084 +
              C21820 * C3362 + C21918 * C1006 + C21819 * C1419) *
                 C141353 +
             (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 +
              C21820 * C3026 + C21918 * C823 + C21819 * C912) *
                 C275) *
                C141462) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C275 +
             (C188 * C276 + C141327 * C635) * C141353) *
                C89 +
            (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
               C4148 -
           ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
            (C2214 + C2208) * C90 +
            ((C188 * C1784 + C141327 * C2197) * C141353 +
             (C188 * C1601 + C141327 * C1690) * C275) *
                C89) *
               C141499) *
              C816 +
          ((((C188 * C3490 + C141327 * C3572) * C275 +
             (C188 * C3646 + C141327 * C4004) * C141353) *
                C89 +
            ((C188 * C3491 + C141327 * C3573) * C275 +
             (C188 * C3647 + C141327 * C4005) * C141353) *
                C90 +
            ((C188 * C3492 + C141327 * C3574) * C275 +
             (C188 * C3648 + C141327 * C4006) * C141353) *
                C91 +
            ((C188 * C3493 + C141327 * C3575) * C275 +
             (C188 * C3649 + C141327 * C4007) * C141353) *
                C92) *
               C141499 -
           ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
            (C1436 + C1430) * C90 +
            ((C188 * C1006 + C141327 * C1419) * C141353 +
             (C188 * C823 + C141327 * C912) * C275) *
                C89) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C43030 +
             (C188 * C276 + C141327 * C635) * C42873 + C15877 * C43031 +
             C16596 * C42874 + C21152 * C43032 + C21660 * C42875) *
                C141462 +
            (C43458 + C43459 + C43460 + C43461 + C43462 + C43463) * C141224) *
               C4148 -
           ((C45514 + C45508 + C45509 + C45510 + C45511 + C45512) * C141224 +
            ((C188 * C21228 + C141327 * C21654) * C42875 +
             (C188 * C21035 + C141327 * C21136) * C43032 + C21660 * C42874 +
             C21152 * C43031 + C16596 * C42873 + C15877 * C43030) *
                C141462) *
               C141499) *
              C816 +
          (((C18488 * C43030 + C19093 * C42873 + C47416 * C43031 +
             C48046 * C42874 + (C188 * C42109 + C141327 * C42197) * C43032 +
             (C188 * C42293 + C141327 * C42708) * C42875) *
                C141462 +
            (C14851 * C43030 + C15497 * C42873 + C43792 * C43031 +
             C44420 * C42874 + (C188 * C47290 + C141327 * C47403) * C43032 +
             (C188 * C47517 + C141327 * C48042) * C42875) *
                C141224) *
               C141499 -
           ((C44421 + C44415 + C44416 + C44417 + C44418 + C44419) * C141224 +
            (C48046 * C42875 + C47416 * C43032 + C19093 * C42874 +
             C18488 * C43031 + (C188 * C1006 + C141327 * C1419) * C42873 +
             (C188 * C823 + C141327 * C912) * C43030) *
                C141462) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[61] +=
        (-std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C21819 +
             C7709 * C21820 + C10372 * C21821) *
                C141462 +
            (C22551 + C22552 + C22553) * C141224) *
               C4148 -
           ((C24612 + C24607 + C24608) * C141224 +
            (C27249 * C21821 + C11367 * C21820 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C21819) *
                C141462) *
               C141499) *
              C816 +
          (((C11367 * C21819 + C27249 * C21820 +
             (C713 * C26351 + C27245 + C27245 + C141353 * C27240) * C21821) *
                C141462 +
            (C8709 * C21819 + C24611 * C21820 +
             (C713 * C26352 + C27246 + C27246 + C141353 * C27241) * C21821) *
                C141224) *
               C141499 -
           ((C23644 + C23639 + C23640) * C141224 +
            (C26253 * C21821 + C10372 * C21820 + C7709 * C21819) * C141462) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141327 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C4148 -
           (C2306 * C92 + C2307 * C91 + C2308 * C90 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141327 * C89) *
               C141499) *
              C816 +
          (((C713 * C3490 + C4079 + C4079 + C141353 * C4074) * C141327 * C89 +
            (C713 * C3491 + C4080 + C4080 + C141353 * C4075) * C141327 * C90 +
            (C713 * C3492 + C4081 + C4081 + C141353 * C4076) * C141327 * C91 +
            (C713 * C3493 + C4082 + C4082 + C141353 * C4077) * C141327 * C92) *
               C141499 -
           (C1528 * C92 + C1529 * C91 + C1530 * C90 +
            (C713 * C823 + C1517 + C1517 + C141353 * C1505) * C141327 * C89) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43543 * C108 + C43547 + C43547 + C42873 * C714 + C43544 * C1601 +
             C43548 + C43548 + C42874 * C2283 + C43545 * C5325 + C43549 +
             C43549 + C42875 * C5781) *
                C141327 * C141462 +
            (C43583 + C43584 + C43585) * C141327 * C141224) *
               C4148 -
           ((C45634 + C45635 + C45636) * C141327 * C141224 +
            (C43545 * C21035 + C45622 + C45622 + C42875 * C21734 +
             C43544 * C5325 + C45623 + C45623 + C42874 * C5781 +
             C43543 * C1601 + C45624 + C45624 + C42873 * C2283) *
                C141327 * C141462) *
               C141499) *
              C816 +
          (((C43543 * C3490 + C48146 + C48146 + C42873 * C4074 +
             C43544 * C13205 + C48147 + C48147 + C42874 * C13845 +
             C43545 * C42109 + C48148 + C48148 + C42875 * C42793) *
                C141327 * C141462 +
            (C43543 * C3491 + C48149 + C48149 + C42873 * C4075 +
             C43544 * C13206 + C48150 + C48150 + C42874 * C13846 +
             C43545 * C47290 + C48151 + C48151 + C42875 * C48144) *
                C141327 * C141224) *
               C141499 -
           ((C44541 + C44542 + C44543) * C141327 * C141224 +
            (C43545 * C13205 + C44529 + C44529 + C42875 * C13845 +
             C43544 * C3490 + C44530 + C44530 + C42874 * C4074 + C43543 * C823 +
             C44531 + C44531 + C42873 * C1505) *
                C141327 * C141462) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexx[62] +=
        (-std::pow(Pi, 2.5) *
         (((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
            C21828 + C21828 + C141224 * C121) *
               C141353 * C21819 +
           (C22691 + C22692) * C141353 * C21820 + C25582 * C21821) *
              C5322 -
          ((C26376 + C26377) * C141353 * C21821 +
           (C26378 + C26379) * C141353 * C21820 +
           (C21824 * C1600 + C23747 + C23747 + C141224 * C1610 +
            C21822 * C1601 + C23748 + C23748 + C141462 * C1611) *
               C141353 * C21819) *
              C5323 +
          ((C21822 * C5325 + C29094 + C29094 + C141462 * C5333 +
            C21824 * C5326 + C29095 + C29095 + C141224 * C5334) *
               C141353 * C21819 +
           (C21822 * C13205 + C29096 + C29096 + C141462 * C13211 +
            C21824 * C13206 + C29097 + C29097 + C141224 * C13212) *
               C141353 * C21820 +
           (C21822 * C29087 + C29098 + C29098 + C141462 * C29091 +
            C21824 * C29088 + C29099 + C29099 + C141224 * C29092) *
               C141353 * C21821) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
           C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
           C130 + C130 + C92 * C123) *
              C141353 * C141327 * C5322 -
          (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
           C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
           C100 * C1601 + C1617 + C1617 + C89 * C1611) *
              C141353 * C141327 * C5323 +
          (C100 * C5325 + C5338 + C5338 + C89 * C5333 + C102 * C5326 + C5339 +
           C5339 + C90 * C5334 + C104 * C5327 + C5340 + C5340 + C91 * C5335 +
           C106 * C5328 + C5341 + C5341 + C92 * C5336) *
              C141353 * C141327 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
            C21828 + C21828 + C141224 * C121) *
               C42873 +
           (C44678 + C44679) * C42874 + C49996 * C42875) *
              C141327 * C5322 -
          ((C50007 + C50008) * C42875 + (C44681 + C44680) * C42874 +
           (C44679 + C44678) * C42873) *
              C141327 * C5323 +
          (C49996 * C42873 + (C50008 + C50007) * C42874 +
           (C21822 * C49989 + C50001 + C50001 + C141462 * C49993 +
            C21824 * C49990 + C50002 + C50002 + C141224 * C49994) *
               C42875) *
              C141327 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[62] +=
        (-std::pow(Pi, 2.5) *
         (((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
            C21920 * C2960 + C21821 * C3026) *
               C139366 +
           (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
            C21920 * C2964 + C21821 * C3030) *
               C141462 +
           (C21946 + C21947 + C21948) * C139356 +
           (C21949 + C21950 + C21951) * C141224) *
              C141353 * C5322 -
          ((C23865 + C23866 + C23867) * C141224 +
           (C23868 + C23869 + C23870) * C139356 +
           (C21920 * C10473 + C21821 * C10598 + C21919 * C3494 +
            C21820 * C3576 + C21918 * C1606 + C21819 * C1695) *
               C141462 +
           (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
            C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
               C139366) *
              C141353 * C5323 +
          ((C21918 * C5325 + C21819 * C5391 + C21919 * C13205 +
            C21820 * C13294 + C21920 * C29087 + C21821 * C29173) *
               C139366 +
           (C21918 * C5329 + C21819 * C5395 + C21919 * C13208 +
            C21820 * C13297 + C21920 * C29089 + C21821 * C29175) *
               C141462 +
           (C21918 * C5326 + C21819 * C5392 + C21919 * C13206 +
            C21820 * C13295 + C21920 * C29088 + C21821 * C29174) *
               C139356 +
           (C21918 * C5330 + C21819 * C5396 + C21919 * C13209 +
            C21820 * C13298 + C21920 * C29090 + C21821 * C29176) *
               C141224) *
              C141353 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C188 * C108 + C141327 * C189) * C101 +
           (C188 * C114 + C141327 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C141353 * C5322 -
          (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
           C1714 * C90 + C1715 * C103 + (C188 * C1606 + C141327 * C1695) * C89 +
           (C188 * C1601 + C141327 * C1690) * C101) *
              C141353 * C5323 +
          ((C188 * C5325 + C141327 * C5391) * C101 +
           (C188 * C5329 + C141327 * C5395) * C89 +
           (C188 * C5326 + C141327 * C5392) * C103 +
           (C188 * C5330 + C141327 * C5396) * C90 +
           (C188 * C5327 + C141327 * C5393) * C105 +
           (C188 * C5331 + C141327 * C5397) * C91 +
           (C188 * C5328 + C141327 * C5394) * C107 +
           (C188 * C5332 + C141327 * C5398) * C92) *
              C141353 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C139366 +
            (C188 * C114 + C141327 * C195) * C141462 + C218 * C139356 +
            C219 * C141224) *
               C42873 +
           (C44784 + C44785 + C44786 + C44787) * C42874 + C50097 * C42875) *
              C5322 -
          ((C50088 + C50089 + C50098 + C50099) * C42875 +
           (C44791 + C44790 + C44789 + C44788) * C42874 +
           (C44787 + C44786 + C44785 + C44784) * C42873) *
              C5323 +
          (C50097 * C42873 + (C50099 + C50098 + C50089 + C50088) * C42874 +
           ((C188 * C49989 + C141327 * C50082) * C139366 +
            (C188 * C49991 + C141327 * C50084) * C141462 +
            (C188 * C49990 + C141327 * C50083) * C139356 +
            (C188 * C49992 + C141327 * C50085) * C141224) *
               C42875) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[62] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C139366 +
            (C275 * C114 + C141353 * C282) * C141462 + C305 * C139356 +
            C306 * C141224) *
               C21819 +
           (C22913 + C22914 + C22915 + C22916) * C21820 + C25755 * C21821) *
              C5322 -
          ((C26584 + C26585 + C26596 + C26597) * C21821 +
           (C26590 + C26591 + C26592 + C26593) * C21820 +
           (C1808 * C141224 + C1809 * C139356 +
            (C275 * C1606 + C141353 * C1789) * C141462 +
            (C275 * C1601 + C141353 * C1784) * C139366) *
               C21819) *
              C5323 +
          (((C275 * C5325 + C141353 * C5449) * C139366 +
            (C275 * C5329 + C141353 * C5453) * C141462 +
            (C275 * C5326 + C141353 * C5450) * C139356 +
            (C275 * C5330 + C141353 * C5454) * C141224) *
               C21819 +
           ((C275 * C13205 + C141353 * C13374) * C139366 +
            (C275 * C13208 + C141353 * C13377) * C141462 +
            (C275 * C13206 + C141353 * C13375) * C139356 +
            (C275 * C13209 + C141353 * C13378) * C141224) *
               C21820 +
           ((C275 * C29087 + C141353 * C29251) * C139366 +
            (C275 * C29089 + C141353 * C29253) * C141462 +
            (C275 * C29088 + C141353 * C29252) * C139356 +
            (C275 * C29090 + C141353 * C29254) * C141224) *
               C21821) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C275 * C108 + C141353 * C276) * C101 +
           (C275 * C114 + C141353 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C141327 * C5322 -
          (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
           C1808 * C90 + C1809 * C103 + (C275 * C1606 + C141353 * C1789) * C89 +
           (C275 * C1601 + C141353 * C1784) * C101) *
              C141327 * C5323 +
          ((C275 * C5325 + C141353 * C5449) * C101 +
           (C275 * C5329 + C141353 * C5453) * C89 +
           (C275 * C5326 + C141353 * C5450) * C103 +
           (C275 * C5330 + C141353 * C5454) * C90 +
           (C275 * C5327 + C141353 * C5451) * C105 +
           (C275 * C5331 + C141353 * C5455) * C91 +
           (C275 * C5328 + C141353 * C5452) * C107 +
           (C275 * C5332 + C141353 * C5456) * C92) *
              C141327 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
            C43032 * C5325 + C42875 * C5449) *
               C139366 +
           (C43030 * C114 + C42873 * C282 + C43031 * C1606 + C42874 * C1789 +
            C43032 * C5329 + C42875 * C5453) *
               C141462 +
           (C43058 + C43059 + C43060) * C139356 +
           (C43061 + C43062 + C43063) * C141224) *
              C141327 * C5322 -
          ((C44916 + C44917 + C44918) * C141224 +
           (C44919 + C44920 + C44921) * C139356 +
           (C43032 * C21038 + C42875 * C21231 + C43031 * C5329 +
            C42874 * C5453 + C43030 * C1606 + C42873 * C1789) *
               C141462 +
           (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
            C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
               C139366) *
              C141327 * C5323 +
          ((C43030 * C5325 + C42873 * C5449 + C43031 * C21035 +
            C42874 * C21228 + C43032 * C49989 + C42875 * C50173) *
               C139366 +
           (C43030 * C5329 + C42873 * C5453 + C43031 * C21038 +
            C42874 * C21231 + C43032 * C49991 + C42875 * C50175) *
               C141462 +
           (C43030 * C5326 + C42873 * C5450 + C43031 * C21036 +
            C42874 * C21229 + C43032 * C49990 + C42875 * C50174) *
               C139356 +
           (C43030 * C5330 + C42873 * C5454 + C43031 * C21039 +
            C42874 * C21232 + C43032 * C49992 + C42875 * C50176) *
               C141224) *
              C141327 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[62] +=
        (-std::pow(Pi, 2.5) *
         (((C139366 * C108 + C141462 * C114 + C139356 * C109 + C141224 * C115) *
               C21918 +
           (C139366 * C189 + C141462 * C362 + C139356 * C190 + C141224 * C363) *
               C21819 +
           (C23065 + C23066) * C21919 + (C23067 + C23068) * C21820 +
           C25834 * C21920 + C25835 * C21821) *
              C141353 * C5322 -
          ((C26714 + C26715) * C21821 + (C26716 + C26717) * C21920 +
           (C26718 + C26719) * C21820 + (C26720 + C26721) * C21919 +
           (C139356 * C1689 + C141224 * C1877 + C139366 * C1690 +
            C141462 * C1878) *
               C21819 +
           (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
            C141462 * C1606) *
               C21918) *
              C141353 * C5323 +
          ((C139366 * C5325 + C141462 * C5329 + C139356 * C5326 +
            C141224 * C5330) *
               C21918 +
           (C139366 * C5391 + C141462 * C5507 + C139356 * C5392 +
            C141224 * C5508) *
               C21819 +
           (C139366 * C13205 + C141462 * C13208 + C139356 * C13206 +
            C141224 * C13209) *
               C21919 +
           (C139366 * C13294 + C141462 * C13454 + C139356 * C13295 +
            C141224 * C13455) *
               C21820 +
           (C139366 * C29087 + C141462 * C29089 + C139356 * C29088 +
            C141224 * C29090) *
               C21920 +
           (C139366 * C29173 + C141462 * C29329 + C139356 * C29174 +
            C141224 * C29330) *
               C21821) *
              C141353 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C141327) *
              C141353 * C5322 -
          ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
            C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
               C141327 +
           (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
            C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
               C188) *
              C141353 * C5323 +
          ((C101 * C5325 + C89 * C5329 + C103 * C5326 + C90 * C5330 +
            C105 * C5327 + C91 * C5331 + C107 * C5328 + C92 * C5332) *
               C188 +
           (C101 * C5391 + C89 * C5507 + C103 * C5392 + C90 * C5508 +
            C105 * C5393 + C91 * C5509 + C107 * C5394 + C92 * C5510) *
               C141327) *
              C141353 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C188 +
            (C139366 * C189 + C141462 * C362 + C139356 * C190 +
             C141224 * C363) *
                C141327) *
               C42873 +
           ((C45052 + C45053) * C188 + (C45054 + C45055) * C141327) * C42874 +
           C50270 * C42875) *
              C5322 -
          (((C50266 + C50267) * C141327 + (C50268 + C50269) * C188) * C42875 +
           ((C45059 + C45058) * C141327 + (C45057 + C45056) * C188) * C42874 +
           ((C45055 + C45054) * C141327 + (C45053 + C45052) * C188) * C42873) *
              C5323 +
          (C50270 * C42873 +
           ((C50269 + C50268) * C188 + (C50267 + C50266) * C141327) * C42874 +
           ((C139366 * C49989 + C141462 * C49991 + C139356 * C49990 +
             C141224 * C49992) *
                C188 +
            (C139366 * C50082 + C141462 * C50251 + C139356 * C50083 +
             C141224 * C50252) *
                C141327) *
               C42875) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[62] +=
        (-std::pow(Pi, 2.5) *
         (((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
            C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
            C22185 + C21821 * C3196) *
               C141462 +
           (C22219 + C22220 + C22221) * C141224) *
              C141353 * C5322 -
          ((C24192 + C24193 + C24194) * C141224 +
           (C22181 * C10470 + C24180 + C24180 + C21821 * C10934 +
            C22180 * C3490 + C24181 + C24181 + C21820 * C3790 + C22179 * C1601 +
            C24182 + C24182 + C21819 * C1949) *
               C141462) *
              C141353 * C5323 +
          ((C22179 * C5325 + C29408 + C29408 + C21819 * C5561 +
            C22180 * C13205 + C29409 + C29409 + C21820 * C13531 +
            C22181 * C29087 + C29410 + C29410 + C21821 * C29405) *
               C141462 +
           (C22179 * C5326 + C29411 + C29411 + C21819 * C5562 +
            C22180 * C13206 + C29412 + C29412 + C21820 * C13532 +
            C22181 * C29088 + C29413 + C29413 + C21821 * C29406) *
               C141224) *
              C141353 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C141327 * C419) * C89 + C448 * C90 +
           C449 * C91 + C450 * C92) *
              C141353 * C5322 -
          (C1969 * C92 + C1970 * C91 + C1971 * C90 +
           (C418 * C1601 + C1961 + C1961 + C141327 * C1949) * C89) *
              C141353 * C5323 +
          ((C418 * C5325 + C5566 + C5566 + C141327 * C5561) * C89 +
           (C418 * C5326 + C5567 + C5567 + C141327 * C5562) * C90 +
           (C418 * C5327 + C5568 + C5568 + C141327 * C5563) * C91 +
           (C418 * C5328 + C5569 + C5569 + C141327 * C5564) * C92) *
              C141353 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C141462 +
            C448 * C141224) *
               C42873 +
           (C45166 + C45167) * C42874 + C50347 * C42875) *
              C5322 -
          ((C50348 + C50356) * C42875 + (C45169 + C45168) * C42874 +
           (C45167 + C45166) * C42873) *
              C5323 +
          (C50347 * C42873 + (C50356 + C50348) * C42874 +
           ((C418 * C49989 + C50351 + C50351 + C141327 * C50344) * C141462 +
            (C418 * C49990 + C50352 + C50352 + C141327 * C50345) * C141224) *
               C42875) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyz[62] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C21918 +
            (C275 * C189 + C141353 * C501) * C21819 + C6988 * C21919 +
            C7366 * C21820 + C9864 * C21920 + C10124 * C21821) *
               C141462 +
           (C22299 + C22300 + C22301 + C22302 + C22303 + C22304) * C141224) *
              C5322 -
          ((C24301 + C24295 + C24296 + C24297 + C24298 + C24299) * C141224 +
           (C26930 * C21821 + C26595 * C21920 + C11047 * C21820 +
            C10715 * C21919 + (C275 * C1690 + C141353 * C2040) * C21819 +
            (C275 * C1601 + C141353 * C1784) * C21918) *
               C141462) *
              C5323 +
          (((C275 * C5325 + C141353 * C5449) * C21918 +
            (C275 * C5391 + C141353 * C5619) * C21819 +
            (C275 * C13205 + C141353 * C13374) * C21919 +
            (C275 * C13294 + C141353 * C13614) * C21820 +
            (C275 * C29087 + C141353 * C29251) * C21920 +
            (C275 * C29173 + C141353 * C29487) * C21821) *
               C141462 +
           ((C275 * C5326 + C141353 * C5450) * C21918 +
            (C275 * C5392 + C141353 * C5620) * C21819 +
            (C275 * C13206 + C141353 * C13375) * C21919 +
            (C275 * C13295 + C141353 * C13615) * C21820 +
            (C275 * C29088 + C141353 * C29252) * C21920 +
            (C275 * C29174 + C141353 * C29488) * C21821) *
               C141224) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C188 +
            (C275 * C189 + C141353 * C501) * C141327) *
               C89 +
           (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
              C5322 -
          ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
           (C2057 + C2051) * C90 +
           ((C275 * C1690 + C141353 * C2040) * C141327 +
            (C275 * C1601 + C141353 * C1784) * C188) *
               C89) *
              C5323 +
          (((C275 * C5325 + C141353 * C5449) * C188 +
            (C275 * C5391 + C141353 * C5619) * C141327) *
               C89 +
           ((C275 * C5326 + C141353 * C5450) * C188 +
            (C275 * C5392 + C141353 * C5620) * C141327) *
               C90 +
           ((C275 * C5327 + C141353 * C5451) * C188 +
            (C275 * C5393 + C141353 * C5621) * C141327) *
               C91 +
           ((C275 * C5328 + C141353 * C5452) * C188 +
            (C275 * C5394 + C141353 * C5622) * C141327) *
               C92) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
             C43032 * C5325 + C42875 * C5449) *
                C188 +
            (C43030 * C189 + C42873 * C501 + C43031 * C1690 + C42874 * C2040 +
             C43032 * C5391 + C42875 * C5619) *
                C141327) *
               C141462 +
           ((C43058 + C43059 + C43060) * C188 +
            (C43304 + C43305 + C43306) * C141327) *
               C141224) *
              C5322 -
          (((C45283 + C45284 + C45285) * C141327 +
            (C44919 + C44920 + C44921) * C188) *
               C141224 +
           ((C43032 * C21136 + C42875 * C21491 + C43031 * C5391 +
             C42874 * C5619 + C43030 * C1690 + C42873 * C2040) *
                C141327 +
            (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
             C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                C188) *
               C141462) *
              C5323 +
          (((C43030 * C5325 + C42873 * C5449 + C43031 * C21035 +
             C42874 * C21228 + C43032 * C49989 + C42875 * C50173) *
                C188 +
            (C43030 * C5391 + C42873 * C5619 + C43031 * C21136 +
             C42874 * C21491 + C43032 * C50082 + C42875 * C50430) *
                C141327) *
               C141462 +
           ((C43030 * C5326 + C42873 * C5450 + C43031 * C21036 +
             C42874 * C21229 + C43032 * C49990 + C42875 * C50174) *
                C188 +
            (C43030 * C5392 + C42873 * C5620 + C43031 * C21137 +
             C42874 * C21492 + C43032 * C50083 + C42875 * C50431) *
                C141327) *
               C141224) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eezx[62] +=
        (-std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C275 +
            (C139366 * C276 + C141462 * C579 + C139356 * C277 +
             C141224 * C580) *
                C141353) *
               C21819 +
           ((C23065 + C23066) * C275 + (C23424 + C23425) * C141353) * C21820 +
           C26094 * C21821) *
              C5322 -
          (((C27039 + C27040) * C141353 + (C26716 + C26717) * C275) * C21821 +
           ((C27041 + C27042) * C141353 + (C26720 + C26721) * C275) * C21820 +
           ((C139356 * C1783 + C141224 * C2125 + C139366 * C1784 +
             C141462 * C2126) *
                C141353 +
            (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
             C141462 * C1606) *
                C275) *
               C21819) *
              C5323 +
          (((C139366 * C5325 + C141462 * C5329 + C139356 * C5326 +
             C141224 * C5330) *
                C275 +
            (C139366 * C5449 + C141462 * C5673 + C139356 * C5450 +
             C141224 * C5674) *
                C141353) *
               C21819 +
           ((C139366 * C13205 + C141462 * C13208 + C139356 * C13206 +
             C141224 * C13209) *
                C275 +
            (C139366 * C13374 + C141462 * C13691 + C139356 * C13375 +
             C141224 * C13692) *
                C141353) *
               C21820 +
           ((C139366 * C29087 + C141462 * C29089 + C139356 * C29088 +
             C141224 * C29090) *
                C275 +
            (C139366 * C29251 + C141462 * C29563 + C139356 * C29252 +
             C141224 * C29564) *
                C141353) *
               C21821) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C141353) *
              C141327 * C5322 -
          ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
            C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
               C141353 +
           (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
            C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
               C275) *
              C141327 * C5323 +
          ((C101 * C5325 + C89 * C5329 + C103 * C5326 + C90 * C5330 +
            C105 * C5327 + C91 * C5331 + C107 * C5328 + C92 * C5332) *
               C275 +
           (C101 * C5449 + C89 * C5673 + C103 * C5450 + C90 * C5674 +
            C105 * C5451 + C91 * C5675 + C107 * C5452 + C92 * C5676) *
               C141353) *
              C141327 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C139366 * C108 + C141462 * C114 + C139356 * C109 + C141224 * C115) *
               C43030 +
           (C139366 * C276 + C141462 * C579 + C139356 * C277 + C141224 * C580) *
               C42873 +
           (C45052 + C45053) * C43031 + (C45400 + C45401) * C42874 +
           C50254 * C43032 + C50509 * C42875) *
              C141327 * C5322 -
          ((C50514 + C50515) * C42875 + (C50268 + C50269) * C43032 +
           (C45403 + C45402) * C42874 + (C45057 + C45056) * C43031 +
           (C45401 + C45400) * C42873 + (C45053 + C45052) * C43030) *
              C141327 * C5323 +
          (C50254 * C43030 + C50509 * C42873 + (C50269 + C50268) * C43031 +
           (C50515 + C50514) * C42874 +
           (C139366 * C49989 + C141462 * C49991 + C139356 * C49990 +
            C141224 * C49992) *
               C43032 +
           (C139366 * C50173 + C141462 * C50506 + C139356 * C50174 +
            C141224 * C50507) *
               C42875) *
              C141327 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[62] +=
        (-std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C275 +
            (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
             C21920 * C3084 + C21821 * C3362) *
                C141353) *
               C141462 +
           ((C21946 + C21947 + C21948) * C275 +
            (C22471 + C22472 + C22473) * C141353) *
               C141224) *
              C5322 -
          (((C24504 + C24505 + C24506) * C141353 +
            (C23868 + C23869 + C23870) * C275) *
               C141224 +
           ((C21920 * C10699 + C21821 * C11255 + C21919 * C3646 +
             C21820 * C4004 + C21918 * C1784 + C21819 * C2197) *
                C141353 +
            (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
             C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
                C275) *
               C141462) *
              C5323 +
          (((C21918 * C5325 + C21819 * C5391 + C21919 * C13205 +
             C21820 * C13294 + C21920 * C29087 + C21821 * C29173) *
                C275 +
            (C21918 * C5449 + C21819 * C5727 + C21919 * C13374 +
             C21820 * C13768 + C21920 * C29251 + C21821 * C29639) *
                C141353) *
               C141462 +
           ((C21918 * C5326 + C21819 * C5392 + C21919 * C13206 +
             C21820 * C13295 + C21920 * C29088 + C21821 * C29174) *
                C275 +
            (C21918 * C5450 + C21819 * C5728 + C21919 * C13375 +
             C21820 * C13769 + C21920 * C29252 + C21821 * C29640) *
                C141353) *
               C141224) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C275 +
            (C188 * C276 + C141327 * C635) * C141353) *
               C89 +
           (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
              C5322 -
          ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
           (C2214 + C2208) * C90 +
           ((C188 * C1784 + C141327 * C2197) * C141353 +
            (C188 * C1601 + C141327 * C1690) * C275) *
               C89) *
              C5323 +
          (((C188 * C5325 + C141327 * C5391) * C275 +
            (C188 * C5449 + C141327 * C5727) * C141353) *
               C89 +
           ((C188 * C5326 + C141327 * C5392) * C275 +
            (C188 * C5450 + C141327 * C5728) * C141353) *
               C90 +
           ((C188 * C5327 + C141327 * C5393) * C275 +
            (C188 * C5451 + C141327 * C5729) * C141353) *
               C91 +
           ((C188 * C5328 + C141327 * C5394) * C275 +
            (C188 * C5452 + C141327 * C5730) * C141353) *
               C92) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C43030 +
            (C188 * C276 + C141327 * C635) * C42873 + C15877 * C43031 +
            C16596 * C42874 + C21152 * C43032 + C21660 * C42875) *
               C141462 +
           (C43458 + C43459 + C43460 + C43461 + C43462 + C43463) * C141224) *
              C5322 -
          ((C45514 + C45508 + C45509 + C45510 + C45511 + C45512) * C141224 +
           (C50594 * C42875 + C50096 * C43032 + C21660 * C42874 +
            C21152 * C43031 + C16596 * C42873 + C15877 * C43030) *
               C141462) *
              C5323 +
          ((C21152 * C43030 + C21660 * C42873 + C50096 * C43031 +
            C50594 * C42874 + (C188 * C49989 + C141327 * C50082) * C43032 +
            (C188 * C50173 + C141327 * C50589) * C42875) *
               C141462 +
           (C15882 * C43030 + C16598 * C42873 + C44805 * C43031 +
            C45513 * C42874 + (C188 * C49990 + C141327 * C50083) * C43032 +
            (C188 * C50174 + C141327 * C50590) * C42875) *
               C141224) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[62] +=
        (-std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C21819 +
            C7709 * C21820 + C10372 * C21821) *
               C141462 +
           (C22551 + C22552 + C22553) * C141224) *
              C5322 -
          ((C24612 + C24607 + C24608) * C141224 +
           (C27249 * C21821 + C11367 * C21820 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C21819) *
               C141462) *
              C5323 +
          (((C713 * C5325 + C5786 + C5786 + C141353 * C5781) * C21819 +
            (C713 * C13205 + C13849 + C13849 + C141353 * C13845) * C21820 +
            (C713 * C29087 + C29718 + C29718 + C141353 * C29715) * C21821) *
               C141462 +
           ((C713 * C5326 + C5787 + C5787 + C141353 * C5782) * C21819 +
            (C713 * C13206 + C13850 + C13850 + C141353 * C13846) * C21820 +
            (C713 * C29088 + C29719 + C29719 + C141353 * C29716) * C21821) *
               C141224) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141353 * C714) * C141327 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C5322 -
          (C2306 * C92 + C2307 * C91 + C2308 * C90 +
           (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141327 * C89) *
              C5323 +
          ((C713 * C5325 + C5786 + C5786 + C141353 * C5781) * C141327 * C89 +
           (C713 * C5326 + C5787 + C5787 + C141353 * C5782) * C141327 * C90 +
           (C713 * C5327 + C5788 + C5788 + C141353 * C5783) * C141327 * C91 +
           (C713 * C5328 + C5789 + C5789 + C141353 * C5784) * C141327 * C92) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C43543 * C108 + C43547 + C43547 + C42873 * C714 + C43544 * C1601 +
            C43548 + C43548 + C42874 * C2283 + C43545 * C5325 + C43549 +
            C43549 + C42875 * C5781) *
               C141327 * C141462 +
           (C43583 + C43584 + C43585) * C141327 * C141224) *
              C5322 -
          ((C45634 + C45635 + C45636) * C141327 * C141224 +
           (C43545 * C21035 + C45622 + C45622 + C42875 * C21734 +
            C43544 * C5325 + C45623 + C45623 + C42874 * C5781 + C43543 * C1601 +
            C45624 + C45624 + C42873 * C2283) *
               C141327 * C141462) *
              C5323 +
          ((C43543 * C5325 + C50671 + C50671 + C42873 * C5781 +
            C43544 * C21035 + C50672 + C50672 + C42874 * C21734 +
            C43545 * C49989 + C50673 + C50673 + C42875 * C50668) *
               C141327 * C141462 +
           (C43543 * C5326 + C50674 + C50674 + C42873 * C5782 +
            C43544 * C21036 + C50675 + C50675 + C42874 * C21735 +
            C43545 * C49990 + C50676 + C50676 + C42875 * C50669) *
               C141327 * C141224) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eexx[63] +=
        (-std::pow(Pi, 2.5) *
         (((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141353 *
               C29770 +
           (C29774 * C823 + C29778 + C29778 + C141219 * C833) * C141353 *
               C29771 +
           (C29774 * C2960 + C29779 + C29779 + C141219 * C2968) * C141353 *
               C29772 +
           (C29774 * C9667 + C29780 + C29780 + C141219 * C9673) * C141353 *
               C29773) *
              C141298 * C141281 * C97 -
          ((C29774 * C9668 + C29781 + C29781 + C141219 * C9674) * C141353 *
               C29773 +
           (C29774 * C2961 + C29782 + C29782 + C141219 * C2969) * C141353 *
               C29772 +
           (C29774 * C822 + C29783 + C29783 + C141219 * C832) * C141353 *
               C29771 +
           (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141353 *
               C29770) *
              C141298 * C141281 * C98 +
          ((C29774 * C110 + C29785 + C29785 + C141219 * C122) * C141353 *
               C29770 +
           (C29774 * C821 + C29786 + C29786 + C141219 * C831) * C141353 *
               C29771 +
           (C29774 * C2962 + C29787 + C29787 + C141219 * C2970) * C141353 *
               C29772 +
           (C29774 * C9669 + C29788 + C29788 + C141219 * C9675) * C141353 *
               C29773) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C5868 * C108 + C5875 + C5875 + C5863 * C120 +
                                C5870 * C109 + C5876 + C5876 + C5864 * C121 +
                                C5872 * C110 + C5877 + C5877 + C5865 * C122) *
                                   C141353 * C141478 +
                               (C5868 * C823 + C5878 + C5878 + C5863 * C833 +
                                C5870 * C822 + C5879 + C5879 + C5864 * C832 +
                                C5872 * C821 + C5880 + C5880 + C5865 * C831) *
                                   C141353 * C141341) *
                                  C141298 * C141281 * C97 -
                              ((C5872 * C820 + C5881 + C5881 + C5865 * C830 +
                                C5870 * C821 + C5882 + C5882 + C5864 * C831 +
                                C5868 * C822 + C5883 + C5883 + C5863 * C832) *
                                   C141353 * C141341 +
                               (C5872 * C111 + C5884 + C5884 + C5865 * C123 +
                                C5870 * C110 + C5885 + C5885 + C5864 * C122 +
                                C5868 * C109 + C5886 + C5886 + C5863 * C121) *
                                   C141353 * C141478) *
                                  C141298 * C141281 * C98 +
                              ((C5868 * C110 + C5887 + C5887 + C5863 * C122 +
                                C5870 * C111 + C5888 + C5888 + C5864 * C123 +
                                C5872 * C112 + C5889 + C5889 + C5865 * C124) *
                                   C141353 * C141478 +
                               (C5868 * C821 + C5890 + C5890 + C5863 * C831 +
                                C5870 * C820 + C5891 + C5891 + C5864 * C830 +
                                C5872 * C824 + C5892 + C5892 + C5865 * C834) *
                                   C141353 * C141341) *
                                  C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C42873 +
            C36781 * C42874 + C42123 * C42875) *
               C141478 +
           (C30301 * C42873 + C32721 * C42874 + C39350 * C42875) * C141341) *
              C141298 * C141281 * C97 -
          (((C29774 * C13206 + C36775 + C36775 + C141219 * C13212) * C42875 +
            C35762 * C42874 + C30304 * C42873) *
               C141341 +
           ((C29774 * C5326 + C36774 + C36774 + C141219 * C5334) * C42875 +
            C36782 * C42874 +
            (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C42873) *
               C141478) *
              C141298 * C141281 * C98 +
          (((C29774 * C110 + C29785 + C29785 + C141219 * C122) * C42873 +
            (C29774 * C1599 + C35055 + C35055 + C141219 * C1609) * C42874 +
            (C29774 * C5327 + C50751 + C50751 + C141219 * C5335) * C42875) *
               C141478 +
           ((C29774 * C821 + C29786 + C29786 + C141219 * C831) * C42873 +
            (C29774 * C3492 + C35056 + C35056 + C141219 * C3500) * C42874 +
            (C29774 * C13207 + C50752 + C50752 + C141219 * C13213) * C42875) *
               C141341) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexy[63] +=
        (-std::pow(Pi, 2.5) *
         (((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
            C29840 * C2960 + C29772 * C3026 + C29841 * C9667 + C29773 * C9768) *
               C29775 +
           (C29838 * C114 + C29770 * C195 + C29839 * C828 + C29771 * C917 +
            C29840 * C2964 + C29772 * C3030 + C29841 * C9670 + C29773 * C9771) *
               C141219) *
              C141353 * C141298 * C141281 * C97 -
          ((C29841 * C9671 + C29773 * C9772 + C29840 * C2965 + C29772 * C3031 +
            C29839 * C827 + C29771 * C916 + C29838 * C115 + C29770 * C196) *
               C141219 +
           (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
            C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
               C29775) *
              C141353 * C141298 * C141281 * C98 +
          ((C29838 * C110 + C29770 * C191 + C29839 * C821 + C29771 * C910 +
            C29840 * C2962 + C29772 * C3028 + C29841 * C9669 + C29773 * C9770) *
               C29775 +
           (C29838 * C116 + C29770 * C197 + C29839 * C826 + C29771 * C915 +
            C29840 * C2966 + C29772 * C3032 + C29841 * C9672 + C29773 * C9773) *
               C141219) *
              C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
               C5869 +
           (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
               C5863 +
           (C5993 + C5994) * C5871 + (C5995 + C5996) * C5864 + C6005 * C5873 +
           C6006 * C5865) *
              C141353 * C141298 * C141281 * C97 -
          ((C6001 + C6002) * C5865 + (C6003 + C6004) * C5873 +
           (C6000 + C5999) * C5864 + (C5998 + C5997) * C5871 +
           (C5996 + C5995) * C5863 + (C5994 + C5993) * C5869) *
              C141353 * C141298 * C141281 * C98 +
          (C6005 * C5869 + C6006 * C5863 + (C6004 + C6003) * C5871 +
           (C6002 + C6001) * C5864 +
           (C5966 * C112 + C141478 * C193 + C5967 * C824 + C141341 * C913) *
               C5873 +
           (C5966 * C118 + C141478 * C199 + C5967 * C829 + C141341 * C918) *
               C5865) *
              C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C29775 +
            (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                C141219) *
               C42873 +
           ((C5966 * C1601 + C141478 * C1690 + C5967 * C3490 +
             C141341 * C3572) *
                C29775 +
            (C5966 * C1606 + C141478 * C1695 + C5967 * C3494 +
             C141341 * C3576) *
                C141219) *
               C42874 +
           ((C5966 * C5325 + C141478 * C5391 + C5967 * C13205 +
             C141341 * C13294) *
                C29775 +
            (C5966 * C5329 + C141478 * C5395 + C5967 * C13208 +
             C141341 * C13297) *
                C141219) *
               C42875) *
              C141298 * C141281 * C97 -
          (((C5967 * C13209 + C141341 * C13298 + C5966 * C5330 +
             C141478 * C5396) *
                C141219 +
            (C5967 * C13206 + C141341 * C13295 + C5966 * C5326 +
             C141478 * C5392) *
                C29775) *
               C42875 +
           ((C7942 + C7943) * C141219 + (C7944 + C7945) * C29775) * C42874 +
           ((C5996 + C5995) * C141219 + (C5994 + C5993) * C29775) * C42873) *
              C141298 * C141281 * C98 +
          ((C6005 * C29775 + C6006 * C141219) * C42873 +
           ((C7941 + C7940) * C29775 + (C7939 + C7938) * C141219) * C42874 +
           ((C5966 * C5327 + C141478 * C5393 + C5967 * C13207 +
             C141341 * C13296) *
                C29775 +
            (C5966 * C5331 + C141478 * C5397 + C5967 * C13210 +
             C141341 * C13299) *
                C141219) *
               C42875) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexz[63] +=
        (-std::pow(Pi, 2.5) * ((((C275 * C108 + C141353 * C276) * C29775 +
                                 (C275 * C114 + C141353 * C282) * C141219) *
                                    C29770 +
                                (C6988 * C29775 + C6989 * C141219) * C29771 +
                                (C9864 * C29775 + C9863 * C141219) * C29772 +
                                (C25754 * C29775 + C25753 * C141219) * C29773) *
                                   C141298 * C141281 * C97 -
                               ((C22933 * C141219 + C22934 * C29775) * C29773 +
                                (C6992 * C141219 + C6993 * C29775) * C29772 +
                                (C1030 * C141219 + C1031 * C29775) * C29771 +
                                (C306 * C141219 + C305 * C29775) * C29770) *
                                   C141298 * C141281 * C98 +
                               ((C307 * C29775 + C308 * C141219) * C29770 +
                                (C1029 * C29775 + C1028 * C141219) * C29771 +
                                (C6991 * C29775 + C6990 * C141219) * C29772 +
                                ((C275 * C9669 + C141353 * C9850) * C29775 +
                                 (C275 * C9672 + C141353 * C9853) * C141219) *
                                    C29773) *
                                   C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C5869 +
            (C275 * C114 + C141353 * C282) * C5863 + C305 * C5871 +
            C306 * C5864 + C307 * C5873 + C308 * C5865) *
               C141478 +
           ((C275 * C823 + C141353 * C1006) * C5869 +
            (C275 * C828 + C141353 * C1011) * C5863 + C1031 * C5871 +
            C1030 * C5864 + C1029 * C5873 + C1028 * C5865) *
               C141341) *
              C141298 * C141281 * C97 -
          ((C1026 * C5865 + C1027 * C5873 + C1028 * C5864 + C1029 * C5871 +
            C1030 * C5863 + C1031 * C5869) *
               C141341 +
           (C310 * C5865 + C309 * C5873 + C308 * C5864 + C307 * C5871 +
            C306 * C5863 + C305 * C5869) *
               C141478) *
              C141298 * C141281 * C98 +
          ((C307 * C5869 + C308 * C5863 + C309 * C5871 + C310 * C5864 +
            C312 * C5873 + C311 * C5865) *
               C141478 +
           (C1029 * C5869 + C1028 * C5863 + C1027 * C5871 + C1026 * C5864 +
            (C275 * C824 + C141353 * C1007) * C5873 +
            (C275 * C829 + C141353 * C1012) * C5865) *
               C141341) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
             C43032 * C5325 + C42875 * C5449) *
                C29775 +
            (C43030 * C114 + C42873 * C282 + C43031 * C1606 + C42874 * C1789 +
             C43032 * C5329 + C42875 * C5453) *
                C141219) *
               C141478 +
           ((C43030 * C823 + C42873 * C1006 + C43031 * C3490 + C42874 * C3646 +
             C43032 * C13205 + C42875 * C13374) *
                C29775 +
            (C43030 * C828 + C42873 * C1011 + C43031 * C3494 + C42874 * C3650 +
             C43032 * C13208 + C42875 * C13377) *
                C141219) *
               C141341) *
              C141298 * C141281 * C97 -
          (((C43903 + C43904 + C43905) * C141219 +
            (C43906 + C43907 + C43908) * C29775) *
               C141341 +
           ((C43063 + C43062 + C43061) * C141219 +
            (C43060 + C43059 + C43058) * C29775) *
               C141478) *
              C141298 * C141281 * C98 +
          (((C43069 + C43068 + C43067) * C29775 +
            (C43066 + C43065 + C43064) * C141219) *
               C141478 +
           ((C43030 * C821 + C42873 * C1004 + C43031 * C3492 + C42874 * C3648 +
             C43032 * C13207 + C42875 * C13376) *
                C29775 +
            (C43030 * C826 + C42873 * C1009 + C43031 * C3496 + C42874 * C3652 +
             C43032 * C13210 + C42875 * C13379) *
                C141219) *
               C141341) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[63] +=
        (-std::pow(Pi, 2.5) * (((C29775 * C108 + C141219 * C114) * C29838 +
                                (C29775 * C189 + C141219 * C362) * C29770 +
                                (C29775 * C823 + C141219 * C828) * C29839 +
                                (C29775 * C912 + C141219 * C1100) * C29771 +
                                (C29775 * C2960 + C141219 * C2964) * C29840 +
                                (C29775 * C3026 + C141219 * C3142) * C29772 +
                                (C29775 * C9667 + C141219 * C9670) * C29841 +
                                (C29775 * C9768 + C141219 * C9940) * C29773) *
                                   C141353 * C141298 * C141281 * C97 -
                               ((C29775 * C9769 + C141219 * C9941) * C29773 +
                                (C29775 * C9668 + C141219 * C9671) * C29841 +
                                (C29775 * C3027 + C141219 * C3143) * C29772 +
                                (C29775 * C2961 + C141219 * C2965) * C29840 +
                                (C29775 * C911 + C141219 * C1099) * C29771 +
                                (C29775 * C822 + C141219 * C827) * C29839 +
                                (C29775 * C190 + C141219 * C363) * C29770 +
                                (C29775 * C109 + C141219 * C115) * C29838) *
                                   C141353 * C141298 * C141281 * C98 +
                               ((C29775 * C110 + C141219 * C116) * C29838 +
                                (C29775 * C191 + C141219 * C364) * C29770 +
                                (C29775 * C821 + C141219 * C826) * C29839 +
                                (C29775 * C910 + C141219 * C1098) * C29771 +
                                (C29775 * C2962 + C141219 * C2966) * C29840 +
                                (C29775 * C3028 + C141219 * C3144) * C29772 +
                                (C29775 * C9669 + C141219 * C9672) * C29841 +
                                (C29775 * C9770 + C141219 * C9942) * C29773) *
                                   C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                                C5864 * C115 + C5873 * C110 + C5865 * C116) *
                                   C5966 +
                               (C5869 * C189 + C5863 * C362 + C5871 * C190 +
                                C5864 * C363 + C5873 * C191 + C5865 * C364) *
                                   C141478 +
                               (C5869 * C823 + C5863 * C828 + C5871 * C822 +
                                C5864 * C827 + C5873 * C821 + C5865 * C826) *
                                   C5967 +
                               (C5869 * C912 + C5863 * C1100 + C5871 * C911 +
                                C5864 * C1099 + C5873 * C910 + C5865 * C1098) *
                                   C141341) *
                                  C141353 * C141298 * C141281 * C97 -
                              ((C5873 * C909 + C5865 * C1097 + C5871 * C910 +
                                C5864 * C1098 + C5869 * C911 + C5863 * C1099) *
                                   C141341 +
                               (C5873 * C820 + C5865 * C825 + C5871 * C821 +
                                C5864 * C826 + C5869 * C822 + C5863 * C827) *
                                   C5967 +
                               (C5873 * C192 + C5865 * C365 + C5871 * C191 +
                                C5864 * C364 + C5869 * C190 + C5863 * C363) *
                                   C141478 +
                               (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                                C5864 * C116 + C5869 * C109 + C5863 * C115) *
                                   C5966) *
                                  C141353 * C141298 * C141281 * C98 +
                              ((C5869 * C110 + C5863 * C116 + C5871 * C111 +
                                C5864 * C117 + C5873 * C112 + C5865 * C118) *
                                   C5966 +
                               (C5869 * C191 + C5863 * C364 + C5871 * C192 +
                                C5864 * C365 + C5873 * C193 + C5865 * C366) *
                                   C141478 +
                               (C5869 * C821 + C5863 * C826 + C5871 * C820 +
                                C5864 * C825 + C5873 * C824 + C5865 * C829) *
                                   C5967 +
                               (C5869 * C910 + C5863 * C1098 + C5871 * C909 +
                                C5864 * C1097 + C5873 * C913 + C5865 * C1101) *
                                   C141341) *
                                  C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C5966 +
            (C29775 * C189 + C141219 * C362) * C141478 + C30547 * C5967 +
            C30548 * C141341) *
               C42873 +
           (C37111 * C5966 + C37112 * C141478 + C32957 * C5967 +
            C32956 * C141341) *
               C42874 +
           (C42383 * C5966 + C42382 * C141478 + C39706 * C5967 +
            C39705 * C141341) *
               C42875) *
              C141298 * C141281 * C97 -
          (((C29775 * C13295 + C141219 * C13455) * C141341 +
            (C29775 * C13206 + C141219 * C13209) * C5967 +
            (C29775 * C5392 + C141219 * C5508) * C141478 +
            (C29775 * C5326 + C141219 * C5330) * C5966) *
               C42875 +
           (C36105 * C141341 + C36104 * C5967 + C37114 * C141478 +
            C37113 * C5966) *
               C42874 +
           (C30554 * C141341 + C30553 * C5967 +
            (C29775 * C190 + C141219 * C363) * C141478 +
            (C29775 * C109 + C141219 * C115) * C5966) *
               C42873) *
              C141298 * C141281 * C98 +
          (((C29775 * C110 + C141219 * C116) * C5966 +
            (C29775 * C191 + C141219 * C364) * C141478 +
            (C29775 * C821 + C141219 * C826) * C5967 +
            (C29775 * C910 + C141219 * C1098) * C141341) *
               C42873 +
           ((C29775 * C1599 + C141219 * C1604) * C5966 +
            (C29775 * C1688 + C141219 * C1876) * C141478 +
            (C29775 * C3492 + C141219 * C3496) * C5967 +
            (C29775 * C3574 + C141219 * C3722) * C141341) *
               C42874 +
           ((C29775 * C5327 + C141219 * C5331) * C5966 +
            (C29775 * C5393 + C141219 * C5509) * C141478 +
            (C29775 * C13207 + C141219 * C13210) * C5967 +
            (C29775 * C13296 + C141219 * C13456) * C141341) *
               C42875) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[63] +=
        (-std::pow(Pi, 2.5) *
         ((C29992 * C108 + C29997 + C29997 + C29770 * C419 + C29993 * C823 +
           C29998 + C29998 + C29771 * C1171 + C29994 * C2960 + C29999 + C29999 +
           C29772 * C3196 + C29995 * C9667 + C30000 + C30000 +
           C29773 * C10035) *
              C141219 * C141353 * C141298 * C141281 * C97 -
          (C29995 * C9668 + C30001 + C30001 + C29773 * C10036 + C29994 * C2961 +
           C30002 + C30002 + C29772 * C3197 + C29993 * C822 + C30003 + C30003 +
           C29771 * C1170 + C29992 * C109 + C30004 + C30004 + C29770 * C420) *
              C141219 * C141353 * C141298 * C141281 * C98 +
          (C29992 * C110 + C30005 + C30005 + C29770 * C421 + C29993 * C821 +
           C30006 + C30006 + C29771 * C1169 + C29994 * C2962 + C30007 + C30007 +
           C29772 * C3198 + C29995 * C9669 + C30008 + C30008 +
           C29773 * C10037) *
              C141219 * C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C6228 * C108 + C6231 + C6231 + C141478 * C419 + C6229 * C823 +
            C6232 + C6232 + C141341 * C1171) *
               C5863 +
           (C6265 + C6266) * C5864 + C6271 * C5865) *
              C141353 * C141298 * C141281 * C97 -
          ((C6269 + C6270) * C5865 + (C6268 + C6267) * C5864 +
           (C6266 + C6265) * C5863) *
              C141353 * C141298 * C141281 * C98 +
          (C6271 * C5863 + (C6270 + C6269) * C5864 +
           (C6228 * C112 + C6251 + C6251 + C141478 * C423 + C6229 * C824 +
            C6252 + C6252 + C141341 * C1172) *
               C5865) *
              C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C6228 * C108 + C6231 + C6231 + C141478 * C419 + C6229 * C823 +
            C6232 + C6232 + C141341 * C1171) *
               C141219 * C42873 +
           (C6228 * C1601 + C8265 + C8265 + C141478 * C1949 + C6229 * C3490 +
            C8264 + C8264 + C141341 * C3790) *
               C141219 * C42874 +
           (C6228 * C5325 + C13535 + C13535 + C141478 * C5561 + C6229 * C13205 +
            C13536 + C13536 + C141341 * C13531) *
               C141219 * C42875) *
              C141298 * C141281 * C97 -
          ((C6229 * C13206 + C13538 + C13538 + C141341 * C13532 +
            C6228 * C5326 + C13537 + C13537 + C141478 * C5562) *
               C141219 * C42875 +
           (C8278 + C8279) * C141219 * C42874 +
           (C6266 + C6265) * C141219 * C42873) *
              C141298 * C141281 * C98 +
          (C6271 * C141219 * C42873 + (C8277 + C8276) * C141219 * C42874 +
           (C6228 * C5327 + C13539 + C13539 + C141478 * C5563 + C6229 * C13207 +
            C13540 + C13540 + C141341 * C13533) *
               C141219 * C42875) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[63] +=
        (-std::pow(Pi, 2.5) *
         (((C275 * C108 + C141353 * C276) * C29838 +
           (C275 * C189 + C141353 * C501) * C29770 + C6988 * C29839 +
           C7366 * C29771 + C9864 * C29840 + C10124 * C29772 + C25754 * C29841 +
           C26008 * C29773) *
              C141219 * C141298 * C141281 * C97 -
          (C23308 * C29773 + C22934 * C29841 + C7368 * C29772 + C6993 * C29840 +
           C1276 * C29771 + C1031 * C29839 + C520 * C29770 + C305 * C29838) *
              C141219 * C141298 * C141281 * C98 +
          (C307 * C29838 + C521 * C29770 + C1029 * C29839 + C1275 * C29771 +
           C6991 * C29840 + C7367 * C29772 +
           (C275 * C9669 + C141353 * C9850) * C29841 +
           (C275 * C9770 + C141353 * C10120) * C29773) *
              C141219 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C5966 +
            (C275 * C189 + C141353 * C501) * C141478 +
            (C275 * C823 + C141353 * C1006) * C5967 +
            (C275 * C912 + C141353 * C1262) * C141341) *
               C5863 +
           (C6346 + C6347 + C6348 + C6349) * C5864 + C6360 * C5865) *
              C141298 * C141281 * C97 -
          ((C6354 + C6355 + C6356 + C6357) * C5865 +
           (C6353 + C6352 + C6351 + C6350) * C5864 +
           (C6349 + C6348 + C6347 + C6346) * C5863) *
              C141298 * C141281 * C98 +
          (C6360 * C5863 + (C6357 + C6356 + C6355 + C6354) * C5864 +
           (C312 * C5966 + C523 * C141478 +
            (C275 * C824 + C141353 * C1007) * C5967 +
            (C275 * C913 + C141353 * C1263) * C141341) *
               C5865) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
            C43032 * C5325 + C42875 * C5449) *
               C5966 +
           (C43030 * C189 + C42873 * C501 + C43031 * C1690 + C42874 * C2040 +
            C43032 * C5391 + C42875 * C5619) *
               C141478 +
           (C43030 * C823 + C42873 * C1006 + C43031 * C3490 + C42874 * C3646 +
            C43032 * C13205 + C42875 * C13374) *
               C5967 +
           (C43030 * C912 + C42873 * C1262 + C43031 * C3572 + C42874 * C3864 +
            C43032 * C13294 + C42875 * C13614) *
               C141341) *
              C141219 * C141298 * C141281 * C97 -
          ((C44214 + C44215 + C44216) * C141341 +
           (C43906 + C43907 + C43908) * C5967 +
           (C43306 + C43305 + C43304) * C141478 +
           (C43060 + C43059 + C43058) * C5966) *
              C141219 * C141298 * C141281 * C98 +
          ((C43069 + C43068 + C43067) * C5966 +
           (C43309 + C43308 + C43307) * C141478 +
           (C43030 * C821 + C42873 * C1004 + C43031 * C3492 + C42874 * C3648 +
            C43032 * C13207 + C42875 * C13376) *
               C5967 +
           (C43030 * C910 + C42873 * C1260 + C43031 * C3574 + C42874 * C3866 +
            C43032 * C13296 + C42875 * C13616) *
               C141341) *
              C141219 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezx[63] +=
        (-std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C275 +
            (C29775 * C276 + C141219 * C579) * C141353) *
               C29770 +
           ((C29775 * C823 + C141219 * C828) * C275 +
            (C29775 * C1006 + C141219 * C1348) * C141353) *
               C29771 +
           ((C29775 * C2960 + C141219 * C2964) * C275 +
            (C29775 * C3084 + C141219 * C3308) * C141353) *
               C29772 +
           ((C29775 * C9667 + C141219 * C9670) * C275 +
            (C29775 * C9848 + C141219 * C10198) * C141353) *
               C29773) *
              C141298 * C141281 * C97 -
          (((C29775 * C9849 + C141219 * C10199) * C141353 +
            (C29775 * C9668 + C141219 * C9671) * C275) *
               C29773 +
           ((C29775 * C3085 + C141219 * C3309) * C141353 +
            (C29775 * C2961 + C141219 * C2965) * C275) *
               C29772 +
           ((C29775 * C1005 + C141219 * C1347) * C141353 +
            (C29775 * C822 + C141219 * C827) * C275) *
               C29771 +
           ((C29775 * C277 + C141219 * C580) * C141353 +
            (C29775 * C109 + C141219 * C115) * C275) *
               C29770) *
              C141298 * C141281 * C98 +
          (((C29775 * C110 + C141219 * C116) * C275 +
            (C29775 * C278 + C141219 * C581) * C141353) *
               C29770 +
           ((C29775 * C821 + C141219 * C826) * C275 +
            (C29775 * C1004 + C141219 * C1346) * C141353) *
               C29771 +
           ((C29775 * C2962 + C141219 * C2966) * C275 +
            (C29775 * C3086 + C141219 * C3310) * C141353) *
               C29772 +
           ((C29775 * C9669 + C141219 * C9672) * C275 +
            (C29775 * C9850 + C141219 * C10200) * C141353) *
               C29773) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
             C5873 * C110 + C5865 * C116) *
                C275 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
             C5873 * C278 + C5865 * C581) *
                C141353) *
               C141478 +
           ((C5869 * C823 + C5863 * C828 + C5871 * C822 + C5864 * C827 +
             C5873 * C821 + C5865 * C826) *
                C275 +
            (C5869 * C1006 + C5863 * C1348 + C5871 * C1005 + C5864 * C1347 +
             C5873 * C1004 + C5865 * C1346) *
                C141353) *
               C141341) *
              C141298 * C141281 * C97 -
          (((C5873 * C1003 + C5865 * C1345 + C5871 * C1004 + C5864 * C1346 +
             C5869 * C1005 + C5863 * C1347) *
                C141353 +
            (C5873 * C820 + C5865 * C825 + C5871 * C821 + C5864 * C826 +
             C5869 * C822 + C5863 * C827) *
                C275) *
               C141341 +
           ((C5873 * C279 + C5865 * C582 + C5871 * C278 + C5864 * C581 +
             C5869 * C277 + C5863 * C580) *
                C141353 +
            (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
             C5869 * C109 + C5863 * C115) *
                C275) *
               C141478) *
              C141298 * C141281 * C98 +
          (((C5869 * C110 + C5863 * C116 + C5871 * C111 + C5864 * C117 +
             C5873 * C112 + C5865 * C118) *
                C275 +
            (C5869 * C278 + C5863 * C581 + C5871 * C279 + C5864 * C582 +
             C5873 * C280 + C5865 * C583) *
                C141353) *
               C141478 +
           ((C5869 * C821 + C5863 * C826 + C5871 * C820 + C5864 * C825 +
             C5873 * C824 + C5865 * C829) *
                C275 +
            (C5869 * C1004 + C5863 * C1346 + C5871 * C1003 + C5864 * C1345 +
             C5873 * C1007 + C5865 * C1349) *
                C141353) *
               C141341) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C43030 +
            (C29775 * C276 + C141219 * C579) * C42873 + C37111 * C43031 +
            C37432 * C42874 + C42383 * C43032 + C42634 * C42875) *
               C141478 +
           (C30547 * C43030 + C30783 * C42873 + C32957 * C43031 +
            C33177 * C42874 + C39706 * C43032 + C40042 * C42875) *
               C141341) *
              C141298 * C141281 * C97 -
          (((C29775 * C13375 + C141219 * C13692) * C42875 +
            (C29775 * C13206 + C141219 * C13209) * C43032 + C36438 * C42874 +
            C36104 * C43031 + C30786 * C42873 + C30553 * C43030) *
               C141341 +
           ((C29775 * C5450 + C141219 * C5674) * C42875 +
            (C29775 * C5326 + C141219 * C5330) * C43032 + C37433 * C42874 +
            C37113 * C43031 + (C29775 * C277 + C141219 * C580) * C42873 +
            (C29775 * C109 + C141219 * C115) * C43030) *
               C141478) *
              C141298 * C141281 * C98 +
          (((C29775 * C110 + C141219 * C116) * C43030 +
            (C29775 * C278 + C141219 * C581) * C42873 +
            (C29775 * C1599 + C141219 * C1604) * C43031 +
            (C29775 * C1782 + C141219 * C2124) * C42874 +
            (C29775 * C5327 + C141219 * C5331) * C43032 +
            (C29775 * C5451 + C141219 * C5675) * C42875) *
               C141478 +
           ((C29775 * C821 + C141219 * C826) * C43030 +
            (C29775 * C1004 + C141219 * C1346) * C42873 +
            (C29775 * C3492 + C141219 * C3496) * C43031 +
            (C29775 * C3648 + C141219 * C3936) * C42874 +
            (C29775 * C13207 + C141219 * C13210) * C43032 +
            (C29775 * C13376 + C141219 * C13693) * C42875) *
               C141341) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezy[63] +=
        (-std::pow(Pi, 2.5) *
         (((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
            C29840 * C2960 + C29772 * C3026 + C29841 * C9667 + C29773 * C9768) *
               C275 +
           (C29838 * C276 + C29770 * C635 + C29839 * C1006 + C29771 * C1419 +
            C29840 * C3084 + C29772 * C3362 + C29841 * C9848 +
            C29773 * C10284) *
               C141353) *
              C141219 * C141298 * C141281 * C97 -
          ((C29841 * C9849 + C29773 * C10285 + C29840 * C3085 + C29772 * C3363 +
            C29839 * C1005 + C29771 * C1418 + C29838 * C277 + C29770 * C636) *
               C141353 +
           (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
            C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
               C275) *
              C141219 * C141298 * C141281 * C98 +
          ((C29838 * C110 + C29770 * C191 + C29839 * C821 + C29771 * C910 +
            C29840 * C2962 + C29772 * C3028 + C29841 * C9669 + C29773 * C9770) *
               C275 +
           (C29838 * C278 + C29770 * C637 + C29839 * C1004 + C29771 * C1417 +
            C29840 * C3086 + C29772 * C3364 + C29841 * C9850 +
            C29773 * C10286) *
               C141353) *
              C141219 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C275 +
            (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                C141353) *
               C5863 +
           ((C5993 + C5994) * C275 + (C6522 + C6523) * C141353) * C5864 +
           C6530 * C5865) *
              C141298 * C141281 * C97 -
          (((C6526 + C6527) * C141353 + (C6003 + C6004) * C275) * C5865 +
           ((C6525 + C6524) * C141353 + (C5998 + C5997) * C275) * C5864 +
           ((C6523 + C6522) * C141353 + (C5994 + C5993) * C275) * C5863) *
              C141298 * C141281 * C98 +
          (C6530 * C5863 +
           ((C6004 + C6003) * C275 + (C6527 + C6526) * C141353) * C5864 +
           ((C5966 * C112 + C141478 * C193 + C5967 * C824 + C141341 * C913) *
                C275 +
            (C5966 * C280 + C141478 * C639 + C5967 * C1007 + C141341 * C1420) *
                C141353) *
               C5865) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
               C43030 +
           (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
               C42873 +
           (C5966 * C1601 + C141478 * C1690 + C5967 * C3490 + C141341 * C3572) *
               C43031 +
           (C5966 * C1784 + C141478 * C2197 + C5967 * C3646 + C141341 * C4004) *
               C42874 +
           (C5966 * C5325 + C141478 * C5391 + C5967 * C13205 +
            C141341 * C13294) *
               C43032 +
           (C5966 * C5449 + C141478 * C5727 + C5967 * C13374 +
            C141341 * C13768) *
               C42875) *
              C141219 * C141298 * C141281 * C97 -
          ((C5967 * C13375 + C141341 * C13769 + C5966 * C5450 +
            C141478 * C5728) *
               C42875 +
           (C5967 * C13206 + C141341 * C13295 + C5966 * C5326 +
            C141478 * C5392) *
               C43032 +
           (C8598 + C8599) * C42874 + (C7944 + C7945) * C43031 +
           (C6523 + C6522) * C42873 + (C5994 + C5993) * C43030) *
              C141219 * C141298 * C141281 * C98 +
          (C6005 * C43030 + C6528 * C42873 + (C7941 + C7940) * C43031 +
           (C8597 + C8596) * C42874 +
           (C5966 * C5327 + C141478 * C5393 + C5967 * C13207 +
            C141341 * C13296) *
               C43032 +
           (C5966 * C5451 + C141478 * C5729 + C5967 * C13376 +
            C141341 * C13770) *
               C42875) *
              C141219 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezz[63] +=
        (-std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141353 * C714) * C29770 +
           C7709 * C29771 + C10372 * C29772 + C26253 * C29773) *
              C141219 * C141298 * C141281 * C97 -
          (C23643 * C29773 + C7711 * C29772 + C1527 * C29771 + C743 * C29770) *
              C141219 * C141298 * C141281 * C98 +
          (C744 * C29770 + C1526 * C29771 + C7710 * C29772 +
           (C713 * C9669 + C10369 + C10369 + C141353 * C10363) * C29773) *
              C141219 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141478 +
            (C713 * C823 + C1517 + C1517 + C141353 * C1505) * C141341) *
               C5863 +
           (C6605 + C6606) * C5864 + C6611 * C5865) *
              C141298 * C141281 * C97 -
          ((C6609 + C6610) * C5865 + (C6608 + C6607) * C5864 +
           (C6606 + C6605) * C5863) *
              C141298 * C141281 * C98 +
          (C6611 * C5863 + (C6610 + C6609) * C5864 +
           (C746 * C141478 +
            (C713 * C824 + C1518 + C1518 + C141353 * C1506) * C141341) *
               C5865) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C43543 * C108 + C43547 + C43547 + C42873 * C714 + C43544 * C1601 +
            C43548 + C43548 + C42874 * C2283 + C43545 * C5325 + C43549 +
            C43549 + C42875 * C5781) *
               C141478 +
           (C43543 * C823 + C44531 + C44531 + C42873 * C1505 + C43544 * C3490 +
            C44530 + C44530 + C42874 * C4074 + C43545 * C13205 + C44529 +
            C44529 + C42875 * C13845) *
               C141341) *
              C141219 * C141298 * C141281 * C97 -
          ((C44541 + C44542 + C44543) * C141341 +
           (C43585 + C43584 + C43583) * C141478) *
              C141219 * C141298 * C141281 * C98 +
          ((C43588 + C43587 + C43586) * C141478 +
           (C43543 * C821 + C44532 + C44532 + C42873 * C1503 + C43544 * C3492 +
            C44533 + C44533 + C42874 * C4076 + C43545 * C13207 + C44534 +
            C44534 + C42875 * C13847) *
               C141341) *
              C141219 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexx[64] +=
        (-std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141353 *
                C29770 +
            C30307 * C29771 + C30308 * C29772 + C30309 * C29773) *
               C141298 * C816 -
           ((C29774 * C25568 + C30281 + C30281 + C141219 * C25572) * C141353 *
                C29773 +
            C30309 * C29772 + C30308 * C29771 + C30307 * C29770) *
               C141298 * C141497) *
              C818 +
          ((C30310 * C29770 + C30311 * C29771 + C30312 * C29772 +
            (C29774 * C25569 + C30288 + C30288 + C141219 * C25573) * C141353 *
                C29773) *
               C141298 * C141497 -
           (C30312 * C29773 + C30311 * C29772 + C30310 * C29771 +
            (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141353 *
                C29770) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 +
             C5876 + C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
             C5865 * C122) *
                C141353 * C141478 +
            (C6740 + C6741 + C6742) * C141353 * C141341) *
               C141298 * C816 -
           ((C5872 * C2962 + C6716 + C6716 + C5865 * C2970 + C5870 * C2961 +
             C6717 + C6717 + C5864 * C2969 + C5868 * C2960 + C6718 + C6718 +
             C5863 * C2968) *
                C141353 * C141341 +
            (C6742 + C6741 + C6740) * C141353 * C141478) *
               C141298 * C141497) *
              C818 +
          (((C6743 + C6744 + C6745) * C141353 * C141478 +
            (C5868 * C2961 + C6725 + C6725 + C5863 * C2969 + C5870 * C2962 +
             C6726 + C6726 + C5864 * C2970 + C5872 * C2963 + C6727 + C6727 +
             C5865 * C2971) *
                C141353 * C141341) *
               C141298 * C141497 -
           ((C6745 + C6744 + C6743) * C141353 * C141341 +
            (C5872 * C111 + C5884 + C5884 + C5865 * C123 + C5870 * C110 +
             C5885 + C5885 + C5864 * C122 + C5868 * C109 + C5886 + C5886 +
             C5863 * C121) *
                C141353 * C141478) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C42873 +
             C36781 * C42874 + C42123 * C42875) *
                C141478 +
            (C51443 + C51444 + C51445) * C141341) *
               C141298 * C816 -
           ((C39349 * C42875 + C32720 * C42874 + C30302 * C42873) * C141341 +
            (C51445 + C51444 + C51443) * C141478) *
               C141298 * C141497) *
              C818 +
          (((C51446 + C51447 + C51453) * C141478 +
            (C30305 * C42873 + C35763 * C42874 +
             (C29774 * C29088 + C36776 + C36776 + C141219 * C29092) * C42875) *
                C141341) *
               C141298 * C141497 -
           ((C51453 + C51447 + C51446) * C141341 +
            ((C29774 * C5326 + C36774 + C36774 + C141219 * C5334) * C42875 +
             C36782 * C42874 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C42873) *
                C141478) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexy[64] +=
        (-std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C29775 +
            (C29838 * C114 + C29770 * C195 + C29839 * C828 + C29771 * C917 +
             C29840 * C2964 + C29772 * C3030 + C29841 * C9670 +
             C29773 * C9771) *
                C141219) *
               C141353 * C141298 * C816 -
           ((C29841 * C25570 + C29773 * C25664 + C29840 * C9670 +
             C29772 * C9771 + C29839 * C2964 + C29771 * C3030 + C29838 * C828 +
             C29770 * C917) *
                C141219 +
            (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
             C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
             C29770 * C912) *
                C29775) *
               C141353 * C141298 * C141497) *
              C818 +
          (((C29838 * C822 + C29770 * C911 + C29839 * C2961 + C29771 * C3027 +
             C29840 * C9668 + C29772 * C9769 + C29841 * C25569 +
             C29773 * C25663) *
                C29775 +
            (C29838 * C827 + C29770 * C916 + C29839 * C2965 + C29771 * C3031 +
             C29840 * C9671 + C29772 * C9772 + C29841 * C25571 +
             C29773 * C25665) *
                C141219) *
               C141353 * C141298 * C141497 -
           ((C29841 * C9671 + C29773 * C9772 + C29840 * C2965 + C29772 * C3031 +
             C29839 * C827 + C29771 * C916 + C29838 * C115 + C29770 * C196) *
                C141219 +
            (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
             C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
                C29775) *
               C141353 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C5869 +
            (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                C5863 +
            (C5993 + C5994) * C5871 + (C5995 + C5996) * C5864 + C6005 * C5873 +
            C6006 * C5865) *
               C141353 * C141298 * C816 -
           ((C6860 + C6861) * C5865 + (C6862 + C6863) * C5873 +
            (C6864 + C6865) * C5864 + (C6866 + C6867) * C5871 +
            (C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
                C5863 +
            (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                C5869) *
               C141353 * C141298 * C141497) *
              C818 +
          (((C6867 + C6866) * C5869 + (C6865 + C6864) * C5863 +
            (C6863 + C6862) * C5871 + (C6861 + C6860) * C5864 +
            (C5966 * C820 + C141478 * C909 + C5967 * C2963 + C141341 * C3029) *
                C5873 +
            (C5966 * C825 + C141478 * C914 + C5967 * C2967 + C141341 * C3033) *
                C5865) *
               C141353 * C141298 * C141497 -
           ((C6001 + C6002) * C5865 + (C6003 + C6004) * C5873 +
            (C6000 + C5999) * C5864 + (C5998 + C5997) * C5871 +
            (C5996 + C5995) * C5863 + (C5994 + C5993) * C5869) *
               C141353 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C29775 +
             (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                 C141219) *
                C42873 +
            ((C5966 * C1601 + C141478 * C1690 + C5967 * C3490 +
              C141341 * C3572) *
                 C29775 +
             (C5966 * C1606 + C141478 * C1695 + C5967 * C3494 +
              C141341 * C3576) *
                 C141219) *
                C42874 +
            ((C5966 * C5325 + C141478 * C5391 + C5967 * C13205 +
              C141341 * C13294) *
                 C29775 +
             (C5966 * C5329 + C141478 * C5395 + C5967 * C13208 +
              C141341 * C13297) *
                 C141219) *
                C42875) *
               C141298 * C816 -
           (((C5967 * C29089 + C141341 * C29175 + C5966 * C13208 +
              C141478 * C13297) *
                 C141219 +
             (C5967 * C29087 + C141341 * C29173 + C5966 * C13205 +
              C141478 * C13294) *
                 C29775) *
                C42875 +
            ((C5967 * C10473 + C141341 * C10598 + C5966 * C3494 +
              C141478 * C3576) *
                 C141219 +
             (C5967 * C10470 + C141341 * C10595 + C5966 * C3490 +
              C141478 * C3572) *
                 C29775) *
                C42874 +
            ((C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
                 C141219 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C29775) *
                C42873) *
               C141298 * C141497) *
              C818 +
          ((((C6867 + C6866) * C29775 + (C6865 + C6864) * C141219) * C42873 +
            ((C5966 * C3491 + C141478 * C3573 + C5967 * C10471 +
              C141341 * C10596) *
                 C29775 +
             (C5966 * C3495 + C141478 * C3577 + C5967 * C10474 +
              C141341 * C10599) *
                 C141219) *
                C42874 +
            ((C5966 * C13206 + C141478 * C13295 + C5967 * C29088 +
              C141341 * C29174) *
                 C29775 +
             (C5966 * C13209 + C141478 * C13298 + C5967 * C29090 +
              C141341 * C29176) *
                 C141219) *
                C42875) *
               C141298 * C141497 -
           (((C5967 * C13209 + C141341 * C13298 + C5966 * C5330 +
              C141478 * C5396) *
                 C141219 +
             (C5967 * C13206 + C141341 * C13295 + C5966 * C5326 +
              C141478 * C5392) *
                 C29775) *
                C42875 +
            ((C7942 + C7943) * C141219 + (C7944 + C7945) * C29775) * C42874 +
            ((C5996 + C5995) * C141219 + (C5994 + C5993) * C29775) * C42873) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[64] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C29775 +
             (C275 * C114 + C141353 * C282) * C141219) *
                C29770 +
            (C30445 + C30446) * C29771 + (C30447 + C30448) * C29772 +
            (C30449 + C30450) * C29773) *
               C141298 * C816 -
           (((C275 * C25570 + C141353 * C25742) * C141219 +
             (C275 * C25568 + C141353 * C25740) * C29775) *
                C29773 +
            (C30450 + C30449) * C29772 + (C30448 + C30447) * C29771 +
            (C30446 + C30445) * C29770) *
               C141298 * C141497) *
              C818 +
          (((C30451 + C30452) * C29770 + (C30453 + C30454) * C29771 +
            (C30455 + C30456) * C29772 +
            ((C275 * C25569 + C141353 * C25741) * C29775 +
             (C275 * C25571 + C141353 * C25743) * C141219) *
                C29773) *
               C141298 * C141497 -
           ((C30456 + C30455) * C29773 + (C30454 + C30453) * C29772 +
            (C30452 + C30451) * C29771 +
            (C306 * C141219 + C305 * C29775) * C29770) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5869 +
             (C275 * C114 + C141353 * C282) * C5863 + C305 * C5871 +
             C306 * C5864 + C307 * C5873 + C308 * C5865) *
                C141478 +
            (C6994 + C6995 + C6970 + C6971 + C6972 + C6973) * C141341) *
               C141298 * C816 -
           ((C6990 * C5865 + C6991 * C5873 + C6992 * C5864 + C6993 * C5871 +
             (C275 * C2964 + C141353 * C3088) * C5863 +
             (C275 * C2960 + C141353 * C3084) * C5869) *
                C141341 +
            (C6973 + C6972 + C6971 + C6970 + C6995 + C6994) * C141478) *
               C141298 * C141497) *
              C818 +
          (((C6982 + C6983 + C6984 + C6985 + C6986 + C6987) * C141478 +
            (C6993 * C5869 + C6992 * C5863 + C6991 * C5871 + C6990 * C5864 +
             (C275 * C2963 + C141353 * C3087) * C5873 +
             (C275 * C2967 + C141353 * C3091) * C5865) *
                C141341) *
               C141298 * C141497 -
           ((C6987 + C6986 + C6985 + C6984 + C6983 + C6982) * C141341 +
            (C310 * C5865 + C309 * C5873 + C308 * C5864 + C307 * C5871 +
             C306 * C5863 + C305 * C5869) *
                C141478) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
              C43032 * C5325 + C42875 * C5449) *
                 C29775 +
             (C43030 * C114 + C42873 * C282 + C43031 * C1606 + C42874 * C1789 +
              C43032 * C5329 + C42875 * C5453) *
                 C141219) *
                C141478 +
            ((C51662 + C51663 + C51664) * C29775 +
             (C51665 + C51666 + C51667) * C141219) *
                C141341) *
               C141298 * C816 -
           (((C43032 * C29089 + C42875 * C29253 + C43031 * C10473 +
              C42874 * C10702 + C43030 * C2964 + C42873 * C3088) *
                 C141219 +
             (C43032 * C29087 + C42875 * C29251 + C43031 * C10470 +
              C42874 * C10699 + C43030 * C2960 + C42873 * C3084) *
                 C29775) *
                C141341 +
            ((C51667 + C51666 + C51665) * C141219 +
             (C51664 + C51663 + C51662) * C29775) *
                C141478) *
               C141298 * C141497) *
              C818 +
          ((((C43908 + C43907 + C43906) * C29775 +
             (C43905 + C43904 + C43903) * C141219) *
                C141478 +
            ((C43030 * C2961 + C42873 * C3085 + C43031 * C10471 +
              C42874 * C10700 + C43032 * C29088 + C42875 * C29252) *
                 C29775 +
             (C43030 * C2965 + C42873 * C3089 + C43031 * C10474 +
              C42874 * C10703 + C43032 * C29090 + C42875 * C29254) *
                 C141219) *
                C141341) *
               C141298 * C141497 -
           (((C43903 + C43904 + C43905) * C141219 +
             (C43906 + C43907 + C43908) * C29775) *
                C141341 +
            ((C43063 + C43062 + C43061) * C141219 +
             (C43060 + C43059 + C43058) * C29775) *
                C141478) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[64] += (-std::pow(Pi, 2.5) *
                   ((((C29775 * C108 + C141219 * C114) * C29838 +
                      (C29775 * C189 + C141219 * C362) * C29770 +
                      C30547 * C29839 + C30548 * C29771 + C30549 * C29840 +
                      C30550 * C29772 + C30551 * C29841 + C30552 * C29773) *
                         C141353 * C141298 * C816 -
                     ((C29775 * C25662 + C141219 * C25831) * C29773 +
                      (C29775 * C25568 + C141219 * C25570) * C29841 +
                      C30552 * C29772 + C30551 * C29840 + C30550 * C29771 +
                      C30549 * C29839 + C30548 * C29770 + C30547 * C29838) *
                         C141353 * C141298 * C141497) *
                        C818 +
                    ((C30553 * C29838 + C30554 * C29770 + C30555 * C29839 +
                      C30556 * C29771 + C30557 * C29840 + C30558 * C29772 +
                      (C29775 * C25569 + C141219 * C25571) * C29841 +
                      (C29775 * C25663 + C141219 * C25832) * C29773) *
                         C141353 * C141298 * C141497 -
                     (C30558 * C29773 + C30557 * C29841 + C30556 * C29772 +
                      C30555 * C29840 + C30554 * C29771 + C30553 * C29839 +
                      (C29775 * C190 + C141219 * C363) * C29770 +
                      (C29775 * C109 + C141219 * C115) * C29838) *
                         C141353 * C141298 * C816) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                       C5864 * C115 + C5873 * C110 + C5865 * C116) *
                          C5966 +
                      (C5869 * C189 + C5863 * C362 + C5871 * C190 +
                       C5864 * C363 + C5873 * C191 + C5865 * C364) *
                          C141478 +
                      (C7118 + C7119 + C7120) * C5967 +
                      (C7121 + C7122 + C7123) * C141341) *
                         C141353 * C141298 * C816 -
                     ((C5873 * C3028 + C5865 * C3144 + C5871 * C3027 +
                       C5864 * C3143 + C5869 * C3026 + C5863 * C3142) *
                          C141341 +
                      (C5873 * C2962 + C5865 * C2966 + C5871 * C2961 +
                       C5864 * C2965 + C5869 * C2960 + C5863 * C2964) *
                          C5967 +
                      (C7123 + C7122 + C7121) * C141478 +
                      (C7120 + C7119 + C7118) * C5966) *
                         C141353 * C141298 * C141497) *
                        C818 +
                    (((C7124 + C7125 + C7126) * C5966 +
                      (C7127 + C7128 + C7129) * C141478 +
                      (C5869 * C2961 + C5863 * C2965 + C5871 * C2962 +
                       C5864 * C2966 + C5873 * C2963 + C5865 * C2967) *
                          C5967 +
                      (C5869 * C3027 + C5863 * C3143 + C5871 * C3028 +
                       C5864 * C3144 + C5873 * C3029 + C5865 * C3145) *
                          C141341) *
                         C141353 * C141298 * C141497 -
                     ((C7129 + C7128 + C7127) * C141341 +
                      (C7126 + C7125 + C7124) * C5967 +
                      (C5873 * C192 + C5865 * C365 + C5871 * C191 +
                       C5864 * C364 + C5869 * C190 + C5863 * C363) *
                          C141478 +
                      (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                       C5864 * C116 + C5869 * C109 + C5863 * C115) *
                          C5966) *
                         C141353 * C141298 * C816) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C5966 +
                       (C29775 * C189 + C141219 * C362) * C141478 +
                       C30547 * C5967 + C30548 * C141341) *
                          C42873 +
                      (C37111 * C5966 + C37112 * C141478 + C32957 * C5967 +
                       C32956 * C141341) *
                          C42874 +
                      (C42383 * C5966 + C42382 * C141478 + C39706 * C5967 +
                       C39705 * C141341) *
                          C42875) *
                         C141298 * C816 -
                     ((C39703 * C141341 + C39704 * C5967 + C39705 * C141478 +
                       C39706 * C5966) *
                          C42875 +
                      (C32954 * C141341 + C32955 * C5967 + C32956 * C141478 +
                       C32957 * C5966) *
                          C42874 +
                      (C30550 * C141341 + C30549 * C5967 + C30548 * C141478 +
                       C30547 * C5966) *
                          C42873) *
                         C141298 * C141497) *
                        C818 +
                    (((C30553 * C5966 + C30554 * C141478 + C30555 * C5967 +
                       C30556 * C141341) *
                          C42873 +
                      (C36104 * C5966 + C36105 * C141478 + C36106 * C5967 +
                       C36107 * C141341) *
                          C42874 +
                      (C51770 * C5966 + C51771 * C141478 +
                       (C29775 * C29088 + C141219 * C29090) * C5967 +
                       (C29775 * C29174 + C141219 * C29330) * C141341) *
                          C42875) *
                         C141298 * C141497 -
                     ((C51771 * C141341 + C51770 * C5967 +
                       (C29775 * C5392 + C141219 * C5508) * C141478 +
                       (C29775 * C5326 + C141219 * C5330) * C5966) *
                          C42875 +
                      (C36105 * C141341 + C36104 * C5967 + C37114 * C141478 +
                       C37113 * C5966) *
                          C42874 +
                      (C30554 * C141341 + C30553 * C5967 +
                       (C29775 * C190 + C141219 * C363) * C141478 +
                       (C29775 * C109 + C141219 * C115) * C5966) *
                          C42873) *
                         C141298 * C816) *
                        C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[64] += (-std::pow(Pi, 2.5) *
                   (((C29992 * C108 + C29997 + C29997 + C29770 * C419 +
                      C29993 * C823 + C29998 + C29998 + C29771 * C1171 +
                      C29994 * C2960 + C29999 + C29999 + C29772 * C3196 +
                      C29995 * C9667 + C30000 + C30000 + C29773 * C10035) *
                         C141219 * C141353 * C141298 * C816 -
                     (C29995 * C25568 + C30625 + C30625 + C29773 * C25921 +
                      C29994 * C9667 + C30626 + C30626 + C29772 * C10035 +
                      C29993 * C2960 + C30627 + C30627 + C29771 * C3196 +
                      C29992 * C823 + C30628 + C30628 + C29770 * C1171) *
                         C141219 * C141353 * C141298 * C141497) *
                        C818 +
                    ((C29992 * C822 + C30629 + C30629 + C29770 * C1170 +
                      C29993 * C2961 + C30630 + C30630 + C29771 * C3197 +
                      C29994 * C9668 + C30631 + C30631 + C29772 * C10036 +
                      C29995 * C25569 + C30632 + C30632 + C29773 * C25922) *
                         C141219 * C141353 * C141298 * C141497 -
                     (C29995 * C9668 + C30001 + C30001 + C29773 * C10036 +
                      C29994 * C2961 + C30002 + C30002 + C29772 * C3197 +
                      C29993 * C822 + C30003 + C30003 + C29771 * C1170 +
                      C29992 * C109 + C30004 + C30004 + C29770 * C420) *
                         C141219 * C141353 * C141298 * C816) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                       C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                          C5863 +
                      (C6265 + C6266) * C5864 + C6271 * C5865) *
                         C141353 * C141298 * C816 -
                     ((C7252 + C7253) * C5865 + (C7254 + C7255) * C5864 +
                      (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 +
                       C6228 * C823 + C7241 + C7241 + C141478 * C1171) *
                          C5863) *
                         C141353 * C141298 * C141497) *
                        C818 +
                    (((C7255 + C7254) * C5863 + (C7253 + C7252) * C5864 +
                      (C6228 * C820 + C7242 + C7242 + C141478 * C1168 +
                       C6229 * C2963 + C7243 + C7243 + C141341 * C3199) *
                          C5865) *
                         C141353 * C141298 * C141497 -
                     ((C6269 + C6270) * C5865 + (C6268 + C6267) * C5864 +
                      (C6266 + C6265) * C5863) *
                         C141353 * C141298 * C816) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                       C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                          C141219 * C42873 +
                      (C6228 * C1601 + C8265 + C8265 + C141478 * C1949 +
                       C6229 * C3490 + C8264 + C8264 + C141341 * C3790) *
                          C141219 * C42874 +
                      (C6228 * C5325 + C13535 + C13535 + C141478 * C5561 +
                       C6229 * C13205 + C13536 + C13536 + C141341 * C13531) *
                          C141219 * C42875) *
                         C141298 * C816 -
                     ((C6229 * C29087 + C51870 + C51870 + C141341 * C29405 +
                       C6228 * C13205 + C51871 + C51871 + C141478 * C13531) *
                          C141219 * C42875 +
                      (C6229 * C10470 + C10939 + C10939 + C141341 * C10934 +
                       C6228 * C3490 + C10938 + C10938 + C141478 * C3790) *
                          C141219 * C42874 +
                      (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 +
                       C6228 * C823 + C7241 + C7241 + C141478 * C1171) *
                          C141219 * C42873) *
                         C141298 * C141497) *
                        C818 +
                    (((C7255 + C7254) * C141219 * C42873 +
                      (C6228 * C3491 + C10940 + C10940 + C141478 * C3791 +
                       C6229 * C10471 + C10941 + C10941 + C141341 * C10935) *
                          C141219 * C42874 +
                      (C6228 * C13206 + C51872 + C51872 + C141478 * C13532 +
                       C6229 * C29088 + C51873 + C51873 + C141341 * C29406) *
                          C141219 * C42875) *
                         C141298 * C141497 -
                     ((C6229 * C13206 + C13538 + C13538 + C141341 * C13532 +
                       C6228 * C5326 + C13537 + C13537 + C141478 * C5562) *
                          C141219 * C42875 +
                      (C8278 + C8279) * C141219 * C42874 +
                      (C6266 + C6265) * C141219 * C42873) *
                         C141298 * C816) *
                        C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[64] += (-std::pow(Pi, 2.5) *
                   ((((C275 * C108 + C141353 * C276) * C29838 +
                      (C275 * C189 + C141353 * C501) * C29770 + C6988 * C29839 +
                      C7366 * C29771 + C9864 * C29840 + C10124 * C29772 +
                      C25754 * C29841 + C26008 * C29773) *
                         C141219 * C141298 * C816 -
                     ((C275 * C25662 + C141353 * C26003) * C29773 +
                      (C275 * C25568 + C141353 * C25740) * C29841 +
                      C26008 * C29772 + C25754 * C29840 + C10124 * C29771 +
                      C9864 * C29839 + C7366 * C29770 + C6988 * C29838) *
                         C141219 * C141298 * C141497) *
                        C818 +
                    ((C1031 * C29838 + C1276 * C29770 + C6993 * C29839 +
                      C7368 * C29771 + C22934 * C29840 + C23308 * C29772 +
                      (C275 * C25569 + C141353 * C25741) * C29841 +
                      (C275 * C25663 + C141353 * C26004) * C29773) *
                         C141219 * C141298 * C141497 -
                     (C23308 * C29773 + C22934 * C29841 + C7368 * C29772 +
                      C6993 * C29840 + C1276 * C29771 + C1031 * C29839 +
                      C520 * C29770 + C305 * C29838) *
                         C141219 * C141298 * C816) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((((C275 * C108 + C141353 * C276) * C5966 +
                       (C275 * C189 + C141353 * C501) * C141478 +
                       C6988 * C5967 + C7366 * C141341) *
                          C5863 +
                      (C6346 + C6347 + C6348 + C6349) * C5864 + C6360 * C5865) *
                         C141298 * C816 -
                     ((C7369 + C7358 + C7359 + C7360) * C5865 +
                      (C7370 + C7363 + C7364 + C7365) * C5864 +
                      ((C275 * C3026 + C141353 * C3254) * C141341 +
                       (C275 * C2960 + C141353 * C3084) * C5967 +
                       C7366 * C141478 + C6988 * C5966) *
                          C5863) *
                         C141298 * C141497) *
                        C818 +
                    (((C7365 + C7364 + C7363 + C7370) * C5863 +
                      (C7360 + C7359 + C7358 + C7369) * C5864 +
                      (C1027 * C5966 + C1274 * C141478 +
                       (C275 * C2963 + C141353 * C3087) * C5967 +
                       (C275 * C3029 + C141353 * C3257) * C141341) *
                          C5865) *
                         C141298 * C141497 -
                     ((C6354 + C6355 + C6356 + C6357) * C5865 +
                      (C6353 + C6352 + C6351 + C6350) * C5864 +
                      (C6349 + C6348 + C6347 + C6346) * C5863) *
                         C141298 * C816) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C43030 * C108 + C42873 * C276 + C43031 * C1601 +
                       C42874 * C1784 + C43032 * C5325 + C42875 * C5449) *
                          C5966 +
                      (C43030 * C189 + C42873 * C501 + C43031 * C1690 +
                       C42874 * C2040 + C43032 * C5391 + C42875 * C5619) *
                          C141478 +
                      (C51662 + C51663 + C51664) * C5967 +
                      (C51978 + C51979 + C51980) * C141341) *
                         C141219 * C141298 * C816 -
                     ((C43032 * C29173 + C42875 * C29487 + C43031 * C10595 +
                       C42874 * C11041 + C43030 * C3026 + C42873 * C3254) *
                          C141341 +
                      (C43032 * C29087 + C42875 * C29251 + C43031 * C10470 +
                       C42874 * C10699 + C43030 * C2960 + C42873 * C3084) *
                          C5967 +
                      (C51980 + C51979 + C51978) * C141478 +
                      (C51664 + C51663 + C51662) * C5966) *
                         C141219 * C141298 * C141497) *
                        C818 +
                    (((C43908 + C43907 + C43906) * C5966 +
                      (C44216 + C44215 + C44214) * C141478 +
                      (C43030 * C2961 + C42873 * C3085 + C43031 * C10471 +
                       C42874 * C10700 + C43032 * C29088 + C42875 * C29252) *
                          C5967 +
                      (C43030 * C3027 + C42873 * C3255 + C43031 * C10596 +
                       C42874 * C11042 + C43032 * C29174 + C42875 * C29488) *
                          C141341) *
                         C141219 * C141298 * C141497 -
                     ((C44214 + C44215 + C44216) * C141341 +
                      (C43906 + C43907 + C43908) * C5967 +
                      (C43306 + C43305 + C43304) * C141478 +
                      (C43060 + C43059 + C43058) * C5966) *
                         C141219 * C141298 * C816) *
                        C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[64] +=
        (-std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C275 +
             (C29775 * C276 + C141219 * C579) * C141353) *
                C29770 +
            (C30765 + C30789) * C29771 + (C30768 + C30790) * C29772 +
            (C30771 + C30791) * C29773) *
               C141298 * C816 -
           (((C29775 * C25740 + C141219 * C26082) * C141353 +
             (C29775 * C25568 + C141219 * C25570) * C275) *
                C29773 +
            (C30791 + C30771) * C29772 + (C30790 + C30768) * C29771 +
            (C30789 + C30765) * C29770) *
               C141298 * C141497) *
              C818 +
          (((C30774 + C30792) * C29770 + (C30777 + C30793) * C29771 +
            (C30780 + C30794) * C29772 +
            ((C29775 * C25569 + C141219 * C25571) * C275 +
             (C29775 * C25741 + C141219 * C26083) * C141353) *
                C29773) *
               C141298 * C141497 -
           ((C30794 + C30780) * C29773 + (C30793 + C30777) * C29772 +
            (C30792 + C30774) * C29771 +
            ((C29775 * C277 + C141219 * C580) * C141353 +
             (C29775 * C109 + C141219 * C115) * C275) *
                C29770) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
              C5873 * C278 + C5865 * C581) *
                 C141353) *
                C141478 +
            ((C7118 + C7119 + C7120) * C275 +
             (C7481 + C7482 + C7483) * C141353) *
                C141341) *
               C141298 * C816 -
           (((C5873 * C3086 + C5865 * C3310 + C5871 * C3085 + C5864 * C3309 +
              C5869 * C3084 + C5863 * C3308) *
                 C141353 +
             (C5873 * C2962 + C5865 * C2966 + C5871 * C2961 + C5864 * C2965 +
              C5869 * C2960 + C5863 * C2964) *
                 C275) *
                C141341 +
            ((C7483 + C7482 + C7481) * C141353 +
             (C7120 + C7119 + C7118) * C275) *
                C141478) *
               C141298 * C141497) *
              C818 +
          ((((C7124 + C7125 + C7126) * C275 +
             (C7484 + C7485 + C7486) * C141353) *
                C141478 +
            ((C5869 * C2961 + C5863 * C2965 + C5871 * C2962 + C5864 * C2966 +
              C5873 * C2963 + C5865 * C2967) *
                 C275 +
             (C5869 * C3085 + C5863 * C3309 + C5871 * C3086 + C5864 * C3310 +
              C5873 * C3087 + C5865 * C3311) *
                 C141353) *
                C141341) *
               C141298 * C141497 -
           (((C7486 + C7485 + C7484) * C141353 +
             (C7126 + C7125 + C7124) * C275) *
                C141341 +
            ((C5873 * C279 + C5865 * C582 + C5871 * C278 + C5864 * C581 +
              C5869 * C277 + C5863 * C580) *
                 C141353 +
             (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
              C5869 * C109 + C5863 * C115) *
                 C275) *
                C141478) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C43030 +
             (C29775 * C276 + C141219 * C579) * C42873 + C37111 * C43031 +
             C37432 * C42874 + C42383 * C43032 + C42634 * C42875) *
                C141478 +
            (C52079 + C52080 + C52081 + C52082 + C52083 + C52084) * C141341) *
               C141298 * C816 -
           ((C40041 * C42875 + C39704 * C43032 + C33176 * C42874 +
             C32955 * C43031 + C30784 * C42873 + C30549 * C43030) *
                C141341 +
            (C52084 + C52083 + C52082 + C52081 + C52080 + C52079) * C141478) *
               C141298 * C141497) *
              C818 +
          (((C52085 + C52086 + C52087 + C52088 + C52089 + C52093) * C141478 +
            (C30555 * C43030 + C30787 * C42873 + C36106 * C43031 +
             C36439 * C42874 + (C29775 * C29088 + C141219 * C29090) * C43032 +
             (C29775 * C29252 + C141219 * C29564) * C42875) *
                C141341) *
               C141298 * C141497 -
           ((C52093 + C52089 + C52088 + C52087 + C52086 + C52085) * C141341 +
            ((C29775 * C5450 + C141219 * C5674) * C42875 +
             (C29775 * C5326 + C141219 * C5330) * C43032 + C37433 * C42874 +
             C37113 * C43031 + (C29775 * C277 + C141219 * C580) * C42873 +
             (C29775 * C109 + C141219 * C115) * C43030) *
                C141478) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezy[64] +=
        (-std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C275 +
            (C29838 * C276 + C29770 * C635 + C29839 * C1006 + C29771 * C1419 +
             C29840 * C3084 + C29772 * C3362 + C29841 * C9848 +
             C29773 * C10284) *
                C141353) *
               C141219 * C141298 * C816 -
           ((C29841 * C25740 + C29773 * C26168 + C29840 * C9848 +
             C29772 * C10284 + C29839 * C3084 + C29771 * C3362 +
             C29838 * C1006 + C29770 * C1419) *
                C141353 +
            (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
             C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
             C29770 * C912) *
                C275) *
               C141219 * C141298 * C141497) *
              C818 +
          (((C29838 * C822 + C29770 * C911 + C29839 * C2961 + C29771 * C3027 +
             C29840 * C9668 + C29772 * C9769 + C29841 * C25569 +
             C29773 * C25663) *
                C275 +
            (C29838 * C1005 + C29770 * C1418 + C29839 * C3085 + C29771 * C3363 +
             C29840 * C9849 + C29772 * C10285 + C29841 * C25741 +
             C29773 * C26169) *
                C141353) *
               C141219 * C141298 * C141497 -
           ((C29841 * C9849 + C29773 * C10285 + C29840 * C3085 +
             C29772 * C3363 + C29839 * C1005 + C29771 * C1418 + C29838 * C277 +
             C29770 * C636) *
                C141353 +
            (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
             C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
                C275) *
               C141219 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C275 +
             (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                 C141353) *
                C5863 +
            ((C5993 + C5994) * C275 + (C6522 + C6523) * C141353) * C5864 +
            C6530 * C5865) *
               C141298 * C816 -
           (((C7593 + C7594) * C141353 + (C6862 + C6863) * C275) * C5865 +
            ((C7595 + C7596) * C141353 + (C6866 + C6867) * C275) * C5864 +
            ((C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
              C141478 * C1419) *
                 C141353 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C275) *
                C5863) *
               C141298 * C141497) *
              C818 +
          ((((C6867 + C6866) * C275 + (C7596 + C7595) * C141353) * C5863 +
            ((C6863 + C6862) * C275 + (C7594 + C7593) * C141353) * C5864 +
            ((C5966 * C820 + C141478 * C909 + C5967 * C2963 + C141341 * C3029) *
                 C275 +
             (C5966 * C1003 + C141478 * C1416 + C5967 * C3087 +
              C141341 * C3365) *
                 C141353) *
                C5865) *
               C141298 * C141497 -
           (((C6526 + C6527) * C141353 + (C6003 + C6004) * C275) * C5865 +
            ((C6525 + C6524) * C141353 + (C5998 + C5997) * C275) * C5864 +
            ((C6523 + C6522) * C141353 + (C5994 + C5993) * C275) * C5863) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C43030 +
            (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                C42873 +
            (C5966 * C1601 + C141478 * C1690 + C5967 * C3490 +
             C141341 * C3572) *
                C43031 +
            (C5966 * C1784 + C141478 * C2197 + C5967 * C3646 +
             C141341 * C4004) *
                C42874 +
            (C5966 * C5325 + C141478 * C5391 + C5967 * C13205 +
             C141341 * C13294) *
                C43032 +
            (C5966 * C5449 + C141478 * C5727 + C5967 * C13374 +
             C141341 * C13768) *
                C42875) *
               C141219 * C141298 * C816 -
           ((C5967 * C29251 + C141341 * C29639 + C5966 * C13374 +
             C141478 * C13768) *
                C42875 +
            (C5967 * C29087 + C141341 * C29173 + C5966 * C13205 +
             C141478 * C13294) *
                C43032 +
            (C5967 * C10699 + C141341 * C11255 + C5966 * C3646 +
             C141478 * C4004) *
                C42874 +
            (C5967 * C10470 + C141341 * C10595 + C5966 * C3490 +
             C141478 * C3572) *
                C43031 +
            (C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
             C141478 * C1419) *
                C42873 +
            (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                C43030) *
               C141219 * C141298 * C141497) *
              C818 +
          (((C6867 + C6866) * C43030 + (C7596 + C7595) * C42873 +
            (C5966 * C3491 + C141478 * C3573 + C5967 * C10471 +
             C141341 * C10596) *
                C43031 +
            (C5966 * C3647 + C141478 * C4005 + C5967 * C10700 +
             C141341 * C11256) *
                C42874 +
            (C5966 * C13206 + C141478 * C13295 + C5967 * C29088 +
             C141341 * C29174) *
                C43032 +
            (C5966 * C13375 + C141478 * C13769 + C5967 * C29252 +
             C141341 * C29640) *
                C42875) *
               C141219 * C141298 * C141497 -
           ((C5967 * C13375 + C141341 * C13769 + C5966 * C5450 +
             C141478 * C5728) *
                C42875 +
            (C5967 * C13206 + C141341 * C13295 + C5966 * C5326 +
             C141478 * C5392) *
                C43032 +
            (C8598 + C8599) * C42874 + (C7944 + C7945) * C43031 +
            (C6523 + C6522) * C42873 + (C5994 + C5993) * C43030) *
               C141219 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[64] +=
        (-std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C29770 +
            C7709 * C29771 + C10372 * C29772 + C26253 * C29773) *
               C141219 * C141298 * C816 -
           ((C713 * C25568 + C26249 + C26249 + C141353 * C26244) * C29773 +
            C26253 * C29772 + C10372 * C29771 + C7709 * C29770) *
               C141219 * C141298 * C141497) *
              C818 +
          ((C1527 * C29770 + C7711 * C29771 + C23643 * C29772 +
            (C713 * C25569 + C26250 + C26250 + C141353 * C26245) * C29773) *
               C141219 * C141298 * C141497 -
           (C23643 * C29773 + C7711 * C29772 + C1527 * C29771 + C743 * C29770) *
               C141219 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C141478 +
             C7709 * C141341) *
                C5863 +
            (C6605 + C6606) * C5864 + C6611 * C5865) *
               C141298 * C816 -
           ((C7712 + C7699) * C5865 + (C7713 + C7702) * C5864 +
            ((C713 * C2960 + C3421 + C3421 + C141353 * C3416) * C141341 +
             C7709 * C141478) *
                C5863) *
               C141298 * C141497) *
              C818 +
          (((C7702 + C7713) * C5863 + (C7699 + C7712) * C5864 +
            (C1525 * C141478 +
             (C713 * C2963 + C3424 + C3424 + C141353 * C3419) * C141341) *
                C5865) *
               C141298 * C141497 -
           ((C6609 + C6610) * C5865 + (C6608 + C6607) * C5864 +
            (C6606 + C6605) * C5863) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43543 * C108 + C43547 + C43547 + C42873 * C714 + C43544 * C1601 +
             C43548 + C43548 + C42874 * C2283 + C43545 * C5325 + C43549 +
             C43549 + C42875 * C5781) *
                C141478 +
            (C52302 + C52303 + C52304) * C141341) *
               C141219 * C141298 * C816 -
           ((C43545 * C29087 + C47189 + C47189 + C42875 * C29715 +
             C43544 * C10470 + C47188 + C47188 + C42874 * C11356 +
             C43543 * C2960 + C47187 + C47187 + C42873 * C3416) *
                C141341 +
            (C52304 + C52303 + C52302) * C141478) *
               C141219 * C141298 * C141497) *
              C818 +
          (((C44543 + C44542 + C44541) * C141478 +
            (C43543 * C2961 + C47190 + C47190 + C42873 * C3417 +
             C43544 * C10471 + C47191 + C47191 + C42874 * C11357 +
             C43545 * C29088 + C47192 + C47192 + C42875 * C29716) *
                C141341) *
               C141219 * C141298 * C141497 -
           ((C44541 + C44542 + C44543) * C141341 +
            (C43585 + C43584 + C43583) * C141478) *
               C141219 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[65] +=
        (-std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141353 *
                C29770 +
            C30307 * C29771 + C30308 * C29772 + C30309 * C29773) *
               C1596 -
           ((C29774 * C26351 + C30993 + C30993 + C141219 * C26355) * C141353 *
                C29773 +
            (C29774 * C10470 + C30994 + C30994 + C141219 * C10476) * C141353 *
                C29772 +
            (C29774 * C3490 + C30995 + C30995 + C141219 * C3498) * C141353 *
                C29771 +
            (C29774 * C1601 + C30996 + C30996 + C141219 * C1611) * C141353 *
                C29770) *
               C141499) *
              C141281 * C818 +
          (((C29774 * C1600 + C30997 + C30997 + C141219 * C1610) * C141353 *
                C29770 +
            (C29774 * C3491 + C30998 + C30998 + C141219 * C3499) * C141353 *
                C29771 +
            (C29774 * C10471 + C30999 + C30999 + C141219 * C10477) * C141353 *
                C29772 +
            (C29774 * C26352 + C31000 + C31000 + C141219 * C26356) * C141353 *
                C29773) *
               C141499 -
           (C30312 * C29773 + C30311 * C29772 + C30310 * C29771 +
            (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141353 *
                C29770) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 +
             C5876 + C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
             C5865 * C122) *
                C141353 * C141478 +
            (C6740 + C6741 + C6742) * C141353 * C141341) *
               C1596 -
           ((C5872 * C3492 + C7812 + C7812 + C5865 * C3500 + C5870 * C3491 +
             C7813 + C7813 + C5864 * C3499 + C5868 * C3490 + C7814 + C7814 +
             C5863 * C3498) *
                C141353 * C141341 +
            (C5872 * C1599 + C7815 + C7815 + C5865 * C1609 + C5870 * C1600 +
             C7816 + C7816 + C5864 * C1610 + C5868 * C1601 + C7817 + C7817 +
             C5863 * C1611) *
                C141353 * C141478) *
               C141499) *
              C141281 * C818 +
          (((C5868 * C1600 + C7818 + C7818 + C5863 * C1610 + C5870 * C1599 +
             C7819 + C7819 + C5864 * C1609 + C5872 * C1598 + C7820 + C7820 +
             C5865 * C1608) *
                C141353 * C141478 +
            (C5868 * C3491 + C7821 + C7821 + C5863 * C3499 + C5870 * C3492 +
             C7822 + C7822 + C5864 * C3500 + C5872 * C3493 + C7823 + C7823 +
             C5865 * C3501) *
                C141353 * C141341) *
               C141499 -
           ((C6745 + C6744 + C6743) * C141353 * C141341 +
            (C5872 * C111 + C5884 + C5884 + C5865 * C123 + C5870 * C110 +
             C5885 + C5885 + C5864 * C122 + C5868 * C109 + C5886 + C5886 +
             C5863 * C121) *
                C141353 * C141478) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C42873 +
             C36781 * C42874 + C42123 * C42875) *
                C141478 +
            (C51443 + C51444 + C51445) * C141341) *
               C1596 -
           (((C29774 * C42109 + C42119 + C42119 + C141219 * C42113) * C42875 +
             C39350 * C42874 + C32721 * C42873) *
                C141341 +
            ((C29774 * C21035 + C42118 + C42118 + C141219 * C21041) * C42875 +
             C42123 * C42874 + C36781 * C42873) *
                C141478) *
               C141499) *
              C141281 * C818 +
          (((C36782 * C42873 + C52409 * C42874 +
             (C29774 * C21036 + C52405 + C52405 + C141219 * C21042) * C42875) *
                C141478 +
            (C35762 * C42873 + C51452 * C42874 +
             (C29774 * C47290 + C52406 + C52406 + C141219 * C47292) * C42875) *
                C141341) *
               C141499 -
           ((C51453 + C51447 + C51446) * C141341 +
            (C52409 * C42875 + C36782 * C42874 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C42873) *
                C141478) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexy[65] +=
        (-std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C29775 +
            (C29838 * C114 + C29770 * C195 + C29839 * C828 + C29771 * C917 +
             C29840 * C2964 + C29772 * C3030 + C29841 * C9670 +
             C29773 * C9771) *
                C141219) *
               C141353 * C1596 -
           ((C29841 * C26353 + C29773 * C26479 + C29840 * C10473 +
             C29772 * C10598 + C29839 * C3494 + C29771 * C3576 +
             C29838 * C1606 + C29770 * C1695) *
                C141219 +
            (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
             C29772 * C10595 + C29839 * C3490 + C29771 * C3572 +
             C29838 * C1601 + C29770 * C1690) *
                C29775) *
               C141353 * C141499) *
              C141281 * C818 +
          (((C29838 * C1600 + C29770 * C1689 + C29839 * C3491 + C29771 * C3573 +
             C29840 * C10471 + C29772 * C10596 + C29841 * C26352 +
             C29773 * C26478) *
                C29775 +
            (C29838 * C1605 + C29770 * C1694 + C29839 * C3495 + C29771 * C3577 +
             C29840 * C10474 + C29772 * C10599 + C29841 * C26354 +
             C29773 * C26480) *
                C141219) *
               C141353 * C141499 -
           ((C29841 * C9671 + C29773 * C9772 + C29840 * C2965 + C29772 * C3031 +
             C29839 * C827 + C29771 * C916 + C29838 * C115 + C29770 * C196) *
                C141219 +
            (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
             C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
                C29775) *
               C141353 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C5869 +
            (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                C5863 +
            (C5993 + C5994) * C5871 + (C5995 + C5996) * C5864 + C6005 * C5873 +
            C6006 * C5865) *
               C141353 * C1596 -
           ((C7938 + C7939) * C5865 + (C7940 + C7941) * C5873 +
            (C7942 + C7943) * C5864 + (C7944 + C7945) * C5871 +
            (C5967 * C3494 + C141341 * C3576 + C5966 * C1606 +
             C141478 * C1695) *
                C5863 +
            (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 +
             C141478 * C1690) *
                C5869) *
               C141353 * C141499) *
              C141281 * C818 +
          (((C7945 + C7944) * C5869 + (C7943 + C7942) * C5863 +
            (C7941 + C7940) * C5871 + (C7939 + C7938) * C5864 +
            (C5966 * C1598 + C141478 * C1687 + C5967 * C3493 +
             C141341 * C3575) *
                C5873 +
            (C5966 * C1603 + C141478 * C1692 + C5967 * C3497 +
             C141341 * C3579) *
                C5865) *
               C141353 * C141499 -
           ((C6001 + C6002) * C5865 + (C6003 + C6004) * C5873 +
            (C6000 + C5999) * C5864 + (C5998 + C5997) * C5871 +
            (C5996 + C5995) * C5863 + (C5994 + C5993) * C5869) *
               C141353 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C29775 +
             (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                 C141219) *
                C42873 +
            ((C52532 + C52533) * C29775 + (C52534 + C52535) * C141219) *
                C42874 +
            ((C52536 + C52537) * C29775 + (C52538 + C52539) * C141219) *
                C42875) *
               C1596 -
           (((C5967 * C42111 + C141341 * C42199 + C5966 * C21038 +
              C141478 * C21139) *
                 C141219 +
             (C5967 * C42109 + C141341 * C42197 + C5966 * C21035 +
              C141478 * C21136) *
                 C29775) *
                C42875 +
            ((C52539 + C52538) * C141219 + (C52537 + C52536) * C29775) *
                C42874 +
            ((C52535 + C52534) * C141219 + (C52533 + C52532) * C29775) *
                C42873) *
               C141499) *
              C141281 * C818 +
          ((((C7945 + C7944) * C29775 + (C7943 + C7942) * C141219) * C42873 +
            ((C52540 + C52541) * C29775 + (C52542 + C52543) * C141219) *
                C42874 +
            ((C5966 * C21036 + C141478 * C21137 + C5967 * C47290 +
              C141341 * C47403) *
                 C29775 +
             (C5966 * C21039 + C141478 * C21140 + C5967 * C47291 +
              C141341 * C47404) *
                 C141219) *
                C42875) *
               C141499 -
           (((C52543 + C52542) * C141219 + (C52541 + C52540) * C29775) *
                C42875 +
            ((C7942 + C7943) * C141219 + (C7944 + C7945) * C29775) * C42874 +
            ((C5996 + C5995) * C141219 + (C5994 + C5993) * C29775) * C42873) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[65] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C29775 +
             (C275 * C114 + C141353 * C282) * C141219) *
                C29770 +
            (C30445 + C30446) * C29771 + (C30447 + C30448) * C29772 +
            (C30449 + C30450) * C29773) *
               C1596 -
           (((C275 * C26353 + C141353 * C26581) * C141219 +
             (C275 * C26351 + C141353 * C26579) * C29775) *
                C29773 +
            (C26594 * C141219 + C26595 * C29775) * C29772 +
            (C10714 * C141219 + C10715 * C29775) * C29771 +
            ((C275 * C1606 + C141353 * C1789) * C141219 +
             (C275 * C1601 + C141353 * C1784) * C29775) *
                C29770) *
               C141499) *
              C141281 * C818 +
          (((C1809 * C29775 + C1808 * C141219) * C29770 +
            (C8055 * C29775 + C8054 * C141219) * C29771 +
            (C23974 * C29775 + C23973 * C141219) * C29772 +
            ((C275 * C26352 + C141353 * C26580) * C29775 +
             (C275 * C26354 + C141353 * C26582) * C141219) *
                C29773) *
               C141499 -
           ((C30456 + C30455) * C29773 + (C30454 + C30453) * C29772 +
            (C30452 + C30451) * C29771 +
            (C306 * C141219 + C305 * C29775) * C29770) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5869 +
             (C275 * C114 + C141353 * C282) * C5863 + C305 * C5871 +
             C306 * C5864 + C307 * C5873 + C308 * C5865) *
                C141478 +
            (C6994 + C6995 + C6970 + C6971 + C6972 + C6973) * C141341) *
               C1596 -
           ((C8052 * C5865 + C8053 * C5873 + C8054 * C5864 + C8055 * C5871 +
             (C275 * C3494 + C141353 * C3650) * C5863 +
             (C275 * C3490 + C141353 * C3646) * C5869) *
                C141341 +
            (C1806 * C5865 + C1807 * C5873 + C1808 * C5864 + C1809 * C5871 +
             (C275 * C1606 + C141353 * C1789) * C5863 +
             (C275 * C1601 + C141353 * C1784) * C5869) *
                C141478) *
               C141499) *
              C141281 * C818 +
          (((C1809 * C5869 + C1808 * C5863 + C1807 * C5871 + C1806 * C5864 +
             C1805 * C5873 + C1804 * C5865) *
                C141478 +
            (C8055 * C5869 + C8054 * C5863 + C8053 * C5871 + C8052 * C5864 +
             (C275 * C3493 + C141353 * C3649) * C5873 +
             (C275 * C3497 + C141353 * C3653) * C5865) *
                C141341) *
               C141499 -
           ((C6987 + C6986 + C6985 + C6984 + C6983 + C6982) * C141341 +
            (C310 * C5865 + C309 * C5873 + C308 * C5864 + C307 * C5871 +
             C306 * C5863 + C305 * C5869) *
                C141478) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
              C43032 * C5325 + C42875 * C5449) *
                 C29775 +
             (C43030 * C114 + C42873 * C282 + C43031 * C1606 + C42874 * C1789 +
              C43032 * C5329 + C42875 * C5453) *
                 C141219) *
                C141478 +
            ((C51662 + C51663 + C51664) * C29775 +
             (C51665 + C51666 + C51667) * C141219) *
                C141341) *
               C1596 -
           (((C43032 * C42111 + C42875 * C42295 + C43031 * C13208 +
              C42874 * C13377 + C43030 * C3494 + C42873 * C3650) *
                 C141219 +
             (C43032 * C42109 + C42875 * C42293 + C43031 * C13205 +
              C42874 * C13374 + C43030 * C3490 + C42873 * C3646) *
                 C29775) *
                C141341 +
            ((C43032 * C21038 + C42875 * C21231 + C43031 * C5329 +
              C42874 * C5453 + C43030 * C1606 + C42873 * C1789) *
                 C141219 +
             (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
              C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                 C29775) *
                C141478) *
               C141499) *
              C141281 * C818 +
          ((((C44921 + C44920 + C44919) * C29775 +
             (C44918 + C44917 + C44916) * C141219) *
                C141478 +
            ((C43030 * C3491 + C42873 * C3647 + C43031 * C13206 +
              C42874 * C13375 + C43032 * C47290 + C42875 * C47517) *
                 C29775 +
             (C43030 * C3495 + C42873 * C3651 + C43031 * C13209 +
              C42874 * C13378 + C43032 * C47291 + C42875 * C47518) *
                 C141219) *
                C141341) *
               C141499 -
           (((C43903 + C43904 + C43905) * C141219 +
             (C43906 + C43907 + C43908) * C29775) *
                C141341 +
            ((C43063 + C43062 + C43061) * C141219 +
             (C43060 + C43059 + C43058) * C29775) *
                C141478) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[65] += (-std::pow(Pi, 2.5) *
                   ((((C29775 * C108 + C141219 * C114) * C29838 +
                      (C29775 * C189 + C141219 * C362) * C29770 +
                      C30547 * C29839 + C30548 * C29771 + C30549 * C29840 +
                      C30550 * C29772 + C30551 * C29841 + C30552 * C29773) *
                         C141353 * C1596 -
                     ((C29775 * C26477 + C141219 * C26695) * C29773 +
                      (C29775 * C26351 + C141219 * C26353) * C29841 +
                      (C29775 * C10595 + C141219 * C10815) * C29772 +
                      (C29775 * C10470 + C141219 * C10473) * C29840 +
                      (C29775 * C3572 + C141219 * C3720) * C29771 +
                      (C29775 * C3490 + C141219 * C3494) * C29839 +
                      (C29775 * C1690 + C141219 * C1878) * C29770 +
                      (C29775 * C1601 + C141219 * C1606) * C29838) *
                         C141353 * C141499) *
                        C141281 * C818 +
                    (((C29775 * C1600 + C141219 * C1605) * C29838 +
                      (C29775 * C1689 + C141219 * C1877) * C29770 +
                      (C29775 * C3491 + C141219 * C3495) * C29839 +
                      (C29775 * C3573 + C141219 * C3721) * C29771 +
                      (C29775 * C10471 + C141219 * C10474) * C29840 +
                      (C29775 * C10596 + C141219 * C10816) * C29772 +
                      (C29775 * C26352 + C141219 * C26354) * C29841 +
                      (C29775 * C26478 + C141219 * C26696) * C29773) *
                         C141353 * C141499 -
                     (C30558 * C29773 + C30557 * C29841 + C30556 * C29772 +
                      C30555 * C29840 + C30554 * C29771 + C30553 * C29839 +
                      (C29775 * C190 + C141219 * C363) * C29770 +
                      (C29775 * C109 + C141219 * C115) * C29838) *
                         C141353 * C1596) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                       C5864 * C115 + C5873 * C110 + C5865 * C116) *
                          C5966 +
                      (C5869 * C189 + C5863 * C362 + C5871 * C190 +
                       C5864 * C363 + C5873 * C191 + C5865 * C364) *
                          C141478 +
                      (C7118 + C7119 + C7120) * C5967 +
                      (C7121 + C7122 + C7123) * C141341) *
                         C141353 * C1596 -
                     ((C5873 * C3574 + C5865 * C3722 + C5871 * C3573 +
                       C5864 * C3721 + C5869 * C3572 + C5863 * C3720) *
                          C141341 +
                      (C5873 * C3492 + C5865 * C3496 + C5871 * C3491 +
                       C5864 * C3495 + C5869 * C3490 + C5863 * C3494) *
                          C5967 +
                      (C5873 * C1688 + C5865 * C1876 + C5871 * C1689 +
                       C5864 * C1877 + C5869 * C1690 + C5863 * C1878) *
                          C141478 +
                      (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 +
                       C5864 * C1605 + C5869 * C1601 + C5863 * C1606) *
                          C5966) *
                         C141353 * C141499) *
                        C141281 * C818 +
                    (((C5869 * C1600 + C5863 * C1605 + C5871 * C1599 +
                       C5864 * C1604 + C5873 * C1598 + C5865 * C1603) *
                          C5966 +
                      (C5869 * C1689 + C5863 * C1877 + C5871 * C1688 +
                       C5864 * C1876 + C5873 * C1687 + C5865 * C1875) *
                          C141478 +
                      (C5869 * C3491 + C5863 * C3495 + C5871 * C3492 +
                       C5864 * C3496 + C5873 * C3493 + C5865 * C3497) *
                          C5967 +
                      (C5869 * C3573 + C5863 * C3721 + C5871 * C3574 +
                       C5864 * C3722 + C5873 * C3575 + C5865 * C3723) *
                          C141341) *
                         C141353 * C141499 -
                     ((C7129 + C7128 + C7127) * C141341 +
                      (C7126 + C7125 + C7124) * C5967 +
                      (C5873 * C192 + C5865 * C365 + C5871 * C191 +
                       C5864 * C364 + C5869 * C190 + C5863 * C363) *
                          C141478 +
                      (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                       C5864 * C116 + C5869 * C109 + C5863 * C115) *
                          C5966) *
                         C141353 * C1596) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C5966 +
                       (C29775 * C189 + C141219 * C362) * C141478 +
                       C30547 * C5967 + C30548 * C141341) *
                          C42873 +
                      (C52740 + C52741 + C52742 + C52743) * C42874 +
                      (C52744 + C52745 + C52746 + C52747) * C42875) *
                         C1596 -
                     (((C29775 * C42197 + C141219 * C42371) * C141341 +
                       (C29775 * C42109 + C141219 * C42111) * C5967 +
                       (C29775 * C21136 + C141219 * C21308) * C141478 +
                       (C29775 * C21035 + C141219 * C21038) * C5966) *
                          C42875 +
                      (C52747 + C52746 + C52745 + C52744) * C42874 +
                      (C52743 + C52742 + C52741 + C52740) * C42873) *
                         C141499) *
                        C141281 * C818 +
                    (((C52748 + C52749 + C52750 + C52751) * C42873 +
                      (C52760 + C52761 + C52756 + C52757) * C42874 +
                      ((C29775 * C21036 + C141219 * C21039) * C5966 +
                       (C29775 * C21137 + C141219 * C21309) * C141478 +
                       (C29775 * C47290 + C141219 * C47291) * C5967 +
                       (C29775 * C47403 + C141219 * C47617) * C141341) *
                          C42875) *
                         C141499 -
                     ((C52757 + C52756 + C52761 + C52760) * C42875 +
                      (C52751 + C52750 + C52749 + C52748) * C42874 +
                      (C30554 * C141341 + C30553 * C5967 +
                       (C29775 * C190 + C141219 * C363) * C141478 +
                       (C29775 * C109 + C141219 * C115) * C5966) *
                          C42873) *
                         C1596) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[65] += (-std::pow(Pi, 2.5) *
                   (((C29992 * C108 + C29997 + C29997 + C29770 * C419 +
                      C29993 * C823 + C29998 + C29998 + C29771 * C1171 +
                      C29994 * C2960 + C29999 + C29999 + C29772 * C3196 +
                      C29995 * C9667 + C30000 + C30000 + C29773 * C10035) *
                         C141219 * C141353 * C1596 -
                     (C29995 * C26351 + C31265 + C31265 + C29773 * C26819 +
                      C29994 * C10470 + C31266 + C31266 + C29772 * C10934 +
                      C29993 * C3490 + C31267 + C31267 + C29771 * C3790 +
                      C29992 * C1601 + C31268 + C31268 + C29770 * C1949) *
                         C141219 * C141353 * C141499) *
                        C141281 * C818 +
                    ((C29992 * C1600 + C31269 + C31269 + C29770 * C1948 +
                      C29993 * C3491 + C31270 + C31270 + C29771 * C3791 +
                      C29994 * C10471 + C31271 + C31271 + C29772 * C10935 +
                      C29995 * C26352 + C31272 + C31272 + C29773 * C26820) *
                         C141219 * C141353 * C141499 -
                     (C29995 * C9668 + C30001 + C30001 + C29773 * C10036 +
                      C29994 * C2961 + C30002 + C30002 + C29772 * C3197 +
                      C29993 * C822 + C30003 + C30003 + C29771 * C1170 +
                      C29992 * C109 + C30004 + C30004 + C29770 * C420) *
                         C141219 * C141353 * C1596) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                       C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                          C5863 +
                      (C6265 + C6266) * C5864 + C6271 * C5865) *
                         C141353 * C1596 -
                     ((C8276 + C8277) * C5865 + (C8278 + C8279) * C5864 +
                      (C6229 * C3490 + C8264 + C8264 + C141341 * C3790 +
                       C6228 * C1601 + C8265 + C8265 + C141478 * C1949) *
                          C5863) *
                         C141353 * C141499) *
                        C141281 * C818 +
                    (((C8279 + C8278) * C5863 + (C8277 + C8276) * C5864 +
                      (C6228 * C1598 + C8266 + C8266 + C141478 * C1946 +
                       C6229 * C3493 + C8267 + C8267 + C141341 * C3793) *
                          C5865) *
                         C141353 * C141499 -
                     ((C6269 + C6270) * C5865 + (C6268 + C6267) * C5864 +
                      (C6266 + C6265) * C5863) *
                         C141353 * C1596) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                       C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                          C141219 * C42873 +
                      (C52888 + C52889) * C141219 * C42874 +
                      (C52890 + C52891) * C141219 * C42875) *
                         C1596 -
                     ((C6229 * C42109 + C52868 + C52868 + C141341 * C42459 +
                       C6228 * C21035 + C52869 + C52869 + C141478 * C21403) *
                          C141219 * C42875 +
                      (C52891 + C52890) * C141219 * C42874 +
                      (C52889 + C52888) * C141219 * C42873) *
                         C141499) *
                        C141281 * C818 +
                    (((C8279 + C8278) * C141219 * C42873 +
                      (C52892 + C52893) * C141219 * C42874 +
                      (C6228 * C21036 + C52874 + C52874 + C141478 * C21404 +
                       C6229 * C47290 + C52875 + C52875 + C141341 * C47728) *
                          C141219 * C42875) *
                         C141499 -
                     ((C52893 + C52892) * C141219 * C42875 +
                      (C8278 + C8279) * C141219 * C42874 +
                      (C6266 + C6265) * C141219 * C42873) *
                         C1596) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[65] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C29838 +
            (C275 * C189 + C141353 * C501) * C29770 + C6988 * C29839 +
            C7366 * C29771 + C9864 * C29840 + C10124 * C29772 +
            C25754 * C29841 + C26008 * C29773) *
               C141219 * C1596 -
           ((C275 * C26477 + C141353 * C26925) * C29773 +
            (C275 * C26351 + C141353 * C26579) * C29841 + C26930 * C29772 +
            C26595 * C29840 + C11047 * C29771 + C10715 * C29839 +
            (C275 * C1690 + C141353 * C2040) * C29770 +
            (C275 * C1601 + C141353 * C1784) * C29838) *
               C141219 * C141499) *
              C141281 * C818 +
          ((C1809 * C29838 + C2054 * C29770 + C8055 * C29839 + C8389 * C29771 +
            C23974 * C29840 + C24300 * C29772 +
            (C275 * C26352 + C141353 * C26580) * C29841 +
            (C275 * C26478 + C141353 * C26926) * C29773) *
               C141219 * C141499 -
           (C23308 * C29773 + C22934 * C29841 + C7368 * C29772 +
            C6993 * C29840 + C1276 * C29771 + C1031 * C29839 + C520 * C29770 +
            C305 * C29838) *
               C141219 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5966 +
             (C275 * C189 + C141353 * C501) * C141478 + C6988 * C5967 +
             C7366 * C141341) *
                C5863 +
            (C6346 + C6347 + C6348 + C6349) * C5864 + C6360 * C5865) *
               C1596 -
           ((C8390 + C8380 + C8381 + C8382) * C5865 +
            (C8391 + C8385 + C8386 + C8387) * C5864 +
            ((C275 * C3572 + C141353 * C3864) * C141341 +
             (C275 * C3490 + C141353 * C3646) * C5967 +
             (C275 * C1690 + C141353 * C2040) * C141478 +
             (C275 * C1601 + C141353 * C1784) * C5966) *
                C5863) *
               C141499) *
              C141281 * C818 +
          (((C8387 + C8386 + C8385 + C8391) * C5863 +
            (C8382 + C8381 + C8380 + C8390) * C5864 +
            (C1805 * C5966 + C2052 * C141478 +
             (C275 * C3493 + C141353 * C3649) * C5967 +
             (C275 * C3575 + C141353 * C3867) * C141341) *
                C5865) *
               C141499 -
           ((C6354 + C6355 + C6356 + C6357) * C5865 +
            (C6353 + C6352 + C6351 + C6350) * C5864 +
            (C6349 + C6348 + C6347 + C6346) * C5863) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
             C43032 * C5325 + C42875 * C5449) *
                C5966 +
            (C43030 * C189 + C42873 * C501 + C43031 * C1690 + C42874 * C2040 +
             C43032 * C5391 + C42875 * C5619) *
                C141478 +
            (C51662 + C51663 + C51664) * C5967 +
            (C51978 + C51979 + C51980) * C141341) *
               C141219 * C1596 -
           ((C43032 * C42197 + C42875 * C42553 + C43031 * C13294 +
             C42874 * C13614 + C43030 * C3572 + C42873 * C3864) *
                C141341 +
            (C43032 * C42109 + C42875 * C42293 + C43031 * C13205 +
             C42874 * C13374 + C43030 * C3490 + C42873 * C3646) *
                C5967 +
            (C43032 * C21136 + C42875 * C21491 + C43031 * C5391 +
             C42874 * C5619 + C43030 * C1690 + C42873 * C2040) *
                C141478 +
            (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
             C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                C5966) *
               C141219 * C141499) *
              C141281 * C818 +
          (((C44921 + C44920 + C44919) * C5966 +
            (C45285 + C45284 + C45283) * C141478 +
            (C43030 * C3491 + C42873 * C3647 + C43031 * C13206 +
             C42874 * C13375 + C43032 * C47290 + C42875 * C47517) *
                C5967 +
            (C43030 * C3573 + C42873 * C3865 + C43031 * C13295 +
             C42874 * C13615 + C43032 * C47403 + C42875 * C47838) *
                C141341) *
               C141219 * C141499 -
           ((C44214 + C44215 + C44216) * C141341 +
            (C43906 + C43907 + C43908) * C5967 +
            (C43306 + C43305 + C43304) * C141478 +
            (C43060 + C43059 + C43058) * C5966) *
               C141219 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[65] +=
        (-std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C275 +
             (C29775 * C276 + C141219 * C579) * C141353) *
                C29770 +
            (C30765 + C30789) * C29771 + (C30768 + C30790) * C29772 +
            (C30771 + C30791) * C29773) *
               C1596 -
           (((C29775 * C26579 + C141219 * C27028) * C141353 +
             (C29775 * C26351 + C141219 * C26353) * C275) *
                C29773 +
            ((C29775 * C10699 + C141219 * C11145) * C141353 +
             (C29775 * C10470 + C141219 * C10473) * C275) *
                C29772 +
            ((C29775 * C3646 + C141219 * C3934) * C141353 +
             (C29775 * C3490 + C141219 * C3494) * C275) *
                C29771 +
            ((C29775 * C1784 + C141219 * C2126) * C141353 +
             (C29775 * C1601 + C141219 * C1606) * C275) *
                C29770) *
               C141499) *
              C141281 * C818 +
          ((((C29775 * C1600 + C141219 * C1605) * C275 +
             (C29775 * C1783 + C141219 * C2125) * C141353) *
                C29770 +
            ((C29775 * C3491 + C141219 * C3495) * C275 +
             (C29775 * C3647 + C141219 * C3935) * C141353) *
                C29771 +
            ((C29775 * C10471 + C141219 * C10474) * C275 +
             (C29775 * C10700 + C141219 * C11146) * C141353) *
                C29772 +
            ((C29775 * C26352 + C141219 * C26354) * C275 +
             (C29775 * C26580 + C141219 * C27029) * C141353) *
                C29773) *
               C141499 -
           ((C30794 + C30780) * C29773 + (C30793 + C30777) * C29772 +
            (C30792 + C30774) * C29771 +
            ((C29775 * C277 + C141219 * C580) * C141353 +
             (C29775 * C109 + C141219 * C115) * C275) *
                C29770) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
              C5873 * C278 + C5865 * C581) *
                 C141353) *
                C141478 +
            ((C7118 + C7119 + C7120) * C275 +
             (C7481 + C7482 + C7483) * C141353) *
                C141341) *
               C1596 -
           (((C5873 * C3648 + C5865 * C3936 + C5871 * C3647 + C5864 * C3935 +
              C5869 * C3646 + C5863 * C3934) *
                 C141353 +
             (C5873 * C3492 + C5865 * C3496 + C5871 * C3491 + C5864 * C3495 +
              C5869 * C3490 + C5863 * C3494) *
                 C275) *
                C141341 +
            ((C5873 * C1782 + C5865 * C2124 + C5871 * C1783 + C5864 * C2125 +
              C5869 * C1784 + C5863 * C2126) *
                 C141353 +
             (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 + C5864 * C1605 +
              C5869 * C1601 + C5863 * C1606) *
                 C275) *
                C141478) *
               C141499) *
              C141281 * C818 +
          ((((C5869 * C1600 + C5863 * C1605 + C5871 * C1599 + C5864 * C1604 +
              C5873 * C1598 + C5865 * C1603) *
                 C275 +
             (C5869 * C1783 + C5863 * C2125 + C5871 * C1782 + C5864 * C2124 +
              C5873 * C1781 + C5865 * C2123) *
                 C141353) *
                C141478 +
            ((C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C5864 * C3496 +
              C5873 * C3493 + C5865 * C3497) *
                 C275 +
             (C5869 * C3647 + C5863 * C3935 + C5871 * C3648 + C5864 * C3936 +
              C5873 * C3649 + C5865 * C3937) *
                 C141353) *
                C141341) *
               C141499 -
           (((C7486 + C7485 + C7484) * C141353 +
             (C7126 + C7125 + C7124) * C275) *
                C141341 +
            ((C5873 * C279 + C5865 * C582 + C5871 * C278 + C5864 * C581 +
              C5869 * C277 + C5863 * C580) *
                 C141353 +
             (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
              C5869 * C109 + C5863 * C115) *
                 C275) *
                C141478) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C43030 +
             (C29775 * C276 + C141219 * C579) * C42873 + C37111 * C43031 +
             C37432 * C42874 + C42383 * C43032 + C42634 * C42875) *
                C141478 +
            (C52079 + C52080 + C52081 + C52082 + C52083 + C52084) * C141341) *
               C1596 -
           (((C29775 * C42293 + C141219 * C42629) * C42875 +
             (C29775 * C42109 + C141219 * C42111) * C43032 + C40042 * C42874 +
             C39706 * C43031 + C33177 * C42873 + C32957 * C43030) *
                C141341 +
            ((C29775 * C21228 + C141219 * C21568) * C42875 +
             (C29775 * C21035 + C141219 * C21038) * C43032 + C42634 * C42874 +
             C42383 * C43031 + C37432 * C42873 + C37111 * C43030) *
                C141478) *
               C141499) *
              C141281 * C818 +
          (((C37113 * C43030 + C37433 * C42873 + C52758 * C43031 +
             C53092 * C42874 + (C29775 * C21036 + C141219 * C21039) * C43032 +
             (C29775 * C21229 + C141219 * C21569) * C42875) *
                C141478 +
            (C36104 * C43030 + C36438 * C42873 + C51770 * C43031 +
             C52092 * C42874 + (C29775 * C47290 + C141219 * C47291) * C43032 +
             (C29775 * C47517 + C141219 * C47937) * C42875) *
                C141341) *
               C141499 -
           ((C52093 + C52089 + C52088 + C52087 + C52086 + C52085) * C141341 +
            (C53092 * C42875 + C52758 * C43032 + C37433 * C42874 +
             C37113 * C43031 + (C29775 * C277 + C141219 * C580) * C42873 +
             (C29775 * C109 + C141219 * C115) * C43030) *
                C141478) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezy[65] +=
        (-std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C275 +
            (C29838 * C276 + C29770 * C635 + C29839 * C1006 + C29771 * C1419 +
             C29840 * C3084 + C29772 * C3362 + C29841 * C9848 +
             C29773 * C10284) *
                C141353) *
               C141219 * C1596 -
           ((C29841 * C26579 + C29773 * C27140 + C29840 * C10699 +
             C29772 * C11255 + C29839 * C3646 + C29771 * C4004 +
             C29838 * C1784 + C29770 * C2197) *
                C141353 +
            (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
             C29772 * C10595 + C29839 * C3490 + C29771 * C3572 +
             C29838 * C1601 + C29770 * C1690) *
                C275) *
               C141219 * C141499) *
              C141281 * C818 +
          (((C29838 * C1600 + C29770 * C1689 + C29839 * C3491 + C29771 * C3573 +
             C29840 * C10471 + C29772 * C10596 + C29841 * C26352 +
             C29773 * C26478) *
                C275 +
            (C29838 * C1783 + C29770 * C2196 + C29839 * C3647 + C29771 * C4005 +
             C29840 * C10700 + C29772 * C11256 + C29841 * C26580 +
             C29773 * C27141) *
                C141353) *
               C141219 * C141499 -
           ((C29841 * C9849 + C29773 * C10285 + C29840 * C3085 +
             C29772 * C3363 + C29839 * C1005 + C29771 * C1418 + C29838 * C277 +
             C29770 * C636) *
                C141353 +
            (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
             C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
                C275) *
               C141219 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C275 +
             (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                 C141353) *
                C5863 +
            ((C5993 + C5994) * C275 + (C6522 + C6523) * C141353) * C5864 +
            C6530 * C5865) *
               C1596 -
           (((C8596 + C8597) * C141353 + (C7940 + C7941) * C275) * C5865 +
            ((C8598 + C8599) * C141353 + (C7944 + C7945) * C275) * C5864 +
            ((C5967 * C3646 + C141341 * C4004 + C5966 * C1784 +
              C141478 * C2197) *
                 C141353 +
             (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 +
              C141478 * C1690) *
                 C275) *
                C5863) *
               C141499) *
              C141281 * C818 +
          ((((C7945 + C7944) * C275 + (C8599 + C8598) * C141353) * C5863 +
            ((C7941 + C7940) * C275 + (C8597 + C8596) * C141353) * C5864 +
            ((C5966 * C1598 + C141478 * C1687 + C5967 * C3493 +
              C141341 * C3575) *
                 C275 +
             (C5966 * C1781 + C141478 * C2194 + C5967 * C3649 +
              C141341 * C4007) *
                 C141353) *
                C5865) *
               C141499 -
           (((C6526 + C6527) * C141353 + (C6003 + C6004) * C275) * C5865 +
            ((C6525 + C6524) * C141353 + (C5998 + C5997) * C275) * C5864 +
            ((C6523 + C6522) * C141353 + (C5994 + C5993) * C275) * C5863) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C43030 +
            (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                C42873 +
            (C52532 + C52533) * C43031 + (C53203 + C53204) * C42874 +
            (C52536 + C52537) * C43032 + (C53205 + C53206) * C42875) *
               C141219 * C1596 -
           ((C5967 * C42293 + C141341 * C42708 + C5966 * C21228 +
             C141478 * C21654) *
                C42875 +
            (C5967 * C42109 + C141341 * C42197 + C5966 * C21035 +
             C141478 * C21136) *
                C43032 +
            (C53206 + C53205) * C42874 + (C52537 + C52536) * C43031 +
            (C53204 + C53203) * C42873 + (C52533 + C52532) * C43030) *
               C141219 * C141499) *
              C141281 * C818 +
          (((C7945 + C7944) * C43030 + (C8599 + C8598) * C42873 +
            (C52540 + C52541) * C43031 + (C53207 + C53208) * C42874 +
            (C5966 * C21036 + C141478 * C21137 + C5967 * C47290 +
             C141341 * C47403) *
                C43032 +
            (C5966 * C21229 + C141478 * C21655 + C5967 * C47517 +
             C141341 * C48042) *
                C42875) *
               C141219 * C141499 -
           ((C53208 + C53207) * C42875 + (C52541 + C52540) * C43032 +
            (C8598 + C8599) * C42874 + (C7944 + C7945) * C43031 +
            (C6523 + C6522) * C42873 + (C5994 + C5993) * C43030) *
               C141219 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[65] +=
        (-std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C29770 +
            C7709 * C29771 + C10372 * C29772 + C26253 * C29773) *
               C141219 * C1596 -
           ((C713 * C26351 + C27245 + C27245 + C141353 * C27240) * C29773 +
            C27249 * C29772 + C11367 * C29771 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C29770) *
               C141219 * C141499) *
              C141281 * C818 +
          ((C2305 * C29770 + C8709 * C29771 + C24611 * C29772 +
            (C713 * C26352 + C27246 + C27246 + C141353 * C27241) * C29773) *
               C141219 * C141499 -
           (C23643 * C29773 + C7711 * C29772 + C1527 * C29771 + C743 * C29770) *
               C141219 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C141478 +
             C7709 * C141341) *
                C5863 +
            (C6605 + C6606) * C5864 + C6611 * C5865) *
               C1596 -
           ((C8710 + C8700) * C5865 + (C8711 + C8703) * C5864 +
            ((C713 * C3490 + C4079 + C4079 + C141353 * C4074) * C141341 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141478) *
                C5863) *
               C141499) *
              C141281 * C818 +
          (((C8703 + C8711) * C5863 + (C8700 + C8710) * C5864 +
            (C2303 * C141478 +
             (C713 * C3493 + C4082 + C4082 + C141353 * C4077) * C141341) *
                C5865) *
               C141499 -
           ((C6609 + C6610) * C5865 + (C6608 + C6607) * C5864 +
            (C6606 + C6605) * C5863) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43543 * C108 + C43547 + C43547 + C42873 * C714 + C43544 * C1601 +
             C43548 + C43548 + C42874 * C2283 + C43545 * C5325 + C43549 +
             C43549 + C42875 * C5781) *
                C141478 +
            (C52302 + C52303 + C52304) * C141341) *
               C141219 * C1596 -
           ((C43545 * C42109 + C48148 + C48148 + C42875 * C42793 +
             C43544 * C13205 + C48147 + C48147 + C42874 * C13845 +
             C43543 * C3490 + C48146 + C48146 + C42873 * C4074) *
                C141341 +
            (C43545 * C21035 + C45622 + C45622 + C42875 * C21734 +
             C43544 * C5325 + C45623 + C45623 + C42874 * C5781 +
             C43543 * C1601 + C45624 + C45624 + C42873 * C2283) *
                C141478) *
               C141219 * C141499) *
              C141281 * C818 +
          (((C45636 + C45635 + C45634) * C141478 +
            (C43543 * C3491 + C48149 + C48149 + C42873 * C4075 +
             C43544 * C13206 + C48150 + C48150 + C42874 * C13846 +
             C43545 * C47290 + C48151 + C48151 + C42875 * C48144) *
                C141341) *
               C141219 * C141499 -
           ((C44541 + C44542 + C44543) * C141341 +
            (C43585 + C43584 + C43583) * C141478) *
               C141219 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141353 *
                C29770 +
            C30307 * C29771 + C30308 * C29772 + C30309 * C29773) *
               C141298 * C2374 -
           ((C29774 * C25568 + C30281 + C30281 + C141219 * C25572) * C141353 *
                C29773 +
            C30309 * C29772 + C30308 * C29771 + C30307 * C29770) *
               C141298 * C141497) *
              C2376 +
          ((C30310 * C29770 + C30311 * C29771 + C30312 * C29772 +
            (C29774 * C25569 + C30288 + C30288 + C141219 * C25573) * C141353 *
                C29773) *
               C141298 * C141497 -
           (C30312 * C29773 + C30311 * C29772 + C30310 * C29771 +
            (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141353 *
                C29770) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 +
             C5876 + C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
             C5865 * C122) *
                C141353 * C141478 +
            (C6740 + C6741 + C6742) * C141353 * C141341) *
               C141298 * C2374 -
           ((C5872 * C2962 + C6716 + C6716 + C5865 * C2970 + C5870 * C2961 +
             C6717 + C6717 + C5864 * C2969 + C5868 * C2960 + C6718 + C6718 +
             C5863 * C2968) *
                C141353 * C141341 +
            (C6742 + C6741 + C6740) * C141353 * C141478) *
               C141298 * C141497) *
              C2376 +
          (((C6743 + C6744 + C6745) * C141353 * C141478 +
            (C5868 * C2961 + C6725 + C6725 + C5863 * C2969 + C5870 * C2962 +
             C6726 + C6726 + C5864 * C2970 + C5872 * C2963 + C6727 + C6727 +
             C5865 * C2971) *
                C141353 * C141341) *
               C141298 * C141497 -
           ((C6745 + C6744 + C6743) * C141353 * C141341 +
            (C5872 * C111 + C5884 + C5884 + C5865 * C123 + C5870 * C110 +
             C5885 + C5885 + C5864 * C122 + C5868 * C109 + C5886 + C5886 +
             C5863 * C121) *
                C141353 * C141478) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C42873 +
             C36781 * C42874 + C42123 * C42875) *
                C141478 +
            (C51443 + C51444 + C51445) * C141341) *
               C141298 * C2374 -
           ((C39349 * C42875 + C32720 * C42874 + C30302 * C42873) * C141341 +
            (C51445 + C51444 + C51443) * C141478) *
               C141298 * C141497) *
              C2376 +
          (((C51446 + C51447 + C51453) * C141478 +
            (C30305 * C42873 + C35763 * C42874 +
             (C29774 * C29088 + C36776 + C36776 + C141219 * C29092) * C42875) *
                C141341) *
               C141298 * C141497 -
           ((C51453 + C51447 + C51446) * C141341 +
            (C52409 * C42875 + C36782 * C42874 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C42873) *
                C141478) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexy[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C29775 +
            (C29838 * C114 + C29770 * C195 + C29839 * C828 + C29771 * C917 +
             C29840 * C2964 + C29772 * C3030 + C29841 * C9670 +
             C29773 * C9771) *
                C141219) *
               C141353 * C141298 * C2374 -
           ((C29841 * C25570 + C29773 * C25664 + C29840 * C9670 +
             C29772 * C9771 + C29839 * C2964 + C29771 * C3030 + C29838 * C828 +
             C29770 * C917) *
                C141219 +
            (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
             C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
             C29770 * C912) *
                C29775) *
               C141353 * C141298 * C141497) *
              C2376 +
          (((C29838 * C822 + C29770 * C911 + C29839 * C2961 + C29771 * C3027 +
             C29840 * C9668 + C29772 * C9769 + C29841 * C25569 +
             C29773 * C25663) *
                C29775 +
            (C29838 * C827 + C29770 * C916 + C29839 * C2965 + C29771 * C3031 +
             C29840 * C9671 + C29772 * C9772 + C29841 * C25571 +
             C29773 * C25665) *
                C141219) *
               C141353 * C141298 * C141497 -
           ((C29841 * C9671 + C29773 * C9772 + C29840 * C2965 + C29772 * C3031 +
             C29839 * C827 + C29771 * C916 + C29838 * C115 + C29770 * C196) *
                C141219 +
            (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
             C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
                C29775) *
               C141353 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C5869 +
            (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                C5863 +
            (C5993 + C5994) * C5871 + (C5995 + C5996) * C5864 + C6005 * C5873 +
            C6006 * C5865) *
               C141353 * C141298 * C2374 -
           ((C6860 + C6861) * C5865 + (C6862 + C6863) * C5873 +
            (C6864 + C6865) * C5864 + (C6866 + C6867) * C5871 +
            (C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
                C5863 +
            (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                C5869) *
               C141353 * C141298 * C141497) *
              C2376 +
          (((C6867 + C6866) * C5869 + (C6865 + C6864) * C5863 +
            (C6863 + C6862) * C5871 + (C6861 + C6860) * C5864 +
            (C5966 * C820 + C141478 * C909 + C5967 * C2963 + C141341 * C3029) *
                C5873 +
            (C5966 * C825 + C141478 * C914 + C5967 * C2967 + C141341 * C3033) *
                C5865) *
               C141353 * C141298 * C141497 -
           ((C6001 + C6002) * C5865 + (C6003 + C6004) * C5873 +
            (C6000 + C5999) * C5864 + (C5998 + C5997) * C5871 +
            (C5996 + C5995) * C5863 + (C5994 + C5993) * C5869) *
               C141353 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C29775 +
             (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                 C141219) *
                C42873 +
            ((C52532 + C52533) * C29775 + (C52534 + C52535) * C141219) *
                C42874 +
            ((C52536 + C52537) * C29775 + (C52538 + C52539) * C141219) *
                C42875) *
               C141298 * C2374 -
           (((C5967 * C29089 + C141341 * C29175 + C5966 * C13208 +
              C141478 * C13297) *
                 C141219 +
             (C5967 * C29087 + C141341 * C29173 + C5966 * C13205 +
              C141478 * C13294) *
                 C29775) *
                C42875 +
            ((C5967 * C10473 + C141341 * C10598 + C5966 * C3494 +
              C141478 * C3576) *
                 C141219 +
             (C5967 * C10470 + C141341 * C10595 + C5966 * C3490 +
              C141478 * C3572) *
                 C29775) *
                C42874 +
            ((C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
                 C141219 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C29775) *
                C42873) *
               C141298 * C141497) *
              C2376 +
          ((((C6867 + C6866) * C29775 + (C6865 + C6864) * C141219) * C42873 +
            ((C5966 * C3491 + C141478 * C3573 + C5967 * C10471 +
              C141341 * C10596) *
                 C29775 +
             (C5966 * C3495 + C141478 * C3577 + C5967 * C10474 +
              C141341 * C10599) *
                 C141219) *
                C42874 +
            ((C5966 * C13206 + C141478 * C13295 + C5967 * C29088 +
              C141341 * C29174) *
                 C29775 +
             (C5966 * C13209 + C141478 * C13298 + C5967 * C29090 +
              C141341 * C29176) *
                 C141219) *
                C42875) *
               C141298 * C141497 -
           (((C52543 + C52542) * C141219 + (C52541 + C52540) * C29775) *
                C42875 +
            ((C7942 + C7943) * C141219 + (C7944 + C7945) * C29775) * C42874 +
            ((C5996 + C5995) * C141219 + (C5994 + C5993) * C29775) * C42873) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[66] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C29775 +
             (C275 * C114 + C141353 * C282) * C141219) *
                C29770 +
            (C30445 + C30446) * C29771 + (C30447 + C30448) * C29772 +
            (C30449 + C30450) * C29773) *
               C141298 * C2374 -
           (((C275 * C25570 + C141353 * C25742) * C141219 +
             (C275 * C25568 + C141353 * C25740) * C29775) *
                C29773 +
            (C30450 + C30449) * C29772 + (C30448 + C30447) * C29771 +
            (C30446 + C30445) * C29770) *
               C141298 * C141497) *
              C2376 +
          (((C30451 + C30452) * C29770 + (C30453 + C30454) * C29771 +
            (C30455 + C30456) * C29772 +
            ((C275 * C25569 + C141353 * C25741) * C29775 +
             (C275 * C25571 + C141353 * C25743) * C141219) *
                C29773) *
               C141298 * C141497 -
           ((C30456 + C30455) * C29773 + (C30454 + C30453) * C29772 +
            (C30452 + C30451) * C29771 +
            (C306 * C141219 + C305 * C29775) * C29770) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5869 +
             (C275 * C114 + C141353 * C282) * C5863 + C305 * C5871 +
             C306 * C5864 + C307 * C5873 + C308 * C5865) *
                C141478 +
            (C6994 + C6995 + C6970 + C6971 + C6972 + C6973) * C141341) *
               C141298 * C2374 -
           ((C6990 * C5865 + C6991 * C5873 + C6992 * C5864 + C6993 * C5871 +
             (C275 * C2964 + C141353 * C3088) * C5863 +
             (C275 * C2960 + C141353 * C3084) * C5869) *
                C141341 +
            (C6973 + C6972 + C6971 + C6970 + C6995 + C6994) * C141478) *
               C141298 * C141497) *
              C2376 +
          (((C6982 + C6983 + C6984 + C6985 + C6986 + C6987) * C141478 +
            (C6993 * C5869 + C6992 * C5863 + C6991 * C5871 + C6990 * C5864 +
             (C275 * C2963 + C141353 * C3087) * C5873 +
             (C275 * C2967 + C141353 * C3091) * C5865) *
                C141341) *
               C141298 * C141497 -
           ((C6987 + C6986 + C6985 + C6984 + C6983 + C6982) * C141341 +
            (C310 * C5865 + C309 * C5873 + C308 * C5864 + C307 * C5871 +
             C306 * C5863 + C305 * C5869) *
                C141478) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
              C43032 * C5325 + C42875 * C5449) *
                 C29775 +
             (C43030 * C114 + C42873 * C282 + C43031 * C1606 + C42874 * C1789 +
              C43032 * C5329 + C42875 * C5453) *
                 C141219) *
                C141478 +
            ((C51662 + C51663 + C51664) * C29775 +
             (C51665 + C51666 + C51667) * C141219) *
                C141341) *
               C141298 * C2374 -
           (((C43032 * C29089 + C42875 * C29253 + C43031 * C10473 +
              C42874 * C10702 + C43030 * C2964 + C42873 * C3088) *
                 C141219 +
             (C43032 * C29087 + C42875 * C29251 + C43031 * C10470 +
              C42874 * C10699 + C43030 * C2960 + C42873 * C3084) *
                 C29775) *
                C141341 +
            ((C51667 + C51666 + C51665) * C141219 +
             (C51664 + C51663 + C51662) * C29775) *
                C141478) *
               C141298 * C141497) *
              C2376 +
          ((((C43908 + C43907 + C43906) * C29775 +
             (C43905 + C43904 + C43903) * C141219) *
                C141478 +
            ((C43030 * C2961 + C42873 * C3085 + C43031 * C10471 +
              C42874 * C10700 + C43032 * C29088 + C42875 * C29252) *
                 C29775 +
             (C43030 * C2965 + C42873 * C3089 + C43031 * C10474 +
              C42874 * C10703 + C43032 * C29090 + C42875 * C29254) *
                 C141219) *
                C141341) *
               C141298 * C141497 -
           (((C43903 + C43904 + C43905) * C141219 +
             (C43906 + C43907 + C43908) * C29775) *
                C141341 +
            ((C43063 + C43062 + C43061) * C141219 +
             (C43060 + C43059 + C43058) * C29775) *
                C141478) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[66] += (-std::pow(Pi, 2.5) *
                   ((((C29775 * C108 + C141219 * C114) * C29838 +
                      (C29775 * C189 + C141219 * C362) * C29770 +
                      C30547 * C29839 + C30548 * C29771 + C30549 * C29840 +
                      C30550 * C29772 + C30551 * C29841 + C30552 * C29773) *
                         C141353 * C141298 * C2374 -
                     ((C29775 * C25662 + C141219 * C25831) * C29773 +
                      (C29775 * C25568 + C141219 * C25570) * C29841 +
                      C30552 * C29772 + C30551 * C29840 + C30550 * C29771 +
                      C30549 * C29839 + C30548 * C29770 + C30547 * C29838) *
                         C141353 * C141298 * C141497) *
                        C2376 +
                    ((C30553 * C29838 + C30554 * C29770 + C30555 * C29839 +
                      C30556 * C29771 + C30557 * C29840 + C30558 * C29772 +
                      (C29775 * C25569 + C141219 * C25571) * C29841 +
                      (C29775 * C25663 + C141219 * C25832) * C29773) *
                         C141353 * C141298 * C141497 -
                     (C30558 * C29773 + C30557 * C29841 + C30556 * C29772 +
                      C30555 * C29840 + C30554 * C29771 + C30553 * C29839 +
                      (C29775 * C190 + C141219 * C363) * C29770 +
                      (C29775 * C109 + C141219 * C115) * C29838) *
                         C141353 * C141298 * C2374) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                       C5864 * C115 + C5873 * C110 + C5865 * C116) *
                          C5966 +
                      (C5869 * C189 + C5863 * C362 + C5871 * C190 +
                       C5864 * C363 + C5873 * C191 + C5865 * C364) *
                          C141478 +
                      (C7118 + C7119 + C7120) * C5967 +
                      (C7121 + C7122 + C7123) * C141341) *
                         C141353 * C141298 * C2374 -
                     ((C5873 * C3028 + C5865 * C3144 + C5871 * C3027 +
                       C5864 * C3143 + C5869 * C3026 + C5863 * C3142) *
                          C141341 +
                      (C5873 * C2962 + C5865 * C2966 + C5871 * C2961 +
                       C5864 * C2965 + C5869 * C2960 + C5863 * C2964) *
                          C5967 +
                      (C7123 + C7122 + C7121) * C141478 +
                      (C7120 + C7119 + C7118) * C5966) *
                         C141353 * C141298 * C141497) *
                        C2376 +
                    (((C7124 + C7125 + C7126) * C5966 +
                      (C7127 + C7128 + C7129) * C141478 +
                      (C5869 * C2961 + C5863 * C2965 + C5871 * C2962 +
                       C5864 * C2966 + C5873 * C2963 + C5865 * C2967) *
                          C5967 +
                      (C5869 * C3027 + C5863 * C3143 + C5871 * C3028 +
                       C5864 * C3144 + C5873 * C3029 + C5865 * C3145) *
                          C141341) *
                         C141353 * C141298 * C141497 -
                     ((C7129 + C7128 + C7127) * C141341 +
                      (C7126 + C7125 + C7124) * C5967 +
                      (C5873 * C192 + C5865 * C365 + C5871 * C191 +
                       C5864 * C364 + C5869 * C190 + C5863 * C363) *
                          C141478 +
                      (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                       C5864 * C116 + C5869 * C109 + C5863 * C115) *
                          C5966) *
                         C141353 * C141298 * C2374) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C5966 +
                       (C29775 * C189 + C141219 * C362) * C141478 +
                       C30547 * C5967 + C30548 * C141341) *
                          C42873 +
                      (C52740 + C52741 + C52742 + C52743) * C42874 +
                      (C52744 + C52745 + C52746 + C52747) * C42875) *
                         C141298 * C2374 -
                     ((C39703 * C141341 + C39704 * C5967 + C39705 * C141478 +
                       C39706 * C5966) *
                          C42875 +
                      (C32954 * C141341 + C32955 * C5967 + C32956 * C141478 +
                       C32957 * C5966) *
                          C42874 +
                      (C30550 * C141341 + C30549 * C5967 + C30548 * C141478 +
                       C30547 * C5966) *
                          C42873) *
                         C141298 * C141497) *
                        C2376 +
                    (((C30553 * C5966 + C30554 * C141478 + C30555 * C5967 +
                       C30556 * C141341) *
                          C42873 +
                      (C36104 * C5966 + C36105 * C141478 + C36106 * C5967 +
                       C36107 * C141341) *
                          C42874 +
                      (C51770 * C5966 + C51771 * C141478 +
                       (C29775 * C29088 + C141219 * C29090) * C5967 +
                       (C29775 * C29174 + C141219 * C29330) * C141341) *
                          C42875) *
                         C141298 * C141497 -
                     ((C52757 + C52756 + C52761 + C52760) * C42875 +
                      (C52751 + C52750 + C52749 + C52748) * C42874 +
                      (C30554 * C141341 + C30553 * C5967 +
                       (C29775 * C190 + C141219 * C363) * C141478 +
                       (C29775 * C109 + C141219 * C115) * C5966) *
                          C42873) *
                         C141298 * C2374) *
                        C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[66] += (-std::pow(Pi, 2.5) *
                   (((C29992 * C108 + C29997 + C29997 + C29770 * C419 +
                      C29993 * C823 + C29998 + C29998 + C29771 * C1171 +
                      C29994 * C2960 + C29999 + C29999 + C29772 * C3196 +
                      C29995 * C9667 + C30000 + C30000 + C29773 * C10035) *
                         C141219 * C141353 * C141298 * C2374 -
                     (C29995 * C25568 + C30625 + C30625 + C29773 * C25921 +
                      C29994 * C9667 + C30626 + C30626 + C29772 * C10035 +
                      C29993 * C2960 + C30627 + C30627 + C29771 * C3196 +
                      C29992 * C823 + C30628 + C30628 + C29770 * C1171) *
                         C141219 * C141353 * C141298 * C141497) *
                        C2376 +
                    ((C29992 * C822 + C30629 + C30629 + C29770 * C1170 +
                      C29993 * C2961 + C30630 + C30630 + C29771 * C3197 +
                      C29994 * C9668 + C30631 + C30631 + C29772 * C10036 +
                      C29995 * C25569 + C30632 + C30632 + C29773 * C25922) *
                         C141219 * C141353 * C141298 * C141497 -
                     (C29995 * C9668 + C30001 + C30001 + C29773 * C10036 +
                      C29994 * C2961 + C30002 + C30002 + C29772 * C3197 +
                      C29993 * C822 + C30003 + C30003 + C29771 * C1170 +
                      C29992 * C109 + C30004 + C30004 + C29770 * C420) *
                         C141219 * C141353 * C141298 * C2374) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                       C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                          C5863 +
                      (C6265 + C6266) * C5864 + C6271 * C5865) *
                         C141353 * C141298 * C2374 -
                     ((C7252 + C7253) * C5865 + (C7254 + C7255) * C5864 +
                      (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 +
                       C6228 * C823 + C7241 + C7241 + C141478 * C1171) *
                          C5863) *
                         C141353 * C141298 * C141497) *
                        C2376 +
                    (((C7255 + C7254) * C5863 + (C7253 + C7252) * C5864 +
                      (C6228 * C820 + C7242 + C7242 + C141478 * C1168 +
                       C6229 * C2963 + C7243 + C7243 + C141341 * C3199) *
                          C5865) *
                         C141353 * C141298 * C141497 -
                     ((C6269 + C6270) * C5865 + (C6268 + C6267) * C5864 +
                      (C6266 + C6265) * C5863) *
                         C141353 * C141298 * C2374) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                       C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                          C141219 * C42873 +
                      (C52888 + C52889) * C141219 * C42874 +
                      (C52890 + C52891) * C141219 * C42875) *
                         C141298 * C2374 -
                     ((C6229 * C29087 + C51870 + C51870 + C141341 * C29405 +
                       C6228 * C13205 + C51871 + C51871 + C141478 * C13531) *
                          C141219 * C42875 +
                      (C6229 * C10470 + C10939 + C10939 + C141341 * C10934 +
                       C6228 * C3490 + C10938 + C10938 + C141478 * C3790) *
                          C141219 * C42874 +
                      (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 +
                       C6228 * C823 + C7241 + C7241 + C141478 * C1171) *
                          C141219 * C42873) *
                         C141298 * C141497) *
                        C2376 +
                    (((C7255 + C7254) * C141219 * C42873 +
                      (C6228 * C3491 + C10940 + C10940 + C141478 * C3791 +
                       C6229 * C10471 + C10941 + C10941 + C141341 * C10935) *
                          C141219 * C42874 +
                      (C6228 * C13206 + C51872 + C51872 + C141478 * C13532 +
                       C6229 * C29088 + C51873 + C51873 + C141341 * C29406) *
                          C141219 * C42875) *
                         C141298 * C141497 -
                     ((C52893 + C52892) * C141219 * C42875 +
                      (C8278 + C8279) * C141219 * C42874 +
                      (C6266 + C6265) * C141219 * C42873) *
                         C141298 * C2374) *
                        C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[66] += (-std::pow(Pi, 2.5) *
                   ((((C275 * C108 + C141353 * C276) * C29838 +
                      (C275 * C189 + C141353 * C501) * C29770 + C6988 * C29839 +
                      C7366 * C29771 + C9864 * C29840 + C10124 * C29772 +
                      C25754 * C29841 + C26008 * C29773) *
                         C141219 * C141298 * C2374 -
                     ((C275 * C25662 + C141353 * C26003) * C29773 +
                      (C275 * C25568 + C141353 * C25740) * C29841 +
                      C26008 * C29772 + C25754 * C29840 + C10124 * C29771 +
                      C9864 * C29839 + C7366 * C29770 + C6988 * C29838) *
                         C141219 * C141298 * C141497) *
                        C2376 +
                    ((C1031 * C29838 + C1276 * C29770 + C6993 * C29839 +
                      C7368 * C29771 + C22934 * C29840 + C23308 * C29772 +
                      (C275 * C25569 + C141353 * C25741) * C29841 +
                      (C275 * C25663 + C141353 * C26004) * C29773) *
                         C141219 * C141298 * C141497 -
                     (C23308 * C29773 + C22934 * C29841 + C7368 * C29772 +
                      C6993 * C29840 + C1276 * C29771 + C1031 * C29839 +
                      C520 * C29770 + C305 * C29838) *
                         C141219 * C141298 * C2374) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((((C275 * C108 + C141353 * C276) * C5966 +
                       (C275 * C189 + C141353 * C501) * C141478 +
                       C6988 * C5967 + C7366 * C141341) *
                          C5863 +
                      (C6346 + C6347 + C6348 + C6349) * C5864 + C6360 * C5865) *
                         C141298 * C2374 -
                     ((C7369 + C7358 + C7359 + C7360) * C5865 +
                      (C7370 + C7363 + C7364 + C7365) * C5864 +
                      ((C275 * C3026 + C141353 * C3254) * C141341 +
                       (C275 * C2960 + C141353 * C3084) * C5967 +
                       C7366 * C141478 + C6988 * C5966) *
                          C5863) *
                         C141298 * C141497) *
                        C2376 +
                    (((C7365 + C7364 + C7363 + C7370) * C5863 +
                      (C7360 + C7359 + C7358 + C7369) * C5864 +
                      (C1027 * C5966 + C1274 * C141478 +
                       (C275 * C2963 + C141353 * C3087) * C5967 +
                       (C275 * C3029 + C141353 * C3257) * C141341) *
                          C5865) *
                         C141298 * C141497 -
                     ((C6354 + C6355 + C6356 + C6357) * C5865 +
                      (C6353 + C6352 + C6351 + C6350) * C5864 +
                      (C6349 + C6348 + C6347 + C6346) * C5863) *
                         C141298 * C2374) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C43030 * C108 + C42873 * C276 + C43031 * C1601 +
                       C42874 * C1784 + C43032 * C5325 + C42875 * C5449) *
                          C5966 +
                      (C43030 * C189 + C42873 * C501 + C43031 * C1690 +
                       C42874 * C2040 + C43032 * C5391 + C42875 * C5619) *
                          C141478 +
                      (C51662 + C51663 + C51664) * C5967 +
                      (C51978 + C51979 + C51980) * C141341) *
                         C141219 * C141298 * C2374 -
                     ((C43032 * C29173 + C42875 * C29487 + C43031 * C10595 +
                       C42874 * C11041 + C43030 * C3026 + C42873 * C3254) *
                          C141341 +
                      (C43032 * C29087 + C42875 * C29251 + C43031 * C10470 +
                       C42874 * C10699 + C43030 * C2960 + C42873 * C3084) *
                          C5967 +
                      (C51980 + C51979 + C51978) * C141478 +
                      (C51664 + C51663 + C51662) * C5966) *
                         C141219 * C141298 * C141497) *
                        C2376 +
                    (((C43908 + C43907 + C43906) * C5966 +
                      (C44216 + C44215 + C44214) * C141478 +
                      (C43030 * C2961 + C42873 * C3085 + C43031 * C10471 +
                       C42874 * C10700 + C43032 * C29088 + C42875 * C29252) *
                          C5967 +
                      (C43030 * C3027 + C42873 * C3255 + C43031 * C10596 +
                       C42874 * C11042 + C43032 * C29174 + C42875 * C29488) *
                          C141341) *
                         C141219 * C141298 * C141497 -
                     ((C44214 + C44215 + C44216) * C141341 +
                      (C43906 + C43907 + C43908) * C5967 +
                      (C43306 + C43305 + C43304) * C141478 +
                      (C43060 + C43059 + C43058) * C5966) *
                         C141219 * C141298 * C2374) *
                        C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[66] +=
        (-std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C275 +
             (C29775 * C276 + C141219 * C579) * C141353) *
                C29770 +
            (C30765 + C30789) * C29771 + (C30768 + C30790) * C29772 +
            (C30771 + C30791) * C29773) *
               C141298 * C2374 -
           (((C29775 * C25740 + C141219 * C26082) * C141353 +
             (C29775 * C25568 + C141219 * C25570) * C275) *
                C29773 +
            (C30791 + C30771) * C29772 + (C30790 + C30768) * C29771 +
            (C30789 + C30765) * C29770) *
               C141298 * C141497) *
              C2376 +
          (((C30774 + C30792) * C29770 + (C30777 + C30793) * C29771 +
            (C30780 + C30794) * C29772 +
            ((C29775 * C25569 + C141219 * C25571) * C275 +
             (C29775 * C25741 + C141219 * C26083) * C141353) *
                C29773) *
               C141298 * C141497 -
           ((C30794 + C30780) * C29773 + (C30793 + C30777) * C29772 +
            (C30792 + C30774) * C29771 +
            ((C29775 * C277 + C141219 * C580) * C141353 +
             (C29775 * C109 + C141219 * C115) * C275) *
                C29770) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
              C5873 * C278 + C5865 * C581) *
                 C141353) *
                C141478 +
            ((C7118 + C7119 + C7120) * C275 +
             (C7481 + C7482 + C7483) * C141353) *
                C141341) *
               C141298 * C2374 -
           (((C5873 * C3086 + C5865 * C3310 + C5871 * C3085 + C5864 * C3309 +
              C5869 * C3084 + C5863 * C3308) *
                 C141353 +
             (C5873 * C2962 + C5865 * C2966 + C5871 * C2961 + C5864 * C2965 +
              C5869 * C2960 + C5863 * C2964) *
                 C275) *
                C141341 +
            ((C7483 + C7482 + C7481) * C141353 +
             (C7120 + C7119 + C7118) * C275) *
                C141478) *
               C141298 * C141497) *
              C2376 +
          ((((C7124 + C7125 + C7126) * C275 +
             (C7484 + C7485 + C7486) * C141353) *
                C141478 +
            ((C5869 * C2961 + C5863 * C2965 + C5871 * C2962 + C5864 * C2966 +
              C5873 * C2963 + C5865 * C2967) *
                 C275 +
             (C5869 * C3085 + C5863 * C3309 + C5871 * C3086 + C5864 * C3310 +
              C5873 * C3087 + C5865 * C3311) *
                 C141353) *
                C141341) *
               C141298 * C141497 -
           (((C7486 + C7485 + C7484) * C141353 +
             (C7126 + C7125 + C7124) * C275) *
                C141341 +
            ((C5873 * C279 + C5865 * C582 + C5871 * C278 + C5864 * C581 +
              C5869 * C277 + C5863 * C580) *
                 C141353 +
             (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
              C5869 * C109 + C5863 * C115) *
                 C275) *
                C141478) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C43030 +
             (C29775 * C276 + C141219 * C579) * C42873 + C37111 * C43031 +
             C37432 * C42874 + C42383 * C43032 + C42634 * C42875) *
                C141478 +
            (C52079 + C52080 + C52081 + C52082 + C52083 + C52084) * C141341) *
               C141298 * C2374 -
           ((C40041 * C42875 + C39704 * C43032 + C33176 * C42874 +
             C32955 * C43031 + C30784 * C42873 + C30549 * C43030) *
                C141341 +
            (C52084 + C52083 + C52082 + C52081 + C52080 + C52079) * C141478) *
               C141298 * C141497) *
              C2376 +
          (((C52085 + C52086 + C52087 + C52088 + C52089 + C52093) * C141478 +
            (C30555 * C43030 + C30787 * C42873 + C36106 * C43031 +
             C36439 * C42874 + (C29775 * C29088 + C141219 * C29090) * C43032 +
             (C29775 * C29252 + C141219 * C29564) * C42875) *
                C141341) *
               C141298 * C141497 -
           ((C52093 + C52089 + C52088 + C52087 + C52086 + C52085) * C141341 +
            (C53092 * C42875 + C52758 * C43032 + C37433 * C42874 +
             C37113 * C43031 + (C29775 * C277 + C141219 * C580) * C42873 +
             (C29775 * C109 + C141219 * C115) * C43030) *
                C141478) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezy[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C275 +
            (C29838 * C276 + C29770 * C635 + C29839 * C1006 + C29771 * C1419 +
             C29840 * C3084 + C29772 * C3362 + C29841 * C9848 +
             C29773 * C10284) *
                C141353) *
               C141219 * C141298 * C2374 -
           ((C29841 * C25740 + C29773 * C26168 + C29840 * C9848 +
             C29772 * C10284 + C29839 * C3084 + C29771 * C3362 +
             C29838 * C1006 + C29770 * C1419) *
                C141353 +
            (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
             C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
             C29770 * C912) *
                C275) *
               C141219 * C141298 * C141497) *
              C2376 +
          (((C29838 * C822 + C29770 * C911 + C29839 * C2961 + C29771 * C3027 +
             C29840 * C9668 + C29772 * C9769 + C29841 * C25569 +
             C29773 * C25663) *
                C275 +
            (C29838 * C1005 + C29770 * C1418 + C29839 * C3085 + C29771 * C3363 +
             C29840 * C9849 + C29772 * C10285 + C29841 * C25741 +
             C29773 * C26169) *
                C141353) *
               C141219 * C141298 * C141497 -
           ((C29841 * C9849 + C29773 * C10285 + C29840 * C3085 +
             C29772 * C3363 + C29839 * C1005 + C29771 * C1418 + C29838 * C277 +
             C29770 * C636) *
                C141353 +
            (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
             C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
                C275) *
               C141219 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C275 +
             (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                 C141353) *
                C5863 +
            ((C5993 + C5994) * C275 + (C6522 + C6523) * C141353) * C5864 +
            C6530 * C5865) *
               C141298 * C2374 -
           (((C7593 + C7594) * C141353 + (C6862 + C6863) * C275) * C5865 +
            ((C7595 + C7596) * C141353 + (C6866 + C6867) * C275) * C5864 +
            ((C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
              C141478 * C1419) *
                 C141353 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C275) *
                C5863) *
               C141298 * C141497) *
              C2376 +
          ((((C6867 + C6866) * C275 + (C7596 + C7595) * C141353) * C5863 +
            ((C6863 + C6862) * C275 + (C7594 + C7593) * C141353) * C5864 +
            ((C5966 * C820 + C141478 * C909 + C5967 * C2963 + C141341 * C3029) *
                 C275 +
             (C5966 * C1003 + C141478 * C1416 + C5967 * C3087 +
              C141341 * C3365) *
                 C141353) *
                C5865) *
               C141298 * C141497 -
           (((C6526 + C6527) * C141353 + (C6003 + C6004) * C275) * C5865 +
            ((C6525 + C6524) * C141353 + (C5998 + C5997) * C275) * C5864 +
            ((C6523 + C6522) * C141353 + (C5994 + C5993) * C275) * C5863) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C43030 +
            (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                C42873 +
            (C52532 + C52533) * C43031 + (C53203 + C53204) * C42874 +
            (C52536 + C52537) * C43032 + (C53205 + C53206) * C42875) *
               C141219 * C141298 * C2374 -
           ((C5967 * C29251 + C141341 * C29639 + C5966 * C13374 +
             C141478 * C13768) *
                C42875 +
            (C5967 * C29087 + C141341 * C29173 + C5966 * C13205 +
             C141478 * C13294) *
                C43032 +
            (C5967 * C10699 + C141341 * C11255 + C5966 * C3646 +
             C141478 * C4004) *
                C42874 +
            (C5967 * C10470 + C141341 * C10595 + C5966 * C3490 +
             C141478 * C3572) *
                C43031 +
            (C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
             C141478 * C1419) *
                C42873 +
            (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                C43030) *
               C141219 * C141298 * C141497) *
              C2376 +
          (((C6867 + C6866) * C43030 + (C7596 + C7595) * C42873 +
            (C5966 * C3491 + C141478 * C3573 + C5967 * C10471 +
             C141341 * C10596) *
                C43031 +
            (C5966 * C3647 + C141478 * C4005 + C5967 * C10700 +
             C141341 * C11256) *
                C42874 +
            (C5966 * C13206 + C141478 * C13295 + C5967 * C29088 +
             C141341 * C29174) *
                C43032 +
            (C5966 * C13375 + C141478 * C13769 + C5967 * C29252 +
             C141341 * C29640) *
                C42875) *
               C141219 * C141298 * C141497 -
           ((C53208 + C53207) * C42875 + (C52541 + C52540) * C43032 +
            (C8598 + C8599) * C42874 + (C7944 + C7945) * C43031 +
            (C6523 + C6522) * C42873 + (C5994 + C5993) * C43030) *
               C141219 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C29770 +
            C7709 * C29771 + C10372 * C29772 + C26253 * C29773) *
               C141219 * C141298 * C2374 -
           ((C713 * C25568 + C26249 + C26249 + C141353 * C26244) * C29773 +
            C26253 * C29772 + C10372 * C29771 + C7709 * C29770) *
               C141219 * C141298 * C141497) *
              C2376 +
          ((C1527 * C29770 + C7711 * C29771 + C23643 * C29772 +
            (C713 * C25569 + C26250 + C26250 + C141353 * C26245) * C29773) *
               C141219 * C141298 * C141497 -
           (C23643 * C29773 + C7711 * C29772 + C1527 * C29771 + C743 * C29770) *
               C141219 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C141478 +
             C7709 * C141341) *
                C5863 +
            (C6605 + C6606) * C5864 + C6611 * C5865) *
               C141298 * C2374 -
           ((C7712 + C7699) * C5865 + (C7713 + C7702) * C5864 +
            ((C713 * C2960 + C3421 + C3421 + C141353 * C3416) * C141341 +
             C7709 * C141478) *
                C5863) *
               C141298 * C141497) *
              C2376 +
          (((C7702 + C7713) * C5863 + (C7699 + C7712) * C5864 +
            (C1525 * C141478 +
             (C713 * C2963 + C3424 + C3424 + C141353 * C3419) * C141341) *
                C5865) *
               C141298 * C141497 -
           ((C6609 + C6610) * C5865 + (C6608 + C6607) * C5864 +
            (C6606 + C6605) * C5863) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43543 * C108 + C43547 + C43547 + C42873 * C714 + C43544 * C1601 +
             C43548 + C43548 + C42874 * C2283 + C43545 * C5325 + C43549 +
             C43549 + C42875 * C5781) *
                C141478 +
            (C52302 + C52303 + C52304) * C141341) *
               C141219 * C141298 * C2374 -
           ((C43545 * C29087 + C47189 + C47189 + C42875 * C29715 +
             C43544 * C10470 + C47188 + C47188 + C42874 * C11356 +
             C43543 * C2960 + C47187 + C47187 + C42873 * C3416) *
                C141341 +
            (C52304 + C52303 + C52302) * C141478) *
               C141219 * C141298 * C141497) *
              C2376 +
          (((C44543 + C44542 + C44541) * C141478 +
            (C43543 * C2961 + C47190 + C47190 + C42873 * C3417 +
             C43544 * C10471 + C47191 + C47191 + C42874 * C11357 +
             C43545 * C29088 + C47192 + C47192 + C42875 * C29716) *
                C141341) *
               C141219 * C141298 * C141497 -
           ((C44541 + C44542 + C44543) * C141341 +
            (C43585 + C43584 + C43583) * C141478) *
               C141219 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[67] +=
        (-std::pow(Pi, 2.5) *
         (((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141353 *
               C29770 +
           C30307 * C29771 + C30308 * C29772 + C30309 * C29773) *
              C141298 * C2956 -
          (C32190 * C29773 + C30309 * C29772 + C30308 * C29771 +
           C30307 * C29770) *
              C141298 * C2957 +
          (C30308 * C29770 + C30309 * C29771 + C32190 * C29772 +
           (C29774 * C32180 + C32186 + C32186 + C141219 * C32182) * C141353 *
               C29773) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 + C5876 +
            C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
            C5865 * C122) *
               C141353 * C141478 +
           (C6740 + C6741 + C6742) * C141353 * C141341) *
              C141298 * C2956 -
          ((C9692 + C9693 + C9694) * C141353 * C141341 +
           (C6742 + C6741 + C6740) * C141353 * C141478) *
              C141298 * C2957 +
          ((C9694 + C9693 + C9692) * C141353 * C141478 +
           (C5868 * C9667 + C9683 + C9683 + C5863 * C9673 + C5870 * C9668 +
            C9684 + C9684 + C5864 * C9674 + C5872 * C9669 + C9685 + C9685 +
            C5865 * C9675) *
               C141353 * C141341) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C42873 +
            C36781 * C42874 + C42123 * C42875) *
               C141478 +
           (C51443 + C51444 + C51445) * C141341) *
              C141298 * C2956 -
          ((C54263 + C54264 + C54265) * C141341 +
           (C51445 + C51444 + C51443) * C141478) *
              C141298 * C2957 +
          ((C54265 + C54264 + C54263) * C141478 +
           (C30303 * C42873 + C32719 * C42874 +
            (C29774 * C34558 + C34565 + C34565 + C141219 * C34560) * C42875) *
               C141341) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[67] +=
        (-std::pow(Pi, 2.5) *
         (((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
            C29840 * C2960 + C29772 * C3026 + C29841 * C9667 + C29773 * C9768) *
               C29775 +
           (C29838 * C114 + C29770 * C195 + C29839 * C828 + C29771 * C917 +
            C29840 * C2964 + C29772 * C3030 + C29841 * C9670 + C29773 * C9771) *
               C141219) *
              C141353 * C141298 * C2956 -
          ((C29841 * C25570 + C29773 * C25664 + C29840 * C9670 +
            C29772 * C9771 + C29839 * C2964 + C29771 * C3030 + C29838 * C828 +
            C29770 * C917) *
               C141219 +
           (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
            C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
            C29770 * C912) *
               C29775) *
              C141353 * C141298 * C2957 +
          ((C29838 * C2960 + C29770 * C3026 + C29839 * C9667 + C29771 * C9768 +
            C29840 * C25568 + C29772 * C25662 + C29841 * C32180 +
            C29773 * C32240) *
               C29775 +
           (C29838 * C2964 + C29770 * C3030 + C29839 * C9670 + C29771 * C9771 +
            C29840 * C25570 + C29772 * C25664 + C29841 * C32181 +
            C29773 * C32241) *
               C141219) *
              C141353 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
               C5869 +
           (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
               C5863 +
           (C5993 + C5994) * C5871 + (C5995 + C5996) * C5864 + C6005 * C5873 +
           C6006 * C5865) *
              C141353 * C141298 * C2956 -
          ((C6860 + C6861) * C5865 + (C6862 + C6863) * C5873 +
           (C6864 + C6865) * C5864 + (C6866 + C6867) * C5871 +
           (C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
               C5863 +
           (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
               C5869) *
              C141353 * C141298 * C2957 +
          ((C5966 * C2960 + C141478 * C3026 + C5967 * C9667 + C141341 * C9768) *
               C5869 +
           (C5966 * C2964 + C141478 * C3030 + C5967 * C9670 + C141341 * C9771) *
               C5863 +
           (C5966 * C2961 + C141478 * C3027 + C5967 * C9668 + C141341 * C9769) *
               C5871 +
           (C5966 * C2965 + C141478 * C3031 + C5967 * C9671 + C141341 * C9772) *
               C5864 +
           (C5966 * C2962 + C141478 * C3028 + C5967 * C9669 + C141341 * C9770) *
               C5873 +
           (C5966 * C2966 + C141478 * C3032 + C5967 * C9672 + C141341 * C9773) *
               C5865) *
              C141353 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C29775 +
            (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                C141219) *
               C42873 +
           ((C52532 + C52533) * C29775 + (C52534 + C52535) * C141219) * C42874 +
           ((C52536 + C52537) * C29775 + (C52538 + C52539) * C141219) *
               C42875) *
              C141298 * C2956 -
          (((C5967 * C29089 + C141341 * C29175 + C5966 * C13208 +
             C141478 * C13297) *
                C141219 +
            (C5967 * C29087 + C141341 * C29173 + C5966 * C13205 +
             C141478 * C13294) *
                C29775) *
               C42875 +
           ((C5967 * C10473 + C141341 * C10598 + C5966 * C3494 +
             C141478 * C3576) *
                C141219 +
            (C5967 * C10470 + C141341 * C10595 + C5966 * C3490 +
             C141478 * C3572) *
                C29775) *
               C42874 +
           ((C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
                C141219 +
            (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                C29775) *
               C42873) *
              C141298 * C2957 +
          (((C5966 * C2960 + C141478 * C3026 + C5967 * C9667 +
             C141341 * C9768) *
                C29775 +
            (C5966 * C2964 + C141478 * C3030 + C5967 * C9670 +
             C141341 * C9771) *
                C141219) *
               C42873 +
           ((C5966 * C10470 + C141478 * C10595 + C5967 * C26351 +
             C141341 * C26477) *
                C29775 +
            (C5966 * C10473 + C141478 * C10598 + C5967 * C26353 +
             C141341 * C26479) *
                C141219) *
               C42874 +
           ((C5966 * C29087 + C141478 * C29173 + C5967 * C34558 +
             C141341 * C34615) *
                C29775 +
            (C5966 * C29089 + C141478 * C29175 + C5967 * C34559 +
             C141341 * C34616) *
                C141219) *
               C42875) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[67] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C29775 +
            (C275 * C114 + C141353 * C282) * C141219) *
               C29770 +
           (C30445 + C30446) * C29771 + C32295 * C29772 + C32296 * C29773) *
              C141298 * C2956 -
          ((C32303 + C32304) * C29773 + (C30450 + C30449) * C29772 +
           (C30448 + C30447) * C29771 + (C30446 + C30445) * C29770) *
              C141298 * C2957 +
          (C32295 * C29770 + C32296 * C29771 + (C32304 + C32303) * C29772 +
           ((C275 * C32180 + C141353 * C32292) * C29775 +
            (C275 * C32181 + C141353 * C32293) * C141219) *
               C29773) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C5869 +
            (C275 * C114 + C141353 * C282) * C5863 + C305 * C5871 +
            C306 * C5864 + C307 * C5873 + C308 * C5865) *
               C141478 +
           (C6994 + C6995 + C6970 + C6971 + C6972 + C6973) * C141341) *
              C141298 * C2956 -
          ((C9855 + C9856 + C9857 + C9858 + C9865 + C9866) * C141341 +
           (C6973 + C6972 + C6971 + C6970 + C6995 + C6994) * C141478) *
              C141298 * C2957 +
          ((C9866 + C9865 + C9858 + C9857 + C9856 + C9855) * C141478 +
           ((C275 * C9667 + C141353 * C9848) * C5869 +
            (C275 * C9670 + C141353 * C9851) * C5863 +
            (C275 * C9668 + C141353 * C9849) * C5871 +
            (C275 * C9671 + C141353 * C9852) * C5864 +
            (C275 * C9669 + C141353 * C9850) * C5873 +
            (C275 * C9672 + C141353 * C9853) * C5865) *
               C141341) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
             C43032 * C5325 + C42875 * C5449) *
                C29775 +
            (C43030 * C114 + C42873 * C282 + C43031 * C1606 + C42874 * C1789 +
             C43032 * C5329 + C42875 * C5453) *
                C141219) *
               C141478 +
           ((C51662 + C51663 + C51664) * C29775 +
            (C51665 + C51666 + C51667) * C141219) *
               C141341) *
              C141298 * C2956 -
          (((C54426 + C54427 + C54428) * C141219 +
            (C54429 + C54430 + C54431) * C29775) *
               C141341 +
           ((C51667 + C51666 + C51665) * C141219 +
            (C51664 + C51663 + C51662) * C29775) *
               C141478) *
              C141298 * C2957 +
          (((C54431 + C54430 + C54429) * C29775 +
            (C54428 + C54427 + C54426) * C141219) *
               C141478 +
           ((C43030 * C9667 + C42873 * C9848 + C43031 * C26351 +
             C42874 * C26579 + C43032 * C34558 + C42875 * C34667) *
                C29775 +
            (C43030 * C9670 + C42873 * C9851 + C43031 * C26353 +
             C42874 * C26581 + C43032 * C34559 + C42875 * C34668) *
                C141219) *
               C141341) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[67] +=
        (-std::pow(Pi, 2.5) *
         (((C29775 * C108 + C141219 * C114) * C29838 +
           (C29775 * C189 + C141219 * C362) * C29770 + C30547 * C29839 +
           C30548 * C29771 + C30549 * C29840 + C30550 * C29772 +
           C30551 * C29841 + C30552 * C29773) *
              C141353 * C141298 * C2956 -
          (C32360 * C29773 + C32361 * C29841 + C30552 * C29772 +
           C30551 * C29840 + C30550 * C29771 + C30549 * C29839 +
           C30548 * C29770 + C30547 * C29838) *
              C141353 * C141298 * C2957 +
          (C30549 * C29838 + C30550 * C29770 + C30551 * C29839 +
           C30552 * C29771 + C32361 * C29840 + C32360 * C29772 +
           (C29775 * C32180 + C141219 * C32181) * C29841 +
           (C29775 * C32240 + C141219 * C32354) * C29773) *
              C141353 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
            C5873 * C110 + C5865 * C116) *
               C5966 +
           (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
            C5873 * C191 + C5865 * C364) *
               C141478 +
           (C7118 + C7119 + C7120) * C5967 +
           (C7121 + C7122 + C7123) * C141341) *
              C141353 * C141298 * C2956 -
          ((C9956 + C9957 + C9958) * C141341 + (C9959 + C9960 + C9961) * C5967 +
           (C7123 + C7122 + C7121) * C141478 +
           (C7120 + C7119 + C7118) * C5966) *
              C141353 * C141298 * C2957 +
          ((C9961 + C9960 + C9959) * C5966 + (C9958 + C9957 + C9956) * C141478 +
           (C5869 * C9667 + C5863 * C9670 + C5871 * C9668 + C5864 * C9671 +
            C5873 * C9669 + C5865 * C9672) *
               C5967 +
           (C5869 * C9768 + C5863 * C9940 + C5871 * C9769 + C5864 * C9941 +
            C5873 * C9770 + C5865 * C9942) *
               C141341) *
              C141353 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C5966 +
            (C29775 * C189 + C141219 * C362) * C141478 + C30547 * C5967 +
            C30548 * C141341) *
               C42873 +
           (C52740 + C52741 + C52742 + C52743) * C42874 +
           (C52744 + C52745 + C52746 + C52747) * C42875) *
              C141298 * C2956 -
          ((C39703 * C141341 + C39704 * C5967 + C39705 * C141478 +
            C39706 * C5966) *
               C42875 +
           (C32954 * C141341 + C32955 * C5967 + C32956 * C141478 +
            C32957 * C5966) *
               C42874 +
           (C30550 * C141341 + C30549 * C5967 + C30548 * C141478 +
            C30547 * C5966) *
               C42873) *
              C141298 * C2957 +
          ((C30549 * C5966 + C30550 * C141478 + C30551 * C5967 +
            C30552 * C141341) *
               C42873 +
           (C32955 * C5966 + C32954 * C141478 + C32953 * C5967 +
            C32952 * C141341) *
               C42874 +
           (C39704 * C5966 + C39703 * C141478 +
            (C29775 * C34558 + C141219 * C34559) * C5967 +
            (C29775 * C34615 + C141219 * C34719) * C141341) *
               C42875) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[67] += (-std::pow(Pi, 2.5) *
                   ((C29992 * C108 + C29997 + C29997 + C29770 * C419 +
                     C29993 * C823 + C29998 + C29998 + C29771 * C1171 +
                     C29994 * C2960 + C29999 + C29999 + C29772 * C3196 +
                     C29995 * C9667 + C30000 + C30000 + C29773 * C10035) *
                        C141219 * C141353 * C141298 * C2956 -
                    (C29995 * C25568 + C30625 + C30625 + C29773 * C25921 +
                     C29994 * C9667 + C30626 + C30626 + C29772 * C10035 +
                     C29993 * C2960 + C30627 + C30627 + C29771 * C3196 +
                     C29992 * C823 + C30628 + C30628 + C29770 * C1171) *
                        C141219 * C141353 * C141298 * C2957 +
                    (C29992 * C2960 + C32413 + C32413 + C29770 * C3196 +
                     C29993 * C9667 + C32414 + C32414 + C29771 * C10035 +
                     C29994 * C25568 + C32415 + C32415 + C29772 * C25921 +
                     C29995 * C32180 + C32416 + C32416 + C29773 * C32411) *
                        C141219 * C141353 * C141298 * C2958) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                      C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                         C5863 +
                     (C6265 + C6266) * C5864 + C6271 * C5865) *
                        C141353 * C141298 * C2956 -
                    ((C7252 + C7253) * C5865 + (C7254 + C7255) * C5864 +
                     (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 +
                      C6228 * C823 + C7241 + C7241 + C141478 * C1171) *
                         C5863) *
                        C141353 * C141298 * C2957 +
                    ((C6228 * C2960 + C10039 + C10039 + C141478 * C3196 +
                      C6229 * C9667 + C10040 + C10040 + C141341 * C10035) *
                         C5863 +
                     (C6228 * C2961 + C10041 + C10041 + C141478 * C3197 +
                      C6229 * C9668 + C10042 + C10042 + C141341 * C10036) *
                         C5864 +
                     (C6228 * C2962 + C10043 + C10043 + C141478 * C3198 +
                      C6229 * C9669 + C10044 + C10044 + C141341 * C10037) *
                         C5865) *
                        C141353 * C141298 * C2958) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                      C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                         C141219 * C42873 +
                     (C52888 + C52889) * C141219 * C42874 +
                     (C52890 + C52891) * C141219 * C42875) *
                        C141298 * C2956 -
                    ((C6229 * C29087 + C51870 + C51870 + C141341 * C29405 +
                      C6228 * C13205 + C51871 + C51871 + C141478 * C13531) *
                         C141219 * C42875 +
                     (C6229 * C10470 + C10939 + C10939 + C141341 * C10934 +
                      C6228 * C3490 + C10938 + C10938 + C141478 * C3790) *
                         C141219 * C42874 +
                     (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 +
                      C6228 * C823 + C7241 + C7241 + C141478 * C1171) *
                         C141219 * C42873) *
                        C141298 * C2957 +
                    ((C6228 * C2960 + C10039 + C10039 + C141478 * C3196 +
                      C6229 * C9667 + C10040 + C10040 + C141341 * C10035) *
                         C141219 * C42873 +
                     (C6228 * C10470 + C54580 + C54580 + C141478 * C10934 +
                      C6229 * C26351 + C54581 + C54581 + C141341 * C26819) *
                         C141219 * C42874 +
                     (C6228 * C29087 + C54582 + C54582 + C141478 * C29405 +
                      C6229 * C34558 + C54583 + C54583 + C141341 * C34770) *
                         C141219 * C42875) *
                        C141298 * C2958) *
                   C141247) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[67] += (-std::pow(Pi, 2.5) *
                   (((C275 * C108 + C141353 * C276) * C29838 +
                     (C275 * C189 + C141353 * C501) * C29770 + C6988 * C29839 +
                     C7366 * C29771 + C9864 * C29840 + C10124 * C29772 +
                     C25754 * C29841 + C26008 * C29773) *
                        C141219 * C141298 * C2956 -
                    (C32470 * C29773 + C32302 * C29841 + C26008 * C29772 +
                     C25754 * C29840 + C10124 * C29771 + C9864 * C29839 +
                     C7366 * C29770 + C6988 * C29838) *
                        C141219 * C141298 * C2957 +
                    (C9864 * C29838 + C10124 * C29770 + C25754 * C29839 +
                     C26008 * C29771 + C32302 * C29840 + C32470 * C29772 +
                     (C275 * C32180 + C141353 * C32292) * C29841 +
                     (C275 * C32240 + C141353 * C32466) * C29773) *
                        C141219 * C141298 * C2958) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C275 * C108 + C141353 * C276) * C5966 +
                      (C275 * C189 + C141353 * C501) * C141478 + C6988 * C5967 +
                      C7366 * C141341) *
                         C5863 +
                     (C6346 + C6347 + C6348 + C6349) * C5864 + C6360 * C5865) *
                        C141298 * C2956 -
                    ((C7369 + C7358 + C7359 + C7360) * C5865 +
                     (C7370 + C7363 + C7364 + C7365) * C5864 +
                     (C10124 * C141341 + C9864 * C5967 + C7366 * C141478 +
                      C6988 * C5966) *
                         C5863) *
                        C141298 * C2957 +
                    ((C9864 * C5966 + C10124 * C141478 +
                      (C275 * C9667 + C141353 * C9848) * C5967 +
                      (C275 * C9768 + C141353 * C10118) * C141341) *
                         C5863 +
                     (C6993 * C5966 + C7368 * C141478 +
                      (C275 * C9668 + C141353 * C9849) * C5967 +
                      (C275 * C9769 + C141353 * C10119) * C141341) *
                         C5864 +
                     (C6991 * C5966 + C7367 * C141478 +
                      (C275 * C9669 + C141353 * C9850) * C5967 +
                      (C275 * C9770 + C141353 * C10120) * C141341) *
                         C5865) *
                        C141298 * C2958) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C43030 * C108 + C42873 * C276 + C43031 * C1601 +
                      C42874 * C1784 + C43032 * C5325 + C42875 * C5449) *
                         C5966 +
                     (C43030 * C189 + C42873 * C501 + C43031 * C1690 +
                      C42874 * C2040 + C43032 * C5391 + C42875 * C5619) *
                         C141478 +
                     (C51662 + C51663 + C51664) * C5967 +
                     (C51978 + C51979 + C51980) * C141341) *
                        C141219 * C141298 * C2956 -
                    ((C54664 + C54665 + C54666) * C141341 +
                     (C54429 + C54430 + C54431) * C5967 +
                     (C51980 + C51979 + C51978) * C141478 +
                     (C51664 + C51663 + C51662) * C5966) *
                        C141219 * C141298 * C2957 +
                    ((C54431 + C54430 + C54429) * C5966 +
                     (C54666 + C54665 + C54664) * C141478 +
                     (C43030 * C9667 + C42873 * C9848 + C43031 * C26351 +
                      C42874 * C26579 + C43032 * C34558 + C42875 * C34667) *
                         C5967 +
                     (C43030 * C9768 + C42873 * C10118 + C43031 * C26477 +
                      C42874 * C26925 + C43032 * C34615 + C42875 * C34825) *
                         C141341) *
                        C141219 * C141298 * C2958) *
                   C141247) /
                      (p * q * std::sqrt(p + q));
    d2eezx[67] +=
        (-std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C275 +
            (C29775 * C276 + C141219 * C579) * C141353) *
               C29770 +
           (C30765 + C30789) * C29771 + C32522 * C29772 + C32523 * C29773) *
              C141298 * C2956 -
          ((C32528 + C32526) * C29773 + (C30791 + C30771) * C29772 +
           (C30790 + C30768) * C29771 + (C30789 + C30765) * C29770) *
              C141298 * C2957 +
          (C32522 * C29770 + C32523 * C29771 + (C32526 + C32528) * C29772 +
           ((C29775 * C32180 + C141219 * C32181) * C275 +
            (C29775 * C32292 + C141219 * C32520) * C141353) *
               C29773) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
             C5873 * C110 + C5865 * C116) *
                C275 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
             C5873 * C278 + C5865 * C581) *
                C141353) *
               C141478 +
           ((C7118 + C7119 + C7120) * C275 +
            (C7481 + C7482 + C7483) * C141353) *
               C141341) *
              C141298 * C2956 -
          (((C10208 + C10209 + C10210) * C141353 +
            (C9959 + C9960 + C9961) * C275) *
               C141341 +
           ((C7483 + C7482 + C7481) * C141353 +
            (C7120 + C7119 + C7118) * C275) *
               C141478) *
              C141298 * C2957 +
          (((C9961 + C9960 + C9959) * C275 +
            (C10210 + C10209 + C10208) * C141353) *
               C141478 +
           ((C5869 * C9667 + C5863 * C9670 + C5871 * C9668 + C5864 * C9671 +
             C5873 * C9669 + C5865 * C9672) *
                C275 +
            (C5869 * C9848 + C5863 * C10198 + C5871 * C9849 + C5864 * C10199 +
             C5873 * C9850 + C5865 * C10200) *
                C141353) *
               C141341) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C43030 +
            (C29775 * C276 + C141219 * C579) * C42873 + C37111 * C43031 +
            C37432 * C42874 + C42383 * C43032 + C42634 * C42875) *
               C141478 +
           (C52079 + C52080 + C52081 + C52082 + C52083 + C52084) * C141341) *
              C141298 * C2956 -
          ((C54741 + C54742 + C54743 + C54744 + C54745 + C54746) * C141341 +
           (C52084 + C52083 + C52082 + C52081 + C52080 + C52079) * C141478) *
              C141298 * C2957 +
          ((C54746 + C54745 + C54744 + C54743 + C54742 + C54741) * C141478 +
           (C30551 * C43030 + C30785 * C42873 + C32953 * C43031 +
            C33175 * C42874 + (C29775 * C34558 + C141219 * C34559) * C43032 +
            (C29775 * C34667 + C141219 * C34876) * C42875) *
               C141341) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[67] +=
        (-std::pow(Pi, 2.5) *
         (((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
            C29840 * C2960 + C29772 * C3026 + C29841 * C9667 + C29773 * C9768) *
               C275 +
           (C29838 * C276 + C29770 * C635 + C29839 * C1006 + C29771 * C1419 +
            C29840 * C3084 + C29772 * C3362 + C29841 * C9848 +
            C29773 * C10284) *
               C141353) *
              C141219 * C141298 * C2956 -
          ((C29841 * C25740 + C29773 * C26168 + C29840 * C9848 +
            C29772 * C10284 + C29839 * C3084 + C29771 * C3362 + C29838 * C1006 +
            C29770 * C1419) *
               C141353 +
           (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
            C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
            C29770 * C912) *
               C275) *
              C141219 * C141298 * C2957 +
          ((C29838 * C2960 + C29770 * C3026 + C29839 * C9667 + C29771 * C9768 +
            C29840 * C25568 + C29772 * C25662 + C29841 * C32180 +
            C29773 * C32240) *
               C275 +
           (C29838 * C3084 + C29770 * C3362 + C29839 * C9848 + C29771 * C10284 +
            C29840 * C25740 + C29772 * C26168 + C29841 * C32292 +
            C29773 * C32578) *
               C141353) *
              C141219 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C275 +
            (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                C141353) *
               C5863 +
           ((C5993 + C5994) * C275 + (C6522 + C6523) * C141353) * C5864 +
           C6530 * C5865) *
              C141298 * C2956 -
          (((C7593 + C7594) * C141353 + (C6862 + C6863) * C275) * C5865 +
           ((C7595 + C7596) * C141353 + (C6866 + C6867) * C275) * C5864 +
           ((C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
             C141478 * C1419) *
                C141353 +
            (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                C275) *
               C5863) *
              C141298 * C2957 +
          (((C5966 * C2960 + C141478 * C3026 + C5967 * C9667 +
             C141341 * C9768) *
                C275 +
            (C5966 * C3084 + C141478 * C3362 + C5967 * C9848 +
             C141341 * C10284) *
                C141353) *
               C5863 +
           ((C5966 * C2961 + C141478 * C3027 + C5967 * C9668 +
             C141341 * C9769) *
                C275 +
            (C5966 * C3085 + C141478 * C3363 + C5967 * C9849 +
             C141341 * C10285) *
                C141353) *
               C5864 +
           ((C5966 * C2962 + C141478 * C3028 + C5967 * C9669 +
             C141341 * C9770) *
                C275 +
            (C5966 * C3086 + C141478 * C3364 + C5967 * C9850 +
             C141341 * C10286) *
                C141353) *
               C5865) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
               C43030 +
           (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
               C42873 +
           (C52532 + C52533) * C43031 + (C53203 + C53204) * C42874 +
           (C52536 + C52537) * C43032 + (C53205 + C53206) * C42875) *
              C141219 * C141298 * C2956 -
          ((C5967 * C29251 + C141341 * C29639 + C5966 * C13374 +
            C141478 * C13768) *
               C42875 +
           (C5967 * C29087 + C141341 * C29173 + C5966 * C13205 +
            C141478 * C13294) *
               C43032 +
           (C5967 * C10699 + C141341 * C11255 + C5966 * C3646 +
            C141478 * C4004) *
               C42874 +
           (C5967 * C10470 + C141341 * C10595 + C5966 * C3490 +
            C141478 * C3572) *
               C43031 +
           (C5967 * C3084 + C141341 * C3362 + C5966 * C1006 + C141478 * C1419) *
               C42873 +
           (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
               C43030) *
              C141219 * C141298 * C2957 +
          ((C5966 * C2960 + C141478 * C3026 + C5967 * C9667 + C141341 * C9768) *
               C43030 +
           (C5966 * C3084 + C141478 * C3362 + C5967 * C9848 +
            C141341 * C10284) *
               C42873 +
           (C5966 * C10470 + C141478 * C10595 + C5967 * C26351 +
            C141341 * C26477) *
               C43031 +
           (C5966 * C10699 + C141478 * C11255 + C5967 * C26579 +
            C141341 * C27140) *
               C42874 +
           (C5966 * C29087 + C141478 * C29173 + C5967 * C34558 +
            C141341 * C34615) *
               C43032 +
           (C5966 * C29251 + C141478 * C29639 + C5967 * C34667 +
            C141341 * C34927) *
               C42875) *
              C141219 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[67] +=
        (-std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141353 * C714) * C29770 +
           C7709 * C29771 + C10372 * C29772 + C26253 * C29773) *
              C141219 * C141298 * C2956 -
          (C32636 * C29773 + C26253 * C29772 + C10372 * C29771 +
           C7709 * C29770) *
              C141219 * C141298 * C2957 +
          (C10372 * C29770 + C26253 * C29771 + C32636 * C29772 +
           (C713 * C32180 + C32633 + C32633 + C141353 * C32629) * C29773) *
              C141219 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141478 +
            C7709 * C141341) *
               C5863 +
           (C6605 + C6606) * C5864 + C6611 * C5865) *
              C141298 * C2956 -
          ((C7712 + C7699) * C5865 + (C7713 + C7702) * C5864 +
           (C10372 * C141341 + C7709 * C141478) * C5863) *
              C141298 * C2957 +
          ((C10372 * C141478 +
            (C713 * C9667 + C10367 + C10367 + C141353 * C10361) * C141341) *
               C5863 +
           (C7711 * C141478 +
            (C713 * C9668 + C10368 + C10368 + C141353 * C10362) * C141341) *
               C5864 +
           (C7710 * C141478 +
            (C713 * C9669 + C10369 + C10369 + C141353 * C10363) * C141341) *
               C5865) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C43543 * C108 + C43547 + C43547 + C42873 * C714 + C43544 * C1601 +
            C43548 + C43548 + C42874 * C2283 + C43545 * C5325 + C43549 +
            C43549 + C42875 * C5781) *
               C141478 +
           (C52302 + C52303 + C52304) * C141341) *
              C141219 * C141298 * C2956 -
          ((C54910 + C54911 + C54912) * C141341 +
           (C52304 + C52303 + C52302) * C141478) *
              C141219 * C141298 * C2957 +
          ((C54912 + C54911 + C54910) * C141478 +
           (C43543 * C9667 + C54901 + C54901 + C42873 * C10361 +
            C43544 * C26351 + C54902 + C54902 + C42874 * C27240 +
            C43545 * C34558 + C54903 + C54903 + C42875 * C34978) *
               C141341) *
              C141219 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexx[68] +=
        (-std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141353 *
                C29770 +
            C30307 * C29771 + C30308 * C29772 + C30309 * C29773) *
               C1596 -
           (C32722 * C29773 + C32723 * C29772 + C32724 * C29771 +
            (C29774 * C1601 + C30996 + C30996 + C141219 * C1611) * C141353 *
                C29770) *
               C141499) *
              C2374 +
          ((C32724 * C29770 + C32723 * C29771 + C32722 * C29772 +
            (C29774 * C32702 + C32712 + C32712 + C141219 * C32704) * C141353 *
                C29773) *
               C141499 -
           (C32190 * C29773 + C30309 * C29772 + C30308 * C29771 +
            C30307 * C29770) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 +
             C5876 + C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
             C5865 * C122) *
                C141353 * C141478 +
            (C6740 + C6741 + C6742) * C141353 * C141341) *
               C1596 -
           ((C10495 + C10496 + C10497) * C141353 * C141341 +
            (C5872 * C1599 + C7815 + C7815 + C5865 * C1609 + C5870 * C1600 +
             C7816 + C7816 + C5864 * C1610 + C5868 * C1601 + C7817 + C7817 +
             C5863 * C1611) *
                C141353 * C141478) *
               C141499) *
              C2374 +
          (((C10497 + C10496 + C10495) * C141353 * C141478 +
            (C5868 * C10470 + C10486 + C10486 + C5863 * C10476 +
             C5870 * C10471 + C10487 + C10487 + C5864 * C10477 +
             C5872 * C10472 + C10488 + C10488 + C5865 * C10478) *
                C141353 * C141341) *
               C141499 -
           ((C9692 + C9693 + C9694) * C141353 * C141341 +
            (C6742 + C6741 + C6740) * C141353 * C141478) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C42873 +
             C36781 * C42874 + C42123 * C42875) *
                C141478 +
            (C51443 + C51444 + C51445) * C141341) *
               C1596 -
           ((C55018 + C55013 + C55014) * C141341 +
            ((C29774 * C21035 + C42118 + C42118 + C141219 * C21041) * C42875 +
             C42123 * C42874 + C36781 * C42873) *
                C141478) *
               C141499) *
              C2374 +
          (((C55014 + C55013 + C55018) * C141478 +
            (C32720 * C42873 + C39349 * C42874 +
             (C29774 * C42110 + C42120 + C42120 + C141219 * C42114) * C42875) *
                C141341) *
               C141499 -
           ((C54263 + C54264 + C54265) * C141341 +
            (C51445 + C51444 + C51443) * C141478) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[68] +=
        (-std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C29775 +
            (C29838 * C114 + C29770 * C195 + C29839 * C828 + C29771 * C917 +
             C29840 * C2964 + C29772 * C3030 + C29841 * C9670 +
             C29773 * C9771) *
                C141219) *
               C141353 * C1596 -
           ((C29841 * C26353 + C29773 * C26479 + C29840 * C10473 +
             C29772 * C10598 + C29839 * C3494 + C29771 * C3576 +
             C29838 * C1606 + C29770 * C1695) *
                C141219 +
            (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
             C29772 * C10595 + C29839 * C3490 + C29771 * C3572 +
             C29838 * C1601 + C29770 * C1690) *
                C29775) *
               C141353 * C141499) *
              C2374 +
          (((C29838 * C3490 + C29770 * C3572 + C29839 * C10470 +
             C29771 * C10595 + C29840 * C26351 + C29772 * C26477 +
             C29841 * C32702 + C29773 * C32790) *
                C29775 +
            (C29838 * C3494 + C29770 * C3576 + C29839 * C10473 +
             C29771 * C10598 + C29840 * C26353 + C29772 * C26479 +
             C29841 * C32703 + C29773 * C32791) *
                C141219) *
               C141353 * C141499 -
           ((C29841 * C25570 + C29773 * C25664 + C29840 * C9670 +
             C29772 * C9771 + C29839 * C2964 + C29771 * C3030 + C29838 * C828 +
             C29770 * C917) *
                C141219 +
            (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
             C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
             C29770 * C912) *
                C29775) *
               C141353 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C5869 +
            (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                C5863 +
            (C5993 + C5994) * C5871 + (C5995 + C5996) * C5864 + C6005 * C5873 +
            C6006 * C5865) *
               C141353 * C1596 -
           ((C7938 + C7939) * C5865 + (C7940 + C7941) * C5873 +
            (C7942 + C7943) * C5864 + (C7944 + C7945) * C5871 +
            (C5967 * C3494 + C141341 * C3576 + C5966 * C1606 +
             C141478 * C1695) *
                C5863 +
            (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 +
             C141478 * C1690) *
                C5869) *
               C141353 * C141499) *
              C2374 +
          (((C5966 * C3490 + C141478 * C3572 + C5967 * C10470 +
             C141341 * C10595) *
                C5869 +
            (C5966 * C3494 + C141478 * C3576 + C5967 * C10473 +
             C141341 * C10598) *
                C5863 +
            (C5966 * C3491 + C141478 * C3573 + C5967 * C10471 +
             C141341 * C10596) *
                C5871 +
            (C5966 * C3495 + C141478 * C3577 + C5967 * C10474 +
             C141341 * C10599) *
                C5864 +
            (C5966 * C3492 + C141478 * C3574 + C5967 * C10472 +
             C141341 * C10597) *
                C5873 +
            (C5966 * C3496 + C141478 * C3578 + C5967 * C10475 +
             C141341 * C10600) *
                C5865) *
               C141353 * C141499 -
           ((C6860 + C6861) * C5865 + (C6862 + C6863) * C5873 +
            (C6864 + C6865) * C5864 + (C6866 + C6867) * C5871 +
            (C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
                C5863 +
            (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                C5869) *
               C141353 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C29775 +
             (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                 C141219) *
                C42873 +
            ((C52532 + C52533) * C29775 + (C52534 + C52535) * C141219) *
                C42874 +
            ((C52536 + C52537) * C29775 + (C52538 + C52539) * C141219) *
                C42875) *
               C1596 -
           (((C5967 * C42111 + C141341 * C42199 + C5966 * C21038 +
              C141478 * C21139) *
                 C141219 +
             (C5967 * C42109 + C141341 * C42197 + C5966 * C21035 +
              C141478 * C21136) *
                 C29775) *
                C42875 +
            ((C52539 + C52538) * C141219 + (C52537 + C52536) * C29775) *
                C42874 +
            ((C52535 + C52534) * C141219 + (C52533 + C52532) * C29775) *
                C42873) *
               C141499) *
              C2374 +
          ((((C55133 + C55134) * C29775 + (C55135 + C55136) * C141219) *
                C42873 +
            ((C55137 + C55138) * C29775 + (C55139 + C55140) * C141219) *
                C42874 +
            ((C5966 * C42109 + C141478 * C42197 + C5967 * C42110 +
              C141341 * C42198) *
                 C29775 +
             (C5966 * C42111 + C141478 * C42199 + C5967 * C42112 +
              C141341 * C42200) *
                 C141219) *
                C42875) *
               C141499 -
           (((C55140 + C55139) * C141219 + (C55138 + C55137) * C29775) *
                C42875 +
            ((C55136 + C55135) * C141219 + (C55134 + C55133) * C29775) *
                C42874 +
            ((C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
                 C141219 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C29775) *
                C42873) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[68] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C29775 +
             (C275 * C114 + C141353 * C282) * C141219) *
                C29770 +
            (C30445 + C30446) * C29771 + C32295 * C29772 + C32296 * C29773) *
               C1596 -
           ((C32871 + C32872) * C29773 + (C32865 + C32866) * C29772 +
            (C32867 + C32868) * C29771 +
            ((C275 * C1606 + C141353 * C1789) * C141219 +
             (C275 * C1601 + C141353 * C1784) * C29775) *
                C29770) *
               C141499) *
              C2374 +
          (((C32868 + C32867) * C29770 + (C32866 + C32865) * C29771 +
            (C32872 + C32871) * C29772 +
            ((C275 * C32702 + C141353 * C32858) * C29775 +
             (C275 * C32703 + C141353 * C32859) * C141219) *
                C29773) *
               C141499 -
           ((C32303 + C32304) * C29773 + (C30450 + C30449) * C29772 +
            (C30448 + C30447) * C29771 + (C30446 + C30445) * C29770) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5869 +
             (C275 * C114 + C141353 * C282) * C5863 + C305 * C5871 +
             C306 * C5864 + C307 * C5873 + C308 * C5865) *
                C141478 +
            (C6994 + C6995 + C6970 + C6971 + C6972 + C6973) * C141341) *
               C1596 -
           ((C10706 + C10707 + C10708 + C10709 + C10716 + C10717) * C141341 +
            (C1806 * C5865 + C1807 * C5873 + C1808 * C5864 + C1809 * C5871 +
             (C275 * C1606 + C141353 * C1789) * C5863 +
             (C275 * C1601 + C141353 * C1784) * C5869) *
                C141478) *
               C141499) *
              C2374 +
          (((C10717 + C10716 + C10709 + C10708 + C10707 + C10706) * C141478 +
            ((C275 * C10470 + C141353 * C10699) * C5869 +
             (C275 * C10473 + C141353 * C10702) * C5863 +
             (C275 * C10471 + C141353 * C10700) * C5871 +
             (C275 * C10474 + C141353 * C10703) * C5864 +
             (C275 * C10472 + C141353 * C10701) * C5873 +
             (C275 * C10475 + C141353 * C10704) * C5865) *
                C141341) *
               C141499 -
           ((C9855 + C9856 + C9857 + C9858 + C9865 + C9866) * C141341 +
            (C6973 + C6972 + C6971 + C6970 + C6995 + C6994) * C141478) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
              C43032 * C5325 + C42875 * C5449) *
                 C29775 +
             (C43030 * C114 + C42873 * C282 + C43031 * C1606 + C42874 * C1789 +
              C43032 * C5329 + C42875 * C5453) *
                 C141219) *
                C141478 +
            ((C51662 + C51663 + C51664) * C29775 +
             (C51665 + C51666 + C51667) * C141219) *
                C141341) *
               C1596 -
           (((C55251 + C55252 + C55253) * C141219 +
             (C55254 + C55255 + C55256) * C29775) *
                C141341 +
            ((C43032 * C21038 + C42875 * C21231 + C43031 * C5329 +
              C42874 * C5453 + C43030 * C1606 + C42873 * C1789) *
                 C141219 +
             (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
              C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                 C29775) *
                C141478) *
               C141499) *
              C2374 +
          ((((C55256 + C55255 + C55254) * C29775 +
             (C55253 + C55252 + C55251) * C141219) *
                C141478 +
            ((C43030 * C10470 + C42873 * C10699 + C43031 * C29087 +
              C42874 * C29251 + C43032 * C42110 + C42875 * C42294) *
                 C29775 +
             (C43030 * C10473 + C42873 * C10702 + C43031 * C29089 +
              C42874 * C29253 + C43032 * C42112 + C42875 * C42296) *
                 C141219) *
                C141341) *
               C141499 -
           (((C54426 + C54427 + C54428) * C141219 +
             (C54429 + C54430 + C54431) * C29775) *
                C141341 +
            ((C51667 + C51666 + C51665) * C141219 +
             (C51664 + C51663 + C51662) * C29775) *
                C141478) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[68] += (-std::pow(Pi, 2.5) *
                   ((((C29775 * C108 + C141219 * C114) * C29838 +
                      (C29775 * C189 + C141219 * C362) * C29770 +
                      C30547 * C29839 + C30548 * C29771 + C30549 * C29840 +
                      C30550 * C29772 + C30551 * C29841 + C30552 * C29773) *
                         C141353 * C1596 -
                     (C32952 * C29773 + C32953 * C29841 + C32954 * C29772 +
                      C32955 * C29840 + C32956 * C29771 + C32957 * C29839 +
                      (C29775 * C1690 + C141219 * C1878) * C29770 +
                      (C29775 * C1601 + C141219 * C1606) * C29838) *
                         C141353 * C141499) *
                        C2374 +
                    ((C32957 * C29838 + C32956 * C29770 + C32955 * C29839 +
                      C32954 * C29771 + C32953 * C29840 + C32952 * C29772 +
                      (C29775 * C32702 + C141219 * C32703) * C29841 +
                      (C29775 * C32790 + C141219 * C32938) * C29773) *
                         C141353 * C141499 -
                     (C32360 * C29773 + C32361 * C29841 + C30552 * C29772 +
                      C30551 * C29840 + C30550 * C29771 + C30549 * C29839 +
                      C30548 * C29770 + C30547 * C29838) *
                         C141353 * C1596) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                       C5864 * C115 + C5873 * C110 + C5865 * C116) *
                          C5966 +
                      (C5869 * C189 + C5863 * C362 + C5871 * C190 +
                       C5864 * C363 + C5873 * C191 + C5865 * C364) *
                          C141478 +
                      (C7118 + C7119 + C7120) * C5967 +
                      (C7121 + C7122 + C7123) * C141341) *
                         C141353 * C1596 -
                     ((C10831 + C10832 + C10833) * C141341 +
                      (C10834 + C10835 + C10836) * C5967 +
                      (C5873 * C1688 + C5865 * C1876 + C5871 * C1689 +
                       C5864 * C1877 + C5869 * C1690 + C5863 * C1878) *
                          C141478 +
                      (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 +
                       C5864 * C1605 + C5869 * C1601 + C5863 * C1606) *
                          C5966) *
                         C141353 * C141499) *
                        C2374 +
                    (((C10836 + C10835 + C10834) * C5966 +
                      (C10833 + C10832 + C10831) * C141478 +
                      (C5869 * C10470 + C5863 * C10473 + C5871 * C10471 +
                       C5864 * C10474 + C5873 * C10472 + C5865 * C10475) *
                          C5967 +
                      (C5869 * C10595 + C5863 * C10815 + C5871 * C10596 +
                       C5864 * C10816 + C5873 * C10597 + C5865 * C10817) *
                          C141341) *
                         C141353 * C141499 -
                     ((C9956 + C9957 + C9958) * C141341 +
                      (C9959 + C9960 + C9961) * C5967 +
                      (C7123 + C7122 + C7121) * C141478 +
                      (C7120 + C7119 + C7118) * C5966) *
                         C141353 * C1596) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C5966 +
                       (C29775 * C189 + C141219 * C362) * C141478 +
                       C30547 * C5967 + C30548 * C141341) *
                          C42873 +
                      (C52740 + C52741 + C52742 + C52743) * C42874 +
                      (C52744 + C52745 + C52746 + C52747) * C42875) *
                         C1596 -
                     ((C55367 * C141341 + C55368 * C5967 +
                       (C29775 * C21136 + C141219 * C21308) * C141478 +
                       (C29775 * C21035 + C141219 * C21038) * C5966) *
                          C42875 +
                      (C52747 + C52746 + C52745 + C52744) * C42874 +
                      (C52743 + C52742 + C52741 + C52740) * C42873) *
                         C141499) *
                        C2374 +
                    (((C55359 + C55360 + C55361 + C55362) * C42873 +
                      (C55363 + C55364 + C55365 + C55366) * C42874 +
                      (C55368 * C5966 + C55367 * C141478 +
                       (C29775 * C42110 + C141219 * C42112) * C5967 +
                       (C29775 * C42198 + C141219 * C42372) * C141341) *
                          C42875) *
                         C141499 -
                     ((C55366 + C55365 + C55364 + C55363) * C42875 +
                      (C55362 + C55361 + C55360 + C55359) * C42874 +
                      (C30550 * C141341 + C30549 * C5967 + C30548 * C141478 +
                       C30547 * C5966) *
                          C42873) *
                         C1596) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[68] += (-std::pow(Pi, 2.5) *
                   (((C29992 * C108 + C29997 + C29997 + C29770 * C419 +
                      C29993 * C823 + C29998 + C29998 + C29771 * C1171 +
                      C29994 * C2960 + C29999 + C29999 + C29772 * C3196 +
                      C29995 * C9667 + C30000 + C30000 + C29773 * C10035) *
                         C141219 * C141353 * C1596 -
                     (C29995 * C26351 + C31265 + C31265 + C29773 * C26819 +
                      C29994 * C10470 + C31266 + C31266 + C29772 * C10934 +
                      C29993 * C3490 + C31267 + C31267 + C29771 * C3790 +
                      C29992 * C1601 + C31268 + C31268 + C29770 * C1949) *
                         C141219 * C141353 * C141499) *
                        C2374 +
                    ((C29992 * C3490 + C33025 + C33025 + C29770 * C3790 +
                      C29993 * C10470 + C33026 + C33026 + C29771 * C10934 +
                      C29994 * C26351 + C33027 + C33027 + C29772 * C26819 +
                      C29995 * C32702 + C33028 + C33028 + C29773 * C33023) *
                         C141219 * C141353 * C141499 -
                     (C29995 * C25568 + C30625 + C30625 + C29773 * C25921 +
                      C29994 * C9667 + C30626 + C30626 + C29772 * C10035 +
                      C29993 * C2960 + C30627 + C30627 + C29771 * C3196 +
                      C29992 * C823 + C30628 + C30628 + C29770 * C1171) *
                         C141219 * C141353 * C1596) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                       C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                          C5863 +
                      (C6265 + C6266) * C5864 + C6271 * C5865) *
                         C141353 * C1596 -
                     ((C8276 + C8277) * C5865 + (C8278 + C8279) * C5864 +
                      (C6229 * C3490 + C8264 + C8264 + C141341 * C3790 +
                       C6228 * C1601 + C8265 + C8265 + C141478 * C1949) *
                          C5863) *
                         C141353 * C141499) *
                        C2374 +
                    (((C6228 * C3490 + C10938 + C10938 + C141478 * C3790 +
                       C6229 * C10470 + C10939 + C10939 + C141341 * C10934) *
                          C5863 +
                      (C6228 * C3491 + C10940 + C10940 + C141478 * C3791 +
                       C6229 * C10471 + C10941 + C10941 + C141341 * C10935) *
                          C5864 +
                      (C6228 * C3492 + C10942 + C10942 + C141478 * C3792 +
                       C6229 * C10472 + C10943 + C10943 + C141341 * C10936) *
                          C5865) *
                         C141353 * C141499 -
                     ((C7252 + C7253) * C5865 + (C7254 + C7255) * C5864 +
                      (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 +
                       C6228 * C823 + C7241 + C7241 + C141478 * C1171) *
                          C5863) *
                         C141353 * C1596) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                       C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                          C141219 * C42873 +
                      (C52888 + C52889) * C141219 * C42874 +
                      (C52890 + C52891) * C141219 * C42875) *
                         C1596 -
                     ((C6229 * C42109 + C52868 + C52868 + C141341 * C42459 +
                       C6228 * C21035 + C52869 + C52869 + C141478 * C21403) *
                          C141219 * C42875 +
                      (C52891 + C52890) * C141219 * C42874 +
                      (C52889 + C52888) * C141219 * C42873) *
                         C141499) *
                        C2374 +
                    (((C55485 + C55486) * C141219 * C42873 +
                      (C55487 + C55488) * C141219 * C42874 +
                      (C6228 * C42109 + C55475 + C55475 + C141478 * C42459 +
                       C6229 * C42110 + C55476 + C55476 + C141341 * C42460) *
                          C141219 * C42875) *
                         C141499 -
                     ((C55488 + C55487) * C141219 * C42875 +
                      (C55486 + C55485) * C141219 * C42874 +
                      (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 +
                       C6228 * C823 + C7241 + C7241 + C141478 * C1171) *
                          C141219 * C42873) *
                         C1596) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[68] += (-std::pow(Pi, 2.5) *
                   ((((C275 * C108 + C141353 * C276) * C29838 +
                      (C275 * C189 + C141353 * C501) * C29770 + C6988 * C29839 +
                      C7366 * C29771 + C9864 * C29840 + C10124 * C29772 +
                      C25754 * C29841 + C26008 * C29773) *
                         C141219 * C1596 -
                     (C33098 * C29773 + C32870 * C29841 + C26930 * C29772 +
                      C26595 * C29840 + C11047 * C29771 + C10715 * C29839 +
                      (C275 * C1690 + C141353 * C2040) * C29770 +
                      (C275 * C1601 + C141353 * C1784) * C29838) *
                         C141219 * C141499) *
                        C2374 +
                    ((C10715 * C29838 + C11047 * C29770 + C26595 * C29839 +
                      C26930 * C29771 + C32870 * C29840 + C33098 * C29772 +
                      (C275 * C32702 + C141353 * C32858) * C29841 +
                      (C275 * C32790 + C141353 * C33094) * C29773) *
                         C141219 * C141499 -
                     (C32470 * C29773 + C32302 * C29841 + C26008 * C29772 +
                      C25754 * C29840 + C10124 * C29771 + C9864 * C29839 +
                      C7366 * C29770 + C6988 * C29838) *
                         C141219 * C1596) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((((C275 * C108 + C141353 * C276) * C5966 +
                       (C275 * C189 + C141353 * C501) * C141478 +
                       C6988 * C5967 + C7366 * C141341) *
                          C5863 +
                      (C6346 + C6347 + C6348 + C6349) * C5864 + C6360 * C5865) *
                         C1596 -
                     ((C8390 + C8380 + C8381 + C8382) * C5865 +
                      (C8391 + C8385 + C8386 + C8387) * C5864 +
                      (C11047 * C141341 + C10715 * C5967 +
                       (C275 * C1690 + C141353 * C2040) * C141478 +
                       (C275 * C1601 + C141353 * C1784) * C5966) *
                          C5863) *
                         C141499) *
                        C2374 +
                    (((C10715 * C5966 + C11047 * C141478 +
                       (C275 * C10470 + C141353 * C10699) * C5967 +
                       (C275 * C10595 + C141353 * C11041) * C141341) *
                          C5863 +
                      (C8055 * C5966 + C8389 * C141478 +
                       (C275 * C10471 + C141353 * C10700) * C5967 +
                       (C275 * C10596 + C141353 * C11042) * C141341) *
                          C5864 +
                      (C8053 * C5966 + C8388 * C141478 +
                       (C275 * C10472 + C141353 * C10701) * C5967 +
                       (C275 * C10597 + C141353 * C11043) * C141341) *
                          C5865) *
                         C141499 -
                     ((C7369 + C7358 + C7359 + C7360) * C5865 +
                      (C7370 + C7363 + C7364 + C7365) * C5864 +
                      (C10124 * C141341 + C9864 * C5967 + C7366 * C141478 +
                       C6988 * C5966) *
                          C5863) *
                         C1596) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C43030 * C108 + C42873 * C276 + C43031 * C1601 +
                       C42874 * C1784 + C43032 * C5325 + C42875 * C5449) *
                          C5966 +
                      (C43030 * C189 + C42873 * C501 + C43031 * C1690 +
                       C42874 * C2040 + C43032 * C5391 + C42875 * C5619) *
                          C141478 +
                      (C51662 + C51663 + C51664) * C5967 +
                      (C51978 + C51979 + C51980) * C141341) *
                         C141219 * C1596 -
                     ((C55593 + C55594 + C55595) * C141341 +
                      (C55254 + C55255 + C55256) * C5967 +
                      (C43032 * C21136 + C42875 * C21491 + C43031 * C5391 +
                       C42874 * C5619 + C43030 * C1690 + C42873 * C2040) *
                          C141478 +
                      (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
                       C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                          C5966) *
                         C141219 * C141499) *
                        C2374 +
                    (((C55256 + C55255 + C55254) * C5966 +
                      (C55595 + C55594 + C55593) * C141478 +
                      (C43030 * C10470 + C42873 * C10699 + C43031 * C29087 +
                       C42874 * C29251 + C43032 * C42110 + C42875 * C42294) *
                          C5967 +
                      (C43030 * C10595 + C42873 * C11041 + C43031 * C29173 +
                       C42874 * C29487 + C43032 * C42198 + C42875 * C42554) *
                          C141341) *
                         C141219 * C141499 -
                     ((C54664 + C54665 + C54666) * C141341 +
                      (C54429 + C54430 + C54431) * C5967 +
                      (C51980 + C51979 + C51978) * C141478 +
                      (C51664 + C51663 + C51662) * C5966) *
                         C141219 * C1596) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q));
    d2eezx[68] +=
        (-std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C275 +
             (C29775 * C276 + C141219 * C579) * C141353) *
                C29770 +
            (C30765 + C30789) * C29771 + C32522 * C29772 + C32523 * C29773) *
               C1596 -
           ((C33178 + C33168) * C29773 + (C33179 + C33171) * C29772 +
            (C33180 + C33174) * C29771 +
            ((C29775 * C1784 + C141219 * C2126) * C141353 +
             (C29775 * C1601 + C141219 * C1606) * C275) *
                C29770) *
               C141499) *
              C2374 +
          (((C33174 + C33180) * C29770 + (C33171 + C33179) * C29771 +
            (C33168 + C33178) * C29772 +
            ((C29775 * C32702 + C141219 * C32703) * C275 +
             (C29775 * C32858 + C141219 * C33164) * C141353) *
                C29773) *
               C141499 -
           ((C32528 + C32526) * C29773 + (C30791 + C30771) * C29772 +
            (C30790 + C30768) * C29771 + (C30789 + C30765) * C29770) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
              C5873 * C278 + C5865 * C581) *
                 C141353) *
                C141478 +
            ((C7118 + C7119 + C7120) * C275 +
             (C7481 + C7482 + C7483) * C141353) *
                C141341) *
               C1596 -
           (((C11155 + C11156 + C11157) * C141353 +
             (C10834 + C10835 + C10836) * C275) *
                C141341 +
            ((C5873 * C1782 + C5865 * C2124 + C5871 * C1783 + C5864 * C2125 +
              C5869 * C1784 + C5863 * C2126) *
                 C141353 +
             (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 + C5864 * C1605 +
              C5869 * C1601 + C5863 * C1606) *
                 C275) *
                C141478) *
               C141499) *
              C2374 +
          ((((C10836 + C10835 + C10834) * C275 +
             (C11157 + C11156 + C11155) * C141353) *
                C141478 +
            ((C5869 * C10470 + C5863 * C10473 + C5871 * C10471 +
              C5864 * C10474 + C5873 * C10472 + C5865 * C10475) *
                 C275 +
             (C5869 * C10699 + C5863 * C11145 + C5871 * C10700 +
              C5864 * C11146 + C5873 * C10701 + C5865 * C11147) *
                 C141353) *
                C141341) *
               C141499 -
           (((C10208 + C10209 + C10210) * C141353 +
             (C9959 + C9960 + C9961) * C275) *
                C141341 +
            ((C7483 + C7482 + C7481) * C141353 +
             (C7120 + C7119 + C7118) * C275) *
                C141478) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C43030 +
             (C29775 * C276 + C141219 * C579) * C42873 + C37111 * C43031 +
             C37432 * C42874 + C42383 * C43032 + C42634 * C42875) *
                C141478 +
            (C52079 + C52080 + C52081 + C52082 + C52083 + C52084) * C141341) *
               C1596 -
           ((C55702 + C55696 + C55697 + C55698 + C55699 + C55700) * C141341 +
            ((C29775 * C21228 + C141219 * C21568) * C42875 +
             (C29775 * C21035 + C141219 * C21038) * C43032 + C42634 * C42874 +
             C42383 * C43031 + C37432 * C42873 + C37111 * C43030) *
                C141478) *
               C141499) *
              C2374 +
          (((C55700 + C55699 + C55698 + C55697 + C55696 + C55702) * C141478 +
            (C32955 * C43030 + C33176 * C42873 + C39704 * C43031 +
             C40041 * C42874 + (C29775 * C42110 + C141219 * C42112) * C43032 +
             (C29775 * C42294 + C141219 * C42630) * C42875) *
                C141341) *
               C141499 -
           ((C54741 + C54742 + C54743 + C54744 + C54745 + C54746) * C141341 +
            (C52084 + C52083 + C52082 + C52081 + C52080 + C52079) * C141478) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[68] +=
        (-std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C275 +
            (C29838 * C276 + C29770 * C635 + C29839 * C1006 + C29771 * C1419 +
             C29840 * C3084 + C29772 * C3362 + C29841 * C9848 +
             C29773 * C10284) *
                C141353) *
               C141219 * C1596 -
           ((C29841 * C26579 + C29773 * C27140 + C29840 * C10699 +
             C29772 * C11255 + C29839 * C3646 + C29771 * C4004 +
             C29838 * C1784 + C29770 * C2197) *
                C141353 +
            (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
             C29772 * C10595 + C29839 * C3490 + C29771 * C3572 +
             C29838 * C1601 + C29770 * C1690) *
                C275) *
               C141219 * C141499) *
              C2374 +
          (((C29838 * C3490 + C29770 * C3572 + C29839 * C10470 +
             C29771 * C10595 + C29840 * C26351 + C29772 * C26477 +
             C29841 * C32702 + C29773 * C32790) *
                C275 +
            (C29838 * C3646 + C29770 * C4004 + C29839 * C10699 +
             C29771 * C11255 + C29840 * C26579 + C29772 * C27140 +
             C29841 * C32858 + C29773 * C33246) *
                C141353) *
               C141219 * C141499 -
           ((C29841 * C25740 + C29773 * C26168 + C29840 * C9848 +
             C29772 * C10284 + C29839 * C3084 + C29771 * C3362 +
             C29838 * C1006 + C29770 * C1419) *
                C141353 +
            (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
             C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
             C29770 * C912) *
                C275) *
               C141219 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C275 +
             (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                 C141353) *
                C5863 +
            ((C5993 + C5994) * C275 + (C6522 + C6523) * C141353) * C5864 +
            C6530 * C5865) *
               C1596 -
           (((C8596 + C8597) * C141353 + (C7940 + C7941) * C275) * C5865 +
            ((C8598 + C8599) * C141353 + (C7944 + C7945) * C275) * C5864 +
            ((C5967 * C3646 + C141341 * C4004 + C5966 * C1784 +
              C141478 * C2197) *
                 C141353 +
             (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 +
              C141478 * C1690) *
                 C275) *
                C5863) *
               C141499) *
              C2374 +
          ((((C5966 * C3490 + C141478 * C3572 + C5967 * C10470 +
              C141341 * C10595) *
                 C275 +
             (C5966 * C3646 + C141478 * C4004 + C5967 * C10699 +
              C141341 * C11255) *
                 C141353) *
                C5863 +
            ((C5966 * C3491 + C141478 * C3573 + C5967 * C10471 +
              C141341 * C10596) *
                 C275 +
             (C5966 * C3647 + C141478 * C4005 + C5967 * C10700 +
              C141341 * C11256) *
                 C141353) *
                C5864 +
            ((C5966 * C3492 + C141478 * C3574 + C5967 * C10472 +
              C141341 * C10597) *
                 C275 +
             (C5966 * C3648 + C141478 * C4006 + C5967 * C10701 +
              C141341 * C11257) *
                 C141353) *
                C5865) *
               C141499 -
           (((C7593 + C7594) * C141353 + (C6862 + C6863) * C275) * C5865 +
            ((C7595 + C7596) * C141353 + (C6866 + C6867) * C275) * C5864 +
            ((C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
              C141478 * C1419) *
                 C141353 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C275) *
                C5863) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C43030 +
            (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                C42873 +
            (C52532 + C52533) * C43031 + (C53203 + C53204) * C42874 +
            (C52536 + C52537) * C43032 + (C53205 + C53206) * C42875) *
               C141219 * C1596 -
           ((C5967 * C42293 + C141341 * C42708 + C5966 * C21228 +
             C141478 * C21654) *
                C42875 +
            (C5967 * C42109 + C141341 * C42197 + C5966 * C21035 +
             C141478 * C21136) *
                C43032 +
            (C53206 + C53205) * C42874 + (C52537 + C52536) * C43031 +
            (C53204 + C53203) * C42873 + (C52533 + C52532) * C43030) *
               C141219 * C141499) *
              C2374 +
          (((C55133 + C55134) * C43030 + (C55809 + C55810) * C42873 +
            (C55137 + C55138) * C43031 + (C55811 + C55812) * C42874 +
            (C5966 * C42109 + C141478 * C42197 + C5967 * C42110 +
             C141341 * C42198) *
                C43032 +
            (C5966 * C42293 + C141478 * C42708 + C5967 * C42294 +
             C141341 * C42709) *
                C42875) *
               C141219 * C141499 -
           ((C55812 + C55811) * C42875 + (C55138 + C55137) * C43032 +
            (C55810 + C55809) * C42874 + (C55134 + C55133) * C43031 +
            (C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
             C141478 * C1419) *
                C42873 +
            (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                C43030) *
               C141219 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[68] +=
        (-std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C29770 +
            C7709 * C29771 + C10372 * C29772 + C26253 * C29773) *
               C141219 * C1596 -
           (C33320 * C29773 + C27249 * C29772 + C11367 * C29771 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C29770) *
               C141219 * C141499) *
              C2374 +
          ((C11367 * C29770 + C27249 * C29771 + C33320 * C29772 +
            (C713 * C32702 + C33317 + C33317 + C141353 * C33313) * C29773) *
               C141219 * C141499 -
           (C32636 * C29773 + C26253 * C29772 + C10372 * C29771 +
            C7709 * C29770) *
               C141219 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C141478 +
             C7709 * C141341) *
                C5863 +
            (C6605 + C6606) * C5864 + C6611 * C5865) *
               C1596 -
           ((C8710 + C8700) * C5865 + (C8711 + C8703) * C5864 +
            (C11367 * C141341 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141478) *
                C5863) *
               C141499) *
              C2374 +
          (((C11367 * C141478 +
             (C713 * C10470 + C11362 + C11362 + C141353 * C11356) * C141341) *
                C5863 +
            (C8709 * C141478 +
             (C713 * C10471 + C11363 + C11363 + C141353 * C11357) * C141341) *
                C5864 +
            (C8708 * C141478 +
             (C713 * C10472 + C11364 + C11364 + C141353 * C11358) * C141341) *
                C5865) *
               C141499 -
           ((C7712 + C7699) * C5865 + (C7713 + C7702) * C5864 +
            (C10372 * C141341 + C7709 * C141478) * C5863) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43543 * C108 + C43547 + C43547 + C42873 * C714 + C43544 * C1601 +
             C43548 + C43548 + C42874 * C2283 + C43545 * C5325 + C43549 +
             C43549 + C42875 * C5781) *
                C141478 +
            (C52302 + C52303 + C52304) * C141341) *
               C141219 * C1596 -
           ((C55926 + C55927 + C55928) * C141341 +
            (C43545 * C21035 + C45622 + C45622 + C42875 * C21734 +
             C43544 * C5325 + C45623 + C45623 + C42874 * C5781 +
             C43543 * C1601 + C45624 + C45624 + C42873 * C2283) *
                C141478) *
               C141219 * C141499) *
              C2374 +
          (((C55928 + C55927 + C55926) * C141478 +
            (C43543 * C10470 + C55917 + C55917 + C42873 * C11356 +
             C43544 * C29087 + C55918 + C55918 + C42874 * C29715 +
             C43545 * C42110 + C55919 + C55919 + C42875 * C42794) *
                C141341) *
               C141219 * C141499 -
           ((C54910 + C54911 + C54912) * C141341 +
            (C52304 + C52303 + C52302) * C141478) *
               C141219 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexx[69] +=
        (-std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141353 *
                C29770 +
            C30307 * C29771 + C30308 * C29772 + C30309 * C29773) *
               C4148 -
           (C32722 * C29773 + C32723 * C29772 + C32724 * C29771 +
            (C29774 * C1601 + C30996 + C30996 + C141219 * C1611) * C141353 *
                C29770) *
               C141499) *
              C141281 * C2376 +
          (((C29774 * C1600 + C30997 + C30997 + C141219 * C1610) * C141353 *
                C29770 +
            (C29774 * C3491 + C30998 + C30998 + C141219 * C3499) * C141353 *
                C29771 +
            (C29774 * C10471 + C30999 + C30999 + C141219 * C10477) * C141353 *
                C29772 +
            (C29774 * C26352 + C31000 + C31000 + C141219 * C26356) * C141353 *
                C29773) *
               C141499 -
           (C30312 * C29773 + C30311 * C29772 + C30310 * C29771 +
            (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141353 *
                C29770) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 +
             C5876 + C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
             C5865 * C122) *
                C141353 * C141478 +
            (C6740 + C6741 + C6742) * C141353 * C141341) *
               C4148 -
           ((C10495 + C10496 + C10497) * C141353 * C141341 +
            (C5872 * C1599 + C7815 + C7815 + C5865 * C1609 + C5870 * C1600 +
             C7816 + C7816 + C5864 * C1610 + C5868 * C1601 + C7817 + C7817 +
             C5863 * C1611) *
                C141353 * C141478) *
               C141499) *
              C141281 * C2376 +
          (((C5868 * C1600 + C7818 + C7818 + C5863 * C1610 + C5870 * C1599 +
             C7819 + C7819 + C5864 * C1609 + C5872 * C1598 + C7820 + C7820 +
             C5865 * C1608) *
                C141353 * C141478 +
            (C5868 * C3491 + C7821 + C7821 + C5863 * C3499 + C5870 * C3492 +
             C7822 + C7822 + C5864 * C3500 + C5872 * C3493 + C7823 + C7823 +
             C5865 * C3501) *
                C141353 * C141341) *
               C141499 -
           ((C6745 + C6744 + C6743) * C141353 * C141341 +
            (C5872 * C111 + C5884 + C5884 + C5865 * C123 + C5870 * C110 +
             C5885 + C5885 + C5864 * C122 + C5868 * C109 + C5886 + C5886 +
             C5863 * C121) *
                C141353 * C141478) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C42873 +
             C36781 * C42874 + C42123 * C42875) *
                C141478 +
            (C51443 + C51444 + C51445) * C141341) *
               C4148 -
           ((C55018 + C55013 + C55014) * C141341 +
            ((C29774 * C21035 + C42118 + C42118 + C141219 * C21041) * C42875 +
             C42123 * C42874 + C36781 * C42873) *
                C141478) *
               C141499) *
              C141281 * C2376 +
          (((C36782 * C42873 + C52409 * C42874 +
             (C29774 * C21036 + C52405 + C52405 + C141219 * C21042) * C42875) *
                C141478 +
            (C35762 * C42873 + C51452 * C42874 +
             (C29774 * C47290 + C52406 + C52406 + C141219 * C47292) * C42875) *
                C141341) *
               C141499 -
           ((C51453 + C51447 + C51446) * C141341 +
            (C52409 * C42875 + C36782 * C42874 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C42873) *
                C141478) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexy[69] +=
        (-std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C29775 +
            (C29838 * C114 + C29770 * C195 + C29839 * C828 + C29771 * C917 +
             C29840 * C2964 + C29772 * C3030 + C29841 * C9670 +
             C29773 * C9771) *
                C141219) *
               C141353 * C4148 -
           ((C29841 * C26353 + C29773 * C26479 + C29840 * C10473 +
             C29772 * C10598 + C29839 * C3494 + C29771 * C3576 +
             C29838 * C1606 + C29770 * C1695) *
                C141219 +
            (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
             C29772 * C10595 + C29839 * C3490 + C29771 * C3572 +
             C29838 * C1601 + C29770 * C1690) *
                C29775) *
               C141353 * C141499) *
              C141281 * C2376 +
          (((C29838 * C1600 + C29770 * C1689 + C29839 * C3491 + C29771 * C3573 +
             C29840 * C10471 + C29772 * C10596 + C29841 * C26352 +
             C29773 * C26478) *
                C29775 +
            (C29838 * C1605 + C29770 * C1694 + C29839 * C3495 + C29771 * C3577 +
             C29840 * C10474 + C29772 * C10599 + C29841 * C26354 +
             C29773 * C26480) *
                C141219) *
               C141353 * C141499 -
           ((C29841 * C9671 + C29773 * C9772 + C29840 * C2965 + C29772 * C3031 +
             C29839 * C827 + C29771 * C916 + C29838 * C115 + C29770 * C196) *
                C141219 +
            (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
             C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
                C29775) *
               C141353 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C5869 +
            (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                C5863 +
            (C5993 + C5994) * C5871 + (C5995 + C5996) * C5864 + C6005 * C5873 +
            C6006 * C5865) *
               C141353 * C4148 -
           ((C7938 + C7939) * C5865 + (C7940 + C7941) * C5873 +
            (C7942 + C7943) * C5864 + (C7944 + C7945) * C5871 +
            (C5967 * C3494 + C141341 * C3576 + C5966 * C1606 +
             C141478 * C1695) *
                C5863 +
            (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 +
             C141478 * C1690) *
                C5869) *
               C141353 * C141499) *
              C141281 * C2376 +
          (((C7945 + C7944) * C5869 + (C7943 + C7942) * C5863 +
            (C7941 + C7940) * C5871 + (C7939 + C7938) * C5864 +
            (C5966 * C1598 + C141478 * C1687 + C5967 * C3493 +
             C141341 * C3575) *
                C5873 +
            (C5966 * C1603 + C141478 * C1692 + C5967 * C3497 +
             C141341 * C3579) *
                C5865) *
               C141353 * C141499 -
           ((C6001 + C6002) * C5865 + (C6003 + C6004) * C5873 +
            (C6000 + C5999) * C5864 + (C5998 + C5997) * C5871 +
            (C5996 + C5995) * C5863 + (C5994 + C5993) * C5869) *
               C141353 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C29775 +
             (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                 C141219) *
                C42873 +
            ((C52532 + C52533) * C29775 + (C52534 + C52535) * C141219) *
                C42874 +
            ((C52536 + C52537) * C29775 + (C52538 + C52539) * C141219) *
                C42875) *
               C4148 -
           (((C5967 * C42111 + C141341 * C42199 + C5966 * C21038 +
              C141478 * C21139) *
                 C141219 +
             (C5967 * C42109 + C141341 * C42197 + C5966 * C21035 +
              C141478 * C21136) *
                 C29775) *
                C42875 +
            ((C52539 + C52538) * C141219 + (C52537 + C52536) * C29775) *
                C42874 +
            ((C52535 + C52534) * C141219 + (C52533 + C52532) * C29775) *
                C42873) *
               C141499) *
              C141281 * C2376 +
          ((((C7945 + C7944) * C29775 + (C7943 + C7942) * C141219) * C42873 +
            ((C52540 + C52541) * C29775 + (C52542 + C52543) * C141219) *
                C42874 +
            ((C5966 * C21036 + C141478 * C21137 + C5967 * C47290 +
              C141341 * C47403) *
                 C29775 +
             (C5966 * C21039 + C141478 * C21140 + C5967 * C47291 +
              C141341 * C47404) *
                 C141219) *
                C42875) *
               C141499 -
           (((C52543 + C52542) * C141219 + (C52541 + C52540) * C29775) *
                C42875 +
            ((C7942 + C7943) * C141219 + (C7944 + C7945) * C29775) * C42874 +
            ((C5996 + C5995) * C141219 + (C5994 + C5993) * C29775) * C42873) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[69] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C29775 +
             (C275 * C114 + C141353 * C282) * C141219) *
                C29770 +
            (C30445 + C30446) * C29771 + C32295 * C29772 + C32296 * C29773) *
               C4148 -
           ((C32871 + C32872) * C29773 + (C32865 + C32866) * C29772 +
            (C32867 + C32868) * C29771 +
            ((C275 * C1606 + C141353 * C1789) * C141219 +
             (C275 * C1601 + C141353 * C1784) * C29775) *
                C29770) *
               C141499) *
              C141281 * C2376 +
          (((C1809 * C29775 + C1808 * C141219) * C29770 +
            (C8055 * C29775 + C8054 * C141219) * C29771 +
            (C23974 * C29775 + C23973 * C141219) * C29772 +
            ((C275 * C26352 + C141353 * C26580) * C29775 +
             (C275 * C26354 + C141353 * C26582) * C141219) *
                C29773) *
               C141499 -
           ((C30456 + C30455) * C29773 + (C30454 + C30453) * C29772 +
            (C30452 + C30451) * C29771 +
            (C306 * C141219 + C305 * C29775) * C29770) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5869 +
             (C275 * C114 + C141353 * C282) * C5863 + C305 * C5871 +
             C306 * C5864 + C307 * C5873 + C308 * C5865) *
                C141478 +
            (C6994 + C6995 + C6970 + C6971 + C6972 + C6973) * C141341) *
               C4148 -
           ((C10706 + C10707 + C10708 + C10709 + C10716 + C10717) * C141341 +
            (C1806 * C5865 + C1807 * C5873 + C1808 * C5864 + C1809 * C5871 +
             (C275 * C1606 + C141353 * C1789) * C5863 +
             (C275 * C1601 + C141353 * C1784) * C5869) *
                C141478) *
               C141499) *
              C141281 * C2376 +
          (((C1809 * C5869 + C1808 * C5863 + C1807 * C5871 + C1806 * C5864 +
             C1805 * C5873 + C1804 * C5865) *
                C141478 +
            (C8055 * C5869 + C8054 * C5863 + C8053 * C5871 + C8052 * C5864 +
             (C275 * C3493 + C141353 * C3649) * C5873 +
             (C275 * C3497 + C141353 * C3653) * C5865) *
                C141341) *
               C141499 -
           ((C6987 + C6986 + C6985 + C6984 + C6983 + C6982) * C141341 +
            (C310 * C5865 + C309 * C5873 + C308 * C5864 + C307 * C5871 +
             C306 * C5863 + C305 * C5869) *
                C141478) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
              C43032 * C5325 + C42875 * C5449) *
                 C29775 +
             (C43030 * C114 + C42873 * C282 + C43031 * C1606 + C42874 * C1789 +
              C43032 * C5329 + C42875 * C5453) *
                 C141219) *
                C141478 +
            ((C51662 + C51663 + C51664) * C29775 +
             (C51665 + C51666 + C51667) * C141219) *
                C141341) *
               C4148 -
           (((C55251 + C55252 + C55253) * C141219 +
             (C55254 + C55255 + C55256) * C29775) *
                C141341 +
            ((C43032 * C21038 + C42875 * C21231 + C43031 * C5329 +
              C42874 * C5453 + C43030 * C1606 + C42873 * C1789) *
                 C141219 +
             (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
              C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                 C29775) *
                C141478) *
               C141499) *
              C141281 * C2376 +
          ((((C44921 + C44920 + C44919) * C29775 +
             (C44918 + C44917 + C44916) * C141219) *
                C141478 +
            ((C43030 * C3491 + C42873 * C3647 + C43031 * C13206 +
              C42874 * C13375 + C43032 * C47290 + C42875 * C47517) *
                 C29775 +
             (C43030 * C3495 + C42873 * C3651 + C43031 * C13209 +
              C42874 * C13378 + C43032 * C47291 + C42875 * C47518) *
                 C141219) *
                C141341) *
               C141499 -
           (((C43903 + C43904 + C43905) * C141219 +
             (C43906 + C43907 + C43908) * C29775) *
                C141341 +
            ((C43063 + C43062 + C43061) * C141219 +
             (C43060 + C43059 + C43058) * C29775) *
                C141478) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[69] += (-std::pow(Pi, 2.5) *
                   ((((C29775 * C108 + C141219 * C114) * C29838 +
                      (C29775 * C189 + C141219 * C362) * C29770 +
                      C30547 * C29839 + C30548 * C29771 + C30549 * C29840 +
                      C30550 * C29772 + C30551 * C29841 + C30552 * C29773) *
                         C141353 * C4148 -
                     (C32952 * C29773 + C32953 * C29841 + C32954 * C29772 +
                      C32955 * C29840 + C32956 * C29771 + C32957 * C29839 +
                      (C29775 * C1690 + C141219 * C1878) * C29770 +
                      (C29775 * C1601 + C141219 * C1606) * C29838) *
                         C141353 * C141499) *
                        C141281 * C2376 +
                    (((C29775 * C1600 + C141219 * C1605) * C29838 +
                      (C29775 * C1689 + C141219 * C1877) * C29770 +
                      (C29775 * C3491 + C141219 * C3495) * C29839 +
                      (C29775 * C3573 + C141219 * C3721) * C29771 +
                      (C29775 * C10471 + C141219 * C10474) * C29840 +
                      (C29775 * C10596 + C141219 * C10816) * C29772 +
                      (C29775 * C26352 + C141219 * C26354) * C29841 +
                      (C29775 * C26478 + C141219 * C26696) * C29773) *
                         C141353 * C141499 -
                     (C30558 * C29773 + C30557 * C29841 + C30556 * C29772 +
                      C30555 * C29840 + C30554 * C29771 + C30553 * C29839 +
                      (C29775 * C190 + C141219 * C363) * C29770 +
                      (C29775 * C109 + C141219 * C115) * C29838) *
                         C141353 * C4148) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                       C5864 * C115 + C5873 * C110 + C5865 * C116) *
                          C5966 +
                      (C5869 * C189 + C5863 * C362 + C5871 * C190 +
                       C5864 * C363 + C5873 * C191 + C5865 * C364) *
                          C141478 +
                      (C7118 + C7119 + C7120) * C5967 +
                      (C7121 + C7122 + C7123) * C141341) *
                         C141353 * C4148 -
                     ((C10831 + C10832 + C10833) * C141341 +
                      (C10834 + C10835 + C10836) * C5967 +
                      (C5873 * C1688 + C5865 * C1876 + C5871 * C1689 +
                       C5864 * C1877 + C5869 * C1690 + C5863 * C1878) *
                          C141478 +
                      (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 +
                       C5864 * C1605 + C5869 * C1601 + C5863 * C1606) *
                          C5966) *
                         C141353 * C141499) *
                        C141281 * C2376 +
                    (((C5869 * C1600 + C5863 * C1605 + C5871 * C1599 +
                       C5864 * C1604 + C5873 * C1598 + C5865 * C1603) *
                          C5966 +
                      (C5869 * C1689 + C5863 * C1877 + C5871 * C1688 +
                       C5864 * C1876 + C5873 * C1687 + C5865 * C1875) *
                          C141478 +
                      (C5869 * C3491 + C5863 * C3495 + C5871 * C3492 +
                       C5864 * C3496 + C5873 * C3493 + C5865 * C3497) *
                          C5967 +
                      (C5869 * C3573 + C5863 * C3721 + C5871 * C3574 +
                       C5864 * C3722 + C5873 * C3575 + C5865 * C3723) *
                          C141341) *
                         C141353 * C141499 -
                     ((C7129 + C7128 + C7127) * C141341 +
                      (C7126 + C7125 + C7124) * C5967 +
                      (C5873 * C192 + C5865 * C365 + C5871 * C191 +
                       C5864 * C364 + C5869 * C190 + C5863 * C363) *
                          C141478 +
                      (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                       C5864 * C116 + C5869 * C109 + C5863 * C115) *
                          C5966) *
                         C141353 * C4148) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C5966 +
                       (C29775 * C189 + C141219 * C362) * C141478 +
                       C30547 * C5967 + C30548 * C141341) *
                          C42873 +
                      (C52740 + C52741 + C52742 + C52743) * C42874 +
                      (C52744 + C52745 + C52746 + C52747) * C42875) *
                         C4148 -
                     ((C55367 * C141341 + C55368 * C5967 +
                       (C29775 * C21136 + C141219 * C21308) * C141478 +
                       (C29775 * C21035 + C141219 * C21038) * C5966) *
                          C42875 +
                      (C52747 + C52746 + C52745 + C52744) * C42874 +
                      (C52743 + C52742 + C52741 + C52740) * C42873) *
                         C141499) *
                        C141281 * C2376 +
                    (((C52748 + C52749 + C52750 + C52751) * C42873 +
                      (C52760 + C52761 + C52756 + C52757) * C42874 +
                      ((C29775 * C21036 + C141219 * C21039) * C5966 +
                       (C29775 * C21137 + C141219 * C21309) * C141478 +
                       (C29775 * C47290 + C141219 * C47291) * C5967 +
                       (C29775 * C47403 + C141219 * C47617) * C141341) *
                          C42875) *
                         C141499 -
                     ((C52757 + C52756 + C52761 + C52760) * C42875 +
                      (C52751 + C52750 + C52749 + C52748) * C42874 +
                      (C30554 * C141341 + C30553 * C5967 +
                       (C29775 * C190 + C141219 * C363) * C141478 +
                       (C29775 * C109 + C141219 * C115) * C5966) *
                          C42873) *
                         C4148) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[69] += (-std::pow(Pi, 2.5) *
                   (((C29992 * C108 + C29997 + C29997 + C29770 * C419 +
                      C29993 * C823 + C29998 + C29998 + C29771 * C1171 +
                      C29994 * C2960 + C29999 + C29999 + C29772 * C3196 +
                      C29995 * C9667 + C30000 + C30000 + C29773 * C10035) *
                         C141219 * C141353 * C4148 -
                     (C29995 * C26351 + C31265 + C31265 + C29773 * C26819 +
                      C29994 * C10470 + C31266 + C31266 + C29772 * C10934 +
                      C29993 * C3490 + C31267 + C31267 + C29771 * C3790 +
                      C29992 * C1601 + C31268 + C31268 + C29770 * C1949) *
                         C141219 * C141353 * C141499) *
                        C141281 * C2376 +
                    ((C29992 * C1600 + C31269 + C31269 + C29770 * C1948 +
                      C29993 * C3491 + C31270 + C31270 + C29771 * C3791 +
                      C29994 * C10471 + C31271 + C31271 + C29772 * C10935 +
                      C29995 * C26352 + C31272 + C31272 + C29773 * C26820) *
                         C141219 * C141353 * C141499 -
                     (C29995 * C9668 + C30001 + C30001 + C29773 * C10036 +
                      C29994 * C2961 + C30002 + C30002 + C29772 * C3197 +
                      C29993 * C822 + C30003 + C30003 + C29771 * C1170 +
                      C29992 * C109 + C30004 + C30004 + C29770 * C420) *
                         C141219 * C141353 * C4148) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                       C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                          C5863 +
                      (C6265 + C6266) * C5864 + C6271 * C5865) *
                         C141353 * C4148 -
                     ((C8276 + C8277) * C5865 + (C8278 + C8279) * C5864 +
                      (C6229 * C3490 + C8264 + C8264 + C141341 * C3790 +
                       C6228 * C1601 + C8265 + C8265 + C141478 * C1949) *
                          C5863) *
                         C141353 * C141499) *
                        C141281 * C2376 +
                    (((C8279 + C8278) * C5863 + (C8277 + C8276) * C5864 +
                      (C6228 * C1598 + C8266 + C8266 + C141478 * C1946 +
                       C6229 * C3493 + C8267 + C8267 + C141341 * C3793) *
                          C5865) *
                         C141353 * C141499 -
                     ((C6269 + C6270) * C5865 + (C6268 + C6267) * C5864 +
                      (C6266 + C6265) * C5863) *
                         C141353 * C4148) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                       C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                          C141219 * C42873 +
                      (C52888 + C52889) * C141219 * C42874 +
                      (C52890 + C52891) * C141219 * C42875) *
                         C4148 -
                     ((C6229 * C42109 + C52868 + C52868 + C141341 * C42459 +
                       C6228 * C21035 + C52869 + C52869 + C141478 * C21403) *
                          C141219 * C42875 +
                      (C52891 + C52890) * C141219 * C42874 +
                      (C52889 + C52888) * C141219 * C42873) *
                         C141499) *
                        C141281 * C2376 +
                    (((C8279 + C8278) * C141219 * C42873 +
                      (C52892 + C52893) * C141219 * C42874 +
                      (C6228 * C21036 + C52874 + C52874 + C141478 * C21404 +
                       C6229 * C47290 + C52875 + C52875 + C141341 * C47728) *
                          C141219 * C42875) *
                         C141499 -
                     ((C52893 + C52892) * C141219 * C42875 +
                      (C8278 + C8279) * C141219 * C42874 +
                      (C6266 + C6265) * C141219 * C42873) *
                         C4148) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[69] += (-std::pow(Pi, 2.5) *
                   ((((C275 * C108 + C141353 * C276) * C29838 +
                      (C275 * C189 + C141353 * C501) * C29770 + C6988 * C29839 +
                      C7366 * C29771 + C9864 * C29840 + C10124 * C29772 +
                      C25754 * C29841 + C26008 * C29773) *
                         C141219 * C4148 -
                     (C33098 * C29773 + C32870 * C29841 + C26930 * C29772 +
                      C26595 * C29840 + C11047 * C29771 + C10715 * C29839 +
                      (C275 * C1690 + C141353 * C2040) * C29770 +
                      (C275 * C1601 + C141353 * C1784) * C29838) *
                         C141219 * C141499) *
                        C141281 * C2376 +
                    ((C1809 * C29838 + C2054 * C29770 + C8055 * C29839 +
                      C8389 * C29771 + C23974 * C29840 + C24300 * C29772 +
                      (C275 * C26352 + C141353 * C26580) * C29841 +
                      (C275 * C26478 + C141353 * C26926) * C29773) *
                         C141219 * C141499 -
                     (C23308 * C29773 + C22934 * C29841 + C7368 * C29772 +
                      C6993 * C29840 + C1276 * C29771 + C1031 * C29839 +
                      C520 * C29770 + C305 * C29838) *
                         C141219 * C4148) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((((C275 * C108 + C141353 * C276) * C5966 +
                       (C275 * C189 + C141353 * C501) * C141478 +
                       C6988 * C5967 + C7366 * C141341) *
                          C5863 +
                      (C6346 + C6347 + C6348 + C6349) * C5864 + C6360 * C5865) *
                         C4148 -
                     ((C8390 + C8380 + C8381 + C8382) * C5865 +
                      (C8391 + C8385 + C8386 + C8387) * C5864 +
                      (C11047 * C141341 + C10715 * C5967 +
                       (C275 * C1690 + C141353 * C2040) * C141478 +
                       (C275 * C1601 + C141353 * C1784) * C5966) *
                          C5863) *
                         C141499) *
                        C141281 * C2376 +
                    (((C8387 + C8386 + C8385 + C8391) * C5863 +
                      (C8382 + C8381 + C8380 + C8390) * C5864 +
                      (C1805 * C5966 + C2052 * C141478 +
                       (C275 * C3493 + C141353 * C3649) * C5967 +
                       (C275 * C3575 + C141353 * C3867) * C141341) *
                          C5865) *
                         C141499 -
                     ((C6354 + C6355 + C6356 + C6357) * C5865 +
                      (C6353 + C6352 + C6351 + C6350) * C5864 +
                      (C6349 + C6348 + C6347 + C6346) * C5863) *
                         C4148) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C43030 * C108 + C42873 * C276 + C43031 * C1601 +
                       C42874 * C1784 + C43032 * C5325 + C42875 * C5449) *
                          C5966 +
                      (C43030 * C189 + C42873 * C501 + C43031 * C1690 +
                       C42874 * C2040 + C43032 * C5391 + C42875 * C5619) *
                          C141478 +
                      (C51662 + C51663 + C51664) * C5967 +
                      (C51978 + C51979 + C51980) * C141341) *
                         C141219 * C4148 -
                     ((C55593 + C55594 + C55595) * C141341 +
                      (C55254 + C55255 + C55256) * C5967 +
                      (C43032 * C21136 + C42875 * C21491 + C43031 * C5391 +
                       C42874 * C5619 + C43030 * C1690 + C42873 * C2040) *
                          C141478 +
                      (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
                       C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                          C5966) *
                         C141219 * C141499) *
                        C141281 * C2376 +
                    (((C44921 + C44920 + C44919) * C5966 +
                      (C45285 + C45284 + C45283) * C141478 +
                      (C43030 * C3491 + C42873 * C3647 + C43031 * C13206 +
                       C42874 * C13375 + C43032 * C47290 + C42875 * C47517) *
                          C5967 +
                      (C43030 * C3573 + C42873 * C3865 + C43031 * C13295 +
                       C42874 * C13615 + C43032 * C47403 + C42875 * C47838) *
                          C141341) *
                         C141219 * C141499 -
                     ((C44214 + C44215 + C44216) * C141341 +
                      (C43906 + C43907 + C43908) * C5967 +
                      (C43306 + C43305 + C43304) * C141478 +
                      (C43060 + C43059 + C43058) * C5966) *
                         C141219 * C4148) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[69] +=
        (-std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C275 +
             (C29775 * C276 + C141219 * C579) * C141353) *
                C29770 +
            (C30765 + C30789) * C29771 + C32522 * C29772 + C32523 * C29773) *
               C4148 -
           ((C33178 + C33168) * C29773 + (C33179 + C33171) * C29772 +
            (C33180 + C33174) * C29771 +
            ((C29775 * C1784 + C141219 * C2126) * C141353 +
             (C29775 * C1601 + C141219 * C1606) * C275) *
                C29770) *
               C141499) *
              C141281 * C2376 +
          ((((C29775 * C1600 + C141219 * C1605) * C275 +
             (C29775 * C1783 + C141219 * C2125) * C141353) *
                C29770 +
            ((C29775 * C3491 + C141219 * C3495) * C275 +
             (C29775 * C3647 + C141219 * C3935) * C141353) *
                C29771 +
            ((C29775 * C10471 + C141219 * C10474) * C275 +
             (C29775 * C10700 + C141219 * C11146) * C141353) *
                C29772 +
            ((C29775 * C26352 + C141219 * C26354) * C275 +
             (C29775 * C26580 + C141219 * C27029) * C141353) *
                C29773) *
               C141499 -
           ((C30794 + C30780) * C29773 + (C30793 + C30777) * C29772 +
            (C30792 + C30774) * C29771 +
            ((C29775 * C277 + C141219 * C580) * C141353 +
             (C29775 * C109 + C141219 * C115) * C275) *
                C29770) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
              C5873 * C278 + C5865 * C581) *
                 C141353) *
                C141478 +
            ((C7118 + C7119 + C7120) * C275 +
             (C7481 + C7482 + C7483) * C141353) *
                C141341) *
               C4148 -
           (((C11155 + C11156 + C11157) * C141353 +
             (C10834 + C10835 + C10836) * C275) *
                C141341 +
            ((C5873 * C1782 + C5865 * C2124 + C5871 * C1783 + C5864 * C2125 +
              C5869 * C1784 + C5863 * C2126) *
                 C141353 +
             (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 + C5864 * C1605 +
              C5869 * C1601 + C5863 * C1606) *
                 C275) *
                C141478) *
               C141499) *
              C141281 * C2376 +
          ((((C5869 * C1600 + C5863 * C1605 + C5871 * C1599 + C5864 * C1604 +
              C5873 * C1598 + C5865 * C1603) *
                 C275 +
             (C5869 * C1783 + C5863 * C2125 + C5871 * C1782 + C5864 * C2124 +
              C5873 * C1781 + C5865 * C2123) *
                 C141353) *
                C141478 +
            ((C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C5864 * C3496 +
              C5873 * C3493 + C5865 * C3497) *
                 C275 +
             (C5869 * C3647 + C5863 * C3935 + C5871 * C3648 + C5864 * C3936 +
              C5873 * C3649 + C5865 * C3937) *
                 C141353) *
                C141341) *
               C141499 -
           (((C7486 + C7485 + C7484) * C141353 +
             (C7126 + C7125 + C7124) * C275) *
                C141341 +
            ((C5873 * C279 + C5865 * C582 + C5871 * C278 + C5864 * C581 +
              C5869 * C277 + C5863 * C580) *
                 C141353 +
             (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
              C5869 * C109 + C5863 * C115) *
                 C275) *
                C141478) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C43030 +
             (C29775 * C276 + C141219 * C579) * C42873 + C37111 * C43031 +
             C37432 * C42874 + C42383 * C43032 + C42634 * C42875) *
                C141478 +
            (C52079 + C52080 + C52081 + C52082 + C52083 + C52084) * C141341) *
               C4148 -
           ((C55702 + C55696 + C55697 + C55698 + C55699 + C55700) * C141341 +
            ((C29775 * C21228 + C141219 * C21568) * C42875 +
             (C29775 * C21035 + C141219 * C21038) * C43032 + C42634 * C42874 +
             C42383 * C43031 + C37432 * C42873 + C37111 * C43030) *
                C141478) *
               C141499) *
              C141281 * C2376 +
          (((C37113 * C43030 + C37433 * C42873 + C52758 * C43031 +
             C53092 * C42874 + (C29775 * C21036 + C141219 * C21039) * C43032 +
             (C29775 * C21229 + C141219 * C21569) * C42875) *
                C141478 +
            (C36104 * C43030 + C36438 * C42873 + C51770 * C43031 +
             C52092 * C42874 + (C29775 * C47290 + C141219 * C47291) * C43032 +
             (C29775 * C47517 + C141219 * C47937) * C42875) *
                C141341) *
               C141499 -
           ((C52093 + C52089 + C52088 + C52087 + C52086 + C52085) * C141341 +
            (C53092 * C42875 + C52758 * C43032 + C37433 * C42874 +
             C37113 * C43031 + (C29775 * C277 + C141219 * C580) * C42873 +
             (C29775 * C109 + C141219 * C115) * C43030) *
                C141478) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezy[69] +=
        (-std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C275 +
            (C29838 * C276 + C29770 * C635 + C29839 * C1006 + C29771 * C1419 +
             C29840 * C3084 + C29772 * C3362 + C29841 * C9848 +
             C29773 * C10284) *
                C141353) *
               C141219 * C4148 -
           ((C29841 * C26579 + C29773 * C27140 + C29840 * C10699 +
             C29772 * C11255 + C29839 * C3646 + C29771 * C4004 +
             C29838 * C1784 + C29770 * C2197) *
                C141353 +
            (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
             C29772 * C10595 + C29839 * C3490 + C29771 * C3572 +
             C29838 * C1601 + C29770 * C1690) *
                C275) *
               C141219 * C141499) *
              C141281 * C2376 +
          (((C29838 * C1600 + C29770 * C1689 + C29839 * C3491 + C29771 * C3573 +
             C29840 * C10471 + C29772 * C10596 + C29841 * C26352 +
             C29773 * C26478) *
                C275 +
            (C29838 * C1783 + C29770 * C2196 + C29839 * C3647 + C29771 * C4005 +
             C29840 * C10700 + C29772 * C11256 + C29841 * C26580 +
             C29773 * C27141) *
                C141353) *
               C141219 * C141499 -
           ((C29841 * C9849 + C29773 * C10285 + C29840 * C3085 +
             C29772 * C3363 + C29839 * C1005 + C29771 * C1418 + C29838 * C277 +
             C29770 * C636) *
                C141353 +
            (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
             C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
                C275) *
               C141219 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C275 +
             (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                 C141353) *
                C5863 +
            ((C5993 + C5994) * C275 + (C6522 + C6523) * C141353) * C5864 +
            C6530 * C5865) *
               C4148 -
           (((C8596 + C8597) * C141353 + (C7940 + C7941) * C275) * C5865 +
            ((C8598 + C8599) * C141353 + (C7944 + C7945) * C275) * C5864 +
            ((C5967 * C3646 + C141341 * C4004 + C5966 * C1784 +
              C141478 * C2197) *
                 C141353 +
             (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 +
              C141478 * C1690) *
                 C275) *
                C5863) *
               C141499) *
              C141281 * C2376 +
          ((((C7945 + C7944) * C275 + (C8599 + C8598) * C141353) * C5863 +
            ((C7941 + C7940) * C275 + (C8597 + C8596) * C141353) * C5864 +
            ((C5966 * C1598 + C141478 * C1687 + C5967 * C3493 +
              C141341 * C3575) *
                 C275 +
             (C5966 * C1781 + C141478 * C2194 + C5967 * C3649 +
              C141341 * C4007) *
                 C141353) *
                C5865) *
               C141499 -
           (((C6526 + C6527) * C141353 + (C6003 + C6004) * C275) * C5865 +
            ((C6525 + C6524) * C141353 + (C5998 + C5997) * C275) * C5864 +
            ((C6523 + C6522) * C141353 + (C5994 + C5993) * C275) * C5863) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C43030 +
            (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                C42873 +
            (C52532 + C52533) * C43031 + (C53203 + C53204) * C42874 +
            (C52536 + C52537) * C43032 + (C53205 + C53206) * C42875) *
               C141219 * C4148 -
           ((C5967 * C42293 + C141341 * C42708 + C5966 * C21228 +
             C141478 * C21654) *
                C42875 +
            (C5967 * C42109 + C141341 * C42197 + C5966 * C21035 +
             C141478 * C21136) *
                C43032 +
            (C53206 + C53205) * C42874 + (C52537 + C52536) * C43031 +
            (C53204 + C53203) * C42873 + (C52533 + C52532) * C43030) *
               C141219 * C141499) *
              C141281 * C2376 +
          (((C7945 + C7944) * C43030 + (C8599 + C8598) * C42873 +
            (C52540 + C52541) * C43031 + (C53207 + C53208) * C42874 +
            (C5966 * C21036 + C141478 * C21137 + C5967 * C47290 +
             C141341 * C47403) *
                C43032 +
            (C5966 * C21229 + C141478 * C21655 + C5967 * C47517 +
             C141341 * C48042) *
                C42875) *
               C141219 * C141499 -
           ((C53208 + C53207) * C42875 + (C52541 + C52540) * C43032 +
            (C8598 + C8599) * C42874 + (C7944 + C7945) * C43031 +
            (C6523 + C6522) * C42873 + (C5994 + C5993) * C43030) *
               C141219 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[69] +=
        (-std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C29770 +
            C7709 * C29771 + C10372 * C29772 + C26253 * C29773) *
               C141219 * C4148 -
           (C33320 * C29773 + C27249 * C29772 + C11367 * C29771 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C29770) *
               C141219 * C141499) *
              C141281 * C2376 +
          ((C2305 * C29770 + C8709 * C29771 + C24611 * C29772 +
            (C713 * C26352 + C27246 + C27246 + C141353 * C27241) * C29773) *
               C141219 * C141499 -
           (C23643 * C29773 + C7711 * C29772 + C1527 * C29771 + C743 * C29770) *
               C141219 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C141478 +
             C7709 * C141341) *
                C5863 +
            (C6605 + C6606) * C5864 + C6611 * C5865) *
               C4148 -
           ((C8710 + C8700) * C5865 + (C8711 + C8703) * C5864 +
            (C11367 * C141341 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141478) *
                C5863) *
               C141499) *
              C141281 * C2376 +
          (((C8703 + C8711) * C5863 + (C8700 + C8710) * C5864 +
            (C2303 * C141478 +
             (C713 * C3493 + C4082 + C4082 + C141353 * C4077) * C141341) *
                C5865) *
               C141499 -
           ((C6609 + C6610) * C5865 + (C6608 + C6607) * C5864 +
            (C6606 + C6605) * C5863) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43543 * C108 + C43547 + C43547 + C42873 * C714 + C43544 * C1601 +
             C43548 + C43548 + C42874 * C2283 + C43545 * C5325 + C43549 +
             C43549 + C42875 * C5781) *
                C141478 +
            (C52302 + C52303 + C52304) * C141341) *
               C141219 * C4148 -
           ((C55926 + C55927 + C55928) * C141341 +
            (C43545 * C21035 + C45622 + C45622 + C42875 * C21734 +
             C43544 * C5325 + C45623 + C45623 + C42874 * C5781 +
             C43543 * C1601 + C45624 + C45624 + C42873 * C2283) *
                C141478) *
               C141219 * C141499) *
              C141281 * C2376 +
          (((C45636 + C45635 + C45634) * C141478 +
            (C43543 * C3491 + C48149 + C48149 + C42873 * C4075 +
             C43544 * C13206 + C48150 + C48150 + C42874 * C13846 +
             C43545 * C47290 + C48151 + C48151 + C42875 * C48144) *
                C141341) *
               C141219 * C141499 -
           ((C44541 + C44542 + C44543) * C141341 +
            (C43585 + C43584 + C43583) * C141478) *
               C141219 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[70] +=
        (-std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141353 *
                C29770 +
            C30307 * C29771 + C30308 * C29772 + C30309 * C29773) *
               C4148 -
           (C32722 * C29773 + C32723 * C29772 + C32724 * C29771 +
            (C29774 * C1601 + C30996 + C30996 + C141219 * C1611) * C141353 *
                C29770) *
               C141499) *
              C816 +
          ((C32724 * C29770 + C32723 * C29771 + C32722 * C29772 +
            (C29774 * C32702 + C32712 + C32712 + C141219 * C32704) * C141353 *
                C29773) *
               C141499 -
           (C32190 * C29773 + C30309 * C29772 + C30308 * C29771 +
            C30307 * C29770) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 +
             C5876 + C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
             C5865 * C122) *
                C141353 * C141478 +
            (C6740 + C6741 + C6742) * C141353 * C141341) *
               C4148 -
           ((C10495 + C10496 + C10497) * C141353 * C141341 +
            (C5872 * C1599 + C7815 + C7815 + C5865 * C1609 + C5870 * C1600 +
             C7816 + C7816 + C5864 * C1610 + C5868 * C1601 + C7817 + C7817 +
             C5863 * C1611) *
                C141353 * C141478) *
               C141499) *
              C816 +
          (((C10497 + C10496 + C10495) * C141353 * C141478 +
            (C5868 * C10470 + C10486 + C10486 + C5863 * C10476 +
             C5870 * C10471 + C10487 + C10487 + C5864 * C10477 +
             C5872 * C10472 + C10488 + C10488 + C5865 * C10478) *
                C141353 * C141341) *
               C141499 -
           ((C9692 + C9693 + C9694) * C141353 * C141341 +
            (C6742 + C6741 + C6740) * C141353 * C141478) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C42873 +
             C36781 * C42874 + C42123 * C42875) *
                C141478 +
            (C51443 + C51444 + C51445) * C141341) *
               C4148 -
           ((C55018 + C55013 + C55014) * C141341 +
            ((C29774 * C21035 + C42118 + C42118 + C141219 * C21041) * C42875 +
             C42123 * C42874 + C36781 * C42873) *
                C141478) *
               C141499) *
              C816 +
          (((C55014 + C55013 + C55018) * C141478 +
            (C32720 * C42873 + C39349 * C42874 +
             (C29774 * C42110 + C42120 + C42120 + C141219 * C42114) * C42875) *
                C141341) *
               C141499 -
           ((C54263 + C54264 + C54265) * C141341 +
            (C51445 + C51444 + C51443) * C141478) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[70] +=
        (-std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C29775 +
            (C29838 * C114 + C29770 * C195 + C29839 * C828 + C29771 * C917 +
             C29840 * C2964 + C29772 * C3030 + C29841 * C9670 +
             C29773 * C9771) *
                C141219) *
               C141353 * C4148 -
           ((C29841 * C26353 + C29773 * C26479 + C29840 * C10473 +
             C29772 * C10598 + C29839 * C3494 + C29771 * C3576 +
             C29838 * C1606 + C29770 * C1695) *
                C141219 +
            (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
             C29772 * C10595 + C29839 * C3490 + C29771 * C3572 +
             C29838 * C1601 + C29770 * C1690) *
                C29775) *
               C141353 * C141499) *
              C816 +
          (((C29838 * C3490 + C29770 * C3572 + C29839 * C10470 +
             C29771 * C10595 + C29840 * C26351 + C29772 * C26477 +
             C29841 * C32702 + C29773 * C32790) *
                C29775 +
            (C29838 * C3494 + C29770 * C3576 + C29839 * C10473 +
             C29771 * C10598 + C29840 * C26353 + C29772 * C26479 +
             C29841 * C32703 + C29773 * C32791) *
                C141219) *
               C141353 * C141499 -
           ((C29841 * C25570 + C29773 * C25664 + C29840 * C9670 +
             C29772 * C9771 + C29839 * C2964 + C29771 * C3030 + C29838 * C828 +
             C29770 * C917) *
                C141219 +
            (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
             C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
             C29770 * C912) *
                C29775) *
               C141353 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C5869 +
            (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                C5863 +
            (C5993 + C5994) * C5871 + (C5995 + C5996) * C5864 + C6005 * C5873 +
            C6006 * C5865) *
               C141353 * C4148 -
           ((C7938 + C7939) * C5865 + (C7940 + C7941) * C5873 +
            (C7942 + C7943) * C5864 + (C7944 + C7945) * C5871 +
            (C5967 * C3494 + C141341 * C3576 + C5966 * C1606 +
             C141478 * C1695) *
                C5863 +
            (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 +
             C141478 * C1690) *
                C5869) *
               C141353 * C141499) *
              C816 +
          (((C5966 * C3490 + C141478 * C3572 + C5967 * C10470 +
             C141341 * C10595) *
                C5869 +
            (C5966 * C3494 + C141478 * C3576 + C5967 * C10473 +
             C141341 * C10598) *
                C5863 +
            (C5966 * C3491 + C141478 * C3573 + C5967 * C10471 +
             C141341 * C10596) *
                C5871 +
            (C5966 * C3495 + C141478 * C3577 + C5967 * C10474 +
             C141341 * C10599) *
                C5864 +
            (C5966 * C3492 + C141478 * C3574 + C5967 * C10472 +
             C141341 * C10597) *
                C5873 +
            (C5966 * C3496 + C141478 * C3578 + C5967 * C10475 +
             C141341 * C10600) *
                C5865) *
               C141353 * C141499 -
           ((C6860 + C6861) * C5865 + (C6862 + C6863) * C5873 +
            (C6864 + C6865) * C5864 + (C6866 + C6867) * C5871 +
            (C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
                C5863 +
            (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                C5869) *
               C141353 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C29775 +
             (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                 C141219) *
                C42873 +
            ((C52532 + C52533) * C29775 + (C52534 + C52535) * C141219) *
                C42874 +
            ((C52536 + C52537) * C29775 + (C52538 + C52539) * C141219) *
                C42875) *
               C4148 -
           (((C5967 * C42111 + C141341 * C42199 + C5966 * C21038 +
              C141478 * C21139) *
                 C141219 +
             (C5967 * C42109 + C141341 * C42197 + C5966 * C21035 +
              C141478 * C21136) *
                 C29775) *
                C42875 +
            ((C52539 + C52538) * C141219 + (C52537 + C52536) * C29775) *
                C42874 +
            ((C52535 + C52534) * C141219 + (C52533 + C52532) * C29775) *
                C42873) *
               C141499) *
              C816 +
          ((((C55133 + C55134) * C29775 + (C55135 + C55136) * C141219) *
                C42873 +
            ((C55137 + C55138) * C29775 + (C55139 + C55140) * C141219) *
                C42874 +
            ((C5966 * C42109 + C141478 * C42197 + C5967 * C42110 +
              C141341 * C42198) *
                 C29775 +
             (C5966 * C42111 + C141478 * C42199 + C5967 * C42112 +
              C141341 * C42200) *
                 C141219) *
                C42875) *
               C141499 -
           (((C55140 + C55139) * C141219 + (C55138 + C55137) * C29775) *
                C42875 +
            ((C55136 + C55135) * C141219 + (C55134 + C55133) * C29775) *
                C42874 +
            ((C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
                 C141219 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C29775) *
                C42873) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[70] +=
        (-std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C29775 +
             (C275 * C114 + C141353 * C282) * C141219) *
                C29770 +
            (C30445 + C30446) * C29771 + C32295 * C29772 + C32296 * C29773) *
               C4148 -
           ((C32871 + C32872) * C29773 + (C32865 + C32866) * C29772 +
            (C32867 + C32868) * C29771 +
            ((C275 * C1606 + C141353 * C1789) * C141219 +
             (C275 * C1601 + C141353 * C1784) * C29775) *
                C29770) *
               C141499) *
              C816 +
          (((C32868 + C32867) * C29770 + (C32866 + C32865) * C29771 +
            (C32872 + C32871) * C29772 +
            ((C275 * C32702 + C141353 * C32858) * C29775 +
             (C275 * C32703 + C141353 * C32859) * C141219) *
                C29773) *
               C141499 -
           ((C32303 + C32304) * C29773 + (C30450 + C30449) * C29772 +
            (C30448 + C30447) * C29771 + (C30446 + C30445) * C29770) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5869 +
             (C275 * C114 + C141353 * C282) * C5863 + C305 * C5871 +
             C306 * C5864 + C307 * C5873 + C308 * C5865) *
                C141478 +
            (C6994 + C6995 + C6970 + C6971 + C6972 + C6973) * C141341) *
               C4148 -
           ((C10706 + C10707 + C10708 + C10709 + C10716 + C10717) * C141341 +
            (C1806 * C5865 + C1807 * C5873 + C1808 * C5864 + C1809 * C5871 +
             (C275 * C1606 + C141353 * C1789) * C5863 +
             (C275 * C1601 + C141353 * C1784) * C5869) *
                C141478) *
               C141499) *
              C816 +
          (((C10717 + C10716 + C10709 + C10708 + C10707 + C10706) * C141478 +
            ((C275 * C10470 + C141353 * C10699) * C5869 +
             (C275 * C10473 + C141353 * C10702) * C5863 +
             (C275 * C10471 + C141353 * C10700) * C5871 +
             (C275 * C10474 + C141353 * C10703) * C5864 +
             (C275 * C10472 + C141353 * C10701) * C5873 +
             (C275 * C10475 + C141353 * C10704) * C5865) *
                C141341) *
               C141499 -
           ((C9855 + C9856 + C9857 + C9858 + C9865 + C9866) * C141341 +
            (C6973 + C6972 + C6971 + C6970 + C6995 + C6994) * C141478) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
              C43032 * C5325 + C42875 * C5449) *
                 C29775 +
             (C43030 * C114 + C42873 * C282 + C43031 * C1606 + C42874 * C1789 +
              C43032 * C5329 + C42875 * C5453) *
                 C141219) *
                C141478 +
            ((C51662 + C51663 + C51664) * C29775 +
             (C51665 + C51666 + C51667) * C141219) *
                C141341) *
               C4148 -
           (((C55251 + C55252 + C55253) * C141219 +
             (C55254 + C55255 + C55256) * C29775) *
                C141341 +
            ((C43032 * C21038 + C42875 * C21231 + C43031 * C5329 +
              C42874 * C5453 + C43030 * C1606 + C42873 * C1789) *
                 C141219 +
             (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
              C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                 C29775) *
                C141478) *
               C141499) *
              C816 +
          ((((C55256 + C55255 + C55254) * C29775 +
             (C55253 + C55252 + C55251) * C141219) *
                C141478 +
            ((C43030 * C10470 + C42873 * C10699 + C43031 * C29087 +
              C42874 * C29251 + C43032 * C42110 + C42875 * C42294) *
                 C29775 +
             (C43030 * C10473 + C42873 * C10702 + C43031 * C29089 +
              C42874 * C29253 + C43032 * C42112 + C42875 * C42296) *
                 C141219) *
                C141341) *
               C141499 -
           (((C54426 + C54427 + C54428) * C141219 +
             (C54429 + C54430 + C54431) * C29775) *
                C141341 +
            ((C51667 + C51666 + C51665) * C141219 +
             (C51664 + C51663 + C51662) * C29775) *
                C141478) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[70] += (-std::pow(Pi, 2.5) *
                   ((((C29775 * C108 + C141219 * C114) * C29838 +
                      (C29775 * C189 + C141219 * C362) * C29770 +
                      C30547 * C29839 + C30548 * C29771 + C30549 * C29840 +
                      C30550 * C29772 + C30551 * C29841 + C30552 * C29773) *
                         C141353 * C4148 -
                     (C32952 * C29773 + C32953 * C29841 + C32954 * C29772 +
                      C32955 * C29840 + C32956 * C29771 + C32957 * C29839 +
                      (C29775 * C1690 + C141219 * C1878) * C29770 +
                      (C29775 * C1601 + C141219 * C1606) * C29838) *
                         C141353 * C141499) *
                        C816 +
                    ((C32957 * C29838 + C32956 * C29770 + C32955 * C29839 +
                      C32954 * C29771 + C32953 * C29840 + C32952 * C29772 +
                      (C29775 * C32702 + C141219 * C32703) * C29841 +
                      (C29775 * C32790 + C141219 * C32938) * C29773) *
                         C141353 * C141499 -
                     (C32360 * C29773 + C32361 * C29841 + C30552 * C29772 +
                      C30551 * C29840 + C30550 * C29771 + C30549 * C29839 +
                      C30548 * C29770 + C30547 * C29838) *
                         C141353 * C4148) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                       C5864 * C115 + C5873 * C110 + C5865 * C116) *
                          C5966 +
                      (C5869 * C189 + C5863 * C362 + C5871 * C190 +
                       C5864 * C363 + C5873 * C191 + C5865 * C364) *
                          C141478 +
                      (C7118 + C7119 + C7120) * C5967 +
                      (C7121 + C7122 + C7123) * C141341) *
                         C141353 * C4148 -
                     ((C10831 + C10832 + C10833) * C141341 +
                      (C10834 + C10835 + C10836) * C5967 +
                      (C5873 * C1688 + C5865 * C1876 + C5871 * C1689 +
                       C5864 * C1877 + C5869 * C1690 + C5863 * C1878) *
                          C141478 +
                      (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 +
                       C5864 * C1605 + C5869 * C1601 + C5863 * C1606) *
                          C5966) *
                         C141353 * C141499) *
                        C816 +
                    (((C10836 + C10835 + C10834) * C5966 +
                      (C10833 + C10832 + C10831) * C141478 +
                      (C5869 * C10470 + C5863 * C10473 + C5871 * C10471 +
                       C5864 * C10474 + C5873 * C10472 + C5865 * C10475) *
                          C5967 +
                      (C5869 * C10595 + C5863 * C10815 + C5871 * C10596 +
                       C5864 * C10816 + C5873 * C10597 + C5865 * C10817) *
                          C141341) *
                         C141353 * C141499 -
                     ((C9956 + C9957 + C9958) * C141341 +
                      (C9959 + C9960 + C9961) * C5967 +
                      (C7123 + C7122 + C7121) * C141478 +
                      (C7120 + C7119 + C7118) * C5966) *
                         C141353 * C4148) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C5966 +
                       (C29775 * C189 + C141219 * C362) * C141478 +
                       C30547 * C5967 + C30548 * C141341) *
                          C42873 +
                      (C52740 + C52741 + C52742 + C52743) * C42874 +
                      (C52744 + C52745 + C52746 + C52747) * C42875) *
                         C4148 -
                     ((C55367 * C141341 + C55368 * C5967 +
                       (C29775 * C21136 + C141219 * C21308) * C141478 +
                       (C29775 * C21035 + C141219 * C21038) * C5966) *
                          C42875 +
                      (C52747 + C52746 + C52745 + C52744) * C42874 +
                      (C52743 + C52742 + C52741 + C52740) * C42873) *
                         C141499) *
                        C816 +
                    (((C55359 + C55360 + C55361 + C55362) * C42873 +
                      (C55363 + C55364 + C55365 + C55366) * C42874 +
                      (C55368 * C5966 + C55367 * C141478 +
                       (C29775 * C42110 + C141219 * C42112) * C5967 +
                       (C29775 * C42198 + C141219 * C42372) * C141341) *
                          C42875) *
                         C141499 -
                     ((C55366 + C55365 + C55364 + C55363) * C42875 +
                      (C55362 + C55361 + C55360 + C55359) * C42874 +
                      (C30550 * C141341 + C30549 * C5967 + C30548 * C141478 +
                       C30547 * C5966) *
                          C42873) *
                         C4148) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[70] += (-std::pow(Pi, 2.5) *
                   (((C29992 * C108 + C29997 + C29997 + C29770 * C419 +
                      C29993 * C823 + C29998 + C29998 + C29771 * C1171 +
                      C29994 * C2960 + C29999 + C29999 + C29772 * C3196 +
                      C29995 * C9667 + C30000 + C30000 + C29773 * C10035) *
                         C141219 * C141353 * C4148 -
                     (C29995 * C26351 + C31265 + C31265 + C29773 * C26819 +
                      C29994 * C10470 + C31266 + C31266 + C29772 * C10934 +
                      C29993 * C3490 + C31267 + C31267 + C29771 * C3790 +
                      C29992 * C1601 + C31268 + C31268 + C29770 * C1949) *
                         C141219 * C141353 * C141499) *
                        C816 +
                    ((C29992 * C3490 + C33025 + C33025 + C29770 * C3790 +
                      C29993 * C10470 + C33026 + C33026 + C29771 * C10934 +
                      C29994 * C26351 + C33027 + C33027 + C29772 * C26819 +
                      C29995 * C32702 + C33028 + C33028 + C29773 * C33023) *
                         C141219 * C141353 * C141499 -
                     (C29995 * C25568 + C30625 + C30625 + C29773 * C25921 +
                      C29994 * C9667 + C30626 + C30626 + C29772 * C10035 +
                      C29993 * C2960 + C30627 + C30627 + C29771 * C3196 +
                      C29992 * C823 + C30628 + C30628 + C29770 * C1171) *
                         C141219 * C141353 * C4148) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                       C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                          C5863 +
                      (C6265 + C6266) * C5864 + C6271 * C5865) *
                         C141353 * C4148 -
                     ((C8276 + C8277) * C5865 + (C8278 + C8279) * C5864 +
                      (C6229 * C3490 + C8264 + C8264 + C141341 * C3790 +
                       C6228 * C1601 + C8265 + C8265 + C141478 * C1949) *
                          C5863) *
                         C141353 * C141499) *
                        C816 +
                    (((C6228 * C3490 + C10938 + C10938 + C141478 * C3790 +
                       C6229 * C10470 + C10939 + C10939 + C141341 * C10934) *
                          C5863 +
                      (C6228 * C3491 + C10940 + C10940 + C141478 * C3791 +
                       C6229 * C10471 + C10941 + C10941 + C141341 * C10935) *
                          C5864 +
                      (C6228 * C3492 + C10942 + C10942 + C141478 * C3792 +
                       C6229 * C10472 + C10943 + C10943 + C141341 * C10936) *
                          C5865) *
                         C141353 * C141499 -
                     ((C7252 + C7253) * C5865 + (C7254 + C7255) * C5864 +
                      (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 +
                       C6228 * C823 + C7241 + C7241 + C141478 * C1171) *
                          C5863) *
                         C141353 * C4148) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                       C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                          C141219 * C42873 +
                      (C52888 + C52889) * C141219 * C42874 +
                      (C52890 + C52891) * C141219 * C42875) *
                         C4148 -
                     ((C6229 * C42109 + C52868 + C52868 + C141341 * C42459 +
                       C6228 * C21035 + C52869 + C52869 + C141478 * C21403) *
                          C141219 * C42875 +
                      (C52891 + C52890) * C141219 * C42874 +
                      (C52889 + C52888) * C141219 * C42873) *
                         C141499) *
                        C816 +
                    (((C55485 + C55486) * C141219 * C42873 +
                      (C55487 + C55488) * C141219 * C42874 +
                      (C6228 * C42109 + C55475 + C55475 + C141478 * C42459 +
                       C6229 * C42110 + C55476 + C55476 + C141341 * C42460) *
                          C141219 * C42875) *
                         C141499 -
                     ((C55488 + C55487) * C141219 * C42875 +
                      (C55486 + C55485) * C141219 * C42874 +
                      (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 +
                       C6228 * C823 + C7241 + C7241 + C141478 * C1171) *
                          C141219 * C42873) *
                         C4148) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[70] += (-std::pow(Pi, 2.5) *
                   ((((C275 * C108 + C141353 * C276) * C29838 +
                      (C275 * C189 + C141353 * C501) * C29770 + C6988 * C29839 +
                      C7366 * C29771 + C9864 * C29840 + C10124 * C29772 +
                      C25754 * C29841 + C26008 * C29773) *
                         C141219 * C4148 -
                     (C33098 * C29773 + C32870 * C29841 + C26930 * C29772 +
                      C26595 * C29840 + C11047 * C29771 + C10715 * C29839 +
                      (C275 * C1690 + C141353 * C2040) * C29770 +
                      (C275 * C1601 + C141353 * C1784) * C29838) *
                         C141219 * C141499) *
                        C816 +
                    ((C10715 * C29838 + C11047 * C29770 + C26595 * C29839 +
                      C26930 * C29771 + C32870 * C29840 + C33098 * C29772 +
                      (C275 * C32702 + C141353 * C32858) * C29841 +
                      (C275 * C32790 + C141353 * C33094) * C29773) *
                         C141219 * C141499 -
                     (C32470 * C29773 + C32302 * C29841 + C26008 * C29772 +
                      C25754 * C29840 + C10124 * C29771 + C9864 * C29839 +
                      C7366 * C29770 + C6988 * C29838) *
                         C141219 * C4148) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((((C275 * C108 + C141353 * C276) * C5966 +
                       (C275 * C189 + C141353 * C501) * C141478 +
                       C6988 * C5967 + C7366 * C141341) *
                          C5863 +
                      (C6346 + C6347 + C6348 + C6349) * C5864 + C6360 * C5865) *
                         C4148 -
                     ((C8390 + C8380 + C8381 + C8382) * C5865 +
                      (C8391 + C8385 + C8386 + C8387) * C5864 +
                      (C11047 * C141341 + C10715 * C5967 +
                       (C275 * C1690 + C141353 * C2040) * C141478 +
                       (C275 * C1601 + C141353 * C1784) * C5966) *
                          C5863) *
                         C141499) *
                        C816 +
                    (((C10715 * C5966 + C11047 * C141478 +
                       (C275 * C10470 + C141353 * C10699) * C5967 +
                       (C275 * C10595 + C141353 * C11041) * C141341) *
                          C5863 +
                      (C8055 * C5966 + C8389 * C141478 +
                       (C275 * C10471 + C141353 * C10700) * C5967 +
                       (C275 * C10596 + C141353 * C11042) * C141341) *
                          C5864 +
                      (C8053 * C5966 + C8388 * C141478 +
                       (C275 * C10472 + C141353 * C10701) * C5967 +
                       (C275 * C10597 + C141353 * C11043) * C141341) *
                          C5865) *
                         C141499 -
                     ((C7369 + C7358 + C7359 + C7360) * C5865 +
                      (C7370 + C7363 + C7364 + C7365) * C5864 +
                      (C10124 * C141341 + C9864 * C5967 + C7366 * C141478 +
                       C6988 * C5966) *
                          C5863) *
                         C4148) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C43030 * C108 + C42873 * C276 + C43031 * C1601 +
                       C42874 * C1784 + C43032 * C5325 + C42875 * C5449) *
                          C5966 +
                      (C43030 * C189 + C42873 * C501 + C43031 * C1690 +
                       C42874 * C2040 + C43032 * C5391 + C42875 * C5619) *
                          C141478 +
                      (C51662 + C51663 + C51664) * C5967 +
                      (C51978 + C51979 + C51980) * C141341) *
                         C141219 * C4148 -
                     ((C55593 + C55594 + C55595) * C141341 +
                      (C55254 + C55255 + C55256) * C5967 +
                      (C43032 * C21136 + C42875 * C21491 + C43031 * C5391 +
                       C42874 * C5619 + C43030 * C1690 + C42873 * C2040) *
                          C141478 +
                      (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
                       C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                          C5966) *
                         C141219 * C141499) *
                        C816 +
                    (((C55256 + C55255 + C55254) * C5966 +
                      (C55595 + C55594 + C55593) * C141478 +
                      (C43030 * C10470 + C42873 * C10699 + C43031 * C29087 +
                       C42874 * C29251 + C43032 * C42110 + C42875 * C42294) *
                          C5967 +
                      (C43030 * C10595 + C42873 * C11041 + C43031 * C29173 +
                       C42874 * C29487 + C43032 * C42198 + C42875 * C42554) *
                          C141341) *
                         C141219 * C141499 -
                     ((C54664 + C54665 + C54666) * C141341 +
                      (C54429 + C54430 + C54431) * C5967 +
                      (C51980 + C51979 + C51978) * C141478 +
                      (C51664 + C51663 + C51662) * C5966) *
                         C141219 * C4148) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q));
    d2eezx[70] +=
        (-std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C275 +
             (C29775 * C276 + C141219 * C579) * C141353) *
                C29770 +
            (C30765 + C30789) * C29771 + C32522 * C29772 + C32523 * C29773) *
               C4148 -
           ((C33178 + C33168) * C29773 + (C33179 + C33171) * C29772 +
            (C33180 + C33174) * C29771 +
            ((C29775 * C1784 + C141219 * C2126) * C141353 +
             (C29775 * C1601 + C141219 * C1606) * C275) *
                C29770) *
               C141499) *
              C816 +
          (((C33174 + C33180) * C29770 + (C33171 + C33179) * C29771 +
            (C33168 + C33178) * C29772 +
            ((C29775 * C32702 + C141219 * C32703) * C275 +
             (C29775 * C32858 + C141219 * C33164) * C141353) *
                C29773) *
               C141499 -
           ((C32528 + C32526) * C29773 + (C30791 + C30771) * C29772 +
            (C30790 + C30768) * C29771 + (C30789 + C30765) * C29770) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
              C5873 * C278 + C5865 * C581) *
                 C141353) *
                C141478 +
            ((C7118 + C7119 + C7120) * C275 +
             (C7481 + C7482 + C7483) * C141353) *
                C141341) *
               C4148 -
           (((C11155 + C11156 + C11157) * C141353 +
             (C10834 + C10835 + C10836) * C275) *
                C141341 +
            ((C5873 * C1782 + C5865 * C2124 + C5871 * C1783 + C5864 * C2125 +
              C5869 * C1784 + C5863 * C2126) *
                 C141353 +
             (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 + C5864 * C1605 +
              C5869 * C1601 + C5863 * C1606) *
                 C275) *
                C141478) *
               C141499) *
              C816 +
          ((((C10836 + C10835 + C10834) * C275 +
             (C11157 + C11156 + C11155) * C141353) *
                C141478 +
            ((C5869 * C10470 + C5863 * C10473 + C5871 * C10471 +
              C5864 * C10474 + C5873 * C10472 + C5865 * C10475) *
                 C275 +
             (C5869 * C10699 + C5863 * C11145 + C5871 * C10700 +
              C5864 * C11146 + C5873 * C10701 + C5865 * C11147) *
                 C141353) *
                C141341) *
               C141499 -
           (((C10208 + C10209 + C10210) * C141353 +
             (C9959 + C9960 + C9961) * C275) *
                C141341 +
            ((C7483 + C7482 + C7481) * C141353 +
             (C7120 + C7119 + C7118) * C275) *
                C141478) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C43030 +
             (C29775 * C276 + C141219 * C579) * C42873 + C37111 * C43031 +
             C37432 * C42874 + C42383 * C43032 + C42634 * C42875) *
                C141478 +
            (C52079 + C52080 + C52081 + C52082 + C52083 + C52084) * C141341) *
               C4148 -
           ((C55702 + C55696 + C55697 + C55698 + C55699 + C55700) * C141341 +
            ((C29775 * C21228 + C141219 * C21568) * C42875 +
             (C29775 * C21035 + C141219 * C21038) * C43032 + C42634 * C42874 +
             C42383 * C43031 + C37432 * C42873 + C37111 * C43030) *
                C141478) *
               C141499) *
              C816 +
          (((C55700 + C55699 + C55698 + C55697 + C55696 + C55702) * C141478 +
            (C32955 * C43030 + C33176 * C42873 + C39704 * C43031 +
             C40041 * C42874 + (C29775 * C42110 + C141219 * C42112) * C43032 +
             (C29775 * C42294 + C141219 * C42630) * C42875) *
                C141341) *
               C141499 -
           ((C54741 + C54742 + C54743 + C54744 + C54745 + C54746) * C141341 +
            (C52084 + C52083 + C52082 + C52081 + C52080 + C52079) * C141478) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[70] +=
        (-std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C275 +
            (C29838 * C276 + C29770 * C635 + C29839 * C1006 + C29771 * C1419 +
             C29840 * C3084 + C29772 * C3362 + C29841 * C9848 +
             C29773 * C10284) *
                C141353) *
               C141219 * C4148 -
           ((C29841 * C26579 + C29773 * C27140 + C29840 * C10699 +
             C29772 * C11255 + C29839 * C3646 + C29771 * C4004 +
             C29838 * C1784 + C29770 * C2197) *
                C141353 +
            (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
             C29772 * C10595 + C29839 * C3490 + C29771 * C3572 +
             C29838 * C1601 + C29770 * C1690) *
                C275) *
               C141219 * C141499) *
              C816 +
          (((C29838 * C3490 + C29770 * C3572 + C29839 * C10470 +
             C29771 * C10595 + C29840 * C26351 + C29772 * C26477 +
             C29841 * C32702 + C29773 * C32790) *
                C275 +
            (C29838 * C3646 + C29770 * C4004 + C29839 * C10699 +
             C29771 * C11255 + C29840 * C26579 + C29772 * C27140 +
             C29841 * C32858 + C29773 * C33246) *
                C141353) *
               C141219 * C141499 -
           ((C29841 * C25740 + C29773 * C26168 + C29840 * C9848 +
             C29772 * C10284 + C29839 * C3084 + C29771 * C3362 +
             C29838 * C1006 + C29770 * C1419) *
                C141353 +
            (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
             C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
             C29770 * C912) *
                C275) *
               C141219 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C275 +
             (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                 C141353) *
                C5863 +
            ((C5993 + C5994) * C275 + (C6522 + C6523) * C141353) * C5864 +
            C6530 * C5865) *
               C4148 -
           (((C8596 + C8597) * C141353 + (C7940 + C7941) * C275) * C5865 +
            ((C8598 + C8599) * C141353 + (C7944 + C7945) * C275) * C5864 +
            ((C5967 * C3646 + C141341 * C4004 + C5966 * C1784 +
              C141478 * C2197) *
                 C141353 +
             (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 +
              C141478 * C1690) *
                 C275) *
                C5863) *
               C141499) *
              C816 +
          ((((C5966 * C3490 + C141478 * C3572 + C5967 * C10470 +
              C141341 * C10595) *
                 C275 +
             (C5966 * C3646 + C141478 * C4004 + C5967 * C10699 +
              C141341 * C11255) *
                 C141353) *
                C5863 +
            ((C5966 * C3491 + C141478 * C3573 + C5967 * C10471 +
              C141341 * C10596) *
                 C275 +
             (C5966 * C3647 + C141478 * C4005 + C5967 * C10700 +
              C141341 * C11256) *
                 C141353) *
                C5864 +
            ((C5966 * C3492 + C141478 * C3574 + C5967 * C10472 +
              C141341 * C10597) *
                 C275 +
             (C5966 * C3648 + C141478 * C4006 + C5967 * C10701 +
              C141341 * C11257) *
                 C141353) *
                C5865) *
               C141499 -
           (((C7593 + C7594) * C141353 + (C6862 + C6863) * C275) * C5865 +
            ((C7595 + C7596) * C141353 + (C6866 + C6867) * C275) * C5864 +
            ((C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
              C141478 * C1419) *
                 C141353 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C275) *
                C5863) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C43030 +
            (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                C42873 +
            (C52532 + C52533) * C43031 + (C53203 + C53204) * C42874 +
            (C52536 + C52537) * C43032 + (C53205 + C53206) * C42875) *
               C141219 * C4148 -
           ((C5967 * C42293 + C141341 * C42708 + C5966 * C21228 +
             C141478 * C21654) *
                C42875 +
            (C5967 * C42109 + C141341 * C42197 + C5966 * C21035 +
             C141478 * C21136) *
                C43032 +
            (C53206 + C53205) * C42874 + (C52537 + C52536) * C43031 +
            (C53204 + C53203) * C42873 + (C52533 + C52532) * C43030) *
               C141219 * C141499) *
              C816 +
          (((C55133 + C55134) * C43030 + (C55809 + C55810) * C42873 +
            (C55137 + C55138) * C43031 + (C55811 + C55812) * C42874 +
            (C5966 * C42109 + C141478 * C42197 + C5967 * C42110 +
             C141341 * C42198) *
                C43032 +
            (C5966 * C42293 + C141478 * C42708 + C5967 * C42294 +
             C141341 * C42709) *
                C42875) *
               C141219 * C141499 -
           ((C55812 + C55811) * C42875 + (C55138 + C55137) * C43032 +
            (C55810 + C55809) * C42874 + (C55134 + C55133) * C43031 +
            (C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
             C141478 * C1419) *
                C42873 +
            (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                C43030) *
               C141219 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[70] +=
        (-std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C29770 +
            C7709 * C29771 + C10372 * C29772 + C26253 * C29773) *
               C141219 * C4148 -
           (C33320 * C29773 + C27249 * C29772 + C11367 * C29771 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C29770) *
               C141219 * C141499) *
              C816 +
          ((C11367 * C29770 + C27249 * C29771 + C33320 * C29772 +
            (C713 * C32702 + C33317 + C33317 + C141353 * C33313) * C29773) *
               C141219 * C141499 -
           (C32636 * C29773 + C26253 * C29772 + C10372 * C29771 +
            C7709 * C29770) *
               C141219 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C141478 +
             C7709 * C141341) *
                C5863 +
            (C6605 + C6606) * C5864 + C6611 * C5865) *
               C4148 -
           ((C8710 + C8700) * C5865 + (C8711 + C8703) * C5864 +
            (C11367 * C141341 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141478) *
                C5863) *
               C141499) *
              C816 +
          (((C11367 * C141478 +
             (C713 * C10470 + C11362 + C11362 + C141353 * C11356) * C141341) *
                C5863 +
            (C8709 * C141478 +
             (C713 * C10471 + C11363 + C11363 + C141353 * C11357) * C141341) *
                C5864 +
            (C8708 * C141478 +
             (C713 * C10472 + C11364 + C11364 + C141353 * C11358) * C141341) *
                C5865) *
               C141499 -
           ((C7712 + C7699) * C5865 + (C7713 + C7702) * C5864 +
            (C10372 * C141341 + C7709 * C141478) * C5863) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43543 * C108 + C43547 + C43547 + C42873 * C714 + C43544 * C1601 +
             C43548 + C43548 + C42874 * C2283 + C43545 * C5325 + C43549 +
             C43549 + C42875 * C5781) *
                C141478 +
            (C52302 + C52303 + C52304) * C141341) *
               C141219 * C4148 -
           ((C55926 + C55927 + C55928) * C141341 +
            (C43545 * C21035 + C45622 + C45622 + C42875 * C21734 +
             C43544 * C5325 + C45623 + C45623 + C42874 * C5781 +
             C43543 * C1601 + C45624 + C45624 + C42873 * C2283) *
                C141478) *
               C141219 * C141499) *
              C816 +
          (((C55928 + C55927 + C55926) * C141478 +
            (C43543 * C10470 + C55917 + C55917 + C42873 * C11356 +
             C43544 * C29087 + C55918 + C55918 + C42874 * C29715 +
             C43545 * C42110 + C55919 + C55919 + C42875 * C42794) *
                C141341) *
               C141219 * C141499 -
           ((C54910 + C54911 + C54912) * C141341 +
            (C52304 + C52303 + C52302) * C141478) *
               C141219 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexx[71] +=
        (-std::pow(Pi, 2.5) *
         (((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141353 *
               C29770 +
           C30307 * C29771 + C30308 * C29772 + C30309 * C29773) *
              C5322 -
          (C32722 * C29773 + C32723 * C29772 + C32724 * C29771 +
           (C29774 * C1601 + C30996 + C30996 + C141219 * C1611) * C141353 *
               C29770) *
              C5323 +
          ((C29774 * C5325 + C34562 + C34562 + C141219 * C5333) * C141353 *
               C29770 +
           (C29774 * C13205 + C34563 + C34563 + C141219 * C13211) * C141353 *
               C29771 +
           (C29774 * C29087 + C34564 + C34564 + C141219 * C29091) * C141353 *
               C29772 +
           (C29774 * C34558 + C34565 + C34565 + C141219 * C34560) * C141353 *
               C29773) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 + C5876 +
            C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
            C5865 * C122) *
               C141353 * C141478 +
           (C6740 + C6741 + C6742) * C141353 * C141341) *
              C5322 -
          ((C10495 + C10496 + C10497) * C141353 * C141341 +
           (C5872 * C1599 + C7815 + C7815 + C5865 * C1609 + C5870 * C1600 +
            C7816 + C7816 + C5864 * C1610 + C5868 * C1601 + C7817 + C7817 +
            C5863 * C1611) *
               C141353 * C141478) *
              C5323 +
          ((C5868 * C5325 + C13215 + C13215 + C5863 * C5333 + C5870 * C5326 +
            C13216 + C13216 + C5864 * C5334 + C5872 * C5327 + C13217 + C13217 +
            C5865 * C5335) *
               C141353 * C141478 +
           (C5868 * C13205 + C13218 + C13218 + C5863 * C13211 + C5870 * C13206 +
            C13219 + C13219 + C5864 * C13212 + C5872 * C13207 + C13220 +
            C13220 + C5865 * C13213) *
               C141353 * C141341) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C42873 +
            C36781 * C42874 + C42123 * C42875) *
               C141478 +
           (C51443 + C51444 + C51445) * C141341) *
              C5322 -
          ((C55018 + C55013 + C55014) * C141341 +
           (C57776 * C42875 + C42123 * C42874 + C36781 * C42873) * C141478) *
              C5323 +
          ((C42123 * C42873 + C57776 * C42874 +
            (C29774 * C49989 + C57772 + C57772 + C141219 * C49993) * C42875) *
               C141478 +
           (C39350 * C42873 + C55017 * C42874 +
            (C29774 * C57766 + C57773 + C57773 + C141219 * C57768) * C42875) *
               C141341) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[71] +=
        (-std::pow(Pi, 2.5) *
         (((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
            C29840 * C2960 + C29772 * C3026 + C29841 * C9667 + C29773 * C9768) *
               C29775 +
           (C29838 * C114 + C29770 * C195 + C29839 * C828 + C29771 * C917 +
            C29840 * C2964 + C29772 * C3030 + C29841 * C9670 + C29773 * C9771) *
               C141219) *
              C141353 * C5322 -
          ((C29841 * C26353 + C29773 * C26479 + C29840 * C10473 +
            C29772 * C10598 + C29839 * C3494 + C29771 * C3576 + C29838 * C1606 +
            C29770 * C1695) *
               C141219 +
           (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
            C29772 * C10595 + C29839 * C3490 + C29771 * C3572 + C29838 * C1601 +
            C29770 * C1690) *
               C29775) *
              C141353 * C5323 +
          ((C29838 * C5325 + C29770 * C5391 + C29839 * C13205 +
            C29771 * C13294 + C29840 * C29087 + C29772 * C29173 +
            C29841 * C34558 + C29773 * C34615) *
               C29775 +
           (C29838 * C5329 + C29770 * C5395 + C29839 * C13208 +
            C29771 * C13297 + C29840 * C29089 + C29772 * C29175 +
            C29841 * C34559 + C29773 * C34616) *
               C141219) *
              C141353 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
               C5869 +
           (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
               C5863 +
           (C5993 + C5994) * C5871 + (C5995 + C5996) * C5864 + C6005 * C5873 +
           C6006 * C5865) *
              C141353 * C5322 -
          ((C7938 + C7939) * C5865 + (C7940 + C7941) * C5873 +
           (C7942 + C7943) * C5864 + (C7944 + C7945) * C5871 +
           (C5967 * C3494 + C141341 * C3576 + C5966 * C1606 + C141478 * C1695) *
               C5863 +
           (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 + C141478 * C1690) *
               C5869) *
              C141353 * C5323 +
          ((C5966 * C5325 + C141478 * C5391 + C5967 * C13205 +
            C141341 * C13294) *
               C5869 +
           (C5966 * C5329 + C141478 * C5395 + C5967 * C13208 +
            C141341 * C13297) *
               C5863 +
           (C5966 * C5326 + C141478 * C5392 + C5967 * C13206 +
            C141341 * C13295) *
               C5871 +
           (C5966 * C5330 + C141478 * C5396 + C5967 * C13209 +
            C141341 * C13298) *
               C5864 +
           (C5966 * C5327 + C141478 * C5393 + C5967 * C13207 +
            C141341 * C13296) *
               C5873 +
           (C5966 * C5331 + C141478 * C5397 + C5967 * C13210 +
            C141341 * C13299) *
               C5865) *
              C141353 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C29775 +
            (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                C141219) *
               C42873 +
           ((C52532 + C52533) * C29775 + (C52534 + C52535) * C141219) * C42874 +
           C57869 * C42875) *
              C5322 -
          (((C57865 + C57866) * C141219 + (C57867 + C57868) * C29775) * C42875 +
           ((C52539 + C52538) * C141219 + (C52537 + C52536) * C29775) * C42874 +
           ((C52535 + C52534) * C141219 + (C52533 + C52532) * C29775) *
               C42873) *
              C5323 +
          (C57869 * C42873 +
           ((C57868 + C57867) * C29775 + (C57866 + C57865) * C141219) * C42874 +
           ((C5966 * C49989 + C141478 * C50082 + C5967 * C57766 +
             C141341 * C57850) *
                C29775 +
            (C5966 * C49991 + C141478 * C50084 + C5967 * C57767 +
             C141341 * C57851) *
                C141219) *
               C42875) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[71] +=
        (-std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C29775 +
            (C275 * C114 + C141353 * C282) * C141219) *
               C29770 +
           (C30445 + C30446) * C29771 + C32295 * C29772 + C32296 * C29773) *
              C5322 -
          ((C32871 + C32872) * C29773 + (C32865 + C32866) * C29772 +
           (C32867 + C32868) * C29771 +
           ((C275 * C1606 + C141353 * C1789) * C141219 +
            (C275 * C1601 + C141353 * C1784) * C29775) *
               C29770) *
              C5323 +
          (((C275 * C5325 + C141353 * C5449) * C29775 +
            (C275 * C5329 + C141353 * C5453) * C141219) *
               C29770 +
           ((C275 * C13205 + C141353 * C13374) * C29775 +
            (C275 * C13208 + C141353 * C13377) * C141219) *
               C29771 +
           ((C275 * C29087 + C141353 * C29251) * C29775 +
            (C275 * C29089 + C141353 * C29253) * C141219) *
               C29772 +
           ((C275 * C34558 + C141353 * C34667) * C29775 +
            (C275 * C34559 + C141353 * C34668) * C141219) *
               C29773) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C5869 +
            (C275 * C114 + C141353 * C282) * C5863 + C305 * C5871 +
            C306 * C5864 + C307 * C5873 + C308 * C5865) *
               C141478 +
           (C6994 + C6995 + C6970 + C6971 + C6972 + C6973) * C141341) *
              C5322 -
          ((C10706 + C10707 + C10708 + C10709 + C10716 + C10717) * C141341 +
           (C1806 * C5865 + C1807 * C5873 + C1808 * C5864 + C1809 * C5871 +
            (C275 * C1606 + C141353 * C1789) * C5863 +
            (C275 * C1601 + C141353 * C1784) * C5869) *
               C141478) *
              C5323 +
          (((C275 * C5325 + C141353 * C5449) * C5869 +
            (C275 * C5329 + C141353 * C5453) * C5863 +
            (C275 * C5326 + C141353 * C5450) * C5871 +
            (C275 * C5330 + C141353 * C5454) * C5864 +
            (C275 * C5327 + C141353 * C5451) * C5873 +
            (C275 * C5331 + C141353 * C5455) * C5865) *
               C141478 +
           ((C275 * C13205 + C141353 * C13374) * C5869 +
            (C275 * C13208 + C141353 * C13377) * C5863 +
            (C275 * C13206 + C141353 * C13375) * C5871 +
            (C275 * C13209 + C141353 * C13378) * C5864 +
            (C275 * C13207 + C141353 * C13376) * C5873 +
            (C275 * C13210 + C141353 * C13379) * C5865) *
               C141341) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C43030 * C108 + C42873 * C276 + C43031 * C1601 + C42874 * C1784 +
             C43032 * C5325 + C42875 * C5449) *
                C29775 +
            (C43030 * C114 + C42873 * C282 + C43031 * C1606 + C42874 * C1789 +
             C43032 * C5329 + C42875 * C5453) *
                C141219) *
               C141478 +
           ((C51662 + C51663 + C51664) * C29775 +
            (C51665 + C51666 + C51667) * C141219) *
               C141341) *
              C5322 -
          (((C55251 + C55252 + C55253) * C141219 +
            (C55254 + C55255 + C55256) * C29775) *
               C141341 +
           ((C43032 * C21038 + C42875 * C21231 + C43031 * C5329 +
             C42874 * C5453 + C43030 * C1606 + C42873 * C1789) *
                C141219 +
            (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
             C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                C29775) *
               C141478) *
              C5323 +
          (((C43030 * C5325 + C42873 * C5449 + C43031 * C21035 +
             C42874 * C21228 + C43032 * C49989 + C42875 * C50173) *
                C29775 +
            (C43030 * C5329 + C42873 * C5453 + C43031 * C21038 +
             C42874 * C21231 + C43032 * C49991 + C42875 * C50175) *
                C141219) *
               C141478 +
           ((C43030 * C13205 + C42873 * C13374 + C43031 * C42109 +
             C42874 * C42293 + C43032 * C57766 + C42875 * C57943) *
                C29775 +
            (C43030 * C13208 + C42873 * C13377 + C43031 * C42111 +
             C42874 * C42295 + C43032 * C57767 + C42875 * C57944) *
                C141219) *
               C141341) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[71] +=
        (-std::pow(Pi, 2.5) *
         (((C29775 * C108 + C141219 * C114) * C29838 +
           (C29775 * C189 + C141219 * C362) * C29770 + C30547 * C29839 +
           C30548 * C29771 + C30549 * C29840 + C30550 * C29772 +
           C30551 * C29841 + C30552 * C29773) *
              C141353 * C5322 -
          (C32952 * C29773 + C32953 * C29841 + C32954 * C29772 +
           C32955 * C29840 + C32956 * C29771 + C32957 * C29839 +
           (C29775 * C1690 + C141219 * C1878) * C29770 +
           (C29775 * C1601 + C141219 * C1606) * C29838) *
              C141353 * C5323 +
          ((C29775 * C5325 + C141219 * C5329) * C29838 +
           (C29775 * C5391 + C141219 * C5507) * C29770 +
           (C29775 * C13205 + C141219 * C13208) * C29839 +
           (C29775 * C13294 + C141219 * C13454) * C29771 +
           (C29775 * C29087 + C141219 * C29089) * C29840 +
           (C29775 * C29173 + C141219 * C29329) * C29772 +
           (C29775 * C34558 + C141219 * C34559) * C29841 +
           (C29775 * C34615 + C141219 * C34719) * C29773) *
              C141353 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
            C5873 * C110 + C5865 * C116) *
               C5966 +
           (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
            C5873 * C191 + C5865 * C364) *
               C141478 +
           (C7118 + C7119 + C7120) * C5967 +
           (C7121 + C7122 + C7123) * C141341) *
              C141353 * C5322 -
          ((C10831 + C10832 + C10833) * C141341 +
           (C10834 + C10835 + C10836) * C5967 +
           (C5873 * C1688 + C5865 * C1876 + C5871 * C1689 + C5864 * C1877 +
            C5869 * C1690 + C5863 * C1878) *
               C141478 +
           (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 + C5864 * C1605 +
            C5869 * C1601 + C5863 * C1606) *
               C5966) *
              C141353 * C5323 +
          ((C5869 * C5325 + C5863 * C5329 + C5871 * C5326 + C5864 * C5330 +
            C5873 * C5327 + C5865 * C5331) *
               C5966 +
           (C5869 * C5391 + C5863 * C5507 + C5871 * C5392 + C5864 * C5508 +
            C5873 * C5393 + C5865 * C5509) *
               C141478 +
           (C5869 * C13205 + C5863 * C13208 + C5871 * C13206 + C5864 * C13209 +
            C5873 * C13207 + C5865 * C13210) *
               C5967 +
           (C5869 * C13294 + C5863 * C13454 + C5871 * C13295 + C5864 * C13455 +
            C5873 * C13296 + C5865 * C13456) *
               C141341) *
              C141353 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C5966 +
            (C29775 * C189 + C141219 * C362) * C141478 + C30547 * C5967 +
            C30548 * C141341) *
               C42873 +
           (C52740 + C52741 + C52742 + C52743) * C42874 + C58031 * C42875) *
              C5322 -
          ((C58022 + C58023 + C58032 + C58033) * C42875 +
           (C52747 + C52746 + C52745 + C52744) * C42874 +
           (C52743 + C52742 + C52741 + C52740) * C42873) *
              C5323 +
          (C58031 * C42873 + (C58033 + C58032 + C58023 + C58022) * C42874 +
           ((C29775 * C49989 + C141219 * C49991) * C5966 +
            (C29775 * C50082 + C141219 * C50251) * C141478 +
            (C29775 * C57766 + C141219 * C57767) * C5967 +
            (C29775 * C57850 + C141219 * C58019) * C141341) *
               C42875) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[71] += (-std::pow(Pi, 2.5) *
                   ((C29992 * C108 + C29997 + C29997 + C29770 * C419 +
                     C29993 * C823 + C29998 + C29998 + C29771 * C1171 +
                     C29994 * C2960 + C29999 + C29999 + C29772 * C3196 +
                     C29995 * C9667 + C30000 + C30000 + C29773 * C10035) *
                        C141219 * C141353 * C5322 -
                    (C29995 * C26351 + C31265 + C31265 + C29773 * C26819 +
                     C29994 * C10470 + C31266 + C31266 + C29772 * C10934 +
                     C29993 * C3490 + C31267 + C31267 + C29771 * C3790 +
                     C29992 * C1601 + C31268 + C31268 + C29770 * C1949) *
                        C141219 * C141353 * C5323 +
                    (C29992 * C5325 + C34772 + C34772 + C29770 * C5561 +
                     C29993 * C13205 + C34773 + C34773 + C29771 * C13531 +
                     C29994 * C29087 + C34774 + C34774 + C29772 * C29405 +
                     C29995 * C34558 + C34775 + C34775 + C29773 * C34770) *
                        C141219 * C141353 * C5324) *
                   C141281 * C141247) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                      C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                         C5863 +
                     (C6265 + C6266) * C5864 + C6271 * C5865) *
                        C141353 * C5322 -
                    ((C8276 + C8277) * C5865 + (C8278 + C8279) * C5864 +
                     (C6229 * C3490 + C8264 + C8264 + C141341 * C3790 +
                      C6228 * C1601 + C8265 + C8265 + C141478 * C1949) *
                         C5863) *
                        C141353 * C5323 +
                    ((C6228 * C5325 + C13535 + C13535 + C141478 * C5561 +
                      C6229 * C13205 + C13536 + C13536 + C141341 * C13531) *
                         C5863 +
                     (C6228 * C5326 + C13537 + C13537 + C141478 * C5562 +
                      C6229 * C13206 + C13538 + C13538 + C141341 * C13532) *
                         C5864 +
                     (C6228 * C5327 + C13539 + C13539 + C141478 * C5563 +
                      C6229 * C13207 + C13540 + C13540 + C141341 * C13533) *
                         C5865) *
                        C141353 * C5324) *
                   C141281 * C141247) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                      C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                         C141219 * C42873 +
                     (C52888 + C52889) * C141219 * C42874 + C58116 * C42875) *
                        C5322 -
                    ((C58121 + C58122) * C141219 * C42875 +
                     (C52891 + C52890) * C141219 * C42874 +
                     (C52889 + C52888) * C141219 * C42873) *
                        C5323 +
                    (C58116 * C42873 + (C58122 + C58121) * C141219 * C42874 +
                     (C6228 * C49989 + C58114 + C58114 + C141478 * C50344 +
                      C6229 * C57766 + C58115 + C58115 + C141341 * C58107) *
                         C141219 * C42875) *
                        C5324) *
                   C141281 * C141247) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[71] += (-std::pow(Pi, 2.5) *
                   (((C275 * C108 + C141353 * C276) * C29838 +
                     (C275 * C189 + C141353 * C501) * C29770 + C6988 * C29839 +
                     C7366 * C29771 + C9864 * C29840 + C10124 * C29772 +
                     C25754 * C29841 + C26008 * C29773) *
                        C141219 * C5322 -
                    (C33098 * C29773 + C32870 * C29841 + C26930 * C29772 +
                     C26595 * C29840 + C11047 * C29771 + C10715 * C29839 +
                     (C275 * C1690 + C141353 * C2040) * C29770 +
                     (C275 * C1601 + C141353 * C1784) * C29838) *
                        C141219 * C5323 +
                    ((C275 * C5325 + C141353 * C5449) * C29838 +
                     (C275 * C5391 + C141353 * C5619) * C29770 +
                     (C275 * C13205 + C141353 * C13374) * C29839 +
                     (C275 * C13294 + C141353 * C13614) * C29771 +
                     (C275 * C29087 + C141353 * C29251) * C29840 +
                     (C275 * C29173 + C141353 * C29487) * C29772 +
                     (C275 * C34558 + C141353 * C34667) * C29841 +
                     (C275 * C34615 + C141353 * C34825) * C29773) *
                        C141219 * C5324) *
                   C141281 * C141247) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C275 * C108 + C141353 * C276) * C5966 +
                      (C275 * C189 + C141353 * C501) * C141478 + C6988 * C5967 +
                      C7366 * C141341) *
                         C5863 +
                     (C6346 + C6347 + C6348 + C6349) * C5864 + C6360 * C5865) *
                        C5322 -
                    ((C8390 + C8380 + C8381 + C8382) * C5865 +
                     (C8391 + C8385 + C8386 + C8387) * C5864 +
                     (C11047 * C141341 + C10715 * C5967 +
                      (C275 * C1690 + C141353 * C2040) * C141478 +
                      (C275 * C1601 + C141353 * C1784) * C5966) *
                         C5863) *
                        C5323 +
                    (((C275 * C5325 + C141353 * C5449) * C5966 +
                      (C275 * C5391 + C141353 * C5619) * C141478 +
                      (C275 * C13205 + C141353 * C13374) * C5967 +
                      (C275 * C13294 + C141353 * C13614) * C141341) *
                         C5863 +
                     ((C275 * C5326 + C141353 * C5450) * C5966 +
                      (C275 * C5392 + C141353 * C5620) * C141478 +
                      (C275 * C13206 + C141353 * C13375) * C5967 +
                      (C275 * C13295 + C141353 * C13615) * C141341) *
                         C5864 +
                     ((C275 * C5327 + C141353 * C5451) * C5966 +
                      (C275 * C5393 + C141353 * C5621) * C141478 +
                      (C275 * C13207 + C141353 * C13376) * C5967 +
                      (C275 * C13296 + C141353 * C13616) * C141341) *
                         C5865) *
                        C5324) *
                   C141281 * C141247) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C43030 * C108 + C42873 * C276 + C43031 * C1601 +
                      C42874 * C1784 + C43032 * C5325 + C42875 * C5449) *
                         C5966 +
                     (C43030 * C189 + C42873 * C501 + C43031 * C1690 +
                      C42874 * C2040 + C43032 * C5391 + C42875 * C5619) *
                         C141478 +
                     (C51662 + C51663 + C51664) * C5967 +
                     (C51978 + C51979 + C51980) * C141341) *
                        C141219 * C5322 -
                    ((C55593 + C55594 + C55595) * C141341 +
                     (C55254 + C55255 + C55256) * C5967 +
                     (C43032 * C21136 + C42875 * C21491 + C43031 * C5391 +
                      C42874 * C5619 + C43030 * C1690 + C42873 * C2040) *
                         C141478 +
                     (C43032 * C21035 + C42875 * C21228 + C43031 * C5325 +
                      C42874 * C5449 + C43030 * C1601 + C42873 * C1784) *
                         C5966) *
                        C141219 * C5323 +
                    ((C43030 * C5325 + C42873 * C5449 + C43031 * C21035 +
                      C42874 * C21228 + C43032 * C49989 + C42875 * C50173) *
                         C5966 +
                     (C43030 * C5391 + C42873 * C5619 + C43031 * C21136 +
                      C42874 * C21491 + C43032 * C50082 + C42875 * C50430) *
                         C141478 +
                     (C43030 * C13205 + C42873 * C13374 + C43031 * C42109 +
                      C42874 * C42293 + C43032 * C57766 + C42875 * C57943) *
                         C5967 +
                     (C43030 * C13294 + C42873 * C13614 + C43031 * C42197 +
                      C42874 * C42553 + C43032 * C57850 + C42875 * C58196) *
                         C141341) *
                        C141219 * C5324) *
                   C141281 * C141247) /
                      (p * q * std::sqrt(p + q));
    d2eezx[71] +=
        (-std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C275 +
            (C29775 * C276 + C141219 * C579) * C141353) *
               C29770 +
           (C30765 + C30789) * C29771 + C32522 * C29772 + C32523 * C29773) *
              C5322 -
          ((C33178 + C33168) * C29773 + (C33179 + C33171) * C29772 +
           (C33180 + C33174) * C29771 +
           ((C29775 * C1784 + C141219 * C2126) * C141353 +
            (C29775 * C1601 + C141219 * C1606) * C275) *
               C29770) *
              C5323 +
          (((C29775 * C5325 + C141219 * C5329) * C275 +
            (C29775 * C5449 + C141219 * C5673) * C141353) *
               C29770 +
           ((C29775 * C13205 + C141219 * C13208) * C275 +
            (C29775 * C13374 + C141219 * C13691) * C141353) *
               C29771 +
           ((C29775 * C29087 + C141219 * C29089) * C275 +
            (C29775 * C29251 + C141219 * C29563) * C141353) *
               C29772 +
           ((C29775 * C34558 + C141219 * C34559) * C275 +
            (C29775 * C34667 + C141219 * C34876) * C141353) *
               C29773) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
             C5873 * C110 + C5865 * C116) *
                C275 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
             C5873 * C278 + C5865 * C581) *
                C141353) *
               C141478 +
           ((C7118 + C7119 + C7120) * C275 +
            (C7481 + C7482 + C7483) * C141353) *
               C141341) *
              C5322 -
          (((C11155 + C11156 + C11157) * C141353 +
            (C10834 + C10835 + C10836) * C275) *
               C141341 +
           ((C5873 * C1782 + C5865 * C2124 + C5871 * C1783 + C5864 * C2125 +
             C5869 * C1784 + C5863 * C2126) *
                C141353 +
            (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 + C5864 * C1605 +
             C5869 * C1601 + C5863 * C1606) *
                C275) *
               C141478) *
              C5323 +
          (((C5869 * C5325 + C5863 * C5329 + C5871 * C5326 + C5864 * C5330 +
             C5873 * C5327 + C5865 * C5331) *
                C275 +
            (C5869 * C5449 + C5863 * C5673 + C5871 * C5450 + C5864 * C5674 +
             C5873 * C5451 + C5865 * C5675) *
                C141353) *
               C141478 +
           ((C5869 * C13205 + C5863 * C13208 + C5871 * C13206 + C5864 * C13209 +
             C5873 * C13207 + C5865 * C13210) *
                C275 +
            (C5869 * C13374 + C5863 * C13691 + C5871 * C13375 + C5864 * C13692 +
             C5873 * C13376 + C5865 * C13693) *
                C141353) *
               C141341) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C43030 +
            (C29775 * C276 + C141219 * C579) * C42873 + C37111 * C43031 +
            C37432 * C42874 + C42383 * C43032 + C42634 * C42875) *
               C141478 +
           (C52079 + C52080 + C52081 + C52082 + C52083 + C52084) * C141341) *
              C5322 -
          ((C55702 + C55696 + C55697 + C55698 + C55699 + C55700) * C141341 +
           (C58275 * C42875 + C58030 * C43032 + C42634 * C42874 +
            C42383 * C43031 + C37432 * C42873 + C37111 * C43030) *
               C141478) *
              C5323 +
          ((C42383 * C43030 + C42634 * C42873 + C58030 * C43031 +
            C58275 * C42874 + (C29775 * C49989 + C141219 * C49991) * C43032 +
            (C29775 * C50173 + C141219 * C50506) * C42875) *
               C141478 +
           (C39706 * C43030 + C40042 * C42873 + C55368 * C43031 +
            C55701 * C42874 + (C29775 * C57766 + C141219 * C57767) * C43032 +
            (C29775 * C57943 + C141219 * C58271) * C42875) *
               C141341) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[71] +=
        (-std::pow(Pi, 2.5) *
         (((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
            C29840 * C2960 + C29772 * C3026 + C29841 * C9667 + C29773 * C9768) *
               C275 +
           (C29838 * C276 + C29770 * C635 + C29839 * C1006 + C29771 * C1419 +
            C29840 * C3084 + C29772 * C3362 + C29841 * C9848 +
            C29773 * C10284) *
               C141353) *
              C141219 * C5322 -
          ((C29841 * C26579 + C29773 * C27140 + C29840 * C10699 +
            C29772 * C11255 + C29839 * C3646 + C29771 * C4004 + C29838 * C1784 +
            C29770 * C2197) *
               C141353 +
           (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
            C29772 * C10595 + C29839 * C3490 + C29771 * C3572 + C29838 * C1601 +
            C29770 * C1690) *
               C275) *
              C141219 * C5323 +
          ((C29838 * C5325 + C29770 * C5391 + C29839 * C13205 +
            C29771 * C13294 + C29840 * C29087 + C29772 * C29173 +
            C29841 * C34558 + C29773 * C34615) *
               C275 +
           (C29838 * C5449 + C29770 * C5727 + C29839 * C13374 +
            C29771 * C13768 + C29840 * C29251 + C29772 * C29639 +
            C29841 * C34667 + C29773 * C34927) *
               C141353) *
              C141219 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C275 +
            (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                C141353) *
               C5863 +
           ((C5993 + C5994) * C275 + (C6522 + C6523) * C141353) * C5864 +
           C6530 * C5865) *
              C5322 -
          (((C8596 + C8597) * C141353 + (C7940 + C7941) * C275) * C5865 +
           ((C8598 + C8599) * C141353 + (C7944 + C7945) * C275) * C5864 +
           ((C5967 * C3646 + C141341 * C4004 + C5966 * C1784 +
             C141478 * C2197) *
                C141353 +
            (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 +
             C141478 * C1690) *
                C275) *
               C5863) *
              C5323 +
          (((C5966 * C5325 + C141478 * C5391 + C5967 * C13205 +
             C141341 * C13294) *
                C275 +
            (C5966 * C5449 + C141478 * C5727 + C5967 * C13374 +
             C141341 * C13768) *
                C141353) *
               C5863 +
           ((C5966 * C5326 + C141478 * C5392 + C5967 * C13206 +
             C141341 * C13295) *
                C275 +
            (C5966 * C5450 + C141478 * C5728 + C5967 * C13375 +
             C141341 * C13769) *
                C141353) *
               C5864 +
           ((C5966 * C5327 + C141478 * C5393 + C5967 * C13207 +
             C141341 * C13296) *
                C275 +
            (C5966 * C5451 + C141478 * C5729 + C5967 * C13376 +
             C141341 * C13770) *
                C141353) *
               C5865) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
               C43030 +
           (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
               C42873 +
           (C52532 + C52533) * C43031 + (C53203 + C53204) * C42874 +
           C57853 * C43032 + C58351 * C42875) *
              C141219 * C5322 -
          ((C58356 + C58357) * C42875 + (C57867 + C57868) * C43032 +
           (C53206 + C53205) * C42874 + (C52537 + C52536) * C43031 +
           (C53204 + C53203) * C42873 + (C52533 + C52532) * C43030) *
              C141219 * C5323 +
          (C57853 * C43030 + C58351 * C42873 + (C57868 + C57867) * C43031 +
           (C58357 + C58356) * C42874 +
           (C5966 * C49989 + C141478 * C50082 + C5967 * C57766 +
            C141341 * C57850) *
               C43032 +
           (C5966 * C50173 + C141478 * C50589 + C5967 * C57943 +
            C141341 * C58349) *
               C42875) *
              C141219 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[71] +=
        (-std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141353 * C714) * C29770 +
           C7709 * C29771 + C10372 * C29772 + C26253 * C29773) *
              C141219 * C5322 -
          (C33320 * C29773 + C27249 * C29772 + C11367 * C29771 +
           (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C29770) *
              C141219 * C5323 +
          ((C713 * C5325 + C5786 + C5786 + C141353 * C5781) * C29770 +
           (C713 * C13205 + C13849 + C13849 + C141353 * C13845) * C29771 +
           (C713 * C29087 + C29718 + C29718 + C141353 * C29715) * C29772 +
           (C713 * C34558 + C34980 + C34980 + C141353 * C34978) * C29773) *
              C141219 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141478 +
            C7709 * C141341) *
               C5863 +
           (C6605 + C6606) * C5864 + C6611 * C5865) *
              C5322 -
          ((C8710 + C8700) * C5865 + (C8711 + C8703) * C5864 +
           (C11367 * C141341 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141478) *
               C5863) *
              C5323 +
          (((C713 * C5325 + C5786 + C5786 + C141353 * C5781) * C141478 +
            (C713 * C13205 + C13849 + C13849 + C141353 * C13845) * C141341) *
               C5863 +
           ((C713 * C5326 + C5787 + C5787 + C141353 * C5782) * C141478 +
            (C713 * C13206 + C13850 + C13850 + C141353 * C13846) * C141341) *
               C5864 +
           ((C713 * C5327 + C5788 + C5788 + C141353 * C5783) * C141478 +
            (C713 * C13207 + C13851 + C13851 + C141353 * C13847) * C141341) *
               C5865) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C43543 * C108 + C43547 + C43547 + C42873 * C714 + C43544 * C1601 +
            C43548 + C43548 + C42874 * C2283 + C43545 * C5325 + C43549 +
            C43549 + C42875 * C5781) *
               C141478 +
           (C52302 + C52303 + C52304) * C141341) *
              C141219 * C5322 -
          ((C55926 + C55927 + C55928) * C141341 +
           (C43545 * C21035 + C45622 + C45622 + C42875 * C21734 +
            C43544 * C5325 + C45623 + C45623 + C42874 * C5781 + C43543 * C1601 +
            C45624 + C45624 + C42873 * C2283) *
               C141478) *
              C141219 * C5323 +
          ((C43543 * C5325 + C50671 + C50671 + C42873 * C5781 +
            C43544 * C21035 + C50672 + C50672 + C42874 * C21734 +
            C43545 * C49989 + C50673 + C50673 + C42875 * C50668) *
               C141478 +
           (C43543 * C13205 + C58433 + C58433 + C42873 * C13845 +
            C43544 * C42109 + C58434 + C58434 + C42874 * C42793 +
            C43545 * C57766 + C58435 + C58435 + C42875 * C58431) *
               C141341) *
              C141219 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eexx[72] +=
        (-std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141479 +
            (C29774 * C1601 + C30996 + C30996 + C141219 * C1611) * C141365) *
               C21819 +
           (C30301 * C141479 + C32721 * C141365) * C21820 +
           (C30302 * C141479 + C32720 * C141365) * C21821) *
              C141298 * C141281 * C97 -
          (((C29774 * C10471 + C30999 + C30999 + C141219 * C10477) * C141365 +
            C30305 * C141479) *
               C21821 +
           ((C29774 * C3491 + C30998 + C30998 + C141219 * C3499) * C141365 +
            C30304 * C141479) *
               C21820 +
           ((C29774 * C1600 + C30997 + C30997 + C141219 * C1610) * C141365 +
            (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141479) *
               C21819) *
              C141298 * C141281 * C98 +
          (((C29774 * C110 + C29785 + C29785 + C141219 * C122) * C141479 +
            (C29774 * C1599 + C35055 + C35055 + C141219 * C1609) * C141365) *
               C21819 +
           ((C29774 * C821 + C29786 + C29786 + C141219 * C831) * C141479 +
            (C29774 * C3492 + C35056 + C35056 + C141219 * C3500) * C141365) *
               C21820 +
           ((C29774 * C2962 + C29787 + C29787 + C141219 * C2970) * C141479 +
            (C29774 * C10472 + C35057 + C35057 + C141219 * C10478) * C141365) *
               C21821) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 + C5876 +
            C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
            C5865 * C122) *
               C141479 +
           (C5868 * C1601 + C7817 + C7817 + C5863 * C1611 + C5870 * C1600 +
            C7816 + C7816 + C5864 * C1610 + C5872 * C1599 + C7815 + C7815 +
            C5865 * C1609) *
               C141365) *
              C141327 * C141298 * C141281 * C97 -
          ((C5872 * C1598 + C7820 + C7820 + C5865 * C1608 + C5870 * C1599 +
            C7819 + C7819 + C5864 * C1609 + C5868 * C1600 + C7818 + C7818 +
            C5863 * C1610) *
               C141365 +
           (C5872 * C111 + C5884 + C5884 + C5865 * C123 + C5870 * C110 + C5885 +
            C5885 + C5864 * C122 + C5868 * C109 + C5886 + C5886 +
            C5863 * C121) *
               C141479) *
              C141327 * C141298 * C141281 * C98 +
          ((C5868 * C110 + C5887 + C5887 + C5863 * C122 + C5870 * C111 + C5888 +
            C5888 + C5864 * C123 + C5872 * C112 + C5889 + C5889 +
            C5865 * C124) *
               C141479 +
           (C5868 * C1599 + C13928 + C13928 + C5863 * C1609 + C5870 * C1598 +
            C13929 + C13929 + C5864 * C1608 + C5872 * C1602 + C13930 + C13930 +
            C5865 * C1612) *
               C141365) *
              C141327 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C58485 +
           C36781 * C58486 + C42123 * C58487 + C57776 * C58488) *
              C141327 * C141298 * C141281 * C97 -
          ((C29774 * C21036 + C52405 + C52405 + C141219 * C21042) * C58488 +
           C52409 * C58487 + C36782 * C58486 +
           (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C58485) *
              C141327 * C141298 * C141281 * C98 +
          ((C29774 * C110 + C29785 + C29785 + C141219 * C122) * C58485 +
           (C29774 * C1599 + C35055 + C35055 + C141219 * C1609) * C58486 +
           (C29774 * C5327 + C50751 + C50751 + C141219 * C5335) * C58487 +
           (C29774 * C21037 + C58490 + C58490 + C141219 * C21043) * C58488) *
              C141327 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexy[72] += (-std::pow(Pi, 2.5) *
                   ((((C21918 * C108 + C21819 * C189 + C21919 * C823 +
                       C21820 * C912 + C21920 * C2960 + C21821 * C3026) *
                          C29775 +
                      (C21918 * C114 + C21819 * C195 + C21919 * C828 +
                       C21820 * C917 + C21920 * C2964 + C21821 * C3030) *
                          C141219) *
                         C141479 +
                     ((C21918 * C1601 + C21819 * C1690 + C21919 * C3490 +
                       C21820 * C3572 + C21920 * C10470 + C21821 * C10595) *
                          C29775 +
                      (C21918 * C1606 + C21819 * C1695 + C21919 * C3494 +
                       C21820 * C3576 + C21920 * C10473 + C21821 * C10598) *
                          C141219) *
                         C141365) *
                        C141298 * C141281 * C97 -
                    (((C23865 + C23866 + C23867) * C141219 +
                      (C23868 + C23869 + C23870) * C29775) *
                         C141365 +
                     ((C21951 + C21950 + C21949) * C141219 +
                      (C21948 + C21947 + C21946) * C29775) *
                         C141479) *
                        C141298 * C141281 * C98 +
                    (((C21957 + C21956 + C21955) * C29775 +
                      (C21954 + C21953 + C21952) * C141219) *
                         C141479 +
                     ((C21918 * C1599 + C21819 * C1688 + C21919 * C3492 +
                       C21820 * C3574 + C21920 * C10472 + C21821 * C10597) *
                          C29775 +
                      (C21918 * C1604 + C21819 * C1693 + C21919 * C3496 +
                       C21820 * C3578 + C21920 * C10475 + C21821 * C10600) *
                          C141219) *
                         C141365) *
                        C141298 * C141281 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C188 * C108 + C141327 * C189) * C5869 +
                      (C188 * C114 + C141327 * C195) * C5863 + C218 * C5871 +
                      C219 * C5864 + C220 * C5873 + C221 * C5865) *
                         C141479 +
                     ((C188 * C1601 + C141327 * C1690) * C5869 +
                      (C188 * C1606 + C141327 * C1695) * C5863 + C1715 * C5871 +
                      C1714 * C5864 + C1713 * C5873 + C1712 * C5865) *
                         C141365) *
                        C141298 * C141281 * C97 -
                    ((C1710 * C5865 + C1711 * C5873 + C1712 * C5864 +
                      C1713 * C5871 + C1714 * C5863 + C1715 * C5869) *
                         C141365 +
                     (C223 * C5865 + C222 * C5873 + C221 * C5864 +
                      C220 * C5871 + C219 * C5863 + C218 * C5869) *
                         C141479) *
                        C141298 * C141281 * C98 +
                    ((C220 * C5869 + C221 * C5863 + C222 * C5871 +
                      C223 * C5864 + C225 * C5873 + C224 * C5865) *
                         C141479 +
                     (C1713 * C5869 + C1712 * C5863 + C1711 * C5871 +
                      C1710 * C5864 + (C188 * C1602 + C141327 * C1691) * C5873 +
                      (C188 * C1607 + C141327 * C1696) * C5865) *
                         C141365) *
                        C141298 * C141281 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C188 * C108 + C141327 * C189) * C29775 +
                      (C188 * C114 + C141327 * C195) * C141219) *
                         C58485 +
                     (C15877 * C29775 + C15878 * C141219) * C58486 +
                     (C21152 * C29775 + C21151 * C141219) * C58487 +
                     (C50096 * C29775 + C50095 * C141219) * C58488) *
                        C141298 * C141281 * C97 -
                    ((C44804 * C141219 + C44805 * C29775) * C58488 +
                     (C15881 * C141219 + C15882 * C29775) * C58487 +
                     (C1714 * C141219 + C1715 * C29775) * C58486 +
                     (C219 * C141219 + C218 * C29775) * C58485) *
                        C141298 * C141281 * C98 +
                    ((C220 * C29775 + C221 * C141219) * C58485 +
                     (C1713 * C29775 + C1712 * C141219) * C58486 +
                     (C15880 * C29775 + C15879 * C141219) * C58487 +
                     ((C188 * C21037 + C141327 * C21138) * C29775 +
                      (C188 * C21040 + C141327 * C21141) * C141219) *
                         C58488) *
                        C141298 * C141281 * C99)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[72] +=
        (-std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C29775 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C141219) *
               C21819 +
           ((C14078 * C823 + C141479 * C1006 + C14079 * C3490 +
             C141365 * C3646) *
                C29775 +
            (C14078 * C828 + C141479 * C1011 + C14079 * C3494 +
             C141365 * C3650) *
                C141219) *
               C21820 +
           ((C14078 * C2960 + C141479 * C3084 + C14079 * C10470 +
             C141365 * C10699) *
                C29775 +
            (C14078 * C2964 + C141479 * C3088 + C14079 * C10473 +
             C141365 * C10702) *
                C141219) *
               C21821) *
              C141298 * C141281 * C97 -
          (((C14079 * C10474 + C141365 * C10703 + C14078 * C2965 +
             C141479 * C3089) *
                C141219 +
            (C14079 * C10471 + C141365 * C10700 + C14078 * C2961 +
             C141479 * C3085) *
                C29775) *
               C21821 +
           ((C14970 + C14971) * C141219 + (C14972 + C14973) * C29775) * C21820 +
           ((C14108 + C14107) * C141219 + (C14106 + C14105) * C29775) *
               C21819) *
              C141298 * C141281 * C98 +
          ((C14117 * C29775 + C14118 * C141219) * C21819 +
           ((C14969 + C14968) * C29775 + (C14967 + C14966) * C141219) * C21820 +
           ((C14078 * C2962 + C141479 * C3086 + C14079 * C10472 +
             C141365 * C10701) *
                C29775 +
            (C14078 * C2966 + C141479 * C3090 + C14079 * C10475 +
             C141365 * C10704) *
                C141219) *
               C21821) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C14078 * C108 + C141479 * C276 + C14079 * C1601 + C141365 * C1784) *
               C5869 +
           (C14078 * C114 + C141479 * C282 + C14079 * C1606 + C141365 * C1789) *
               C5863 +
           (C14105 + C14106) * C5871 + (C14107 + C14108) * C5864 +
           C14117 * C5873 + C14118 * C5865) *
              C141327 * C141298 * C141281 * C97 -
          ((C14113 + C14114) * C5865 + (C14115 + C14116) * C5873 +
           (C14112 + C14111) * C5864 + (C14110 + C14109) * C5871 +
           (C14108 + C14107) * C5863 + (C14106 + C14105) * C5869) *
              C141327 * C141298 * C141281 * C98 +
          (C14117 * C5869 + C14118 * C5863 + (C14116 + C14115) * C5871 +
           (C14114 + C14113) * C5864 +
           (C14078 * C112 + C141479 * C280 + C14079 * C1602 + C141365 * C1785) *
               C5873 +
           (C14078 * C118 + C141479 * C286 + C14079 * C1607 + C141365 * C1790) *
               C5865) *
              C141327 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C58590 * C108 + C58485 * C276 + C58591 * C1601 + C58486 * C1784 +
            C58592 * C5325 + C58487 * C5449 + C58593 * C21035 +
            C58488 * C21228) *
               C29775 +
           (C58590 * C114 + C58485 * C282 + C58591 * C1606 + C58486 * C1789 +
            C58592 * C5329 + C58487 * C5453 + C58593 * C21038 +
            C58488 * C21231) *
               C141219) *
              C141327 * C141298 * C141281 * C97 -
          ((C58593 * C21039 + C58488 * C21232 + C58592 * C5330 +
            C58487 * C5454 + C58591 * C1605 + C58486 * C1788 + C58590 * C115 +
            C58485 * C283) *
               C141219 +
           (C58593 * C21036 + C58488 * C21229 + C58592 * C5326 +
            C58487 * C5450 + C58591 * C1600 + C58486 * C1783 + C58590 * C109 +
            C58485 * C277) *
               C29775) *
              C141327 * C141298 * C141281 * C98 +
          ((C58590 * C110 + C58485 * C278 + C58591 * C1599 + C58486 * C1782 +
            C58592 * C5327 + C58487 * C5451 + C58593 * C21037 +
            C58488 * C21230) *
               C29775 +
           (C58590 * C116 + C58485 * C284 + C58591 * C1604 + C58486 * C1787 +
            C58592 * C5331 + C58487 * C5455 + C58593 * C21040 +
            C58488 * C21233) *
               C141219) *
              C141327 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[72] +=
        (-std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C21918 +
            (C29775 * C189 + C141219 * C362) * C21819 + C30547 * C21919 +
            C30548 * C21820 + C30549 * C21920 + C30550 * C21821) *
               C141479 +
           ((C29775 * C1601 + C141219 * C1606) * C21918 +
            (C29775 * C1690 + C141219 * C1878) * C21819 + C32957 * C21919 +
            C32956 * C21820 + C32955 * C21920 + C32954 * C21821) *
               C141365) *
              C141298 * C141281 * C97 -
          (((C29775 * C10596 + C141219 * C10816) * C21821 +
            (C29775 * C10471 + C141219 * C10474) * C21920 +
            (C29775 * C3573 + C141219 * C3721) * C21820 +
            (C29775 * C3491 + C141219 * C3495) * C21919 +
            (C29775 * C1689 + C141219 * C1877) * C21819 +
            (C29775 * C1600 + C141219 * C1605) * C21918) *
               C141365 +
           (C30556 * C21821 + C30555 * C21920 + C30554 * C21820 +
            C30553 * C21919 + (C29775 * C190 + C141219 * C363) * C21819 +
            (C29775 * C109 + C141219 * C115) * C21918) *
               C141479) *
              C141298 * C141281 * C98 +
          (((C29775 * C110 + C141219 * C116) * C21918 +
            (C29775 * C191 + C141219 * C364) * C21819 +
            (C29775 * C821 + C141219 * C826) * C21919 +
            (C29775 * C910 + C141219 * C1098) * C21820 +
            (C29775 * C2962 + C141219 * C2966) * C21920 +
            (C29775 * C3028 + C141219 * C3144) * C21821) *
               C141479 +
           ((C29775 * C1599 + C141219 * C1604) * C21918 +
            (C29775 * C1688 + C141219 * C1876) * C21819 +
            (C29775 * C3492 + C141219 * C3496) * C21919 +
            (C29775 * C3574 + C141219 * C3722) * C21820 +
            (C29775 * C10472 + C141219 * C10475) * C21920 +
            (C29775 * C10597 + C141219 * C10817) * C21821) *
               C141365) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
             C5873 * C110 + C5865 * C116) *
                C188 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
             C5873 * C191 + C5865 * C364) *
                C141327) *
               C141479 +
           ((C5869 * C1601 + C5863 * C1606 + C5871 * C1600 + C5864 * C1605 +
             C5873 * C1599 + C5865 * C1604) *
                C188 +
            (C5869 * C1690 + C5863 * C1878 + C5871 * C1689 + C5864 * C1877 +
             C5873 * C1688 + C5865 * C1876) *
                C141327) *
               C141365) *
              C141298 * C141281 * C97 -
          (((C5873 * C1687 + C5865 * C1875 + C5871 * C1688 + C5864 * C1876 +
             C5869 * C1689 + C5863 * C1877) *
                C141327 +
            (C5873 * C1598 + C5865 * C1603 + C5871 * C1599 + C5864 * C1604 +
             C5869 * C1600 + C5863 * C1605) *
                C188) *
               C141365 +
           ((C5873 * C192 + C5865 * C365 + C5871 * C191 + C5864 * C364 +
             C5869 * C190 + C5863 * C363) *
                C141327 +
            (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
             C5869 * C109 + C5863 * C115) *
                C188) *
               C141479) *
              C141298 * C141281 * C98 +
          (((C5869 * C110 + C5863 * C116 + C5871 * C111 + C5864 * C117 +
             C5873 * C112 + C5865 * C118) *
                C188 +
            (C5869 * C191 + C5863 * C364 + C5871 * C192 + C5864 * C365 +
             C5873 * C193 + C5865 * C366) *
                C141327) *
               C141479 +
           ((C5869 * C1599 + C5863 * C1604 + C5871 * C1598 + C5864 * C1603 +
             C5873 * C1602 + C5865 * C1607) *
                C188 +
            (C5869 * C1688 + C5863 * C1876 + C5871 * C1687 + C5864 * C1875 +
             C5873 * C1691 + C5865 * C1879) *
                C141327) *
               C141365) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C188 +
            (C29775 * C189 + C141219 * C362) * C141327) *
               C58485 +
           (C37111 * C188 + C37112 * C141327) * C58486 +
           (C42383 * C188 + C42382 * C141327) * C58487 +
           (C58030 * C188 + C58029 * C141327) * C58488) *
              C141298 * C141281 * C97 -
          (((C29775 * C21137 + C141219 * C21309) * C141327 +
            (C29775 * C21036 + C141219 * C21039) * C188) *
               C58488 +
           (C52759 * C141327 + C52758 * C188) * C58487 +
           (C37114 * C141327 + C37113 * C188) * C58486 +
           ((C29775 * C190 + C141219 * C363) * C141327 +
            (C29775 * C109 + C141219 * C115) * C188) *
               C58485) *
              C141298 * C141281 * C98 +
          (((C29775 * C110 + C141219 * C116) * C188 +
            (C29775 * C191 + C141219 * C364) * C141327) *
               C58485 +
           ((C29775 * C1599 + C141219 * C1604) * C188 +
            (C29775 * C1688 + C141219 * C1876) * C141327) *
               C58486 +
           ((C29775 * C5327 + C141219 * C5331) * C188 +
            (C29775 * C5393 + C141219 * C5509) * C141327) *
               C58487 +
           ((C29775 * C21037 + C141219 * C21040) * C188 +
            (C29775 * C21138 + C141219 * C21310) * C141327) *
               C58488) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[72] +=
        (-std::pow(Pi, 2.5) *
         (((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
            C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
            C22185 + C21821 * C3196) *
               C141219 * C141479 +
           (C22179 * C1601 + C24182 + C24182 + C21819 * C1949 + C22180 * C3490 +
            C24181 + C24181 + C21820 * C3790 + C22181 * C10470 + C24180 +
            C24180 + C21821 * C10934) *
               C141219 * C141365) *
              C141298 * C141281 * C97 -
          ((C24192 + C24193 + C24194) * C141219 * C141365 +
           (C22221 + C22220 + C22219) * C141219 * C141479) *
              C141298 * C141281 * C98 +
          ((C22224 + C22223 + C22222) * C141219 * C141479 +
           (C22179 * C1599 + C24183 + C24183 + C21819 * C1947 + C22180 * C3492 +
            C24184 + C24184 + C21820 * C3792 + C22181 * C10472 + C24185 +
            C24185 + C21821 * C10936) *
               C141219 * C141365) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C5863 +
            C448 * C5864 + C449 * C5865) *
               C141479 +
           ((C418 * C1601 + C1961 + C1961 + C141327 * C1949) * C5863 +
            C1971 * C5864 + C1970 * C5865) *
               C141365) *
              C141298 * C141281 * C97 -
          ((C1969 * C5865 + C1970 * C5864 + C1971 * C5863) * C141365 +
           (C450 * C5865 + C449 * C5864 + C448 * C5863) * C141479) *
              C141298 * C141281 * C98 +
          ((C449 * C5863 + C450 * C5864 + C451 * C5865) * C141479 +
           (C1970 * C5863 + C1969 * C5864 +
            (C418 * C1602 + C1962 + C1962 + C141327 * C1950) * C5865) *
               C141365) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C141327 * C419) * C141219 * C58485 +
           C16256 * C141219 * C58486 + C21416 * C141219 * C58487 +
           C50355 * C141219 * C58488) *
              C141298 * C141281 * C97 -
          (C45178 * C141219 * C58488 + C16258 * C141219 * C58487 +
           C1971 * C141219 * C58486 + C448 * C141219 * C58485) *
              C141298 * C141281 * C98 +
          (C449 * C141219 * C58485 + C1970 * C141219 * C58486 +
           C16257 * C141219 * C58487 +
           (C418 * C21037 + C21413 + C21413 + C141327 * C21405) * C141219 *
               C58488) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[72] +=
        (-std::pow(Pi, 2.5) *
         (((C14078 * C108 + C141479 * C276 + C14079 * C1601 + C141365 * C1784) *
               C21918 +
           (C14078 * C189 + C141479 * C501 + C14079 * C1690 + C141365 * C2040) *
               C21819 +
           (C14078 * C823 + C141479 * C1006 + C14079 * C3490 +
            C141365 * C3646) *
               C21919 +
           (C14078 * C912 + C141479 * C1262 + C14079 * C3572 +
            C141365 * C3864) *
               C21820 +
           (C14078 * C2960 + C141479 * C3084 + C14079 * C10470 +
            C141365 * C10699) *
               C21920 +
           (C14078 * C3026 + C141479 * C3254 + C14079 * C10595 +
            C141365 * C11041) *
               C21821) *
              C141219 * C141298 * C141281 * C97 -
          ((C14079 * C10596 + C141365 * C11042 + C14078 * C3027 +
            C141479 * C3255) *
               C21821 +
           (C14079 * C10471 + C141365 * C10700 + C14078 * C2961 +
            C141479 * C3085) *
               C21920 +
           (C15288 + C15289) * C21820 + (C14972 + C14973) * C21919 +
           (C14355 + C14354) * C21819 + (C14106 + C14105) * C21918) *
              C141219 * C141298 * C141281 * C98 +
          (C14117 * C21918 + C14360 * C21819 + (C14969 + C14968) * C21919 +
           (C15287 + C15286) * C21820 +
           (C14078 * C2962 + C141479 * C3086 + C14079 * C10472 +
            C141365 * C10701) *
               C21920 +
           (C14078 * C3028 + C141479 * C3256 + C14079 * C10597 +
            C141365 * C11043) *
               C21821) *
              C141219 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C188 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C141327) *
               C5863 +
           ((C14105 + C14106) * C188 + (C14354 + C14355) * C141327) * C5864 +
           C14362 * C5865) *
              C141298 * C141281 * C97 -
          (((C14358 + C14359) * C141327 + (C14115 + C14116) * C188) * C5865 +
           ((C14357 + C14356) * C141327 + (C14110 + C14109) * C188) * C5864 +
           ((C14355 + C14354) * C141327 + (C14106 + C14105) * C188) * C5863) *
              C141298 * C141281 * C98 +
          (C14362 * C5863 +
           ((C14116 + C14115) * C188 + (C14359 + C14358) * C141327) * C5864 +
           ((C14078 * C112 + C141479 * C280 + C14079 * C1602 +
             C141365 * C1785) *
                C188 +
            (C14078 * C193 + C141479 * C505 + C14079 * C1691 +
             C141365 * C2041) *
                C141327) *
               C5865) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C58590 * C108 + C58485 * C276 + C58591 * C1601 + C58486 * C1784 +
            C58592 * C5325 + C58487 * C5449 + C58593 * C21035 +
            C58488 * C21228) *
               C188 +
           (C58590 * C189 + C58485 * C501 + C58591 * C1690 + C58486 * C2040 +
            C58592 * C5391 + C58487 * C5619 + C58593 * C21136 +
            C58488 * C21491) *
               C141327) *
              C141219 * C141298 * C141281 * C97 -
          ((C58593 * C21137 + C58488 * C21492 + C58592 * C5392 +
            C58487 * C5620 + C58591 * C1689 + C58486 * C2039 + C58590 * C190 +
            C58485 * C502) *
               C141327 +
           (C58593 * C21036 + C58488 * C21229 + C58592 * C5326 +
            C58487 * C5450 + C58591 * C1600 + C58486 * C1783 + C58590 * C109 +
            C58485 * C277) *
               C188) *
              C141219 * C141298 * C141281 * C98 +
          ((C58590 * C110 + C58485 * C278 + C58591 * C1599 + C58486 * C1782 +
            C58592 * C5327 + C58487 * C5451 + C58593 * C21037 +
            C58488 * C21230) *
               C188 +
           (C58590 * C191 + C58485 * C503 + C58591 * C1688 + C58486 * C2038 +
            C58592 * C5393 + C58487 * C5621 + C58593 * C21138 +
            C58488 * C21493) *
               C141327) *
              C141219 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezx[72] +=
        (-std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C14078 +
            (C29775 * C276 + C141219 * C579) * C141479 +
            (C29775 * C1601 + C141219 * C1606) * C14079 +
            (C29775 * C1784 + C141219 * C2126) * C141365) *
               C21819 +
           (C30547 * C14078 + C30783 * C141479 + C32957 * C14079 +
            C33177 * C141365) *
               C21820 +
           (C30549 * C14078 + C30784 * C141479 + C32955 * C14079 +
            C33176 * C141365) *
               C21821) *
              C141298 * C141281 * C97 -
          (((C29775 * C10700 + C141219 * C11146) * C141365 +
            (C29775 * C10471 + C141219 * C10474) * C14079 + C30787 * C141479 +
            C30555 * C14078) *
               C21821 +
           ((C29775 * C3647 + C141219 * C3935) * C141365 +
            (C29775 * C3491 + C141219 * C3495) * C14079 + C30786 * C141479 +
            C30553 * C14078) *
               C21820 +
           ((C29775 * C1783 + C141219 * C2125) * C141365 +
            (C29775 * C1600 + C141219 * C1605) * C14079 +
            (C29775 * C277 + C141219 * C580) * C141479 +
            (C29775 * C109 + C141219 * C115) * C14078) *
               C21819) *
              C141298 * C141281 * C98 +
          (((C29775 * C110 + C141219 * C116) * C14078 +
            (C29775 * C278 + C141219 * C581) * C141479 +
            (C29775 * C1599 + C141219 * C1604) * C14079 +
            (C29775 * C1782 + C141219 * C2124) * C141365) *
               C21819 +
           ((C29775 * C821 + C141219 * C826) * C14078 +
            (C29775 * C1004 + C141219 * C1346) * C141479 +
            (C29775 * C3492 + C141219 * C3496) * C14079 +
            (C29775 * C3648 + C141219 * C3936) * C141365) *
               C21820 +
           ((C29775 * C2962 + C141219 * C2966) * C14078 +
            (C29775 * C3086 + C141219 * C3310) * C141479 +
            (C29775 * C10472 + C141219 * C10475) * C14079 +
            (C29775 * C10701 + C141219 * C11147) * C141365) *
               C21821) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                                C5864 * C115 + C5873 * C110 + C5865 * C116) *
                                   C14078 +
                               (C5869 * C276 + C5863 * C579 + C5871 * C277 +
                                C5864 * C580 + C5873 * C278 + C5865 * C581) *
                                   C141479 +
                               (C5869 * C1601 + C5863 * C1606 + C5871 * C1600 +
                                C5864 * C1605 + C5873 * C1599 + C5865 * C1604) *
                                   C14079 +
                               (C5869 * C1784 + C5863 * C2126 + C5871 * C1783 +
                                C5864 * C2125 + C5873 * C1782 + C5865 * C2124) *
                                   C141365) *
                                  C141327 * C141298 * C141281 * C97 -
                              ((C5873 * C1781 + C5865 * C2123 + C5871 * C1782 +
                                C5864 * C2124 + C5869 * C1783 + C5863 * C2125) *
                                   C141365 +
                               (C5873 * C1598 + C5865 * C1603 + C5871 * C1599 +
                                C5864 * C1604 + C5869 * C1600 + C5863 * C1605) *
                                   C14079 +
                               (C5873 * C279 + C5865 * C582 + C5871 * C278 +
                                C5864 * C581 + C5869 * C277 + C5863 * C580) *
                                   C141479 +
                               (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                                C5864 * C116 + C5869 * C109 + C5863 * C115) *
                                   C14078) *
                                  C141327 * C141298 * C141281 * C98 +
                              ((C5869 * C110 + C5863 * C116 + C5871 * C111 +
                                C5864 * C117 + C5873 * C112 + C5865 * C118) *
                                   C14078 +
                               (C5869 * C278 + C5863 * C581 + C5871 * C279 +
                                C5864 * C582 + C5873 * C280 + C5865 * C583) *
                                   C141479 +
                               (C5869 * C1599 + C5863 * C1604 + C5871 * C1598 +
                                C5864 * C1603 + C5873 * C1602 + C5865 * C1607) *
                                   C14079 +
                               (C5869 * C1782 + C5863 * C2124 + C5871 * C1781 +
                                C5864 * C2123 + C5873 * C1785 + C5865 * C2127) *
                                   C141365) *
                                  C141327 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C29775 * C108 + C141219 * C114) * C58590 +
           (C29775 * C276 + C141219 * C579) * C58485 + C37111 * C58591 +
           C37432 * C58486 + C42383 * C58592 + C42634 * C58487 +
           C58030 * C58593 + C58275 * C58488) *
              C141327 * C141298 * C141281 * C97 -
          ((C29775 * C21229 + C141219 * C21569) * C58488 +
           (C29775 * C21036 + C141219 * C21039) * C58593 + C53092 * C58487 +
           C52758 * C58592 + C37433 * C58486 + C37113 * C58591 +
           (C29775 * C277 + C141219 * C580) * C58485 +
           (C29775 * C109 + C141219 * C115) * C58590) *
              C141327 * C141298 * C141281 * C98 +
          ((C29775 * C110 + C141219 * C116) * C58590 +
           (C29775 * C278 + C141219 * C581) * C58485 +
           (C29775 * C1599 + C141219 * C1604) * C58591 +
           (C29775 * C1782 + C141219 * C2124) * C58486 +
           (C29775 * C5327 + C141219 * C5331) * C58592 +
           (C29775 * C5451 + C141219 * C5675) * C58487 +
           (C29775 * C21037 + C141219 * C21040) * C58593 +
           (C29775 * C21230 + C141219 * C21570) * C58488) *
              C141327 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezy[72] +=
        (-std::pow(Pi, 2.5) *
         (((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
            C21920 * C2960 + C21821 * C3026) *
               C14078 +
           (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
            C21920 * C3084 + C21821 * C3362) *
               C141479 +
           (C21918 * C1601 + C21819 * C1690 + C21919 * C3490 + C21820 * C3572 +
            C21920 * C10470 + C21821 * C10595) *
               C14079 +
           (C21918 * C1784 + C21819 * C2197 + C21919 * C3646 + C21820 * C4004 +
            C21920 * C10699 + C21821 * C11255) *
               C141365) *
              C141219 * C141298 * C141281 * C97 -
          ((C24504 + C24505 + C24506) * C141365 +
           (C23868 + C23869 + C23870) * C14079 +
           (C22473 + C22472 + C22471) * C141479 +
           (C21948 + C21947 + C21946) * C14078) *
              C141219 * C141298 * C141281 * C98 +
          ((C21957 + C21956 + C21955) * C14078 +
           (C22476 + C22475 + C22474) * C141479 +
           (C21918 * C1599 + C21819 * C1688 + C21919 * C3492 + C21820 * C3574 +
            C21920 * C10472 + C21821 * C10597) *
               C14079 +
           (C21918 * C1782 + C21819 * C2195 + C21919 * C3648 + C21820 * C4006 +
            C21920 * C10701 + C21821 * C11257) *
               C141365) *
              C141219 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C14078 +
            (C188 * C276 + C141327 * C635) * C141479 +
            (C188 * C1601 + C141327 * C1690) * C14079 +
            (C188 * C1784 + C141327 * C2197) * C141365) *
               C5863 +
           (C14511 + C14512 + C14513 + C14514) * C5864 + C14525 * C5865) *
              C141298 * C141281 * C97 -
          ((C14519 + C14520 + C14521 + C14522) * C5865 +
           (C14518 + C14517 + C14516 + C14515) * C5864 +
           (C14514 + C14513 + C14512 + C14511) * C5863) *
              C141298 * C141281 * C98 +
          (C14525 * C5863 + (C14522 + C14521 + C14520 + C14519) * C5864 +
           (C225 * C14078 + C657 * C141479 +
            (C188 * C1602 + C141327 * C1691) * C14079 +
            (C188 * C1785 + C141327 * C2198) * C141365) *
               C5865) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C141327 * C189) * C58590 +
           (C188 * C276 + C141327 * C635) * C58485 + C15877 * C58591 +
           C16596 * C58486 + C21152 * C58592 + C21660 * C58487 +
           C50096 * C58593 + C50594 * C58488) *
              C141219 * C141298 * C141281 * C97 -
          (C45513 * C58488 + C44805 * C58593 + C16598 * C58487 +
           C15882 * C58592 + C2211 * C58486 + C1715 * C58591 + C654 * C58485 +
           C218 * C58590) *
              C141219 * C141298 * C141281 * C98 +
          (C220 * C58590 + C655 * C58485 + C1713 * C58591 + C2210 * C58486 +
           C15880 * C58592 + C16597 * C58487 +
           (C188 * C21037 + C141327 * C21138) * C58593 +
           (C188 * C21230 + C141327 * C21656) * C58488) *
              C141219 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezz[72] += (-std::pow(Pi, 2.5) *
                   (((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                      C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                         C21819 +
                     (C14599 * C823 + C15611 + C15611 + C141479 * C1505 +
                      C14600 * C3490 + C15610 + C15610 + C141365 * C4074) *
                         C21820 +
                     (C14599 * C2960 + C18278 + C18278 + C141479 * C3416 +
                      C14600 * C10470 + C18279 + C18279 + C141365 * C11356) *
                         C21821) *
                        C141219 * C141298 * C141281 * C97 -
                    ((C14600 * C10471 + C18281 + C18281 + C141365 * C11357 +
                      C14599 * C2961 + C18280 + C18280 + C141479 * C3417) *
                         C21821 +
                     (C15624 + C15625) * C21820 + (C14637 + C14636) * C21819) *
                        C141219 * C141298 * C141281 * C98 +
                    (C14642 * C21819 + (C15623 + C15622) * C21820 +
                     (C14599 * C2962 + C18282 + C18282 + C141479 * C3418 +
                      C14600 * C10472 + C18283 + C18283 + C141365 * C11358) *
                         C21821) *
                        C141219 * C141298 * C141281 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                      C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                         C141327 * C5863 +
                     (C14636 + C14637) * C141327 * C5864 + C14643 * C5865) *
                        C141298 * C141281 * C97 -
                    ((C14640 + C14641) * C141327 * C5865 +
                     (C14639 + C14638) * C141327 * C5864 +
                     (C14637 + C14636) * C141327 * C5863) *
                        C141298 * C141281 * C98 +
                    (C14643 * C5863 + (C14641 + C14640) * C141327 * C5864 +
                     (C14599 * C112 + C14622 + C14622 + C141479 * C718 +
                      C14600 * C1602 + C14623 + C14623 + C141365 * C2284) *
                         C141327 * C5865) *
                        C141298 * C141281 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((C58894 * C108 + C58899 + C58899 + C58485 * C714 +
                     C58895 * C1601 + C58900 + C58900 + C58486 * C2283 +
                     C58896 * C5325 + C58901 + C58901 + C58487 * C5781 +
                     C58897 * C21035 + C58902 + C58902 + C58488 * C21734) *
                        C141327 * C141219 * C141298 * C141281 * C97 -
                    (C58897 * C21036 + C58903 + C58903 + C58488 * C21735 +
                     C58896 * C5326 + C58904 + C58904 + C58487 * C5782 +
                     C58895 * C1600 + C58905 + C58905 + C58486 * C2282 +
                     C58894 * C109 + C58906 + C58906 + C58485 * C715) *
                        C141327 * C141219 * C141298 * C141281 * C98 +
                    (C58894 * C110 + C58907 + C58907 + C58485 * C716 +
                     C58895 * C1599 + C58908 + C58908 + C58486 * C2281 +
                     C58896 * C5327 + C58909 + C58909 + C58487 * C5783 +
                     C58897 * C21037 + C58910 + C58910 + C58488 * C21736) *
                        C141327 * C141219 * C141298 * C141281 * C99)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[73] +=
        (-std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141479 +
             (C29774 * C1601 + C30996 + C30996 + C141219 * C1611) * C141365) *
                C21819 +
            (C35748 + C35749) * C21820 + (C35750 + C35751) * C21821) *
               C141298 * C816 -
           ((C32719 * C141365 + C30303 * C141479) * C21821 +
            (C35751 + C35750) * C21820 + (C35749 + C35748) * C21819) *
               C141298 * C141497) *
              C818 +
          (((C35752 + C35764) * C21819 + (C35755 + C35765) * C21820 +
            (C30306 * C141479 +
             (C29774 * C26352 + C31000 + C31000 + C141219 * C26356) * C141365) *
                C21821) *
               C141298 * C141497 -
           ((C35765 + C35755) * C21821 + (C35764 + C35752) * C21820 +
            ((C29774 * C1600 + C30997 + C30997 + C141219 * C1610) * C141365 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141479) *
                C21819) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 +
             C5876 + C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
             C5865 * C122) *
                C141479 +
            (C5868 * C1601 + C7817 + C7817 + C5863 * C1611 + C5870 * C1600 +
             C7816 + C7816 + C5864 * C1610 + C5872 * C1599 + C7815 + C7815 +
             C5865 * C1609) *
                C141365) *
               C141327 * C141298 * C816 -
           ((C10495 + C10496 + C10497) * C141365 +
            (C6742 + C6741 + C6740) * C141479) *
               C141327 * C141298 * C141497) *
              C818 +
          (((C6743 + C6744 + C6745) * C141479 +
            (C5868 * C3491 + C7821 + C7821 + C5863 * C3499 + C5870 * C3492 +
             C7822 + C7822 + C5864 * C3500 + C5872 * C3493 + C7823 + C7823 +
             C5865 * C3501) *
                C141365) *
               C141327 * C141298 * C141497 -
           ((C5872 * C1598 + C7820 + C7820 + C5865 * C1608 + C5870 * C1599 +
             C7819 + C7819 + C5864 * C1609 + C5868 * C1600 + C7818 + C7818 +
             C5863 * C1610) *
                C141365 +
            (C5872 * C111 + C5884 + C5884 + C5865 * C123 + C5870 * C110 +
             C5885 + C5885 + C5864 * C122 + C5868 * C109 + C5886 + C5886 +
             C5863 * C121) *
                C141479) *
               C141327 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C58485 +
            C36781 * C58486 + C42123 * C58487 + C57776 * C58488) *
               C141327 * C141298 * C816 -
           (C55017 * C58488 + C39350 * C58487 + C32721 * C58486 +
            C30301 * C58485) *
               C141327 * C141298 * C141497) *
              C818 +
          ((C30304 * C58485 + C35762 * C58486 + C51452 * C58487 +
            (C29774 * C47290 + C52406 + C52406 + C141219 * C47292) * C58488) *
               C141327 * C141298 * C141497 -
           ((C29774 * C21036 + C52405 + C52405 + C141219 * C21042) * C58488 +
            C52409 * C58487 + C36782 * C58486 +
            (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C58485) *
               C141327 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexy[73] +=
        (-std::pow(Pi, 2.5) *
         (((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
              C21920 * C2960 + C21821 * C3026) *
                 C29775 +
             (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
              C21920 * C2964 + C21821 * C3030) *
                 C141219) *
                C141479 +
            ((C21918 * C1601 + C21819 * C1690 + C21919 * C3490 +
              C21820 * C3572 + C21920 * C10470 + C21821 * C10595) *
                 C29775 +
             (C21918 * C1606 + C21819 * C1695 + C21919 * C3494 +
              C21820 * C3576 + C21920 * C10473 + C21821 * C10598) *
                 C141219) *
                C141365) *
               C141298 * C816 -
           (((C21920 * C26353 + C21821 * C26479 + C21919 * C10473 +
              C21820 * C10598 + C21918 * C3494 + C21819 * C3576) *
                 C141219 +
             (C21920 * C26351 + C21821 * C26477 + C21919 * C10470 +
              C21820 * C10595 + C21918 * C3490 + C21819 * C3572) *
                 C29775) *
                C141365 +
            ((C21920 * C9670 + C21821 * C9771 + C21919 * C2964 +
              C21820 * C3030 + C21918 * C828 + C21819 * C917) *
                 C141219 +
             (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 +
              C21820 * C3026 + C21918 * C823 + C21819 * C912) *
                 C29775) *
                C141479) *
               C141298 * C141497) *
              C818 +
          ((((C22814 + C22813 + C22812) * C29775 +
             (C22811 + C22810 + C22809) * C141219) *
                C141479 +
            ((C21918 * C3491 + C21819 * C3573 + C21919 * C10471 +
              C21820 * C10596 + C21920 * C26352 + C21821 * C26478) *
                 C29775 +
             (C21918 * C3495 + C21819 * C3577 + C21919 * C10474 +
              C21820 * C10599 + C21920 * C26354 + C21821 * C26480) *
                 C141219) *
                C141365) *
               C141298 * C141497 -
           (((C23865 + C23866 + C23867) * C141219 +
             (C23868 + C23869 + C23870) * C29775) *
                C141365 +
            ((C21951 + C21950 + C21949) * C141219 +
             (C21948 + C21947 + C21946) * C29775) *
                C141479) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C5869 +
             (C188 * C114 + C141327 * C195) * C5863 + C218 * C5871 +
             C219 * C5864 + C220 * C5873 + C221 * C5865) *
                C141479 +
            ((C188 * C1601 + C141327 * C1690) * C5869 +
             (C188 * C1606 + C141327 * C1695) * C5863 + C1715 * C5871 +
             C1714 * C5864 + C1713 * C5873 + C1712 * C5865) *
                C141365) *
               C141298 * C816 -
           ((C14848 * C5865 + C14849 * C5873 + C14850 * C5864 + C14851 * C5871 +
             (C188 * C3494 + C141327 * C3576) * C5863 +
             (C188 * C3490 + C141327 * C3572) * C5869) *
                C141365 +
            (C934 * C5865 + C935 * C5873 + C936 * C5864 + C937 * C5871 +
             (C188 * C828 + C141327 * C917) * C5863 +
             (C188 * C823 + C141327 * C912) * C5869) *
                C141479) *
               C141298 * C141497) *
              C818 +
          (((C937 * C5869 + C936 * C5863 + C935 * C5871 + C934 * C5864 +
             C933 * C5873 + C932 * C5865) *
                C141479 +
            (C14851 * C5869 + C14850 * C5863 + C14849 * C5871 + C14848 * C5864 +
             (C188 * C3493 + C141327 * C3575) * C5873 +
             (C188 * C3497 + C141327 * C3579) * C5865) *
                C141365) *
               C141298 * C141497 -
           ((C1710 * C5865 + C1711 * C5873 + C1712 * C5864 + C1713 * C5871 +
             C1714 * C5863 + C1715 * C5869) *
                C141365 +
            (C223 * C5865 + C222 * C5873 + C221 * C5864 + C220 * C5871 +
             C219 * C5863 + C218 * C5869) *
                C141479) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C29775 +
             (C188 * C114 + C141327 * C195) * C141219) *
                C58485 +
            (C15877 * C29775 + C15878 * C141219) * C58486 +
            (C21152 * C29775 + C21151 * C141219) * C58487 +
            (C50096 * C29775 + C50095 * C141219) * C58488) *
               C141298 * C816 -
           (((C188 * C42111 + C141327 * C42199) * C141219 +
             (C188 * C42109 + C141327 * C42197) * C29775) *
                C58488 +
            (C47417 * C141219 + C47416 * C29775) * C58487 +
            (C18489 * C141219 + C18488 * C29775) * C58486 +
            ((C188 * C828 + C141327 * C917) * C141219 +
             (C188 * C823 + C141327 * C912) * C29775) *
                C58485) *
               C141298 * C141497) *
              C818 +
          (((C937 * C29775 + C936 * C141219) * C58485 +
            (C14851 * C29775 + C14850 * C141219) * C58486 +
            (C43792 * C29775 + C43791 * C141219) * C58487 +
            ((C188 * C47290 + C141327 * C47403) * C29775 +
             (C188 * C47291 + C141327 * C47404) * C141219) *
                C58488) *
               C141298 * C141497 -
           ((C44804 * C141219 + C44805 * C29775) * C58488 +
            (C15881 * C141219 + C15882 * C29775) * C58487 +
            (C1714 * C141219 + C1715 * C29775) * C58486 +
            (C219 * C141219 + C218 * C29775) * C58485) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[73] +=
        (-std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C29775 +
             (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
              C141365 * C1789) *
                 C141219) *
                C21819 +
            ((C35986 + C35987) * C29775 + (C35988 + C35989) * C141219) *
                C21820 +
            ((C35990 + C35991) * C29775 + (C35992 + C35993) * C141219) *
                C21821) *
               C141298 * C816 -
           (((C14079 * C26353 + C141365 * C26581 + C14078 * C9670 +
              C141479 * C9851) *
                 C141219 +
             (C14079 * C26351 + C141365 * C26579 + C14078 * C9667 +
              C141479 * C9848) *
                 C29775) *
                C21821 +
            ((C35993 + C35992) * C141219 + (C35991 + C35990) * C29775) *
                C21820 +
            ((C35989 + C35988) * C141219 + (C35987 + C35986) * C29775) *
                C21819) *
               C141298 * C141497) *
              C818 +
          ((((C14973 + C14972) * C29775 + (C14971 + C14970) * C141219) *
                C21819 +
            ((C35994 + C35995) * C29775 + (C35996 + C35997) * C141219) *
                C21820 +
            ((C14078 * C9668 + C141479 * C9849 + C14079 * C26352 +
              C141365 * C26580) *
                 C29775 +
             (C14078 * C9671 + C141479 * C9852 + C14079 * C26354 +
              C141365 * C26582) *
                 C141219) *
                C21821) *
               C141298 * C141497 -
           (((C35997 + C35996) * C141219 + (C35995 + C35994) * C29775) *
                C21821 +
            ((C14970 + C14971) * C141219 + (C14972 + C14973) * C29775) *
                C21820 +
            ((C14108 + C14107) * C141219 + (C14106 + C14105) * C29775) *
                C21819) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C5869 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C5863 +
            (C14105 + C14106) * C5871 + (C14107 + C14108) * C5864 +
            C14117 * C5873 + C14118 * C5865) *
               C141327 * C141298 * C816 -
           ((C14966 + C14967) * C5865 + (C14968 + C14969) * C5873 +
            (C14970 + C14971) * C5864 + (C14972 + C14973) * C5871 +
            (C14079 * C3494 + C141365 * C3650 + C14078 * C828 +
             C141479 * C1011) *
                C5863 +
            (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
             C141479 * C1006) *
                C5869) *
               C141327 * C141298 * C141497) *
              C818 +
          (((C14973 + C14972) * C5869 + (C14971 + C14970) * C5863 +
            (C14969 + C14968) * C5871 + (C14967 + C14966) * C5864 +
            (C14078 * C820 + C141479 * C1003 + C14079 * C3493 +
             C141365 * C3649) *
                C5873 +
            (C14078 * C825 + C141479 * C1008 + C14079 * C3497 +
             C141365 * C3653) *
                C5865) *
               C141327 * C141298 * C141497 -
           ((C14113 + C14114) * C5865 + (C14115 + C14116) * C5873 +
            (C14112 + C14111) * C5864 + (C14110 + C14109) * C5871 +
            (C14108 + C14107) * C5863 + (C14106 + C14105) * C5869) *
               C141327 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C58590 * C108 + C58485 * C276 + C58591 * C1601 + C58486 * C1784 +
             C58592 * C5325 + C58487 * C5449 + C58593 * C21035 +
             C58488 * C21228) *
                C29775 +
            (C58590 * C114 + C58485 * C282 + C58591 * C1606 + C58486 * C1789 +
             C58592 * C5329 + C58487 * C5453 + C58593 * C21038 +
             C58488 * C21231) *
                C141219) *
               C141327 * C141298 * C816 -
           ((C58593 * C42111 + C58488 * C42295 + C58592 * C13208 +
             C58487 * C13377 + C58591 * C3494 + C58486 * C3650 + C58590 * C828 +
             C58485 * C1011) *
                C141219 +
            (C58593 * C42109 + C58488 * C42293 + C58592 * C13205 +
             C58487 * C13374 + C58591 * C3490 + C58486 * C3646 + C58590 * C823 +
             C58485 * C1006) *
                C29775) *
               C141327 * C141298 * C141497) *
              C818 +
          (((C58590 * C822 + C58485 * C1005 + C58591 * C3491 + C58486 * C3647 +
             C58592 * C13206 + C58487 * C13375 + C58593 * C47290 +
             C58488 * C47517) *
                C29775 +
            (C58590 * C827 + C58485 * C1010 + C58591 * C3495 + C58486 * C3651 +
             C58592 * C13209 + C58487 * C13378 + C58593 * C47291 +
             C58488 * C47518) *
                C141219) *
               C141327 * C141298 * C141497 -
           ((C58593 * C21039 + C58488 * C21232 + C58592 * C5330 +
             C58487 * C5454 + C58591 * C1605 + C58486 * C1788 + C58590 * C115 +
             C58485 * C283) *
                C141219 +
            (C58593 * C21036 + C58488 * C21229 + C58592 * C5326 +
             C58487 * C5450 + C58591 * C1600 + C58486 * C1783 + C58590 * C109 +
             C58485 * C277) *
                C29775) *
               C141327 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[73] +=
        (-std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C21918 +
             (C29775 * C189 + C141219 * C362) * C21819 + C30547 * C21919 +
             C30548 * C21820 + C30549 * C21920 + C30550 * C21821) *
                C141479 +
            ((C29775 * C1601 + C141219 * C1606) * C21918 +
             (C29775 * C1690 + C141219 * C1878) * C21819 + C32957 * C21919 +
             C32956 * C21820 + C32955 * C21920 + C32954 * C21821) *
                C141365) *
               C141298 * C816 -
           ((C32952 * C21821 + C32953 * C21920 + C32954 * C21820 +
             C32955 * C21919 + C32956 * C21819 + C32957 * C21918) *
                C141365 +
            (C30552 * C21821 + C30551 * C21920 + C30550 * C21820 +
             C30549 * C21919 + C30548 * C21819 + C30547 * C21918) *
                C141479) *
               C141298 * C141497) *
              C818 +
          (((C30553 * C21918 + C30554 * C21819 + C30555 * C21919 +
             C30556 * C21820 + C30557 * C21920 + C30558 * C21821) *
                C141479 +
            (C36104 * C21918 + C36105 * C21819 + C36106 * C21919 +
             C36107 * C21820 + (C29775 * C26352 + C141219 * C26354) * C21920 +
             (C29775 * C26478 + C141219 * C26696) * C21821) *
                C141365) *
               C141298 * C141497 -
           ((C36107 * C21821 + C36106 * C21920 + C36105 * C21820 +
             C36104 * C21919 + (C29775 * C1689 + C141219 * C1877) * C21819 +
             (C29775 * C1600 + C141219 * C1605) * C21918) *
                C141365 +
            (C30556 * C21821 + C30555 * C21920 + C30554 * C21820 +
             C30553 * C21919 + (C29775 * C190 + C141219 * C363) * C21819 +
             (C29775 * C109 + C141219 * C115) * C21918) *
                C141479) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C188 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
              C5873 * C191 + C5865 * C364) *
                 C141327) *
                C141479 +
            ((C5869 * C1601 + C5863 * C1606 + C5871 * C1600 + C5864 * C1605 +
              C5873 * C1599 + C5865 * C1604) *
                 C188 +
             (C5869 * C1690 + C5863 * C1878 + C5871 * C1689 + C5864 * C1877 +
              C5873 * C1688 + C5865 * C1876) *
                 C141327) *
                C141365) *
               C141298 * C816 -
           (((C10831 + C10832 + C10833) * C141327 +
             (C10834 + C10835 + C10836) * C188) *
                C141365 +
            ((C7123 + C7122 + C7121) * C141327 +
             (C7120 + C7119 + C7118) * C188) *
                C141479) *
               C141298 * C141497) *
              C818 +
          ((((C7124 + C7125 + C7126) * C188 +
             (C7127 + C7128 + C7129) * C141327) *
                C141479 +
            ((C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C5864 * C3496 +
              C5873 * C3493 + C5865 * C3497) *
                 C188 +
             (C5869 * C3573 + C5863 * C3721 + C5871 * C3574 + C5864 * C3722 +
              C5873 * C3575 + C5865 * C3723) *
                 C141327) *
                C141365) *
               C141298 * C141497 -
           (((C5873 * C1687 + C5865 * C1875 + C5871 * C1688 + C5864 * C1876 +
              C5869 * C1689 + C5863 * C1877) *
                 C141327 +
             (C5873 * C1598 + C5865 * C1603 + C5871 * C1599 + C5864 * C1604 +
              C5869 * C1600 + C5863 * C1605) *
                 C188) *
                C141365 +
            ((C5873 * C192 + C5865 * C365 + C5871 * C191 + C5864 * C364 +
              C5869 * C190 + C5863 * C363) *
                 C141327 +
             (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
              C5869 * C109 + C5863 * C115) *
                 C188) *
                C141479) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C188 +
             (C29775 * C189 + C141219 * C362) * C141327) *
                C58485 +
            (C37111 * C188 + C37112 * C141327) * C58486 +
            (C42383 * C188 + C42382 * C141327) * C58487 +
            (C58030 * C188 + C58029 * C141327) * C58488) *
               C141298 * C816 -
           ((C55367 * C141327 + C55368 * C188) * C58488 +
            (C39705 * C141327 + C39706 * C188) * C58487 +
            (C32956 * C141327 + C32957 * C188) * C58486 +
            (C30548 * C141327 + C30547 * C188) * C58485) *
               C141298 * C141497) *
              C818 +
          (((C30553 * C188 + C30554 * C141327) * C58485 +
            (C36104 * C188 + C36105 * C141327) * C58486 +
            (C51770 * C188 + C51771 * C141327) * C58487 +
            ((C29775 * C47290 + C141219 * C47291) * C188 +
             (C29775 * C47403 + C141219 * C47617) * C141327) *
                C58488) *
               C141298 * C141497 -
           (((C29775 * C21137 + C141219 * C21309) * C141327 +
             (C29775 * C21036 + C141219 * C21039) * C188) *
                C58488 +
            (C52759 * C141327 + C52758 * C188) * C58487 +
            (C37114 * C141327 + C37113 * C188) * C58486 +
            ((C29775 * C190 + C141219 * C363) * C141327 +
             (C29775 * C109 + C141219 * C115) * C188) *
                C58485) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[73] +=
        (-std::pow(Pi, 2.5) *
         ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
             C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
             C22185 + C21821 * C3196) *
                C141219 * C141479 +
            (C22179 * C1601 + C24182 + C24182 + C21819 * C1949 +
             C22180 * C3490 + C24181 + C24181 + C21820 * C3790 +
             C22181 * C10470 + C24180 + C24180 + C21821 * C10934) *
                C141219 * C141365) *
               C141298 * C816 -
           ((C22181 * C26351 + C26824 + C26824 + C21821 * C26819 +
             C22180 * C10470 + C26823 + C26823 + C21820 * C10934 +
             C22179 * C3490 + C26822 + C26822 + C21819 * C3790) *
                C141219 * C141365 +
            (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
             C22180 * C2960 + C23189 + C23189 + C21820 * C3196 + C22179 * C823 +
             C23190 + C23190 + C21819 * C1171) *
                C141219 * C141479) *
               C141298 * C141497) *
              C818 +
          (((C23202 + C23201 + C23200) * C141219 * C141479 +
            (C22179 * C3491 + C26825 + C26825 + C21819 * C3791 +
             C22180 * C10471 + C26826 + C26826 + C21820 * C10935 +
             C22181 * C26352 + C26827 + C26827 + C21821 * C26820) *
                C141219 * C141365) *
               C141298 * C141497 -
           ((C24192 + C24193 + C24194) * C141219 * C141365 +
            (C22221 + C22220 + C22219) * C141219 * C141479) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C5863 +
             C448 * C5864 + C449 * C5865) *
                C141479 +
            ((C418 * C1601 + C1961 + C1961 + C141327 * C1949) * C5863 +
             C1971 * C5864 + C1970 * C5865) *
                C141365) *
               C141298 * C816 -
           ((C15178 * C5865 + C15179 * C5864 +
             (C418 * C3490 + C3795 + C3795 + C141327 * C3790) * C5863) *
                C141365 +
            (C1192 * C5865 + C1193 * C5864 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C5863) *
                C141479) *
               C141298 * C141497) *
              C818 +
          (((C1193 * C5863 + C1192 * C5864 + C1191 * C5865) * C141479 +
            (C15179 * C5863 + C15178 * C5864 +
             (C418 * C3493 + C3798 + C3798 + C141327 * C3793) * C5865) *
                C141365) *
               C141298 * C141497 -
           ((C1969 * C5865 + C1970 * C5864 + C1971 * C5863) * C141365 +
            (C450 * C5865 + C449 * C5864 + C448 * C5863) * C141479) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C141219 * C58485 +
            C16256 * C141219 * C58486 + C21416 * C141219 * C58487 +
            C50355 * C141219 * C58488) *
               C141298 * C816 -
           ((C418 * C42109 + C47735 + C47735 + C141327 * C42459) * C141219 *
                C58488 +
            C47739 * C141219 * C58487 + C18795 * C141219 * C58486 +
            (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C141219 *
                C58485) *
               C141298 * C141497) *
              C818 +
          ((C1193 * C141219 * C58485 + C15179 * C141219 * C58486 +
            C44109 * C141219 * C58487 +
            (C418 * C47290 + C47736 + C47736 + C141327 * C47728) * C141219 *
                C58488) *
               C141298 * C141497 -
           (C45178 * C141219 * C58488 + C16258 * C141219 * C58487 +
            C1971 * C141219 * C58486 + C448 * C141219 * C58485) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[73] +=
        (-std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C21918 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C21819 +
            (C35986 + C35987) * C21919 + (C36316 + C36317) * C21820 +
            (C35990 + C35991) * C21920 + (C36318 + C36319) * C21821) *
               C141219 * C141298 * C816 -
           ((C14079 * C26477 + C141365 * C26925 + C14078 * C9768 +
             C141479 * C10118) *
                C21821 +
            (C14079 * C26351 + C141365 * C26579 + C14078 * C9667 +
             C141479 * C9848) *
                C21920 +
            (C36319 + C36318) * C21820 + (C35991 + C35990) * C21919 +
            (C36317 + C36316) * C21819 + (C35987 + C35986) * C21918) *
               C141219 * C141298 * C141497) *
              C818 +
          (((C14973 + C14972) * C21918 + (C15289 + C15288) * C21819 +
            (C35994 + C35995) * C21919 + (C36320 + C36321) * C21820 +
            (C14078 * C9668 + C141479 * C9849 + C14079 * C26352 +
             C141365 * C26580) *
                C21920 +
            (C14078 * C9769 + C141479 * C10119 + C14079 * C26478 +
             C141365 * C26926) *
                C21821) *
               C141219 * C141298 * C141497 -
           ((C36321 + C36320) * C21821 + (C35995 + C35994) * C21920 +
            (C15288 + C15289) * C21820 + (C14972 + C14973) * C21919 +
            (C14355 + C14354) * C21819 + (C14106 + C14105) * C21918) *
               C141219 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C188 +
             (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
              C141365 * C2040) *
                 C141327) *
                C5863 +
            ((C14105 + C14106) * C188 + (C14354 + C14355) * C141327) * C5864 +
            C14362 * C5865) *
               C141298 * C816 -
           (((C15286 + C15287) * C141327 + (C14968 + C14969) * C188) * C5865 +
            ((C15288 + C15289) * C141327 + (C14972 + C14973) * C188) * C5864 +
            ((C14079 * C3572 + C141365 * C3864 + C14078 * C912 +
              C141479 * C1262) *
                 C141327 +
             (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
              C141479 * C1006) *
                 C188) *
                C5863) *
               C141298 * C141497) *
              C818 +
          ((((C14973 + C14972) * C188 + (C15289 + C15288) * C141327) * C5863 +
            ((C14969 + C14968) * C188 + (C15287 + C15286) * C141327) * C5864 +
            ((C14078 * C820 + C141479 * C1003 + C14079 * C3493 +
              C141365 * C3649) *
                 C188 +
             (C14078 * C909 + C141479 * C1259 + C14079 * C3575 +
              C141365 * C3867) *
                 C141327) *
                C5865) *
               C141298 * C141497 -
           (((C14358 + C14359) * C141327 + (C14115 + C14116) * C188) * C5865 +
            ((C14357 + C14356) * C141327 + (C14110 + C14109) * C188) * C5864 +
            ((C14355 + C14354) * C141327 + (C14106 + C14105) * C188) * C5863) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C58590 * C108 + C58485 * C276 + C58591 * C1601 + C58486 * C1784 +
             C58592 * C5325 + C58487 * C5449 + C58593 * C21035 +
             C58488 * C21228) *
                C188 +
            (C58590 * C189 + C58485 * C501 + C58591 * C1690 + C58486 * C2040 +
             C58592 * C5391 + C58487 * C5619 + C58593 * C21136 +
             C58488 * C21491) *
                C141327) *
               C141219 * C141298 * C816 -
           ((C58593 * C42197 + C58488 * C42553 + C58592 * C13294 +
             C58487 * C13614 + C58591 * C3572 + C58486 * C3864 + C58590 * C912 +
             C58485 * C1262) *
                C141327 +
            (C58593 * C42109 + C58488 * C42293 + C58592 * C13205 +
             C58487 * C13374 + C58591 * C3490 + C58486 * C3646 + C58590 * C823 +
             C58485 * C1006) *
                C188) *
               C141219 * C141298 * C141497) *
              C818 +
          (((C58590 * C822 + C58485 * C1005 + C58591 * C3491 + C58486 * C3647 +
             C58592 * C13206 + C58487 * C13375 + C58593 * C47290 +
             C58488 * C47517) *
                C188 +
            (C58590 * C911 + C58485 * C1261 + C58591 * C3573 + C58486 * C3865 +
             C58592 * C13295 + C58487 * C13615 + C58593 * C47403 +
             C58488 * C47838) *
                C141327) *
               C141219 * C141298 * C141497 -
           ((C58593 * C21137 + C58488 * C21492 + C58592 * C5392 +
             C58487 * C5620 + C58591 * C1689 + C58486 * C2039 + C58590 * C190 +
             C58485 * C502) *
                C141327 +
            (C58593 * C21036 + C58488 * C21229 + C58592 * C5326 +
             C58487 * C5450 + C58591 * C1600 + C58486 * C1783 + C58590 * C109 +
             C58485 * C277) *
                C188) *
               C141219 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[73] +=
        (-std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C14078 +
             (C29775 * C276 + C141219 * C579) * C141479 +
             (C29775 * C1601 + C141219 * C1606) * C14079 +
             (C29775 * C1784 + C141219 * C2126) * C141365) *
                C21819 +
            (C36420 + C36421 + C36422 + C36423) * C21820 +
            (C36424 + C36425 + C36426 + C36427) * C21821) *
               C141298 * C816 -
           ((C33175 * C141365 + C32953 * C14079 + C30785 * C141479 +
             C30551 * C14078) *
                C21821 +
            (C36427 + C36426 + C36425 + C36424) * C21820 +
            (C36423 + C36422 + C36421 + C36420) * C21819) *
               C141298 * C141497) *
              C818 +
          (((C36428 + C36429 + C36430 + C36440) * C21819 +
            (C36433 + C36434 + C36435 + C36441) * C21820 +
            (C30557 * C14078 + C30788 * C141479 +
             (C29775 * C26352 + C141219 * C26354) * C14079 +
             (C29775 * C26580 + C141219 * C27029) * C141365) *
                C21821) *
               C141298 * C141497 -
           ((C36441 + C36435 + C36434 + C36433) * C21821 +
            (C36440 + C36430 + C36429 + C36428) * C21820 +
            ((C29775 * C1783 + C141219 * C2125) * C141365 +
             (C29775 * C1600 + C141219 * C1605) * C14079 +
             (C29775 * C277 + C141219 * C580) * C141479 +
             (C29775 * C109 + C141219 * C115) * C14078) *
                C21819) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
             C5873 * C110 + C5865 * C116) *
                C14078 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
             C5873 * C278 + C5865 * C581) *
                C141479 +
            (C5869 * C1601 + C5863 * C1606 + C5871 * C1600 + C5864 * C1605 +
             C5873 * C1599 + C5865 * C1604) *
                C14079 +
            (C5869 * C1784 + C5863 * C2126 + C5871 * C1783 + C5864 * C2125 +
             C5873 * C1782 + C5865 * C2124) *
                C141365) *
               C141327 * C141298 * C816 -
           ((C11155 + C11156 + C11157) * C141365 +
            (C10834 + C10835 + C10836) * C14079 +
            (C7483 + C7482 + C7481) * C141479 +
            (C7120 + C7119 + C7118) * C14078) *
               C141327 * C141298 * C141497) *
              C818 +
          (((C7124 + C7125 + C7126) * C14078 +
            (C7484 + C7485 + C7486) * C141479 +
            (C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C5864 * C3496 +
             C5873 * C3493 + C5865 * C3497) *
                C14079 +
            (C5869 * C3647 + C5863 * C3935 + C5871 * C3648 + C5864 * C3936 +
             C5873 * C3649 + C5865 * C3937) *
                C141365) *
               C141327 * C141298 * C141497 -
           ((C5873 * C1781 + C5865 * C2123 + C5871 * C1782 + C5864 * C2124 +
             C5869 * C1783 + C5863 * C2125) *
                C141365 +
            (C5873 * C1598 + C5865 * C1603 + C5871 * C1599 + C5864 * C1604 +
             C5869 * C1600 + C5863 * C1605) *
                C14079 +
            (C5873 * C279 + C5865 * C582 + C5871 * C278 + C5864 * C581 +
             C5869 * C277 + C5863 * C580) *
                C141479 +
            (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
             C5869 * C109 + C5863 * C115) *
                C14078) *
               C141327 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C58590 +
            (C29775 * C276 + C141219 * C579) * C58485 + C37111 * C58591 +
            C37432 * C58486 + C42383 * C58592 + C42634 * C58487 +
            C58030 * C58593 + C58275 * C58488) *
               C141327 * C141298 * C816 -
           (C55701 * C58488 + C55368 * C58593 + C40042 * C58487 +
            C39706 * C58592 + C33177 * C58486 + C32957 * C58591 +
            C30783 * C58485 + C30547 * C58590) *
               C141327 * C141298 * C141497) *
              C818 +
          ((C30553 * C58590 + C30786 * C58485 + C36104 * C58591 +
            C36438 * C58486 + C51770 * C58592 + C52092 * C58487 +
            (C29775 * C47290 + C141219 * C47291) * C58593 +
            (C29775 * C47517 + C141219 * C47937) * C58488) *
               C141327 * C141298 * C141497 -
           ((C29775 * C21229 + C141219 * C21569) * C58488 +
            (C29775 * C21036 + C141219 * C21039) * C58593 + C53092 * C58487 +
            C52758 * C58592 + C37433 * C58486 + C37113 * C58591 +
            (C29775 * C277 + C141219 * C580) * C58485 +
            (C29775 * C109 + C141219 * C115) * C58590) *
               C141327 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezy[73] +=
        (-std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C14078 +
            (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
             C21920 * C3084 + C21821 * C3362) *
                C141479 +
            (C21918 * C1601 + C21819 * C1690 + C21919 * C3490 + C21820 * C3572 +
             C21920 * C10470 + C21821 * C10595) *
                C14079 +
            (C21918 * C1784 + C21819 * C2197 + C21919 * C3646 + C21820 * C4004 +
             C21920 * C10699 + C21821 * C11255) *
                C141365) *
               C141219 * C141298 * C816 -
           ((C21920 * C26579 + C21821 * C27140 + C21919 * C10699 +
             C21820 * C11255 + C21918 * C3646 + C21819 * C4004) *
                C141365 +
            (C21920 * C26351 + C21821 * C26477 + C21919 * C10470 +
             C21820 * C10595 + C21918 * C3490 + C21819 * C3572) *
                C14079 +
            (C21920 * C9848 + C21821 * C10284 + C21919 * C3084 +
             C21820 * C3362 + C21918 * C1006 + C21819 * C1419) *
                C141479 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C14078) *
               C141219 * C141298 * C141497) *
              C818 +
          (((C22814 + C22813 + C22812) * C14078 +
            (C23538 + C23537 + C23536) * C141479 +
            (C21918 * C3491 + C21819 * C3573 + C21919 * C10471 +
             C21820 * C10596 + C21920 * C26352 + C21821 * C26478) *
                C14079 +
            (C21918 * C3647 + C21819 * C4005 + C21919 * C10700 +
             C21820 * C11256 + C21920 * C26580 + C21821 * C27141) *
                C141365) *
               C141219 * C141298 * C141497 -
           ((C24504 + C24505 + C24506) * C141365 +
            (C23868 + C23869 + C23870) * C14079 +
            (C22473 + C22472 + C22471) * C141479 +
            (C21948 + C21947 + C21946) * C14078) *
               C141219 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C14078 +
             (C188 * C276 + C141327 * C635) * C141479 +
             (C188 * C1601 + C141327 * C1690) * C14079 +
             (C188 * C1784 + C141327 * C2197) * C141365) *
                C5863 +
            (C14511 + C14512 + C14513 + C14514) * C5864 + C14525 * C5865) *
               C141298 * C816 -
           ((C15498 + C15488 + C15489 + C15490) * C5865 +
            (C15499 + C15493 + C15494 + C15495) * C5864 +
            ((C188 * C3646 + C141327 * C4004) * C141365 +
             (C188 * C3490 + C141327 * C3572) * C14079 +
             (C188 * C1006 + C141327 * C1419) * C141479 +
             (C188 * C823 + C141327 * C912) * C14078) *
                C5863) *
               C141298 * C141497) *
              C818 +
          (((C15495 + C15494 + C15493 + C15499) * C5863 +
            (C15490 + C15489 + C15488 + C15498) * C5864 +
            (C933 * C14078 + C1431 * C141479 +
             (C188 * C3493 + C141327 * C3575) * C14079 +
             (C188 * C3649 + C141327 * C4007) * C141365) *
                C5865) *
               C141298 * C141497 -
           ((C14519 + C14520 + C14521 + C14522) * C5865 +
            (C14518 + C14517 + C14516 + C14515) * C5864 +
            (C14514 + C14513 + C14512 + C14511) * C5863) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C58590 +
            (C188 * C276 + C141327 * C635) * C58485 + C15877 * C58591 +
            C16596 * C58486 + C21152 * C58592 + C21660 * C58487 +
            C50096 * C58593 + C50594 * C58488) *
               C141219 * C141298 * C816 -
           ((C188 * C42293 + C141327 * C42708) * C58488 +
            (C188 * C42109 + C141327 * C42197) * C58593 + C48046 * C58487 +
            C47416 * C58592 + C19093 * C58486 + C18488 * C58591 +
            (C188 * C1006 + C141327 * C1419) * C58485 +
            (C188 * C823 + C141327 * C912) * C58590) *
               C141219 * C141298 * C141497) *
              C818 +
          ((C937 * C58590 + C1433 * C58485 + C14851 * C58591 + C15497 * C58486 +
            C43792 * C58592 + C44420 * C58487 +
            (C188 * C47290 + C141327 * C47403) * C58593 +
            (C188 * C47517 + C141327 * C48042) * C58488) *
               C141219 * C141298 * C141497 -
           (C45513 * C58488 + C44805 * C58593 + C16598 * C58487 +
            C15882 * C58592 + C2211 * C58486 + C1715 * C58591 + C654 * C58485 +
            C218 * C58590) *
               C141219 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[73] += (-std::pow(Pi, 2.5) *
                   ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                       C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                          C21819 +
                      (C36666 + C36667) * C21820 + (C36668 + C36669) * C21821) *
                         C141219 * C141298 * C816 -
                     ((C14600 * C26351 + C36646 + C36646 + C141365 * C27240 +
                       C14599 * C9667 + C36647 + C36647 + C141479 * C10361) *
                          C21821 +
                      (C36669 + C36668) * C21820 + (C36667 + C36666) * C21819) *
                         C141219 * C141298 * C141497) *
                        C818 +
                    (((C15625 + C15624) * C21819 + (C36670 + C36671) * C21820 +
                      (C14599 * C9668 + C36652 + C36652 + C141479 * C10362 +
                       C14600 * C26352 + C36653 + C36653 + C141365 * C27241) *
                          C21821) *
                         C141219 * C141298 * C141497 -
                     ((C36671 + C36670) * C21821 + (C15624 + C15625) * C21820 +
                      (C14637 + C14636) * C21819) *
                         C141219 * C141298 * C816) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                       C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                          C141327 * C5863 +
                      (C14636 + C14637) * C141327 * C5864 + C14643 * C5865) *
                         C141298 * C816 -
                     ((C15622 + C15623) * C141327 * C5865 +
                      (C15624 + C15625) * C141327 * C5864 +
                      (C14600 * C3490 + C15610 + C15610 + C141365 * C4074 +
                       C14599 * C823 + C15611 + C15611 + C141479 * C1505) *
                          C141327 * C5863) *
                         C141298 * C141497) *
                        C818 +
                    (((C15625 + C15624) * C141327 * C5863 +
                      (C15623 + C15622) * C141327 * C5864 +
                      (C14599 * C820 + C15612 + C15612 + C141479 * C1502 +
                       C14600 * C3493 + C15613 + C15613 + C141365 * C4077) *
                          C141327 * C5865) *
                         C141298 * C141497 -
                     ((C14640 + C14641) * C141327 * C5865 +
                      (C14639 + C14638) * C141327 * C5864 +
                      (C14637 + C14636) * C141327 * C5863) *
                         C141298 * C816) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C58894 * C108 + C58899 + C58899 + C58485 * C714 +
                      C58895 * C1601 + C58900 + C58900 + C58486 * C2283 +
                      C58896 * C5325 + C58901 + C58901 + C58487 * C5781 +
                      C58897 * C21035 + C58902 + C58902 + C58488 * C21734) *
                         C141327 * C141219 * C141298 * C816 -
                     (C58897 * C42109 + C59505 + C59505 + C58488 * C42793 +
                      C58896 * C13205 + C59506 + C59506 + C58487 * C13845 +
                      C58895 * C3490 + C59507 + C59507 + C58486 * C4074 +
                      C58894 * C823 + C59508 + C59508 + C58485 * C1505) *
                         C141327 * C141219 * C141298 * C141497) *
                        C818 +
                    ((C58894 * C822 + C59509 + C59509 + C58485 * C1504 +
                      C58895 * C3491 + C59510 + C59510 + C58486 * C4075 +
                      C58896 * C13206 + C59511 + C59511 + C58487 * C13846 +
                      C58897 * C47290 + C59512 + C59512 + C58488 * C48144) *
                         C141327 * C141219 * C141298 * C141497 -
                     (C58897 * C21036 + C58903 + C58903 + C58488 * C21735 +
                      C58896 * C5326 + C58904 + C58904 + C58487 * C5782 +
                      C58895 * C1600 + C58905 + C58905 + C58486 * C2282 +
                      C58894 * C109 + C58906 + C58906 + C58485 * C715) *
                         C141327 * C141219 * C141298 * C816) *
                        C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[74] +=
        (-std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141479 +
             C36781 * C141365) *
                C21819 +
            (C35748 + C35749) * C21820 + (C35750 + C35751) * C21821) *
               C1596 -
           (((C29774 * C29087 + C34564 + C34564 + C141219 * C29091) * C141365 +
             C32720 * C141479) *
                C21821 +
            ((C29774 * C13205 + C34563 + C34563 + C141219 * C13211) * C141365 +
             C32721 * C141479) *
                C21820 +
            ((C29774 * C5325 + C34562 + C34562 + C141219 * C5333) * C141365 +
             C36781 * C141479) *
                C21819) *
               C141499) *
              C141281 * C818 +
          (((C36782 * C141479 +
             (C29774 * C5326 + C36774 + C36774 + C141219 * C5334) * C141365) *
                C21819 +
            (C35762 * C141479 +
             (C29774 * C13206 + C36775 + C36775 + C141219 * C13212) * C141365) *
                C21820 +
            (C35763 * C141479 +
             (C29774 * C29088 + C36776 + C36776 + C141219 * C29092) * C141365) *
                C21821) *
               C141499 -
           ((C35765 + C35755) * C21821 + (C35764 + C35752) * C21820 +
            (C36782 * C141365 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141479) *
                C21819) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 +
             C5876 + C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
             C5865 * C122) *
                C141479 +
            (C15751 + C15752 + C15753) * C141365) *
               C141327 * C1596 -
           ((C5872 * C5327 + C13217 + C13217 + C5865 * C5335 + C5870 * C5326 +
             C13216 + C13216 + C5864 * C5334 + C5868 * C5325 + C13215 + C13215 +
             C5863 * C5333) *
                C141365 +
            (C15753 + C15752 + C15751) * C141479) *
               C141327 * C141499) *
              C141281 * C818 +
          (((C15754 + C15755 + C15756) * C141479 +
            (C5868 * C5326 + C15736 + C15736 + C5863 * C5334 + C5870 * C5327 +
             C15737 + C15737 + C5864 * C5335 + C5872 * C5328 + C15738 + C15738 +
             C5865 * C5336) *
                C141365) *
               C141327 * C141499 -
           ((C15756 + C15755 + C15754) * C141365 +
            (C5872 * C111 + C5884 + C5884 + C5865 * C123 + C5870 * C110 +
             C5885 + C5885 + C5864 * C122 + C5868 * C109 + C5886 + C5886 +
             C5863 * C121) *
                C141479) *
               C141327 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C58485 +
            C36781 * C58486 + C42123 * C58487 + C57776 * C58488) *
               C141327 * C1596 -
           ((C29774 * C49989 + C57772 + C57772 + C141219 * C49993) * C58488 +
            C57776 * C58487 + C42123 * C58486 + C36781 * C58485) *
               C141327 * C141499) *
              C141281 * C818 +
          ((C36782 * C58485 + C52409 * C58486 + C59584 * C58487 +
            (C29774 * C49990 + C59581 + C59581 + C141219 * C49994) * C58488) *
               C141327 * C141499 -
           (C59584 * C58488 + C52409 * C58487 + C36782 * C58486 +
            (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C58485) *
               C141327 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexy[74] +=
        (-std::pow(Pi, 2.5) *
         (((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
              C21920 * C2960 + C21821 * C3026) *
                 C29775 +
             (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
              C21920 * C2964 + C21821 * C3030) *
                 C141219) *
                C141479 +
            ((C36893 + C36894 + C36895) * C29775 +
             (C36896 + C36897 + C36898) * C141219) *
                C141365) *
               C1596 -
           (((C21920 * C29089 + C21821 * C29175 + C21919 * C13208 +
              C21820 * C13297 + C21918 * C5329 + C21819 * C5395) *
                 C141219 +
             (C21920 * C29087 + C21821 * C29173 + C21919 * C13205 +
              C21820 * C13294 + C21918 * C5325 + C21819 * C5391) *
                 C29775) *
                C141365 +
            ((C36898 + C36897 + C36896) * C141219 +
             (C36895 + C36894 + C36893) * C29775) *
                C141479) *
               C141499) *
              C141281 * C818 +
          ((((C23870 + C23869 + C23868) * C29775 +
             (C23867 + C23866 + C23865) * C141219) *
                C141479 +
            ((C21918 * C5326 + C21819 * C5392 + C21919 * C13206 +
              C21820 * C13295 + C21920 * C29088 + C21821 * C29174) *
                 C29775 +
             (C21918 * C5330 + C21819 * C5396 + C21919 * C13209 +
              C21820 * C13298 + C21920 * C29090 + C21821 * C29176) *
                 C141219) *
                C141365) *
               C141499 -
           (((C23865 + C23866 + C23867) * C141219 +
             (C23868 + C23869 + C23870) * C29775) *
                C141365 +
            ((C21951 + C21950 + C21949) * C141219 +
             (C21948 + C21947 + C21946) * C29775) *
                C141479) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C5869 +
             (C188 * C114 + C141327 * C195) * C5863 + C218 * C5871 +
             C219 * C5864 + C220 * C5873 + C221 * C5865) *
                C141479 +
            (C15883 + C15884 + C15859 + C15860 + C15861 + C15862) * C141365) *
               C1596 -
           ((C15879 * C5865 + C15880 * C5873 + C15881 * C5864 + C15882 * C5871 +
             (C188 * C5329 + C141327 * C5395) * C5863 +
             (C188 * C5325 + C141327 * C5391) * C5869) *
                C141365 +
            (C15862 + C15861 + C15860 + C15859 + C15884 + C15883) * C141479) *
               C141499) *
              C141281 * C818 +
          (((C15871 + C15872 + C15873 + C15874 + C15875 + C15876) * C141479 +
            (C15882 * C5869 + C15881 * C5863 + C15880 * C5871 + C15879 * C5864 +
             (C188 * C5328 + C141327 * C5394) * C5873 +
             (C188 * C5332 + C141327 * C5398) * C5865) *
                C141365) *
               C141499 -
           ((C15876 + C15875 + C15874 + C15873 + C15872 + C15871) * C141365 +
            (C223 * C5865 + C222 * C5873 + C221 * C5864 + C220 * C5871 +
             C219 * C5863 + C218 * C5869) *
                C141479) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C29775 +
             (C188 * C114 + C141327 * C195) * C141219) *
                C58485 +
            (C59651 + C59652) * C58486 + (C59653 + C59654) * C58487 +
            (C59655 + C59656) * C58488) *
               C1596 -
           (((C188 * C49991 + C141327 * C50084) * C141219 +
             (C188 * C49989 + C141327 * C50082) * C29775) *
                C58488 +
            (C59656 + C59655) * C58487 + (C59654 + C59653) * C58486 +
            (C59652 + C59651) * C58485) *
               C141499) *
              C141281 * C818 +
          (((C59657 + C59658) * C58485 + (C59659 + C59660) * C58486 +
            (C59661 + C59662) * C58487 +
            ((C188 * C49990 + C141327 * C50083) * C29775 +
             (C188 * C49992 + C141327 * C50085) * C141219) *
                C58488) *
               C141499 -
           ((C59662 + C59661) * C58488 + (C59660 + C59659) * C58487 +
            (C59658 + C59657) * C58486 +
            (C219 * C141219 + C218 * C29775) * C58485) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[74] +=
        (-std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C29775 +
             (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
              C141365 * C1789) *
                 C141219) *
                C21819 +
            ((C35986 + C35987) * C29775 + (C35988 + C35989) * C141219) *
                C21820 +
            ((C35990 + C35991) * C29775 + (C35992 + C35993) * C141219) *
                C21821) *
               C1596 -
           (((C14079 * C29089 + C141365 * C29253 + C14078 * C10473 +
              C141479 * C10702) *
                 C141219 +
             (C14079 * C29087 + C141365 * C29251 + C14078 * C10470 +
              C141479 * C10699) *
                 C29775) *
                C21821 +
            ((C14079 * C13208 + C141365 * C13377 + C14078 * C3494 +
              C141479 * C3650) *
                 C141219 +
             (C14079 * C13205 + C141365 * C13374 + C14078 * C3490 +
              C141479 * C3646) *
                 C29775) *
                C21820 +
            ((C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
              C141479 * C1789) *
                 C141219 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C29775) *
                C21819) *
               C141499) *
              C141281 * C818 +
          ((((C16006 + C16005) * C29775 + (C16004 + C16003) * C141219) *
                C21819 +
            ((C14078 * C3491 + C141479 * C3647 + C14079 * C13206 +
              C141365 * C13375) *
                 C29775 +
             (C14078 * C3495 + C141479 * C3651 + C14079 * C13209 +
              C141365 * C13378) *
                 C141219) *
                C21820 +
            ((C14078 * C10471 + C141479 * C10700 + C14079 * C29088 +
              C141365 * C29252) *
                 C29775 +
             (C14078 * C10474 + C141479 * C10703 + C14079 * C29090 +
              C141365 * C29254) *
                 C141219) *
                C21821) *
               C141499 -
           (((C35997 + C35996) * C141219 + (C35995 + C35994) * C29775) *
                C21821 +
            ((C14970 + C14971) * C141219 + (C14972 + C14973) * C29775) *
                C21820 +
            ((C14108 + C14107) * C141219 + (C14106 + C14105) * C29775) *
                C21819) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C5869 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C5863 +
            (C14105 + C14106) * C5871 + (C14107 + C14108) * C5864 +
            C14117 * C5873 + C14118 * C5865) *
               C141327 * C1596 -
           ((C15999 + C16000) * C5865 + (C16001 + C16002) * C5873 +
            (C16003 + C16004) * C5864 + (C16005 + C16006) * C5871 +
            (C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
             C141479 * C1789) *
                C5863 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C5869) *
               C141327 * C141499) *
              C141281 * C818 +
          (((C16006 + C16005) * C5869 + (C16004 + C16003) * C5863 +
            (C16002 + C16001) * C5871 + (C16000 + C15999) * C5864 +
            (C14078 * C1598 + C141479 * C1781 + C14079 * C5328 +
             C141365 * C5452) *
                C5873 +
            (C14078 * C1603 + C141479 * C1786 + C14079 * C5332 +
             C141365 * C5456) *
                C5865) *
               C141327 * C141499 -
           ((C14113 + C14114) * C5865 + (C14115 + C14116) * C5873 +
            (C14112 + C14111) * C5864 + (C14110 + C14109) * C5871 +
            (C14108 + C14107) * C5863 + (C14106 + C14105) * C5869) *
               C141327 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C58590 * C108 + C58485 * C276 + C58591 * C1601 + C58486 * C1784 +
             C58592 * C5325 + C58487 * C5449 + C58593 * C21035 +
             C58488 * C21228) *
                C29775 +
            (C58590 * C114 + C58485 * C282 + C58591 * C1606 + C58486 * C1789 +
             C58592 * C5329 + C58487 * C5453 + C58593 * C21038 +
             C58488 * C21231) *
                C141219) *
               C141327 * C1596 -
           ((C58593 * C49991 + C58488 * C50175 + C58592 * C21038 +
             C58487 * C21231 + C58591 * C5329 + C58486 * C5453 +
             C58590 * C1606 + C58485 * C1789) *
                C141219 +
            (C58593 * C49989 + C58488 * C50173 + C58592 * C21035 +
             C58487 * C21228 + C58591 * C5325 + C58486 * C5449 +
             C58590 * C1601 + C58485 * C1784) *
                C29775) *
               C141327 * C141499) *
              C141281 * C818 +
          (((C58590 * C1600 + C58485 * C1783 + C58591 * C5326 + C58486 * C5450 +
             C58592 * C21036 + C58487 * C21229 + C58593 * C49990 +
             C58488 * C50174) *
                C29775 +
            (C58590 * C1605 + C58485 * C1788 + C58591 * C5330 + C58486 * C5454 +
             C58592 * C21039 + C58487 * C21232 + C58593 * C49992 +
             C58488 * C50176) *
                C141219) *
               C141327 * C141499 -
           ((C58593 * C21039 + C58488 * C21232 + C58592 * C5330 +
             C58487 * C5454 + C58591 * C1605 + C58486 * C1788 + C58590 * C115 +
             C58485 * C283) *
                C141219 +
            (C58593 * C21036 + C58488 * C21229 + C58592 * C5326 +
             C58487 * C5450 + C58591 * C1600 + C58486 * C1783 + C58590 * C109 +
             C58485 * C277) *
                C29775) *
               C141327 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[74] +=
        (-std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C21918 +
             (C29775 * C189 + C141219 * C362) * C21819 + C30547 * C21919 +
             C30548 * C21820 + C30549 * C21920 + C30550 * C21821) *
                C141479 +
            (C37115 + C37116 + C37099 + C37100 + C37101 + C37102) * C141365) *
               C1596 -
           (((C29775 * C29173 + C141219 * C29329) * C21821 +
             (C29775 * C29087 + C141219 * C29089) * C21920 +
             (C29775 * C13294 + C141219 * C13454) * C21820 +
             (C29775 * C13205 + C141219 * C13208) * C21919 +
             (C29775 * C5391 + C141219 * C5507) * C21819 +
             (C29775 * C5325 + C141219 * C5329) * C21918) *
                C141365 +
            (C37102 + C37101 + C37100 + C37099 + C37116 + C37115) * C141479) *
               C141499) *
              C141281 * C818 +
          (((C37117 + C37118 + C37107 + C37108 + C37109 + C37110) * C141479 +
            ((C29775 * C5326 + C141219 * C5330) * C21918 +
             (C29775 * C5392 + C141219 * C5508) * C21819 +
             (C29775 * C13206 + C141219 * C13209) * C21919 +
             (C29775 * C13295 + C141219 * C13455) * C21820 +
             (C29775 * C29088 + C141219 * C29090) * C21920 +
             (C29775 * C29174 + C141219 * C29330) * C21821) *
                C141365) *
               C141499 -
           ((C37110 + C37109 + C37108 + C37107 + C37118 + C37117) * C141365 +
            (C30556 * C21821 + C30555 * C21920 + C30554 * C21820 +
             C30553 * C21919 + (C29775 * C190 + C141219 * C363) * C21819 +
             (C29775 * C109 + C141219 * C115) * C21918) *
                C141479) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C188 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
              C5873 * C191 + C5865 * C364) *
                 C141327) *
                C141479 +
            ((C16129 + C16130 + C16131) * C188 +
             (C16132 + C16133 + C16134) * C141327) *
                C141365) *
               C1596 -
           (((C5873 * C5393 + C5865 * C5509 + C5871 * C5392 + C5864 * C5508 +
              C5869 * C5391 + C5863 * C5507) *
                 C141327 +
             (C5873 * C5327 + C5865 * C5331 + C5871 * C5326 + C5864 * C5330 +
              C5869 * C5325 + C5863 * C5329) *
                 C188) *
                C141365 +
            ((C16134 + C16133 + C16132) * C141327 +
             (C16131 + C16130 + C16129) * C188) *
                C141479) *
               C141499) *
              C141281 * C818 +
          ((((C16135 + C16136 + C16137) * C188 +
             (C16138 + C16139 + C16140) * C141327) *
                C141479 +
            ((C5869 * C5326 + C5863 * C5330 + C5871 * C5327 + C5864 * C5331 +
              C5873 * C5328 + C5865 * C5332) *
                 C188 +
             (C5869 * C5392 + C5863 * C5508 + C5871 * C5393 + C5864 * C5509 +
              C5873 * C5394 + C5865 * C5510) *
                 C141327) *
                C141365) *
               C141499 -
           (((C16140 + C16139 + C16138) * C141327 +
             (C16137 + C16136 + C16135) * C188) *
                C141365 +
            ((C5873 * C192 + C5865 * C365 + C5871 * C191 + C5864 * C364 +
              C5869 * C190 + C5863 * C363) *
                 C141327 +
             (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
              C5869 * C109 + C5863 * C115) *
                 C188) *
                C141479) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C188 +
             (C29775 * C189 + C141219 * C362) * C141327) *
                C58485 +
            (C59795 + C59796) * C58486 + (C59797 + C59798) * C58487 +
            (C59799 + C59800) * C58488) *
               C1596 -
           (((C29775 * C50082 + C141219 * C50251) * C141327 +
             (C29775 * C49989 + C141219 * C49991) * C188) *
                C58488 +
            (C59800 + C59799) * C58487 + (C59798 + C59797) * C58486 +
            (C59796 + C59795) * C58485) *
               C141499) *
              C141281 * C818 +
          (((C59801 + C59802) * C58485 + (C59803 + C59804) * C58486 +
            (C59811 + C59812) * C58487 +
            ((C29775 * C49990 + C141219 * C49992) * C188 +
             (C29775 * C50083 + C141219 * C50252) * C141327) *
                C58488) *
               C141499 -
           ((C59812 + C59811) * C58488 + (C59804 + C59803) * C58487 +
            (C59802 + C59801) * C58486 +
            ((C29775 * C190 + C141219 * C363) * C141327 +
             (C29775 * C109 + C141219 * C115) * C188) *
                C58485) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[74] +=
        (-std::pow(Pi, 2.5) *
         ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
             C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
             C22185 + C21821 * C3196) *
                C141219 * C141479 +
            (C37229 + C37230 + C37231) * C141219 * C141365) *
               C1596 -
           ((C22181 * C29087 + C29410 + C29410 + C21821 * C29405 +
             C22180 * C13205 + C29409 + C29409 + C21820 * C13531 +
             C22179 * C5325 + C29408 + C29408 + C21819 * C5561) *
                C141219 * C141365 +
            (C37231 + C37230 + C37229) * C141219 * C141479) *
               C141499) *
              C141281 * C818 +
          (((C24194 + C24193 + C24192) * C141219 * C141479 +
            (C22179 * C5326 + C29411 + C29411 + C21819 * C5562 +
             C22180 * C13206 + C29412 + C29412 + C21820 * C13532 +
             C22181 * C29088 + C29413 + C29413 + C21821 * C29406) *
                C141219 * C141365) *
               C141499 -
           ((C24192 + C24193 + C24194) * C141219 * C141365 +
            (C22221 + C22220 + C22219) * C141219 * C141479) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C5863 +
             C448 * C5864 + C449 * C5865) *
                C141479 +
            (C16259 + C16241 + C16242) * C141365) *
               C1596 -
           ((C16257 * C5865 + C16258 * C5864 +
             (C418 * C5325 + C5566 + C5566 + C141327 * C5561) * C5863) *
                C141365 +
            (C16242 + C16241 + C16259) * C141479) *
               C141499) *
              C141281 * C818 +
          (((C16247 + C16248 + C16249) * C141479 +
            (C16258 * C5863 + C16257 * C5864 +
             (C418 * C5328 + C5569 + C5569 + C141327 * C5564) * C5865) *
                C141365) *
               C141499 -
           ((C16249 + C16248 + C16247) * C141365 +
            (C450 * C5865 + C449 * C5864 + C448 * C5863) * C141479) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C141219 * C58485 +
            C59879 * C58486 + C59880 * C58487 + C59881 * C58488) *
               C1596 -
           ((C418 * C49989 + C50351 + C50351 + C141327 * C50344) * C141219 *
                C58488 +
            C59881 * C58487 + C59880 * C58486 + C59879 * C58485) *
               C141499) *
              C141281 * C818 +
          ((C59882 * C58485 + C59883 * C58486 + C59884 * C58487 +
            (C418 * C49990 + C50352 + C50352 + C141327 * C50345) * C141219 *
                C58488) *
               C141499 -
           (C59884 * C58488 + C59883 * C58487 + C59882 * C58486 +
            C448 * C141219 * C58485) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[74] +=
        (-std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C21918 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C21819 +
            (C35986 + C35987) * C21919 + (C36316 + C36317) * C21820 +
            (C35990 + C35991) * C21920 + (C36318 + C36319) * C21821) *
               C141219 * C1596 -
           ((C14079 * C29173 + C141365 * C29487 + C14078 * C10595 +
             C141479 * C11041) *
                C21821 +
            (C14079 * C29087 + C141365 * C29251 + C14078 * C10470 +
             C141479 * C10699) *
                C21920 +
            (C14079 * C13294 + C141365 * C13614 + C14078 * C3572 +
             C141479 * C3864) *
                C21820 +
            (C14079 * C13205 + C141365 * C13374 + C14078 * C3490 +
             C141479 * C3646) *
                C21919 +
            (C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
             C141479 * C2040) *
                C21819 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C21918) *
               C141219 * C141499) *
              C141281 * C818 +
          (((C16006 + C16005) * C21918 + (C16369 + C16368) * C21819 +
            (C14078 * C3491 + C141479 * C3647 + C14079 * C13206 +
             C141365 * C13375) *
                C21919 +
            (C14078 * C3573 + C141479 * C3865 + C14079 * C13295 +
             C141365 * C13615) *
                C21820 +
            (C14078 * C10471 + C141479 * C10700 + C14079 * C29088 +
             C141365 * C29252) *
                C21920 +
            (C14078 * C10596 + C141479 * C11042 + C14079 * C29174 +
             C141365 * C29488) *
                C21821) *
               C141219 * C141499 -
           ((C36321 + C36320) * C21821 + (C35995 + C35994) * C21920 +
            (C15288 + C15289) * C21820 + (C14972 + C14973) * C21919 +
            (C14355 + C14354) * C21819 + (C14106 + C14105) * C21918) *
               C141219 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C188 +
             (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
              C141365 * C2040) *
                 C141327) *
                C5863 +
            ((C14105 + C14106) * C188 + (C14354 + C14355) * C141327) * C5864 +
            C14362 * C5865) *
               C1596 -
           (((C16366 + C16367) * C141327 + (C16001 + C16002) * C188) * C5865 +
            ((C16368 + C16369) * C141327 + (C16005 + C16006) * C188) * C5864 +
            ((C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
              C141479 * C2040) *
                 C141327 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C188) *
                C5863) *
               C141499) *
              C141281 * C818 +
          ((((C16006 + C16005) * C188 + (C16369 + C16368) * C141327) * C5863 +
            ((C16002 + C16001) * C188 + (C16367 + C16366) * C141327) * C5864 +
            ((C14078 * C1598 + C141479 * C1781 + C14079 * C5328 +
              C141365 * C5452) *
                 C188 +
             (C14078 * C1687 + C141479 * C2037 + C14079 * C5394 +
              C141365 * C5622) *
                 C141327) *
                C5865) *
               C141499 -
           (((C14358 + C14359) * C141327 + (C14115 + C14116) * C188) * C5865 +
            ((C14357 + C14356) * C141327 + (C14110 + C14109) * C188) * C5864 +
            ((C14355 + C14354) * C141327 + (C14106 + C14105) * C188) * C5863) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C58590 * C108 + C58485 * C276 + C58591 * C1601 + C58486 * C1784 +
             C58592 * C5325 + C58487 * C5449 + C58593 * C21035 +
             C58488 * C21228) *
                C188 +
            (C58590 * C189 + C58485 * C501 + C58591 * C1690 + C58486 * C2040 +
             C58592 * C5391 + C58487 * C5619 + C58593 * C21136 +
             C58488 * C21491) *
                C141327) *
               C141219 * C1596 -
           ((C58593 * C50082 + C58488 * C50430 + C58592 * C21136 +
             C58487 * C21491 + C58591 * C5391 + C58486 * C5619 +
             C58590 * C1690 + C58485 * C2040) *
                C141327 +
            (C58593 * C49989 + C58488 * C50173 + C58592 * C21035 +
             C58487 * C21228 + C58591 * C5325 + C58486 * C5449 +
             C58590 * C1601 + C58485 * C1784) *
                C188) *
               C141219 * C141499) *
              C141281 * C818 +
          (((C58590 * C1600 + C58485 * C1783 + C58591 * C5326 + C58486 * C5450 +
             C58592 * C21036 + C58487 * C21229 + C58593 * C49990 +
             C58488 * C50174) *
                C188 +
            (C58590 * C1689 + C58485 * C2039 + C58591 * C5392 + C58486 * C5620 +
             C58592 * C21137 + C58487 * C21492 + C58593 * C50083 +
             C58488 * C50431) *
                C141327) *
               C141219 * C141499 -
           ((C58593 * C21137 + C58488 * C21492 + C58592 * C5392 +
             C58487 * C5620 + C58591 * C1689 + C58486 * C2039 + C58590 * C190 +
             C58485 * C502) *
                C141327 +
            (C58593 * C21036 + C58488 * C21229 + C58592 * C5326 +
             C58487 * C5450 + C58591 * C1600 + C58486 * C1783 + C58590 * C109 +
             C58485 * C277) *
                C188) *
               C141219 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[74] += (-std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C14078 +
                       (C29775 * C276 + C141219 * C579) * C141479 +
                       C37111 * C14079 + C37432 * C141365) *
                          C21819 +
                      (C36420 + C36421 + C36422 + C36423) * C21820 +
                      (C36424 + C36425 + C36426 + C36427) * C21821) *
                         C1596 -
                     (((C29775 * C29251 + C141219 * C29563) * C141365 +
                       (C29775 * C29087 + C141219 * C29089) * C14079 +
                       C33176 * C141479 + C32955 * C14078) *
                          C21821 +
                      ((C29775 * C13374 + C141219 * C13691) * C141365 +
                       (C29775 * C13205 + C141219 * C13208) * C14079 +
                       C33177 * C141479 + C32957 * C14078) *
                          C21820 +
                      ((C29775 * C5449 + C141219 * C5673) * C141365 +
                       (C29775 * C5325 + C141219 * C5329) * C14079 +
                       C37432 * C141479 + C37111 * C14078) *
                          C21819) *
                         C141499) *
                        C141281 * C818 +
                    (((C37113 * C14078 + C37433 * C141479 +
                       (C29775 * C5326 + C141219 * C5330) * C14079 +
                       (C29775 * C5450 + C141219 * C5674) * C141365) *
                          C21819 +
                      (C36104 * C14078 + C36438 * C141479 +
                       (C29775 * C13206 + C141219 * C13209) * C14079 +
                       (C29775 * C13375 + C141219 * C13692) * C141365) *
                          C21820 +
                      (C36106 * C14078 + C36439 * C141479 +
                       (C29775 * C29088 + C141219 * C29090) * C14079 +
                       (C29775 * C29252 + C141219 * C29564) * C141365) *
                          C21821) *
                         C141499 -
                     ((C36441 + C36435 + C36434 + C36433) * C21821 +
                      (C36440 + C36430 + C36429 + C36428) * C21820 +
                      (C37433 * C141365 + C37113 * C14079 +
                       (C29775 * C277 + C141219 * C580) * C141479 +
                       (C29775 * C109 + C141219 * C115) * C14078) *
                          C21819) *
                         C1596) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                       C5864 * C115 + C5873 * C110 + C5865 * C116) *
                          C14078 +
                      (C5869 * C276 + C5863 * C579 + C5871 * C277 +
                       C5864 * C580 + C5873 * C278 + C5865 * C581) *
                          C141479 +
                      (C16129 + C16130 + C16131) * C14079 +
                      (C16480 + C16481 + C16482) * C141365) *
                         C141327 * C1596 -
                     ((C5873 * C5451 + C5865 * C5675 + C5871 * C5450 +
                       C5864 * C5674 + C5869 * C5449 + C5863 * C5673) *
                          C141365 +
                      (C5873 * C5327 + C5865 * C5331 + C5871 * C5326 +
                       C5864 * C5330 + C5869 * C5325 + C5863 * C5329) *
                          C14079 +
                      (C16482 + C16481 + C16480) * C141479 +
                      (C16131 + C16130 + C16129) * C14078) *
                         C141327 * C141499) *
                        C141281 * C818 +
                    (((C16135 + C16136 + C16137) * C14078 +
                      (C16483 + C16484 + C16485) * C141479 +
                      (C5869 * C5326 + C5863 * C5330 + C5871 * C5327 +
                       C5864 * C5331 + C5873 * C5328 + C5865 * C5332) *
                          C14079 +
                      (C5869 * C5450 + C5863 * C5674 + C5871 * C5451 +
                       C5864 * C5675 + C5873 * C5452 + C5865 * C5676) *
                          C141365) *
                         C141327 * C141499 -
                     ((C16485 + C16484 + C16483) * C141365 +
                      (C16137 + C16136 + C16135) * C14079 +
                      (C5873 * C279 + C5865 * C582 + C5871 * C278 +
                       C5864 * C581 + C5869 * C277 + C5863 * C580) *
                          C141479 +
                      (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                       C5864 * C116 + C5869 * C109 + C5863 * C115) *
                          C14078) *
                         C141327 * C1596) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C29775 * C108 + C141219 * C114) * C58590 +
                      (C29775 * C276 + C141219 * C579) * C58485 +
                      C37111 * C58591 + C37432 * C58486 + C42383 * C58592 +
                      C42634 * C58487 + C58030 * C58593 + C58275 * C58488) *
                         C141327 * C1596 -
                     ((C29775 * C50173 + C141219 * C50506) * C58488 +
                      (C29775 * C49989 + C141219 * C49991) * C58593 +
                      C58275 * C58487 + C58030 * C58592 + C42634 * C58486 +
                      C42383 * C58591 + C37432 * C58485 + C37111 * C58590) *
                         C141327 * C141499) *
                        C141281 * C818 +
                    ((C37113 * C58590 + C37433 * C58485 + C52758 * C58591 +
                      C53092 * C58486 + C59809 * C58592 + C60019 * C58487 +
                      (C29775 * C49990 + C141219 * C49992) * C58593 +
                      (C29775 * C50174 + C141219 * C50507) * C58488) *
                         C141327 * C141499 -
                     (C60019 * C58488 + C59809 * C58593 + C53092 * C58487 +
                      C52758 * C58592 + C37433 * C58486 + C37113 * C58591 +
                      (C29775 * C277 + C141219 * C580) * C58485 +
                      (C29775 * C109 + C141219 * C115) * C58590) *
                         C141327 * C1596) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[74] +=
        (-std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C14078 +
            (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
             C21920 * C3084 + C21821 * C3362) *
                C141479 +
            (C36893 + C36894 + C36895) * C14079 +
            (C37538 + C37539 + C37540) * C141365) *
               C141219 * C1596 -
           ((C21920 * C29251 + C21821 * C29639 + C21919 * C13374 +
             C21820 * C13768 + C21918 * C5449 + C21819 * C5727) *
                C141365 +
            (C21920 * C29087 + C21821 * C29173 + C21919 * C13205 +
             C21820 * C13294 + C21918 * C5325 + C21819 * C5391) *
                C14079 +
            (C37540 + C37539 + C37538) * C141479 +
            (C36895 + C36894 + C36893) * C14078) *
               C141219 * C141499) *
              C141281 * C818 +
          (((C23870 + C23869 + C23868) * C14078 +
            (C24506 + C24505 + C24504) * C141479 +
            (C21918 * C5326 + C21819 * C5392 + C21919 * C13206 +
             C21820 * C13295 + C21920 * C29088 + C21821 * C29174) *
                C14079 +
            (C21918 * C5450 + C21819 * C5728 + C21919 * C13375 +
             C21820 * C13769 + C21920 * C29252 + C21821 * C29640) *
                C141365) *
               C141219 * C141499 -
           ((C24504 + C24505 + C24506) * C141365 +
            (C23868 + C23869 + C23870) * C14079 +
            (C22473 + C22472 + C22471) * C141479 +
            (C21948 + C21947 + C21946) * C14078) *
               C141219 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C14078 +
             (C188 * C276 + C141327 * C635) * C141479 + C15877 * C14079 +
             C16596 * C141365) *
                C5863 +
            (C14511 + C14512 + C14513 + C14514) * C5864 + C14525 * C5865) *
               C1596 -
           ((C16599 + C16588 + C16589 + C16590) * C5865 +
            (C16600 + C16593 + C16594 + C16595) * C5864 +
            ((C188 * C5449 + C141327 * C5727) * C141365 +
             (C188 * C5325 + C141327 * C5391) * C14079 + C16596 * C141479 +
             C15877 * C14078) *
                C5863) *
               C141499) *
              C141281 * C818 +
          (((C16595 + C16594 + C16593 + C16600) * C5863 +
            (C16590 + C16589 + C16588 + C16599) * C5864 +
            (C1711 * C14078 + C2209 * C141479 +
             (C188 * C5328 + C141327 * C5394) * C14079 +
             (C188 * C5452 + C141327 * C5730) * C141365) *
                C5865) *
               C141499 -
           ((C14519 + C14520 + C14521 + C14522) * C5865 +
            (C14518 + C14517 + C14516 + C14515) * C5864 +
            (C14514 + C14513 + C14512 + C14511) * C5863) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C58590 +
            (C188 * C276 + C141327 * C635) * C58485 + C15877 * C58591 +
            C16596 * C58486 + C21152 * C58592 + C21660 * C58487 +
            C50096 * C58593 + C50594 * C58488) *
               C141219 * C1596 -
           ((C188 * C50173 + C141327 * C50589) * C58488 +
            (C188 * C49989 + C141327 * C50082) * C58593 + C50594 * C58487 +
            C50096 * C58592 + C21660 * C58486 + C21152 * C58591 +
            C16596 * C58485 + C15877 * C58590) *
               C141219 * C141499) *
              C141281 * C818 +
          ((C1715 * C58590 + C2211 * C58485 + C15882 * C58591 +
            C16598 * C58486 + C44805 * C58592 + C45513 * C58487 +
            (C188 * C49990 + C141327 * C50083) * C58593 +
            (C188 * C50174 + C141327 * C50590) * C58488) *
               C141219 * C141499 -
           (C45513 * C58488 + C44805 * C58593 + C16598 * C58487 +
            C15882 * C58592 + C2211 * C58486 + C1715 * C58591 + C654 * C58485 +
            C218 * C58590) *
               C141219 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[74] += (-std::pow(Pi, 2.5) *
                   ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                       C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                          C21819 +
                      (C36666 + C36667) * C21820 + (C36668 + C36669) * C21821) *
                         C141219 * C1596 -
                     ((C14600 * C29087 + C37639 + C37639 + C141365 * C29715 +
                       C14599 * C10470 + C37640 + C37640 + C141479 * C11356) *
                          C21821 +
                      (C14600 * C13205 + C19193 + C19193 + C141365 * C13845 +
                       C14599 * C3490 + C19192 + C19192 + C141479 * C4074) *
                          C21820 +
                      (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
                       C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                          C21819) *
                         C141219 * C141499) *
                        C141281 * C818 +
                    (((C16726 + C16725) * C21819 +
                      (C14599 * C3491 + C19194 + C19194 + C141479 * C4075 +
                       C14600 * C13206 + C19195 + C19195 + C141365 * C13846) *
                          C21820 +
                      (C14599 * C10471 + C37641 + C37641 + C141479 * C11357 +
                       C14600 * C29088 + C37642 + C37642 + C141365 * C29716) *
                          C21821) *
                         C141219 * C141499 -
                     ((C36671 + C36670) * C21821 + (C15624 + C15625) * C21820 +
                      (C14637 + C14636) * C21819) *
                         C141219 * C1596) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                       C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                          C141327 * C5863 +
                      (C14636 + C14637) * C141327 * C5864 + C14643 * C5865) *
                         C1596 -
                     ((C16723 + C16724) * C141327 * C5865 +
                      (C16725 + C16726) * C141327 * C5864 +
                      (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
                       C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                          C141327 * C5863) *
                         C141499) *
                        C141281 * C818 +
                    (((C16726 + C16725) * C141327 * C5863 +
                      (C16724 + C16723) * C141327 * C5864 +
                      (C14599 * C1598 + C16713 + C16713 + C141479 * C2280 +
                       C14600 * C5328 + C16714 + C16714 + C141365 * C5784) *
                          C141327 * C5865) *
                         C141499 -
                     ((C14640 + C14641) * C141327 * C5865 +
                      (C14639 + C14638) * C141327 * C5864 +
                      (C14637 + C14636) * C141327 * C5863) *
                         C1596) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C58894 * C108 + C58899 + C58899 + C58485 * C714 +
                      C58895 * C1601 + C58900 + C58900 + C58486 * C2283 +
                      C58896 * C5325 + C58901 + C58901 + C58487 * C5781 +
                      C58897 * C21035 + C58902 + C58902 + C58488 * C21734) *
                         C141327 * C141219 * C1596 -
                     (C58897 * C49989 + C60152 + C60152 + C58488 * C50668 +
                      C58896 * C21035 + C60153 + C60153 + C58487 * C21734 +
                      C58895 * C5325 + C60154 + C60154 + C58486 * C5781 +
                      C58894 * C1601 + C60155 + C60155 + C58485 * C2283) *
                         C141327 * C141219 * C141499) *
                        C141281 * C818 +
                    ((C58894 * C1600 + C60156 + C60156 + C58485 * C2282 +
                      C58895 * C5326 + C60157 + C60157 + C58486 * C5782 +
                      C58896 * C21036 + C60158 + C60158 + C58487 * C21735 +
                      C58897 * C49990 + C60159 + C60159 + C58488 * C50669) *
                         C141327 * C141219 * C141499 -
                     (C58897 * C21036 + C58903 + C58903 + C58488 * C21735 +
                      C58896 * C5326 + C58904 + C58904 + C58487 * C5782 +
                      C58895 * C1600 + C58905 + C58905 + C58486 * C2282 +
                      C58894 * C109 + C58906 + C58906 + C58485 * C715) *
                         C141327 * C141219 * C1596) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[75] +=
        (-std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141479 +
             C36781 * C141365) *
                C21819 +
            (C35748 + C35749) * C21820 + (C35750 + C35751) * C21821) *
               C141298 * C2374 -
           ((C32719 * C141365 + C30303 * C141479) * C21821 +
            (C35751 + C35750) * C21820 + (C35749 + C35748) * C21819) *
               C141298 * C141497) *
              C2376 +
          (((C35752 + C35764) * C21819 + (C35755 + C35765) * C21820 +
            (C30306 * C141479 +
             (C29774 * C26352 + C31000 + C31000 + C141219 * C26356) * C141365) *
                C21821) *
               C141298 * C141497 -
           ((C35765 + C35755) * C21821 + (C35764 + C35752) * C21820 +
            (C36782 * C141365 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141479) *
                C21819) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 +
             C5876 + C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
             C5865 * C122) *
                C141479 +
            (C15751 + C15752 + C15753) * C141365) *
               C141327 * C141298 * C2374 -
           ((C10495 + C10496 + C10497) * C141365 +
            (C6742 + C6741 + C6740) * C141479) *
               C141327 * C141298 * C141497) *
              C2376 +
          (((C6743 + C6744 + C6745) * C141479 +
            (C5868 * C3491 + C7821 + C7821 + C5863 * C3499 + C5870 * C3492 +
             C7822 + C7822 + C5864 * C3500 + C5872 * C3493 + C7823 + C7823 +
             C5865 * C3501) *
                C141365) *
               C141327 * C141298 * C141497 -
           ((C15756 + C15755 + C15754) * C141365 +
            (C5872 * C111 + C5884 + C5884 + C5865 * C123 + C5870 * C110 +
             C5885 + C5885 + C5864 * C122 + C5868 * C109 + C5886 + C5886 +
             C5863 * C121) *
                C141479) *
               C141327 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C58485 +
            C36781 * C58486 + C42123 * C58487 + C57776 * C58488) *
               C141327 * C141298 * C2374 -
           (C55017 * C58488 + C39350 * C58487 + C32721 * C58486 +
            C30301 * C58485) *
               C141327 * C141298 * C141497) *
              C2376 +
          ((C30304 * C58485 + C35762 * C58486 + C51452 * C58487 +
            (C29774 * C47290 + C52406 + C52406 + C141219 * C47292) * C58488) *
               C141327 * C141298 * C141497 -
           (C59584 * C58488 + C52409 * C58487 + C36782 * C58486 +
            (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C58485) *
               C141327 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexy[75] +=
        (-std::pow(Pi, 2.5) *
         (((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
              C21920 * C2960 + C21821 * C3026) *
                 C29775 +
             (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
              C21920 * C2964 + C21821 * C3030) *
                 C141219) *
                C141479 +
            ((C36893 + C36894 + C36895) * C29775 +
             (C36896 + C36897 + C36898) * C141219) *
                C141365) *
               C141298 * C2374 -
           (((C21920 * C26353 + C21821 * C26479 + C21919 * C10473 +
              C21820 * C10598 + C21918 * C3494 + C21819 * C3576) *
                 C141219 +
             (C21920 * C26351 + C21821 * C26477 + C21919 * C10470 +
              C21820 * C10595 + C21918 * C3490 + C21819 * C3572) *
                 C29775) *
                C141365 +
            ((C21920 * C9670 + C21821 * C9771 + C21919 * C2964 +
              C21820 * C3030 + C21918 * C828 + C21819 * C917) *
                 C141219 +
             (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 +
              C21820 * C3026 + C21918 * C823 + C21819 * C912) *
                 C29775) *
                C141479) *
               C141298 * C141497) *
              C2376 +
          ((((C22814 + C22813 + C22812) * C29775 +
             (C22811 + C22810 + C22809) * C141219) *
                C141479 +
            ((C21918 * C3491 + C21819 * C3573 + C21919 * C10471 +
              C21820 * C10596 + C21920 * C26352 + C21821 * C26478) *
                 C29775 +
             (C21918 * C3495 + C21819 * C3577 + C21919 * C10474 +
              C21820 * C10599 + C21920 * C26354 + C21821 * C26480) *
                 C141219) *
                C141365) *
               C141298 * C141497 -
           (((C23865 + C23866 + C23867) * C141219 +
             (C23868 + C23869 + C23870) * C29775) *
                C141365 +
            ((C21951 + C21950 + C21949) * C141219 +
             (C21948 + C21947 + C21946) * C29775) *
                C141479) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C5869 +
             (C188 * C114 + C141327 * C195) * C5863 + C218 * C5871 +
             C219 * C5864 + C220 * C5873 + C221 * C5865) *
                C141479 +
            (C15883 + C15884 + C15859 + C15860 + C15861 + C15862) * C141365) *
               C141298 * C2374 -
           ((C14848 * C5865 + C14849 * C5873 + C14850 * C5864 + C14851 * C5871 +
             (C188 * C3494 + C141327 * C3576) * C5863 +
             (C188 * C3490 + C141327 * C3572) * C5869) *
                C141365 +
            (C934 * C5865 + C935 * C5873 + C936 * C5864 + C937 * C5871 +
             (C188 * C828 + C141327 * C917) * C5863 +
             (C188 * C823 + C141327 * C912) * C5869) *
                C141479) *
               C141298 * C141497) *
              C2376 +
          (((C937 * C5869 + C936 * C5863 + C935 * C5871 + C934 * C5864 +
             C933 * C5873 + C932 * C5865) *
                C141479 +
            (C14851 * C5869 + C14850 * C5863 + C14849 * C5871 + C14848 * C5864 +
             (C188 * C3493 + C141327 * C3575) * C5873 +
             (C188 * C3497 + C141327 * C3579) * C5865) *
                C141365) *
               C141298 * C141497 -
           ((C15876 + C15875 + C15874 + C15873 + C15872 + C15871) * C141365 +
            (C223 * C5865 + C222 * C5873 + C221 * C5864 + C220 * C5871 +
             C219 * C5863 + C218 * C5869) *
                C141479) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C29775 +
             (C188 * C114 + C141327 * C195) * C141219) *
                C58485 +
            (C59651 + C59652) * C58486 + (C59653 + C59654) * C58487 +
            (C59655 + C59656) * C58488) *
               C141298 * C2374 -
           (((C188 * C42111 + C141327 * C42199) * C141219 +
             (C188 * C42109 + C141327 * C42197) * C29775) *
                C58488 +
            (C47417 * C141219 + C47416 * C29775) * C58487 +
            (C18489 * C141219 + C18488 * C29775) * C58486 +
            ((C188 * C828 + C141327 * C917) * C141219 +
             (C188 * C823 + C141327 * C912) * C29775) *
                C58485) *
               C141298 * C141497) *
              C2376 +
          (((C937 * C29775 + C936 * C141219) * C58485 +
            (C14851 * C29775 + C14850 * C141219) * C58486 +
            (C43792 * C29775 + C43791 * C141219) * C58487 +
            ((C188 * C47290 + C141327 * C47403) * C29775 +
             (C188 * C47291 + C141327 * C47404) * C141219) *
                C58488) *
               C141298 * C141497 -
           ((C59662 + C59661) * C58488 + (C59660 + C59659) * C58487 +
            (C59658 + C59657) * C58486 +
            (C219 * C141219 + C218 * C29775) * C58485) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[75] +=
        (-std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C29775 +
             (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
              C141365 * C1789) *
                 C141219) *
                C21819 +
            ((C35986 + C35987) * C29775 + (C35988 + C35989) * C141219) *
                C21820 +
            ((C35990 + C35991) * C29775 + (C35992 + C35993) * C141219) *
                C21821) *
               C141298 * C2374 -
           (((C14079 * C26353 + C141365 * C26581 + C14078 * C9670 +
              C141479 * C9851) *
                 C141219 +
             (C14079 * C26351 + C141365 * C26579 + C14078 * C9667 +
              C141479 * C9848) *
                 C29775) *
                C21821 +
            ((C35993 + C35992) * C141219 + (C35991 + C35990) * C29775) *
                C21820 +
            ((C35989 + C35988) * C141219 + (C35987 + C35986) * C29775) *
                C21819) *
               C141298 * C141497) *
              C2376 +
          ((((C14973 + C14972) * C29775 + (C14971 + C14970) * C141219) *
                C21819 +
            ((C35994 + C35995) * C29775 + (C35996 + C35997) * C141219) *
                C21820 +
            ((C14078 * C9668 + C141479 * C9849 + C14079 * C26352 +
              C141365 * C26580) *
                 C29775 +
             (C14078 * C9671 + C141479 * C9852 + C14079 * C26354 +
              C141365 * C26582) *
                 C141219) *
                C21821) *
               C141298 * C141497 -
           (((C35997 + C35996) * C141219 + (C35995 + C35994) * C29775) *
                C21821 +
            ((C14970 + C14971) * C141219 + (C14972 + C14973) * C29775) *
                C21820 +
            ((C14108 + C14107) * C141219 + (C14106 + C14105) * C29775) *
                C21819) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C5869 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C5863 +
            (C14105 + C14106) * C5871 + (C14107 + C14108) * C5864 +
            C14117 * C5873 + C14118 * C5865) *
               C141327 * C141298 * C2374 -
           ((C14966 + C14967) * C5865 + (C14968 + C14969) * C5873 +
            (C14970 + C14971) * C5864 + (C14972 + C14973) * C5871 +
            (C14079 * C3494 + C141365 * C3650 + C14078 * C828 +
             C141479 * C1011) *
                C5863 +
            (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
             C141479 * C1006) *
                C5869) *
               C141327 * C141298 * C141497) *
              C2376 +
          (((C14973 + C14972) * C5869 + (C14971 + C14970) * C5863 +
            (C14969 + C14968) * C5871 + (C14967 + C14966) * C5864 +
            (C14078 * C820 + C141479 * C1003 + C14079 * C3493 +
             C141365 * C3649) *
                C5873 +
            (C14078 * C825 + C141479 * C1008 + C14079 * C3497 +
             C141365 * C3653) *
                C5865) *
               C141327 * C141298 * C141497 -
           ((C14113 + C14114) * C5865 + (C14115 + C14116) * C5873 +
            (C14112 + C14111) * C5864 + (C14110 + C14109) * C5871 +
            (C14108 + C14107) * C5863 + (C14106 + C14105) * C5869) *
               C141327 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C58590 * C108 + C58485 * C276 + C58591 * C1601 + C58486 * C1784 +
             C58592 * C5325 + C58487 * C5449 + C58593 * C21035 +
             C58488 * C21228) *
                C29775 +
            (C58590 * C114 + C58485 * C282 + C58591 * C1606 + C58486 * C1789 +
             C58592 * C5329 + C58487 * C5453 + C58593 * C21038 +
             C58488 * C21231) *
                C141219) *
               C141327 * C141298 * C2374 -
           ((C58593 * C42111 + C58488 * C42295 + C58592 * C13208 +
             C58487 * C13377 + C58591 * C3494 + C58486 * C3650 + C58590 * C828 +
             C58485 * C1011) *
                C141219 +
            (C58593 * C42109 + C58488 * C42293 + C58592 * C13205 +
             C58487 * C13374 + C58591 * C3490 + C58486 * C3646 + C58590 * C823 +
             C58485 * C1006) *
                C29775) *
               C141327 * C141298 * C141497) *
              C2376 +
          (((C58590 * C822 + C58485 * C1005 + C58591 * C3491 + C58486 * C3647 +
             C58592 * C13206 + C58487 * C13375 + C58593 * C47290 +
             C58488 * C47517) *
                C29775 +
            (C58590 * C827 + C58485 * C1010 + C58591 * C3495 + C58486 * C3651 +
             C58592 * C13209 + C58487 * C13378 + C58593 * C47291 +
             C58488 * C47518) *
                C141219) *
               C141327 * C141298 * C141497 -
           ((C58593 * C21039 + C58488 * C21232 + C58592 * C5330 +
             C58487 * C5454 + C58591 * C1605 + C58486 * C1788 + C58590 * C115 +
             C58485 * C283) *
                C141219 +
            (C58593 * C21036 + C58488 * C21229 + C58592 * C5326 +
             C58487 * C5450 + C58591 * C1600 + C58486 * C1783 + C58590 * C109 +
             C58485 * C277) *
                C29775) *
               C141327 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[75] +=
        (-std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C21918 +
             (C29775 * C189 + C141219 * C362) * C21819 + C30547 * C21919 +
             C30548 * C21820 + C30549 * C21920 + C30550 * C21821) *
                C141479 +
            (C37115 + C37116 + C37099 + C37100 + C37101 + C37102) * C141365) *
               C141298 * C2374 -
           ((C32952 * C21821 + C32953 * C21920 + C32954 * C21820 +
             C32955 * C21919 + C32956 * C21819 + C32957 * C21918) *
                C141365 +
            (C30552 * C21821 + C30551 * C21920 + C30550 * C21820 +
             C30549 * C21919 + C30548 * C21819 + C30547 * C21918) *
                C141479) *
               C141298 * C141497) *
              C2376 +
          (((C30553 * C21918 + C30554 * C21819 + C30555 * C21919 +
             C30556 * C21820 + C30557 * C21920 + C30558 * C21821) *
                C141479 +
            (C36104 * C21918 + C36105 * C21819 + C36106 * C21919 +
             C36107 * C21820 + (C29775 * C26352 + C141219 * C26354) * C21920 +
             (C29775 * C26478 + C141219 * C26696) * C21821) *
                C141365) *
               C141298 * C141497 -
           ((C37110 + C37109 + C37108 + C37107 + C37118 + C37117) * C141365 +
            (C30556 * C21821 + C30555 * C21920 + C30554 * C21820 +
             C30553 * C21919 + (C29775 * C190 + C141219 * C363) * C21819 +
             (C29775 * C109 + C141219 * C115) * C21918) *
                C141479) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C188 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
              C5873 * C191 + C5865 * C364) *
                 C141327) *
                C141479 +
            ((C16129 + C16130 + C16131) * C188 +
             (C16132 + C16133 + C16134) * C141327) *
                C141365) *
               C141298 * C2374 -
           (((C10831 + C10832 + C10833) * C141327 +
             (C10834 + C10835 + C10836) * C188) *
                C141365 +
            ((C7123 + C7122 + C7121) * C141327 +
             (C7120 + C7119 + C7118) * C188) *
                C141479) *
               C141298 * C141497) *
              C2376 +
          ((((C7124 + C7125 + C7126) * C188 +
             (C7127 + C7128 + C7129) * C141327) *
                C141479 +
            ((C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C5864 * C3496 +
              C5873 * C3493 + C5865 * C3497) *
                 C188 +
             (C5869 * C3573 + C5863 * C3721 + C5871 * C3574 + C5864 * C3722 +
              C5873 * C3575 + C5865 * C3723) *
                 C141327) *
                C141365) *
               C141298 * C141497 -
           (((C16140 + C16139 + C16138) * C141327 +
             (C16137 + C16136 + C16135) * C188) *
                C141365 +
            ((C5873 * C192 + C5865 * C365 + C5871 * C191 + C5864 * C364 +
              C5869 * C190 + C5863 * C363) *
                 C141327 +
             (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
              C5869 * C109 + C5863 * C115) *
                 C188) *
                C141479) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C188 +
             (C29775 * C189 + C141219 * C362) * C141327) *
                C58485 +
            (C59795 + C59796) * C58486 + (C59797 + C59798) * C58487 +
            (C59799 + C59800) * C58488) *
               C141298 * C2374 -
           ((C55367 * C141327 + C55368 * C188) * C58488 +
            (C39705 * C141327 + C39706 * C188) * C58487 +
            (C32956 * C141327 + C32957 * C188) * C58486 +
            (C30548 * C141327 + C30547 * C188) * C58485) *
               C141298 * C141497) *
              C2376 +
          (((C30553 * C188 + C30554 * C141327) * C58485 +
            (C36104 * C188 + C36105 * C141327) * C58486 +
            (C51770 * C188 + C51771 * C141327) * C58487 +
            ((C29775 * C47290 + C141219 * C47291) * C188 +
             (C29775 * C47403 + C141219 * C47617) * C141327) *
                C58488) *
               C141298 * C141497 -
           ((C59812 + C59811) * C58488 + (C59804 + C59803) * C58487 +
            (C59802 + C59801) * C58486 +
            ((C29775 * C190 + C141219 * C363) * C141327 +
             (C29775 * C109 + C141219 * C115) * C188) *
                C58485) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[75] +=
        (-std::pow(Pi, 2.5) *
         ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
             C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
             C22185 + C21821 * C3196) *
                C141219 * C141479 +
            (C37229 + C37230 + C37231) * C141219 * C141365) *
               C141298 * C2374 -
           ((C22181 * C26351 + C26824 + C26824 + C21821 * C26819 +
             C22180 * C10470 + C26823 + C26823 + C21820 * C10934 +
             C22179 * C3490 + C26822 + C26822 + C21819 * C3790) *
                C141219 * C141365 +
            (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
             C22180 * C2960 + C23189 + C23189 + C21820 * C3196 + C22179 * C823 +
             C23190 + C23190 + C21819 * C1171) *
                C141219 * C141479) *
               C141298 * C141497) *
              C2376 +
          (((C23202 + C23201 + C23200) * C141219 * C141479 +
            (C22179 * C3491 + C26825 + C26825 + C21819 * C3791 +
             C22180 * C10471 + C26826 + C26826 + C21820 * C10935 +
             C22181 * C26352 + C26827 + C26827 + C21821 * C26820) *
                C141219 * C141365) *
               C141298 * C141497 -
           ((C24192 + C24193 + C24194) * C141219 * C141365 +
            (C22221 + C22220 + C22219) * C141219 * C141479) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C5863 +
             C448 * C5864 + C449 * C5865) *
                C141479 +
            (C16259 + C16241 + C16242) * C141365) *
               C141298 * C2374 -
           ((C15178 * C5865 + C15179 * C5864 +
             (C418 * C3490 + C3795 + C3795 + C141327 * C3790) * C5863) *
                C141365 +
            (C1192 * C5865 + C1193 * C5864 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C5863) *
                C141479) *
               C141298 * C141497) *
              C2376 +
          (((C1193 * C5863 + C1192 * C5864 + C1191 * C5865) * C141479 +
            (C15179 * C5863 + C15178 * C5864 +
             (C418 * C3493 + C3798 + C3798 + C141327 * C3793) * C5865) *
                C141365) *
               C141298 * C141497 -
           ((C16249 + C16248 + C16247) * C141365 +
            (C450 * C5865 + C449 * C5864 + C448 * C5863) * C141479) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C141219 * C58485 +
            C59879 * C58486 + C59880 * C58487 + C59881 * C58488) *
               C141298 * C2374 -
           ((C418 * C42109 + C47735 + C47735 + C141327 * C42459) * C141219 *
                C58488 +
            C47739 * C141219 * C58487 + C18795 * C141219 * C58486 +
            (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C141219 *
                C58485) *
               C141298 * C141497) *
              C2376 +
          ((C1193 * C141219 * C58485 + C15179 * C141219 * C58486 +
            C44109 * C141219 * C58487 +
            (C418 * C47290 + C47736 + C47736 + C141327 * C47728) * C141219 *
                C58488) *
               C141298 * C141497 -
           (C59884 * C58488 + C59883 * C58487 + C59882 * C58486 +
            C448 * C141219 * C58485) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[75] +=
        (-std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C21918 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C21819 +
            (C35986 + C35987) * C21919 + (C36316 + C36317) * C21820 +
            (C35990 + C35991) * C21920 + (C36318 + C36319) * C21821) *
               C141219 * C141298 * C2374 -
           ((C14079 * C26477 + C141365 * C26925 + C14078 * C9768 +
             C141479 * C10118) *
                C21821 +
            (C14079 * C26351 + C141365 * C26579 + C14078 * C9667 +
             C141479 * C9848) *
                C21920 +
            (C36319 + C36318) * C21820 + (C35991 + C35990) * C21919 +
            (C36317 + C36316) * C21819 + (C35987 + C35986) * C21918) *
               C141219 * C141298 * C141497) *
              C2376 +
          (((C14973 + C14972) * C21918 + (C15289 + C15288) * C21819 +
            (C35994 + C35995) * C21919 + (C36320 + C36321) * C21820 +
            (C14078 * C9668 + C141479 * C9849 + C14079 * C26352 +
             C141365 * C26580) *
                C21920 +
            (C14078 * C9769 + C141479 * C10119 + C14079 * C26478 +
             C141365 * C26926) *
                C21821) *
               C141219 * C141298 * C141497 -
           ((C36321 + C36320) * C21821 + (C35995 + C35994) * C21920 +
            (C15288 + C15289) * C21820 + (C14972 + C14973) * C21919 +
            (C14355 + C14354) * C21819 + (C14106 + C14105) * C21918) *
               C141219 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C188 +
             (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
              C141365 * C2040) *
                 C141327) *
                C5863 +
            ((C14105 + C14106) * C188 + (C14354 + C14355) * C141327) * C5864 +
            C14362 * C5865) *
               C141298 * C2374 -
           (((C15286 + C15287) * C141327 + (C14968 + C14969) * C188) * C5865 +
            ((C15288 + C15289) * C141327 + (C14972 + C14973) * C188) * C5864 +
            ((C14079 * C3572 + C141365 * C3864 + C14078 * C912 +
              C141479 * C1262) *
                 C141327 +
             (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
              C141479 * C1006) *
                 C188) *
                C5863) *
               C141298 * C141497) *
              C2376 +
          ((((C14973 + C14972) * C188 + (C15289 + C15288) * C141327) * C5863 +
            ((C14969 + C14968) * C188 + (C15287 + C15286) * C141327) * C5864 +
            ((C14078 * C820 + C141479 * C1003 + C14079 * C3493 +
              C141365 * C3649) *
                 C188 +
             (C14078 * C909 + C141479 * C1259 + C14079 * C3575 +
              C141365 * C3867) *
                 C141327) *
                C5865) *
               C141298 * C141497 -
           (((C14358 + C14359) * C141327 + (C14115 + C14116) * C188) * C5865 +
            ((C14357 + C14356) * C141327 + (C14110 + C14109) * C188) * C5864 +
            ((C14355 + C14354) * C141327 + (C14106 + C14105) * C188) * C5863) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C58590 * C108 + C58485 * C276 + C58591 * C1601 + C58486 * C1784 +
             C58592 * C5325 + C58487 * C5449 + C58593 * C21035 +
             C58488 * C21228) *
                C188 +
            (C58590 * C189 + C58485 * C501 + C58591 * C1690 + C58486 * C2040 +
             C58592 * C5391 + C58487 * C5619 + C58593 * C21136 +
             C58488 * C21491) *
                C141327) *
               C141219 * C141298 * C2374 -
           ((C58593 * C42197 + C58488 * C42553 + C58592 * C13294 +
             C58487 * C13614 + C58591 * C3572 + C58486 * C3864 + C58590 * C912 +
             C58485 * C1262) *
                C141327 +
            (C58593 * C42109 + C58488 * C42293 + C58592 * C13205 +
             C58487 * C13374 + C58591 * C3490 + C58486 * C3646 + C58590 * C823 +
             C58485 * C1006) *
                C188) *
               C141219 * C141298 * C141497) *
              C2376 +
          (((C58590 * C822 + C58485 * C1005 + C58591 * C3491 + C58486 * C3647 +
             C58592 * C13206 + C58487 * C13375 + C58593 * C47290 +
             C58488 * C47517) *
                C188 +
            (C58590 * C911 + C58485 * C1261 + C58591 * C3573 + C58486 * C3865 +
             C58592 * C13295 + C58487 * C13615 + C58593 * C47403 +
             C58488 * C47838) *
                C141327) *
               C141219 * C141298 * C141497 -
           ((C58593 * C21137 + C58488 * C21492 + C58592 * C5392 +
             C58487 * C5620 + C58591 * C1689 + C58486 * C2039 + C58590 * C190 +
             C58485 * C502) *
                C141327 +
            (C58593 * C21036 + C58488 * C21229 + C58592 * C5326 +
             C58487 * C5450 + C58591 * C1600 + C58486 * C1783 + C58590 * C109 +
             C58485 * C277) *
                C188) *
               C141219 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[75] += (-std::pow(Pi, 2.5) *
                   (((((C29775 * C108 + C141219 * C114) * C14078 +
                       (C29775 * C276 + C141219 * C579) * C141479 +
                       C37111 * C14079 + C37432 * C141365) *
                          C21819 +
                      (C36420 + C36421 + C36422 + C36423) * C21820 +
                      (C36424 + C36425 + C36426 + C36427) * C21821) *
                         C141298 * C2374 -
                     ((C33175 * C141365 + C32953 * C14079 + C30785 * C141479 +
                       C30551 * C14078) *
                          C21821 +
                      (C36427 + C36426 + C36425 + C36424) * C21820 +
                      (C36423 + C36422 + C36421 + C36420) * C21819) *
                         C141298 * C141497) *
                        C2376 +
                    (((C36428 + C36429 + C36430 + C36440) * C21819 +
                      (C36433 + C36434 + C36435 + C36441) * C21820 +
                      (C30557 * C14078 + C30788 * C141479 +
                       (C29775 * C26352 + C141219 * C26354) * C14079 +
                       (C29775 * C26580 + C141219 * C27029) * C141365) *
                          C21821) *
                         C141298 * C141497 -
                     ((C36441 + C36435 + C36434 + C36433) * C21821 +
                      (C36440 + C36430 + C36429 + C36428) * C21820 +
                      (C37433 * C141365 + C37113 * C14079 +
                       (C29775 * C277 + C141219 * C580) * C141479 +
                       (C29775 * C109 + C141219 * C115) * C14078) *
                          C21819) *
                         C141298 * C2374) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                       C5864 * C115 + C5873 * C110 + C5865 * C116) *
                          C14078 +
                      (C5869 * C276 + C5863 * C579 + C5871 * C277 +
                       C5864 * C580 + C5873 * C278 + C5865 * C581) *
                          C141479 +
                      (C16129 + C16130 + C16131) * C14079 +
                      (C16480 + C16481 + C16482) * C141365) *
                         C141327 * C141298 * C2374 -
                     ((C11155 + C11156 + C11157) * C141365 +
                      (C10834 + C10835 + C10836) * C14079 +
                      (C7483 + C7482 + C7481) * C141479 +
                      (C7120 + C7119 + C7118) * C14078) *
                         C141327 * C141298 * C141497) *
                        C2376 +
                    (((C7124 + C7125 + C7126) * C14078 +
                      (C7484 + C7485 + C7486) * C141479 +
                      (C5869 * C3491 + C5863 * C3495 + C5871 * C3492 +
                       C5864 * C3496 + C5873 * C3493 + C5865 * C3497) *
                          C14079 +
                      (C5869 * C3647 + C5863 * C3935 + C5871 * C3648 +
                       C5864 * C3936 + C5873 * C3649 + C5865 * C3937) *
                          C141365) *
                         C141327 * C141298 * C141497 -
                     ((C16485 + C16484 + C16483) * C141365 +
                      (C16137 + C16136 + C16135) * C14079 +
                      (C5873 * C279 + C5865 * C582 + C5871 * C278 +
                       C5864 * C581 + C5869 * C277 + C5863 * C580) *
                          C141479 +
                      (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                       C5864 * C116 + C5869 * C109 + C5863 * C115) *
                          C14078) *
                         C141327 * C141298 * C2374) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C29775 * C108 + C141219 * C114) * C58590 +
                      (C29775 * C276 + C141219 * C579) * C58485 +
                      C37111 * C58591 + C37432 * C58486 + C42383 * C58592 +
                      C42634 * C58487 + C58030 * C58593 + C58275 * C58488) *
                         C141327 * C141298 * C2374 -
                     (C55701 * C58488 + C55368 * C58593 + C40042 * C58487 +
                      C39706 * C58592 + C33177 * C58486 + C32957 * C58591 +
                      C30783 * C58485 + C30547 * C58590) *
                         C141327 * C141298 * C141497) *
                        C2376 +
                    ((C30553 * C58590 + C30786 * C58485 + C36104 * C58591 +
                      C36438 * C58486 + C51770 * C58592 + C52092 * C58487 +
                      (C29775 * C47290 + C141219 * C47291) * C58593 +
                      (C29775 * C47517 + C141219 * C47937) * C58488) *
                         C141327 * C141298 * C141497 -
                     (C60019 * C58488 + C59809 * C58593 + C53092 * C58487 +
                      C52758 * C58592 + C37433 * C58486 + C37113 * C58591 +
                      (C29775 * C277 + C141219 * C580) * C58485 +
                      (C29775 * C109 + C141219 * C115) * C58590) *
                         C141327 * C141298 * C2374) *
                        C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[75] +=
        (-std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C14078 +
            (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
             C21920 * C3084 + C21821 * C3362) *
                C141479 +
            (C36893 + C36894 + C36895) * C14079 +
            (C37538 + C37539 + C37540) * C141365) *
               C141219 * C141298 * C2374 -
           ((C21920 * C26579 + C21821 * C27140 + C21919 * C10699 +
             C21820 * C11255 + C21918 * C3646 + C21819 * C4004) *
                C141365 +
            (C21920 * C26351 + C21821 * C26477 + C21919 * C10470 +
             C21820 * C10595 + C21918 * C3490 + C21819 * C3572) *
                C14079 +
            (C21920 * C9848 + C21821 * C10284 + C21919 * C3084 +
             C21820 * C3362 + C21918 * C1006 + C21819 * C1419) *
                C141479 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C14078) *
               C141219 * C141298 * C141497) *
              C2376 +
          (((C22814 + C22813 + C22812) * C14078 +
            (C23538 + C23537 + C23536) * C141479 +
            (C21918 * C3491 + C21819 * C3573 + C21919 * C10471 +
             C21820 * C10596 + C21920 * C26352 + C21821 * C26478) *
                C14079 +
            (C21918 * C3647 + C21819 * C4005 + C21919 * C10700 +
             C21820 * C11256 + C21920 * C26580 + C21821 * C27141) *
                C141365) *
               C141219 * C141298 * C141497 -
           ((C24504 + C24505 + C24506) * C141365 +
            (C23868 + C23869 + C23870) * C14079 +
            (C22473 + C22472 + C22471) * C141479 +
            (C21948 + C21947 + C21946) * C14078) *
               C141219 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C14078 +
             (C188 * C276 + C141327 * C635) * C141479 + C15877 * C14079 +
             C16596 * C141365) *
                C5863 +
            (C14511 + C14512 + C14513 + C14514) * C5864 + C14525 * C5865) *
               C141298 * C2374 -
           ((C15498 + C15488 + C15489 + C15490) * C5865 +
            (C15499 + C15493 + C15494 + C15495) * C5864 +
            ((C188 * C3646 + C141327 * C4004) * C141365 +
             (C188 * C3490 + C141327 * C3572) * C14079 +
             (C188 * C1006 + C141327 * C1419) * C141479 +
             (C188 * C823 + C141327 * C912) * C14078) *
                C5863) *
               C141298 * C141497) *
              C2376 +
          (((C15495 + C15494 + C15493 + C15499) * C5863 +
            (C15490 + C15489 + C15488 + C15498) * C5864 +
            (C933 * C14078 + C1431 * C141479 +
             (C188 * C3493 + C141327 * C3575) * C14079 +
             (C188 * C3649 + C141327 * C4007) * C141365) *
                C5865) *
               C141298 * C141497 -
           ((C14519 + C14520 + C14521 + C14522) * C5865 +
            (C14518 + C14517 + C14516 + C14515) * C5864 +
            (C14514 + C14513 + C14512 + C14511) * C5863) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C58590 +
            (C188 * C276 + C141327 * C635) * C58485 + C15877 * C58591 +
            C16596 * C58486 + C21152 * C58592 + C21660 * C58487 +
            C50096 * C58593 + C50594 * C58488) *
               C141219 * C141298 * C2374 -
           ((C188 * C42293 + C141327 * C42708) * C58488 +
            (C188 * C42109 + C141327 * C42197) * C58593 + C48046 * C58487 +
            C47416 * C58592 + C19093 * C58486 + C18488 * C58591 +
            (C188 * C1006 + C141327 * C1419) * C58485 +
            (C188 * C823 + C141327 * C912) * C58590) *
               C141219 * C141298 * C141497) *
              C2376 +
          ((C937 * C58590 + C1433 * C58485 + C14851 * C58591 + C15497 * C58486 +
            C43792 * C58592 + C44420 * C58487 +
            (C188 * C47290 + C141327 * C47403) * C58593 +
            (C188 * C47517 + C141327 * C48042) * C58488) *
               C141219 * C141298 * C141497 -
           (C45513 * C58488 + C44805 * C58593 + C16598 * C58487 +
            C15882 * C58592 + C2211 * C58486 + C1715 * C58591 + C654 * C58485 +
            C218 * C58590) *
               C141219 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[75] += (-std::pow(Pi, 2.5) *
                   ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                       C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                          C21819 +
                      (C36666 + C36667) * C21820 + (C36668 + C36669) * C21821) *
                         C141219 * C141298 * C2374 -
                     ((C14600 * C26351 + C36646 + C36646 + C141365 * C27240 +
                       C14599 * C9667 + C36647 + C36647 + C141479 * C10361) *
                          C21821 +
                      (C36669 + C36668) * C21820 + (C36667 + C36666) * C21819) *
                         C141219 * C141298 * C141497) *
                        C2376 +
                    (((C15625 + C15624) * C21819 + (C36670 + C36671) * C21820 +
                      (C14599 * C9668 + C36652 + C36652 + C141479 * C10362 +
                       C14600 * C26352 + C36653 + C36653 + C141365 * C27241) *
                          C21821) *
                         C141219 * C141298 * C141497 -
                     ((C36671 + C36670) * C21821 + (C15624 + C15625) * C21820 +
                      (C14637 + C14636) * C21819) *
                         C141219 * C141298 * C2374) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                       C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                          C141327 * C5863 +
                      (C14636 + C14637) * C141327 * C5864 + C14643 * C5865) *
                         C141298 * C2374 -
                     ((C15622 + C15623) * C141327 * C5865 +
                      (C15624 + C15625) * C141327 * C5864 +
                      (C14600 * C3490 + C15610 + C15610 + C141365 * C4074 +
                       C14599 * C823 + C15611 + C15611 + C141479 * C1505) *
                          C141327 * C5863) *
                         C141298 * C141497) *
                        C2376 +
                    (((C15625 + C15624) * C141327 * C5863 +
                      (C15623 + C15622) * C141327 * C5864 +
                      (C14599 * C820 + C15612 + C15612 + C141479 * C1502 +
                       C14600 * C3493 + C15613 + C15613 + C141365 * C4077) *
                          C141327 * C5865) *
                         C141298 * C141497 -
                     ((C14640 + C14641) * C141327 * C5865 +
                      (C14639 + C14638) * C141327 * C5864 +
                      (C14637 + C14636) * C141327 * C5863) *
                         C141298 * C2374) *
                        C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C58894 * C108 + C58899 + C58899 + C58485 * C714 +
                      C58895 * C1601 + C58900 + C58900 + C58486 * C2283 +
                      C58896 * C5325 + C58901 + C58901 + C58487 * C5781 +
                      C58897 * C21035 + C58902 + C58902 + C58488 * C21734) *
                         C141327 * C141219 * C141298 * C2374 -
                     (C58897 * C42109 + C59505 + C59505 + C58488 * C42793 +
                      C58896 * C13205 + C59506 + C59506 + C58487 * C13845 +
                      C58895 * C3490 + C59507 + C59507 + C58486 * C4074 +
                      C58894 * C823 + C59508 + C59508 + C58485 * C1505) *
                         C141327 * C141219 * C141298 * C141497) *
                        C2376 +
                    ((C58894 * C822 + C59509 + C59509 + C58485 * C1504 +
                      C58895 * C3491 + C59510 + C59510 + C58486 * C4075 +
                      C58896 * C13206 + C59511 + C59511 + C58487 * C13846 +
                      C58897 * C47290 + C59512 + C59512 + C58488 * C48144) *
                         C141327 * C141219 * C141298 * C141497 -
                     (C58897 * C21036 + C58903 + C58903 + C58488 * C21735 +
                      C58896 * C5326 + C58904 + C58904 + C58487 * C5782 +
                      C58895 * C1600 + C58905 + C58905 + C58486 * C2282 +
                      C58894 * C109 + C58906 + C58906 + C58485 * C715) *
                         C141327 * C141219 * C141298 * C2374) *
                        C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[76] +=
        (-std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141479 +
            C36781 * C141365) *
               C21819 +
           (C35748 + C35749) * C21820 + C38599 * C21821) *
              C141298 * C2956 -
          ((C38600 + C38601) * C21821 + (C35751 + C35750) * C21820 +
           (C35749 + C35748) * C21819) *
              C141298 * C2957 +
          (C38599 * C21819 + (C38601 + C38600) * C21820 +
           (C32189 * C141479 +
            (C29774 * C32702 + C32712 + C32712 + C141219 * C32704) * C141365) *
               C21821) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 + C5876 +
            C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
            C5865 * C122) *
               C141479 +
           (C15751 + C15752 + C15753) * C141365) *
              C141327 * C141298 * C2956 -
          ((C10495 + C10496 + C10497) * C141365 +
           (C6742 + C6741 + C6740) * C141479) *
              C141327 * C141298 * C2957 +
          ((C9694 + C9693 + C9692) * C141479 +
           (C5868 * C10470 + C10486 + C10486 + C5863 * C10476 + C5870 * C10471 +
            C10487 + C10487 + C5864 * C10477 + C5872 * C10472 + C10488 +
            C10488 + C5865 * C10478) *
               C141365) *
              C141327 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C58485 +
           C36781 * C58486 + C42123 * C58487 + C57776 * C58488) *
              C141327 * C141298 * C2956 -
          (C55017 * C58488 + C39350 * C58487 + C32721 * C58486 +
           C30301 * C58485) *
              C141327 * C141298 * C2957 +
          (C30302 * C58485 + C32720 * C58486 + C39349 * C58487 +
           (C29774 * C42110 + C42120 + C42120 + C141219 * C42114) * C58488) *
              C141327 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[76] +=
        (-std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C29775 +
            (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
             C21920 * C2964 + C21821 * C3030) *
                C141219) *
               C141479 +
           ((C36893 + C36894 + C36895) * C29775 +
            (C36896 + C36897 + C36898) * C141219) *
               C141365) *
              C141298 * C2956 -
          (((C21920 * C26353 + C21821 * C26479 + C21919 * C10473 +
             C21820 * C10598 + C21918 * C3494 + C21819 * C3576) *
                C141219 +
            (C21920 * C26351 + C21821 * C26477 + C21919 * C10470 +
             C21820 * C10595 + C21918 * C3490 + C21819 * C3572) *
                C29775) *
               C141365 +
           ((C21920 * C9670 + C21821 * C9771 + C21919 * C2964 + C21820 * C3030 +
             C21918 * C828 + C21819 * C917) *
                C141219 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C29775) *
               C141479) *
              C141298 * C2957 +
          (((C21918 * C2960 + C21819 * C3026 + C21919 * C9667 + C21820 * C9768 +
             C21920 * C25568 + C21821 * C25662) *
                C29775 +
            (C21918 * C2964 + C21819 * C3030 + C21919 * C9670 + C21820 * C9771 +
             C21920 * C25570 + C21821 * C25664) *
                C141219) *
               C141479 +
           ((C21918 * C10470 + C21819 * C10595 + C21919 * C26351 +
             C21820 * C26477 + C21920 * C32702 + C21821 * C32790) *
                C29775 +
            (C21918 * C10473 + C21819 * C10598 + C21919 * C26353 +
             C21820 * C26479 + C21920 * C32703 + C21821 * C32791) *
                C141219) *
               C141365) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C5869 +
            (C188 * C114 + C141327 * C195) * C5863 + C218 * C5871 +
            C219 * C5864 + C220 * C5873 + C221 * C5865) *
               C141479 +
           (C15883 + C15884 + C15859 + C15860 + C15861 + C15862) * C141365) *
              C141298 * C2956 -
          ((C14848 * C5865 + C14849 * C5873 + C14850 * C5864 + C14851 * C5871 +
            (C188 * C3494 + C141327 * C3576) * C5863 +
            (C188 * C3490 + C141327 * C3572) * C5869) *
               C141365 +
           (C934 * C5865 + C935 * C5873 + C936 * C5864 + C937 * C5871 +
            (C188 * C828 + C141327 * C917) * C5863 +
            (C188 * C823 + C141327 * C912) * C5869) *
               C141479) *
              C141298 * C2957 +
          (((C188 * C2960 + C141327 * C3026) * C5869 +
            (C188 * C2964 + C141327 * C3030) * C5863 +
            (C188 * C2961 + C141327 * C3027) * C5871 +
            (C188 * C2965 + C141327 * C3031) * C5864 +
            (C188 * C2962 + C141327 * C3028) * C5873 +
            (C188 * C2966 + C141327 * C3032) * C5865) *
               C141479 +
           ((C188 * C10470 + C141327 * C10595) * C5869 +
            (C188 * C10473 + C141327 * C10598) * C5863 +
            (C188 * C10471 + C141327 * C10596) * C5871 +
            (C188 * C10474 + C141327 * C10599) * C5864 +
            (C188 * C10472 + C141327 * C10597) * C5873 +
            (C188 * C10475 + C141327 * C10600) * C5865) *
               C141365) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C29775 +
            (C188 * C114 + C141327 * C195) * C141219) *
               C58485 +
           (C59651 + C59652) * C58486 + (C59653 + C59654) * C58487 +
           (C59655 + C59656) * C58488) *
              C141298 * C2956 -
          (((C188 * C42111 + C141327 * C42199) * C141219 +
            (C188 * C42109 + C141327 * C42197) * C29775) *
               C58488 +
           (C47417 * C141219 + C47416 * C29775) * C58487 +
           (C18489 * C141219 + C18488 * C29775) * C58486 +
           ((C188 * C828 + C141327 * C917) * C141219 +
            (C188 * C823 + C141327 * C912) * C29775) *
               C58485) *
              C141298 * C2957 +
          (((C188 * C2960 + C141327 * C3026) * C29775 +
            (C188 * C2964 + C141327 * C3030) * C141219) *
               C58485 +
           ((C188 * C10470 + C141327 * C10595) * C29775 +
            (C188 * C10473 + C141327 * C10598) * C141219) *
               C58486 +
           ((C188 * C29087 + C141327 * C29173) * C29775 +
            (C188 * C29089 + C141327 * C29175) * C141219) *
               C58487 +
           ((C188 * C42110 + C141327 * C42198) * C29775 +
            (C188 * C42112 + C141327 * C42200) * C141219) *
               C58488) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[76] +=
        (-std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C29775 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C141219) *
               C21819 +
           ((C35986 + C35987) * C29775 + (C35988 + C35989) * C141219) * C21820 +
           C38766 * C21821) *
              C141298 * C2956 -
          (((C38762 + C38763) * C141219 + (C38764 + C38765) * C29775) * C21821 +
           ((C35993 + C35992) * C141219 + (C35991 + C35990) * C29775) * C21820 +
           ((C35989 + C35988) * C141219 + (C35987 + C35986) * C29775) *
               C21819) *
              C141298 * C2957 +
          (C38766 * C21819 +
           ((C38765 + C38764) * C29775 + (C38763 + C38762) * C141219) * C21820 +
           ((C14078 * C25568 + C141479 * C25740 + C14079 * C32702 +
             C141365 * C32858) *
                C29775 +
            (C14078 * C25570 + C141479 * C25742 + C14079 * C32703 +
             C141365 * C32859) *
                C141219) *
               C21821) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C14078 * C108 + C141479 * C276 + C14079 * C1601 + C141365 * C1784) *
               C5869 +
           (C14078 * C114 + C141479 * C282 + C14079 * C1606 + C141365 * C1789) *
               C5863 +
           (C14105 + C14106) * C5871 + (C14107 + C14108) * C5864 +
           C14117 * C5873 + C14118 * C5865) *
              C141327 * C141298 * C2956 -
          ((C14966 + C14967) * C5865 + (C14968 + C14969) * C5873 +
           (C14970 + C14971) * C5864 + (C14972 + C14973) * C5871 +
           (C14079 * C3494 + C141365 * C3650 + C14078 * C828 +
            C141479 * C1011) *
               C5863 +
           (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
            C141479 * C1006) *
               C5869) *
              C141327 * C141298 * C2957 +
          ((C14078 * C2960 + C141479 * C3084 + C14079 * C10470 +
            C141365 * C10699) *
               C5869 +
           (C14078 * C2964 + C141479 * C3088 + C14079 * C10473 +
            C141365 * C10702) *
               C5863 +
           (C14078 * C2961 + C141479 * C3085 + C14079 * C10471 +
            C141365 * C10700) *
               C5871 +
           (C14078 * C2965 + C141479 * C3089 + C14079 * C10474 +
            C141365 * C10703) *
               C5864 +
           (C14078 * C2962 + C141479 * C3086 + C14079 * C10472 +
            C141365 * C10701) *
               C5873 +
           (C14078 * C2966 + C141479 * C3090 + C14079 * C10475 +
            C141365 * C10704) *
               C5865) *
              C141327 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C58590 * C108 + C58485 * C276 + C58591 * C1601 + C58486 * C1784 +
            C58592 * C5325 + C58487 * C5449 + C58593 * C21035 +
            C58488 * C21228) *
               C29775 +
           (C58590 * C114 + C58485 * C282 + C58591 * C1606 + C58486 * C1789 +
            C58592 * C5329 + C58487 * C5453 + C58593 * C21038 +
            C58488 * C21231) *
               C141219) *
              C141327 * C141298 * C2956 -
          ((C58593 * C42111 + C58488 * C42295 + C58592 * C13208 +
            C58487 * C13377 + C58591 * C3494 + C58486 * C3650 + C58590 * C828 +
            C58485 * C1011) *
               C141219 +
           (C58593 * C42109 + C58488 * C42293 + C58592 * C13205 +
            C58487 * C13374 + C58591 * C3490 + C58486 * C3646 + C58590 * C823 +
            C58485 * C1006) *
               C29775) *
              C141327 * C141298 * C2957 +
          ((C58590 * C2960 + C58485 * C3084 + C58591 * C10470 +
            C58486 * C10699 + C58592 * C29087 + C58487 * C29251 +
            C58593 * C42110 + C58488 * C42294) *
               C29775 +
           (C58590 * C2964 + C58485 * C3088 + C58591 * C10473 +
            C58486 * C10702 + C58592 * C29089 + C58487 * C29253 +
            C58593 * C42112 + C58488 * C42296) *
               C141219) *
              C141327 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[76] +=
        (-std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C21918 +
            (C29775 * C189 + C141219 * C362) * C21819 + C30547 * C21919 +
            C30548 * C21820 + C30549 * C21920 + C30550 * C21821) *
               C141479 +
           (C37115 + C37116 + C37099 + C37100 + C37101 + C37102) * C141365) *
              C141298 * C2956 -
          ((C32952 * C21821 + C32953 * C21920 + C32954 * C21820 +
            C32955 * C21919 + C32956 * C21819 + C32957 * C21918) *
               C141365 +
           (C30552 * C21821 + C30551 * C21920 + C30550 * C21820 +
            C30549 * C21919 + C30548 * C21819 + C30547 * C21918) *
               C141479) *
              C141298 * C2957 +
          ((C30549 * C21918 + C30550 * C21819 + C30551 * C21919 +
            C30552 * C21820 + C32361 * C21920 + C32360 * C21821) *
               C141479 +
           (C32955 * C21918 + C32954 * C21819 + C32953 * C21919 +
            C32952 * C21820 + (C29775 * C32702 + C141219 * C32703) * C21920 +
            (C29775 * C32790 + C141219 * C32938) * C21821) *
               C141365) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
             C5873 * C110 + C5865 * C116) *
                C188 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
             C5873 * C191 + C5865 * C364) *
                C141327) *
               C141479 +
           ((C16129 + C16130 + C16131) * C188 +
            (C16132 + C16133 + C16134) * C141327) *
               C141365) *
              C141298 * C2956 -
          (((C10831 + C10832 + C10833) * C141327 +
            (C10834 + C10835 + C10836) * C188) *
               C141365 +
           ((C7123 + C7122 + C7121) * C141327 +
            (C7120 + C7119 + C7118) * C188) *
               C141479) *
              C141298 * C2957 +
          (((C9961 + C9960 + C9959) * C188 +
            (C9958 + C9957 + C9956) * C141327) *
               C141479 +
           ((C5869 * C10470 + C5863 * C10473 + C5871 * C10471 + C5864 * C10474 +
             C5873 * C10472 + C5865 * C10475) *
                C188 +
            (C5869 * C10595 + C5863 * C10815 + C5871 * C10596 + C5864 * C10816 +
             C5873 * C10597 + C5865 * C10817) *
                C141327) *
               C141365) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C188 +
            (C29775 * C189 + C141219 * C362) * C141327) *
               C58485 +
           (C59795 + C59796) * C58486 + (C59797 + C59798) * C58487 +
           (C59799 + C59800) * C58488) *
              C141298 * C2956 -
          ((C55367 * C141327 + C55368 * C188) * C58488 +
           (C39705 * C141327 + C39706 * C188) * C58487 +
           (C32956 * C141327 + C32957 * C188) * C58486 +
           (C30548 * C141327 + C30547 * C188) * C58485) *
              C141298 * C2957 +
          ((C30549 * C188 + C30550 * C141327) * C58485 +
           (C32955 * C188 + C32954 * C141327) * C58486 +
           (C39704 * C188 + C39703 * C141327) * C58487 +
           ((C29775 * C42110 + C141219 * C42112) * C188 +
            (C29775 * C42198 + C141219 * C42372) * C141327) *
               C58488) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[76] +=
        (-std::pow(Pi, 2.5) *
         (((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
            C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
            C22185 + C21821 * C3196) *
               C141219 * C141479 +
           (C37229 + C37230 + C37231) * C141219 * C141365) *
              C141298 * C2956 -
          ((C22181 * C26351 + C26824 + C26824 + C21821 * C26819 +
            C22180 * C10470 + C26823 + C26823 + C21820 * C10934 +
            C22179 * C3490 + C26822 + C26822 + C21819 * C3790) *
               C141219 * C141365 +
           (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
            C22180 * C2960 + C23189 + C23189 + C21820 * C3196 + C22179 * C823 +
            C23190 + C23190 + C21819 * C1171) *
               C141219 * C141479) *
              C141298 * C2957 +
          ((C22179 * C2960 + C25924 + C25924 + C21819 * C3196 + C22180 * C9667 +
            C25925 + C25925 + C21820 * C10035 + C22181 * C25568 + C25926 +
            C25926 + C21821 * C25921) *
               C141219 * C141479 +
           (C22179 * C10470 + C38915 + C38915 + C21819 * C10934 +
            C22180 * C26351 + C38916 + C38916 + C21820 * C26819 +
            C22181 * C32702 + C38917 + C38917 + C21821 * C33023) *
               C141219 * C141365) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C5863 +
            C448 * C5864 + C449 * C5865) *
               C141479 +
           (C16259 + C16241 + C16242) * C141365) *
              C141298 * C2956 -
          ((C15178 * C5865 + C15179 * C5864 +
            (C418 * C3490 + C3795 + C3795 + C141327 * C3790) * C5863) *
               C141365 +
           (C1192 * C5865 + C1193 * C5864 +
            (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C5863) *
               C141479) *
              C141298 * C2957 +
          (((C418 * C2960 + C3201 + C3201 + C141327 * C3196) * C5863 +
            (C418 * C2961 + C3202 + C3202 + C141327 * C3197) * C5864 +
            (C418 * C2962 + C3203 + C3203 + C141327 * C3198) * C5865) *
               C141479 +
           ((C418 * C10470 + C17979 + C17979 + C141327 * C10934) * C5863 +
            (C418 * C10471 + C17980 + C17980 + C141327 * C10935) * C5864 +
            (C418 * C10472 + C17981 + C17981 + C141327 * C10936) * C5865) *
               C141365) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C141327 * C419) * C141219 * C58485 +
           C59879 * C58486 + C59880 * C58487 + C59881 * C58488) *
              C141298 * C2956 -
          ((C418 * C42109 + C47735 + C47735 + C141327 * C42459) * C141219 *
               C58488 +
           C47739 * C141219 * C58487 + C18795 * C141219 * C58486 +
           (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C141219 * C58485) *
              C141298 * C2957 +
          ((C418 * C2960 + C3201 + C3201 + C141327 * C3196) * C141219 * C58485 +
           (C418 * C10470 + C17979 + C17979 + C141327 * C10934) * C141219 *
               C58486 +
           (C418 * C29087 + C46889 + C46889 + C141327 * C29405) * C141219 *
               C58487 +
           (C418 * C42110 + C61004 + C61004 + C141327 * C42460) * C141219 *
               C58488) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyz[76] +=
        (-std::pow(Pi, 2.5) *
         (((C14078 * C108 + C141479 * C276 + C14079 * C1601 + C141365 * C1784) *
               C21918 +
           (C14078 * C189 + C141479 * C501 + C14079 * C1690 + C141365 * C2040) *
               C21819 +
           (C35986 + C35987) * C21919 + (C36316 + C36317) * C21820 +
           C38750 * C21920 + C38992 * C21821) *
              C141219 * C141298 * C2956 -
          ((C38997 + C38998) * C21821 + (C38764 + C38765) * C21920 +
           (C36319 + C36318) * C21820 + (C35991 + C35990) * C21919 +
           (C36317 + C36316) * C21819 + (C35987 + C35986) * C21918) *
              C141219 * C141298 * C2957 +
          (C38750 * C21918 + C38992 * C21819 + (C38765 + C38764) * C21919 +
           (C38998 + C38997) * C21820 +
           (C14078 * C25568 + C141479 * C25740 + C14079 * C32702 +
            C141365 * C32858) *
               C21920 +
           (C14078 * C25662 + C141479 * C26003 + C14079 * C32790 +
            C141365 * C33094) *
               C21821) *
              C141219 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C188 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C141327) *
               C5863 +
           ((C14105 + C14106) * C188 + (C14354 + C14355) * C141327) * C5864 +
           C14362 * C5865) *
              C141298 * C2956 -
          (((C15286 + C15287) * C141327 + (C14968 + C14969) * C188) * C5865 +
           ((C15288 + C15289) * C141327 + (C14972 + C14973) * C188) * C5864 +
           ((C14079 * C3572 + C141365 * C3864 + C14078 * C912 +
             C141479 * C1262) *
                C141327 +
            (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
             C141479 * C1006) *
                C188) *
               C5863) *
              C141298 * C2957 +
          (((C14078 * C2960 + C141479 * C3084 + C14079 * C10470 +
             C141365 * C10699) *
                C188 +
            (C14078 * C3026 + C141479 * C3254 + C14079 * C10595 +
             C141365 * C11041) *
                C141327) *
               C5863 +
           ((C14078 * C2961 + C141479 * C3085 + C14079 * C10471 +
             C141365 * C10700) *
                C188 +
            (C14078 * C3027 + C141479 * C3255 + C14079 * C10596 +
             C141365 * C11042) *
                C141327) *
               C5864 +
           ((C14078 * C2962 + C141479 * C3086 + C14079 * C10472 +
             C141365 * C10701) *
                C188 +
            (C14078 * C3028 + C141479 * C3256 + C14079 * C10597 +
             C141365 * C11043) *
                C141327) *
               C5865) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C58590 * C108 + C58485 * C276 + C58591 * C1601 + C58486 * C1784 +
            C58592 * C5325 + C58487 * C5449 + C58593 * C21035 +
            C58488 * C21228) *
               C188 +
           (C58590 * C189 + C58485 * C501 + C58591 * C1690 + C58486 * C2040 +
            C58592 * C5391 + C58487 * C5619 + C58593 * C21136 +
            C58488 * C21491) *
               C141327) *
              C141219 * C141298 * C2956 -
          ((C58593 * C42197 + C58488 * C42553 + C58592 * C13294 +
            C58487 * C13614 + C58591 * C3572 + C58486 * C3864 + C58590 * C912 +
            C58485 * C1262) *
               C141327 +
           (C58593 * C42109 + C58488 * C42293 + C58592 * C13205 +
            C58487 * C13374 + C58591 * C3490 + C58486 * C3646 + C58590 * C823 +
            C58485 * C1006) *
               C188) *
              C141219 * C141298 * C2957 +
          ((C58590 * C2960 + C58485 * C3084 + C58591 * C10470 +
            C58486 * C10699 + C58592 * C29087 + C58487 * C29251 +
            C58593 * C42110 + C58488 * C42294) *
               C188 +
           (C58590 * C3026 + C58485 * C3254 + C58591 * C10595 +
            C58486 * C11041 + C58592 * C29173 + C58487 * C29487 +
            C58593 * C42198 + C58488 * C42554) *
               C141327) *
              C141219 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezx[76] +=
        (-std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C14078 +
            (C29775 * C276 + C141219 * C579) * C141479 + C37111 * C14079 +
            C37432 * C141365) *
               C21819 +
           (C36420 + C36421 + C36422 + C36423) * C21820 + C39079 * C21821) *
              C141298 * C2956 -
          ((C39074 + C39075 + C39076 + C39077) * C21821 +
           (C36427 + C36426 + C36425 + C36424) * C21820 +
           (C36423 + C36422 + C36421 + C36420) * C21819) *
              C141298 * C2957 +
          (C39079 * C21819 + (C39077 + C39076 + C39075 + C39074) * C21820 +
           (C32361 * C14078 + C32527 * C141479 +
            (C29775 * C32702 + C141219 * C32703) * C14079 +
            (C29775 * C32858 + C141219 * C33164) * C141365) *
               C21821) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
            C5873 * C110 + C5865 * C116) *
               C14078 +
           (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
            C5873 * C278 + C5865 * C581) *
               C141479 +
           (C16129 + C16130 + C16131) * C14079 +
           (C16480 + C16481 + C16482) * C141365) *
              C141327 * C141298 * C2956 -
          ((C11155 + C11156 + C11157) * C141365 +
           (C10834 + C10835 + C10836) * C14079 +
           (C7483 + C7482 + C7481) * C141479 +
           (C7120 + C7119 + C7118) * C14078) *
              C141327 * C141298 * C2957 +
          ((C9961 + C9960 + C9959) * C14078 +
           (C10210 + C10209 + C10208) * C141479 +
           (C5869 * C10470 + C5863 * C10473 + C5871 * C10471 + C5864 * C10474 +
            C5873 * C10472 + C5865 * C10475) *
               C14079 +
           (C5869 * C10699 + C5863 * C11145 + C5871 * C10700 + C5864 * C11146 +
            C5873 * C10701 + C5865 * C11147) *
               C141365) *
              C141327 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C29775 * C108 + C141219 * C114) * C58590 +
           (C29775 * C276 + C141219 * C579) * C58485 + C37111 * C58591 +
           C37432 * C58486 + C42383 * C58592 + C42634 * C58487 +
           C58030 * C58593 + C58275 * C58488) *
              C141327 * C141298 * C2956 -
          (C55701 * C58488 + C55368 * C58593 + C40042 * C58487 +
           C39706 * C58592 + C33177 * C58486 + C32957 * C58591 +
           C30783 * C58485 + C30547 * C58590) *
              C141327 * C141298 * C2957 +
          (C30549 * C58590 + C30784 * C58485 + C32955 * C58591 +
           C33176 * C58486 + C39704 * C58592 + C40041 * C58487 +
           (C29775 * C42110 + C141219 * C42112) * C58593 +
           (C29775 * C42294 + C141219 * C42630) * C58488) *
              C141327 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[76] +=
        (-std::pow(Pi, 2.5) *
         (((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
            C21920 * C2960 + C21821 * C3026) *
               C14078 +
           (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
            C21920 * C3084 + C21821 * C3362) *
               C141479 +
           (C36893 + C36894 + C36895) * C14079 +
           (C37538 + C37539 + C37540) * C141365) *
              C141219 * C141298 * C2956 -
          ((C21920 * C26579 + C21821 * C27140 + C21919 * C10699 +
            C21820 * C11255 + C21918 * C3646 + C21819 * C4004) *
               C141365 +
           (C21920 * C26351 + C21821 * C26477 + C21919 * C10470 +
            C21820 * C10595 + C21918 * C3490 + C21819 * C3572) *
               C14079 +
           (C21920 * C9848 + C21821 * C10284 + C21919 * C3084 + C21820 * C3362 +
            C21918 * C1006 + C21819 * C1419) *
               C141479 +
           (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
            C21918 * C823 + C21819 * C912) *
               C14078) *
              C141219 * C141298 * C2957 +
          ((C21918 * C2960 + C21819 * C3026 + C21919 * C9667 + C21820 * C9768 +
            C21920 * C25568 + C21821 * C25662) *
               C14078 +
           (C21918 * C3084 + C21819 * C3362 + C21919 * C9848 + C21820 * C10284 +
            C21920 * C25740 + C21821 * C26168) *
               C141479 +
           (C21918 * C10470 + C21819 * C10595 + C21919 * C26351 +
            C21820 * C26477 + C21920 * C32702 + C21821 * C32790) *
               C14079 +
           (C21918 * C10699 + C21819 * C11255 + C21919 * C26579 +
            C21820 * C27140 + C21920 * C32858 + C21821 * C33246) *
               C141365) *
              C141219 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C14078 +
            (C188 * C276 + C141327 * C635) * C141479 + C15877 * C14079 +
            C16596 * C141365) *
               C5863 +
           (C14511 + C14512 + C14513 + C14514) * C5864 + C14525 * C5865) *
              C141298 * C2956 -
          ((C15498 + C15488 + C15489 + C15490) * C5865 +
           (C15499 + C15493 + C15494 + C15495) * C5864 +
           ((C188 * C3646 + C141327 * C4004) * C141365 +
            (C188 * C3490 + C141327 * C3572) * C14079 +
            (C188 * C1006 + C141327 * C1419) * C141479 +
            (C188 * C823 + C141327 * C912) * C14078) *
               C5863) *
              C141298 * C2957 +
          (((C188 * C2960 + C141327 * C3026) * C14078 +
            (C188 * C3084 + C141327 * C3362) * C141479 +
            (C188 * C10470 + C141327 * C10595) * C14079 +
            (C188 * C10699 + C141327 * C11255) * C141365) *
               C5863 +
           ((C188 * C2961 + C141327 * C3027) * C14078 +
            (C188 * C3085 + C141327 * C3363) * C141479 +
            (C188 * C10471 + C141327 * C10596) * C14079 +
            (C188 * C10700 + C141327 * C11256) * C141365) *
               C5864 +
           ((C188 * C2962 + C141327 * C3028) * C14078 +
            (C188 * C3086 + C141327 * C3364) * C141479 +
            (C188 * C10472 + C141327 * C10597) * C14079 +
            (C188 * C10701 + C141327 * C11257) * C141365) *
               C5865) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C141327 * C189) * C58590 +
           (C188 * C276 + C141327 * C635) * C58485 + C15877 * C58591 +
           C16596 * C58486 + C21152 * C58592 + C21660 * C58487 +
           C50096 * C58593 + C50594 * C58488) *
              C141219 * C141298 * C2956 -
          ((C188 * C42293 + C141327 * C42708) * C58488 +
           (C188 * C42109 + C141327 * C42197) * C58593 + C48046 * C58487 +
           C47416 * C58592 + C19093 * C58486 + C18488 * C58591 +
           (C188 * C1006 + C141327 * C1419) * C58485 +
           (C188 * C823 + C141327 * C912) * C58590) *
              C141219 * C141298 * C2957 +
          ((C188 * C2960 + C141327 * C3026) * C58590 +
           (C188 * C3084 + C141327 * C3362) * C58485 +
           (C188 * C10470 + C141327 * C10595) * C58591 +
           (C188 * C10699 + C141327 * C11255) * C58486 +
           (C188 * C29087 + C141327 * C29173) * C58592 +
           (C188 * C29251 + C141327 * C29639) * C58487 +
           (C188 * C42110 + C141327 * C42198) * C58593 +
           (C188 * C42294 + C141327 * C42709) * C58488) *
              C141219 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[76] += (-std::pow(Pi, 2.5) *
                   (((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                      C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                         C21819 +
                     (C36666 + C36667) * C21820 + C39228 * C21821) *
                        C141219 * C141298 * C2956 -
                    ((C39239 + C39240) * C21821 + (C36669 + C36668) * C21820 +
                     (C36667 + C36666) * C21819) *
                        C141219 * C141298 * C2957 +
                    (C39228 * C21819 + (C39240 + C39239) * C21820 +
                     (C14599 * C25568 + C39233 + C39233 + C141479 * C26244 +
                      C14600 * C32702 + C39234 + C39234 + C141365 * C33313) *
                         C21821) *
                        C141219 * C141298 * C2958) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                      C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                         C141327 * C5863 +
                     (C14636 + C14637) * C141327 * C5864 + C14643 * C5865) *
                        C141298 * C2956 -
                    ((C15622 + C15623) * C141327 * C5865 +
                     (C15624 + C15625) * C141327 * C5864 +
                     (C14600 * C3490 + C15610 + C15610 + C141365 * C4074 +
                      C14599 * C823 + C15611 + C15611 + C141479 * C1505) *
                         C141327 * C5863) *
                        C141298 * C2957 +
                    ((C14599 * C2960 + C18278 + C18278 + C141479 * C3416 +
                      C14600 * C10470 + C18279 + C18279 + C141365 * C11356) *
                         C141327 * C5863 +
                     (C14599 * C2961 + C18280 + C18280 + C141479 * C3417 +
                      C14600 * C10471 + C18281 + C18281 + C141365 * C11357) *
                         C141327 * C5864 +
                     (C14599 * C2962 + C18282 + C18282 + C141479 * C3418 +
                      C14600 * C10472 + C18283 + C18283 + C141365 * C11358) *
                         C141327 * C5865) *
                        C141298 * C2958) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((C58894 * C108 + C58899 + C58899 + C58485 * C714 +
                     C58895 * C1601 + C58900 + C58900 + C58486 * C2283 +
                     C58896 * C5325 + C58901 + C58901 + C58487 * C5781 +
                     C58897 * C21035 + C58902 + C58902 + C58488 * C21734) *
                        C141327 * C141219 * C141298 * C2956 -
                    (C58897 * C42109 + C59505 + C59505 + C58488 * C42793 +
                     C58896 * C13205 + C59506 + C59506 + C58487 * C13845 +
                     C58895 * C3490 + C59507 + C59507 + C58486 * C4074 +
                     C58894 * C823 + C59508 + C59508 + C58485 * C1505) *
                        C141327 * C141219 * C141298 * C2957 +
                    (C58894 * C2960 + C61205 + C61205 + C58485 * C3416 +
                     C58895 * C10470 + C61206 + C61206 + C58486 * C11356 +
                     C58896 * C29087 + C61207 + C61207 + C58487 * C29715 +
                     C58897 * C42110 + C61208 + C61208 + C58488 * C42794) *
                        C141327 * C141219 * C141298 * C2958) *
                   C141247) /
                      (p * q * std::sqrt(p + q));
    d2eexx[77] +=
        (-std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141479 +
             C36781 * C141365) *
                C21819 +
            (C35748 + C35749) * C21820 + C38599 * C21821) *
               C1596 -
           ((C39351 + C39341) * C21821 + (C39352 + C39344) * C21820 +
            ((C29774 * C5325 + C34562 + C34562 + C141219 * C5333) * C141365 +
             C36781 * C141479) *
                C21819) *
               C141499) *
              C2374 +
          (((C39344 + C39352) * C21819 + (C39341 + C39351) * C21820 +
            (C32719 * C141479 +
             (C29774 * C34558 + C34565 + C34565 + C141219 * C34560) * C141365) *
                C21821) *
               C141499 -
           ((C38600 + C38601) * C21821 + (C35751 + C35750) * C21820 +
            (C35749 + C35748) * C21819) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 +
             C5876 + C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
             C5865 * C122) *
                C141479 +
            (C15751 + C15752 + C15753) * C141365) *
               C141327 * C1596 -
           ((C5872 * C5327 + C13217 + C13217 + C5865 * C5335 + C5870 * C5326 +
             C13216 + C13216 + C5864 * C5334 + C5868 * C5325 + C13215 + C13215 +
             C5863 * C5333) *
                C141365 +
            (C15753 + C15752 + C15751) * C141479) *
               C141327 * C141499) *
              C2374 +
          (((C10497 + C10496 + C10495) * C141479 +
            (C5868 * C13205 + C13218 + C13218 + C5863 * C13211 +
             C5870 * C13206 + C13219 + C13219 + C5864 * C13212 +
             C5872 * C13207 + C13220 + C13220 + C5865 * C13213) *
                C141365) *
               C141327 * C141499 -
           ((C10495 + C10496 + C10497) * C141365 +
            (C6742 + C6741 + C6740) * C141479) *
               C141327 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C58485 +
            C36781 * C58486 + C42123 * C58487 + C57776 * C58488) *
               C141327 * C1596 -
           ((C29774 * C49989 + C57772 + C57772 + C141219 * C49993) * C58488 +
            C57776 * C58487 + C42123 * C58486 + C36781 * C58485) *
               C141327 * C141499) *
              C2374 +
          ((C32721 * C58485 + C39350 * C58486 + C55017 * C58487 +
            (C29774 * C57766 + C57773 + C57773 + C141219 * C57768) * C58488) *
               C141327 * C141499 -
           (C55017 * C58488 + C39350 * C58487 + C32721 * C58486 +
            C30301 * C58485) *
               C141327 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[77] +=
        (-std::pow(Pi, 2.5) *
         (((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
              C21920 * C2960 + C21821 * C3026) *
                 C29775 +
             (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
              C21920 * C2964 + C21821 * C3030) *
                 C141219) *
                C141479 +
            ((C36893 + C36894 + C36895) * C29775 +
             (C36896 + C36897 + C36898) * C141219) *
                C141365) *
               C1596 -
           (((C21920 * C29089 + C21821 * C29175 + C21919 * C13208 +
              C21820 * C13297 + C21918 * C5329 + C21819 * C5395) *
                 C141219 +
             (C21920 * C29087 + C21821 * C29173 + C21919 * C13205 +
              C21820 * C13294 + C21918 * C5325 + C21819 * C5391) *
                 C29775) *
                C141365 +
            ((C36898 + C36897 + C36896) * C141219 +
             (C36895 + C36894 + C36893) * C29775) *
                C141479) *
               C141499) *
              C2374 +
          ((((C39463 + C39464 + C39465) * C29775 +
             (C39466 + C39467 + C39468) * C141219) *
                C141479 +
            ((C21918 * C13205 + C21819 * C13294 + C21919 * C29087 +
              C21820 * C29173 + C21920 * C34558 + C21821 * C34615) *
                 C29775 +
             (C21918 * C13208 + C21819 * C13297 + C21919 * C29089 +
              C21820 * C29175 + C21920 * C34559 + C21821 * C34616) *
                 C141219) *
                C141365) *
               C141499 -
           (((C39468 + C39467 + C39466) * C141219 +
             (C39465 + C39464 + C39463) * C29775) *
                C141365 +
            ((C21920 * C9670 + C21821 * C9771 + C21919 * C2964 +
              C21820 * C3030 + C21918 * C828 + C21819 * C917) *
                 C141219 +
             (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 +
              C21820 * C3026 + C21918 * C823 + C21819 * C912) *
                 C29775) *
                C141479) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C5869 +
             (C188 * C114 + C141327 * C195) * C5863 + C218 * C5871 +
             C219 * C5864 + C220 * C5873 + C221 * C5865) *
                C141479 +
            (C15883 + C15884 + C15859 + C15860 + C15861 + C15862) * C141365) *
               C1596 -
           ((C15879 * C5865 + C15880 * C5873 + C15881 * C5864 + C15882 * C5871 +
             (C188 * C5329 + C141327 * C5395) * C5863 +
             (C188 * C5325 + C141327 * C5391) * C5869) *
                C141365 +
            (C15862 + C15861 + C15860 + C15859 + C15884 + C15883) * C141479) *
               C141499) *
              C2374 +
          (((C18490 + C18491 + C18484 + C18485 + C18486 + C18487) * C141479 +
            ((C188 * C13205 + C141327 * C13294) * C5869 +
             (C188 * C13208 + C141327 * C13297) * C5863 +
             (C188 * C13206 + C141327 * C13295) * C5871 +
             (C188 * C13209 + C141327 * C13298) * C5864 +
             (C188 * C13207 + C141327 * C13296) * C5873 +
             (C188 * C13210 + C141327 * C13299) * C5865) *
                C141365) *
               C141499 -
           ((C18487 + C18486 + C18485 + C18484 + C18491 + C18490) * C141365 +
            (C934 * C5865 + C935 * C5873 + C936 * C5864 + C937 * C5871 +
             (C188 * C828 + C141327 * C917) * C5863 +
             (C188 * C823 + C141327 * C912) * C5869) *
                C141479) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C29775 +
             (C188 * C114 + C141327 * C195) * C141219) *
                C58485 +
            (C59651 + C59652) * C58486 + (C59653 + C59654) * C58487 +
            (C59655 + C59656) * C58488) *
               C1596 -
           (((C188 * C49991 + C141327 * C50084) * C141219 +
             (C188 * C49989 + C141327 * C50082) * C29775) *
                C58488 +
            (C59656 + C59655) * C58487 + (C59654 + C59653) * C58486 +
            (C59652 + C59651) * C58485) *
               C141499) *
              C2374 +
          (((C61341 + C61342) * C58485 + (C61343 + C61344) * C58486 +
            (C61351 + C61352) * C58487 +
            ((C188 * C57766 + C141327 * C57850) * C29775 +
             (C188 * C57767 + C141327 * C57851) * C141219) *
                C58488) *
               C141499 -
           ((C61352 + C61351) * C58488 + (C61344 + C61343) * C58487 +
            (C61342 + C61341) * C58486 +
            ((C188 * C828 + C141327 * C917) * C141219 +
             (C188 * C823 + C141327 * C912) * C29775) *
                C58485) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[77] +=
        (-std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C29775 +
             (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
              C141365 * C1789) *
                 C141219) *
                C21819 +
            ((C35986 + C35987) * C29775 + (C35988 + C35989) * C141219) *
                C21820 +
            C38766 * C21821) *
               C1596 -
           (((C39583 + C39584) * C141219 + (C39585 + C39586) * C29775) *
                C21821 +
            ((C39587 + C39588) * C141219 + (C39589 + C39590) * C29775) *
                C21820 +
            ((C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
              C141479 * C1789) *
                 C141219 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C29775) *
                C21819) *
               C141499) *
              C2374 +
          ((((C39590 + C39589) * C29775 + (C39588 + C39587) * C141219) *
                C21819 +
            ((C39586 + C39585) * C29775 + (C39584 + C39583) * C141219) *
                C21820 +
            ((C14078 * C26351 + C141479 * C26579 + C14079 * C34558 +
              C141365 * C34667) *
                 C29775 +
             (C14078 * C26353 + C141479 * C26581 + C14079 * C34559 +
              C141365 * C34668) *
                 C141219) *
                C21821) *
               C141499 -
           (((C38762 + C38763) * C141219 + (C38764 + C38765) * C29775) *
                C21821 +
            ((C35993 + C35992) * C141219 + (C35991 + C35990) * C29775) *
                C21820 +
            ((C35989 + C35988) * C141219 + (C35987 + C35986) * C29775) *
                C21819) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C5869 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C5863 +
            (C14105 + C14106) * C5871 + (C14107 + C14108) * C5864 +
            C14117 * C5873 + C14118 * C5865) *
               C141327 * C1596 -
           ((C15999 + C16000) * C5865 + (C16001 + C16002) * C5873 +
            (C16003 + C16004) * C5864 + (C16005 + C16006) * C5871 +
            (C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
             C141479 * C1789) *
                C5863 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C5869) *
               C141327 * C141499) *
              C2374 +
          (((C14078 * C3490 + C141479 * C3646 + C14079 * C13205 +
             C141365 * C13374) *
                C5869 +
            (C14078 * C3494 + C141479 * C3650 + C14079 * C13208 +
             C141365 * C13377) *
                C5863 +
            (C14078 * C3491 + C141479 * C3647 + C14079 * C13206 +
             C141365 * C13375) *
                C5871 +
            (C14078 * C3495 + C141479 * C3651 + C14079 * C13209 +
             C141365 * C13378) *
                C5864 +
            (C14078 * C3492 + C141479 * C3648 + C14079 * C13207 +
             C141365 * C13376) *
                C5873 +
            (C14078 * C3496 + C141479 * C3652 + C14079 * C13210 +
             C141365 * C13379) *
                C5865) *
               C141327 * C141499 -
           ((C14966 + C14967) * C5865 + (C14968 + C14969) * C5873 +
            (C14970 + C14971) * C5864 + (C14972 + C14973) * C5871 +
            (C14079 * C3494 + C141365 * C3650 + C14078 * C828 +
             C141479 * C1011) *
                C5863 +
            (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
             C141479 * C1006) *
                C5869) *
               C141327 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C58590 * C108 + C58485 * C276 + C58591 * C1601 + C58486 * C1784 +
             C58592 * C5325 + C58487 * C5449 + C58593 * C21035 +
             C58488 * C21228) *
                C29775 +
            (C58590 * C114 + C58485 * C282 + C58591 * C1606 + C58486 * C1789 +
             C58592 * C5329 + C58487 * C5453 + C58593 * C21038 +
             C58488 * C21231) *
                C141219) *
               C141327 * C1596 -
           ((C58593 * C49991 + C58488 * C50175 + C58592 * C21038 +
             C58487 * C21231 + C58591 * C5329 + C58486 * C5453 +
             C58590 * C1606 + C58485 * C1789) *
                C141219 +
            (C58593 * C49989 + C58488 * C50173 + C58592 * C21035 +
             C58487 * C21228 + C58591 * C5325 + C58486 * C5449 +
             C58590 * C1601 + C58485 * C1784) *
                C29775) *
               C141327 * C141499) *
              C2374 +
          (((C58590 * C3490 + C58485 * C3646 + C58591 * C13205 +
             C58486 * C13374 + C58592 * C42109 + C58487 * C42293 +
             C58593 * C57766 + C58488 * C57943) *
                C29775 +
            (C58590 * C3494 + C58485 * C3650 + C58591 * C13208 +
             C58486 * C13377 + C58592 * C42111 + C58487 * C42295 +
             C58593 * C57767 + C58488 * C57944) *
                C141219) *
               C141327 * C141499 -
           ((C58593 * C42111 + C58488 * C42295 + C58592 * C13208 +
             C58487 * C13377 + C58591 * C3494 + C58486 * C3650 + C58590 * C828 +
             C58485 * C1011) *
                C141219 +
            (C58593 * C42109 + C58488 * C42293 + C58592 * C13205 +
             C58487 * C13374 + C58591 * C3490 + C58486 * C3646 + C58590 * C823 +
             C58485 * C1006) *
                C29775) *
               C141327 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[77] +=
        (-std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C21918 +
             (C29775 * C189 + C141219 * C362) * C21819 + C30547 * C21919 +
             C30548 * C21820 + C30549 * C21920 + C30550 * C21821) *
                C141479 +
            (C37115 + C37116 + C37099 + C37100 + C37101 + C37102) * C141365) *
               C1596 -
           ((C39703 * C21821 + C39704 * C21920 + C39705 * C21820 +
             C39706 * C21919 + (C29775 * C5391 + C141219 * C5507) * C21819 +
             (C29775 * C5325 + C141219 * C5329) * C21918) *
                C141365 +
            (C37102 + C37101 + C37100 + C37099 + C37116 + C37115) * C141479) *
               C141499) *
              C2374 +
          (((C39697 + C39698 + C39699 + C39700 + C39701 + C39702) * C141479 +
            (C39706 * C21918 + C39705 * C21819 + C39704 * C21919 +
             C39703 * C21820 + (C29775 * C34558 + C141219 * C34559) * C21920 +
             (C29775 * C34615 + C141219 * C34719) * C21821) *
                C141365) *
               C141499 -
           ((C39702 + C39701 + C39700 + C39699 + C39698 + C39697) * C141365 +
            (C30552 * C21821 + C30551 * C21920 + C30550 * C21820 +
             C30549 * C21919 + C30548 * C21819 + C30547 * C21918) *
                C141479) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C188 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
              C5873 * C191 + C5865 * C364) *
                 C141327) *
                C141479 +
            ((C16129 + C16130 + C16131) * C188 +
             (C16132 + C16133 + C16134) * C141327) *
                C141365) *
               C1596 -
           (((C5873 * C5393 + C5865 * C5509 + C5871 * C5392 + C5864 * C5508 +
              C5869 * C5391 + C5863 * C5507) *
                 C141327 +
             (C5873 * C5327 + C5865 * C5331 + C5871 * C5326 + C5864 * C5330 +
              C5869 * C5325 + C5863 * C5329) *
                 C188) *
                C141365 +
            ((C16134 + C16133 + C16132) * C141327 +
             (C16131 + C16130 + C16129) * C188) *
                C141479) *
               C141499) *
              C2374 +
          ((((C10836 + C10835 + C10834) * C188 +
             (C10833 + C10832 + C10831) * C141327) *
                C141479 +
            ((C5869 * C13205 + C5863 * C13208 + C5871 * C13206 +
              C5864 * C13209 + C5873 * C13207 + C5865 * C13210) *
                 C188 +
             (C5869 * C13294 + C5863 * C13454 + C5871 * C13295 +
              C5864 * C13455 + C5873 * C13296 + C5865 * C13456) *
                 C141327) *
                C141365) *
               C141499 -
           (((C10831 + C10832 + C10833) * C141327 +
             (C10834 + C10835 + C10836) * C188) *
                C141365 +
            ((C7123 + C7122 + C7121) * C141327 +
             (C7120 + C7119 + C7118) * C188) *
                C141479) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C188 +
             (C29775 * C189 + C141219 * C362) * C141327) *
                C58485 +
            (C59795 + C59796) * C58486 + (C59797 + C59798) * C58487 +
            (C59799 + C59800) * C58488) *
               C1596 -
           (((C29775 * C50082 + C141219 * C50251) * C141327 +
             (C29775 * C49989 + C141219 * C49991) * C188) *
                C58488 +
            (C59800 + C59799) * C58487 + (C59798 + C59797) * C58486 +
            (C59796 + C59795) * C58485) *
               C141499) *
              C2374 +
          (((C61485 + C61486) * C58485 + (C61487 + C61488) * C58486 +
            (C61489 + C61490) * C58487 +
            ((C29775 * C57766 + C141219 * C57767) * C188 +
             (C29775 * C57850 + C141219 * C58019) * C141327) *
                C58488) *
               C141499 -
           ((C61490 + C61489) * C58488 + (C61488 + C61487) * C58487 +
            (C61486 + C61485) * C58486 +
            (C30548 * C141327 + C30547 * C188) * C58485) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[77] +=
        (-std::pow(Pi, 2.5) *
         ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
             C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
             C22185 + C21821 * C3196) *
                C141219 * C141479 +
            (C37229 + C37230 + C37231) * C141219 * C141365) *
               C1596 -
           ((C22181 * C29087 + C29410 + C29410 + C21821 * C29405 +
             C22180 * C13205 + C29409 + C29409 + C21820 * C13531 +
             C22179 * C5325 + C29408 + C29408 + C21819 * C5561) *
                C141219 * C141365 +
            (C37231 + C37230 + C37229) * C141219 * C141479) *
               C141499) *
              C2374 +
          (((C39820 + C39821 + C39822) * C141219 * C141479 +
            (C22179 * C13205 + C39811 + C39811 + C21819 * C13531 +
             C22180 * C29087 + C39812 + C39812 + C21820 * C29405 +
             C22181 * C34558 + C39813 + C39813 + C21821 * C34770) *
                C141219 * C141365) *
               C141499 -
           ((C39822 + C39821 + C39820) * C141219 * C141365 +
            (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
             C22180 * C2960 + C23189 + C23189 + C21820 * C3196 + C22179 * C823 +
             C23190 + C23190 + C21819 * C1171) *
                C141219 * C141479) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C5863 +
             C448 * C5864 + C449 * C5865) *
                C141479 +
            (C16259 + C16241 + C16242) * C141365) *
               C1596 -
           ((C16257 * C5865 + C16258 * C5864 +
             (C418 * C5325 + C5566 + C5566 + C141327 * C5561) * C5863) *
                C141365 +
            (C16242 + C16241 + C16259) * C141479) *
               C141499) *
              C2374 +
          (((C18796 + C18788 + C18789) * C141479 +
            ((C418 * C13205 + C18790 + C18790 + C141327 * C13531) * C5863 +
             (C418 * C13206 + C18791 + C18791 + C141327 * C13532) * C5864 +
             (C418 * C13207 + C18792 + C18792 + C141327 * C13533) * C5865) *
                C141365) *
               C141499 -
           ((C18789 + C18788 + C18796) * C141365 +
            (C1192 * C5865 + C1193 * C5864 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C5863) *
                C141479) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C141219 * C58485 +
            C59879 * C58486 + C59880 * C58487 + C59881 * C58488) *
               C1596 -
           ((C418 * C49989 + C50351 + C50351 + C141327 * C50344) * C141219 *
                C58488 +
            C59881 * C58487 + C59880 * C58486 + C59879 * C58485) *
               C141499) *
              C2374 +
          ((C61557 * C58485 + C61558 * C58486 + C61565 * C58487 +
            (C418 * C57766 + C61561 + C61561 + C141327 * C58107) * C141219 *
                C58488) *
               C141499 -
           (C61565 * C58488 + C61558 * C58487 + C61557 * C58486 +
            (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C141219 *
                C58485) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyz[77] +=
        (-std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C21918 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C21819 +
            (C35986 + C35987) * C21919 + (C36316 + C36317) * C21820 +
            C38750 * C21920 + C38992 * C21821) *
               C141219 * C1596 -
           ((C39929 + C39930) * C21821 + (C39585 + C39586) * C21920 +
            (C39931 + C39932) * C21820 + (C39589 + C39590) * C21919 +
            (C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
             C141479 * C2040) *
                C21819 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C21918) *
               C141219 * C141499) *
              C2374 +
          (((C39590 + C39589) * C21918 + (C39932 + C39931) * C21819 +
            (C39586 + C39585) * C21919 + (C39930 + C39929) * C21820 +
            (C14078 * C26351 + C141479 * C26579 + C14079 * C34558 +
             C141365 * C34667) *
                C21920 +
            (C14078 * C26477 + C141479 * C26925 + C14079 * C34615 +
             C141365 * C34825) *
                C21821) *
               C141219 * C141499 -
           ((C38997 + C38998) * C21821 + (C38764 + C38765) * C21920 +
            (C36319 + C36318) * C21820 + (C35991 + C35990) * C21919 +
            (C36317 + C36316) * C21819 + (C35987 + C35986) * C21918) *
               C141219 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C188 +
             (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
              C141365 * C2040) *
                 C141327) *
                C5863 +
            ((C14105 + C14106) * C188 + (C14354 + C14355) * C141327) * C5864 +
            C14362 * C5865) *
               C1596 -
           (((C16366 + C16367) * C141327 + (C16001 + C16002) * C188) * C5865 +
            ((C16368 + C16369) * C141327 + (C16005 + C16006) * C188) * C5864 +
            ((C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
              C141479 * C2040) *
                 C141327 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C188) *
                C5863) *
               C141499) *
              C2374 +
          ((((C14078 * C3490 + C141479 * C3646 + C14079 * C13205 +
              C141365 * C13374) *
                 C188 +
             (C14078 * C3572 + C141479 * C3864 + C14079 * C13294 +
              C141365 * C13614) *
                 C141327) *
                C5863 +
            ((C14078 * C3491 + C141479 * C3647 + C14079 * C13206 +
              C141365 * C13375) *
                 C188 +
             (C14078 * C3573 + C141479 * C3865 + C14079 * C13295 +
              C141365 * C13615) *
                 C141327) *
                C5864 +
            ((C14078 * C3492 + C141479 * C3648 + C14079 * C13207 +
              C141365 * C13376) *
                 C188 +
             (C14078 * C3574 + C141479 * C3866 + C14079 * C13296 +
              C141365 * C13616) *
                 C141327) *
                C5865) *
               C141499 -
           (((C15286 + C15287) * C141327 + (C14968 + C14969) * C188) * C5865 +
            ((C15288 + C15289) * C141327 + (C14972 + C14973) * C188) * C5864 +
            ((C14079 * C3572 + C141365 * C3864 + C14078 * C912 +
              C141479 * C1262) *
                 C141327 +
             (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
              C141479 * C1006) *
                 C188) *
                C5863) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C58590 * C108 + C58485 * C276 + C58591 * C1601 + C58486 * C1784 +
             C58592 * C5325 + C58487 * C5449 + C58593 * C21035 +
             C58488 * C21228) *
                C188 +
            (C58590 * C189 + C58485 * C501 + C58591 * C1690 + C58486 * C2040 +
             C58592 * C5391 + C58487 * C5619 + C58593 * C21136 +
             C58488 * C21491) *
                C141327) *
               C141219 * C1596 -
           ((C58593 * C50082 + C58488 * C50430 + C58592 * C21136 +
             C58487 * C21491 + C58591 * C5391 + C58486 * C5619 +
             C58590 * C1690 + C58485 * C2040) *
                C141327 +
            (C58593 * C49989 + C58488 * C50173 + C58592 * C21035 +
             C58487 * C21228 + C58591 * C5325 + C58486 * C5449 +
             C58590 * C1601 + C58485 * C1784) *
                C188) *
               C141219 * C141499) *
              C2374 +
          (((C58590 * C3490 + C58485 * C3646 + C58591 * C13205 +
             C58486 * C13374 + C58592 * C42109 + C58487 * C42293 +
             C58593 * C57766 + C58488 * C57943) *
                C188 +
            (C58590 * C3572 + C58485 * C3864 + C58591 * C13294 +
             C58486 * C13614 + C58592 * C42197 + C58487 * C42553 +
             C58593 * C57850 + C58488 * C58196) *
                C141327) *
               C141219 * C141499 -
           ((C58593 * C42197 + C58488 * C42553 + C58592 * C13294 +
             C58487 * C13614 + C58591 * C3572 + C58486 * C3864 + C58590 * C912 +
             C58485 * C1262) *
                C141327 +
            (C58593 * C42109 + C58488 * C42293 + C58592 * C13205 +
             C58487 * C13374 + C58591 * C3490 + C58486 * C3646 + C58590 * C823 +
             C58485 * C1006) *
                C188) *
               C141219 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezx[77] +=
        (-std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C14078 +
             (C29775 * C276 + C141219 * C579) * C141479 + C37111 * C14079 +
             C37432 * C141365) *
                C21819 +
            (C36420 + C36421 + C36422 + C36423) * C21820 + C39079 * C21821) *
               C1596 -
           ((C40043 + C40033 + C40034 + C40035) * C21821 +
            (C40044 + C40038 + C40039 + C40040) * C21820 +
            ((C29775 * C5449 + C141219 * C5673) * C141365 +
             (C29775 * C5325 + C141219 * C5329) * C14079 + C37432 * C141479 +
             C37111 * C14078) *
                C21819) *
               C141499) *
              C2374 +
          (((C40040 + C40039 + C40038 + C40044) * C21819 +
            (C40035 + C40034 + C40033 + C40043) * C21820 +
            (C32953 * C14078 + C33175 * C141479 +
             (C29775 * C34558 + C141219 * C34559) * C14079 +
             (C29775 * C34667 + C141219 * C34876) * C141365) *
                C21821) *
               C141499 -
           ((C39074 + C39075 + C39076 + C39077) * C21821 +
            (C36427 + C36426 + C36425 + C36424) * C21820 +
            (C36423 + C36422 + C36421 + C36420) * C21819) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
             C5873 * C110 + C5865 * C116) *
                C14078 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
             C5873 * C278 + C5865 * C581) *
                C141479 +
            (C16129 + C16130 + C16131) * C14079 +
            (C16480 + C16481 + C16482) * C141365) *
               C141327 * C1596 -
           ((C5873 * C5451 + C5865 * C5675 + C5871 * C5450 + C5864 * C5674 +
             C5869 * C5449 + C5863 * C5673) *
                C141365 +
            (C5873 * C5327 + C5865 * C5331 + C5871 * C5326 + C5864 * C5330 +
             C5869 * C5325 + C5863 * C5329) *
                C14079 +
            (C16482 + C16481 + C16480) * C141479 +
            (C16131 + C16130 + C16129) * C14078) *
               C141327 * C141499) *
              C2374 +
          (((C10836 + C10835 + C10834) * C14078 +
            (C11157 + C11156 + C11155) * C141479 +
            (C5869 * C13205 + C5863 * C13208 + C5871 * C13206 + C5864 * C13209 +
             C5873 * C13207 + C5865 * C13210) *
                C14079 +
            (C5869 * C13374 + C5863 * C13691 + C5871 * C13375 + C5864 * C13692 +
             C5873 * C13376 + C5865 * C13693) *
                C141365) *
               C141327 * C141499 -
           ((C11155 + C11156 + C11157) * C141365 +
            (C10834 + C10835 + C10836) * C14079 +
            (C7483 + C7482 + C7481) * C141479 +
            (C7120 + C7119 + C7118) * C14078) *
               C141327 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C58590 +
            (C29775 * C276 + C141219 * C579) * C58485 + C37111 * C58591 +
            C37432 * C58486 + C42383 * C58592 + C42634 * C58487 +
            C58030 * C58593 + C58275 * C58488) *
               C141327 * C1596 -
           ((C29775 * C50173 + C141219 * C50506) * C58488 +
            (C29775 * C49989 + C141219 * C49991) * C58593 + C58275 * C58487 +
            C58030 * C58592 + C42634 * C58486 + C42383 * C58591 +
            C37432 * C58485 + C37111 * C58590) *
               C141327 * C141499) *
              C2374 +
          ((C32957 * C58590 + C33177 * C58485 + C39706 * C58591 +
            C40042 * C58486 + C55368 * C58592 + C55701 * C58487 +
            (C29775 * C57766 + C141219 * C57767) * C58593 +
            (C29775 * C57943 + C141219 * C58271) * C58488) *
               C141327 * C141499 -
           (C55701 * C58488 + C55368 * C58593 + C40042 * C58487 +
            C39706 * C58592 + C33177 * C58486 + C32957 * C58591 +
            C30783 * C58485 + C30547 * C58590) *
               C141327 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[77] +=
        (-std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C14078 +
            (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
             C21920 * C3084 + C21821 * C3362) *
                C141479 +
            (C36893 + C36894 + C36895) * C14079 +
            (C37538 + C37539 + C37540) * C141365) *
               C141219 * C1596 -
           ((C21920 * C29251 + C21821 * C29639 + C21919 * C13374 +
             C21820 * C13768 + C21918 * C5449 + C21819 * C5727) *
                C141365 +
            (C21920 * C29087 + C21821 * C29173 + C21919 * C13205 +
             C21820 * C13294 + C21918 * C5325 + C21819 * C5391) *
                C14079 +
            (C37540 + C37539 + C37538) * C141479 +
            (C36895 + C36894 + C36893) * C14078) *
               C141219 * C141499) *
              C2374 +
          (((C39463 + C39464 + C39465) * C14078 +
            (C40149 + C40150 + C40151) * C141479 +
            (C21918 * C13205 + C21819 * C13294 + C21919 * C29087 +
             C21820 * C29173 + C21920 * C34558 + C21821 * C34615) *
                C14079 +
            (C21918 * C13374 + C21819 * C13768 + C21919 * C29251 +
             C21820 * C29639 + C21920 * C34667 + C21821 * C34927) *
                C141365) *
               C141219 * C141499 -
           ((C40151 + C40150 + C40149) * C141365 +
            (C39465 + C39464 + C39463) * C14079 +
            (C21920 * C9848 + C21821 * C10284 + C21919 * C3084 +
             C21820 * C3362 + C21918 * C1006 + C21819 * C1419) *
                C141479 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C14078) *
               C141219 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C14078 +
             (C188 * C276 + C141327 * C635) * C141479 + C15877 * C14079 +
             C16596 * C141365) *
                C5863 +
            (C14511 + C14512 + C14513 + C14514) * C5864 + C14525 * C5865) *
               C1596 -
           ((C16599 + C16588 + C16589 + C16590) * C5865 +
            (C16600 + C16593 + C16594 + C16595) * C5864 +
            ((C188 * C5449 + C141327 * C5727) * C141365 +
             (C188 * C5325 + C141327 * C5391) * C14079 + C16596 * C141479 +
             C15877 * C14078) *
                C5863) *
               C141499) *
              C2374 +
          (((C18488 * C14078 + C19093 * C141479 +
             (C188 * C13205 + C141327 * C13294) * C14079 +
             (C188 * C13374 + C141327 * C13768) * C141365) *
                C5863 +
            (C14851 * C14078 + C15497 * C141479 +
             (C188 * C13206 + C141327 * C13295) * C14079 +
             (C188 * C13375 + C141327 * C13769) * C141365) *
                C5864 +
            (C14849 * C14078 + C15496 * C141479 +
             (C188 * C13207 + C141327 * C13296) * C14079 +
             (C188 * C13376 + C141327 * C13770) * C141365) *
                C5865) *
               C141499 -
           ((C15498 + C15488 + C15489 + C15490) * C5865 +
            (C15499 + C15493 + C15494 + C15495) * C5864 +
            (C19093 * C141365 + C18488 * C14079 +
             (C188 * C1006 + C141327 * C1419) * C141479 +
             (C188 * C823 + C141327 * C912) * C14078) *
                C5863) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C58590 +
            (C188 * C276 + C141327 * C635) * C58485 + C15877 * C58591 +
            C16596 * C58486 + C21152 * C58592 + C21660 * C58487 +
            C50096 * C58593 + C50594 * C58488) *
               C141219 * C1596 -
           ((C188 * C50173 + C141327 * C50589) * C58488 +
            (C188 * C49989 + C141327 * C50082) * C58593 + C50594 * C58487 +
            C50096 * C58592 + C21660 * C58486 + C21152 * C58591 +
            C16596 * C58485 + C15877 * C58590) *
               C141219 * C141499) *
              C2374 +
          ((C18488 * C58590 + C19093 * C58485 + C47416 * C58591 +
            C48046 * C58486 + C61349 * C58592 + C61766 * C58487 +
            (C188 * C57766 + C141327 * C57850) * C58593 +
            (C188 * C57943 + C141327 * C58349) * C58488) *
               C141219 * C141499 -
           (C61766 * C58488 + C61349 * C58593 + C48046 * C58487 +
            C47416 * C58592 + C19093 * C58486 + C18488 * C58591 +
            (C188 * C1006 + C141327 * C1419) * C58485 +
            (C188 * C823 + C141327 * C912) * C58590) *
               C141219 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[77] += (-std::pow(Pi, 2.5) *
                   ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                       C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                          C21819 +
                      (C36666 + C36667) * C21820 + C39228 * C21821) *
                         C141219 * C1596 -
                     ((C40268 + C40269) * C21821 + (C40270 + C40271) * C21820 +
                      (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
                       C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                          C21819) *
                         C141219 * C141499) *
                        C2374 +
                    (((C40271 + C40270) * C21819 + (C40269 + C40268) * C21820 +
                      (C14599 * C26351 + C40258 + C40258 + C141479 * C27240 +
                       C14600 * C34558 + C40259 + C40259 + C141365 * C34978) *
                          C21821) *
                         C141219 * C141499 -
                     ((C39239 + C39240) * C21821 + (C36669 + C36668) * C21820 +
                      (C36667 + C36666) * C21819) *
                         C141219 * C1596) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                       C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                          C141327 * C5863 +
                      (C14636 + C14637) * C141327 * C5864 + C14643 * C5865) *
                         C1596 -
                     ((C16723 + C16724) * C141327 * C5865 +
                      (C16725 + C16726) * C141327 * C5864 +
                      (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
                       C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                          C141327 * C5863) *
                         C141499) *
                        C2374 +
                    (((C14599 * C3490 + C19192 + C19192 + C141479 * C4074 +
                       C14600 * C13205 + C19193 + C19193 + C141365 * C13845) *
                          C141327 * C5863 +
                      (C14599 * C3491 + C19194 + C19194 + C141479 * C4075 +
                       C14600 * C13206 + C19195 + C19195 + C141365 * C13846) *
                          C141327 * C5864 +
                      (C14599 * C3492 + C19196 + C19196 + C141479 * C4076 +
                       C14600 * C13207 + C19197 + C19197 + C141365 * C13847) *
                          C141327 * C5865) *
                         C141499 -
                     ((C15622 + C15623) * C141327 * C5865 +
                      (C15624 + C15625) * C141327 * C5864 +
                      (C14600 * C3490 + C15610 + C15610 + C141365 * C4074 +
                       C14599 * C823 + C15611 + C15611 + C141479 * C1505) *
                          C141327 * C5863) *
                         C1596) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C58894 * C108 + C58899 + C58899 + C58485 * C714 +
                      C58895 * C1601 + C58900 + C58900 + C58486 * C2283 +
                      C58896 * C5325 + C58901 + C58901 + C58487 * C5781 +
                      C58897 * C21035 + C58902 + C58902 + C58488 * C21734) *
                         C141327 * C141219 * C1596 -
                     (C58897 * C49989 + C60152 + C60152 + C58488 * C50668 +
                      C58896 * C21035 + C60153 + C60153 + C58487 * C21734 +
                      C58895 * C5325 + C60154 + C60154 + C58486 * C5781 +
                      C58894 * C1601 + C60155 + C60155 + C58485 * C2283) *
                         C141327 * C141219 * C141499) *
                        C2374 +
                    ((C58894 * C3490 + C61833 + C61833 + C58485 * C4074 +
                      C58895 * C13205 + C61834 + C61834 + C58486 * C13845 +
                      C58896 * C42109 + C61835 + C61835 + C58487 * C42793 +
                      C58897 * C57766 + C61836 + C61836 + C58488 * C58431) *
                         C141327 * C141219 * C141499 -
                     (C58897 * C42109 + C59505 + C59505 + C58488 * C42793 +
                      C58896 * C13205 + C59506 + C59506 + C58487 * C13845 +
                      C58895 * C3490 + C59507 + C59507 + C58486 * C4074 +
                      C58894 * C823 + C59508 + C59508 + C58485 * C1505) *
                         C141327 * C141219 * C1596) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q));
    d2eexx[78] +=
        (-std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141479 +
             C36781 * C141365) *
                C21819 +
            (C35748 + C35749) * C21820 + C38599 * C21821) *
               C4148 -
           ((C39351 + C39341) * C21821 + (C39352 + C39344) * C21820 +
            ((C29774 * C5325 + C34562 + C34562 + C141219 * C5333) * C141365 +
             C36781 * C141479) *
                C21819) *
               C141499) *
              C141281 * C2376 +
          (((C36782 * C141479 +
             (C29774 * C5326 + C36774 + C36774 + C141219 * C5334) * C141365) *
                C21819 +
            (C35762 * C141479 +
             (C29774 * C13206 + C36775 + C36775 + C141219 * C13212) * C141365) *
                C21820 +
            (C35763 * C141479 +
             (C29774 * C29088 + C36776 + C36776 + C141219 * C29092) * C141365) *
                C21821) *
               C141499 -
           ((C35765 + C35755) * C21821 + (C35764 + C35752) * C21820 +
            (C36782 * C141365 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141479) *
                C21819) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 +
             C5876 + C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
             C5865 * C122) *
                C141479 +
            (C15751 + C15752 + C15753) * C141365) *
               C141327 * C4148 -
           ((C5872 * C5327 + C13217 + C13217 + C5865 * C5335 + C5870 * C5326 +
             C13216 + C13216 + C5864 * C5334 + C5868 * C5325 + C13215 + C13215 +
             C5863 * C5333) *
                C141365 +
            (C15753 + C15752 + C15751) * C141479) *
               C141327 * C141499) *
              C141281 * C2376 +
          (((C15754 + C15755 + C15756) * C141479 +
            (C5868 * C5326 + C15736 + C15736 + C5863 * C5334 + C5870 * C5327 +
             C15737 + C15737 + C5864 * C5335 + C5872 * C5328 + C15738 + C15738 +
             C5865 * C5336) *
                C141365) *
               C141327 * C141499 -
           ((C15756 + C15755 + C15754) * C141365 +
            (C5872 * C111 + C5884 + C5884 + C5865 * C123 + C5870 * C110 +
             C5885 + C5885 + C5864 * C122 + C5868 * C109 + C5886 + C5886 +
             C5863 * C121) *
                C141479) *
               C141327 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C58485 +
            C36781 * C58486 + C42123 * C58487 + C57776 * C58488) *
               C141327 * C4148 -
           ((C29774 * C49989 + C57772 + C57772 + C141219 * C49993) * C58488 +
            C57776 * C58487 + C42123 * C58486 + C36781 * C58485) *
               C141327 * C141499) *
              C141281 * C2376 +
          ((C36782 * C58485 + C52409 * C58486 + C59584 * C58487 +
            (C29774 * C49990 + C59581 + C59581 + C141219 * C49994) * C58488) *
               C141327 * C141499 -
           (C59584 * C58488 + C52409 * C58487 + C36782 * C58486 +
            (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C58485) *
               C141327 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexy[78] +=
        (-std::pow(Pi, 2.5) *
         (((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
              C21920 * C2960 + C21821 * C3026) *
                 C29775 +
             (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
              C21920 * C2964 + C21821 * C3030) *
                 C141219) *
                C141479 +
            ((C36893 + C36894 + C36895) * C29775 +
             (C36896 + C36897 + C36898) * C141219) *
                C141365) *
               C4148 -
           (((C21920 * C29089 + C21821 * C29175 + C21919 * C13208 +
              C21820 * C13297 + C21918 * C5329 + C21819 * C5395) *
                 C141219 +
             (C21920 * C29087 + C21821 * C29173 + C21919 * C13205 +
              C21820 * C13294 + C21918 * C5325 + C21819 * C5391) *
                 C29775) *
                C141365 +
            ((C36898 + C36897 + C36896) * C141219 +
             (C36895 + C36894 + C36893) * C29775) *
                C141479) *
               C141499) *
              C141281 * C2376 +
          ((((C23870 + C23869 + C23868) * C29775 +
             (C23867 + C23866 + C23865) * C141219) *
                C141479 +
            ((C21918 * C5326 + C21819 * C5392 + C21919 * C13206 +
              C21820 * C13295 + C21920 * C29088 + C21821 * C29174) *
                 C29775 +
             (C21918 * C5330 + C21819 * C5396 + C21919 * C13209 +
              C21820 * C13298 + C21920 * C29090 + C21821 * C29176) *
                 C141219) *
                C141365) *
               C141499 -
           (((C23865 + C23866 + C23867) * C141219 +
             (C23868 + C23869 + C23870) * C29775) *
                C141365 +
            ((C21951 + C21950 + C21949) * C141219 +
             (C21948 + C21947 + C21946) * C29775) *
                C141479) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C5869 +
             (C188 * C114 + C141327 * C195) * C5863 + C218 * C5871 +
             C219 * C5864 + C220 * C5873 + C221 * C5865) *
                C141479 +
            (C15883 + C15884 + C15859 + C15860 + C15861 + C15862) * C141365) *
               C4148 -
           ((C15879 * C5865 + C15880 * C5873 + C15881 * C5864 + C15882 * C5871 +
             (C188 * C5329 + C141327 * C5395) * C5863 +
             (C188 * C5325 + C141327 * C5391) * C5869) *
                C141365 +
            (C15862 + C15861 + C15860 + C15859 + C15884 + C15883) * C141479) *
               C141499) *
              C141281 * C2376 +
          (((C15871 + C15872 + C15873 + C15874 + C15875 + C15876) * C141479 +
            (C15882 * C5869 + C15881 * C5863 + C15880 * C5871 + C15879 * C5864 +
             (C188 * C5328 + C141327 * C5394) * C5873 +
             (C188 * C5332 + C141327 * C5398) * C5865) *
                C141365) *
               C141499 -
           ((C15876 + C15875 + C15874 + C15873 + C15872 + C15871) * C141365 +
            (C223 * C5865 + C222 * C5873 + C221 * C5864 + C220 * C5871 +
             C219 * C5863 + C218 * C5869) *
                C141479) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C29775 +
             (C188 * C114 + C141327 * C195) * C141219) *
                C58485 +
            (C59651 + C59652) * C58486 + (C59653 + C59654) * C58487 +
            (C59655 + C59656) * C58488) *
               C4148 -
           (((C188 * C49991 + C141327 * C50084) * C141219 +
             (C188 * C49989 + C141327 * C50082) * C29775) *
                C58488 +
            (C59656 + C59655) * C58487 + (C59654 + C59653) * C58486 +
            (C59652 + C59651) * C58485) *
               C141499) *
              C141281 * C2376 +
          (((C59657 + C59658) * C58485 + (C59659 + C59660) * C58486 +
            (C59661 + C59662) * C58487 +
            ((C188 * C49990 + C141327 * C50083) * C29775 +
             (C188 * C49992 + C141327 * C50085) * C141219) *
                C58488) *
               C141499 -
           ((C59662 + C59661) * C58488 + (C59660 + C59659) * C58487 +
            (C59658 + C59657) * C58486 +
            (C219 * C141219 + C218 * C29775) * C58485) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[78] +=
        (-std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C29775 +
             (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
              C141365 * C1789) *
                 C141219) *
                C21819 +
            ((C35986 + C35987) * C29775 + (C35988 + C35989) * C141219) *
                C21820 +
            C38766 * C21821) *
               C4148 -
           (((C39583 + C39584) * C141219 + (C39585 + C39586) * C29775) *
                C21821 +
            ((C39587 + C39588) * C141219 + (C39589 + C39590) * C29775) *
                C21820 +
            ((C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
              C141479 * C1789) *
                 C141219 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C29775) *
                C21819) *
               C141499) *
              C141281 * C2376 +
          ((((C16006 + C16005) * C29775 + (C16004 + C16003) * C141219) *
                C21819 +
            ((C14078 * C3491 + C141479 * C3647 + C14079 * C13206 +
              C141365 * C13375) *
                 C29775 +
             (C14078 * C3495 + C141479 * C3651 + C14079 * C13209 +
              C141365 * C13378) *
                 C141219) *
                C21820 +
            ((C14078 * C10471 + C141479 * C10700 + C14079 * C29088 +
              C141365 * C29252) *
                 C29775 +
             (C14078 * C10474 + C141479 * C10703 + C14079 * C29090 +
              C141365 * C29254) *
                 C141219) *
                C21821) *
               C141499 -
           (((C35997 + C35996) * C141219 + (C35995 + C35994) * C29775) *
                C21821 +
            ((C14970 + C14971) * C141219 + (C14972 + C14973) * C29775) *
                C21820 +
            ((C14108 + C14107) * C141219 + (C14106 + C14105) * C29775) *
                C21819) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C5869 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C5863 +
            (C14105 + C14106) * C5871 + (C14107 + C14108) * C5864 +
            C14117 * C5873 + C14118 * C5865) *
               C141327 * C4148 -
           ((C15999 + C16000) * C5865 + (C16001 + C16002) * C5873 +
            (C16003 + C16004) * C5864 + (C16005 + C16006) * C5871 +
            (C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
             C141479 * C1789) *
                C5863 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C5869) *
               C141327 * C141499) *
              C141281 * C2376 +
          (((C16006 + C16005) * C5869 + (C16004 + C16003) * C5863 +
            (C16002 + C16001) * C5871 + (C16000 + C15999) * C5864 +
            (C14078 * C1598 + C141479 * C1781 + C14079 * C5328 +
             C141365 * C5452) *
                C5873 +
            (C14078 * C1603 + C141479 * C1786 + C14079 * C5332 +
             C141365 * C5456) *
                C5865) *
               C141327 * C141499 -
           ((C14113 + C14114) * C5865 + (C14115 + C14116) * C5873 +
            (C14112 + C14111) * C5864 + (C14110 + C14109) * C5871 +
            (C14108 + C14107) * C5863 + (C14106 + C14105) * C5869) *
               C141327 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C58590 * C108 + C58485 * C276 + C58591 * C1601 + C58486 * C1784 +
             C58592 * C5325 + C58487 * C5449 + C58593 * C21035 +
             C58488 * C21228) *
                C29775 +
            (C58590 * C114 + C58485 * C282 + C58591 * C1606 + C58486 * C1789 +
             C58592 * C5329 + C58487 * C5453 + C58593 * C21038 +
             C58488 * C21231) *
                C141219) *
               C141327 * C4148 -
           ((C58593 * C49991 + C58488 * C50175 + C58592 * C21038 +
             C58487 * C21231 + C58591 * C5329 + C58486 * C5453 +
             C58590 * C1606 + C58485 * C1789) *
                C141219 +
            (C58593 * C49989 + C58488 * C50173 + C58592 * C21035 +
             C58487 * C21228 + C58591 * C5325 + C58486 * C5449 +
             C58590 * C1601 + C58485 * C1784) *
                C29775) *
               C141327 * C141499) *
              C141281 * C2376 +
          (((C58590 * C1600 + C58485 * C1783 + C58591 * C5326 + C58486 * C5450 +
             C58592 * C21036 + C58487 * C21229 + C58593 * C49990 +
             C58488 * C50174) *
                C29775 +
            (C58590 * C1605 + C58485 * C1788 + C58591 * C5330 + C58486 * C5454 +
             C58592 * C21039 + C58487 * C21232 + C58593 * C49992 +
             C58488 * C50176) *
                C141219) *
               C141327 * C141499 -
           ((C58593 * C21039 + C58488 * C21232 + C58592 * C5330 +
             C58487 * C5454 + C58591 * C1605 + C58486 * C1788 + C58590 * C115 +
             C58485 * C283) *
                C141219 +
            (C58593 * C21036 + C58488 * C21229 + C58592 * C5326 +
             C58487 * C5450 + C58591 * C1600 + C58486 * C1783 + C58590 * C109 +
             C58485 * C277) *
                C29775) *
               C141327 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[78] +=
        (-std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C21918 +
             (C29775 * C189 + C141219 * C362) * C21819 + C30547 * C21919 +
             C30548 * C21820 + C30549 * C21920 + C30550 * C21821) *
                C141479 +
            (C37115 + C37116 + C37099 + C37100 + C37101 + C37102) * C141365) *
               C4148 -
           ((C39703 * C21821 + C39704 * C21920 + C39705 * C21820 +
             C39706 * C21919 + (C29775 * C5391 + C141219 * C5507) * C21819 +
             (C29775 * C5325 + C141219 * C5329) * C21918) *
                C141365 +
            (C37102 + C37101 + C37100 + C37099 + C37116 + C37115) * C141479) *
               C141499) *
              C141281 * C2376 +
          (((C37117 + C37118 + C37107 + C37108 + C37109 + C37110) * C141479 +
            ((C29775 * C5326 + C141219 * C5330) * C21918 +
             (C29775 * C5392 + C141219 * C5508) * C21819 +
             (C29775 * C13206 + C141219 * C13209) * C21919 +
             (C29775 * C13295 + C141219 * C13455) * C21820 +
             (C29775 * C29088 + C141219 * C29090) * C21920 +
             (C29775 * C29174 + C141219 * C29330) * C21821) *
                C141365) *
               C141499 -
           ((C37110 + C37109 + C37108 + C37107 + C37118 + C37117) * C141365 +
            (C30556 * C21821 + C30555 * C21920 + C30554 * C21820 +
             C30553 * C21919 + (C29775 * C190 + C141219 * C363) * C21819 +
             (C29775 * C109 + C141219 * C115) * C21918) *
                C141479) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C188 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
              C5873 * C191 + C5865 * C364) *
                 C141327) *
                C141479 +
            ((C16129 + C16130 + C16131) * C188 +
             (C16132 + C16133 + C16134) * C141327) *
                C141365) *
               C4148 -
           (((C5873 * C5393 + C5865 * C5509 + C5871 * C5392 + C5864 * C5508 +
              C5869 * C5391 + C5863 * C5507) *
                 C141327 +
             (C5873 * C5327 + C5865 * C5331 + C5871 * C5326 + C5864 * C5330 +
              C5869 * C5325 + C5863 * C5329) *
                 C188) *
                C141365 +
            ((C16134 + C16133 + C16132) * C141327 +
             (C16131 + C16130 + C16129) * C188) *
                C141479) *
               C141499) *
              C141281 * C2376 +
          ((((C16135 + C16136 + C16137) * C188 +
             (C16138 + C16139 + C16140) * C141327) *
                C141479 +
            ((C5869 * C5326 + C5863 * C5330 + C5871 * C5327 + C5864 * C5331 +
              C5873 * C5328 + C5865 * C5332) *
                 C188 +
             (C5869 * C5392 + C5863 * C5508 + C5871 * C5393 + C5864 * C5509 +
              C5873 * C5394 + C5865 * C5510) *
                 C141327) *
                C141365) *
               C141499 -
           (((C16140 + C16139 + C16138) * C141327 +
             (C16137 + C16136 + C16135) * C188) *
                C141365 +
            ((C5873 * C192 + C5865 * C365 + C5871 * C191 + C5864 * C364 +
              C5869 * C190 + C5863 * C363) *
                 C141327 +
             (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
              C5869 * C109 + C5863 * C115) *
                 C188) *
                C141479) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C188 +
             (C29775 * C189 + C141219 * C362) * C141327) *
                C58485 +
            (C59795 + C59796) * C58486 + (C59797 + C59798) * C58487 +
            (C59799 + C59800) * C58488) *
               C4148 -
           (((C29775 * C50082 + C141219 * C50251) * C141327 +
             (C29775 * C49989 + C141219 * C49991) * C188) *
                C58488 +
            (C59800 + C59799) * C58487 + (C59798 + C59797) * C58486 +
            (C59796 + C59795) * C58485) *
               C141499) *
              C141281 * C2376 +
          (((C59801 + C59802) * C58485 + (C59803 + C59804) * C58486 +
            (C59811 + C59812) * C58487 +
            ((C29775 * C49990 + C141219 * C49992) * C188 +
             (C29775 * C50083 + C141219 * C50252) * C141327) *
                C58488) *
               C141499 -
           ((C59812 + C59811) * C58488 + (C59804 + C59803) * C58487 +
            (C59802 + C59801) * C58486 +
            ((C29775 * C190 + C141219 * C363) * C141327 +
             (C29775 * C109 + C141219 * C115) * C188) *
                C58485) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[78] +=
        (-std::pow(Pi, 2.5) *
         ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
             C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
             C22185 + C21821 * C3196) *
                C141219 * C141479 +
            (C37229 + C37230 + C37231) * C141219 * C141365) *
               C4148 -
           ((C22181 * C29087 + C29410 + C29410 + C21821 * C29405 +
             C22180 * C13205 + C29409 + C29409 + C21820 * C13531 +
             C22179 * C5325 + C29408 + C29408 + C21819 * C5561) *
                C141219 * C141365 +
            (C37231 + C37230 + C37229) * C141219 * C141479) *
               C141499) *
              C141281 * C2376 +
          (((C24194 + C24193 + C24192) * C141219 * C141479 +
            (C22179 * C5326 + C29411 + C29411 + C21819 * C5562 +
             C22180 * C13206 + C29412 + C29412 + C21820 * C13532 +
             C22181 * C29088 + C29413 + C29413 + C21821 * C29406) *
                C141219 * C141365) *
               C141499 -
           ((C24192 + C24193 + C24194) * C141219 * C141365 +
            (C22221 + C22220 + C22219) * C141219 * C141479) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C5863 +
             C448 * C5864 + C449 * C5865) *
                C141479 +
            (C16259 + C16241 + C16242) * C141365) *
               C4148 -
           ((C16257 * C5865 + C16258 * C5864 +
             (C418 * C5325 + C5566 + C5566 + C141327 * C5561) * C5863) *
                C141365 +
            (C16242 + C16241 + C16259) * C141479) *
               C141499) *
              C141281 * C2376 +
          (((C16247 + C16248 + C16249) * C141479 +
            (C16258 * C5863 + C16257 * C5864 +
             (C418 * C5328 + C5569 + C5569 + C141327 * C5564) * C5865) *
                C141365) *
               C141499 -
           ((C16249 + C16248 + C16247) * C141365 +
            (C450 * C5865 + C449 * C5864 + C448 * C5863) * C141479) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C141219 * C58485 +
            C59879 * C58486 + C59880 * C58487 + C59881 * C58488) *
               C4148 -
           ((C418 * C49989 + C50351 + C50351 + C141327 * C50344) * C141219 *
                C58488 +
            C59881 * C58487 + C59880 * C58486 + C59879 * C58485) *
               C141499) *
              C141281 * C2376 +
          ((C59882 * C58485 + C59883 * C58486 + C59884 * C58487 +
            (C418 * C49990 + C50352 + C50352 + C141327 * C50345) * C141219 *
                C58488) *
               C141499 -
           (C59884 * C58488 + C59883 * C58487 + C59882 * C58486 +
            C448 * C141219 * C58485) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[78] +=
        (-std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C21918 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C21819 +
            (C35986 + C35987) * C21919 + (C36316 + C36317) * C21820 +
            C38750 * C21920 + C38992 * C21821) *
               C141219 * C4148 -
           ((C39929 + C39930) * C21821 + (C39585 + C39586) * C21920 +
            (C39931 + C39932) * C21820 + (C39589 + C39590) * C21919 +
            (C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
             C141479 * C2040) *
                C21819 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C21918) *
               C141219 * C141499) *
              C141281 * C2376 +
          (((C16006 + C16005) * C21918 + (C16369 + C16368) * C21819 +
            (C14078 * C3491 + C141479 * C3647 + C14079 * C13206 +
             C141365 * C13375) *
                C21919 +
            (C14078 * C3573 + C141479 * C3865 + C14079 * C13295 +
             C141365 * C13615) *
                C21820 +
            (C14078 * C10471 + C141479 * C10700 + C14079 * C29088 +
             C141365 * C29252) *
                C21920 +
            (C14078 * C10596 + C141479 * C11042 + C14079 * C29174 +
             C141365 * C29488) *
                C21821) *
               C141219 * C141499 -
           ((C36321 + C36320) * C21821 + (C35995 + C35994) * C21920 +
            (C15288 + C15289) * C21820 + (C14972 + C14973) * C21919 +
            (C14355 + C14354) * C21819 + (C14106 + C14105) * C21918) *
               C141219 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C188 +
             (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
              C141365 * C2040) *
                 C141327) *
                C5863 +
            ((C14105 + C14106) * C188 + (C14354 + C14355) * C141327) * C5864 +
            C14362 * C5865) *
               C4148 -
           (((C16366 + C16367) * C141327 + (C16001 + C16002) * C188) * C5865 +
            ((C16368 + C16369) * C141327 + (C16005 + C16006) * C188) * C5864 +
            ((C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
              C141479 * C2040) *
                 C141327 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C188) *
                C5863) *
               C141499) *
              C141281 * C2376 +
          ((((C16006 + C16005) * C188 + (C16369 + C16368) * C141327) * C5863 +
            ((C16002 + C16001) * C188 + (C16367 + C16366) * C141327) * C5864 +
            ((C14078 * C1598 + C141479 * C1781 + C14079 * C5328 +
              C141365 * C5452) *
                 C188 +
             (C14078 * C1687 + C141479 * C2037 + C14079 * C5394 +
              C141365 * C5622) *
                 C141327) *
                C5865) *
               C141499 -
           (((C14358 + C14359) * C141327 + (C14115 + C14116) * C188) * C5865 +
            ((C14357 + C14356) * C141327 + (C14110 + C14109) * C188) * C5864 +
            ((C14355 + C14354) * C141327 + (C14106 + C14105) * C188) * C5863) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C58590 * C108 + C58485 * C276 + C58591 * C1601 + C58486 * C1784 +
             C58592 * C5325 + C58487 * C5449 + C58593 * C21035 +
             C58488 * C21228) *
                C188 +
            (C58590 * C189 + C58485 * C501 + C58591 * C1690 + C58486 * C2040 +
             C58592 * C5391 + C58487 * C5619 + C58593 * C21136 +
             C58488 * C21491) *
                C141327) *
               C141219 * C4148 -
           ((C58593 * C50082 + C58488 * C50430 + C58592 * C21136 +
             C58487 * C21491 + C58591 * C5391 + C58486 * C5619 +
             C58590 * C1690 + C58485 * C2040) *
                C141327 +
            (C58593 * C49989 + C58488 * C50173 + C58592 * C21035 +
             C58487 * C21228 + C58591 * C5325 + C58486 * C5449 +
             C58590 * C1601 + C58485 * C1784) *
                C188) *
               C141219 * C141499) *
              C141281 * C2376 +
          (((C58590 * C1600 + C58485 * C1783 + C58591 * C5326 + C58486 * C5450 +
             C58592 * C21036 + C58487 * C21229 + C58593 * C49990 +
             C58488 * C50174) *
                C188 +
            (C58590 * C1689 + C58485 * C2039 + C58591 * C5392 + C58486 * C5620 +
             C58592 * C21137 + C58487 * C21492 + C58593 * C50083 +
             C58488 * C50431) *
                C141327) *
               C141219 * C141499 -
           ((C58593 * C21137 + C58488 * C21492 + C58592 * C5392 +
             C58487 * C5620 + C58591 * C1689 + C58486 * C2039 + C58590 * C190 +
             C58485 * C502) *
                C141327 +
            (C58593 * C21036 + C58488 * C21229 + C58592 * C5326 +
             C58487 * C5450 + C58591 * C1600 + C58486 * C1783 + C58590 * C109 +
             C58485 * C277) *
                C188) *
               C141219 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[78] +=
        (-std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C14078 +
             (C29775 * C276 + C141219 * C579) * C141479 + C37111 * C14079 +
             C37432 * C141365) *
                C21819 +
            (C36420 + C36421 + C36422 + C36423) * C21820 + C39079 * C21821) *
               C4148 -
           ((C40043 + C40033 + C40034 + C40035) * C21821 +
            (C40044 + C40038 + C40039 + C40040) * C21820 +
            ((C29775 * C5449 + C141219 * C5673) * C141365 +
             (C29775 * C5325 + C141219 * C5329) * C14079 + C37432 * C141479 +
             C37111 * C14078) *
                C21819) *
               C141499) *
              C141281 * C2376 +
          (((C37113 * C14078 + C37433 * C141479 +
             (C29775 * C5326 + C141219 * C5330) * C14079 +
             (C29775 * C5450 + C141219 * C5674) * C141365) *
                C21819 +
            (C36104 * C14078 + C36438 * C141479 +
             (C29775 * C13206 + C141219 * C13209) * C14079 +
             (C29775 * C13375 + C141219 * C13692) * C141365) *
                C21820 +
            (C36106 * C14078 + C36439 * C141479 +
             (C29775 * C29088 + C141219 * C29090) * C14079 +
             (C29775 * C29252 + C141219 * C29564) * C141365) *
                C21821) *
               C141499 -
           ((C36441 + C36435 + C36434 + C36433) * C21821 +
            (C36440 + C36430 + C36429 + C36428) * C21820 +
            (C37433 * C141365 + C37113 * C14079 +
             (C29775 * C277 + C141219 * C580) * C141479 +
             (C29775 * C109 + C141219 * C115) * C14078) *
                C21819) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
             C5873 * C110 + C5865 * C116) *
                C14078 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
             C5873 * C278 + C5865 * C581) *
                C141479 +
            (C16129 + C16130 + C16131) * C14079 +
            (C16480 + C16481 + C16482) * C141365) *
               C141327 * C4148 -
           ((C5873 * C5451 + C5865 * C5675 + C5871 * C5450 + C5864 * C5674 +
             C5869 * C5449 + C5863 * C5673) *
                C141365 +
            (C5873 * C5327 + C5865 * C5331 + C5871 * C5326 + C5864 * C5330 +
             C5869 * C5325 + C5863 * C5329) *
                C14079 +
            (C16482 + C16481 + C16480) * C141479 +
            (C16131 + C16130 + C16129) * C14078) *
               C141327 * C141499) *
              C141281 * C2376 +
          (((C16135 + C16136 + C16137) * C14078 +
            (C16483 + C16484 + C16485) * C141479 +
            (C5869 * C5326 + C5863 * C5330 + C5871 * C5327 + C5864 * C5331 +
             C5873 * C5328 + C5865 * C5332) *
                C14079 +
            (C5869 * C5450 + C5863 * C5674 + C5871 * C5451 + C5864 * C5675 +
             C5873 * C5452 + C5865 * C5676) *
                C141365) *
               C141327 * C141499 -
           ((C16485 + C16484 + C16483) * C141365 +
            (C16137 + C16136 + C16135) * C14079 +
            (C5873 * C279 + C5865 * C582 + C5871 * C278 + C5864 * C581 +
             C5869 * C277 + C5863 * C580) *
                C141479 +
            (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
             C5869 * C109 + C5863 * C115) *
                C14078) *
               C141327 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C58590 +
            (C29775 * C276 + C141219 * C579) * C58485 + C37111 * C58591 +
            C37432 * C58486 + C42383 * C58592 + C42634 * C58487 +
            C58030 * C58593 + C58275 * C58488) *
               C141327 * C4148 -
           ((C29775 * C50173 + C141219 * C50506) * C58488 +
            (C29775 * C49989 + C141219 * C49991) * C58593 + C58275 * C58487 +
            C58030 * C58592 + C42634 * C58486 + C42383 * C58591 +
            C37432 * C58485 + C37111 * C58590) *
               C141327 * C141499) *
              C141281 * C2376 +
          ((C37113 * C58590 + C37433 * C58485 + C52758 * C58591 +
            C53092 * C58486 + C59809 * C58592 + C60019 * C58487 +
            (C29775 * C49990 + C141219 * C49992) * C58593 +
            (C29775 * C50174 + C141219 * C50507) * C58488) *
               C141327 * C141499 -
           (C60019 * C58488 + C59809 * C58593 + C53092 * C58487 +
            C52758 * C58592 + C37433 * C58486 + C37113 * C58591 +
            (C29775 * C277 + C141219 * C580) * C58485 +
            (C29775 * C109 + C141219 * C115) * C58590) *
               C141327 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezy[78] +=
        (-std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C14078 +
            (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
             C21920 * C3084 + C21821 * C3362) *
                C141479 +
            (C36893 + C36894 + C36895) * C14079 +
            (C37538 + C37539 + C37540) * C141365) *
               C141219 * C4148 -
           ((C21920 * C29251 + C21821 * C29639 + C21919 * C13374 +
             C21820 * C13768 + C21918 * C5449 + C21819 * C5727) *
                C141365 +
            (C21920 * C29087 + C21821 * C29173 + C21919 * C13205 +
             C21820 * C13294 + C21918 * C5325 + C21819 * C5391) *
                C14079 +
            (C37540 + C37539 + C37538) * C141479 +
            (C36895 + C36894 + C36893) * C14078) *
               C141219 * C141499) *
              C141281 * C2376 +
          (((C23870 + C23869 + C23868) * C14078 +
            (C24506 + C24505 + C24504) * C141479 +
            (C21918 * C5326 + C21819 * C5392 + C21919 * C13206 +
             C21820 * C13295 + C21920 * C29088 + C21821 * C29174) *
                C14079 +
            (C21918 * C5450 + C21819 * C5728 + C21919 * C13375 +
             C21820 * C13769 + C21920 * C29252 + C21821 * C29640) *
                C141365) *
               C141219 * C141499 -
           ((C24504 + C24505 + C24506) * C141365 +
            (C23868 + C23869 + C23870) * C14079 +
            (C22473 + C22472 + C22471) * C141479 +
            (C21948 + C21947 + C21946) * C14078) *
               C141219 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C14078 +
             (C188 * C276 + C141327 * C635) * C141479 + C15877 * C14079 +
             C16596 * C141365) *
                C5863 +
            (C14511 + C14512 + C14513 + C14514) * C5864 + C14525 * C5865) *
               C4148 -
           ((C16599 + C16588 + C16589 + C16590) * C5865 +
            (C16600 + C16593 + C16594 + C16595) * C5864 +
            ((C188 * C5449 + C141327 * C5727) * C141365 +
             (C188 * C5325 + C141327 * C5391) * C14079 + C16596 * C141479 +
             C15877 * C14078) *
                C5863) *
               C141499) *
              C141281 * C2376 +
          (((C16595 + C16594 + C16593 + C16600) * C5863 +
            (C16590 + C16589 + C16588 + C16599) * C5864 +
            (C1711 * C14078 + C2209 * C141479 +
             (C188 * C5328 + C141327 * C5394) * C14079 +
             (C188 * C5452 + C141327 * C5730) * C141365) *
                C5865) *
               C141499 -
           ((C14519 + C14520 + C14521 + C14522) * C5865 +
            (C14518 + C14517 + C14516 + C14515) * C5864 +
            (C14514 + C14513 + C14512 + C14511) * C5863) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C58590 +
            (C188 * C276 + C141327 * C635) * C58485 + C15877 * C58591 +
            C16596 * C58486 + C21152 * C58592 + C21660 * C58487 +
            C50096 * C58593 + C50594 * C58488) *
               C141219 * C4148 -
           ((C188 * C50173 + C141327 * C50589) * C58488 +
            (C188 * C49989 + C141327 * C50082) * C58593 + C50594 * C58487 +
            C50096 * C58592 + C21660 * C58486 + C21152 * C58591 +
            C16596 * C58485 + C15877 * C58590) *
               C141219 * C141499) *
              C141281 * C2376 +
          ((C1715 * C58590 + C2211 * C58485 + C15882 * C58591 +
            C16598 * C58486 + C44805 * C58592 + C45513 * C58487 +
            (C188 * C49990 + C141327 * C50083) * C58593 +
            (C188 * C50174 + C141327 * C50590) * C58488) *
               C141219 * C141499 -
           (C45513 * C58488 + C44805 * C58593 + C16598 * C58487 +
            C15882 * C58592 + C2211 * C58486 + C1715 * C58591 + C654 * C58485 +
            C218 * C58590) *
               C141219 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[78] += (-std::pow(Pi, 2.5) *
                   ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                       C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                          C21819 +
                      (C36666 + C36667) * C21820 + C39228 * C21821) *
                         C141219 * C4148 -
                     ((C40268 + C40269) * C21821 + (C40270 + C40271) * C21820 +
                      (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
                       C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                          C21819) *
                         C141219 * C141499) *
                        C141281 * C2376 +
                    (((C16726 + C16725) * C21819 +
                      (C14599 * C3491 + C19194 + C19194 + C141479 * C4075 +
                       C14600 * C13206 + C19195 + C19195 + C141365 * C13846) *
                          C21820 +
                      (C14599 * C10471 + C37641 + C37641 + C141479 * C11357 +
                       C14600 * C29088 + C37642 + C37642 + C141365 * C29716) *
                          C21821) *
                         C141219 * C141499 -
                     ((C36671 + C36670) * C21821 + (C15624 + C15625) * C21820 +
                      (C14637 + C14636) * C21819) *
                         C141219 * C4148) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                       C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                          C141327 * C5863 +
                      (C14636 + C14637) * C141327 * C5864 + C14643 * C5865) *
                         C4148 -
                     ((C16723 + C16724) * C141327 * C5865 +
                      (C16725 + C16726) * C141327 * C5864 +
                      (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
                       C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                          C141327 * C5863) *
                         C141499) *
                        C141281 * C2376 +
                    (((C16726 + C16725) * C141327 * C5863 +
                      (C16724 + C16723) * C141327 * C5864 +
                      (C14599 * C1598 + C16713 + C16713 + C141479 * C2280 +
                       C14600 * C5328 + C16714 + C16714 + C141365 * C5784) *
                          C141327 * C5865) *
                         C141499 -
                     ((C14640 + C14641) * C141327 * C5865 +
                      (C14639 + C14638) * C141327 * C5864 +
                      (C14637 + C14636) * C141327 * C5863) *
                         C4148) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C58894 * C108 + C58899 + C58899 + C58485 * C714 +
                      C58895 * C1601 + C58900 + C58900 + C58486 * C2283 +
                      C58896 * C5325 + C58901 + C58901 + C58487 * C5781 +
                      C58897 * C21035 + C58902 + C58902 + C58488 * C21734) *
                         C141327 * C141219 * C4148 -
                     (C58897 * C49989 + C60152 + C60152 + C58488 * C50668 +
                      C58896 * C21035 + C60153 + C60153 + C58487 * C21734 +
                      C58895 * C5325 + C60154 + C60154 + C58486 * C5781 +
                      C58894 * C1601 + C60155 + C60155 + C58485 * C2283) *
                         C141327 * C141219 * C141499) *
                        C141281 * C2376 +
                    ((C58894 * C1600 + C60156 + C60156 + C58485 * C2282 +
                      C58895 * C5326 + C60157 + C60157 + C58486 * C5782 +
                      C58896 * C21036 + C60158 + C60158 + C58487 * C21735 +
                      C58897 * C49990 + C60159 + C60159 + C58488 * C50669) *
                         C141327 * C141219 * C141499 -
                     (C58897 * C21036 + C58903 + C58903 + C58488 * C21735 +
                      C58896 * C5326 + C58904 + C58904 + C58487 * C5782 +
                      C58895 * C1600 + C58905 + C58905 + C58486 * C2282 +
                      C58894 * C109 + C58906 + C58906 + C58485 * C715) *
                         C141327 * C141219 * C4148) *
                        C141281 * C141495)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[79] +=
        (-std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141479 +
             C36781 * C141365) *
                C21819 +
            (C35748 + C35749) * C21820 + C38599 * C21821) *
               C4148 -
           ((C39351 + C39341) * C21821 + (C39352 + C39344) * C21820 +
            ((C29774 * C5325 + C34562 + C34562 + C141219 * C5333) * C141365 +
             C36781 * C141479) *
                C21819) *
               C141499) *
              C816 +
          (((C39344 + C39352) * C21819 + (C39341 + C39351) * C21820 +
            (C32719 * C141479 +
             (C29774 * C34558 + C34565 + C34565 + C141219 * C34560) * C141365) *
                C21821) *
               C141499 -
           ((C38600 + C38601) * C21821 + (C35751 + C35750) * C21820 +
            (C35749 + C35748) * C21819) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 +
             C5876 + C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
             C5865 * C122) *
                C141479 +
            (C15751 + C15752 + C15753) * C141365) *
               C141327 * C4148 -
           ((C5872 * C5327 + C13217 + C13217 + C5865 * C5335 + C5870 * C5326 +
             C13216 + C13216 + C5864 * C5334 + C5868 * C5325 + C13215 + C13215 +
             C5863 * C5333) *
                C141365 +
            (C15753 + C15752 + C15751) * C141479) *
               C141327 * C141499) *
              C816 +
          (((C10497 + C10496 + C10495) * C141479 +
            (C5868 * C13205 + C13218 + C13218 + C5863 * C13211 +
             C5870 * C13206 + C13219 + C13219 + C5864 * C13212 +
             C5872 * C13207 + C13220 + C13220 + C5865 * C13213) *
                C141365) *
               C141327 * C141499 -
           ((C10495 + C10496 + C10497) * C141365 +
            (C6742 + C6741 + C6740) * C141479) *
               C141327 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C58485 +
            C36781 * C58486 + C42123 * C58487 + C57776 * C58488) *
               C141327 * C4148 -
           ((C29774 * C49989 + C57772 + C57772 + C141219 * C49993) * C58488 +
            C57776 * C58487 + C42123 * C58486 + C36781 * C58485) *
               C141327 * C141499) *
              C816 +
          ((C32721 * C58485 + C39350 * C58486 + C55017 * C58487 +
            (C29774 * C57766 + C57773 + C57773 + C141219 * C57768) * C58488) *
               C141327 * C141499 -
           (C55017 * C58488 + C39350 * C58487 + C32721 * C58486 +
            C30301 * C58485) *
               C141327 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[79] +=
        (-std::pow(Pi, 2.5) *
         (((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
              C21920 * C2960 + C21821 * C3026) *
                 C29775 +
             (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
              C21920 * C2964 + C21821 * C3030) *
                 C141219) *
                C141479 +
            ((C36893 + C36894 + C36895) * C29775 +
             (C36896 + C36897 + C36898) * C141219) *
                C141365) *
               C4148 -
           (((C21920 * C29089 + C21821 * C29175 + C21919 * C13208 +
              C21820 * C13297 + C21918 * C5329 + C21819 * C5395) *
                 C141219 +
             (C21920 * C29087 + C21821 * C29173 + C21919 * C13205 +
              C21820 * C13294 + C21918 * C5325 + C21819 * C5391) *
                 C29775) *
                C141365 +
            ((C36898 + C36897 + C36896) * C141219 +
             (C36895 + C36894 + C36893) * C29775) *
                C141479) *
               C141499) *
              C816 +
          ((((C39463 + C39464 + C39465) * C29775 +
             (C39466 + C39467 + C39468) * C141219) *
                C141479 +
            ((C21918 * C13205 + C21819 * C13294 + C21919 * C29087 +
              C21820 * C29173 + C21920 * C34558 + C21821 * C34615) *
                 C29775 +
             (C21918 * C13208 + C21819 * C13297 + C21919 * C29089 +
              C21820 * C29175 + C21920 * C34559 + C21821 * C34616) *
                 C141219) *
                C141365) *
               C141499 -
           (((C39468 + C39467 + C39466) * C141219 +
             (C39465 + C39464 + C39463) * C29775) *
                C141365 +
            ((C21920 * C9670 + C21821 * C9771 + C21919 * C2964 +
              C21820 * C3030 + C21918 * C828 + C21819 * C917) *
                 C141219 +
             (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 +
              C21820 * C3026 + C21918 * C823 + C21819 * C912) *
                 C29775) *
                C141479) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C5869 +
             (C188 * C114 + C141327 * C195) * C5863 + C218 * C5871 +
             C219 * C5864 + C220 * C5873 + C221 * C5865) *
                C141479 +
            (C15883 + C15884 + C15859 + C15860 + C15861 + C15862) * C141365) *
               C4148 -
           ((C15879 * C5865 + C15880 * C5873 + C15881 * C5864 + C15882 * C5871 +
             (C188 * C5329 + C141327 * C5395) * C5863 +
             (C188 * C5325 + C141327 * C5391) * C5869) *
                C141365 +
            (C15862 + C15861 + C15860 + C15859 + C15884 + C15883) * C141479) *
               C141499) *
              C816 +
          (((C18490 + C18491 + C18484 + C18485 + C18486 + C18487) * C141479 +
            ((C188 * C13205 + C141327 * C13294) * C5869 +
             (C188 * C13208 + C141327 * C13297) * C5863 +
             (C188 * C13206 + C141327 * C13295) * C5871 +
             (C188 * C13209 + C141327 * C13298) * C5864 +
             (C188 * C13207 + C141327 * C13296) * C5873 +
             (C188 * C13210 + C141327 * C13299) * C5865) *
                C141365) *
               C141499 -
           ((C18487 + C18486 + C18485 + C18484 + C18491 + C18490) * C141365 +
            (C934 * C5865 + C935 * C5873 + C936 * C5864 + C937 * C5871 +
             (C188 * C828 + C141327 * C917) * C5863 +
             (C188 * C823 + C141327 * C912) * C5869) *
                C141479) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C29775 +
             (C188 * C114 + C141327 * C195) * C141219) *
                C58485 +
            (C59651 + C59652) * C58486 + (C59653 + C59654) * C58487 +
            (C59655 + C59656) * C58488) *
               C4148 -
           (((C188 * C49991 + C141327 * C50084) * C141219 +
             (C188 * C49989 + C141327 * C50082) * C29775) *
                C58488 +
            (C59656 + C59655) * C58487 + (C59654 + C59653) * C58486 +
            (C59652 + C59651) * C58485) *
               C141499) *
              C816 +
          (((C61341 + C61342) * C58485 + (C61343 + C61344) * C58486 +
            (C61351 + C61352) * C58487 +
            ((C188 * C57766 + C141327 * C57850) * C29775 +
             (C188 * C57767 + C141327 * C57851) * C141219) *
                C58488) *
               C141499 -
           ((C61352 + C61351) * C58488 + (C61344 + C61343) * C58487 +
            (C61342 + C61341) * C58486 +
            ((C188 * C828 + C141327 * C917) * C141219 +
             (C188 * C823 + C141327 * C912) * C29775) *
                C58485) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[79] +=
        (-std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C29775 +
             (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
              C141365 * C1789) *
                 C141219) *
                C21819 +
            ((C35986 + C35987) * C29775 + (C35988 + C35989) * C141219) *
                C21820 +
            C38766 * C21821) *
               C4148 -
           (((C39583 + C39584) * C141219 + (C39585 + C39586) * C29775) *
                C21821 +
            ((C39587 + C39588) * C141219 + (C39589 + C39590) * C29775) *
                C21820 +
            ((C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
              C141479 * C1789) *
                 C141219 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C29775) *
                C21819) *
               C141499) *
              C816 +
          ((((C39590 + C39589) * C29775 + (C39588 + C39587) * C141219) *
                C21819 +
            ((C39586 + C39585) * C29775 + (C39584 + C39583) * C141219) *
                C21820 +
            ((C14078 * C26351 + C141479 * C26579 + C14079 * C34558 +
              C141365 * C34667) *
                 C29775 +
             (C14078 * C26353 + C141479 * C26581 + C14079 * C34559 +
              C141365 * C34668) *
                 C141219) *
                C21821) *
               C141499 -
           (((C38762 + C38763) * C141219 + (C38764 + C38765) * C29775) *
                C21821 +
            ((C35993 + C35992) * C141219 + (C35991 + C35990) * C29775) *
                C21820 +
            ((C35989 + C35988) * C141219 + (C35987 + C35986) * C29775) *
                C21819) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C5869 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C5863 +
            (C14105 + C14106) * C5871 + (C14107 + C14108) * C5864 +
            C14117 * C5873 + C14118 * C5865) *
               C141327 * C4148 -
           ((C15999 + C16000) * C5865 + (C16001 + C16002) * C5873 +
            (C16003 + C16004) * C5864 + (C16005 + C16006) * C5871 +
            (C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
             C141479 * C1789) *
                C5863 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C5869) *
               C141327 * C141499) *
              C816 +
          (((C14078 * C3490 + C141479 * C3646 + C14079 * C13205 +
             C141365 * C13374) *
                C5869 +
            (C14078 * C3494 + C141479 * C3650 + C14079 * C13208 +
             C141365 * C13377) *
                C5863 +
            (C14078 * C3491 + C141479 * C3647 + C14079 * C13206 +
             C141365 * C13375) *
                C5871 +
            (C14078 * C3495 + C141479 * C3651 + C14079 * C13209 +
             C141365 * C13378) *
                C5864 +
            (C14078 * C3492 + C141479 * C3648 + C14079 * C13207 +
             C141365 * C13376) *
                C5873 +
            (C14078 * C3496 + C141479 * C3652 + C14079 * C13210 +
             C141365 * C13379) *
                C5865) *
               C141327 * C141499 -
           ((C14966 + C14967) * C5865 + (C14968 + C14969) * C5873 +
            (C14970 + C14971) * C5864 + (C14972 + C14973) * C5871 +
            (C14079 * C3494 + C141365 * C3650 + C14078 * C828 +
             C141479 * C1011) *
                C5863 +
            (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
             C141479 * C1006) *
                C5869) *
               C141327 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C58590 * C108 + C58485 * C276 + C58591 * C1601 + C58486 * C1784 +
             C58592 * C5325 + C58487 * C5449 + C58593 * C21035 +
             C58488 * C21228) *
                C29775 +
            (C58590 * C114 + C58485 * C282 + C58591 * C1606 + C58486 * C1789 +
             C58592 * C5329 + C58487 * C5453 + C58593 * C21038 +
             C58488 * C21231) *
                C141219) *
               C141327 * C4148 -
           ((C58593 * C49991 + C58488 * C50175 + C58592 * C21038 +
             C58487 * C21231 + C58591 * C5329 + C58486 * C5453 +
             C58590 * C1606 + C58485 * C1789) *
                C141219 +
            (C58593 * C49989 + C58488 * C50173 + C58592 * C21035 +
             C58487 * C21228 + C58591 * C5325 + C58486 * C5449 +
             C58590 * C1601 + C58485 * C1784) *
                C29775) *
               C141327 * C141499) *
              C816 +
          (((C58590 * C3490 + C58485 * C3646 + C58591 * C13205 +
             C58486 * C13374 + C58592 * C42109 + C58487 * C42293 +
             C58593 * C57766 + C58488 * C57943) *
                C29775 +
            (C58590 * C3494 + C58485 * C3650 + C58591 * C13208 +
             C58486 * C13377 + C58592 * C42111 + C58487 * C42295 +
             C58593 * C57767 + C58488 * C57944) *
                C141219) *
               C141327 * C141499 -
           ((C58593 * C42111 + C58488 * C42295 + C58592 * C13208 +
             C58487 * C13377 + C58591 * C3494 + C58486 * C3650 + C58590 * C828 +
             C58485 * C1011) *
                C141219 +
            (C58593 * C42109 + C58488 * C42293 + C58592 * C13205 +
             C58487 * C13374 + C58591 * C3490 + C58486 * C3646 + C58590 * C823 +
             C58485 * C1006) *
                C29775) *
               C141327 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[79] +=
        (-std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C21918 +
             (C29775 * C189 + C141219 * C362) * C21819 + C30547 * C21919 +
             C30548 * C21820 + C30549 * C21920 + C30550 * C21821) *
                C141479 +
            (C37115 + C37116 + C37099 + C37100 + C37101 + C37102) * C141365) *
               C4148 -
           ((C39703 * C21821 + C39704 * C21920 + C39705 * C21820 +
             C39706 * C21919 + (C29775 * C5391 + C141219 * C5507) * C21819 +
             (C29775 * C5325 + C141219 * C5329) * C21918) *
                C141365 +
            (C37102 + C37101 + C37100 + C37099 + C37116 + C37115) * C141479) *
               C141499) *
              C816 +
          (((C39697 + C39698 + C39699 + C39700 + C39701 + C39702) * C141479 +
            (C39706 * C21918 + C39705 * C21819 + C39704 * C21919 +
             C39703 * C21820 + (C29775 * C34558 + C141219 * C34559) * C21920 +
             (C29775 * C34615 + C141219 * C34719) * C21821) *
                C141365) *
               C141499 -
           ((C39702 + C39701 + C39700 + C39699 + C39698 + C39697) * C141365 +
            (C30552 * C21821 + C30551 * C21920 + C30550 * C21820 +
             C30549 * C21919 + C30548 * C21819 + C30547 * C21918) *
                C141479) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C188 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
              C5873 * C191 + C5865 * C364) *
                 C141327) *
                C141479 +
            ((C16129 + C16130 + C16131) * C188 +
             (C16132 + C16133 + C16134) * C141327) *
                C141365) *
               C4148 -
           (((C5873 * C5393 + C5865 * C5509 + C5871 * C5392 + C5864 * C5508 +
              C5869 * C5391 + C5863 * C5507) *
                 C141327 +
             (C5873 * C5327 + C5865 * C5331 + C5871 * C5326 + C5864 * C5330 +
              C5869 * C5325 + C5863 * C5329) *
                 C188) *
                C141365 +
            ((C16134 + C16133 + C16132) * C141327 +
             (C16131 + C16130 + C16129) * C188) *
                C141479) *
               C141499) *
              C816 +
          ((((C10836 + C10835 + C10834) * C188 +
             (C10833 + C10832 + C10831) * C141327) *
                C141479 +
            ((C5869 * C13205 + C5863 * C13208 + C5871 * C13206 +
              C5864 * C13209 + C5873 * C13207 + C5865 * C13210) *
                 C188 +
             (C5869 * C13294 + C5863 * C13454 + C5871 * C13295 +
              C5864 * C13455 + C5873 * C13296 + C5865 * C13456) *
                 C141327) *
                C141365) *
               C141499 -
           (((C10831 + C10832 + C10833) * C141327 +
             (C10834 + C10835 + C10836) * C188) *
                C141365 +
            ((C7123 + C7122 + C7121) * C141327 +
             (C7120 + C7119 + C7118) * C188) *
                C141479) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C188 +
             (C29775 * C189 + C141219 * C362) * C141327) *
                C58485 +
            (C59795 + C59796) * C58486 + (C59797 + C59798) * C58487 +
            (C59799 + C59800) * C58488) *
               C4148 -
           (((C29775 * C50082 + C141219 * C50251) * C141327 +
             (C29775 * C49989 + C141219 * C49991) * C188) *
                C58488 +
            (C59800 + C59799) * C58487 + (C59798 + C59797) * C58486 +
            (C59796 + C59795) * C58485) *
               C141499) *
              C816 +
          (((C61485 + C61486) * C58485 + (C61487 + C61488) * C58486 +
            (C61489 + C61490) * C58487 +
            ((C29775 * C57766 + C141219 * C57767) * C188 +
             (C29775 * C57850 + C141219 * C58019) * C141327) *
                C58488) *
               C141499 -
           ((C61490 + C61489) * C58488 + (C61488 + C61487) * C58487 +
            (C61486 + C61485) * C58486 +
            (C30548 * C141327 + C30547 * C188) * C58485) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[79] +=
        (-std::pow(Pi, 2.5) *
         ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
             C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
             C22185 + C21821 * C3196) *
                C141219 * C141479 +
            (C37229 + C37230 + C37231) * C141219 * C141365) *
               C4148 -
           ((C22181 * C29087 + C29410 + C29410 + C21821 * C29405 +
             C22180 * C13205 + C29409 + C29409 + C21820 * C13531 +
             C22179 * C5325 + C29408 + C29408 + C21819 * C5561) *
                C141219 * C141365 +
            (C37231 + C37230 + C37229) * C141219 * C141479) *
               C141499) *
              C816 +
          (((C39820 + C39821 + C39822) * C141219 * C141479 +
            (C22179 * C13205 + C39811 + C39811 + C21819 * C13531 +
             C22180 * C29087 + C39812 + C39812 + C21820 * C29405 +
             C22181 * C34558 + C39813 + C39813 + C21821 * C34770) *
                C141219 * C141365) *
               C141499 -
           ((C39822 + C39821 + C39820) * C141219 * C141365 +
            (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
             C22180 * C2960 + C23189 + C23189 + C21820 * C3196 + C22179 * C823 +
             C23190 + C23190 + C21819 * C1171) *
                C141219 * C141479) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C5863 +
             C448 * C5864 + C449 * C5865) *
                C141479 +
            (C16259 + C16241 + C16242) * C141365) *
               C4148 -
           ((C16257 * C5865 + C16258 * C5864 +
             (C418 * C5325 + C5566 + C5566 + C141327 * C5561) * C5863) *
                C141365 +
            (C16242 + C16241 + C16259) * C141479) *
               C141499) *
              C816 +
          (((C18796 + C18788 + C18789) * C141479 +
            ((C418 * C13205 + C18790 + C18790 + C141327 * C13531) * C5863 +
             (C418 * C13206 + C18791 + C18791 + C141327 * C13532) * C5864 +
             (C418 * C13207 + C18792 + C18792 + C141327 * C13533) * C5865) *
                C141365) *
               C141499 -
           ((C18789 + C18788 + C18796) * C141365 +
            (C1192 * C5865 + C1193 * C5864 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C5863) *
                C141479) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C141219 * C58485 +
            C59879 * C58486 + C59880 * C58487 + C59881 * C58488) *
               C4148 -
           ((C418 * C49989 + C50351 + C50351 + C141327 * C50344) * C141219 *
                C58488 +
            C59881 * C58487 + C59880 * C58486 + C59879 * C58485) *
               C141499) *
              C816 +
          ((C61557 * C58485 + C61558 * C58486 + C61565 * C58487 +
            (C418 * C57766 + C61561 + C61561 + C141327 * C58107) * C141219 *
                C58488) *
               C141499 -
           (C61565 * C58488 + C61558 * C58487 + C61557 * C58486 +
            (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C141219 *
                C58485) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyz[79] +=
        (-std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C21918 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C21819 +
            (C35986 + C35987) * C21919 + (C36316 + C36317) * C21820 +
            C38750 * C21920 + C38992 * C21821) *
               C141219 * C4148 -
           ((C39929 + C39930) * C21821 + (C39585 + C39586) * C21920 +
            (C39931 + C39932) * C21820 + (C39589 + C39590) * C21919 +
            (C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
             C141479 * C2040) *
                C21819 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C21918) *
               C141219 * C141499) *
              C816 +
          (((C39590 + C39589) * C21918 + (C39932 + C39931) * C21819 +
            (C39586 + C39585) * C21919 + (C39930 + C39929) * C21820 +
            (C14078 * C26351 + C141479 * C26579 + C14079 * C34558 +
             C141365 * C34667) *
                C21920 +
            (C14078 * C26477 + C141479 * C26925 + C14079 * C34615 +
             C141365 * C34825) *
                C21821) *
               C141219 * C141499 -
           ((C38997 + C38998) * C21821 + (C38764 + C38765) * C21920 +
            (C36319 + C36318) * C21820 + (C35991 + C35990) * C21919 +
            (C36317 + C36316) * C21819 + (C35987 + C35986) * C21918) *
               C141219 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C188 +
             (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
              C141365 * C2040) *
                 C141327) *
                C5863 +
            ((C14105 + C14106) * C188 + (C14354 + C14355) * C141327) * C5864 +
            C14362 * C5865) *
               C4148 -
           (((C16366 + C16367) * C141327 + (C16001 + C16002) * C188) * C5865 +
            ((C16368 + C16369) * C141327 + (C16005 + C16006) * C188) * C5864 +
            ((C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
              C141479 * C2040) *
                 C141327 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C188) *
                C5863) *
               C141499) *
              C816 +
          ((((C14078 * C3490 + C141479 * C3646 + C14079 * C13205 +
              C141365 * C13374) *
                 C188 +
             (C14078 * C3572 + C141479 * C3864 + C14079 * C13294 +
              C141365 * C13614) *
                 C141327) *
                C5863 +
            ((C14078 * C3491 + C141479 * C3647 + C14079 * C13206 +
              C141365 * C13375) *
                 C188 +
             (C14078 * C3573 + C141479 * C3865 + C14079 * C13295 +
              C141365 * C13615) *
                 C141327) *
                C5864 +
            ((C14078 * C3492 + C141479 * C3648 + C14079 * C13207 +
              C141365 * C13376) *
                 C188 +
             (C14078 * C3574 + C141479 * C3866 + C14079 * C13296 +
              C141365 * C13616) *
                 C141327) *
                C5865) *
               C141499 -
           (((C15286 + C15287) * C141327 + (C14968 + C14969) * C188) * C5865 +
            ((C15288 + C15289) * C141327 + (C14972 + C14973) * C188) * C5864 +
            ((C14079 * C3572 + C141365 * C3864 + C14078 * C912 +
              C141479 * C1262) *
                 C141327 +
             (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
              C141479 * C1006) *
                 C188) *
                C5863) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C58590 * C108 + C58485 * C276 + C58591 * C1601 + C58486 * C1784 +
             C58592 * C5325 + C58487 * C5449 + C58593 * C21035 +
             C58488 * C21228) *
                C188 +
            (C58590 * C189 + C58485 * C501 + C58591 * C1690 + C58486 * C2040 +
             C58592 * C5391 + C58487 * C5619 + C58593 * C21136 +
             C58488 * C21491) *
                C141327) *
               C141219 * C4148 -
           ((C58593 * C50082 + C58488 * C50430 + C58592 * C21136 +
             C58487 * C21491 + C58591 * C5391 + C58486 * C5619 +
             C58590 * C1690 + C58485 * C2040) *
                C141327 +
            (C58593 * C49989 + C58488 * C50173 + C58592 * C21035 +
             C58487 * C21228 + C58591 * C5325 + C58486 * C5449 +
             C58590 * C1601 + C58485 * C1784) *
                C188) *
               C141219 * C141499) *
              C816 +
          (((C58590 * C3490 + C58485 * C3646 + C58591 * C13205 +
             C58486 * C13374 + C58592 * C42109 + C58487 * C42293 +
             C58593 * C57766 + C58488 * C57943) *
                C188 +
            (C58590 * C3572 + C58485 * C3864 + C58591 * C13294 +
             C58486 * C13614 + C58592 * C42197 + C58487 * C42553 +
             C58593 * C57850 + C58488 * C58196) *
                C141327) *
               C141219 * C141499 -
           ((C58593 * C42197 + C58488 * C42553 + C58592 * C13294 +
             C58487 * C13614 + C58591 * C3572 + C58486 * C3864 + C58590 * C912 +
             C58485 * C1262) *
                C141327 +
            (C58593 * C42109 + C58488 * C42293 + C58592 * C13205 +
             C58487 * C13374 + C58591 * C3490 + C58486 * C3646 + C58590 * C823 +
             C58485 * C1006) *
                C188) *
               C141219 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezx[79] +=
        (-std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C14078 +
             (C29775 * C276 + C141219 * C579) * C141479 + C37111 * C14079 +
             C37432 * C141365) *
                C21819 +
            (C36420 + C36421 + C36422 + C36423) * C21820 + C39079 * C21821) *
               C4148 -
           ((C40043 + C40033 + C40034 + C40035) * C21821 +
            (C40044 + C40038 + C40039 + C40040) * C21820 +
            ((C29775 * C5449 + C141219 * C5673) * C141365 +
             (C29775 * C5325 + C141219 * C5329) * C14079 + C37432 * C141479 +
             C37111 * C14078) *
                C21819) *
               C141499) *
              C816 +
          (((C40040 + C40039 + C40038 + C40044) * C21819 +
            (C40035 + C40034 + C40033 + C40043) * C21820 +
            (C32953 * C14078 + C33175 * C141479 +
             (C29775 * C34558 + C141219 * C34559) * C14079 +
             (C29775 * C34667 + C141219 * C34876) * C141365) *
                C21821) *
               C141499 -
           ((C39074 + C39075 + C39076 + C39077) * C21821 +
            (C36427 + C36426 + C36425 + C36424) * C21820 +
            (C36423 + C36422 + C36421 + C36420) * C21819) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
             C5873 * C110 + C5865 * C116) *
                C14078 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
             C5873 * C278 + C5865 * C581) *
                C141479 +
            (C16129 + C16130 + C16131) * C14079 +
            (C16480 + C16481 + C16482) * C141365) *
               C141327 * C4148 -
           ((C5873 * C5451 + C5865 * C5675 + C5871 * C5450 + C5864 * C5674 +
             C5869 * C5449 + C5863 * C5673) *
                C141365 +
            (C5873 * C5327 + C5865 * C5331 + C5871 * C5326 + C5864 * C5330 +
             C5869 * C5325 + C5863 * C5329) *
                C14079 +
            (C16482 + C16481 + C16480) * C141479 +
            (C16131 + C16130 + C16129) * C14078) *
               C141327 * C141499) *
              C816 +
          (((C10836 + C10835 + C10834) * C14078 +
            (C11157 + C11156 + C11155) * C141479 +
            (C5869 * C13205 + C5863 * C13208 + C5871 * C13206 + C5864 * C13209 +
             C5873 * C13207 + C5865 * C13210) *
                C14079 +
            (C5869 * C13374 + C5863 * C13691 + C5871 * C13375 + C5864 * C13692 +
             C5873 * C13376 + C5865 * C13693) *
                C141365) *
               C141327 * C141499 -
           ((C11155 + C11156 + C11157) * C141365 +
            (C10834 + C10835 + C10836) * C14079 +
            (C7483 + C7482 + C7481) * C141479 +
            (C7120 + C7119 + C7118) * C14078) *
               C141327 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C58590 +
            (C29775 * C276 + C141219 * C579) * C58485 + C37111 * C58591 +
            C37432 * C58486 + C42383 * C58592 + C42634 * C58487 +
            C58030 * C58593 + C58275 * C58488) *
               C141327 * C4148 -
           ((C29775 * C50173 + C141219 * C50506) * C58488 +
            (C29775 * C49989 + C141219 * C49991) * C58593 + C58275 * C58487 +
            C58030 * C58592 + C42634 * C58486 + C42383 * C58591 +
            C37432 * C58485 + C37111 * C58590) *
               C141327 * C141499) *
              C816 +
          ((C32957 * C58590 + C33177 * C58485 + C39706 * C58591 +
            C40042 * C58486 + C55368 * C58592 + C55701 * C58487 +
            (C29775 * C57766 + C141219 * C57767) * C58593 +
            (C29775 * C57943 + C141219 * C58271) * C58488) *
               C141327 * C141499 -
           (C55701 * C58488 + C55368 * C58593 + C40042 * C58487 +
            C39706 * C58592 + C33177 * C58486 + C32957 * C58591 +
            C30783 * C58485 + C30547 * C58590) *
               C141327 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[79] +=
        (-std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C14078 +
            (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
             C21920 * C3084 + C21821 * C3362) *
                C141479 +
            (C36893 + C36894 + C36895) * C14079 +
            (C37538 + C37539 + C37540) * C141365) *
               C141219 * C4148 -
           ((C21920 * C29251 + C21821 * C29639 + C21919 * C13374 +
             C21820 * C13768 + C21918 * C5449 + C21819 * C5727) *
                C141365 +
            (C21920 * C29087 + C21821 * C29173 + C21919 * C13205 +
             C21820 * C13294 + C21918 * C5325 + C21819 * C5391) *
                C14079 +
            (C37540 + C37539 + C37538) * C141479 +
            (C36895 + C36894 + C36893) * C14078) *
               C141219 * C141499) *
              C816 +
          (((C39463 + C39464 + C39465) * C14078 +
            (C40149 + C40150 + C40151) * C141479 +
            (C21918 * C13205 + C21819 * C13294 + C21919 * C29087 +
             C21820 * C29173 + C21920 * C34558 + C21821 * C34615) *
                C14079 +
            (C21918 * C13374 + C21819 * C13768 + C21919 * C29251 +
             C21820 * C29639 + C21920 * C34667 + C21821 * C34927) *
                C141365) *
               C141219 * C141499 -
           ((C40151 + C40150 + C40149) * C141365 +
            (C39465 + C39464 + C39463) * C14079 +
            (C21920 * C9848 + C21821 * C10284 + C21919 * C3084 +
             C21820 * C3362 + C21918 * C1006 + C21819 * C1419) *
                C141479 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C14078) *
               C141219 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C14078 +
             (C188 * C276 + C141327 * C635) * C141479 + C15877 * C14079 +
             C16596 * C141365) *
                C5863 +
            (C14511 + C14512 + C14513 + C14514) * C5864 + C14525 * C5865) *
               C4148 -
           ((C16599 + C16588 + C16589 + C16590) * C5865 +
            (C16600 + C16593 + C16594 + C16595) * C5864 +
            ((C188 * C5449 + C141327 * C5727) * C141365 +
             (C188 * C5325 + C141327 * C5391) * C14079 + C16596 * C141479 +
             C15877 * C14078) *
                C5863) *
               C141499) *
              C816 +
          (((C18488 * C14078 + C19093 * C141479 +
             (C188 * C13205 + C141327 * C13294) * C14079 +
             (C188 * C13374 + C141327 * C13768) * C141365) *
                C5863 +
            (C14851 * C14078 + C15497 * C141479 +
             (C188 * C13206 + C141327 * C13295) * C14079 +
             (C188 * C13375 + C141327 * C13769) * C141365) *
                C5864 +
            (C14849 * C14078 + C15496 * C141479 +
             (C188 * C13207 + C141327 * C13296) * C14079 +
             (C188 * C13376 + C141327 * C13770) * C141365) *
                C5865) *
               C141499 -
           ((C15498 + C15488 + C15489 + C15490) * C5865 +
            (C15499 + C15493 + C15494 + C15495) * C5864 +
            (C19093 * C141365 + C18488 * C14079 +
             (C188 * C1006 + C141327 * C1419) * C141479 +
             (C188 * C823 + C141327 * C912) * C14078) *
                C5863) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C58590 +
            (C188 * C276 + C141327 * C635) * C58485 + C15877 * C58591 +
            C16596 * C58486 + C21152 * C58592 + C21660 * C58487 +
            C50096 * C58593 + C50594 * C58488) *
               C141219 * C4148 -
           ((C188 * C50173 + C141327 * C50589) * C58488 +
            (C188 * C49989 + C141327 * C50082) * C58593 + C50594 * C58487 +
            C50096 * C58592 + C21660 * C58486 + C21152 * C58591 +
            C16596 * C58485 + C15877 * C58590) *
               C141219 * C141499) *
              C816 +
          ((C18488 * C58590 + C19093 * C58485 + C47416 * C58591 +
            C48046 * C58486 + C61349 * C58592 + C61766 * C58487 +
            (C188 * C57766 + C141327 * C57850) * C58593 +
            (C188 * C57943 + C141327 * C58349) * C58488) *
               C141219 * C141499 -
           (C61766 * C58488 + C61349 * C58593 + C48046 * C58487 +
            C47416 * C58592 + C19093 * C58486 + C18488 * C58591 +
            (C188 * C1006 + C141327 * C1419) * C58485 +
            (C188 * C823 + C141327 * C912) * C58590) *
               C141219 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[79] += (-std::pow(Pi, 2.5) *
                   ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                       C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                          C21819 +
                      (C36666 + C36667) * C21820 + C39228 * C21821) *
                         C141219 * C4148 -
                     ((C40268 + C40269) * C21821 + (C40270 + C40271) * C21820 +
                      (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
                       C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                          C21819) *
                         C141219 * C141499) *
                        C816 +
                    (((C40271 + C40270) * C21819 + (C40269 + C40268) * C21820 +
                      (C14599 * C26351 + C40258 + C40258 + C141479 * C27240 +
                       C14600 * C34558 + C40259 + C40259 + C141365 * C34978) *
                          C21821) *
                         C141219 * C141499 -
                     ((C39239 + C39240) * C21821 + (C36669 + C36668) * C21820 +
                      (C36667 + C36666) * C21819) *
                         C141219 * C4148) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                       C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                          C141327 * C5863 +
                      (C14636 + C14637) * C141327 * C5864 + C14643 * C5865) *
                         C4148 -
                     ((C16723 + C16724) * C141327 * C5865 +
                      (C16725 + C16726) * C141327 * C5864 +
                      (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
                       C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                          C141327 * C5863) *
                         C141499) *
                        C816 +
                    (((C14599 * C3490 + C19192 + C19192 + C141479 * C4074 +
                       C14600 * C13205 + C19193 + C19193 + C141365 * C13845) *
                          C141327 * C5863 +
                      (C14599 * C3491 + C19194 + C19194 + C141479 * C4075 +
                       C14600 * C13206 + C19195 + C19195 + C141365 * C13846) *
                          C141327 * C5864 +
                      (C14599 * C3492 + C19196 + C19196 + C141479 * C4076 +
                       C14600 * C13207 + C19197 + C19197 + C141365 * C13847) *
                          C141327 * C5865) *
                         C141499 -
                     ((C15622 + C15623) * C141327 * C5865 +
                      (C15624 + C15625) * C141327 * C5864 +
                      (C14600 * C3490 + C15610 + C15610 + C141365 * C4074 +
                       C14599 * C823 + C15611 + C15611 + C141479 * C1505) *
                          C141327 * C5863) *
                         C4148) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C58894 * C108 + C58899 + C58899 + C58485 * C714 +
                      C58895 * C1601 + C58900 + C58900 + C58486 * C2283 +
                      C58896 * C5325 + C58901 + C58901 + C58487 * C5781 +
                      C58897 * C21035 + C58902 + C58902 + C58488 * C21734) *
                         C141327 * C141219 * C4148 -
                     (C58897 * C49989 + C60152 + C60152 + C58488 * C50668 +
                      C58896 * C21035 + C60153 + C60153 + C58487 * C21734 +
                      C58895 * C5325 + C60154 + C60154 + C58486 * C5781 +
                      C58894 * C1601 + C60155 + C60155 + C58485 * C2283) *
                         C141327 * C141219 * C141499) *
                        C816 +
                    ((C58894 * C3490 + C61833 + C61833 + C58485 * C4074 +
                      C58895 * C13205 + C61834 + C61834 + C58486 * C13845 +
                      C58896 * C42109 + C61835 + C61835 + C58487 * C42793 +
                      C58897 * C57766 + C61836 + C61836 + C58488 * C58431) *
                         C141327 * C141219 * C141499 -
                     (C58897 * C42109 + C59505 + C59505 + C58488 * C42793 +
                      C58896 * C13205 + C59506 + C59506 + C58487 * C13845 +
                      C58895 * C3490 + C59507 + C59507 + C58486 * C4074 +
                      C58894 * C823 + C59508 + C59508 + C58485 * C1505) *
                         C141327 * C141219 * C4148) *
                        C141497) *
                   C141247) /
                      (p * q * std::sqrt(p + q));
    d2eexx[80] +=
        (-std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141479 +
            C36781 * C141365) *
               C21819 +
           (C35748 + C35749) * C21820 + C38599 * C21821) *
              C5322 -
          ((C39351 + C39341) * C21821 + (C39352 + C39344) * C21820 +
           (C42123 * C141365 + C36781 * C141479) * C21819) *
              C5323 +
          ((C42123 * C141479 +
            (C29774 * C21035 + C42118 + C42118 + C141219 * C21041) * C141365) *
               C21819 +
           (C39350 * C141479 +
            (C29774 * C42109 + C42119 + C42119 + C141219 * C42113) * C141365) *
               C21820 +
           (C39349 * C141479 +
            (C29774 * C42110 + C42120 + C42120 + C141219 * C42114) * C141365) *
               C21821) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 + C5876 +
            C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
            C5865 * C122) *
               C141479 +
           (C15751 + C15752 + C15753) * C141365) *
              C141327 * C5322 -
          ((C21060 + C21061 + C21062) * C141365 +
           (C15753 + C15752 + C15751) * C141479) *
              C141327 * C5323 +
          ((C21062 + C21061 + C21060) * C141479 +
           (C5868 * C21035 + C21051 + C21051 + C5863 * C21041 + C5870 * C21036 +
            C21052 + C21052 + C5864 * C21042 + C5872 * C21037 + C21053 +
            C21053 + C5865 * C21043) *
               C141365) *
              C141327 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C58485 +
           C36781 * C58486 + C42123 * C58487 + C57776 * C58488) *
              C141327 * C5322 -
          (C63083 * C58488 + C57776 * C58487 + C42123 * C58486 +
           C36781 * C58485) *
              C141327 * C5323 +
          (C42123 * C58485 + C57776 * C58486 + C63083 * C58487 +
           (C29774 * C63074 + C63080 + C63080 + C141219 * C63076) * C58488) *
              C141327 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[80] +=
        (-std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C29775 +
            (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
             C21920 * C2964 + C21821 * C3030) *
                C141219) *
               C141479 +
           ((C36893 + C36894 + C36895) * C29775 +
            (C36896 + C36897 + C36898) * C141219) *
               C141365) *
              C5322 -
          (((C42214 + C42215 + C42216) * C141219 +
            (C42217 + C42218 + C42219) * C29775) *
               C141365 +
           ((C36898 + C36897 + C36896) * C141219 +
            (C36895 + C36894 + C36893) * C29775) *
               C141479) *
              C5323 +
          (((C42219 + C42218 + C42217) * C29775 +
            (C42216 + C42215 + C42214) * C141219) *
               C141479 +
           ((C21918 * C21035 + C21819 * C21136 + C21919 * C42109 +
             C21820 * C42197 + C21920 * C42110 + C21821 * C42198) *
                C29775 +
            (C21918 * C21038 + C21819 * C21139 + C21919 * C42111 +
             C21820 * C42199 + C21920 * C42112 + C21821 * C42200) *
                C141219) *
               C141365) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C5869 +
            (C188 * C114 + C141327 * C195) * C5863 + C218 * C5871 +
            C219 * C5864 + C220 * C5873 + C221 * C5865) *
               C141479 +
           (C15883 + C15884 + C15859 + C15860 + C15861 + C15862) * C141365) *
              C5322 -
          ((C21143 + C21144 + C21145 + C21146 + C21153 + C21154) * C141365 +
           (C15862 + C15861 + C15860 + C15859 + C15884 + C15883) * C141479) *
              C5323 +
          ((C21154 + C21153 + C21146 + C21145 + C21144 + C21143) * C141479 +
           ((C188 * C21035 + C141327 * C21136) * C5869 +
            (C188 * C21038 + C141327 * C21139) * C5863 +
            (C188 * C21036 + C141327 * C21137) * C5871 +
            (C188 * C21039 + C141327 * C21140) * C5864 +
            (C188 * C21037 + C141327 * C21138) * C5873 +
            (C188 * C21040 + C141327 * C21141) * C5865) *
               C141365) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C29775 +
            (C188 * C114 + C141327 * C195) * C141219) *
               C58485 +
           (C59651 + C59652) * C58486 + C63136 * C58487 + C63137 * C58488) *
              C5322 -
          ((C63144 + C63145) * C58488 + (C59656 + C59655) * C58487 +
           (C59654 + C59653) * C58486 + (C59652 + C59651) * C58485) *
              C5323 +
          (C63136 * C58485 + C63137 * C58486 + (C63145 + C63144) * C58487 +
           ((C188 * C63074 + C141327 * C63133) * C29775 +
            (C188 * C63075 + C141327 * C63134) * C141219) *
               C58488) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[80] +=
        (-std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C29775 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C141219) *
               C21819 +
           ((C35986 + C35987) * C29775 + (C35988 + C35989) * C141219) * C21820 +
           C38766 * C21821) *
              C5322 -
          (((C39583 + C39584) * C141219 + (C39585 + C39586) * C29775) * C21821 +
           ((C39587 + C39588) * C141219 + (C39589 + C39590) * C29775) * C21820 +
           ((C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
             C141479 * C1789) *
                C141219 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C29775) *
               C21819) *
              C5323 +
          (((C14078 * C5325 + C141479 * C5449 + C14079 * C21035 +
             C141365 * C21228) *
                C29775 +
            (C14078 * C5329 + C141479 * C5453 + C14079 * C21038 +
             C141365 * C21231) *
                C141219) *
               C21819 +
           ((C14078 * C13205 + C141479 * C13374 + C14079 * C42109 +
             C141365 * C42293) *
                C29775 +
            (C14078 * C13208 + C141479 * C13377 + C14079 * C42111 +
             C141365 * C42295) *
                C141219) *
               C21820 +
           ((C14078 * C29087 + C141479 * C29251 + C14079 * C42110 +
             C141365 * C42294) *
                C29775 +
            (C14078 * C29089 + C141479 * C29253 + C14079 * C42112 +
             C141365 * C42296) *
                C141219) *
               C21821) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C14078 * C108 + C141479 * C276 + C14079 * C1601 + C141365 * C1784) *
               C5869 +
           (C14078 * C114 + C141479 * C282 + C14079 * C1606 + C141365 * C1789) *
               C5863 +
           (C14105 + C14106) * C5871 + (C14107 + C14108) * C5864 +
           C14117 * C5873 + C14118 * C5865) *
              C141327 * C5322 -
          ((C15999 + C16000) * C5865 + (C16001 + C16002) * C5873 +
           (C16003 + C16004) * C5864 + (C16005 + C16006) * C5871 +
           (C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
            C141479 * C1789) *
               C5863 +
           (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
            C141479 * C1784) *
               C5869) *
              C141327 * C5323 +
          ((C14078 * C5325 + C141479 * C5449 + C14079 * C21035 +
            C141365 * C21228) *
               C5869 +
           (C14078 * C5329 + C141479 * C5453 + C14079 * C21038 +
            C141365 * C21231) *
               C5863 +
           (C14078 * C5326 + C141479 * C5450 + C14079 * C21036 +
            C141365 * C21229) *
               C5871 +
           (C14078 * C5330 + C141479 * C5454 + C14079 * C21039 +
            C141365 * C21232) *
               C5864 +
           (C14078 * C5327 + C141479 * C5451 + C14079 * C21037 +
            C141365 * C21230) *
               C5873 +
           (C14078 * C5331 + C141479 * C5455 + C14079 * C21040 +
            C141365 * C21233) *
               C5865) *
              C141327 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C58590 * C108 + C58485 * C276 + C58591 * C1601 + C58486 * C1784 +
            C58592 * C5325 + C58487 * C5449 + C58593 * C21035 +
            C58488 * C21228) *
               C29775 +
           (C58590 * C114 + C58485 * C282 + C58591 * C1606 + C58486 * C1789 +
            C58592 * C5329 + C58487 * C5453 + C58593 * C21038 +
            C58488 * C21231) *
               C141219) *
              C141327 * C5322 -
          ((C58593 * C49991 + C58488 * C50175 + C58592 * C21038 +
            C58487 * C21231 + C58591 * C5329 + C58486 * C5453 + C58590 * C1606 +
            C58485 * C1789) *
               C141219 +
           (C58593 * C49989 + C58488 * C50173 + C58592 * C21035 +
            C58487 * C21228 + C58591 * C5325 + C58486 * C5449 + C58590 * C1601 +
            C58485 * C1784) *
               C29775) *
              C141327 * C5323 +
          ((C58590 * C5325 + C58485 * C5449 + C58591 * C21035 +
            C58486 * C21228 + C58592 * C49989 + C58487 * C50173 +
            C58593 * C63074 + C58488 * C63195) *
               C29775 +
           (C58590 * C5329 + C58485 * C5453 + C58591 * C21038 +
            C58486 * C21231 + C58592 * C49991 + C58487 * C50175 +
            C58593 * C63075 + C58488 * C63196) *
               C141219) *
              C141327 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[80] +=
        (-std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C21918 +
            (C29775 * C189 + C141219 * C362) * C21819 + C30547 * C21919 +
            C30548 * C21820 + C30549 * C21920 + C30550 * C21821) *
               C141479 +
           (C37115 + C37116 + C37099 + C37100 + C37101 + C37102) * C141365) *
              C5322 -
          ((C42374 + C42375 + C42376 + C42377 + C42384 + C42385) * C141365 +
           (C37102 + C37101 + C37100 + C37099 + C37116 + C37115) * C141479) *
              C5323 +
          ((C42385 + C42384 + C42377 + C42376 + C42375 + C42374) * C141479 +
           ((C29775 * C21035 + C141219 * C21038) * C21918 +
            (C29775 * C21136 + C141219 * C21308) * C21819 +
            (C29775 * C42109 + C141219 * C42111) * C21919 +
            (C29775 * C42197 + C141219 * C42371) * C21820 +
            (C29775 * C42110 + C141219 * C42112) * C21920 +
            (C29775 * C42198 + C141219 * C42372) * C21821) *
               C141365) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
             C5873 * C110 + C5865 * C116) *
                C188 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
             C5873 * C191 + C5865 * C364) *
                C141327) *
               C141479 +
           ((C16129 + C16130 + C16131) * C188 +
            (C16132 + C16133 + C16134) * C141327) *
               C141365) *
              C5322 -
          (((C21324 + C21325 + C21326) * C141327 +
            (C21327 + C21328 + C21329) * C188) *
               C141365 +
           ((C16134 + C16133 + C16132) * C141327 +
            (C16131 + C16130 + C16129) * C188) *
               C141479) *
              C5323 +
          (((C21329 + C21328 + C21327) * C188 +
            (C21326 + C21325 + C21324) * C141327) *
               C141479 +
           ((C5869 * C21035 + C5863 * C21038 + C5871 * C21036 + C5864 * C21039 +
             C5873 * C21037 + C5865 * C21040) *
                C188 +
            (C5869 * C21136 + C5863 * C21308 + C5871 * C21137 + C5864 * C21309 +
             C5873 * C21138 + C5865 * C21310) *
                C141327) *
               C141365) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C188 +
            (C29775 * C189 + C141219 * C362) * C141327) *
               C58485 +
           (C59795 + C59796) * C58486 + C63249 * C58487 + C63250 * C58488) *
              C5322 -
          ((C63257 + C63258) * C58488 + (C59800 + C59799) * C58487 +
           (C59798 + C59797) * C58486 + (C59796 + C59795) * C58485) *
              C5323 +
          (C63249 * C58485 + C63250 * C58486 + (C63258 + C63257) * C58487 +
           ((C29775 * C63074 + C141219 * C63075) * C188 +
            (C29775 * C63133 + C141219 * C63247) * C141327) *
               C58488) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[80] +=
        (-std::pow(Pi, 2.5) *
         (((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
            C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
            C22185 + C21821 * C3196) *
               C141219 * C141479 +
           (C37229 + C37230 + C37231) * C141219 * C141365) *
              C5322 -
          ((C42477 + C42478 + C42479) * C141219 * C141365 +
           (C37231 + C37230 + C37229) * C141219 * C141479) *
              C5323 +
          ((C42479 + C42478 + C42477) * C141219 * C141479 +
           (C22179 * C21035 + C42468 + C42468 + C21819 * C21403 +
            C22180 * C42109 + C42469 + C42469 + C21820 * C42459 +
            C22181 * C42110 + C42470 + C42470 + C21821 * C42460) *
               C141219 * C141365) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C5863 +
            C448 * C5864 + C449 * C5865) *
               C141479 +
           (C16259 + C16241 + C16242) * C141365) *
              C5322 -
          ((C21407 + C21408 + C21417) * C141365 +
           (C16242 + C16241 + C16259) * C141479) *
              C5323 +
          ((C21417 + C21408 + C21407) * C141479 +
           ((C418 * C21035 + C21411 + C21411 + C141327 * C21403) * C5863 +
            (C418 * C21036 + C21412 + C21412 + C141327 * C21404) * C5864 +
            (C418 * C21037 + C21413 + C21413 + C141327 * C21405) * C5865) *
               C141365) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C418 * C108 + C426 + C426 + C141327 * C419) * C141219 * C58485 +
           C59879 * C58486 + C59880 * C58487 + C59881 * C58488) *
              C5322 -
          (C63316 * C58488 + C59881 * C58487 + C59880 * C58486 +
           C59879 * C58485) *
              C5323 +
          (C59880 * C58485 + C59881 * C58486 + C63316 * C58487 +
           (C418 * C63074 + C63312 + C63312 + C141327 * C63308) * C141219 *
               C58488) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyz[80] +=
        (-std::pow(Pi, 2.5) *
         (((C14078 * C108 + C141479 * C276 + C14079 * C1601 + C141365 * C1784) *
               C21918 +
           (C14078 * C189 + C141479 * C501 + C14079 * C1690 + C141365 * C2040) *
               C21819 +
           (C35986 + C35987) * C21919 + (C36316 + C36317) * C21820 +
           C38750 * C21920 + C38992 * C21821) *
              C141219 * C5322 -
          ((C39929 + C39930) * C21821 + (C39585 + C39586) * C21920 +
           (C39931 + C39932) * C21820 + (C39589 + C39590) * C21919 +
           (C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
            C141479 * C2040) *
               C21819 +
           (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
            C141479 * C1784) *
               C21918) *
              C141219 * C5323 +
          ((C14078 * C5325 + C141479 * C5449 + C14079 * C21035 +
            C141365 * C21228) *
               C21918 +
           (C14078 * C5391 + C141479 * C5619 + C14079 * C21136 +
            C141365 * C21491) *
               C21819 +
           (C14078 * C13205 + C141479 * C13374 + C14079 * C42109 +
            C141365 * C42293) *
               C21919 +
           (C14078 * C13294 + C141479 * C13614 + C14079 * C42197 +
            C141365 * C42553) *
               C21820 +
           (C14078 * C29087 + C141479 * C29251 + C14079 * C42110 +
            C141365 * C42294) *
               C21920 +
           (C14078 * C29173 + C141479 * C29487 + C14079 * C42198 +
            C141365 * C42554) *
               C21821) *
              C141219 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C188 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C141327) *
               C5863 +
           ((C14105 + C14106) * C188 + (C14354 + C14355) * C141327) * C5864 +
           C14362 * C5865) *
              C5322 -
          (((C16366 + C16367) * C141327 + (C16001 + C16002) * C188) * C5865 +
           ((C16368 + C16369) * C141327 + (C16005 + C16006) * C188) * C5864 +
           ((C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
             C141479 * C2040) *
                C141327 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C188) *
               C5863) *
              C5323 +
          (((C14078 * C5325 + C141479 * C5449 + C14079 * C21035 +
             C141365 * C21228) *
                C188 +
            (C14078 * C5391 + C141479 * C5619 + C14079 * C21136 +
             C141365 * C21491) *
                C141327) *
               C5863 +
           ((C14078 * C5326 + C141479 * C5450 + C14079 * C21036 +
             C141365 * C21229) *
                C188 +
            (C14078 * C5392 + C141479 * C5620 + C14079 * C21137 +
             C141365 * C21492) *
                C141327) *
               C5864 +
           ((C14078 * C5327 + C141479 * C5451 + C14079 * C21037 +
             C141365 * C21230) *
                C188 +
            (C14078 * C5393 + C141479 * C5621 + C14079 * C21138 +
             C141365 * C21493) *
                C141327) *
               C5865) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C58590 * C108 + C58485 * C276 + C58591 * C1601 + C58486 * C1784 +
            C58592 * C5325 + C58487 * C5449 + C58593 * C21035 +
            C58488 * C21228) *
               C188 +
           (C58590 * C189 + C58485 * C501 + C58591 * C1690 + C58486 * C2040 +
            C58592 * C5391 + C58487 * C5619 + C58593 * C21136 +
            C58488 * C21491) *
               C141327) *
              C141219 * C5322 -
          ((C58593 * C50082 + C58488 * C50430 + C58592 * C21136 +
            C58487 * C21491 + C58591 * C5391 + C58486 * C5619 + C58590 * C1690 +
            C58485 * C2040) *
               C141327 +
           (C58593 * C49989 + C58488 * C50173 + C58592 * C21035 +
            C58487 * C21228 + C58591 * C5325 + C58486 * C5449 + C58590 * C1601 +
            C58485 * C1784) *
               C188) *
              C141219 * C5323 +
          ((C58590 * C5325 + C58485 * C5449 + C58591 * C21035 +
            C58486 * C21228 + C58592 * C49989 + C58487 * C50173 +
            C58593 * C63074 + C58488 * C63195) *
               C188 +
           (C58590 * C5391 + C58485 * C5619 + C58591 * C21136 +
            C58486 * C21491 + C58592 * C50082 + C58487 * C50430 +
            C58593 * C63133 + C58488 * C63366) *
               C141327) *
              C141219 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eezx[80] +=
        (-std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C14078 +
            (C29775 * C276 + C141219 * C579) * C141479 + C37111 * C14079 +
            C37432 * C141365) *
               C21819 +
           (C36420 + C36421 + C36422 + C36423) * C21820 + C39079 * C21821) *
              C5322 -
          ((C40043 + C40033 + C40034 + C40035) * C21821 +
           (C40044 + C40038 + C40039 + C40040) * C21820 +
           (C42634 * C141365 + C42383 * C14079 + C37432 * C141479 +
            C37111 * C14078) *
               C21819) *
              C5323 +
          ((C42383 * C14078 + C42634 * C141479 +
            (C29775 * C21035 + C141219 * C21038) * C14079 +
            (C29775 * C21228 + C141219 * C21568) * C141365) *
               C21819 +
           (C39706 * C14078 + C40042 * C141479 +
            (C29775 * C42109 + C141219 * C42111) * C14079 +
            (C29775 * C42293 + C141219 * C42629) * C141365) *
               C21820 +
           (C39704 * C14078 + C40041 * C141479 +
            (C29775 * C42110 + C141219 * C42112) * C14079 +
            (C29775 * C42294 + C141219 * C42630) * C141365) *
               C21821) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
            C5873 * C110 + C5865 * C116) *
               C14078 +
           (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
            C5873 * C278 + C5865 * C581) *
               C141479 +
           (C16129 + C16130 + C16131) * C14079 +
           (C16480 + C16481 + C16482) * C141365) *
              C141327 * C5322 -
          ((C21578 + C21579 + C21580) * C141365 +
           (C21327 + C21328 + C21329) * C14079 +
           (C16482 + C16481 + C16480) * C141479 +
           (C16131 + C16130 + C16129) * C14078) *
              C141327 * C5323 +
          ((C21329 + C21328 + C21327) * C14078 +
           (C21580 + C21579 + C21578) * C141479 +
           (C5869 * C21035 + C5863 * C21038 + C5871 * C21036 + C5864 * C21039 +
            C5873 * C21037 + C5865 * C21040) *
               C14079 +
           (C5869 * C21228 + C5863 * C21568 + C5871 * C21229 + C5864 * C21569 +
            C5873 * C21230 + C5865 * C21570) *
               C141365) *
              C141327 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C29775 * C108 + C141219 * C114) * C58590 +
           (C29775 * C276 + C141219 * C579) * C58485 + C37111 * C58591 +
           C37432 * C58486 + C42383 * C58592 + C42634 * C58487 +
           C58030 * C58593 + C58275 * C58488) *
              C141327 * C5322 -
          (C63421 * C58488 + C63256 * C58593 + C58275 * C58487 +
           C58030 * C58592 + C42634 * C58486 + C42383 * C58591 +
           C37432 * C58485 + C37111 * C58590) *
              C141327 * C5323 +
          (C42383 * C58590 + C42634 * C58485 + C58030 * C58591 +
           C58275 * C58486 + C63256 * C58592 + C63421 * C58487 +
           (C29775 * C63074 + C141219 * C63075) * C58593 +
           (C29775 * C63195 + C141219 * C63417) * C58488) *
              C141327 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[80] +=
        (-std::pow(Pi, 2.5) *
         (((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
            C21920 * C2960 + C21821 * C3026) *
               C14078 +
           (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
            C21920 * C3084 + C21821 * C3362) *
               C141479 +
           (C36893 + C36894 + C36895) * C14079 +
           (C37538 + C37539 + C37540) * C141365) *
              C141219 * C5322 -
          ((C42717 + C42718 + C42719) * C141365 +
           (C42217 + C42218 + C42219) * C14079 +
           (C37540 + C37539 + C37538) * C141479 +
           (C36895 + C36894 + C36893) * C14078) *
              C141219 * C5323 +
          ((C42219 + C42218 + C42217) * C14078 +
           (C42719 + C42718 + C42717) * C141479 +
           (C21918 * C21035 + C21819 * C21136 + C21919 * C42109 +
            C21820 * C42197 + C21920 * C42110 + C21821 * C42198) *
               C14079 +
           (C21918 * C21228 + C21819 * C21654 + C21919 * C42293 +
            C21820 * C42708 + C21920 * C42294 + C21821 * C42709) *
               C141365) *
              C141219 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C14078 +
            (C188 * C276 + C141327 * C635) * C141479 + C15877 * C14079 +
            C16596 * C141365) *
               C5863 +
           (C14511 + C14512 + C14513 + C14514) * C5864 + C14525 * C5865) *
              C5322 -
          ((C16599 + C16588 + C16589 + C16590) * C5865 +
           (C16600 + C16593 + C16594 + C16595) * C5864 +
           (C21660 * C141365 + C21152 * C14079 + C16596 * C141479 +
            C15877 * C14078) *
               C5863) *
              C5323 +
          ((C21152 * C14078 + C21660 * C141479 +
            (C188 * C21035 + C141327 * C21136) * C14079 +
            (C188 * C21228 + C141327 * C21654) * C141365) *
               C5863 +
           (C15882 * C14078 + C16598 * C141479 +
            (C188 * C21036 + C141327 * C21137) * C14079 +
            (C188 * C21229 + C141327 * C21655) * C141365) *
               C5864 +
           (C15880 * C14078 + C16597 * C141479 +
            (C188 * C21037 + C141327 * C21138) * C14079 +
            (C188 * C21230 + C141327 * C21656) * C141365) *
               C5865) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C141327 * C189) * C58590 +
           (C188 * C276 + C141327 * C635) * C58485 + C15877 * C58591 +
           C16596 * C58486 + C21152 * C58592 + C21660 * C58487 +
           C50096 * C58593 + C50594 * C58488) *
              C141219 * C5322 -
          (C63475 * C58488 + C63143 * C58593 + C50594 * C58487 +
           C50096 * C58592 + C21660 * C58486 + C21152 * C58591 +
           C16596 * C58485 + C15877 * C58590) *
              C141219 * C5323 +
          (C21152 * C58590 + C21660 * C58485 + C50096 * C58591 +
           C50594 * C58486 + C63143 * C58592 + C63475 * C58487 +
           (C188 * C63074 + C141327 * C63133) * C58593 +
           (C188 * C63195 + C141327 * C63471) * C58488) *
              C141219 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[80] += (-std::pow(Pi, 2.5) *
                   (((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                      C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                         C21819 +
                     (C36666 + C36667) * C21820 + C39228 * C21821) *
                        C141219 * C5322 -
                    ((C40268 + C40269) * C21821 + (C40270 + C40271) * C21820 +
                     (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
                      C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                         C21819) *
                        C141219 * C5323 +
                    ((C14599 * C5325 + C21738 + C21738 + C141479 * C5781 +
                      C14600 * C21035 + C21739 + C21739 + C141365 * C21734) *
                         C21819 +
                     (C14599 * C13205 + C42796 + C42796 + C141479 * C13845 +
                      C14600 * C42109 + C42797 + C42797 + C141365 * C42793) *
                         C21820 +
                     (C14599 * C29087 + C42798 + C42798 + C141479 * C29715 +
                      C14600 * C42110 + C42799 + C42799 + C141365 * C42794) *
                         C21821) *
                        C141219 * C5324) *
                   C141281 * C141247) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                      C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                         C141327 * C5863 +
                     (C14636 + C14637) * C141327 * C5864 + C14643 * C5865) *
                        C5322 -
                    ((C16723 + C16724) * C141327 * C5865 +
                     (C16725 + C16726) * C141327 * C5864 +
                     (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
                      C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                         C141327 * C5863) *
                        C5323 +
                    ((C14599 * C5325 + C21738 + C21738 + C141479 * C5781 +
                      C14600 * C21035 + C21739 + C21739 + C141365 * C21734) *
                         C141327 * C5863 +
                     (C14599 * C5326 + C21740 + C21740 + C141479 * C5782 +
                      C14600 * C21036 + C21741 + C21741 + C141365 * C21735) *
                         C141327 * C5864 +
                     (C14599 * C5327 + C21742 + C21742 + C141479 * C5783 +
                      C14600 * C21037 + C21743 + C21743 + C141365 * C21736) *
                         C141327 * C5865) *
                        C5324) *
                   C141281 * C141247) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((C58894 * C108 + C58899 + C58899 + C58485 * C714 +
                     C58895 * C1601 + C58900 + C58900 + C58486 * C2283 +
                     C58896 * C5325 + C58901 + C58901 + C58487 * C5781 +
                     C58897 * C21035 + C58902 + C58902 + C58488 * C21734) *
                        C141327 * C141219 * C5322 -
                    (C58897 * C49989 + C60152 + C60152 + C58488 * C50668 +
                     C58896 * C21035 + C60153 + C60153 + C58487 * C21734 +
                     C58895 * C5325 + C60154 + C60154 + C58486 * C5781 +
                     C58894 * C1601 + C60155 + C60155 + C58485 * C2283) *
                        C141327 * C141219 * C5323 +
                    (C58894 * C5325 + C63527 + C63527 + C58485 * C5781 +
                     C58895 * C21035 + C63528 + C63528 + C58486 * C21734 +
                     C58896 * C49989 + C63529 + C63529 + C58487 * C50668 +
                     C58897 * C63074 + C63530 + C63530 + C58488 * C63525) *
                        C141327 * C141219 * C5324) *
                   C141281 * C141247) /
                      (p * q * std::sqrt(p + q));
    d2eexx[81] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63609 * C108 + C63616 + C63616 + C141506 * C120 +
                      C63611 * C109 + C63617 + C63617 + C141492 * C121 +
                      C63613 * C110 + C63618 + C63618 + C63606 * C122) *
                         C89302 +
                     (C63609 * C1601 + C65516 + C65516 + C141506 * C1611 +
                      C63611 * C1600 + C65515 + C65515 + C141492 * C1610 +
                      C63613 * C1599 + C65514 + C65514 + C63606 * C1609) *
                         C141365) *
                        C141327 * C141298 * C141281 * C97 -
                    ((C63613 * C1598 + C65519 + C65519 + C63606 * C1608 +
                      C63611 * C1599 + C65518 + C65518 + C141492 * C1609 +
                      C63609 * C1600 + C65517 + C65517 + C141506 * C1610) *
                         C141365 +
                     (C63613 * C111 + C63625 + C63625 + C63606 * C123 +
                      C63611 * C110 + C63626 + C63626 + C141492 * C122 +
                      C63609 * C109 + C63627 + C63627 + C141506 * C121) *
                         C89302) *
                        C141327 * C141298 * C141281 * C98 +
                    ((C63609 * C110 + C63628 + C63628 + C141506 * C122 +
                      C63611 * C111 + C63629 + C63629 + C141492 * C123 +
                      C63613 * C112 + C63630 + C63630 + C63606 * C124) *
                         C89302 +
                     (C63609 * C1599 + C89305 + C89305 + C141506 * C1609 +
                      C63611 * C1598 + C89306 + C89306 + C141492 * C1608 +
                      C63613 * C1602 + C89307 + C89307 + C63606 * C1612) *
                         C141365) *
                        C141327 * C141298 * C141281 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C63610 +
            (C188 * C114 + C141327 * C195) * C141506 + C218 * C63612 +
            C219 * C141492 + C220 * C63614 + C221 * C63606) *
               C89302 +
           (C15877 * C63610 + C15878 * C141506 + C1715 * C63612 +
            C1714 * C141492 + C1713 * C63614 + C1712 * C63606) *
               C141365) *
              C141298 * C141281 * C97 -
          ((C1710 * C63606 + C1711 * C63614 + C1712 * C141492 + C1713 * C63612 +
            C1714 * C141506 + C1715 * C63610) *
               C141365 +
           (C223 * C63606 + C222 * C63614 + C221 * C141492 + C220 * C63612 +
            C219 * C141506 + C218 * C63610) *
               C89302) *
              C141298 * C141281 * C98 +
          ((C220 * C63610 + C221 * C141506 + C222 * C63612 + C223 * C141492 +
            C225 * C63614 + C224 * C63606) *
               C89302 +
           (C1713 * C63610 + C1712 * C141506 + C1711 * C63612 +
            C1710 * C141492 + (C188 * C1602 + C141327 * C1691) * C63614 +
            (C188 * C1607 + C141327 * C1696) * C63606) *
               C141365) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
               C63610 +
           (C89455 * C114 + C89302 * C282 + C89456 * C1606 + C141365 * C1789) *
               C141506 +
           (C89482 + C89483) * C63612 + (C89484 + C89485) * C141492 +
           C89494 * C63614 + C89495 * C63606) *
              C141327 * C141298 * C141281 * C97 -
          ((C89490 + C89491) * C63606 + (C89492 + C89493) * C63614 +
           (C89489 + C89488) * C141492 + (C89487 + C89486) * C63612 +
           (C89485 + C89484) * C141506 + (C89483 + C89482) * C63610) *
              C141327 * C141298 * C141281 * C98 +
          (C89494 * C63610 + C89495 * C141506 + (C89493 + C89492) * C63612 +
           (C89491 + C89490) * C141492 +
           (C89455 * C112 + C89302 * C280 + C89456 * C1602 + C141365 * C1785) *
               C63614 +
           (C89455 * C118 + C89302 * C286 + C89456 * C1607 + C141365 * C1790) *
               C63606) *
              C141327 * C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[81] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                       C141492 * C115 + C63614 * C110 + C63606 * C116) *
                          C188 +
                      (C63610 * C189 + C141506 * C362 + C63612 * C190 +
                       C141492 * C363 + C63614 * C191 + C63606 * C364) *
                          C141327) *
                         C89302 +
                     ((C63610 * C1601 + C141506 * C1606 + C63612 * C1600 +
                       C141492 * C1605 + C63614 * C1599 + C63606 * C1604) *
                          C188 +
                      (C63610 * C1690 + C141506 * C1878 + C63612 * C1689 +
                       C141492 * C1877 + C63614 * C1688 + C63606 * C1876) *
                          C141327) *
                         C141365) *
                        C141298 * C141281 * C97 -
                    (((C63614 * C1687 + C63606 * C1875 + C63612 * C1688 +
                       C141492 * C1876 + C63610 * C1689 + C141506 * C1877) *
                          C141327 +
                      (C63614 * C1598 + C63606 * C1603 + C63612 * C1599 +
                       C141492 * C1604 + C63610 * C1600 + C141506 * C1605) *
                          C188) *
                         C141365 +
                     ((C63614 * C192 + C63606 * C365 + C63612 * C191 +
                       C141492 * C364 + C63610 * C190 + C141506 * C363) *
                          C141327 +
                      (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                       C141492 * C116 + C63610 * C109 + C141506 * C115) *
                          C188) *
                         C89302) *
                        C141298 * C141281 * C98 +
                    (((C63610 * C110 + C141506 * C116 + C63612 * C111 +
                       C141492 * C117 + C63614 * C112 + C63606 * C118) *
                          C188 +
                      (C63610 * C191 + C141506 * C364 + C63612 * C192 +
                       C141492 * C365 + C63614 * C193 + C63606 * C366) *
                          C141327) *
                         C89302 +
                     ((C63610 * C1599 + C141506 * C1604 + C63612 * C1598 +
                       C141492 * C1603 + C63614 * C1602 + C63606 * C1607) *
                          C188 +
                      (C63610 * C1688 + C141506 * C1876 + C63612 * C1687 +
                       C141492 * C1875 + C63614 * C1691 + C63606 * C1879) *
                          C141327) *
                         C141365) *
                        C141298 * C141281 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C141506 +
            C448 * C141492 + C449 * C63606) *
               C89302 +
           (C16256 * C141506 + C1971 * C141492 + C1970 * C63606) * C141365) *
              C141298 * C141281 * C97 -
          ((C1969 * C63606 + C1970 * C141492 + C1971 * C141506) * C141365 +
           (C450 * C63606 + C449 * C141492 + C448 * C141506) * C89302) *
              C141298 * C141281 * C98 +
          ((C449 * C141506 + C450 * C141492 + C451 * C63606) * C89302 +
           (C1970 * C141506 + C1969 * C141492 +
            (C418 * C1602 + C1962 + C1962 + C141327 * C1950) * C63606) *
               C141365) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C188 +
            (C89455 * C189 + C89302 * C501 + C89456 * C1690 + C141365 * C2040) *
                C141327) *
               C141506 +
           ((C89482 + C89483) * C188 + (C89731 + C89732) * C141327) * C141492 +
           C89739 * C63606) *
              C141298 * C141281 * C97 -
          (((C89735 + C89736) * C141327 + (C89492 + C89493) * C188) * C63606 +
           ((C89734 + C89733) * C141327 + (C89487 + C89486) * C188) * C141492 +
           ((C89732 + C89731) * C141327 + (C89483 + C89482) * C188) * C141506) *
              C141298 * C141281 * C98 +
          (C89739 * C141506 +
           ((C89493 + C89492) * C188 + (C89736 + C89735) * C141327) * C141492 +
           ((C89455 * C112 + C89302 * C280 + C89456 * C1602 + C141365 * C1785) *
                C188 +
            (C89455 * C193 + C89302 * C505 + C89456 * C1691 + C141365 * C2041) *
                C141327) *
               C63606) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezx[81] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                      C141492 * C115 + C63614 * C110 + C63606 * C116) *
                         C89455 +
                     (C63610 * C276 + C141506 * C579 + C63612 * C277 +
                      C141492 * C580 + C63614 * C278 + C63606 * C581) *
                         C89302 +
                     (C63610 * C1601 + C141506 * C1606 + C63612 * C1600 +
                      C141492 * C1605 + C63614 * C1599 + C63606 * C1604) *
                         C89456 +
                     (C63610 * C1784 + C141506 * C2126 + C63612 * C1783 +
                      C141492 * C2125 + C63614 * C1782 + C63606 * C2124) *
                         C141365) *
                        C141327 * C141298 * C141281 * C97 -
                    ((C63614 * C1781 + C63606 * C2123 + C63612 * C1782 +
                      C141492 * C2124 + C63610 * C1783 + C141506 * C2125) *
                         C141365 +
                     (C63614 * C1598 + C63606 * C1603 + C63612 * C1599 +
                      C141492 * C1604 + C63610 * C1600 + C141506 * C1605) *
                         C89456 +
                     (C63614 * C279 + C63606 * C582 + C63612 * C278 +
                      C141492 * C581 + C63610 * C277 + C141506 * C580) *
                         C89302 +
                     (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                      C141492 * C116 + C63610 * C109 + C141506 * C115) *
                         C89455) *
                        C141327 * C141298 * C141281 * C98 +
                    ((C63610 * C110 + C141506 * C116 + C63612 * C111 +
                      C141492 * C117 + C63614 * C112 + C63606 * C118) *
                         C89455 +
                     (C63610 * C278 + C141506 * C581 + C63612 * C279 +
                      C141492 * C582 + C63614 * C280 + C63606 * C583) *
                         C89302 +
                     (C63610 * C1599 + C141506 * C1604 + C63612 * C1598 +
                      C141492 * C1603 + C63614 * C1602 + C63606 * C1607) *
                         C89456 +
                     (C63610 * C1782 + C141506 * C2124 + C63612 * C1781 +
                      C141492 * C2123 + C63614 * C1785 + C63606 * C2127) *
                         C141365) *
                        C141327 * C141298 * C141281 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C89455 +
            (C188 * C276 + C141327 * C635) * C89302 + C15877 * C89456 +
            C16596 * C141365) *
               C141506 +
           (C89888 + C89889 + C89890 + C89891) * C141492 + C89902 * C63606) *
              C141298 * C141281 * C97 -
          ((C89896 + C89897 + C89898 + C89899) * C63606 +
           (C89895 + C89894 + C89893 + C89892) * C141492 +
           (C89891 + C89890 + C89889 + C89888) * C141506) *
              C141298 * C141281 * C98 +
          (C89902 * C141506 + (C89899 + C89898 + C89897 + C89896) * C141492 +
           (C225 * C89455 + C657 * C89302 +
            (C188 * C1602 + C141327 * C1691) * C89456 +
            (C188 * C1785 + C141327 * C2198) * C141365) *
               C63606) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[81] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C89976 * C108 + C89979 + C89979 + C89302 * C714 +
                      C89977 * C1601 + C89980 + C89980 + C141365 * C2283) *
                         C141327 * C141506 +
                     (C90013 + C90014) * C141327 * C141492 + C90020 * C63606) *
                        C141298 * C141281 * C97 -
                    ((C90017 + C90018) * C141327 * C63606 +
                     (C90016 + C90015) * C141327 * C141492 +
                     (C90014 + C90013) * C141327 * C141506) *
                        C141298 * C141281 * C98 +
                    (C90020 * C141506 + (C90018 + C90017) * C141327 * C141492 +
                     (C89976 * C112 + C89999 + C89999 + C89302 * C718 +
                      C89977 * C1602 + C90000 + C90000 + C141365 * C2284) *
                         C141327 * C63606) *
                        C141298 * C141281 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[82] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63609 * C108 + C63616 + C63616 + C141506 * C120 +
                       C63611 * C109 + C63617 + C63617 + C141492 * C121 +
                       C63613 * C110 + C63618 + C63618 + C63606 * C122) *
                          C89302 +
                      (C63609 * C1601 + C65516 + C65516 + C141506 * C1611 +
                       C63611 * C1600 + C65515 + C65515 + C141492 * C1610 +
                       C63613 * C1599 + C65514 + C65514 + C63606 * C1609) *
                          C141365) *
                         C141327 * C141298 * C816 -
                     ((C68101 + C68102 + C68103) * C141365 +
                      (C64483 + C64482 + C64481) * C89302) *
                         C141327 * C141298 * C141497) *
                        C818 +
                    (((C64484 + C64485 + C64486) * C89302 +
                      (C63609 * C3491 + C65520 + C65520 + C141506 * C3499 +
                       C63611 * C3492 + C65521 + C65521 + C141492 * C3500 +
                       C63613 * C3493 + C65522 + C65522 + C63606 * C3501) *
                          C141365) *
                         C141327 * C141298 * C141497 -
                     ((C63613 * C1598 + C65519 + C65519 + C63606 * C1608 +
                       C63611 * C1599 + C65518 + C65518 + C141492 * C1609 +
                       C63609 * C1600 + C65517 + C65517 + C141506 * C1610) *
                          C141365 +
                      (C63613 * C111 + C63625 + C63625 + C63606 * C123 +
                       C63611 * C110 + C63626 + C63626 + C141492 * C122 +
                       C63609 * C109 + C63627 + C63627 + C141506 * C121) *
                          C89302) *
                         C141327 * C141298 * C816) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[82] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C63610 +
             (C188 * C114 + C141327 * C195) * C141506 + C218 * C63612 +
             C219 * C141492 + C220 * C63614 + C221 * C63606) *
                C89302 +
            (C15877 * C63610 + C15878 * C141506 + C1715 * C63612 +
             C1714 * C141492 + C1713 * C63614 + C1712 * C63606) *
                C141365) *
               C141298 * C816 -
           ((C14848 * C63606 + C14849 * C63614 + C14850 * C141492 +
             C14851 * C63612 + C18489 * C141506 + C18488 * C63610) *
                C141365 +
            (C934 * C63606 + C935 * C63614 + C936 * C141492 + C937 * C63612 +
             (C188 * C828 + C141327 * C917) * C141506 +
             (C188 * C823 + C141327 * C912) * C63610) *
                C89302) *
               C141298 * C141497) *
              C818 +
          (((C937 * C63610 + C936 * C141506 + C935 * C63612 + C934 * C141492 +
             C933 * C63614 + C932 * C63606) *
                C89302 +
            (C14851 * C63610 + C14850 * C141506 + C14849 * C63612 +
             C14848 * C141492 + (C188 * C3493 + C141327 * C3575) * C63614 +
             (C188 * C3497 + C141327 * C3579) * C63606) *
                C141365) *
               C141298 * C141497 -
           ((C1710 * C63606 + C1711 * C63614 + C1712 * C141492 +
             C1713 * C63612 + C1714 * C141506 + C1715 * C63610) *
                C141365 +
            (C223 * C63606 + C222 * C63614 + C221 * C141492 + C220 * C63612 +
             C219 * C141506 + C218 * C63610) *
                C89302) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[82] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C63610 +
            (C89455 * C114 + C89302 * C282 + C89456 * C1606 + C141365 * C1789) *
                C141506 +
            (C89482 + C89483) * C63612 + (C89484 + C89485) * C141492 +
            C89494 * C63614 + C89495 * C63606) *
               C141327 * C141298 * C816 -
           ((C90331 + C90332) * C63606 + (C90333 + C90334) * C63614 +
            (C90335 + C90336) * C141492 + (C90337 + C90338) * C63612 +
            (C89456 * C3494 + C141365 * C3650 + C89455 * C828 +
             C89302 * C1011) *
                C141506 +
            (C89456 * C3490 + C141365 * C3646 + C89455 * C823 +
             C89302 * C1006) *
                C63610) *
               C141327 * C141298 * C141497) *
              C818 +
          (((C90338 + C90337) * C63610 + (C90336 + C90335) * C141506 +
            (C90334 + C90333) * C63612 + (C90332 + C90331) * C141492 +
            (C89455 * C820 + C89302 * C1003 + C89456 * C3493 +
             C141365 * C3649) *
                C63614 +
            (C89455 * C825 + C89302 * C1008 + C89456 * C3497 +
             C141365 * C3653) *
                C63606) *
               C141327 * C141298 * C141497 -
           ((C89490 + C89491) * C63606 + (C89492 + C89493) * C63614 +
            (C89489 + C89488) * C141492 + (C89487 + C89486) * C63612 +
            (C89485 + C89484) * C141506 + (C89483 + C89482) * C63610) *
               C141327 * C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[82] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                        C141492 * C115 + C63614 * C110 + C63606 * C116) *
                           C188 +
                       (C63610 * C189 + C141506 * C362 + C63612 * C190 +
                        C141492 * C363 + C63614 * C191 + C63606 * C364) *
                           C141327) *
                          C89302 +
                      ((C63610 * C1601 + C141506 * C1606 + C63612 * C1600 +
                        C141492 * C1605 + C63614 * C1599 + C63606 * C1604) *
                           C188 +
                       (C63610 * C1690 + C141506 * C1878 + C63612 * C1689 +
                        C141492 * C1877 + C63614 * C1688 + C63606 * C1876) *
                           C141327) *
                          C141365) *
                         C141298 * C816 -
                     (((C68416 + C68417 + C68418) * C141327 +
                       (C68419 + C68420 + C68421) * C188) *
                          C141365 +
                      ((C64846 + C64845 + C64844) * C141327 +
                       (C64843 + C64842 + C64841) * C188) *
                          C89302) *
                         C141298 * C141497) *
                        C818 +
                    ((((C64847 + C64848 + C64849) * C188 +
                       (C64850 + C64851 + C64852) * C141327) *
                          C89302 +
                      ((C63610 * C3491 + C141506 * C3495 + C63612 * C3492 +
                        C141492 * C3496 + C63614 * C3493 + C63606 * C3497) *
                           C188 +
                       (C63610 * C3573 + C141506 * C3721 + C63612 * C3574 +
                        C141492 * C3722 + C63614 * C3575 + C63606 * C3723) *
                           C141327) *
                          C141365) *
                         C141298 * C141497 -
                     (((C63614 * C1687 + C63606 * C1875 + C63612 * C1688 +
                        C141492 * C1876 + C63610 * C1689 + C141506 * C1877) *
                           C141327 +
                       (C63614 * C1598 + C63606 * C1603 + C63612 * C1599 +
                        C141492 * C1604 + C63610 * C1600 + C141506 * C1605) *
                           C188) *
                          C141365 +
                      ((C63614 * C192 + C63606 * C365 + C63612 * C191 +
                        C141492 * C364 + C63610 * C190 + C141506 * C363) *
                           C141327 +
                       (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                        C141492 * C116 + C63610 * C109 + C141506 * C115) *
                           C188) *
                          C89302) *
                         C141298 * C816) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[82] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C141506 +
             C448 * C141492 + C449 * C63606) *
                C89302 +
            (C16256 * C141506 + C1971 * C141492 + C1970 * C63606) * C141365) *
               C141298 * C816 -
           ((C15178 * C63606 + C15179 * C141492 + C18795 * C141506) * C141365 +
            (C1192 * C63606 + C1193 * C141492 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C141506) *
                C89302) *
               C141298 * C141497) *
              C818 +
          (((C1193 * C141506 + C1192 * C141492 + C1191 * C63606) * C89302 +
            (C15179 * C141506 + C15178 * C141492 +
             (C418 * C3493 + C3798 + C3798 + C141327 * C3793) * C63606) *
                C141365) *
               C141298 * C141497 -
           ((C1969 * C63606 + C1970 * C141492 + C1971 * C141506) * C141365 +
            (C450 * C63606 + C449 * C141492 + C448 * C141506) * C89302) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[82] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C188 +
             (C89455 * C189 + C89302 * C501 + C89456 * C1690 +
              C141365 * C2040) *
                 C141327) *
                C141506 +
            ((C89482 + C89483) * C188 + (C89731 + C89732) * C141327) * C141492 +
            C89739 * C63606) *
               C141298 * C816 -
           (((C90641 + C90642) * C141327 + (C90333 + C90334) * C188) * C63606 +
            ((C90643 + C90644) * C141327 + (C90337 + C90338) * C188) * C141492 +
            ((C89456 * C3572 + C141365 * C3864 + C89455 * C912 +
              C89302 * C1262) *
                 C141327 +
             (C89456 * C3490 + C141365 * C3646 + C89455 * C823 +
              C89302 * C1006) *
                 C188) *
                C141506) *
               C141298 * C141497) *
              C818 +
          ((((C90338 + C90337) * C188 + (C90644 + C90643) * C141327) * C141506 +
            ((C90334 + C90333) * C188 + (C90642 + C90641) * C141327) * C141492 +
            ((C89455 * C820 + C89302 * C1003 + C89456 * C3493 +
              C141365 * C3649) *
                 C188 +
             (C89455 * C909 + C89302 * C1259 + C89456 * C3575 +
              C141365 * C3867) *
                 C141327) *
                C63606) *
               C141298 * C141497 -
           (((C89735 + C89736) * C141327 + (C89492 + C89493) * C188) * C63606 +
            ((C89734 + C89733) * C141327 + (C89487 + C89486) * C188) * C141492 +
            ((C89732 + C89731) * C141327 + (C89483 + C89482) * C188) *
                C141506) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[82] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                       C141492 * C115 + C63614 * C110 + C63606 * C116) *
                          C89455 +
                      (C63610 * C276 + C141506 * C579 + C63612 * C277 +
                       C141492 * C580 + C63614 * C278 + C63606 * C581) *
                          C89302 +
                      (C63610 * C1601 + C141506 * C1606 + C63612 * C1600 +
                       C141492 * C1605 + C63614 * C1599 + C63606 * C1604) *
                          C89456 +
                      (C63610 * C1784 + C141506 * C2126 + C63612 * C1783 +
                       C141492 * C2125 + C63614 * C1782 + C63606 * C2124) *
                          C141365) *
                         C141327 * C141298 * C816 -
                     ((C68728 + C68729 + C68730) * C141365 +
                      (C68419 + C68420 + C68421) * C89456 +
                      (C65197 + C65196 + C65195) * C89302 +
                      (C64843 + C64842 + C64841) * C89455) *
                         C141327 * C141298 * C141497) *
                        C818 +
                    (((C64847 + C64848 + C64849) * C89455 +
                      (C65198 + C65199 + C65200) * C89302 +
                      (C63610 * C3491 + C141506 * C3495 + C63612 * C3492 +
                       C141492 * C3496 + C63614 * C3493 + C63606 * C3497) *
                          C89456 +
                      (C63610 * C3647 + C141506 * C3935 + C63612 * C3648 +
                       C141492 * C3936 + C63614 * C3649 + C63606 * C3937) *
                          C141365) *
                         C141327 * C141298 * C141497 -
                     ((C63614 * C1781 + C63606 * C2123 + C63612 * C1782 +
                       C141492 * C2124 + C63610 * C1783 + C141506 * C2125) *
                          C141365 +
                      (C63614 * C1598 + C63606 * C1603 + C63612 * C1599 +
                       C141492 * C1604 + C63610 * C1600 + C141506 * C1605) *
                          C89456 +
                      (C63614 * C279 + C63606 * C582 + C63612 * C278 +
                       C141492 * C581 + C63610 * C277 + C141506 * C580) *
                          C89302 +
                      (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                       C141492 * C116 + C63610 * C109 + C141506 * C115) *
                          C89455) *
                         C141327 * C141298 * C816) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[82] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C89455 +
             (C188 * C276 + C141327 * C635) * C89302 + C15877 * C89456 +
             C16596 * C141365) *
                C141506 +
            (C89888 + C89889 + C89890 + C89891) * C141492 + C89902 * C63606) *
               C141298 * C816 -
           ((C90841 + C90842 + C90843 + C90844) * C63606 +
            (C90845 + C90846 + C90847 + C90848) * C141492 +
            (C19093 * C141365 + C18488 * C89456 +
             (C188 * C1006 + C141327 * C1419) * C89302 +
             (C188 * C823 + C141327 * C912) * C89455) *
                C141506) *
               C141298 * C141497) *
              C818 +
          (((C90848 + C90847 + C90846 + C90845) * C141506 +
            (C90844 + C90843 + C90842 + C90841) * C141492 +
            (C933 * C89455 + C1431 * C89302 +
             (C188 * C3493 + C141327 * C3575) * C89456 +
             (C188 * C3649 + C141327 * C4007) * C141365) *
                C63606) *
               C141298 * C141497 -
           ((C89896 + C89897 + C89898 + C89899) * C63606 +
            (C89895 + C89894 + C89893 + C89892) * C141492 +
            (C89891 + C89890 + C89889 + C89888) * C141506) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[82] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C89976 * C108 + C89979 + C89979 + C89302 * C714 +
                       C89977 * C1601 + C89980 + C89980 + C141365 * C2283) *
                          C141327 * C141506 +
                      (C90013 + C90014) * C141327 * C141492 + C90020 * C63606) *
                         C141298 * C816 -
                     ((C90971 + C90972) * C141327 * C63606 +
                      (C90973 + C90974) * C141327 * C141492 +
                      (C89977 * C3490 + C90959 + C90959 + C141365 * C4074 +
                       C89976 * C823 + C90960 + C90960 + C89302 * C1505) *
                          C141327 * C141506) *
                         C141298 * C141497) *
                        C818 +
                    (((C90974 + C90973) * C141327 * C141506 +
                      (C90972 + C90971) * C141327 * C141492 +
                      (C89976 * C820 + C90961 + C90961 + C89302 * C1502 +
                       C89977 * C3493 + C90962 + C90962 + C141365 * C4077) *
                          C141327 * C63606) *
                         C141298 * C141497 -
                     ((C90017 + C90018) * C141327 * C63606 +
                      (C90016 + C90015) * C141327 * C141492 +
                      (C90014 + C90013) * C141327 * C141506) *
                         C141298 * C816) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[83] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63609 * C108 + C63616 + C63616 + C141506 * C120 +
                       C63611 * C109 + C63617 + C63617 + C141492 * C121 +
                       C63613 * C110 + C63618 + C63618 + C63606 * C122) *
                          C89302 +
                      (C91100 + C91101 + C91102) * C141365) *
                         C141327 * C1596 -
                     ((C63613 * C5327 + C70767 + C70767 + C63606 * C5335 +
                       C63611 * C5326 + C70766 + C70766 + C141492 * C5334 +
                       C63609 * C5325 + C70765 + C70765 + C141506 * C5333) *
                          C141365 +
                      (C91102 + C91101 + C91100) * C89302) *
                         C141327 * C141499) *
                        C141281 * C818 +
                    (((C91103 + C91104 + C91105) * C89302 +
                      (C63609 * C5326 + C91085 + C91085 + C141506 * C5334 +
                       C63611 * C5327 + C91086 + C91086 + C141492 * C5335 +
                       C63613 * C5328 + C91087 + C91087 + C63606 * C5336) *
                          C141365) *
                         C141327 * C141499 -
                     ((C91105 + C91104 + C91103) * C141365 +
                      (C63613 * C111 + C63625 + C63625 + C63606 * C123 +
                       C63611 * C110 + C63626 + C63626 + C141492 * C122 +
                       C63609 * C109 + C63627 + C63627 + C141506 * C121) *
                          C89302) *
                         C141327 * C1596) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[83] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C63610 +
             (C188 * C114 + C141327 * C195) * C141506 + C218 * C63612 +
             C219 * C141492 + C220 * C63614 + C221 * C63606) *
                C89302 +
            (C91204 + C91205 + C91206 + C91207 + C91208 + C91209) * C141365) *
               C1596 -
           ((C15879 * C63606 + C15880 * C63614 + C15881 * C141492 +
             C15882 * C63612 + C21151 * C141506 + C21152 * C63610) *
                C141365 +
            (C91209 + C91208 + C91207 + C91206 + C91205 + C91204) * C89302) *
               C141499) *
              C141281 * C818 +
          (((C91210 + C91211 + C91212 + C91213 + C91214 + C91215) * C89302 +
            (C15882 * C63610 + C15881 * C141506 + C15880 * C63612 +
             C15879 * C141492 + (C188 * C5328 + C141327 * C5394) * C63614 +
             (C188 * C5332 + C141327 * C5398) * C63606) *
                C141365) *
               C141499 -
           ((C91215 + C91214 + C91213 + C91212 + C91211 + C91210) * C141365 +
            (C223 * C63606 + C222 * C63614 + C221 * C141492 + C220 * C63612 +
             C219 * C141506 + C218 * C63610) *
                C89302) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[83] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C63610 +
            (C89455 * C114 + C89302 * C282 + C89456 * C1606 + C141365 * C1789) *
                C141506 +
            (C89482 + C89483) * C63612 + (C89484 + C89485) * C141492 +
            C89494 * C63614 + C89495 * C63606) *
               C141327 * C1596 -
           ((C91330 + C91331) * C63606 + (C91332 + C91333) * C63614 +
            (C91334 + C91335) * C141492 + (C91336 + C91337) * C63612 +
            (C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
             C89302 * C1789) *
                C141506 +
            (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
             C89302 * C1784) *
                C63610) *
               C141327 * C141499) *
              C141281 * C818 +
          (((C91337 + C91336) * C63610 + (C91335 + C91334) * C141506 +
            (C91333 + C91332) * C63612 + (C91331 + C91330) * C141492 +
            (C89455 * C1598 + C89302 * C1781 + C89456 * C5328 +
             C141365 * C5452) *
                C63614 +
            (C89455 * C1603 + C89302 * C1786 + C89456 * C5332 +
             C141365 * C5456) *
                C63606) *
               C141327 * C141499 -
           ((C89490 + C89491) * C63606 + (C89492 + C89493) * C63614 +
            (C89489 + C89488) * C141492 + (C89487 + C89486) * C63612 +
            (C89485 + C89484) * C141506 + (C89483 + C89482) * C63610) *
               C141327 * C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[83] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                        C141492 * C115 + C63614 * C110 + C63606 * C116) *
                           C188 +
                       (C63610 * C189 + C141506 * C362 + C63612 * C190 +
                        C141492 * C363 + C63614 * C191 + C63606 * C364) *
                           C141327) *
                          C89302 +
                      ((C91460 + C91461 + C91462) * C188 +
                       (C91463 + C91464 + C91465) * C141327) *
                          C141365) *
                         C1596 -
                     (((C63614 * C5393 + C63606 * C5509 + C63612 * C5392 +
                        C141492 * C5508 + C63610 * C5391 + C141506 * C5507) *
                           C141327 +
                       (C63614 * C5327 + C63606 * C5331 + C63612 * C5326 +
                        C141492 * C5330 + C63610 * C5325 + C141506 * C5329) *
                           C188) *
                          C141365 +
                      ((C91465 + C91464 + C91463) * C141327 +
                       (C91462 + C91461 + C91460) * C188) *
                          C89302) *
                         C141499) *
                        C141281 * C818 +
                    ((((C91466 + C91467 + C91468) * C188 +
                       (C91469 + C91470 + C91471) * C141327) *
                          C89302 +
                      ((C63610 * C5326 + C141506 * C5330 + C63612 * C5327 +
                        C141492 * C5331 + C63614 * C5328 + C63606 * C5332) *
                           C188 +
                       (C63610 * C5392 + C141506 * C5508 + C63612 * C5393 +
                        C141492 * C5509 + C63614 * C5394 + C63606 * C5510) *
                           C141327) *
                          C141365) *
                         C141499 -
                     (((C91471 + C91470 + C91469) * C141327 +
                       (C91468 + C91467 + C91466) * C188) *
                          C141365 +
                      ((C63614 * C192 + C63606 * C365 + C63612 * C191 +
                        C141492 * C364 + C63610 * C190 + C141506 * C363) *
                           C141327 +
                       (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                        C141492 * C116 + C63610 * C109 + C141506 * C115) *
                           C188) *
                          C89302) *
                         C1596) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[83] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C141506 +
             C448 * C141492 + C449 * C63606) *
                C89302 +
            (C91570 + C91571 + C91572) * C141365) *
               C1596 -
           ((C16257 * C63606 + C16258 * C141492 + C21416 * C141506) * C141365 +
            (C91572 + C91571 + C91570) * C89302) *
               C141499) *
              C141281 * C818 +
          (((C91573 + C91574 + C91575) * C89302 +
            (C16258 * C141506 + C16257 * C141492 +
             (C418 * C5328 + C5569 + C5569 + C141327 * C5564) * C63606) *
                C141365) *
               C141499 -
           ((C91575 + C91574 + C91573) * C141365 +
            (C450 * C63606 + C449 * C141492 + C448 * C141506) * C89302) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[83] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C188 +
             (C89455 * C189 + C89302 * C501 + C89456 * C1690 +
              C141365 * C2040) *
                 C141327) *
                C141506 +
            ((C89482 + C89483) * C188 + (C89731 + C89732) * C141327) * C141492 +
            C89739 * C63606) *
               C1596 -
           (((C91682 + C91683) * C141327 + (C91332 + C91333) * C188) * C63606 +
            ((C91684 + C91685) * C141327 + (C91336 + C91337) * C188) * C141492 +
            ((C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
              C89302 * C2040) *
                 C141327 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C188) *
                C141506) *
               C141499) *
              C141281 * C818 +
          ((((C91337 + C91336) * C188 + (C91685 + C91684) * C141327) * C141506 +
            ((C91333 + C91332) * C188 + (C91683 + C91682) * C141327) * C141492 +
            ((C89455 * C1598 + C89302 * C1781 + C89456 * C5328 +
              C141365 * C5452) *
                 C188 +
             (C89455 * C1687 + C89302 * C2037 + C89456 * C5394 +
              C141365 * C5622) *
                 C141327) *
                C63606) *
               C141499 -
           (((C89735 + C89736) * C141327 + (C89492 + C89493) * C188) * C63606 +
            ((C89734 + C89733) * C141327 + (C89487 + C89486) * C188) * C141492 +
            ((C89732 + C89731) * C141327 + (C89483 + C89482) * C188) *
                C141506) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[83] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                       C141492 * C115 + C63614 * C110 + C63606 * C116) *
                          C89455 +
                      (C63610 * C276 + C141506 * C579 + C63612 * C277 +
                       C141492 * C580 + C63614 * C278 + C63606 * C581) *
                          C89302 +
                      (C91460 + C91461 + C91462) * C89456 +
                      (C91796 + C91797 + C91798) * C141365) *
                         C141327 * C1596 -
                     ((C63614 * C5451 + C63606 * C5675 + C63612 * C5450 +
                       C141492 * C5674 + C63610 * C5449 + C141506 * C5673) *
                          C141365 +
                      (C63614 * C5327 + C63606 * C5331 + C63612 * C5326 +
                       C141492 * C5330 + C63610 * C5325 + C141506 * C5329) *
                          C89456 +
                      (C91798 + C91797 + C91796) * C89302 +
                      (C91462 + C91461 + C91460) * C89455) *
                         C141327 * C141499) *
                        C141281 * C818 +
                    (((C91466 + C91467 + C91468) * C89455 +
                      (C91799 + C91800 + C91801) * C89302 +
                      (C63610 * C5326 + C141506 * C5330 + C63612 * C5327 +
                       C141492 * C5331 + C63614 * C5328 + C63606 * C5332) *
                          C89456 +
                      (C63610 * C5450 + C141506 * C5674 + C63612 * C5451 +
                       C141492 * C5675 + C63614 * C5452 + C63606 * C5676) *
                          C141365) *
                         C141327 * C141499 -
                     ((C91801 + C91800 + C91799) * C141365 +
                      (C91468 + C91467 + C91466) * C89456 +
                      (C63614 * C279 + C63606 * C582 + C63612 * C278 +
                       C141492 * C581 + C63610 * C277 + C141506 * C580) *
                          C89302 +
                      (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                       C141492 * C116 + C63610 * C109 + C141506 * C115) *
                          C89455) *
                         C141327 * C1596) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[83] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C89455 +
             (C188 * C276 + C141327 * C635) * C89302 + C15877 * C89456 +
             C16596 * C141365) *
                C141506 +
            (C89888 + C89889 + C89890 + C89891) * C141492 + C89902 * C63606) *
               C1596 -
           ((C91900 + C91901 + C91902 + C91903) * C63606 +
            (C91904 + C91905 + C91906 + C91907) * C141492 +
            (C21660 * C141365 + C21152 * C89456 + C16596 * C89302 +
             C15877 * C89455) *
                C141506) *
               C141499) *
              C141281 * C818 +
          (((C91907 + C91906 + C91905 + C91904) * C141506 +
            (C91903 + C91902 + C91901 + C91900) * C141492 +
            (C1711 * C89455 + C2209 * C89302 +
             (C188 * C5328 + C141327 * C5394) * C89456 +
             (C188 * C5452 + C141327 * C5730) * C141365) *
                C63606) *
               C141499 -
           ((C89896 + C89897 + C89898 + C89899) * C63606 +
            (C89895 + C89894 + C89893 + C89892) * C141492 +
            (C89891 + C89890 + C89889 + C89888) * C141506) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[83] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C89976 * C108 + C89979 + C89979 + C89302 * C714 +
                       C89977 * C1601 + C89980 + C89980 + C141365 * C2283) *
                          C141327 * C141506 +
                      (C90013 + C90014) * C141327 * C141492 + C90020 * C63606) *
                         C1596 -
                     ((C92030 + C92031) * C141327 * C63606 +
                      (C92032 + C92033) * C141327 * C141492 +
                      (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
                       C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                          C141327 * C141506) *
                         C141499) *
                        C141281 * C818 +
                    (((C92033 + C92032) * C141327 * C141506 +
                      (C92031 + C92030) * C141327 * C141492 +
                      (C89976 * C1598 + C92020 + C92020 + C89302 * C2280 +
                       C89977 * C5328 + C92021 + C92021 + C141365 * C5784) *
                          C141327 * C63606) *
                         C141499 -
                     ((C90017 + C90018) * C141327 * C63606 +
                      (C90016 + C90015) * C141327 * C141492 +
                      (C90014 + C90013) * C141327 * C141506) *
                         C1596) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[84] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63609 * C108 + C63616 + C63616 + C141506 * C120 +
                       C63611 * C109 + C63617 + C63617 + C141492 * C121 +
                       C63613 * C110 + C63618 + C63618 + C63606 * C122) *
                          C89302 +
                      (C91100 + C91101 + C91102) * C141365) *
                         C141327 * C141298 * C2374 -
                     ((C68101 + C68102 + C68103) * C141365 +
                      (C64483 + C64482 + C64481) * C89302) *
                         C141327 * C141298 * C141497) *
                        C2376 +
                    (((C64484 + C64485 + C64486) * C89302 +
                      (C63609 * C3491 + C65520 + C65520 + C141506 * C3499 +
                       C63611 * C3492 + C65521 + C65521 + C141492 * C3500 +
                       C63613 * C3493 + C65522 + C65522 + C63606 * C3501) *
                          C141365) *
                         C141327 * C141298 * C141497 -
                     ((C91105 + C91104 + C91103) * C141365 +
                      (C63613 * C111 + C63625 + C63625 + C63606 * C123 +
                       C63611 * C110 + C63626 + C63626 + C141492 * C122 +
                       C63609 * C109 + C63627 + C63627 + C141506 * C121) *
                          C89302) *
                         C141327 * C141298 * C2374) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[84] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C63610 +
             (C188 * C114 + C141327 * C195) * C141506 + C218 * C63612 +
             C219 * C141492 + C220 * C63614 + C221 * C63606) *
                C89302 +
            (C91204 + C91205 + C91206 + C91207 + C91208 + C91209) * C141365) *
               C141298 * C2374 -
           ((C14848 * C63606 + C14849 * C63614 + C14850 * C141492 +
             C14851 * C63612 + C18489 * C141506 + C18488 * C63610) *
                C141365 +
            (C934 * C63606 + C935 * C63614 + C936 * C141492 + C937 * C63612 +
             (C188 * C828 + C141327 * C917) * C141506 +
             (C188 * C823 + C141327 * C912) * C63610) *
                C89302) *
               C141298 * C141497) *
              C2376 +
          (((C937 * C63610 + C936 * C141506 + C935 * C63612 + C934 * C141492 +
             C933 * C63614 + C932 * C63606) *
                C89302 +
            (C14851 * C63610 + C14850 * C141506 + C14849 * C63612 +
             C14848 * C141492 + (C188 * C3493 + C141327 * C3575) * C63614 +
             (C188 * C3497 + C141327 * C3579) * C63606) *
                C141365) *
               C141298 * C141497 -
           ((C91215 + C91214 + C91213 + C91212 + C91211 + C91210) * C141365 +
            (C223 * C63606 + C222 * C63614 + C221 * C141492 + C220 * C63612 +
             C219 * C141506 + C218 * C63610) *
                C89302) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[84] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C63610 +
            (C89455 * C114 + C89302 * C282 + C89456 * C1606 + C141365 * C1789) *
                C141506 +
            (C89482 + C89483) * C63612 + (C89484 + C89485) * C141492 +
            C89494 * C63614 + C89495 * C63606) *
               C141327 * C141298 * C2374 -
           ((C90331 + C90332) * C63606 + (C90333 + C90334) * C63614 +
            (C90335 + C90336) * C141492 + (C90337 + C90338) * C63612 +
            (C89456 * C3494 + C141365 * C3650 + C89455 * C828 +
             C89302 * C1011) *
                C141506 +
            (C89456 * C3490 + C141365 * C3646 + C89455 * C823 +
             C89302 * C1006) *
                C63610) *
               C141327 * C141298 * C141497) *
              C2376 +
          (((C90338 + C90337) * C63610 + (C90336 + C90335) * C141506 +
            (C90334 + C90333) * C63612 + (C90332 + C90331) * C141492 +
            (C89455 * C820 + C89302 * C1003 + C89456 * C3493 +
             C141365 * C3649) *
                C63614 +
            (C89455 * C825 + C89302 * C1008 + C89456 * C3497 +
             C141365 * C3653) *
                C63606) *
               C141327 * C141298 * C141497 -
           ((C89490 + C89491) * C63606 + (C89492 + C89493) * C63614 +
            (C89489 + C89488) * C141492 + (C89487 + C89486) * C63612 +
            (C89485 + C89484) * C141506 + (C89483 + C89482) * C63610) *
               C141327 * C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[84] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                        C141492 * C115 + C63614 * C110 + C63606 * C116) *
                           C188 +
                       (C63610 * C189 + C141506 * C362 + C63612 * C190 +
                        C141492 * C363 + C63614 * C191 + C63606 * C364) *
                           C141327) *
                          C89302 +
                      ((C91460 + C91461 + C91462) * C188 +
                       (C91463 + C91464 + C91465) * C141327) *
                          C141365) *
                         C141298 * C2374 -
                     (((C68416 + C68417 + C68418) * C141327 +
                       (C68419 + C68420 + C68421) * C188) *
                          C141365 +
                      ((C64846 + C64845 + C64844) * C141327 +
                       (C64843 + C64842 + C64841) * C188) *
                          C89302) *
                         C141298 * C141497) *
                        C2376 +
                    ((((C64847 + C64848 + C64849) * C188 +
                       (C64850 + C64851 + C64852) * C141327) *
                          C89302 +
                      ((C63610 * C3491 + C141506 * C3495 + C63612 * C3492 +
                        C141492 * C3496 + C63614 * C3493 + C63606 * C3497) *
                           C188 +
                       (C63610 * C3573 + C141506 * C3721 + C63612 * C3574 +
                        C141492 * C3722 + C63614 * C3575 + C63606 * C3723) *
                           C141327) *
                          C141365) *
                         C141298 * C141497 -
                     (((C91471 + C91470 + C91469) * C141327 +
                       (C91468 + C91467 + C91466) * C188) *
                          C141365 +
                      ((C63614 * C192 + C63606 * C365 + C63612 * C191 +
                        C141492 * C364 + C63610 * C190 + C141506 * C363) *
                           C141327 +
                       (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                        C141492 * C116 + C63610 * C109 + C141506 * C115) *
                           C188) *
                          C89302) *
                         C141298 * C2374) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[84] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C141506 +
             C448 * C141492 + C449 * C63606) *
                C89302 +
            (C91570 + C91571 + C91572) * C141365) *
               C141298 * C2374 -
           ((C15178 * C63606 + C15179 * C141492 + C18795 * C141506) * C141365 +
            (C1192 * C63606 + C1193 * C141492 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C141506) *
                C89302) *
               C141298 * C141497) *
              C2376 +
          (((C1193 * C141506 + C1192 * C141492 + C1191 * C63606) * C89302 +
            (C15179 * C141506 + C15178 * C141492 +
             (C418 * C3493 + C3798 + C3798 + C141327 * C3793) * C63606) *
                C141365) *
               C141298 * C141497 -
           ((C91575 + C91574 + C91573) * C141365 +
            (C450 * C63606 + C449 * C141492 + C448 * C141506) * C89302) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[84] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C188 +
             (C89455 * C189 + C89302 * C501 + C89456 * C1690 +
              C141365 * C2040) *
                 C141327) *
                C141506 +
            ((C89482 + C89483) * C188 + (C89731 + C89732) * C141327) * C141492 +
            C89739 * C63606) *
               C141298 * C2374 -
           (((C90641 + C90642) * C141327 + (C90333 + C90334) * C188) * C63606 +
            ((C90643 + C90644) * C141327 + (C90337 + C90338) * C188) * C141492 +
            ((C89456 * C3572 + C141365 * C3864 + C89455 * C912 +
              C89302 * C1262) *
                 C141327 +
             (C89456 * C3490 + C141365 * C3646 + C89455 * C823 +
              C89302 * C1006) *
                 C188) *
                C141506) *
               C141298 * C141497) *
              C2376 +
          ((((C90338 + C90337) * C188 + (C90644 + C90643) * C141327) * C141506 +
            ((C90334 + C90333) * C188 + (C90642 + C90641) * C141327) * C141492 +
            ((C89455 * C820 + C89302 * C1003 + C89456 * C3493 +
              C141365 * C3649) *
                 C188 +
             (C89455 * C909 + C89302 * C1259 + C89456 * C3575 +
              C141365 * C3867) *
                 C141327) *
                C63606) *
               C141298 * C141497 -
           (((C89735 + C89736) * C141327 + (C89492 + C89493) * C188) * C63606 +
            ((C89734 + C89733) * C141327 + (C89487 + C89486) * C188) * C141492 +
            ((C89732 + C89731) * C141327 + (C89483 + C89482) * C188) *
                C141506) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[84] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                       C141492 * C115 + C63614 * C110 + C63606 * C116) *
                          C89455 +
                      (C63610 * C276 + C141506 * C579 + C63612 * C277 +
                       C141492 * C580 + C63614 * C278 + C63606 * C581) *
                          C89302 +
                      (C91460 + C91461 + C91462) * C89456 +
                      (C91796 + C91797 + C91798) * C141365) *
                         C141327 * C141298 * C2374 -
                     ((C68728 + C68729 + C68730) * C141365 +
                      (C68419 + C68420 + C68421) * C89456 +
                      (C65197 + C65196 + C65195) * C89302 +
                      (C64843 + C64842 + C64841) * C89455) *
                         C141327 * C141298 * C141497) *
                        C2376 +
                    (((C64847 + C64848 + C64849) * C89455 +
                      (C65198 + C65199 + C65200) * C89302 +
                      (C63610 * C3491 + C141506 * C3495 + C63612 * C3492 +
                       C141492 * C3496 + C63614 * C3493 + C63606 * C3497) *
                          C89456 +
                      (C63610 * C3647 + C141506 * C3935 + C63612 * C3648 +
                       C141492 * C3936 + C63614 * C3649 + C63606 * C3937) *
                          C141365) *
                         C141327 * C141298 * C141497 -
                     ((C91801 + C91800 + C91799) * C141365 +
                      (C91468 + C91467 + C91466) * C89456 +
                      (C63614 * C279 + C63606 * C582 + C63612 * C278 +
                       C141492 * C581 + C63610 * C277 + C141506 * C580) *
                          C89302 +
                      (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                       C141492 * C116 + C63610 * C109 + C141506 * C115) *
                          C89455) *
                         C141327 * C141298 * C2374) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[84] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C89455 +
             (C188 * C276 + C141327 * C635) * C89302 + C15877 * C89456 +
             C16596 * C141365) *
                C141506 +
            (C89888 + C89889 + C89890 + C89891) * C141492 + C89902 * C63606) *
               C141298 * C2374 -
           ((C90841 + C90842 + C90843 + C90844) * C63606 +
            (C90845 + C90846 + C90847 + C90848) * C141492 +
            (C19093 * C141365 + C18488 * C89456 +
             (C188 * C1006 + C141327 * C1419) * C89302 +
             (C188 * C823 + C141327 * C912) * C89455) *
                C141506) *
               C141298 * C141497) *
              C2376 +
          (((C90848 + C90847 + C90846 + C90845) * C141506 +
            (C90844 + C90843 + C90842 + C90841) * C141492 +
            (C933 * C89455 + C1431 * C89302 +
             (C188 * C3493 + C141327 * C3575) * C89456 +
             (C188 * C3649 + C141327 * C4007) * C141365) *
                C63606) *
               C141298 * C141497 -
           ((C89896 + C89897 + C89898 + C89899) * C63606 +
            (C89895 + C89894 + C89893 + C89892) * C141492 +
            (C89891 + C89890 + C89889 + C89888) * C141506) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[84] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C89976 * C108 + C89979 + C89979 + C89302 * C714 +
                       C89977 * C1601 + C89980 + C89980 + C141365 * C2283) *
                          C141327 * C141506 +
                      (C90013 + C90014) * C141327 * C141492 + C90020 * C63606) *
                         C141298 * C2374 -
                     ((C90971 + C90972) * C141327 * C63606 +
                      (C90973 + C90974) * C141327 * C141492 +
                      (C89977 * C3490 + C90959 + C90959 + C141365 * C4074 +
                       C89976 * C823 + C90960 + C90960 + C89302 * C1505) *
                          C141327 * C141506) *
                         C141298 * C141497) *
                        C2376 +
                    (((C90974 + C90973) * C141327 * C141506 +
                      (C90972 + C90971) * C141327 * C141492 +
                      (C89976 * C820 + C90961 + C90961 + C89302 * C1502 +
                       C89977 * C3493 + C90962 + C90962 + C141365 * C4077) *
                          C141327 * C63606) *
                         C141298 * C141497 -
                     ((C90017 + C90018) * C141327 * C63606 +
                      (C90016 + C90015) * C141327 * C141492 +
                      (C90014 + C90013) * C141327 * C141506) *
                         C141298 * C2374) *
                        C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[85] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63609 * C108 + C63616 + C63616 + C141506 * C120 +
                      C63611 * C109 + C63617 + C63617 + C141492 * C121 +
                      C63613 * C110 + C63618 + C63618 + C63606 * C122) *
                         C89302 +
                     (C91100 + C91101 + C91102) * C141365) *
                        C141327 * C141298 * C2956 -
                    ((C68101 + C68102 + C68103) * C141365 +
                     (C64483 + C64482 + C64481) * C89302) *
                        C141327 * C141298 * C2957 +
                    ((C67356 + C67355 + C67354) * C89302 +
                     (C63609 * C10470 + C68092 + C68092 + C141506 * C10476 +
                      C63611 * C10471 + C68093 + C68093 + C141492 * C10477 +
                      C63613 * C10472 + C68094 + C68094 + C63606 * C10478) *
                         C141365) *
                        C141327 * C141298 * C2958) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexy[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C63610 +
            (C188 * C114 + C141327 * C195) * C141506 + C218 * C63612 +
            C219 * C141492 + C220 * C63614 + C221 * C63606) *
               C89302 +
           (C91204 + C91205 + C91206 + C91207 + C91208 + C91209) * C141365) *
              C141298 * C2956 -
          ((C14848 * C63606 + C14849 * C63614 + C14850 * C141492 +
            C14851 * C63612 + C18489 * C141506 + C18488 * C63610) *
               C141365 +
           (C934 * C63606 + C935 * C63614 + C936 * C141492 + C937 * C63612 +
            (C188 * C828 + C141327 * C917) * C141506 +
            (C188 * C823 + C141327 * C912) * C63610) *
               C89302) *
              C141298 * C2957 +
          (((C188 * C2960 + C141327 * C3026) * C63610 +
            (C188 * C2964 + C141327 * C3030) * C141506 +
            (C188 * C2961 + C141327 * C3027) * C63612 +
            (C188 * C2965 + C141327 * C3031) * C141492 +
            (C188 * C2962 + C141327 * C3028) * C63614 +
            (C188 * C2966 + C141327 * C3032) * C63606) *
               C89302 +
           ((C188 * C10470 + C141327 * C10595) * C63610 +
            (C188 * C10473 + C141327 * C10598) * C141506 +
            (C188 * C10471 + C141327 * C10596) * C63612 +
            (C188 * C10474 + C141327 * C10599) * C141492 +
            (C188 * C10472 + C141327 * C10597) * C63614 +
            (C188 * C10475 + C141327 * C10600) * C63606) *
               C141365) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
               C63610 +
           (C89455 * C114 + C89302 * C282 + C89456 * C1606 + C141365 * C1789) *
               C141506 +
           (C89482 + C89483) * C63612 + (C89484 + C89485) * C141492 +
           C89494 * C63614 + C89495 * C63606) *
              C141327 * C141298 * C2956 -
          ((C90331 + C90332) * C63606 + (C90333 + C90334) * C63614 +
           (C90335 + C90336) * C141492 + (C90337 + C90338) * C63612 +
           (C89456 * C3494 + C141365 * C3650 + C89455 * C828 + C89302 * C1011) *
               C141506 +
           (C89456 * C3490 + C141365 * C3646 + C89455 * C823 + C89302 * C1006) *
               C63610) *
              C141327 * C141298 * C2957 +
          ((C89455 * C2960 + C89302 * C3084 + C89456 * C10470 +
            C141365 * C10699) *
               C63610 +
           (C89455 * C2964 + C89302 * C3088 + C89456 * C10473 +
            C141365 * C10702) *
               C141506 +
           (C89455 * C2961 + C89302 * C3085 + C89456 * C10471 +
            C141365 * C10700) *
               C63612 +
           (C89455 * C2965 + C89302 * C3089 + C89456 * C10474 +
            C141365 * C10703) *
               C141492 +
           (C89455 * C2962 + C89302 * C3086 + C89456 * C10472 +
            C141365 * C10701) *
               C63614 +
           (C89455 * C2966 + C89302 * C3090 + C89456 * C10475 +
            C141365 * C10704) *
               C63606) *
              C141327 * C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[85] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                       C141492 * C115 + C63614 * C110 + C63606 * C116) *
                          C188 +
                      (C63610 * C189 + C141506 * C362 + C63612 * C190 +
                       C141492 * C363 + C63614 * C191 + C63606 * C364) *
                          C141327) *
                         C89302 +
                     ((C91460 + C91461 + C91462) * C188 +
                      (C91463 + C91464 + C91465) * C141327) *
                         C141365) *
                        C141298 * C2956 -
                    (((C68416 + C68417 + C68418) * C141327 +
                      (C68419 + C68420 + C68421) * C188) *
                         C141365 +
                     ((C64846 + C64845 + C64844) * C141327 +
                      (C64843 + C64842 + C64841) * C188) *
                         C89302) *
                        C141298 * C2957 +
                    (((C67602 + C67601 + C67600) * C188 +
                      (C67599 + C67598 + C67597) * C141327) *
                         C89302 +
                     ((C63610 * C10470 + C141506 * C10473 + C63612 * C10471 +
                       C141492 * C10474 + C63614 * C10472 + C63606 * C10475) *
                          C188 +
                      (C63610 * C10595 + C141506 * C10815 + C63612 * C10596 +
                       C141492 * C10816 + C63614 * C10597 + C63606 * C10817) *
                          C141327) *
                         C141365) *
                        C141298 * C2958) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C141506 +
            C448 * C141492 + C449 * C63606) *
               C89302 +
           (C91570 + C91571 + C91572) * C141365) *
              C141298 * C2956 -
          ((C15178 * C63606 + C15179 * C141492 + C18795 * C141506) * C141365 +
           (C1192 * C63606 + C1193 * C141492 +
            (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C141506) *
               C89302) *
              C141298 * C2957 +
          (((C418 * C2960 + C3201 + C3201 + C141327 * C3196) * C141506 +
            (C418 * C2961 + C3202 + C3202 + C141327 * C3197) * C141492 +
            (C418 * C2962 + C3203 + C3203 + C141327 * C3198) * C63606) *
               C89302 +
           ((C418 * C10470 + C17979 + C17979 + C141327 * C10934) * C141506 +
            (C418 * C10471 + C17980 + C17980 + C141327 * C10935) * C141492 +
            (C418 * C10472 + C17981 + C17981 + C141327 * C10936) * C63606) *
               C141365) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C188 +
            (C89455 * C189 + C89302 * C501 + C89456 * C1690 + C141365 * C2040) *
                C141327) *
               C141506 +
           ((C89482 + C89483) * C188 + (C89731 + C89732) * C141327) * C141492 +
           C89739 * C63606) *
              C141298 * C2956 -
          (((C90641 + C90642) * C141327 + (C90333 + C90334) * C188) * C63606 +
           ((C90643 + C90644) * C141327 + (C90337 + C90338) * C188) * C141492 +
           ((C89456 * C3572 + C141365 * C3864 + C89455 * C912 +
             C89302 * C1262) *
                C141327 +
            (C89456 * C3490 + C141365 * C3646 + C89455 * C823 +
             C89302 * C1006) *
                C188) *
               C141506) *
              C141298 * C2957 +
          (((C89455 * C2960 + C89302 * C3084 + C89456 * C10470 +
             C141365 * C10699) *
                C188 +
            (C89455 * C3026 + C89302 * C3254 + C89456 * C10595 +
             C141365 * C11041) *
                C141327) *
               C141506 +
           ((C89455 * C2961 + C89302 * C3085 + C89456 * C10471 +
             C141365 * C10700) *
                C188 +
            (C89455 * C3027 + C89302 * C3255 + C89456 * C10596 +
             C141365 * C11042) *
                C141327) *
               C141492 +
           ((C89455 * C2962 + C89302 * C3086 + C89456 * C10472 +
             C141365 * C10701) *
                C188 +
            (C89455 * C3028 + C89302 * C3256 + C89456 * C10597 +
             C141365 * C11043) *
                C141327) *
               C63606) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[85] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                      C141492 * C115 + C63614 * C110 + C63606 * C116) *
                         C89455 +
                     (C63610 * C276 + C141506 * C579 + C63612 * C277 +
                      C141492 * C580 + C63614 * C278 + C63606 * C581) *
                         C89302 +
                     (C91460 + C91461 + C91462) * C89456 +
                     (C91796 + C91797 + C91798) * C141365) *
                        C141327 * C141298 * C2956 -
                    ((C68728 + C68729 + C68730) * C141365 +
                     (C68419 + C68420 + C68421) * C89456 +
                     (C65197 + C65196 + C65195) * C89302 +
                     (C64843 + C64842 + C64841) * C89455) *
                        C141327 * C141298 * C2957 +
                    ((C67602 + C67601 + C67600) * C89455 +
                     (C67839 + C67838 + C67837) * C89302 +
                     (C63610 * C10470 + C141506 * C10473 + C63612 * C10471 +
                      C141492 * C10474 + C63614 * C10472 + C63606 * C10475) *
                         C89456 +
                     (C63610 * C10699 + C141506 * C11145 + C63612 * C10700 +
                      C141492 * C11146 + C63614 * C10701 + C63606 * C11147) *
                         C141365) *
                        C141327 * C141298 * C2958) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezy[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C89455 +
            (C188 * C276 + C141327 * C635) * C89302 + C15877 * C89456 +
            C16596 * C141365) *
               C141506 +
           (C89888 + C89889 + C89890 + C89891) * C141492 + C89902 * C63606) *
              C141298 * C2956 -
          ((C90841 + C90842 + C90843 + C90844) * C63606 +
           (C90845 + C90846 + C90847 + C90848) * C141492 +
           (C19093 * C141365 + C18488 * C89456 +
            (C188 * C1006 + C141327 * C1419) * C89302 +
            (C188 * C823 + C141327 * C912) * C89455) *
               C141506) *
              C141298 * C2957 +
          (((C188 * C2960 + C141327 * C3026) * C89455 +
            (C188 * C3084 + C141327 * C3362) * C89302 +
            (C188 * C10470 + C141327 * C10595) * C89456 +
            (C188 * C10699 + C141327 * C11255) * C141365) *
               C141506 +
           ((C188 * C2961 + C141327 * C3027) * C89455 +
            (C188 * C3085 + C141327 * C3363) * C89302 +
            (C188 * C10471 + C141327 * C10596) * C89456 +
            (C188 * C10700 + C141327 * C11256) * C141365) *
               C141492 +
           ((C188 * C2962 + C141327 * C3028) * C89455 +
            (C188 * C3086 + C141327 * C3364) * C89302 +
            (C188 * C10472 + C141327 * C10597) * C89456 +
            (C188 * C10701 + C141327 * C11257) * C141365) *
               C63606) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[85] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C89976 * C108 + C89979 + C89979 + C89302 * C714 +
                      C89977 * C1601 + C89980 + C89980 + C141365 * C2283) *
                         C141327 * C141506 +
                     (C90013 + C90014) * C141327 * C141492 + C90020 * C63606) *
                        C141298 * C2956 -
                    ((C90971 + C90972) * C141327 * C63606 +
                     (C90973 + C90974) * C141327 * C141492 +
                     (C89977 * C3490 + C90959 + C90959 + C141365 * C4074 +
                      C89976 * C823 + C90960 + C90960 + C89302 * C1505) *
                         C141327 * C141506) *
                        C141298 * C2957 +
                    ((C89976 * C2960 + C93582 + C93582 + C89302 * C3416 +
                      C89977 * C10470 + C93583 + C93583 + C141365 * C11356) *
                         C141327 * C141506 +
                     (C89976 * C2961 + C93584 + C93584 + C89302 * C3417 +
                      C89977 * C10471 + C93585 + C93585 + C141365 * C11357) *
                         C141327 * C141492 +
                     (C89976 * C2962 + C93586 + C93586 + C89302 * C3418 +
                      C89977 * C10472 + C93587 + C93587 + C141365 * C11358) *
                         C141327 * C63606) *
                        C141298 * C2958) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexx[86] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63609 * C108 + C63616 + C63616 + C141506 * C120 +
                       C63611 * C109 + C63617 + C63617 + C141492 * C121 +
                       C63613 * C110 + C63618 + C63618 + C63606 * C122) *
                          C89302 +
                      (C91100 + C91101 + C91102) * C141365) *
                         C141327 * C1596 -
                     ((C63613 * C5327 + C70767 + C70767 + C63606 * C5335 +
                       C63611 * C5326 + C70766 + C70766 + C141492 * C5334 +
                       C63609 * C5325 + C70765 + C70765 + C141506 * C5333) *
                          C141365 +
                      (C91102 + C91101 + C91100) * C89302) *
                         C141327 * C141499) *
                        C2374 +
                    (((C68103 + C68102 + C68101) * C89302 +
                      (C63609 * C13205 + C70768 + C70768 + C141506 * C13211 +
                       C63611 * C13206 + C70769 + C70769 + C141492 * C13212 +
                       C63613 * C13207 + C70770 + C70770 + C63606 * C13213) *
                          C141365) *
                         C141327 * C141499 -
                     ((C68101 + C68102 + C68103) * C141365 +
                      (C64483 + C64482 + C64481) * C89302) *
                         C141327 * C1596) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexy[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C63610 +
             (C188 * C114 + C141327 * C195) * C141506 + C218 * C63612 +
             C219 * C141492 + C220 * C63614 + C221 * C63606) *
                C89302 +
            (C91204 + C91205 + C91206 + C91207 + C91208 + C91209) * C141365) *
               C1596 -
           ((C15879 * C63606 + C15880 * C63614 + C15881 * C141492 +
             C15882 * C63612 + C21151 * C141506 + C21152 * C63610) *
                C141365 +
            (C91209 + C91208 + C91207 + C91206 + C91205 + C91204) * C89302) *
               C141499) *
              C2374 +
          (((C93784 + C93785 + C93786 + C93787 + C93788 + C93789) * C89302 +
            (C47416 * C63610 + C47417 * C141506 + C43792 * C63612 +
             C43791 * C141492 + (C188 * C13207 + C141327 * C13296) * C63614 +
             (C188 * C13210 + C141327 * C13299) * C63606) *
                C141365) *
               C141499 -
           ((C93789 + C93788 + C93787 + C93786 + C93785 + C93784) * C141365 +
            (C934 * C63606 + C935 * C63614 + C936 * C141492 + C937 * C63612 +
             (C188 * C828 + C141327 * C917) * C141506 +
             (C188 * C823 + C141327 * C912) * C63610) *
                C89302) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C63610 +
            (C89455 * C114 + C89302 * C282 + C89456 * C1606 + C141365 * C1789) *
                C141506 +
            (C89482 + C89483) * C63612 + (C89484 + C89485) * C141492 +
            C89494 * C63614 + C89495 * C63606) *
               C141327 * C1596 -
           ((C91330 + C91331) * C63606 + (C91332 + C91333) * C63614 +
            (C91334 + C91335) * C141492 + (C91336 + C91337) * C63612 +
            (C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
             C89302 * C1789) *
                C141506 +
            (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
             C89302 * C1784) *
                C63610) *
               C141327 * C141499) *
              C2374 +
          (((C89455 * C3490 + C89302 * C3646 + C89456 * C13205 +
             C141365 * C13374) *
                C63610 +
            (C89455 * C3494 + C89302 * C3650 + C89456 * C13208 +
             C141365 * C13377) *
                C141506 +
            (C89455 * C3491 + C89302 * C3647 + C89456 * C13206 +
             C141365 * C13375) *
                C63612 +
            (C89455 * C3495 + C89302 * C3651 + C89456 * C13209 +
             C141365 * C13378) *
                C141492 +
            (C89455 * C3492 + C89302 * C3648 + C89456 * C13207 +
             C141365 * C13376) *
                C63614 +
            (C89455 * C3496 + C89302 * C3652 + C89456 * C13210 +
             C141365 * C13379) *
                C63606) *
               C141327 * C141499 -
           ((C90331 + C90332) * C63606 + (C90333 + C90334) * C63614 +
            (C90335 + C90336) * C141492 + (C90337 + C90338) * C63612 +
            (C89456 * C3494 + C141365 * C3650 + C89455 * C828 +
             C89302 * C1011) *
                C141506 +
            (C89456 * C3490 + C141365 * C3646 + C89455 * C823 +
             C89302 * C1006) *
                C63610) *
               C141327 * C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[86] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                        C141492 * C115 + C63614 * C110 + C63606 * C116) *
                           C188 +
                       (C63610 * C189 + C141506 * C362 + C63612 * C190 +
                        C141492 * C363 + C63614 * C191 + C63606 * C364) *
                           C141327) *
                          C89302 +
                      ((C91460 + C91461 + C91462) * C188 +
                       (C91463 + C91464 + C91465) * C141327) *
                          C141365) *
                         C1596 -
                     (((C63614 * C5393 + C63606 * C5509 + C63612 * C5392 +
                        C141492 * C5508 + C63610 * C5391 + C141506 * C5507) *
                           C141327 +
                       (C63614 * C5327 + C63606 * C5331 + C63612 * C5326 +
                        C141492 * C5330 + C63610 * C5325 + C141506 * C5329) *
                           C188) *
                          C141365 +
                      ((C91465 + C91464 + C91463) * C141327 +
                       (C91462 + C91461 + C91460) * C188) *
                          C89302) *
                         C141499) *
                        C2374 +
                    ((((C68421 + C68420 + C68419) * C188 +
                       (C68418 + C68417 + C68416) * C141327) *
                          C89302 +
                      ((C63610 * C13205 + C141506 * C13208 + C63612 * C13206 +
                        C141492 * C13209 + C63614 * C13207 + C63606 * C13210) *
                           C188 +
                       (C63610 * C13294 + C141506 * C13454 + C63612 * C13295 +
                        C141492 * C13455 + C63614 * C13296 + C63606 * C13456) *
                           C141327) *
                          C141365) *
                         C141499 -
                     (((C68416 + C68417 + C68418) * C141327 +
                       (C68419 + C68420 + C68421) * C188) *
                          C141365 +
                      ((C64846 + C64845 + C64844) * C141327 +
                       (C64843 + C64842 + C64841) * C188) *
                          C89302) *
                         C1596) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C141506 +
             C448 * C141492 + C449 * C63606) *
                C89302 +
            (C91570 + C91571 + C91572) * C141365) *
               C1596 -
           ((C16257 * C63606 + C16258 * C141492 + C21416 * C141506) * C141365 +
            (C91572 + C91571 + C91570) * C89302) *
               C141499) *
              C2374 +
          (((C94084 + C94085 + C94086) * C89302 +
            (C47739 * C141506 + C44109 * C141492 +
             (C418 * C13207 + C18792 + C18792 + C141327 * C13533) * C63606) *
                C141365) *
               C141499 -
           ((C94086 + C94085 + C94084) * C141365 +
            (C1192 * C63606 + C1193 * C141492 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C141506) *
                C89302) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C188 +
             (C89455 * C189 + C89302 * C501 + C89456 * C1690 +
              C141365 * C2040) *
                 C141327) *
                C141506 +
            ((C89482 + C89483) * C188 + (C89731 + C89732) * C141327) * C141492 +
            C89739 * C63606) *
               C1596 -
           (((C91682 + C91683) * C141327 + (C91332 + C91333) * C188) * C63606 +
            ((C91684 + C91685) * C141327 + (C91336 + C91337) * C188) * C141492 +
            ((C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
              C89302 * C2040) *
                 C141327 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C188) *
                C141506) *
               C141499) *
              C2374 +
          ((((C89455 * C3490 + C89302 * C3646 + C89456 * C13205 +
              C141365 * C13374) *
                 C188 +
             (C89455 * C3572 + C89302 * C3864 + C89456 * C13294 +
              C141365 * C13614) *
                 C141327) *
                C141506 +
            ((C89455 * C3491 + C89302 * C3647 + C89456 * C13206 +
              C141365 * C13375) *
                 C188 +
             (C89455 * C3573 + C89302 * C3865 + C89456 * C13295 +
              C141365 * C13615) *
                 C141327) *
                C141492 +
            ((C89455 * C3492 + C89302 * C3648 + C89456 * C13207 +
              C141365 * C13376) *
                 C188 +
             (C89455 * C3574 + C89302 * C3866 + C89456 * C13296 +
              C141365 * C13616) *
                 C141327) *
                C63606) *
               C141499 -
           (((C90641 + C90642) * C141327 + (C90333 + C90334) * C188) * C63606 +
            ((C90643 + C90644) * C141327 + (C90337 + C90338) * C188) * C141492 +
            ((C89456 * C3572 + C141365 * C3864 + C89455 * C912 +
              C89302 * C1262) *
                 C141327 +
             (C89456 * C3490 + C141365 * C3646 + C89455 * C823 +
              C89302 * C1006) *
                 C188) *
                C141506) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[86] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                       C141492 * C115 + C63614 * C110 + C63606 * C116) *
                          C89455 +
                      (C63610 * C276 + C141506 * C579 + C63612 * C277 +
                       C141492 * C580 + C63614 * C278 + C63606 * C581) *
                          C89302 +
                      (C91460 + C91461 + C91462) * C89456 +
                      (C91796 + C91797 + C91798) * C141365) *
                         C141327 * C1596 -
                     ((C63614 * C5451 + C63606 * C5675 + C63612 * C5450 +
                       C141492 * C5674 + C63610 * C5449 + C141506 * C5673) *
                          C141365 +
                      (C63614 * C5327 + C63606 * C5331 + C63612 * C5326 +
                       C141492 * C5330 + C63610 * C5325 + C141506 * C5329) *
                          C89456 +
                      (C91798 + C91797 + C91796) * C89302 +
                      (C91462 + C91461 + C91460) * C89455) *
                         C141327 * C141499) *
                        C2374 +
                    (((C68421 + C68420 + C68419) * C89455 +
                      (C68730 + C68729 + C68728) * C89302 +
                      (C63610 * C13205 + C141506 * C13208 + C63612 * C13206 +
                       C141492 * C13209 + C63614 * C13207 + C63606 * C13210) *
                          C89456 +
                      (C63610 * C13374 + C141506 * C13691 + C63612 * C13375 +
                       C141492 * C13692 + C63614 * C13376 + C63606 * C13693) *
                          C141365) *
                         C141327 * C141499 -
                     ((C68728 + C68729 + C68730) * C141365 +
                      (C68419 + C68420 + C68421) * C89456 +
                      (C65197 + C65196 + C65195) * C89302 +
                      (C64843 + C64842 + C64841) * C89455) *
                         C141327 * C1596) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezy[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C89455 +
             (C188 * C276 + C141327 * C635) * C89302 + C15877 * C89456 +
             C16596 * C141365) *
                C141506 +
            (C89888 + C89889 + C89890 + C89891) * C141492 + C89902 * C63606) *
               C1596 -
           ((C91900 + C91901 + C91902 + C91903) * C63606 +
            (C91904 + C91905 + C91906 + C91907) * C141492 +
            (C21660 * C141365 + C21152 * C89456 + C16596 * C89302 +
             C15877 * C89455) *
                C141506) *
               C141499) *
              C2374 +
          (((C18488 * C89455 + C19093 * C89302 + C47416 * C89456 +
             C48046 * C141365) *
                C141506 +
            (C14851 * C89455 + C15497 * C89302 + C43792 * C89456 +
             C44420 * C141365) *
                C141492 +
            (C14849 * C89455 + C15496 * C89302 +
             (C188 * C13207 + C141327 * C13296) * C89456 +
             (C188 * C13376 + C141327 * C13770) * C141365) *
                C63606) *
               C141499 -
           ((C90841 + C90842 + C90843 + C90844) * C63606 +
            (C90845 + C90846 + C90847 + C90848) * C141492 +
            (C19093 * C141365 + C18488 * C89456 +
             (C188 * C1006 + C141327 * C1419) * C89302 +
             (C188 * C823 + C141327 * C912) * C89455) *
                C141506) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[86] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C89976 * C108 + C89979 + C89979 + C89302 * C714 +
                       C89977 * C1601 + C89980 + C89980 + C141365 * C2283) *
                          C141327 * C141506 +
                      (C90013 + C90014) * C141327 * C141492 + C90020 * C63606) *
                         C1596 -
                     ((C92030 + C92031) * C141327 * C63606 +
                      (C92032 + C92033) * C141327 * C141492 +
                      (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
                       C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                          C141327 * C141506) *
                         C141499) *
                        C2374 +
                    (((C89976 * C3490 + C94479 + C94479 + C89302 * C4074 +
                       C89977 * C13205 + C94480 + C94480 + C141365 * C13845) *
                          C141327 * C141506 +
                      (C89976 * C3491 + C94481 + C94481 + C89302 * C4075 +
                       C89977 * C13206 + C94482 + C94482 + C141365 * C13846) *
                          C141327 * C141492 +
                      (C89976 * C3492 + C94483 + C94483 + C89302 * C4076 +
                       C89977 * C13207 + C94484 + C94484 + C141365 * C13847) *
                          C141327 * C63606) *
                         C141499 -
                     ((C90971 + C90972) * C141327 * C63606 +
                      (C90973 + C90974) * C141327 * C141492 +
                      (C89977 * C3490 + C90959 + C90959 + C141365 * C4074 +
                       C89976 * C823 + C90960 + C90960 + C89302 * C1505) *
                          C141327 * C141506) *
                         C1596) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexx[87] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63609 * C108 + C63616 + C63616 + C141506 * C120 +
                       C63611 * C109 + C63617 + C63617 + C141492 * C121 +
                       C63613 * C110 + C63618 + C63618 + C63606 * C122) *
                          C89302 +
                      (C91100 + C91101 + C91102) * C141365) *
                         C141327 * C4148 -
                     ((C63613 * C5327 + C70767 + C70767 + C63606 * C5335 +
                       C63611 * C5326 + C70766 + C70766 + C141492 * C5334 +
                       C63609 * C5325 + C70765 + C70765 + C141506 * C5333) *
                          C141365 +
                      (C91102 + C91101 + C91100) * C89302) *
                         C141327 * C141499) *
                        C141281 * C2376 +
                    (((C91103 + C91104 + C91105) * C89302 +
                      (C63609 * C5326 + C91085 + C91085 + C141506 * C5334 +
                       C63611 * C5327 + C91086 + C91086 + C141492 * C5335 +
                       C63613 * C5328 + C91087 + C91087 + C63606 * C5336) *
                          C141365) *
                         C141327 * C141499 -
                     ((C91105 + C91104 + C91103) * C141365 +
                      (C63613 * C111 + C63625 + C63625 + C63606 * C123 +
                       C63611 * C110 + C63626 + C63626 + C141492 * C122 +
                       C63609 * C109 + C63627 + C63627 + C141506 * C121) *
                          C89302) *
                         C141327 * C4148) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[87] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C63610 +
             (C188 * C114 + C141327 * C195) * C141506 + C218 * C63612 +
             C219 * C141492 + C220 * C63614 + C221 * C63606) *
                C89302 +
            (C91204 + C91205 + C91206 + C91207 + C91208 + C91209) * C141365) *
               C4148 -
           ((C15879 * C63606 + C15880 * C63614 + C15881 * C141492 +
             C15882 * C63612 + C21151 * C141506 + C21152 * C63610) *
                C141365 +
            (C91209 + C91208 + C91207 + C91206 + C91205 + C91204) * C89302) *
               C141499) *
              C141281 * C2376 +
          (((C91210 + C91211 + C91212 + C91213 + C91214 + C91215) * C89302 +
            (C15882 * C63610 + C15881 * C141506 + C15880 * C63612 +
             C15879 * C141492 + (C188 * C5328 + C141327 * C5394) * C63614 +
             (C188 * C5332 + C141327 * C5398) * C63606) *
                C141365) *
               C141499 -
           ((C91215 + C91214 + C91213 + C91212 + C91211 + C91210) * C141365 +
            (C223 * C63606 + C222 * C63614 + C221 * C141492 + C220 * C63612 +
             C219 * C141506 + C218 * C63610) *
                C89302) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[87] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C63610 +
            (C89455 * C114 + C89302 * C282 + C89456 * C1606 + C141365 * C1789) *
                C141506 +
            (C89482 + C89483) * C63612 + (C89484 + C89485) * C141492 +
            C89494 * C63614 + C89495 * C63606) *
               C141327 * C4148 -
           ((C91330 + C91331) * C63606 + (C91332 + C91333) * C63614 +
            (C91334 + C91335) * C141492 + (C91336 + C91337) * C63612 +
            (C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
             C89302 * C1789) *
                C141506 +
            (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
             C89302 * C1784) *
                C63610) *
               C141327 * C141499) *
              C141281 * C2376 +
          (((C91337 + C91336) * C63610 + (C91335 + C91334) * C141506 +
            (C91333 + C91332) * C63612 + (C91331 + C91330) * C141492 +
            (C89455 * C1598 + C89302 * C1781 + C89456 * C5328 +
             C141365 * C5452) *
                C63614 +
            (C89455 * C1603 + C89302 * C1786 + C89456 * C5332 +
             C141365 * C5456) *
                C63606) *
               C141327 * C141499 -
           ((C89490 + C89491) * C63606 + (C89492 + C89493) * C63614 +
            (C89489 + C89488) * C141492 + (C89487 + C89486) * C63612 +
            (C89485 + C89484) * C141506 + (C89483 + C89482) * C63610) *
               C141327 * C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[87] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                        C141492 * C115 + C63614 * C110 + C63606 * C116) *
                           C188 +
                       (C63610 * C189 + C141506 * C362 + C63612 * C190 +
                        C141492 * C363 + C63614 * C191 + C63606 * C364) *
                           C141327) *
                          C89302 +
                      ((C91460 + C91461 + C91462) * C188 +
                       (C91463 + C91464 + C91465) * C141327) *
                          C141365) *
                         C4148 -
                     (((C63614 * C5393 + C63606 * C5509 + C63612 * C5392 +
                        C141492 * C5508 + C63610 * C5391 + C141506 * C5507) *
                           C141327 +
                       (C63614 * C5327 + C63606 * C5331 + C63612 * C5326 +
                        C141492 * C5330 + C63610 * C5325 + C141506 * C5329) *
                           C188) *
                          C141365 +
                      ((C91465 + C91464 + C91463) * C141327 +
                       (C91462 + C91461 + C91460) * C188) *
                          C89302) *
                         C141499) *
                        C141281 * C2376 +
                    ((((C91466 + C91467 + C91468) * C188 +
                       (C91469 + C91470 + C91471) * C141327) *
                          C89302 +
                      ((C63610 * C5326 + C141506 * C5330 + C63612 * C5327 +
                        C141492 * C5331 + C63614 * C5328 + C63606 * C5332) *
                           C188 +
                       (C63610 * C5392 + C141506 * C5508 + C63612 * C5393 +
                        C141492 * C5509 + C63614 * C5394 + C63606 * C5510) *
                           C141327) *
                          C141365) *
                         C141499 -
                     (((C91471 + C91470 + C91469) * C141327 +
                       (C91468 + C91467 + C91466) * C188) *
                          C141365 +
                      ((C63614 * C192 + C63606 * C365 + C63612 * C191 +
                        C141492 * C364 + C63610 * C190 + C141506 * C363) *
                           C141327 +
                       (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                        C141492 * C116 + C63610 * C109 + C141506 * C115) *
                           C188) *
                          C89302) *
                         C4148) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[87] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C141506 +
             C448 * C141492 + C449 * C63606) *
                C89302 +
            (C91570 + C91571 + C91572) * C141365) *
               C4148 -
           ((C16257 * C63606 + C16258 * C141492 + C21416 * C141506) * C141365 +
            (C91572 + C91571 + C91570) * C89302) *
               C141499) *
              C141281 * C2376 +
          (((C91573 + C91574 + C91575) * C89302 +
            (C16258 * C141506 + C16257 * C141492 +
             (C418 * C5328 + C5569 + C5569 + C141327 * C5564) * C63606) *
                C141365) *
               C141499 -
           ((C91575 + C91574 + C91573) * C141365 +
            (C450 * C63606 + C449 * C141492 + C448 * C141506) * C89302) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[87] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C188 +
             (C89455 * C189 + C89302 * C501 + C89456 * C1690 +
              C141365 * C2040) *
                 C141327) *
                C141506 +
            ((C89482 + C89483) * C188 + (C89731 + C89732) * C141327) * C141492 +
            C89739 * C63606) *
               C4148 -
           (((C91682 + C91683) * C141327 + (C91332 + C91333) * C188) * C63606 +
            ((C91684 + C91685) * C141327 + (C91336 + C91337) * C188) * C141492 +
            ((C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
              C89302 * C2040) *
                 C141327 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C188) *
                C141506) *
               C141499) *
              C141281 * C2376 +
          ((((C91337 + C91336) * C188 + (C91685 + C91684) * C141327) * C141506 +
            ((C91333 + C91332) * C188 + (C91683 + C91682) * C141327) * C141492 +
            ((C89455 * C1598 + C89302 * C1781 + C89456 * C5328 +
              C141365 * C5452) *
                 C188 +
             (C89455 * C1687 + C89302 * C2037 + C89456 * C5394 +
              C141365 * C5622) *
                 C141327) *
                C63606) *
               C141499 -
           (((C89735 + C89736) * C141327 + (C89492 + C89493) * C188) * C63606 +
            ((C89734 + C89733) * C141327 + (C89487 + C89486) * C188) * C141492 +
            ((C89732 + C89731) * C141327 + (C89483 + C89482) * C188) *
                C141506) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[87] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                       C141492 * C115 + C63614 * C110 + C63606 * C116) *
                          C89455 +
                      (C63610 * C276 + C141506 * C579 + C63612 * C277 +
                       C141492 * C580 + C63614 * C278 + C63606 * C581) *
                          C89302 +
                      (C91460 + C91461 + C91462) * C89456 +
                      (C91796 + C91797 + C91798) * C141365) *
                         C141327 * C4148 -
                     ((C63614 * C5451 + C63606 * C5675 + C63612 * C5450 +
                       C141492 * C5674 + C63610 * C5449 + C141506 * C5673) *
                          C141365 +
                      (C63614 * C5327 + C63606 * C5331 + C63612 * C5326 +
                       C141492 * C5330 + C63610 * C5325 + C141506 * C5329) *
                          C89456 +
                      (C91798 + C91797 + C91796) * C89302 +
                      (C91462 + C91461 + C91460) * C89455) *
                         C141327 * C141499) *
                        C141281 * C2376 +
                    (((C91466 + C91467 + C91468) * C89455 +
                      (C91799 + C91800 + C91801) * C89302 +
                      (C63610 * C5326 + C141506 * C5330 + C63612 * C5327 +
                       C141492 * C5331 + C63614 * C5328 + C63606 * C5332) *
                          C89456 +
                      (C63610 * C5450 + C141506 * C5674 + C63612 * C5451 +
                       C141492 * C5675 + C63614 * C5452 + C63606 * C5676) *
                          C141365) *
                         C141327 * C141499 -
                     ((C91801 + C91800 + C91799) * C141365 +
                      (C91468 + C91467 + C91466) * C89456 +
                      (C63614 * C279 + C63606 * C582 + C63612 * C278 +
                       C141492 * C581 + C63610 * C277 + C141506 * C580) *
                          C89302 +
                      (C63614 * C111 + C63606 * C117 + C63612 * C110 +
                       C141492 * C116 + C63610 * C109 + C141506 * C115) *
                          C89455) *
                         C141327 * C4148) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[87] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C89455 +
             (C188 * C276 + C141327 * C635) * C89302 + C15877 * C89456 +
             C16596 * C141365) *
                C141506 +
            (C89888 + C89889 + C89890 + C89891) * C141492 + C89902 * C63606) *
               C4148 -
           ((C91900 + C91901 + C91902 + C91903) * C63606 +
            (C91904 + C91905 + C91906 + C91907) * C141492 +
            (C21660 * C141365 + C21152 * C89456 + C16596 * C89302 +
             C15877 * C89455) *
                C141506) *
               C141499) *
              C141281 * C2376 +
          (((C91907 + C91906 + C91905 + C91904) * C141506 +
            (C91903 + C91902 + C91901 + C91900) * C141492 +
            (C1711 * C89455 + C2209 * C89302 +
             (C188 * C5328 + C141327 * C5394) * C89456 +
             (C188 * C5452 + C141327 * C5730) * C141365) *
                C63606) *
               C141499 -
           ((C89896 + C89897 + C89898 + C89899) * C63606 +
            (C89895 + C89894 + C89893 + C89892) * C141492 +
            (C89891 + C89890 + C89889 + C89888) * C141506) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[87] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C89976 * C108 + C89979 + C89979 + C89302 * C714 +
                       C89977 * C1601 + C89980 + C89980 + C141365 * C2283) *
                          C141327 * C141506 +
                      (C90013 + C90014) * C141327 * C141492 + C90020 * C63606) *
                         C4148 -
                     ((C92030 + C92031) * C141327 * C63606 +
                      (C92032 + C92033) * C141327 * C141492 +
                      (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
                       C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                          C141327 * C141506) *
                         C141499) *
                        C141281 * C2376 +
                    (((C92033 + C92032) * C141327 * C141506 +
                      (C92031 + C92030) * C141327 * C141492 +
                      (C89976 * C1598 + C92020 + C92020 + C89302 * C2280 +
                       C89977 * C5328 + C92021 + C92021 + C141365 * C5784) *
                          C141327 * C63606) *
                         C141499 -
                     ((C90017 + C90018) * C141327 * C63606 +
                      (C90016 + C90015) * C141327 * C141492 +
                      (C90014 + C90013) * C141327 * C141506) *
                         C4148) *
                        C141281 * C141495)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[88] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63609 * C108 + C63616 + C63616 + C141506 * C120 +
                       C63611 * C109 + C63617 + C63617 + C141492 * C121 +
                       C63613 * C110 + C63618 + C63618 + C63606 * C122) *
                          C89302 +
                      (C91100 + C91101 + C91102) * C141365) *
                         C141327 * C4148 -
                     ((C63613 * C5327 + C70767 + C70767 + C63606 * C5335 +
                       C63611 * C5326 + C70766 + C70766 + C141492 * C5334 +
                       C63609 * C5325 + C70765 + C70765 + C141506 * C5333) *
                          C141365 +
                      (C91102 + C91101 + C91100) * C89302) *
                         C141327 * C141499) *
                        C816 +
                    (((C68103 + C68102 + C68101) * C89302 +
                      (C63609 * C13205 + C70768 + C70768 + C141506 * C13211 +
                       C63611 * C13206 + C70769 + C70769 + C141492 * C13212 +
                       C63613 * C13207 + C70770 + C70770 + C63606 * C13213) *
                          C141365) *
                         C141327 * C141499 -
                     ((C68101 + C68102 + C68103) * C141365 +
                      (C64483 + C64482 + C64481) * C89302) *
                         C141327 * C4148) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexy[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C63610 +
             (C188 * C114 + C141327 * C195) * C141506 + C218 * C63612 +
             C219 * C141492 + C220 * C63614 + C221 * C63606) *
                C89302 +
            (C91204 + C91205 + C91206 + C91207 + C91208 + C91209) * C141365) *
               C4148 -
           ((C15879 * C63606 + C15880 * C63614 + C15881 * C141492 +
             C15882 * C63612 + C21151 * C141506 + C21152 * C63610) *
                C141365 +
            (C91209 + C91208 + C91207 + C91206 + C91205 + C91204) * C89302) *
               C141499) *
              C816 +
          (((C93784 + C93785 + C93786 + C93787 + C93788 + C93789) * C89302 +
            (C47416 * C63610 + C47417 * C141506 + C43792 * C63612 +
             C43791 * C141492 + (C188 * C13207 + C141327 * C13296) * C63614 +
             (C188 * C13210 + C141327 * C13299) * C63606) *
                C141365) *
               C141499 -
           ((C93789 + C93788 + C93787 + C93786 + C93785 + C93784) * C141365 +
            (C934 * C63606 + C935 * C63614 + C936 * C141492 + C937 * C63612 +
             (C188 * C828 + C141327 * C917) * C141506 +
             (C188 * C823 + C141327 * C912) * C63610) *
                C89302) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C63610 +
            (C89455 * C114 + C89302 * C282 + C89456 * C1606 + C141365 * C1789) *
                C141506 +
            (C89482 + C89483) * C63612 + (C89484 + C89485) * C141492 +
            C89494 * C63614 + C89495 * C63606) *
               C141327 * C4148 -
           ((C91330 + C91331) * C63606 + (C91332 + C91333) * C63614 +
            (C91334 + C91335) * C141492 + (C91336 + C91337) * C63612 +
            (C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
             C89302 * C1789) *
                C141506 +
            (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
             C89302 * C1784) *
                C63610) *
               C141327 * C141499) *
              C816 +
          (((C89455 * C3490 + C89302 * C3646 + C89456 * C13205 +
             C141365 * C13374) *
                C63610 +
            (C89455 * C3494 + C89302 * C3650 + C89456 * C13208 +
             C141365 * C13377) *
                C141506 +
            (C89455 * C3491 + C89302 * C3647 + C89456 * C13206 +
             C141365 * C13375) *
                C63612 +
            (C89455 * C3495 + C89302 * C3651 + C89456 * C13209 +
             C141365 * C13378) *
                C141492 +
            (C89455 * C3492 + C89302 * C3648 + C89456 * C13207 +
             C141365 * C13376) *
                C63614 +
            (C89455 * C3496 + C89302 * C3652 + C89456 * C13210 +
             C141365 * C13379) *
                C63606) *
               C141327 * C141499 -
           ((C90331 + C90332) * C63606 + (C90333 + C90334) * C63614 +
            (C90335 + C90336) * C141492 + (C90337 + C90338) * C63612 +
            (C89456 * C3494 + C141365 * C3650 + C89455 * C828 +
             C89302 * C1011) *
                C141506 +
            (C89456 * C3490 + C141365 * C3646 + C89455 * C823 +
             C89302 * C1006) *
                C63610) *
               C141327 * C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[88] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                        C141492 * C115 + C63614 * C110 + C63606 * C116) *
                           C188 +
                       (C63610 * C189 + C141506 * C362 + C63612 * C190 +
                        C141492 * C363 + C63614 * C191 + C63606 * C364) *
                           C141327) *
                          C89302 +
                      ((C91460 + C91461 + C91462) * C188 +
                       (C91463 + C91464 + C91465) * C141327) *
                          C141365) *
                         C4148 -
                     (((C63614 * C5393 + C63606 * C5509 + C63612 * C5392 +
                        C141492 * C5508 + C63610 * C5391 + C141506 * C5507) *
                           C141327 +
                       (C63614 * C5327 + C63606 * C5331 + C63612 * C5326 +
                        C141492 * C5330 + C63610 * C5325 + C141506 * C5329) *
                           C188) *
                          C141365 +
                      ((C91465 + C91464 + C91463) * C141327 +
                       (C91462 + C91461 + C91460) * C188) *
                          C89302) *
                         C141499) *
                        C816 +
                    ((((C68421 + C68420 + C68419) * C188 +
                       (C68418 + C68417 + C68416) * C141327) *
                          C89302 +
                      ((C63610 * C13205 + C141506 * C13208 + C63612 * C13206 +
                        C141492 * C13209 + C63614 * C13207 + C63606 * C13210) *
                           C188 +
                       (C63610 * C13294 + C141506 * C13454 + C63612 * C13295 +
                        C141492 * C13455 + C63614 * C13296 + C63606 * C13456) *
                           C141327) *
                          C141365) *
                         C141499 -
                     (((C68416 + C68417 + C68418) * C141327 +
                       (C68419 + C68420 + C68421) * C188) *
                          C141365 +
                      ((C64846 + C64845 + C64844) * C141327 +
                       (C64843 + C64842 + C64841) * C188) *
                          C89302) *
                         C4148) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C141506 +
             C448 * C141492 + C449 * C63606) *
                C89302 +
            (C91570 + C91571 + C91572) * C141365) *
               C4148 -
           ((C16257 * C63606 + C16258 * C141492 + C21416 * C141506) * C141365 +
            (C91572 + C91571 + C91570) * C89302) *
               C141499) *
              C816 +
          (((C94084 + C94085 + C94086) * C89302 +
            (C47739 * C141506 + C44109 * C141492 +
             (C418 * C13207 + C18792 + C18792 + C141327 * C13533) * C63606) *
                C141365) *
               C141499 -
           ((C94086 + C94085 + C94084) * C141365 +
            (C1192 * C63606 + C1193 * C141492 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C141506) *
                C89302) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C188 +
             (C89455 * C189 + C89302 * C501 + C89456 * C1690 +
              C141365 * C2040) *
                 C141327) *
                C141506 +
            ((C89482 + C89483) * C188 + (C89731 + C89732) * C141327) * C141492 +
            C89739 * C63606) *
               C4148 -
           (((C91682 + C91683) * C141327 + (C91332 + C91333) * C188) * C63606 +
            ((C91684 + C91685) * C141327 + (C91336 + C91337) * C188) * C141492 +
            ((C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
              C89302 * C2040) *
                 C141327 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C188) *
                C141506) *
               C141499) *
              C816 +
          ((((C89455 * C3490 + C89302 * C3646 + C89456 * C13205 +
              C141365 * C13374) *
                 C188 +
             (C89455 * C3572 + C89302 * C3864 + C89456 * C13294 +
              C141365 * C13614) *
                 C141327) *
                C141506 +
            ((C89455 * C3491 + C89302 * C3647 + C89456 * C13206 +
              C141365 * C13375) *
                 C188 +
             (C89455 * C3573 + C89302 * C3865 + C89456 * C13295 +
              C141365 * C13615) *
                 C141327) *
                C141492 +
            ((C89455 * C3492 + C89302 * C3648 + C89456 * C13207 +
              C141365 * C13376) *
                 C188 +
             (C89455 * C3574 + C89302 * C3866 + C89456 * C13296 +
              C141365 * C13616) *
                 C141327) *
                C63606) *
               C141499 -
           (((C90641 + C90642) * C141327 + (C90333 + C90334) * C188) * C63606 +
            ((C90643 + C90644) * C141327 + (C90337 + C90338) * C188) * C141492 +
            ((C89456 * C3572 + C141365 * C3864 + C89455 * C912 +
              C89302 * C1262) *
                 C141327 +
             (C89456 * C3490 + C141365 * C3646 + C89455 * C823 +
              C89302 * C1006) *
                 C188) *
                C141506) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[88] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                       C141492 * C115 + C63614 * C110 + C63606 * C116) *
                          C89455 +
                      (C63610 * C276 + C141506 * C579 + C63612 * C277 +
                       C141492 * C580 + C63614 * C278 + C63606 * C581) *
                          C89302 +
                      (C91460 + C91461 + C91462) * C89456 +
                      (C91796 + C91797 + C91798) * C141365) *
                         C141327 * C4148 -
                     ((C63614 * C5451 + C63606 * C5675 + C63612 * C5450 +
                       C141492 * C5674 + C63610 * C5449 + C141506 * C5673) *
                          C141365 +
                      (C63614 * C5327 + C63606 * C5331 + C63612 * C5326 +
                       C141492 * C5330 + C63610 * C5325 + C141506 * C5329) *
                          C89456 +
                      (C91798 + C91797 + C91796) * C89302 +
                      (C91462 + C91461 + C91460) * C89455) *
                         C141327 * C141499) *
                        C816 +
                    (((C68421 + C68420 + C68419) * C89455 +
                      (C68730 + C68729 + C68728) * C89302 +
                      (C63610 * C13205 + C141506 * C13208 + C63612 * C13206 +
                       C141492 * C13209 + C63614 * C13207 + C63606 * C13210) *
                          C89456 +
                      (C63610 * C13374 + C141506 * C13691 + C63612 * C13375 +
                       C141492 * C13692 + C63614 * C13376 + C63606 * C13693) *
                          C141365) *
                         C141327 * C141499 -
                     ((C68728 + C68729 + C68730) * C141365 +
                      (C68419 + C68420 + C68421) * C89456 +
                      (C65197 + C65196 + C65195) * C89302 +
                      (C64843 + C64842 + C64841) * C89455) *
                         C141327 * C4148) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezy[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C89455 +
             (C188 * C276 + C141327 * C635) * C89302 + C15877 * C89456 +
             C16596 * C141365) *
                C141506 +
            (C89888 + C89889 + C89890 + C89891) * C141492 + C89902 * C63606) *
               C4148 -
           ((C91900 + C91901 + C91902 + C91903) * C63606 +
            (C91904 + C91905 + C91906 + C91907) * C141492 +
            (C21660 * C141365 + C21152 * C89456 + C16596 * C89302 +
             C15877 * C89455) *
                C141506) *
               C141499) *
              C816 +
          (((C18488 * C89455 + C19093 * C89302 + C47416 * C89456 +
             C48046 * C141365) *
                C141506 +
            (C14851 * C89455 + C15497 * C89302 + C43792 * C89456 +
             C44420 * C141365) *
                C141492 +
            (C14849 * C89455 + C15496 * C89302 +
             (C188 * C13207 + C141327 * C13296) * C89456 +
             (C188 * C13376 + C141327 * C13770) * C141365) *
                C63606) *
               C141499 -
           ((C90841 + C90842 + C90843 + C90844) * C63606 +
            (C90845 + C90846 + C90847 + C90848) * C141492 +
            (C19093 * C141365 + C18488 * C89456 +
             (C188 * C1006 + C141327 * C1419) * C89302 +
             (C188 * C823 + C141327 * C912) * C89455) *
                C141506) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[88] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C89976 * C108 + C89979 + C89979 + C89302 * C714 +
                       C89977 * C1601 + C89980 + C89980 + C141365 * C2283) *
                          C141327 * C141506 +
                      (C90013 + C90014) * C141327 * C141492 + C90020 * C63606) *
                         C4148 -
                     ((C92030 + C92031) * C141327 * C63606 +
                      (C92032 + C92033) * C141327 * C141492 +
                      (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
                       C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                          C141327 * C141506) *
                         C141499) *
                        C816 +
                    (((C89976 * C3490 + C94479 + C94479 + C89302 * C4074 +
                       C89977 * C13205 + C94480 + C94480 + C141365 * C13845) *
                          C141327 * C141506 +
                      (C89976 * C3491 + C94481 + C94481 + C89302 * C4075 +
                       C89977 * C13206 + C94482 + C94482 + C141365 * C13846) *
                          C141327 * C141492 +
                      (C89976 * C3492 + C94483 + C94483 + C89302 * C4076 +
                       C89977 * C13207 + C94484 + C94484 + C141365 * C13847) *
                          C141327 * C63606) *
                         C141499 -
                     ((C90971 + C90972) * C141327 * C63606 +
                      (C90973 + C90974) * C141327 * C141492 +
                      (C89977 * C3490 + C90959 + C90959 + C141365 * C4074 +
                       C89976 * C823 + C90960 + C90960 + C89302 * C1505) *
                          C141327 * C141506) *
                         C4148) *
                        C141497) *
                   C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexx[89] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63609 * C108 + C63616 + C63616 + C141506 * C120 +
                      C63611 * C109 + C63617 + C63617 + C141492 * C121 +
                      C63613 * C110 + C63618 + C63618 + C63606 * C122) *
                         C89302 +
                     (C91100 + C91101 + C91102) * C141365) *
                        C141327 * C5322 -
                    ((C96338 + C96339 + C96340) * C141365 +
                     (C91102 + C91101 + C91100) * C89302) *
                        C141327 * C5323 +
                    ((C96340 + C96339 + C96338) * C89302 +
                     (C63609 * C21035 + C96329 + C96329 + C141506 * C21041 +
                      C63611 * C21036 + C96330 + C96330 + C141492 * C21042 +
                      C63613 * C21037 + C96331 + C96331 + C63606 * C21043) *
                         C141365) *
                        C141327 * C5324) *
                   C141281 * C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexy[89] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C63610 +
            (C188 * C114 + C141327 * C195) * C141506 + C218 * C63612 +
            C219 * C141492 + C220 * C63614 + C221 * C63606) *
               C89302 +
           (C91204 + C91205 + C91206 + C91207 + C91208 + C91209) * C141365) *
              C5322 -
          ((C96415 + C96416 + C96417 + C96418 + C96419 + C96420) * C141365 +
           (C91209 + C91208 + C91207 + C91206 + C91205 + C91204) * C89302) *
              C5323 +
          ((C96420 + C96419 + C96418 + C96417 + C96416 + C96415) * C89302 +
           (C50096 * C63610 + C50095 * C141506 + C44805 * C63612 +
            C44804 * C141492 + (C188 * C21037 + C141327 * C21138) * C63614 +
            (C188 * C21040 + C141327 * C21141) * C63606) *
               C141365) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[89] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
               C63610 +
           (C89455 * C114 + C89302 * C282 + C89456 * C1606 + C141365 * C1789) *
               C141506 +
           (C89482 + C89483) * C63612 + (C89484 + C89485) * C141492 +
           C89494 * C63614 + C89495 * C63606) *
              C141327 * C5322 -
          ((C91330 + C91331) * C63606 + (C91332 + C91333) * C63614 +
           (C91334 + C91335) * C141492 + (C91336 + C91337) * C63612 +
           (C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
            C89302 * C1789) *
               C141506 +
           (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
            C89302 * C1784) *
               C63610) *
              C141327 * C5323 +
          ((C89455 * C5325 + C89302 * C5449 + C89456 * C21035 +
            C141365 * C21228) *
               C63610 +
           (C89455 * C5329 + C89302 * C5453 + C89456 * C21038 +
            C141365 * C21231) *
               C141506 +
           (C89455 * C5326 + C89302 * C5450 + C89456 * C21036 +
            C141365 * C21229) *
               C63612 +
           (C89455 * C5330 + C89302 * C5454 + C89456 * C21039 +
            C141365 * C21232) *
               C141492 +
           (C89455 * C5327 + C89302 * C5451 + C89456 * C21037 +
            C141365 * C21230) *
               C63614 +
           (C89455 * C5331 + C89302 * C5455 + C89456 * C21040 +
            C141365 * C21233) *
               C63606) *
              C141327 * C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[89] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                       C141492 * C115 + C63614 * C110 + C63606 * C116) *
                          C188 +
                      (C63610 * C189 + C141506 * C362 + C63612 * C190 +
                       C141492 * C363 + C63614 * C191 + C63606 * C364) *
                          C141327) *
                         C89302 +
                     ((C91460 + C91461 + C91462) * C188 +
                      (C91463 + C91464 + C91465) * C141327) *
                         C141365) *
                        C5322 -
                    (((C96581 + C96582 + C96583) * C141327 +
                      (C96584 + C96585 + C96586) * C188) *
                         C141365 +
                     ((C91465 + C91464 + C91463) * C141327 +
                      (C91462 + C91461 + C91460) * C188) *
                         C89302) *
                        C5323 +
                    (((C96586 + C96585 + C96584) * C188 +
                      (C96583 + C96582 + C96581) * C141327) *
                         C89302 +
                     ((C63610 * C21035 + C141506 * C21038 + C63612 * C21036 +
                       C141492 * C21039 + C63614 * C21037 + C63606 * C21040) *
                          C188 +
                      (C63610 * C21136 + C141506 * C21308 + C63612 * C21137 +
                       C141492 * C21309 + C63614 * C21138 + C63606 * C21310) *
                          C141327) *
                         C141365) *
                        C5324) *
                   C141281 * C141247) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[89] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C141506 +
            C448 * C141492 + C449 * C63606) *
               C89302 +
           (C91570 + C91571 + C91572) * C141365) *
              C5322 -
          ((C96661 + C96662 + C96663) * C141365 +
           (C91572 + C91571 + C91570) * C89302) *
              C5323 +
          ((C96663 + C96662 + C96661) * C89302 +
           (C50355 * C141506 + C45178 * C141492 +
            (C418 * C21037 + C21413 + C21413 + C141327 * C21405) * C63606) *
               C141365) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[89] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C188 +
            (C89455 * C189 + C89302 * C501 + C89456 * C1690 + C141365 * C2040) *
                C141327) *
               C141506 +
           ((C89482 + C89483) * C188 + (C89731 + C89732) * C141327) * C141492 +
           C89739 * C63606) *
              C5322 -
          (((C91682 + C91683) * C141327 + (C91332 + C91333) * C188) * C63606 +
           ((C91684 + C91685) * C141327 + (C91336 + C91337) * C188) * C141492 +
           ((C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
             C89302 * C2040) *
                C141327 +
            (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
             C89302 * C1784) *
                C188) *
               C141506) *
              C5323 +
          (((C89455 * C5325 + C89302 * C5449 + C89456 * C21035 +
             C141365 * C21228) *
                C188 +
            (C89455 * C5391 + C89302 * C5619 + C89456 * C21136 +
             C141365 * C21491) *
                C141327) *
               C141506 +
           ((C89455 * C5326 + C89302 * C5450 + C89456 * C21036 +
             C141365 * C21229) *
                C188 +
            (C89455 * C5392 + C89302 * C5620 + C89456 * C21137 +
             C141365 * C21492) *
                C141327) *
               C141492 +
           ((C89455 * C5327 + C89302 * C5451 + C89456 * C21037 +
             C141365 * C21230) *
                C188 +
            (C89455 * C5393 + C89302 * C5621 + C89456 * C21138 +
             C141365 * C21493) *
                C141327) *
               C63606) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[89] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63610 * C108 + C141506 * C114 + C63612 * C109 +
                      C141492 * C115 + C63614 * C110 + C63606 * C116) *
                         C89455 +
                     (C63610 * C276 + C141506 * C579 + C63612 * C277 +
                      C141492 * C580 + C63614 * C278 + C63606 * C581) *
                         C89302 +
                     (C91460 + C91461 + C91462) * C89456 +
                     (C91796 + C91797 + C91798) * C141365) *
                        C141327 * C5322 -
                    ((C96818 + C96819 + C96820) * C141365 +
                     (C96584 + C96585 + C96586) * C89456 +
                     (C91798 + C91797 + C91796) * C89302 +
                     (C91462 + C91461 + C91460) * C89455) *
                        C141327 * C5323 +
                    ((C96586 + C96585 + C96584) * C89455 +
                     (C96820 + C96819 + C96818) * C89302 +
                     (C63610 * C21035 + C141506 * C21038 + C63612 * C21036 +
                      C141492 * C21039 + C63614 * C21037 + C63606 * C21040) *
                         C89456 +
                     (C63610 * C21228 + C141506 * C21568 + C63612 * C21229 +
                      C141492 * C21569 + C63614 * C21230 + C63606 * C21570) *
                         C141365) *
                        C141327 * C5324) *
                   C141281 * C141247) /
                  (p * q * std::sqrt(p + q));
    d2eezy[89] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C89455 +
            (C188 * C276 + C141327 * C635) * C89302 + C15877 * C89456 +
            C16596 * C141365) *
               C141506 +
           (C89888 + C89889 + C89890 + C89891) * C141492 + C89902 * C63606) *
              C5322 -
          ((C91900 + C91901 + C91902 + C91903) * C63606 +
           (C91904 + C91905 + C91906 + C91907) * C141492 +
           (C21660 * C141365 + C21152 * C89456 + C16596 * C89302 +
            C15877 * C89455) *
               C141506) *
              C5323 +
          ((C21152 * C89455 + C21660 * C89302 + C50096 * C89456 +
            C50594 * C141365) *
               C141506 +
           (C15882 * C89455 + C16598 * C89302 + C44805 * C89456 +
            C45513 * C141365) *
               C141492 +
           (C15880 * C89455 + C16597 * C89302 +
            (C188 * C21037 + C141327 * C21138) * C89456 +
            (C188 * C21230 + C141327 * C21656) * C141365) *
               C63606) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[89] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C89976 * C108 + C89979 + C89979 + C89302 * C714 +
                      C89977 * C1601 + C89980 + C89980 + C141365 * C2283) *
                         C141327 * C141506 +
                     (C90013 + C90014) * C141327 * C141492 + C90020 * C63606) *
                        C5322 -
                    ((C92030 + C92031) * C141327 * C63606 +
                     (C92032 + C92033) * C141327 * C141492 +
                     (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
                      C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                         C141327 * C141506) *
                        C5323 +
                    ((C89976 * C5325 + C96969 + C96969 + C89302 * C5781 +
                      C89977 * C21035 + C96970 + C96970 + C141365 * C21734) *
                         C141327 * C141506 +
                     (C89976 * C5326 + C96971 + C96971 + C89302 * C5782 +
                      C89977 * C21036 + C96972 + C96972 + C141365 * C21735) *
                         C141327 * C141492 +
                     (C89976 * C5327 + C96973 + C96973 + C89302 * C5783 +
                      C89977 * C21037 + C96974 + C96974 + C141365 * C21736) *
                         C141327 * C63606) *
                        C5324) *
                   C141281 * C141247) /
                  (p * q * std::sqrt(p + q));
    d2eexx[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
             C71453 + C71453 + C141224 * C121) *
                C89302 +
            (C81475 + C81476) * C141365) *
               C141478 +
           ((C72316 + C72317) * C89302 + C84833 * C141365) * C141341) *
              C141298 * C141281 * C97 -
          (((C80230 + C80229) * C141365 + (C72321 + C72320) * C89302) *
               C141341 +
           ((C81478 + C81477) * C141365 +
            (C71449 * C110 + C71462 + C71462 + C141224 * C122 + C71447 * C109 +
             C71463 + C71463 + C71442 * C121) *
                C89302) *
               C141478) *
              C141298 * C141281 * C98 +
          (((C71447 * C110 + C71464 + C71464 + C71442 * C122 + C71449 * C111 +
             C71465 + C71465 + C141224 * C123) *
                C89302 +
            (C71447 * C1599 + C79303 + C79303 + C71442 * C1609 +
             C71449 * C1598 + C79304 + C79304 + C141224 * C1608) *
                C141365) *
               C141478 +
           ((C71447 * C821 + C71466 + C71466 + C71442 * C831 + C71449 * C820 +
             C71467 + C71467 + C141224 * C830) *
                C89302 +
            (C71447 * C3492 + C79305 + C79305 + C71442 * C3500 +
             C71449 * C3493 + C79306 + C79306 + C141224 * C3501) *
                C141365) *
               C141341) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C71448 +
            (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                C71442 +
            (C5993 + C5994) * C71450 + (C5995 + C5996) * C141224) *
               C89302 +
           ((C52532 + C52533) * C71448 + (C52534 + C52535) * C71442 +
            (C7945 + C7944) * C71450 + (C7943 + C7942) * C141224) *
               C141365) *
              C141298 * C141281 * C97 -
          (((C7938 + C7939) * C141224 + (C7940 + C7941) * C71450 +
            (C7942 + C7943) * C71442 + (C7944 + C7945) * C71448) *
               C141365 +
           ((C6000 + C5999) * C141224 + (C5998 + C5997) * C71450 +
            (C5996 + C5995) * C71442 + (C5994 + C5993) * C71448) *
               C89302) *
              C141298 * C141281 * C98 +
          ((C6005 * C71448 + C6006 * C71442 + (C6004 + C6003) * C71450 +
            (C6002 + C6001) * C141224) *
               C89302 +
           ((C7941 + C7940) * C71448 + (C7939 + C7938) * C71442 +
            (C5966 * C1598 + C141478 * C1687 + C5967 * C3493 +
             C141341 * C3575) *
                C71450 +
            (C5966 * C1603 + C141478 * C1692 + C5967 * C3497 +
             C141341 * C3579) *
                C141224) *
               C141365) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C71448 +
            (C89455 * C114 + C89302 * C282 + C89456 * C1606 + C141365 * C1789) *
                C71442 +
            (C89482 + C89483) * C71450 + (C89484 + C89485) * C141224) *
               C141478 +
           ((C89455 * C823 + C89302 * C1006 + C89456 * C3490 +
             C141365 * C3646) *
                C71448 +
            (C89455 * C828 + C89302 * C1011 + C89456 * C3494 +
             C141365 * C3650) *
                C71442 +
            (C90338 + C90337) * C71450 + (C90336 + C90335) * C141224) *
               C141341) *
              C141298 * C141281 * C97 -
          (((C90331 + C90332) * C141224 + (C90333 + C90334) * C71450 +
            (C90335 + C90336) * C71442 + (C90337 + C90338) * C71448) *
               C141341 +
           ((C89489 + C89488) * C141224 + (C89487 + C89486) * C71450 +
            (C89485 + C89484) * C71442 + (C89483 + C89482) * C71448) *
               C141478) *
              C141298 * C141281 * C98 +
          ((C89494 * C71448 + C89495 * C71442 + (C89493 + C89492) * C71450 +
            (C89491 + C89490) * C141224) *
               C141478 +
           ((C90334 + C90333) * C71448 + (C90332 + C90331) * C71442 +
            (C89455 * C820 + C89302 * C1003 + C89456 * C3493 +
             C141365 * C3649) *
                C71450 +
            (C89455 * C825 + C89302 * C1008 + C89456 * C3497 +
             C141365 * C3653) *
                C141224) *
               C141341) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C5966 +
            (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                C141478 +
            (C72684 + C72685) * C5967 + (C72686 + C72687) * C141341) *
               C89302 +
           ((C81925 + C81926) * C5966 + (C81927 + C81928) * C141478 +
            C85247 * C5967 + C85248 * C141341) *
               C141365) *
              C141298 * C141281 * C97 -
          (((C80648 + C80647) * C141341 + (C80646 + C80645) * C5967 +
            (C81932 + C81931) * C141478 + (C81930 + C81929) * C5966) *
               C141365 +
           ((C72695 + C72694) * C141341 + (C72693 + C72692) * C5967 +
            (C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                C141478 +
            (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                C5966) *
               C89302) *
              C141298 * C141281 * C98 +
          (((C71448 * C110 + C71442 * C116 + C71450 * C111 + C141224 * C117) *
                C5966 +
            (C71448 * C191 + C71442 * C364 + C71450 * C192 + C141224 * C365) *
                C141478 +
            (C71448 * C821 + C71442 * C826 + C71450 * C820 + C141224 * C825) *
                C5967 +
            (C71448 * C910 + C71442 * C1098 + C71450 * C909 + C141224 * C1097) *
                C141341) *
               C89302 +
           ((C71448 * C1599 + C71442 * C1604 + C71450 * C1598 +
             C141224 * C1603) *
                C5966 +
            (C71448 * C1688 + C71442 * C1876 + C71450 * C1687 +
             C141224 * C1875) *
                C141478 +
            (C71448 * C3492 + C71442 * C3496 + C71450 * C3493 +
             C141224 * C3497) *
                C5967 +
            (C71448 * C3574 + C71442 * C3722 + C71450 * C3575 +
             C141224 * C3723) *
                C141341) *
               C141365) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 + C6229 * C823 +
             C6232 + C6232 + C141341 * C1171) *
                C71442 +
            (C6265 + C6266) * C141224) *
               C89302 +
           ((C52888 + C52889) * C71442 + (C8279 + C8278) * C141224) * C141365) *
              C141298 * C141281 * C97 -
          (((C8276 + C8277) * C141224 + (C8278 + C8279) * C71442) * C141365 +
           ((C6268 + C6267) * C141224 + (C6266 + C6265) * C71442) * C89302) *
              C141298 * C141281 * C98 +
          ((C6271 * C71442 + (C6270 + C6269) * C141224) * C89302 +
           ((C8277 + C8276) * C71442 +
            (C6228 * C1598 + C8266 + C8266 + C141478 * C1946 + C6229 * C3493 +
             C8267 + C8267 + C141341 * C3793) *
                C141224) *
               C141365) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C5966 +
            (C89455 * C189 + C89302 * C501 + C89456 * C1690 + C141365 * C2040) *
                C141478 +
            (C89455 * C823 + C89302 * C1006 + C89456 * C3490 +
             C141365 * C3646) *
                C5967 +
            (C89455 * C912 + C89302 * C1262 + C89456 * C3572 +
             C141365 * C3864) *
                C141341) *
               C71442 +
           ((C89482 + C89483) * C5966 + (C89731 + C89732) * C141478 +
            (C90338 + C90337) * C5967 + (C90644 + C90643) * C141341) *
               C141224) *
              C141298 * C141281 * C97 -
          (((C90641 + C90642) * C141341 + (C90333 + C90334) * C5967 +
            (C89734 + C89733) * C141478 + (C89487 + C89486) * C5966) *
               C141224 +
           ((C90643 + C90644) * C141341 + (C90337 + C90338) * C5967 +
            (C89732 + C89731) * C141478 + (C89483 + C89482) * C5966) *
               C71442) *
              C141298 * C141281 * C98 +
          ((C89494 * C5966 + C89737 * C141478 + (C90334 + C90333) * C5967 +
            (C90642 + C90641) * C141341) *
               C71442 +
           ((C89493 + C89492) * C5966 + (C89736 + C89735) * C141478 +
            (C89455 * C820 + C89302 * C1003 + C89456 * C3493 +
             C141365 * C3649) *
                C5967 +
            (C89455 * C909 + C89302 * C1259 + C89456 * C3575 +
             C141365 * C3867) *
                C141341) *
               C141224) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezx[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C89455 +
            (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                C89302 +
            (C81925 + C81926) * C89456 + (C82359 + C82360) * C141365) *
               C141478 +
           ((C72684 + C72685) * C89455 + (C73040 + C73041) * C89302 +
            C85247 * C89456 + C85667 * C141365) *
               C141341) *
              C141298 * C141281 * C97 -
          (((C81056 + C81055) * C141365 + (C80646 + C80645) * C89456 +
            (C73045 + C73044) * C89302 + (C72693 + C72692) * C89455) *
               C141341 +
           ((C82362 + C82361) * C141365 + (C81930 + C81929) * C89456 +
            (C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                C89302 +
            (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                C89455) *
               C141478) *
              C141298 * C141281 * C98 +
          (((C71448 * C110 + C71442 * C116 + C71450 * C111 + C141224 * C117) *
                C89455 +
            (C71448 * C278 + C71442 * C581 + C71450 * C279 + C141224 * C582) *
                C89302 +
            (C71448 * C1599 + C71442 * C1604 + C71450 * C1598 +
             C141224 * C1603) *
                C89456 +
            (C71448 * C1782 + C71442 * C2124 + C71450 * C1781 +
             C141224 * C2123) *
                C141365) *
               C141478 +
           ((C71448 * C821 + C71442 * C826 + C71450 * C820 + C141224 * C825) *
                C89455 +
            (C71448 * C1004 + C71442 * C1346 + C71450 * C1003 +
             C141224 * C1345) *
                C89302 +
            (C71448 * C3492 + C71442 * C3496 + C71450 * C3493 +
             C141224 * C3497) *
                C89456 +
            (C71448 * C3648 + C71442 * C3936 + C71450 * C3649 +
             C141224 * C3937) *
                C141365) *
               C141341) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezy[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C89455 +
            (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                C89302 +
            (C52532 + C52533) * C89456 + (C53203 + C53204) * C141365) *
               C71442 +
           ((C5993 + C5994) * C89455 + (C6522 + C6523) * C89302 +
            (C7945 + C7944) * C89456 + (C8599 + C8598) * C141365) *
               C141224) *
              C141298 * C141281 * C97 -
          (((C8596 + C8597) * C141365 + (C7940 + C7941) * C89456 +
            (C6525 + C6524) * C89302 + (C5998 + C5997) * C89455) *
               C141224 +
           ((C8598 + C8599) * C141365 + (C7944 + C7945) * C89456 +
            (C6523 + C6522) * C89302 + (C5994 + C5993) * C89455) *
               C71442) *
              C141298 * C141281 * C98 +
          ((C6005 * C89455 + C6528 * C89302 + (C7941 + C7940) * C89456 +
            (C8597 + C8596) * C141365) *
               C71442 +
           ((C6004 + C6003) * C89455 + (C6527 + C6526) * C89302 +
            (C5966 * C1598 + C141478 * C1687 + C5967 * C3493 +
             C141341 * C3575) *
                C89456 +
            (C5966 * C1781 + C141478 * C2194 + C5967 * C3649 +
             C141341 * C4007) *
                C141365) *
               C141224) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
             C89980 + C89980 + C141365 * C2283) *
                C141478 +
            (C89976 * C823 + C90960 + C90960 + C89302 * C1505 + C89977 * C3490 +
             C90959 + C90959 + C141365 * C4074) *
                C141341) *
               C71442 +
           ((C90013 + C90014) * C141478 + (C90974 + C90973) * C141341) *
               C141224) *
              C141298 * C141281 * C97 -
          (((C90971 + C90972) * C141341 + (C90016 + C90015) * C141478) *
               C141224 +
           ((C90973 + C90974) * C141341 + (C90014 + C90013) * C141478) *
               C71442) *
              C141298 * C141281 * C98 +
          ((C90019 * C141478 + (C90972 + C90971) * C141341) * C71442 +
           ((C90018 + C90017) * C141478 +
            (C89976 * C820 + C90961 + C90961 + C89302 * C1502 + C89977 * C3493 +
             C90962 + C90962 + C141365 * C4077) *
                C141341) *
               C141224) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexx[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
              C71453 + C71453 + C141224 * C121) *
                 C89302 +
             (C81475 + C81476) * C141365) *
                C141478 +
            ((C72316 + C72317) * C89302 + C84833 * C141365) * C141341) *
               C141298 * C816 -
           (((C75925 + C75926) * C141365 + (C72319 + C72318) * C89302) *
                C141341 +
            (C84838 * C141365 + (C72317 + C72316) * C89302) * C141478) *
               C141298 * C141497) *
              C818 +
          ((((C72320 + C72321) * C89302 + (C80229 + C80230) * C141365) *
                C141478 +
            ((C72322 + C72323) * C89302 +
             (C71447 * C10471 + C73364 + C73364 + C71442 * C10477 +
              C71449 * C10472 + C73365 + C73365 + C141224 * C10478) *
                 C141365) *
                C141341) *
               C141298 * C141497 -
           (((C80230 + C80229) * C141365 + (C72321 + C72320) * C89302) *
                C141341 +
            ((C81478 + C81477) * C141365 +
             (C71449 * C110 + C71462 + C71462 + C141224 * C122 + C71447 * C109 +
              C71463 + C71463 + C71442 * C121) *
                 C89302) *
                C141478) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C71448 +
             (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                 C71442 +
             (C5993 + C5994) * C71450 + (C5995 + C5996) * C141224) *
                C89302 +
            ((C52532 + C52533) * C71448 + (C52534 + C52535) * C71442 +
             (C7945 + C7944) * C71450 + (C7943 + C7942) * C141224) *
                C141365) *
               C141298 * C816 -
           (((C98125 + C98126) * C141224 + (C98127 + C98128) * C71450 +
             (C55136 + C55135) * C71442 + (C55134 + C55133) * C71448) *
                C141365 +
            ((C6864 + C6865) * C141224 + (C6866 + C6867) * C71450 +
             (C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
                 C71442 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C71448) *
                C89302) *
               C141298 * C141497) *
              C818 +
          ((((C6867 + C6866) * C71448 + (C6865 + C6864) * C71442 +
             (C6863 + C6862) * C71450 + (C6861 + C6860) * C141224) *
                C89302 +
            ((C98128 + C98127) * C71448 + (C98126 + C98125) * C71442 +
             (C5966 * C3492 + C141478 * C3574 + C5967 * C10472 +
              C141341 * C10597) *
                 C71450 +
             (C5966 * C3496 + C141478 * C3578 + C5967 * C10475 +
              C141341 * C10600) *
                 C141224) *
                C141365) *
               C141298 * C141497 -
           (((C7938 + C7939) * C141224 + (C7940 + C7941) * C71450 +
             (C7942 + C7943) * C71442 + (C7944 + C7945) * C71448) *
                C141365 +
            ((C6000 + C5999) * C141224 + (C5998 + C5997) * C71450 +
             (C5996 + C5995) * C71442 + (C5994 + C5993) * C71448) *
                C89302) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C71448 +
             (C89455 * C114 + C89302 * C282 + C89456 * C1606 +
              C141365 * C1789) *
                 C71442 +
             (C89482 + C89483) * C71450 + (C89484 + C89485) * C141224) *
                C141478 +
            ((C98279 + C98280) * C71448 + (C98281 + C98282) * C71442 +
             C98267 * C71450 + C98268 * C141224) *
                C141341) *
               C141298 * C816 -
           (((C98283 + C98284) * C141224 + (C98285 + C98286) * C71450 +
             (C89456 * C10473 + C141365 * C10702 + C89455 * C2964 +
              C89302 * C3088) *
                 C71442 +
             (C89456 * C10470 + C141365 * C10699 + C89455 * C2960 +
              C89302 * C3084) *
                 C71448) *
                C141341 +
            (C98277 * C141224 + C98278 * C71450 + (C98282 + C98281) * C71442 +
             (C98280 + C98279) * C71448) *
                C141478) *
               C141298 * C141497) *
              C818 +
          (((C98267 * C71448 + C98268 * C71442 + (C90334 + C90333) * C71450 +
             (C90332 + C90331) * C141224) *
                C141478 +
            ((C98286 + C98285) * C71448 + (C98284 + C98283) * C71442 +
             (C89455 * C2962 + C89302 * C3086 + C89456 * C10472 +
              C141365 * C10701) *
                 C71450 +
             (C89455 * C2966 + C89302 * C3090 + C89456 * C10475 +
              C141365 * C10704) *
                 C141224) *
                C141341) *
               C141298 * C141497 -
           (((C90331 + C90332) * C141224 + (C90333 + C90334) * C71450 +
             C98277 * C71442 + C98278 * C71448) *
                C141341 +
            ((C89489 + C89488) * C141224 + (C89487 + C89486) * C71450 +
             (C89485 + C89484) * C71442 + (C89483 + C89482) * C71448) *
                C141478) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C5966 +
             (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                 C141478 +
             (C72684 + C72685) * C5967 + (C72686 + C72687) * C141341) *
                C89302 +
            ((C81925 + C81926) * C5966 + (C81927 + C81928) * C141478 +
             C85247 * C5967 + C85248 * C141341) *
                C141365) *
               C141298 * C816 -
           (((C76247 + C76248) * C141341 + (C76249 + C76250) * C5967 +
             C85257 * C141478 + C85258 * C5966) *
                C141365 +
            ((C72691 + C72690) * C141341 + (C72689 + C72688) * C5967 +
             (C72687 + C72686) * C141478 + (C72685 + C72684) * C5966) *
                C89302) *
               C141298 * C141497) *
              C818 +
          ((((C72692 + C72693) * C5966 + (C72694 + C72695) * C141478 +
             (C72696 + C72697) * C5967 + (C72698 + C72699) * C141341) *
                C89302 +
            ((C80645 + C80646) * C5966 + (C80647 + C80648) * C141478 +
             (C71448 * C10471 + C71442 * C10474 + C71450 * C10472 +
              C141224 * C10475) *
                 C5967 +
             (C71448 * C10596 + C71442 * C10816 + C71450 * C10597 +
              C141224 * C10817) *
                 C141341) *
                C141365) *
               C141298 * C141497 -
           (((C80648 + C80647) * C141341 + (C80646 + C80645) * C5967 +
             (C81932 + C81931) * C141478 + (C81930 + C81929) * C5966) *
                C141365 +
            ((C72695 + C72694) * C141341 + (C72693 + C72692) * C5967 +
             (C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                 C141478 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C5966) *
                C89302) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C6228 * C108 + C6231 + C6231 + C141478 * C419 + C6229 * C823 +
              C6232 + C6232 + C141341 * C1171) *
                 C71442 +
             (C6265 + C6266) * C141224) *
                C89302 +
            ((C52888 + C52889) * C71442 + (C8279 + C8278) * C141224) *
                C141365) *
               C141298 * C816 -
           (((C98555 + C98556) * C141224 + (C55486 + C55485) * C71442) *
                C141365 +
            ((C7254 + C7255) * C141224 +
             (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 + C6228 * C823 +
              C7241 + C7241 + C141478 * C1171) *
                 C71442) *
                C89302) *
               C141298 * C141497) *
              C818 +
          ((((C7255 + C7254) * C71442 + (C7253 + C7252) * C141224) * C89302 +
            ((C98556 + C98555) * C71442 +
             (C6228 * C3492 + C10942 + C10942 + C141478 * C3792 +
              C6229 * C10472 + C10943 + C10943 + C141341 * C10936) *
                 C141224) *
                C141365) *
               C141298 * C141497 -
           (((C8276 + C8277) * C141224 + (C8278 + C8279) * C71442) * C141365 +
            ((C6268 + C6267) * C141224 + (C6266 + C6265) * C71442) * C89302) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C5966 +
             (C89455 * C189 + C89302 * C501 + C89456 * C1690 +
              C141365 * C2040) *
                 C141478 +
             (C98279 + C98280) * C5967 + (C98697 + C98698) * C141341) *
                C71442 +
            ((C89482 + C89483) * C5966 + (C89731 + C89732) * C141478 +
             C98267 * C5967 + C98691 * C141341) *
                C141224) *
               C141298 * C816 -
           (((C98699 + C98700) * C141341 + (C98285 + C98286) * C5967 +
             C98696 * C141478 + C98278 * C5966) *
                C141224 +
            ((C89456 * C10595 + C141365 * C11041 + C89455 * C3026 +
              C89302 * C3254) *
                 C141341 +
             (C89456 * C10470 + C141365 * C10699 + C89455 * C2960 +
              C89302 * C3084) *
                 C5967 +
             (C98698 + C98697) * C141478 + (C98280 + C98279) * C5966) *
                C71442) *
               C141298 * C141497) *
              C818 +
          (((C98267 * C5966 + C98691 * C141478 + (C98286 + C98285) * C5967 +
             (C98700 + C98699) * C141341) *
                C71442 +
            ((C90334 + C90333) * C5966 + (C90642 + C90641) * C141478 +
             (C89455 * C2962 + C89302 * C3086 + C89456 * C10472 +
              C141365 * C10701) *
                 C5967 +
             (C89455 * C3028 + C89302 * C3256 + C89456 * C10597 +
              C141365 * C11043) *
                 C141341) *
                C141224) *
               C141298 * C141497 -
           (((C90641 + C90642) * C141341 + (C90333 + C90334) * C5967 +
             (C89734 + C89733) * C141478 + (C89487 + C89486) * C5966) *
                C141224 +
            (C98696 * C141341 + C98278 * C5967 + (C89732 + C89731) * C141478 +
             (C89483 + C89482) * C5966) *
                C71442) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C89455 +
             (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                 C89302 +
             (C81925 + C81926) * C89456 + (C82359 + C82360) * C141365) *
                C141478 +
            ((C72684 + C72685) * C89455 + (C73040 + C73041) * C89302 +
             C85247 * C89456 + C85667 * C141365) *
                C141341) *
               C141298 * C816 -
           (((C76563 + C76564) * C141365 + (C76249 + C76250) * C89456 +
             (C73043 + C73042) * C89302 + (C72689 + C72688) * C89455) *
                C141341 +
            (C85672 * C141365 + C85258 * C89456 + (C73041 + C73040) * C89302 +
             (C72685 + C72684) * C89455) *
                C141478) *
               C141298 * C141497) *
              C818 +
          ((((C72692 + C72693) * C89455 + (C73044 + C73045) * C89302 +
             (C80645 + C80646) * C89456 + (C81055 + C81056) * C141365) *
                C141478 +
            ((C72696 + C72697) * C89455 + (C73046 + C73047) * C89302 +
             (C71448 * C10471 + C71442 * C10474 + C71450 * C10472 +
              C141224 * C10475) *
                 C89456 +
             (C71448 * C10700 + C71442 * C11146 + C71450 * C10701 +
              C141224 * C11147) *
                 C141365) *
                C141341) *
               C141298 * C141497 -
           (((C81056 + C81055) * C141365 + (C80646 + C80645) * C89456 +
             (C73045 + C73044) * C89302 + (C72693 + C72692) * C89455) *
                C141341 +
            ((C82362 + C82361) * C141365 + (C81930 + C81929) * C89456 +
             (C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                 C89302 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C89455) *
                C141478) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C89455 +
             (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                 C89302 +
             (C52532 + C52533) * C89456 + (C53203 + C53204) * C141365) *
                C71442 +
            ((C5993 + C5994) * C89455 + (C6522 + C6523) * C89302 +
             (C7945 + C7944) * C89456 + (C8599 + C8598) * C141365) *
                C141224) *
               C141298 * C816 -
           (((C98965 + C98966) * C141365 + (C98127 + C98128) * C89456 +
             (C7595 + C7596) * C89302 + (C6866 + C6867) * C89455) *
                C141224 +
            ((C55810 + C55809) * C141365 + (C55134 + C55133) * C89456 +
             (C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
              C141478 * C1419) *
                 C89302 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C89455) *
                C71442) *
               C141298 * C141497) *
              C818 +
          ((((C6867 + C6866) * C89455 + (C7596 + C7595) * C89302 +
             (C98128 + C98127) * C89456 + (C98966 + C98965) * C141365) *
                C71442 +
            ((C6863 + C6862) * C89455 + (C7594 + C7593) * C89302 +
             (C5966 * C3492 + C141478 * C3574 + C5967 * C10472 +
              C141341 * C10597) *
                 C89456 +
             (C5966 * C3648 + C141478 * C4006 + C5967 * C10701 +
              C141341 * C11257) *
                 C141365) *
                C141224) *
               C141298 * C141497 -
           (((C8596 + C8597) * C141365 + (C7940 + C7941) * C89456 +
             (C6525 + C6524) * C89302 + (C5998 + C5997) * C89455) *
                C141224 +
            ((C8598 + C8599) * C141365 + (C7944 + C7945) * C89456 +
             (C6523 + C6522) * C89302 + (C5994 + C5993) * C89455) *
                C71442) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
              C89980 + C89980 + C141365 * C2283) *
                 C141478 +
             (C99115 + C99116) * C141341) *
                C71442 +
            ((C90013 + C90014) * C141478 + C99101 * C141341) * C141224) *
               C141298 * C816 -
           (((C99117 + C99118) * C141341 + C99106 * C141478) * C141224 +
            ((C89977 * C10470 + C93583 + C93583 + C141365 * C11356 +
              C89976 * C2960 + C93582 + C93582 + C89302 * C3416) *
                 C141341 +
             (C99116 + C99115) * C141478) *
                C71442) *
               C141298 * C141497) *
              C818 +
          (((C99101 * C141478 + (C99118 + C99117) * C141341) * C71442 +
            ((C90972 + C90971) * C141478 +
             (C89976 * C2962 + C93586 + C93586 + C89302 * C3418 +
              C89977 * C10472 + C93587 + C93587 + C141365 * C11358) *
                 C141341) *
                C141224) *
               C141298 * C141497 -
           (((C90971 + C90972) * C141341 + (C90016 + C90015) * C141478) *
                C141224 +
            (C99106 * C141341 + (C90014 + C90013) * C141478) * C71442) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
              C71453 + C71453 + C141224 * C121) *
                 C89302 +
             (C81475 + C81476) * C141365) *
                C141478 +
            ((C72316 + C72317) * C89302 + C84833 * C141365) * C141341) *
               C1596 -
           (((C84843 + C84844) * C141365 + C84838 * C89302) * C141341 +
            ((C88391 + C88392) * C141365 + (C81476 + C81475) * C89302) *
                C141478) *
               C141499) *
              C141281 * C818 +
          ((((C81477 + C81478) * C89302 +
             (C71447 * C5326 + C81463 + C81463 + C71442 * C5334 +
              C71449 * C5327 + C81464 + C81464 + C141224 * C5335) *
                 C141365) *
                C141478 +
            ((C80229 + C80230) * C89302 +
             (C71447 * C13206 + C81465 + C81465 + C71442 * C13212 +
              C71449 * C13207 + C81466 + C81466 + C141224 * C13213) *
                 C141365) *
                C141341) *
               C141499 -
           (((C80230 + C80229) * C141365 + (C72321 + C72320) * C89302) *
                C141341 +
            ((C81478 + C81477) * C141365 +
             (C71449 * C110 + C71462 + C71462 + C141224 * C122 + C71447 * C109 +
              C71463 + C71463 + C71442 * C121) *
                 C89302) *
                C141478) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C71448 +
             (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                 C71442 +
             (C5993 + C5994) * C71450 + (C5995 + C5996) * C141224) *
                C89302 +
            ((C52532 + C52533) * C71448 + (C52534 + C52535) * C71442 +
             C99379 * C71450 + C99380 * C141224) *
                C141365) *
               C1596 -
           (((C52543 + C52542) * C141224 + (C52541 + C52540) * C71450 +
             (C52539 + C52538) * C71442 + (C52537 + C52536) * C71448) *
                C141365 +
            (C99381 * C141224 + C99382 * C71450 + (C52535 + C52534) * C71442 +
             (C52533 + C52532) * C71448) *
                C89302) *
               C141499) *
              C141281 * C818 +
          (((C99379 * C71448 + C99380 * C71442 + (C7941 + C7940) * C71450 +
             (C7939 + C7938) * C141224) *
                C89302 +
            ((C52540 + C52541) * C71448 + (C52542 + C52543) * C71442 +
             (C5966 * C5327 + C141478 * C5393 + C5967 * C13207 +
              C141341 * C13296) *
                 C71450 +
             (C5966 * C5331 + C141478 * C5397 + C5967 * C13210 +
              C141341 * C13299) *
                 C141224) *
                C141365) *
               C141499 -
           (((C7938 + C7939) * C141224 + (C7940 + C7941) * C71450 +
             C99381 * C71442 + C99382 * C71448) *
                C141365 +
            ((C6000 + C5999) * C141224 + (C5998 + C5997) * C71450 +
             (C5996 + C5995) * C71442 + (C5994 + C5993) * C71448) *
                C89302) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C71448 +
             (C89455 * C114 + C89302 * C282 + C89456 * C1606 +
              C141365 * C1789) *
                 C71442 +
             (C89482 + C89483) * C71450 + (C89484 + C89485) * C141224) *
                C141478 +
            ((C98279 + C98280) * C71448 + (C98281 + C98282) * C71442 +
             C98267 * C71450 + C98268 * C141224) *
                C141341) *
               C1596 -
           (((C99521 + C99522) * C141224 + (C99523 + C99524) * C71450 +
             (C89456 * C13208 + C141365 * C13377 + C89455 * C3494 +
              C89302 * C3650) *
                 C71442 +
             (C89456 * C13205 + C141365 * C13374 + C89455 * C3490 +
              C89302 * C3646) *
                 C71448) *
                C141341 +
            ((C91334 + C91335) * C141224 + (C91336 + C91337) * C71450 +
             (C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
              C89302 * C1789) *
                 C71442 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C71448) *
                C141478) *
               C141499) *
              C141281 * C818 +
          ((((C91337 + C91336) * C71448 + (C91335 + C91334) * C71442 +
             (C91333 + C91332) * C71450 + (C91331 + C91330) * C141224) *
                C141478 +
            ((C99524 + C99523) * C71448 + (C99522 + C99521) * C71442 +
             (C89455 * C3492 + C89302 * C3648 + C89456 * C13207 +
              C141365 * C13376) *
                 C71450 +
             (C89455 * C3496 + C89302 * C3652 + C89456 * C13210 +
              C141365 * C13379) *
                 C141224) *
                C141341) *
               C141499 -
           (((C90331 + C90332) * C141224 + (C90333 + C90334) * C71450 +
             C98277 * C71442 + C98278 * C71448) *
                C141341 +
            ((C89489 + C89488) * C141224 + (C89487 + C89486) * C71450 +
             (C89485 + C89484) * C71442 + (C89483 + C89482) * C71448) *
                C141478) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C5966 +
             (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                 C141478 +
             (C72684 + C72685) * C5967 + (C72686 + C72687) * C141341) *
                C89302 +
            ((C81925 + C81926) * C5966 + (C81927 + C81928) * C141478 +
             C85247 * C5967 + C85248 * C141341) *
                C141365) *
               C1596 -
           (((C85259 + C85260) * C141341 + (C85261 + C85262) * C5967 +
             (C88707 + C88708) * C141478 + (C88709 + C88710) * C5966) *
                C141365 +
            (C85257 * C141341 + C85258 * C5967 + (C81928 + C81927) * C141478 +
             (C81926 + C81925) * C5966) *
                C89302) *
               C141499) *
              C141281 * C818 +
          ((((C81929 + C81930) * C5966 + (C81931 + C81932) * C141478 +
             (C80645 + C80646) * C5967 + (C80647 + C80648) * C141341) *
                C89302 +
            ((C71448 * C5326 + C71442 * C5330 + C71450 * C5327 +
              C141224 * C5331) *
                 C5966 +
             (C71448 * C5392 + C71442 * C5508 + C71450 * C5393 +
              C141224 * C5509) *
                 C141478 +
             (C71448 * C13206 + C71442 * C13209 + C71450 * C13207 +
              C141224 * C13210) *
                 C5967 +
             (C71448 * C13295 + C71442 * C13455 + C71450 * C13296 +
              C141224 * C13456) *
                 C141341) *
                C141365) *
               C141499 -
           (((C80648 + C80647) * C141341 + (C80646 + C80645) * C5967 +
             (C81932 + C81931) * C141478 + (C81930 + C81929) * C5966) *
                C141365 +
            ((C72695 + C72694) * C141341 + (C72693 + C72692) * C5967 +
             (C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                 C141478 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C5966) *
                C89302) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C6228 * C108 + C6231 + C6231 + C141478 * C419 + C6229 * C823 +
              C6232 + C6232 + C141341 * C1171) *
                 C71442 +
             (C6265 + C6266) * C141224) *
                C89302 +
            ((C52888 + C52889) * C71442 + C99785 * C141224) * C141365) *
               C1596 -
           (((C52893 + C52892) * C141224 + (C52891 + C52890) * C71442) *
                C141365 +
            (C99786 * C141224 + (C52889 + C52888) * C71442) * C89302) *
               C141499) *
              C141281 * C818 +
          (((C99785 * C71442 + (C8277 + C8276) * C141224) * C89302 +
            ((C52892 + C52893) * C71442 +
             (C6228 * C5327 + C13539 + C13539 + C141478 * C5563 +
              C6229 * C13207 + C13540 + C13540 + C141341 * C13533) *
                 C141224) *
                C141365) *
               C141499 -
           (((C8276 + C8277) * C141224 + C99786 * C71442) * C141365 +
            ((C6268 + C6267) * C141224 + (C6266 + C6265) * C71442) * C89302) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C5966 +
             (C89455 * C189 + C89302 * C501 + C89456 * C1690 +
              C141365 * C2040) *
                 C141478 +
             (C98279 + C98280) * C5967 + (C98697 + C98698) * C141341) *
                C71442 +
            ((C89482 + C89483) * C5966 + (C89731 + C89732) * C141478 +
             C98267 * C5967 + C98691 * C141341) *
                C141224) *
               C1596 -
           (((C99921 + C99922) * C141341 + (C99523 + C99524) * C5967 +
             (C91684 + C91685) * C141478 + (C91336 + C91337) * C5966) *
                C141224 +
            ((C89456 * C13294 + C141365 * C13614 + C89455 * C3572 +
              C89302 * C3864) *
                 C141341 +
             (C89456 * C13205 + C141365 * C13374 + C89455 * C3490 +
              C89302 * C3646) *
                 C5967 +
             (C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
              C89302 * C2040) *
                 C141478 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C5966) *
                C71442) *
               C141499) *
              C141281 * C818 +
          ((((C91337 + C91336) * C5966 + (C91685 + C91684) * C141478 +
             (C99524 + C99523) * C5967 + (C99922 + C99921) * C141341) *
                C71442 +
            ((C91333 + C91332) * C5966 + (C91683 + C91682) * C141478 +
             (C89455 * C3492 + C89302 * C3648 + C89456 * C13207 +
              C141365 * C13376) *
                 C5967 +
             (C89455 * C3574 + C89302 * C3866 + C89456 * C13296 +
              C141365 * C13616) *
                 C141341) *
                C141224) *
               C141499 -
           (((C90641 + C90642) * C141341 + (C90333 + C90334) * C5967 +
             (C89734 + C89733) * C141478 + (C89487 + C89486) * C5966) *
                C141224 +
            (C98696 * C141341 + C98278 * C5967 + (C89732 + C89731) * C141478 +
             (C89483 + C89482) * C5966) *
                C71442) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C89455 +
             (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                 C89302 +
             (C81925 + C81926) * C89456 + (C82359 + C82360) * C141365) *
                C141478 +
            ((C72684 + C72685) * C89455 + (C73040 + C73041) * C89302 +
             C85247 * C89456 + C85667 * C141365) *
                C141341) *
               C1596 -
           (((C85673 + C85674) * C141365 + (C85261 + C85262) * C89456 +
             C85672 * C89302 + C85258 * C89455) *
                C141341 +
            ((C89023 + C89024) * C141365 + (C88709 + C88710) * C89456 +
             (C82360 + C82359) * C89302 + (C81926 + C81925) * C89455) *
                C141478) *
               C141499) *
              C141281 * C818 +
          ((((C81929 + C81930) * C89455 + (C82361 + C82362) * C89302 +
             (C71448 * C5326 + C71442 * C5330 + C71450 * C5327 +
              C141224 * C5331) *
                 C89456 +
             (C71448 * C5450 + C71442 * C5674 + C71450 * C5451 +
              C141224 * C5675) *
                 C141365) *
                C141478 +
            ((C80645 + C80646) * C89455 + (C81055 + C81056) * C89302 +
             (C71448 * C13206 + C71442 * C13209 + C71450 * C13207 +
              C141224 * C13210) *
                 C89456 +
             (C71448 * C13375 + C71442 * C13692 + C71450 * C13376 +
              C141224 * C13693) *
                 C141365) *
                C141341) *
               C141499 -
           (((C81056 + C81055) * C141365 + (C80646 + C80645) * C89456 +
             (C73045 + C73044) * C89302 + (C72693 + C72692) * C89455) *
                C141341 +
            ((C82362 + C82361) * C141365 + (C81930 + C81929) * C89456 +
             (C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                 C89302 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C89455) *
                C141478) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C89455 +
             (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                 C89302 +
             (C52532 + C52533) * C89456 + (C53203 + C53204) * C141365) *
                C71442 +
            ((C5993 + C5994) * C89455 + (C6522 + C6523) * C89302 +
             C99379 * C89456 + C100183 * C141365) *
                C141224) *
               C1596 -
           (((C53208 + C53207) * C141365 + (C52541 + C52540) * C89456 +
             C100184 * C89302 + C99382 * C89455) *
                C141224 +
            ((C53206 + C53205) * C141365 + (C52537 + C52536) * C89456 +
             (C53204 + C53203) * C89302 + (C52533 + C52532) * C89455) *
                C71442) *
               C141499) *
              C141281 * C818 +
          (((C99379 * C89455 + C100183 * C89302 + (C52540 + C52541) * C89456 +
             (C53207 + C53208) * C141365) *
                C71442 +
            ((C7941 + C7940) * C89455 + (C8597 + C8596) * C89302 +
             (C5966 * C5327 + C141478 * C5393 + C5967 * C13207 +
              C141341 * C13296) *
                 C89456 +
             (C5966 * C5451 + C141478 * C5729 + C5967 * C13376 +
              C141341 * C13770) *
                 C141365) *
                C141224) *
               C141499 -
           (((C8596 + C8597) * C141365 + (C7940 + C7941) * C89456 +
             (C6525 + C6524) * C89302 + (C5998 + C5997) * C89455) *
                C141224 +
            (C100184 * C141365 + C99382 * C89456 + (C6523 + C6522) * C89302 +
             (C5994 + C5993) * C89455) *
                C71442) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
              C89980 + C89980 + C141365 * C2283) *
                 C141478 +
             (C99115 + C99116) * C141341) *
                C71442 +
            ((C90013 + C90014) * C141478 + C99101 * C141341) * C141224) *
               C1596 -
           (((C100323 + C100324) * C141341 + (C92032 + C92033) * C141478) *
                C141224 +
            ((C89977 * C13205 + C94480 + C94480 + C141365 * C13845 +
              C89976 * C3490 + C94479 + C94479 + C89302 * C4074) *
                 C141341 +
             (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
              C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                 C141478) *
                C71442) *
               C141499) *
              C141281 * C818 +
          ((((C92033 + C92032) * C141478 + (C100324 + C100323) * C141341) *
                C71442 +
            ((C92031 + C92030) * C141478 +
             (C89976 * C3492 + C94483 + C94483 + C89302 * C4076 +
              C89977 * C13207 + C94484 + C94484 + C141365 * C13847) *
                 C141341) *
                C141224) *
               C141499 -
           (((C90971 + C90972) * C141341 + (C90016 + C90015) * C141478) *
                C141224 +
            (C99106 * C141341 + (C90014 + C90013) * C141478) * C71442) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
              C71453 + C71453 + C141224 * C121) *
                 C89302 +
             (C81475 + C81476) * C141365) *
                C141478 +
            ((C72316 + C72317) * C89302 + C84833 * C141365) * C141341) *
               C141298 * C2374 -
           (((C75925 + C75926) * C141365 + (C72319 + C72318) * C89302) *
                C141341 +
            (C84838 * C141365 + (C72317 + C72316) * C89302) * C141478) *
               C141298 * C141497) *
              C2376 +
          ((((C72320 + C72321) * C89302 + (C80229 + C80230) * C141365) *
                C141478 +
            ((C72322 + C72323) * C89302 +
             (C71447 * C10471 + C73364 + C73364 + C71442 * C10477 +
              C71449 * C10472 + C73365 + C73365 + C141224 * C10478) *
                 C141365) *
                C141341) *
               C141298 * C141497 -
           (((C80230 + C80229) * C141365 + (C72321 + C72320) * C89302) *
                C141341 +
            ((C81478 + C81477) * C141365 +
             (C71449 * C110 + C71462 + C71462 + C141224 * C122 + C71447 * C109 +
              C71463 + C71463 + C71442 * C121) *
                 C89302) *
                C141478) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C71448 +
             (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                 C71442 +
             (C5993 + C5994) * C71450 + (C5995 + C5996) * C141224) *
                C89302 +
            ((C52532 + C52533) * C71448 + (C52534 + C52535) * C71442 +
             C99379 * C71450 + C99380 * C141224) *
                C141365) *
               C141298 * C2374 -
           (((C98125 + C98126) * C141224 + (C98127 + C98128) * C71450 +
             (C55136 + C55135) * C71442 + (C55134 + C55133) * C71448) *
                C141365 +
            ((C6864 + C6865) * C141224 + (C6866 + C6867) * C71450 +
             (C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
                 C71442 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C71448) *
                C89302) *
               C141298 * C141497) *
              C2376 +
          ((((C6867 + C6866) * C71448 + (C6865 + C6864) * C71442 +
             (C6863 + C6862) * C71450 + (C6861 + C6860) * C141224) *
                C89302 +
            ((C98128 + C98127) * C71448 + (C98126 + C98125) * C71442 +
             (C5966 * C3492 + C141478 * C3574 + C5967 * C10472 +
              C141341 * C10597) *
                 C71450 +
             (C5966 * C3496 + C141478 * C3578 + C5967 * C10475 +
              C141341 * C10600) *
                 C141224) *
                C141365) *
               C141298 * C141497 -
           (((C7938 + C7939) * C141224 + (C7940 + C7941) * C71450 +
             C99381 * C71442 + C99382 * C71448) *
                C141365 +
            ((C6000 + C5999) * C141224 + (C5998 + C5997) * C71450 +
             (C5996 + C5995) * C71442 + (C5994 + C5993) * C71448) *
                C89302) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C71448 +
             (C89455 * C114 + C89302 * C282 + C89456 * C1606 +
              C141365 * C1789) *
                 C71442 +
             (C89482 + C89483) * C71450 + (C89484 + C89485) * C141224) *
                C141478 +
            ((C98279 + C98280) * C71448 + (C98281 + C98282) * C71442 +
             C98267 * C71450 + C98268 * C141224) *
                C141341) *
               C141298 * C2374 -
           (((C98283 + C98284) * C141224 + (C98285 + C98286) * C71450 +
             (C89456 * C10473 + C141365 * C10702 + C89455 * C2964 +
              C89302 * C3088) *
                 C71442 +
             (C89456 * C10470 + C141365 * C10699 + C89455 * C2960 +
              C89302 * C3084) *
                 C71448) *
                C141341 +
            (C98277 * C141224 + C98278 * C71450 + (C98282 + C98281) * C71442 +
             (C98280 + C98279) * C71448) *
                C141478) *
               C141298 * C141497) *
              C2376 +
          (((C98267 * C71448 + C98268 * C71442 + (C90334 + C90333) * C71450 +
             (C90332 + C90331) * C141224) *
                C141478 +
            ((C98286 + C98285) * C71448 + (C98284 + C98283) * C71442 +
             (C89455 * C2962 + C89302 * C3086 + C89456 * C10472 +
              C141365 * C10701) *
                 C71450 +
             (C89455 * C2966 + C89302 * C3090 + C89456 * C10475 +
              C141365 * C10704) *
                 C141224) *
                C141341) *
               C141298 * C141497 -
           (((C90331 + C90332) * C141224 + (C90333 + C90334) * C71450 +
             C98277 * C71442 + C98278 * C71448) *
                C141341 +
            ((C89489 + C89488) * C141224 + (C89487 + C89486) * C71450 +
             (C89485 + C89484) * C71442 + (C89483 + C89482) * C71448) *
                C141478) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C5966 +
             (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                 C141478 +
             (C72684 + C72685) * C5967 + (C72686 + C72687) * C141341) *
                C89302 +
            ((C81925 + C81926) * C5966 + (C81927 + C81928) * C141478 +
             C85247 * C5967 + C85248 * C141341) *
                C141365) *
               C141298 * C2374 -
           (((C76247 + C76248) * C141341 + (C76249 + C76250) * C5967 +
             C85257 * C141478 + C85258 * C5966) *
                C141365 +
            ((C72691 + C72690) * C141341 + (C72689 + C72688) * C5967 +
             (C72687 + C72686) * C141478 + (C72685 + C72684) * C5966) *
                C89302) *
               C141298 * C141497) *
              C2376 +
          ((((C72692 + C72693) * C5966 + (C72694 + C72695) * C141478 +
             (C72696 + C72697) * C5967 + (C72698 + C72699) * C141341) *
                C89302 +
            ((C80645 + C80646) * C5966 + (C80647 + C80648) * C141478 +
             (C71448 * C10471 + C71442 * C10474 + C71450 * C10472 +
              C141224 * C10475) *
                 C5967 +
             (C71448 * C10596 + C71442 * C10816 + C71450 * C10597 +
              C141224 * C10817) *
                 C141341) *
                C141365) *
               C141298 * C141497 -
           (((C80648 + C80647) * C141341 + (C80646 + C80645) * C5967 +
             (C81932 + C81931) * C141478 + (C81930 + C81929) * C5966) *
                C141365 +
            ((C72695 + C72694) * C141341 + (C72693 + C72692) * C5967 +
             (C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                 C141478 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C5966) *
                C89302) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C6228 * C108 + C6231 + C6231 + C141478 * C419 + C6229 * C823 +
              C6232 + C6232 + C141341 * C1171) *
                 C71442 +
             (C6265 + C6266) * C141224) *
                C89302 +
            ((C52888 + C52889) * C71442 + C99785 * C141224) * C141365) *
               C141298 * C2374 -
           (((C98555 + C98556) * C141224 + (C55486 + C55485) * C71442) *
                C141365 +
            ((C7254 + C7255) * C141224 +
             (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 + C6228 * C823 +
              C7241 + C7241 + C141478 * C1171) *
                 C71442) *
                C89302) *
               C141298 * C141497) *
              C2376 +
          ((((C7255 + C7254) * C71442 + (C7253 + C7252) * C141224) * C89302 +
            ((C98556 + C98555) * C71442 +
             (C6228 * C3492 + C10942 + C10942 + C141478 * C3792 +
              C6229 * C10472 + C10943 + C10943 + C141341 * C10936) *
                 C141224) *
                C141365) *
               C141298 * C141497 -
           (((C8276 + C8277) * C141224 + C99786 * C71442) * C141365 +
            ((C6268 + C6267) * C141224 + (C6266 + C6265) * C71442) * C89302) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C5966 +
             (C89455 * C189 + C89302 * C501 + C89456 * C1690 +
              C141365 * C2040) *
                 C141478 +
             (C98279 + C98280) * C5967 + (C98697 + C98698) * C141341) *
                C71442 +
            ((C89482 + C89483) * C5966 + (C89731 + C89732) * C141478 +
             C98267 * C5967 + C98691 * C141341) *
                C141224) *
               C141298 * C2374 -
           (((C98699 + C98700) * C141341 + (C98285 + C98286) * C5967 +
             C98696 * C141478 + C98278 * C5966) *
                C141224 +
            ((C89456 * C10595 + C141365 * C11041 + C89455 * C3026 +
              C89302 * C3254) *
                 C141341 +
             (C89456 * C10470 + C141365 * C10699 + C89455 * C2960 +
              C89302 * C3084) *
                 C5967 +
             (C98698 + C98697) * C141478 + (C98280 + C98279) * C5966) *
                C71442) *
               C141298 * C141497) *
              C2376 +
          (((C98267 * C5966 + C98691 * C141478 + (C98286 + C98285) * C5967 +
             (C98700 + C98699) * C141341) *
                C71442 +
            ((C90334 + C90333) * C5966 + (C90642 + C90641) * C141478 +
             (C89455 * C2962 + C89302 * C3086 + C89456 * C10472 +
              C141365 * C10701) *
                 C5967 +
             (C89455 * C3028 + C89302 * C3256 + C89456 * C10597 +
              C141365 * C11043) *
                 C141341) *
                C141224) *
               C141298 * C141497 -
           (((C90641 + C90642) * C141341 + (C90333 + C90334) * C5967 +
             (C89734 + C89733) * C141478 + (C89487 + C89486) * C5966) *
                C141224 +
            (C98696 * C141341 + C98278 * C5967 + (C89732 + C89731) * C141478 +
             (C89483 + C89482) * C5966) *
                C71442) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C89455 +
             (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                 C89302 +
             (C81925 + C81926) * C89456 + (C82359 + C82360) * C141365) *
                C141478 +
            ((C72684 + C72685) * C89455 + (C73040 + C73041) * C89302 +
             C85247 * C89456 + C85667 * C141365) *
                C141341) *
               C141298 * C2374 -
           (((C76563 + C76564) * C141365 + (C76249 + C76250) * C89456 +
             (C73043 + C73042) * C89302 + (C72689 + C72688) * C89455) *
                C141341 +
            (C85672 * C141365 + C85258 * C89456 + (C73041 + C73040) * C89302 +
             (C72685 + C72684) * C89455) *
                C141478) *
               C141298 * C141497) *
              C2376 +
          ((((C72692 + C72693) * C89455 + (C73044 + C73045) * C89302 +
             (C80645 + C80646) * C89456 + (C81055 + C81056) * C141365) *
                C141478 +
            ((C72696 + C72697) * C89455 + (C73046 + C73047) * C89302 +
             (C71448 * C10471 + C71442 * C10474 + C71450 * C10472 +
              C141224 * C10475) *
                 C89456 +
             (C71448 * C10700 + C71442 * C11146 + C71450 * C10701 +
              C141224 * C11147) *
                 C141365) *
                C141341) *
               C141298 * C141497 -
           (((C81056 + C81055) * C141365 + (C80646 + C80645) * C89456 +
             (C73045 + C73044) * C89302 + (C72693 + C72692) * C89455) *
                C141341 +
            ((C82362 + C82361) * C141365 + (C81930 + C81929) * C89456 +
             (C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                 C89302 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C89455) *
                C141478) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C89455 +
             (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                 C89302 +
             (C52532 + C52533) * C89456 + (C53203 + C53204) * C141365) *
                C71442 +
            ((C5993 + C5994) * C89455 + (C6522 + C6523) * C89302 +
             C99379 * C89456 + C100183 * C141365) *
                C141224) *
               C141298 * C2374 -
           (((C98965 + C98966) * C141365 + (C98127 + C98128) * C89456 +
             (C7595 + C7596) * C89302 + (C6866 + C6867) * C89455) *
                C141224 +
            ((C55810 + C55809) * C141365 + (C55134 + C55133) * C89456 +
             (C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
              C141478 * C1419) *
                 C89302 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C89455) *
                C71442) *
               C141298 * C141497) *
              C2376 +
          ((((C6867 + C6866) * C89455 + (C7596 + C7595) * C89302 +
             (C98128 + C98127) * C89456 + (C98966 + C98965) * C141365) *
                C71442 +
            ((C6863 + C6862) * C89455 + (C7594 + C7593) * C89302 +
             (C5966 * C3492 + C141478 * C3574 + C5967 * C10472 +
              C141341 * C10597) *
                 C89456 +
             (C5966 * C3648 + C141478 * C4006 + C5967 * C10701 +
              C141341 * C11257) *
                 C141365) *
                C141224) *
               C141298 * C141497 -
           (((C8596 + C8597) * C141365 + (C7940 + C7941) * C89456 +
             (C6525 + C6524) * C89302 + (C5998 + C5997) * C89455) *
                C141224 +
            (C100184 * C141365 + C99382 * C89456 + (C6523 + C6522) * C89302 +
             (C5994 + C5993) * C89455) *
                C71442) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
              C89980 + C89980 + C141365 * C2283) *
                 C141478 +
             (C99115 + C99116) * C141341) *
                C71442 +
            ((C90013 + C90014) * C141478 + C99101 * C141341) * C141224) *
               C141298 * C2374 -
           (((C99117 + C99118) * C141341 + C99106 * C141478) * C141224 +
            ((C89977 * C10470 + C93583 + C93583 + C141365 * C11356 +
              C89976 * C2960 + C93582 + C93582 + C89302 * C3416) *
                 C141341 +
             (C99116 + C99115) * C141478) *
                C71442) *
               C141298 * C141497) *
              C2376 +
          (((C99101 * C141478 + (C99118 + C99117) * C141341) * C71442 +
            ((C90972 + C90971) * C141478 +
             (C89976 * C2962 + C93586 + C93586 + C89302 * C3418 +
              C89977 * C10472 + C93587 + C93587 + C141365 * C11358) *
                 C141341) *
                C141224) *
               C141298 * C141497 -
           (((C90971 + C90972) * C141341 + (C90016 + C90015) * C141478) *
                C141224 +
            (C99106 * C141341 + (C90014 + C90013) * C141478) * C71442) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
             C71453 + C71453 + C141224 * C121) *
                C89302 +
            (C81475 + C81476) * C141365) *
               C141478 +
           ((C72316 + C72317) * C89302 + C84833 * C141365) * C141341) *
              C141298 * C2956 -
          (((C75925 + C75926) * C141365 + (C72319 + C72318) * C89302) *
               C141341 +
           (C84838 * C141365 + (C72317 + C72316) * C89302) * C141478) *
              C141298 * C2957 +
          ((C75166 * C89302 + (C75926 + C75925) * C141365) * C141478 +
           ((C75179 + C75178) * C89302 +
            (C71447 * C26351 + C75915 + C75915 + C71442 * C26355 +
             C71449 * C26352 + C75916 + C75916 + C141224 * C26356) *
                C141365) *
               C141341) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C71448 +
            (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                C71442 +
            (C5993 + C5994) * C71450 + (C5995 + C5996) * C141224) *
               C89302 +
           ((C52532 + C52533) * C71448 + (C52534 + C52535) * C71442 +
            C99379 * C71450 + C99380 * C141224) *
               C141365) *
              C141298 * C2956 -
          (((C98125 + C98126) * C141224 + (C98127 + C98128) * C71450 +
            (C55136 + C55135) * C71442 + (C55134 + C55133) * C71448) *
               C141365 +
           ((C6864 + C6865) * C141224 + (C6866 + C6867) * C71450 +
            (C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
                C71442 +
            (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                C71448) *
               C89302) *
              C141298 * C2957 +
          (((C5966 * C2960 + C141478 * C3026 + C5967 * C9667 +
             C141341 * C9768) *
                C71448 +
            (C5966 * C2964 + C141478 * C3030 + C5967 * C9670 +
             C141341 * C9771) *
                C71442 +
            (C5966 * C2961 + C141478 * C3027 + C5967 * C9668 +
             C141341 * C9769) *
                C71450 +
            (C5966 * C2965 + C141478 * C3031 + C5967 * C9671 +
             C141341 * C9772) *
                C141224) *
               C89302 +
           ((C5966 * C10470 + C141478 * C10595 + C5967 * C26351 +
             C141341 * C26477) *
                C71448 +
            (C5966 * C10473 + C141478 * C10598 + C5967 * C26353 +
             C141341 * C26479) *
                C71442 +
            (C5966 * C10471 + C141478 * C10596 + C5967 * C26352 +
             C141341 * C26478) *
                C71450 +
            (C5966 * C10474 + C141478 * C10599 + C5967 * C26354 +
             C141341 * C26480) *
                C141224) *
               C141365) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C71448 +
            (C89455 * C114 + C89302 * C282 + C89456 * C1606 + C141365 * C1789) *
                C71442 +
            (C89482 + C89483) * C71450 + (C89484 + C89485) * C141224) *
               C141478 +
           ((C98279 + C98280) * C71448 + (C98281 + C98282) * C71442 +
            C98267 * C71450 + C98268 * C141224) *
               C141341) *
              C141298 * C2956 -
          (((C98283 + C98284) * C141224 + (C98285 + C98286) * C71450 +
            (C101797 + C101798) * C71442 + (C101799 + C101800) * C71448) *
               C141341 +
           (C98277 * C141224 + C98278 * C71450 + (C98282 + C98281) * C71442 +
            (C98280 + C98279) * C71448) *
               C141478) *
              C141298 * C2957 +
          (((C101800 + C101799) * C71448 + (C101798 + C101797) * C71442 +
            (C98286 + C98285) * C71450 + (C98284 + C98283) * C141224) *
               C141478 +
           ((C89455 * C9667 + C89302 * C9848 + C89456 * C26351 +
             C141365 * C26579) *
                C71448 +
            (C89455 * C9670 + C89302 * C9851 + C89456 * C26353 +
             C141365 * C26581) *
                C71442 +
            (C89455 * C9668 + C89302 * C9849 + C89456 * C26352 +
             C141365 * C26580) *
                C71450 +
            (C89455 * C9671 + C89302 * C9852 + C89456 * C26354 +
             C141365 * C26582) *
                C141224) *
               C141341) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C5966 +
            (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                C141478 +
            (C72684 + C72685) * C5967 + (C72686 + C72687) * C141341) *
               C89302 +
           ((C81925 + C81926) * C5966 + (C81927 + C81928) * C141478 +
            C85247 * C5967 + C85248 * C141341) *
               C141365) *
              C141298 * C2956 -
          (((C76247 + C76248) * C141341 + (C76249 + C76250) * C5967 +
            C85257 * C141478 + C85258 * C5966) *
               C141365 +
           ((C72691 + C72690) * C141341 + (C72689 + C72688) * C5967 +
            (C72687 + C72686) * C141478 + (C72685 + C72684) * C5966) *
               C89302) *
              C141298 * C2957 +
          ((C75409 * C5966 + C75410 * C141478 + (C75422 + C75421) * C5967 +
            (C75420 + C75419) * C141341) *
               C89302 +
           ((C76250 + C76249) * C5966 + (C76248 + C76247) * C141478 +
            (C71448 * C26351 + C71442 * C26353 + C71450 * C26352 +
             C141224 * C26354) *
                C5967 +
            (C71448 * C26477 + C71442 * C26695 + C71450 * C26478 +
             C141224 * C26696) *
                C141341) *
               C141365) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 + C6229 * C823 +
             C6232 + C6232 + C141341 * C1171) *
                C71442 +
            (C6265 + C6266) * C141224) *
               C89302 +
           ((C52888 + C52889) * C71442 + C99785 * C141224) * C141365) *
              C141298 * C2956 -
          (((C98555 + C98556) * C141224 + (C55486 + C55485) * C71442) *
               C141365 +
           ((C7254 + C7255) * C141224 +
            (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 + C6228 * C823 +
             C7241 + C7241 + C141478 * C1171) *
                C71442) *
               C89302) *
              C141298 * C2957 +
          (((C6228 * C2960 + C10039 + C10039 + C141478 * C3196 + C6229 * C9667 +
             C10040 + C10040 + C141341 * C10035) *
                C71442 +
            (C6228 * C2961 + C10041 + C10041 + C141478 * C3197 + C6229 * C9668 +
             C10042 + C10042 + C141341 * C10036) *
                C141224) *
               C89302 +
           ((C6228 * C10470 + C54580 + C54580 + C141478 * C10934 +
             C6229 * C26351 + C54581 + C54581 + C141341 * C26819) *
                C71442 +
            (C6228 * C10471 + C101997 + C101997 + C141478 * C10935 +
             C6229 * C26352 + C101998 + C101998 + C141341 * C26820) *
                C141224) *
               C141365) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C5966 +
            (C89455 * C189 + C89302 * C501 + C89456 * C1690 + C141365 * C2040) *
                C141478 +
            (C98279 + C98280) * C5967 + (C98697 + C98698) * C141341) *
               C71442 +
           ((C89482 + C89483) * C5966 + (C89731 + C89732) * C141478 +
            C98267 * C5967 + C98691 * C141341) *
               C141224) *
              C141298 * C2956 -
          (((C98699 + C98700) * C141341 + (C98285 + C98286) * C5967 +
            C98696 * C141478 + C98278 * C5966) *
               C141224 +
           ((C102101 + C102102) * C141341 + (C101799 + C101800) * C5967 +
            (C98698 + C98697) * C141478 + (C98280 + C98279) * C5966) *
               C71442) *
              C141298 * C2957 +
          (((C101800 + C101799) * C5966 + (C102102 + C102101) * C141478 +
            (C89455 * C9667 + C89302 * C9848 + C89456 * C26351 +
             C141365 * C26579) *
                C5967 +
            (C89455 * C9768 + C89302 * C10118 + C89456 * C26477 +
             C141365 * C26925) *
                C141341) *
               C71442 +
           ((C98286 + C98285) * C5966 + (C98700 + C98699) * C141478 +
            (C89455 * C9668 + C89302 * C9849 + C89456 * C26352 +
             C141365 * C26580) *
                C5967 +
            (C89455 * C9769 + C89302 * C10119 + C89456 * C26478 +
             C141365 * C26926) *
                C141341) *
               C141224) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C89455 +
            (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                C89302 +
            (C81925 + C81926) * C89456 + (C82359 + C82360) * C141365) *
               C141478 +
           ((C72684 + C72685) * C89455 + (C73040 + C73041) * C89302 +
            C85247 * C89456 + C85667 * C141365) *
               C141341) *
              C141298 * C2956 -
          (((C76563 + C76564) * C141365 + (C76249 + C76250) * C89456 +
            (C73043 + C73042) * C89302 + (C72689 + C72688) * C89455) *
               C141341 +
           (C85672 * C141365 + C85258 * C89456 + (C73041 + C73040) * C89302 +
            (C72685 + C72684) * C89455) *
               C141478) *
              C141298 * C2957 +
          ((C75409 * C89455 + C75652 * C89302 + (C76250 + C76249) * C89456 +
            (C76564 + C76563) * C141365) *
               C141478 +
           ((C75422 + C75421) * C89455 + (C75659 + C75658) * C89302 +
            (C71448 * C26351 + C71442 * C26353 + C71450 * C26352 +
             C141224 * C26354) *
                C89456 +
            (C71448 * C26579 + C71442 * C27028 + C71450 * C26580 +
             C141224 * C27029) *
                C141365) *
               C141341) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C89455 +
            (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                C89302 +
            (C52532 + C52533) * C89456 + (C53203 + C53204) * C141365) *
               C71442 +
           ((C5993 + C5994) * C89455 + (C6522 + C6523) * C89302 +
            C99379 * C89456 + C100183 * C141365) *
               C141224) *
              C141298 * C2956 -
          (((C98965 + C98966) * C141365 + (C98127 + C98128) * C89456 +
            (C7595 + C7596) * C89302 + (C6866 + C6867) * C89455) *
               C141224 +
           ((C55810 + C55809) * C141365 + (C55134 + C55133) * C89456 +
            (C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
             C141478 * C1419) *
                C89302 +
            (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                C89455) *
               C71442) *
              C141298 * C2957 +
          (((C5966 * C2960 + C141478 * C3026 + C5967 * C9667 +
             C141341 * C9768) *
                C89455 +
            (C5966 * C3084 + C141478 * C3362 + C5967 * C9848 +
             C141341 * C10284) *
                C89302 +
            (C5966 * C10470 + C141478 * C10595 + C5967 * C26351 +
             C141341 * C26477) *
                C89456 +
            (C5966 * C10699 + C141478 * C11255 + C5967 * C26579 +
             C141341 * C27140) *
                C141365) *
               C71442 +
           ((C5966 * C2961 + C141478 * C3027 + C5967 * C9668 +
             C141341 * C9769) *
                C89455 +
            (C5966 * C3085 + C141478 * C3363 + C5967 * C9849 +
             C141341 * C10285) *
                C89302 +
            (C5966 * C10471 + C141478 * C10596 + C5967 * C26352 +
             C141341 * C26478) *
                C89456 +
            (C5966 * C10700 + C141478 * C11256 + C5967 * C26580 +
             C141341 * C27141) *
                C141365) *
               C141224) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
             C89980 + C89980 + C141365 * C2283) *
                C141478 +
            (C99115 + C99116) * C141341) *
               C71442 +
           ((C90013 + C90014) * C141478 + C99101 * C141341) * C141224) *
              C141298 * C2956 -
          (((C99117 + C99118) * C141341 + C99106 * C141478) * C141224 +
           ((C102409 + C102410) * C141341 + (C99116 + C99115) * C141478) *
               C71442) *
              C141298 * C2957 +
          (((C102410 + C102409) * C141478 +
            (C89976 * C9667 + C102401 + C102401 + C89302 * C10361 +
             C89977 * C26351 + C102402 + C102402 + C141365 * C27240) *
                C141341) *
               C71442 +
           ((C99118 + C99117) * C141478 +
            (C89976 * C9668 + C102403 + C102403 + C89302 * C10362 +
             C89977 * C26352 + C102404 + C102404 + C141365 * C27241) *
                C141341) *
               C141224) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
              C71453 + C71453 + C141224 * C121) *
                 C89302 +
             (C81475 + C81476) * C141365) *
                C141478 +
            ((C72316 + C72317) * C89302 + C84833 * C141365) * C141341) *
               C1596 -
           (((C84843 + C84844) * C141365 + C84838 * C89302) * C141341 +
            ((C88391 + C88392) * C141365 + (C81476 + C81475) * C89302) *
                C141478) *
               C141499) *
              C2374 +
          (((C84833 * C89302 + (C84844 + C84843) * C141365) * C141478 +
            ((C75926 + C75925) * C89302 +
             (C71447 * C29087 + C78605 + C78605 + C71442 * C29091 +
              C71449 * C29088 + C78606 + C78606 + C141224 * C29092) *
                 C141365) *
                C141341) *
               C141499 -
           (((C75925 + C75926) * C141365 + (C72319 + C72318) * C89302) *
                C141341 +
            (C84838 * C141365 + (C72317 + C72316) * C89302) * C141478) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C71448 +
             (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                 C71442 +
             (C5993 + C5994) * C71450 + (C5995 + C5996) * C141224) *
                C89302 +
            ((C52532 + C52533) * C71448 + (C52534 + C52535) * C71442 +
             C99379 * C71450 + C99380 * C141224) *
                C141365) *
               C1596 -
           (((C52543 + C52542) * C141224 + (C52541 + C52540) * C71450 +
             (C52539 + C52538) * C71442 + (C52537 + C52536) * C71448) *
                C141365 +
            (C99381 * C141224 + C99382 * C71450 + (C52535 + C52534) * C71442 +
             (C52533 + C52532) * C71448) *
                C89302) *
               C141499) *
              C2374 +
          ((((C55133 + C55134) * C71448 + (C55135 + C55136) * C71442 +
             (C98128 + C98127) * C71450 + (C98126 + C98125) * C141224) *
                C89302 +
            ((C55137 + C55138) * C71448 + (C55139 + C55140) * C71442 +
             (C5966 * C13206 + C141478 * C13295 + C5967 * C29088 +
              C141341 * C29174) *
                 C71450 +
             (C5966 * C13209 + C141478 * C13298 + C5967 * C29090 +
              C141341 * C29176) *
                 C141224) *
                C141365) *
               C141499 -
           (((C98125 + C98126) * C141224 + (C98127 + C98128) * C71450 +
             (C55136 + C55135) * C71442 + (C55134 + C55133) * C71448) *
                C141365 +
            ((C6864 + C6865) * C141224 + (C6866 + C6867) * C71450 +
             (C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
                 C71442 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C71448) *
                C89302) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C71448 +
             (C89455 * C114 + C89302 * C282 + C89456 * C1606 +
              C141365 * C1789) *
                 C71442 +
             (C89482 + C89483) * C71450 + (C89484 + C89485) * C141224) *
                C141478 +
            ((C98279 + C98280) * C71448 + (C98281 + C98282) * C71442 +
             C98267 * C71450 + C98268 * C141224) *
                C141341) *
               C1596 -
           (((C99521 + C99522) * C141224 + (C99523 + C99524) * C71450 +
             (C102809 + C102810) * C71442 + (C102811 + C102812) * C71448) *
                C141341 +
            ((C91334 + C91335) * C141224 + (C91336 + C91337) * C71450 +
             (C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
              C89302 * C1789) *
                 C71442 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C71448) *
                C141478) *
               C141499) *
              C2374 +
          ((((C102812 + C102811) * C71448 + (C102810 + C102809) * C71442 +
             (C99524 + C99523) * C71450 + (C99522 + C99521) * C141224) *
                C141478 +
            ((C89455 * C10470 + C89302 * C10699 + C89456 * C29087 +
              C141365 * C29251) *
                 C71448 +
             (C89455 * C10473 + C89302 * C10702 + C89456 * C29089 +
              C141365 * C29253) *
                 C71442 +
             (C89455 * C10471 + C89302 * C10700 + C89456 * C29088 +
              C141365 * C29252) *
                 C71450 +
             (C89455 * C10474 + C89302 * C10703 + C89456 * C29090 +
              C141365 * C29254) *
                 C141224) *
                C141341) *
               C141499 -
           (((C98283 + C98284) * C141224 + (C98285 + C98286) * C71450 +
             (C101797 + C101798) * C71442 + (C101799 + C101800) * C71448) *
                C141341 +
            (C98277 * C141224 + C98278 * C71450 + (C98282 + C98281) * C71442 +
             (C98280 + C98279) * C71448) *
                C141478) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C5966 +
             (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                 C141478 +
             (C72684 + C72685) * C5967 + (C72686 + C72687) * C141341) *
                C89302 +
            ((C81925 + C81926) * C5966 + (C81927 + C81928) * C141478 +
             C85247 * C5967 + C85248 * C141341) *
                C141365) *
               C1596 -
           (((C85259 + C85260) * C141341 + (C85261 + C85262) * C5967 +
             (C88707 + C88708) * C141478 + (C88709 + C88710) * C5966) *
                C141365 +
            (C85257 * C141341 + C85258 * C5967 + (C81928 + C81927) * C141478 +
             (C81926 + C81925) * C5966) *
                C89302) *
               C141499) *
              C2374 +
          (((C85247 * C5966 + C85248 * C141478 + (C76250 + C76249) * C5967 +
             (C76248 + C76247) * C141341) *
                C89302 +
            ((C85262 + C85261) * C5966 + (C85260 + C85259) * C141478 +
             (C71448 * C29087 + C71442 * C29089 + C71450 * C29088 +
              C141224 * C29090) *
                 C5967 +
             (C71448 * C29173 + C71442 * C29329 + C71450 * C29174 +
              C141224 * C29330) *
                 C141341) *
                C141365) *
               C141499 -
           (((C76247 + C76248) * C141341 + (C76249 + C76250) * C5967 +
             C85257 * C141478 + C85258 * C5966) *
                C141365 +
            ((C72691 + C72690) * C141341 + (C72689 + C72688) * C5967 +
             (C72687 + C72686) * C141478 + (C72685 + C72684) * C5966) *
                C89302) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C6228 * C108 + C6231 + C6231 + C141478 * C419 + C6229 * C823 +
              C6232 + C6232 + C141341 * C1171) *
                 C71442 +
             (C6265 + C6266) * C141224) *
                C89302 +
            ((C52888 + C52889) * C71442 + C99785 * C141224) * C141365) *
               C1596 -
           (((C52893 + C52892) * C141224 + (C52891 + C52890) * C71442) *
                C141365 +
            (C99786 * C141224 + (C52889 + C52888) * C71442) * C89302) *
               C141499) *
              C2374 +
          ((((C55485 + C55486) * C71442 + (C98556 + C98555) * C141224) *
                C89302 +
            ((C55487 + C55488) * C71442 +
             (C6228 * C13206 + C51872 + C51872 + C141478 * C13532 +
              C6229 * C29088 + C51873 + C51873 + C141341 * C29406) *
                 C141224) *
                C141365) *
               C141499 -
           (((C98555 + C98556) * C141224 + (C55486 + C55485) * C71442) *
                C141365 +
            ((C7254 + C7255) * C141224 +
             (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 + C6228 * C823 +
              C7241 + C7241 + C141478 * C1171) *
                 C71442) *
                C89302) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C5966 +
             (C89455 * C189 + C89302 * C501 + C89456 * C1690 +
              C141365 * C2040) *
                 C141478 +
             (C98279 + C98280) * C5967 + (C98697 + C98698) * C141341) *
                C71442 +
            ((C89482 + C89483) * C5966 + (C89731 + C89732) * C141478 +
             C98267 * C5967 + C98691 * C141341) *
                C141224) *
               C1596 -
           (((C99921 + C99922) * C141341 + (C99523 + C99524) * C5967 +
             (C91684 + C91685) * C141478 + (C91336 + C91337) * C5966) *
                C141224 +
            ((C103207 + C103208) * C141341 + (C102811 + C102812) * C5967 +
             (C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
              C89302 * C2040) *
                 C141478 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C5966) *
                C71442) *
               C141499) *
              C2374 +
          ((((C102812 + C102811) * C5966 + (C103208 + C103207) * C141478 +
             (C89455 * C10470 + C89302 * C10699 + C89456 * C29087 +
              C141365 * C29251) *
                 C5967 +
             (C89455 * C10595 + C89302 * C11041 + C89456 * C29173 +
              C141365 * C29487) *
                 C141341) *
                C71442 +
            ((C99524 + C99523) * C5966 + (C99922 + C99921) * C141478 +
             (C89455 * C10471 + C89302 * C10700 + C89456 * C29088 +
              C141365 * C29252) *
                 C5967 +
             (C89455 * C10596 + C89302 * C11042 + C89456 * C29174 +
              C141365 * C29488) *
                 C141341) *
                C141224) *
               C141499 -
           (((C98699 + C98700) * C141341 + (C98285 + C98286) * C5967 +
             C98696 * C141478 + C98278 * C5966) *
                C141224 +
            ((C102101 + C102102) * C141341 + (C101799 + C101800) * C5967 +
             (C98698 + C98697) * C141478 + (C98280 + C98279) * C5966) *
                C71442) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C89455 +
             (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                 C89302 +
             (C81925 + C81926) * C89456 + (C82359 + C82360) * C141365) *
                C141478 +
            ((C72684 + C72685) * C89455 + (C73040 + C73041) * C89302 +
             C85247 * C89456 + C85667 * C141365) *
                C141341) *
               C1596 -
           (((C85673 + C85674) * C141365 + (C85261 + C85262) * C89456 +
             C85672 * C89302 + C85258 * C89455) *
                C141341 +
            ((C89023 + C89024) * C141365 + (C88709 + C88710) * C89456 +
             (C82360 + C82359) * C89302 + (C81926 + C81925) * C89455) *
                C141478) *
               C141499) *
              C2374 +
          (((C85247 * C89455 + C85667 * C89302 + (C85262 + C85261) * C89456 +
             (C85674 + C85673) * C141365) *
                C141478 +
            ((C76250 + C76249) * C89455 + (C76564 + C76563) * C89302 +
             (C71448 * C29087 + C71442 * C29089 + C71450 * C29088 +
              C141224 * C29090) *
                 C89456 +
             (C71448 * C29251 + C71442 * C29563 + C71450 * C29252 +
              C141224 * C29564) *
                 C141365) *
                C141341) *
               C141499 -
           (((C76563 + C76564) * C141365 + (C76249 + C76250) * C89456 +
             (C73043 + C73042) * C89302 + (C72689 + C72688) * C89455) *
                C141341 +
            (C85672 * C141365 + C85258 * C89456 + (C73041 + C73040) * C89302 +
             (C72685 + C72684) * C89455) *
                C141478) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C89455 +
             (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                 C89302 +
             (C52532 + C52533) * C89456 + (C53203 + C53204) * C141365) *
                C71442 +
            ((C5993 + C5994) * C89455 + (C6522 + C6523) * C89302 +
             C99379 * C89456 + C100183 * C141365) *
                C141224) *
               C1596 -
           (((C53208 + C53207) * C141365 + (C52541 + C52540) * C89456 +
             C100184 * C89302 + C99382 * C89455) *
                C141224 +
            ((C53206 + C53205) * C141365 + (C52537 + C52536) * C89456 +
             (C53204 + C53203) * C89302 + (C52533 + C52532) * C89455) *
                C71442) *
               C141499) *
              C2374 +
          ((((C55133 + C55134) * C89455 + (C55809 + C55810) * C89302 +
             (C55137 + C55138) * C89456 + (C55811 + C55812) * C141365) *
                C71442 +
            ((C98128 + C98127) * C89455 + (C98966 + C98965) * C89302 +
             (C5966 * C13206 + C141478 * C13295 + C5967 * C29088 +
              C141341 * C29174) *
                 C89456 +
             (C5966 * C13375 + C141478 * C13769 + C5967 * C29252 +
              C141341 * C29640) *
                 C141365) *
                C141224) *
               C141499 -
           (((C98965 + C98966) * C141365 + (C98127 + C98128) * C89456 +
             (C7595 + C7596) * C89302 + (C6866 + C6867) * C89455) *
                C141224 +
            ((C55810 + C55809) * C141365 + (C55134 + C55133) * C89456 +
             (C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
              C141478 * C1419) *
                 C89302 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C89455) *
                C71442) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
              C89980 + C89980 + C141365 * C2283) *
                 C141478 +
             (C99115 + C99116) * C141341) *
                C71442 +
            ((C90013 + C90014) * C141478 + C99101 * C141341) * C141224) *
               C1596 -
           (((C100323 + C100324) * C141341 + (C92032 + C92033) * C141478) *
                C141224 +
            ((C103611 + C103612) * C141341 +
             (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
              C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                 C141478) *
                C71442) *
               C141499) *
              C2374 +
          ((((C103612 + C103611) * C141478 +
             (C89976 * C10470 + C103603 + C103603 + C89302 * C11356 +
              C89977 * C29087 + C103604 + C103604 + C141365 * C29715) *
                 C141341) *
                C71442 +
            ((C100324 + C100323) * C141478 +
             (C89976 * C10471 + C103605 + C103605 + C89302 * C11357 +
              C89977 * C29088 + C103606 + C103606 + C141365 * C29716) *
                 C141341) *
                C141224) *
               C141499 -
           (((C99117 + C99118) * C141341 + C99106 * C141478) * C141224 +
            ((C102409 + C102410) * C141341 + (C99116 + C99115) * C141478) *
                C71442) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
              C71453 + C71453 + C141224 * C121) *
                 C89302 +
             (C81475 + C81476) * C141365) *
                C141478 +
            ((C72316 + C72317) * C89302 + C84833 * C141365) * C141341) *
               C4148 -
           (((C84843 + C84844) * C141365 + C84838 * C89302) * C141341 +
            ((C88391 + C88392) * C141365 + (C81476 + C81475) * C89302) *
                C141478) *
               C141499) *
              C141281 * C2376 +
          ((((C81477 + C81478) * C89302 +
             (C71447 * C5326 + C81463 + C81463 + C71442 * C5334 +
              C71449 * C5327 + C81464 + C81464 + C141224 * C5335) *
                 C141365) *
                C141478 +
            ((C80229 + C80230) * C89302 +
             (C71447 * C13206 + C81465 + C81465 + C71442 * C13212 +
              C71449 * C13207 + C81466 + C81466 + C141224 * C13213) *
                 C141365) *
                C141341) *
               C141499 -
           (((C80230 + C80229) * C141365 + (C72321 + C72320) * C89302) *
                C141341 +
            ((C81478 + C81477) * C141365 +
             (C71449 * C110 + C71462 + C71462 + C141224 * C122 + C71447 * C109 +
              C71463 + C71463 + C71442 * C121) *
                 C89302) *
                C141478) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C71448 +
             (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                 C71442 +
             (C5993 + C5994) * C71450 + (C5995 + C5996) * C141224) *
                C89302 +
            ((C52532 + C52533) * C71448 + (C52534 + C52535) * C71442 +
             C99379 * C71450 + C99380 * C141224) *
                C141365) *
               C4148 -
           (((C52543 + C52542) * C141224 + (C52541 + C52540) * C71450 +
             (C52539 + C52538) * C71442 + (C52537 + C52536) * C71448) *
                C141365 +
            (C99381 * C141224 + C99382 * C71450 + (C52535 + C52534) * C71442 +
             (C52533 + C52532) * C71448) *
                C89302) *
               C141499) *
              C141281 * C2376 +
          (((C99379 * C71448 + C99380 * C71442 + (C7941 + C7940) * C71450 +
             (C7939 + C7938) * C141224) *
                C89302 +
            ((C52540 + C52541) * C71448 + (C52542 + C52543) * C71442 +
             (C5966 * C5327 + C141478 * C5393 + C5967 * C13207 +
              C141341 * C13296) *
                 C71450 +
             (C5966 * C5331 + C141478 * C5397 + C5967 * C13210 +
              C141341 * C13299) *
                 C141224) *
                C141365) *
               C141499 -
           (((C7938 + C7939) * C141224 + (C7940 + C7941) * C71450 +
             C99381 * C71442 + C99382 * C71448) *
                C141365 +
            ((C6000 + C5999) * C141224 + (C5998 + C5997) * C71450 +
             (C5996 + C5995) * C71442 + (C5994 + C5993) * C71448) *
                C89302) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C71448 +
             (C89455 * C114 + C89302 * C282 + C89456 * C1606 +
              C141365 * C1789) *
                 C71442 +
             (C89482 + C89483) * C71450 + (C89484 + C89485) * C141224) *
                C141478 +
            ((C98279 + C98280) * C71448 + (C98281 + C98282) * C71442 +
             C98267 * C71450 + C98268 * C141224) *
                C141341) *
               C4148 -
           (((C99521 + C99522) * C141224 + (C99523 + C99524) * C71450 +
             (C102809 + C102810) * C71442 + (C102811 + C102812) * C71448) *
                C141341 +
            ((C91334 + C91335) * C141224 + (C91336 + C91337) * C71450 +
             (C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
              C89302 * C1789) *
                 C71442 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C71448) *
                C141478) *
               C141499) *
              C141281 * C2376 +
          ((((C91337 + C91336) * C71448 + (C91335 + C91334) * C71442 +
             (C91333 + C91332) * C71450 + (C91331 + C91330) * C141224) *
                C141478 +
            ((C99524 + C99523) * C71448 + (C99522 + C99521) * C71442 +
             (C89455 * C3492 + C89302 * C3648 + C89456 * C13207 +
              C141365 * C13376) *
                 C71450 +
             (C89455 * C3496 + C89302 * C3652 + C89456 * C13210 +
              C141365 * C13379) *
                 C141224) *
                C141341) *
               C141499 -
           (((C90331 + C90332) * C141224 + (C90333 + C90334) * C71450 +
             C98277 * C71442 + C98278 * C71448) *
                C141341 +
            ((C89489 + C89488) * C141224 + (C89487 + C89486) * C71450 +
             (C89485 + C89484) * C71442 + (C89483 + C89482) * C71448) *
                C141478) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C5966 +
             (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                 C141478 +
             (C72684 + C72685) * C5967 + (C72686 + C72687) * C141341) *
                C89302 +
            ((C81925 + C81926) * C5966 + (C81927 + C81928) * C141478 +
             C85247 * C5967 + C85248 * C141341) *
                C141365) *
               C4148 -
           (((C85259 + C85260) * C141341 + (C85261 + C85262) * C5967 +
             (C88707 + C88708) * C141478 + (C88709 + C88710) * C5966) *
                C141365 +
            (C85257 * C141341 + C85258 * C5967 + (C81928 + C81927) * C141478 +
             (C81926 + C81925) * C5966) *
                C89302) *
               C141499) *
              C141281 * C2376 +
          ((((C81929 + C81930) * C5966 + (C81931 + C81932) * C141478 +
             (C80645 + C80646) * C5967 + (C80647 + C80648) * C141341) *
                C89302 +
            ((C71448 * C5326 + C71442 * C5330 + C71450 * C5327 +
              C141224 * C5331) *
                 C5966 +
             (C71448 * C5392 + C71442 * C5508 + C71450 * C5393 +
              C141224 * C5509) *
                 C141478 +
             (C71448 * C13206 + C71442 * C13209 + C71450 * C13207 +
              C141224 * C13210) *
                 C5967 +
             (C71448 * C13295 + C71442 * C13455 + C71450 * C13296 +
              C141224 * C13456) *
                 C141341) *
                C141365) *
               C141499 -
           (((C80648 + C80647) * C141341 + (C80646 + C80645) * C5967 +
             (C81932 + C81931) * C141478 + (C81930 + C81929) * C5966) *
                C141365 +
            ((C72695 + C72694) * C141341 + (C72693 + C72692) * C5967 +
             (C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                 C141478 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C5966) *
                C89302) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C6228 * C108 + C6231 + C6231 + C141478 * C419 + C6229 * C823 +
              C6232 + C6232 + C141341 * C1171) *
                 C71442 +
             (C6265 + C6266) * C141224) *
                C89302 +
            ((C52888 + C52889) * C71442 + C99785 * C141224) * C141365) *
               C4148 -
           (((C52893 + C52892) * C141224 + (C52891 + C52890) * C71442) *
                C141365 +
            (C99786 * C141224 + (C52889 + C52888) * C71442) * C89302) *
               C141499) *
              C141281 * C2376 +
          (((C99785 * C71442 + (C8277 + C8276) * C141224) * C89302 +
            ((C52892 + C52893) * C71442 +
             (C6228 * C5327 + C13539 + C13539 + C141478 * C5563 +
              C6229 * C13207 + C13540 + C13540 + C141341 * C13533) *
                 C141224) *
                C141365) *
               C141499 -
           (((C8276 + C8277) * C141224 + C99786 * C71442) * C141365 +
            ((C6268 + C6267) * C141224 + (C6266 + C6265) * C71442) * C89302) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C5966 +
             (C89455 * C189 + C89302 * C501 + C89456 * C1690 +
              C141365 * C2040) *
                 C141478 +
             (C98279 + C98280) * C5967 + (C98697 + C98698) * C141341) *
                C71442 +
            ((C89482 + C89483) * C5966 + (C89731 + C89732) * C141478 +
             C98267 * C5967 + C98691 * C141341) *
                C141224) *
               C4148 -
           (((C99921 + C99922) * C141341 + (C99523 + C99524) * C5967 +
             (C91684 + C91685) * C141478 + (C91336 + C91337) * C5966) *
                C141224 +
            ((C103207 + C103208) * C141341 + (C102811 + C102812) * C5967 +
             (C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
              C89302 * C2040) *
                 C141478 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C5966) *
                C71442) *
               C141499) *
              C141281 * C2376 +
          ((((C91337 + C91336) * C5966 + (C91685 + C91684) * C141478 +
             (C99524 + C99523) * C5967 + (C99922 + C99921) * C141341) *
                C71442 +
            ((C91333 + C91332) * C5966 + (C91683 + C91682) * C141478 +
             (C89455 * C3492 + C89302 * C3648 + C89456 * C13207 +
              C141365 * C13376) *
                 C5967 +
             (C89455 * C3574 + C89302 * C3866 + C89456 * C13296 +
              C141365 * C13616) *
                 C141341) *
                C141224) *
               C141499 -
           (((C90641 + C90642) * C141341 + (C90333 + C90334) * C5967 +
             (C89734 + C89733) * C141478 + (C89487 + C89486) * C5966) *
                C141224 +
            (C98696 * C141341 + C98278 * C5967 + (C89732 + C89731) * C141478 +
             (C89483 + C89482) * C5966) *
                C71442) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C89455 +
             (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                 C89302 +
             (C81925 + C81926) * C89456 + (C82359 + C82360) * C141365) *
                C141478 +
            ((C72684 + C72685) * C89455 + (C73040 + C73041) * C89302 +
             C85247 * C89456 + C85667 * C141365) *
                C141341) *
               C4148 -
           (((C85673 + C85674) * C141365 + (C85261 + C85262) * C89456 +
             C85672 * C89302 + C85258 * C89455) *
                C141341 +
            ((C89023 + C89024) * C141365 + (C88709 + C88710) * C89456 +
             (C82360 + C82359) * C89302 + (C81926 + C81925) * C89455) *
                C141478) *
               C141499) *
              C141281 * C2376 +
          ((((C81929 + C81930) * C89455 + (C82361 + C82362) * C89302 +
             (C71448 * C5326 + C71442 * C5330 + C71450 * C5327 +
              C141224 * C5331) *
                 C89456 +
             (C71448 * C5450 + C71442 * C5674 + C71450 * C5451 +
              C141224 * C5675) *
                 C141365) *
                C141478 +
            ((C80645 + C80646) * C89455 + (C81055 + C81056) * C89302 +
             (C71448 * C13206 + C71442 * C13209 + C71450 * C13207 +
              C141224 * C13210) *
                 C89456 +
             (C71448 * C13375 + C71442 * C13692 + C71450 * C13376 +
              C141224 * C13693) *
                 C141365) *
                C141341) *
               C141499 -
           (((C81056 + C81055) * C141365 + (C80646 + C80645) * C89456 +
             (C73045 + C73044) * C89302 + (C72693 + C72692) * C89455) *
                C141341 +
            ((C82362 + C82361) * C141365 + (C81930 + C81929) * C89456 +
             (C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                 C89302 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C89455) *
                C141478) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C89455 +
             (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                 C89302 +
             (C52532 + C52533) * C89456 + (C53203 + C53204) * C141365) *
                C71442 +
            ((C5993 + C5994) * C89455 + (C6522 + C6523) * C89302 +
             C99379 * C89456 + C100183 * C141365) *
                C141224) *
               C4148 -
           (((C53208 + C53207) * C141365 + (C52541 + C52540) * C89456 +
             C100184 * C89302 + C99382 * C89455) *
                C141224 +
            ((C53206 + C53205) * C141365 + (C52537 + C52536) * C89456 +
             (C53204 + C53203) * C89302 + (C52533 + C52532) * C89455) *
                C71442) *
               C141499) *
              C141281 * C2376 +
          (((C99379 * C89455 + C100183 * C89302 + (C52540 + C52541) * C89456 +
             (C53207 + C53208) * C141365) *
                C71442 +
            ((C7941 + C7940) * C89455 + (C8597 + C8596) * C89302 +
             (C5966 * C5327 + C141478 * C5393 + C5967 * C13207 +
              C141341 * C13296) *
                 C89456 +
             (C5966 * C5451 + C141478 * C5729 + C5967 * C13376 +
              C141341 * C13770) *
                 C141365) *
                C141224) *
               C141499 -
           (((C8596 + C8597) * C141365 + (C7940 + C7941) * C89456 +
             (C6525 + C6524) * C89302 + (C5998 + C5997) * C89455) *
                C141224 +
            (C100184 * C141365 + C99382 * C89456 + (C6523 + C6522) * C89302 +
             (C5994 + C5993) * C89455) *
                C71442) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
              C89980 + C89980 + C141365 * C2283) *
                 C141478 +
             (C99115 + C99116) * C141341) *
                C71442 +
            ((C90013 + C90014) * C141478 + C99101 * C141341) * C141224) *
               C4148 -
           (((C100323 + C100324) * C141341 + (C92032 + C92033) * C141478) *
                C141224 +
            ((C103611 + C103612) * C141341 +
             (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
              C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                 C141478) *
                C71442) *
               C141499) *
              C141281 * C2376 +
          ((((C92033 + C92032) * C141478 + (C100324 + C100323) * C141341) *
                C71442 +
            ((C92031 + C92030) * C141478 +
             (C89976 * C3492 + C94483 + C94483 + C89302 * C4076 +
              C89977 * C13207 + C94484 + C94484 + C141365 * C13847) *
                 C141341) *
                C141224) *
               C141499 -
           (((C90971 + C90972) * C141341 + (C90016 + C90015) * C141478) *
                C141224 +
            (C99106 * C141341 + (C90014 + C90013) * C141478) * C71442) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
              C71453 + C71453 + C141224 * C121) *
                 C89302 +
             (C81475 + C81476) * C141365) *
                C141478 +
            ((C72316 + C72317) * C89302 + C84833 * C141365) * C141341) *
               C4148 -
           (((C84843 + C84844) * C141365 + C84838 * C89302) * C141341 +
            ((C88391 + C88392) * C141365 + (C81476 + C81475) * C89302) *
                C141478) *
               C141499) *
              C816 +
          (((C84833 * C89302 + (C84844 + C84843) * C141365) * C141478 +
            ((C75926 + C75925) * C89302 +
             (C71447 * C29087 + C78605 + C78605 + C71442 * C29091 +
              C71449 * C29088 + C78606 + C78606 + C141224 * C29092) *
                 C141365) *
                C141341) *
               C141499 -
           (((C75925 + C75926) * C141365 + (C72319 + C72318) * C89302) *
                C141341 +
            (C84838 * C141365 + (C72317 + C72316) * C89302) * C141478) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C71448 +
             (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                 C71442 +
             (C5993 + C5994) * C71450 + (C5995 + C5996) * C141224) *
                C89302 +
            ((C52532 + C52533) * C71448 + (C52534 + C52535) * C71442 +
             C99379 * C71450 + C99380 * C141224) *
                C141365) *
               C4148 -
           (((C52543 + C52542) * C141224 + (C52541 + C52540) * C71450 +
             (C52539 + C52538) * C71442 + (C52537 + C52536) * C71448) *
                C141365 +
            (C99381 * C141224 + C99382 * C71450 + (C52535 + C52534) * C71442 +
             (C52533 + C52532) * C71448) *
                C89302) *
               C141499) *
              C816 +
          ((((C55133 + C55134) * C71448 + (C55135 + C55136) * C71442 +
             (C98128 + C98127) * C71450 + (C98126 + C98125) * C141224) *
                C89302 +
            ((C55137 + C55138) * C71448 + (C55139 + C55140) * C71442 +
             (C5966 * C13206 + C141478 * C13295 + C5967 * C29088 +
              C141341 * C29174) *
                 C71450 +
             (C5966 * C13209 + C141478 * C13298 + C5967 * C29090 +
              C141341 * C29176) *
                 C141224) *
                C141365) *
               C141499 -
           (((C98125 + C98126) * C141224 + (C98127 + C98128) * C71450 +
             (C55136 + C55135) * C71442 + (C55134 + C55133) * C71448) *
                C141365 +
            ((C6864 + C6865) * C141224 + (C6866 + C6867) * C71450 +
             (C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
                 C71442 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C71448) *
                C89302) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C71448 +
             (C89455 * C114 + C89302 * C282 + C89456 * C1606 +
              C141365 * C1789) *
                 C71442 +
             (C89482 + C89483) * C71450 + (C89484 + C89485) * C141224) *
                C141478 +
            ((C98279 + C98280) * C71448 + (C98281 + C98282) * C71442 +
             C98267 * C71450 + C98268 * C141224) *
                C141341) *
               C4148 -
           (((C99521 + C99522) * C141224 + (C99523 + C99524) * C71450 +
             (C102809 + C102810) * C71442 + (C102811 + C102812) * C71448) *
                C141341 +
            ((C91334 + C91335) * C141224 + (C91336 + C91337) * C71450 +
             (C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
              C89302 * C1789) *
                 C71442 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C71448) *
                C141478) *
               C141499) *
              C816 +
          ((((C102812 + C102811) * C71448 + (C102810 + C102809) * C71442 +
             (C99524 + C99523) * C71450 + (C99522 + C99521) * C141224) *
                C141478 +
            ((C89455 * C10470 + C89302 * C10699 + C89456 * C29087 +
              C141365 * C29251) *
                 C71448 +
             (C89455 * C10473 + C89302 * C10702 + C89456 * C29089 +
              C141365 * C29253) *
                 C71442 +
             (C89455 * C10471 + C89302 * C10700 + C89456 * C29088 +
              C141365 * C29252) *
                 C71450 +
             (C89455 * C10474 + C89302 * C10703 + C89456 * C29090 +
              C141365 * C29254) *
                 C141224) *
                C141341) *
               C141499 -
           (((C98283 + C98284) * C141224 + (C98285 + C98286) * C71450 +
             (C101797 + C101798) * C71442 + (C101799 + C101800) * C71448) *
                C141341 +
            (C98277 * C141224 + C98278 * C71450 + (C98282 + C98281) * C71442 +
             (C98280 + C98279) * C71448) *
                C141478) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C5966 +
             (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                 C141478 +
             (C72684 + C72685) * C5967 + (C72686 + C72687) * C141341) *
                C89302 +
            ((C81925 + C81926) * C5966 + (C81927 + C81928) * C141478 +
             C85247 * C5967 + C85248 * C141341) *
                C141365) *
               C4148 -
           (((C85259 + C85260) * C141341 + (C85261 + C85262) * C5967 +
             (C88707 + C88708) * C141478 + (C88709 + C88710) * C5966) *
                C141365 +
            (C85257 * C141341 + C85258 * C5967 + (C81928 + C81927) * C141478 +
             (C81926 + C81925) * C5966) *
                C89302) *
               C141499) *
              C816 +
          (((C85247 * C5966 + C85248 * C141478 + (C76250 + C76249) * C5967 +
             (C76248 + C76247) * C141341) *
                C89302 +
            ((C85262 + C85261) * C5966 + (C85260 + C85259) * C141478 +
             (C71448 * C29087 + C71442 * C29089 + C71450 * C29088 +
              C141224 * C29090) *
                 C5967 +
             (C71448 * C29173 + C71442 * C29329 + C71450 * C29174 +
              C141224 * C29330) *
                 C141341) *
                C141365) *
               C141499 -
           (((C76247 + C76248) * C141341 + (C76249 + C76250) * C5967 +
             C85257 * C141478 + C85258 * C5966) *
                C141365 +
            ((C72691 + C72690) * C141341 + (C72689 + C72688) * C5967 +
             (C72687 + C72686) * C141478 + (C72685 + C72684) * C5966) *
                C89302) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C6228 * C108 + C6231 + C6231 + C141478 * C419 + C6229 * C823 +
              C6232 + C6232 + C141341 * C1171) *
                 C71442 +
             (C6265 + C6266) * C141224) *
                C89302 +
            ((C52888 + C52889) * C71442 + C99785 * C141224) * C141365) *
               C4148 -
           (((C52893 + C52892) * C141224 + (C52891 + C52890) * C71442) *
                C141365 +
            (C99786 * C141224 + (C52889 + C52888) * C71442) * C89302) *
               C141499) *
              C816 +
          ((((C55485 + C55486) * C71442 + (C98556 + C98555) * C141224) *
                C89302 +
            ((C55487 + C55488) * C71442 +
             (C6228 * C13206 + C51872 + C51872 + C141478 * C13532 +
              C6229 * C29088 + C51873 + C51873 + C141341 * C29406) *
                 C141224) *
                C141365) *
               C141499 -
           (((C98555 + C98556) * C141224 + (C55486 + C55485) * C71442) *
                C141365 +
            ((C7254 + C7255) * C141224 +
             (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 + C6228 * C823 +
              C7241 + C7241 + C141478 * C1171) *
                 C71442) *
                C89302) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89455 * C108 + C89302 * C276 + C89456 * C1601 +
              C141365 * C1784) *
                 C5966 +
             (C89455 * C189 + C89302 * C501 + C89456 * C1690 +
              C141365 * C2040) *
                 C141478 +
             (C98279 + C98280) * C5967 + (C98697 + C98698) * C141341) *
                C71442 +
            ((C89482 + C89483) * C5966 + (C89731 + C89732) * C141478 +
             C98267 * C5967 + C98691 * C141341) *
                C141224) *
               C4148 -
           (((C99921 + C99922) * C141341 + (C99523 + C99524) * C5967 +
             (C91684 + C91685) * C141478 + (C91336 + C91337) * C5966) *
                C141224 +
            ((C103207 + C103208) * C141341 + (C102811 + C102812) * C5967 +
             (C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
              C89302 * C2040) *
                 C141478 +
             (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
              C89302 * C1784) *
                 C5966) *
                C71442) *
               C141499) *
              C816 +
          ((((C102812 + C102811) * C5966 + (C103208 + C103207) * C141478 +
             (C89455 * C10470 + C89302 * C10699 + C89456 * C29087 +
              C141365 * C29251) *
                 C5967 +
             (C89455 * C10595 + C89302 * C11041 + C89456 * C29173 +
              C141365 * C29487) *
                 C141341) *
                C71442 +
            ((C99524 + C99523) * C5966 + (C99922 + C99921) * C141478 +
             (C89455 * C10471 + C89302 * C10700 + C89456 * C29088 +
              C141365 * C29252) *
                 C5967 +
             (C89455 * C10596 + C89302 * C11042 + C89456 * C29174 +
              C141365 * C29488) *
                 C141341) *
                C141224) *
               C141499 -
           (((C98699 + C98700) * C141341 + (C98285 + C98286) * C5967 +
             C98696 * C141478 + C98278 * C5966) *
                C141224 +
            ((C102101 + C102102) * C141341 + (C101799 + C101800) * C5967 +
             (C98698 + C98697) * C141478 + (C98280 + C98279) * C5966) *
                C71442) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C89455 +
             (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                 C89302 +
             (C81925 + C81926) * C89456 + (C82359 + C82360) * C141365) *
                C141478 +
            ((C72684 + C72685) * C89455 + (C73040 + C73041) * C89302 +
             C85247 * C89456 + C85667 * C141365) *
                C141341) *
               C4148 -
           (((C85673 + C85674) * C141365 + (C85261 + C85262) * C89456 +
             C85672 * C89302 + C85258 * C89455) *
                C141341 +
            ((C89023 + C89024) * C141365 + (C88709 + C88710) * C89456 +
             (C82360 + C82359) * C89302 + (C81926 + C81925) * C89455) *
                C141478) *
               C141499) *
              C816 +
          (((C85247 * C89455 + C85667 * C89302 + (C85262 + C85261) * C89456 +
             (C85674 + C85673) * C141365) *
                C141478 +
            ((C76250 + C76249) * C89455 + (C76564 + C76563) * C89302 +
             (C71448 * C29087 + C71442 * C29089 + C71450 * C29088 +
              C141224 * C29090) *
                 C89456 +
             (C71448 * C29251 + C71442 * C29563 + C71450 * C29252 +
              C141224 * C29564) *
                 C141365) *
                C141341) *
               C141499 -
           (((C76563 + C76564) * C141365 + (C76249 + C76250) * C89456 +
             (C73043 + C73042) * C89302 + (C72689 + C72688) * C89455) *
                C141341 +
            (C85672 * C141365 + C85258 * C89456 + (C73041 + C73040) * C89302 +
             (C72685 + C72684) * C89455) *
                C141478) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C89455 +
             (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                 C89302 +
             (C52532 + C52533) * C89456 + (C53203 + C53204) * C141365) *
                C71442 +
            ((C5993 + C5994) * C89455 + (C6522 + C6523) * C89302 +
             C99379 * C89456 + C100183 * C141365) *
                C141224) *
               C4148 -
           (((C53208 + C53207) * C141365 + (C52541 + C52540) * C89456 +
             C100184 * C89302 + C99382 * C89455) *
                C141224 +
            ((C53206 + C53205) * C141365 + (C52537 + C52536) * C89456 +
             (C53204 + C53203) * C89302 + (C52533 + C52532) * C89455) *
                C71442) *
               C141499) *
              C816 +
          ((((C55133 + C55134) * C89455 + (C55809 + C55810) * C89302 +
             (C55137 + C55138) * C89456 + (C55811 + C55812) * C141365) *
                C71442 +
            ((C98128 + C98127) * C89455 + (C98966 + C98965) * C89302 +
             (C5966 * C13206 + C141478 * C13295 + C5967 * C29088 +
              C141341 * C29174) *
                 C89456 +
             (C5966 * C13375 + C141478 * C13769 + C5967 * C29252 +
              C141341 * C29640) *
                 C141365) *
                C141224) *
               C141499 -
           (((C98965 + C98966) * C141365 + (C98127 + C98128) * C89456 +
             (C7595 + C7596) * C89302 + (C6866 + C6867) * C89455) *
                C141224 +
            ((C55810 + C55809) * C141365 + (C55134 + C55133) * C89456 +
             (C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
              C141478 * C1419) *
                 C89302 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C89455) *
                C71442) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[97] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
              C89980 + C89980 + C141365 * C2283) *
                 C141478 +
             (C99115 + C99116) * C141341) *
                C71442 +
            ((C90013 + C90014) * C141478 + C99101 * C141341) * C141224) *
               C4148 -
           (((C100323 + C100324) * C141341 + (C92032 + C92033) * C141478) *
                C141224 +
            ((C103611 + C103612) * C141341 +
             (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
              C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                 C141478) *
                C71442) *
               C141499) *
              C816 +
          ((((C103612 + C103611) * C141478 +
             (C89976 * C10470 + C103603 + C103603 + C89302 * C11356 +
              C89977 * C29087 + C103604 + C103604 + C141365 * C29715) *
                 C141341) *
                C71442 +
            ((C100324 + C100323) * C141478 +
             (C89976 * C10471 + C103605 + C103605 + C89302 * C11357 +
              C89977 * C29088 + C103606 + C103606 + C141365 * C29716) *
                 C141341) *
                C141224) *
               C141499 -
           (((C99117 + C99118) * C141341 + C99106 * C141478) * C141224 +
            ((C102409 + C102410) * C141341 + (C99116 + C99115) * C141478) *
                C71442) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
             C71453 + C71453 + C141224 * C121) *
                C89302 +
            (C81475 + C81476) * C141365) *
               C141478 +
           ((C72316 + C72317) * C89302 + C84833 * C141365) * C141341) *
              C5322 -
          (((C84843 + C84844) * C141365 + C84838 * C89302) * C141341 +
           ((C88391 + C88392) * C141365 + (C81476 + C81475) * C89302) *
               C141478) *
              C5323 +
          (((C88392 + C88391) * C89302 +
            (C71447 * C21035 + C88383 + C88383 + C71442 * C21041 +
             C71449 * C21036 + C88384 + C88384 + C141224 * C21042) *
                C141365) *
               C141478 +
           ((C84844 + C84843) * C89302 +
            (C71447 * C42109 + C88385 + C88385 + C71442 * C42113 +
             C71449 * C47290 + C88386 + C88386 + C141224 * C47292) *
                C141365) *
               C141341) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C71448 +
            (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                C71442 +
            (C5993 + C5994) * C71450 + (C5995 + C5996) * C141224) *
               C89302 +
           ((C52532 + C52533) * C71448 + (C52534 + C52535) * C71442 +
            C99379 * C71450 + C99380 * C141224) *
               C141365) *
              C5322 -
          (((C52543 + C52542) * C141224 + (C52541 + C52540) * C71450 +
            (C52539 + C52538) * C71442 + (C52537 + C52536) * C71448) *
               C141365 +
           (C99381 * C141224 + C99382 * C71450 + (C52535 + C52534) * C71442 +
            (C52533 + C52532) * C71448) *
               C89302) *
              C5323 +
          ((C57853 * C71448 + C57854 * C71442 + (C52540 + C52541) * C71450 +
            (C52542 + C52543) * C141224) *
               C89302 +
           ((C57868 + C57867) * C71448 + (C57866 + C57865) * C71442 +
            (C5966 * C21036 + C141478 * C21137 + C5967 * C47290 +
             C141341 * C47403) *
                C71450 +
            (C5966 * C21039 + C141478 * C21140 + C5967 * C47291 +
             C141341 * C47404) *
                C141224) *
               C141365) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexz[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C71448 +
            (C89455 * C114 + C89302 * C282 + C89456 * C1606 + C141365 * C1789) *
                C71442 +
            (C89482 + C89483) * C71450 + (C89484 + C89485) * C141224) *
               C141478 +
           ((C98279 + C98280) * C71448 + (C98281 + C98282) * C71442 +
            C98267 * C71450 + C98268 * C141224) *
               C141341) *
              C5322 -
          (((C99521 + C99522) * C141224 + (C99523 + C99524) * C71450 +
            (C102809 + C102810) * C71442 + (C102811 + C102812) * C71448) *
               C141341 +
           ((C91334 + C91335) * C141224 + (C91336 + C91337) * C71450 +
            (C89456 * C5329 + C141365 * C5453 + C89455 * C1606 +
             C89302 * C1789) *
                C71442 +
            (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
             C89302 * C1784) *
                C71448) *
               C141478) *
              C5323 +
          (((C89455 * C5325 + C89302 * C5449 + C89456 * C21035 +
             C141365 * C21228) *
                C71448 +
            (C89455 * C5329 + C89302 * C5453 + C89456 * C21038 +
             C141365 * C21231) *
                C71442 +
            (C89455 * C5326 + C89302 * C5450 + C89456 * C21036 +
             C141365 * C21229) *
                C71450 +
            (C89455 * C5330 + C89302 * C5454 + C89456 * C21039 +
             C141365 * C21232) *
                C141224) *
               C141478 +
           ((C89455 * C13205 + C89302 * C13374 + C89456 * C42109 +
             C141365 * C42293) *
                C71448 +
            (C89455 * C13208 + C89302 * C13377 + C89456 * C42111 +
             C141365 * C42295) *
                C71442 +
            (C89455 * C13206 + C89302 * C13375 + C89456 * C47290 +
             C141365 * C47517) *
                C71450 +
            (C89455 * C13209 + C89302 * C13378 + C89456 * C47291 +
             C141365 * C47518) *
                C141224) *
               C141341) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C5966 +
            (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                C141478 +
            (C72684 + C72685) * C5967 + (C72686 + C72687) * C141341) *
               C89302 +
           ((C81925 + C81926) * C5966 + (C81927 + C81928) * C141478 +
            C85247 * C5967 + C85248 * C141341) *
               C141365) *
              C5322 -
          (((C85259 + C85260) * C141341 + (C85261 + C85262) * C5967 +
            (C88707 + C88708) * C141478 + (C88709 + C88710) * C5966) *
               C141365 +
           (C85257 * C141341 + C85258 * C5967 + (C81928 + C81927) * C141478 +
            (C81926 + C81925) * C5966) *
               C89302) *
              C5323 +
          (((C88710 + C88709) * C5966 + (C88708 + C88707) * C141478 +
            (C85262 + C85261) * C5967 + (C85260 + C85259) * C141341) *
               C89302 +
           ((C71448 * C21035 + C71442 * C21038 + C71450 * C21036 +
             C141224 * C21039) *
                C5966 +
            (C71448 * C21136 + C71442 * C21308 + C71450 * C21137 +
             C141224 * C21309) *
                C141478 +
            (C71448 * C42109 + C71442 * C42111 + C71450 * C47290 +
             C141224 * C47291) *
                C5967 +
            (C71448 * C42197 + C71442 * C42371 + C71450 * C47403 +
             C141224 * C47617) *
                C141341) *
               C141365) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 + C6229 * C823 +
             C6232 + C6232 + C141341 * C1171) *
                C71442 +
            (C6265 + C6266) * C141224) *
               C89302 +
           ((C52888 + C52889) * C71442 + C99785 * C141224) * C141365) *
              C5322 -
          (((C52893 + C52892) * C141224 + (C52891 + C52890) * C71442) *
               C141365 +
           (C99786 * C141224 + (C52889 + C52888) * C71442) * C89302) *
              C5323 +
          ((C58109 * C71442 + (C52892 + C52893) * C141224) * C89302 +
           ((C58122 + C58121) * C71442 +
            (C6228 * C21036 + C52874 + C52874 + C141478 * C21404 +
             C6229 * C47290 + C52875 + C52875 + C141341 * C47728) *
                C141224) *
               C141365) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89455 * C108 + C89302 * C276 + C89456 * C1601 + C141365 * C1784) *
                C5966 +
            (C89455 * C189 + C89302 * C501 + C89456 * C1690 + C141365 * C2040) *
                C141478 +
            (C98279 + C98280) * C5967 + (C98697 + C98698) * C141341) *
               C71442 +
           ((C89482 + C89483) * C5966 + (C89731 + C89732) * C141478 +
            C98267 * C5967 + C98691 * C141341) *
               C141224) *
              C5322 -
          (((C99921 + C99922) * C141341 + (C99523 + C99524) * C5967 +
            (C91684 + C91685) * C141478 + (C91336 + C91337) * C5966) *
               C141224 +
           ((C103207 + C103208) * C141341 + (C102811 + C102812) * C5967 +
            (C89456 * C5391 + C141365 * C5619 + C89455 * C1690 +
             C89302 * C2040) *
                C141478 +
            (C89456 * C5325 + C141365 * C5449 + C89455 * C1601 +
             C89302 * C1784) *
                C5966) *
               C71442) *
              C5323 +
          (((C89455 * C5325 + C89302 * C5449 + C89456 * C21035 +
             C141365 * C21228) *
                C5966 +
            (C89455 * C5391 + C89302 * C5619 + C89456 * C21136 +
             C141365 * C21491) *
                C141478 +
            (C89455 * C13205 + C89302 * C13374 + C89456 * C42109 +
             C141365 * C42293) *
                C5967 +
            (C89455 * C13294 + C89302 * C13614 + C89456 * C42197 +
             C141365 * C42553) *
                C141341) *
               C71442 +
           ((C89455 * C5326 + C89302 * C5450 + C89456 * C21036 +
             C141365 * C21229) *
                C5966 +
            (C89455 * C5392 + C89302 * C5620 + C89456 * C21137 +
             C141365 * C21492) *
                C141478 +
            (C89455 * C13206 + C89302 * C13375 + C89456 * C47290 +
             C141365 * C47517) *
                C5967 +
            (C89455 * C13295 + C89302 * C13615 + C89456 * C47403 +
             C141365 * C47838) *
                C141341) *
               C141224) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C89455 +
            (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                C89302 +
            (C81925 + C81926) * C89456 + (C82359 + C82360) * C141365) *
               C141478 +
           ((C72684 + C72685) * C89455 + (C73040 + C73041) * C89302 +
            C85247 * C89456 + C85667 * C141365) *
               C141341) *
              C5322 -
          (((C85673 + C85674) * C141365 + (C85261 + C85262) * C89456 +
            C85672 * C89302 + C85258 * C89455) *
               C141341 +
           ((C89023 + C89024) * C141365 + (C88709 + C88710) * C89456 +
            (C82360 + C82359) * C89302 + (C81926 + C81925) * C89455) *
               C141478) *
              C5323 +
          (((C88710 + C88709) * C89455 + (C89024 + C89023) * C89302 +
            (C71448 * C21035 + C71442 * C21038 + C71450 * C21036 +
             C141224 * C21039) *
                C89456 +
            (C71448 * C21228 + C71442 * C21568 + C71450 * C21229 +
             C141224 * C21569) *
                C141365) *
               C141478 +
           ((C85262 + C85261) * C89455 + (C85674 + C85673) * C89302 +
            (C71448 * C42109 + C71442 * C42111 + C71450 * C47290 +
             C141224 * C47291) *
                C89456 +
            (C71448 * C42293 + C71442 * C42629 + C71450 * C47517 +
             C141224 * C47937) *
                C141365) *
               C141341) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C89455 +
            (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                C89302 +
            (C52532 + C52533) * C89456 + (C53203 + C53204) * C141365) *
               C71442 +
           ((C5993 + C5994) * C89455 + (C6522 + C6523) * C89302 +
            C99379 * C89456 + C100183 * C141365) *
               C141224) *
              C5322 -
          (((C53208 + C53207) * C141365 + (C52541 + C52540) * C89456 +
            C100184 * C89302 + C99382 * C89455) *
               C141224 +
           ((C53206 + C53205) * C141365 + (C52537 + C52536) * C89456 +
            (C53204 + C53203) * C89302 + (C52533 + C52532) * C89455) *
               C71442) *
              C5323 +
          ((C57853 * C89455 + C58351 * C89302 + (C57868 + C57867) * C89456 +
            (C58357 + C58356) * C141365) *
               C71442 +
           ((C52540 + C52541) * C89455 + (C53207 + C53208) * C89302 +
            (C5966 * C21036 + C141478 * C21137 + C5967 * C47290 +
             C141341 * C47403) *
                C89456 +
            (C5966 * C21229 + C141478 * C21655 + C5967 * C47517 +
             C141341 * C48042) *
                C141365) *
               C141224) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89976 * C108 + C89979 + C89979 + C89302 * C714 + C89977 * C1601 +
             C89980 + C89980 + C141365 * C2283) *
                C141478 +
            (C99115 + C99116) * C141341) *
               C71442 +
           ((C90013 + C90014) * C141478 + C99101 * C141341) * C141224) *
              C5322 -
          (((C100323 + C100324) * C141341 + (C92032 + C92033) * C141478) *
               C141224 +
           ((C103611 + C103612) * C141341 +
            (C89977 * C5325 + C92018 + C92018 + C141365 * C5781 +
             C89976 * C1601 + C92019 + C92019 + C89302 * C2283) *
                C141478) *
               C71442) *
              C5323 +
          (((C89976 * C5325 + C96969 + C96969 + C89302 * C5781 +
             C89977 * C21035 + C96970 + C96970 + C141365 * C21734) *
                C141478 +
            (C89976 * C13205 + C106835 + C106835 + C89302 * C13845 +
             C89977 * C42109 + C106836 + C106836 + C141365 * C42793) *
                C141341) *
               C71442 +
           ((C89976 * C5326 + C96971 + C96971 + C89302 * C5782 +
             C89977 * C21036 + C96972 + C96972 + C141365 * C21735) *
                C141478 +
            (C89976 * C13206 + C106837 + C106837 + C89302 * C13846 +
             C89977 * C47290 + C106838 + C106838 + C141365 * C48144) *
                C141341) *
               C141224) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
            C71453 + C71453 + C141224 * C121) *
               C141508 +
           (C81475 + C81476) * C141505 + (C88392 + C88391) * C106914) *
              C141327 * C141298 * C141281 * C97 -
          ((C71449 * C5327 + C81464 + C81464 + C141224 * C5335 +
            C71447 * C5326 + C81463 + C81463 + C71442 * C5334) *
               C106914 +
           (C81478 + C81477) * C141505 +
           (C71449 * C110 + C71462 + C71462 + C141224 * C122 + C71447 * C109 +
            C71463 + C71463 + C71442 * C121) *
               C141508) *
              C141327 * C141298 * C141281 * C98 +
          ((C71447 * C110 + C71464 + C71464 + C71442 * C122 + C71449 * C111 +
            C71465 + C71465 + C141224 * C123) *
               C141508 +
           (C71447 * C1599 + C79303 + C79303 + C71442 * C1609 + C71449 * C1598 +
            C79304 + C79304 + C141224 * C1608) *
               C141505 +
           (C71447 * C5327 + C106916 + C106916 + C71442 * C5335 +
            C71449 * C5328 + C106917 + C106917 + C141224 * C5336) *
               C106914) *
              C141327 * C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexy[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C71448 +
            (C188 * C114 + C141327 * C195) * C71442 + C218 * C71450 +
            C219 * C141224) *
               C141508 +
           (C15877 * C71448 + C15878 * C71442 + C1715 * C71450 +
            C1714 * C141224) *
               C141505 +
           (C21152 * C71448 + C21151 * C71442 + C15882 * C71450 +
            C15881 * C141224) *
               C106914) *
              C141298 * C141281 * C97 -
          ((C15879 * C141224 + C15880 * C71450 + C15881 * C71442 +
            C15882 * C71448) *
               C106914 +
           (C1712 * C141224 + C1713 * C71450 + C1714 * C71442 +
            C1715 * C71448) *
               C141505 +
           (C221 * C141224 + C220 * C71450 + C219 * C71442 + C218 * C71448) *
               C141508) *
              C141298 * C141281 * C98 +
          ((C220 * C71448 + C221 * C71442 + C222 * C71450 + C223 * C141224) *
               C141508 +
           (C1713 * C71448 + C1712 * C71442 + C1711 * C71450 +
            C1710 * C141224) *
               C141505 +
           (C15880 * C71448 + C15879 * C71442 +
            (C188 * C5328 + C141327 * C5394) * C71450 +
            (C188 * C5332 + C141327 * C5398) * C141224) *
               C106914) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eexz[99] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                      C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                         C71448 +
                     (C107065 * C114 + C141508 * C282 + C107066 * C1606 +
                      C141505 * C1789 + C107067 * C5329 + C106914 * C5453) *
                         C71442 +
                     (C107093 + C107094 + C107095) * C71450 +
                     (C107096 + C107097 + C107098) * C141224) *
                        C141327 * C141298 * C141281 * C97 -
                    ((C107099 + C107100 + C107101) * C141224 +
                     (C107102 + C107103 + C107104) * C71450 +
                     (C107098 + C107097 + C107096) * C71442 +
                     (C107095 + C107094 + C107093) * C71448) *
                        C141327 * C141298 * C141281 * C98 +
                    ((C107104 + C107103 + C107102) * C71448 +
                     (C107101 + C107100 + C107099) * C71442 +
                     (C107065 * C111 + C141508 * C279 + C107066 * C1598 +
                      C141505 * C1781 + C107067 * C5328 + C106914 * C5452) *
                         C71450 +
                     (C107065 * C117 + C141508 * C285 + C107066 * C1603 +
                      C141505 * C1786 + C107067 * C5332 + C106914 * C5456) *
                         C141224) *
                        C141327 * C141298 * C141281 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C188 +
            (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                C141327) *
               C141508 +
           ((C81925 + C81926) * C188 + (C81927 + C81928) * C141327) * C141505 +
           ((C88710 + C88709) * C188 + (C88708 + C88707) * C141327) * C106914) *
              C141298 * C141281 * C97 -
          (((C71450 * C5393 + C141224 * C5509 + C71448 * C5392 +
             C71442 * C5508) *
                C141327 +
            (C71450 * C5327 + C141224 * C5331 + C71448 * C5326 +
             C71442 * C5330) *
                C188) *
               C106914 +
           ((C81932 + C81931) * C141327 + (C81930 + C81929) * C188) * C141505 +
           ((C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                C141327 +
            (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                C188) *
               C141508) *
              C141298 * C141281 * C98 +
          (((C71448 * C110 + C71442 * C116 + C71450 * C111 + C141224 * C117) *
                C188 +
            (C71448 * C191 + C71442 * C364 + C71450 * C192 + C141224 * C365) *
                C141327) *
               C141508 +
           ((C71448 * C1599 + C71442 * C1604 + C71450 * C1598 +
             C141224 * C1603) *
                C188 +
            (C71448 * C1688 + C71442 * C1876 + C71450 * C1687 +
             C141224 * C1875) *
                C141327) *
               C141505 +
           ((C71448 * C5327 + C71442 * C5331 + C71450 * C5328 +
             C141224 * C5332) *
                C188 +
            (C71448 * C5393 + C71442 * C5509 + C71450 * C5394 +
             C141224 * C5510) *
                C141327) *
               C106914) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C71442 +
            C448 * C141224) *
               C141508 +
           (C16256 * C71442 + C1971 * C141224) * C141505 +
           (C21416 * C71442 + C16258 * C141224) * C106914) *
              C141298 * C141281 * C97 -
          ((C16257 * C141224 + C16258 * C71442) * C106914 +
           (C1970 * C141224 + C1971 * C71442) * C141505 +
           (C449 * C141224 + C448 * C71442) * C141508) *
              C141298 * C141281 * C98 +
          ((C449 * C71442 + C450 * C141224) * C141508 +
           (C1970 * C71442 + C1969 * C141224) * C141505 +
           (C16257 * C71442 +
            (C418 * C5328 + C5569 + C5569 + C141327 * C5564) * C141224) *
               C106914) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[99] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                       C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                          C188 +
                      (C107065 * C189 + C141508 * C501 + C107066 * C1690 +
                       C141505 * C2040 + C107067 * C5391 + C106914 * C5619) *
                          C141327) *
                         C71442 +
                     ((C107093 + C107094 + C107095) * C188 +
                      (C107339 + C107340 + C107341) * C141327) *
                         C141224) *
                        C141298 * C141281 * C97 -
                    (((C107342 + C107343 + C107344) * C141327 +
                      (C107102 + C107103 + C107104) * C188) *
                         C141224 +
                     ((C107341 + C107340 + C107339) * C141327 +
                      (C107095 + C107094 + C107093) * C188) *
                         C71442) *
                        C141298 * C141281 * C98 +
                    (((C107104 + C107103 + C107102) * C188 +
                      (C107344 + C107343 + C107342) * C141327) *
                         C71442 +
                     ((C107065 * C111 + C141508 * C279 + C107066 * C1598 +
                       C141505 * C1781 + C107067 * C5328 + C106914 * C5452) *
                          C188 +
                      (C107065 * C192 + C141508 * C504 + C107066 * C1687 +
                       C141505 * C2037 + C107067 * C5394 + C106914 * C5622) *
                          C141327) *
                         C141224) *
                        C141298 * C141281 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
               C107065 +
           (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
               C141508 +
           (C81925 + C81926) * C107066 + (C82359 + C82360) * C141505 +
           (C88710 + C88709) * C107067 + (C89024 + C89023) * C106914) *
              C141327 * C141298 * C141281 * C97 -
          ((C71450 * C5451 + C141224 * C5675 + C71448 * C5450 +
            C71442 * C5674) *
               C106914 +
           (C71450 * C5327 + C141224 * C5331 + C71448 * C5326 +
            C71442 * C5330) *
               C107067 +
           (C82362 + C82361) * C141505 + (C81930 + C81929) * C107066 +
           (C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
               C141508 +
           (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
               C107065) *
              C141327 * C141298 * C141281 * C98 +
          ((C71448 * C110 + C71442 * C116 + C71450 * C111 + C141224 * C117) *
               C107065 +
           (C71448 * C278 + C71442 * C581 + C71450 * C279 + C141224 * C582) *
               C141508 +
           (C71448 * C1599 + C71442 * C1604 + C71450 * C1598 +
            C141224 * C1603) *
               C107066 +
           (C71448 * C1782 + C71442 * C2124 + C71450 * C1781 +
            C141224 * C2123) *
               C141505 +
           (C71448 * C5327 + C71442 * C5331 + C71450 * C5328 +
            C141224 * C5332) *
               C107067 +
           (C71448 * C5451 + C71442 * C5675 + C71450 * C5452 +
            C141224 * C5676) *
               C106914) *
              C141327 * C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezy[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C107065 +
            (C188 * C276 + C141327 * C635) * C141508 + C15877 * C107066 +
            C16596 * C141505 + C21152 * C107067 + C21660 * C106914) *
               C71442 +
           (C107493 + C107494 + C107495 + C107496 + C107497 + C107498) *
               C141224) *
              C141298 * C141281 * C97 -
          ((C107499 + C107500 + C107501 + C107502 + C107503 + C107504) *
               C141224 +
           (C107498 + C107497 + C107496 + C107495 + C107494 + C107493) *
               C71442) *
              C141298 * C141281 * C98 +
          ((C107504 + C107503 + C107502 + C107501 + C107500 + C107499) *
               C71442 +
           (C222 * C107065 + C656 * C141508 + C1711 * C107066 +
            C2209 * C141505 + (C188 * C5328 + C141327 * C5394) * C107067 +
            (C188 * C5452 + C141327 * C5730) * C106914) *
               C141224) *
              C141298 * C141281 * C99)) /
        (p * q * std::sqrt(p + q));
    d2eezz[99] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C107578 * C108 + C107582 + C107582 + C141508 * C714 +
                      C107579 * C1601 + C107583 + C107583 + C141505 * C2283 +
                      C107580 * C5325 + C107584 + C107584 + C106914 * C5781) *
                         C141327 * C71442 +
                     (C107618 + C107619 + C107620) * C141327 * C141224) *
                        C141298 * C141281 * C97 -
                    ((C107621 + C107622 + C107623) * C141327 * C141224 +
                     (C107620 + C107619 + C107618) * C141327 * C71442) *
                        C141298 * C141281 * C98 +
                    ((C107623 + C107622 + C107621) * C141327 * C71442 +
                     (C107578 * C111 + C107603 + C107603 + C141508 * C717 +
                      C107579 * C1598 + C107604 + C107604 + C141505 * C2280 +
                      C107580 * C5328 + C107605 + C107605 + C106914 * C5784) *
                         C141327 * C141224) *
                        C141298 * C141281 * C99)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
             C71453 + C71453 + C141224 * C121) *
                C141508 +
            (C81475 + C81476) * C141505 + (C88392 + C88391) * C106914) *
               C141327 * C141298 * C816 -
           ((C84843 + C84844) * C106914 + C84838 * C141505 +
            (C72317 + C72316) * C141508) *
               C141327 * C141298 * C141497) *
              C818 +
          (((C72320 + C72321) * C141508 + (C80229 + C80230) * C141505 +
            (C71447 * C13206 + C81465 + C81465 + C71442 * C13212 +
             C71449 * C13207 + C81466 + C81466 + C141224 * C13213) *
                C106914) *
               C141327 * C141298 * C141497 -
           ((C71449 * C5327 + C81464 + C81464 + C141224 * C5335 +
             C71447 * C5326 + C81463 + C81463 + C71442 * C5334) *
                C106914 +
            (C81478 + C81477) * C141505 +
            (C71449 * C110 + C71462 + C71462 + C141224 * C122 + C71447 * C109 +
             C71463 + C71463 + C71442 * C121) *
                C141508) *
               C141327 * C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C71448 +
             (C188 * C114 + C141327 * C195) * C71442 + C218 * C71450 +
             C219 * C141224) *
                C141508 +
            (C15877 * C71448 + C15878 * C71442 + C1715 * C71450 +
             C1714 * C141224) *
                C141505 +
            (C21152 * C71448 + C21151 * C71442 + C15882 * C71450 +
             C15881 * C141224) *
                C106914) *
               C141298 * C816 -
           ((C43791 * C141224 + C43792 * C71450 + C47417 * C71442 +
             C47416 * C71448) *
                C106914 +
            (C14850 * C141224 + C14851 * C71450 + C18489 * C71442 +
             C18488 * C71448) *
                C141505 +
            (C936 * C141224 + C937 * C71450 +
             (C188 * C828 + C141327 * C917) * C71442 +
             (C188 * C823 + C141327 * C912) * C71448) *
                C141508) *
               C141298 * C141497) *
              C818 +
          (((C937 * C71448 + C936 * C71442 + C935 * C71450 + C934 * C141224) *
                C141508 +
            (C14851 * C71448 + C14850 * C71442 + C14849 * C71450 +
             C14848 * C141224) *
                C141505 +
            (C43792 * C71448 + C43791 * C71442 +
             (C188 * C13207 + C141327 * C13296) * C71450 +
             (C188 * C13210 + C141327 * C13299) * C141224) *
                C106914) *
               C141298 * C141497 -
           ((C15879 * C141224 + C15880 * C71450 + C15881 * C71442 +
             C15882 * C71448) *
                C106914 +
            (C1712 * C141224 + C1713 * C71450 + C1714 * C71442 +
             C1715 * C71448) *
                C141505 +
            (C221 * C141224 + C220 * C71450 + C219 * C71442 + C218 * C71448) *
                C141508) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[100] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                        C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                           C71448 +
                       (C107065 * C114 + C141508 * C282 + C107066 * C1606 +
                        C141505 * C1789 + C107067 * C5329 + C106914 * C5453) *
                           C71442 +
                       (C107093 + C107094 + C107095) * C71450 +
                       (C107096 + C107097 + C107098) * C141224) *
                          C141327 * C141298 * C816 -
                      ((C107930 + C107931 + C107932) * C141224 +
                       (C107933 + C107934 + C107935) * C71450 +
                       (C107067 * C13208 + C106914 * C13377 + C107066 * C3494 +
                        C141505 * C3650 + C107065 * C828 + C141508 * C1011) *
                           C71442 +
                       (C107067 * C13205 + C106914 * C13374 + C107066 * C3490 +
                        C141505 * C3646 + C107065 * C823 + C141508 * C1006) *
                           C71448) *
                          C141327 * C141298 * C141497) *
                         C818 +
                     (((C107935 + C107934 + C107933) * C71448 +
                       (C107932 + C107931 + C107930) * C71442 +
                       (C107065 * C821 + C141508 * C1004 + C107066 * C3492 +
                        C141505 * C3648 + C107067 * C13207 + C106914 * C13376) *
                           C71450 +
                       (C107065 * C826 + C141508 * C1009 + C107066 * C3496 +
                        C141505 * C3652 + C107067 * C13210 + C106914 * C13379) *
                           C141224) *
                          C141327 * C141298 * C141497 -
                      ((C107099 + C107100 + C107101) * C141224 +
                       (C107102 + C107103 + C107104) * C71450 +
                       (C107098 + C107097 + C107096) * C71442 +
                       (C107095 + C107094 + C107093) * C71448) *
                          C141327 * C141298 * C816) *
                         C141495)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C188 +
             (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                 C141327) *
                C141508 +
            ((C81925 + C81926) * C188 + (C81927 + C81928) * C141327) * C141505 +
            ((C88710 + C88709) * C188 + (C88708 + C88707) * C141327) *
                C106914) *
               C141298 * C816 -
           (((C85259 + C85260) * C141327 + (C85261 + C85262) * C188) * C106914 +
            (C85257 * C141327 + C85258 * C188) * C141505 +
            ((C72687 + C72686) * C141327 + (C72685 + C72684) * C188) *
                C141508) *
               C141298 * C141497) *
              C818 +
          ((((C72692 + C72693) * C188 + (C72694 + C72695) * C141327) * C141508 +
            ((C80645 + C80646) * C188 + (C80647 + C80648) * C141327) * C141505 +
            ((C71448 * C13206 + C71442 * C13209 + C71450 * C13207 +
              C141224 * C13210) *
                 C188 +
             (C71448 * C13295 + C71442 * C13455 + C71450 * C13296 +
              C141224 * C13456) *
                 C141327) *
                C106914) *
               C141298 * C141497 -
           (((C71450 * C5393 + C141224 * C5509 + C71448 * C5392 +
              C71442 * C5508) *
                 C141327 +
             (C71450 * C5327 + C141224 * C5331 + C71448 * C5326 +
              C71442 * C5330) *
                 C188) *
                C106914 +
            ((C81932 + C81931) * C141327 + (C81930 + C81929) * C188) * C141505 +
            ((C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                 C141327 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C188) *
                C141508) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C71442 +
             C448 * C141224) *
                C141508 +
            (C16256 * C71442 + C1971 * C141224) * C141505 +
            (C21416 * C71442 + C16258 * C141224) * C106914) *
               C141298 * C816 -
           ((C44109 * C141224 + C47739 * C71442) * C106914 +
            (C15179 * C141224 + C18795 * C71442) * C141505 +
            (C1193 * C141224 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C71442) *
                C141508) *
               C141298 * C141497) *
              C818 +
          (((C1193 * C71442 + C1192 * C141224) * C141508 +
            (C15179 * C71442 + C15178 * C141224) * C141505 +
            (C44109 * C71442 +
             (C418 * C13207 + C18792 + C18792 + C141327 * C13533) * C141224) *
                C106914) *
               C141298 * C141497 -
           ((C16257 * C141224 + C16258 * C71442) * C106914 +
            (C1970 * C141224 + C1971 * C71442) * C141505 +
            (C449 * C141224 + C448 * C71442) * C141508) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
              C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                 C188 +
             (C107065 * C189 + C141508 * C501 + C107066 * C1690 +
              C141505 * C2040 + C107067 * C5391 + C106914 * C5619) *
                 C141327) *
                C71442 +
            ((C107093 + C107094 + C107095) * C188 +
             (C107339 + C107340 + C107341) * C141327) *
                C141224) *
               C141298 * C816 -
           (((C108236 + C108237 + C108238) * C141327 +
             (C107933 + C107934 + C107935) * C188) *
                C141224 +
            ((C107067 * C13294 + C106914 * C13614 + C107066 * C3572 +
              C141505 * C3864 + C107065 * C912 + C141508 * C1262) *
                 C141327 +
             (C107067 * C13205 + C106914 * C13374 + C107066 * C3490 +
              C141505 * C3646 + C107065 * C823 + C141508 * C1006) *
                 C188) *
                C71442) *
               C141298 * C141497) *
              C818 +
          ((((C107935 + C107934 + C107933) * C188 +
             (C108238 + C108237 + C108236) * C141327) *
                C71442 +
            ((C107065 * C821 + C141508 * C1004 + C107066 * C3492 +
              C141505 * C3648 + C107067 * C13207 + C106914 * C13376) *
                 C188 +
             (C107065 * C910 + C141508 * C1260 + C107066 * C3574 +
              C141505 * C3866 + C107067 * C13296 + C106914 * C13616) *
                 C141327) *
                C141224) *
               C141298 * C141497 -
           (((C107342 + C107343 + C107344) * C141327 +
             (C107102 + C107103 + C107104) * C188) *
                C141224 +
            ((C107341 + C107340 + C107339) * C141327 +
             (C107095 + C107094 + C107093) * C188) *
                C71442) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C107065 +
            (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                C141508 +
            (C81925 + C81926) * C107066 + (C82359 + C82360) * C141505 +
            (C88710 + C88709) * C107067 + (C89024 + C89023) * C106914) *
               C141327 * C141298 * C816 -
           ((C85673 + C85674) * C106914 + (C85261 + C85262) * C107067 +
            C85672 * C141505 + C85258 * C107066 + (C73041 + C73040) * C141508 +
            (C72685 + C72684) * C107065) *
               C141327 * C141298 * C141497) *
              C818 +
          (((C72692 + C72693) * C107065 + (C73044 + C73045) * C141508 +
            (C80645 + C80646) * C107066 + (C81055 + C81056) * C141505 +
            (C71448 * C13206 + C71442 * C13209 + C71450 * C13207 +
             C141224 * C13210) *
                C107067 +
            (C71448 * C13375 + C71442 * C13692 + C71450 * C13376 +
             C141224 * C13693) *
                C106914) *
               C141327 * C141298 * C141497 -
           ((C71450 * C5451 + C141224 * C5675 + C71448 * C5450 +
             C71442 * C5674) *
                C106914 +
            (C71450 * C5327 + C141224 * C5331 + C71448 * C5326 +
             C71442 * C5330) *
                C107067 +
            (C82362 + C82361) * C141505 + (C81930 + C81929) * C107066 +
            (C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                C141508 +
            (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                C107065) *
               C141327 * C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C107065 +
             (C188 * C276 + C141327 * C635) * C141508 + C15877 * C107066 +
             C16596 * C141505 + C21152 * C107067 + C21660 * C106914) *
                C71442 +
            (C107493 + C107494 + C107495 + C107496 + C107497 + C107498) *
                C141224) *
               C141298 * C816 -
           ((C108435 + C108436 + C108437 + C108438 + C108439 + C108440) *
                C141224 +
            (C48046 * C106914 + C47416 * C107067 + C19093 * C141505 +
             C18488 * C107066 + (C188 * C1006 + C141327 * C1419) * C141508 +
             (C188 * C823 + C141327 * C912) * C107065) *
                C71442) *
               C141298 * C141497) *
              C818 +
          (((C108440 + C108439 + C108438 + C108437 + C108436 + C108435) *
                C71442 +
            (C935 * C107065 + C1432 * C141508 + C14849 * C107066 +
             C15496 * C141505 + (C188 * C13207 + C141327 * C13296) * C107067 +
             (C188 * C13376 + C141327 * C13770) * C106914) *
                C141224) *
               C141298 * C141497 -
           ((C107499 + C107500 + C107501 + C107502 + C107503 + C107504) *
                C141224 +
            (C107498 + C107497 + C107496 + C107495 + C107494 + C107493) *
                C71442) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C107578 * C108 + C107582 + C107582 + C141508 * C714 +
             C107579 * C1601 + C107583 + C107583 + C141505 * C2283 +
             C107580 * C5325 + C107584 + C107584 + C106914 * C5781) *
                C141327 * C71442 +
            (C107618 + C107619 + C107620) * C141327 * C141224) *
               C141298 * C816 -
           ((C108560 + C108561 + C108562) * C141327 * C141224 +
            (C107580 * C13205 + C108548 + C108548 + C106914 * C13845 +
             C107579 * C3490 + C108549 + C108549 + C141505 * C4074 +
             C107578 * C823 + C108550 + C108550 + C141508 * C1505) *
                C141327 * C71442) *
               C141298 * C141497) *
              C818 +
          (((C108562 + C108561 + C108560) * C141327 * C71442 +
            (C107578 * C821 + C108551 + C108551 + C141508 * C1503 +
             C107579 * C3492 + C108552 + C108552 + C141505 * C4076 +
             C107580 * C13207 + C108553 + C108553 + C106914 * C13847) *
                C141327 * C141224) *
               C141298 * C141497 -
           ((C107621 + C107622 + C107623) * C141327 * C141224 +
            (C107620 + C107619 + C107618) * C141327 * C71442) *
               C141298 * C816) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
             C71453 + C71453 + C141224 * C121) *
                C141508 +
            (C81475 + C81476) * C141505 + (C88392 + C88391) * C106914) *
               C141327 * C1596 -
           ((C71449 * C21036 + C88384 + C88384 + C141224 * C21042 +
             C71447 * C21035 + C88383 + C88383 + C71442 * C21041) *
                C106914 +
            (C88391 + C88392) * C141505 + (C81476 + C81475) * C141508) *
               C141327 * C141499) *
              C141281 * C818 +
          (((C81477 + C81478) * C141508 + (C108671 + C108672) * C141505 +
            (C71447 * C21036 + C108665 + C108665 + C71442 * C21042 +
             C71449 * C21037 + C108666 + C108666 + C141224 * C21043) *
                C106914) *
               C141327 * C141499 -
           ((C108672 + C108671) * C106914 + (C81478 + C81477) * C141505 +
            (C71449 * C110 + C71462 + C71462 + C141224 * C122 + C71447 * C109 +
             C71463 + C71463 + C71442 * C121) *
                C141508) *
               C141327 * C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C71448 +
             (C188 * C114 + C141327 * C195) * C71442 + C218 * C71450 +
             C219 * C141224) *
                C141508 +
            (C108771 + C108772 + C108773 + C108774) * C141505 +
            (C108775 + C108776 + C108777 + C108778) * C106914) *
               C1596 -
           ((C44804 * C141224 + C44805 * C71450 + C50095 * C71442 +
             C50096 * C71448) *
                C106914 +
            (C108778 + C108777 + C108776 + C108775) * C141505 +
            (C108774 + C108773 + C108772 + C108771) * C141508) *
               C141499) *
              C141281 * C818 +
          (((C108779 + C108780 + C108781 + C108782) * C141508 +
            (C108783 + C108784 + C108785 + C108786) * C141505 +
            (C44805 * C71448 + C44804 * C71442 +
             (C188 * C21037 + C141327 * C21138) * C71450 +
             (C188 * C21040 + C141327 * C21141) * C141224) *
                C106914) *
               C141499 -
           ((C108786 + C108785 + C108784 + C108783) * C106914 +
            (C108782 + C108781 + C108780 + C108779) * C141505 +
            (C221 * C141224 + C220 * C71450 + C219 * C71442 + C218 * C71448) *
                C141508) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[101] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                        C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                           C71448 +
                       (C107065 * C114 + C141508 * C282 + C107066 * C1606 +
                        C141505 * C1789 + C107067 * C5329 + C106914 * C5453) *
                           C71442 +
                       (C107093 + C107094 + C107095) * C71450 +
                       (C107096 + C107097 + C107098) * C141224) *
                          C141327 * C1596 -
                      ((C108897 + C108898 + C108899) * C141224 +
                       (C108900 + C108901 + C108902) * C71450 +
                       (C107067 * C21038 + C106914 * C21231 + C107066 * C5329 +
                        C141505 * C5453 + C107065 * C1606 + C141508 * C1789) *
                           C71442 +
                       (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
                        C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                           C71448) *
                          C141327 * C141499) *
                         C141281 * C818 +
                     (((C108902 + C108901 + C108900) * C71448 +
                       (C108899 + C108898 + C108897) * C71442 +
                       (C107065 * C1599 + C141508 * C1782 + C107066 * C5327 +
                        C141505 * C5451 + C107067 * C21037 + C106914 * C21230) *
                           C71450 +
                       (C107065 * C1604 + C141508 * C1787 + C107066 * C5331 +
                        C141505 * C5455 + C107067 * C21040 + C106914 * C21233) *
                           C141224) *
                          C141327 * C141499 -
                      ((C107099 + C107100 + C107101) * C141224 +
                       (C107102 + C107103 + C107104) * C71450 +
                       (C107098 + C107097 + C107096) * C71442 +
                       (C107095 + C107094 + C107093) * C71448) *
                          C141327 * C1596) *
                         C141281 * C141495)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C188 +
             (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                 C141327) *
                C141508 +
            ((C81925 + C81926) * C188 + (C81927 + C81928) * C141327) * C141505 +
            ((C88710 + C88709) * C188 + (C88708 + C88707) * C141327) *
                C106914) *
               C1596 -
           (((C71450 * C21137 + C141224 * C21309 + C71448 * C21136 +
              C71442 * C21308) *
                 C141327 +
             (C71450 * C21036 + C141224 * C21039 + C71448 * C21035 +
              C71442 * C21038) *
                 C188) *
                C106914 +
            ((C88707 + C88708) * C141327 + (C88709 + C88710) * C188) * C141505 +
            ((C81928 + C81927) * C141327 + (C81926 + C81925) * C188) *
                C141508) *
               C141499) *
              C141281 * C818 +
          ((((C81929 + C81930) * C188 + (C81931 + C81932) * C141327) * C141508 +
            ((C109009 + C109010) * C188 + (C109011 + C109012) * C141327) *
                C141505 +
            ((C71448 * C21036 + C71442 * C21039 + C71450 * C21037 +
              C141224 * C21040) *
                 C188 +
             (C71448 * C21137 + C71442 * C21309 + C71450 * C21138 +
              C141224 * C21310) *
                 C141327) *
                C106914) *
               C141499 -
           (((C109012 + C109011) * C141327 + (C109010 + C109009) * C188) *
                C106914 +
            ((C81932 + C81931) * C141327 + (C81930 + C81929) * C188) * C141505 +
            ((C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                 C141327 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C188) *
                C141508) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C71442 +
             C448 * C141224) *
                C141508 +
            (C109111 + C109112) * C141505 + (C109113 + C109114) * C106914) *
               C1596 -
           ((C45178 * C141224 + C50355 * C71442) * C106914 +
            (C109114 + C109113) * C141505 + (C109112 + C109111) * C141508) *
               C141499) *
              C141281 * C818 +
          (((C109115 + C109116) * C141508 + (C109117 + C109118) * C141505 +
            (C45178 * C71442 +
             (C418 * C21037 + C21413 + C21413 + C141327 * C21405) * C141224) *
                C106914) *
               C141499 -
           ((C109118 + C109117) * C106914 + (C109116 + C109115) * C141505 +
            (C449 * C141224 + C448 * C71442) * C141508) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
              C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                 C188 +
             (C107065 * C189 + C141508 * C501 + C107066 * C1690 +
              C141505 * C2040 + C107067 * C5391 + C106914 * C5619) *
                 C141327) *
                C71442 +
            ((C107093 + C107094 + C107095) * C188 +
             (C107339 + C107340 + C107341) * C141327) *
                C141224) *
               C1596 -
           (((C109223 + C109224 + C109225) * C141327 +
             (C108900 + C108901 + C108902) * C188) *
                C141224 +
            ((C107067 * C21136 + C106914 * C21491 + C107066 * C5391 +
              C141505 * C5619 + C107065 * C1690 + C141508 * C2040) *
                 C141327 +
             (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
              C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                 C188) *
                C71442) *
               C141499) *
              C141281 * C818 +
          ((((C108902 + C108901 + C108900) * C188 +
             (C109225 + C109224 + C109223) * C141327) *
                C71442 +
            ((C107065 * C1599 + C141508 * C1782 + C107066 * C5327 +
              C141505 * C5451 + C107067 * C21037 + C106914 * C21230) *
                 C188 +
             (C107065 * C1688 + C141508 * C2038 + C107066 * C5393 +
              C141505 * C5621 + C107067 * C21138 + C106914 * C21493) *
                 C141327) *
                C141224) *
               C141499 -
           (((C107342 + C107343 + C107344) * C141327 +
             (C107102 + C107103 + C107104) * C188) *
                C141224 +
            ((C107341 + C107340 + C107339) * C141327 +
             (C107095 + C107094 + C107093) * C188) *
                C71442) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C107065 +
            (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                C141508 +
            (C81925 + C81926) * C107066 + (C82359 + C82360) * C141505 +
            (C88710 + C88709) * C107067 + (C89024 + C89023) * C106914) *
               C141327 * C1596 -
           ((C71450 * C21229 + C141224 * C21569 + C71448 * C21228 +
             C71442 * C21568) *
                C106914 +
            (C71450 * C21036 + C141224 * C21039 + C71448 * C21035 +
             C71442 * C21038) *
                C107067 +
            (C89023 + C89024) * C141505 + (C88709 + C88710) * C107066 +
            (C82360 + C82359) * C141508 + (C81926 + C81925) * C107065) *
               C141327 * C141499) *
              C141281 * C818 +
          (((C81929 + C81930) * C107065 + (C82361 + C82362) * C141508 +
            (C109009 + C109010) * C107066 + (C109328 + C109329) * C141505 +
            (C71448 * C21036 + C71442 * C21039 + C71450 * C21037 +
             C141224 * C21040) *
                C107067 +
            (C71448 * C21229 + C71442 * C21569 + C71450 * C21230 +
             C141224 * C21570) *
                C106914) *
               C141327 * C141499 -
           ((C109329 + C109328) * C106914 + (C109010 + C109009) * C107067 +
            (C82362 + C82361) * C141505 + (C81930 + C81929) * C107066 +
            (C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                C141508 +
            (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                C107065) *
               C141327 * C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C107065 +
             (C188 * C276 + C141327 * C635) * C141508 + C15877 * C107066 +
             C16596 * C141505 + C21152 * C107067 + C21660 * C106914) *
                C71442 +
            (C107493 + C107494 + C107495 + C107496 + C107497 + C107498) *
                C141224) *
               C1596 -
           ((C109428 + C109429 + C109430 + C109431 + C109432 + C109433) *
                C141224 +
            (C50594 * C106914 + C50096 * C107067 + C21660 * C141505 +
             C21152 * C107066 + C16596 * C141508 + C15877 * C107065) *
                C71442) *
               C141499) *
              C141281 * C818 +
          (((C109433 + C109432 + C109431 + C109430 + C109429 + C109428) *
                C71442 +
            (C1713 * C107065 + C2210 * C141508 + C15880 * C107066 +
             C16597 * C141505 + (C188 * C21037 + C141327 * C21138) * C107067 +
             (C188 * C21230 + C141327 * C21656) * C106914) *
                C141224) *
               C141499 -
           ((C107499 + C107500 + C107501 + C107502 + C107503 + C107504) *
                C141224 +
            (C107498 + C107497 + C107496 + C107495 + C107494 + C107493) *
                C71442) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C107578 * C108 + C107582 + C107582 + C141508 * C714 +
             C107579 * C1601 + C107583 + C107583 + C141505 * C2283 +
             C107580 * C5325 + C107584 + C107584 + C106914 * C5781) *
                C141327 * C71442 +
            (C107618 + C107619 + C107620) * C141327 * C141224) *
               C1596 -
           ((C109553 + C109554 + C109555) * C141327 * C141224 +
            (C107580 * C21035 + C109541 + C109541 + C106914 * C21734 +
             C107579 * C5325 + C109542 + C109542 + C141505 * C5781 +
             C107578 * C1601 + C109543 + C109543 + C141508 * C2283) *
                C141327 * C71442) *
               C141499) *
              C141281 * C818 +
          (((C109555 + C109554 + C109553) * C141327 * C71442 +
            (C107578 * C1599 + C109544 + C109544 + C141508 * C2281 +
             C107579 * C5327 + C109545 + C109545 + C141505 * C5783 +
             C107580 * C21037 + C109546 + C109546 + C106914 * C21736) *
                C141327 * C141224) *
               C141499 -
           ((C107621 + C107622 + C107623) * C141327 * C141224 +
            (C107620 + C107619 + C107618) * C141327 * C71442) *
               C1596) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
             C71453 + C71453 + C141224 * C121) *
                C141508 +
            (C81475 + C81476) * C141505 + (C88392 + C88391) * C106914) *
               C141327 * C141298 * C2374 -
           ((C84843 + C84844) * C106914 + C84838 * C141505 +
            (C72317 + C72316) * C141508) *
               C141327 * C141298 * C141497) *
              C2376 +
          (((C72320 + C72321) * C141508 + (C80229 + C80230) * C141505 +
            (C71447 * C13206 + C81465 + C81465 + C71442 * C13212 +
             C71449 * C13207 + C81466 + C81466 + C141224 * C13213) *
                C106914) *
               C141327 * C141298 * C141497 -
           ((C108672 + C108671) * C106914 + (C81478 + C81477) * C141505 +
            (C71449 * C110 + C71462 + C71462 + C141224 * C122 + C71447 * C109 +
             C71463 + C71463 + C71442 * C121) *
                C141508) *
               C141327 * C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C71448 +
             (C188 * C114 + C141327 * C195) * C71442 + C218 * C71450 +
             C219 * C141224) *
                C141508 +
            (C108771 + C108772 + C108773 + C108774) * C141505 +
            (C108775 + C108776 + C108777 + C108778) * C106914) *
               C141298 * C2374 -
           ((C43791 * C141224 + C43792 * C71450 + C47417 * C71442 +
             C47416 * C71448) *
                C106914 +
            (C14850 * C141224 + C14851 * C71450 + C18489 * C71442 +
             C18488 * C71448) *
                C141505 +
            (C936 * C141224 + C937 * C71450 +
             (C188 * C828 + C141327 * C917) * C71442 +
             (C188 * C823 + C141327 * C912) * C71448) *
                C141508) *
               C141298 * C141497) *
              C2376 +
          (((C937 * C71448 + C936 * C71442 + C935 * C71450 + C934 * C141224) *
                C141508 +
            (C14851 * C71448 + C14850 * C71442 + C14849 * C71450 +
             C14848 * C141224) *
                C141505 +
            (C43792 * C71448 + C43791 * C71442 +
             (C188 * C13207 + C141327 * C13296) * C71450 +
             (C188 * C13210 + C141327 * C13299) * C141224) *
                C106914) *
               C141298 * C141497 -
           ((C108786 + C108785 + C108784 + C108783) * C106914 +
            (C108782 + C108781 + C108780 + C108779) * C141505 +
            (C221 * C141224 + C220 * C71450 + C219 * C71442 + C218 * C71448) *
                C141508) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[102] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                        C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                           C71448 +
                       (C107065 * C114 + C141508 * C282 + C107066 * C1606 +
                        C141505 * C1789 + C107067 * C5329 + C106914 * C5453) *
                           C71442 +
                       (C107093 + C107094 + C107095) * C71450 +
                       (C107096 + C107097 + C107098) * C141224) *
                          C141327 * C141298 * C2374 -
                      ((C107930 + C107931 + C107932) * C141224 +
                       (C107933 + C107934 + C107935) * C71450 +
                       (C107067 * C13208 + C106914 * C13377 + C107066 * C3494 +
                        C141505 * C3650 + C107065 * C828 + C141508 * C1011) *
                           C71442 +
                       (C107067 * C13205 + C106914 * C13374 + C107066 * C3490 +
                        C141505 * C3646 + C107065 * C823 + C141508 * C1006) *
                           C71448) *
                          C141327 * C141298 * C141497) *
                         C2376 +
                     (((C107935 + C107934 + C107933) * C71448 +
                       (C107932 + C107931 + C107930) * C71442 +
                       (C107065 * C821 + C141508 * C1004 + C107066 * C3492 +
                        C141505 * C3648 + C107067 * C13207 + C106914 * C13376) *
                           C71450 +
                       (C107065 * C826 + C141508 * C1009 + C107066 * C3496 +
                        C141505 * C3652 + C107067 * C13210 + C106914 * C13379) *
                           C141224) *
                          C141327 * C141298 * C141497 -
                      ((C107099 + C107100 + C107101) * C141224 +
                       (C107102 + C107103 + C107104) * C71450 +
                       (C107098 + C107097 + C107096) * C71442 +
                       (C107095 + C107094 + C107093) * C71448) *
                          C141327 * C141298 * C2374) *
                         C141495)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C188 +
             (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                 C141327) *
                C141508 +
            ((C81925 + C81926) * C188 + (C81927 + C81928) * C141327) * C141505 +
            ((C88710 + C88709) * C188 + (C88708 + C88707) * C141327) *
                C106914) *
               C141298 * C2374 -
           (((C85259 + C85260) * C141327 + (C85261 + C85262) * C188) * C106914 +
            (C85257 * C141327 + C85258 * C188) * C141505 +
            ((C72687 + C72686) * C141327 + (C72685 + C72684) * C188) *
                C141508) *
               C141298 * C141497) *
              C2376 +
          ((((C72692 + C72693) * C188 + (C72694 + C72695) * C141327) * C141508 +
            ((C80645 + C80646) * C188 + (C80647 + C80648) * C141327) * C141505 +
            ((C71448 * C13206 + C71442 * C13209 + C71450 * C13207 +
              C141224 * C13210) *
                 C188 +
             (C71448 * C13295 + C71442 * C13455 + C71450 * C13296 +
              C141224 * C13456) *
                 C141327) *
                C106914) *
               C141298 * C141497 -
           (((C109012 + C109011) * C141327 + (C109010 + C109009) * C188) *
                C106914 +
            ((C81932 + C81931) * C141327 + (C81930 + C81929) * C188) * C141505 +
            ((C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                 C141327 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C188) *
                C141508) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C71442 +
             C448 * C141224) *
                C141508 +
            (C109111 + C109112) * C141505 + (C109113 + C109114) * C106914) *
               C141298 * C2374 -
           ((C44109 * C141224 + C47739 * C71442) * C106914 +
            (C15179 * C141224 + C18795 * C71442) * C141505 +
            (C1193 * C141224 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C71442) *
                C141508) *
               C141298 * C141497) *
              C2376 +
          (((C1193 * C71442 + C1192 * C141224) * C141508 +
            (C15179 * C71442 + C15178 * C141224) * C141505 +
            (C44109 * C71442 +
             (C418 * C13207 + C18792 + C18792 + C141327 * C13533) * C141224) *
                C106914) *
               C141298 * C141497 -
           ((C109118 + C109117) * C106914 + (C109116 + C109115) * C141505 +
            (C449 * C141224 + C448 * C71442) * C141508) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
              C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                 C188 +
             (C107065 * C189 + C141508 * C501 + C107066 * C1690 +
              C141505 * C2040 + C107067 * C5391 + C106914 * C5619) *
                 C141327) *
                C71442 +
            ((C107093 + C107094 + C107095) * C188 +
             (C107339 + C107340 + C107341) * C141327) *
                C141224) *
               C141298 * C2374 -
           (((C108236 + C108237 + C108238) * C141327 +
             (C107933 + C107934 + C107935) * C188) *
                C141224 +
            ((C107067 * C13294 + C106914 * C13614 + C107066 * C3572 +
              C141505 * C3864 + C107065 * C912 + C141508 * C1262) *
                 C141327 +
             (C107067 * C13205 + C106914 * C13374 + C107066 * C3490 +
              C141505 * C3646 + C107065 * C823 + C141508 * C1006) *
                 C188) *
                C71442) *
               C141298 * C141497) *
              C2376 +
          ((((C107935 + C107934 + C107933) * C188 +
             (C108238 + C108237 + C108236) * C141327) *
                C71442 +
            ((C107065 * C821 + C141508 * C1004 + C107066 * C3492 +
              C141505 * C3648 + C107067 * C13207 + C106914 * C13376) *
                 C188 +
             (C107065 * C910 + C141508 * C1260 + C107066 * C3574 +
              C141505 * C3866 + C107067 * C13296 + C106914 * C13616) *
                 C141327) *
                C141224) *
               C141298 * C141497 -
           (((C107342 + C107343 + C107344) * C141327 +
             (C107102 + C107103 + C107104) * C188) *
                C141224 +
            ((C107341 + C107340 + C107339) * C141327 +
             (C107095 + C107094 + C107093) * C188) *
                C71442) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C107065 +
            (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                C141508 +
            (C81925 + C81926) * C107066 + (C82359 + C82360) * C141505 +
            (C88710 + C88709) * C107067 + (C89024 + C89023) * C106914) *
               C141327 * C141298 * C2374 -
           ((C85673 + C85674) * C106914 + (C85261 + C85262) * C107067 +
            C85672 * C141505 + C85258 * C107066 + (C73041 + C73040) * C141508 +
            (C72685 + C72684) * C107065) *
               C141327 * C141298 * C141497) *
              C2376 +
          (((C72692 + C72693) * C107065 + (C73044 + C73045) * C141508 +
            (C80645 + C80646) * C107066 + (C81055 + C81056) * C141505 +
            (C71448 * C13206 + C71442 * C13209 + C71450 * C13207 +
             C141224 * C13210) *
                C107067 +
            (C71448 * C13375 + C71442 * C13692 + C71450 * C13376 +
             C141224 * C13693) *
                C106914) *
               C141327 * C141298 * C141497 -
           ((C109329 + C109328) * C106914 + (C109010 + C109009) * C107067 +
            (C82362 + C82361) * C141505 + (C81930 + C81929) * C107066 +
            (C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                C141508 +
            (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                C107065) *
               C141327 * C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C107065 +
             (C188 * C276 + C141327 * C635) * C141508 + C15877 * C107066 +
             C16596 * C141505 + C21152 * C107067 + C21660 * C106914) *
                C71442 +
            (C107493 + C107494 + C107495 + C107496 + C107497 + C107498) *
                C141224) *
               C141298 * C2374 -
           ((C108435 + C108436 + C108437 + C108438 + C108439 + C108440) *
                C141224 +
            (C48046 * C106914 + C47416 * C107067 + C19093 * C141505 +
             C18488 * C107066 + (C188 * C1006 + C141327 * C1419) * C141508 +
             (C188 * C823 + C141327 * C912) * C107065) *
                C71442) *
               C141298 * C141497) *
              C2376 +
          (((C108440 + C108439 + C108438 + C108437 + C108436 + C108435) *
                C71442 +
            (C935 * C107065 + C1432 * C141508 + C14849 * C107066 +
             C15496 * C141505 + (C188 * C13207 + C141327 * C13296) * C107067 +
             (C188 * C13376 + C141327 * C13770) * C106914) *
                C141224) *
               C141298 * C141497 -
           ((C107499 + C107500 + C107501 + C107502 + C107503 + C107504) *
                C141224 +
            (C107498 + C107497 + C107496 + C107495 + C107494 + C107493) *
                C71442) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[102] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C107578 * C108 + C107582 + C107582 + C141508 * C714 +
             C107579 * C1601 + C107583 + C107583 + C141505 * C2283 +
             C107580 * C5325 + C107584 + C107584 + C106914 * C5781) *
                C141327 * C71442 +
            (C107618 + C107619 + C107620) * C141327 * C141224) *
               C141298 * C2374 -
           ((C108560 + C108561 + C108562) * C141327 * C141224 +
            (C107580 * C13205 + C108548 + C108548 + C106914 * C13845 +
             C107579 * C3490 + C108549 + C108549 + C141505 * C4074 +
             C107578 * C823 + C108550 + C108550 + C141508 * C1505) *
                C141327 * C71442) *
               C141298 * C141497) *
              C2376 +
          (((C108562 + C108561 + C108560) * C141327 * C71442 +
            (C107578 * C821 + C108551 + C108551 + C141508 * C1503 +
             C107579 * C3492 + C108552 + C108552 + C141505 * C4076 +
             C107580 * C13207 + C108553 + C108553 + C106914 * C13847) *
                C141327 * C141224) *
               C141298 * C141497 -
           ((C107621 + C107622 + C107623) * C141327 * C141224 +
            (C107620 + C107619 + C107618) * C141327 * C71442) *
               C141298 * C2374) *
              C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
            C71453 + C71453 + C141224 * C121) *
               C141508 +
           (C81475 + C81476) * C141505 + (C88392 + C88391) * C106914) *
              C141327 * C141298 * C2956 -
          ((C84843 + C84844) * C106914 + C84838 * C141505 +
           (C72317 + C72316) * C141508) *
              C141327 * C141298 * C2957 +
          (C75166 * C141508 + (C75926 + C75925) * C141505 +
           (C71447 * C29087 + C78605 + C78605 + C71442 * C29091 +
            C71449 * C29088 + C78606 + C78606 + C141224 * C29092) *
               C106914) *
              C141327 * C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[103] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C188 * C108 + C141327 * C189) * C71448 +
                       (C188 * C114 + C141327 * C195) * C71442 + C218 * C71450 +
                       C219 * C141224) *
                          C141508 +
                      (C108771 + C108772 + C108773 + C108774) * C141505 +
                      (C108775 + C108776 + C108777 + C108778) * C106914) *
                         C141298 * C2956 -
                     ((C43791 * C141224 + C43792 * C71450 + C47417 * C71442 +
                       C47416 * C71448) *
                          C106914 +
                      (C14850 * C141224 + C14851 * C71450 + C18489 * C71442 +
                       C18488 * C71448) *
                          C141505 +
                      (C936 * C141224 + C937 * C71450 +
                       (C188 * C828 + C141327 * C917) * C71442 +
                       (C188 * C823 + C141327 * C912) * C71448) *
                          C141508) *
                         C141298 * C2957 +
                     (((C188 * C2960 + C141327 * C3026) * C71448 +
                       (C188 * C2964 + C141327 * C3030) * C71442 +
                       (C188 * C2961 + C141327 * C3027) * C71450 +
                       (C188 * C2965 + C141327 * C3031) * C141224) *
                          C141508 +
                      ((C188 * C10470 + C141327 * C10595) * C71448 +
                       (C188 * C10473 + C141327 * C10598) * C71442 +
                       (C188 * C10471 + C141327 * C10596) * C71450 +
                       (C188 * C10474 + C141327 * C10599) * C141224) *
                          C141505 +
                      ((C188 * C29087 + C141327 * C29173) * C71448 +
                       (C188 * C29089 + C141327 * C29175) * C71442 +
                       (C188 * C29088 + C141327 * C29174) * C71450 +
                       (C188 * C29090 + C141327 * C29176) * C141224) *
                          C106914) *
                         C141298 * C2958) *
                    C141247) /
                   (p * q * std::sqrt(p + q));
    d2eexz[103] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                       C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                          C71448 +
                      (C107065 * C114 + C141508 * C282 + C107066 * C1606 +
                       C141505 * C1789 + C107067 * C5329 + C106914 * C5453) *
                          C71442 +
                      (C107093 + C107094 + C107095) * C71450 +
                      (C107096 + C107097 + C107098) * C141224) *
                         C141327 * C141298 * C2956 -
                     ((C107930 + C107931 + C107932) * C141224 +
                      (C107933 + C107934 + C107935) * C71450 +
                      (C107067 * C13208 + C106914 * C13377 + C107066 * C3494 +
                       C141505 * C3650 + C107065 * C828 + C141508 * C1011) *
                          C71442 +
                      (C107067 * C13205 + C106914 * C13374 + C107066 * C3490 +
                       C141505 * C3646 + C107065 * C823 + C141508 * C1006) *
                          C71448) *
                         C141327 * C141298 * C2957 +
                     ((C107065 * C2960 + C141508 * C3084 + C107066 * C10470 +
                       C141505 * C10699 + C107067 * C29087 + C106914 * C29251) *
                          C71448 +
                      (C107065 * C2964 + C141508 * C3088 + C107066 * C10473 +
                       C141505 * C10702 + C107067 * C29089 + C106914 * C29253) *
                          C71442 +
                      (C107065 * C2961 + C141508 * C3085 + C107066 * C10471 +
                       C141505 * C10700 + C107067 * C29088 + C106914 * C29252) *
                          C71450 +
                      (C107065 * C2965 + C141508 * C3089 + C107066 * C10474 +
                       C141505 * C10703 + C107067 * C29090 + C106914 * C29254) *
                          C141224) *
                         C141327 * C141298 * C2958) *
                    C141247) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C188 +
            (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                C141327) *
               C141508 +
           ((C81925 + C81926) * C188 + (C81927 + C81928) * C141327) * C141505 +
           ((C88710 + C88709) * C188 + (C88708 + C88707) * C141327) * C106914) *
              C141298 * C2956 -
          (((C85259 + C85260) * C141327 + (C85261 + C85262) * C188) * C106914 +
           (C85257 * C141327 + C85258 * C188) * C141505 +
           ((C72687 + C72686) * C141327 + (C72685 + C72684) * C188) * C141508) *
              C141298 * C2957 +
          ((C75409 * C188 + C75410 * C141327) * C141508 +
           ((C76250 + C76249) * C188 + (C76248 + C76247) * C141327) * C141505 +
           ((C71448 * C29087 + C71442 * C29089 + C71450 * C29088 +
             C141224 * C29090) *
                C188 +
            (C71448 * C29173 + C71442 * C29329 + C71450 * C29174 +
             C141224 * C29330) *
                C141327) *
               C106914) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C71442 +
            C448 * C141224) *
               C141508 +
           (C109111 + C109112) * C141505 + (C109113 + C109114) * C106914) *
              C141298 * C2956 -
          ((C44109 * C141224 + C47739 * C71442) * C106914 +
           (C15179 * C141224 + C18795 * C71442) * C141505 +
           (C1193 * C141224 +
            (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C71442) *
               C141508) *
              C141298 * C2957 +
          (((C418 * C2960 + C3201 + C3201 + C141327 * C3196) * C71442 +
            (C418 * C2961 + C3202 + C3202 + C141327 * C3197) * C141224) *
               C141508 +
           ((C418 * C10470 + C17979 + C17979 + C141327 * C10934) * C71442 +
            (C418 * C10471 + C17980 + C17980 + C141327 * C10935) * C141224) *
               C141505 +
           ((C418 * C29087 + C46889 + C46889 + C141327 * C29405) * C71442 +
            (C418 * C29088 + C46890 + C46890 + C141327 * C29406) * C141224) *
               C106914) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
             C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                C188 +
            (C107065 * C189 + C141508 * C501 + C107066 * C1690 +
             C141505 * C2040 + C107067 * C5391 + C106914 * C5619) *
                C141327) *
               C71442 +
           ((C107093 + C107094 + C107095) * C188 +
            (C107339 + C107340 + C107341) * C141327) *
               C141224) *
              C141298 * C2956 -
          (((C108236 + C108237 + C108238) * C141327 +
            (C107933 + C107934 + C107935) * C188) *
               C141224 +
           ((C107067 * C13294 + C106914 * C13614 + C107066 * C3572 +
             C141505 * C3864 + C107065 * C912 + C141508 * C1262) *
                C141327 +
            (C107067 * C13205 + C106914 * C13374 + C107066 * C3490 +
             C141505 * C3646 + C107065 * C823 + C141508 * C1006) *
                C188) *
               C71442) *
              C141298 * C2957 +
          (((C107065 * C2960 + C141508 * C3084 + C107066 * C10470 +
             C141505 * C10699 + C107067 * C29087 + C106914 * C29251) *
                C188 +
            (C107065 * C3026 + C141508 * C3254 + C107066 * C10595 +
             C141505 * C11041 + C107067 * C29173 + C106914 * C29487) *
                C141327) *
               C71442 +
           ((C107065 * C2961 + C141508 * C3085 + C107066 * C10471 +
             C141505 * C10700 + C107067 * C29088 + C106914 * C29252) *
                C188 +
            (C107065 * C3027 + C141508 * C3255 + C107066 * C10596 +
             C141505 * C11042 + C107067 * C29174 + C106914 * C29488) *
                C141327) *
               C141224) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
               C107065 +
           (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
               C141508 +
           (C81925 + C81926) * C107066 + (C82359 + C82360) * C141505 +
           (C88710 + C88709) * C107067 + (C89024 + C89023) * C106914) *
              C141327 * C141298 * C2956 -
          ((C85673 + C85674) * C106914 + (C85261 + C85262) * C107067 +
           C85672 * C141505 + C85258 * C107066 + (C73041 + C73040) * C141508 +
           (C72685 + C72684) * C107065) *
              C141327 * C141298 * C2957 +
          (C75409 * C107065 + C75652 * C141508 + (C76250 + C76249) * C107066 +
           (C76564 + C76563) * C141505 +
           (C71448 * C29087 + C71442 * C29089 + C71450 * C29088 +
            C141224 * C29090) *
               C107067 +
           (C71448 * C29251 + C71442 * C29563 + C71450 * C29252 +
            C141224 * C29564) *
               C106914) *
              C141327 * C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C107065 +
            (C188 * C276 + C141327 * C635) * C141508 + C15877 * C107066 +
            C16596 * C141505 + C21152 * C107067 + C21660 * C106914) *
               C71442 +
           (C107493 + C107494 + C107495 + C107496 + C107497 + C107498) *
               C141224) *
              C141298 * C2956 -
          ((C108435 + C108436 + C108437 + C108438 + C108439 + C108440) *
               C141224 +
           (C48046 * C106914 + C47416 * C107067 + C19093 * C141505 +
            C18488 * C107066 + (C188 * C1006 + C141327 * C1419) * C141508 +
            (C188 * C823 + C141327 * C912) * C107065) *
               C71442) *
              C141298 * C2957 +
          (((C188 * C2960 + C141327 * C3026) * C107065 +
            (C188 * C3084 + C141327 * C3362) * C141508 +
            (C188 * C10470 + C141327 * C10595) * C107066 +
            (C188 * C10699 + C141327 * C11255) * C141505 +
            (C188 * C29087 + C141327 * C29173) * C107067 +
            (C188 * C29251 + C141327 * C29639) * C106914) *
               C71442 +
           ((C188 * C2961 + C141327 * C3027) * C107065 +
            (C188 * C3085 + C141327 * C3363) * C141508 +
            (C188 * C10471 + C141327 * C10596) * C107066 +
            (C188 * C10700 + C141327 * C11256) * C141505 +
            (C188 * C29088 + C141327 * C29174) * C107067 +
            (C188 * C29252 + C141327 * C29640) * C106914) *
               C141224) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C107578 * C108 + C107582 + C107582 + C141508 * C714 +
            C107579 * C1601 + C107583 + C107583 + C141505 * C2283 +
            C107580 * C5325 + C107584 + C107584 + C106914 * C5781) *
               C141327 * C71442 +
           (C107618 + C107619 + C107620) * C141327 * C141224) *
              C141298 * C2956 -
          ((C108560 + C108561 + C108562) * C141327 * C141224 +
           (C107580 * C13205 + C108548 + C108548 + C106914 * C13845 +
            C107579 * C3490 + C108549 + C108549 + C141505 * C4074 +
            C107578 * C823 + C108550 + C108550 + C141508 * C1505) *
               C141327 * C71442) *
              C141298 * C2957 +
          ((C107578 * C2960 + C111104 + C111104 + C141508 * C3416 +
            C107579 * C10470 + C111105 + C111105 + C141505 * C11356 +
            C107580 * C29087 + C111106 + C111106 + C106914 * C29715) *
               C141327 * C71442 +
           (C107578 * C2961 + C111107 + C111107 + C141508 * C3417 +
            C107579 * C10471 + C111108 + C111108 + C141505 * C11357 +
            C107580 * C29088 + C111109 + C111109 + C106914 * C29716) *
               C141327 * C141224) *
              C141298 * C2958) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
             C71453 + C71453 + C141224 * C121) *
                C141508 +
            (C81475 + C81476) * C141505 + (C88392 + C88391) * C106914) *
               C141327 * C1596 -
           ((C71449 * C21036 + C88384 + C88384 + C141224 * C21042 +
             C71447 * C21035 + C88383 + C88383 + C71442 * C21041) *
                C106914 +
            (C88391 + C88392) * C141505 + (C81476 + C81475) * C141508) *
               C141327 * C141499) *
              C2374 +
          ((C84833 * C141508 + (C84844 + C84843) * C141505 +
            (C71447 * C42109 + C88385 + C88385 + C71442 * C42113 +
             C71449 * C47290 + C88386 + C88386 + C141224 * C47292) *
                C106914) *
               C141327 * C141499 -
           ((C84843 + C84844) * C106914 + C84838 * C141505 +
            (C72317 + C72316) * C141508) *
               C141327 * C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[104] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C188 * C108 + C141327 * C189) * C71448 +
                        (C188 * C114 + C141327 * C195) * C71442 +
                        C218 * C71450 + C219 * C141224) *
                           C141508 +
                       (C108771 + C108772 + C108773 + C108774) * C141505 +
                       (C108775 + C108776 + C108777 + C108778) * C106914) *
                          C1596 -
                      ((C44804 * C141224 + C44805 * C71450 + C50095 * C71442 +
                        C50096 * C71448) *
                           C106914 +
                       (C108778 + C108777 + C108776 + C108775) * C141505 +
                       (C108774 + C108773 + C108772 + C108771) * C141508) *
                          C141499) *
                         C2374 +
                     (((C111306 + C111307 + C111308 + C111309) * C141508 +
                       (C111310 + C111311 + C111312 + C111313) * C141505 +
                       (C61349 * C71448 + C61350 * C71442 +
                        (C188 * C47290 + C141327 * C47403) * C71450 +
                        (C188 * C47291 + C141327 * C47404) * C141224) *
                           C106914) *
                          C141499 -
                      ((C111313 + C111312 + C111311 + C111310) * C106914 +
                       (C111309 + C111308 + C111307 + C111306) * C141505 +
                       (C936 * C141224 + C937 * C71450 +
                        (C188 * C828 + C141327 * C917) * C71442 +
                        (C188 * C823 + C141327 * C912) * C71448) *
                           C141508) *
                          C1596) *
                         C141497) *
                    C141247) /
                   (p * q * std::sqrt(p + q));
    d2eexz[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
             C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                C71448 +
            (C107065 * C114 + C141508 * C282 + C107066 * C1606 +
             C141505 * C1789 + C107067 * C5329 + C106914 * C5453) *
                C71442 +
            (C107093 + C107094 + C107095) * C71450 +
            (C107096 + C107097 + C107098) * C141224) *
               C141327 * C1596 -
           ((C108897 + C108898 + C108899) * C141224 +
            (C108900 + C108901 + C108902) * C71450 +
            (C107067 * C21038 + C106914 * C21231 + C107066 * C5329 +
             C141505 * C5453 + C107065 * C1606 + C141508 * C1789) *
                C71442 +
            (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
             C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                C71448) *
               C141327 * C141499) *
              C2374 +
          (((C107065 * C3490 + C141508 * C3646 + C107066 * C13205 +
             C141505 * C13374 + C107067 * C42109 + C106914 * C42293) *
                C71448 +
            (C107065 * C3494 + C141508 * C3650 + C107066 * C13208 +
             C141505 * C13377 + C107067 * C42111 + C106914 * C42295) *
                C71442 +
            (C107065 * C3491 + C141508 * C3647 + C107066 * C13206 +
             C141505 * C13375 + C107067 * C47290 + C106914 * C47517) *
                C71450 +
            (C107065 * C3495 + C141508 * C3651 + C107066 * C13209 +
             C141505 * C13378 + C107067 * C47291 + C106914 * C47518) *
                C141224) *
               C141327 * C141499 -
           ((C107930 + C107931 + C107932) * C141224 +
            (C107933 + C107934 + C107935) * C71450 +
            (C107067 * C13208 + C106914 * C13377 + C107066 * C3494 +
             C141505 * C3650 + C107065 * C828 + C141508 * C1011) *
                C71442 +
            (C107067 * C13205 + C106914 * C13374 + C107066 * C3490 +
             C141505 * C3646 + C107065 * C823 + C141508 * C1006) *
                C71448) *
               C141327 * C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C188 +
             (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                 C141327) *
                C141508 +
            ((C81925 + C81926) * C188 + (C81927 + C81928) * C141327) * C141505 +
            ((C88710 + C88709) * C188 + (C88708 + C88707) * C141327) *
                C106914) *
               C1596 -
           (((C71450 * C21137 + C141224 * C21309 + C71448 * C21136 +
              C71442 * C21308) *
                 C141327 +
             (C71450 * C21036 + C141224 * C21039 + C71448 * C21035 +
              C71442 * C21038) *
                 C188) *
                C106914 +
            ((C88707 + C88708) * C141327 + (C88709 + C88710) * C188) * C141505 +
            ((C81928 + C81927) * C141327 + (C81926 + C81925) * C188) *
                C141508) *
               C141499) *
              C2374 +
          (((C85247 * C188 + C85248 * C141327) * C141508 +
            ((C85262 + C85261) * C188 + (C85260 + C85259) * C141327) * C141505 +
            ((C71448 * C42109 + C71442 * C42111 + C71450 * C47290 +
              C141224 * C47291) *
                 C188 +
             (C71448 * C42197 + C71442 * C42371 + C71450 * C47403 +
              C141224 * C47617) *
                 C141327) *
                C106914) *
               C141499 -
           (((C85259 + C85260) * C141327 + (C85261 + C85262) * C188) * C106914 +
            (C85257 * C141327 + C85258 * C188) * C141505 +
            ((C72687 + C72686) * C141327 + (C72685 + C72684) * C188) *
                C141508) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C71442 +
             C448 * C141224) *
                C141508 +
            (C109111 + C109112) * C141505 + (C109113 + C109114) * C106914) *
               C1596 -
           ((C45178 * C141224 + C50355 * C71442) * C106914 +
            (C109114 + C109113) * C141505 + (C109112 + C109111) * C141508) *
               C141499) *
              C2374 +
          (((C111608 + C111609) * C141508 + (C111610 + C111611) * C141505 +
            (C61564 * C71442 +
             (C418 * C47290 + C47736 + C47736 + C141327 * C47728) * C141224) *
                C106914) *
               C141499 -
           ((C111611 + C111610) * C106914 + (C111609 + C111608) * C141505 +
            (C1193 * C141224 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C71442) *
                C141508) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
              C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                 C188 +
             (C107065 * C189 + C141508 * C501 + C107066 * C1690 +
              C141505 * C2040 + C107067 * C5391 + C106914 * C5619) *
                 C141327) *
                C71442 +
            ((C107093 + C107094 + C107095) * C188 +
             (C107339 + C107340 + C107341) * C141327) *
                C141224) *
               C1596 -
           (((C109223 + C109224 + C109225) * C141327 +
             (C108900 + C108901 + C108902) * C188) *
                C141224 +
            ((C107067 * C21136 + C106914 * C21491 + C107066 * C5391 +
              C141505 * C5619 + C107065 * C1690 + C141508 * C2040) *
                 C141327 +
             (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
              C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                 C188) *
                C71442) *
               C141499) *
              C2374 +
          ((((C107065 * C3490 + C141508 * C3646 + C107066 * C13205 +
              C141505 * C13374 + C107067 * C42109 + C106914 * C42293) *
                 C188 +
             (C107065 * C3572 + C141508 * C3864 + C107066 * C13294 +
              C141505 * C13614 + C107067 * C42197 + C106914 * C42553) *
                 C141327) *
                C71442 +
            ((C107065 * C3491 + C141508 * C3647 + C107066 * C13206 +
              C141505 * C13375 + C107067 * C47290 + C106914 * C47517) *
                 C188 +
             (C107065 * C3573 + C141508 * C3865 + C107066 * C13295 +
              C141505 * C13615 + C107067 * C47403 + C106914 * C47838) *
                 C141327) *
                C141224) *
               C141499 -
           (((C108236 + C108237 + C108238) * C141327 +
             (C107933 + C107934 + C107935) * C188) *
                C141224 +
            ((C107067 * C13294 + C106914 * C13614 + C107066 * C3572 +
              C141505 * C3864 + C107065 * C912 + C141508 * C1262) *
                 C141327 +
             (C107067 * C13205 + C106914 * C13374 + C107066 * C3490 +
              C141505 * C3646 + C107065 * C823 + C141508 * C1006) *
                 C188) *
                C71442) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C107065 +
            (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                C141508 +
            (C81925 + C81926) * C107066 + (C82359 + C82360) * C141505 +
            (C88710 + C88709) * C107067 + (C89024 + C89023) * C106914) *
               C141327 * C1596 -
           ((C71450 * C21229 + C141224 * C21569 + C71448 * C21228 +
             C71442 * C21568) *
                C106914 +
            (C71450 * C21036 + C141224 * C21039 + C71448 * C21035 +
             C71442 * C21038) *
                C107067 +
            (C89023 + C89024) * C141505 + (C88709 + C88710) * C107066 +
            (C82360 + C82359) * C141508 + (C81926 + C81925) * C107065) *
               C141327 * C141499) *
              C2374 +
          ((C85247 * C107065 + C85667 * C141508 + (C85262 + C85261) * C107066 +
            (C85674 + C85673) * C141505 +
            (C71448 * C42109 + C71442 * C42111 + C71450 * C47290 +
             C141224 * C47291) *
                C107067 +
            (C71448 * C42293 + C71442 * C42629 + C71450 * C47517 +
             C141224 * C47937) *
                C106914) *
               C141327 * C141499 -
           ((C85673 + C85674) * C106914 + (C85261 + C85262) * C107067 +
            C85672 * C141505 + C85258 * C107066 + (C73041 + C73040) * C141508 +
            (C72685 + C72684) * C107065) *
               C141327 * C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C107065 +
             (C188 * C276 + C141327 * C635) * C141508 + C15877 * C107066 +
             C16596 * C141505 + C21152 * C107067 + C21660 * C106914) *
                C71442 +
            (C107493 + C107494 + C107495 + C107496 + C107497 + C107498) *
                C141224) *
               C1596 -
           ((C109428 + C109429 + C109430 + C109431 + C109432 + C109433) *
                C141224 +
            (C50594 * C106914 + C50096 * C107067 + C21660 * C141505 +
             C21152 * C107066 + C16596 * C141508 + C15877 * C107065) *
                C71442) *
               C141499) *
              C2374 +
          (((C18488 * C107065 + C19093 * C141508 + C47416 * C107066 +
             C48046 * C141505 + C61349 * C107067 + C61766 * C106914) *
                C71442 +
            (C14851 * C107065 + C15497 * C141508 + C43792 * C107066 +
             C44420 * C141505 + (C188 * C47290 + C141327 * C47403) * C107067 +
             (C188 * C47517 + C141327 * C48042) * C106914) *
                C141224) *
               C141499 -
           ((C108435 + C108436 + C108437 + C108438 + C108439 + C108440) *
                C141224 +
            (C48046 * C106914 + C47416 * C107067 + C19093 * C141505 +
             C18488 * C107066 + (C188 * C1006 + C141327 * C1419) * C141508 +
             (C188 * C823 + C141327 * C912) * C107065) *
                C71442) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[104] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C107578 * C108 + C107582 + C107582 + C141508 * C714 +
             C107579 * C1601 + C107583 + C107583 + C141505 * C2283 +
             C107580 * C5325 + C107584 + C107584 + C106914 * C5781) *
                C141327 * C71442 +
            (C107618 + C107619 + C107620) * C141327 * C141224) *
               C1596 -
           ((C109553 + C109554 + C109555) * C141327 * C141224 +
            (C107580 * C21035 + C109541 + C109541 + C106914 * C21734 +
             C107579 * C5325 + C109542 + C109542 + C141505 * C5781 +
             C107578 * C1601 + C109543 + C109543 + C141508 * C2283) *
                C141327 * C71442) *
               C141499) *
              C2374 +
          (((C107578 * C3490 + C112004 + C112004 + C141508 * C4074 +
             C107579 * C13205 + C112005 + C112005 + C141505 * C13845 +
             C107580 * C42109 + C112006 + C112006 + C106914 * C42793) *
                C141327 * C71442 +
            (C107578 * C3491 + C112007 + C112007 + C141508 * C4075 +
             C107579 * C13206 + C112008 + C112008 + C141505 * C13846 +
             C107580 * C47290 + C112009 + C112009 + C106914 * C48144) *
                C141327 * C141224) *
               C141499 -
           ((C108560 + C108561 + C108562) * C141327 * C141224 +
            (C107580 * C13205 + C108548 + C108548 + C106914 * C13845 +
             C107579 * C3490 + C108549 + C108549 + C141505 * C4074 +
             C107578 * C823 + C108550 + C108550 + C141508 * C1505) *
                C141327 * C71442) *
               C1596) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
             C71453 + C71453 + C141224 * C121) *
                C141508 +
            (C81475 + C81476) * C141505 + (C88392 + C88391) * C106914) *
               C141327 * C4148 -
           ((C71449 * C21036 + C88384 + C88384 + C141224 * C21042 +
             C71447 * C21035 + C88383 + C88383 + C71442 * C21041) *
                C106914 +
            (C88391 + C88392) * C141505 + (C81476 + C81475) * C141508) *
               C141327 * C141499) *
              C141281 * C2376 +
          (((C81477 + C81478) * C141508 + (C108671 + C108672) * C141505 +
            (C71447 * C21036 + C108665 + C108665 + C71442 * C21042 +
             C71449 * C21037 + C108666 + C108666 + C141224 * C21043) *
                C106914) *
               C141327 * C141499 -
           ((C108672 + C108671) * C106914 + (C81478 + C81477) * C141505 +
            (C71449 * C110 + C71462 + C71462 + C141224 * C122 + C71447 * C109 +
             C71463 + C71463 + C71442 * C121) *
                C141508) *
               C141327 * C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexy[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C71448 +
             (C188 * C114 + C141327 * C195) * C71442 + C218 * C71450 +
             C219 * C141224) *
                C141508 +
            (C108771 + C108772 + C108773 + C108774) * C141505 +
            (C108775 + C108776 + C108777 + C108778) * C106914) *
               C4148 -
           ((C44804 * C141224 + C44805 * C71450 + C50095 * C71442 +
             C50096 * C71448) *
                C106914 +
            (C108778 + C108777 + C108776 + C108775) * C141505 +
            (C108774 + C108773 + C108772 + C108771) * C141508) *
               C141499) *
              C141281 * C2376 +
          (((C108779 + C108780 + C108781 + C108782) * C141508 +
            (C108783 + C108784 + C108785 + C108786) * C141505 +
            (C44805 * C71448 + C44804 * C71442 +
             (C188 * C21037 + C141327 * C21138) * C71450 +
             (C188 * C21040 + C141327 * C21141) * C141224) *
                C106914) *
               C141499 -
           ((C108786 + C108785 + C108784 + C108783) * C106914 +
            (C108782 + C108781 + C108780 + C108779) * C141505 +
            (C221 * C141224 + C220 * C71450 + C219 * C71442 + C218 * C71448) *
                C141508) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexz[105] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                        C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                           C71448 +
                       (C107065 * C114 + C141508 * C282 + C107066 * C1606 +
                        C141505 * C1789 + C107067 * C5329 + C106914 * C5453) *
                           C71442 +
                       (C107093 + C107094 + C107095) * C71450 +
                       (C107096 + C107097 + C107098) * C141224) *
                          C141327 * C4148 -
                      ((C108897 + C108898 + C108899) * C141224 +
                       (C108900 + C108901 + C108902) * C71450 +
                       (C107067 * C21038 + C106914 * C21231 + C107066 * C5329 +
                        C141505 * C5453 + C107065 * C1606 + C141508 * C1789) *
                           C71442 +
                       (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
                        C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                           C71448) *
                          C141327 * C141499) *
                         C141281 * C2376 +
                     (((C108902 + C108901 + C108900) * C71448 +
                       (C108899 + C108898 + C108897) * C71442 +
                       (C107065 * C1599 + C141508 * C1782 + C107066 * C5327 +
                        C141505 * C5451 + C107067 * C21037 + C106914 * C21230) *
                           C71450 +
                       (C107065 * C1604 + C141508 * C1787 + C107066 * C5331 +
                        C141505 * C5455 + C107067 * C21040 + C106914 * C21233) *
                           C141224) *
                          C141327 * C141499 -
                      ((C107099 + C107100 + C107101) * C141224 +
                       (C107102 + C107103 + C107104) * C71450 +
                       (C107098 + C107097 + C107096) * C71442 +
                       (C107095 + C107094 + C107093) * C71448) *
                          C141327 * C4148) *
                         C141281 * C141495)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C188 +
             (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                 C141327) *
                C141508 +
            ((C81925 + C81926) * C188 + (C81927 + C81928) * C141327) * C141505 +
            ((C88710 + C88709) * C188 + (C88708 + C88707) * C141327) *
                C106914) *
               C4148 -
           (((C71450 * C21137 + C141224 * C21309 + C71448 * C21136 +
              C71442 * C21308) *
                 C141327 +
             (C71450 * C21036 + C141224 * C21039 + C71448 * C21035 +
              C71442 * C21038) *
                 C188) *
                C106914 +
            ((C88707 + C88708) * C141327 + (C88709 + C88710) * C188) * C141505 +
            ((C81928 + C81927) * C141327 + (C81926 + C81925) * C188) *
                C141508) *
               C141499) *
              C141281 * C2376 +
          ((((C81929 + C81930) * C188 + (C81931 + C81932) * C141327) * C141508 +
            ((C109009 + C109010) * C188 + (C109011 + C109012) * C141327) *
                C141505 +
            ((C71448 * C21036 + C71442 * C21039 + C71450 * C21037 +
              C141224 * C21040) *
                 C188 +
             (C71448 * C21137 + C71442 * C21309 + C71450 * C21138 +
              C141224 * C21310) *
                 C141327) *
                C106914) *
               C141499 -
           (((C109012 + C109011) * C141327 + (C109010 + C109009) * C188) *
                C106914 +
            ((C81932 + C81931) * C141327 + (C81930 + C81929) * C188) * C141505 +
            ((C71450 * C191 + C141224 * C364 + C71448 * C190 + C71442 * C363) *
                 C141327 +
             (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                 C188) *
                C141508) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C71442 +
             C448 * C141224) *
                C141508 +
            (C109111 + C109112) * C141505 + (C109113 + C109114) * C106914) *
               C4148 -
           ((C45178 * C141224 + C50355 * C71442) * C106914 +
            (C109114 + C109113) * C141505 + (C109112 + C109111) * C141508) *
               C141499) *
              C141281 * C2376 +
          (((C109115 + C109116) * C141508 + (C109117 + C109118) * C141505 +
            (C45178 * C71442 +
             (C418 * C21037 + C21413 + C21413 + C141327 * C21405) * C141224) *
                C106914) *
               C141499 -
           ((C109118 + C109117) * C106914 + (C109116 + C109115) * C141505 +
            (C449 * C141224 + C448 * C71442) * C141508) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
              C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                 C188 +
             (C107065 * C189 + C141508 * C501 + C107066 * C1690 +
              C141505 * C2040 + C107067 * C5391 + C106914 * C5619) *
                 C141327) *
                C71442 +
            ((C107093 + C107094 + C107095) * C188 +
             (C107339 + C107340 + C107341) * C141327) *
                C141224) *
               C4148 -
           (((C109223 + C109224 + C109225) * C141327 +
             (C108900 + C108901 + C108902) * C188) *
                C141224 +
            ((C107067 * C21136 + C106914 * C21491 + C107066 * C5391 +
              C141505 * C5619 + C107065 * C1690 + C141508 * C2040) *
                 C141327 +
             (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
              C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                 C188) *
                C71442) *
               C141499) *
              C141281 * C2376 +
          ((((C108902 + C108901 + C108900) * C188 +
             (C109225 + C109224 + C109223) * C141327) *
                C71442 +
            ((C107065 * C1599 + C141508 * C1782 + C107066 * C5327 +
              C141505 * C5451 + C107067 * C21037 + C106914 * C21230) *
                 C188 +
             (C107065 * C1688 + C141508 * C2038 + C107066 * C5393 +
              C141505 * C5621 + C107067 * C21138 + C106914 * C21493) *
                 C141327) *
                C141224) *
               C141499 -
           (((C107342 + C107343 + C107344) * C141327 +
             (C107102 + C107103 + C107104) * C188) *
                C141224 +
            ((C107341 + C107340 + C107339) * C141327 +
             (C107095 + C107094 + C107093) * C188) *
                C71442) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezx[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C107065 +
            (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                C141508 +
            (C81925 + C81926) * C107066 + (C82359 + C82360) * C141505 +
            (C88710 + C88709) * C107067 + (C89024 + C89023) * C106914) *
               C141327 * C4148 -
           ((C71450 * C21229 + C141224 * C21569 + C71448 * C21228 +
             C71442 * C21568) *
                C106914 +
            (C71450 * C21036 + C141224 * C21039 + C71448 * C21035 +
             C71442 * C21038) *
                C107067 +
            (C89023 + C89024) * C141505 + (C88709 + C88710) * C107066 +
            (C82360 + C82359) * C141508 + (C81926 + C81925) * C107065) *
               C141327 * C141499) *
              C141281 * C2376 +
          (((C81929 + C81930) * C107065 + (C82361 + C82362) * C141508 +
            (C109009 + C109010) * C107066 + (C109328 + C109329) * C141505 +
            (C71448 * C21036 + C71442 * C21039 + C71450 * C21037 +
             C141224 * C21040) *
                C107067 +
            (C71448 * C21229 + C71442 * C21569 + C71450 * C21230 +
             C141224 * C21570) *
                C106914) *
               C141327 * C141499 -
           ((C109329 + C109328) * C106914 + (C109010 + C109009) * C107067 +
            (C82362 + C82361) * C141505 + (C81930 + C81929) * C107066 +
            (C71450 * C278 + C141224 * C581 + C71448 * C277 + C71442 * C580) *
                C141508 +
            (C71450 * C110 + C141224 * C116 + C71448 * C109 + C71442 * C115) *
                C107065) *
               C141327 * C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezy[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C107065 +
             (C188 * C276 + C141327 * C635) * C141508 + C15877 * C107066 +
             C16596 * C141505 + C21152 * C107067 + C21660 * C106914) *
                C71442 +
            (C107493 + C107494 + C107495 + C107496 + C107497 + C107498) *
                C141224) *
               C4148 -
           ((C109428 + C109429 + C109430 + C109431 + C109432 + C109433) *
                C141224 +
            (C50594 * C106914 + C50096 * C107067 + C21660 * C141505 +
             C21152 * C107066 + C16596 * C141508 + C15877 * C107065) *
                C71442) *
               C141499) *
              C141281 * C2376 +
          (((C109433 + C109432 + C109431 + C109430 + C109429 + C109428) *
                C71442 +
            (C1713 * C107065 + C2210 * C141508 + C15880 * C107066 +
             C16597 * C141505 + (C188 * C21037 + C141327 * C21138) * C107067 +
             (C188 * C21230 + C141327 * C21656) * C106914) *
                C141224) *
               C141499 -
           ((C107499 + C107500 + C107501 + C107502 + C107503 + C107504) *
                C141224 +
            (C107498 + C107497 + C107496 + C107495 + C107494 + C107493) *
                C71442) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eezz[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C107578 * C108 + C107582 + C107582 + C141508 * C714 +
             C107579 * C1601 + C107583 + C107583 + C141505 * C2283 +
             C107580 * C5325 + C107584 + C107584 + C106914 * C5781) *
                C141327 * C71442 +
            (C107618 + C107619 + C107620) * C141327 * C141224) *
               C4148 -
           ((C109553 + C109554 + C109555) * C141327 * C141224 +
            (C107580 * C21035 + C109541 + C109541 + C106914 * C21734 +
             C107579 * C5325 + C109542 + C109542 + C141505 * C5781 +
             C107578 * C1601 + C109543 + C109543 + C141508 * C2283) *
                C141327 * C71442) *
               C141499) *
              C141281 * C2376 +
          (((C109555 + C109554 + C109553) * C141327 * C71442 +
            (C107578 * C1599 + C109544 + C109544 + C141508 * C2281 +
             C107579 * C5327 + C109545 + C109545 + C141505 * C5783 +
             C107580 * C21037 + C109546 + C109546 + C106914 * C21736) *
                C141327 * C141224) *
               C141499 -
           ((C107621 + C107622 + C107623) * C141327 * C141224 +
            (C107620 + C107619 + C107618) * C141327 * C71442) *
               C4148) *
              C141281 * C141495)) /
        (p * q * std::sqrt(p + q));
    d2eexx[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
             C71453 + C71453 + C141224 * C121) *
                C141508 +
            (C81475 + C81476) * C141505 + (C88392 + C88391) * C106914) *
               C141327 * C4148 -
           ((C71449 * C21036 + C88384 + C88384 + C141224 * C21042 +
             C71447 * C21035 + C88383 + C88383 + C71442 * C21041) *
                C106914 +
            (C88391 + C88392) * C141505 + (C81476 + C81475) * C141508) *
               C141327 * C141499) *
              C816 +
          ((C84833 * C141508 + (C84844 + C84843) * C141505 +
            (C71447 * C42109 + C88385 + C88385 + C71442 * C42113 +
             C71449 * C47290 + C88386 + C88386 + C141224 * C47292) *
                C106914) *
               C141327 * C141499 -
           ((C84843 + C84844) * C106914 + C84838 * C141505 +
            (C72317 + C72316) * C141508) *
               C141327 * C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[106] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C188 * C108 + C141327 * C189) * C71448 +
                        (C188 * C114 + C141327 * C195) * C71442 +
                        C218 * C71450 + C219 * C141224) *
                           C141508 +
                       (C108771 + C108772 + C108773 + C108774) * C141505 +
                       (C108775 + C108776 + C108777 + C108778) * C106914) *
                          C4148 -
                      ((C44804 * C141224 + C44805 * C71450 + C50095 * C71442 +
                        C50096 * C71448) *
                           C106914 +
                       (C108778 + C108777 + C108776 + C108775) * C141505 +
                       (C108774 + C108773 + C108772 + C108771) * C141508) *
                          C141499) *
                         C816 +
                     (((C111306 + C111307 + C111308 + C111309) * C141508 +
                       (C111310 + C111311 + C111312 + C111313) * C141505 +
                       (C61349 * C71448 + C61350 * C71442 +
                        (C188 * C47290 + C141327 * C47403) * C71450 +
                        (C188 * C47291 + C141327 * C47404) * C141224) *
                           C106914) *
                          C141499 -
                      ((C111313 + C111312 + C111311 + C111310) * C106914 +
                       (C111309 + C111308 + C111307 + C111306) * C141505 +
                       (C936 * C141224 + C937 * C71450 +
                        (C188 * C828 + C141327 * C917) * C71442 +
                        (C188 * C823 + C141327 * C912) * C71448) *
                           C141508) *
                          C4148) *
                         C141497) *
                    C141247) /
                   (p * q * std::sqrt(p + q));
    d2eexz[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
             C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                C71448 +
            (C107065 * C114 + C141508 * C282 + C107066 * C1606 +
             C141505 * C1789 + C107067 * C5329 + C106914 * C5453) *
                C71442 +
            (C107093 + C107094 + C107095) * C71450 +
            (C107096 + C107097 + C107098) * C141224) *
               C141327 * C4148 -
           ((C108897 + C108898 + C108899) * C141224 +
            (C108900 + C108901 + C108902) * C71450 +
            (C107067 * C21038 + C106914 * C21231 + C107066 * C5329 +
             C141505 * C5453 + C107065 * C1606 + C141508 * C1789) *
                C71442 +
            (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
             C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                C71448) *
               C141327 * C141499) *
              C816 +
          (((C107065 * C3490 + C141508 * C3646 + C107066 * C13205 +
             C141505 * C13374 + C107067 * C42109 + C106914 * C42293) *
                C71448 +
            (C107065 * C3494 + C141508 * C3650 + C107066 * C13208 +
             C141505 * C13377 + C107067 * C42111 + C106914 * C42295) *
                C71442 +
            (C107065 * C3491 + C141508 * C3647 + C107066 * C13206 +
             C141505 * C13375 + C107067 * C47290 + C106914 * C47517) *
                C71450 +
            (C107065 * C3495 + C141508 * C3651 + C107066 * C13209 +
             C141505 * C13378 + C107067 * C47291 + C106914 * C47518) *
                C141224) *
               C141327 * C141499 -
           ((C107930 + C107931 + C107932) * C141224 +
            (C107933 + C107934 + C107935) * C71450 +
            (C107067 * C13208 + C106914 * C13377 + C107066 * C3494 +
             C141505 * C3650 + C107065 * C828 + C141508 * C1011) *
                C71442 +
            (C107067 * C13205 + C106914 * C13374 + C107066 * C3490 +
             C141505 * C3646 + C107065 * C823 + C141508 * C1006) *
                C71448) *
               C141327 * C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyx[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                 C188 +
             (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                 C141327) *
                C141508 +
            ((C81925 + C81926) * C188 + (C81927 + C81928) * C141327) * C141505 +
            ((C88710 + C88709) * C188 + (C88708 + C88707) * C141327) *
                C106914) *
               C4148 -
           (((C71450 * C21137 + C141224 * C21309 + C71448 * C21136 +
              C71442 * C21308) *
                 C141327 +
             (C71450 * C21036 + C141224 * C21039 + C71448 * C21035 +
              C71442 * C21038) *
                 C188) *
                C106914 +
            ((C88707 + C88708) * C141327 + (C88709 + C88710) * C188) * C141505 +
            ((C81928 + C81927) * C141327 + (C81926 + C81925) * C188) *
                C141508) *
               C141499) *
              C816 +
          (((C85247 * C188 + C85248 * C141327) * C141508 +
            ((C85262 + C85261) * C188 + (C85260 + C85259) * C141327) * C141505 +
            ((C71448 * C42109 + C71442 * C42111 + C71450 * C47290 +
              C141224 * C47291) *
                 C188 +
             (C71448 * C42197 + C71442 * C42371 + C71450 * C47403 +
              C141224 * C47617) *
                 C141327) *
                C106914) *
               C141499 -
           (((C85259 + C85260) * C141327 + (C85261 + C85262) * C188) * C106914 +
            (C85257 * C141327 + C85258 * C188) * C141505 +
            ((C72687 + C72686) * C141327 + (C72685 + C72684) * C188) *
                C141508) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C71442 +
             C448 * C141224) *
                C141508 +
            (C109111 + C109112) * C141505 + (C109113 + C109114) * C106914) *
               C4148 -
           ((C45178 * C141224 + C50355 * C71442) * C106914 +
            (C109114 + C109113) * C141505 + (C109112 + C109111) * C141508) *
               C141499) *
              C816 +
          (((C111608 + C111609) * C141508 + (C111610 + C111611) * C141505 +
            (C61564 * C71442 +
             (C418 * C47290 + C47736 + C47736 + C141327 * C47728) * C141224) *
                C106914) *
               C141499 -
           ((C111611 + C111610) * C106914 + (C111609 + C111608) * C141505 +
            (C1193 * C141224 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C71442) *
                C141508) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
              C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                 C188 +
             (C107065 * C189 + C141508 * C501 + C107066 * C1690 +
              C141505 * C2040 + C107067 * C5391 + C106914 * C5619) *
                 C141327) *
                C71442 +
            ((C107093 + C107094 + C107095) * C188 +
             (C107339 + C107340 + C107341) * C141327) *
                C141224) *
               C4148 -
           (((C109223 + C109224 + C109225) * C141327 +
             (C108900 + C108901 + C108902) * C188) *
                C141224 +
            ((C107067 * C21136 + C106914 * C21491 + C107066 * C5391 +
              C141505 * C5619 + C107065 * C1690 + C141508 * C2040) *
                 C141327 +
             (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
              C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                 C188) *
                C71442) *
               C141499) *
              C816 +
          ((((C107065 * C3490 + C141508 * C3646 + C107066 * C13205 +
              C141505 * C13374 + C107067 * C42109 + C106914 * C42293) *
                 C188 +
             (C107065 * C3572 + C141508 * C3864 + C107066 * C13294 +
              C141505 * C13614 + C107067 * C42197 + C106914 * C42553) *
                 C141327) *
                C71442 +
            ((C107065 * C3491 + C141508 * C3647 + C107066 * C13206 +
              C141505 * C13375 + C107067 * C47290 + C106914 * C47517) *
                 C188 +
             (C107065 * C3573 + C141508 * C3865 + C107066 * C13295 +
              C141505 * C13615 + C107067 * C47403 + C106914 * C47838) *
                 C141327) *
                C141224) *
               C141499 -
           (((C108236 + C108237 + C108238) * C141327 +
             (C107933 + C107934 + C107935) * C188) *
                C141224 +
            ((C107067 * C13294 + C106914 * C13614 + C107066 * C3572 +
              C141505 * C3864 + C107065 * C912 + C141508 * C1262) *
                 C141327 +
             (C107067 * C13205 + C106914 * C13374 + C107066 * C3490 +
              C141505 * C3646 + C107065 * C823 + C141508 * C1006) *
                 C188) *
                C71442) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C107065 +
            (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
                C141508 +
            (C81925 + C81926) * C107066 + (C82359 + C82360) * C141505 +
            (C88710 + C88709) * C107067 + (C89024 + C89023) * C106914) *
               C141327 * C4148 -
           ((C71450 * C21229 + C141224 * C21569 + C71448 * C21228 +
             C71442 * C21568) *
                C106914 +
            (C71450 * C21036 + C141224 * C21039 + C71448 * C21035 +
             C71442 * C21038) *
                C107067 +
            (C89023 + C89024) * C141505 + (C88709 + C88710) * C107066 +
            (C82360 + C82359) * C141508 + (C81926 + C81925) * C107065) *
               C141327 * C141499) *
              C816 +
          ((C85247 * C107065 + C85667 * C141508 + (C85262 + C85261) * C107066 +
            (C85674 + C85673) * C141505 +
            (C71448 * C42109 + C71442 * C42111 + C71450 * C47290 +
             C141224 * C47291) *
                C107067 +
            (C71448 * C42293 + C71442 * C42629 + C71450 * C47517 +
             C141224 * C47937) *
                C106914) *
               C141327 * C141499 -
           ((C85673 + C85674) * C106914 + (C85261 + C85262) * C107067 +
            C85672 * C141505 + C85258 * C107066 + (C73041 + C73040) * C141508 +
            (C72685 + C72684) * C107065) *
               C141327 * C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C107065 +
             (C188 * C276 + C141327 * C635) * C141508 + C15877 * C107066 +
             C16596 * C141505 + C21152 * C107067 + C21660 * C106914) *
                C71442 +
            (C107493 + C107494 + C107495 + C107496 + C107497 + C107498) *
                C141224) *
               C4148 -
           ((C109428 + C109429 + C109430 + C109431 + C109432 + C109433) *
                C141224 +
            (C50594 * C106914 + C50096 * C107067 + C21660 * C141505 +
             C21152 * C107066 + C16596 * C141508 + C15877 * C107065) *
                C71442) *
               C141499) *
              C816 +
          (((C18488 * C107065 + C19093 * C141508 + C47416 * C107066 +
             C48046 * C141505 + C61349 * C107067 + C61766 * C106914) *
                C71442 +
            (C14851 * C107065 + C15497 * C141508 + C43792 * C107066 +
             C44420 * C141505 + (C188 * C47290 + C141327 * C47403) * C107067 +
             (C188 * C47517 + C141327 * C48042) * C106914) *
                C141224) *
               C141499 -
           ((C108435 + C108436 + C108437 + C108438 + C108439 + C108440) *
                C141224 +
            (C48046 * C106914 + C47416 * C107067 + C19093 * C141505 +
             C18488 * C107066 + (C188 * C1006 + C141327 * C1419) * C141508 +
             (C188 * C823 + C141327 * C912) * C107065) *
                C71442) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C107578 * C108 + C107582 + C107582 + C141508 * C714 +
             C107579 * C1601 + C107583 + C107583 + C141505 * C2283 +
             C107580 * C5325 + C107584 + C107584 + C106914 * C5781) *
                C141327 * C71442 +
            (C107618 + C107619 + C107620) * C141327 * C141224) *
               C4148 -
           ((C109553 + C109554 + C109555) * C141327 * C141224 +
            (C107580 * C21035 + C109541 + C109541 + C106914 * C21734 +
             C107579 * C5325 + C109542 + C109542 + C141505 * C5781 +
             C107578 * C1601 + C109543 + C109543 + C141508 * C2283) *
                C141327 * C71442) *
               C141499) *
              C816 +
          (((C107578 * C3490 + C112004 + C112004 + C141508 * C4074 +
             C107579 * C13205 + C112005 + C112005 + C141505 * C13845 +
             C107580 * C42109 + C112006 + C112006 + C106914 * C42793) *
                C141327 * C71442 +
            (C107578 * C3491 + C112007 + C112007 + C141508 * C4075 +
             C107579 * C13206 + C112008 + C112008 + C141505 * C13846 +
             C107580 * C47290 + C112009 + C112009 + C106914 * C48144) *
                C141327 * C141224) *
               C141499 -
           ((C108560 + C108561 + C108562) * C141327 * C141224 +
            (C107580 * C13205 + C108548 + C108548 + C106914 * C13845 +
             C107579 * C3490 + C108549 + C108549 + C141505 * C4074 +
             C107578 * C823 + C108550 + C108550 + C141508 * C1505) *
                C141327 * C71442) *
               C4148) *
              C141497) *
         C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C71447 * C108 + C71452 + C71452 + C71442 * C120 + C71449 * C109 +
            C71453 + C71453 + C141224 * C121) *
               C141508 +
           (C81475 + C81476) * C141505 + C113848 * C106914) *
              C141327 * C5322 -
          ((C113859 + C113860) * C106914 + (C88391 + C88392) * C141505 +
           (C81476 + C81475) * C141508) *
              C141327 * C5323 +
          (C113848 * C141508 + (C113860 + C113859) * C141505 +
           (C71447 * C49989 + C113853 + C113853 + C71442 * C49993 +
            C71449 * C49990 + C113854 + C113854 + C141224 * C49994) *
               C106914) *
              C141327 * C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexy[107] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C188 * C108 + C141327 * C189) * C71448 +
                       (C188 * C114 + C141327 * C195) * C71442 + C218 * C71450 +
                       C219 * C141224) *
                          C141508 +
                      (C108771 + C108772 + C108773 + C108774) * C141505 +
                      C113941 * C106914) *
                         C5322 -
                     ((C113936 + C113937 + C113938 + C113939) * C106914 +
                      (C108778 + C108777 + C108776 + C108775) * C141505 +
                      (C108774 + C108773 + C108772 + C108771) * C141508) *
                         C5323 +
                     (C113941 * C141508 +
                      (C113939 + C113938 + C113937 + C113936) * C141505 +
                      (C63143 * C71448 + C63142 * C71442 +
                       (C188 * C49990 + C141327 * C50083) * C71450 +
                       (C188 * C49992 + C141327 * C50085) * C141224) *
                          C106914) *
                         C5324) *
                    C141281 * C141247) /
                   (p * q * std::sqrt(p + q));
    d2eexz[107] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
                       C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                          C71448 +
                      (C107065 * C114 + C141508 * C282 + C107066 * C1606 +
                       C141505 * C1789 + C107067 * C5329 + C106914 * C5453) *
                          C71442 +
                      (C107093 + C107094 + C107095) * C71450 +
                      (C107096 + C107097 + C107098) * C141224) *
                         C141327 * C5322 -
                     ((C108897 + C108898 + C108899) * C141224 +
                      (C108900 + C108901 + C108902) * C71450 +
                      (C107067 * C21038 + C106914 * C21231 + C107066 * C5329 +
                       C141505 * C5453 + C107065 * C1606 + C141508 * C1789) *
                          C71442 +
                      (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
                       C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                          C71448) *
                         C141327 * C5323 +
                     ((C107065 * C5325 + C141508 * C5449 + C107066 * C21035 +
                       C141505 * C21228 + C107067 * C49989 + C106914 * C50173) *
                          C71448 +
                      (C107065 * C5329 + C141508 * C5453 + C107066 * C21038 +
                       C141505 * C21231 + C107067 * C49991 + C106914 * C50175) *
                          C71442 +
                      (C107065 * C5326 + C141508 * C5450 + C107066 * C21036 +
                       C141505 * C21229 + C107067 * C49990 + C106914 * C50174) *
                          C71450 +
                      (C107065 * C5330 + C141508 * C5454 + C107066 * C21039 +
                       C141505 * C21232 + C107067 * C49992 + C106914 * C50176) *
                          C141224) *
                         C141327 * C5324) *
                    C141281 * C141247) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
                C188 +
            (C71448 * C189 + C71442 * C362 + C71450 * C190 + C141224 * C363) *
                C141327) *
               C141508 +
           ((C81925 + C81926) * C188 + (C81927 + C81928) * C141327) * C141505 +
           C114106 * C106914) *
              C5322 -
          (((C114102 + C114103) * C141327 + (C114104 + C114105) * C188) *
               C106914 +
           ((C88707 + C88708) * C141327 + (C88709 + C88710) * C188) * C141505 +
           ((C81928 + C81927) * C141327 + (C81926 + C81925) * C188) * C141508) *
              C5323 +
          (C114106 * C141508 +
           ((C114105 + C114104) * C188 + (C114103 + C114102) * C141327) *
               C141505 +
           ((C71448 * C49989 + C71442 * C49991 + C71450 * C49990 +
             C141224 * C49992) *
                C188 +
            (C71448 * C50082 + C71442 * C50251 + C71450 * C50083 +
             C141224 * C50252) *
                C141327) *
               C106914) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyy[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C71442 +
            C448 * C141224) *
               C141508 +
           (C109111 + C109112) * C141505 + C114181 * C106914) *
              C5322 -
          ((C114182 + C114183) * C106914 + (C109114 + C109113) * C141505 +
           (C109112 + C109111) * C141508) *
              C5323 +
          (C114181 * C141508 + (C114183 + C114182) * C141505 +
           (C63315 * C71442 +
            (C418 * C49990 + C50352 + C50352 + C141327 * C50345) * C141224) *
               C106914) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eeyz[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C107065 * C108 + C141508 * C276 + C107066 * C1601 +
             C141505 * C1784 + C107067 * C5325 + C106914 * C5449) *
                C188 +
            (C107065 * C189 + C141508 * C501 + C107066 * C1690 +
             C141505 * C2040 + C107067 * C5391 + C106914 * C5619) *
                C141327) *
               C71442 +
           ((C107093 + C107094 + C107095) * C188 +
            (C107339 + C107340 + C107341) * C141327) *
               C141224) *
              C5322 -
          (((C109223 + C109224 + C109225) * C141327 +
            (C108900 + C108901 + C108902) * C188) *
               C141224 +
           ((C107067 * C21136 + C106914 * C21491 + C107066 * C5391 +
             C141505 * C5619 + C107065 * C1690 + C141508 * C2040) *
                C141327 +
            (C107067 * C21035 + C106914 * C21228 + C107066 * C5325 +
             C141505 * C5449 + C107065 * C1601 + C141508 * C1784) *
                C188) *
               C71442) *
              C5323 +
          (((C107065 * C5325 + C141508 * C5449 + C107066 * C21035 +
             C141505 * C21228 + C107067 * C49989 + C106914 * C50173) *
                C188 +
            (C107065 * C5391 + C141508 * C5619 + C107066 * C21136 +
             C141505 * C21491 + C107067 * C50082 + C106914 * C50430) *
                C141327) *
               C71442 +
           ((C107065 * C5326 + C141508 * C5450 + C107066 * C21036 +
             C141505 * C21229 + C107067 * C49990 + C106914 * C50174) *
                C188 +
            (C107065 * C5392 + C141508 * C5620 + C107066 * C21137 +
             C141505 * C21492 + C107067 * C50083 + C106914 * C50431) *
                C141327) *
               C141224) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezx[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C71448 * C108 + C71442 * C114 + C71450 * C109 + C141224 * C115) *
               C107065 +
           (C71448 * C276 + C71442 * C579 + C71450 * C277 + C141224 * C580) *
               C141508 +
           (C81925 + C81926) * C107066 + (C82359 + C82360) * C141505 +
           C114090 * C107067 + C114332 * C106914) *
              C141327 * C5322 -
          ((C114337 + C114338) * C106914 + (C114104 + C114105) * C107067 +
           (C89023 + C89024) * C141505 + (C88709 + C88710) * C107066 +
           (C82360 + C82359) * C141508 + (C81926 + C81925) * C107065) *
              C141327 * C5323 +
          (C114090 * C107065 + C114332 * C141508 +
           (C114105 + C114104) * C107066 + (C114338 + C114337) * C141505 +
           (C71448 * C49989 + C71442 * C49991 + C71450 * C49990 +
            C141224 * C49992) *
               C107067 +
           (C71448 * C50173 + C71442 * C50506 + C71450 * C50174 +
            C141224 * C50507) *
               C106914) *
              C141327 * C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezy[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C107065 +
            (C188 * C276 + C141327 * C635) * C141508 + C15877 * C107066 +
            C16596 * C141505 + C21152 * C107067 + C21660 * C106914) *
               C71442 +
           (C107493 + C107494 + C107495 + C107496 + C107497 + C107498) *
               C141224) *
              C5322 -
          ((C109428 + C109429 + C109430 + C109431 + C109432 + C109433) *
               C141224 +
           (C50594 * C106914 + C50096 * C107067 + C21660 * C141505 +
            C21152 * C107066 + C16596 * C141508 + C15877 * C107065) *
               C71442) *
              C5323 +
          ((C21152 * C107065 + C21660 * C141508 + C50096 * C107066 +
            C50594 * C141505 + C63143 * C107067 + C63475 * C106914) *
               C71442 +
           (C15882 * C107065 + C16598 * C141508 + C44805 * C107066 +
            C45513 * C141505 + (C188 * C49990 + C141327 * C50083) * C107067 +
            (C188 * C50174 + C141327 * C50590) * C106914) *
               C141224) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eezz[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C107578 * C108 + C107582 + C107582 + C141508 * C714 +
            C107579 * C1601 + C107583 + C107583 + C141505 * C2283 +
            C107580 * C5325 + C107584 + C107584 + C106914 * C5781) *
               C141327 * C71442 +
           (C107618 + C107619 + C107620) * C141327 * C141224) *
              C5322 -
          ((C109553 + C109554 + C109555) * C141327 * C141224 +
           (C107580 * C21035 + C109541 + C109541 + C106914 * C21734 +
            C107579 * C5325 + C109542 + C109542 + C141505 * C5781 +
            C107578 * C1601 + C109543 + C109543 + C141508 * C2283) *
               C141327 * C71442) *
              C5323 +
          ((C107578 * C5325 + C114487 + C114487 + C141508 * C5781 +
            C107579 * C21035 + C114488 + C114488 + C141505 * C21734 +
            C107580 * C49989 + C114489 + C114489 + C106914 * C50668) *
               C141327 * C71442 +
           (C107578 * C5326 + C114490 + C114490 + C141508 * C5782 +
            C107579 * C21036 + C114491 + C114491 + C141505 * C21735 +
            C107580 * C49990 + C114492 + C114492 + C106914 * C50669) *
               C141327 * C141224) *
              C5324) *
         C141281 * C141247) /
        (p * q * std::sqrt(p + q));
    d2eexx[108] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 +
                      C128 + C128 + C90 * C121 + C104 * C110 + C129 + C129 +
                      C91 * C122 + C106 * C111 + C130 + C130 + C92 * C123) *
                         C141353 * C141327 * C141298 * C141281 * C97 -
                     (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 +
                      C132 + C132 + C91 * C123 + C102 * C110 + C133 + C133 +
                      C90 * C122 + C100 * C109 + C134 + C134 + C89 * C121) *
                         C141353 * C141327 * C141298 * C141281 * C98 +
                     (C100 * C110 + C135 + C135 + C89 * C122 + C102 * C111 +
                      C136 + C136 + C90 * C123 + C104 * C112 + C137 + C137 +
                      C91 * C124 + C106 * C113 + C138 + C138 + C92 * C125) *
                         C141353 * C141327 * C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C21822 * C108 + C21827 + C21827 + C141462 * C120 +
                       C21824 * C109 + C21828 + C21828 + C141224 * C121) *
                          C141353 * C21819 +
                      (C21822 * C823 + C21829 + C21829 + C141462 * C833 +
                       C21824 * C822 + C21830 + C21830 + C141224 * C832) *
                          C141353 * C21820 +
                      (C21822 * C2960 + C21831 + C21831 + C141462 * C2968 +
                       C21824 * C2961 + C21832 + C21832 + C141224 * C2969) *
                          C141353 * C21821) *
                         C141298 * C141281 * C97 -
                     ((C21824 * C2962 + C21833 + C21833 + C141224 * C2970 +
                       C21822 * C2961 + C21834 + C21834 + C141462 * C2969) *
                          C141353 * C21821 +
                      (C21824 * C821 + C21835 + C21835 + C141224 * C831 +
                       C21822 * C822 + C21836 + C21836 + C141462 * C832) *
                          C141353 * C21820 +
                      (C21824 * C110 + C21837 + C21837 + C141224 * C122 +
                       C21822 * C109 + C21838 + C21838 + C141462 * C121) *
                          C141353 * C21819) *
                         C141298 * C141281 * C98 +
                     ((C21822 * C110 + C21839 + C21839 + C141462 * C122 +
                       C21824 * C111 + C21840 + C21840 + C141224 * C123) *
                          C141353 * C21819 +
                      (C21822 * C821 + C21841 + C21841 + C141462 * C831 +
                       C21824 * C820 + C21842 + C21842 + C141224 * C830) *
                          C141353 * C21820 +
                      (C21822 * C2962 + C21843 + C21843 + C141462 * C2970 +
                       C21824 * C2963 + C21844 + C21844 + C141224 * C2971) *
                          C141353 * C21821) *
                         C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q));
    d2eexy[108] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C141327 * C189) * C101 +
           (C188 * C114 + C141327 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C141353 * C141298 * C141281 * C97 -
          (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
           C220 * C103 + C219 * C89 + C218 * C101) *
              C141353 * C141298 * C141281 * C98 +
          (C220 * C101 + C221 * C89 + C222 * C103 + C223 * C90 + C225 * C105 +
           C224 * C91 + (C188 * C113 + C141327 * C194) * C107 +
           (C188 * C119 + C141327 * C200) * C92) *
              C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
            C21920 * C2960 + C21821 * C3026) *
               C139366 +
           (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
            C21920 * C2964 + C21821 * C3030) *
               C141462 +
           (C21946 + C21947 + C21948) * C139356 +
           (C21949 + C21950 + C21951) * C141224) *
              C141353 * C141298 * C141281 * C97 -
          ((C21952 + C21953 + C21954) * C141224 +
           (C21955 + C21956 + C21957) * C139356 +
           (C21951 + C21950 + C21949) * C141462 +
           (C21948 + C21947 + C21946) * C139366) *
              C141353 * C141298 * C141281 * C98 +
          ((C21957 + C21956 + C21955) * C139366 +
           (C21954 + C21953 + C21952) * C141462 +
           (C21918 * C111 + C21819 * C192 + C21919 * C820 + C21820 * C909 +
            C21920 * C2963 + C21821 * C3029) *
               C139356 +
           (C21918 * C117 + C21819 * C198 + C21919 * C825 + C21820 * C914 +
            C21920 * C2967 + C21821 * C3033) *
               C141224) *
              C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexz[108] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C141353 * C276) * C101 +
           (C275 * C114 + C141353 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C141327 * C141298 * C141281 * C97 -
          (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
           C307 * C103 + C306 * C89 + C305 * C101) *
              C141327 * C141298 * C141281 * C98 +
          (C307 * C101 + C308 * C89 + C309 * C103 + C310 * C90 + C312 * C105 +
           C311 * C91 + (C275 * C113 + C141353 * C281) * C107 +
           (C275 * C119 + C141353 * C287) * C92) *
              C141327 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C139366 +
            (C275 * C114 + C141353 * C282) * C141462 + C305 * C139356 +
            C306 * C141224) *
               C21819 +
           (C6988 * C139366 + C6989 * C141462 + C1031 * C139356 +
            C1030 * C141224) *
               C21820 +
           (C9864 * C139366 + C9863 * C141462 + C6993 * C139356 +
            C6992 * C141224) *
               C21821) *
              C141298 * C141281 * C97 -
          ((C6990 * C141224 + C6991 * C139356 + C6992 * C141462 +
            C6993 * C139366) *
               C21821 +
           (C1028 * C141224 + C1029 * C139356 + C1030 * C141462 +
            C1031 * C139366) *
               C21820 +
           (C308 * C141224 + C307 * C139356 + C306 * C141462 + C305 * C139366) *
               C21819) *
              C141298 * C141281 * C98 +
          ((C307 * C139366 + C308 * C141462 + C309 * C139356 + C310 * C141224) *
               C21819 +
           (C1029 * C139366 + C1028 * C141462 + C1027 * C139356 +
            C1026 * C141224) *
               C21820 +
           (C6991 * C139366 + C6990 * C141462 +
            (C275 * C2963 + C141353 * C3087) * C139356 +
            (C275 * C2967 + C141353 * C3091) * C141224) *
               C21821) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[108] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C141327) *
              C141353 * C141298 * C141281 * C97 -
          ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
            C90 * C364 + C101 * C190 + C89 * C363) *
               C141327 +
           (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
            C90 * C116 + C101 * C109 + C89 * C115) *
               C188) *
              C141353 * C141298 * C141281 * C98 +
          ((C101 * C110 + C89 * C116 + C103 * C111 + C90 * C117 + C105 * C112 +
            C91 * C118 + C107 * C113 + C92 * C119) *
               C188 +
           (C101 * C191 + C89 * C364 + C103 * C192 + C90 * C365 + C105 * C193 +
            C91 * C366 + C107 * C194 + C92 * C367) *
               C141327) *
              C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C139366 * C108 + C141462 * C114 + C139356 * C109 + C141224 * C115) *
               C21918 +
           (C139366 * C189 + C141462 * C362 + C139356 * C190 + C141224 * C363) *
               C21819 +
           (C139366 * C823 + C141462 * C828 + C139356 * C822 + C141224 * C827) *
               C21919 +
           (C139366 * C912 + C141462 * C1100 + C139356 * C911 +
            C141224 * C1099) *
               C21820 +
           (C139366 * C2960 + C141462 * C2964 + C139356 * C2961 +
            C141224 * C2965) *
               C21920 +
           (C139366 * C3026 + C141462 * C3142 + C139356 * C3027 +
            C141224 * C3143) *
               C21821) *
              C141353 * C141298 * C141281 * C97 -
          ((C139356 * C3028 + C141224 * C3144 + C139366 * C3027 +
            C141462 * C3143) *
               C21821 +
           (C139356 * C2962 + C141224 * C2966 + C139366 * C2961 +
            C141462 * C2965) *
               C21920 +
           (C139356 * C910 + C141224 * C1098 + C139366 * C911 +
            C141462 * C1099) *
               C21820 +
           (C139356 * C821 + C141224 * C826 + C139366 * C822 + C141462 * C827) *
               C21919 +
           (C139356 * C191 + C141224 * C364 + C139366 * C190 + C141462 * C363) *
               C21819 +
           (C139356 * C110 + C141224 * C116 + C139366 * C109 + C141462 * C115) *
               C21918) *
              C141353 * C141298 * C141281 * C98 +
          ((C139366 * C110 + C141462 * C116 + C139356 * C111 + C141224 * C117) *
               C21918 +
           (C139366 * C191 + C141462 * C364 + C139356 * C192 + C141224 * C365) *
               C21819 +
           (C139366 * C821 + C141462 * C826 + C139356 * C820 + C141224 * C825) *
               C21919 +
           (C139366 * C910 + C141462 * C1098 + C139356 * C909 +
            C141224 * C1097) *
               C21820 +
           (C139366 * C2962 + C141462 * C2966 + C139356 * C2963 +
            C141224 * C2967) *
               C21920 +
           (C139366 * C3028 + C141462 * C3144 + C139356 * C3029 +
            C141224 * C3145) *
               C21821) *
              C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[108] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C418 * C108 + C426 + C426 + C141327 * C419) * C89 +
                      C448 * C90 + C449 * C91 + C450 * C92) *
                         C141353 * C141298 * C141281 * C97 -
                     (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) *
                         C141353 * C141298 * C141281 * C98 +
                     (C449 * C89 + C450 * C90 + C451 * C91 +
                      (C418 * C113 + C439 + C439 + C141327 * C424) * C92) *
                         C141353 * C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C22179 * C108 + C22183 + C22183 + C21819 * C419 +
                       C22180 * C823 + C22184 + C22184 + C21820 * C1171 +
                       C22181 * C2960 + C22185 + C22185 + C21821 * C3196) *
                          C141462 +
                      (C22219 + C22220 + C22221) * C141224) *
                         C141353 * C141298 * C141281 * C97 -
                     ((C22222 + C22223 + C22224) * C141224 +
                      (C22221 + C22220 + C22219) * C141462) *
                         C141353 * C141298 * C141281 * C98 +
                     ((C22224 + C22223 + C22222) * C141462 +
                      (C22179 * C111 + C22204 + C22204 + C21819 * C422 +
                       C22180 * C820 + C22205 + C22205 + C21820 * C1168 +
                       C22181 * C2963 + C22206 + C22206 + C21821 * C3199) *
                          C141224) *
                         C141353 * C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[108] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C188 +
            (C275 * C189 + C141353 * C501) * C141327) *
               C89 +
           (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
              C141298 * C141281 * C97 -
          ((C527 + C519) * C92 + (C526 + C514) * C91 + (C525 + C511) * C90 +
           (C524 + C508) * C89) *
              C141298 * C141281 * C98 +
          (C528 * C89 + C529 * C90 + (C519 + C527) * C91 +
           ((C275 * C113 + C141353 * C281) * C188 +
            (C275 * C194 + C141353 * C506) * C141327) *
               C92) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C21918 +
            (C275 * C189 + C141353 * C501) * C21819 + C6988 * C21919 +
            C7366 * C21820 + C9864 * C21920 + C10124 * C21821) *
               C141462 +
           (C22299 + C22300 + C22301 + C22302 + C22303 + C22304) * C141224) *
              C141298 * C141281 * C97 -
          ((C22305 + C22306 + C22307 + C22308 + C22309 + C22310) * C141224 +
           (C22304 + C22303 + C22302 + C22301 + C22300 + C22299) * C141462) *
              C141298 * C141281 * C98 +
          ((C22310 + C22309 + C22308 + C22307 + C22306 + C22305) * C141462 +
           (C309 * C21918 + C522 * C21819 + C1027 * C21919 + C1274 * C21820 +
            (C275 * C2963 + C141353 * C3087) * C21920 +
            (C275 * C3029 + C141353 * C3257) * C21821) *
               C141224) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezx[108] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 +
                       C105 * C110 + C91 * C116 + C107 * C111 + C92 * C117) *
                          C275 +
                      (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 +
                       C105 * C278 + C91 * C581 + C107 * C279 + C92 * C582) *
                          C141353) *
                         C141327 * C141298 * C141281 * C97 -
                     ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 +
                       C103 * C278 + C90 * C581 + C101 * C277 + C89 * C580) *
                          C141353 +
                      (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 +
                       C103 * C110 + C90 * C116 + C101 * C109 + C89 * C115) *
                          C275) *
                         C141327 * C141298 * C141281 * C98 +
                     ((C101 * C110 + C89 * C116 + C103 * C111 + C90 * C117 +
                       C105 * C112 + C91 * C118 + C107 * C113 + C92 * C119) *
                          C275 +
                      (C101 * C278 + C89 * C581 + C103 * C279 + C90 * C582 +
                       C105 * C280 + C91 * C583 + C107 * C281 + C92 * C584) *
                          C141353) *
                         C141327 * C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
                        C141224 * C115) *
                           C275 +
                       (C139366 * C276 + C141462 * C579 + C139356 * C277 +
                        C141224 * C580) *
                           C141353) *
                          C21819 +
                      ((C139366 * C823 + C141462 * C828 + C139356 * C822 +
                        C141224 * C827) *
                           C275 +
                       (C139366 * C1006 + C141462 * C1348 + C139356 * C1005 +
                        C141224 * C1347) *
                           C141353) *
                          C21820 +
                      ((C139366 * C2960 + C141462 * C2964 + C139356 * C2961 +
                        C141224 * C2965) *
                           C275 +
                       (C139366 * C3084 + C141462 * C3308 + C139356 * C3085 +
                        C141224 * C3309) *
                           C141353) *
                          C21821) *
                         C141298 * C141281 * C97 -
                     (((C139356 * C3086 + C141224 * C3310 + C139366 * C3085 +
                        C141462 * C3309) *
                           C141353 +
                       (C139356 * C2962 + C141224 * C2966 + C139366 * C2961 +
                        C141462 * C2965) *
                           C275) *
                          C21821 +
                      ((C139356 * C1004 + C141224 * C1346 + C139366 * C1005 +
                        C141462 * C1347) *
                           C141353 +
                       (C139356 * C821 + C141224 * C826 + C139366 * C822 +
                        C141462 * C827) *
                           C275) *
                          C21820 +
                      ((C139356 * C278 + C141224 * C581 + C139366 * C277 +
                        C141462 * C580) *
                           C141353 +
                       (C139356 * C110 + C141224 * C116 + C139366 * C109 +
                        C141462 * C115) *
                           C275) *
                          C21819) *
                         C141298 * C141281 * C98 +
                     (((C139366 * C110 + C141462 * C116 + C139356 * C111 +
                        C141224 * C117) *
                           C275 +
                       (C139366 * C278 + C141462 * C581 + C139356 * C279 +
                        C141224 * C582) *
                           C141353) *
                          C21819 +
                      ((C139366 * C821 + C141462 * C826 + C139356 * C820 +
                        C141224 * C825) *
                           C275 +
                       (C139366 * C1004 + C141462 * C1346 + C139356 * C1003 +
                        C141224 * C1345) *
                           C141353) *
                          C21820 +
                      ((C139366 * C2962 + C141462 * C2966 + C139356 * C2963 +
                        C141224 * C2967) *
                           C275 +
                       (C139366 * C3086 + C141462 * C3310 + C139356 * C3087 +
                        C141224 * C3311) *
                           C141353) *
                          C21821) *
                         C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[108] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C188 * C108 + C141327 * C189) * C275 +
                       (C188 * C276 + C141327 * C635) * C141353) *
                          C89 +
                      (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                         C141298 * C141281 * C97 -
                     ((C661 + C653) * C92 + (C660 + C648) * C91 +
                      (C659 + C645) * C90 + (C658 + C642) * C89) *
                         C141298 * C141281 * C98 +
                     (C662 * C89 + C663 * C90 + (C653 + C661) * C91 +
                      ((C188 * C113 + C141327 * C194) * C275 +
                       (C188 * C281 + C141327 * C640) * C141353) *
                          C92) *
                         C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C21918 * C108 + C21819 * C189 + C21919 * C823 +
                        C21820 * C912 + C21920 * C2960 + C21821 * C3026) *
                           C275 +
                       (C21918 * C276 + C21819 * C635 + C21919 * C1006 +
                        C21820 * C1419 + C21920 * C3084 + C21821 * C3362) *
                           C141353) *
                          C141462 +
                      ((C21946 + C21947 + C21948) * C275 +
                       (C22471 + C22472 + C22473) * C141353) *
                          C141224) *
                         C141298 * C141281 * C97 -
                     (((C22474 + C22475 + C22476) * C141353 +
                       (C21955 + C21956 + C21957) * C275) *
                          C141224 +
                      ((C22473 + C22472 + C22471) * C141353 +
                       (C21948 + C21947 + C21946) * C275) *
                          C141462) *
                         C141298 * C141281 * C98 +
                     (((C21957 + C21956 + C21955) * C275 +
                       (C22476 + C22475 + C22474) * C141353) *
                          C141462 +
                      ((C21918 * C111 + C21819 * C192 + C21919 * C820 +
                        C21820 * C909 + C21920 * C2963 + C21821 * C3029) *
                           C275 +
                       (C21918 * C279 + C21819 * C638 + C21919 * C1003 +
                        C21820 * C1416 + C21920 * C3087 + C21821 * C3365) *
                           C141353) *
                          C141224) *
                         C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q));
    d2eezz[108] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141353 * C714) * C141327 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C141298 * C141281 * C97 -
          (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C141298 *
              C141281 * C98 +
          (C748 * C89 + C749 * C90 + C750 * C91 +
           (C713 * C113 + C734 + C734 + C141353 * C719) * C141327 * C92) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C21819 +
            C7709 * C21820 + C10372 * C21821) *
               C141462 +
           (C22551 + C22552 + C22553) * C141224) *
              C141298 * C141281 * C97 -
          ((C22554 + C22555 + C22556) * C141224 +
           (C22553 + C22552 + C22551) * C141462) *
              C141298 * C141281 * C98 +
          ((C22556 + C22555 + C22554) * C141462 +
           (C745 * C21819 + C1525 * C21820 +
            (C713 * C2963 + C3424 + C3424 + C141353 * C3419) * C21821) *
               C141224) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexx[109] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 +
                       C128 + C128 + C90 * C121 + C104 * C110 + C129 + C129 +
                       C91 * C122 + C106 * C111 + C130 + C130 + C92 * C123) *
                          C141353 * C141327 * C141298 * C816 -
                      (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 +
                       C837 + C837 + C91 * C831 + C102 * C822 + C838 + C838 +
                       C90 * C832 + C100 * C823 + C839 + C839 + C89 * C833) *
                          C141353 * C141327 * C141298 * C141497) *
                         C818 +
                     ((C100 * C822 + C840 + C840 + C89 * C832 + C102 * C821 +
                       C841 + C841 + C90 * C831 + C104 * C820 + C842 + C842 +
                       C91 * C830 + C106 * C824 + C843 + C843 + C92 * C834) *
                          C141353 * C141327 * C141298 * C141497 -
                      (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 +
                       C132 + C132 + C91 * C123 + C102 * C110 + C133 + C133 +
                       C90 * C122 + C100 * C109 + C134 + C134 + C89 * C121) *
                          C141353 * C141327 * C141298 * C816) *
                         C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 +
                        C21824 * C109 + C21828 + C21828 + C141224 * C121) *
                           C141353 * C21819 +
                       (C22691 + C22692) * C141353 * C21820 +
                       (C22693 + C22694) * C141353 * C21821) *
                          C141298 * C816 -
                      ((C21824 * C9668 + C22663 + C22663 + C141224 * C9674 +
                        C21822 * C9667 + C22664 + C22664 + C141462 * C9673) *
                           C141353 * C21821 +
                       (C22694 + C22693) * C141353 * C21820 +
                       (C22692 + C22691) * C141353 * C21819) *
                          C141298 * C141497) *
                         C818 +
                     (((C22695 + C22696) * C141353 * C21819 +
                       (C22697 + C22698) * C141353 * C21820 +
                       (C21822 * C9668 + C22673 + C22673 + C141462 * C9674 +
                        C21824 * C9669 + C22674 + C22674 + C141224 * C9675) *
                           C141353 * C21821) *
                          C141298 * C141497 -
                      ((C22698 + C22697) * C141353 * C21821 +
                       (C22696 + C22695) * C141353 * C21820 +
                       (C21824 * C110 + C21837 + C21837 + C141224 * C122 +
                        C21822 * C109 + C21838 + C21838 + C141462 * C121) *
                           C141353 * C21819) *
                          C141298 * C816) *
                         C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eexy[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C101 +
            (C188 * C114 + C141327 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141353 * C141298 * C816 -
           (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
            C937 * C103 + (C188 * C828 + C141327 * C917) * C89 +
            (C188 * C823 + C141327 * C912) * C101) *
               C141353 * C141298 * C141497) *
              C818 +
          ((C937 * C101 + C936 * C89 + C935 * C103 + C934 * C90 + C933 * C105 +
            C932 * C91 + (C188 * C824 + C141327 * C913) * C107 +
            (C188 * C829 + C141327 * C918) * C92) *
               C141353 * C141298 * C141497 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C141353 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C139366 +
            (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
             C21920 * C2964 + C21821 * C3030) *
                C141462 +
            (C21946 + C21947 + C21948) * C139356 +
            (C21949 + C21950 + C21951) * C141224) *
               C141353 * C141298 * C816 -
           ((C22809 + C22810 + C22811) * C141224 +
            (C22812 + C22813 + C22814) * C139356 +
            (C21920 * C9670 + C21821 * C9771 + C21919 * C2964 + C21820 * C3030 +
             C21918 * C828 + C21819 * C917) *
                C141462 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C139366) *
               C141353 * C141298 * C141497) *
              C818 +
          (((C22814 + C22813 + C22812) * C139366 +
            (C22811 + C22810 + C22809) * C141462 +
            (C21918 * C821 + C21819 * C910 + C21919 * C2962 + C21820 * C3028 +
             C21920 * C9669 + C21821 * C9770) *
                C139356 +
            (C21918 * C826 + C21819 * C915 + C21919 * C2966 + C21820 * C3032 +
             C21920 * C9672 + C21821 * C9773) *
                C141224) *
               C141353 * C141298 * C141497 -
           ((C21952 + C21953 + C21954) * C141224 +
            (C21955 + C21956 + C21957) * C139356 +
            (C21951 + C21950 + C21949) * C141462 +
            (C21948 + C21947 + C21946) * C139366) *
               C141353 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C101 +
            (C275 * C114 + C141353 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141327 * C141298 * C816 -
           (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
            C1030 * C90 + C1031 * C103 + (C275 * C828 + C141353 * C1011) * C89 +
            (C275 * C823 + C141353 * C1006) * C101) *
               C141327 * C141298 * C141497) *
              C818 +
          ((C1031 * C101 + C1030 * C89 + C1029 * C103 + C1028 * C90 +
            C1027 * C105 + C1026 * C91 +
            (C275 * C824 + C141353 * C1007) * C107 +
            (C275 * C829 + C141353 * C1012) * C92) *
               C141327 * C141298 * C141497 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C141327 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C139366 +
             (C275 * C114 + C141353 * C282) * C141462 + C305 * C139356 +
             C306 * C141224) *
                C21819 +
            (C22913 + C22914 + C22915 + C22916) * C21820 +
            (C22917 + C22918 + C22919 + C22920) * C21821) *
               C141298 * C816 -
           ((C22933 * C141224 + C22934 * C139356 +
             (C275 * C9670 + C141353 * C9851) * C141462 +
             (C275 * C9667 + C141353 * C9848) * C139366) *
                C21821 +
            (C22920 + C22919 + C22918 + C22917) * C21820 +
            (C22916 + C22915 + C22914 + C22913) * C21819) *
               C141298 * C141497) *
              C818 +
          (((C22925 + C22926 + C22927 + C22928) * C21819 +
            (C22929 + C22930 + C22931 + C22932) * C21820 +
            (C22934 * C139366 + C22933 * C141462 +
             (C275 * C9669 + C141353 * C9850) * C139356 +
             (C275 * C9672 + C141353 * C9853) * C141224) *
                C21821) *
               C141298 * C141497 -
           ((C22932 + C22931 + C22930 + C22929) * C21821 +
            (C22928 + C22927 + C22926 + C22925) * C21820 +
            (C308 * C141224 + C307 * C139356 + C306 * C141462 +
             C305 * C139366) *
                C21819) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141327) *
               C141353 * C141298 * C816 -
           ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
             C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
                C141327 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C188) *
               C141353 * C141298 * C141497) *
              C818 +
          (((C101 * C822 + C89 * C827 + C103 * C821 + C90 * C826 + C105 * C820 +
             C91 * C825 + C107 * C824 + C92 * C829) *
                C188 +
            (C101 * C911 + C89 * C1099 + C103 * C910 + C90 * C1098 +
             C105 * C909 + C91 * C1097 + C107 * C913 + C92 * C1101) *
                C141327) *
               C141353 * C141298 * C141497 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C141327 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C141353 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C21918 +
            (C139366 * C189 + C141462 * C362 + C139356 * C190 +
             C141224 * C363) *
                C21819 +
            (C23065 + C23066) * C21919 + (C23067 + C23068) * C21820 +
            (C23069 + C23070) * C21920 + (C23071 + C23072) * C21821) *
               C141353 * C141298 * C816 -
           ((C139356 * C9769 + C141224 * C9941 + C139366 * C9768 +
             C141462 * C9940) *
                C21821 +
            (C139356 * C9668 + C141224 * C9671 + C139366 * C9667 +
             C141462 * C9670) *
                C21920 +
            (C23072 + C23071) * C21820 + (C23070 + C23069) * C21919 +
            (C23068 + C23067) * C21819 + (C23066 + C23065) * C21918) *
               C141353 * C141298 * C141497) *
              C818 +
          (((C23073 + C23074) * C21918 + (C23075 + C23076) * C21819 +
            (C23077 + C23078) * C21919 + (C23079 + C23080) * C21820 +
            (C139366 * C9668 + C141462 * C9671 + C139356 * C9669 +
             C141224 * C9672) *
                C21920 +
            (C139366 * C9769 + C141462 * C9941 + C139356 * C9770 +
             C141224 * C9942) *
                C21821) *
               C141353 * C141298 * C141497 -
           ((C23080 + C23079) * C21821 + (C23078 + C23077) * C21920 +
            (C23076 + C23075) * C21820 + (C23074 + C23073) * C21919 +
            (C139356 * C191 + C141224 * C364 + C139366 * C190 +
             C141462 * C363) *
                C21819 +
            (C139356 * C110 + C141224 * C116 + C139366 * C109 +
             C141462 * C115) *
                C21918) *
               C141353 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[109] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C418 * C108 + C426 + C426 + C141327 * C419) * C89 +
                       C448 * C90 + C449 * C91 + C450 * C92) *
                          C141353 * C141298 * C816 -
                      (C1191 * C92 + C1192 * C91 + C1193 * C90 +
                       (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C89) *
                          C141353 * C141298 * C141497) *
                         C818 +
                     ((C1193 * C89 + C1192 * C90 + C1191 * C91 +
                       (C418 * C824 + C1184 + C1184 + C141327 * C1172) * C92) *
                          C141353 * C141298 * C141497 -
                      (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) *
                          C141353 * C141298 * C816) *
                         C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 +
                        C22180 * C823 + C22184 + C22184 + C21820 * C1171 +
                        C22181 * C2960 + C22185 + C22185 + C21821 * C3196) *
                           C141462 +
                       (C22219 + C22220 + C22221) * C141224) *
                          C141353 * C141298 * C816 -
                      ((C23200 + C23201 + C23202) * C141224 +
                       (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
                        C22180 * C2960 + C23189 + C23189 + C21820 * C3196 +
                        C22179 * C823 + C23190 + C23190 + C21819 * C1171) *
                           C141462) *
                          C141353 * C141298 * C141497) *
                         C818 +
                     (((C23202 + C23201 + C23200) * C141462 +
                       (C22179 * C821 + C23191 + C23191 + C21819 * C1169 +
                        C22180 * C2962 + C23192 + C23192 + C21820 * C3198 +
                        C22181 * C9669 + C23193 + C23193 + C21821 * C10037) *
                           C141224) *
                          C141353 * C141298 * C141497 -
                      ((C22222 + C22223 + C22224) * C141224 +
                       (C22221 + C22220 + C22219) * C141462) *
                          C141353 * C141298 * C816) *
                         C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C188 +
             (C275 * C189 + C141353 * C501) * C141327) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C141298 * C816 -
           ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
            (C1279 + C1273) * C90 +
            ((C275 * C912 + C141353 * C1262) * C141327 +
             (C275 * C823 + C141353 * C1006) * C188) *
                C89) *
               C141298 * C141497) *
              C818 +
          (((C1273 + C1279) * C89 + (C1270 + C1278) * C90 +
            (C1267 + C1277) * C91 +
            ((C275 * C824 + C141353 * C1007) * C188 +
             (C275 * C913 + C141353 * C1263) * C141327) *
                C92) *
               C141298 * C141497 -
           ((C527 + C519) * C92 + (C526 + C514) * C91 + (C525 + C511) * C90 +
            (C524 + C508) * C89) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C21918 +
             (C275 * C189 + C141353 * C501) * C21819 + C6988 * C21919 +
             C7366 * C21820 + C9864 * C21920 + C10124 * C21821) *
                C141462 +
            (C22299 + C22300 + C22301 + C22302 + C22303 + C22304) * C141224) *
               C141298 * C816 -
           ((C23309 + C23303 + C23304 + C23305 + C23306 + C23307) * C141224 +
            ((C275 * C9768 + C141353 * C10118) * C21821 +
             (C275 * C9667 + C141353 * C9848) * C21920 + C10124 * C21820 +
             C9864 * C21919 + C7366 * C21819 + C6988 * C21918) *
                C141462) *
               C141298 * C141497) *
              C818 +
          (((C23307 + C23306 + C23305 + C23304 + C23303 + C23309) * C141462 +
            (C1029 * C21918 + C1275 * C21819 + C6991 * C21919 + C7367 * C21820 +
             (C275 * C9669 + C141353 * C9850) * C21920 +
             (C275 * C9770 + C141353 * C10120) * C21821) *
                C141224) *
               C141298 * C141497 -
           ((C22305 + C22306 + C22307 + C22308 + C22309 + C22310) * C141224 +
            (C22304 + C22303 + C22302 + C22301 + C22300 + C22299) * C141462) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141353) *
               C141327 * C141298 * C816 -
           ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
             C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
                C141353 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C275) *
               C141327 * C141298 * C141497) *
              C818 +
          (((C101 * C822 + C89 * C827 + C103 * C821 + C90 * C826 + C105 * C820 +
             C91 * C825 + C107 * C824 + C92 * C829) *
                C275 +
            (C101 * C1005 + C89 * C1347 + C103 * C1004 + C90 * C1346 +
             C105 * C1003 + C91 * C1345 + C107 * C1007 + C92 * C1349) *
                C141353) *
               C141327 * C141298 * C141497 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C141353 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C141327 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C275 +
             (C139366 * C276 + C141462 * C579 + C139356 * C277 +
              C141224 * C580) *
                 C141353) *
                C21819 +
            ((C23065 + C23066) * C275 + (C23424 + C23425) * C141353) * C21820 +
            ((C23069 + C23070) * C275 + (C23426 + C23427) * C141353) * C21821) *
               C141298 * C816 -
           (((C139356 * C9849 + C141224 * C10199 + C139366 * C9848 +
              C141462 * C10198) *
                 C141353 +
             (C139356 * C9668 + C141224 * C9671 + C139366 * C9667 +
              C141462 * C9670) *
                 C275) *
                C21821 +
            ((C23427 + C23426) * C141353 + (C23070 + C23069) * C275) * C21820 +
            ((C23425 + C23424) * C141353 + (C23066 + C23065) * C275) * C21819) *
               C141298 * C141497) *
              C818 +
          ((((C23073 + C23074) * C275 + (C23428 + C23429) * C141353) * C21819 +
            ((C23077 + C23078) * C275 + (C23430 + C23431) * C141353) * C21820 +
            ((C139366 * C9668 + C141462 * C9671 + C139356 * C9669 +
              C141224 * C9672) *
                 C275 +
             (C139366 * C9849 + C141462 * C10199 + C139356 * C9850 +
              C141224 * C10200) *
                 C141353) *
                C21821) *
               C141298 * C141497 -
           (((C23431 + C23430) * C141353 + (C23078 + C23077) * C275) * C21821 +
            ((C23429 + C23428) * C141353 + (C23074 + C23073) * C275) * C21820 +
            ((C139356 * C278 + C141224 * C581 + C139366 * C277 +
              C141462 * C580) *
                 C141353 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C275) *
                C21819) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezy[109] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C188 * C108 + C141327 * C189) * C275 +
                        (C188 * C276 + C141327 * C635) * C141353) *
                           C89 +
                       (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                          C141298 * C816 -
                      ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
                       (C1436 + C1430) * C90 +
                       ((C188 * C1006 + C141327 * C1419) * C141353 +
                        (C188 * C823 + C141327 * C912) * C275) *
                           C89) *
                          C141298 * C141497) *
                         C818 +
                     (((C1430 + C1436) * C89 + (C1427 + C1435) * C90 +
                       (C1424 + C1434) * C91 +
                       ((C188 * C824 + C141327 * C913) * C275 +
                        (C188 * C1007 + C141327 * C1420) * C141353) *
                           C92) *
                          C141298 * C141497 -
                      ((C661 + C653) * C92 + (C660 + C648) * C91 +
                       (C659 + C645) * C90 + (C658 + C642) * C89) *
                          C141298 * C816) *
                         C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C21918 * C108 + C21819 * C189 + C21919 * C823 +
                         C21820 * C912 + C21920 * C2960 + C21821 * C3026) *
                            C275 +
                        (C21918 * C276 + C21819 * C635 + C21919 * C1006 +
                         C21820 * C1419 + C21920 * C3084 + C21821 * C3362) *
                            C141353) *
                           C141462 +
                       ((C21946 + C21947 + C21948) * C275 +
                        (C22471 + C22472 + C22473) * C141353) *
                           C141224) *
                          C141298 * C816 -
                      (((C23536 + C23537 + C23538) * C141353 +
                        (C22812 + C22813 + C22814) * C275) *
                           C141224 +
                       ((C21920 * C9848 + C21821 * C10284 + C21919 * C3084 +
                         C21820 * C3362 + C21918 * C1006 + C21819 * C1419) *
                            C141353 +
                        (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 +
                         C21820 * C3026 + C21918 * C823 + C21819 * C912) *
                            C275) *
                           C141462) *
                          C141298 * C141497) *
                         C818 +
                     ((((C22814 + C22813 + C22812) * C275 +
                        (C23538 + C23537 + C23536) * C141353) *
                           C141462 +
                       ((C21918 * C821 + C21819 * C910 + C21919 * C2962 +
                         C21820 * C3028 + C21920 * C9669 + C21821 * C9770) *
                            C275 +
                        (C21918 * C1004 + C21819 * C1417 + C21919 * C3086 +
                         C21820 * C3364 + C21920 * C9850 + C21821 * C10286) *
                            C141353) *
                           C141224) *
                          C141298 * C141497 -
                      (((C22474 + C22475 + C22476) * C141353 +
                        (C21955 + C21956 + C21957) * C275) *
                           C141224 +
                       ((C22473 + C22472 + C22471) * C141353 +
                        (C21948 + C21947 + C21946) * C275) *
                           C141462) *
                          C141298 * C816) *
                         C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eezz[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141327 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C141298 * C816 -
           (C1528 * C92 + C1529 * C91 + C1530 * C90 +
            (C713 * C823 + C1517 + C1517 + C141353 * C1505) * C141327 * C89) *
               C141298 * C141497) *
              C818 +
          ((C1530 * C89 + C1529 * C90 + C1528 * C91 +
            (C713 * C824 + C1518 + C1518 + C141353 * C1506) * C141327 * C92) *
               C141298 * C141497 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C141298 *
               C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C21819 +
             C7709 * C21820 + C10372 * C21821) *
                C141462 +
            (C22551 + C22552 + C22553) * C141224) *
               C141298 * C816 -
           ((C23644 + C23639 + C23640) * C141224 +
            ((C713 * C9667 + C10367 + C10367 + C141353 * C10361) * C21821 +
             C10372 * C21820 + C7709 * C21819) *
                C141462) *
               C141298 * C141497) *
              C818 +
          (((C23640 + C23639 + C23644) * C141462 +
            (C1526 * C21819 + C7710 * C21820 +
             (C713 * C9669 + C10369 + C10369 + C141353 * C10363) * C21821) *
                C141224) *
               C141298 * C141497 -
           ((C22554 + C22555 + C22556) * C141224 +
            (C22553 + C22552 + C22551) * C141462) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[110] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C141353 * C141327 * C1596 -
           (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
            C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
            C100 * C1601 + C1617 + C1617 + C89 * C1611) *
               C141353 * C141327 * C141499) *
              C141281 * C818 +
          ((C100 * C1600 + C1618 + C1618 + C89 * C1610 + C102 * C1599 + C1619 +
            C1619 + C90 * C1609 + C104 * C1598 + C1620 + C1620 + C91 * C1608 +
            C106 * C1602 + C1621 + C1621 + C92 * C1612) *
               C141353 * C141327 * C141499 -
           (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 + C132 + C132 +
            C91 * C123 + C102 * C110 + C133 + C133 + C90 * C122 + C100 * C109 +
            C134 + C134 + C89 * C121) *
               C141353 * C141327 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
             C21828 + C21828 + C141224 * C121) *
                C141353 * C21819 +
            (C22691 + C22692) * C141353 * C21820 +
            (C22693 + C22694) * C141353 * C21821) *
               C1596 -
           ((C21824 * C10471 + C23743 + C23743 + C141224 * C10477 +
             C21822 * C10470 + C23744 + C23744 + C141462 * C10476) *
                C141353 * C21821 +
            (C21824 * C3491 + C23745 + C23745 + C141224 * C3499 +
             C21822 * C3490 + C23746 + C23746 + C141462 * C3498) *
                C141353 * C21820 +
            (C21824 * C1600 + C23747 + C23747 + C141224 * C1610 +
             C21822 * C1601 + C23748 + C23748 + C141462 * C1611) *
                C141353 * C21819) *
               C141499) *
              C141281 * C818 +
          (((C21822 * C1600 + C23749 + C23749 + C141462 * C1610 +
             C21824 * C1599 + C23750 + C23750 + C141224 * C1609) *
                C141353 * C21819 +
            (C21822 * C3491 + C23751 + C23751 + C141462 * C3499 +
             C21824 * C3492 + C23752 + C23752 + C141224 * C3500) *
                C141353 * C21820 +
            (C21822 * C10471 + C23753 + C23753 + C141462 * C10477 +
             C21824 * C10472 + C23754 + C23754 + C141224 * C10478) *
                C141353 * C21821) *
               C141499 -
           ((C22698 + C22697) * C141353 * C21821 +
            (C22696 + C22695) * C141353 * C21820 +
            (C21824 * C110 + C21837 + C21837 + C141224 * C122 + C21822 * C109 +
             C21838 + C21838 + C141462 * C121) *
                C141353 * C21819) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexy[110] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C101 +
            (C188 * C114 + C141327 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141353 * C1596 -
           (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
            C1714 * C90 + C1715 * C103 +
            (C188 * C1606 + C141327 * C1695) * C89 +
            (C188 * C1601 + C141327 * C1690) * C101) *
               C141353 * C141499) *
              C141281 * C818 +
          ((C1715 * C101 + C1714 * C89 + C1713 * C103 + C1712 * C90 +
            C1711 * C105 + C1710 * C91 +
            (C188 * C1602 + C141327 * C1691) * C107 +
            (C188 * C1607 + C141327 * C1696) * C92) *
               C141353 * C141499 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C141353 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C139366 +
            (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
             C21920 * C2964 + C21821 * C3030) *
                C141462 +
            (C21946 + C21947 + C21948) * C139356 +
            (C21949 + C21950 + C21951) * C141224) *
               C141353 * C1596 -
           ((C23865 + C23866 + C23867) * C141224 +
            (C23868 + C23869 + C23870) * C139356 +
            (C21920 * C10473 + C21821 * C10598 + C21919 * C3494 +
             C21820 * C3576 + C21918 * C1606 + C21819 * C1695) *
                C141462 +
            (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
             C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
                C139366) *
               C141353 * C141499) *
              C141281 * C818 +
          (((C23870 + C23869 + C23868) * C139366 +
            (C23867 + C23866 + C23865) * C141462 +
            (C21918 * C1599 + C21819 * C1688 + C21919 * C3492 + C21820 * C3574 +
             C21920 * C10472 + C21821 * C10597) *
                C139356 +
            (C21918 * C1604 + C21819 * C1693 + C21919 * C3496 + C21820 * C3578 +
             C21920 * C10475 + C21821 * C10600) *
                C141224) *
               C141353 * C141499 -
           ((C21952 + C21953 + C21954) * C141224 +
            (C21955 + C21956 + C21957) * C139356 +
            (C21951 + C21950 + C21949) * C141462 +
            (C21948 + C21947 + C21946) * C139366) *
               C141353 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[110] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C101 +
            (C275 * C114 + C141353 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141327 * C1596 -
           (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
            C1808 * C90 + C1809 * C103 +
            (C275 * C1606 + C141353 * C1789) * C89 +
            (C275 * C1601 + C141353 * C1784) * C101) *
               C141327 * C141499) *
              C141281 * C818 +
          ((C1809 * C101 + C1808 * C89 + C1807 * C103 + C1806 * C90 +
            C1805 * C105 + C1804 * C91 +
            (C275 * C1602 + C141353 * C1785) * C107 +
            (C275 * C1607 + C141353 * C1790) * C92) *
               C141327 * C141499 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C141327 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C139366 +
             (C275 * C114 + C141353 * C282) * C141462 + C305 * C139356 +
             C306 * C141224) *
                C21819 +
            (C22913 + C22914 + C22915 + C22916) * C21820 +
            (C22917 + C22918 + C22919 + C22920) * C21821) *
               C1596 -
           ((C23973 * C141224 + C23974 * C139356 +
             (C275 * C10473 + C141353 * C10702) * C141462 +
             (C275 * C10470 + C141353 * C10699) * C139366) *
                C21821 +
            (C8054 * C141224 + C8055 * C139356 + C10714 * C141462 +
             C10715 * C139366) *
                C21820 +
            (C1808 * C141224 + C1809 * C139356 +
             (C275 * C1606 + C141353 * C1789) * C141462 +
             (C275 * C1601 + C141353 * C1784) * C139366) *
                C21819) *
               C141499) *
              C141281 * C818 +
          (((C1809 * C139366 + C1808 * C141462 + C1807 * C139356 +
             C1806 * C141224) *
                C21819 +
            (C8055 * C139366 + C8054 * C141462 + C8053 * C139356 +
             C8052 * C141224) *
                C21820 +
            (C23974 * C139366 + C23973 * C141462 +
             (C275 * C10472 + C141353 * C10701) * C139356 +
             (C275 * C10475 + C141353 * C10704) * C141224) *
                C21821) *
               C141499 -
           ((C22932 + C22931 + C22930 + C22929) * C21821 +
            (C22928 + C22927 + C22926 + C22925) * C21820 +
            (C308 * C141224 + C307 * C139356 + C306 * C141462 +
             C305 * C139366) *
                C21819) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[110] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141327) *
               C141353 * C1596 -
           ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
             C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
                C141327 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C188) *
               C141353 * C141499) *
              C141281 * C818 +
          (((C101 * C1600 + C89 * C1605 + C103 * C1599 + C90 * C1604 +
             C105 * C1598 + C91 * C1603 + C107 * C1602 + C92 * C1607) *
                C188 +
            (C101 * C1689 + C89 * C1877 + C103 * C1688 + C90 * C1876 +
             C105 * C1687 + C91 * C1875 + C107 * C1691 + C92 * C1879) *
                C141327) *
               C141353 * C141499 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C141327 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C141353 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C21918 +
            (C139366 * C189 + C141462 * C362 + C139356 * C190 +
             C141224 * C363) *
                C21819 +
            (C23065 + C23066) * C21919 + (C23067 + C23068) * C21820 +
            (C23069 + C23070) * C21920 + (C23071 + C23072) * C21821) *
               C141353 * C1596 -
           ((C139356 * C10596 + C141224 * C10816 + C139366 * C10595 +
             C141462 * C10815) *
                C21821 +
            (C139356 * C10471 + C141224 * C10474 + C139366 * C10470 +
             C141462 * C10473) *
                C21920 +
            (C139356 * C3573 + C141224 * C3721 + C139366 * C3572 +
             C141462 * C3720) *
                C21820 +
            (C139356 * C3491 + C141224 * C3495 + C139366 * C3490 +
             C141462 * C3494) *
                C21919 +
            (C139356 * C1689 + C141224 * C1877 + C139366 * C1690 +
             C141462 * C1878) *
                C21819 +
            (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
             C141462 * C1606) *
                C21918) *
               C141353 * C141499) *
              C141281 * C818 +
          (((C139366 * C1600 + C141462 * C1605 + C139356 * C1599 +
             C141224 * C1604) *
                C21918 +
            (C139366 * C1689 + C141462 * C1877 + C139356 * C1688 +
             C141224 * C1876) *
                C21819 +
            (C139366 * C3491 + C141462 * C3495 + C139356 * C3492 +
             C141224 * C3496) *
                C21919 +
            (C139366 * C3573 + C141462 * C3721 + C139356 * C3574 +
             C141224 * C3722) *
                C21820 +
            (C139366 * C10471 + C141462 * C10474 + C139356 * C10472 +
             C141224 * C10475) *
                C21920 +
            (C139366 * C10596 + C141462 * C10816 + C139356 * C10597 +
             C141224 * C10817) *
                C21821) *
               C141353 * C141499 -
           ((C23080 + C23079) * C21821 + (C23078 + C23077) * C21920 +
            (C23076 + C23075) * C21820 + (C23074 + C23073) * C21919 +
            (C139356 * C191 + C141224 * C364 + C139366 * C190 +
             C141462 * C363) *
                C21819 +
            (C139356 * C110 + C141224 * C116 + C139366 * C109 +
             C141462 * C115) *
                C21918) *
               C141353 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[110] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C418 * C108 + C426 + C426 + C141327 * C419) * C89 +
                       C448 * C90 + C449 * C91 + C450 * C92) *
                          C141353 * C1596 -
                      (C1969 * C92 + C1970 * C91 + C1971 * C90 +
                       (C418 * C1601 + C1961 + C1961 + C141327 * C1949) * C89) *
                          C141353 * C141499) *
                         C141281 * C818 +
                     ((C1971 * C89 + C1970 * C90 + C1969 * C91 +
                       (C418 * C1602 + C1962 + C1962 + C141327 * C1950) * C92) *
                          C141353 * C141499 -
                      (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) *
                          C141353 * C1596) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 +
                        C22180 * C823 + C22184 + C22184 + C21820 * C1171 +
                        C22181 * C2960 + C22185 + C22185 + C21821 * C3196) *
                           C141462 +
                       (C22219 + C22220 + C22221) * C141224) *
                          C141353 * C1596 -
                      ((C24192 + C24193 + C24194) * C141224 +
                       (C22181 * C10470 + C24180 + C24180 + C21821 * C10934 +
                        C22180 * C3490 + C24181 + C24181 + C21820 * C3790 +
                        C22179 * C1601 + C24182 + C24182 + C21819 * C1949) *
                           C141462) *
                          C141353 * C141499) *
                         C141281 * C818 +
                     (((C24194 + C24193 + C24192) * C141462 +
                       (C22179 * C1599 + C24183 + C24183 + C21819 * C1947 +
                        C22180 * C3492 + C24184 + C24184 + C21820 * C3792 +
                        C22181 * C10472 + C24185 + C24185 + C21821 * C10936) *
                           C141224) *
                          C141353 * C141499 -
                      ((C22222 + C22223 + C22224) * C141224 +
                       (C22221 + C22220 + C22219) * C141462) *
                          C141353 * C1596) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[110] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C188 +
             (C275 * C189 + C141353 * C501) * C141327) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C1596 -
           ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
            (C2057 + C2051) * C90 +
            ((C275 * C1690 + C141353 * C2040) * C141327 +
             (C275 * C1601 + C141353 * C1784) * C188) *
                C89) *
               C141499) *
              C141281 * C818 +
          (((C2051 + C2057) * C89 + (C2048 + C2056) * C90 +
            (C2045 + C2055) * C91 +
            ((C275 * C1602 + C141353 * C1785) * C188 +
             (C275 * C1691 + C141353 * C2041) * C141327) *
                C92) *
               C141499 -
           ((C527 + C519) * C92 + (C526 + C514) * C91 + (C525 + C511) * C90 +
            (C524 + C508) * C89) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C21918 +
             (C275 * C189 + C141353 * C501) * C21819 + C6988 * C21919 +
             C7366 * C21820 + C9864 * C21920 + C10124 * C21821) *
                C141462 +
            (C22299 + C22300 + C22301 + C22302 + C22303 + C22304) * C141224) *
               C1596 -
           ((C24301 + C24295 + C24296 + C24297 + C24298 + C24299) * C141224 +
            ((C275 * C10595 + C141353 * C11041) * C21821 +
             (C275 * C10470 + C141353 * C10699) * C21920 + C11047 * C21820 +
             C10715 * C21919 + (C275 * C1690 + C141353 * C2040) * C21819 +
             (C275 * C1601 + C141353 * C1784) * C21918) *
                C141462) *
               C141499) *
              C141281 * C818 +
          (((C24299 + C24298 + C24297 + C24296 + C24295 + C24301) * C141462 +
            (C1807 * C21918 + C2053 * C21819 + C8053 * C21919 + C8388 * C21820 +
             (C275 * C10472 + C141353 * C10701) * C21920 +
             (C275 * C10597 + C141353 * C11043) * C21821) *
                C141224) *
               C141499 -
           ((C22305 + C22306 + C22307 + C22308 + C22309 + C22310) * C141224 +
            (C22304 + C22303 + C22302 + C22301 + C22300 + C22299) * C141462) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[110] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141353) *
               C141327 * C1596 -
           ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
             C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
                C141353 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C275) *
               C141327 * C141499) *
              C141281 * C818 +
          (((C101 * C1600 + C89 * C1605 + C103 * C1599 + C90 * C1604 +
             C105 * C1598 + C91 * C1603 + C107 * C1602 + C92 * C1607) *
                C275 +
            (C101 * C1783 + C89 * C2125 + C103 * C1782 + C90 * C2124 +
             C105 * C1781 + C91 * C2123 + C107 * C1785 + C92 * C2127) *
                C141353) *
               C141327 * C141499 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C141353 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C141327 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C275 +
             (C139366 * C276 + C141462 * C579 + C139356 * C277 +
              C141224 * C580) *
                 C141353) *
                C21819 +
            ((C23065 + C23066) * C275 + (C23424 + C23425) * C141353) * C21820 +
            ((C23069 + C23070) * C275 + (C23426 + C23427) * C141353) * C21821) *
               C1596 -
           (((C139356 * C10700 + C141224 * C11146 + C139366 * C10699 +
              C141462 * C11145) *
                 C141353 +
             (C139356 * C10471 + C141224 * C10474 + C139366 * C10470 +
              C141462 * C10473) *
                 C275) *
                C21821 +
            ((C139356 * C3647 + C141224 * C3935 + C139366 * C3646 +
              C141462 * C3934) *
                 C141353 +
             (C139356 * C3491 + C141224 * C3495 + C139366 * C3490 +
              C141462 * C3494) *
                 C275) *
                C21820 +
            ((C139356 * C1783 + C141224 * C2125 + C139366 * C1784 +
              C141462 * C2126) *
                 C141353 +
             (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
              C141462 * C1606) *
                 C275) *
                C21819) *
               C141499) *
              C141281 * C818 +
          ((((C139366 * C1600 + C141462 * C1605 + C139356 * C1599 +
              C141224 * C1604) *
                 C275 +
             (C139366 * C1783 + C141462 * C2125 + C139356 * C1782 +
              C141224 * C2124) *
                 C141353) *
                C21819 +
            ((C139366 * C3491 + C141462 * C3495 + C139356 * C3492 +
              C141224 * C3496) *
                 C275 +
             (C139366 * C3647 + C141462 * C3935 + C139356 * C3648 +
              C141224 * C3936) *
                 C141353) *
                C21820 +
            ((C139366 * C10471 + C141462 * C10474 + C139356 * C10472 +
              C141224 * C10475) *
                 C275 +
             (C139366 * C10700 + C141462 * C11146 + C139356 * C10701 +
              C141224 * C11147) *
                 C141353) *
                C21821) *
               C141499 -
           (((C23431 + C23430) * C141353 + (C23078 + C23077) * C275) * C21821 +
            ((C23429 + C23428) * C141353 + (C23074 + C23073) * C275) * C21820 +
            ((C139356 * C278 + C141224 * C581 + C139366 * C277 +
              C141462 * C580) *
                 C141353 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C275) *
                C21819) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezy[110] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C188 * C108 + C141327 * C189) * C275 +
                        (C188 * C276 + C141327 * C635) * C141353) *
                           C89 +
                       (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                          C1596 -
                      ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
                       (C2214 + C2208) * C90 +
                       ((C188 * C1784 + C141327 * C2197) * C141353 +
                        (C188 * C1601 + C141327 * C1690) * C275) *
                           C89) *
                          C141499) *
                         C141281 * C818 +
                     (((C2208 + C2214) * C89 + (C2205 + C2213) * C90 +
                       (C2202 + C2212) * C91 +
                       ((C188 * C1602 + C141327 * C1691) * C275 +
                        (C188 * C1785 + C141327 * C2198) * C141353) *
                           C92) *
                          C141499 -
                      ((C661 + C653) * C92 + (C660 + C648) * C91 +
                       (C659 + C645) * C90 + (C658 + C642) * C89) *
                          C1596) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C21918 * C108 + C21819 * C189 + C21919 * C823 +
                         C21820 * C912 + C21920 * C2960 + C21821 * C3026) *
                            C275 +
                        (C21918 * C276 + C21819 * C635 + C21919 * C1006 +
                         C21820 * C1419 + C21920 * C3084 + C21821 * C3362) *
                            C141353) *
                           C141462 +
                       ((C21946 + C21947 + C21948) * C275 +
                        (C22471 + C22472 + C22473) * C141353) *
                           C141224) *
                          C1596 -
                      (((C24504 + C24505 + C24506) * C141353 +
                        (C23868 + C23869 + C23870) * C275) *
                           C141224 +
                       ((C21920 * C10699 + C21821 * C11255 + C21919 * C3646 +
                         C21820 * C4004 + C21918 * C1784 + C21819 * C2197) *
                            C141353 +
                        (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
                         C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
                            C275) *
                           C141462) *
                          C141499) *
                         C141281 * C818 +
                     ((((C23870 + C23869 + C23868) * C275 +
                        (C24506 + C24505 + C24504) * C141353) *
                           C141462 +
                       ((C21918 * C1599 + C21819 * C1688 + C21919 * C3492 +
                         C21820 * C3574 + C21920 * C10472 + C21821 * C10597) *
                            C275 +
                        (C21918 * C1782 + C21819 * C2195 + C21919 * C3648 +
                         C21820 * C4006 + C21920 * C10701 + C21821 * C11257) *
                            C141353) *
                           C141224) *
                          C141499 -
                      (((C22474 + C22475 + C22476) * C141353 +
                        (C21955 + C21956 + C21957) * C275) *
                           C141224 +
                       ((C22473 + C22472 + C22471) * C141353 +
                        (C21948 + C21947 + C21946) * C275) *
                           C141462) *
                          C1596) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eezz[110] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141327 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C1596 -
           (C2306 * C92 + C2307 * C91 + C2308 * C90 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141327 * C89) *
               C141499) *
              C141281 * C818 +
          ((C2308 * C89 + C2307 * C90 + C2306 * C91 +
            (C713 * C1602 + C2296 + C2296 + C141353 * C2284) * C141327 * C92) *
               C141499 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C21819 +
             C7709 * C21820 + C10372 * C21821) *
                C141462 +
            (C22551 + C22552 + C22553) * C141224) *
               C1596 -
           ((C24612 + C24607 + C24608) * C141224 +
            ((C713 * C10470 + C11362 + C11362 + C141353 * C11356) * C21821 +
             C11367 * C21820 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C21819) *
                C141462) *
               C141499) *
              C141281 * C818 +
          (((C24608 + C24607 + C24612) * C141462 +
            (C2304 * C21819 + C8708 * C21820 +
             (C713 * C10472 + C11364 + C11364 + C141353 * C11358) * C21821) *
                C141224) *
               C141499 -
           ((C22554 + C22555 + C22556) * C141224 +
            (C22553 + C22552 + C22551) * C141462) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[111] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 +
                       C128 + C128 + C90 * C121 + C104 * C110 + C129 + C129 +
                       C91 * C122 + C106 * C111 + C130 + C130 + C92 * C123) *
                          C141353 * C141327 * C141298 * C2374 -
                      (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 +
                       C837 + C837 + C91 * C831 + C102 * C822 + C838 + C838 +
                       C90 * C832 + C100 * C823 + C839 + C839 + C89 * C833) *
                          C141353 * C141327 * C141298 * C141497) *
                         C2376 +
                     ((C100 * C822 + C840 + C840 + C89 * C832 + C102 * C821 +
                       C841 + C841 + C90 * C831 + C104 * C820 + C842 + C842 +
                       C91 * C830 + C106 * C824 + C843 + C843 + C92 * C834) *
                          C141353 * C141327 * C141298 * C141497 -
                      (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 +
                       C132 + C132 + C91 * C123 + C102 * C110 + C133 + C133 +
                       C90 * C122 + C100 * C109 + C134 + C134 + C89 * C121) *
                          C141353 * C141327 * C141298 * C2374) *
                         C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 +
                        C21824 * C109 + C21828 + C21828 + C141224 * C121) *
                           C141353 * C21819 +
                       (C22691 + C22692) * C141353 * C21820 +
                       (C22693 + C22694) * C141353 * C21821) *
                          C141298 * C2374 -
                      ((C21824 * C9668 + C22663 + C22663 + C141224 * C9674 +
                        C21822 * C9667 + C22664 + C22664 + C141462 * C9673) *
                           C141353 * C21821 +
                       (C22694 + C22693) * C141353 * C21820 +
                       (C22692 + C22691) * C141353 * C21819) *
                          C141298 * C141497) *
                         C2376 +
                     (((C22695 + C22696) * C141353 * C21819 +
                       (C22697 + C22698) * C141353 * C21820 +
                       (C21822 * C9668 + C22673 + C22673 + C141462 * C9674 +
                        C21824 * C9669 + C22674 + C22674 + C141224 * C9675) *
                           C141353 * C21821) *
                          C141298 * C141497 -
                      ((C22698 + C22697) * C141353 * C21821 +
                       (C22696 + C22695) * C141353 * C21820 +
                       (C21824 * C110 + C21837 + C21837 + C141224 * C122 +
                        C21822 * C109 + C21838 + C21838 + C141462 * C121) *
                           C141353 * C21819) *
                          C141298 * C2374) *
                         C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eexy[111] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C101 +
            (C188 * C114 + C141327 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141353 * C141298 * C2374 -
           (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
            C937 * C103 + (C188 * C828 + C141327 * C917) * C89 +
            (C188 * C823 + C141327 * C912) * C101) *
               C141353 * C141298 * C141497) *
              C2376 +
          ((C937 * C101 + C936 * C89 + C935 * C103 + C934 * C90 + C933 * C105 +
            C932 * C91 + (C188 * C824 + C141327 * C913) * C107 +
            (C188 * C829 + C141327 * C918) * C92) *
               C141353 * C141298 * C141497 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C141353 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C139366 +
            (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
             C21920 * C2964 + C21821 * C3030) *
                C141462 +
            (C21946 + C21947 + C21948) * C139356 +
            (C21949 + C21950 + C21951) * C141224) *
               C141353 * C141298 * C2374 -
           ((C22809 + C22810 + C22811) * C141224 +
            (C22812 + C22813 + C22814) * C139356 +
            (C21920 * C9670 + C21821 * C9771 + C21919 * C2964 + C21820 * C3030 +
             C21918 * C828 + C21819 * C917) *
                C141462 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C139366) *
               C141353 * C141298 * C141497) *
              C2376 +
          (((C22814 + C22813 + C22812) * C139366 +
            (C22811 + C22810 + C22809) * C141462 +
            (C21918 * C821 + C21819 * C910 + C21919 * C2962 + C21820 * C3028 +
             C21920 * C9669 + C21821 * C9770) *
                C139356 +
            (C21918 * C826 + C21819 * C915 + C21919 * C2966 + C21820 * C3032 +
             C21920 * C9672 + C21821 * C9773) *
                C141224) *
               C141353 * C141298 * C141497 -
           ((C21952 + C21953 + C21954) * C141224 +
            (C21955 + C21956 + C21957) * C139356 +
            (C21951 + C21950 + C21949) * C141462 +
            (C21948 + C21947 + C21946) * C139366) *
               C141353 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[111] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C101 +
            (C275 * C114 + C141353 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141327 * C141298 * C2374 -
           (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
            C1030 * C90 + C1031 * C103 + (C275 * C828 + C141353 * C1011) * C89 +
            (C275 * C823 + C141353 * C1006) * C101) *
               C141327 * C141298 * C141497) *
              C2376 +
          ((C1031 * C101 + C1030 * C89 + C1029 * C103 + C1028 * C90 +
            C1027 * C105 + C1026 * C91 +
            (C275 * C824 + C141353 * C1007) * C107 +
            (C275 * C829 + C141353 * C1012) * C92) *
               C141327 * C141298 * C141497 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C141327 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C139366 +
             (C275 * C114 + C141353 * C282) * C141462 + C305 * C139356 +
             C306 * C141224) *
                C21819 +
            (C22913 + C22914 + C22915 + C22916) * C21820 +
            (C22917 + C22918 + C22919 + C22920) * C21821) *
               C141298 * C2374 -
           ((C22933 * C141224 + C22934 * C139356 +
             (C275 * C9670 + C141353 * C9851) * C141462 +
             (C275 * C9667 + C141353 * C9848) * C139366) *
                C21821 +
            (C22920 + C22919 + C22918 + C22917) * C21820 +
            (C22916 + C22915 + C22914 + C22913) * C21819) *
               C141298 * C141497) *
              C2376 +
          (((C22925 + C22926 + C22927 + C22928) * C21819 +
            (C22929 + C22930 + C22931 + C22932) * C21820 +
            (C22934 * C139366 + C22933 * C141462 +
             (C275 * C9669 + C141353 * C9850) * C139356 +
             (C275 * C9672 + C141353 * C9853) * C141224) *
                C21821) *
               C141298 * C141497 -
           ((C22932 + C22931 + C22930 + C22929) * C21821 +
            (C22928 + C22927 + C22926 + C22925) * C21820 +
            (C308 * C141224 + C307 * C139356 + C306 * C141462 +
             C305 * C139366) *
                C21819) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[111] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141327) *
               C141353 * C141298 * C2374 -
           ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
             C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
                C141327 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C188) *
               C141353 * C141298 * C141497) *
              C2376 +
          (((C101 * C822 + C89 * C827 + C103 * C821 + C90 * C826 + C105 * C820 +
             C91 * C825 + C107 * C824 + C92 * C829) *
                C188 +
            (C101 * C911 + C89 * C1099 + C103 * C910 + C90 * C1098 +
             C105 * C909 + C91 * C1097 + C107 * C913 + C92 * C1101) *
                C141327) *
               C141353 * C141298 * C141497 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C141327 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C141353 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C21918 +
            (C139366 * C189 + C141462 * C362 + C139356 * C190 +
             C141224 * C363) *
                C21819 +
            (C23065 + C23066) * C21919 + (C23067 + C23068) * C21820 +
            (C23069 + C23070) * C21920 + (C23071 + C23072) * C21821) *
               C141353 * C141298 * C2374 -
           ((C139356 * C9769 + C141224 * C9941 + C139366 * C9768 +
             C141462 * C9940) *
                C21821 +
            (C139356 * C9668 + C141224 * C9671 + C139366 * C9667 +
             C141462 * C9670) *
                C21920 +
            (C23072 + C23071) * C21820 + (C23070 + C23069) * C21919 +
            (C23068 + C23067) * C21819 + (C23066 + C23065) * C21918) *
               C141353 * C141298 * C141497) *
              C2376 +
          (((C23073 + C23074) * C21918 + (C23075 + C23076) * C21819 +
            (C23077 + C23078) * C21919 + (C23079 + C23080) * C21820 +
            (C139366 * C9668 + C141462 * C9671 + C139356 * C9669 +
             C141224 * C9672) *
                C21920 +
            (C139366 * C9769 + C141462 * C9941 + C139356 * C9770 +
             C141224 * C9942) *
                C21821) *
               C141353 * C141298 * C141497 -
           ((C23080 + C23079) * C21821 + (C23078 + C23077) * C21920 +
            (C23076 + C23075) * C21820 + (C23074 + C23073) * C21919 +
            (C139356 * C191 + C141224 * C364 + C139366 * C190 +
             C141462 * C363) *
                C21819 +
            (C139356 * C110 + C141224 * C116 + C139366 * C109 +
             C141462 * C115) *
                C21918) *
               C141353 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[111] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C418 * C108 + C426 + C426 + C141327 * C419) * C89 +
                       C448 * C90 + C449 * C91 + C450 * C92) *
                          C141353 * C141298 * C2374 -
                      (C1191 * C92 + C1192 * C91 + C1193 * C90 +
                       (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C89) *
                          C141353 * C141298 * C141497) *
                         C2376 +
                     ((C1193 * C89 + C1192 * C90 + C1191 * C91 +
                       (C418 * C824 + C1184 + C1184 + C141327 * C1172) * C92) *
                          C141353 * C141298 * C141497 -
                      (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) *
                          C141353 * C141298 * C2374) *
                         C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 +
                        C22180 * C823 + C22184 + C22184 + C21820 * C1171 +
                        C22181 * C2960 + C22185 + C22185 + C21821 * C3196) *
                           C141462 +
                       (C22219 + C22220 + C22221) * C141224) *
                          C141353 * C141298 * C2374 -
                      ((C23200 + C23201 + C23202) * C141224 +
                       (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
                        C22180 * C2960 + C23189 + C23189 + C21820 * C3196 +
                        C22179 * C823 + C23190 + C23190 + C21819 * C1171) *
                           C141462) *
                          C141353 * C141298 * C141497) *
                         C2376 +
                     (((C23202 + C23201 + C23200) * C141462 +
                       (C22179 * C821 + C23191 + C23191 + C21819 * C1169 +
                        C22180 * C2962 + C23192 + C23192 + C21820 * C3198 +
                        C22181 * C9669 + C23193 + C23193 + C21821 * C10037) *
                           C141224) *
                          C141353 * C141298 * C141497 -
                      ((C22222 + C22223 + C22224) * C141224 +
                       (C22221 + C22220 + C22219) * C141462) *
                          C141353 * C141298 * C2374) *
                         C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[111] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C188 +
             (C275 * C189 + C141353 * C501) * C141327) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C141298 * C2374 -
           ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
            (C1279 + C1273) * C90 +
            ((C275 * C912 + C141353 * C1262) * C141327 +
             (C275 * C823 + C141353 * C1006) * C188) *
                C89) *
               C141298 * C141497) *
              C2376 +
          (((C1273 + C1279) * C89 + (C1270 + C1278) * C90 +
            (C1267 + C1277) * C91 +
            ((C275 * C824 + C141353 * C1007) * C188 +
             (C275 * C913 + C141353 * C1263) * C141327) *
                C92) *
               C141298 * C141497 -
           ((C527 + C519) * C92 + (C526 + C514) * C91 + (C525 + C511) * C90 +
            (C524 + C508) * C89) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C21918 +
             (C275 * C189 + C141353 * C501) * C21819 + C6988 * C21919 +
             C7366 * C21820 + C9864 * C21920 + C10124 * C21821) *
                C141462 +
            (C22299 + C22300 + C22301 + C22302 + C22303 + C22304) * C141224) *
               C141298 * C2374 -
           ((C23309 + C23303 + C23304 + C23305 + C23306 + C23307) * C141224 +
            ((C275 * C9768 + C141353 * C10118) * C21821 +
             (C275 * C9667 + C141353 * C9848) * C21920 + C10124 * C21820 +
             C9864 * C21919 + C7366 * C21819 + C6988 * C21918) *
                C141462) *
               C141298 * C141497) *
              C2376 +
          (((C23307 + C23306 + C23305 + C23304 + C23303 + C23309) * C141462 +
            (C1029 * C21918 + C1275 * C21819 + C6991 * C21919 + C7367 * C21820 +
             (C275 * C9669 + C141353 * C9850) * C21920 +
             (C275 * C9770 + C141353 * C10120) * C21821) *
                C141224) *
               C141298 * C141497 -
           ((C22305 + C22306 + C22307 + C22308 + C22309 + C22310) * C141224 +
            (C22304 + C22303 + C22302 + C22301 + C22300 + C22299) * C141462) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[111] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141353) *
               C141327 * C141298 * C2374 -
           ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
             C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
                C141353 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C275) *
               C141327 * C141298 * C141497) *
              C2376 +
          (((C101 * C822 + C89 * C827 + C103 * C821 + C90 * C826 + C105 * C820 +
             C91 * C825 + C107 * C824 + C92 * C829) *
                C275 +
            (C101 * C1005 + C89 * C1347 + C103 * C1004 + C90 * C1346 +
             C105 * C1003 + C91 * C1345 + C107 * C1007 + C92 * C1349) *
                C141353) *
               C141327 * C141298 * C141497 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C141353 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C141327 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C275 +
             (C139366 * C276 + C141462 * C579 + C139356 * C277 +
              C141224 * C580) *
                 C141353) *
                C21819 +
            ((C23065 + C23066) * C275 + (C23424 + C23425) * C141353) * C21820 +
            ((C23069 + C23070) * C275 + (C23426 + C23427) * C141353) * C21821) *
               C141298 * C2374 -
           (((C139356 * C9849 + C141224 * C10199 + C139366 * C9848 +
              C141462 * C10198) *
                 C141353 +
             (C139356 * C9668 + C141224 * C9671 + C139366 * C9667 +
              C141462 * C9670) *
                 C275) *
                C21821 +
            ((C23427 + C23426) * C141353 + (C23070 + C23069) * C275) * C21820 +
            ((C23425 + C23424) * C141353 + (C23066 + C23065) * C275) * C21819) *
               C141298 * C141497) *
              C2376 +
          ((((C23073 + C23074) * C275 + (C23428 + C23429) * C141353) * C21819 +
            ((C23077 + C23078) * C275 + (C23430 + C23431) * C141353) * C21820 +
            ((C139366 * C9668 + C141462 * C9671 + C139356 * C9669 +
              C141224 * C9672) *
                 C275 +
             (C139366 * C9849 + C141462 * C10199 + C139356 * C9850 +
              C141224 * C10200) *
                 C141353) *
                C21821) *
               C141298 * C141497 -
           (((C23431 + C23430) * C141353 + (C23078 + C23077) * C275) * C21821 +
            ((C23429 + C23428) * C141353 + (C23074 + C23073) * C275) * C21820 +
            ((C139356 * C278 + C141224 * C581 + C139366 * C277 +
              C141462 * C580) *
                 C141353 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C275) *
                C21819) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezy[111] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C188 * C108 + C141327 * C189) * C275 +
                        (C188 * C276 + C141327 * C635) * C141353) *
                           C89 +
                       (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                          C141298 * C2374 -
                      ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
                       (C1436 + C1430) * C90 +
                       ((C188 * C1006 + C141327 * C1419) * C141353 +
                        (C188 * C823 + C141327 * C912) * C275) *
                           C89) *
                          C141298 * C141497) *
                         C2376 +
                     (((C1430 + C1436) * C89 + (C1427 + C1435) * C90 +
                       (C1424 + C1434) * C91 +
                       ((C188 * C824 + C141327 * C913) * C275 +
                        (C188 * C1007 + C141327 * C1420) * C141353) *
                           C92) *
                          C141298 * C141497 -
                      ((C661 + C653) * C92 + (C660 + C648) * C91 +
                       (C659 + C645) * C90 + (C658 + C642) * C89) *
                          C141298 * C2374) *
                         C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C21918 * C108 + C21819 * C189 + C21919 * C823 +
                         C21820 * C912 + C21920 * C2960 + C21821 * C3026) *
                            C275 +
                        (C21918 * C276 + C21819 * C635 + C21919 * C1006 +
                         C21820 * C1419 + C21920 * C3084 + C21821 * C3362) *
                            C141353) *
                           C141462 +
                       ((C21946 + C21947 + C21948) * C275 +
                        (C22471 + C22472 + C22473) * C141353) *
                           C141224) *
                          C141298 * C2374 -
                      (((C23536 + C23537 + C23538) * C141353 +
                        (C22812 + C22813 + C22814) * C275) *
                           C141224 +
                       ((C21920 * C9848 + C21821 * C10284 + C21919 * C3084 +
                         C21820 * C3362 + C21918 * C1006 + C21819 * C1419) *
                            C141353 +
                        (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 +
                         C21820 * C3026 + C21918 * C823 + C21819 * C912) *
                            C275) *
                           C141462) *
                          C141298 * C141497) *
                         C2376 +
                     ((((C22814 + C22813 + C22812) * C275 +
                        (C23538 + C23537 + C23536) * C141353) *
                           C141462 +
                       ((C21918 * C821 + C21819 * C910 + C21919 * C2962 +
                         C21820 * C3028 + C21920 * C9669 + C21821 * C9770) *
                            C275 +
                        (C21918 * C1004 + C21819 * C1417 + C21919 * C3086 +
                         C21820 * C3364 + C21920 * C9850 + C21821 * C10286) *
                            C141353) *
                           C141224) *
                          C141298 * C141497 -
                      (((C22474 + C22475 + C22476) * C141353 +
                        (C21955 + C21956 + C21957) * C275) *
                           C141224 +
                       ((C22473 + C22472 + C22471) * C141353 +
                        (C21948 + C21947 + C21946) * C275) *
                           C141462) *
                          C141298 * C2374) *
                         C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eezz[111] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141327 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C141298 * C2374 -
           (C1528 * C92 + C1529 * C91 + C1530 * C90 +
            (C713 * C823 + C1517 + C1517 + C141353 * C1505) * C141327 * C89) *
               C141298 * C141497) *
              C2376 +
          ((C1530 * C89 + C1529 * C90 + C1528 * C91 +
            (C713 * C824 + C1518 + C1518 + C141353 * C1506) * C141327 * C92) *
               C141298 * C141497 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C141298 *
               C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C21819 +
             C7709 * C21820 + C10372 * C21821) *
                C141462 +
            (C22551 + C22552 + C22553) * C141224) *
               C141298 * C2374 -
           ((C23644 + C23639 + C23640) * C141224 +
            ((C713 * C9667 + C10367 + C10367 + C141353 * C10361) * C21821 +
             C10372 * C21820 + C7709 * C21819) *
                C141462) *
               C141298 * C141497) *
              C2376 +
          (((C23640 + C23639 + C23644) * C141462 +
            (C1526 * C21819 + C7710 * C21820 +
             (C713 * C9669 + C10369 + C10369 + C141353 * C10363) * C21821) *
                C141224) *
               C141298 * C141497 -
           ((C22554 + C22555 + C22556) * C141224 +
            (C22553 + C22552 + C22551) * C141462) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[112] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
           C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
           C130 + C130 + C92 * C123) *
              C141353 * C141327 * C141298 * C2956 -
          (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 + C837 + C837 +
           C91 * C831 + C102 * C822 + C838 + C838 + C90 * C832 + C100 * C823 +
           C839 + C839 + C89 * C833) *
              C141353 * C141327 * C141298 * C2957 +
          (C100 * C2960 + C2973 + C2973 + C89 * C2968 + C102 * C2961 + C2974 +
           C2974 + C90 * C2969 + C104 * C2962 + C2975 + C2975 + C91 * C2970 +
           C106 * C2963 + C2976 + C2976 + C92 * C2971) *
              C141353 * C141327 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
            C21828 + C21828 + C141224 * C121) *
               C141353 * C21819 +
           (C22691 + C22692) * C141353 * C21820 + C25582 * C21821) *
              C141298 * C2956 -
          ((C25587 + C25588) * C141353 * C21821 +
           (C22694 + C22693) * C141353 * C21820 +
           (C22692 + C22691) * C141353 * C21819) *
              C141298 * C2957 +
          (C25582 * C21819 + (C25588 + C25587) * C141353 * C21820 +
           (C21822 * C25568 + C25580 + C25580 + C141462 * C25572 +
            C21824 * C25569 + C25581 + C25581 + C141224 * C25573) *
               C141353 * C21821) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[112] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C141327 * C189) * C101 +
           (C188 * C114 + C141327 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C141353 * C141298 * C2956 -
          (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
           C937 * C103 + (C188 * C828 + C141327 * C917) * C89 +
           (C188 * C823 + C141327 * C912) * C101) *
              C141353 * C141298 * C2957 +
          ((C188 * C2960 + C141327 * C3026) * C101 +
           (C188 * C2964 + C141327 * C3030) * C89 +
           (C188 * C2961 + C141327 * C3027) * C103 +
           (C188 * C2965 + C141327 * C3031) * C90 +
           (C188 * C2962 + C141327 * C3028) * C105 +
           (C188 * C2966 + C141327 * C3032) * C91 +
           (C188 * C2963 + C141327 * C3029) * C107 +
           (C188 * C2967 + C141327 * C3033) * C92) *
              C141353 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
            C21920 * C2960 + C21821 * C3026) *
               C139366 +
           (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
            C21920 * C2964 + C21821 * C3030) *
               C141462 +
           (C21946 + C21947 + C21948) * C139356 +
           (C21949 + C21950 + C21951) * C141224) *
              C141353 * C141298 * C2956 -
          ((C22809 + C22810 + C22811) * C141224 +
           (C22812 + C22813 + C22814) * C139356 +
           (C21920 * C9670 + C21821 * C9771 + C21919 * C2964 + C21820 * C3030 +
            C21918 * C828 + C21819 * C917) *
               C141462 +
           (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
            C21918 * C823 + C21819 * C912) *
               C139366) *
              C141353 * C141298 * C2957 +
          ((C21918 * C2960 + C21819 * C3026 + C21919 * C9667 + C21820 * C9768 +
            C21920 * C25568 + C21821 * C25662) *
               C139366 +
           (C21918 * C2964 + C21819 * C3030 + C21919 * C9670 + C21820 * C9771 +
            C21920 * C25570 + C21821 * C25664) *
               C141462 +
           (C21918 * C2961 + C21819 * C3027 + C21919 * C9668 + C21820 * C9769 +
            C21920 * C25569 + C21821 * C25663) *
               C139356 +
           (C21918 * C2965 + C21819 * C3031 + C21919 * C9671 + C21820 * C9772 +
            C21920 * C25571 + C21821 * C25665) *
               C141224) *
              C141353 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[112] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C141353 * C276) * C101 +
           (C275 * C114 + C141353 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C141327 * C141298 * C2956 -
          (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
           C1030 * C90 + C1031 * C103 + (C275 * C828 + C141353 * C1011) * C89 +
           (C275 * C823 + C141353 * C1006) * C101) *
              C141327 * C141298 * C2957 +
          ((C275 * C2960 + C141353 * C3084) * C101 +
           (C275 * C2964 + C141353 * C3088) * C89 +
           (C275 * C2961 + C141353 * C3085) * C103 +
           (C275 * C2965 + C141353 * C3089) * C90 +
           (C275 * C2962 + C141353 * C3086) * C105 +
           (C275 * C2966 + C141353 * C3090) * C91 +
           (C275 * C2963 + C141353 * C3087) * C107 +
           (C275 * C2967 + C141353 * C3091) * C92) *
              C141327 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C139366 +
            (C275 * C114 + C141353 * C282) * C141462 + C305 * C139356 +
            C306 * C141224) *
               C21819 +
           (C22913 + C22914 + C22915 + C22916) * C21820 + C25755 * C21821) *
              C141298 * C2956 -
          ((C25746 + C25747 + C25756 + C25757) * C21821 +
           (C22920 + C22919 + C22918 + C22917) * C21820 +
           (C22916 + C22915 + C22914 + C22913) * C21819) *
              C141298 * C2957 +
          (C25755 * C21819 + (C25757 + C25756 + C25747 + C25746) * C21820 +
           ((C275 * C25568 + C141353 * C25740) * C139366 +
            (C275 * C25570 + C141353 * C25742) * C141462 +
            (C275 * C25569 + C141353 * C25741) * C139356 +
            (C275 * C25571 + C141353 * C25743) * C141224) *
               C21821) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[112] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C141327) *
              C141353 * C141298 * C2956 -
          ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
            C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
               C141327 +
           (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
            C90 * C827 + C101 * C823 + C89 * C828) *
               C188) *
              C141353 * C141298 * C2957 +
          ((C101 * C2960 + C89 * C2964 + C103 * C2961 + C90 * C2965 +
            C105 * C2962 + C91 * C2966 + C107 * C2963 + C92 * C2967) *
               C188 +
           (C101 * C3026 + C89 * C3142 + C103 * C3027 + C90 * C3143 +
            C105 * C3028 + C91 * C3144 + C107 * C3029 + C92 * C3145) *
               C141327) *
              C141353 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C139366 * C108 + C141462 * C114 + C139356 * C109 + C141224 * C115) *
               C21918 +
           (C139366 * C189 + C141462 * C362 + C139356 * C190 + C141224 * C363) *
               C21819 +
           (C23065 + C23066) * C21919 + (C23067 + C23068) * C21820 +
           C25834 * C21920 + C25835 * C21821) *
              C141353 * C141298 * C2956 -
          ((C25844 + C25845) * C21821 + (C25846 + C25847) * C21920 +
           (C23072 + C23071) * C21820 + (C23070 + C23069) * C21919 +
           (C23068 + C23067) * C21819 + (C23066 + C23065) * C21918) *
              C141353 * C141298 * C2957 +
          (C25834 * C21918 + C25835 * C21819 + (C25847 + C25846) * C21919 +
           (C25845 + C25844) * C21820 +
           (C139366 * C25568 + C141462 * C25570 + C139356 * C25569 +
            C141224 * C25571) *
               C21920 +
           (C139366 * C25662 + C141462 * C25831 + C139356 * C25663 +
            C141224 * C25832) *
               C21821) *
              C141353 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[112] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C418 * C108 + C426 + C426 + C141327 * C419) * C89 +
                      C448 * C90 + C449 * C91 + C450 * C92) *
                         C141353 * C141298 * C2956 -
                     (C1191 * C92 + C1192 * C91 + C1193 * C90 +
                      (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C89) *
                         C141353 * C141298 * C2957 +
                     ((C418 * C2960 + C3201 + C3201 + C141327 * C3196) * C89 +
                      (C418 * C2961 + C3202 + C3202 + C141327 * C3197) * C90 +
                      (C418 * C2962 + C3203 + C3203 + C141327 * C3198) * C91 +
                      (C418 * C2963 + C3204 + C3204 + C141327 * C3199) * C92) *
                         C141353 * C141298 * C2958) *
                    C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C22179 * C108 + C22183 + C22183 + C21819 * C419 +
                       C22180 * C823 + C22184 + C22184 + C21820 * C1171 +
                       C22181 * C2960 + C22185 + C22185 + C21821 * C3196) *
                          C141462 +
                      (C22219 + C22220 + C22221) * C141224) *
                         C141353 * C141298 * C2956 -
                     ((C23200 + C23201 + C23202) * C141224 +
                      (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
                       C22180 * C2960 + C23189 + C23189 + C21820 * C3196 +
                       C22179 * C823 + C23190 + C23190 + C21819 * C1171) *
                          C141462) *
                         C141353 * C141298 * C2957 +
                     ((C22179 * C2960 + C25924 + C25924 + C21819 * C3196 +
                       C22180 * C9667 + C25925 + C25925 + C21820 * C10035 +
                       C22181 * C25568 + C25926 + C25926 + C21821 * C25921) *
                          C141462 +
                      (C22179 * C2961 + C25927 + C25927 + C21819 * C3197 +
                       C22180 * C9668 + C25928 + C25928 + C21820 * C10036 +
                       C22181 * C25569 + C25929 + C25929 + C21821 * C25922) *
                          C141224) *
                         C141353 * C141298 * C2958) *
                    C141247) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[112] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C188 +
            (C275 * C189 + C141353 * C501) * C141327) *
               C89 +
           (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
              C141298 * C2956 -
          ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
           (C1279 + C1273) * C90 +
           ((C275 * C912 + C141353 * C1262) * C141327 +
            (C275 * C823 + C141353 * C1006) * C188) *
               C89) *
              C141298 * C2957 +
          (((C275 * C2960 + C141353 * C3084) * C188 +
            (C275 * C3026 + C141353 * C3254) * C141327) *
               C89 +
           ((C275 * C2961 + C141353 * C3085) * C188 +
            (C275 * C3027 + C141353 * C3255) * C141327) *
               C90 +
           ((C275 * C2962 + C141353 * C3086) * C188 +
            (C275 * C3028 + C141353 * C3256) * C141327) *
               C91 +
           ((C275 * C2963 + C141353 * C3087) * C188 +
            (C275 * C3029 + C141353 * C3257) * C141327) *
               C92) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C21918 +
            (C275 * C189 + C141353 * C501) * C21819 + C6988 * C21919 +
            C7366 * C21820 + C9864 * C21920 + C10124 * C21821) *
               C141462 +
           (C22299 + C22300 + C22301 + C22302 + C22303 + C22304) * C141224) *
              C141298 * C2956 -
          ((C23309 + C23303 + C23304 + C23305 + C23306 + C23307) * C141224 +
           (C26008 * C21821 + C25754 * C21920 + C10124 * C21820 +
            C9864 * C21919 + C7366 * C21819 + C6988 * C21918) *
               C141462) *
              C141298 * C2957 +
          ((C9864 * C21918 + C10124 * C21819 + C25754 * C21919 +
            C26008 * C21820 + (C275 * C25568 + C141353 * C25740) * C21920 +
            (C275 * C25662 + C141353 * C26003) * C21821) *
               C141462 +
           (C6993 * C21918 + C7368 * C21819 + C22934 * C21919 +
            C23308 * C21820 + (C275 * C25569 + C141353 * C25741) * C21920 +
            (C275 * C25663 + C141353 * C26004) * C21821) *
               C141224) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezx[112] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C141353) *
              C141327 * C141298 * C2956 -
          ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
            C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
               C141353 +
           (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
            C90 * C827 + C101 * C823 + C89 * C828) *
               C275) *
              C141327 * C141298 * C2957 +
          ((C101 * C2960 + C89 * C2964 + C103 * C2961 + C90 * C2965 +
            C105 * C2962 + C91 * C2966 + C107 * C2963 + C92 * C2967) *
               C275 +
           (C101 * C3084 + C89 * C3308 + C103 * C3085 + C90 * C3309 +
            C105 * C3086 + C91 * C3310 + C107 * C3087 + C92 * C3311) *
               C141353) *
              C141327 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C275 +
            (C139366 * C276 + C141462 * C579 + C139356 * C277 +
             C141224 * C580) *
                C141353) *
               C21819 +
           ((C23065 + C23066) * C275 + (C23424 + C23425) * C141353) * C21820 +
           C26094 * C21821) *
              C141298 * C2956 -
          (((C26092 + C26093) * C141353 + (C25846 + C25847) * C275) * C21821 +
           ((C23427 + C23426) * C141353 + (C23070 + C23069) * C275) * C21820 +
           ((C23425 + C23424) * C141353 + (C23066 + C23065) * C275) * C21819) *
              C141298 * C2957 +
          (C26094 * C21819 +
           ((C25847 + C25846) * C275 + (C26093 + C26092) * C141353) * C21820 +
           ((C139366 * C25568 + C141462 * C25570 + C139356 * C25569 +
             C141224 * C25571) *
                C275 +
            (C139366 * C25740 + C141462 * C26082 + C139356 * C25741 +
             C141224 * C26083) *
                C141353) *
               C21821) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[112] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C188 * C108 + C141327 * C189) * C275 +
                       (C188 * C276 + C141327 * C635) * C141353) *
                          C89 +
                      (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                         C141298 * C2956 -
                     ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
                      (C1436 + C1430) * C90 +
                      ((C188 * C1006 + C141327 * C1419) * C141353 +
                       (C188 * C823 + C141327 * C912) * C275) *
                          C89) *
                         C141298 * C2957 +
                     (((C188 * C2960 + C141327 * C3026) * C275 +
                       (C188 * C3084 + C141327 * C3362) * C141353) *
                          C89 +
                      ((C188 * C2961 + C141327 * C3027) * C275 +
                       (C188 * C3085 + C141327 * C3363) * C141353) *
                          C90 +
                      ((C188 * C2962 + C141327 * C3028) * C275 +
                       (C188 * C3086 + C141327 * C3364) * C141353) *
                          C91 +
                      ((C188 * C2963 + C141327 * C3029) * C275 +
                       (C188 * C3087 + C141327 * C3365) * C141353) *
                          C92) *
                         C141298 * C2958) *
                    C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C21918 * C108 + C21819 * C189 + C21919 * C823 +
                        C21820 * C912 + C21920 * C2960 + C21821 * C3026) *
                           C275 +
                       (C21918 * C276 + C21819 * C635 + C21919 * C1006 +
                        C21820 * C1419 + C21920 * C3084 + C21821 * C3362) *
                           C141353) *
                          C141462 +
                      ((C21946 + C21947 + C21948) * C275 +
                       (C22471 + C22472 + C22473) * C141353) *
                          C141224) *
                         C141298 * C2956 -
                     (((C23536 + C23537 + C23538) * C141353 +
                       (C22812 + C22813 + C22814) * C275) *
                          C141224 +
                      ((C21920 * C9848 + C21821 * C10284 + C21919 * C3084 +
                        C21820 * C3362 + C21918 * C1006 + C21819 * C1419) *
                           C141353 +
                       (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 +
                        C21820 * C3026 + C21918 * C823 + C21819 * C912) *
                           C275) *
                          C141462) *
                         C141298 * C2957 +
                     (((C21918 * C2960 + C21819 * C3026 + C21919 * C9667 +
                        C21820 * C9768 + C21920 * C25568 + C21821 * C25662) *
                           C275 +
                       (C21918 * C3084 + C21819 * C3362 + C21919 * C9848 +
                        C21820 * C10284 + C21920 * C25740 + C21821 * C26168) *
                           C141353) *
                          C141462 +
                      ((C21918 * C2961 + C21819 * C3027 + C21919 * C9668 +
                        C21820 * C9769 + C21920 * C25569 + C21821 * C25663) *
                           C275 +
                       (C21918 * C3085 + C21819 * C3363 + C21919 * C9849 +
                        C21820 * C10285 + C21920 * C25741 + C21821 * C26169) *
                           C141353) *
                          C141224) *
                         C141298 * C2958) *
                    C141247) /
                       (p * q * std::sqrt(p + q));
    d2eezz[112] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141353 * C714) * C141327 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C141298 * C2956 -
          (C1528 * C92 + C1529 * C91 + C1530 * C90 +
           (C713 * C823 + C1517 + C1517 + C141353 * C1505) * C141327 * C89) *
              C141298 * C2957 +
          ((C713 * C2960 + C3421 + C3421 + C141353 * C3416) * C141327 * C89 +
           (C713 * C2961 + C3422 + C3422 + C141353 * C3417) * C141327 * C90 +
           (C713 * C2962 + C3423 + C3423 + C141353 * C3418) * C141327 * C91 +
           (C713 * C2963 + C3424 + C3424 + C141353 * C3419) * C141327 * C92) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C21819 +
            C7709 * C21820 + C10372 * C21821) *
               C141462 +
           (C22551 + C22552 + C22553) * C141224) *
              C141298 * C2956 -
          ((C23644 + C23639 + C23640) * C141224 +
           (C26253 * C21821 + C10372 * C21820 + C7709 * C21819) * C141462) *
              C141298 * C2957 +
          ((C10372 * C21819 + C26253 * C21820 +
            (C713 * C25568 + C26249 + C26249 + C141353 * C26244) * C21821) *
               C141462 +
           (C7711 * C21819 + C23643 * C21820 +
            (C713 * C25569 + C26250 + C26250 + C141353 * C26245) * C21821) *
               C141224) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexx[113] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C141353 * C141327 * C1596 -
           (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
            C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
            C100 * C1601 + C1617 + C1617 + C89 * C1611) *
               C141353 * C141327 * C141499) *
              C2374 +
          ((C100 * C3490 + C3503 + C3503 + C89 * C3498 + C102 * C3491 + C3504 +
            C3504 + C90 * C3499 + C104 * C3492 + C3505 + C3505 + C91 * C3500 +
            C106 * C3493 + C3506 + C3506 + C92 * C3501) *
               C141353 * C141327 * C141499 -
           (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 + C837 + C837 +
            C91 * C831 + C102 * C822 + C838 + C838 + C90 * C832 + C100 * C823 +
            C839 + C839 + C89 * C833) *
               C141353 * C141327 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
             C21828 + C21828 + C141224 * C121) *
                C141353 * C21819 +
            (C22691 + C22692) * C141353 * C21820 + C25582 * C21821) *
               C1596 -
           ((C26376 + C26377) * C141353 * C21821 +
            (C26378 + C26379) * C141353 * C21820 +
            (C21824 * C1600 + C23747 + C23747 + C141224 * C1610 +
             C21822 * C1601 + C23748 + C23748 + C141462 * C1611) *
                C141353 * C21819) *
               C141499) *
              C2374 +
          (((C26379 + C26378) * C141353 * C21819 +
            (C26377 + C26376) * C141353 * C21820 +
            (C21822 * C26351 + C26366 + C26366 + C141462 * C26355 +
             C21824 * C26352 + C26367 + C26367 + C141224 * C26356) *
                C141353 * C21821) *
               C141499 -
           ((C25587 + C25588) * C141353 * C21821 +
            (C22694 + C22693) * C141353 * C21820 +
            (C22692 + C22691) * C141353 * C21819) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[113] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C101 +
            (C188 * C114 + C141327 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141353 * C1596 -
           (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
            C1714 * C90 + C1715 * C103 +
            (C188 * C1606 + C141327 * C1695) * C89 +
            (C188 * C1601 + C141327 * C1690) * C101) *
               C141353 * C141499) *
              C2374 +
          (((C188 * C3490 + C141327 * C3572) * C101 +
            (C188 * C3494 + C141327 * C3576) * C89 +
            (C188 * C3491 + C141327 * C3573) * C103 +
            (C188 * C3495 + C141327 * C3577) * C90 +
            (C188 * C3492 + C141327 * C3574) * C105 +
            (C188 * C3496 + C141327 * C3578) * C91 +
            (C188 * C3493 + C141327 * C3575) * C107 +
            (C188 * C3497 + C141327 * C3579) * C92) *
               C141353 * C141499 -
           (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
            C937 * C103 + (C188 * C828 + C141327 * C917) * C89 +
            (C188 * C823 + C141327 * C912) * C101) *
               C141353 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C139366 +
            (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
             C21920 * C2964 + C21821 * C3030) *
                C141462 +
            (C21946 + C21947 + C21948) * C139356 +
            (C21949 + C21950 + C21951) * C141224) *
               C141353 * C1596 -
           ((C23865 + C23866 + C23867) * C141224 +
            (C23868 + C23869 + C23870) * C139356 +
            (C21920 * C10473 + C21821 * C10598 + C21919 * C3494 +
             C21820 * C3576 + C21918 * C1606 + C21819 * C1695) *
                C141462 +
            (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
             C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
                C139366) *
               C141353 * C141499) *
              C2374 +
          (((C21918 * C3490 + C21819 * C3572 + C21919 * C10470 +
             C21820 * C10595 + C21920 * C26351 + C21821 * C26477) *
                C139366 +
            (C21918 * C3494 + C21819 * C3576 + C21919 * C10473 +
             C21820 * C10598 + C21920 * C26353 + C21821 * C26479) *
                C141462 +
            (C21918 * C3491 + C21819 * C3573 + C21919 * C10471 +
             C21820 * C10596 + C21920 * C26352 + C21821 * C26478) *
                C139356 +
            (C21918 * C3495 + C21819 * C3577 + C21919 * C10474 +
             C21820 * C10599 + C21920 * C26354 + C21821 * C26480) *
                C141224) *
               C141353 * C141499 -
           ((C22809 + C22810 + C22811) * C141224 +
            (C22812 + C22813 + C22814) * C139356 +
            (C21920 * C9670 + C21821 * C9771 + C21919 * C2964 + C21820 * C3030 +
             C21918 * C828 + C21819 * C917) *
                C141462 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C139366) *
               C141353 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[113] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C101 +
            (C275 * C114 + C141353 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141327 * C1596 -
           (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
            C1808 * C90 + C1809 * C103 +
            (C275 * C1606 + C141353 * C1789) * C89 +
            (C275 * C1601 + C141353 * C1784) * C101) *
               C141327 * C141499) *
              C2374 +
          (((C275 * C3490 + C141353 * C3646) * C101 +
            (C275 * C3494 + C141353 * C3650) * C89 +
            (C275 * C3491 + C141353 * C3647) * C103 +
            (C275 * C3495 + C141353 * C3651) * C90 +
            (C275 * C3492 + C141353 * C3648) * C105 +
            (C275 * C3496 + C141353 * C3652) * C91 +
            (C275 * C3493 + C141353 * C3649) * C107 +
            (C275 * C3497 + C141353 * C3653) * C92) *
               C141327 * C141499 -
           (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
            C1030 * C90 + C1031 * C103 + (C275 * C828 + C141353 * C1011) * C89 +
            (C275 * C823 + C141353 * C1006) * C101) *
               C141327 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C139366 +
             (C275 * C114 + C141353 * C282) * C141462 + C305 * C139356 +
             C306 * C141224) *
                C21819 +
            (C22913 + C22914 + C22915 + C22916) * C21820 + C25755 * C21821) *
               C1596 -
           ((C26584 + C26585 + C26596 + C26597) * C21821 +
            (C26590 + C26591 + C26592 + C26593) * C21820 +
            (C1808 * C141224 + C1809 * C139356 +
             (C275 * C1606 + C141353 * C1789) * C141462 +
             (C275 * C1601 + C141353 * C1784) * C139366) *
                C21819) *
               C141499) *
              C2374 +
          (((C26593 + C26592 + C26591 + C26590) * C21819 +
            (C26597 + C26596 + C26585 + C26584) * C21820 +
            ((C275 * C26351 + C141353 * C26579) * C139366 +
             (C275 * C26353 + C141353 * C26581) * C141462 +
             (C275 * C26352 + C141353 * C26580) * C139356 +
             (C275 * C26354 + C141353 * C26582) * C141224) *
                C21821) *
               C141499 -
           ((C25746 + C25747 + C25756 + C25757) * C21821 +
            (C22920 + C22919 + C22918 + C22917) * C21820 +
            (C22916 + C22915 + C22914 + C22913) * C21819) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[113] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141327) *
               C141353 * C1596 -
           ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
             C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
                C141327 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C188) *
               C141353 * C141499) *
              C2374 +
          (((C101 * C3490 + C89 * C3494 + C103 * C3491 + C90 * C3495 +
             C105 * C3492 + C91 * C3496 + C107 * C3493 + C92 * C3497) *
                C188 +
            (C101 * C3572 + C89 * C3720 + C103 * C3573 + C90 * C3721 +
             C105 * C3574 + C91 * C3722 + C107 * C3575 + C92 * C3723) *
                C141327) *
               C141353 * C141499 -
           ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
             C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
                C141327 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C188) *
               C141353 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C21918 +
            (C139366 * C189 + C141462 * C362 + C139356 * C190 +
             C141224 * C363) *
                C21819 +
            (C23065 + C23066) * C21919 + (C23067 + C23068) * C21820 +
            C25834 * C21920 + C25835 * C21821) *
               C141353 * C1596 -
           ((C26714 + C26715) * C21821 + (C26716 + C26717) * C21920 +
            (C26718 + C26719) * C21820 + (C26720 + C26721) * C21919 +
            (C139356 * C1689 + C141224 * C1877 + C139366 * C1690 +
             C141462 * C1878) *
                C21819 +
            (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
             C141462 * C1606) *
                C21918) *
               C141353 * C141499) *
              C2374 +
          (((C26721 + C26720) * C21918 + (C26719 + C26718) * C21819 +
            (C26717 + C26716) * C21919 + (C26715 + C26714) * C21820 +
            (C139366 * C26351 + C141462 * C26353 + C139356 * C26352 +
             C141224 * C26354) *
                C21920 +
            (C139366 * C26477 + C141462 * C26695 + C139356 * C26478 +
             C141224 * C26696) *
                C21821) *
               C141353 * C141499 -
           ((C25844 + C25845) * C21821 + (C25846 + C25847) * C21920 +
            (C23072 + C23071) * C21820 + (C23070 + C23069) * C21919 +
            (C23068 + C23067) * C21819 + (C23066 + C23065) * C21918) *
               C141353 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[113] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C418 * C108 + C426 + C426 + C141327 * C419) * C89 +
                       C448 * C90 + C449 * C91 + C450 * C92) *
                          C141353 * C1596 -
                      (C1969 * C92 + C1970 * C91 + C1971 * C90 +
                       (C418 * C1601 + C1961 + C1961 + C141327 * C1949) * C89) *
                          C141353 * C141499) *
                         C2374 +
                     (((C418 * C3490 + C3795 + C3795 + C141327 * C3790) * C89 +
                       (C418 * C3491 + C3796 + C3796 + C141327 * C3791) * C90 +
                       (C418 * C3492 + C3797 + C3797 + C141327 * C3792) * C91 +
                       (C418 * C3493 + C3798 + C3798 + C141327 * C3793) * C92) *
                          C141353 * C141499 -
                      (C1191 * C92 + C1192 * C91 + C1193 * C90 +
                       (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C89) *
                          C141353 * C1596) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 +
                        C22180 * C823 + C22184 + C22184 + C21820 * C1171 +
                        C22181 * C2960 + C22185 + C22185 + C21821 * C3196) *
                           C141462 +
                       (C22219 + C22220 + C22221) * C141224) *
                          C141353 * C1596 -
                      ((C24192 + C24193 + C24194) * C141224 +
                       (C22181 * C10470 + C24180 + C24180 + C21821 * C10934 +
                        C22180 * C3490 + C24181 + C24181 + C21820 * C3790 +
                        C22179 * C1601 + C24182 + C24182 + C21819 * C1949) *
                           C141462) *
                          C141353 * C141499) *
                         C2374 +
                     (((C22179 * C3490 + C26822 + C26822 + C21819 * C3790 +
                        C22180 * C10470 + C26823 + C26823 + C21820 * C10934 +
                        C22181 * C26351 + C26824 + C26824 + C21821 * C26819) *
                           C141462 +
                       (C22179 * C3491 + C26825 + C26825 + C21819 * C3791 +
                        C22180 * C10471 + C26826 + C26826 + C21820 * C10935 +
                        C22181 * C26352 + C26827 + C26827 + C21821 * C26820) *
                           C141224) *
                          C141353 * C141499 -
                      ((C23200 + C23201 + C23202) * C141224 +
                       (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
                        C22180 * C2960 + C23189 + C23189 + C21820 * C3196 +
                        C22179 * C823 + C23190 + C23190 + C21819 * C1171) *
                           C141462) *
                          C141353 * C1596) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[113] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C188 +
             (C275 * C189 + C141353 * C501) * C141327) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C1596 -
           ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
            (C2057 + C2051) * C90 +
            ((C275 * C1690 + C141353 * C2040) * C141327 +
             (C275 * C1601 + C141353 * C1784) * C188) *
                C89) *
               C141499) *
              C2374 +
          ((((C275 * C3490 + C141353 * C3646) * C188 +
             (C275 * C3572 + C141353 * C3864) * C141327) *
                C89 +
            ((C275 * C3491 + C141353 * C3647) * C188 +
             (C275 * C3573 + C141353 * C3865) * C141327) *
                C90 +
            ((C275 * C3492 + C141353 * C3648) * C188 +
             (C275 * C3574 + C141353 * C3866) * C141327) *
                C91 +
            ((C275 * C3493 + C141353 * C3649) * C188 +
             (C275 * C3575 + C141353 * C3867) * C141327) *
                C92) *
               C141499 -
           ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
            (C1279 + C1273) * C90 +
            ((C275 * C912 + C141353 * C1262) * C141327 +
             (C275 * C823 + C141353 * C1006) * C188) *
                C89) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C21918 +
             (C275 * C189 + C141353 * C501) * C21819 + C6988 * C21919 +
             C7366 * C21820 + C9864 * C21920 + C10124 * C21821) *
                C141462 +
            (C22299 + C22300 + C22301 + C22302 + C22303 + C22304) * C141224) *
               C1596 -
           ((C24301 + C24295 + C24296 + C24297 + C24298 + C24299) * C141224 +
            (C26930 * C21821 + C26595 * C21920 + C11047 * C21820 +
             C10715 * C21919 + (C275 * C1690 + C141353 * C2040) * C21819 +
             (C275 * C1601 + C141353 * C1784) * C21918) *
                C141462) *
               C141499) *
              C2374 +
          (((C10715 * C21918 + C11047 * C21819 + C26595 * C21919 +
             C26930 * C21820 + (C275 * C26351 + C141353 * C26579) * C21920 +
             (C275 * C26477 + C141353 * C26925) * C21821) *
                C141462 +
            (C8055 * C21918 + C8389 * C21819 + C23974 * C21919 +
             C24300 * C21820 + (C275 * C26352 + C141353 * C26580) * C21920 +
             (C275 * C26478 + C141353 * C26926) * C21821) *
                C141224) *
               C141499 -
           ((C23309 + C23303 + C23304 + C23305 + C23306 + C23307) * C141224 +
            (C26008 * C21821 + C25754 * C21920 + C10124 * C21820 +
             C9864 * C21919 + C7366 * C21819 + C6988 * C21918) *
                C141462) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezx[113] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141353) *
               C141327 * C1596 -
           ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
             C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
                C141353 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C275) *
               C141327 * C141499) *
              C2374 +
          (((C101 * C3490 + C89 * C3494 + C103 * C3491 + C90 * C3495 +
             C105 * C3492 + C91 * C3496 + C107 * C3493 + C92 * C3497) *
                C275 +
            (C101 * C3646 + C89 * C3934 + C103 * C3647 + C90 * C3935 +
             C105 * C3648 + C91 * C3936 + C107 * C3649 + C92 * C3937) *
                C141353) *
               C141327 * C141499 -
           ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
             C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
                C141353 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C275) *
               C141327 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C275 +
             (C139366 * C276 + C141462 * C579 + C139356 * C277 +
              C141224 * C580) *
                 C141353) *
                C21819 +
            ((C23065 + C23066) * C275 + (C23424 + C23425) * C141353) * C21820 +
            C26094 * C21821) *
               C1596 -
           (((C27039 + C27040) * C141353 + (C26716 + C26717) * C275) * C21821 +
            ((C27041 + C27042) * C141353 + (C26720 + C26721) * C275) * C21820 +
            ((C139356 * C1783 + C141224 * C2125 + C139366 * C1784 +
              C141462 * C2126) *
                 C141353 +
             (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
              C141462 * C1606) *
                 C275) *
                C21819) *
               C141499) *
              C2374 +
          ((((C26721 + C26720) * C275 + (C27042 + C27041) * C141353) * C21819 +
            ((C26717 + C26716) * C275 + (C27040 + C27039) * C141353) * C21820 +
            ((C139366 * C26351 + C141462 * C26353 + C139356 * C26352 +
              C141224 * C26354) *
                 C275 +
             (C139366 * C26579 + C141462 * C27028 + C139356 * C26580 +
              C141224 * C27029) *
                 C141353) *
                C21821) *
               C141499 -
           (((C26092 + C26093) * C141353 + (C25846 + C25847) * C275) * C21821 +
            ((C23427 + C23426) * C141353 + (C23070 + C23069) * C275) * C21820 +
            ((C23425 + C23424) * C141353 + (C23066 + C23065) * C275) * C21819) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[113] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C188 * C108 + C141327 * C189) * C275 +
                        (C188 * C276 + C141327 * C635) * C141353) *
                           C89 +
                       (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                          C1596 -
                      ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
                       (C2214 + C2208) * C90 +
                       ((C188 * C1784 + C141327 * C2197) * C141353 +
                        (C188 * C1601 + C141327 * C1690) * C275) *
                           C89) *
                          C141499) *
                         C2374 +
                     ((((C188 * C3490 + C141327 * C3572) * C275 +
                        (C188 * C3646 + C141327 * C4004) * C141353) *
                           C89 +
                       ((C188 * C3491 + C141327 * C3573) * C275 +
                        (C188 * C3647 + C141327 * C4005) * C141353) *
                           C90 +
                       ((C188 * C3492 + C141327 * C3574) * C275 +
                        (C188 * C3648 + C141327 * C4006) * C141353) *
                           C91 +
                       ((C188 * C3493 + C141327 * C3575) * C275 +
                        (C188 * C3649 + C141327 * C4007) * C141353) *
                           C92) *
                          C141499 -
                      ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
                       (C1436 + C1430) * C90 +
                       ((C188 * C1006 + C141327 * C1419) * C141353 +
                        (C188 * C823 + C141327 * C912) * C275) *
                           C89) *
                          C1596) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C21918 * C108 + C21819 * C189 + C21919 * C823 +
                         C21820 * C912 + C21920 * C2960 + C21821 * C3026) *
                            C275 +
                        (C21918 * C276 + C21819 * C635 + C21919 * C1006 +
                         C21820 * C1419 + C21920 * C3084 + C21821 * C3362) *
                            C141353) *
                           C141462 +
                       ((C21946 + C21947 + C21948) * C275 +
                        (C22471 + C22472 + C22473) * C141353) *
                           C141224) *
                          C1596 -
                      (((C24504 + C24505 + C24506) * C141353 +
                        (C23868 + C23869 + C23870) * C275) *
                           C141224 +
                       ((C21920 * C10699 + C21821 * C11255 + C21919 * C3646 +
                         C21820 * C4004 + C21918 * C1784 + C21819 * C2197) *
                            C141353 +
                        (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
                         C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
                            C275) *
                           C141462) *
                          C141499) *
                         C2374 +
                     ((((C21918 * C3490 + C21819 * C3572 + C21919 * C10470 +
                         C21820 * C10595 + C21920 * C26351 + C21821 * C26477) *
                            C275 +
                        (C21918 * C3646 + C21819 * C4004 + C21919 * C10699 +
                         C21820 * C11255 + C21920 * C26579 + C21821 * C27140) *
                            C141353) *
                           C141462 +
                       ((C21918 * C3491 + C21819 * C3573 + C21919 * C10471 +
                         C21820 * C10596 + C21920 * C26352 + C21821 * C26478) *
                            C275 +
                        (C21918 * C3647 + C21819 * C4005 + C21919 * C10700 +
                         C21820 * C11256 + C21920 * C26580 + C21821 * C27141) *
                            C141353) *
                           C141224) *
                          C141499 -
                      (((C23536 + C23537 + C23538) * C141353 +
                        (C22812 + C22813 + C22814) * C275) *
                           C141224 +
                       ((C21920 * C9848 + C21821 * C10284 + C21919 * C3084 +
                         C21820 * C3362 + C21918 * C1006 + C21819 * C1419) *
                            C141353 +
                        (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 +
                         C21820 * C3026 + C21918 * C823 + C21819 * C912) *
                            C275) *
                           C141462) *
                          C1596) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q));
    d2eezz[113] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141327 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C1596 -
           (C2306 * C92 + C2307 * C91 + C2308 * C90 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141327 * C89) *
               C141499) *
              C2374 +
          (((C713 * C3490 + C4079 + C4079 + C141353 * C4074) * C141327 * C89 +
            (C713 * C3491 + C4080 + C4080 + C141353 * C4075) * C141327 * C90 +
            (C713 * C3492 + C4081 + C4081 + C141353 * C4076) * C141327 * C91 +
            (C713 * C3493 + C4082 + C4082 + C141353 * C4077) * C141327 * C92) *
               C141499 -
           (C1528 * C92 + C1529 * C91 + C1530 * C90 +
            (C713 * C823 + C1517 + C1517 + C141353 * C1505) * C141327 * C89) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C21819 +
             C7709 * C21820 + C10372 * C21821) *
                C141462 +
            (C22551 + C22552 + C22553) * C141224) *
               C1596 -
           ((C24612 + C24607 + C24608) * C141224 +
            (C27249 * C21821 + C11367 * C21820 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C21819) *
                C141462) *
               C141499) *
              C2374 +
          (((C11367 * C21819 + C27249 * C21820 +
             (C713 * C26351 + C27245 + C27245 + C141353 * C27240) * C21821) *
                C141462 +
            (C8709 * C21819 + C24611 * C21820 +
             (C713 * C26352 + C27246 + C27246 + C141353 * C27241) * C21821) *
                C141224) *
               C141499 -
           ((C23644 + C23639 + C23640) * C141224 +
            (C26253 * C21821 + C10372 * C21820 + C7709 * C21819) * C141462) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexx[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C141353 * C141327 * C4148 -
           (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
            C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
            C100 * C1601 + C1617 + C1617 + C89 * C1611) *
               C141353 * C141327 * C141499) *
              C141281 * C2376 +
          ((C100 * C1600 + C1618 + C1618 + C89 * C1610 + C102 * C1599 + C1619 +
            C1619 + C90 * C1609 + C104 * C1598 + C1620 + C1620 + C91 * C1608 +
            C106 * C1602 + C1621 + C1621 + C92 * C1612) *
               C141353 * C141327 * C141499 -
           (C106 * C112 + C131 + C131 + C92 * C124 + C104 * C111 + C132 + C132 +
            C91 * C123 + C102 * C110 + C133 + C133 + C90 * C122 + C100 * C109 +
            C134 + C134 + C89 * C121) *
               C141353 * C141327 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
             C21828 + C21828 + C141224 * C121) *
                C141353 * C21819 +
            (C22691 + C22692) * C141353 * C21820 + C25582 * C21821) *
               C4148 -
           ((C26376 + C26377) * C141353 * C21821 +
            (C26378 + C26379) * C141353 * C21820 +
            (C21824 * C1600 + C23747 + C23747 + C141224 * C1610 +
             C21822 * C1601 + C23748 + C23748 + C141462 * C1611) *
                C141353 * C21819) *
               C141499) *
              C141281 * C2376 +
          (((C21822 * C1600 + C23749 + C23749 + C141462 * C1610 +
             C21824 * C1599 + C23750 + C23750 + C141224 * C1609) *
                C141353 * C21819 +
            (C21822 * C3491 + C23751 + C23751 + C141462 * C3499 +
             C21824 * C3492 + C23752 + C23752 + C141224 * C3500) *
                C141353 * C21820 +
            (C21822 * C10471 + C23753 + C23753 + C141462 * C10477 +
             C21824 * C10472 + C23754 + C23754 + C141224 * C10478) *
                C141353 * C21821) *
               C141499 -
           ((C22698 + C22697) * C141353 * C21821 +
            (C22696 + C22695) * C141353 * C21820 +
            (C21824 * C110 + C21837 + C21837 + C141224 * C122 + C21822 * C109 +
             C21838 + C21838 + C141462 * C121) *
                C141353 * C21819) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexy[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C101 +
            (C188 * C114 + C141327 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141353 * C4148 -
           (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
            C1714 * C90 + C1715 * C103 +
            (C188 * C1606 + C141327 * C1695) * C89 +
            (C188 * C1601 + C141327 * C1690) * C101) *
               C141353 * C141499) *
              C141281 * C2376 +
          ((C1715 * C101 + C1714 * C89 + C1713 * C103 + C1712 * C90 +
            C1711 * C105 + C1710 * C91 +
            (C188 * C1602 + C141327 * C1691) * C107 +
            (C188 * C1607 + C141327 * C1696) * C92) *
               C141353 * C141499 -
           (C224 * C92 + C225 * C107 + C223 * C91 + C222 * C105 + C221 * C90 +
            C220 * C103 + C219 * C89 + C218 * C101) *
               C141353 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C139366 +
            (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
             C21920 * C2964 + C21821 * C3030) *
                C141462 +
            (C21946 + C21947 + C21948) * C139356 +
            (C21949 + C21950 + C21951) * C141224) *
               C141353 * C4148 -
           ((C23865 + C23866 + C23867) * C141224 +
            (C23868 + C23869 + C23870) * C139356 +
            (C21920 * C10473 + C21821 * C10598 + C21919 * C3494 +
             C21820 * C3576 + C21918 * C1606 + C21819 * C1695) *
                C141462 +
            (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
             C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
                C139366) *
               C141353 * C141499) *
              C141281 * C2376 +
          (((C23870 + C23869 + C23868) * C139366 +
            (C23867 + C23866 + C23865) * C141462 +
            (C21918 * C1599 + C21819 * C1688 + C21919 * C3492 + C21820 * C3574 +
             C21920 * C10472 + C21821 * C10597) *
                C139356 +
            (C21918 * C1604 + C21819 * C1693 + C21919 * C3496 + C21820 * C3578 +
             C21920 * C10475 + C21821 * C10600) *
                C141224) *
               C141353 * C141499 -
           ((C21952 + C21953 + C21954) * C141224 +
            (C21955 + C21956 + C21957) * C139356 +
            (C21951 + C21950 + C21949) * C141462 +
            (C21948 + C21947 + C21946) * C139366) *
               C141353 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C101 +
            (C275 * C114 + C141353 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141327 * C4148 -
           (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
            C1808 * C90 + C1809 * C103 +
            (C275 * C1606 + C141353 * C1789) * C89 +
            (C275 * C1601 + C141353 * C1784) * C101) *
               C141327 * C141499) *
              C141281 * C2376 +
          ((C1809 * C101 + C1808 * C89 + C1807 * C103 + C1806 * C90 +
            C1805 * C105 + C1804 * C91 +
            (C275 * C1602 + C141353 * C1785) * C107 +
            (C275 * C1607 + C141353 * C1790) * C92) *
               C141327 * C141499 -
           (C311 * C92 + C312 * C107 + C310 * C91 + C309 * C105 + C308 * C90 +
            C307 * C103 + C306 * C89 + C305 * C101) *
               C141327 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C139366 +
             (C275 * C114 + C141353 * C282) * C141462 + C305 * C139356 +
             C306 * C141224) *
                C21819 +
            (C22913 + C22914 + C22915 + C22916) * C21820 + C25755 * C21821) *
               C4148 -
           ((C26584 + C26585 + C26596 + C26597) * C21821 +
            (C26590 + C26591 + C26592 + C26593) * C21820 +
            (C1808 * C141224 + C1809 * C139356 +
             (C275 * C1606 + C141353 * C1789) * C141462 +
             (C275 * C1601 + C141353 * C1784) * C139366) *
                C21819) *
               C141499) *
              C141281 * C2376 +
          (((C1809 * C139366 + C1808 * C141462 + C1807 * C139356 +
             C1806 * C141224) *
                C21819 +
            (C8055 * C139366 + C8054 * C141462 + C8053 * C139356 +
             C8052 * C141224) *
                C21820 +
            (C23974 * C139366 + C23973 * C141462 +
             (C275 * C10472 + C141353 * C10701) * C139356 +
             (C275 * C10475 + C141353 * C10704) * C141224) *
                C21821) *
               C141499 -
           ((C22932 + C22931 + C22930 + C22929) * C21821 +
            (C22928 + C22927 + C22926 + C22925) * C21820 +
            (C308 * C141224 + C307 * C139356 + C306 * C141462 +
             C305 * C139366) *
                C21819) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141327) *
               C141353 * C4148 -
           ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
             C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
                C141327 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C188) *
               C141353 * C141499) *
              C141281 * C2376 +
          (((C101 * C1600 + C89 * C1605 + C103 * C1599 + C90 * C1604 +
             C105 * C1598 + C91 * C1603 + C107 * C1602 + C92 * C1607) *
                C188 +
            (C101 * C1689 + C89 * C1877 + C103 * C1688 + C90 * C1876 +
             C105 * C1687 + C91 * C1875 + C107 * C1691 + C92 * C1879) *
                C141327) *
               C141353 * C141499 -
           ((C107 * C193 + C92 * C366 + C105 * C192 + C91 * C365 + C103 * C191 +
             C90 * C364 + C101 * C190 + C89 * C363) *
                C141327 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C188) *
               C141353 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C21918 +
            (C139366 * C189 + C141462 * C362 + C139356 * C190 +
             C141224 * C363) *
                C21819 +
            (C23065 + C23066) * C21919 + (C23067 + C23068) * C21820 +
            C25834 * C21920 + C25835 * C21821) *
               C141353 * C4148 -
           ((C26714 + C26715) * C21821 + (C26716 + C26717) * C21920 +
            (C26718 + C26719) * C21820 + (C26720 + C26721) * C21919 +
            (C139356 * C1689 + C141224 * C1877 + C139366 * C1690 +
             C141462 * C1878) *
                C21819 +
            (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
             C141462 * C1606) *
                C21918) *
               C141353 * C141499) *
              C141281 * C2376 +
          (((C139366 * C1600 + C141462 * C1605 + C139356 * C1599 +
             C141224 * C1604) *
                C21918 +
            (C139366 * C1689 + C141462 * C1877 + C139356 * C1688 +
             C141224 * C1876) *
                C21819 +
            (C139366 * C3491 + C141462 * C3495 + C139356 * C3492 +
             C141224 * C3496) *
                C21919 +
            (C139366 * C3573 + C141462 * C3721 + C139356 * C3574 +
             C141224 * C3722) *
                C21820 +
            (C139366 * C10471 + C141462 * C10474 + C139356 * C10472 +
             C141224 * C10475) *
                C21920 +
            (C139366 * C10596 + C141462 * C10816 + C139356 * C10597 +
             C141224 * C10817) *
                C21821) *
               C141353 * C141499 -
           ((C23080 + C23079) * C21821 + (C23078 + C23077) * C21920 +
            (C23076 + C23075) * C21820 + (C23074 + C23073) * C21919 +
            (C139356 * C191 + C141224 * C364 + C139366 * C190 +
             C141462 * C363) *
                C21819 +
            (C139356 * C110 + C141224 * C116 + C139366 * C109 +
             C141462 * C115) *
                C21918) *
               C141353 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[114] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C418 * C108 + C426 + C426 + C141327 * C419) * C89 +
                       C448 * C90 + C449 * C91 + C450 * C92) *
                          C141353 * C4148 -
                      (C1969 * C92 + C1970 * C91 + C1971 * C90 +
                       (C418 * C1601 + C1961 + C1961 + C141327 * C1949) * C89) *
                          C141353 * C141499) *
                         C141281 * C2376 +
                     ((C1971 * C89 + C1970 * C90 + C1969 * C91 +
                       (C418 * C1602 + C1962 + C1962 + C141327 * C1950) * C92) *
                          C141353 * C141499 -
                      (C451 * C92 + C450 * C91 + C449 * C90 + C448 * C89) *
                          C141353 * C4148) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 +
                        C22180 * C823 + C22184 + C22184 + C21820 * C1171 +
                        C22181 * C2960 + C22185 + C22185 + C21821 * C3196) *
                           C141462 +
                       (C22219 + C22220 + C22221) * C141224) *
                          C141353 * C4148 -
                      ((C24192 + C24193 + C24194) * C141224 +
                       (C22181 * C10470 + C24180 + C24180 + C21821 * C10934 +
                        C22180 * C3490 + C24181 + C24181 + C21820 * C3790 +
                        C22179 * C1601 + C24182 + C24182 + C21819 * C1949) *
                           C141462) *
                          C141353 * C141499) *
                         C141281 * C2376 +
                     (((C24194 + C24193 + C24192) * C141462 +
                       (C22179 * C1599 + C24183 + C24183 + C21819 * C1947 +
                        C22180 * C3492 + C24184 + C24184 + C21820 * C3792 +
                        C22181 * C10472 + C24185 + C24185 + C21821 * C10936) *
                           C141224) *
                          C141353 * C141499 -
                      ((C22222 + C22223 + C22224) * C141224 +
                       (C22221 + C22220 + C22219) * C141462) *
                          C141353 * C4148) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C188 +
             (C275 * C189 + C141353 * C501) * C141327) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C4148 -
           ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
            (C2057 + C2051) * C90 +
            ((C275 * C1690 + C141353 * C2040) * C141327 +
             (C275 * C1601 + C141353 * C1784) * C188) *
                C89) *
               C141499) *
              C141281 * C2376 +
          (((C2051 + C2057) * C89 + (C2048 + C2056) * C90 +
            (C2045 + C2055) * C91 +
            ((C275 * C1602 + C141353 * C1785) * C188 +
             (C275 * C1691 + C141353 * C2041) * C141327) *
                C92) *
               C141499 -
           ((C527 + C519) * C92 + (C526 + C514) * C91 + (C525 + C511) * C90 +
            (C524 + C508) * C89) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C21918 +
             (C275 * C189 + C141353 * C501) * C21819 + C6988 * C21919 +
             C7366 * C21820 + C9864 * C21920 + C10124 * C21821) *
                C141462 +
            (C22299 + C22300 + C22301 + C22302 + C22303 + C22304) * C141224) *
               C4148 -
           ((C24301 + C24295 + C24296 + C24297 + C24298 + C24299) * C141224 +
            (C26930 * C21821 + C26595 * C21920 + C11047 * C21820 +
             C10715 * C21919 + (C275 * C1690 + C141353 * C2040) * C21819 +
             (C275 * C1601 + C141353 * C1784) * C21918) *
                C141462) *
               C141499) *
              C141281 * C2376 +
          (((C24299 + C24298 + C24297 + C24296 + C24295 + C24301) * C141462 +
            (C1807 * C21918 + C2053 * C21819 + C8053 * C21919 + C8388 * C21820 +
             (C275 * C10472 + C141353 * C10701) * C21920 +
             (C275 * C10597 + C141353 * C11043) * C21821) *
                C141224) *
               C141499 -
           ((C22305 + C22306 + C22307 + C22308 + C22309 + C22310) * C141224 +
            (C22304 + C22303 + C22302 + C22301 + C22300 + C22299) * C141462) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141353) *
               C141327 * C4148 -
           ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
             C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
                C141353 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C275) *
               C141327 * C141499) *
              C141281 * C2376 +
          (((C101 * C1600 + C89 * C1605 + C103 * C1599 + C90 * C1604 +
             C105 * C1598 + C91 * C1603 + C107 * C1602 + C92 * C1607) *
                C275 +
            (C101 * C1783 + C89 * C2125 + C103 * C1782 + C90 * C2124 +
             C105 * C1781 + C91 * C2123 + C107 * C1785 + C92 * C2127) *
                C141353) *
               C141327 * C141499 -
           ((C107 * C280 + C92 * C583 + C105 * C279 + C91 * C582 + C103 * C278 +
             C90 * C581 + C101 * C277 + C89 * C580) *
                C141353 +
            (C107 * C112 + C92 * C118 + C105 * C111 + C91 * C117 + C103 * C110 +
             C90 * C116 + C101 * C109 + C89 * C115) *
                C275) *
               C141327 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C275 +
             (C139366 * C276 + C141462 * C579 + C139356 * C277 +
              C141224 * C580) *
                 C141353) *
                C21819 +
            ((C23065 + C23066) * C275 + (C23424 + C23425) * C141353) * C21820 +
            C26094 * C21821) *
               C4148 -
           (((C27039 + C27040) * C141353 + (C26716 + C26717) * C275) * C21821 +
            ((C27041 + C27042) * C141353 + (C26720 + C26721) * C275) * C21820 +
            ((C139356 * C1783 + C141224 * C2125 + C139366 * C1784 +
              C141462 * C2126) *
                 C141353 +
             (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
              C141462 * C1606) *
                 C275) *
                C21819) *
               C141499) *
              C141281 * C2376 +
          ((((C139366 * C1600 + C141462 * C1605 + C139356 * C1599 +
              C141224 * C1604) *
                 C275 +
             (C139366 * C1783 + C141462 * C2125 + C139356 * C1782 +
              C141224 * C2124) *
                 C141353) *
                C21819 +
            ((C139366 * C3491 + C141462 * C3495 + C139356 * C3492 +
              C141224 * C3496) *
                 C275 +
             (C139366 * C3647 + C141462 * C3935 + C139356 * C3648 +
              C141224 * C3936) *
                 C141353) *
                C21820 +
            ((C139366 * C10471 + C141462 * C10474 + C139356 * C10472 +
              C141224 * C10475) *
                 C275 +
             (C139366 * C10700 + C141462 * C11146 + C139356 * C10701 +
              C141224 * C11147) *
                 C141353) *
                C21821) *
               C141499 -
           (((C23431 + C23430) * C141353 + (C23078 + C23077) * C275) * C21821 +
            ((C23429 + C23428) * C141353 + (C23074 + C23073) * C275) * C21820 +
            ((C139356 * C278 + C141224 * C581 + C139366 * C277 +
              C141462 * C580) *
                 C141353 +
             (C139356 * C110 + C141224 * C116 + C139366 * C109 +
              C141462 * C115) *
                 C275) *
                C21819) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezy[114] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C188 * C108 + C141327 * C189) * C275 +
                        (C188 * C276 + C141327 * C635) * C141353) *
                           C89 +
                       (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                          C4148 -
                      ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
                       (C2214 + C2208) * C90 +
                       ((C188 * C1784 + C141327 * C2197) * C141353 +
                        (C188 * C1601 + C141327 * C1690) * C275) *
                           C89) *
                          C141499) *
                         C141281 * C2376 +
                     (((C2208 + C2214) * C89 + (C2205 + C2213) * C90 +
                       (C2202 + C2212) * C91 +
                       ((C188 * C1602 + C141327 * C1691) * C275 +
                        (C188 * C1785 + C141327 * C2198) * C141353) *
                           C92) *
                          C141499 -
                      ((C661 + C653) * C92 + (C660 + C648) * C91 +
                       (C659 + C645) * C90 + (C658 + C642) * C89) *
                          C4148) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C21918 * C108 + C21819 * C189 + C21919 * C823 +
                         C21820 * C912 + C21920 * C2960 + C21821 * C3026) *
                            C275 +
                        (C21918 * C276 + C21819 * C635 + C21919 * C1006 +
                         C21820 * C1419 + C21920 * C3084 + C21821 * C3362) *
                            C141353) *
                           C141462 +
                       ((C21946 + C21947 + C21948) * C275 +
                        (C22471 + C22472 + C22473) * C141353) *
                           C141224) *
                          C4148 -
                      (((C24504 + C24505 + C24506) * C141353 +
                        (C23868 + C23869 + C23870) * C275) *
                           C141224 +
                       ((C21920 * C10699 + C21821 * C11255 + C21919 * C3646 +
                         C21820 * C4004 + C21918 * C1784 + C21819 * C2197) *
                            C141353 +
                        (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
                         C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
                            C275) *
                           C141462) *
                          C141499) *
                         C141281 * C2376 +
                     ((((C23870 + C23869 + C23868) * C275 +
                        (C24506 + C24505 + C24504) * C141353) *
                           C141462 +
                       ((C21918 * C1599 + C21819 * C1688 + C21919 * C3492 +
                         C21820 * C3574 + C21920 * C10472 + C21821 * C10597) *
                            C275 +
                        (C21918 * C1782 + C21819 * C2195 + C21919 * C3648 +
                         C21820 * C4006 + C21920 * C10701 + C21821 * C11257) *
                            C141353) *
                           C141224) *
                          C141499 -
                      (((C22474 + C22475 + C22476) * C141353 +
                        (C21955 + C21956 + C21957) * C275) *
                           C141224 +
                       ((C22473 + C22472 + C22471) * C141353 +
                        (C21948 + C21947 + C21946) * C275) *
                           C141462) *
                          C4148) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eezz[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141327 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C4148 -
           (C2306 * C92 + C2307 * C91 + C2308 * C90 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141327 * C89) *
               C141499) *
              C141281 * C2376 +
          ((C2308 * C89 + C2307 * C90 + C2306 * C91 +
            (C713 * C1602 + C2296 + C2296 + C141353 * C2284) * C141327 * C92) *
               C141499 -
           (C750 * C92 + C749 * C91 + C748 * C90 + C747 * C89) * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C21819 +
             C7709 * C21820 + C10372 * C21821) *
                C141462 +
            (C22551 + C22552 + C22553) * C141224) *
               C4148 -
           ((C24612 + C24607 + C24608) * C141224 +
            (C27249 * C21821 + C11367 * C21820 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C21819) *
                C141462) *
               C141499) *
              C141281 * C2376 +
          (((C24608 + C24607 + C24612) * C141462 +
            (C2304 * C21819 + C8708 * C21820 +
             (C713 * C10472 + C11364 + C11364 + C141353 * C11358) * C21821) *
                C141224) *
               C141499 -
           ((C22554 + C22555 + C22556) * C141224 +
            (C22553 + C22552 + C22551) * C141462) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[115] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
            C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
            C130 + C130 + C92 * C123) *
               C141353 * C141327 * C4148 -
           (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
            C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
            C100 * C1601 + C1617 + C1617 + C89 * C1611) *
               C141353 * C141327 * C141499) *
              C816 +
          ((C100 * C3490 + C3503 + C3503 + C89 * C3498 + C102 * C3491 + C3504 +
            C3504 + C90 * C3499 + C104 * C3492 + C3505 + C3505 + C91 * C3500 +
            C106 * C3493 + C3506 + C3506 + C92 * C3501) *
               C141353 * C141327 * C141499 -
           (C106 * C820 + C836 + C836 + C92 * C830 + C104 * C821 + C837 + C837 +
            C91 * C831 + C102 * C822 + C838 + C838 + C90 * C832 + C100 * C823 +
            C839 + C839 + C89 * C833) *
               C141353 * C141327 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
             C21828 + C21828 + C141224 * C121) *
                C141353 * C21819 +
            (C22691 + C22692) * C141353 * C21820 + C25582 * C21821) *
               C4148 -
           ((C26376 + C26377) * C141353 * C21821 +
            (C26378 + C26379) * C141353 * C21820 +
            (C21824 * C1600 + C23747 + C23747 + C141224 * C1610 +
             C21822 * C1601 + C23748 + C23748 + C141462 * C1611) *
                C141353 * C21819) *
               C141499) *
              C816 +
          (((C26379 + C26378) * C141353 * C21819 +
            (C26377 + C26376) * C141353 * C21820 +
            (C21822 * C26351 + C26366 + C26366 + C141462 * C26355 +
             C21824 * C26352 + C26367 + C26367 + C141224 * C26356) *
                C141353 * C21821) *
               C141499 -
           ((C25587 + C25588) * C141353 * C21821 +
            (C22694 + C22693) * C141353 * C21820 +
            (C22692 + C22691) * C141353 * C21819) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[115] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C101 +
            (C188 * C114 + C141327 * C195) * C89 + C218 * C103 + C219 * C90 +
            C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
               C141353 * C4148 -
           (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
            C1714 * C90 + C1715 * C103 +
            (C188 * C1606 + C141327 * C1695) * C89 +
            (C188 * C1601 + C141327 * C1690) * C101) *
               C141353 * C141499) *
              C816 +
          (((C188 * C3490 + C141327 * C3572) * C101 +
            (C188 * C3494 + C141327 * C3576) * C89 +
            (C188 * C3491 + C141327 * C3573) * C103 +
            (C188 * C3495 + C141327 * C3577) * C90 +
            (C188 * C3492 + C141327 * C3574) * C105 +
            (C188 * C3496 + C141327 * C3578) * C91 +
            (C188 * C3493 + C141327 * C3575) * C107 +
            (C188 * C3497 + C141327 * C3579) * C92) *
               C141353 * C141499 -
           (C932 * C92 + C933 * C107 + C934 * C91 + C935 * C105 + C936 * C90 +
            C937 * C103 + (C188 * C828 + C141327 * C917) * C89 +
            (C188 * C823 + C141327 * C912) * C101) *
               C141353 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C139366 +
            (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
             C21920 * C2964 + C21821 * C3030) *
                C141462 +
            (C21946 + C21947 + C21948) * C139356 +
            (C21949 + C21950 + C21951) * C141224) *
               C141353 * C4148 -
           ((C23865 + C23866 + C23867) * C141224 +
            (C23868 + C23869 + C23870) * C139356 +
            (C21920 * C10473 + C21821 * C10598 + C21919 * C3494 +
             C21820 * C3576 + C21918 * C1606 + C21819 * C1695) *
                C141462 +
            (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
             C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
                C139366) *
               C141353 * C141499) *
              C816 +
          (((C21918 * C3490 + C21819 * C3572 + C21919 * C10470 +
             C21820 * C10595 + C21920 * C26351 + C21821 * C26477) *
                C139366 +
            (C21918 * C3494 + C21819 * C3576 + C21919 * C10473 +
             C21820 * C10598 + C21920 * C26353 + C21821 * C26479) *
                C141462 +
            (C21918 * C3491 + C21819 * C3573 + C21919 * C10471 +
             C21820 * C10596 + C21920 * C26352 + C21821 * C26478) *
                C139356 +
            (C21918 * C3495 + C21819 * C3577 + C21919 * C10474 +
             C21820 * C10599 + C21920 * C26354 + C21821 * C26480) *
                C141224) *
               C141353 * C141499 -
           ((C22809 + C22810 + C22811) * C141224 +
            (C22812 + C22813 + C22814) * C139356 +
            (C21920 * C9670 + C21821 * C9771 + C21919 * C2964 + C21820 * C3030 +
             C21918 * C828 + C21819 * C917) *
                C141462 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C139366) *
               C141353 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[115] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C101 +
            (C275 * C114 + C141353 * C282) * C89 + C305 * C103 + C306 * C90 +
            C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
               C141327 * C4148 -
           (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
            C1808 * C90 + C1809 * C103 +
            (C275 * C1606 + C141353 * C1789) * C89 +
            (C275 * C1601 + C141353 * C1784) * C101) *
               C141327 * C141499) *
              C816 +
          (((C275 * C3490 + C141353 * C3646) * C101 +
            (C275 * C3494 + C141353 * C3650) * C89 +
            (C275 * C3491 + C141353 * C3647) * C103 +
            (C275 * C3495 + C141353 * C3651) * C90 +
            (C275 * C3492 + C141353 * C3648) * C105 +
            (C275 * C3496 + C141353 * C3652) * C91 +
            (C275 * C3493 + C141353 * C3649) * C107 +
            (C275 * C3497 + C141353 * C3653) * C92) *
               C141327 * C141499 -
           (C1026 * C92 + C1027 * C107 + C1028 * C91 + C1029 * C105 +
            C1030 * C90 + C1031 * C103 + (C275 * C828 + C141353 * C1011) * C89 +
            (C275 * C823 + C141353 * C1006) * C101) *
               C141327 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C139366 +
             (C275 * C114 + C141353 * C282) * C141462 + C305 * C139356 +
             C306 * C141224) *
                C21819 +
            (C22913 + C22914 + C22915 + C22916) * C21820 + C25755 * C21821) *
               C4148 -
           ((C26584 + C26585 + C26596 + C26597) * C21821 +
            (C26590 + C26591 + C26592 + C26593) * C21820 +
            (C1808 * C141224 + C1809 * C139356 +
             (C275 * C1606 + C141353 * C1789) * C141462 +
             (C275 * C1601 + C141353 * C1784) * C139366) *
                C21819) *
               C141499) *
              C816 +
          (((C26593 + C26592 + C26591 + C26590) * C21819 +
            (C26597 + C26596 + C26585 + C26584) * C21820 +
            ((C275 * C26351 + C141353 * C26579) * C139366 +
             (C275 * C26353 + C141353 * C26581) * C141462 +
             (C275 * C26352 + C141353 * C26580) * C139356 +
             (C275 * C26354 + C141353 * C26582) * C141224) *
                C21821) *
               C141499 -
           ((C25746 + C25747 + C25756 + C25757) * C21821 +
            (C22920 + C22919 + C22918 + C22917) * C21820 +
            (C22916 + C22915 + C22914 + C22913) * C21819) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[115] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C188 +
            (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
             C91 * C364 + C107 * C192 + C92 * C365) *
                C141327) *
               C141353 * C4148 -
           ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
             C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
                C141327 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C188) *
               C141353 * C141499) *
              C816 +
          (((C101 * C3490 + C89 * C3494 + C103 * C3491 + C90 * C3495 +
             C105 * C3492 + C91 * C3496 + C107 * C3493 + C92 * C3497) *
                C188 +
            (C101 * C3572 + C89 * C3720 + C103 * C3573 + C90 * C3721 +
             C105 * C3574 + C91 * C3722 + C107 * C3575 + C92 * C3723) *
                C141327) *
               C141353 * C141499 -
           ((C107 * C909 + C92 * C1097 + C105 * C910 + C91 * C1098 +
             C103 * C911 + C90 * C1099 + C101 * C912 + C89 * C1100) *
                C141327 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C188) *
               C141353 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C21918 +
            (C139366 * C189 + C141462 * C362 + C139356 * C190 +
             C141224 * C363) *
                C21819 +
            (C23065 + C23066) * C21919 + (C23067 + C23068) * C21820 +
            C25834 * C21920 + C25835 * C21821) *
               C141353 * C4148 -
           ((C26714 + C26715) * C21821 + (C26716 + C26717) * C21920 +
            (C26718 + C26719) * C21820 + (C26720 + C26721) * C21919 +
            (C139356 * C1689 + C141224 * C1877 + C139366 * C1690 +
             C141462 * C1878) *
                C21819 +
            (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
             C141462 * C1606) *
                C21918) *
               C141353 * C141499) *
              C816 +
          (((C26721 + C26720) * C21918 + (C26719 + C26718) * C21819 +
            (C26717 + C26716) * C21919 + (C26715 + C26714) * C21820 +
            (C139366 * C26351 + C141462 * C26353 + C139356 * C26352 +
             C141224 * C26354) *
                C21920 +
            (C139366 * C26477 + C141462 * C26695 + C139356 * C26478 +
             C141224 * C26696) *
                C21821) *
               C141353 * C141499 -
           ((C25844 + C25845) * C21821 + (C25846 + C25847) * C21920 +
            (C23072 + C23071) * C21820 + (C23070 + C23069) * C21919 +
            (C23068 + C23067) * C21819 + (C23066 + C23065) * C21918) *
               C141353 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[115] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C418 * C108 + C426 + C426 + C141327 * C419) * C89 +
                       C448 * C90 + C449 * C91 + C450 * C92) *
                          C141353 * C4148 -
                      (C1969 * C92 + C1970 * C91 + C1971 * C90 +
                       (C418 * C1601 + C1961 + C1961 + C141327 * C1949) * C89) *
                          C141353 * C141499) *
                         C816 +
                     (((C418 * C3490 + C3795 + C3795 + C141327 * C3790) * C89 +
                       (C418 * C3491 + C3796 + C3796 + C141327 * C3791) * C90 +
                       (C418 * C3492 + C3797 + C3797 + C141327 * C3792) * C91 +
                       (C418 * C3493 + C3798 + C3798 + C141327 * C3793) * C92) *
                          C141353 * C141499 -
                      (C1191 * C92 + C1192 * C91 + C1193 * C90 +
                       (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C89) *
                          C141353 * C4148) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 +
                        C22180 * C823 + C22184 + C22184 + C21820 * C1171 +
                        C22181 * C2960 + C22185 + C22185 + C21821 * C3196) *
                           C141462 +
                       (C22219 + C22220 + C22221) * C141224) *
                          C141353 * C4148 -
                      ((C24192 + C24193 + C24194) * C141224 +
                       (C22181 * C10470 + C24180 + C24180 + C21821 * C10934 +
                        C22180 * C3490 + C24181 + C24181 + C21820 * C3790 +
                        C22179 * C1601 + C24182 + C24182 + C21819 * C1949) *
                           C141462) *
                          C141353 * C141499) *
                         C816 +
                     (((C22179 * C3490 + C26822 + C26822 + C21819 * C3790 +
                        C22180 * C10470 + C26823 + C26823 + C21820 * C10934 +
                        C22181 * C26351 + C26824 + C26824 + C21821 * C26819) *
                           C141462 +
                       (C22179 * C3491 + C26825 + C26825 + C21819 * C3791 +
                        C22180 * C10471 + C26826 + C26826 + C21820 * C10935 +
                        C22181 * C26352 + C26827 + C26827 + C21821 * C26820) *
                           C141224) *
                          C141353 * C141499 -
                      ((C23200 + C23201 + C23202) * C141224 +
                       (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
                        C22180 * C2960 + C23189 + C23189 + C21820 * C3196 +
                        C22179 * C823 + C23190 + C23190 + C21819 * C1171) *
                           C141462) *
                          C141353 * C4148) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[115] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C188 +
             (C275 * C189 + C141353 * C501) * C141327) *
                C89 +
            (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
               C4148 -
           ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
            (C2057 + C2051) * C90 +
            ((C275 * C1690 + C141353 * C2040) * C141327 +
             (C275 * C1601 + C141353 * C1784) * C188) *
                C89) *
               C141499) *
              C816 +
          ((((C275 * C3490 + C141353 * C3646) * C188 +
             (C275 * C3572 + C141353 * C3864) * C141327) *
                C89 +
            ((C275 * C3491 + C141353 * C3647) * C188 +
             (C275 * C3573 + C141353 * C3865) * C141327) *
                C90 +
            ((C275 * C3492 + C141353 * C3648) * C188 +
             (C275 * C3574 + C141353 * C3866) * C141327) *
                C91 +
            ((C275 * C3493 + C141353 * C3649) * C188 +
             (C275 * C3575 + C141353 * C3867) * C141327) *
                C92) *
               C141499 -
           ((C1277 + C1267) * C92 + (C1278 + C1270) * C91 +
            (C1279 + C1273) * C90 +
            ((C275 * C912 + C141353 * C1262) * C141327 +
             (C275 * C823 + C141353 * C1006) * C188) *
                C89) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C21918 +
             (C275 * C189 + C141353 * C501) * C21819 + C6988 * C21919 +
             C7366 * C21820 + C9864 * C21920 + C10124 * C21821) *
                C141462 +
            (C22299 + C22300 + C22301 + C22302 + C22303 + C22304) * C141224) *
               C4148 -
           ((C24301 + C24295 + C24296 + C24297 + C24298 + C24299) * C141224 +
            (C26930 * C21821 + C26595 * C21920 + C11047 * C21820 +
             C10715 * C21919 + (C275 * C1690 + C141353 * C2040) * C21819 +
             (C275 * C1601 + C141353 * C1784) * C21918) *
                C141462) *
               C141499) *
              C816 +
          (((C10715 * C21918 + C11047 * C21819 + C26595 * C21919 +
             C26930 * C21820 + (C275 * C26351 + C141353 * C26579) * C21920 +
             (C275 * C26477 + C141353 * C26925) * C21821) *
                C141462 +
            (C8055 * C21918 + C8389 * C21819 + C23974 * C21919 +
             C24300 * C21820 + (C275 * C26352 + C141353 * C26580) * C21920 +
             (C275 * C26478 + C141353 * C26926) * C21821) *
                C141224) *
               C141499 -
           ((C23309 + C23303 + C23304 + C23305 + C23306 + C23307) * C141224 +
            (C26008 * C21821 + C25754 * C21920 + C10124 * C21820 +
             C9864 * C21919 + C7366 * C21819 + C6988 * C21918) *
                C141462) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezx[115] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
             C91 * C116 + C107 * C111 + C92 * C117) *
                C275 +
            (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
             C91 * C581 + C107 * C279 + C92 * C582) *
                C141353) *
               C141327 * C4148 -
           ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
             C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
                C141353 +
            (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
             C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
                C275) *
               C141327 * C141499) *
              C816 +
          (((C101 * C3490 + C89 * C3494 + C103 * C3491 + C90 * C3495 +
             C105 * C3492 + C91 * C3496 + C107 * C3493 + C92 * C3497) *
                C275 +
            (C101 * C3646 + C89 * C3934 + C103 * C3647 + C90 * C3935 +
             C105 * C3648 + C91 * C3936 + C107 * C3649 + C92 * C3937) *
                C141353) *
               C141327 * C141499 -
           ((C107 * C1003 + C92 * C1345 + C105 * C1004 + C91 * C1346 +
             C103 * C1005 + C90 * C1347 + C101 * C1006 + C89 * C1348) *
                C141353 +
            (C107 * C820 + C92 * C825 + C105 * C821 + C91 * C826 + C103 * C822 +
             C90 * C827 + C101 * C823 + C89 * C828) *
                C275) *
               C141327 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
              C141224 * C115) *
                 C275 +
             (C139366 * C276 + C141462 * C579 + C139356 * C277 +
              C141224 * C580) *
                 C141353) *
                C21819 +
            ((C23065 + C23066) * C275 + (C23424 + C23425) * C141353) * C21820 +
            C26094 * C21821) *
               C4148 -
           (((C27039 + C27040) * C141353 + (C26716 + C26717) * C275) * C21821 +
            ((C27041 + C27042) * C141353 + (C26720 + C26721) * C275) * C21820 +
            ((C139356 * C1783 + C141224 * C2125 + C139366 * C1784 +
              C141462 * C2126) *
                 C141353 +
             (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
              C141462 * C1606) *
                 C275) *
                C21819) *
               C141499) *
              C816 +
          ((((C26721 + C26720) * C275 + (C27042 + C27041) * C141353) * C21819 +
            ((C26717 + C26716) * C275 + (C27040 + C27039) * C141353) * C21820 +
            ((C139366 * C26351 + C141462 * C26353 + C139356 * C26352 +
              C141224 * C26354) *
                 C275 +
             (C139366 * C26579 + C141462 * C27028 + C139356 * C26580 +
              C141224 * C27029) *
                 C141353) *
                C21821) *
               C141499 -
           (((C26092 + C26093) * C141353 + (C25846 + C25847) * C275) * C21821 +
            ((C23427 + C23426) * C141353 + (C23070 + C23069) * C275) * C21820 +
            ((C23425 + C23424) * C141353 + (C23066 + C23065) * C275) * C21819) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[115] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C188 * C108 + C141327 * C189) * C275 +
                        (C188 * C276 + C141327 * C635) * C141353) *
                           C89 +
                       (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                          C4148 -
                      ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
                       (C2214 + C2208) * C90 +
                       ((C188 * C1784 + C141327 * C2197) * C141353 +
                        (C188 * C1601 + C141327 * C1690) * C275) *
                           C89) *
                          C141499) *
                         C816 +
                     ((((C188 * C3490 + C141327 * C3572) * C275 +
                        (C188 * C3646 + C141327 * C4004) * C141353) *
                           C89 +
                       ((C188 * C3491 + C141327 * C3573) * C275 +
                        (C188 * C3647 + C141327 * C4005) * C141353) *
                           C90 +
                       ((C188 * C3492 + C141327 * C3574) * C275 +
                        (C188 * C3648 + C141327 * C4006) * C141353) *
                           C91 +
                       ((C188 * C3493 + C141327 * C3575) * C275 +
                        (C188 * C3649 + C141327 * C4007) * C141353) *
                           C92) *
                          C141499 -
                      ((C1434 + C1424) * C92 + (C1435 + C1427) * C91 +
                       (C1436 + C1430) * C90 +
                       ((C188 * C1006 + C141327 * C1419) * C141353 +
                        (C188 * C823 + C141327 * C912) * C275) *
                           C89) *
                          C4148) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C21918 * C108 + C21819 * C189 + C21919 * C823 +
                         C21820 * C912 + C21920 * C2960 + C21821 * C3026) *
                            C275 +
                        (C21918 * C276 + C21819 * C635 + C21919 * C1006 +
                         C21820 * C1419 + C21920 * C3084 + C21821 * C3362) *
                            C141353) *
                           C141462 +
                       ((C21946 + C21947 + C21948) * C275 +
                        (C22471 + C22472 + C22473) * C141353) *
                           C141224) *
                          C4148 -
                      (((C24504 + C24505 + C24506) * C141353 +
                        (C23868 + C23869 + C23870) * C275) *
                           C141224 +
                       ((C21920 * C10699 + C21821 * C11255 + C21919 * C3646 +
                         C21820 * C4004 + C21918 * C1784 + C21819 * C2197) *
                            C141353 +
                        (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
                         C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
                            C275) *
                           C141462) *
                          C141499) *
                         C816 +
                     ((((C21918 * C3490 + C21819 * C3572 + C21919 * C10470 +
                         C21820 * C10595 + C21920 * C26351 + C21821 * C26477) *
                            C275 +
                        (C21918 * C3646 + C21819 * C4004 + C21919 * C10699 +
                         C21820 * C11255 + C21920 * C26579 + C21821 * C27140) *
                            C141353) *
                           C141462 +
                       ((C21918 * C3491 + C21819 * C3573 + C21919 * C10471 +
                         C21820 * C10596 + C21920 * C26352 + C21821 * C26478) *
                            C275 +
                        (C21918 * C3647 + C21819 * C4005 + C21919 * C10700 +
                         C21820 * C11256 + C21920 * C26580 + C21821 * C27141) *
                            C141353) *
                           C141224) *
                          C141499 -
                      (((C23536 + C23537 + C23538) * C141353 +
                        (C22812 + C22813 + C22814) * C275) *
                           C141224 +
                       ((C21920 * C9848 + C21821 * C10284 + C21919 * C3084 +
                         C21820 * C3362 + C21918 * C1006 + C21819 * C1419) *
                            C141353 +
                        (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 +
                         C21820 * C3026 + C21918 * C823 + C21819 * C912) *
                            C275) *
                           C141462) *
                          C4148) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q));
    d2eezz[115] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141327 * C89 +
            C747 * C90 + C748 * C91 + C749 * C92) *
               C4148 -
           (C2306 * C92 + C2307 * C91 + C2308 * C90 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141327 * C89) *
               C141499) *
              C816 +
          (((C713 * C3490 + C4079 + C4079 + C141353 * C4074) * C141327 * C89 +
            (C713 * C3491 + C4080 + C4080 + C141353 * C4075) * C141327 * C90 +
            (C713 * C3492 + C4081 + C4081 + C141353 * C4076) * C141327 * C91 +
            (C713 * C3493 + C4082 + C4082 + C141353 * C4077) * C141327 * C92) *
               C141499 -
           (C1528 * C92 + C1529 * C91 + C1530 * C90 +
            (C713 * C823 + C1517 + C1517 + C141353 * C1505) * C141327 * C89) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C21819 +
             C7709 * C21820 + C10372 * C21821) *
                C141462 +
            (C22551 + C22552 + C22553) * C141224) *
               C4148 -
           ((C24612 + C24607 + C24608) * C141224 +
            (C27249 * C21821 + C11367 * C21820 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C21819) *
                C141462) *
               C141499) *
              C816 +
          (((C11367 * C21819 + C27249 * C21820 +
             (C713 * C26351 + C27245 + C27245 + C141353 * C27240) * C21821) *
                C141462 +
            (C8709 * C21819 + C24611 * C21820 +
             (C713 * C26352 + C27246 + C27246 + C141353 * C27241) * C21821) *
                C141224) *
               C141499 -
           ((C23644 + C23639 + C23640) * C141224 +
            (C26253 * C21821 + C10372 * C21820 + C7709 * C21819) * C141462) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexx[116] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C108 + C127 + C127 + C89 * C120 + C102 * C109 + C128 + C128 +
           C90 * C121 + C104 * C110 + C129 + C129 + C91 * C122 + C106 * C111 +
           C130 + C130 + C92 * C123) *
              C141353 * C141327 * C5322 -
          (C106 * C1598 + C1614 + C1614 + C92 * C1608 + C104 * C1599 + C1615 +
           C1615 + C91 * C1609 + C102 * C1600 + C1616 + C1616 + C90 * C1610 +
           C100 * C1601 + C1617 + C1617 + C89 * C1611) *
              C141353 * C141327 * C5323 +
          (C100 * C5325 + C5338 + C5338 + C89 * C5333 + C102 * C5326 + C5339 +
           C5339 + C90 * C5334 + C104 * C5327 + C5340 + C5340 + C91 * C5335 +
           C106 * C5328 + C5341 + C5341 + C92 * C5336) *
              C141353 * C141327 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21822 * C108 + C21827 + C21827 + C141462 * C120 + C21824 * C109 +
            C21828 + C21828 + C141224 * C121) *
               C141353 * C21819 +
           (C22691 + C22692) * C141353 * C21820 + C25582 * C21821) *
              C5322 -
          ((C26376 + C26377) * C141353 * C21821 +
           (C26378 + C26379) * C141353 * C21820 +
           (C21824 * C1600 + C23747 + C23747 + C141224 * C1610 +
            C21822 * C1601 + C23748 + C23748 + C141462 * C1611) *
               C141353 * C21819) *
              C5323 +
          ((C21822 * C5325 + C29094 + C29094 + C141462 * C5333 +
            C21824 * C5326 + C29095 + C29095 + C141224 * C5334) *
               C141353 * C21819 +
           (C21822 * C13205 + C29096 + C29096 + C141462 * C13211 +
            C21824 * C13206 + C29097 + C29097 + C141224 * C13212) *
               C141353 * C21820 +
           (C21822 * C29087 + C29098 + C29098 + C141462 * C29091 +
            C21824 * C29088 + C29099 + C29099 + C141224 * C29092) *
               C141353 * C21821) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[116] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C188 * C108 + C141327 * C189) * C101 +
           (C188 * C114 + C141327 * C195) * C89 + C218 * C103 + C219 * C90 +
           C220 * C105 + C221 * C91 + C222 * C107 + C223 * C92) *
              C141353 * C5322 -
          (C1710 * C92 + C1711 * C107 + C1712 * C91 + C1713 * C105 +
           C1714 * C90 + C1715 * C103 + (C188 * C1606 + C141327 * C1695) * C89 +
           (C188 * C1601 + C141327 * C1690) * C101) *
              C141353 * C5323 +
          ((C188 * C5325 + C141327 * C5391) * C101 +
           (C188 * C5329 + C141327 * C5395) * C89 +
           (C188 * C5326 + C141327 * C5392) * C103 +
           (C188 * C5330 + C141327 * C5396) * C90 +
           (C188 * C5327 + C141327 * C5393) * C105 +
           (C188 * C5331 + C141327 * C5397) * C91 +
           (C188 * C5328 + C141327 * C5394) * C107 +
           (C188 * C5332 + C141327 * C5398) * C92) *
              C141353 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
            C21920 * C2960 + C21821 * C3026) *
               C139366 +
           (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
            C21920 * C2964 + C21821 * C3030) *
               C141462 +
           (C21946 + C21947 + C21948) * C139356 +
           (C21949 + C21950 + C21951) * C141224) *
              C141353 * C5322 -
          ((C23865 + C23866 + C23867) * C141224 +
           (C23868 + C23869 + C23870) * C139356 +
           (C21920 * C10473 + C21821 * C10598 + C21919 * C3494 +
            C21820 * C3576 + C21918 * C1606 + C21819 * C1695) *
               C141462 +
           (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
            C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
               C139366) *
              C141353 * C5323 +
          ((C21918 * C5325 + C21819 * C5391 + C21919 * C13205 +
            C21820 * C13294 + C21920 * C29087 + C21821 * C29173) *
               C139366 +
           (C21918 * C5329 + C21819 * C5395 + C21919 * C13208 +
            C21820 * C13297 + C21920 * C29089 + C21821 * C29175) *
               C141462 +
           (C21918 * C5326 + C21819 * C5392 + C21919 * C13206 +
            C21820 * C13295 + C21920 * C29088 + C21821 * C29174) *
               C139356 +
           (C21918 * C5330 + C21819 * C5396 + C21919 * C13209 +
            C21820 * C13298 + C21920 * C29090 + C21821 * C29176) *
               C141224) *
              C141353 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[116] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C141353 * C276) * C101 +
           (C275 * C114 + C141353 * C282) * C89 + C305 * C103 + C306 * C90 +
           C307 * C105 + C308 * C91 + C309 * C107 + C310 * C92) *
              C141327 * C5322 -
          (C1804 * C92 + C1805 * C107 + C1806 * C91 + C1807 * C105 +
           C1808 * C90 + C1809 * C103 + (C275 * C1606 + C141353 * C1789) * C89 +
           (C275 * C1601 + C141353 * C1784) * C101) *
              C141327 * C5323 +
          ((C275 * C5325 + C141353 * C5449) * C101 +
           (C275 * C5329 + C141353 * C5453) * C89 +
           (C275 * C5326 + C141353 * C5450) * C103 +
           (C275 * C5330 + C141353 * C5454) * C90 +
           (C275 * C5327 + C141353 * C5451) * C105 +
           (C275 * C5331 + C141353 * C5455) * C91 +
           (C275 * C5328 + C141353 * C5452) * C107 +
           (C275 * C5332 + C141353 * C5456) * C92) *
              C141327 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C139366 +
            (C275 * C114 + C141353 * C282) * C141462 + C305 * C139356 +
            C306 * C141224) *
               C21819 +
           (C22913 + C22914 + C22915 + C22916) * C21820 + C25755 * C21821) *
              C5322 -
          ((C26584 + C26585 + C26596 + C26597) * C21821 +
           (C26590 + C26591 + C26592 + C26593) * C21820 +
           (C1808 * C141224 + C1809 * C139356 +
            (C275 * C1606 + C141353 * C1789) * C141462 +
            (C275 * C1601 + C141353 * C1784) * C139366) *
               C21819) *
              C5323 +
          (((C275 * C5325 + C141353 * C5449) * C139366 +
            (C275 * C5329 + C141353 * C5453) * C141462 +
            (C275 * C5326 + C141353 * C5450) * C139356 +
            (C275 * C5330 + C141353 * C5454) * C141224) *
               C21819 +
           ((C275 * C13205 + C141353 * C13374) * C139366 +
            (C275 * C13208 + C141353 * C13377) * C141462 +
            (C275 * C13206 + C141353 * C13375) * C139356 +
            (C275 * C13209 + C141353 * C13378) * C141224) *
               C21820 +
           ((C275 * C29087 + C141353 * C29251) * C139366 +
            (C275 * C29089 + C141353 * C29253) * C141462 +
            (C275 * C29088 + C141353 * C29252) * C139356 +
            (C275 * C29090 + C141353 * C29254) * C141224) *
               C21821) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[116] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C188 +
           (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 + C105 * C191 +
            C91 * C364 + C107 * C192 + C92 * C365) *
               C141327) *
              C141353 * C5322 -
          ((C107 * C1687 + C92 * C1875 + C105 * C1688 + C91 * C1876 +
            C103 * C1689 + C90 * C1877 + C101 * C1690 + C89 * C1878) *
               C141327 +
           (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
            C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
               C188) *
              C141353 * C5323 +
          ((C101 * C5325 + C89 * C5329 + C103 * C5326 + C90 * C5330 +
            C105 * C5327 + C91 * C5331 + C107 * C5328 + C92 * C5332) *
               C188 +
           (C101 * C5391 + C89 * C5507 + C103 * C5392 + C90 * C5508 +
            C105 * C5393 + C91 * C5509 + C107 * C5394 + C92 * C5510) *
               C141327) *
              C141353 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C139366 * C108 + C141462 * C114 + C139356 * C109 + C141224 * C115) *
               C21918 +
           (C139366 * C189 + C141462 * C362 + C139356 * C190 + C141224 * C363) *
               C21819 +
           (C23065 + C23066) * C21919 + (C23067 + C23068) * C21820 +
           C25834 * C21920 + C25835 * C21821) *
              C141353 * C5322 -
          ((C26714 + C26715) * C21821 + (C26716 + C26717) * C21920 +
           (C26718 + C26719) * C21820 + (C26720 + C26721) * C21919 +
           (C139356 * C1689 + C141224 * C1877 + C139366 * C1690 +
            C141462 * C1878) *
               C21819 +
           (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
            C141462 * C1606) *
               C21918) *
              C141353 * C5323 +
          ((C139366 * C5325 + C141462 * C5329 + C139356 * C5326 +
            C141224 * C5330) *
               C21918 +
           (C139366 * C5391 + C141462 * C5507 + C139356 * C5392 +
            C141224 * C5508) *
               C21819 +
           (C139366 * C13205 + C141462 * C13208 + C139356 * C13206 +
            C141224 * C13209) *
               C21919 +
           (C139366 * C13294 + C141462 * C13454 + C139356 * C13295 +
            C141224 * C13455) *
               C21820 +
           (C139366 * C29087 + C141462 * C29089 + C139356 * C29088 +
            C141224 * C29090) *
               C21920 +
           (C139366 * C29173 + C141462 * C29329 + C139356 * C29174 +
            C141224 * C29330) *
               C21821) *
              C141353 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[116] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C418 * C108 + C426 + C426 + C141327 * C419) * C89 +
                      C448 * C90 + C449 * C91 + C450 * C92) *
                         C141353 * C5322 -
                     (C1969 * C92 + C1970 * C91 + C1971 * C90 +
                      (C418 * C1601 + C1961 + C1961 + C141327 * C1949) * C89) *
                         C141353 * C5323 +
                     ((C418 * C5325 + C5566 + C5566 + C141327 * C5561) * C89 +
                      (C418 * C5326 + C5567 + C5567 + C141327 * C5562) * C90 +
                      (C418 * C5327 + C5568 + C5568 + C141327 * C5563) * C91 +
                      (C418 * C5328 + C5569 + C5569 + C141327 * C5564) * C92) *
                         C141353 * C5324) *
                    C141281 * C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C22179 * C108 + C22183 + C22183 + C21819 * C419 +
                       C22180 * C823 + C22184 + C22184 + C21820 * C1171 +
                       C22181 * C2960 + C22185 + C22185 + C21821 * C3196) *
                          C141462 +
                      (C22219 + C22220 + C22221) * C141224) *
                         C141353 * C5322 -
                     ((C24192 + C24193 + C24194) * C141224 +
                      (C22181 * C10470 + C24180 + C24180 + C21821 * C10934 +
                       C22180 * C3490 + C24181 + C24181 + C21820 * C3790 +
                       C22179 * C1601 + C24182 + C24182 + C21819 * C1949) *
                          C141462) *
                         C141353 * C5323 +
                     ((C22179 * C5325 + C29408 + C29408 + C21819 * C5561 +
                       C22180 * C13205 + C29409 + C29409 + C21820 * C13531 +
                       C22181 * C29087 + C29410 + C29410 + C21821 * C29405) *
                          C141462 +
                      (C22179 * C5326 + C29411 + C29411 + C21819 * C5562 +
                       C22180 * C13206 + C29412 + C29412 + C21820 * C13532 +
                       C22181 * C29088 + C29413 + C29413 + C21821 * C29406) *
                          C141224) *
                         C141353 * C5324) *
                    C141281 * C141247) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[116] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C188 +
            (C275 * C189 + C141353 * C501) * C141327) *
               C89 +
           (C508 + C524) * C90 + C528 * C91 + C529 * C92) *
              C5322 -
          ((C2055 + C2045) * C92 + (C2056 + C2048) * C91 +
           (C2057 + C2051) * C90 +
           ((C275 * C1690 + C141353 * C2040) * C141327 +
            (C275 * C1601 + C141353 * C1784) * C188) *
               C89) *
              C5323 +
          (((C275 * C5325 + C141353 * C5449) * C188 +
            (C275 * C5391 + C141353 * C5619) * C141327) *
               C89 +
           ((C275 * C5326 + C141353 * C5450) * C188 +
            (C275 * C5392 + C141353 * C5620) * C141327) *
               C90 +
           ((C275 * C5327 + C141353 * C5451) * C188 +
            (C275 * C5393 + C141353 * C5621) * C141327) *
               C91 +
           ((C275 * C5328 + C141353 * C5452) * C188 +
            (C275 * C5394 + C141353 * C5622) * C141327) *
               C92) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C21918 +
            (C275 * C189 + C141353 * C501) * C21819 + C6988 * C21919 +
            C7366 * C21820 + C9864 * C21920 + C10124 * C21821) *
               C141462 +
           (C22299 + C22300 + C22301 + C22302 + C22303 + C22304) * C141224) *
              C5322 -
          ((C24301 + C24295 + C24296 + C24297 + C24298 + C24299) * C141224 +
           (C26930 * C21821 + C26595 * C21920 + C11047 * C21820 +
            C10715 * C21919 + (C275 * C1690 + C141353 * C2040) * C21819 +
            (C275 * C1601 + C141353 * C1784) * C21918) *
               C141462) *
              C5323 +
          (((C275 * C5325 + C141353 * C5449) * C21918 +
            (C275 * C5391 + C141353 * C5619) * C21819 +
            (C275 * C13205 + C141353 * C13374) * C21919 +
            (C275 * C13294 + C141353 * C13614) * C21820 +
            (C275 * C29087 + C141353 * C29251) * C21920 +
            (C275 * C29173 + C141353 * C29487) * C21821) *
               C141462 +
           ((C275 * C5326 + C141353 * C5450) * C21918 +
            (C275 * C5392 + C141353 * C5620) * C21819 +
            (C275 * C13206 + C141353 * C13375) * C21919 +
            (C275 * C13295 + C141353 * C13615) * C21820 +
            (C275 * C29088 + C141353 * C29252) * C21920 +
            (C275 * C29174 + C141353 * C29488) * C21821) *
               C141224) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eezx[116] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 + C105 * C110 +
            C91 * C116 + C107 * C111 + C92 * C117) *
               C275 +
           (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 + C105 * C278 +
            C91 * C581 + C107 * C279 + C92 * C582) *
               C141353) *
              C141327 * C5322 -
          ((C107 * C1781 + C92 * C2123 + C105 * C1782 + C91 * C2124 +
            C103 * C1783 + C90 * C2125 + C101 * C1784 + C89 * C2126) *
               C141353 +
           (C107 * C1598 + C92 * C1603 + C105 * C1599 + C91 * C1604 +
            C103 * C1600 + C90 * C1605 + C101 * C1601 + C89 * C1606) *
               C275) *
              C141327 * C5323 +
          ((C101 * C5325 + C89 * C5329 + C103 * C5326 + C90 * C5330 +
            C105 * C5327 + C91 * C5331 + C107 * C5328 + C92 * C5332) *
               C275 +
           (C101 * C5449 + C89 * C5673 + C103 * C5450 + C90 * C5674 +
            C105 * C5451 + C91 * C5675 + C107 * C5452 + C92 * C5676) *
               C141353) *
              C141327 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C139366 * C108 + C141462 * C114 + C139356 * C109 +
             C141224 * C115) *
                C275 +
            (C139366 * C276 + C141462 * C579 + C139356 * C277 +
             C141224 * C580) *
                C141353) *
               C21819 +
           ((C23065 + C23066) * C275 + (C23424 + C23425) * C141353) * C21820 +
           C26094 * C21821) *
              C5322 -
          (((C27039 + C27040) * C141353 + (C26716 + C26717) * C275) * C21821 +
           ((C27041 + C27042) * C141353 + (C26720 + C26721) * C275) * C21820 +
           ((C139356 * C1783 + C141224 * C2125 + C139366 * C1784 +
             C141462 * C2126) *
                C141353 +
            (C139356 * C1600 + C141224 * C1605 + C139366 * C1601 +
             C141462 * C1606) *
                C275) *
               C21819) *
              C5323 +
          (((C139366 * C5325 + C141462 * C5329 + C139356 * C5326 +
             C141224 * C5330) *
                C275 +
            (C139366 * C5449 + C141462 * C5673 + C139356 * C5450 +
             C141224 * C5674) *
                C141353) *
               C21819 +
           ((C139366 * C13205 + C141462 * C13208 + C139356 * C13206 +
             C141224 * C13209) *
                C275 +
            (C139366 * C13374 + C141462 * C13691 + C139356 * C13375 +
             C141224 * C13692) *
                C141353) *
               C21820 +
           ((C139366 * C29087 + C141462 * C29089 + C139356 * C29088 +
             C141224 * C29090) *
                C275 +
            (C139366 * C29251 + C141462 * C29563 + C139356 * C29252 +
             C141224 * C29564) *
                C141353) *
               C21821) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[116] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C188 * C108 + C141327 * C189) * C275 +
                       (C188 * C276 + C141327 * C635) * C141353) *
                          C89 +
                      (C642 + C658) * C90 + C662 * C91 + C663 * C92) *
                         C5322 -
                     ((C2212 + C2202) * C92 + (C2213 + C2205) * C91 +
                      (C2214 + C2208) * C90 +
                      ((C188 * C1784 + C141327 * C2197) * C141353 +
                       (C188 * C1601 + C141327 * C1690) * C275) *
                          C89) *
                         C5323 +
                     (((C188 * C5325 + C141327 * C5391) * C275 +
                       (C188 * C5449 + C141327 * C5727) * C141353) *
                          C89 +
                      ((C188 * C5326 + C141327 * C5392) * C275 +
                       (C188 * C5450 + C141327 * C5728) * C141353) *
                          C90 +
                      ((C188 * C5327 + C141327 * C5393) * C275 +
                       (C188 * C5451 + C141327 * C5729) * C141353) *
                          C91 +
                      ((C188 * C5328 + C141327 * C5394) * C275 +
                       (C188 * C5452 + C141327 * C5730) * C141353) *
                          C92) *
                         C5324) *
                    C141281 * C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C21918 * C108 + C21819 * C189 + C21919 * C823 +
                        C21820 * C912 + C21920 * C2960 + C21821 * C3026) *
                           C275 +
                       (C21918 * C276 + C21819 * C635 + C21919 * C1006 +
                        C21820 * C1419 + C21920 * C3084 + C21821 * C3362) *
                           C141353) *
                          C141462 +
                      ((C21946 + C21947 + C21948) * C275 +
                       (C22471 + C22472 + C22473) * C141353) *
                          C141224) *
                         C5322 -
                     (((C24504 + C24505 + C24506) * C141353 +
                       (C23868 + C23869 + C23870) * C275) *
                          C141224 +
                      ((C21920 * C10699 + C21821 * C11255 + C21919 * C3646 +
                        C21820 * C4004 + C21918 * C1784 + C21819 * C2197) *
                           C141353 +
                       (C21920 * C10470 + C21821 * C10595 + C21919 * C3490 +
                        C21820 * C3572 + C21918 * C1601 + C21819 * C1690) *
                           C275) *
                          C141462) *
                         C5323 +
                     (((C21918 * C5325 + C21819 * C5391 + C21919 * C13205 +
                        C21820 * C13294 + C21920 * C29087 + C21821 * C29173) *
                           C275 +
                       (C21918 * C5449 + C21819 * C5727 + C21919 * C13374 +
                        C21820 * C13768 + C21920 * C29251 + C21821 * C29639) *
                           C141353) *
                          C141462 +
                      ((C21918 * C5326 + C21819 * C5392 + C21919 * C13206 +
                        C21820 * C13295 + C21920 * C29088 + C21821 * C29174) *
                           C275 +
                       (C21918 * C5450 + C21819 * C5728 + C21919 * C13375 +
                        C21820 * C13769 + C21920 * C29252 + C21821 * C29640) *
                           C141353) *
                          C141224) *
                         C5324) *
                    C141281 * C141247) /
                       (p * q * std::sqrt(p + q));
    d2eezz[116] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141353 * C714) * C141327 * C89 +
           C747 * C90 + C748 * C91 + C749 * C92) *
              C5322 -
          (C2306 * C92 + C2307 * C91 + C2308 * C90 +
           (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141327 * C89) *
              C5323 +
          ((C713 * C5325 + C5786 + C5786 + C141353 * C5781) * C141327 * C89 +
           (C713 * C5326 + C5787 + C5787 + C141353 * C5782) * C141327 * C90 +
           (C713 * C5327 + C5788 + C5788 + C141353 * C5783) * C141327 * C91 +
           (C713 * C5328 + C5789 + C5789 + C141353 * C5784) * C141327 * C92) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C21819 +
            C7709 * C21820 + C10372 * C21821) *
               C141462 +
           (C22551 + C22552 + C22553) * C141224) *
              C5322 -
          ((C24612 + C24607 + C24608) * C141224 +
           (C27249 * C21821 + C11367 * C21820 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C21819) *
               C141462) *
              C5323 +
          (((C713 * C5325 + C5786 + C5786 + C141353 * C5781) * C21819 +
            (C713 * C13205 + C13849 + C13849 + C141353 * C13845) * C21820 +
            (C713 * C29087 + C29718 + C29718 + C141353 * C29715) * C21821) *
               C141462 +
           ((C713 * C5326 + C5787 + C5787 + C141353 * C5782) * C21819 +
            (C713 * C13206 + C13850 + C13850 + C141353 * C13846) * C21820 +
            (C713 * C29088 + C29719 + C29719 + C141353 * C29716) * C21821) *
               C141224) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eexx[117] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C5868 * C108 + C5875 + C5875 + C5863 * C120 +
                       C5870 * C109 + C5876 + C5876 + C5864 * C121 +
                       C5872 * C110 + C5877 + C5877 + C5865 * C122) *
                          C141353 * C141478 +
                      (C5868 * C823 + C5878 + C5878 + C5863 * C833 +
                       C5870 * C822 + C5879 + C5879 + C5864 * C832 +
                       C5872 * C821 + C5880 + C5880 + C5865 * C831) *
                          C141353 * C141341) *
                         C141298 * C141281 * C97 -
                     ((C5872 * C820 + C5881 + C5881 + C5865 * C830 +
                       C5870 * C821 + C5882 + C5882 + C5864 * C831 +
                       C5868 * C822 + C5883 + C5883 + C5863 * C832) *
                          C141353 * C141341 +
                      (C5872 * C111 + C5884 + C5884 + C5865 * C123 +
                       C5870 * C110 + C5885 + C5885 + C5864 * C122 +
                       C5868 * C109 + C5886 + C5886 + C5863 * C121) *
                          C141353 * C141478) *
                         C141298 * C141281 * C98 +
                     ((C5868 * C110 + C5887 + C5887 + C5863 * C122 +
                       C5870 * C111 + C5888 + C5888 + C5864 * C123 +
                       C5872 * C112 + C5889 + C5889 + C5865 * C124) *
                          C141353 * C141478 +
                      (C5868 * C821 + C5890 + C5890 + C5863 * C831 +
                       C5870 * C820 + C5891 + C5891 + C5864 * C830 +
                       C5872 * C824 + C5892 + C5892 + C5865 * C834) *
                          C141353 * C141341) *
                         C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C29774 * C108 + C29777 + C29777 + C141219 * C120) *
                          C141353 * C29770 +
                      (C29774 * C823 + C29778 + C29778 + C141219 * C833) *
                          C141353 * C29771 +
                      (C29774 * C2960 + C29779 + C29779 + C141219 * C2968) *
                          C141353 * C29772 +
                      (C29774 * C9667 + C29780 + C29780 + C141219 * C9673) *
                          C141353 * C29773) *
                         C141298 * C141281 * C97 -
                     ((C29774 * C9668 + C29781 + C29781 + C141219 * C9674) *
                          C141353 * C29773 +
                      (C29774 * C2961 + C29782 + C29782 + C141219 * C2969) *
                          C141353 * C29772 +
                      (C29774 * C822 + C29783 + C29783 + C141219 * C832) *
                          C141353 * C29771 +
                      (C29774 * C109 + C29784 + C29784 + C141219 * C121) *
                          C141353 * C29770) *
                         C141298 * C141281 * C98 +
                     ((C29774 * C110 + C29785 + C29785 + C141219 * C122) *
                          C141353 * C29770 +
                      (C29774 * C821 + C29786 + C29786 + C141219 * C831) *
                          C141353 * C29771 +
                      (C29774 * C2962 + C29787 + C29787 + C141219 * C2970) *
                          C141353 * C29772 +
                      (C29774 * C9669 + C29788 + C29788 + C141219 * C9675) *
                          C141353 * C29773) *
                         C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q));
    d2eexy[117] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
               C5869 +
           (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
               C5863 +
           (C5993 + C5994) * C5871 + (C5995 + C5996) * C5864 + C6005 * C5873 +
           C6006 * C5865) *
              C141353 * C141298 * C141281 * C97 -
          ((C6001 + C6002) * C5865 + (C6003 + C6004) * C5873 +
           (C6000 + C5999) * C5864 + (C5998 + C5997) * C5871 +
           (C5996 + C5995) * C5863 + (C5994 + C5993) * C5869) *
              C141353 * C141298 * C141281 * C98 +
          (C6005 * C5869 + C6006 * C5863 + (C6004 + C6003) * C5871 +
           (C6002 + C6001) * C5864 +
           (C5966 * C112 + C141478 * C193 + C5967 * C824 + C141341 * C913) *
               C5873 +
           (C5966 * C118 + C141478 * C199 + C5967 * C829 + C141341 * C918) *
               C5865) *
              C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
            C29840 * C2960 + C29772 * C3026 + C29841 * C9667 + C29773 * C9768) *
               C29775 +
           (C29838 * C114 + C29770 * C195 + C29839 * C828 + C29771 * C917 +
            C29840 * C2964 + C29772 * C3030 + C29841 * C9670 + C29773 * C9771) *
               C141219) *
              C141353 * C141298 * C141281 * C97 -
          ((C29841 * C9671 + C29773 * C9772 + C29840 * C2965 + C29772 * C3031 +
            C29839 * C827 + C29771 * C916 + C29838 * C115 + C29770 * C196) *
               C141219 +
           (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
            C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
               C29775) *
              C141353 * C141298 * C141281 * C98 +
          ((C29838 * C110 + C29770 * C191 + C29839 * C821 + C29771 * C910 +
            C29840 * C2962 + C29772 * C3028 + C29841 * C9669 + C29773 * C9770) *
               C29775 +
           (C29838 * C116 + C29770 * C197 + C29839 * C826 + C29771 * C915 +
            C29840 * C2966 + C29772 * C3032 + C29841 * C9672 + C29773 * C9773) *
               C141219) *
              C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexz[117] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C275 * C108 + C141353 * C276) * C5869 +
                       (C275 * C114 + C141353 * C282) * C5863 + C305 * C5871 +
                       C306 * C5864 + C307 * C5873 + C308 * C5865) *
                          C141478 +
                      ((C275 * C823 + C141353 * C1006) * C5869 +
                       (C275 * C828 + C141353 * C1011) * C5863 + C1031 * C5871 +
                       C1030 * C5864 + C1029 * C5873 + C1028 * C5865) *
                          C141341) *
                         C141298 * C141281 * C97 -
                     ((C1026 * C5865 + C1027 * C5873 + C1028 * C5864 +
                       C1029 * C5871 + C1030 * C5863 + C1031 * C5869) *
                          C141341 +
                      (C310 * C5865 + C309 * C5873 + C308 * C5864 +
                       C307 * C5871 + C306 * C5863 + C305 * C5869) *
                          C141478) *
                         C141298 * C141281 * C98 +
                     ((C307 * C5869 + C308 * C5863 + C309 * C5871 +
                       C310 * C5864 + C312 * C5873 + C311 * C5865) *
                          C141478 +
                      (C1029 * C5869 + C1028 * C5863 + C1027 * C5871 +
                       C1026 * C5864 + (C275 * C824 + C141353 * C1007) * C5873 +
                       (C275 * C829 + C141353 * C1012) * C5865) *
                          C141341) *
                         C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C275 * C108 + C141353 * C276) * C29775 +
                       (C275 * C114 + C141353 * C282) * C141219) *
                          C29770 +
                      (C6988 * C29775 + C6989 * C141219) * C29771 +
                      (C9864 * C29775 + C9863 * C141219) * C29772 +
                      (C25754 * C29775 + C25753 * C141219) * C29773) *
                         C141298 * C141281 * C97 -
                     ((C22933 * C141219 + C22934 * C29775) * C29773 +
                      (C6992 * C141219 + C6993 * C29775) * C29772 +
                      (C1030 * C141219 + C1031 * C29775) * C29771 +
                      (C306 * C141219 + C305 * C29775) * C29770) *
                         C141298 * C141281 * C98 +
                     ((C307 * C29775 + C308 * C141219) * C29770 +
                      (C1029 * C29775 + C1028 * C141219) * C29771 +
                      (C6991 * C29775 + C6990 * C141219) * C29772 +
                      ((C275 * C9669 + C141353 * C9850) * C29775 +
                       (C275 * C9672 + C141353 * C9853) * C141219) *
                          C29773) *
                         C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q));
    d2eeyx[117] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                       C5864 * C115 + C5873 * C110 + C5865 * C116) *
                          C5966 +
                      (C5869 * C189 + C5863 * C362 + C5871 * C190 +
                       C5864 * C363 + C5873 * C191 + C5865 * C364) *
                          C141478 +
                      (C5869 * C823 + C5863 * C828 + C5871 * C822 +
                       C5864 * C827 + C5873 * C821 + C5865 * C826) *
                          C5967 +
                      (C5869 * C912 + C5863 * C1100 + C5871 * C911 +
                       C5864 * C1099 + C5873 * C910 + C5865 * C1098) *
                          C141341) *
                         C141353 * C141298 * C141281 * C97 -
                     ((C5873 * C909 + C5865 * C1097 + C5871 * C910 +
                       C5864 * C1098 + C5869 * C911 + C5863 * C1099) *
                          C141341 +
                      (C5873 * C820 + C5865 * C825 + C5871 * C821 +
                       C5864 * C826 + C5869 * C822 + C5863 * C827) *
                          C5967 +
                      (C5873 * C192 + C5865 * C365 + C5871 * C191 +
                       C5864 * C364 + C5869 * C190 + C5863 * C363) *
                          C141478 +
                      (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                       C5864 * C116 + C5869 * C109 + C5863 * C115) *
                          C5966) *
                         C141353 * C141298 * C141281 * C98 +
                     ((C5869 * C110 + C5863 * C116 + C5871 * C111 +
                       C5864 * C117 + C5873 * C112 + C5865 * C118) *
                          C5966 +
                      (C5869 * C191 + C5863 * C364 + C5871 * C192 +
                       C5864 * C365 + C5873 * C193 + C5865 * C366) *
                          C141478 +
                      (C5869 * C821 + C5863 * C826 + C5871 * C820 +
                       C5864 * C825 + C5873 * C824 + C5865 * C829) *
                          C5967 +
                      (C5869 * C910 + C5863 * C1098 + C5871 * C909 +
                       C5864 * C1097 + C5873 * C913 + C5865 * C1101) *
                          C141341) *
                         C141353 * C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C29775 * C108 + C141219 * C114) * C29838 +
                      (C29775 * C189 + C141219 * C362) * C29770 +
                      (C29775 * C823 + C141219 * C828) * C29839 +
                      (C29775 * C912 + C141219 * C1100) * C29771 +
                      (C29775 * C2960 + C141219 * C2964) * C29840 +
                      (C29775 * C3026 + C141219 * C3142) * C29772 +
                      (C29775 * C9667 + C141219 * C9670) * C29841 +
                      (C29775 * C9768 + C141219 * C9940) * C29773) *
                         C141353 * C141298 * C141281 * C97 -
                     ((C29775 * C9769 + C141219 * C9941) * C29773 +
                      (C29775 * C9668 + C141219 * C9671) * C29841 +
                      (C29775 * C3027 + C141219 * C3143) * C29772 +
                      (C29775 * C2961 + C141219 * C2965) * C29840 +
                      (C29775 * C911 + C141219 * C1099) * C29771 +
                      (C29775 * C822 + C141219 * C827) * C29839 +
                      (C29775 * C190 + C141219 * C363) * C29770 +
                      (C29775 * C109 + C141219 * C115) * C29838) *
                         C141353 * C141298 * C141281 * C98 +
                     ((C29775 * C110 + C141219 * C116) * C29838 +
                      (C29775 * C191 + C141219 * C364) * C29770 +
                      (C29775 * C821 + C141219 * C826) * C29839 +
                      (C29775 * C910 + C141219 * C1098) * C29771 +
                      (C29775 * C2962 + C141219 * C2966) * C29840 +
                      (C29775 * C3028 + C141219 * C3144) * C29772 +
                      (C29775 * C9669 + C141219 * C9672) * C29841 +
                      (C29775 * C9770 + C141219 * C9942) * C29773) *
                         C141353 * C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q));
    d2eeyy[117] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6228 * C108 + C6231 + C6231 + C141478 * C419 + C6229 * C823 +
            C6232 + C6232 + C141341 * C1171) *
               C5863 +
           (C6265 + C6266) * C5864 + C6271 * C5865) *
              C141353 * C141298 * C141281 * C97 -
          ((C6269 + C6270) * C5865 + (C6268 + C6267) * C5864 +
           (C6266 + C6265) * C5863) *
              C141353 * C141298 * C141281 * C98 +
          (C6271 * C5863 + (C6270 + C6269) * C5864 +
           (C6228 * C112 + C6251 + C6251 + C141478 * C423 + C6229 * C824 +
            C6252 + C6252 + C141341 * C1172) *
               C5865) *
              C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C29992 * C108 + C29997 + C29997 + C29770 * C419 + C29993 * C823 +
           C29998 + C29998 + C29771 * C1171 + C29994 * C2960 + C29999 + C29999 +
           C29772 * C3196 + C29995 * C9667 + C30000 + C30000 +
           C29773 * C10035) *
              C141219 * C141353 * C141298 * C141281 * C97 -
          (C29995 * C9668 + C30001 + C30001 + C29773 * C10036 + C29994 * C2961 +
           C30002 + C30002 + C29772 * C3197 + C29993 * C822 + C30003 + C30003 +
           C29771 * C1170 + C29992 * C109 + C30004 + C30004 + C29770 * C420) *
              C141219 * C141353 * C141298 * C141281 * C98 +
          (C29992 * C110 + C30005 + C30005 + C29770 * C421 + C29993 * C821 +
           C30006 + C30006 + C29771 * C1169 + C29994 * C2962 + C30007 + C30007 +
           C29772 * C3198 + C29995 * C9669 + C30008 + C30008 +
           C29773 * C10037) *
              C141219 * C141353 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[117] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C5966 +
            (C275 * C189 + C141353 * C501) * C141478 +
            (C275 * C823 + C141353 * C1006) * C5967 +
            (C275 * C912 + C141353 * C1262) * C141341) *
               C5863 +
           (C6346 + C6347 + C6348 + C6349) * C5864 + C6360 * C5865) *
              C141298 * C141281 * C97 -
          ((C6354 + C6355 + C6356 + C6357) * C5865 +
           (C6353 + C6352 + C6351 + C6350) * C5864 +
           (C6349 + C6348 + C6347 + C6346) * C5863) *
              C141298 * C141281 * C98 +
          (C6360 * C5863 + (C6357 + C6356 + C6355 + C6354) * C5864 +
           (C312 * C5966 + C523 * C141478 +
            (C275 * C824 + C141353 * C1007) * C5967 +
            (C275 * C913 + C141353 * C1263) * C141341) *
               C5865) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C275 * C108 + C141353 * C276) * C29838 +
           (C275 * C189 + C141353 * C501) * C29770 + C6988 * C29839 +
           C7366 * C29771 + C9864 * C29840 + C10124 * C29772 + C25754 * C29841 +
           C26008 * C29773) *
              C141219 * C141298 * C141281 * C97 -
          (C23308 * C29773 + C22934 * C29841 + C7368 * C29772 + C6993 * C29840 +
           C1276 * C29771 + C1031 * C29839 + C520 * C29770 + C305 * C29838) *
              C141219 * C141298 * C141281 * C98 +
          (C307 * C29838 + C521 * C29770 + C1029 * C29839 + C1275 * C29771 +
           C6991 * C29840 + C7367 * C29772 +
           (C275 * C9669 + C141353 * C9850) * C29841 +
           (C275 * C9770 + C141353 * C10120) * C29773) *
              C141219 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezx[117] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                        C5864 * C115 + C5873 * C110 + C5865 * C116) *
                           C275 +
                       (C5869 * C276 + C5863 * C579 + C5871 * C277 +
                        C5864 * C580 + C5873 * C278 + C5865 * C581) *
                           C141353) *
                          C141478 +
                      ((C5869 * C823 + C5863 * C828 + C5871 * C822 +
                        C5864 * C827 + C5873 * C821 + C5865 * C826) *
                           C275 +
                       (C5869 * C1006 + C5863 * C1348 + C5871 * C1005 +
                        C5864 * C1347 + C5873 * C1004 + C5865 * C1346) *
                           C141353) *
                          C141341) *
                         C141298 * C141281 * C97 -
                     (((C5873 * C1003 + C5865 * C1345 + C5871 * C1004 +
                        C5864 * C1346 + C5869 * C1005 + C5863 * C1347) *
                           C141353 +
                       (C5873 * C820 + C5865 * C825 + C5871 * C821 +
                        C5864 * C826 + C5869 * C822 + C5863 * C827) *
                           C275) *
                          C141341 +
                      ((C5873 * C279 + C5865 * C582 + C5871 * C278 +
                        C5864 * C581 + C5869 * C277 + C5863 * C580) *
                           C141353 +
                       (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                        C5864 * C116 + C5869 * C109 + C5863 * C115) *
                           C275) *
                          C141478) *
                         C141298 * C141281 * C98 +
                     (((C5869 * C110 + C5863 * C116 + C5871 * C111 +
                        C5864 * C117 + C5873 * C112 + C5865 * C118) *
                           C275 +
                       (C5869 * C278 + C5863 * C581 + C5871 * C279 +
                        C5864 * C582 + C5873 * C280 + C5865 * C583) *
                           C141353) *
                          C141478 +
                      ((C5869 * C821 + C5863 * C826 + C5871 * C820 +
                        C5864 * C825 + C5873 * C824 + C5865 * C829) *
                           C275 +
                       (C5869 * C1004 + C5863 * C1346 + C5871 * C1003 +
                        C5864 * C1345 + C5873 * C1007 + C5865 * C1349) *
                           C141353) *
                          C141341) *
                         C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C29775 * C108 + C141219 * C114) * C275 +
                       (C29775 * C276 + C141219 * C579) * C141353) *
                          C29770 +
                      ((C29775 * C823 + C141219 * C828) * C275 +
                       (C29775 * C1006 + C141219 * C1348) * C141353) *
                          C29771 +
                      ((C29775 * C2960 + C141219 * C2964) * C275 +
                       (C29775 * C3084 + C141219 * C3308) * C141353) *
                          C29772 +
                      ((C29775 * C9667 + C141219 * C9670) * C275 +
                       (C29775 * C9848 + C141219 * C10198) * C141353) *
                          C29773) *
                         C141298 * C141281 * C97 -
                     (((C29775 * C9849 + C141219 * C10199) * C141353 +
                       (C29775 * C9668 + C141219 * C9671) * C275) *
                          C29773 +
                      ((C29775 * C3085 + C141219 * C3309) * C141353 +
                       (C29775 * C2961 + C141219 * C2965) * C275) *
                          C29772 +
                      ((C29775 * C1005 + C141219 * C1347) * C141353 +
                       (C29775 * C822 + C141219 * C827) * C275) *
                          C29771 +
                      ((C29775 * C277 + C141219 * C580) * C141353 +
                       (C29775 * C109 + C141219 * C115) * C275) *
                          C29770) *
                         C141298 * C141281 * C98 +
                     (((C29775 * C110 + C141219 * C116) * C275 +
                       (C29775 * C278 + C141219 * C581) * C141353) *
                          C29770 +
                      ((C29775 * C821 + C141219 * C826) * C275 +
                       (C29775 * C1004 + C141219 * C1346) * C141353) *
                          C29771 +
                      ((C29775 * C2962 + C141219 * C2966) * C275 +
                       (C29775 * C3086 + C141219 * C3310) * C141353) *
                          C29772 +
                      ((C29775 * C9669 + C141219 * C9672) * C275 +
                       (C29775 * C9850 + C141219 * C10200) * C141353) *
                          C29773) *
                         C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[117] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C275 +
            (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                C141353) *
               C5863 +
           ((C5993 + C5994) * C275 + (C6522 + C6523) * C141353) * C5864 +
           C6530 * C5865) *
              C141298 * C141281 * C97 -
          (((C6526 + C6527) * C141353 + (C6003 + C6004) * C275) * C5865 +
           ((C6525 + C6524) * C141353 + (C5998 + C5997) * C275) * C5864 +
           ((C6523 + C6522) * C141353 + (C5994 + C5993) * C275) * C5863) *
              C141298 * C141281 * C98 +
          (C6530 * C5863 +
           ((C6004 + C6003) * C275 + (C6527 + C6526) * C141353) * C5864 +
           ((C5966 * C112 + C141478 * C193 + C5967 * C824 + C141341 * C913) *
                C275 +
            (C5966 * C280 + C141478 * C639 + C5967 * C1007 + C141341 * C1420) *
                C141353) *
               C5865) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
            C29840 * C2960 + C29772 * C3026 + C29841 * C9667 + C29773 * C9768) *
               C275 +
           (C29838 * C276 + C29770 * C635 + C29839 * C1006 + C29771 * C1419 +
            C29840 * C3084 + C29772 * C3362 + C29841 * C9848 +
            C29773 * C10284) *
               C141353) *
              C141219 * C141298 * C141281 * C97 -
          ((C29841 * C9849 + C29773 * C10285 + C29840 * C3085 + C29772 * C3363 +
            C29839 * C1005 + C29771 * C1418 + C29838 * C277 + C29770 * C636) *
               C141353 +
           (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
            C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
               C275) *
              C141219 * C141298 * C141281 * C98 +
          ((C29838 * C110 + C29770 * C191 + C29839 * C821 + C29771 * C910 +
            C29840 * C2962 + C29772 * C3028 + C29841 * C9669 + C29773 * C9770) *
               C275 +
           (C29838 * C278 + C29770 * C637 + C29839 * C1004 + C29771 * C1417 +
            C29840 * C3086 + C29772 * C3364 + C29841 * C9850 +
            C29773 * C10286) *
               C141353) *
              C141219 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezz[117] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141478 +
            (C713 * C823 + C1517 + C1517 + C141353 * C1505) * C141341) *
               C5863 +
           (C6605 + C6606) * C5864 + C6611 * C5865) *
              C141298 * C141281 * C97 -
          ((C6609 + C6610) * C5865 + (C6608 + C6607) * C5864 +
           (C6606 + C6605) * C5863) *
              C141298 * C141281 * C98 +
          (C6611 * C5863 + (C6610 + C6609) * C5864 +
           (C746 * C141478 +
            (C713 * C824 + C1518 + C1518 + C141353 * C1506) * C141341) *
               C5865) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141353 * C714) * C29770 +
           C7709 * C29771 + C10372 * C29772 + C26253 * C29773) *
              C141219 * C141298 * C141281 * C97 -
          (C23643 * C29773 + C7711 * C29772 + C1527 * C29771 + C743 * C29770) *
              C141219 * C141298 * C141281 * C98 +
          (C744 * C29770 + C1526 * C29771 + C7710 * C29772 +
           (C713 * C9669 + C10369 + C10369 + C141353 * C10363) * C29773) *
              C141219 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexx[118] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 +
                        C5870 * C109 + C5876 + C5876 + C5864 * C121 +
                        C5872 * C110 + C5877 + C5877 + C5865 * C122) *
                           C141353 * C141478 +
                       (C6740 + C6741 + C6742) * C141353 * C141341) *
                          C141298 * C816 -
                      ((C5872 * C2962 + C6716 + C6716 + C5865 * C2970 +
                        C5870 * C2961 + C6717 + C6717 + C5864 * C2969 +
                        C5868 * C2960 + C6718 + C6718 + C5863 * C2968) *
                           C141353 * C141341 +
                       (C6742 + C6741 + C6740) * C141353 * C141478) *
                          C141298 * C141497) *
                         C818 +
                     (((C6743 + C6744 + C6745) * C141353 * C141478 +
                       (C5868 * C2961 + C6725 + C6725 + C5863 * C2969 +
                        C5870 * C2962 + C6726 + C6726 + C5864 * C2970 +
                        C5872 * C2963 + C6727 + C6727 + C5865 * C2971) *
                           C141353 * C141341) *
                          C141298 * C141497 -
                      ((C6745 + C6744 + C6743) * C141353 * C141341 +
                       (C5872 * C111 + C5884 + C5884 + C5865 * C123 +
                        C5870 * C110 + C5885 + C5885 + C5864 * C122 +
                        C5868 * C109 + C5886 + C5886 + C5863 * C121) *
                           C141353 * C141478) *
                          C141298 * C816) *
                         C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) *
                           C141353 * C29770 +
                       C30307 * C29771 + C30308 * C29772 + C30309 * C29773) *
                          C141298 * C816 -
                      ((C29774 * C25568 + C30281 + C30281 + C141219 * C25572) *
                           C141353 * C29773 +
                       C30309 * C29772 + C30308 * C29771 + C30307 * C29770) *
                          C141298 * C141497) *
                         C818 +
                     ((C30310 * C29770 + C30311 * C29771 + C30312 * C29772 +
                       (C29774 * C25569 + C30288 + C30288 + C141219 * C25573) *
                           C141353 * C29773) *
                          C141298 * C141497 -
                      (C30312 * C29773 + C30311 * C29772 + C30310 * C29771 +
                       (C29774 * C109 + C29784 + C29784 + C141219 * C121) *
                           C141353 * C29770) *
                          C141298 * C816) *
                         C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eexy[118] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C5869 +
            (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                C5863 +
            (C5993 + C5994) * C5871 + (C5995 + C5996) * C5864 + C6005 * C5873 +
            C6006 * C5865) *
               C141353 * C141298 * C816 -
           ((C6860 + C6861) * C5865 + (C6862 + C6863) * C5873 +
            (C6864 + C6865) * C5864 + (C6866 + C6867) * C5871 +
            (C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
                C5863 +
            (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                C5869) *
               C141353 * C141298 * C141497) *
              C818 +
          (((C6867 + C6866) * C5869 + (C6865 + C6864) * C5863 +
            (C6863 + C6862) * C5871 + (C6861 + C6860) * C5864 +
            (C5966 * C820 + C141478 * C909 + C5967 * C2963 + C141341 * C3029) *
                C5873 +
            (C5966 * C825 + C141478 * C914 + C5967 * C2967 + C141341 * C3033) *
                C5865) *
               C141353 * C141298 * C141497 -
           ((C6001 + C6002) * C5865 + (C6003 + C6004) * C5873 +
            (C6000 + C5999) * C5864 + (C5998 + C5997) * C5871 +
            (C5996 + C5995) * C5863 + (C5994 + C5993) * C5869) *
               C141353 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C29775 +
            (C29838 * C114 + C29770 * C195 + C29839 * C828 + C29771 * C917 +
             C29840 * C2964 + C29772 * C3030 + C29841 * C9670 +
             C29773 * C9771) *
                C141219) *
               C141353 * C141298 * C816 -
           ((C29841 * C25570 + C29773 * C25664 + C29840 * C9670 +
             C29772 * C9771 + C29839 * C2964 + C29771 * C3030 + C29838 * C828 +
             C29770 * C917) *
                C141219 +
            (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
             C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
             C29770 * C912) *
                C29775) *
               C141353 * C141298 * C141497) *
              C818 +
          (((C29838 * C822 + C29770 * C911 + C29839 * C2961 + C29771 * C3027 +
             C29840 * C9668 + C29772 * C9769 + C29841 * C25569 +
             C29773 * C25663) *
                C29775 +
            (C29838 * C827 + C29770 * C916 + C29839 * C2965 + C29771 * C3031 +
             C29840 * C9671 + C29772 * C9772 + C29841 * C25571 +
             C29773 * C25665) *
                C141219) *
               C141353 * C141298 * C141497 -
           ((C29841 * C9671 + C29773 * C9772 + C29840 * C2965 + C29772 * C3031 +
             C29839 * C827 + C29771 * C916 + C29838 * C115 + C29770 * C196) *
                C141219 +
            (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
             C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
                C29775) *
               C141353 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[118] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5869 +
             (C275 * C114 + C141353 * C282) * C5863 + C305 * C5871 +
             C306 * C5864 + C307 * C5873 + C308 * C5865) *
                C141478 +
            (C6994 + C6995 + C6970 + C6971 + C6972 + C6973) * C141341) *
               C141298 * C816 -
           ((C6990 * C5865 + C6991 * C5873 + C6992 * C5864 + C6993 * C5871 +
             (C275 * C2964 + C141353 * C3088) * C5863 +
             (C275 * C2960 + C141353 * C3084) * C5869) *
                C141341 +
            (C6973 + C6972 + C6971 + C6970 + C6995 + C6994) * C141478) *
               C141298 * C141497) *
              C818 +
          (((C6982 + C6983 + C6984 + C6985 + C6986 + C6987) * C141478 +
            (C6993 * C5869 + C6992 * C5863 + C6991 * C5871 + C6990 * C5864 +
             (C275 * C2963 + C141353 * C3087) * C5873 +
             (C275 * C2967 + C141353 * C3091) * C5865) *
                C141341) *
               C141298 * C141497 -
           ((C6987 + C6986 + C6985 + C6984 + C6983 + C6982) * C141341 +
            (C310 * C5865 + C309 * C5873 + C308 * C5864 + C307 * C5871 +
             C306 * C5863 + C305 * C5869) *
                C141478) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C29775 +
             (C275 * C114 + C141353 * C282) * C141219) *
                C29770 +
            (C30445 + C30446) * C29771 + (C30447 + C30448) * C29772 +
            (C30449 + C30450) * C29773) *
               C141298 * C816 -
           (((C275 * C25570 + C141353 * C25742) * C141219 +
             (C275 * C25568 + C141353 * C25740) * C29775) *
                C29773 +
            (C30450 + C30449) * C29772 + (C30448 + C30447) * C29771 +
            (C30446 + C30445) * C29770) *
               C141298 * C141497) *
              C818 +
          (((C30451 + C30452) * C29770 + (C30453 + C30454) * C29771 +
            (C30455 + C30456) * C29772 +
            ((C275 * C25569 + C141353 * C25741) * C29775 +
             (C275 * C25571 + C141353 * C25743) * C141219) *
                C29773) *
               C141298 * C141497 -
           ((C30456 + C30455) * C29773 + (C30454 + C30453) * C29772 +
            (C30452 + C30451) * C29771 +
            (C306 * C141219 + C305 * C29775) * C29770) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[118] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                        C5864 * C115 + C5873 * C110 + C5865 * C116) *
                           C5966 +
                       (C5869 * C189 + C5863 * C362 + C5871 * C190 +
                        C5864 * C363 + C5873 * C191 + C5865 * C364) *
                           C141478 +
                       (C7118 + C7119 + C7120) * C5967 +
                       (C7121 + C7122 + C7123) * C141341) *
                          C141353 * C141298 * C816 -
                      ((C5873 * C3028 + C5865 * C3144 + C5871 * C3027 +
                        C5864 * C3143 + C5869 * C3026 + C5863 * C3142) *
                           C141341 +
                       (C5873 * C2962 + C5865 * C2966 + C5871 * C2961 +
                        C5864 * C2965 + C5869 * C2960 + C5863 * C2964) *
                           C5967 +
                       (C7123 + C7122 + C7121) * C141478 +
                       (C7120 + C7119 + C7118) * C5966) *
                          C141353 * C141298 * C141497) *
                         C818 +
                     (((C7124 + C7125 + C7126) * C5966 +
                       (C7127 + C7128 + C7129) * C141478 +
                       (C5869 * C2961 + C5863 * C2965 + C5871 * C2962 +
                        C5864 * C2966 + C5873 * C2963 + C5865 * C2967) *
                           C5967 +
                       (C5869 * C3027 + C5863 * C3143 + C5871 * C3028 +
                        C5864 * C3144 + C5873 * C3029 + C5865 * C3145) *
                           C141341) *
                          C141353 * C141298 * C141497 -
                      ((C7129 + C7128 + C7127) * C141341 +
                       (C7126 + C7125 + C7124) * C5967 +
                       (C5873 * C192 + C5865 * C365 + C5871 * C191 +
                        C5864 * C364 + C5869 * C190 + C5863 * C363) *
                           C141478 +
                       (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                        C5864 * C116 + C5869 * C109 + C5863 * C115) *
                           C5966) *
                          C141353 * C141298 * C816) *
                         C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C29775 * C108 + C141219 * C114) * C29838 +
                       (C29775 * C189 + C141219 * C362) * C29770 +
                       C30547 * C29839 + C30548 * C29771 + C30549 * C29840 +
                       C30550 * C29772 + C30551 * C29841 + C30552 * C29773) *
                          C141353 * C141298 * C816 -
                      ((C29775 * C25662 + C141219 * C25831) * C29773 +
                       (C29775 * C25568 + C141219 * C25570) * C29841 +
                       C30552 * C29772 + C30551 * C29840 + C30550 * C29771 +
                       C30549 * C29839 + C30548 * C29770 + C30547 * C29838) *
                          C141353 * C141298 * C141497) *
                         C818 +
                     ((C30553 * C29838 + C30554 * C29770 + C30555 * C29839 +
                       C30556 * C29771 + C30557 * C29840 + C30558 * C29772 +
                       (C29775 * C25569 + C141219 * C25571) * C29841 +
                       (C29775 * C25663 + C141219 * C25832) * C29773) *
                          C141353 * C141298 * C141497 -
                      (C30558 * C29773 + C30557 * C29841 + C30556 * C29772 +
                       C30555 * C29840 + C30554 * C29771 + C30553 * C29839 +
                       (C29775 * C190 + C141219 * C363) * C29770 +
                       (C29775 * C109 + C141219 * C115) * C29838) *
                          C141353 * C141298 * C816) *
                         C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eeyy[118] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                        C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                           C5863 +
                       (C6265 + C6266) * C5864 + C6271 * C5865) *
                          C141353 * C141298 * C816 -
                      ((C7252 + C7253) * C5865 + (C7254 + C7255) * C5864 +
                       (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 +
                        C6228 * C823 + C7241 + C7241 + C141478 * C1171) *
                           C5863) *
                          C141353 * C141298 * C141497) *
                         C818 +
                     (((C7255 + C7254) * C5863 + (C7253 + C7252) * C5864 +
                       (C6228 * C820 + C7242 + C7242 + C141478 * C1168 +
                        C6229 * C2963 + C7243 + C7243 + C141341 * C3199) *
                           C5865) *
                          C141353 * C141298 * C141497 -
                      ((C6269 + C6270) * C5865 + (C6268 + C6267) * C5864 +
                       (C6266 + C6265) * C5863) *
                          C141353 * C141298 * C816) *
                         C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C29992 * C108 + C29997 + C29997 + C29770 * C419 +
                       C29993 * C823 + C29998 + C29998 + C29771 * C1171 +
                       C29994 * C2960 + C29999 + C29999 + C29772 * C3196 +
                       C29995 * C9667 + C30000 + C30000 + C29773 * C10035) *
                          C141219 * C141353 * C141298 * C816 -
                      (C29995 * C25568 + C30625 + C30625 + C29773 * C25921 +
                       C29994 * C9667 + C30626 + C30626 + C29772 * C10035 +
                       C29993 * C2960 + C30627 + C30627 + C29771 * C3196 +
                       C29992 * C823 + C30628 + C30628 + C29770 * C1171) *
                          C141219 * C141353 * C141298 * C141497) *
                         C818 +
                     ((C29992 * C822 + C30629 + C30629 + C29770 * C1170 +
                       C29993 * C2961 + C30630 + C30630 + C29771 * C3197 +
                       C29994 * C9668 + C30631 + C30631 + C29772 * C10036 +
                       C29995 * C25569 + C30632 + C30632 + C29773 * C25922) *
                          C141219 * C141353 * C141298 * C141497 -
                      (C29995 * C9668 + C30001 + C30001 + C29773 * C10036 +
                       C29994 * C2961 + C30002 + C30002 + C29772 * C3197 +
                       C29993 * C822 + C30003 + C30003 + C29771 * C1170 +
                       C29992 * C109 + C30004 + C30004 + C29770 * C420) *
                          C141219 * C141353 * C141298 * C816) *
                         C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[118] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5966 +
             (C275 * C189 + C141353 * C501) * C141478 + C6988 * C5967 +
             C7366 * C141341) *
                C5863 +
            (C6346 + C6347 + C6348 + C6349) * C5864 + C6360 * C5865) *
               C141298 * C816 -
           ((C7369 + C7358 + C7359 + C7360) * C5865 +
            (C7370 + C7363 + C7364 + C7365) * C5864 +
            ((C275 * C3026 + C141353 * C3254) * C141341 +
             (C275 * C2960 + C141353 * C3084) * C5967 + C7366 * C141478 +
             C6988 * C5966) *
                C5863) *
               C141298 * C141497) *
              C818 +
          (((C7365 + C7364 + C7363 + C7370) * C5863 +
            (C7360 + C7359 + C7358 + C7369) * C5864 +
            (C1027 * C5966 + C1274 * C141478 +
             (C275 * C2963 + C141353 * C3087) * C5967 +
             (C275 * C3029 + C141353 * C3257) * C141341) *
                C5865) *
               C141298 * C141497 -
           ((C6354 + C6355 + C6356 + C6357) * C5865 +
            (C6353 + C6352 + C6351 + C6350) * C5864 +
            (C6349 + C6348 + C6347 + C6346) * C5863) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C29838 +
            (C275 * C189 + C141353 * C501) * C29770 + C6988 * C29839 +
            C7366 * C29771 + C9864 * C29840 + C10124 * C29772 +
            C25754 * C29841 + C26008 * C29773) *
               C141219 * C141298 * C816 -
           ((C275 * C25662 + C141353 * C26003) * C29773 +
            (C275 * C25568 + C141353 * C25740) * C29841 + C26008 * C29772 +
            C25754 * C29840 + C10124 * C29771 + C9864 * C29839 +
            C7366 * C29770 + C6988 * C29838) *
               C141219 * C141298 * C141497) *
              C818 +
          ((C1031 * C29838 + C1276 * C29770 + C6993 * C29839 + C7368 * C29771 +
            C22934 * C29840 + C23308 * C29772 +
            (C275 * C25569 + C141353 * C25741) * C29841 +
            (C275 * C25663 + C141353 * C26004) * C29773) *
               C141219 * C141298 * C141497 -
           (C23308 * C29773 + C22934 * C29841 + C7368 * C29772 +
            C6993 * C29840 + C1276 * C29771 + C1031 * C29839 + C520 * C29770 +
            C305 * C29838) *
               C141219 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[118] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                         C5864 * C115 + C5873 * C110 + C5865 * C116) *
                            C275 +
                        (C5869 * C276 + C5863 * C579 + C5871 * C277 +
                         C5864 * C580 + C5873 * C278 + C5865 * C581) *
                            C141353) *
                           C141478 +
                       ((C7118 + C7119 + C7120) * C275 +
                        (C7481 + C7482 + C7483) * C141353) *
                           C141341) *
                          C141298 * C816 -
                      (((C5873 * C3086 + C5865 * C3310 + C5871 * C3085 +
                         C5864 * C3309 + C5869 * C3084 + C5863 * C3308) *
                            C141353 +
                        (C5873 * C2962 + C5865 * C2966 + C5871 * C2961 +
                         C5864 * C2965 + C5869 * C2960 + C5863 * C2964) *
                            C275) *
                           C141341 +
                       ((C7483 + C7482 + C7481) * C141353 +
                        (C7120 + C7119 + C7118) * C275) *
                           C141478) *
                          C141298 * C141497) *
                         C818 +
                     ((((C7124 + C7125 + C7126) * C275 +
                        (C7484 + C7485 + C7486) * C141353) *
                           C141478 +
                       ((C5869 * C2961 + C5863 * C2965 + C5871 * C2962 +
                         C5864 * C2966 + C5873 * C2963 + C5865 * C2967) *
                            C275 +
                        (C5869 * C3085 + C5863 * C3309 + C5871 * C3086 +
                         C5864 * C3310 + C5873 * C3087 + C5865 * C3311) *
                            C141353) *
                           C141341) *
                          C141298 * C141497 -
                      (((C7486 + C7485 + C7484) * C141353 +
                        (C7126 + C7125 + C7124) * C275) *
                           C141341 +
                       ((C5873 * C279 + C5865 * C582 + C5871 * C278 +
                         C5864 * C581 + C5869 * C277 + C5863 * C580) *
                            C141353 +
                        (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                         C5864 * C116 + C5869 * C109 + C5863 * C115) *
                            C275) *
                           C141478) *
                          C141298 * C816) *
                         C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C29775 * C108 + C141219 * C114) * C275 +
                        (C29775 * C276 + C141219 * C579) * C141353) *
                           C29770 +
                       (C30765 + C30789) * C29771 + (C30768 + C30790) * C29772 +
                       (C30771 + C30791) * C29773) *
                          C141298 * C816 -
                      (((C29775 * C25740 + C141219 * C26082) * C141353 +
                        (C29775 * C25568 + C141219 * C25570) * C275) *
                           C29773 +
                       (C30791 + C30771) * C29772 + (C30790 + C30768) * C29771 +
                       (C30789 + C30765) * C29770) *
                          C141298 * C141497) *
                         C818 +
                     (((C30774 + C30792) * C29770 + (C30777 + C30793) * C29771 +
                       (C30780 + C30794) * C29772 +
                       ((C29775 * C25569 + C141219 * C25571) * C275 +
                        (C29775 * C25741 + C141219 * C26083) * C141353) *
                           C29773) *
                          C141298 * C141497 -
                      ((C30794 + C30780) * C29773 + (C30793 + C30777) * C29772 +
                       (C30792 + C30774) * C29771 +
                       ((C29775 * C277 + C141219 * C580) * C141353 +
                        (C29775 * C109 + C141219 * C115) * C275) *
                           C29770) *
                          C141298 * C816) *
                         C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[118] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C275 +
             (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                 C141353) *
                C5863 +
            ((C5993 + C5994) * C275 + (C6522 + C6523) * C141353) * C5864 +
            C6530 * C5865) *
               C141298 * C816 -
           (((C7593 + C7594) * C141353 + (C6862 + C6863) * C275) * C5865 +
            ((C7595 + C7596) * C141353 + (C6866 + C6867) * C275) * C5864 +
            ((C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
              C141478 * C1419) *
                 C141353 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C275) *
                C5863) *
               C141298 * C141497) *
              C818 +
          ((((C6867 + C6866) * C275 + (C7596 + C7595) * C141353) * C5863 +
            ((C6863 + C6862) * C275 + (C7594 + C7593) * C141353) * C5864 +
            ((C5966 * C820 + C141478 * C909 + C5967 * C2963 + C141341 * C3029) *
                 C275 +
             (C5966 * C1003 + C141478 * C1416 + C5967 * C3087 +
              C141341 * C3365) *
                 C141353) *
                C5865) *
               C141298 * C141497 -
           (((C6526 + C6527) * C141353 + (C6003 + C6004) * C275) * C5865 +
            ((C6525 + C6524) * C141353 + (C5998 + C5997) * C275) * C5864 +
            ((C6523 + C6522) * C141353 + (C5994 + C5993) * C275) * C5863) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C275 +
            (C29838 * C276 + C29770 * C635 + C29839 * C1006 + C29771 * C1419 +
             C29840 * C3084 + C29772 * C3362 + C29841 * C9848 +
             C29773 * C10284) *
                C141353) *
               C141219 * C141298 * C816 -
           ((C29841 * C25740 + C29773 * C26168 + C29840 * C9848 +
             C29772 * C10284 + C29839 * C3084 + C29771 * C3362 +
             C29838 * C1006 + C29770 * C1419) *
                C141353 +
            (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
             C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
             C29770 * C912) *
                C275) *
               C141219 * C141298 * C141497) *
              C818 +
          (((C29838 * C822 + C29770 * C911 + C29839 * C2961 + C29771 * C3027 +
             C29840 * C9668 + C29772 * C9769 + C29841 * C25569 +
             C29773 * C25663) *
                C275 +
            (C29838 * C1005 + C29770 * C1418 + C29839 * C3085 + C29771 * C3363 +
             C29840 * C9849 + C29772 * C10285 + C29841 * C25741 +
             C29773 * C26169) *
                C141353) *
               C141219 * C141298 * C141497 -
           ((C29841 * C9849 + C29773 * C10285 + C29840 * C3085 +
             C29772 * C3363 + C29839 * C1005 + C29771 * C1418 + C29838 * C277 +
             C29770 * C636) *
                C141353 +
            (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
             C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
                C275) *
               C141219 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[118] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C141478 +
             C7709 * C141341) *
                C5863 +
            (C6605 + C6606) * C5864 + C6611 * C5865) *
               C141298 * C816 -
           ((C7712 + C7699) * C5865 + (C7713 + C7702) * C5864 +
            ((C713 * C2960 + C3421 + C3421 + C141353 * C3416) * C141341 +
             C7709 * C141478) *
                C5863) *
               C141298 * C141497) *
              C818 +
          (((C7702 + C7713) * C5863 + (C7699 + C7712) * C5864 +
            (C1525 * C141478 +
             (C713 * C2963 + C3424 + C3424 + C141353 * C3419) * C141341) *
                C5865) *
               C141298 * C141497 -
           ((C6609 + C6610) * C5865 + (C6608 + C6607) * C5864 +
            (C6606 + C6605) * C5863) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C29770 +
            C7709 * C29771 + C10372 * C29772 + C26253 * C29773) *
               C141219 * C141298 * C816 -
           ((C713 * C25568 + C26249 + C26249 + C141353 * C26244) * C29773 +
            C26253 * C29772 + C10372 * C29771 + C7709 * C29770) *
               C141219 * C141298 * C141497) *
              C818 +
          ((C1527 * C29770 + C7711 * C29771 + C23643 * C29772 +
            (C713 * C25569 + C26250 + C26250 + C141353 * C26245) * C29773) *
               C141219 * C141298 * C141497 -
           (C23643 * C29773 + C7711 * C29772 + C1527 * C29771 + C743 * C29770) *
               C141219 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[119] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 +
                        C5870 * C109 + C5876 + C5876 + C5864 * C121 +
                        C5872 * C110 + C5877 + C5877 + C5865 * C122) *
                           C141353 * C141478 +
                       (C6740 + C6741 + C6742) * C141353 * C141341) *
                          C1596 -
                      ((C5872 * C3492 + C7812 + C7812 + C5865 * C3500 +
                        C5870 * C3491 + C7813 + C7813 + C5864 * C3499 +
                        C5868 * C3490 + C7814 + C7814 + C5863 * C3498) *
                           C141353 * C141341 +
                       (C5872 * C1599 + C7815 + C7815 + C5865 * C1609 +
                        C5870 * C1600 + C7816 + C7816 + C5864 * C1610 +
                        C5868 * C1601 + C7817 + C7817 + C5863 * C1611) *
                           C141353 * C141478) *
                          C141499) *
                         C141281 * C818 +
                     (((C5868 * C1600 + C7818 + C7818 + C5863 * C1610 +
                        C5870 * C1599 + C7819 + C7819 + C5864 * C1609 +
                        C5872 * C1598 + C7820 + C7820 + C5865 * C1608) *
                           C141353 * C141478 +
                       (C5868 * C3491 + C7821 + C7821 + C5863 * C3499 +
                        C5870 * C3492 + C7822 + C7822 + C5864 * C3500 +
                        C5872 * C3493 + C7823 + C7823 + C5865 * C3501) *
                           C141353 * C141341) *
                          C141499 -
                      ((C6745 + C6744 + C6743) * C141353 * C141341 +
                       (C5872 * C111 + C5884 + C5884 + C5865 * C123 +
                        C5870 * C110 + C5885 + C5885 + C5864 * C122 +
                        C5868 * C109 + C5886 + C5886 + C5863 * C121) *
                           C141353 * C141478) *
                          C1596) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) *
                           C141353 * C29770 +
                       C30307 * C29771 + C30308 * C29772 + C30309 * C29773) *
                          C1596 -
                      ((C29774 * C26351 + C30993 + C30993 + C141219 * C26355) *
                           C141353 * C29773 +
                       (C29774 * C10470 + C30994 + C30994 + C141219 * C10476) *
                           C141353 * C29772 +
                       (C29774 * C3490 + C30995 + C30995 + C141219 * C3498) *
                           C141353 * C29771 +
                       (C29774 * C1601 + C30996 + C30996 + C141219 * C1611) *
                           C141353 * C29770) *
                          C141499) *
                         C141281 * C818 +
                     (((C29774 * C1600 + C30997 + C30997 + C141219 * C1610) *
                           C141353 * C29770 +
                       (C29774 * C3491 + C30998 + C30998 + C141219 * C3499) *
                           C141353 * C29771 +
                       (C29774 * C10471 + C30999 + C30999 + C141219 * C10477) *
                           C141353 * C29772 +
                       (C29774 * C26352 + C31000 + C31000 + C141219 * C26356) *
                           C141353 * C29773) *
                          C141499 -
                      (C30312 * C29773 + C30311 * C29772 + C30310 * C29771 +
                       (C29774 * C109 + C29784 + C29784 + C141219 * C121) *
                           C141353 * C29770) *
                          C1596) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eexy[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C5869 +
            (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                C5863 +
            (C5993 + C5994) * C5871 + (C5995 + C5996) * C5864 + C6005 * C5873 +
            C6006 * C5865) *
               C141353 * C1596 -
           ((C7938 + C7939) * C5865 + (C7940 + C7941) * C5873 +
            (C7942 + C7943) * C5864 + (C7944 + C7945) * C5871 +
            (C5967 * C3494 + C141341 * C3576 + C5966 * C1606 +
             C141478 * C1695) *
                C5863 +
            (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 +
             C141478 * C1690) *
                C5869) *
               C141353 * C141499) *
              C141281 * C818 +
          (((C7945 + C7944) * C5869 + (C7943 + C7942) * C5863 +
            (C7941 + C7940) * C5871 + (C7939 + C7938) * C5864 +
            (C5966 * C1598 + C141478 * C1687 + C5967 * C3493 +
             C141341 * C3575) *
                C5873 +
            (C5966 * C1603 + C141478 * C1692 + C5967 * C3497 +
             C141341 * C3579) *
                C5865) *
               C141353 * C141499 -
           ((C6001 + C6002) * C5865 + (C6003 + C6004) * C5873 +
            (C6000 + C5999) * C5864 + (C5998 + C5997) * C5871 +
            (C5996 + C5995) * C5863 + (C5994 + C5993) * C5869) *
               C141353 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C29775 +
            (C29838 * C114 + C29770 * C195 + C29839 * C828 + C29771 * C917 +
             C29840 * C2964 + C29772 * C3030 + C29841 * C9670 +
             C29773 * C9771) *
                C141219) *
               C141353 * C1596 -
           ((C29841 * C26353 + C29773 * C26479 + C29840 * C10473 +
             C29772 * C10598 + C29839 * C3494 + C29771 * C3576 +
             C29838 * C1606 + C29770 * C1695) *
                C141219 +
            (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
             C29772 * C10595 + C29839 * C3490 + C29771 * C3572 +
             C29838 * C1601 + C29770 * C1690) *
                C29775) *
               C141353 * C141499) *
              C141281 * C818 +
          (((C29838 * C1600 + C29770 * C1689 + C29839 * C3491 + C29771 * C3573 +
             C29840 * C10471 + C29772 * C10596 + C29841 * C26352 +
             C29773 * C26478) *
                C29775 +
            (C29838 * C1605 + C29770 * C1694 + C29839 * C3495 + C29771 * C3577 +
             C29840 * C10474 + C29772 * C10599 + C29841 * C26354 +
             C29773 * C26480) *
                C141219) *
               C141353 * C141499 -
           ((C29841 * C9671 + C29773 * C9772 + C29840 * C2965 + C29772 * C3031 +
             C29839 * C827 + C29771 * C916 + C29838 * C115 + C29770 * C196) *
                C141219 +
            (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
             C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
                C29775) *
               C141353 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5869 +
             (C275 * C114 + C141353 * C282) * C5863 + C305 * C5871 +
             C306 * C5864 + C307 * C5873 + C308 * C5865) *
                C141478 +
            (C6994 + C6995 + C6970 + C6971 + C6972 + C6973) * C141341) *
               C1596 -
           ((C8052 * C5865 + C8053 * C5873 + C8054 * C5864 + C8055 * C5871 +
             (C275 * C3494 + C141353 * C3650) * C5863 +
             (C275 * C3490 + C141353 * C3646) * C5869) *
                C141341 +
            (C1806 * C5865 + C1807 * C5873 + C1808 * C5864 + C1809 * C5871 +
             (C275 * C1606 + C141353 * C1789) * C5863 +
             (C275 * C1601 + C141353 * C1784) * C5869) *
                C141478) *
               C141499) *
              C141281 * C818 +
          (((C1809 * C5869 + C1808 * C5863 + C1807 * C5871 + C1806 * C5864 +
             C1805 * C5873 + C1804 * C5865) *
                C141478 +
            (C8055 * C5869 + C8054 * C5863 + C8053 * C5871 + C8052 * C5864 +
             (C275 * C3493 + C141353 * C3649) * C5873 +
             (C275 * C3497 + C141353 * C3653) * C5865) *
                C141341) *
               C141499 -
           ((C6987 + C6986 + C6985 + C6984 + C6983 + C6982) * C141341 +
            (C310 * C5865 + C309 * C5873 + C308 * C5864 + C307 * C5871 +
             C306 * C5863 + C305 * C5869) *
                C141478) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C29775 +
             (C275 * C114 + C141353 * C282) * C141219) *
                C29770 +
            (C30445 + C30446) * C29771 + (C30447 + C30448) * C29772 +
            (C30449 + C30450) * C29773) *
               C1596 -
           (((C275 * C26353 + C141353 * C26581) * C141219 +
             (C275 * C26351 + C141353 * C26579) * C29775) *
                C29773 +
            (C26594 * C141219 + C26595 * C29775) * C29772 +
            (C10714 * C141219 + C10715 * C29775) * C29771 +
            ((C275 * C1606 + C141353 * C1789) * C141219 +
             (C275 * C1601 + C141353 * C1784) * C29775) *
                C29770) *
               C141499) *
              C141281 * C818 +
          (((C1809 * C29775 + C1808 * C141219) * C29770 +
            (C8055 * C29775 + C8054 * C141219) * C29771 +
            (C23974 * C29775 + C23973 * C141219) * C29772 +
            ((C275 * C26352 + C141353 * C26580) * C29775 +
             (C275 * C26354 + C141353 * C26582) * C141219) *
                C29773) *
               C141499 -
           ((C30456 + C30455) * C29773 + (C30454 + C30453) * C29772 +
            (C30452 + C30451) * C29771 +
            (C306 * C141219 + C305 * C29775) * C29770) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[119] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                        C5864 * C115 + C5873 * C110 + C5865 * C116) *
                           C5966 +
                       (C5869 * C189 + C5863 * C362 + C5871 * C190 +
                        C5864 * C363 + C5873 * C191 + C5865 * C364) *
                           C141478 +
                       (C7118 + C7119 + C7120) * C5967 +
                       (C7121 + C7122 + C7123) * C141341) *
                          C141353 * C1596 -
                      ((C5873 * C3574 + C5865 * C3722 + C5871 * C3573 +
                        C5864 * C3721 + C5869 * C3572 + C5863 * C3720) *
                           C141341 +
                       (C5873 * C3492 + C5865 * C3496 + C5871 * C3491 +
                        C5864 * C3495 + C5869 * C3490 + C5863 * C3494) *
                           C5967 +
                       (C5873 * C1688 + C5865 * C1876 + C5871 * C1689 +
                        C5864 * C1877 + C5869 * C1690 + C5863 * C1878) *
                           C141478 +
                       (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 +
                        C5864 * C1605 + C5869 * C1601 + C5863 * C1606) *
                           C5966) *
                          C141353 * C141499) *
                         C141281 * C818 +
                     (((C5869 * C1600 + C5863 * C1605 + C5871 * C1599 +
                        C5864 * C1604 + C5873 * C1598 + C5865 * C1603) *
                           C5966 +
                       (C5869 * C1689 + C5863 * C1877 + C5871 * C1688 +
                        C5864 * C1876 + C5873 * C1687 + C5865 * C1875) *
                           C141478 +
                       (C5869 * C3491 + C5863 * C3495 + C5871 * C3492 +
                        C5864 * C3496 + C5873 * C3493 + C5865 * C3497) *
                           C5967 +
                       (C5869 * C3573 + C5863 * C3721 + C5871 * C3574 +
                        C5864 * C3722 + C5873 * C3575 + C5865 * C3723) *
                           C141341) *
                          C141353 * C141499 -
                      ((C7129 + C7128 + C7127) * C141341 +
                       (C7126 + C7125 + C7124) * C5967 +
                       (C5873 * C192 + C5865 * C365 + C5871 * C191 +
                        C5864 * C364 + C5869 * C190 + C5863 * C363) *
                           C141478 +
                       (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                        C5864 * C116 + C5869 * C109 + C5863 * C115) *
                           C5966) *
                          C141353 * C1596) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C29775 * C108 + C141219 * C114) * C29838 +
                       (C29775 * C189 + C141219 * C362) * C29770 +
                       C30547 * C29839 + C30548 * C29771 + C30549 * C29840 +
                       C30550 * C29772 + C30551 * C29841 + C30552 * C29773) *
                          C141353 * C1596 -
                      ((C29775 * C26477 + C141219 * C26695) * C29773 +
                       (C29775 * C26351 + C141219 * C26353) * C29841 +
                       (C29775 * C10595 + C141219 * C10815) * C29772 +
                       (C29775 * C10470 + C141219 * C10473) * C29840 +
                       (C29775 * C3572 + C141219 * C3720) * C29771 +
                       (C29775 * C3490 + C141219 * C3494) * C29839 +
                       (C29775 * C1690 + C141219 * C1878) * C29770 +
                       (C29775 * C1601 + C141219 * C1606) * C29838) *
                          C141353 * C141499) *
                         C141281 * C818 +
                     (((C29775 * C1600 + C141219 * C1605) * C29838 +
                       (C29775 * C1689 + C141219 * C1877) * C29770 +
                       (C29775 * C3491 + C141219 * C3495) * C29839 +
                       (C29775 * C3573 + C141219 * C3721) * C29771 +
                       (C29775 * C10471 + C141219 * C10474) * C29840 +
                       (C29775 * C10596 + C141219 * C10816) * C29772 +
                       (C29775 * C26352 + C141219 * C26354) * C29841 +
                       (C29775 * C26478 + C141219 * C26696) * C29773) *
                          C141353 * C141499 -
                      (C30558 * C29773 + C30557 * C29841 + C30556 * C29772 +
                       C30555 * C29840 + C30554 * C29771 + C30553 * C29839 +
                       (C29775 * C190 + C141219 * C363) * C29770 +
                       (C29775 * C109 + C141219 * C115) * C29838) *
                          C141353 * C1596) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eeyy[119] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                        C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                           C5863 +
                       (C6265 + C6266) * C5864 + C6271 * C5865) *
                          C141353 * C1596 -
                      ((C8276 + C8277) * C5865 + (C8278 + C8279) * C5864 +
                       (C6229 * C3490 + C8264 + C8264 + C141341 * C3790 +
                        C6228 * C1601 + C8265 + C8265 + C141478 * C1949) *
                           C5863) *
                          C141353 * C141499) *
                         C141281 * C818 +
                     (((C8279 + C8278) * C5863 + (C8277 + C8276) * C5864 +
                       (C6228 * C1598 + C8266 + C8266 + C141478 * C1946 +
                        C6229 * C3493 + C8267 + C8267 + C141341 * C3793) *
                           C5865) *
                          C141353 * C141499 -
                      ((C6269 + C6270) * C5865 + (C6268 + C6267) * C5864 +
                       (C6266 + C6265) * C5863) *
                          C141353 * C1596) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C29992 * C108 + C29997 + C29997 + C29770 * C419 +
                       C29993 * C823 + C29998 + C29998 + C29771 * C1171 +
                       C29994 * C2960 + C29999 + C29999 + C29772 * C3196 +
                       C29995 * C9667 + C30000 + C30000 + C29773 * C10035) *
                          C141219 * C141353 * C1596 -
                      (C29995 * C26351 + C31265 + C31265 + C29773 * C26819 +
                       C29994 * C10470 + C31266 + C31266 + C29772 * C10934 +
                       C29993 * C3490 + C31267 + C31267 + C29771 * C3790 +
                       C29992 * C1601 + C31268 + C31268 + C29770 * C1949) *
                          C141219 * C141353 * C141499) *
                         C141281 * C818 +
                     ((C29992 * C1600 + C31269 + C31269 + C29770 * C1948 +
                       C29993 * C3491 + C31270 + C31270 + C29771 * C3791 +
                       C29994 * C10471 + C31271 + C31271 + C29772 * C10935 +
                       C29995 * C26352 + C31272 + C31272 + C29773 * C26820) *
                          C141219 * C141353 * C141499 -
                      (C29995 * C9668 + C30001 + C30001 + C29773 * C10036 +
                       C29994 * C2961 + C30002 + C30002 + C29772 * C3197 +
                       C29993 * C822 + C30003 + C30003 + C29771 * C1170 +
                       C29992 * C109 + C30004 + C30004 + C29770 * C420) *
                          C141219 * C141353 * C1596) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5966 +
             (C275 * C189 + C141353 * C501) * C141478 + C6988 * C5967 +
             C7366 * C141341) *
                C5863 +
            (C6346 + C6347 + C6348 + C6349) * C5864 + C6360 * C5865) *
               C1596 -
           ((C8390 + C8380 + C8381 + C8382) * C5865 +
            (C8391 + C8385 + C8386 + C8387) * C5864 +
            ((C275 * C3572 + C141353 * C3864) * C141341 +
             (C275 * C3490 + C141353 * C3646) * C5967 +
             (C275 * C1690 + C141353 * C2040) * C141478 +
             (C275 * C1601 + C141353 * C1784) * C5966) *
                C5863) *
               C141499) *
              C141281 * C818 +
          (((C8387 + C8386 + C8385 + C8391) * C5863 +
            (C8382 + C8381 + C8380 + C8390) * C5864 +
            (C1805 * C5966 + C2052 * C141478 +
             (C275 * C3493 + C141353 * C3649) * C5967 +
             (C275 * C3575 + C141353 * C3867) * C141341) *
                C5865) *
               C141499 -
           ((C6354 + C6355 + C6356 + C6357) * C5865 +
            (C6353 + C6352 + C6351 + C6350) * C5864 +
            (C6349 + C6348 + C6347 + C6346) * C5863) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C29838 +
            (C275 * C189 + C141353 * C501) * C29770 + C6988 * C29839 +
            C7366 * C29771 + C9864 * C29840 + C10124 * C29772 +
            C25754 * C29841 + C26008 * C29773) *
               C141219 * C1596 -
           ((C275 * C26477 + C141353 * C26925) * C29773 +
            (C275 * C26351 + C141353 * C26579) * C29841 + C26930 * C29772 +
            C26595 * C29840 + C11047 * C29771 + C10715 * C29839 +
            (C275 * C1690 + C141353 * C2040) * C29770 +
            (C275 * C1601 + C141353 * C1784) * C29838) *
               C141219 * C141499) *
              C141281 * C818 +
          ((C1809 * C29838 + C2054 * C29770 + C8055 * C29839 + C8389 * C29771 +
            C23974 * C29840 + C24300 * C29772 +
            (C275 * C26352 + C141353 * C26580) * C29841 +
            (C275 * C26478 + C141353 * C26926) * C29773) *
               C141219 * C141499 -
           (C23308 * C29773 + C22934 * C29841 + C7368 * C29772 +
            C6993 * C29840 + C1276 * C29771 + C1031 * C29839 + C520 * C29770 +
            C305 * C29838) *
               C141219 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[119] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                         C5864 * C115 + C5873 * C110 + C5865 * C116) *
                            C275 +
                        (C5869 * C276 + C5863 * C579 + C5871 * C277 +
                         C5864 * C580 + C5873 * C278 + C5865 * C581) *
                            C141353) *
                           C141478 +
                       ((C7118 + C7119 + C7120) * C275 +
                        (C7481 + C7482 + C7483) * C141353) *
                           C141341) *
                          C1596 -
                      (((C5873 * C3648 + C5865 * C3936 + C5871 * C3647 +
                         C5864 * C3935 + C5869 * C3646 + C5863 * C3934) *
                            C141353 +
                        (C5873 * C3492 + C5865 * C3496 + C5871 * C3491 +
                         C5864 * C3495 + C5869 * C3490 + C5863 * C3494) *
                            C275) *
                           C141341 +
                       ((C5873 * C1782 + C5865 * C2124 + C5871 * C1783 +
                         C5864 * C2125 + C5869 * C1784 + C5863 * C2126) *
                            C141353 +
                        (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 +
                         C5864 * C1605 + C5869 * C1601 + C5863 * C1606) *
                            C275) *
                           C141478) *
                          C141499) *
                         C141281 * C818 +
                     ((((C5869 * C1600 + C5863 * C1605 + C5871 * C1599 +
                         C5864 * C1604 + C5873 * C1598 + C5865 * C1603) *
                            C275 +
                        (C5869 * C1783 + C5863 * C2125 + C5871 * C1782 +
                         C5864 * C2124 + C5873 * C1781 + C5865 * C2123) *
                            C141353) *
                           C141478 +
                       ((C5869 * C3491 + C5863 * C3495 + C5871 * C3492 +
                         C5864 * C3496 + C5873 * C3493 + C5865 * C3497) *
                            C275 +
                        (C5869 * C3647 + C5863 * C3935 + C5871 * C3648 +
                         C5864 * C3936 + C5873 * C3649 + C5865 * C3937) *
                            C141353) *
                           C141341) *
                          C141499 -
                      (((C7486 + C7485 + C7484) * C141353 +
                        (C7126 + C7125 + C7124) * C275) *
                           C141341 +
                       ((C5873 * C279 + C5865 * C582 + C5871 * C278 +
                         C5864 * C581 + C5869 * C277 + C5863 * C580) *
                            C141353 +
                        (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                         C5864 * C116 + C5869 * C109 + C5863 * C115) *
                            C275) *
                           C141478) *
                          C1596) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C29775 * C108 + C141219 * C114) * C275 +
                        (C29775 * C276 + C141219 * C579) * C141353) *
                           C29770 +
                       (C30765 + C30789) * C29771 + (C30768 + C30790) * C29772 +
                       (C30771 + C30791) * C29773) *
                          C1596 -
                      (((C29775 * C26579 + C141219 * C27028) * C141353 +
                        (C29775 * C26351 + C141219 * C26353) * C275) *
                           C29773 +
                       ((C29775 * C10699 + C141219 * C11145) * C141353 +
                        (C29775 * C10470 + C141219 * C10473) * C275) *
                           C29772 +
                       ((C29775 * C3646 + C141219 * C3934) * C141353 +
                        (C29775 * C3490 + C141219 * C3494) * C275) *
                           C29771 +
                       ((C29775 * C1784 + C141219 * C2126) * C141353 +
                        (C29775 * C1601 + C141219 * C1606) * C275) *
                           C29770) *
                          C141499) *
                         C141281 * C818 +
                     ((((C29775 * C1600 + C141219 * C1605) * C275 +
                        (C29775 * C1783 + C141219 * C2125) * C141353) *
                           C29770 +
                       ((C29775 * C3491 + C141219 * C3495) * C275 +
                        (C29775 * C3647 + C141219 * C3935) * C141353) *
                           C29771 +
                       ((C29775 * C10471 + C141219 * C10474) * C275 +
                        (C29775 * C10700 + C141219 * C11146) * C141353) *
                           C29772 +
                       ((C29775 * C26352 + C141219 * C26354) * C275 +
                        (C29775 * C26580 + C141219 * C27029) * C141353) *
                           C29773) *
                          C141499 -
                      ((C30794 + C30780) * C29773 + (C30793 + C30777) * C29772 +
                       (C30792 + C30774) * C29771 +
                       ((C29775 * C277 + C141219 * C580) * C141353 +
                        (C29775 * C109 + C141219 * C115) * C275) *
                           C29770) *
                          C1596) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C275 +
             (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                 C141353) *
                C5863 +
            ((C5993 + C5994) * C275 + (C6522 + C6523) * C141353) * C5864 +
            C6530 * C5865) *
               C1596 -
           (((C8596 + C8597) * C141353 + (C7940 + C7941) * C275) * C5865 +
            ((C8598 + C8599) * C141353 + (C7944 + C7945) * C275) * C5864 +
            ((C5967 * C3646 + C141341 * C4004 + C5966 * C1784 +
              C141478 * C2197) *
                 C141353 +
             (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 +
              C141478 * C1690) *
                 C275) *
                C5863) *
               C141499) *
              C141281 * C818 +
          ((((C7945 + C7944) * C275 + (C8599 + C8598) * C141353) * C5863 +
            ((C7941 + C7940) * C275 + (C8597 + C8596) * C141353) * C5864 +
            ((C5966 * C1598 + C141478 * C1687 + C5967 * C3493 +
              C141341 * C3575) *
                 C275 +
             (C5966 * C1781 + C141478 * C2194 + C5967 * C3649 +
              C141341 * C4007) *
                 C141353) *
                C5865) *
               C141499 -
           (((C6526 + C6527) * C141353 + (C6003 + C6004) * C275) * C5865 +
            ((C6525 + C6524) * C141353 + (C5998 + C5997) * C275) * C5864 +
            ((C6523 + C6522) * C141353 + (C5994 + C5993) * C275) * C5863) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C275 +
            (C29838 * C276 + C29770 * C635 + C29839 * C1006 + C29771 * C1419 +
             C29840 * C3084 + C29772 * C3362 + C29841 * C9848 +
             C29773 * C10284) *
                C141353) *
               C141219 * C1596 -
           ((C29841 * C26579 + C29773 * C27140 + C29840 * C10699 +
             C29772 * C11255 + C29839 * C3646 + C29771 * C4004 +
             C29838 * C1784 + C29770 * C2197) *
                C141353 +
            (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
             C29772 * C10595 + C29839 * C3490 + C29771 * C3572 +
             C29838 * C1601 + C29770 * C1690) *
                C275) *
               C141219 * C141499) *
              C141281 * C818 +
          (((C29838 * C1600 + C29770 * C1689 + C29839 * C3491 + C29771 * C3573 +
             C29840 * C10471 + C29772 * C10596 + C29841 * C26352 +
             C29773 * C26478) *
                C275 +
            (C29838 * C1783 + C29770 * C2196 + C29839 * C3647 + C29771 * C4005 +
             C29840 * C10700 + C29772 * C11256 + C29841 * C26580 +
             C29773 * C27141) *
                C141353) *
               C141219 * C141499 -
           ((C29841 * C9849 + C29773 * C10285 + C29840 * C3085 +
             C29772 * C3363 + C29839 * C1005 + C29771 * C1418 + C29838 * C277 +
             C29770 * C636) *
                C141353 +
            (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
             C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
                C275) *
               C141219 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C141478 +
             C7709 * C141341) *
                C5863 +
            (C6605 + C6606) * C5864 + C6611 * C5865) *
               C1596 -
           ((C8710 + C8700) * C5865 + (C8711 + C8703) * C5864 +
            ((C713 * C3490 + C4079 + C4079 + C141353 * C4074) * C141341 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141478) *
                C5863) *
               C141499) *
              C141281 * C818 +
          (((C8703 + C8711) * C5863 + (C8700 + C8710) * C5864 +
            (C2303 * C141478 +
             (C713 * C3493 + C4082 + C4082 + C141353 * C4077) * C141341) *
                C5865) *
               C141499 -
           ((C6609 + C6610) * C5865 + (C6608 + C6607) * C5864 +
            (C6606 + C6605) * C5863) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C29770 +
            C7709 * C29771 + C10372 * C29772 + C26253 * C29773) *
               C141219 * C1596 -
           ((C713 * C26351 + C27245 + C27245 + C141353 * C27240) * C29773 +
            C27249 * C29772 + C11367 * C29771 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C29770) *
               C141219 * C141499) *
              C141281 * C818 +
          ((C2305 * C29770 + C8709 * C29771 + C24611 * C29772 +
            (C713 * C26352 + C27246 + C27246 + C141353 * C27241) * C29773) *
               C141219 * C141499 -
           (C23643 * C29773 + C7711 * C29772 + C1527 * C29771 + C743 * C29770) *
               C141219 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[120] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 +
                        C5870 * C109 + C5876 + C5876 + C5864 * C121 +
                        C5872 * C110 + C5877 + C5877 + C5865 * C122) *
                           C141353 * C141478 +
                       (C6740 + C6741 + C6742) * C141353 * C141341) *
                          C141298 * C2374 -
                      ((C5872 * C2962 + C6716 + C6716 + C5865 * C2970 +
                        C5870 * C2961 + C6717 + C6717 + C5864 * C2969 +
                        C5868 * C2960 + C6718 + C6718 + C5863 * C2968) *
                           C141353 * C141341 +
                       (C6742 + C6741 + C6740) * C141353 * C141478) *
                          C141298 * C141497) *
                         C2376 +
                     (((C6743 + C6744 + C6745) * C141353 * C141478 +
                       (C5868 * C2961 + C6725 + C6725 + C5863 * C2969 +
                        C5870 * C2962 + C6726 + C6726 + C5864 * C2970 +
                        C5872 * C2963 + C6727 + C6727 + C5865 * C2971) *
                           C141353 * C141341) *
                          C141298 * C141497 -
                      ((C6745 + C6744 + C6743) * C141353 * C141341 +
                       (C5872 * C111 + C5884 + C5884 + C5865 * C123 +
                        C5870 * C110 + C5885 + C5885 + C5864 * C122 +
                        C5868 * C109 + C5886 + C5886 + C5863 * C121) *
                           C141353 * C141478) *
                          C141298 * C2374) *
                         C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) *
                           C141353 * C29770 +
                       C30307 * C29771 + C30308 * C29772 + C30309 * C29773) *
                          C141298 * C2374 -
                      ((C29774 * C25568 + C30281 + C30281 + C141219 * C25572) *
                           C141353 * C29773 +
                       C30309 * C29772 + C30308 * C29771 + C30307 * C29770) *
                          C141298 * C141497) *
                         C2376 +
                     ((C30310 * C29770 + C30311 * C29771 + C30312 * C29772 +
                       (C29774 * C25569 + C30288 + C30288 + C141219 * C25573) *
                           C141353 * C29773) *
                          C141298 * C141497 -
                      (C30312 * C29773 + C30311 * C29772 + C30310 * C29771 +
                       (C29774 * C109 + C29784 + C29784 + C141219 * C121) *
                           C141353 * C29770) *
                          C141298 * C2374) *
                         C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eexy[120] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C5869 +
            (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                C5863 +
            (C5993 + C5994) * C5871 + (C5995 + C5996) * C5864 + C6005 * C5873 +
            C6006 * C5865) *
               C141353 * C141298 * C2374 -
           ((C6860 + C6861) * C5865 + (C6862 + C6863) * C5873 +
            (C6864 + C6865) * C5864 + (C6866 + C6867) * C5871 +
            (C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
                C5863 +
            (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                C5869) *
               C141353 * C141298 * C141497) *
              C2376 +
          (((C6867 + C6866) * C5869 + (C6865 + C6864) * C5863 +
            (C6863 + C6862) * C5871 + (C6861 + C6860) * C5864 +
            (C5966 * C820 + C141478 * C909 + C5967 * C2963 + C141341 * C3029) *
                C5873 +
            (C5966 * C825 + C141478 * C914 + C5967 * C2967 + C141341 * C3033) *
                C5865) *
               C141353 * C141298 * C141497 -
           ((C6001 + C6002) * C5865 + (C6003 + C6004) * C5873 +
            (C6000 + C5999) * C5864 + (C5998 + C5997) * C5871 +
            (C5996 + C5995) * C5863 + (C5994 + C5993) * C5869) *
               C141353 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C29775 +
            (C29838 * C114 + C29770 * C195 + C29839 * C828 + C29771 * C917 +
             C29840 * C2964 + C29772 * C3030 + C29841 * C9670 +
             C29773 * C9771) *
                C141219) *
               C141353 * C141298 * C2374 -
           ((C29841 * C25570 + C29773 * C25664 + C29840 * C9670 +
             C29772 * C9771 + C29839 * C2964 + C29771 * C3030 + C29838 * C828 +
             C29770 * C917) *
                C141219 +
            (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
             C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
             C29770 * C912) *
                C29775) *
               C141353 * C141298 * C141497) *
              C2376 +
          (((C29838 * C822 + C29770 * C911 + C29839 * C2961 + C29771 * C3027 +
             C29840 * C9668 + C29772 * C9769 + C29841 * C25569 +
             C29773 * C25663) *
                C29775 +
            (C29838 * C827 + C29770 * C916 + C29839 * C2965 + C29771 * C3031 +
             C29840 * C9671 + C29772 * C9772 + C29841 * C25571 +
             C29773 * C25665) *
                C141219) *
               C141353 * C141298 * C141497 -
           ((C29841 * C9671 + C29773 * C9772 + C29840 * C2965 + C29772 * C3031 +
             C29839 * C827 + C29771 * C916 + C29838 * C115 + C29770 * C196) *
                C141219 +
            (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
             C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
                C29775) *
               C141353 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[120] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5869 +
             (C275 * C114 + C141353 * C282) * C5863 + C305 * C5871 +
             C306 * C5864 + C307 * C5873 + C308 * C5865) *
                C141478 +
            (C6994 + C6995 + C6970 + C6971 + C6972 + C6973) * C141341) *
               C141298 * C2374 -
           ((C6990 * C5865 + C6991 * C5873 + C6992 * C5864 + C6993 * C5871 +
             (C275 * C2964 + C141353 * C3088) * C5863 +
             (C275 * C2960 + C141353 * C3084) * C5869) *
                C141341 +
            (C6973 + C6972 + C6971 + C6970 + C6995 + C6994) * C141478) *
               C141298 * C141497) *
              C2376 +
          (((C6982 + C6983 + C6984 + C6985 + C6986 + C6987) * C141478 +
            (C6993 * C5869 + C6992 * C5863 + C6991 * C5871 + C6990 * C5864 +
             (C275 * C2963 + C141353 * C3087) * C5873 +
             (C275 * C2967 + C141353 * C3091) * C5865) *
                C141341) *
               C141298 * C141497 -
           ((C6987 + C6986 + C6985 + C6984 + C6983 + C6982) * C141341 +
            (C310 * C5865 + C309 * C5873 + C308 * C5864 + C307 * C5871 +
             C306 * C5863 + C305 * C5869) *
                C141478) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C29775 +
             (C275 * C114 + C141353 * C282) * C141219) *
                C29770 +
            (C30445 + C30446) * C29771 + (C30447 + C30448) * C29772 +
            (C30449 + C30450) * C29773) *
               C141298 * C2374 -
           (((C275 * C25570 + C141353 * C25742) * C141219 +
             (C275 * C25568 + C141353 * C25740) * C29775) *
                C29773 +
            (C30450 + C30449) * C29772 + (C30448 + C30447) * C29771 +
            (C30446 + C30445) * C29770) *
               C141298 * C141497) *
              C2376 +
          (((C30451 + C30452) * C29770 + (C30453 + C30454) * C29771 +
            (C30455 + C30456) * C29772 +
            ((C275 * C25569 + C141353 * C25741) * C29775 +
             (C275 * C25571 + C141353 * C25743) * C141219) *
                C29773) *
               C141298 * C141497 -
           ((C30456 + C30455) * C29773 + (C30454 + C30453) * C29772 +
            (C30452 + C30451) * C29771 +
            (C306 * C141219 + C305 * C29775) * C29770) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[120] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                        C5864 * C115 + C5873 * C110 + C5865 * C116) *
                           C5966 +
                       (C5869 * C189 + C5863 * C362 + C5871 * C190 +
                        C5864 * C363 + C5873 * C191 + C5865 * C364) *
                           C141478 +
                       (C7118 + C7119 + C7120) * C5967 +
                       (C7121 + C7122 + C7123) * C141341) *
                          C141353 * C141298 * C2374 -
                      ((C5873 * C3028 + C5865 * C3144 + C5871 * C3027 +
                        C5864 * C3143 + C5869 * C3026 + C5863 * C3142) *
                           C141341 +
                       (C5873 * C2962 + C5865 * C2966 + C5871 * C2961 +
                        C5864 * C2965 + C5869 * C2960 + C5863 * C2964) *
                           C5967 +
                       (C7123 + C7122 + C7121) * C141478 +
                       (C7120 + C7119 + C7118) * C5966) *
                          C141353 * C141298 * C141497) *
                         C2376 +
                     (((C7124 + C7125 + C7126) * C5966 +
                       (C7127 + C7128 + C7129) * C141478 +
                       (C5869 * C2961 + C5863 * C2965 + C5871 * C2962 +
                        C5864 * C2966 + C5873 * C2963 + C5865 * C2967) *
                           C5967 +
                       (C5869 * C3027 + C5863 * C3143 + C5871 * C3028 +
                        C5864 * C3144 + C5873 * C3029 + C5865 * C3145) *
                           C141341) *
                          C141353 * C141298 * C141497 -
                      ((C7129 + C7128 + C7127) * C141341 +
                       (C7126 + C7125 + C7124) * C5967 +
                       (C5873 * C192 + C5865 * C365 + C5871 * C191 +
                        C5864 * C364 + C5869 * C190 + C5863 * C363) *
                           C141478 +
                       (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                        C5864 * C116 + C5869 * C109 + C5863 * C115) *
                           C5966) *
                          C141353 * C141298 * C2374) *
                         C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C29775 * C108 + C141219 * C114) * C29838 +
                       (C29775 * C189 + C141219 * C362) * C29770 +
                       C30547 * C29839 + C30548 * C29771 + C30549 * C29840 +
                       C30550 * C29772 + C30551 * C29841 + C30552 * C29773) *
                          C141353 * C141298 * C2374 -
                      ((C29775 * C25662 + C141219 * C25831) * C29773 +
                       (C29775 * C25568 + C141219 * C25570) * C29841 +
                       C30552 * C29772 + C30551 * C29840 + C30550 * C29771 +
                       C30549 * C29839 + C30548 * C29770 + C30547 * C29838) *
                          C141353 * C141298 * C141497) *
                         C2376 +
                     ((C30553 * C29838 + C30554 * C29770 + C30555 * C29839 +
                       C30556 * C29771 + C30557 * C29840 + C30558 * C29772 +
                       (C29775 * C25569 + C141219 * C25571) * C29841 +
                       (C29775 * C25663 + C141219 * C25832) * C29773) *
                          C141353 * C141298 * C141497 -
                      (C30558 * C29773 + C30557 * C29841 + C30556 * C29772 +
                       C30555 * C29840 + C30554 * C29771 + C30553 * C29839 +
                       (C29775 * C190 + C141219 * C363) * C29770 +
                       (C29775 * C109 + C141219 * C115) * C29838) *
                          C141353 * C141298 * C2374) *
                         C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eeyy[120] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                        C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                           C5863 +
                       (C6265 + C6266) * C5864 + C6271 * C5865) *
                          C141353 * C141298 * C2374 -
                      ((C7252 + C7253) * C5865 + (C7254 + C7255) * C5864 +
                       (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 +
                        C6228 * C823 + C7241 + C7241 + C141478 * C1171) *
                           C5863) *
                          C141353 * C141298 * C141497) *
                         C2376 +
                     (((C7255 + C7254) * C5863 + (C7253 + C7252) * C5864 +
                       (C6228 * C820 + C7242 + C7242 + C141478 * C1168 +
                        C6229 * C2963 + C7243 + C7243 + C141341 * C3199) *
                           C5865) *
                          C141353 * C141298 * C141497 -
                      ((C6269 + C6270) * C5865 + (C6268 + C6267) * C5864 +
                       (C6266 + C6265) * C5863) *
                          C141353 * C141298 * C2374) *
                         C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C29992 * C108 + C29997 + C29997 + C29770 * C419 +
                       C29993 * C823 + C29998 + C29998 + C29771 * C1171 +
                       C29994 * C2960 + C29999 + C29999 + C29772 * C3196 +
                       C29995 * C9667 + C30000 + C30000 + C29773 * C10035) *
                          C141219 * C141353 * C141298 * C2374 -
                      (C29995 * C25568 + C30625 + C30625 + C29773 * C25921 +
                       C29994 * C9667 + C30626 + C30626 + C29772 * C10035 +
                       C29993 * C2960 + C30627 + C30627 + C29771 * C3196 +
                       C29992 * C823 + C30628 + C30628 + C29770 * C1171) *
                          C141219 * C141353 * C141298 * C141497) *
                         C2376 +
                     ((C29992 * C822 + C30629 + C30629 + C29770 * C1170 +
                       C29993 * C2961 + C30630 + C30630 + C29771 * C3197 +
                       C29994 * C9668 + C30631 + C30631 + C29772 * C10036 +
                       C29995 * C25569 + C30632 + C30632 + C29773 * C25922) *
                          C141219 * C141353 * C141298 * C141497 -
                      (C29995 * C9668 + C30001 + C30001 + C29773 * C10036 +
                       C29994 * C2961 + C30002 + C30002 + C29772 * C3197 +
                       C29993 * C822 + C30003 + C30003 + C29771 * C1170 +
                       C29992 * C109 + C30004 + C30004 + C29770 * C420) *
                          C141219 * C141353 * C141298 * C2374) *
                         C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[120] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5966 +
             (C275 * C189 + C141353 * C501) * C141478 + C6988 * C5967 +
             C7366 * C141341) *
                C5863 +
            (C6346 + C6347 + C6348 + C6349) * C5864 + C6360 * C5865) *
               C141298 * C2374 -
           ((C7369 + C7358 + C7359 + C7360) * C5865 +
            (C7370 + C7363 + C7364 + C7365) * C5864 +
            ((C275 * C3026 + C141353 * C3254) * C141341 +
             (C275 * C2960 + C141353 * C3084) * C5967 + C7366 * C141478 +
             C6988 * C5966) *
                C5863) *
               C141298 * C141497) *
              C2376 +
          (((C7365 + C7364 + C7363 + C7370) * C5863 +
            (C7360 + C7359 + C7358 + C7369) * C5864 +
            (C1027 * C5966 + C1274 * C141478 +
             (C275 * C2963 + C141353 * C3087) * C5967 +
             (C275 * C3029 + C141353 * C3257) * C141341) *
                C5865) *
               C141298 * C141497 -
           ((C6354 + C6355 + C6356 + C6357) * C5865 +
            (C6353 + C6352 + C6351 + C6350) * C5864 +
            (C6349 + C6348 + C6347 + C6346) * C5863) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C29838 +
            (C275 * C189 + C141353 * C501) * C29770 + C6988 * C29839 +
            C7366 * C29771 + C9864 * C29840 + C10124 * C29772 +
            C25754 * C29841 + C26008 * C29773) *
               C141219 * C141298 * C2374 -
           ((C275 * C25662 + C141353 * C26003) * C29773 +
            (C275 * C25568 + C141353 * C25740) * C29841 + C26008 * C29772 +
            C25754 * C29840 + C10124 * C29771 + C9864 * C29839 +
            C7366 * C29770 + C6988 * C29838) *
               C141219 * C141298 * C141497) *
              C2376 +
          ((C1031 * C29838 + C1276 * C29770 + C6993 * C29839 + C7368 * C29771 +
            C22934 * C29840 + C23308 * C29772 +
            (C275 * C25569 + C141353 * C25741) * C29841 +
            (C275 * C25663 + C141353 * C26004) * C29773) *
               C141219 * C141298 * C141497 -
           (C23308 * C29773 + C22934 * C29841 + C7368 * C29772 +
            C6993 * C29840 + C1276 * C29771 + C1031 * C29839 + C520 * C29770 +
            C305 * C29838) *
               C141219 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[120] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                         C5864 * C115 + C5873 * C110 + C5865 * C116) *
                            C275 +
                        (C5869 * C276 + C5863 * C579 + C5871 * C277 +
                         C5864 * C580 + C5873 * C278 + C5865 * C581) *
                            C141353) *
                           C141478 +
                       ((C7118 + C7119 + C7120) * C275 +
                        (C7481 + C7482 + C7483) * C141353) *
                           C141341) *
                          C141298 * C2374 -
                      (((C5873 * C3086 + C5865 * C3310 + C5871 * C3085 +
                         C5864 * C3309 + C5869 * C3084 + C5863 * C3308) *
                            C141353 +
                        (C5873 * C2962 + C5865 * C2966 + C5871 * C2961 +
                         C5864 * C2965 + C5869 * C2960 + C5863 * C2964) *
                            C275) *
                           C141341 +
                       ((C7483 + C7482 + C7481) * C141353 +
                        (C7120 + C7119 + C7118) * C275) *
                           C141478) *
                          C141298 * C141497) *
                         C2376 +
                     ((((C7124 + C7125 + C7126) * C275 +
                        (C7484 + C7485 + C7486) * C141353) *
                           C141478 +
                       ((C5869 * C2961 + C5863 * C2965 + C5871 * C2962 +
                         C5864 * C2966 + C5873 * C2963 + C5865 * C2967) *
                            C275 +
                        (C5869 * C3085 + C5863 * C3309 + C5871 * C3086 +
                         C5864 * C3310 + C5873 * C3087 + C5865 * C3311) *
                            C141353) *
                           C141341) *
                          C141298 * C141497 -
                      (((C7486 + C7485 + C7484) * C141353 +
                        (C7126 + C7125 + C7124) * C275) *
                           C141341 +
                       ((C5873 * C279 + C5865 * C582 + C5871 * C278 +
                         C5864 * C581 + C5869 * C277 + C5863 * C580) *
                            C141353 +
                        (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                         C5864 * C116 + C5869 * C109 + C5863 * C115) *
                            C275) *
                           C141478) *
                          C141298 * C2374) *
                         C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C29775 * C108 + C141219 * C114) * C275 +
                        (C29775 * C276 + C141219 * C579) * C141353) *
                           C29770 +
                       (C30765 + C30789) * C29771 + (C30768 + C30790) * C29772 +
                       (C30771 + C30791) * C29773) *
                          C141298 * C2374 -
                      (((C29775 * C25740 + C141219 * C26082) * C141353 +
                        (C29775 * C25568 + C141219 * C25570) * C275) *
                           C29773 +
                       (C30791 + C30771) * C29772 + (C30790 + C30768) * C29771 +
                       (C30789 + C30765) * C29770) *
                          C141298 * C141497) *
                         C2376 +
                     (((C30774 + C30792) * C29770 + (C30777 + C30793) * C29771 +
                       (C30780 + C30794) * C29772 +
                       ((C29775 * C25569 + C141219 * C25571) * C275 +
                        (C29775 * C25741 + C141219 * C26083) * C141353) *
                           C29773) *
                          C141298 * C141497 -
                      ((C30794 + C30780) * C29773 + (C30793 + C30777) * C29772 +
                       (C30792 + C30774) * C29771 +
                       ((C29775 * C277 + C141219 * C580) * C141353 +
                        (C29775 * C109 + C141219 * C115) * C275) *
                           C29770) *
                          C141298 * C2374) *
                         C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[120] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C275 +
             (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                 C141353) *
                C5863 +
            ((C5993 + C5994) * C275 + (C6522 + C6523) * C141353) * C5864 +
            C6530 * C5865) *
               C141298 * C2374 -
           (((C7593 + C7594) * C141353 + (C6862 + C6863) * C275) * C5865 +
            ((C7595 + C7596) * C141353 + (C6866 + C6867) * C275) * C5864 +
            ((C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
              C141478 * C1419) *
                 C141353 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C275) *
                C5863) *
               C141298 * C141497) *
              C2376 +
          ((((C6867 + C6866) * C275 + (C7596 + C7595) * C141353) * C5863 +
            ((C6863 + C6862) * C275 + (C7594 + C7593) * C141353) * C5864 +
            ((C5966 * C820 + C141478 * C909 + C5967 * C2963 + C141341 * C3029) *
                 C275 +
             (C5966 * C1003 + C141478 * C1416 + C5967 * C3087 +
              C141341 * C3365) *
                 C141353) *
                C5865) *
               C141298 * C141497 -
           (((C6526 + C6527) * C141353 + (C6003 + C6004) * C275) * C5865 +
            ((C6525 + C6524) * C141353 + (C5998 + C5997) * C275) * C5864 +
            ((C6523 + C6522) * C141353 + (C5994 + C5993) * C275) * C5863) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C275 +
            (C29838 * C276 + C29770 * C635 + C29839 * C1006 + C29771 * C1419 +
             C29840 * C3084 + C29772 * C3362 + C29841 * C9848 +
             C29773 * C10284) *
                C141353) *
               C141219 * C141298 * C2374 -
           ((C29841 * C25740 + C29773 * C26168 + C29840 * C9848 +
             C29772 * C10284 + C29839 * C3084 + C29771 * C3362 +
             C29838 * C1006 + C29770 * C1419) *
                C141353 +
            (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
             C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
             C29770 * C912) *
                C275) *
               C141219 * C141298 * C141497) *
              C2376 +
          (((C29838 * C822 + C29770 * C911 + C29839 * C2961 + C29771 * C3027 +
             C29840 * C9668 + C29772 * C9769 + C29841 * C25569 +
             C29773 * C25663) *
                C275 +
            (C29838 * C1005 + C29770 * C1418 + C29839 * C3085 + C29771 * C3363 +
             C29840 * C9849 + C29772 * C10285 + C29841 * C25741 +
             C29773 * C26169) *
                C141353) *
               C141219 * C141298 * C141497 -
           ((C29841 * C9849 + C29773 * C10285 + C29840 * C3085 +
             C29772 * C3363 + C29839 * C1005 + C29771 * C1418 + C29838 * C277 +
             C29770 * C636) *
                C141353 +
            (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
             C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
                C275) *
               C141219 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[120] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C141478 +
             C7709 * C141341) *
                C5863 +
            (C6605 + C6606) * C5864 + C6611 * C5865) *
               C141298 * C2374 -
           ((C7712 + C7699) * C5865 + (C7713 + C7702) * C5864 +
            ((C713 * C2960 + C3421 + C3421 + C141353 * C3416) * C141341 +
             C7709 * C141478) *
                C5863) *
               C141298 * C141497) *
              C2376 +
          (((C7702 + C7713) * C5863 + (C7699 + C7712) * C5864 +
            (C1525 * C141478 +
             (C713 * C2963 + C3424 + C3424 + C141353 * C3419) * C141341) *
                C5865) *
               C141298 * C141497 -
           ((C6609 + C6610) * C5865 + (C6608 + C6607) * C5864 +
            (C6606 + C6605) * C5863) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C29770 +
            C7709 * C29771 + C10372 * C29772 + C26253 * C29773) *
               C141219 * C141298 * C2374 -
           ((C713 * C25568 + C26249 + C26249 + C141353 * C26244) * C29773 +
            C26253 * C29772 + C10372 * C29771 + C7709 * C29770) *
               C141219 * C141298 * C141497) *
              C2376 +
          ((C1527 * C29770 + C7711 * C29771 + C23643 * C29772 +
            (C713 * C25569 + C26250 + C26250 + C141353 * C26245) * C29773) *
               C141219 * C141298 * C141497 -
           (C23643 * C29773 + C7711 * C29772 + C1527 * C29771 + C743 * C29770) *
               C141219 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[121] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C5868 * C108 + C5875 + C5875 + C5863 * C120 +
                       C5870 * C109 + C5876 + C5876 + C5864 * C121 +
                       C5872 * C110 + C5877 + C5877 + C5865 * C122) *
                          C141353 * C141478 +
                      (C6740 + C6741 + C6742) * C141353 * C141341) *
                         C141298 * C2956 -
                     ((C9692 + C9693 + C9694) * C141353 * C141341 +
                      (C6742 + C6741 + C6740) * C141353 * C141478) *
                         C141298 * C2957 +
                     ((C9694 + C9693 + C9692) * C141353 * C141478 +
                      (C5868 * C9667 + C9683 + C9683 + C5863 * C9673 +
                       C5870 * C9668 + C9684 + C9684 + C5864 * C9674 +
                       C5872 * C9669 + C9685 + C9685 + C5865 * C9675) *
                          C141353 * C141341) *
                         C141298 * C2958) *
                    C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C29774 * C108 + C29777 + C29777 + C141219 * C120) *
                          C141353 * C29770 +
                      C30307 * C29771 + C30308 * C29772 + C30309 * C29773) *
                         C141298 * C2956 -
                     (C32190 * C29773 + C30309 * C29772 + C30308 * C29771 +
                      C30307 * C29770) *
                         C141298 * C2957 +
                     (C30308 * C29770 + C30309 * C29771 + C32190 * C29772 +
                      (C29774 * C32180 + C32186 + C32186 + C141219 * C32182) *
                          C141353 * C29773) *
                         C141298 * C2958) *
                    C141247) /
                       (p * q * std::sqrt(p + q));
    d2eexy[121] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
               C5869 +
           (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
               C5863 +
           (C5993 + C5994) * C5871 + (C5995 + C5996) * C5864 + C6005 * C5873 +
           C6006 * C5865) *
              C141353 * C141298 * C2956 -
          ((C6860 + C6861) * C5865 + (C6862 + C6863) * C5873 +
           (C6864 + C6865) * C5864 + (C6866 + C6867) * C5871 +
           (C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
               C5863 +
           (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
               C5869) *
              C141353 * C141298 * C2957 +
          ((C5966 * C2960 + C141478 * C3026 + C5967 * C9667 + C141341 * C9768) *
               C5869 +
           (C5966 * C2964 + C141478 * C3030 + C5967 * C9670 + C141341 * C9771) *
               C5863 +
           (C5966 * C2961 + C141478 * C3027 + C5967 * C9668 + C141341 * C9769) *
               C5871 +
           (C5966 * C2965 + C141478 * C3031 + C5967 * C9671 + C141341 * C9772) *
               C5864 +
           (C5966 * C2962 + C141478 * C3028 + C5967 * C9669 + C141341 * C9770) *
               C5873 +
           (C5966 * C2966 + C141478 * C3032 + C5967 * C9672 + C141341 * C9773) *
               C5865) *
              C141353 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
            C29840 * C2960 + C29772 * C3026 + C29841 * C9667 + C29773 * C9768) *
               C29775 +
           (C29838 * C114 + C29770 * C195 + C29839 * C828 + C29771 * C917 +
            C29840 * C2964 + C29772 * C3030 + C29841 * C9670 + C29773 * C9771) *
               C141219) *
              C141353 * C141298 * C2956 -
          ((C29841 * C25570 + C29773 * C25664 + C29840 * C9670 +
            C29772 * C9771 + C29839 * C2964 + C29771 * C3030 + C29838 * C828 +
            C29770 * C917) *
               C141219 +
           (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
            C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
            C29770 * C912) *
               C29775) *
              C141353 * C141298 * C2957 +
          ((C29838 * C2960 + C29770 * C3026 + C29839 * C9667 + C29771 * C9768 +
            C29840 * C25568 + C29772 * C25662 + C29841 * C32180 +
            C29773 * C32240) *
               C29775 +
           (C29838 * C2964 + C29770 * C3030 + C29839 * C9670 + C29771 * C9771 +
            C29840 * C25570 + C29772 * C25664 + C29841 * C32181 +
            C29773 * C32241) *
               C141219) *
              C141353 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[121] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C5869 +
            (C275 * C114 + C141353 * C282) * C5863 + C305 * C5871 +
            C306 * C5864 + C307 * C5873 + C308 * C5865) *
               C141478 +
           (C6994 + C6995 + C6970 + C6971 + C6972 + C6973) * C141341) *
              C141298 * C2956 -
          ((C9855 + C9856 + C9857 + C9858 + C9865 + C9866) * C141341 +
           (C6973 + C6972 + C6971 + C6970 + C6995 + C6994) * C141478) *
              C141298 * C2957 +
          ((C9866 + C9865 + C9858 + C9857 + C9856 + C9855) * C141478 +
           ((C275 * C9667 + C141353 * C9848) * C5869 +
            (C275 * C9670 + C141353 * C9851) * C5863 +
            (C275 * C9668 + C141353 * C9849) * C5871 +
            (C275 * C9671 + C141353 * C9852) * C5864 +
            (C275 * C9669 + C141353 * C9850) * C5873 +
            (C275 * C9672 + C141353 * C9853) * C5865) *
               C141341) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C29775 +
            (C275 * C114 + C141353 * C282) * C141219) *
               C29770 +
           (C30445 + C30446) * C29771 + C32295 * C29772 + C32296 * C29773) *
              C141298 * C2956 -
          ((C32303 + C32304) * C29773 + (C30450 + C30449) * C29772 +
           (C30448 + C30447) * C29771 + (C30446 + C30445) * C29770) *
              C141298 * C2957 +
          (C32295 * C29770 + C32296 * C29771 + (C32304 + C32303) * C29772 +
           ((C275 * C32180 + C141353 * C32292) * C29775 +
            (C275 * C32181 + C141353 * C32293) * C141219) *
               C29773) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[121] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
            C5873 * C110 + C5865 * C116) *
               C5966 +
           (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
            C5873 * C191 + C5865 * C364) *
               C141478 +
           (C7118 + C7119 + C7120) * C5967 +
           (C7121 + C7122 + C7123) * C141341) *
              C141353 * C141298 * C2956 -
          ((C9956 + C9957 + C9958) * C141341 + (C9959 + C9960 + C9961) * C5967 +
           (C7123 + C7122 + C7121) * C141478 +
           (C7120 + C7119 + C7118) * C5966) *
              C141353 * C141298 * C2957 +
          ((C9961 + C9960 + C9959) * C5966 + (C9958 + C9957 + C9956) * C141478 +
           (C5869 * C9667 + C5863 * C9670 + C5871 * C9668 + C5864 * C9671 +
            C5873 * C9669 + C5865 * C9672) *
               C5967 +
           (C5869 * C9768 + C5863 * C9940 + C5871 * C9769 + C5864 * C9941 +
            C5873 * C9770 + C5865 * C9942) *
               C141341) *
              C141353 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C29775 * C108 + C141219 * C114) * C29838 +
           (C29775 * C189 + C141219 * C362) * C29770 + C30547 * C29839 +
           C30548 * C29771 + C30549 * C29840 + C30550 * C29772 +
           C30551 * C29841 + C30552 * C29773) *
              C141353 * C141298 * C2956 -
          (C32360 * C29773 + C32361 * C29841 + C30552 * C29772 +
           C30551 * C29840 + C30550 * C29771 + C30549 * C29839 +
           C30548 * C29770 + C30547 * C29838) *
              C141353 * C141298 * C2957 +
          (C30549 * C29838 + C30550 * C29770 + C30551 * C29839 +
           C30552 * C29771 + C32361 * C29840 + C32360 * C29772 +
           (C29775 * C32180 + C141219 * C32181) * C29841 +
           (C29775 * C32240 + C141219 * C32354) * C29773) *
              C141353 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[121] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                       C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                          C5863 +
                      (C6265 + C6266) * C5864 + C6271 * C5865) *
                         C141353 * C141298 * C2956 -
                     ((C7252 + C7253) * C5865 + (C7254 + C7255) * C5864 +
                      (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 +
                       C6228 * C823 + C7241 + C7241 + C141478 * C1171) *
                          C5863) *
                         C141353 * C141298 * C2957 +
                     ((C6228 * C2960 + C10039 + C10039 + C141478 * C3196 +
                       C6229 * C9667 + C10040 + C10040 + C141341 * C10035) *
                          C5863 +
                      (C6228 * C2961 + C10041 + C10041 + C141478 * C3197 +
                       C6229 * C9668 + C10042 + C10042 + C141341 * C10036) *
                          C5864 +
                      (C6228 * C2962 + C10043 + C10043 + C141478 * C3198 +
                       C6229 * C9669 + C10044 + C10044 + C141341 * C10037) *
                          C5865) *
                         C141353 * C141298 * C2958) *
                    C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((C29992 * C108 + C29997 + C29997 + C29770 * C419 +
                      C29993 * C823 + C29998 + C29998 + C29771 * C1171 +
                      C29994 * C2960 + C29999 + C29999 + C29772 * C3196 +
                      C29995 * C9667 + C30000 + C30000 + C29773 * C10035) *
                         C141219 * C141353 * C141298 * C2956 -
                     (C29995 * C25568 + C30625 + C30625 + C29773 * C25921 +
                      C29994 * C9667 + C30626 + C30626 + C29772 * C10035 +
                      C29993 * C2960 + C30627 + C30627 + C29771 * C3196 +
                      C29992 * C823 + C30628 + C30628 + C29770 * C1171) *
                         C141219 * C141353 * C141298 * C2957 +
                     (C29992 * C2960 + C32413 + C32413 + C29770 * C3196 +
                      C29993 * C9667 + C32414 + C32414 + C29771 * C10035 +
                      C29994 * C25568 + C32415 + C32415 + C29772 * C25921 +
                      C29995 * C32180 + C32416 + C32416 + C29773 * C32411) *
                         C141219 * C141353 * C141298 * C2958) *
                    C141247) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[121] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C275 * C108 + C141353 * C276) * C5966 +
                       (C275 * C189 + C141353 * C501) * C141478 +
                       C6988 * C5967 + C7366 * C141341) *
                          C5863 +
                      (C6346 + C6347 + C6348 + C6349) * C5864 + C6360 * C5865) *
                         C141298 * C2956 -
                     ((C7369 + C7358 + C7359 + C7360) * C5865 +
                      (C7370 + C7363 + C7364 + C7365) * C5864 +
                      (C10124 * C141341 + C9864 * C5967 + C7366 * C141478 +
                       C6988 * C5966) *
                          C5863) *
                         C141298 * C2957 +
                     ((C9864 * C5966 + C10124 * C141478 +
                       (C275 * C9667 + C141353 * C9848) * C5967 +
                       (C275 * C9768 + C141353 * C10118) * C141341) *
                          C5863 +
                      (C6993 * C5966 + C7368 * C141478 +
                       (C275 * C9668 + C141353 * C9849) * C5967 +
                       (C275 * C9769 + C141353 * C10119) * C141341) *
                          C5864 +
                      (C6991 * C5966 + C7367 * C141478 +
                       (C275 * C9669 + C141353 * C9850) * C5967 +
                       (C275 * C9770 + C141353 * C10120) * C141341) *
                          C5865) *
                         C141298 * C2958) *
                    C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C275 * C108 + C141353 * C276) * C29838 +
                      (C275 * C189 + C141353 * C501) * C29770 + C6988 * C29839 +
                      C7366 * C29771 + C9864 * C29840 + C10124 * C29772 +
                      C25754 * C29841 + C26008 * C29773) *
                         C141219 * C141298 * C2956 -
                     (C32470 * C29773 + C32302 * C29841 + C26008 * C29772 +
                      C25754 * C29840 + C10124 * C29771 + C9864 * C29839 +
                      C7366 * C29770 + C6988 * C29838) *
                         C141219 * C141298 * C2957 +
                     (C9864 * C29838 + C10124 * C29770 + C25754 * C29839 +
                      C26008 * C29771 + C32302 * C29840 + C32470 * C29772 +
                      (C275 * C32180 + C141353 * C32292) * C29841 +
                      (C275 * C32240 + C141353 * C32466) * C29773) *
                         C141219 * C141298 * C2958) *
                    C141247) /
                       (p * q * std::sqrt(p + q));
    d2eezx[121] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
             C5873 * C110 + C5865 * C116) *
                C275 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
             C5873 * C278 + C5865 * C581) *
                C141353) *
               C141478 +
           ((C7118 + C7119 + C7120) * C275 +
            (C7481 + C7482 + C7483) * C141353) *
               C141341) *
              C141298 * C2956 -
          (((C10208 + C10209 + C10210) * C141353 +
            (C9959 + C9960 + C9961) * C275) *
               C141341 +
           ((C7483 + C7482 + C7481) * C141353 +
            (C7120 + C7119 + C7118) * C275) *
               C141478) *
              C141298 * C2957 +
          (((C9961 + C9960 + C9959) * C275 +
            (C10210 + C10209 + C10208) * C141353) *
               C141478 +
           ((C5869 * C9667 + C5863 * C9670 + C5871 * C9668 + C5864 * C9671 +
             C5873 * C9669 + C5865 * C9672) *
                C275 +
            (C5869 * C9848 + C5863 * C10198 + C5871 * C9849 + C5864 * C10199 +
             C5873 * C9850 + C5865 * C10200) *
                C141353) *
               C141341) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C275 +
            (C29775 * C276 + C141219 * C579) * C141353) *
               C29770 +
           (C30765 + C30789) * C29771 + C32522 * C29772 + C32523 * C29773) *
              C141298 * C2956 -
          ((C32528 + C32526) * C29773 + (C30791 + C30771) * C29772 +
           (C30790 + C30768) * C29771 + (C30789 + C30765) * C29770) *
              C141298 * C2957 +
          (C32522 * C29770 + C32523 * C29771 + (C32526 + C32528) * C29772 +
           ((C29775 * C32180 + C141219 * C32181) * C275 +
            (C29775 * C32292 + C141219 * C32520) * C141353) *
               C29773) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[121] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C275 +
            (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                C141353) *
               C5863 +
           ((C5993 + C5994) * C275 + (C6522 + C6523) * C141353) * C5864 +
           C6530 * C5865) *
              C141298 * C2956 -
          (((C7593 + C7594) * C141353 + (C6862 + C6863) * C275) * C5865 +
           ((C7595 + C7596) * C141353 + (C6866 + C6867) * C275) * C5864 +
           ((C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
             C141478 * C1419) *
                C141353 +
            (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                C275) *
               C5863) *
              C141298 * C2957 +
          (((C5966 * C2960 + C141478 * C3026 + C5967 * C9667 +
             C141341 * C9768) *
                C275 +
            (C5966 * C3084 + C141478 * C3362 + C5967 * C9848 +
             C141341 * C10284) *
                C141353) *
               C5863 +
           ((C5966 * C2961 + C141478 * C3027 + C5967 * C9668 +
             C141341 * C9769) *
                C275 +
            (C5966 * C3085 + C141478 * C3363 + C5967 * C9849 +
             C141341 * C10285) *
                C141353) *
               C5864 +
           ((C5966 * C2962 + C141478 * C3028 + C5967 * C9669 +
             C141341 * C9770) *
                C275 +
            (C5966 * C3086 + C141478 * C3364 + C5967 * C9850 +
             C141341 * C10286) *
                C141353) *
               C5865) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
            C29840 * C2960 + C29772 * C3026 + C29841 * C9667 + C29773 * C9768) *
               C275 +
           (C29838 * C276 + C29770 * C635 + C29839 * C1006 + C29771 * C1419 +
            C29840 * C3084 + C29772 * C3362 + C29841 * C9848 +
            C29773 * C10284) *
               C141353) *
              C141219 * C141298 * C2956 -
          ((C29841 * C25740 + C29773 * C26168 + C29840 * C9848 +
            C29772 * C10284 + C29839 * C3084 + C29771 * C3362 + C29838 * C1006 +
            C29770 * C1419) *
               C141353 +
           (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
            C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
            C29770 * C912) *
               C275) *
              C141219 * C141298 * C2957 +
          ((C29838 * C2960 + C29770 * C3026 + C29839 * C9667 + C29771 * C9768 +
            C29840 * C25568 + C29772 * C25662 + C29841 * C32180 +
            C29773 * C32240) *
               C275 +
           (C29838 * C3084 + C29770 * C3362 + C29839 * C9848 + C29771 * C10284 +
            C29840 * C25740 + C29772 * C26168 + C29841 * C32292 +
            C29773 * C32578) *
               C141353) *
              C141219 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[121] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141478 +
            C7709 * C141341) *
               C5863 +
           (C6605 + C6606) * C5864 + C6611 * C5865) *
              C141298 * C2956 -
          ((C7712 + C7699) * C5865 + (C7713 + C7702) * C5864 +
           (C10372 * C141341 + C7709 * C141478) * C5863) *
              C141298 * C2957 +
          ((C10372 * C141478 +
            (C713 * C9667 + C10367 + C10367 + C141353 * C10361) * C141341) *
               C5863 +
           (C7711 * C141478 +
            (C713 * C9668 + C10368 + C10368 + C141353 * C10362) * C141341) *
               C5864 +
           (C7710 * C141478 +
            (C713 * C9669 + C10369 + C10369 + C141353 * C10363) * C141341) *
               C5865) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141353 * C714) * C29770 +
           C7709 * C29771 + C10372 * C29772 + C26253 * C29773) *
              C141219 * C141298 * C2956 -
          (C32636 * C29773 + C26253 * C29772 + C10372 * C29771 +
           C7709 * C29770) *
              C141219 * C141298 * C2957 +
          (C10372 * C29770 + C26253 * C29771 + C32636 * C29772 +
           (C713 * C32180 + C32633 + C32633 + C141353 * C32629) * C29773) *
              C141219 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexx[122] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 +
                        C5870 * C109 + C5876 + C5876 + C5864 * C121 +
                        C5872 * C110 + C5877 + C5877 + C5865 * C122) *
                           C141353 * C141478 +
                       (C6740 + C6741 + C6742) * C141353 * C141341) *
                          C1596 -
                      ((C10495 + C10496 + C10497) * C141353 * C141341 +
                       (C5872 * C1599 + C7815 + C7815 + C5865 * C1609 +
                        C5870 * C1600 + C7816 + C7816 + C5864 * C1610 +
                        C5868 * C1601 + C7817 + C7817 + C5863 * C1611) *
                           C141353 * C141478) *
                          C141499) *
                         C2374 +
                     (((C10497 + C10496 + C10495) * C141353 * C141478 +
                       (C5868 * C10470 + C10486 + C10486 + C5863 * C10476 +
                        C5870 * C10471 + C10487 + C10487 + C5864 * C10477 +
                        C5872 * C10472 + C10488 + C10488 + C5865 * C10478) *
                           C141353 * C141341) *
                          C141499 -
                      ((C9692 + C9693 + C9694) * C141353 * C141341 +
                       (C6742 + C6741 + C6740) * C141353 * C141478) *
                          C1596) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) *
                           C141353 * C29770 +
                       C30307 * C29771 + C30308 * C29772 + C30309 * C29773) *
                          C1596 -
                      (C32722 * C29773 + C32723 * C29772 + C32724 * C29771 +
                       (C29774 * C1601 + C30996 + C30996 + C141219 * C1611) *
                           C141353 * C29770) *
                          C141499) *
                         C2374 +
                     ((C32724 * C29770 + C32723 * C29771 + C32722 * C29772 +
                       (C29774 * C32702 + C32712 + C32712 + C141219 * C32704) *
                           C141353 * C29773) *
                          C141499 -
                      (C32190 * C29773 + C30309 * C29772 + C30308 * C29771 +
                       C30307 * C29770) *
                          C1596) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q));
    d2eexy[122] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C5869 +
            (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                C5863 +
            (C5993 + C5994) * C5871 + (C5995 + C5996) * C5864 + C6005 * C5873 +
            C6006 * C5865) *
               C141353 * C1596 -
           ((C7938 + C7939) * C5865 + (C7940 + C7941) * C5873 +
            (C7942 + C7943) * C5864 + (C7944 + C7945) * C5871 +
            (C5967 * C3494 + C141341 * C3576 + C5966 * C1606 +
             C141478 * C1695) *
                C5863 +
            (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 +
             C141478 * C1690) *
                C5869) *
               C141353 * C141499) *
              C2374 +
          (((C5966 * C3490 + C141478 * C3572 + C5967 * C10470 +
             C141341 * C10595) *
                C5869 +
            (C5966 * C3494 + C141478 * C3576 + C5967 * C10473 +
             C141341 * C10598) *
                C5863 +
            (C5966 * C3491 + C141478 * C3573 + C5967 * C10471 +
             C141341 * C10596) *
                C5871 +
            (C5966 * C3495 + C141478 * C3577 + C5967 * C10474 +
             C141341 * C10599) *
                C5864 +
            (C5966 * C3492 + C141478 * C3574 + C5967 * C10472 +
             C141341 * C10597) *
                C5873 +
            (C5966 * C3496 + C141478 * C3578 + C5967 * C10475 +
             C141341 * C10600) *
                C5865) *
               C141353 * C141499 -
           ((C6860 + C6861) * C5865 + (C6862 + C6863) * C5873 +
            (C6864 + C6865) * C5864 + (C6866 + C6867) * C5871 +
            (C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
                C5863 +
            (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                C5869) *
               C141353 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C29775 +
            (C29838 * C114 + C29770 * C195 + C29839 * C828 + C29771 * C917 +
             C29840 * C2964 + C29772 * C3030 + C29841 * C9670 +
             C29773 * C9771) *
                C141219) *
               C141353 * C1596 -
           ((C29841 * C26353 + C29773 * C26479 + C29840 * C10473 +
             C29772 * C10598 + C29839 * C3494 + C29771 * C3576 +
             C29838 * C1606 + C29770 * C1695) *
                C141219 +
            (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
             C29772 * C10595 + C29839 * C3490 + C29771 * C3572 +
             C29838 * C1601 + C29770 * C1690) *
                C29775) *
               C141353 * C141499) *
              C2374 +
          (((C29838 * C3490 + C29770 * C3572 + C29839 * C10470 +
             C29771 * C10595 + C29840 * C26351 + C29772 * C26477 +
             C29841 * C32702 + C29773 * C32790) *
                C29775 +
            (C29838 * C3494 + C29770 * C3576 + C29839 * C10473 +
             C29771 * C10598 + C29840 * C26353 + C29772 * C26479 +
             C29841 * C32703 + C29773 * C32791) *
                C141219) *
               C141353 * C141499 -
           ((C29841 * C25570 + C29773 * C25664 + C29840 * C9670 +
             C29772 * C9771 + C29839 * C2964 + C29771 * C3030 + C29838 * C828 +
             C29770 * C917) *
                C141219 +
            (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
             C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
             C29770 * C912) *
                C29775) *
               C141353 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[122] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5869 +
             (C275 * C114 + C141353 * C282) * C5863 + C305 * C5871 +
             C306 * C5864 + C307 * C5873 + C308 * C5865) *
                C141478 +
            (C6994 + C6995 + C6970 + C6971 + C6972 + C6973) * C141341) *
               C1596 -
           ((C10706 + C10707 + C10708 + C10709 + C10716 + C10717) * C141341 +
            (C1806 * C5865 + C1807 * C5873 + C1808 * C5864 + C1809 * C5871 +
             (C275 * C1606 + C141353 * C1789) * C5863 +
             (C275 * C1601 + C141353 * C1784) * C5869) *
                C141478) *
               C141499) *
              C2374 +
          (((C10717 + C10716 + C10709 + C10708 + C10707 + C10706) * C141478 +
            ((C275 * C10470 + C141353 * C10699) * C5869 +
             (C275 * C10473 + C141353 * C10702) * C5863 +
             (C275 * C10471 + C141353 * C10700) * C5871 +
             (C275 * C10474 + C141353 * C10703) * C5864 +
             (C275 * C10472 + C141353 * C10701) * C5873 +
             (C275 * C10475 + C141353 * C10704) * C5865) *
                C141341) *
               C141499 -
           ((C9855 + C9856 + C9857 + C9858 + C9865 + C9866) * C141341 +
            (C6973 + C6972 + C6971 + C6970 + C6995 + C6994) * C141478) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C29775 +
             (C275 * C114 + C141353 * C282) * C141219) *
                C29770 +
            (C30445 + C30446) * C29771 + C32295 * C29772 + C32296 * C29773) *
               C1596 -
           ((C32871 + C32872) * C29773 + (C32865 + C32866) * C29772 +
            (C32867 + C32868) * C29771 +
            ((C275 * C1606 + C141353 * C1789) * C141219 +
             (C275 * C1601 + C141353 * C1784) * C29775) *
                C29770) *
               C141499) *
              C2374 +
          (((C32868 + C32867) * C29770 + (C32866 + C32865) * C29771 +
            (C32872 + C32871) * C29772 +
            ((C275 * C32702 + C141353 * C32858) * C29775 +
             (C275 * C32703 + C141353 * C32859) * C141219) *
                C29773) *
               C141499 -
           ((C32303 + C32304) * C29773 + (C30450 + C30449) * C29772 +
            (C30448 + C30447) * C29771 + (C30446 + C30445) * C29770) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[122] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                        C5864 * C115 + C5873 * C110 + C5865 * C116) *
                           C5966 +
                       (C5869 * C189 + C5863 * C362 + C5871 * C190 +
                        C5864 * C363 + C5873 * C191 + C5865 * C364) *
                           C141478 +
                       (C7118 + C7119 + C7120) * C5967 +
                       (C7121 + C7122 + C7123) * C141341) *
                          C141353 * C1596 -
                      ((C10831 + C10832 + C10833) * C141341 +
                       (C10834 + C10835 + C10836) * C5967 +
                       (C5873 * C1688 + C5865 * C1876 + C5871 * C1689 +
                        C5864 * C1877 + C5869 * C1690 + C5863 * C1878) *
                           C141478 +
                       (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 +
                        C5864 * C1605 + C5869 * C1601 + C5863 * C1606) *
                           C5966) *
                          C141353 * C141499) *
                         C2374 +
                     (((C10836 + C10835 + C10834) * C5966 +
                       (C10833 + C10832 + C10831) * C141478 +
                       (C5869 * C10470 + C5863 * C10473 + C5871 * C10471 +
                        C5864 * C10474 + C5873 * C10472 + C5865 * C10475) *
                           C5967 +
                       (C5869 * C10595 + C5863 * C10815 + C5871 * C10596 +
                        C5864 * C10816 + C5873 * C10597 + C5865 * C10817) *
                           C141341) *
                          C141353 * C141499 -
                      ((C9956 + C9957 + C9958) * C141341 +
                       (C9959 + C9960 + C9961) * C5967 +
                       (C7123 + C7122 + C7121) * C141478 +
                       (C7120 + C7119 + C7118) * C5966) *
                          C141353 * C1596) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C29775 * C108 + C141219 * C114) * C29838 +
                       (C29775 * C189 + C141219 * C362) * C29770 +
                       C30547 * C29839 + C30548 * C29771 + C30549 * C29840 +
                       C30550 * C29772 + C30551 * C29841 + C30552 * C29773) *
                          C141353 * C1596 -
                      (C32952 * C29773 + C32953 * C29841 + C32954 * C29772 +
                       C32955 * C29840 + C32956 * C29771 + C32957 * C29839 +
                       (C29775 * C1690 + C141219 * C1878) * C29770 +
                       (C29775 * C1601 + C141219 * C1606) * C29838) *
                          C141353 * C141499) *
                         C2374 +
                     ((C32957 * C29838 + C32956 * C29770 + C32955 * C29839 +
                       C32954 * C29771 + C32953 * C29840 + C32952 * C29772 +
                       (C29775 * C32702 + C141219 * C32703) * C29841 +
                       (C29775 * C32790 + C141219 * C32938) * C29773) *
                          C141353 * C141499 -
                      (C32360 * C29773 + C32361 * C29841 + C30552 * C29772 +
                       C30551 * C29840 + C30550 * C29771 + C30549 * C29839 +
                       C30548 * C29770 + C30547 * C29838) *
                          C141353 * C1596) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q));
    d2eeyy[122] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                        C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                           C5863 +
                       (C6265 + C6266) * C5864 + C6271 * C5865) *
                          C141353 * C1596 -
                      ((C8276 + C8277) * C5865 + (C8278 + C8279) * C5864 +
                       (C6229 * C3490 + C8264 + C8264 + C141341 * C3790 +
                        C6228 * C1601 + C8265 + C8265 + C141478 * C1949) *
                           C5863) *
                          C141353 * C141499) *
                         C2374 +
                     (((C6228 * C3490 + C10938 + C10938 + C141478 * C3790 +
                        C6229 * C10470 + C10939 + C10939 + C141341 * C10934) *
                           C5863 +
                       (C6228 * C3491 + C10940 + C10940 + C141478 * C3791 +
                        C6229 * C10471 + C10941 + C10941 + C141341 * C10935) *
                           C5864 +
                       (C6228 * C3492 + C10942 + C10942 + C141478 * C3792 +
                        C6229 * C10472 + C10943 + C10943 + C141341 * C10936) *
                           C5865) *
                          C141353 * C141499 -
                      ((C7252 + C7253) * C5865 + (C7254 + C7255) * C5864 +
                       (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 +
                        C6228 * C823 + C7241 + C7241 + C141478 * C1171) *
                           C5863) *
                          C141353 * C1596) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C29992 * C108 + C29997 + C29997 + C29770 * C419 +
                       C29993 * C823 + C29998 + C29998 + C29771 * C1171 +
                       C29994 * C2960 + C29999 + C29999 + C29772 * C3196 +
                       C29995 * C9667 + C30000 + C30000 + C29773 * C10035) *
                          C141219 * C141353 * C1596 -
                      (C29995 * C26351 + C31265 + C31265 + C29773 * C26819 +
                       C29994 * C10470 + C31266 + C31266 + C29772 * C10934 +
                       C29993 * C3490 + C31267 + C31267 + C29771 * C3790 +
                       C29992 * C1601 + C31268 + C31268 + C29770 * C1949) *
                          C141219 * C141353 * C141499) *
                         C2374 +
                     ((C29992 * C3490 + C33025 + C33025 + C29770 * C3790 +
                       C29993 * C10470 + C33026 + C33026 + C29771 * C10934 +
                       C29994 * C26351 + C33027 + C33027 + C29772 * C26819 +
                       C29995 * C32702 + C33028 + C33028 + C29773 * C33023) *
                          C141219 * C141353 * C141499 -
                      (C29995 * C25568 + C30625 + C30625 + C29773 * C25921 +
                       C29994 * C9667 + C30626 + C30626 + C29772 * C10035 +
                       C29993 * C2960 + C30627 + C30627 + C29771 * C3196 +
                       C29992 * C823 + C30628 + C30628 + C29770 * C1171) *
                          C141219 * C141353 * C1596) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[122] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5966 +
             (C275 * C189 + C141353 * C501) * C141478 + C6988 * C5967 +
             C7366 * C141341) *
                C5863 +
            (C6346 + C6347 + C6348 + C6349) * C5864 + C6360 * C5865) *
               C1596 -
           ((C8390 + C8380 + C8381 + C8382) * C5865 +
            (C8391 + C8385 + C8386 + C8387) * C5864 +
            (C11047 * C141341 + C10715 * C5967 +
             (C275 * C1690 + C141353 * C2040) * C141478 +
             (C275 * C1601 + C141353 * C1784) * C5966) *
                C5863) *
               C141499) *
              C2374 +
          (((C10715 * C5966 + C11047 * C141478 +
             (C275 * C10470 + C141353 * C10699) * C5967 +
             (C275 * C10595 + C141353 * C11041) * C141341) *
                C5863 +
            (C8055 * C5966 + C8389 * C141478 +
             (C275 * C10471 + C141353 * C10700) * C5967 +
             (C275 * C10596 + C141353 * C11042) * C141341) *
                C5864 +
            (C8053 * C5966 + C8388 * C141478 +
             (C275 * C10472 + C141353 * C10701) * C5967 +
             (C275 * C10597 + C141353 * C11043) * C141341) *
                C5865) *
               C141499 -
           ((C7369 + C7358 + C7359 + C7360) * C5865 +
            (C7370 + C7363 + C7364 + C7365) * C5864 +
            (C10124 * C141341 + C9864 * C5967 + C7366 * C141478 +
             C6988 * C5966) *
                C5863) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C29838 +
            (C275 * C189 + C141353 * C501) * C29770 + C6988 * C29839 +
            C7366 * C29771 + C9864 * C29840 + C10124 * C29772 +
            C25754 * C29841 + C26008 * C29773) *
               C141219 * C1596 -
           (C33098 * C29773 + C32870 * C29841 + C26930 * C29772 +
            C26595 * C29840 + C11047 * C29771 + C10715 * C29839 +
            (C275 * C1690 + C141353 * C2040) * C29770 +
            (C275 * C1601 + C141353 * C1784) * C29838) *
               C141219 * C141499) *
              C2374 +
          ((C10715 * C29838 + C11047 * C29770 + C26595 * C29839 +
            C26930 * C29771 + C32870 * C29840 + C33098 * C29772 +
            (C275 * C32702 + C141353 * C32858) * C29841 +
            (C275 * C32790 + C141353 * C33094) * C29773) *
               C141219 * C141499 -
           (C32470 * C29773 + C32302 * C29841 + C26008 * C29772 +
            C25754 * C29840 + C10124 * C29771 + C9864 * C29839 +
            C7366 * C29770 + C6988 * C29838) *
               C141219 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezx[122] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
              C5873 * C278 + C5865 * C581) *
                 C141353) *
                C141478 +
            ((C7118 + C7119 + C7120) * C275 +
             (C7481 + C7482 + C7483) * C141353) *
                C141341) *
               C1596 -
           (((C11155 + C11156 + C11157) * C141353 +
             (C10834 + C10835 + C10836) * C275) *
                C141341 +
            ((C5873 * C1782 + C5865 * C2124 + C5871 * C1783 + C5864 * C2125 +
              C5869 * C1784 + C5863 * C2126) *
                 C141353 +
             (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 + C5864 * C1605 +
              C5869 * C1601 + C5863 * C1606) *
                 C275) *
                C141478) *
               C141499) *
              C2374 +
          ((((C10836 + C10835 + C10834) * C275 +
             (C11157 + C11156 + C11155) * C141353) *
                C141478 +
            ((C5869 * C10470 + C5863 * C10473 + C5871 * C10471 +
              C5864 * C10474 + C5873 * C10472 + C5865 * C10475) *
                 C275 +
             (C5869 * C10699 + C5863 * C11145 + C5871 * C10700 +
              C5864 * C11146 + C5873 * C10701 + C5865 * C11147) *
                 C141353) *
                C141341) *
               C141499 -
           (((C10208 + C10209 + C10210) * C141353 +
             (C9959 + C9960 + C9961) * C275) *
                C141341 +
            ((C7483 + C7482 + C7481) * C141353 +
             (C7120 + C7119 + C7118) * C275) *
                C141478) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C275 +
             (C29775 * C276 + C141219 * C579) * C141353) *
                C29770 +
            (C30765 + C30789) * C29771 + C32522 * C29772 + C32523 * C29773) *
               C1596 -
           ((C33178 + C33168) * C29773 + (C33179 + C33171) * C29772 +
            (C33180 + C33174) * C29771 +
            ((C29775 * C1784 + C141219 * C2126) * C141353 +
             (C29775 * C1601 + C141219 * C1606) * C275) *
                C29770) *
               C141499) *
              C2374 +
          (((C33174 + C33180) * C29770 + (C33171 + C33179) * C29771 +
            (C33168 + C33178) * C29772 +
            ((C29775 * C32702 + C141219 * C32703) * C275 +
             (C29775 * C32858 + C141219 * C33164) * C141353) *
                C29773) *
               C141499 -
           ((C32528 + C32526) * C29773 + (C30791 + C30771) * C29772 +
            (C30790 + C30768) * C29771 + (C30789 + C30765) * C29770) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[122] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C275 +
             (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                 C141353) *
                C5863 +
            ((C5993 + C5994) * C275 + (C6522 + C6523) * C141353) * C5864 +
            C6530 * C5865) *
               C1596 -
           (((C8596 + C8597) * C141353 + (C7940 + C7941) * C275) * C5865 +
            ((C8598 + C8599) * C141353 + (C7944 + C7945) * C275) * C5864 +
            ((C5967 * C3646 + C141341 * C4004 + C5966 * C1784 +
              C141478 * C2197) *
                 C141353 +
             (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 +
              C141478 * C1690) *
                 C275) *
                C5863) *
               C141499) *
              C2374 +
          ((((C5966 * C3490 + C141478 * C3572 + C5967 * C10470 +
              C141341 * C10595) *
                 C275 +
             (C5966 * C3646 + C141478 * C4004 + C5967 * C10699 +
              C141341 * C11255) *
                 C141353) *
                C5863 +
            ((C5966 * C3491 + C141478 * C3573 + C5967 * C10471 +
              C141341 * C10596) *
                 C275 +
             (C5966 * C3647 + C141478 * C4005 + C5967 * C10700 +
              C141341 * C11256) *
                 C141353) *
                C5864 +
            ((C5966 * C3492 + C141478 * C3574 + C5967 * C10472 +
              C141341 * C10597) *
                 C275 +
             (C5966 * C3648 + C141478 * C4006 + C5967 * C10701 +
              C141341 * C11257) *
                 C141353) *
                C5865) *
               C141499 -
           (((C7593 + C7594) * C141353 + (C6862 + C6863) * C275) * C5865 +
            ((C7595 + C7596) * C141353 + (C6866 + C6867) * C275) * C5864 +
            ((C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
              C141478 * C1419) *
                 C141353 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C275) *
                C5863) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C275 +
            (C29838 * C276 + C29770 * C635 + C29839 * C1006 + C29771 * C1419 +
             C29840 * C3084 + C29772 * C3362 + C29841 * C9848 +
             C29773 * C10284) *
                C141353) *
               C141219 * C1596 -
           ((C29841 * C26579 + C29773 * C27140 + C29840 * C10699 +
             C29772 * C11255 + C29839 * C3646 + C29771 * C4004 +
             C29838 * C1784 + C29770 * C2197) *
                C141353 +
            (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
             C29772 * C10595 + C29839 * C3490 + C29771 * C3572 +
             C29838 * C1601 + C29770 * C1690) *
                C275) *
               C141219 * C141499) *
              C2374 +
          (((C29838 * C3490 + C29770 * C3572 + C29839 * C10470 +
             C29771 * C10595 + C29840 * C26351 + C29772 * C26477 +
             C29841 * C32702 + C29773 * C32790) *
                C275 +
            (C29838 * C3646 + C29770 * C4004 + C29839 * C10699 +
             C29771 * C11255 + C29840 * C26579 + C29772 * C27140 +
             C29841 * C32858 + C29773 * C33246) *
                C141353) *
               C141219 * C141499 -
           ((C29841 * C25740 + C29773 * C26168 + C29840 * C9848 +
             C29772 * C10284 + C29839 * C3084 + C29771 * C3362 +
             C29838 * C1006 + C29770 * C1419) *
                C141353 +
            (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
             C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
             C29770 * C912) *
                C275) *
               C141219 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[122] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C141478 +
             C7709 * C141341) *
                C5863 +
            (C6605 + C6606) * C5864 + C6611 * C5865) *
               C1596 -
           ((C8710 + C8700) * C5865 + (C8711 + C8703) * C5864 +
            (C11367 * C141341 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141478) *
                C5863) *
               C141499) *
              C2374 +
          (((C11367 * C141478 +
             (C713 * C10470 + C11362 + C11362 + C141353 * C11356) * C141341) *
                C5863 +
            (C8709 * C141478 +
             (C713 * C10471 + C11363 + C11363 + C141353 * C11357) * C141341) *
                C5864 +
            (C8708 * C141478 +
             (C713 * C10472 + C11364 + C11364 + C141353 * C11358) * C141341) *
                C5865) *
               C141499 -
           ((C7712 + C7699) * C5865 + (C7713 + C7702) * C5864 +
            (C10372 * C141341 + C7709 * C141478) * C5863) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C29770 +
            C7709 * C29771 + C10372 * C29772 + C26253 * C29773) *
               C141219 * C1596 -
           (C33320 * C29773 + C27249 * C29772 + C11367 * C29771 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C29770) *
               C141219 * C141499) *
              C2374 +
          ((C11367 * C29770 + C27249 * C29771 + C33320 * C29772 +
            (C713 * C32702 + C33317 + C33317 + C141353 * C33313) * C29773) *
               C141219 * C141499 -
           (C32636 * C29773 + C26253 * C29772 + C10372 * C29771 +
            C7709 * C29770) *
               C141219 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexx[123] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 +
                        C5870 * C109 + C5876 + C5876 + C5864 * C121 +
                        C5872 * C110 + C5877 + C5877 + C5865 * C122) *
                           C141353 * C141478 +
                       (C6740 + C6741 + C6742) * C141353 * C141341) *
                          C4148 -
                      ((C10495 + C10496 + C10497) * C141353 * C141341 +
                       (C5872 * C1599 + C7815 + C7815 + C5865 * C1609 +
                        C5870 * C1600 + C7816 + C7816 + C5864 * C1610 +
                        C5868 * C1601 + C7817 + C7817 + C5863 * C1611) *
                           C141353 * C141478) *
                          C141499) *
                         C141281 * C2376 +
                     (((C5868 * C1600 + C7818 + C7818 + C5863 * C1610 +
                        C5870 * C1599 + C7819 + C7819 + C5864 * C1609 +
                        C5872 * C1598 + C7820 + C7820 + C5865 * C1608) *
                           C141353 * C141478 +
                       (C5868 * C3491 + C7821 + C7821 + C5863 * C3499 +
                        C5870 * C3492 + C7822 + C7822 + C5864 * C3500 +
                        C5872 * C3493 + C7823 + C7823 + C5865 * C3501) *
                           C141353 * C141341) *
                          C141499 -
                      ((C6745 + C6744 + C6743) * C141353 * C141341 +
                       (C5872 * C111 + C5884 + C5884 + C5865 * C123 +
                        C5870 * C110 + C5885 + C5885 + C5864 * C122 +
                        C5868 * C109 + C5886 + C5886 + C5863 * C121) *
                           C141353 * C141478) *
                          C4148) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) *
                           C141353 * C29770 +
                       C30307 * C29771 + C30308 * C29772 + C30309 * C29773) *
                          C4148 -
                      (C32722 * C29773 + C32723 * C29772 + C32724 * C29771 +
                       (C29774 * C1601 + C30996 + C30996 + C141219 * C1611) *
                           C141353 * C29770) *
                          C141499) *
                         C141281 * C2376 +
                     (((C29774 * C1600 + C30997 + C30997 + C141219 * C1610) *
                           C141353 * C29770 +
                       (C29774 * C3491 + C30998 + C30998 + C141219 * C3499) *
                           C141353 * C29771 +
                       (C29774 * C10471 + C30999 + C30999 + C141219 * C10477) *
                           C141353 * C29772 +
                       (C29774 * C26352 + C31000 + C31000 + C141219 * C26356) *
                           C141353 * C29773) *
                          C141499 -
                      (C30312 * C29773 + C30311 * C29772 + C30310 * C29771 +
                       (C29774 * C109 + C29784 + C29784 + C141219 * C121) *
                           C141353 * C29770) *
                          C4148) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eexy[123] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C5869 +
            (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                C5863 +
            (C5993 + C5994) * C5871 + (C5995 + C5996) * C5864 + C6005 * C5873 +
            C6006 * C5865) *
               C141353 * C4148 -
           ((C7938 + C7939) * C5865 + (C7940 + C7941) * C5873 +
            (C7942 + C7943) * C5864 + (C7944 + C7945) * C5871 +
            (C5967 * C3494 + C141341 * C3576 + C5966 * C1606 +
             C141478 * C1695) *
                C5863 +
            (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 +
             C141478 * C1690) *
                C5869) *
               C141353 * C141499) *
              C141281 * C2376 +
          (((C7945 + C7944) * C5869 + (C7943 + C7942) * C5863 +
            (C7941 + C7940) * C5871 + (C7939 + C7938) * C5864 +
            (C5966 * C1598 + C141478 * C1687 + C5967 * C3493 +
             C141341 * C3575) *
                C5873 +
            (C5966 * C1603 + C141478 * C1692 + C5967 * C3497 +
             C141341 * C3579) *
                C5865) *
               C141353 * C141499 -
           ((C6001 + C6002) * C5865 + (C6003 + C6004) * C5873 +
            (C6000 + C5999) * C5864 + (C5998 + C5997) * C5871 +
            (C5996 + C5995) * C5863 + (C5994 + C5993) * C5869) *
               C141353 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C29775 +
            (C29838 * C114 + C29770 * C195 + C29839 * C828 + C29771 * C917 +
             C29840 * C2964 + C29772 * C3030 + C29841 * C9670 +
             C29773 * C9771) *
                C141219) *
               C141353 * C4148 -
           ((C29841 * C26353 + C29773 * C26479 + C29840 * C10473 +
             C29772 * C10598 + C29839 * C3494 + C29771 * C3576 +
             C29838 * C1606 + C29770 * C1695) *
                C141219 +
            (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
             C29772 * C10595 + C29839 * C3490 + C29771 * C3572 +
             C29838 * C1601 + C29770 * C1690) *
                C29775) *
               C141353 * C141499) *
              C141281 * C2376 +
          (((C29838 * C1600 + C29770 * C1689 + C29839 * C3491 + C29771 * C3573 +
             C29840 * C10471 + C29772 * C10596 + C29841 * C26352 +
             C29773 * C26478) *
                C29775 +
            (C29838 * C1605 + C29770 * C1694 + C29839 * C3495 + C29771 * C3577 +
             C29840 * C10474 + C29772 * C10599 + C29841 * C26354 +
             C29773 * C26480) *
                C141219) *
               C141353 * C141499 -
           ((C29841 * C9671 + C29773 * C9772 + C29840 * C2965 + C29772 * C3031 +
             C29839 * C827 + C29771 * C916 + C29838 * C115 + C29770 * C196) *
                C141219 +
            (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
             C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
                C29775) *
               C141353 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[123] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5869 +
             (C275 * C114 + C141353 * C282) * C5863 + C305 * C5871 +
             C306 * C5864 + C307 * C5873 + C308 * C5865) *
                C141478 +
            (C6994 + C6995 + C6970 + C6971 + C6972 + C6973) * C141341) *
               C4148 -
           ((C10706 + C10707 + C10708 + C10709 + C10716 + C10717) * C141341 +
            (C1806 * C5865 + C1807 * C5873 + C1808 * C5864 + C1809 * C5871 +
             (C275 * C1606 + C141353 * C1789) * C5863 +
             (C275 * C1601 + C141353 * C1784) * C5869) *
                C141478) *
               C141499) *
              C141281 * C2376 +
          (((C1809 * C5869 + C1808 * C5863 + C1807 * C5871 + C1806 * C5864 +
             C1805 * C5873 + C1804 * C5865) *
                C141478 +
            (C8055 * C5869 + C8054 * C5863 + C8053 * C5871 + C8052 * C5864 +
             (C275 * C3493 + C141353 * C3649) * C5873 +
             (C275 * C3497 + C141353 * C3653) * C5865) *
                C141341) *
               C141499 -
           ((C6987 + C6986 + C6985 + C6984 + C6983 + C6982) * C141341 +
            (C310 * C5865 + C309 * C5873 + C308 * C5864 + C307 * C5871 +
             C306 * C5863 + C305 * C5869) *
                C141478) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C29775 +
             (C275 * C114 + C141353 * C282) * C141219) *
                C29770 +
            (C30445 + C30446) * C29771 + C32295 * C29772 + C32296 * C29773) *
               C4148 -
           ((C32871 + C32872) * C29773 + (C32865 + C32866) * C29772 +
            (C32867 + C32868) * C29771 +
            ((C275 * C1606 + C141353 * C1789) * C141219 +
             (C275 * C1601 + C141353 * C1784) * C29775) *
                C29770) *
               C141499) *
              C141281 * C2376 +
          (((C1809 * C29775 + C1808 * C141219) * C29770 +
            (C8055 * C29775 + C8054 * C141219) * C29771 +
            (C23974 * C29775 + C23973 * C141219) * C29772 +
            ((C275 * C26352 + C141353 * C26580) * C29775 +
             (C275 * C26354 + C141353 * C26582) * C141219) *
                C29773) *
               C141499 -
           ((C30456 + C30455) * C29773 + (C30454 + C30453) * C29772 +
            (C30452 + C30451) * C29771 +
            (C306 * C141219 + C305 * C29775) * C29770) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[123] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                        C5864 * C115 + C5873 * C110 + C5865 * C116) *
                           C5966 +
                       (C5869 * C189 + C5863 * C362 + C5871 * C190 +
                        C5864 * C363 + C5873 * C191 + C5865 * C364) *
                           C141478 +
                       (C7118 + C7119 + C7120) * C5967 +
                       (C7121 + C7122 + C7123) * C141341) *
                          C141353 * C4148 -
                      ((C10831 + C10832 + C10833) * C141341 +
                       (C10834 + C10835 + C10836) * C5967 +
                       (C5873 * C1688 + C5865 * C1876 + C5871 * C1689 +
                        C5864 * C1877 + C5869 * C1690 + C5863 * C1878) *
                           C141478 +
                       (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 +
                        C5864 * C1605 + C5869 * C1601 + C5863 * C1606) *
                           C5966) *
                          C141353 * C141499) *
                         C141281 * C2376 +
                     (((C5869 * C1600 + C5863 * C1605 + C5871 * C1599 +
                        C5864 * C1604 + C5873 * C1598 + C5865 * C1603) *
                           C5966 +
                       (C5869 * C1689 + C5863 * C1877 + C5871 * C1688 +
                        C5864 * C1876 + C5873 * C1687 + C5865 * C1875) *
                           C141478 +
                       (C5869 * C3491 + C5863 * C3495 + C5871 * C3492 +
                        C5864 * C3496 + C5873 * C3493 + C5865 * C3497) *
                           C5967 +
                       (C5869 * C3573 + C5863 * C3721 + C5871 * C3574 +
                        C5864 * C3722 + C5873 * C3575 + C5865 * C3723) *
                           C141341) *
                          C141353 * C141499 -
                      ((C7129 + C7128 + C7127) * C141341 +
                       (C7126 + C7125 + C7124) * C5967 +
                       (C5873 * C192 + C5865 * C365 + C5871 * C191 +
                        C5864 * C364 + C5869 * C190 + C5863 * C363) *
                           C141478 +
                       (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                        C5864 * C116 + C5869 * C109 + C5863 * C115) *
                           C5966) *
                          C141353 * C4148) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C29775 * C108 + C141219 * C114) * C29838 +
                       (C29775 * C189 + C141219 * C362) * C29770 +
                       C30547 * C29839 + C30548 * C29771 + C30549 * C29840 +
                       C30550 * C29772 + C30551 * C29841 + C30552 * C29773) *
                          C141353 * C4148 -
                      (C32952 * C29773 + C32953 * C29841 + C32954 * C29772 +
                       C32955 * C29840 + C32956 * C29771 + C32957 * C29839 +
                       (C29775 * C1690 + C141219 * C1878) * C29770 +
                       (C29775 * C1601 + C141219 * C1606) * C29838) *
                          C141353 * C141499) *
                         C141281 * C2376 +
                     (((C29775 * C1600 + C141219 * C1605) * C29838 +
                       (C29775 * C1689 + C141219 * C1877) * C29770 +
                       (C29775 * C3491 + C141219 * C3495) * C29839 +
                       (C29775 * C3573 + C141219 * C3721) * C29771 +
                       (C29775 * C10471 + C141219 * C10474) * C29840 +
                       (C29775 * C10596 + C141219 * C10816) * C29772 +
                       (C29775 * C26352 + C141219 * C26354) * C29841 +
                       (C29775 * C26478 + C141219 * C26696) * C29773) *
                          C141353 * C141499 -
                      (C30558 * C29773 + C30557 * C29841 + C30556 * C29772 +
                       C30555 * C29840 + C30554 * C29771 + C30553 * C29839 +
                       (C29775 * C190 + C141219 * C363) * C29770 +
                       (C29775 * C109 + C141219 * C115) * C29838) *
                          C141353 * C4148) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eeyy[123] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                        C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                           C5863 +
                       (C6265 + C6266) * C5864 + C6271 * C5865) *
                          C141353 * C4148 -
                      ((C8276 + C8277) * C5865 + (C8278 + C8279) * C5864 +
                       (C6229 * C3490 + C8264 + C8264 + C141341 * C3790 +
                        C6228 * C1601 + C8265 + C8265 + C141478 * C1949) *
                           C5863) *
                          C141353 * C141499) *
                         C141281 * C2376 +
                     (((C8279 + C8278) * C5863 + (C8277 + C8276) * C5864 +
                       (C6228 * C1598 + C8266 + C8266 + C141478 * C1946 +
                        C6229 * C3493 + C8267 + C8267 + C141341 * C3793) *
                           C5865) *
                          C141353 * C141499 -
                      ((C6269 + C6270) * C5865 + (C6268 + C6267) * C5864 +
                       (C6266 + C6265) * C5863) *
                          C141353 * C4148) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C29992 * C108 + C29997 + C29997 + C29770 * C419 +
                       C29993 * C823 + C29998 + C29998 + C29771 * C1171 +
                       C29994 * C2960 + C29999 + C29999 + C29772 * C3196 +
                       C29995 * C9667 + C30000 + C30000 + C29773 * C10035) *
                          C141219 * C141353 * C4148 -
                      (C29995 * C26351 + C31265 + C31265 + C29773 * C26819 +
                       C29994 * C10470 + C31266 + C31266 + C29772 * C10934 +
                       C29993 * C3490 + C31267 + C31267 + C29771 * C3790 +
                       C29992 * C1601 + C31268 + C31268 + C29770 * C1949) *
                          C141219 * C141353 * C141499) *
                         C141281 * C2376 +
                     ((C29992 * C1600 + C31269 + C31269 + C29770 * C1948 +
                       C29993 * C3491 + C31270 + C31270 + C29771 * C3791 +
                       C29994 * C10471 + C31271 + C31271 + C29772 * C10935 +
                       C29995 * C26352 + C31272 + C31272 + C29773 * C26820) *
                          C141219 * C141353 * C141499 -
                      (C29995 * C9668 + C30001 + C30001 + C29773 * C10036 +
                       C29994 * C2961 + C30002 + C30002 + C29772 * C3197 +
                       C29993 * C822 + C30003 + C30003 + C29771 * C1170 +
                       C29992 * C109 + C30004 + C30004 + C29770 * C420) *
                          C141219 * C141353 * C4148) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[123] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5966 +
             (C275 * C189 + C141353 * C501) * C141478 + C6988 * C5967 +
             C7366 * C141341) *
                C5863 +
            (C6346 + C6347 + C6348 + C6349) * C5864 + C6360 * C5865) *
               C4148 -
           ((C8390 + C8380 + C8381 + C8382) * C5865 +
            (C8391 + C8385 + C8386 + C8387) * C5864 +
            (C11047 * C141341 + C10715 * C5967 +
             (C275 * C1690 + C141353 * C2040) * C141478 +
             (C275 * C1601 + C141353 * C1784) * C5966) *
                C5863) *
               C141499) *
              C141281 * C2376 +
          (((C8387 + C8386 + C8385 + C8391) * C5863 +
            (C8382 + C8381 + C8380 + C8390) * C5864 +
            (C1805 * C5966 + C2052 * C141478 +
             (C275 * C3493 + C141353 * C3649) * C5967 +
             (C275 * C3575 + C141353 * C3867) * C141341) *
                C5865) *
               C141499 -
           ((C6354 + C6355 + C6356 + C6357) * C5865 +
            (C6353 + C6352 + C6351 + C6350) * C5864 +
            (C6349 + C6348 + C6347 + C6346) * C5863) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C29838 +
            (C275 * C189 + C141353 * C501) * C29770 + C6988 * C29839 +
            C7366 * C29771 + C9864 * C29840 + C10124 * C29772 +
            C25754 * C29841 + C26008 * C29773) *
               C141219 * C4148 -
           (C33098 * C29773 + C32870 * C29841 + C26930 * C29772 +
            C26595 * C29840 + C11047 * C29771 + C10715 * C29839 +
            (C275 * C1690 + C141353 * C2040) * C29770 +
            (C275 * C1601 + C141353 * C1784) * C29838) *
               C141219 * C141499) *
              C141281 * C2376 +
          ((C1809 * C29838 + C2054 * C29770 + C8055 * C29839 + C8389 * C29771 +
            C23974 * C29840 + C24300 * C29772 +
            (C275 * C26352 + C141353 * C26580) * C29841 +
            (C275 * C26478 + C141353 * C26926) * C29773) *
               C141219 * C141499 -
           (C23308 * C29773 + C22934 * C29841 + C7368 * C29772 +
            C6993 * C29840 + C1276 * C29771 + C1031 * C29839 + C520 * C29770 +
            C305 * C29838) *
               C141219 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[123] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
              C5873 * C278 + C5865 * C581) *
                 C141353) *
                C141478 +
            ((C7118 + C7119 + C7120) * C275 +
             (C7481 + C7482 + C7483) * C141353) *
                C141341) *
               C4148 -
           (((C11155 + C11156 + C11157) * C141353 +
             (C10834 + C10835 + C10836) * C275) *
                C141341 +
            ((C5873 * C1782 + C5865 * C2124 + C5871 * C1783 + C5864 * C2125 +
              C5869 * C1784 + C5863 * C2126) *
                 C141353 +
             (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 + C5864 * C1605 +
              C5869 * C1601 + C5863 * C1606) *
                 C275) *
                C141478) *
               C141499) *
              C141281 * C2376 +
          ((((C5869 * C1600 + C5863 * C1605 + C5871 * C1599 + C5864 * C1604 +
              C5873 * C1598 + C5865 * C1603) *
                 C275 +
             (C5869 * C1783 + C5863 * C2125 + C5871 * C1782 + C5864 * C2124 +
              C5873 * C1781 + C5865 * C2123) *
                 C141353) *
                C141478 +
            ((C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C5864 * C3496 +
              C5873 * C3493 + C5865 * C3497) *
                 C275 +
             (C5869 * C3647 + C5863 * C3935 + C5871 * C3648 + C5864 * C3936 +
              C5873 * C3649 + C5865 * C3937) *
                 C141353) *
                C141341) *
               C141499 -
           (((C7486 + C7485 + C7484) * C141353 +
             (C7126 + C7125 + C7124) * C275) *
                C141341 +
            ((C5873 * C279 + C5865 * C582 + C5871 * C278 + C5864 * C581 +
              C5869 * C277 + C5863 * C580) *
                 C141353 +
             (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
              C5869 * C109 + C5863 * C115) *
                 C275) *
                C141478) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C275 +
             (C29775 * C276 + C141219 * C579) * C141353) *
                C29770 +
            (C30765 + C30789) * C29771 + C32522 * C29772 + C32523 * C29773) *
               C4148 -
           ((C33178 + C33168) * C29773 + (C33179 + C33171) * C29772 +
            (C33180 + C33174) * C29771 +
            ((C29775 * C1784 + C141219 * C2126) * C141353 +
             (C29775 * C1601 + C141219 * C1606) * C275) *
                C29770) *
               C141499) *
              C141281 * C2376 +
          ((((C29775 * C1600 + C141219 * C1605) * C275 +
             (C29775 * C1783 + C141219 * C2125) * C141353) *
                C29770 +
            ((C29775 * C3491 + C141219 * C3495) * C275 +
             (C29775 * C3647 + C141219 * C3935) * C141353) *
                C29771 +
            ((C29775 * C10471 + C141219 * C10474) * C275 +
             (C29775 * C10700 + C141219 * C11146) * C141353) *
                C29772 +
            ((C29775 * C26352 + C141219 * C26354) * C275 +
             (C29775 * C26580 + C141219 * C27029) * C141353) *
                C29773) *
               C141499 -
           ((C30794 + C30780) * C29773 + (C30793 + C30777) * C29772 +
            (C30792 + C30774) * C29771 +
            ((C29775 * C277 + C141219 * C580) * C141353 +
             (C29775 * C109 + C141219 * C115) * C275) *
                C29770) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezy[123] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C275 +
             (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                 C141353) *
                C5863 +
            ((C5993 + C5994) * C275 + (C6522 + C6523) * C141353) * C5864 +
            C6530 * C5865) *
               C4148 -
           (((C8596 + C8597) * C141353 + (C7940 + C7941) * C275) * C5865 +
            ((C8598 + C8599) * C141353 + (C7944 + C7945) * C275) * C5864 +
            ((C5967 * C3646 + C141341 * C4004 + C5966 * C1784 +
              C141478 * C2197) *
                 C141353 +
             (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 +
              C141478 * C1690) *
                 C275) *
                C5863) *
               C141499) *
              C141281 * C2376 +
          ((((C7945 + C7944) * C275 + (C8599 + C8598) * C141353) * C5863 +
            ((C7941 + C7940) * C275 + (C8597 + C8596) * C141353) * C5864 +
            ((C5966 * C1598 + C141478 * C1687 + C5967 * C3493 +
              C141341 * C3575) *
                 C275 +
             (C5966 * C1781 + C141478 * C2194 + C5967 * C3649 +
              C141341 * C4007) *
                 C141353) *
                C5865) *
               C141499 -
           (((C6526 + C6527) * C141353 + (C6003 + C6004) * C275) * C5865 +
            ((C6525 + C6524) * C141353 + (C5998 + C5997) * C275) * C5864 +
            ((C6523 + C6522) * C141353 + (C5994 + C5993) * C275) * C5863) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C275 +
            (C29838 * C276 + C29770 * C635 + C29839 * C1006 + C29771 * C1419 +
             C29840 * C3084 + C29772 * C3362 + C29841 * C9848 +
             C29773 * C10284) *
                C141353) *
               C141219 * C4148 -
           ((C29841 * C26579 + C29773 * C27140 + C29840 * C10699 +
             C29772 * C11255 + C29839 * C3646 + C29771 * C4004 +
             C29838 * C1784 + C29770 * C2197) *
                C141353 +
            (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
             C29772 * C10595 + C29839 * C3490 + C29771 * C3572 +
             C29838 * C1601 + C29770 * C1690) *
                C275) *
               C141219 * C141499) *
              C141281 * C2376 +
          (((C29838 * C1600 + C29770 * C1689 + C29839 * C3491 + C29771 * C3573 +
             C29840 * C10471 + C29772 * C10596 + C29841 * C26352 +
             C29773 * C26478) *
                C275 +
            (C29838 * C1783 + C29770 * C2196 + C29839 * C3647 + C29771 * C4005 +
             C29840 * C10700 + C29772 * C11256 + C29841 * C26580 +
             C29773 * C27141) *
                C141353) *
               C141219 * C141499 -
           ((C29841 * C9849 + C29773 * C10285 + C29840 * C3085 +
             C29772 * C3363 + C29839 * C1005 + C29771 * C1418 + C29838 * C277 +
             C29770 * C636) *
                C141353 +
            (C29841 * C9668 + C29773 * C9769 + C29840 * C2961 + C29772 * C3027 +
             C29839 * C822 + C29771 * C911 + C29838 * C109 + C29770 * C190) *
                C275) *
               C141219 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[123] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C141478 +
             C7709 * C141341) *
                C5863 +
            (C6605 + C6606) * C5864 + C6611 * C5865) *
               C4148 -
           ((C8710 + C8700) * C5865 + (C8711 + C8703) * C5864 +
            (C11367 * C141341 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141478) *
                C5863) *
               C141499) *
              C141281 * C2376 +
          (((C8703 + C8711) * C5863 + (C8700 + C8710) * C5864 +
            (C2303 * C141478 +
             (C713 * C3493 + C4082 + C4082 + C141353 * C4077) * C141341) *
                C5865) *
               C141499 -
           ((C6609 + C6610) * C5865 + (C6608 + C6607) * C5864 +
            (C6606 + C6605) * C5863) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C29770 +
            C7709 * C29771 + C10372 * C29772 + C26253 * C29773) *
               C141219 * C4148 -
           (C33320 * C29773 + C27249 * C29772 + C11367 * C29771 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C29770) *
               C141219 * C141499) *
              C141281 * C2376 +
          ((C2305 * C29770 + C8709 * C29771 + C24611 * C29772 +
            (C713 * C26352 + C27246 + C27246 + C141353 * C27241) * C29773) *
               C141219 * C141499 -
           (C23643 * C29773 + C7711 * C29772 + C1527 * C29771 + C743 * C29770) *
               C141219 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[124] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 +
                        C5870 * C109 + C5876 + C5876 + C5864 * C121 +
                        C5872 * C110 + C5877 + C5877 + C5865 * C122) *
                           C141353 * C141478 +
                       (C6740 + C6741 + C6742) * C141353 * C141341) *
                          C4148 -
                      ((C10495 + C10496 + C10497) * C141353 * C141341 +
                       (C5872 * C1599 + C7815 + C7815 + C5865 * C1609 +
                        C5870 * C1600 + C7816 + C7816 + C5864 * C1610 +
                        C5868 * C1601 + C7817 + C7817 + C5863 * C1611) *
                           C141353 * C141478) *
                          C141499) *
                         C816 +
                     (((C10497 + C10496 + C10495) * C141353 * C141478 +
                       (C5868 * C10470 + C10486 + C10486 + C5863 * C10476 +
                        C5870 * C10471 + C10487 + C10487 + C5864 * C10477 +
                        C5872 * C10472 + C10488 + C10488 + C5865 * C10478) *
                           C141353 * C141341) *
                          C141499 -
                      ((C9692 + C9693 + C9694) * C141353 * C141341 +
                       (C6742 + C6741 + C6740) * C141353 * C141478) *
                          C4148) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) *
                           C141353 * C29770 +
                       C30307 * C29771 + C30308 * C29772 + C30309 * C29773) *
                          C4148 -
                      (C32722 * C29773 + C32723 * C29772 + C32724 * C29771 +
                       (C29774 * C1601 + C30996 + C30996 + C141219 * C1611) *
                           C141353 * C29770) *
                          C141499) *
                         C816 +
                     ((C32724 * C29770 + C32723 * C29771 + C32722 * C29772 +
                       (C29774 * C32702 + C32712 + C32712 + C141219 * C32704) *
                           C141353 * C29773) *
                          C141499 -
                      (C32190 * C29773 + C30309 * C29772 + C30308 * C29771 +
                       C30307 * C29770) *
                          C4148) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q));
    d2eexy[124] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C5869 +
            (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
                C5863 +
            (C5993 + C5994) * C5871 + (C5995 + C5996) * C5864 + C6005 * C5873 +
            C6006 * C5865) *
               C141353 * C4148 -
           ((C7938 + C7939) * C5865 + (C7940 + C7941) * C5873 +
            (C7942 + C7943) * C5864 + (C7944 + C7945) * C5871 +
            (C5967 * C3494 + C141341 * C3576 + C5966 * C1606 +
             C141478 * C1695) *
                C5863 +
            (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 +
             C141478 * C1690) *
                C5869) *
               C141353 * C141499) *
              C816 +
          (((C5966 * C3490 + C141478 * C3572 + C5967 * C10470 +
             C141341 * C10595) *
                C5869 +
            (C5966 * C3494 + C141478 * C3576 + C5967 * C10473 +
             C141341 * C10598) *
                C5863 +
            (C5966 * C3491 + C141478 * C3573 + C5967 * C10471 +
             C141341 * C10596) *
                C5871 +
            (C5966 * C3495 + C141478 * C3577 + C5967 * C10474 +
             C141341 * C10599) *
                C5864 +
            (C5966 * C3492 + C141478 * C3574 + C5967 * C10472 +
             C141341 * C10597) *
                C5873 +
            (C5966 * C3496 + C141478 * C3578 + C5967 * C10475 +
             C141341 * C10600) *
                C5865) *
               C141353 * C141499 -
           ((C6860 + C6861) * C5865 + (C6862 + C6863) * C5873 +
            (C6864 + C6865) * C5864 + (C6866 + C6867) * C5871 +
            (C5967 * C2964 + C141341 * C3030 + C5966 * C828 + C141478 * C917) *
                C5863 +
            (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                C5869) *
               C141353 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C29775 +
            (C29838 * C114 + C29770 * C195 + C29839 * C828 + C29771 * C917 +
             C29840 * C2964 + C29772 * C3030 + C29841 * C9670 +
             C29773 * C9771) *
                C141219) *
               C141353 * C4148 -
           ((C29841 * C26353 + C29773 * C26479 + C29840 * C10473 +
             C29772 * C10598 + C29839 * C3494 + C29771 * C3576 +
             C29838 * C1606 + C29770 * C1695) *
                C141219 +
            (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
             C29772 * C10595 + C29839 * C3490 + C29771 * C3572 +
             C29838 * C1601 + C29770 * C1690) *
                C29775) *
               C141353 * C141499) *
              C816 +
          (((C29838 * C3490 + C29770 * C3572 + C29839 * C10470 +
             C29771 * C10595 + C29840 * C26351 + C29772 * C26477 +
             C29841 * C32702 + C29773 * C32790) *
                C29775 +
            (C29838 * C3494 + C29770 * C3576 + C29839 * C10473 +
             C29771 * C10598 + C29840 * C26353 + C29772 * C26479 +
             C29841 * C32703 + C29773 * C32791) *
                C141219) *
               C141353 * C141499 -
           ((C29841 * C25570 + C29773 * C25664 + C29840 * C9670 +
             C29772 * C9771 + C29839 * C2964 + C29771 * C3030 + C29838 * C828 +
             C29770 * C917) *
                C141219 +
            (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
             C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
             C29770 * C912) *
                C29775) *
               C141353 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[124] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5869 +
             (C275 * C114 + C141353 * C282) * C5863 + C305 * C5871 +
             C306 * C5864 + C307 * C5873 + C308 * C5865) *
                C141478 +
            (C6994 + C6995 + C6970 + C6971 + C6972 + C6973) * C141341) *
               C4148 -
           ((C10706 + C10707 + C10708 + C10709 + C10716 + C10717) * C141341 +
            (C1806 * C5865 + C1807 * C5873 + C1808 * C5864 + C1809 * C5871 +
             (C275 * C1606 + C141353 * C1789) * C5863 +
             (C275 * C1601 + C141353 * C1784) * C5869) *
                C141478) *
               C141499) *
              C816 +
          (((C10717 + C10716 + C10709 + C10708 + C10707 + C10706) * C141478 +
            ((C275 * C10470 + C141353 * C10699) * C5869 +
             (C275 * C10473 + C141353 * C10702) * C5863 +
             (C275 * C10471 + C141353 * C10700) * C5871 +
             (C275 * C10474 + C141353 * C10703) * C5864 +
             (C275 * C10472 + C141353 * C10701) * C5873 +
             (C275 * C10475 + C141353 * C10704) * C5865) *
                C141341) *
               C141499 -
           ((C9855 + C9856 + C9857 + C9858 + C9865 + C9866) * C141341 +
            (C6973 + C6972 + C6971 + C6970 + C6995 + C6994) * C141478) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C29775 +
             (C275 * C114 + C141353 * C282) * C141219) *
                C29770 +
            (C30445 + C30446) * C29771 + C32295 * C29772 + C32296 * C29773) *
               C4148 -
           ((C32871 + C32872) * C29773 + (C32865 + C32866) * C29772 +
            (C32867 + C32868) * C29771 +
            ((C275 * C1606 + C141353 * C1789) * C141219 +
             (C275 * C1601 + C141353 * C1784) * C29775) *
                C29770) *
               C141499) *
              C816 +
          (((C32868 + C32867) * C29770 + (C32866 + C32865) * C29771 +
            (C32872 + C32871) * C29772 +
            ((C275 * C32702 + C141353 * C32858) * C29775 +
             (C275 * C32703 + C141353 * C32859) * C141219) *
                C29773) *
               C141499 -
           ((C32303 + C32304) * C29773 + (C30450 + C30449) * C29772 +
            (C30448 + C30447) * C29771 + (C30446 + C30445) * C29770) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[124] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                        C5864 * C115 + C5873 * C110 + C5865 * C116) *
                           C5966 +
                       (C5869 * C189 + C5863 * C362 + C5871 * C190 +
                        C5864 * C363 + C5873 * C191 + C5865 * C364) *
                           C141478 +
                       (C7118 + C7119 + C7120) * C5967 +
                       (C7121 + C7122 + C7123) * C141341) *
                          C141353 * C4148 -
                      ((C10831 + C10832 + C10833) * C141341 +
                       (C10834 + C10835 + C10836) * C5967 +
                       (C5873 * C1688 + C5865 * C1876 + C5871 * C1689 +
                        C5864 * C1877 + C5869 * C1690 + C5863 * C1878) *
                           C141478 +
                       (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 +
                        C5864 * C1605 + C5869 * C1601 + C5863 * C1606) *
                           C5966) *
                          C141353 * C141499) *
                         C816 +
                     (((C10836 + C10835 + C10834) * C5966 +
                       (C10833 + C10832 + C10831) * C141478 +
                       (C5869 * C10470 + C5863 * C10473 + C5871 * C10471 +
                        C5864 * C10474 + C5873 * C10472 + C5865 * C10475) *
                           C5967 +
                       (C5869 * C10595 + C5863 * C10815 + C5871 * C10596 +
                        C5864 * C10816 + C5873 * C10597 + C5865 * C10817) *
                           C141341) *
                          C141353 * C141499 -
                      ((C9956 + C9957 + C9958) * C141341 +
                       (C9959 + C9960 + C9961) * C5967 +
                       (C7123 + C7122 + C7121) * C141478 +
                       (C7120 + C7119 + C7118) * C5966) *
                          C141353 * C4148) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C29775 * C108 + C141219 * C114) * C29838 +
                       (C29775 * C189 + C141219 * C362) * C29770 +
                       C30547 * C29839 + C30548 * C29771 + C30549 * C29840 +
                       C30550 * C29772 + C30551 * C29841 + C30552 * C29773) *
                          C141353 * C4148 -
                      (C32952 * C29773 + C32953 * C29841 + C32954 * C29772 +
                       C32955 * C29840 + C32956 * C29771 + C32957 * C29839 +
                       (C29775 * C1690 + C141219 * C1878) * C29770 +
                       (C29775 * C1601 + C141219 * C1606) * C29838) *
                          C141353 * C141499) *
                         C816 +
                     ((C32957 * C29838 + C32956 * C29770 + C32955 * C29839 +
                       C32954 * C29771 + C32953 * C29840 + C32952 * C29772 +
                       (C29775 * C32702 + C141219 * C32703) * C29841 +
                       (C29775 * C32790 + C141219 * C32938) * C29773) *
                          C141353 * C141499 -
                      (C32360 * C29773 + C32361 * C29841 + C30552 * C29772 +
                       C30551 * C29840 + C30550 * C29771 + C30549 * C29839 +
                       C30548 * C29770 + C30547 * C29838) *
                          C141353 * C4148) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q));
    d2eeyy[124] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                        C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                           C5863 +
                       (C6265 + C6266) * C5864 + C6271 * C5865) *
                          C141353 * C4148 -
                      ((C8276 + C8277) * C5865 + (C8278 + C8279) * C5864 +
                       (C6229 * C3490 + C8264 + C8264 + C141341 * C3790 +
                        C6228 * C1601 + C8265 + C8265 + C141478 * C1949) *
                           C5863) *
                          C141353 * C141499) *
                         C816 +
                     (((C6228 * C3490 + C10938 + C10938 + C141478 * C3790 +
                        C6229 * C10470 + C10939 + C10939 + C141341 * C10934) *
                           C5863 +
                       (C6228 * C3491 + C10940 + C10940 + C141478 * C3791 +
                        C6229 * C10471 + C10941 + C10941 + C141341 * C10935) *
                           C5864 +
                       (C6228 * C3492 + C10942 + C10942 + C141478 * C3792 +
                        C6229 * C10472 + C10943 + C10943 + C141341 * C10936) *
                           C5865) *
                          C141353 * C141499 -
                      ((C7252 + C7253) * C5865 + (C7254 + C7255) * C5864 +
                       (C6229 * C2960 + C7240 + C7240 + C141341 * C3196 +
                        C6228 * C823 + C7241 + C7241 + C141478 * C1171) *
                           C5863) *
                          C141353 * C4148) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C29992 * C108 + C29997 + C29997 + C29770 * C419 +
                       C29993 * C823 + C29998 + C29998 + C29771 * C1171 +
                       C29994 * C2960 + C29999 + C29999 + C29772 * C3196 +
                       C29995 * C9667 + C30000 + C30000 + C29773 * C10035) *
                          C141219 * C141353 * C4148 -
                      (C29995 * C26351 + C31265 + C31265 + C29773 * C26819 +
                       C29994 * C10470 + C31266 + C31266 + C29772 * C10934 +
                       C29993 * C3490 + C31267 + C31267 + C29771 * C3790 +
                       C29992 * C1601 + C31268 + C31268 + C29770 * C1949) *
                          C141219 * C141353 * C141499) *
                         C816 +
                     ((C29992 * C3490 + C33025 + C33025 + C29770 * C3790 +
                       C29993 * C10470 + C33026 + C33026 + C29771 * C10934 +
                       C29994 * C26351 + C33027 + C33027 + C29772 * C26819 +
                       C29995 * C32702 + C33028 + C33028 + C29773 * C33023) *
                          C141219 * C141353 * C141499 -
                      (C29995 * C25568 + C30625 + C30625 + C29773 * C25921 +
                       C29994 * C9667 + C30626 + C30626 + C29772 * C10035 +
                       C29993 * C2960 + C30627 + C30627 + C29771 * C3196 +
                       C29992 * C823 + C30628 + C30628 + C29770 * C1171) *
                          C141219 * C141353 * C4148) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[124] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C275 * C108 + C141353 * C276) * C5966 +
             (C275 * C189 + C141353 * C501) * C141478 + C6988 * C5967 +
             C7366 * C141341) *
                C5863 +
            (C6346 + C6347 + C6348 + C6349) * C5864 + C6360 * C5865) *
               C4148 -
           ((C8390 + C8380 + C8381 + C8382) * C5865 +
            (C8391 + C8385 + C8386 + C8387) * C5864 +
            (C11047 * C141341 + C10715 * C5967 +
             (C275 * C1690 + C141353 * C2040) * C141478 +
             (C275 * C1601 + C141353 * C1784) * C5966) *
                C5863) *
               C141499) *
              C816 +
          (((C10715 * C5966 + C11047 * C141478 +
             (C275 * C10470 + C141353 * C10699) * C5967 +
             (C275 * C10595 + C141353 * C11041) * C141341) *
                C5863 +
            (C8055 * C5966 + C8389 * C141478 +
             (C275 * C10471 + C141353 * C10700) * C5967 +
             (C275 * C10596 + C141353 * C11042) * C141341) *
                C5864 +
            (C8053 * C5966 + C8388 * C141478 +
             (C275 * C10472 + C141353 * C10701) * C5967 +
             (C275 * C10597 + C141353 * C11043) * C141341) *
                C5865) *
               C141499 -
           ((C7369 + C7358 + C7359 + C7360) * C5865 +
            (C7370 + C7363 + C7364 + C7365) * C5864 +
            (C10124 * C141341 + C9864 * C5967 + C7366 * C141478 +
             C6988 * C5966) *
                C5863) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C29838 +
            (C275 * C189 + C141353 * C501) * C29770 + C6988 * C29839 +
            C7366 * C29771 + C9864 * C29840 + C10124 * C29772 +
            C25754 * C29841 + C26008 * C29773) *
               C141219 * C4148 -
           (C33098 * C29773 + C32870 * C29841 + C26930 * C29772 +
            C26595 * C29840 + C11047 * C29771 + C10715 * C29839 +
            (C275 * C1690 + C141353 * C2040) * C29770 +
            (C275 * C1601 + C141353 * C1784) * C29838) *
               C141219 * C141499) *
              C816 +
          ((C10715 * C29838 + C11047 * C29770 + C26595 * C29839 +
            C26930 * C29771 + C32870 * C29840 + C33098 * C29772 +
            (C275 * C32702 + C141353 * C32858) * C29841 +
            (C275 * C32790 + C141353 * C33094) * C29773) *
               C141219 * C141499 -
           (C32470 * C29773 + C32302 * C29841 + C26008 * C29772 +
            C25754 * C29840 + C10124 * C29771 + C9864 * C29839 +
            C7366 * C29770 + C6988 * C29838) *
               C141219 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezx[124] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C275 +
             (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
              C5873 * C278 + C5865 * C581) *
                 C141353) *
                C141478 +
            ((C7118 + C7119 + C7120) * C275 +
             (C7481 + C7482 + C7483) * C141353) *
                C141341) *
               C4148 -
           (((C11155 + C11156 + C11157) * C141353 +
             (C10834 + C10835 + C10836) * C275) *
                C141341 +
            ((C5873 * C1782 + C5865 * C2124 + C5871 * C1783 + C5864 * C2125 +
              C5869 * C1784 + C5863 * C2126) *
                 C141353 +
             (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 + C5864 * C1605 +
              C5869 * C1601 + C5863 * C1606) *
                 C275) *
                C141478) *
               C141499) *
              C816 +
          ((((C10836 + C10835 + C10834) * C275 +
             (C11157 + C11156 + C11155) * C141353) *
                C141478 +
            ((C5869 * C10470 + C5863 * C10473 + C5871 * C10471 +
              C5864 * C10474 + C5873 * C10472 + C5865 * C10475) *
                 C275 +
             (C5869 * C10699 + C5863 * C11145 + C5871 * C10700 +
              C5864 * C11146 + C5873 * C10701 + C5865 * C11147) *
                 C141353) *
                C141341) *
               C141499 -
           (((C10208 + C10209 + C10210) * C141353 +
             (C9959 + C9960 + C9961) * C275) *
                C141341 +
            ((C7483 + C7482 + C7481) * C141353 +
             (C7120 + C7119 + C7118) * C275) *
                C141478) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C275 +
             (C29775 * C276 + C141219 * C579) * C141353) *
                C29770 +
            (C30765 + C30789) * C29771 + C32522 * C29772 + C32523 * C29773) *
               C4148 -
           ((C33178 + C33168) * C29773 + (C33179 + C33171) * C29772 +
            (C33180 + C33174) * C29771 +
            ((C29775 * C1784 + C141219 * C2126) * C141353 +
             (C29775 * C1601 + C141219 * C1606) * C275) *
                C29770) *
               C141499) *
              C816 +
          (((C33174 + C33180) * C29770 + (C33171 + C33179) * C29771 +
            (C33168 + C33178) * C29772 +
            ((C29775 * C32702 + C141219 * C32703) * C275 +
             (C29775 * C32858 + C141219 * C33164) * C141353) *
                C29773) *
               C141499 -
           ((C32528 + C32526) * C29773 + (C30791 + C30771) * C29772 +
            (C30790 + C30768) * C29771 + (C30789 + C30765) * C29770) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[124] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                 C275 +
             (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                 C141353) *
                C5863 +
            ((C5993 + C5994) * C275 + (C6522 + C6523) * C141353) * C5864 +
            C6530 * C5865) *
               C4148 -
           (((C8596 + C8597) * C141353 + (C7940 + C7941) * C275) * C5865 +
            ((C8598 + C8599) * C141353 + (C7944 + C7945) * C275) * C5864 +
            ((C5967 * C3646 + C141341 * C4004 + C5966 * C1784 +
              C141478 * C2197) *
                 C141353 +
             (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 +
              C141478 * C1690) *
                 C275) *
                C5863) *
               C141499) *
              C816 +
          ((((C5966 * C3490 + C141478 * C3572 + C5967 * C10470 +
              C141341 * C10595) *
                 C275 +
             (C5966 * C3646 + C141478 * C4004 + C5967 * C10699 +
              C141341 * C11255) *
                 C141353) *
                C5863 +
            ((C5966 * C3491 + C141478 * C3573 + C5967 * C10471 +
              C141341 * C10596) *
                 C275 +
             (C5966 * C3647 + C141478 * C4005 + C5967 * C10700 +
              C141341 * C11256) *
                 C141353) *
                C5864 +
            ((C5966 * C3492 + C141478 * C3574 + C5967 * C10472 +
              C141341 * C10597) *
                 C275 +
             (C5966 * C3648 + C141478 * C4006 + C5967 * C10701 +
              C141341 * C11257) *
                 C141353) *
                C5865) *
               C141499 -
           (((C7593 + C7594) * C141353 + (C6862 + C6863) * C275) * C5865 +
            ((C7595 + C7596) * C141353 + (C6866 + C6867) * C275) * C5864 +
            ((C5967 * C3084 + C141341 * C3362 + C5966 * C1006 +
              C141478 * C1419) *
                 C141353 +
             (C5967 * C2960 + C141341 * C3026 + C5966 * C823 + C141478 * C912) *
                 C275) *
                C5863) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
             C29840 * C2960 + C29772 * C3026 + C29841 * C9667 +
             C29773 * C9768) *
                C275 +
            (C29838 * C276 + C29770 * C635 + C29839 * C1006 + C29771 * C1419 +
             C29840 * C3084 + C29772 * C3362 + C29841 * C9848 +
             C29773 * C10284) *
                C141353) *
               C141219 * C4148 -
           ((C29841 * C26579 + C29773 * C27140 + C29840 * C10699 +
             C29772 * C11255 + C29839 * C3646 + C29771 * C4004 +
             C29838 * C1784 + C29770 * C2197) *
                C141353 +
            (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
             C29772 * C10595 + C29839 * C3490 + C29771 * C3572 +
             C29838 * C1601 + C29770 * C1690) *
                C275) *
               C141219 * C141499) *
              C816 +
          (((C29838 * C3490 + C29770 * C3572 + C29839 * C10470 +
             C29771 * C10595 + C29840 * C26351 + C29772 * C26477 +
             C29841 * C32702 + C29773 * C32790) *
                C275 +
            (C29838 * C3646 + C29770 * C4004 + C29839 * C10699 +
             C29771 * C11255 + C29840 * C26579 + C29772 * C27140 +
             C29841 * C32858 + C29773 * C33246) *
                C141353) *
               C141219 * C141499 -
           ((C29841 * C25740 + C29773 * C26168 + C29840 * C9848 +
             C29772 * C10284 + C29839 * C3084 + C29771 * C3362 +
             C29838 * C1006 + C29770 * C1419) *
                C141353 +
            (C29841 * C25568 + C29773 * C25662 + C29840 * C9667 +
             C29772 * C9768 + C29839 * C2960 + C29771 * C3026 + C29838 * C823 +
             C29770 * C912) *
                C275) *
               C141219 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[124] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C713 * C108 + C721 + C721 + C141353 * C714) * C141478 +
             C7709 * C141341) *
                C5863 +
            (C6605 + C6606) * C5864 + C6611 * C5865) *
               C4148 -
           ((C8710 + C8700) * C5865 + (C8711 + C8703) * C5864 +
            (C11367 * C141341 +
             (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141478) *
                C5863) *
               C141499) *
              C816 +
          (((C11367 * C141478 +
             (C713 * C10470 + C11362 + C11362 + C141353 * C11356) * C141341) *
                C5863 +
            (C8709 * C141478 +
             (C713 * C10471 + C11363 + C11363 + C141353 * C11357) * C141341) *
                C5864 +
            (C8708 * C141478 +
             (C713 * C10472 + C11364 + C11364 + C141353 * C11358) * C141341) *
                C5865) *
               C141499 -
           ((C7712 + C7699) * C5865 + (C7713 + C7702) * C5864 +
            (C10372 * C141341 + C7709 * C141478) * C5863) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C29770 +
            C7709 * C29771 + C10372 * C29772 + C26253 * C29773) *
               C141219 * C4148 -
           (C33320 * C29773 + C27249 * C29772 + C11367 * C29771 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C29770) *
               C141219 * C141499) *
              C816 +
          ((C11367 * C29770 + C27249 * C29771 + C33320 * C29772 +
            (C713 * C32702 + C33317 + C33317 + C141353 * C33313) * C29773) *
               C141219 * C141499 -
           (C32636 * C29773 + C26253 * C29772 + C10372 * C29771 +
            C7709 * C29770) *
               C141219 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexx[125] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C5868 * C108 + C5875 + C5875 + C5863 * C120 +
                       C5870 * C109 + C5876 + C5876 + C5864 * C121 +
                       C5872 * C110 + C5877 + C5877 + C5865 * C122) *
                          C141353 * C141478 +
                      (C6740 + C6741 + C6742) * C141353 * C141341) *
                         C5322 -
                     ((C10495 + C10496 + C10497) * C141353 * C141341 +
                      (C5872 * C1599 + C7815 + C7815 + C5865 * C1609 +
                       C5870 * C1600 + C7816 + C7816 + C5864 * C1610 +
                       C5868 * C1601 + C7817 + C7817 + C5863 * C1611) *
                          C141353 * C141478) *
                         C5323 +
                     ((C5868 * C5325 + C13215 + C13215 + C5863 * C5333 +
                       C5870 * C5326 + C13216 + C13216 + C5864 * C5334 +
                       C5872 * C5327 + C13217 + C13217 + C5865 * C5335) *
                          C141353 * C141478 +
                      (C5868 * C13205 + C13218 + C13218 + C5863 * C13211 +
                       C5870 * C13206 + C13219 + C13219 + C5864 * C13212 +
                       C5872 * C13207 + C13220 + C13220 + C5865 * C13213) *
                          C141353 * C141341) *
                         C5324) *
                    C141281 * C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C29774 * C108 + C29777 + C29777 + C141219 * C120) *
                          C141353 * C29770 +
                      C30307 * C29771 + C30308 * C29772 + C30309 * C29773) *
                         C5322 -
                     (C32722 * C29773 + C32723 * C29772 + C32724 * C29771 +
                      (C29774 * C1601 + C30996 + C30996 + C141219 * C1611) *
                          C141353 * C29770) *
                         C5323 +
                     ((C29774 * C5325 + C34562 + C34562 + C141219 * C5333) *
                          C141353 * C29770 +
                      (C29774 * C13205 + C34563 + C34563 + C141219 * C13211) *
                          C141353 * C29771 +
                      (C29774 * C29087 + C34564 + C34564 + C141219 * C29091) *
                          C141353 * C29772 +
                      (C29774 * C34558 + C34565 + C34565 + C141219 * C34560) *
                          C141353 * C29773) *
                         C5324) *
                    C141281 * C141247) /
                       (p * q * std::sqrt(p + q));
    d2eexy[125] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
               C5869 +
           (C5966 * C114 + C141478 * C195 + C5967 * C828 + C141341 * C917) *
               C5863 +
           (C5993 + C5994) * C5871 + (C5995 + C5996) * C5864 + C6005 * C5873 +
           C6006 * C5865) *
              C141353 * C5322 -
          ((C7938 + C7939) * C5865 + (C7940 + C7941) * C5873 +
           (C7942 + C7943) * C5864 + (C7944 + C7945) * C5871 +
           (C5967 * C3494 + C141341 * C3576 + C5966 * C1606 + C141478 * C1695) *
               C5863 +
           (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 + C141478 * C1690) *
               C5869) *
              C141353 * C5323 +
          ((C5966 * C5325 + C141478 * C5391 + C5967 * C13205 +
            C141341 * C13294) *
               C5869 +
           (C5966 * C5329 + C141478 * C5395 + C5967 * C13208 +
            C141341 * C13297) *
               C5863 +
           (C5966 * C5326 + C141478 * C5392 + C5967 * C13206 +
            C141341 * C13295) *
               C5871 +
           (C5966 * C5330 + C141478 * C5396 + C5967 * C13209 +
            C141341 * C13298) *
               C5864 +
           (C5966 * C5327 + C141478 * C5393 + C5967 * C13207 +
            C141341 * C13296) *
               C5873 +
           (C5966 * C5331 + C141478 * C5397 + C5967 * C13210 +
            C141341 * C13299) *
               C5865) *
              C141353 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
            C29840 * C2960 + C29772 * C3026 + C29841 * C9667 + C29773 * C9768) *
               C29775 +
           (C29838 * C114 + C29770 * C195 + C29839 * C828 + C29771 * C917 +
            C29840 * C2964 + C29772 * C3030 + C29841 * C9670 + C29773 * C9771) *
               C141219) *
              C141353 * C5322 -
          ((C29841 * C26353 + C29773 * C26479 + C29840 * C10473 +
            C29772 * C10598 + C29839 * C3494 + C29771 * C3576 + C29838 * C1606 +
            C29770 * C1695) *
               C141219 +
           (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
            C29772 * C10595 + C29839 * C3490 + C29771 * C3572 + C29838 * C1601 +
            C29770 * C1690) *
               C29775) *
              C141353 * C5323 +
          ((C29838 * C5325 + C29770 * C5391 + C29839 * C13205 +
            C29771 * C13294 + C29840 * C29087 + C29772 * C29173 +
            C29841 * C34558 + C29773 * C34615) *
               C29775 +
           (C29838 * C5329 + C29770 * C5395 + C29839 * C13208 +
            C29771 * C13297 + C29840 * C29089 + C29772 * C29175 +
            C29841 * C34559 + C29773 * C34616) *
               C141219) *
              C141353 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[125] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C5869 +
            (C275 * C114 + C141353 * C282) * C5863 + C305 * C5871 +
            C306 * C5864 + C307 * C5873 + C308 * C5865) *
               C141478 +
           (C6994 + C6995 + C6970 + C6971 + C6972 + C6973) * C141341) *
              C5322 -
          ((C10706 + C10707 + C10708 + C10709 + C10716 + C10717) * C141341 +
           (C1806 * C5865 + C1807 * C5873 + C1808 * C5864 + C1809 * C5871 +
            (C275 * C1606 + C141353 * C1789) * C5863 +
            (C275 * C1601 + C141353 * C1784) * C5869) *
               C141478) *
              C5323 +
          (((C275 * C5325 + C141353 * C5449) * C5869 +
            (C275 * C5329 + C141353 * C5453) * C5863 +
            (C275 * C5326 + C141353 * C5450) * C5871 +
            (C275 * C5330 + C141353 * C5454) * C5864 +
            (C275 * C5327 + C141353 * C5451) * C5873 +
            (C275 * C5331 + C141353 * C5455) * C5865) *
               C141478 +
           ((C275 * C13205 + C141353 * C13374) * C5869 +
            (C275 * C13208 + C141353 * C13377) * C5863 +
            (C275 * C13206 + C141353 * C13375) * C5871 +
            (C275 * C13209 + C141353 * C13378) * C5864 +
            (C275 * C13207 + C141353 * C13376) * C5873 +
            (C275 * C13210 + C141353 * C13379) * C5865) *
               C141341) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C275 * C108 + C141353 * C276) * C29775 +
            (C275 * C114 + C141353 * C282) * C141219) *
               C29770 +
           (C30445 + C30446) * C29771 + C32295 * C29772 + C32296 * C29773) *
              C5322 -
          ((C32871 + C32872) * C29773 + (C32865 + C32866) * C29772 +
           (C32867 + C32868) * C29771 +
           ((C275 * C1606 + C141353 * C1789) * C141219 +
            (C275 * C1601 + C141353 * C1784) * C29775) *
               C29770) *
              C5323 +
          (((C275 * C5325 + C141353 * C5449) * C29775 +
            (C275 * C5329 + C141353 * C5453) * C141219) *
               C29770 +
           ((C275 * C13205 + C141353 * C13374) * C29775 +
            (C275 * C13208 + C141353 * C13377) * C141219) *
               C29771 +
           ((C275 * C29087 + C141353 * C29251) * C29775 +
            (C275 * C29089 + C141353 * C29253) * C141219) *
               C29772 +
           ((C275 * C34558 + C141353 * C34667) * C29775 +
            (C275 * C34559 + C141353 * C34668) * C141219) *
               C29773) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[125] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                       C5864 * C115 + C5873 * C110 + C5865 * C116) *
                          C5966 +
                      (C5869 * C189 + C5863 * C362 + C5871 * C190 +
                       C5864 * C363 + C5873 * C191 + C5865 * C364) *
                          C141478 +
                      (C7118 + C7119 + C7120) * C5967 +
                      (C7121 + C7122 + C7123) * C141341) *
                         C141353 * C5322 -
                     ((C10831 + C10832 + C10833) * C141341 +
                      (C10834 + C10835 + C10836) * C5967 +
                      (C5873 * C1688 + C5865 * C1876 + C5871 * C1689 +
                       C5864 * C1877 + C5869 * C1690 + C5863 * C1878) *
                          C141478 +
                      (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 +
                       C5864 * C1605 + C5869 * C1601 + C5863 * C1606) *
                          C5966) *
                         C141353 * C5323 +
                     ((C5869 * C5325 + C5863 * C5329 + C5871 * C5326 +
                       C5864 * C5330 + C5873 * C5327 + C5865 * C5331) *
                          C5966 +
                      (C5869 * C5391 + C5863 * C5507 + C5871 * C5392 +
                       C5864 * C5508 + C5873 * C5393 + C5865 * C5509) *
                          C141478 +
                      (C5869 * C13205 + C5863 * C13208 + C5871 * C13206 +
                       C5864 * C13209 + C5873 * C13207 + C5865 * C13210) *
                          C5967 +
                      (C5869 * C13294 + C5863 * C13454 + C5871 * C13295 +
                       C5864 * C13455 + C5873 * C13296 + C5865 * C13456) *
                          C141341) *
                         C141353 * C5324) *
                    C141281 * C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C29775 * C108 + C141219 * C114) * C29838 +
                      (C29775 * C189 + C141219 * C362) * C29770 +
                      C30547 * C29839 + C30548 * C29771 + C30549 * C29840 +
                      C30550 * C29772 + C30551 * C29841 + C30552 * C29773) *
                         C141353 * C5322 -
                     (C32952 * C29773 + C32953 * C29841 + C32954 * C29772 +
                      C32955 * C29840 + C32956 * C29771 + C32957 * C29839 +
                      (C29775 * C1690 + C141219 * C1878) * C29770 +
                      (C29775 * C1601 + C141219 * C1606) * C29838) *
                         C141353 * C5323 +
                     ((C29775 * C5325 + C141219 * C5329) * C29838 +
                      (C29775 * C5391 + C141219 * C5507) * C29770 +
                      (C29775 * C13205 + C141219 * C13208) * C29839 +
                      (C29775 * C13294 + C141219 * C13454) * C29771 +
                      (C29775 * C29087 + C141219 * C29089) * C29840 +
                      (C29775 * C29173 + C141219 * C29329) * C29772 +
                      (C29775 * C34558 + C141219 * C34559) * C29841 +
                      (C29775 * C34615 + C141219 * C34719) * C29773) *
                         C141353 * C5324) *
                    C141281 * C141247) /
                       (p * q * std::sqrt(p + q));
    d2eeyy[125] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C6228 * C108 + C6231 + C6231 + C141478 * C419 +
                       C6229 * C823 + C6232 + C6232 + C141341 * C1171) *
                          C5863 +
                      (C6265 + C6266) * C5864 + C6271 * C5865) *
                         C141353 * C5322 -
                     ((C8276 + C8277) * C5865 + (C8278 + C8279) * C5864 +
                      (C6229 * C3490 + C8264 + C8264 + C141341 * C3790 +
                       C6228 * C1601 + C8265 + C8265 + C141478 * C1949) *
                          C5863) *
                         C141353 * C5323 +
                     ((C6228 * C5325 + C13535 + C13535 + C141478 * C5561 +
                       C6229 * C13205 + C13536 + C13536 + C141341 * C13531) *
                          C5863 +
                      (C6228 * C5326 + C13537 + C13537 + C141478 * C5562 +
                       C6229 * C13206 + C13538 + C13538 + C141341 * C13532) *
                          C5864 +
                      (C6228 * C5327 + C13539 + C13539 + C141478 * C5563 +
                       C6229 * C13207 + C13540 + C13540 + C141341 * C13533) *
                          C5865) *
                         C141353 * C5324) *
                    C141281 * C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((C29992 * C108 + C29997 + C29997 + C29770 * C419 +
                      C29993 * C823 + C29998 + C29998 + C29771 * C1171 +
                      C29994 * C2960 + C29999 + C29999 + C29772 * C3196 +
                      C29995 * C9667 + C30000 + C30000 + C29773 * C10035) *
                         C141219 * C141353 * C5322 -
                     (C29995 * C26351 + C31265 + C31265 + C29773 * C26819 +
                      C29994 * C10470 + C31266 + C31266 + C29772 * C10934 +
                      C29993 * C3490 + C31267 + C31267 + C29771 * C3790 +
                      C29992 * C1601 + C31268 + C31268 + C29770 * C1949) *
                         C141219 * C141353 * C5323 +
                     (C29992 * C5325 + C34772 + C34772 + C29770 * C5561 +
                      C29993 * C13205 + C34773 + C34773 + C29771 * C13531 +
                      C29994 * C29087 + C34774 + C34774 + C29772 * C29405 +
                      C29995 * C34558 + C34775 + C34775 + C29773 * C34770) *
                         C141219 * C141353 * C5324) *
                    C141281 * C141247) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[125] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C275 * C108 + C141353 * C276) * C5966 +
                       (C275 * C189 + C141353 * C501) * C141478 +
                       C6988 * C5967 + C7366 * C141341) *
                          C5863 +
                      (C6346 + C6347 + C6348 + C6349) * C5864 + C6360 * C5865) *
                         C5322 -
                     ((C8390 + C8380 + C8381 + C8382) * C5865 +
                      (C8391 + C8385 + C8386 + C8387) * C5864 +
                      (C11047 * C141341 + C10715 * C5967 +
                       (C275 * C1690 + C141353 * C2040) * C141478 +
                       (C275 * C1601 + C141353 * C1784) * C5966) *
                          C5863) *
                         C5323 +
                     (((C275 * C5325 + C141353 * C5449) * C5966 +
                       (C275 * C5391 + C141353 * C5619) * C141478 +
                       (C275 * C13205 + C141353 * C13374) * C5967 +
                       (C275 * C13294 + C141353 * C13614) * C141341) *
                          C5863 +
                      ((C275 * C5326 + C141353 * C5450) * C5966 +
                       (C275 * C5392 + C141353 * C5620) * C141478 +
                       (C275 * C13206 + C141353 * C13375) * C5967 +
                       (C275 * C13295 + C141353 * C13615) * C141341) *
                          C5864 +
                      ((C275 * C5327 + C141353 * C5451) * C5966 +
                       (C275 * C5393 + C141353 * C5621) * C141478 +
                       (C275 * C13207 + C141353 * C13376) * C5967 +
                       (C275 * C13296 + C141353 * C13616) * C141341) *
                          C5865) *
                         C5324) *
                    C141281 * C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C275 * C108 + C141353 * C276) * C29838 +
                      (C275 * C189 + C141353 * C501) * C29770 + C6988 * C29839 +
                      C7366 * C29771 + C9864 * C29840 + C10124 * C29772 +
                      C25754 * C29841 + C26008 * C29773) *
                         C141219 * C5322 -
                     (C33098 * C29773 + C32870 * C29841 + C26930 * C29772 +
                      C26595 * C29840 + C11047 * C29771 + C10715 * C29839 +
                      (C275 * C1690 + C141353 * C2040) * C29770 +
                      (C275 * C1601 + C141353 * C1784) * C29838) *
                         C141219 * C5323 +
                     ((C275 * C5325 + C141353 * C5449) * C29838 +
                      (C275 * C5391 + C141353 * C5619) * C29770 +
                      (C275 * C13205 + C141353 * C13374) * C29839 +
                      (C275 * C13294 + C141353 * C13614) * C29771 +
                      (C275 * C29087 + C141353 * C29251) * C29840 +
                      (C275 * C29173 + C141353 * C29487) * C29772 +
                      (C275 * C34558 + C141353 * C34667) * C29841 +
                      (C275 * C34615 + C141353 * C34825) * C29773) *
                         C141219 * C5324) *
                    C141281 * C141247) /
                       (p * q * std::sqrt(p + q));
    d2eezx[125] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
             C5873 * C110 + C5865 * C116) *
                C275 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
             C5873 * C278 + C5865 * C581) *
                C141353) *
               C141478 +
           ((C7118 + C7119 + C7120) * C275 +
            (C7481 + C7482 + C7483) * C141353) *
               C141341) *
              C5322 -
          (((C11155 + C11156 + C11157) * C141353 +
            (C10834 + C10835 + C10836) * C275) *
               C141341 +
           ((C5873 * C1782 + C5865 * C2124 + C5871 * C1783 + C5864 * C2125 +
             C5869 * C1784 + C5863 * C2126) *
                C141353 +
            (C5873 * C1599 + C5865 * C1604 + C5871 * C1600 + C5864 * C1605 +
             C5869 * C1601 + C5863 * C1606) *
                C275) *
               C141478) *
              C5323 +
          (((C5869 * C5325 + C5863 * C5329 + C5871 * C5326 + C5864 * C5330 +
             C5873 * C5327 + C5865 * C5331) *
                C275 +
            (C5869 * C5449 + C5863 * C5673 + C5871 * C5450 + C5864 * C5674 +
             C5873 * C5451 + C5865 * C5675) *
                C141353) *
               C141478 +
           ((C5869 * C13205 + C5863 * C13208 + C5871 * C13206 + C5864 * C13209 +
             C5873 * C13207 + C5865 * C13210) *
                C275 +
            (C5869 * C13374 + C5863 * C13691 + C5871 * C13375 + C5864 * C13692 +
             C5873 * C13376 + C5865 * C13693) *
                C141353) *
               C141341) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C275 +
            (C29775 * C276 + C141219 * C579) * C141353) *
               C29770 +
           (C30765 + C30789) * C29771 + C32522 * C29772 + C32523 * C29773) *
              C5322 -
          ((C33178 + C33168) * C29773 + (C33179 + C33171) * C29772 +
           (C33180 + C33174) * C29771 +
           ((C29775 * C1784 + C141219 * C2126) * C141353 +
            (C29775 * C1601 + C141219 * C1606) * C275) *
               C29770) *
              C5323 +
          (((C29775 * C5325 + C141219 * C5329) * C275 +
            (C29775 * C5449 + C141219 * C5673) * C141353) *
               C29770 +
           ((C29775 * C13205 + C141219 * C13208) * C275 +
            (C29775 * C13374 + C141219 * C13691) * C141353) *
               C29771 +
           ((C29775 * C29087 + C141219 * C29089) * C275 +
            (C29775 * C29251 + C141219 * C29563) * C141353) *
               C29772 +
           ((C29775 * C34558 + C141219 * C34559) * C275 +
            (C29775 * C34667 + C141219 * C34876) * C141353) *
               C29773) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[125] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5966 * C108 + C141478 * C189 + C5967 * C823 + C141341 * C912) *
                C275 +
            (C5966 * C276 + C141478 * C635 + C5967 * C1006 + C141341 * C1419) *
                C141353) *
               C5863 +
           ((C5993 + C5994) * C275 + (C6522 + C6523) * C141353) * C5864 +
           C6530 * C5865) *
              C5322 -
          (((C8596 + C8597) * C141353 + (C7940 + C7941) * C275) * C5865 +
           ((C8598 + C8599) * C141353 + (C7944 + C7945) * C275) * C5864 +
           ((C5967 * C3646 + C141341 * C4004 + C5966 * C1784 +
             C141478 * C2197) *
                C141353 +
            (C5967 * C3490 + C141341 * C3572 + C5966 * C1601 +
             C141478 * C1690) *
                C275) *
               C5863) *
              C5323 +
          (((C5966 * C5325 + C141478 * C5391 + C5967 * C13205 +
             C141341 * C13294) *
                C275 +
            (C5966 * C5449 + C141478 * C5727 + C5967 * C13374 +
             C141341 * C13768) *
                C141353) *
               C5863 +
           ((C5966 * C5326 + C141478 * C5392 + C5967 * C13206 +
             C141341 * C13295) *
                C275 +
            (C5966 * C5450 + C141478 * C5728 + C5967 * C13375 +
             C141341 * C13769) *
                C141353) *
               C5864 +
           ((C5966 * C5327 + C141478 * C5393 + C5967 * C13207 +
             C141341 * C13296) *
                C275 +
            (C5966 * C5451 + C141478 * C5729 + C5967 * C13376 +
             C141341 * C13770) *
                C141353) *
               C5865) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C29838 * C108 + C29770 * C189 + C29839 * C823 + C29771 * C912 +
            C29840 * C2960 + C29772 * C3026 + C29841 * C9667 + C29773 * C9768) *
               C275 +
           (C29838 * C276 + C29770 * C635 + C29839 * C1006 + C29771 * C1419 +
            C29840 * C3084 + C29772 * C3362 + C29841 * C9848 +
            C29773 * C10284) *
               C141353) *
              C141219 * C5322 -
          ((C29841 * C26579 + C29773 * C27140 + C29840 * C10699 +
            C29772 * C11255 + C29839 * C3646 + C29771 * C4004 + C29838 * C1784 +
            C29770 * C2197) *
               C141353 +
           (C29841 * C26351 + C29773 * C26477 + C29840 * C10470 +
            C29772 * C10595 + C29839 * C3490 + C29771 * C3572 + C29838 * C1601 +
            C29770 * C1690) *
               C275) *
              C141219 * C5323 +
          ((C29838 * C5325 + C29770 * C5391 + C29839 * C13205 +
            C29771 * C13294 + C29840 * C29087 + C29772 * C29173 +
            C29841 * C34558 + C29773 * C34615) *
               C275 +
           (C29838 * C5449 + C29770 * C5727 + C29839 * C13374 +
            C29771 * C13768 + C29840 * C29251 + C29772 * C29639 +
            C29841 * C34667 + C29773 * C34927) *
               C141353) *
              C141219 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[125] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C713 * C108 + C721 + C721 + C141353 * C714) * C141478 +
            C7709 * C141341) *
               C5863 +
           (C6605 + C6606) * C5864 + C6611 * C5865) *
              C5322 -
          ((C8710 + C8700) * C5865 + (C8711 + C8703) * C5864 +
           (C11367 * C141341 +
            (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C141478) *
               C5863) *
              C5323 +
          (((C713 * C5325 + C5786 + C5786 + C141353 * C5781) * C141478 +
            (C713 * C13205 + C13849 + C13849 + C141353 * C13845) * C141341) *
               C5863 +
           ((C713 * C5326 + C5787 + C5787 + C141353 * C5782) * C141478 +
            (C713 * C13206 + C13850 + C13850 + C141353 * C13846) * C141341) *
               C5864 +
           ((C713 * C5327 + C5788 + C5788 + C141353 * C5783) * C141478 +
            (C713 * C13207 + C13851 + C13851 + C141353 * C13847) * C141341) *
               C5865) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C713 * C108 + C721 + C721 + C141353 * C714) * C29770 +
           C7709 * C29771 + C10372 * C29772 + C26253 * C29773) *
              C141219 * C5322 -
          (C33320 * C29773 + C27249 * C29772 + C11367 * C29771 +
           (C713 * C1601 + C2295 + C2295 + C141353 * C2283) * C29770) *
              C141219 * C5323 +
          ((C713 * C5325 + C5786 + C5786 + C141353 * C5781) * C29770 +
           (C713 * C13205 + C13849 + C13849 + C141353 * C13845) * C29771 +
           (C713 * C29087 + C29718 + C29718 + C141353 * C29715) * C29772 +
           (C713 * C34558 + C34980 + C34980 + C141353 * C34978) * C29773) *
              C141219 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eexx[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 + C5876 +
            C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
            C5865 * C122) *
               C141479 +
           (C5868 * C1601 + C7817 + C7817 + C5863 * C1611 + C5870 * C1600 +
            C7816 + C7816 + C5864 * C1610 + C5872 * C1599 + C7815 + C7815 +
            C5865 * C1609) *
               C141365) *
              C141327 * C141298 * C141281 * C97 -
          ((C5872 * C1598 + C7820 + C7820 + C5865 * C1608 + C5870 * C1599 +
            C7819 + C7819 + C5864 * C1609 + C5868 * C1600 + C7818 + C7818 +
            C5863 * C1610) *
               C141365 +
           (C5872 * C111 + C5884 + C5884 + C5865 * C123 + C5870 * C110 + C5885 +
            C5885 + C5864 * C122 + C5868 * C109 + C5886 + C5886 +
            C5863 * C121) *
               C141479) *
              C141327 * C141298 * C141281 * C98 +
          ((C5868 * C110 + C5887 + C5887 + C5863 * C122 + C5870 * C111 + C5888 +
            C5888 + C5864 * C123 + C5872 * C112 + C5889 + C5889 +
            C5865 * C124) *
               C141479 +
           (C5868 * C1599 + C13928 + C13928 + C5863 * C1609 + C5870 * C1598 +
            C13929 + C13929 + C5864 * C1608 + C5872 * C1602 + C13930 + C13930 +
            C5865 * C1612) *
               C141365) *
              C141327 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141479 +
            (C29774 * C1601 + C30996 + C30996 + C141219 * C1611) * C141365) *
               C21819 +
           (C30301 * C141479 + C32721 * C141365) * C21820 +
           (C30302 * C141479 + C32720 * C141365) * C21821) *
              C141298 * C141281 * C97 -
          (((C29774 * C10471 + C30999 + C30999 + C141219 * C10477) * C141365 +
            C30305 * C141479) *
               C21821 +
           ((C29774 * C3491 + C30998 + C30998 + C141219 * C3499) * C141365 +
            C30304 * C141479) *
               C21820 +
           ((C29774 * C1600 + C30997 + C30997 + C141219 * C1610) * C141365 +
            (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141479) *
               C21819) *
              C141298 * C141281 * C98 +
          (((C29774 * C110 + C29785 + C29785 + C141219 * C122) * C141479 +
            (C29774 * C1599 + C35055 + C35055 + C141219 * C1609) * C141365) *
               C21819 +
           ((C29774 * C821 + C29786 + C29786 + C141219 * C831) * C141479 +
            (C29774 * C3492 + C35056 + C35056 + C141219 * C3500) * C141365) *
               C21820 +
           ((C29774 * C2962 + C29787 + C29787 + C141219 * C2970) * C141479 +
            (C29774 * C10472 + C35057 + C35057 + C141219 * C10478) * C141365) *
               C21821) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexy[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C5869 +
            (C188 * C114 + C141327 * C195) * C5863 + C218 * C5871 +
            C219 * C5864 + C220 * C5873 + C221 * C5865) *
               C141479 +
           ((C188 * C1601 + C141327 * C1690) * C5869 +
            (C188 * C1606 + C141327 * C1695) * C5863 + C1715 * C5871 +
            C1714 * C5864 + C1713 * C5873 + C1712 * C5865) *
               C141365) *
              C141298 * C141281 * C97 -
          ((C1710 * C5865 + C1711 * C5873 + C1712 * C5864 + C1713 * C5871 +
            C1714 * C5863 + C1715 * C5869) *
               C141365 +
           (C223 * C5865 + C222 * C5873 + C221 * C5864 + C220 * C5871 +
            C219 * C5863 + C218 * C5869) *
               C141479) *
              C141298 * C141281 * C98 +
          ((C220 * C5869 + C221 * C5863 + C222 * C5871 + C223 * C5864 +
            C225 * C5873 + C224 * C5865) *
               C141479 +
           (C1713 * C5869 + C1712 * C5863 + C1711 * C5871 + C1710 * C5864 +
            (C188 * C1602 + C141327 * C1691) * C5873 +
            (C188 * C1607 + C141327 * C1696) * C5865) *
               C141365) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C29775 +
            (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
             C21920 * C2964 + C21821 * C3030) *
                C141219) *
               C141479 +
           ((C21918 * C1601 + C21819 * C1690 + C21919 * C3490 + C21820 * C3572 +
             C21920 * C10470 + C21821 * C10595) *
                C29775 +
            (C21918 * C1606 + C21819 * C1695 + C21919 * C3494 + C21820 * C3576 +
             C21920 * C10473 + C21821 * C10598) *
                C141219) *
               C141365) *
              C141298 * C141281 * C97 -
          (((C23865 + C23866 + C23867) * C141219 +
            (C23868 + C23869 + C23870) * C29775) *
               C141365 +
           ((C21951 + C21950 + C21949) * C141219 +
            (C21948 + C21947 + C21946) * C29775) *
               C141479) *
              C141298 * C141281 * C98 +
          (((C21957 + C21956 + C21955) * C29775 +
            (C21954 + C21953 + C21952) * C141219) *
               C141479 +
           ((C21918 * C1599 + C21819 * C1688 + C21919 * C3492 + C21820 * C3574 +
             C21920 * C10472 + C21821 * C10597) *
                C29775 +
            (C21918 * C1604 + C21819 * C1693 + C21919 * C3496 + C21820 * C3578 +
             C21920 * C10475 + C21821 * C10600) *
                C141219) *
               C141365) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eexz[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14078 * C108 + C141479 * C276 + C14079 * C1601 + C141365 * C1784) *
               C5869 +
           (C14078 * C114 + C141479 * C282 + C14079 * C1606 + C141365 * C1789) *
               C5863 +
           (C14105 + C14106) * C5871 + (C14107 + C14108) * C5864 +
           C14117 * C5873 + C14118 * C5865) *
              C141327 * C141298 * C141281 * C97 -
          ((C14113 + C14114) * C5865 + (C14115 + C14116) * C5873 +
           (C14112 + C14111) * C5864 + (C14110 + C14109) * C5871 +
           (C14108 + C14107) * C5863 + (C14106 + C14105) * C5869) *
              C141327 * C141298 * C141281 * C98 +
          (C14117 * C5869 + C14118 * C5863 + (C14116 + C14115) * C5871 +
           (C14114 + C14113) * C5864 +
           (C14078 * C112 + C141479 * C280 + C14079 * C1602 + C141365 * C1785) *
               C5873 +
           (C14078 * C118 + C141479 * C286 + C14079 * C1607 + C141365 * C1790) *
               C5865) *
              C141327 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C29775 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C141219) *
               C21819 +
           ((C14078 * C823 + C141479 * C1006 + C14079 * C3490 +
             C141365 * C3646) *
                C29775 +
            (C14078 * C828 + C141479 * C1011 + C14079 * C3494 +
             C141365 * C3650) *
                C141219) *
               C21820 +
           ((C14078 * C2960 + C141479 * C3084 + C14079 * C10470 +
             C141365 * C10699) *
                C29775 +
            (C14078 * C2964 + C141479 * C3088 + C14079 * C10473 +
             C141365 * C10702) *
                C141219) *
               C21821) *
              C141298 * C141281 * C97 -
          (((C14079 * C10474 + C141365 * C10703 + C14078 * C2965 +
             C141479 * C3089) *
                C141219 +
            (C14079 * C10471 + C141365 * C10700 + C14078 * C2961 +
             C141479 * C3085) *
                C29775) *
               C21821 +
           ((C14970 + C14971) * C141219 + (C14972 + C14973) * C29775) * C21820 +
           ((C14108 + C14107) * C141219 + (C14106 + C14105) * C29775) *
               C21819) *
              C141298 * C141281 * C98 +
          ((C14117 * C29775 + C14118 * C141219) * C21819 +
           ((C14969 + C14968) * C29775 + (C14967 + C14966) * C141219) * C21820 +
           ((C14078 * C2962 + C141479 * C3086 + C14079 * C10472 +
             C141365 * C10701) *
                C29775 +
            (C14078 * C2966 + C141479 * C3090 + C14079 * C10475 +
             C141365 * C10704) *
                C141219) *
               C21821) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
             C5873 * C110 + C5865 * C116) *
                C188 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
             C5873 * C191 + C5865 * C364) *
                C141327) *
               C141479 +
           ((C5869 * C1601 + C5863 * C1606 + C5871 * C1600 + C5864 * C1605 +
             C5873 * C1599 + C5865 * C1604) *
                C188 +
            (C5869 * C1690 + C5863 * C1878 + C5871 * C1689 + C5864 * C1877 +
             C5873 * C1688 + C5865 * C1876) *
                C141327) *
               C141365) *
              C141298 * C141281 * C97 -
          (((C5873 * C1687 + C5865 * C1875 + C5871 * C1688 + C5864 * C1876 +
             C5869 * C1689 + C5863 * C1877) *
                C141327 +
            (C5873 * C1598 + C5865 * C1603 + C5871 * C1599 + C5864 * C1604 +
             C5869 * C1600 + C5863 * C1605) *
                C188) *
               C141365 +
           ((C5873 * C192 + C5865 * C365 + C5871 * C191 + C5864 * C364 +
             C5869 * C190 + C5863 * C363) *
                C141327 +
            (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
             C5869 * C109 + C5863 * C115) *
                C188) *
               C141479) *
              C141298 * C141281 * C98 +
          (((C5869 * C110 + C5863 * C116 + C5871 * C111 + C5864 * C117 +
             C5873 * C112 + C5865 * C118) *
                C188 +
            (C5869 * C191 + C5863 * C364 + C5871 * C192 + C5864 * C365 +
             C5873 * C193 + C5865 * C366) *
                C141327) *
               C141479 +
           ((C5869 * C1599 + C5863 * C1604 + C5871 * C1598 + C5864 * C1603 +
             C5873 * C1602 + C5865 * C1607) *
                C188 +
            (C5869 * C1688 + C5863 * C1876 + C5871 * C1687 + C5864 * C1875 +
             C5873 * C1691 + C5865 * C1879) *
                C141327) *
               C141365) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C21918 +
            (C29775 * C189 + C141219 * C362) * C21819 + C30547 * C21919 +
            C30548 * C21820 + C30549 * C21920 + C30550 * C21821) *
               C141479 +
           ((C29775 * C1601 + C141219 * C1606) * C21918 +
            (C29775 * C1690 + C141219 * C1878) * C21819 + C32957 * C21919 +
            C32956 * C21820 + C32955 * C21920 + C32954 * C21821) *
               C141365) *
              C141298 * C141281 * C97 -
          (((C29775 * C10596 + C141219 * C10816) * C21821 +
            (C29775 * C10471 + C141219 * C10474) * C21920 +
            (C29775 * C3573 + C141219 * C3721) * C21820 +
            (C29775 * C3491 + C141219 * C3495) * C21919 +
            (C29775 * C1689 + C141219 * C1877) * C21819 +
            (C29775 * C1600 + C141219 * C1605) * C21918) *
               C141365 +
           (C30556 * C21821 + C30555 * C21920 + C30554 * C21820 +
            C30553 * C21919 + (C29775 * C190 + C141219 * C363) * C21819 +
            (C29775 * C109 + C141219 * C115) * C21918) *
               C141479) *
              C141298 * C141281 * C98 +
          (((C29775 * C110 + C141219 * C116) * C21918 +
            (C29775 * C191 + C141219 * C364) * C21819 +
            (C29775 * C821 + C141219 * C826) * C21919 +
            (C29775 * C910 + C141219 * C1098) * C21820 +
            (C29775 * C2962 + C141219 * C2966) * C21920 +
            (C29775 * C3028 + C141219 * C3144) * C21821) *
               C141479 +
           ((C29775 * C1599 + C141219 * C1604) * C21918 +
            (C29775 * C1688 + C141219 * C1876) * C21819 +
            (C29775 * C3492 + C141219 * C3496) * C21919 +
            (C29775 * C3574 + C141219 * C3722) * C21820 +
            (C29775 * C10472 + C141219 * C10475) * C21920 +
            (C29775 * C10597 + C141219 * C10817) * C21821) *
               C141365) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C5863 +
            C448 * C5864 + C449 * C5865) *
               C141479 +
           ((C418 * C1601 + C1961 + C1961 + C141327 * C1949) * C5863 +
            C1971 * C5864 + C1970 * C5865) *
               C141365) *
              C141298 * C141281 * C97 -
          ((C1969 * C5865 + C1970 * C5864 + C1971 * C5863) * C141365 +
           (C450 * C5865 + C449 * C5864 + C448 * C5863) * C141479) *
              C141298 * C141281 * C98 +
          ((C449 * C5863 + C450 * C5864 + C451 * C5865) * C141479 +
           (C1970 * C5863 + C1969 * C5864 +
            (C418 * C1602 + C1962 + C1962 + C141327 * C1950) * C5865) *
               C141365) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
            C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
            C22185 + C21821 * C3196) *
               C141219 * C141479 +
           (C22179 * C1601 + C24182 + C24182 + C21819 * C1949 + C22180 * C3490 +
            C24181 + C24181 + C21820 * C3790 + C22181 * C10470 + C24180 +
            C24180 + C21821 * C10934) *
               C141219 * C141365) *
              C141298 * C141281 * C97 -
          ((C24192 + C24193 + C24194) * C141219 * C141365 +
           (C22221 + C22220 + C22219) * C141219 * C141479) *
              C141298 * C141281 * C98 +
          ((C22224 + C22223 + C22222) * C141219 * C141479 +
           (C22179 * C1599 + C24183 + C24183 + C21819 * C1947 + C22180 * C3492 +
            C24184 + C24184 + C21820 * C3792 + C22181 * C10472 + C24185 +
            C24185 + C21821 * C10936) *
               C141219 * C141365) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C188 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C141327) *
               C5863 +
           ((C14105 + C14106) * C188 + (C14354 + C14355) * C141327) * C5864 +
           C14362 * C5865) *
              C141298 * C141281 * C97 -
          (((C14358 + C14359) * C141327 + (C14115 + C14116) * C188) * C5865 +
           ((C14357 + C14356) * C141327 + (C14110 + C14109) * C188) * C5864 +
           ((C14355 + C14354) * C141327 + (C14106 + C14105) * C188) * C5863) *
              C141298 * C141281 * C98 +
          (C14362 * C5863 +
           ((C14116 + C14115) * C188 + (C14359 + C14358) * C141327) * C5864 +
           ((C14078 * C112 + C141479 * C280 + C14079 * C1602 +
             C141365 * C1785) *
                C188 +
            (C14078 * C193 + C141479 * C505 + C14079 * C1691 +
             C141365 * C2041) *
                C141327) *
               C5865) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14078 * C108 + C141479 * C276 + C14079 * C1601 + C141365 * C1784) *
               C21918 +
           (C14078 * C189 + C141479 * C501 + C14079 * C1690 + C141365 * C2040) *
               C21819 +
           (C14078 * C823 + C141479 * C1006 + C14079 * C3490 +
            C141365 * C3646) *
               C21919 +
           (C14078 * C912 + C141479 * C1262 + C14079 * C3572 +
            C141365 * C3864) *
               C21820 +
           (C14078 * C2960 + C141479 * C3084 + C14079 * C10470 +
            C141365 * C10699) *
               C21920 +
           (C14078 * C3026 + C141479 * C3254 + C14079 * C10595 +
            C141365 * C11041) *
               C21821) *
              C141219 * C141298 * C141281 * C97 -
          ((C14079 * C10596 + C141365 * C11042 + C14078 * C3027 +
            C141479 * C3255) *
               C21821 +
           (C14079 * C10471 + C141365 * C10700 + C14078 * C2961 +
            C141479 * C3085) *
               C21920 +
           (C15288 + C15289) * C21820 + (C14972 + C14973) * C21919 +
           (C14355 + C14354) * C21819 + (C14106 + C14105) * C21918) *
              C141219 * C141298 * C141281 * C98 +
          (C14117 * C21918 + C14360 * C21819 + (C14969 + C14968) * C21919 +
           (C15287 + C15286) * C21820 +
           (C14078 * C2962 + C141479 * C3086 + C14079 * C10472 +
            C141365 * C10701) *
               C21920 +
           (C14078 * C3028 + C141479 * C3256 + C14079 * C10597 +
            C141365 * C11043) *
               C21821) *
              C141219 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezx[126] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                       C5864 * C115 + C5873 * C110 + C5865 * C116) *
                          C14078 +
                      (C5869 * C276 + C5863 * C579 + C5871 * C277 +
                       C5864 * C580 + C5873 * C278 + C5865 * C581) *
                          C141479 +
                      (C5869 * C1601 + C5863 * C1606 + C5871 * C1600 +
                       C5864 * C1605 + C5873 * C1599 + C5865 * C1604) *
                          C14079 +
                      (C5869 * C1784 + C5863 * C2126 + C5871 * C1783 +
                       C5864 * C2125 + C5873 * C1782 + C5865 * C2124) *
                          C141365) *
                         C141327 * C141298 * C141281 * C97 -
                     ((C5873 * C1781 + C5865 * C2123 + C5871 * C1782 +
                       C5864 * C2124 + C5869 * C1783 + C5863 * C2125) *
                          C141365 +
                      (C5873 * C1598 + C5865 * C1603 + C5871 * C1599 +
                       C5864 * C1604 + C5869 * C1600 + C5863 * C1605) *
                          C14079 +
                      (C5873 * C279 + C5865 * C582 + C5871 * C278 +
                       C5864 * C581 + C5869 * C277 + C5863 * C580) *
                          C141479 +
                      (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                       C5864 * C116 + C5869 * C109 + C5863 * C115) *
                          C14078) *
                         C141327 * C141298 * C141281 * C98 +
                     ((C5869 * C110 + C5863 * C116 + C5871 * C111 +
                       C5864 * C117 + C5873 * C112 + C5865 * C118) *
                          C14078 +
                      (C5869 * C278 + C5863 * C581 + C5871 * C279 +
                       C5864 * C582 + C5873 * C280 + C5865 * C583) *
                          C141479 +
                      (C5869 * C1599 + C5863 * C1604 + C5871 * C1598 +
                       C5864 * C1603 + C5873 * C1602 + C5865 * C1607) *
                          C14079 +
                      (C5869 * C1782 + C5863 * C2124 + C5871 * C1781 +
                       C5864 * C2123 + C5873 * C1785 + C5865 * C2127) *
                          C141365) *
                         C141327 * C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C29775 * C108 + C141219 * C114) * C14078 +
                       (C29775 * C276 + C141219 * C579) * C141479 +
                       (C29775 * C1601 + C141219 * C1606) * C14079 +
                       (C29775 * C1784 + C141219 * C2126) * C141365) *
                          C21819 +
                      (C30547 * C14078 + C30783 * C141479 + C32957 * C14079 +
                       C33177 * C141365) *
                          C21820 +
                      (C30549 * C14078 + C30784 * C141479 + C32955 * C14079 +
                       C33176 * C141365) *
                          C21821) *
                         C141298 * C141281 * C97 -
                     (((C29775 * C10700 + C141219 * C11146) * C141365 +
                       (C29775 * C10471 + C141219 * C10474) * C14079 +
                       C30787 * C141479 + C30555 * C14078) *
                          C21821 +
                      ((C29775 * C3647 + C141219 * C3935) * C141365 +
                       (C29775 * C3491 + C141219 * C3495) * C14079 +
                       C30786 * C141479 + C30553 * C14078) *
                          C21820 +
                      ((C29775 * C1783 + C141219 * C2125) * C141365 +
                       (C29775 * C1600 + C141219 * C1605) * C14079 +
                       (C29775 * C277 + C141219 * C580) * C141479 +
                       (C29775 * C109 + C141219 * C115) * C14078) *
                          C21819) *
                         C141298 * C141281 * C98 +
                     (((C29775 * C110 + C141219 * C116) * C14078 +
                       (C29775 * C278 + C141219 * C581) * C141479 +
                       (C29775 * C1599 + C141219 * C1604) * C14079 +
                       (C29775 * C1782 + C141219 * C2124) * C141365) *
                          C21819 +
                      ((C29775 * C821 + C141219 * C826) * C14078 +
                       (C29775 * C1004 + C141219 * C1346) * C141479 +
                       (C29775 * C3492 + C141219 * C3496) * C14079 +
                       (C29775 * C3648 + C141219 * C3936) * C141365) *
                          C21820 +
                      ((C29775 * C2962 + C141219 * C2966) * C14078 +
                       (C29775 * C3086 + C141219 * C3310) * C141479 +
                       (C29775 * C10472 + C141219 * C10475) * C14079 +
                       (C29775 * C10701 + C141219 * C11147) * C141365) *
                          C21821) *
                         C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[126] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C14078 +
            (C188 * C276 + C141327 * C635) * C141479 +
            (C188 * C1601 + C141327 * C1690) * C14079 +
            (C188 * C1784 + C141327 * C2197) * C141365) *
               C5863 +
           (C14511 + C14512 + C14513 + C14514) * C5864 + C14525 * C5865) *
              C141298 * C141281 * C97 -
          ((C14519 + C14520 + C14521 + C14522) * C5865 +
           (C14518 + C14517 + C14516 + C14515) * C5864 +
           (C14514 + C14513 + C14512 + C14511) * C5863) *
              C141298 * C141281 * C98 +
          (C14525 * C5863 + (C14522 + C14521 + C14520 + C14519) * C5864 +
           (C225 * C14078 + C657 * C141479 +
            (C188 * C1602 + C141327 * C1691) * C14079 +
            (C188 * C1785 + C141327 * C2198) * C141365) *
               C5865) *
              C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
            C21920 * C2960 + C21821 * C3026) *
               C14078 +
           (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
            C21920 * C3084 + C21821 * C3362) *
               C141479 +
           (C21918 * C1601 + C21819 * C1690 + C21919 * C3490 + C21820 * C3572 +
            C21920 * C10470 + C21821 * C10595) *
               C14079 +
           (C21918 * C1784 + C21819 * C2197 + C21919 * C3646 + C21820 * C4004 +
            C21920 * C10699 + C21821 * C11255) *
               C141365) *
              C141219 * C141298 * C141281 * C97 -
          ((C24504 + C24505 + C24506) * C141365 +
           (C23868 + C23869 + C23870) * C14079 +
           (C22473 + C22472 + C22471) * C141479 +
           (C21948 + C21947 + C21946) * C14078) *
              C141219 * C141298 * C141281 * C98 +
          ((C21957 + C21956 + C21955) * C14078 +
           (C22476 + C22475 + C22474) * C141479 +
           (C21918 * C1599 + C21819 * C1688 + C21919 * C3492 + C21820 * C3574 +
            C21920 * C10472 + C21821 * C10597) *
               C14079 +
           (C21918 * C1782 + C21819 * C2195 + C21919 * C3648 + C21820 * C4006 +
            C21920 * C10701 + C21821 * C11257) *
               C141365) *
              C141219 * C141298 * C141281 * C99)) /
            (p * q * std::sqrt(p + q));
    d2eezz[126] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                       C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                          C141327 * C5863 +
                      (C14636 + C14637) * C141327 * C5864 + C14643 * C5865) *
                         C141298 * C141281 * C97 -
                     ((C14640 + C14641) * C141327 * C5865 +
                      (C14639 + C14638) * C141327 * C5864 +
                      (C14637 + C14636) * C141327 * C5863) *
                         C141298 * C141281 * C98 +
                     (C14643 * C5863 + (C14641 + C14640) * C141327 * C5864 +
                      (C14599 * C112 + C14622 + C14622 + C141479 * C718 +
                       C14600 * C1602 + C14623 + C14623 + C141365 * C2284) *
                          C141327 * C5865) *
                         C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                       C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                          C21819 +
                      (C14599 * C823 + C15611 + C15611 + C141479 * C1505 +
                       C14600 * C3490 + C15610 + C15610 + C141365 * C4074) *
                          C21820 +
                      (C14599 * C2960 + C18278 + C18278 + C141479 * C3416 +
                       C14600 * C10470 + C18279 + C18279 + C141365 * C11356) *
                          C21821) *
                         C141219 * C141298 * C141281 * C97 -
                     ((C14600 * C10471 + C18281 + C18281 + C141365 * C11357 +
                       C14599 * C2961 + C18280 + C18280 + C141479 * C3417) *
                          C21821 +
                      (C15624 + C15625) * C21820 + (C14637 + C14636) * C21819) *
                         C141219 * C141298 * C141281 * C98 +
                     (C14642 * C21819 + (C15623 + C15622) * C21820 +
                      (C14599 * C2962 + C18282 + C18282 + C141479 * C3418 +
                       C14600 * C10472 + C18283 + C18283 + C141365 * C11358) *
                          C21821) *
                         C141219 * C141298 * C141281 * C99)) /
                       (p * q * std::sqrt(p + q));
    d2eexx[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 +
             C5876 + C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
             C5865 * C122) *
                C141479 +
            (C5868 * C1601 + C7817 + C7817 + C5863 * C1611 + C5870 * C1600 +
             C7816 + C7816 + C5864 * C1610 + C5872 * C1599 + C7815 + C7815 +
             C5865 * C1609) *
                C141365) *
               C141327 * C141298 * C816 -
           ((C10495 + C10496 + C10497) * C141365 +
            (C6742 + C6741 + C6740) * C141479) *
               C141327 * C141298 * C141497) *
              C818 +
          (((C6743 + C6744 + C6745) * C141479 +
            (C5868 * C3491 + C7821 + C7821 + C5863 * C3499 + C5870 * C3492 +
             C7822 + C7822 + C5864 * C3500 + C5872 * C3493 + C7823 + C7823 +
             C5865 * C3501) *
                C141365) *
               C141327 * C141298 * C141497 -
           ((C5872 * C1598 + C7820 + C7820 + C5865 * C1608 + C5870 * C1599 +
             C7819 + C7819 + C5864 * C1609 + C5868 * C1600 + C7818 + C7818 +
             C5863 * C1610) *
                C141365 +
            (C5872 * C111 + C5884 + C5884 + C5865 * C123 + C5870 * C110 +
             C5885 + C5885 + C5864 * C122 + C5868 * C109 + C5886 + C5886 +
             C5863 * C121) *
                C141479) *
               C141327 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141479 +
             (C29774 * C1601 + C30996 + C30996 + C141219 * C1611) * C141365) *
                C21819 +
            (C35748 + C35749) * C21820 + (C35750 + C35751) * C21821) *
               C141298 * C816 -
           ((C32719 * C141365 + C30303 * C141479) * C21821 +
            (C35751 + C35750) * C21820 + (C35749 + C35748) * C21819) *
               C141298 * C141497) *
              C818 +
          (((C35752 + C35764) * C21819 + (C35755 + C35765) * C21820 +
            (C30306 * C141479 +
             (C29774 * C26352 + C31000 + C31000 + C141219 * C26356) * C141365) *
                C21821) *
               C141298 * C141497 -
           ((C35765 + C35755) * C21821 + (C35764 + C35752) * C21820 +
            ((C29774 * C1600 + C30997 + C30997 + C141219 * C1610) * C141365 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141479) *
                C21819) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexy[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C5869 +
             (C188 * C114 + C141327 * C195) * C5863 + C218 * C5871 +
             C219 * C5864 + C220 * C5873 + C221 * C5865) *
                C141479 +
            ((C188 * C1601 + C141327 * C1690) * C5869 +
             (C188 * C1606 + C141327 * C1695) * C5863 + C1715 * C5871 +
             C1714 * C5864 + C1713 * C5873 + C1712 * C5865) *
                C141365) *
               C141298 * C816 -
           ((C14848 * C5865 + C14849 * C5873 + C14850 * C5864 + C14851 * C5871 +
             (C188 * C3494 + C141327 * C3576) * C5863 +
             (C188 * C3490 + C141327 * C3572) * C5869) *
                C141365 +
            (C934 * C5865 + C935 * C5873 + C936 * C5864 + C937 * C5871 +
             (C188 * C828 + C141327 * C917) * C5863 +
             (C188 * C823 + C141327 * C912) * C5869) *
                C141479) *
               C141298 * C141497) *
              C818 +
          (((C937 * C5869 + C936 * C5863 + C935 * C5871 + C934 * C5864 +
             C933 * C5873 + C932 * C5865) *
                C141479 +
            (C14851 * C5869 + C14850 * C5863 + C14849 * C5871 + C14848 * C5864 +
             (C188 * C3493 + C141327 * C3575) * C5873 +
             (C188 * C3497 + C141327 * C3579) * C5865) *
                C141365) *
               C141298 * C141497 -
           ((C1710 * C5865 + C1711 * C5873 + C1712 * C5864 + C1713 * C5871 +
             C1714 * C5863 + C1715 * C5869) *
                C141365 +
            (C223 * C5865 + C222 * C5873 + C221 * C5864 + C220 * C5871 +
             C219 * C5863 + C218 * C5869) *
                C141479) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
              C21920 * C2960 + C21821 * C3026) *
                 C29775 +
             (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
              C21920 * C2964 + C21821 * C3030) *
                 C141219) *
                C141479 +
            ((C21918 * C1601 + C21819 * C1690 + C21919 * C3490 +
              C21820 * C3572 + C21920 * C10470 + C21821 * C10595) *
                 C29775 +
             (C21918 * C1606 + C21819 * C1695 + C21919 * C3494 +
              C21820 * C3576 + C21920 * C10473 + C21821 * C10598) *
                 C141219) *
                C141365) *
               C141298 * C816 -
           (((C21920 * C26353 + C21821 * C26479 + C21919 * C10473 +
              C21820 * C10598 + C21918 * C3494 + C21819 * C3576) *
                 C141219 +
             (C21920 * C26351 + C21821 * C26477 + C21919 * C10470 +
              C21820 * C10595 + C21918 * C3490 + C21819 * C3572) *
                 C29775) *
                C141365 +
            ((C21920 * C9670 + C21821 * C9771 + C21919 * C2964 +
              C21820 * C3030 + C21918 * C828 + C21819 * C917) *
                 C141219 +
             (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 +
              C21820 * C3026 + C21918 * C823 + C21819 * C912) *
                 C29775) *
                C141479) *
               C141298 * C141497) *
              C818 +
          ((((C22814 + C22813 + C22812) * C29775 +
             (C22811 + C22810 + C22809) * C141219) *
                C141479 +
            ((C21918 * C3491 + C21819 * C3573 + C21919 * C10471 +
              C21820 * C10596 + C21920 * C26352 + C21821 * C26478) *
                 C29775 +
             (C21918 * C3495 + C21819 * C3577 + C21919 * C10474 +
              C21820 * C10599 + C21920 * C26354 + C21821 * C26480) *
                 C141219) *
                C141365) *
               C141298 * C141497 -
           (((C23865 + C23866 + C23867) * C141219 +
             (C23868 + C23869 + C23870) * C29775) *
                C141365 +
            ((C21951 + C21950 + C21949) * C141219 +
             (C21948 + C21947 + C21946) * C29775) *
                C141479) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C5869 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C5863 +
            (C14105 + C14106) * C5871 + (C14107 + C14108) * C5864 +
            C14117 * C5873 + C14118 * C5865) *
               C141327 * C141298 * C816 -
           ((C14966 + C14967) * C5865 + (C14968 + C14969) * C5873 +
            (C14970 + C14971) * C5864 + (C14972 + C14973) * C5871 +
            (C14079 * C3494 + C141365 * C3650 + C14078 * C828 +
             C141479 * C1011) *
                C5863 +
            (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
             C141479 * C1006) *
                C5869) *
               C141327 * C141298 * C141497) *
              C818 +
          (((C14973 + C14972) * C5869 + (C14971 + C14970) * C5863 +
            (C14969 + C14968) * C5871 + (C14967 + C14966) * C5864 +
            (C14078 * C820 + C141479 * C1003 + C14079 * C3493 +
             C141365 * C3649) *
                C5873 +
            (C14078 * C825 + C141479 * C1008 + C14079 * C3497 +
             C141365 * C3653) *
                C5865) *
               C141327 * C141298 * C141497 -
           ((C14113 + C14114) * C5865 + (C14115 + C14116) * C5873 +
            (C14112 + C14111) * C5864 + (C14110 + C14109) * C5871 +
            (C14108 + C14107) * C5863 + (C14106 + C14105) * C5869) *
               C141327 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C29775 +
             (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
              C141365 * C1789) *
                 C141219) *
                C21819 +
            ((C35986 + C35987) * C29775 + (C35988 + C35989) * C141219) *
                C21820 +
            ((C35990 + C35991) * C29775 + (C35992 + C35993) * C141219) *
                C21821) *
               C141298 * C816 -
           (((C14079 * C26353 + C141365 * C26581 + C14078 * C9670 +
              C141479 * C9851) *
                 C141219 +
             (C14079 * C26351 + C141365 * C26579 + C14078 * C9667 +
              C141479 * C9848) *
                 C29775) *
                C21821 +
            ((C35993 + C35992) * C141219 + (C35991 + C35990) * C29775) *
                C21820 +
            ((C35989 + C35988) * C141219 + (C35987 + C35986) * C29775) *
                C21819) *
               C141298 * C141497) *
              C818 +
          ((((C14973 + C14972) * C29775 + (C14971 + C14970) * C141219) *
                C21819 +
            ((C35994 + C35995) * C29775 + (C35996 + C35997) * C141219) *
                C21820 +
            ((C14078 * C9668 + C141479 * C9849 + C14079 * C26352 +
              C141365 * C26580) *
                 C29775 +
             (C14078 * C9671 + C141479 * C9852 + C14079 * C26354 +
              C141365 * C26582) *
                 C141219) *
                C21821) *
               C141298 * C141497 -
           (((C35997 + C35996) * C141219 + (C35995 + C35994) * C29775) *
                C21821 +
            ((C14970 + C14971) * C141219 + (C14972 + C14973) * C29775) *
                C21820 +
            ((C14108 + C14107) * C141219 + (C14106 + C14105) * C29775) *
                C21819) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C188 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
              C5873 * C191 + C5865 * C364) *
                 C141327) *
                C141479 +
            ((C5869 * C1601 + C5863 * C1606 + C5871 * C1600 + C5864 * C1605 +
              C5873 * C1599 + C5865 * C1604) *
                 C188 +
             (C5869 * C1690 + C5863 * C1878 + C5871 * C1689 + C5864 * C1877 +
              C5873 * C1688 + C5865 * C1876) *
                 C141327) *
                C141365) *
               C141298 * C816 -
           (((C10831 + C10832 + C10833) * C141327 +
             (C10834 + C10835 + C10836) * C188) *
                C141365 +
            ((C7123 + C7122 + C7121) * C141327 +
             (C7120 + C7119 + C7118) * C188) *
                C141479) *
               C141298 * C141497) *
              C818 +
          ((((C7124 + C7125 + C7126) * C188 +
             (C7127 + C7128 + C7129) * C141327) *
                C141479 +
            ((C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C5864 * C3496 +
              C5873 * C3493 + C5865 * C3497) *
                 C188 +
             (C5869 * C3573 + C5863 * C3721 + C5871 * C3574 + C5864 * C3722 +
              C5873 * C3575 + C5865 * C3723) *
                 C141327) *
                C141365) *
               C141298 * C141497 -
           (((C5873 * C1687 + C5865 * C1875 + C5871 * C1688 + C5864 * C1876 +
              C5869 * C1689 + C5863 * C1877) *
                 C141327 +
             (C5873 * C1598 + C5865 * C1603 + C5871 * C1599 + C5864 * C1604 +
              C5869 * C1600 + C5863 * C1605) *
                 C188) *
                C141365 +
            ((C5873 * C192 + C5865 * C365 + C5871 * C191 + C5864 * C364 +
              C5869 * C190 + C5863 * C363) *
                 C141327 +
             (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
              C5869 * C109 + C5863 * C115) *
                 C188) *
                C141479) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C21918 +
             (C29775 * C189 + C141219 * C362) * C21819 + C30547 * C21919 +
             C30548 * C21820 + C30549 * C21920 + C30550 * C21821) *
                C141479 +
            ((C29775 * C1601 + C141219 * C1606) * C21918 +
             (C29775 * C1690 + C141219 * C1878) * C21819 + C32957 * C21919 +
             C32956 * C21820 + C32955 * C21920 + C32954 * C21821) *
                C141365) *
               C141298 * C816 -
           ((C32952 * C21821 + C32953 * C21920 + C32954 * C21820 +
             C32955 * C21919 + C32956 * C21819 + C32957 * C21918) *
                C141365 +
            (C30552 * C21821 + C30551 * C21920 + C30550 * C21820 +
             C30549 * C21919 + C30548 * C21819 + C30547 * C21918) *
                C141479) *
               C141298 * C141497) *
              C818 +
          (((C30553 * C21918 + C30554 * C21819 + C30555 * C21919 +
             C30556 * C21820 + C30557 * C21920 + C30558 * C21821) *
                C141479 +
            (C36104 * C21918 + C36105 * C21819 + C36106 * C21919 +
             C36107 * C21820 + (C29775 * C26352 + C141219 * C26354) * C21920 +
             (C29775 * C26478 + C141219 * C26696) * C21821) *
                C141365) *
               C141298 * C141497 -
           ((C36107 * C21821 + C36106 * C21920 + C36105 * C21820 +
             C36104 * C21919 + (C29775 * C1689 + C141219 * C1877) * C21819 +
             (C29775 * C1600 + C141219 * C1605) * C21918) *
                C141365 +
            (C30556 * C21821 + C30555 * C21920 + C30554 * C21820 +
             C30553 * C21919 + (C29775 * C190 + C141219 * C363) * C21819 +
             (C29775 * C109 + C141219 * C115) * C21918) *
                C141479) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C5863 +
             C448 * C5864 + C449 * C5865) *
                C141479 +
            ((C418 * C1601 + C1961 + C1961 + C141327 * C1949) * C5863 +
             C1971 * C5864 + C1970 * C5865) *
                C141365) *
               C141298 * C816 -
           ((C15178 * C5865 + C15179 * C5864 +
             (C418 * C3490 + C3795 + C3795 + C141327 * C3790) * C5863) *
                C141365 +
            (C1192 * C5865 + C1193 * C5864 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C5863) *
                C141479) *
               C141298 * C141497) *
              C818 +
          (((C1193 * C5863 + C1192 * C5864 + C1191 * C5865) * C141479 +
            (C15179 * C5863 + C15178 * C5864 +
             (C418 * C3493 + C3798 + C3798 + C141327 * C3793) * C5865) *
                C141365) *
               C141298 * C141497 -
           ((C1969 * C5865 + C1970 * C5864 + C1971 * C5863) * C141365 +
            (C450 * C5865 + C449 * C5864 + C448 * C5863) * C141479) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
             C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
             C22185 + C21821 * C3196) *
                C141219 * C141479 +
            (C22179 * C1601 + C24182 + C24182 + C21819 * C1949 +
             C22180 * C3490 + C24181 + C24181 + C21820 * C3790 +
             C22181 * C10470 + C24180 + C24180 + C21821 * C10934) *
                C141219 * C141365) *
               C141298 * C816 -
           ((C22181 * C26351 + C26824 + C26824 + C21821 * C26819 +
             C22180 * C10470 + C26823 + C26823 + C21820 * C10934 +
             C22179 * C3490 + C26822 + C26822 + C21819 * C3790) *
                C141219 * C141365 +
            (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
             C22180 * C2960 + C23189 + C23189 + C21820 * C3196 + C22179 * C823 +
             C23190 + C23190 + C21819 * C1171) *
                C141219 * C141479) *
               C141298 * C141497) *
              C818 +
          (((C23202 + C23201 + C23200) * C141219 * C141479 +
            (C22179 * C3491 + C26825 + C26825 + C21819 * C3791 +
             C22180 * C10471 + C26826 + C26826 + C21820 * C10935 +
             C22181 * C26352 + C26827 + C26827 + C21821 * C26820) *
                C141219 * C141365) *
               C141298 * C141497 -
           ((C24192 + C24193 + C24194) * C141219 * C141365 +
            (C22221 + C22220 + C22219) * C141219 * C141479) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C188 +
             (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
              C141365 * C2040) *
                 C141327) *
                C5863 +
            ((C14105 + C14106) * C188 + (C14354 + C14355) * C141327) * C5864 +
            C14362 * C5865) *
               C141298 * C816 -
           (((C15286 + C15287) * C141327 + (C14968 + C14969) * C188) * C5865 +
            ((C15288 + C15289) * C141327 + (C14972 + C14973) * C188) * C5864 +
            ((C14079 * C3572 + C141365 * C3864 + C14078 * C912 +
              C141479 * C1262) *
                 C141327 +
             (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
              C141479 * C1006) *
                 C188) *
                C5863) *
               C141298 * C141497) *
              C818 +
          ((((C14973 + C14972) * C188 + (C15289 + C15288) * C141327) * C5863 +
            ((C14969 + C14968) * C188 + (C15287 + C15286) * C141327) * C5864 +
            ((C14078 * C820 + C141479 * C1003 + C14079 * C3493 +
              C141365 * C3649) *
                 C188 +
             (C14078 * C909 + C141479 * C1259 + C14079 * C3575 +
              C141365 * C3867) *
                 C141327) *
                C5865) *
               C141298 * C141497 -
           (((C14358 + C14359) * C141327 + (C14115 + C14116) * C188) * C5865 +
            ((C14357 + C14356) * C141327 + (C14110 + C14109) * C188) * C5864 +
            ((C14355 + C14354) * C141327 + (C14106 + C14105) * C188) * C5863) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C21918 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C21819 +
            (C35986 + C35987) * C21919 + (C36316 + C36317) * C21820 +
            (C35990 + C35991) * C21920 + (C36318 + C36319) * C21821) *
               C141219 * C141298 * C816 -
           ((C14079 * C26477 + C141365 * C26925 + C14078 * C9768 +
             C141479 * C10118) *
                C21821 +
            (C14079 * C26351 + C141365 * C26579 + C14078 * C9667 +
             C141479 * C9848) *
                C21920 +
            (C36319 + C36318) * C21820 + (C35991 + C35990) * C21919 +
            (C36317 + C36316) * C21819 + (C35987 + C35986) * C21918) *
               C141219 * C141298 * C141497) *
              C818 +
          (((C14973 + C14972) * C21918 + (C15289 + C15288) * C21819 +
            (C35994 + C35995) * C21919 + (C36320 + C36321) * C21820 +
            (C14078 * C9668 + C141479 * C9849 + C14079 * C26352 +
             C141365 * C26580) *
                C21920 +
            (C14078 * C9769 + C141479 * C10119 + C14079 * C26478 +
             C141365 * C26926) *
                C21821) *
               C141219 * C141298 * C141497 -
           ((C36321 + C36320) * C21821 + (C35995 + C35994) * C21920 +
            (C15288 + C15289) * C21820 + (C14972 + C14973) * C21919 +
            (C14355 + C14354) * C21819 + (C14106 + C14105) * C21918) *
               C141219 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[127] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                        C5864 * C115 + C5873 * C110 + C5865 * C116) *
                           C14078 +
                       (C5869 * C276 + C5863 * C579 + C5871 * C277 +
                        C5864 * C580 + C5873 * C278 + C5865 * C581) *
                           C141479 +
                       (C5869 * C1601 + C5863 * C1606 + C5871 * C1600 +
                        C5864 * C1605 + C5873 * C1599 + C5865 * C1604) *
                           C14079 +
                       (C5869 * C1784 + C5863 * C2126 + C5871 * C1783 +
                        C5864 * C2125 + C5873 * C1782 + C5865 * C2124) *
                           C141365) *
                          C141327 * C141298 * C816 -
                      ((C11155 + C11156 + C11157) * C141365 +
                       (C10834 + C10835 + C10836) * C14079 +
                       (C7483 + C7482 + C7481) * C141479 +
                       (C7120 + C7119 + C7118) * C14078) *
                          C141327 * C141298 * C141497) *
                         C818 +
                     (((C7124 + C7125 + C7126) * C14078 +
                       (C7484 + C7485 + C7486) * C141479 +
                       (C5869 * C3491 + C5863 * C3495 + C5871 * C3492 +
                        C5864 * C3496 + C5873 * C3493 + C5865 * C3497) *
                           C14079 +
                       (C5869 * C3647 + C5863 * C3935 + C5871 * C3648 +
                        C5864 * C3936 + C5873 * C3649 + C5865 * C3937) *
                           C141365) *
                          C141327 * C141298 * C141497 -
                      ((C5873 * C1781 + C5865 * C2123 + C5871 * C1782 +
                        C5864 * C2124 + C5869 * C1783 + C5863 * C2125) *
                           C141365 +
                       (C5873 * C1598 + C5865 * C1603 + C5871 * C1599 +
                        C5864 * C1604 + C5869 * C1600 + C5863 * C1605) *
                           C14079 +
                       (C5873 * C279 + C5865 * C582 + C5871 * C278 +
                        C5864 * C581 + C5869 * C277 + C5863 * C580) *
                           C141479 +
                       (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                        C5864 * C116 + C5869 * C109 + C5863 * C115) *
                           C14078) *
                          C141327 * C141298 * C816) *
                         C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C29775 * C108 + C141219 * C114) * C14078 +
                        (C29775 * C276 + C141219 * C579) * C141479 +
                        (C29775 * C1601 + C141219 * C1606) * C14079 +
                        (C29775 * C1784 + C141219 * C2126) * C141365) *
                           C21819 +
                       (C36420 + C36421 + C36422 + C36423) * C21820 +
                       (C36424 + C36425 + C36426 + C36427) * C21821) *
                          C141298 * C816 -
                      ((C33175 * C141365 + C32953 * C14079 + C30785 * C141479 +
                        C30551 * C14078) *
                           C21821 +
                       (C36427 + C36426 + C36425 + C36424) * C21820 +
                       (C36423 + C36422 + C36421 + C36420) * C21819) *
                          C141298 * C141497) *
                         C818 +
                     (((C36428 + C36429 + C36430 + C36440) * C21819 +
                       (C36433 + C36434 + C36435 + C36441) * C21820 +
                       (C30557 * C14078 + C30788 * C141479 +
                        (C29775 * C26352 + C141219 * C26354) * C14079 +
                        (C29775 * C26580 + C141219 * C27029) * C141365) *
                           C21821) *
                          C141298 * C141497 -
                      ((C36441 + C36435 + C36434 + C36433) * C21821 +
                       (C36440 + C36430 + C36429 + C36428) * C21820 +
                       ((C29775 * C1783 + C141219 * C2125) * C141365 +
                        (C29775 * C1600 + C141219 * C1605) * C14079 +
                        (C29775 * C277 + C141219 * C580) * C141479 +
                        (C29775 * C109 + C141219 * C115) * C14078) *
                           C21819) *
                          C141298 * C816) *
                         C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C14078 +
             (C188 * C276 + C141327 * C635) * C141479 +
             (C188 * C1601 + C141327 * C1690) * C14079 +
             (C188 * C1784 + C141327 * C2197) * C141365) *
                C5863 +
            (C14511 + C14512 + C14513 + C14514) * C5864 + C14525 * C5865) *
               C141298 * C816 -
           ((C15498 + C15488 + C15489 + C15490) * C5865 +
            (C15499 + C15493 + C15494 + C15495) * C5864 +
            ((C188 * C3646 + C141327 * C4004) * C141365 +
             (C188 * C3490 + C141327 * C3572) * C14079 +
             (C188 * C1006 + C141327 * C1419) * C141479 +
             (C188 * C823 + C141327 * C912) * C14078) *
                C5863) *
               C141298 * C141497) *
              C818 +
          (((C15495 + C15494 + C15493 + C15499) * C5863 +
            (C15490 + C15489 + C15488 + C15498) * C5864 +
            (C933 * C14078 + C1431 * C141479 +
             (C188 * C3493 + C141327 * C3575) * C14079 +
             (C188 * C3649 + C141327 * C4007) * C141365) *
                C5865) *
               C141298 * C141497 -
           ((C14519 + C14520 + C14521 + C14522) * C5865 +
            (C14518 + C14517 + C14516 + C14515) * C5864 +
            (C14514 + C14513 + C14512 + C14511) * C5863) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C14078 +
            (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
             C21920 * C3084 + C21821 * C3362) *
                C141479 +
            (C21918 * C1601 + C21819 * C1690 + C21919 * C3490 + C21820 * C3572 +
             C21920 * C10470 + C21821 * C10595) *
                C14079 +
            (C21918 * C1784 + C21819 * C2197 + C21919 * C3646 + C21820 * C4004 +
             C21920 * C10699 + C21821 * C11255) *
                C141365) *
               C141219 * C141298 * C816 -
           ((C21920 * C26579 + C21821 * C27140 + C21919 * C10699 +
             C21820 * C11255 + C21918 * C3646 + C21819 * C4004) *
                C141365 +
            (C21920 * C26351 + C21821 * C26477 + C21919 * C10470 +
             C21820 * C10595 + C21918 * C3490 + C21819 * C3572) *
                C14079 +
            (C21920 * C9848 + C21821 * C10284 + C21919 * C3084 +
             C21820 * C3362 + C21918 * C1006 + C21819 * C1419) *
                C141479 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C14078) *
               C141219 * C141298 * C141497) *
              C818 +
          (((C22814 + C22813 + C22812) * C14078 +
            (C23538 + C23537 + C23536) * C141479 +
            (C21918 * C3491 + C21819 * C3573 + C21919 * C10471 +
             C21820 * C10596 + C21920 * C26352 + C21821 * C26478) *
                C14079 +
            (C21918 * C3647 + C21819 * C4005 + C21919 * C10700 +
             C21820 * C11256 + C21920 * C26580 + C21821 * C27141) *
                C141365) *
               C141219 * C141298 * C141497 -
           ((C24504 + C24505 + C24506) * C141365 +
            (C23868 + C23869 + C23870) * C14079 +
            (C22473 + C22472 + C22471) * C141479 +
            (C21948 + C21947 + C21946) * C14078) *
               C141219 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[127] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 + C14600 * C1601 +
             C14603 + C14603 + C141365 * C2283) *
                C141327 * C5863 +
            (C14636 + C14637) * C141327 * C5864 + C14643 * C5865) *
               C141298 * C816 -
           ((C15622 + C15623) * C141327 * C5865 +
            (C15624 + C15625) * C141327 * C5864 +
            (C14600 * C3490 + C15610 + C15610 + C141365 * C4074 +
             C14599 * C823 + C15611 + C15611 + C141479 * C1505) *
                C141327 * C5863) *
               C141298 * C141497) *
              C818 +
          (((C15625 + C15624) * C141327 * C5863 +
            (C15623 + C15622) * C141327 * C5864 +
            (C14599 * C820 + C15612 + C15612 + C141479 * C1502 +
             C14600 * C3493 + C15613 + C15613 + C141365 * C4077) *
                C141327 * C5865) *
               C141298 * C141497 -
           ((C14640 + C14641) * C141327 * C5865 +
            (C14639 + C14638) * C141327 * C5864 +
            (C14637 + C14636) * C141327 * C5863) *
               C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 + C14600 * C1601 +
             C14603 + C14603 + C141365 * C2283) *
                C21819 +
            (C36666 + C36667) * C21820 + (C36668 + C36669) * C21821) *
               C141219 * C141298 * C816 -
           ((C14600 * C26351 + C36646 + C36646 + C141365 * C27240 +
             C14599 * C9667 + C36647 + C36647 + C141479 * C10361) *
                C21821 +
            (C36669 + C36668) * C21820 + (C36667 + C36666) * C21819) *
               C141219 * C141298 * C141497) *
              C818 +
          (((C15625 + C15624) * C21819 + (C36670 + C36671) * C21820 +
            (C14599 * C9668 + C36652 + C36652 + C141479 * C10362 +
             C14600 * C26352 + C36653 + C36653 + C141365 * C27241) *
                C21821) *
               C141219 * C141298 * C141497 -
           ((C36671 + C36670) * C21821 + (C15624 + C15625) * C21820 +
            (C14637 + C14636) * C21819) *
               C141219 * C141298 * C816) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 +
             C5876 + C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
             C5865 * C122) *
                C141479 +
            (C15751 + C15752 + C15753) * C141365) *
               C141327 * C1596 -
           ((C5872 * C5327 + C13217 + C13217 + C5865 * C5335 + C5870 * C5326 +
             C13216 + C13216 + C5864 * C5334 + C5868 * C5325 + C13215 + C13215 +
             C5863 * C5333) *
                C141365 +
            (C15753 + C15752 + C15751) * C141479) *
               C141327 * C141499) *
              C141281 * C818 +
          (((C15754 + C15755 + C15756) * C141479 +
            (C5868 * C5326 + C15736 + C15736 + C5863 * C5334 + C5870 * C5327 +
             C15737 + C15737 + C5864 * C5335 + C5872 * C5328 + C15738 + C15738 +
             C5865 * C5336) *
                C141365) *
               C141327 * C141499 -
           ((C15756 + C15755 + C15754) * C141365 +
            (C5872 * C111 + C5884 + C5884 + C5865 * C123 + C5870 * C110 +
             C5885 + C5885 + C5864 * C122 + C5868 * C109 + C5886 + C5886 +
             C5863 * C121) *
                C141479) *
               C141327 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141479 +
             C36781 * C141365) *
                C21819 +
            (C35748 + C35749) * C21820 + (C35750 + C35751) * C21821) *
               C1596 -
           (((C29774 * C29087 + C34564 + C34564 + C141219 * C29091) * C141365 +
             C32720 * C141479) *
                C21821 +
            ((C29774 * C13205 + C34563 + C34563 + C141219 * C13211) * C141365 +
             C32721 * C141479) *
                C21820 +
            ((C29774 * C5325 + C34562 + C34562 + C141219 * C5333) * C141365 +
             C36781 * C141479) *
                C21819) *
               C141499) *
              C141281 * C818 +
          (((C36782 * C141479 +
             (C29774 * C5326 + C36774 + C36774 + C141219 * C5334) * C141365) *
                C21819 +
            (C35762 * C141479 +
             (C29774 * C13206 + C36775 + C36775 + C141219 * C13212) * C141365) *
                C21820 +
            (C35763 * C141479 +
             (C29774 * C29088 + C36776 + C36776 + C141219 * C29092) * C141365) *
                C21821) *
               C141499 -
           ((C35765 + C35755) * C21821 + (C35764 + C35752) * C21820 +
            (C36782 * C141365 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141479) *
                C21819) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexy[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C5869 +
             (C188 * C114 + C141327 * C195) * C5863 + C218 * C5871 +
             C219 * C5864 + C220 * C5873 + C221 * C5865) *
                C141479 +
            (C15883 + C15884 + C15859 + C15860 + C15861 + C15862) * C141365) *
               C1596 -
           ((C15879 * C5865 + C15880 * C5873 + C15881 * C5864 + C15882 * C5871 +
             (C188 * C5329 + C141327 * C5395) * C5863 +
             (C188 * C5325 + C141327 * C5391) * C5869) *
                C141365 +
            (C15862 + C15861 + C15860 + C15859 + C15884 + C15883) * C141479) *
               C141499) *
              C141281 * C818 +
          (((C15871 + C15872 + C15873 + C15874 + C15875 + C15876) * C141479 +
            (C15882 * C5869 + C15881 * C5863 + C15880 * C5871 + C15879 * C5864 +
             (C188 * C5328 + C141327 * C5394) * C5873 +
             (C188 * C5332 + C141327 * C5398) * C5865) *
                C141365) *
               C141499 -
           ((C15876 + C15875 + C15874 + C15873 + C15872 + C15871) * C141365 +
            (C223 * C5865 + C222 * C5873 + C221 * C5864 + C220 * C5871 +
             C219 * C5863 + C218 * C5869) *
                C141479) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
              C21920 * C2960 + C21821 * C3026) *
                 C29775 +
             (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
              C21920 * C2964 + C21821 * C3030) *
                 C141219) *
                C141479 +
            ((C36893 + C36894 + C36895) * C29775 +
             (C36896 + C36897 + C36898) * C141219) *
                C141365) *
               C1596 -
           (((C21920 * C29089 + C21821 * C29175 + C21919 * C13208 +
              C21820 * C13297 + C21918 * C5329 + C21819 * C5395) *
                 C141219 +
             (C21920 * C29087 + C21821 * C29173 + C21919 * C13205 +
              C21820 * C13294 + C21918 * C5325 + C21819 * C5391) *
                 C29775) *
                C141365 +
            ((C36898 + C36897 + C36896) * C141219 +
             (C36895 + C36894 + C36893) * C29775) *
                C141479) *
               C141499) *
              C141281 * C818 +
          ((((C23870 + C23869 + C23868) * C29775 +
             (C23867 + C23866 + C23865) * C141219) *
                C141479 +
            ((C21918 * C5326 + C21819 * C5392 + C21919 * C13206 +
              C21820 * C13295 + C21920 * C29088 + C21821 * C29174) *
                 C29775 +
             (C21918 * C5330 + C21819 * C5396 + C21919 * C13209 +
              C21820 * C13298 + C21920 * C29090 + C21821 * C29176) *
                 C141219) *
                C141365) *
               C141499 -
           (((C23865 + C23866 + C23867) * C141219 +
             (C23868 + C23869 + C23870) * C29775) *
                C141365 +
            ((C21951 + C21950 + C21949) * C141219 +
             (C21948 + C21947 + C21946) * C29775) *
                C141479) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C5869 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C5863 +
            (C14105 + C14106) * C5871 + (C14107 + C14108) * C5864 +
            C14117 * C5873 + C14118 * C5865) *
               C141327 * C1596 -
           ((C15999 + C16000) * C5865 + (C16001 + C16002) * C5873 +
            (C16003 + C16004) * C5864 + (C16005 + C16006) * C5871 +
            (C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
             C141479 * C1789) *
                C5863 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C5869) *
               C141327 * C141499) *
              C141281 * C818 +
          (((C16006 + C16005) * C5869 + (C16004 + C16003) * C5863 +
            (C16002 + C16001) * C5871 + (C16000 + C15999) * C5864 +
            (C14078 * C1598 + C141479 * C1781 + C14079 * C5328 +
             C141365 * C5452) *
                C5873 +
            (C14078 * C1603 + C141479 * C1786 + C14079 * C5332 +
             C141365 * C5456) *
                C5865) *
               C141327 * C141499 -
           ((C14113 + C14114) * C5865 + (C14115 + C14116) * C5873 +
            (C14112 + C14111) * C5864 + (C14110 + C14109) * C5871 +
            (C14108 + C14107) * C5863 + (C14106 + C14105) * C5869) *
               C141327 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C29775 +
             (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
              C141365 * C1789) *
                 C141219) *
                C21819 +
            ((C35986 + C35987) * C29775 + (C35988 + C35989) * C141219) *
                C21820 +
            ((C35990 + C35991) * C29775 + (C35992 + C35993) * C141219) *
                C21821) *
               C1596 -
           (((C14079 * C29089 + C141365 * C29253 + C14078 * C10473 +
              C141479 * C10702) *
                 C141219 +
             (C14079 * C29087 + C141365 * C29251 + C14078 * C10470 +
              C141479 * C10699) *
                 C29775) *
                C21821 +
            ((C14079 * C13208 + C141365 * C13377 + C14078 * C3494 +
              C141479 * C3650) *
                 C141219 +
             (C14079 * C13205 + C141365 * C13374 + C14078 * C3490 +
              C141479 * C3646) *
                 C29775) *
                C21820 +
            ((C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
              C141479 * C1789) *
                 C141219 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C29775) *
                C21819) *
               C141499) *
              C141281 * C818 +
          ((((C16006 + C16005) * C29775 + (C16004 + C16003) * C141219) *
                C21819 +
            ((C14078 * C3491 + C141479 * C3647 + C14079 * C13206 +
              C141365 * C13375) *
                 C29775 +
             (C14078 * C3495 + C141479 * C3651 + C14079 * C13209 +
              C141365 * C13378) *
                 C141219) *
                C21820 +
            ((C14078 * C10471 + C141479 * C10700 + C14079 * C29088 +
              C141365 * C29252) *
                 C29775 +
             (C14078 * C10474 + C141479 * C10703 + C14079 * C29090 +
              C141365 * C29254) *
                 C141219) *
                C21821) *
               C141499 -
           (((C35997 + C35996) * C141219 + (C35995 + C35994) * C29775) *
                C21821 +
            ((C14970 + C14971) * C141219 + (C14972 + C14973) * C29775) *
                C21820 +
            ((C14108 + C14107) * C141219 + (C14106 + C14105) * C29775) *
                C21819) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C188 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
              C5873 * C191 + C5865 * C364) *
                 C141327) *
                C141479 +
            ((C16129 + C16130 + C16131) * C188 +
             (C16132 + C16133 + C16134) * C141327) *
                C141365) *
               C1596 -
           (((C5873 * C5393 + C5865 * C5509 + C5871 * C5392 + C5864 * C5508 +
              C5869 * C5391 + C5863 * C5507) *
                 C141327 +
             (C5873 * C5327 + C5865 * C5331 + C5871 * C5326 + C5864 * C5330 +
              C5869 * C5325 + C5863 * C5329) *
                 C188) *
                C141365 +
            ((C16134 + C16133 + C16132) * C141327 +
             (C16131 + C16130 + C16129) * C188) *
                C141479) *
               C141499) *
              C141281 * C818 +
          ((((C16135 + C16136 + C16137) * C188 +
             (C16138 + C16139 + C16140) * C141327) *
                C141479 +
            ((C5869 * C5326 + C5863 * C5330 + C5871 * C5327 + C5864 * C5331 +
              C5873 * C5328 + C5865 * C5332) *
                 C188 +
             (C5869 * C5392 + C5863 * C5508 + C5871 * C5393 + C5864 * C5509 +
              C5873 * C5394 + C5865 * C5510) *
                 C141327) *
                C141365) *
               C141499 -
           (((C16140 + C16139 + C16138) * C141327 +
             (C16137 + C16136 + C16135) * C188) *
                C141365 +
            ((C5873 * C192 + C5865 * C365 + C5871 * C191 + C5864 * C364 +
              C5869 * C190 + C5863 * C363) *
                 C141327 +
             (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
              C5869 * C109 + C5863 * C115) *
                 C188) *
                C141479) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C21918 +
             (C29775 * C189 + C141219 * C362) * C21819 + C30547 * C21919 +
             C30548 * C21820 + C30549 * C21920 + C30550 * C21821) *
                C141479 +
            (C37115 + C37116 + C37099 + C37100 + C37101 + C37102) * C141365) *
               C1596 -
           (((C29775 * C29173 + C141219 * C29329) * C21821 +
             (C29775 * C29087 + C141219 * C29089) * C21920 +
             (C29775 * C13294 + C141219 * C13454) * C21820 +
             (C29775 * C13205 + C141219 * C13208) * C21919 +
             (C29775 * C5391 + C141219 * C5507) * C21819 +
             (C29775 * C5325 + C141219 * C5329) * C21918) *
                C141365 +
            (C37102 + C37101 + C37100 + C37099 + C37116 + C37115) * C141479) *
               C141499) *
              C141281 * C818 +
          (((C37117 + C37118 + C37107 + C37108 + C37109 + C37110) * C141479 +
            ((C29775 * C5326 + C141219 * C5330) * C21918 +
             (C29775 * C5392 + C141219 * C5508) * C21819 +
             (C29775 * C13206 + C141219 * C13209) * C21919 +
             (C29775 * C13295 + C141219 * C13455) * C21820 +
             (C29775 * C29088 + C141219 * C29090) * C21920 +
             (C29775 * C29174 + C141219 * C29330) * C21821) *
                C141365) *
               C141499 -
           ((C37110 + C37109 + C37108 + C37107 + C37118 + C37117) * C141365 +
            (C30556 * C21821 + C30555 * C21920 + C30554 * C21820 +
             C30553 * C21919 + (C29775 * C190 + C141219 * C363) * C21819 +
             (C29775 * C109 + C141219 * C115) * C21918) *
                C141479) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C5863 +
             C448 * C5864 + C449 * C5865) *
                C141479 +
            (C16259 + C16241 + C16242) * C141365) *
               C1596 -
           ((C16257 * C5865 + C16258 * C5864 +
             (C418 * C5325 + C5566 + C5566 + C141327 * C5561) * C5863) *
                C141365 +
            (C16242 + C16241 + C16259) * C141479) *
               C141499) *
              C141281 * C818 +
          (((C16247 + C16248 + C16249) * C141479 +
            (C16258 * C5863 + C16257 * C5864 +
             (C418 * C5328 + C5569 + C5569 + C141327 * C5564) * C5865) *
                C141365) *
               C141499 -
           ((C16249 + C16248 + C16247) * C141365 +
            (C450 * C5865 + C449 * C5864 + C448 * C5863) * C141479) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
             C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
             C22185 + C21821 * C3196) *
                C141219 * C141479 +
            (C37229 + C37230 + C37231) * C141219 * C141365) *
               C1596 -
           ((C22181 * C29087 + C29410 + C29410 + C21821 * C29405 +
             C22180 * C13205 + C29409 + C29409 + C21820 * C13531 +
             C22179 * C5325 + C29408 + C29408 + C21819 * C5561) *
                C141219 * C141365 +
            (C37231 + C37230 + C37229) * C141219 * C141479) *
               C141499) *
              C141281 * C818 +
          (((C24194 + C24193 + C24192) * C141219 * C141479 +
            (C22179 * C5326 + C29411 + C29411 + C21819 * C5562 +
             C22180 * C13206 + C29412 + C29412 + C21820 * C13532 +
             C22181 * C29088 + C29413 + C29413 + C21821 * C29406) *
                C141219 * C141365) *
               C141499 -
           ((C24192 + C24193 + C24194) * C141219 * C141365 +
            (C22221 + C22220 + C22219) * C141219 * C141479) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C188 +
             (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
              C141365 * C2040) *
                 C141327) *
                C5863 +
            ((C14105 + C14106) * C188 + (C14354 + C14355) * C141327) * C5864 +
            C14362 * C5865) *
               C1596 -
           (((C16366 + C16367) * C141327 + (C16001 + C16002) * C188) * C5865 +
            ((C16368 + C16369) * C141327 + (C16005 + C16006) * C188) * C5864 +
            ((C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
              C141479 * C2040) *
                 C141327 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C188) *
                C5863) *
               C141499) *
              C141281 * C818 +
          ((((C16006 + C16005) * C188 + (C16369 + C16368) * C141327) * C5863 +
            ((C16002 + C16001) * C188 + (C16367 + C16366) * C141327) * C5864 +
            ((C14078 * C1598 + C141479 * C1781 + C14079 * C5328 +
              C141365 * C5452) *
                 C188 +
             (C14078 * C1687 + C141479 * C2037 + C14079 * C5394 +
              C141365 * C5622) *
                 C141327) *
                C5865) *
               C141499 -
           (((C14358 + C14359) * C141327 + (C14115 + C14116) * C188) * C5865 +
            ((C14357 + C14356) * C141327 + (C14110 + C14109) * C188) * C5864 +
            ((C14355 + C14354) * C141327 + (C14106 + C14105) * C188) * C5863) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C21918 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C21819 +
            (C35986 + C35987) * C21919 + (C36316 + C36317) * C21820 +
            (C35990 + C35991) * C21920 + (C36318 + C36319) * C21821) *
               C141219 * C1596 -
           ((C14079 * C29173 + C141365 * C29487 + C14078 * C10595 +
             C141479 * C11041) *
                C21821 +
            (C14079 * C29087 + C141365 * C29251 + C14078 * C10470 +
             C141479 * C10699) *
                C21920 +
            (C14079 * C13294 + C141365 * C13614 + C14078 * C3572 +
             C141479 * C3864) *
                C21820 +
            (C14079 * C13205 + C141365 * C13374 + C14078 * C3490 +
             C141479 * C3646) *
                C21919 +
            (C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
             C141479 * C2040) *
                C21819 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C21918) *
               C141219 * C141499) *
              C141281 * C818 +
          (((C16006 + C16005) * C21918 + (C16369 + C16368) * C21819 +
            (C14078 * C3491 + C141479 * C3647 + C14079 * C13206 +
             C141365 * C13375) *
                C21919 +
            (C14078 * C3573 + C141479 * C3865 + C14079 * C13295 +
             C141365 * C13615) *
                C21820 +
            (C14078 * C10471 + C141479 * C10700 + C14079 * C29088 +
             C141365 * C29252) *
                C21920 +
            (C14078 * C10596 + C141479 * C11042 + C14079 * C29174 +
             C141365 * C29488) *
                C21821) *
               C141219 * C141499 -
           ((C36321 + C36320) * C21821 + (C35995 + C35994) * C21920 +
            (C15288 + C15289) * C21820 + (C14972 + C14973) * C21919 +
            (C14355 + C14354) * C21819 + (C14106 + C14105) * C21918) *
               C141219 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[128] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                        C5864 * C115 + C5873 * C110 + C5865 * C116) *
                           C14078 +
                       (C5869 * C276 + C5863 * C579 + C5871 * C277 +
                        C5864 * C580 + C5873 * C278 + C5865 * C581) *
                           C141479 +
                       (C16129 + C16130 + C16131) * C14079 +
                       (C16480 + C16481 + C16482) * C141365) *
                          C141327 * C1596 -
                      ((C5873 * C5451 + C5865 * C5675 + C5871 * C5450 +
                        C5864 * C5674 + C5869 * C5449 + C5863 * C5673) *
                           C141365 +
                       (C5873 * C5327 + C5865 * C5331 + C5871 * C5326 +
                        C5864 * C5330 + C5869 * C5325 + C5863 * C5329) *
                           C14079 +
                       (C16482 + C16481 + C16480) * C141479 +
                       (C16131 + C16130 + C16129) * C14078) *
                          C141327 * C141499) *
                         C141281 * C818 +
                     (((C16135 + C16136 + C16137) * C14078 +
                       (C16483 + C16484 + C16485) * C141479 +
                       (C5869 * C5326 + C5863 * C5330 + C5871 * C5327 +
                        C5864 * C5331 + C5873 * C5328 + C5865 * C5332) *
                           C14079 +
                       (C5869 * C5450 + C5863 * C5674 + C5871 * C5451 +
                        C5864 * C5675 + C5873 * C5452 + C5865 * C5676) *
                           C141365) *
                          C141327 * C141499 -
                      ((C16485 + C16484 + C16483) * C141365 +
                       (C16137 + C16136 + C16135) * C14079 +
                       (C5873 * C279 + C5865 * C582 + C5871 * C278 +
                        C5864 * C581 + C5869 * C277 + C5863 * C580) *
                           C141479 +
                       (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                        C5864 * C116 + C5869 * C109 + C5863 * C115) *
                           C14078) *
                          C141327 * C1596) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C29775 * C108 + C141219 * C114) * C14078 +
                        (C29775 * C276 + C141219 * C579) * C141479 +
                        C37111 * C14079 + C37432 * C141365) *
                           C21819 +
                       (C36420 + C36421 + C36422 + C36423) * C21820 +
                       (C36424 + C36425 + C36426 + C36427) * C21821) *
                          C1596 -
                      (((C29775 * C29251 + C141219 * C29563) * C141365 +
                        (C29775 * C29087 + C141219 * C29089) * C14079 +
                        C33176 * C141479 + C32955 * C14078) *
                           C21821 +
                       ((C29775 * C13374 + C141219 * C13691) * C141365 +
                        (C29775 * C13205 + C141219 * C13208) * C14079 +
                        C33177 * C141479 + C32957 * C14078) *
                           C21820 +
                       ((C29775 * C5449 + C141219 * C5673) * C141365 +
                        (C29775 * C5325 + C141219 * C5329) * C14079 +
                        C37432 * C141479 + C37111 * C14078) *
                           C21819) *
                          C141499) *
                         C141281 * C818 +
                     (((C37113 * C14078 + C37433 * C141479 +
                        (C29775 * C5326 + C141219 * C5330) * C14079 +
                        (C29775 * C5450 + C141219 * C5674) * C141365) *
                           C21819 +
                       (C36104 * C14078 + C36438 * C141479 +
                        (C29775 * C13206 + C141219 * C13209) * C14079 +
                        (C29775 * C13375 + C141219 * C13692) * C141365) *
                           C21820 +
                       (C36106 * C14078 + C36439 * C141479 +
                        (C29775 * C29088 + C141219 * C29090) * C14079 +
                        (C29775 * C29252 + C141219 * C29564) * C141365) *
                           C21821) *
                          C141499 -
                      ((C36441 + C36435 + C36434 + C36433) * C21821 +
                       (C36440 + C36430 + C36429 + C36428) * C21820 +
                       (C37433 * C141365 + C37113 * C14079 +
                        (C29775 * C277 + C141219 * C580) * C141479 +
                        (C29775 * C109 + C141219 * C115) * C14078) *
                           C21819) *
                          C1596) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C14078 +
             (C188 * C276 + C141327 * C635) * C141479 + C15877 * C14079 +
             C16596 * C141365) *
                C5863 +
            (C14511 + C14512 + C14513 + C14514) * C5864 + C14525 * C5865) *
               C1596 -
           ((C16599 + C16588 + C16589 + C16590) * C5865 +
            (C16600 + C16593 + C16594 + C16595) * C5864 +
            ((C188 * C5449 + C141327 * C5727) * C141365 +
             (C188 * C5325 + C141327 * C5391) * C14079 + C16596 * C141479 +
             C15877 * C14078) *
                C5863) *
               C141499) *
              C141281 * C818 +
          (((C16595 + C16594 + C16593 + C16600) * C5863 +
            (C16590 + C16589 + C16588 + C16599) * C5864 +
            (C1711 * C14078 + C2209 * C141479 +
             (C188 * C5328 + C141327 * C5394) * C14079 +
             (C188 * C5452 + C141327 * C5730) * C141365) *
                C5865) *
               C141499 -
           ((C14519 + C14520 + C14521 + C14522) * C5865 +
            (C14518 + C14517 + C14516 + C14515) * C5864 +
            (C14514 + C14513 + C14512 + C14511) * C5863) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C14078 +
            (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
             C21920 * C3084 + C21821 * C3362) *
                C141479 +
            (C36893 + C36894 + C36895) * C14079 +
            (C37538 + C37539 + C37540) * C141365) *
               C141219 * C1596 -
           ((C21920 * C29251 + C21821 * C29639 + C21919 * C13374 +
             C21820 * C13768 + C21918 * C5449 + C21819 * C5727) *
                C141365 +
            (C21920 * C29087 + C21821 * C29173 + C21919 * C13205 +
             C21820 * C13294 + C21918 * C5325 + C21819 * C5391) *
                C14079 +
            (C37540 + C37539 + C37538) * C141479 +
            (C36895 + C36894 + C36893) * C14078) *
               C141219 * C141499) *
              C141281 * C818 +
          (((C23870 + C23869 + C23868) * C14078 +
            (C24506 + C24505 + C24504) * C141479 +
            (C21918 * C5326 + C21819 * C5392 + C21919 * C13206 +
             C21820 * C13295 + C21920 * C29088 + C21821 * C29174) *
                C14079 +
            (C21918 * C5450 + C21819 * C5728 + C21919 * C13375 +
             C21820 * C13769 + C21920 * C29252 + C21821 * C29640) *
                C141365) *
               C141219 * C141499 -
           ((C24504 + C24505 + C24506) * C141365 +
            (C23868 + C23869 + C23870) * C14079 +
            (C22473 + C22472 + C22471) * C141479 +
            (C21948 + C21947 + C21946) * C14078) *
               C141219 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[128] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 + C14600 * C1601 +
             C14603 + C14603 + C141365 * C2283) *
                C141327 * C5863 +
            (C14636 + C14637) * C141327 * C5864 + C14643 * C5865) *
               C1596 -
           ((C16723 + C16724) * C141327 * C5865 +
            (C16725 + C16726) * C141327 * C5864 +
            (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
             C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                C141327 * C5863) *
               C141499) *
              C141281 * C818 +
          (((C16726 + C16725) * C141327 * C5863 +
            (C16724 + C16723) * C141327 * C5864 +
            (C14599 * C1598 + C16713 + C16713 + C141479 * C2280 +
             C14600 * C5328 + C16714 + C16714 + C141365 * C5784) *
                C141327 * C5865) *
               C141499 -
           ((C14640 + C14641) * C141327 * C5865 +
            (C14639 + C14638) * C141327 * C5864 +
            (C14637 + C14636) * C141327 * C5863) *
               C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 + C14600 * C1601 +
             C14603 + C14603 + C141365 * C2283) *
                C21819 +
            (C36666 + C36667) * C21820 + (C36668 + C36669) * C21821) *
               C141219 * C1596 -
           ((C14600 * C29087 + C37639 + C37639 + C141365 * C29715 +
             C14599 * C10470 + C37640 + C37640 + C141479 * C11356) *
                C21821 +
            (C14600 * C13205 + C19193 + C19193 + C141365 * C13845 +
             C14599 * C3490 + C19192 + C19192 + C141479 * C4074) *
                C21820 +
            (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
             C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                C21819) *
               C141219 * C141499) *
              C141281 * C818 +
          (((C16726 + C16725) * C21819 +
            (C14599 * C3491 + C19194 + C19194 + C141479 * C4075 +
             C14600 * C13206 + C19195 + C19195 + C141365 * C13846) *
                C21820 +
            (C14599 * C10471 + C37641 + C37641 + C141479 * C11357 +
             C14600 * C29088 + C37642 + C37642 + C141365 * C29716) *
                C21821) *
               C141219 * C141499 -
           ((C36671 + C36670) * C21821 + (C15624 + C15625) * C21820 +
            (C14637 + C14636) * C21819) *
               C141219 * C1596) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 +
             C5876 + C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
             C5865 * C122) *
                C141479 +
            (C15751 + C15752 + C15753) * C141365) *
               C141327 * C141298 * C2374 -
           ((C10495 + C10496 + C10497) * C141365 +
            (C6742 + C6741 + C6740) * C141479) *
               C141327 * C141298 * C141497) *
              C2376 +
          (((C6743 + C6744 + C6745) * C141479 +
            (C5868 * C3491 + C7821 + C7821 + C5863 * C3499 + C5870 * C3492 +
             C7822 + C7822 + C5864 * C3500 + C5872 * C3493 + C7823 + C7823 +
             C5865 * C3501) *
                C141365) *
               C141327 * C141298 * C141497 -
           ((C15756 + C15755 + C15754) * C141365 +
            (C5872 * C111 + C5884 + C5884 + C5865 * C123 + C5870 * C110 +
             C5885 + C5885 + C5864 * C122 + C5868 * C109 + C5886 + C5886 +
             C5863 * C121) *
                C141479) *
               C141327 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141479 +
             C36781 * C141365) *
                C21819 +
            (C35748 + C35749) * C21820 + (C35750 + C35751) * C21821) *
               C141298 * C2374 -
           ((C32719 * C141365 + C30303 * C141479) * C21821 +
            (C35751 + C35750) * C21820 + (C35749 + C35748) * C21819) *
               C141298 * C141497) *
              C2376 +
          (((C35752 + C35764) * C21819 + (C35755 + C35765) * C21820 +
            (C30306 * C141479 +
             (C29774 * C26352 + C31000 + C31000 + C141219 * C26356) * C141365) *
                C21821) *
               C141298 * C141497 -
           ((C35765 + C35755) * C21821 + (C35764 + C35752) * C21820 +
            (C36782 * C141365 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141479) *
                C21819) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexy[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C5869 +
             (C188 * C114 + C141327 * C195) * C5863 + C218 * C5871 +
             C219 * C5864 + C220 * C5873 + C221 * C5865) *
                C141479 +
            (C15883 + C15884 + C15859 + C15860 + C15861 + C15862) * C141365) *
               C141298 * C2374 -
           ((C14848 * C5865 + C14849 * C5873 + C14850 * C5864 + C14851 * C5871 +
             (C188 * C3494 + C141327 * C3576) * C5863 +
             (C188 * C3490 + C141327 * C3572) * C5869) *
                C141365 +
            (C934 * C5865 + C935 * C5873 + C936 * C5864 + C937 * C5871 +
             (C188 * C828 + C141327 * C917) * C5863 +
             (C188 * C823 + C141327 * C912) * C5869) *
                C141479) *
               C141298 * C141497) *
              C2376 +
          (((C937 * C5869 + C936 * C5863 + C935 * C5871 + C934 * C5864 +
             C933 * C5873 + C932 * C5865) *
                C141479 +
            (C14851 * C5869 + C14850 * C5863 + C14849 * C5871 + C14848 * C5864 +
             (C188 * C3493 + C141327 * C3575) * C5873 +
             (C188 * C3497 + C141327 * C3579) * C5865) *
                C141365) *
               C141298 * C141497 -
           ((C15876 + C15875 + C15874 + C15873 + C15872 + C15871) * C141365 +
            (C223 * C5865 + C222 * C5873 + C221 * C5864 + C220 * C5871 +
             C219 * C5863 + C218 * C5869) *
                C141479) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
              C21920 * C2960 + C21821 * C3026) *
                 C29775 +
             (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
              C21920 * C2964 + C21821 * C3030) *
                 C141219) *
                C141479 +
            ((C36893 + C36894 + C36895) * C29775 +
             (C36896 + C36897 + C36898) * C141219) *
                C141365) *
               C141298 * C2374 -
           (((C21920 * C26353 + C21821 * C26479 + C21919 * C10473 +
              C21820 * C10598 + C21918 * C3494 + C21819 * C3576) *
                 C141219 +
             (C21920 * C26351 + C21821 * C26477 + C21919 * C10470 +
              C21820 * C10595 + C21918 * C3490 + C21819 * C3572) *
                 C29775) *
                C141365 +
            ((C21920 * C9670 + C21821 * C9771 + C21919 * C2964 +
              C21820 * C3030 + C21918 * C828 + C21819 * C917) *
                 C141219 +
             (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 +
              C21820 * C3026 + C21918 * C823 + C21819 * C912) *
                 C29775) *
                C141479) *
               C141298 * C141497) *
              C2376 +
          ((((C22814 + C22813 + C22812) * C29775 +
             (C22811 + C22810 + C22809) * C141219) *
                C141479 +
            ((C21918 * C3491 + C21819 * C3573 + C21919 * C10471 +
              C21820 * C10596 + C21920 * C26352 + C21821 * C26478) *
                 C29775 +
             (C21918 * C3495 + C21819 * C3577 + C21919 * C10474 +
              C21820 * C10599 + C21920 * C26354 + C21821 * C26480) *
                 C141219) *
                C141365) *
               C141298 * C141497 -
           (((C23865 + C23866 + C23867) * C141219 +
             (C23868 + C23869 + C23870) * C29775) *
                C141365 +
            ((C21951 + C21950 + C21949) * C141219 +
             (C21948 + C21947 + C21946) * C29775) *
                C141479) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C5869 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C5863 +
            (C14105 + C14106) * C5871 + (C14107 + C14108) * C5864 +
            C14117 * C5873 + C14118 * C5865) *
               C141327 * C141298 * C2374 -
           ((C14966 + C14967) * C5865 + (C14968 + C14969) * C5873 +
            (C14970 + C14971) * C5864 + (C14972 + C14973) * C5871 +
            (C14079 * C3494 + C141365 * C3650 + C14078 * C828 +
             C141479 * C1011) *
                C5863 +
            (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
             C141479 * C1006) *
                C5869) *
               C141327 * C141298 * C141497) *
              C2376 +
          (((C14973 + C14972) * C5869 + (C14971 + C14970) * C5863 +
            (C14969 + C14968) * C5871 + (C14967 + C14966) * C5864 +
            (C14078 * C820 + C141479 * C1003 + C14079 * C3493 +
             C141365 * C3649) *
                C5873 +
            (C14078 * C825 + C141479 * C1008 + C14079 * C3497 +
             C141365 * C3653) *
                C5865) *
               C141327 * C141298 * C141497 -
           ((C14113 + C14114) * C5865 + (C14115 + C14116) * C5873 +
            (C14112 + C14111) * C5864 + (C14110 + C14109) * C5871 +
            (C14108 + C14107) * C5863 + (C14106 + C14105) * C5869) *
               C141327 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C29775 +
             (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
              C141365 * C1789) *
                 C141219) *
                C21819 +
            ((C35986 + C35987) * C29775 + (C35988 + C35989) * C141219) *
                C21820 +
            ((C35990 + C35991) * C29775 + (C35992 + C35993) * C141219) *
                C21821) *
               C141298 * C2374 -
           (((C14079 * C26353 + C141365 * C26581 + C14078 * C9670 +
              C141479 * C9851) *
                 C141219 +
             (C14079 * C26351 + C141365 * C26579 + C14078 * C9667 +
              C141479 * C9848) *
                 C29775) *
                C21821 +
            ((C35993 + C35992) * C141219 + (C35991 + C35990) * C29775) *
                C21820 +
            ((C35989 + C35988) * C141219 + (C35987 + C35986) * C29775) *
                C21819) *
               C141298 * C141497) *
              C2376 +
          ((((C14973 + C14972) * C29775 + (C14971 + C14970) * C141219) *
                C21819 +
            ((C35994 + C35995) * C29775 + (C35996 + C35997) * C141219) *
                C21820 +
            ((C14078 * C9668 + C141479 * C9849 + C14079 * C26352 +
              C141365 * C26580) *
                 C29775 +
             (C14078 * C9671 + C141479 * C9852 + C14079 * C26354 +
              C141365 * C26582) *
                 C141219) *
                C21821) *
               C141298 * C141497 -
           (((C35997 + C35996) * C141219 + (C35995 + C35994) * C29775) *
                C21821 +
            ((C14970 + C14971) * C141219 + (C14972 + C14973) * C29775) *
                C21820 +
            ((C14108 + C14107) * C141219 + (C14106 + C14105) * C29775) *
                C21819) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C188 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
              C5873 * C191 + C5865 * C364) *
                 C141327) *
                C141479 +
            ((C16129 + C16130 + C16131) * C188 +
             (C16132 + C16133 + C16134) * C141327) *
                C141365) *
               C141298 * C2374 -
           (((C10831 + C10832 + C10833) * C141327 +
             (C10834 + C10835 + C10836) * C188) *
                C141365 +
            ((C7123 + C7122 + C7121) * C141327 +
             (C7120 + C7119 + C7118) * C188) *
                C141479) *
               C141298 * C141497) *
              C2376 +
          ((((C7124 + C7125 + C7126) * C188 +
             (C7127 + C7128 + C7129) * C141327) *
                C141479 +
            ((C5869 * C3491 + C5863 * C3495 + C5871 * C3492 + C5864 * C3496 +
              C5873 * C3493 + C5865 * C3497) *
                 C188 +
             (C5869 * C3573 + C5863 * C3721 + C5871 * C3574 + C5864 * C3722 +
              C5873 * C3575 + C5865 * C3723) *
                 C141327) *
                C141365) *
               C141298 * C141497 -
           (((C16140 + C16139 + C16138) * C141327 +
             (C16137 + C16136 + C16135) * C188) *
                C141365 +
            ((C5873 * C192 + C5865 * C365 + C5871 * C191 + C5864 * C364 +
              C5869 * C190 + C5863 * C363) *
                 C141327 +
             (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
              C5869 * C109 + C5863 * C115) *
                 C188) *
                C141479) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C21918 +
             (C29775 * C189 + C141219 * C362) * C21819 + C30547 * C21919 +
             C30548 * C21820 + C30549 * C21920 + C30550 * C21821) *
                C141479 +
            (C37115 + C37116 + C37099 + C37100 + C37101 + C37102) * C141365) *
               C141298 * C2374 -
           ((C32952 * C21821 + C32953 * C21920 + C32954 * C21820 +
             C32955 * C21919 + C32956 * C21819 + C32957 * C21918) *
                C141365 +
            (C30552 * C21821 + C30551 * C21920 + C30550 * C21820 +
             C30549 * C21919 + C30548 * C21819 + C30547 * C21918) *
                C141479) *
               C141298 * C141497) *
              C2376 +
          (((C30553 * C21918 + C30554 * C21819 + C30555 * C21919 +
             C30556 * C21820 + C30557 * C21920 + C30558 * C21821) *
                C141479 +
            (C36104 * C21918 + C36105 * C21819 + C36106 * C21919 +
             C36107 * C21820 + (C29775 * C26352 + C141219 * C26354) * C21920 +
             (C29775 * C26478 + C141219 * C26696) * C21821) *
                C141365) *
               C141298 * C141497 -
           ((C37110 + C37109 + C37108 + C37107 + C37118 + C37117) * C141365 +
            (C30556 * C21821 + C30555 * C21920 + C30554 * C21820 +
             C30553 * C21919 + (C29775 * C190 + C141219 * C363) * C21819 +
             (C29775 * C109 + C141219 * C115) * C21918) *
                C141479) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C5863 +
             C448 * C5864 + C449 * C5865) *
                C141479 +
            (C16259 + C16241 + C16242) * C141365) *
               C141298 * C2374 -
           ((C15178 * C5865 + C15179 * C5864 +
             (C418 * C3490 + C3795 + C3795 + C141327 * C3790) * C5863) *
                C141365 +
            (C1192 * C5865 + C1193 * C5864 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C5863) *
                C141479) *
               C141298 * C141497) *
              C2376 +
          (((C1193 * C5863 + C1192 * C5864 + C1191 * C5865) * C141479 +
            (C15179 * C5863 + C15178 * C5864 +
             (C418 * C3493 + C3798 + C3798 + C141327 * C3793) * C5865) *
                C141365) *
               C141298 * C141497 -
           ((C16249 + C16248 + C16247) * C141365 +
            (C450 * C5865 + C449 * C5864 + C448 * C5863) * C141479) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
             C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
             C22185 + C21821 * C3196) *
                C141219 * C141479 +
            (C37229 + C37230 + C37231) * C141219 * C141365) *
               C141298 * C2374 -
           ((C22181 * C26351 + C26824 + C26824 + C21821 * C26819 +
             C22180 * C10470 + C26823 + C26823 + C21820 * C10934 +
             C22179 * C3490 + C26822 + C26822 + C21819 * C3790) *
                C141219 * C141365 +
            (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
             C22180 * C2960 + C23189 + C23189 + C21820 * C3196 + C22179 * C823 +
             C23190 + C23190 + C21819 * C1171) *
                C141219 * C141479) *
               C141298 * C141497) *
              C2376 +
          (((C23202 + C23201 + C23200) * C141219 * C141479 +
            (C22179 * C3491 + C26825 + C26825 + C21819 * C3791 +
             C22180 * C10471 + C26826 + C26826 + C21820 * C10935 +
             C22181 * C26352 + C26827 + C26827 + C21821 * C26820) *
                C141219 * C141365) *
               C141298 * C141497 -
           ((C24192 + C24193 + C24194) * C141219 * C141365 +
            (C22221 + C22220 + C22219) * C141219 * C141479) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C188 +
             (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
              C141365 * C2040) *
                 C141327) *
                C5863 +
            ((C14105 + C14106) * C188 + (C14354 + C14355) * C141327) * C5864 +
            C14362 * C5865) *
               C141298 * C2374 -
           (((C15286 + C15287) * C141327 + (C14968 + C14969) * C188) * C5865 +
            ((C15288 + C15289) * C141327 + (C14972 + C14973) * C188) * C5864 +
            ((C14079 * C3572 + C141365 * C3864 + C14078 * C912 +
              C141479 * C1262) *
                 C141327 +
             (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
              C141479 * C1006) *
                 C188) *
                C5863) *
               C141298 * C141497) *
              C2376 +
          ((((C14973 + C14972) * C188 + (C15289 + C15288) * C141327) * C5863 +
            ((C14969 + C14968) * C188 + (C15287 + C15286) * C141327) * C5864 +
            ((C14078 * C820 + C141479 * C1003 + C14079 * C3493 +
              C141365 * C3649) *
                 C188 +
             (C14078 * C909 + C141479 * C1259 + C14079 * C3575 +
              C141365 * C3867) *
                 C141327) *
                C5865) *
               C141298 * C141497 -
           (((C14358 + C14359) * C141327 + (C14115 + C14116) * C188) * C5865 +
            ((C14357 + C14356) * C141327 + (C14110 + C14109) * C188) * C5864 +
            ((C14355 + C14354) * C141327 + (C14106 + C14105) * C188) * C5863) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C21918 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C21819 +
            (C35986 + C35987) * C21919 + (C36316 + C36317) * C21820 +
            (C35990 + C35991) * C21920 + (C36318 + C36319) * C21821) *
               C141219 * C141298 * C2374 -
           ((C14079 * C26477 + C141365 * C26925 + C14078 * C9768 +
             C141479 * C10118) *
                C21821 +
            (C14079 * C26351 + C141365 * C26579 + C14078 * C9667 +
             C141479 * C9848) *
                C21920 +
            (C36319 + C36318) * C21820 + (C35991 + C35990) * C21919 +
            (C36317 + C36316) * C21819 + (C35987 + C35986) * C21918) *
               C141219 * C141298 * C141497) *
              C2376 +
          (((C14973 + C14972) * C21918 + (C15289 + C15288) * C21819 +
            (C35994 + C35995) * C21919 + (C36320 + C36321) * C21820 +
            (C14078 * C9668 + C141479 * C9849 + C14079 * C26352 +
             C141365 * C26580) *
                C21920 +
            (C14078 * C9769 + C141479 * C10119 + C14079 * C26478 +
             C141365 * C26926) *
                C21821) *
               C141219 * C141298 * C141497 -
           ((C36321 + C36320) * C21821 + (C35995 + C35994) * C21920 +
            (C15288 + C15289) * C21820 + (C14972 + C14973) * C21919 +
            (C14355 + C14354) * C21819 + (C14106 + C14105) * C21918) *
               C141219 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[129] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C5869 * C108 + C5863 * C114 + C5871 * C109 +
                        C5864 * C115 + C5873 * C110 + C5865 * C116) *
                           C14078 +
                       (C5869 * C276 + C5863 * C579 + C5871 * C277 +
                        C5864 * C580 + C5873 * C278 + C5865 * C581) *
                           C141479 +
                       (C16129 + C16130 + C16131) * C14079 +
                       (C16480 + C16481 + C16482) * C141365) *
                          C141327 * C141298 * C2374 -
                      ((C11155 + C11156 + C11157) * C141365 +
                       (C10834 + C10835 + C10836) * C14079 +
                       (C7483 + C7482 + C7481) * C141479 +
                       (C7120 + C7119 + C7118) * C14078) *
                          C141327 * C141298 * C141497) *
                         C2376 +
                     (((C7124 + C7125 + C7126) * C14078 +
                       (C7484 + C7485 + C7486) * C141479 +
                       (C5869 * C3491 + C5863 * C3495 + C5871 * C3492 +
                        C5864 * C3496 + C5873 * C3493 + C5865 * C3497) *
                           C14079 +
                       (C5869 * C3647 + C5863 * C3935 + C5871 * C3648 +
                        C5864 * C3936 + C5873 * C3649 + C5865 * C3937) *
                           C141365) *
                          C141327 * C141298 * C141497 -
                      ((C16485 + C16484 + C16483) * C141365 +
                       (C16137 + C16136 + C16135) * C14079 +
                       (C5873 * C279 + C5865 * C582 + C5871 * C278 +
                        C5864 * C581 + C5869 * C277 + C5863 * C580) *
                           C141479 +
                       (C5873 * C111 + C5865 * C117 + C5871 * C110 +
                        C5864 * C116 + C5869 * C109 + C5863 * C115) *
                           C14078) *
                          C141327 * C141298 * C2374) *
                         C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C29775 * C108 + C141219 * C114) * C14078 +
                        (C29775 * C276 + C141219 * C579) * C141479 +
                        C37111 * C14079 + C37432 * C141365) *
                           C21819 +
                       (C36420 + C36421 + C36422 + C36423) * C21820 +
                       (C36424 + C36425 + C36426 + C36427) * C21821) *
                          C141298 * C2374 -
                      ((C33175 * C141365 + C32953 * C14079 + C30785 * C141479 +
                        C30551 * C14078) *
                           C21821 +
                       (C36427 + C36426 + C36425 + C36424) * C21820 +
                       (C36423 + C36422 + C36421 + C36420) * C21819) *
                          C141298 * C141497) *
                         C2376 +
                     (((C36428 + C36429 + C36430 + C36440) * C21819 +
                       (C36433 + C36434 + C36435 + C36441) * C21820 +
                       (C30557 * C14078 + C30788 * C141479 +
                        (C29775 * C26352 + C141219 * C26354) * C14079 +
                        (C29775 * C26580 + C141219 * C27029) * C141365) *
                           C21821) *
                          C141298 * C141497 -
                      ((C36441 + C36435 + C36434 + C36433) * C21821 +
                       (C36440 + C36430 + C36429 + C36428) * C21820 +
                       (C37433 * C141365 + C37113 * C14079 +
                        (C29775 * C277 + C141219 * C580) * C141479 +
                        (C29775 * C109 + C141219 * C115) * C14078) *
                           C21819) *
                          C141298 * C2374) *
                         C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C14078 +
             (C188 * C276 + C141327 * C635) * C141479 + C15877 * C14079 +
             C16596 * C141365) *
                C5863 +
            (C14511 + C14512 + C14513 + C14514) * C5864 + C14525 * C5865) *
               C141298 * C2374 -
           ((C15498 + C15488 + C15489 + C15490) * C5865 +
            (C15499 + C15493 + C15494 + C15495) * C5864 +
            ((C188 * C3646 + C141327 * C4004) * C141365 +
             (C188 * C3490 + C141327 * C3572) * C14079 +
             (C188 * C1006 + C141327 * C1419) * C141479 +
             (C188 * C823 + C141327 * C912) * C14078) *
                C5863) *
               C141298 * C141497) *
              C2376 +
          (((C15495 + C15494 + C15493 + C15499) * C5863 +
            (C15490 + C15489 + C15488 + C15498) * C5864 +
            (C933 * C14078 + C1431 * C141479 +
             (C188 * C3493 + C141327 * C3575) * C14079 +
             (C188 * C3649 + C141327 * C4007) * C141365) *
                C5865) *
               C141298 * C141497 -
           ((C14519 + C14520 + C14521 + C14522) * C5865 +
            (C14518 + C14517 + C14516 + C14515) * C5864 +
            (C14514 + C14513 + C14512 + C14511) * C5863) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C14078 +
            (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
             C21920 * C3084 + C21821 * C3362) *
                C141479 +
            (C36893 + C36894 + C36895) * C14079 +
            (C37538 + C37539 + C37540) * C141365) *
               C141219 * C141298 * C2374 -
           ((C21920 * C26579 + C21821 * C27140 + C21919 * C10699 +
             C21820 * C11255 + C21918 * C3646 + C21819 * C4004) *
                C141365 +
            (C21920 * C26351 + C21821 * C26477 + C21919 * C10470 +
             C21820 * C10595 + C21918 * C3490 + C21819 * C3572) *
                C14079 +
            (C21920 * C9848 + C21821 * C10284 + C21919 * C3084 +
             C21820 * C3362 + C21918 * C1006 + C21819 * C1419) *
                C141479 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C14078) *
               C141219 * C141298 * C141497) *
              C2376 +
          (((C22814 + C22813 + C22812) * C14078 +
            (C23538 + C23537 + C23536) * C141479 +
            (C21918 * C3491 + C21819 * C3573 + C21919 * C10471 +
             C21820 * C10596 + C21920 * C26352 + C21821 * C26478) *
                C14079 +
            (C21918 * C3647 + C21819 * C4005 + C21919 * C10700 +
             C21820 * C11256 + C21920 * C26580 + C21821 * C27141) *
                C141365) *
               C141219 * C141298 * C141497 -
           ((C24504 + C24505 + C24506) * C141365 +
            (C23868 + C23869 + C23870) * C14079 +
            (C22473 + C22472 + C22471) * C141479 +
            (C21948 + C21947 + C21946) * C14078) *
               C141219 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 + C14600 * C1601 +
             C14603 + C14603 + C141365 * C2283) *
                C141327 * C5863 +
            (C14636 + C14637) * C141327 * C5864 + C14643 * C5865) *
               C141298 * C2374 -
           ((C15622 + C15623) * C141327 * C5865 +
            (C15624 + C15625) * C141327 * C5864 +
            (C14600 * C3490 + C15610 + C15610 + C141365 * C4074 +
             C14599 * C823 + C15611 + C15611 + C141479 * C1505) *
                C141327 * C5863) *
               C141298 * C141497) *
              C2376 +
          (((C15625 + C15624) * C141327 * C5863 +
            (C15623 + C15622) * C141327 * C5864 +
            (C14599 * C820 + C15612 + C15612 + C141479 * C1502 +
             C14600 * C3493 + C15613 + C15613 + C141365 * C4077) *
                C141327 * C5865) *
               C141298 * C141497 -
           ((C14640 + C14641) * C141327 * C5865 +
            (C14639 + C14638) * C141327 * C5864 +
            (C14637 + C14636) * C141327 * C5863) *
               C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 + C14600 * C1601 +
             C14603 + C14603 + C141365 * C2283) *
                C21819 +
            (C36666 + C36667) * C21820 + (C36668 + C36669) * C21821) *
               C141219 * C141298 * C2374 -
           ((C14600 * C26351 + C36646 + C36646 + C141365 * C27240 +
             C14599 * C9667 + C36647 + C36647 + C141479 * C10361) *
                C21821 +
            (C36669 + C36668) * C21820 + (C36667 + C36666) * C21819) *
               C141219 * C141298 * C141497) *
              C2376 +
          (((C15625 + C15624) * C21819 + (C36670 + C36671) * C21820 +
            (C14599 * C9668 + C36652 + C36652 + C141479 * C10362 +
             C14600 * C26352 + C36653 + C36653 + C141365 * C27241) *
                C21821) *
               C141219 * C141298 * C141497 -
           ((C36671 + C36670) * C21821 + (C15624 + C15625) * C21820 +
            (C14637 + C14636) * C21819) *
               C141219 * C141298 * C2374) *
              C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexx[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 + C5876 +
            C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
            C5865 * C122) *
               C141479 +
           (C15751 + C15752 + C15753) * C141365) *
              C141327 * C141298 * C2956 -
          ((C10495 + C10496 + C10497) * C141365 +
           (C6742 + C6741 + C6740) * C141479) *
              C141327 * C141298 * C2957 +
          ((C9694 + C9693 + C9692) * C141479 +
           (C5868 * C10470 + C10486 + C10486 + C5863 * C10476 + C5870 * C10471 +
            C10487 + C10487 + C5864 * C10477 + C5872 * C10472 + C10488 +
            C10488 + C5865 * C10478) *
               C141365) *
              C141327 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141479 +
            C36781 * C141365) *
               C21819 +
           (C35748 + C35749) * C21820 + C38599 * C21821) *
              C141298 * C2956 -
          ((C38600 + C38601) * C21821 + (C35751 + C35750) * C21820 +
           (C35749 + C35748) * C21819) *
              C141298 * C2957 +
          (C38599 * C21819 + (C38601 + C38600) * C21820 +
           (C32189 * C141479 +
            (C29774 * C32702 + C32712 + C32712 + C141219 * C32704) * C141365) *
               C21821) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C5869 +
            (C188 * C114 + C141327 * C195) * C5863 + C218 * C5871 +
            C219 * C5864 + C220 * C5873 + C221 * C5865) *
               C141479 +
           (C15883 + C15884 + C15859 + C15860 + C15861 + C15862) * C141365) *
              C141298 * C2956 -
          ((C14848 * C5865 + C14849 * C5873 + C14850 * C5864 + C14851 * C5871 +
            (C188 * C3494 + C141327 * C3576) * C5863 +
            (C188 * C3490 + C141327 * C3572) * C5869) *
               C141365 +
           (C934 * C5865 + C935 * C5873 + C936 * C5864 + C937 * C5871 +
            (C188 * C828 + C141327 * C917) * C5863 +
            (C188 * C823 + C141327 * C912) * C5869) *
               C141479) *
              C141298 * C2957 +
          (((C188 * C2960 + C141327 * C3026) * C5869 +
            (C188 * C2964 + C141327 * C3030) * C5863 +
            (C188 * C2961 + C141327 * C3027) * C5871 +
            (C188 * C2965 + C141327 * C3031) * C5864 +
            (C188 * C2962 + C141327 * C3028) * C5873 +
            (C188 * C2966 + C141327 * C3032) * C5865) *
               C141479 +
           ((C188 * C10470 + C141327 * C10595) * C5869 +
            (C188 * C10473 + C141327 * C10598) * C5863 +
            (C188 * C10471 + C141327 * C10596) * C5871 +
            (C188 * C10474 + C141327 * C10599) * C5864 +
            (C188 * C10472 + C141327 * C10597) * C5873 +
            (C188 * C10475 + C141327 * C10600) * C5865) *
               C141365) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C29775 +
            (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
             C21920 * C2964 + C21821 * C3030) *
                C141219) *
               C141479 +
           ((C36893 + C36894 + C36895) * C29775 +
            (C36896 + C36897 + C36898) * C141219) *
               C141365) *
              C141298 * C2956 -
          (((C21920 * C26353 + C21821 * C26479 + C21919 * C10473 +
             C21820 * C10598 + C21918 * C3494 + C21819 * C3576) *
                C141219 +
            (C21920 * C26351 + C21821 * C26477 + C21919 * C10470 +
             C21820 * C10595 + C21918 * C3490 + C21819 * C3572) *
                C29775) *
               C141365 +
           ((C21920 * C9670 + C21821 * C9771 + C21919 * C2964 + C21820 * C3030 +
             C21918 * C828 + C21819 * C917) *
                C141219 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C29775) *
               C141479) *
              C141298 * C2957 +
          (((C21918 * C2960 + C21819 * C3026 + C21919 * C9667 + C21820 * C9768 +
             C21920 * C25568 + C21821 * C25662) *
                C29775 +
            (C21918 * C2964 + C21819 * C3030 + C21919 * C9670 + C21820 * C9771 +
             C21920 * C25570 + C21821 * C25664) *
                C141219) *
               C141479 +
           ((C21918 * C10470 + C21819 * C10595 + C21919 * C26351 +
             C21820 * C26477 + C21920 * C32702 + C21821 * C32790) *
                C29775 +
            (C21918 * C10473 + C21819 * C10598 + C21919 * C26353 +
             C21820 * C26479 + C21920 * C32703 + C21821 * C32791) *
                C141219) *
               C141365) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14078 * C108 + C141479 * C276 + C14079 * C1601 + C141365 * C1784) *
               C5869 +
           (C14078 * C114 + C141479 * C282 + C14079 * C1606 + C141365 * C1789) *
               C5863 +
           (C14105 + C14106) * C5871 + (C14107 + C14108) * C5864 +
           C14117 * C5873 + C14118 * C5865) *
              C141327 * C141298 * C2956 -
          ((C14966 + C14967) * C5865 + (C14968 + C14969) * C5873 +
           (C14970 + C14971) * C5864 + (C14972 + C14973) * C5871 +
           (C14079 * C3494 + C141365 * C3650 + C14078 * C828 +
            C141479 * C1011) *
               C5863 +
           (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
            C141479 * C1006) *
               C5869) *
              C141327 * C141298 * C2957 +
          ((C14078 * C2960 + C141479 * C3084 + C14079 * C10470 +
            C141365 * C10699) *
               C5869 +
           (C14078 * C2964 + C141479 * C3088 + C14079 * C10473 +
            C141365 * C10702) *
               C5863 +
           (C14078 * C2961 + C141479 * C3085 + C14079 * C10471 +
            C141365 * C10700) *
               C5871 +
           (C14078 * C2965 + C141479 * C3089 + C14079 * C10474 +
            C141365 * C10703) *
               C5864 +
           (C14078 * C2962 + C141479 * C3086 + C14079 * C10472 +
            C141365 * C10701) *
               C5873 +
           (C14078 * C2966 + C141479 * C3090 + C14079 * C10475 +
            C141365 * C10704) *
               C5865) *
              C141327 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C29775 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C141219) *
               C21819 +
           ((C35986 + C35987) * C29775 + (C35988 + C35989) * C141219) * C21820 +
           C38766 * C21821) *
              C141298 * C2956 -
          (((C38762 + C38763) * C141219 + (C38764 + C38765) * C29775) * C21821 +
           ((C35993 + C35992) * C141219 + (C35991 + C35990) * C29775) * C21820 +
           ((C35989 + C35988) * C141219 + (C35987 + C35986) * C29775) *
               C21819) *
              C141298 * C2957 +
          (C38766 * C21819 +
           ((C38765 + C38764) * C29775 + (C38763 + C38762) * C141219) * C21820 +
           ((C14078 * C25568 + C141479 * C25740 + C14079 * C32702 +
             C141365 * C32858) *
                C29775 +
            (C14078 * C25570 + C141479 * C25742 + C14079 * C32703 +
             C141365 * C32859) *
                C141219) *
               C21821) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
             C5873 * C110 + C5865 * C116) *
                C188 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
             C5873 * C191 + C5865 * C364) *
                C141327) *
               C141479 +
           ((C16129 + C16130 + C16131) * C188 +
            (C16132 + C16133 + C16134) * C141327) *
               C141365) *
              C141298 * C2956 -
          (((C10831 + C10832 + C10833) * C141327 +
            (C10834 + C10835 + C10836) * C188) *
               C141365 +
           ((C7123 + C7122 + C7121) * C141327 +
            (C7120 + C7119 + C7118) * C188) *
               C141479) *
              C141298 * C2957 +
          (((C9961 + C9960 + C9959) * C188 +
            (C9958 + C9957 + C9956) * C141327) *
               C141479 +
           ((C5869 * C10470 + C5863 * C10473 + C5871 * C10471 + C5864 * C10474 +
             C5873 * C10472 + C5865 * C10475) *
                C188 +
            (C5869 * C10595 + C5863 * C10815 + C5871 * C10596 + C5864 * C10816 +
             C5873 * C10597 + C5865 * C10817) *
                C141327) *
               C141365) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C21918 +
            (C29775 * C189 + C141219 * C362) * C21819 + C30547 * C21919 +
            C30548 * C21820 + C30549 * C21920 + C30550 * C21821) *
               C141479 +
           (C37115 + C37116 + C37099 + C37100 + C37101 + C37102) * C141365) *
              C141298 * C2956 -
          ((C32952 * C21821 + C32953 * C21920 + C32954 * C21820 +
            C32955 * C21919 + C32956 * C21819 + C32957 * C21918) *
               C141365 +
           (C30552 * C21821 + C30551 * C21920 + C30550 * C21820 +
            C30549 * C21919 + C30548 * C21819 + C30547 * C21918) *
               C141479) *
              C141298 * C2957 +
          ((C30549 * C21918 + C30550 * C21819 + C30551 * C21919 +
            C30552 * C21820 + C32361 * C21920 + C32360 * C21821) *
               C141479 +
           (C32955 * C21918 + C32954 * C21819 + C32953 * C21919 +
            C32952 * C21820 + (C29775 * C32702 + C141219 * C32703) * C21920 +
            (C29775 * C32790 + C141219 * C32938) * C21821) *
               C141365) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C5863 +
            C448 * C5864 + C449 * C5865) *
               C141479 +
           (C16259 + C16241 + C16242) * C141365) *
              C141298 * C2956 -
          ((C15178 * C5865 + C15179 * C5864 +
            (C418 * C3490 + C3795 + C3795 + C141327 * C3790) * C5863) *
               C141365 +
           (C1192 * C5865 + C1193 * C5864 +
            (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C5863) *
               C141479) *
              C141298 * C2957 +
          (((C418 * C2960 + C3201 + C3201 + C141327 * C3196) * C5863 +
            (C418 * C2961 + C3202 + C3202 + C141327 * C3197) * C5864 +
            (C418 * C2962 + C3203 + C3203 + C141327 * C3198) * C5865) *
               C141479 +
           ((C418 * C10470 + C17979 + C17979 + C141327 * C10934) * C5863 +
            (C418 * C10471 + C17980 + C17980 + C141327 * C10935) * C5864 +
            (C418 * C10472 + C17981 + C17981 + C141327 * C10936) * C5865) *
               C141365) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
            C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
            C22185 + C21821 * C3196) *
               C141219 * C141479 +
           (C37229 + C37230 + C37231) * C141219 * C141365) *
              C141298 * C2956 -
          ((C22181 * C26351 + C26824 + C26824 + C21821 * C26819 +
            C22180 * C10470 + C26823 + C26823 + C21820 * C10934 +
            C22179 * C3490 + C26822 + C26822 + C21819 * C3790) *
               C141219 * C141365 +
           (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
            C22180 * C2960 + C23189 + C23189 + C21820 * C3196 + C22179 * C823 +
            C23190 + C23190 + C21819 * C1171) *
               C141219 * C141479) *
              C141298 * C2957 +
          ((C22179 * C2960 + C25924 + C25924 + C21819 * C3196 + C22180 * C9667 +
            C25925 + C25925 + C21820 * C10035 + C22181 * C25568 + C25926 +
            C25926 + C21821 * C25921) *
               C141219 * C141479 +
           (C22179 * C10470 + C38915 + C38915 + C21819 * C10934 +
            C22180 * C26351 + C38916 + C38916 + C21820 * C26819 +
            C22181 * C32702 + C38917 + C38917 + C21821 * C33023) *
               C141219 * C141365) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyz[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C188 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C141327) *
               C5863 +
           ((C14105 + C14106) * C188 + (C14354 + C14355) * C141327) * C5864 +
           C14362 * C5865) *
              C141298 * C2956 -
          (((C15286 + C15287) * C141327 + (C14968 + C14969) * C188) * C5865 +
           ((C15288 + C15289) * C141327 + (C14972 + C14973) * C188) * C5864 +
           ((C14079 * C3572 + C141365 * C3864 + C14078 * C912 +
             C141479 * C1262) *
                C141327 +
            (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
             C141479 * C1006) *
                C188) *
               C5863) *
              C141298 * C2957 +
          (((C14078 * C2960 + C141479 * C3084 + C14079 * C10470 +
             C141365 * C10699) *
                C188 +
            (C14078 * C3026 + C141479 * C3254 + C14079 * C10595 +
             C141365 * C11041) *
                C141327) *
               C5863 +
           ((C14078 * C2961 + C141479 * C3085 + C14079 * C10471 +
             C141365 * C10700) *
                C188 +
            (C14078 * C3027 + C141479 * C3255 + C14079 * C10596 +
             C141365 * C11042) *
                C141327) *
               C5864 +
           ((C14078 * C2962 + C141479 * C3086 + C14079 * C10472 +
             C141365 * C10701) *
                C188 +
            (C14078 * C3028 + C141479 * C3256 + C14079 * C10597 +
             C141365 * C11043) *
                C141327) *
               C5865) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14078 * C108 + C141479 * C276 + C14079 * C1601 + C141365 * C1784) *
               C21918 +
           (C14078 * C189 + C141479 * C501 + C14079 * C1690 + C141365 * C2040) *
               C21819 +
           (C35986 + C35987) * C21919 + (C36316 + C36317) * C21820 +
           C38750 * C21920 + C38992 * C21821) *
              C141219 * C141298 * C2956 -
          ((C38997 + C38998) * C21821 + (C38764 + C38765) * C21920 +
           (C36319 + C36318) * C21820 + (C35991 + C35990) * C21919 +
           (C36317 + C36316) * C21819 + (C35987 + C35986) * C21918) *
              C141219 * C141298 * C2957 +
          (C38750 * C21918 + C38992 * C21819 + (C38765 + C38764) * C21919 +
           (C38998 + C38997) * C21820 +
           (C14078 * C25568 + C141479 * C25740 + C14079 * C32702 +
            C141365 * C32858) *
               C21920 +
           (C14078 * C25662 + C141479 * C26003 + C14079 * C32790 +
            C141365 * C33094) *
               C21821) *
              C141219 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezx[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
            C5873 * C110 + C5865 * C116) *
               C14078 +
           (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
            C5873 * C278 + C5865 * C581) *
               C141479 +
           (C16129 + C16130 + C16131) * C14079 +
           (C16480 + C16481 + C16482) * C141365) *
              C141327 * C141298 * C2956 -
          ((C11155 + C11156 + C11157) * C141365 +
           (C10834 + C10835 + C10836) * C14079 +
           (C7483 + C7482 + C7481) * C141479 +
           (C7120 + C7119 + C7118) * C14078) *
              C141327 * C141298 * C2957 +
          ((C9961 + C9960 + C9959) * C14078 +
           (C10210 + C10209 + C10208) * C141479 +
           (C5869 * C10470 + C5863 * C10473 + C5871 * C10471 + C5864 * C10474 +
            C5873 * C10472 + C5865 * C10475) *
               C14079 +
           (C5869 * C10699 + C5863 * C11145 + C5871 * C10700 + C5864 * C11146 +
            C5873 * C10701 + C5865 * C11147) *
               C141365) *
              C141327 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C14078 +
            (C29775 * C276 + C141219 * C579) * C141479 + C37111 * C14079 +
            C37432 * C141365) *
               C21819 +
           (C36420 + C36421 + C36422 + C36423) * C21820 + C39079 * C21821) *
              C141298 * C2956 -
          ((C39074 + C39075 + C39076 + C39077) * C21821 +
           (C36427 + C36426 + C36425 + C36424) * C21820 +
           (C36423 + C36422 + C36421 + C36420) * C21819) *
              C141298 * C2957 +
          (C39079 * C21819 + (C39077 + C39076 + C39075 + C39074) * C21820 +
           (C32361 * C14078 + C32527 * C141479 +
            (C29775 * C32702 + C141219 * C32703) * C14079 +
            (C29775 * C32858 + C141219 * C33164) * C141365) *
               C21821) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[130] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C14078 +
            (C188 * C276 + C141327 * C635) * C141479 + C15877 * C14079 +
            C16596 * C141365) *
               C5863 +
           (C14511 + C14512 + C14513 + C14514) * C5864 + C14525 * C5865) *
              C141298 * C2956 -
          ((C15498 + C15488 + C15489 + C15490) * C5865 +
           (C15499 + C15493 + C15494 + C15495) * C5864 +
           ((C188 * C3646 + C141327 * C4004) * C141365 +
            (C188 * C3490 + C141327 * C3572) * C14079 +
            (C188 * C1006 + C141327 * C1419) * C141479 +
            (C188 * C823 + C141327 * C912) * C14078) *
               C5863) *
              C141298 * C2957 +
          (((C188 * C2960 + C141327 * C3026) * C14078 +
            (C188 * C3084 + C141327 * C3362) * C141479 +
            (C188 * C10470 + C141327 * C10595) * C14079 +
            (C188 * C10699 + C141327 * C11255) * C141365) *
               C5863 +
           ((C188 * C2961 + C141327 * C3027) * C14078 +
            (C188 * C3085 + C141327 * C3363) * C141479 +
            (C188 * C10471 + C141327 * C10596) * C14079 +
            (C188 * C10700 + C141327 * C11256) * C141365) *
               C5864 +
           ((C188 * C2962 + C141327 * C3028) * C14078 +
            (C188 * C3086 + C141327 * C3364) * C141479 +
            (C188 * C10472 + C141327 * C10597) * C14079 +
            (C188 * C10701 + C141327 * C11257) * C141365) *
               C5865) *
              C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
            C21920 * C2960 + C21821 * C3026) *
               C14078 +
           (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
            C21920 * C3084 + C21821 * C3362) *
               C141479 +
           (C36893 + C36894 + C36895) * C14079 +
           (C37538 + C37539 + C37540) * C141365) *
              C141219 * C141298 * C2956 -
          ((C21920 * C26579 + C21821 * C27140 + C21919 * C10699 +
            C21820 * C11255 + C21918 * C3646 + C21819 * C4004) *
               C141365 +
           (C21920 * C26351 + C21821 * C26477 + C21919 * C10470 +
            C21820 * C10595 + C21918 * C3490 + C21819 * C3572) *
               C14079 +
           (C21920 * C9848 + C21821 * C10284 + C21919 * C3084 + C21820 * C3362 +
            C21918 * C1006 + C21819 * C1419) *
               C141479 +
           (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
            C21918 * C823 + C21819 * C912) *
               C14078) *
              C141219 * C141298 * C2957 +
          ((C21918 * C2960 + C21819 * C3026 + C21919 * C9667 + C21820 * C9768 +
            C21920 * C25568 + C21821 * C25662) *
               C14078 +
           (C21918 * C3084 + C21819 * C3362 + C21919 * C9848 + C21820 * C10284 +
            C21920 * C25740 + C21821 * C26168) *
               C141479 +
           (C21918 * C10470 + C21819 * C10595 + C21919 * C26351 +
            C21820 * C26477 + C21920 * C32702 + C21821 * C32790) *
               C14079 +
           (C21918 * C10699 + C21819 * C11255 + C21919 * C26579 +
            C21820 * C27140 + C21920 * C32858 + C21821 * C33246) *
               C141365) *
              C141219 * C141298 * C2958) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[130] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                       C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                          C141327 * C5863 +
                      (C14636 + C14637) * C141327 * C5864 + C14643 * C5865) *
                         C141298 * C2956 -
                     ((C15622 + C15623) * C141327 * C5865 +
                      (C15624 + C15625) * C141327 * C5864 +
                      (C14600 * C3490 + C15610 + C15610 + C141365 * C4074 +
                       C14599 * C823 + C15611 + C15611 + C141479 * C1505) *
                          C141327 * C5863) *
                         C141298 * C2957 +
                     ((C14599 * C2960 + C18278 + C18278 + C141479 * C3416 +
                       C14600 * C10470 + C18279 + C18279 + C141365 * C11356) *
                          C141327 * C5863 +
                      (C14599 * C2961 + C18280 + C18280 + C141479 * C3417 +
                       C14600 * C10471 + C18281 + C18281 + C141365 * C11357) *
                          C141327 * C5864 +
                      (C14599 * C2962 + C18282 + C18282 + C141479 * C3418 +
                       C14600 * C10472 + C18283 + C18283 + C141365 * C11358) *
                          C141327 * C5865) *
                         C141298 * C2958) *
                    C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                       C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                          C21819 +
                      (C36666 + C36667) * C21820 + C39228 * C21821) *
                         C141219 * C141298 * C2956 -
                     ((C39239 + C39240) * C21821 + (C36669 + C36668) * C21820 +
                      (C36667 + C36666) * C21819) *
                         C141219 * C141298 * C2957 +
                     (C39228 * C21819 + (C39240 + C39239) * C21820 +
                      (C14599 * C25568 + C39233 + C39233 + C141479 * C26244 +
                       C14600 * C32702 + C39234 + C39234 + C141365 * C33313) *
                          C21821) *
                         C141219 * C141298 * C2958) *
                    C141247) /
                       (p * q * std::sqrt(p + q));
    d2eexx[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 +
             C5876 + C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
             C5865 * C122) *
                C141479 +
            (C15751 + C15752 + C15753) * C141365) *
               C141327 * C1596 -
           ((C5872 * C5327 + C13217 + C13217 + C5865 * C5335 + C5870 * C5326 +
             C13216 + C13216 + C5864 * C5334 + C5868 * C5325 + C13215 + C13215 +
             C5863 * C5333) *
                C141365 +
            (C15753 + C15752 + C15751) * C141479) *
               C141327 * C141499) *
              C2374 +
          (((C10497 + C10496 + C10495) * C141479 +
            (C5868 * C13205 + C13218 + C13218 + C5863 * C13211 +
             C5870 * C13206 + C13219 + C13219 + C5864 * C13212 +
             C5872 * C13207 + C13220 + C13220 + C5865 * C13213) *
                C141365) *
               C141327 * C141499 -
           ((C10495 + C10496 + C10497) * C141365 +
            (C6742 + C6741 + C6740) * C141479) *
               C141327 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141479 +
             C36781 * C141365) *
                C21819 +
            (C35748 + C35749) * C21820 + C38599 * C21821) *
               C1596 -
           ((C39351 + C39341) * C21821 + (C39352 + C39344) * C21820 +
            ((C29774 * C5325 + C34562 + C34562 + C141219 * C5333) * C141365 +
             C36781 * C141479) *
                C21819) *
               C141499) *
              C2374 +
          (((C39344 + C39352) * C21819 + (C39341 + C39351) * C21820 +
            (C32719 * C141479 +
             (C29774 * C34558 + C34565 + C34565 + C141219 * C34560) * C141365) *
                C21821) *
               C141499 -
           ((C38600 + C38601) * C21821 + (C35751 + C35750) * C21820 +
            (C35749 + C35748) * C21819) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C5869 +
             (C188 * C114 + C141327 * C195) * C5863 + C218 * C5871 +
             C219 * C5864 + C220 * C5873 + C221 * C5865) *
                C141479 +
            (C15883 + C15884 + C15859 + C15860 + C15861 + C15862) * C141365) *
               C1596 -
           ((C15879 * C5865 + C15880 * C5873 + C15881 * C5864 + C15882 * C5871 +
             (C188 * C5329 + C141327 * C5395) * C5863 +
             (C188 * C5325 + C141327 * C5391) * C5869) *
                C141365 +
            (C15862 + C15861 + C15860 + C15859 + C15884 + C15883) * C141479) *
               C141499) *
              C2374 +
          (((C18490 + C18491 + C18484 + C18485 + C18486 + C18487) * C141479 +
            ((C188 * C13205 + C141327 * C13294) * C5869 +
             (C188 * C13208 + C141327 * C13297) * C5863 +
             (C188 * C13206 + C141327 * C13295) * C5871 +
             (C188 * C13209 + C141327 * C13298) * C5864 +
             (C188 * C13207 + C141327 * C13296) * C5873 +
             (C188 * C13210 + C141327 * C13299) * C5865) *
                C141365) *
               C141499 -
           ((C18487 + C18486 + C18485 + C18484 + C18491 + C18490) * C141365 +
            (C934 * C5865 + C935 * C5873 + C936 * C5864 + C937 * C5871 +
             (C188 * C828 + C141327 * C917) * C5863 +
             (C188 * C823 + C141327 * C912) * C5869) *
                C141479) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
              C21920 * C2960 + C21821 * C3026) *
                 C29775 +
             (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
              C21920 * C2964 + C21821 * C3030) *
                 C141219) *
                C141479 +
            ((C36893 + C36894 + C36895) * C29775 +
             (C36896 + C36897 + C36898) * C141219) *
                C141365) *
               C1596 -
           (((C21920 * C29089 + C21821 * C29175 + C21919 * C13208 +
              C21820 * C13297 + C21918 * C5329 + C21819 * C5395) *
                 C141219 +
             (C21920 * C29087 + C21821 * C29173 + C21919 * C13205 +
              C21820 * C13294 + C21918 * C5325 + C21819 * C5391) *
                 C29775) *
                C141365 +
            ((C36898 + C36897 + C36896) * C141219 +
             (C36895 + C36894 + C36893) * C29775) *
                C141479) *
               C141499) *
              C2374 +
          ((((C39463 + C39464 + C39465) * C29775 +
             (C39466 + C39467 + C39468) * C141219) *
                C141479 +
            ((C21918 * C13205 + C21819 * C13294 + C21919 * C29087 +
              C21820 * C29173 + C21920 * C34558 + C21821 * C34615) *
                 C29775 +
             (C21918 * C13208 + C21819 * C13297 + C21919 * C29089 +
              C21820 * C29175 + C21920 * C34559 + C21821 * C34616) *
                 C141219) *
                C141365) *
               C141499 -
           (((C39468 + C39467 + C39466) * C141219 +
             (C39465 + C39464 + C39463) * C29775) *
                C141365 +
            ((C21920 * C9670 + C21821 * C9771 + C21919 * C2964 +
              C21820 * C3030 + C21918 * C828 + C21819 * C917) *
                 C141219 +
             (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 +
              C21820 * C3026 + C21918 * C823 + C21819 * C912) *
                 C29775) *
                C141479) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C5869 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C5863 +
            (C14105 + C14106) * C5871 + (C14107 + C14108) * C5864 +
            C14117 * C5873 + C14118 * C5865) *
               C141327 * C1596 -
           ((C15999 + C16000) * C5865 + (C16001 + C16002) * C5873 +
            (C16003 + C16004) * C5864 + (C16005 + C16006) * C5871 +
            (C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
             C141479 * C1789) *
                C5863 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C5869) *
               C141327 * C141499) *
              C2374 +
          (((C14078 * C3490 + C141479 * C3646 + C14079 * C13205 +
             C141365 * C13374) *
                C5869 +
            (C14078 * C3494 + C141479 * C3650 + C14079 * C13208 +
             C141365 * C13377) *
                C5863 +
            (C14078 * C3491 + C141479 * C3647 + C14079 * C13206 +
             C141365 * C13375) *
                C5871 +
            (C14078 * C3495 + C141479 * C3651 + C14079 * C13209 +
             C141365 * C13378) *
                C5864 +
            (C14078 * C3492 + C141479 * C3648 + C14079 * C13207 +
             C141365 * C13376) *
                C5873 +
            (C14078 * C3496 + C141479 * C3652 + C14079 * C13210 +
             C141365 * C13379) *
                C5865) *
               C141327 * C141499 -
           ((C14966 + C14967) * C5865 + (C14968 + C14969) * C5873 +
            (C14970 + C14971) * C5864 + (C14972 + C14973) * C5871 +
            (C14079 * C3494 + C141365 * C3650 + C14078 * C828 +
             C141479 * C1011) *
                C5863 +
            (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
             C141479 * C1006) *
                C5869) *
               C141327 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C29775 +
             (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
              C141365 * C1789) *
                 C141219) *
                C21819 +
            ((C35986 + C35987) * C29775 + (C35988 + C35989) * C141219) *
                C21820 +
            C38766 * C21821) *
               C1596 -
           (((C39583 + C39584) * C141219 + (C39585 + C39586) * C29775) *
                C21821 +
            ((C39587 + C39588) * C141219 + (C39589 + C39590) * C29775) *
                C21820 +
            ((C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
              C141479 * C1789) *
                 C141219 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C29775) *
                C21819) *
               C141499) *
              C2374 +
          ((((C39590 + C39589) * C29775 + (C39588 + C39587) * C141219) *
                C21819 +
            ((C39586 + C39585) * C29775 + (C39584 + C39583) * C141219) *
                C21820 +
            ((C14078 * C26351 + C141479 * C26579 + C14079 * C34558 +
              C141365 * C34667) *
                 C29775 +
             (C14078 * C26353 + C141479 * C26581 + C14079 * C34559 +
              C141365 * C34668) *
                 C141219) *
                C21821) *
               C141499 -
           (((C38762 + C38763) * C141219 + (C38764 + C38765) * C29775) *
                C21821 +
            ((C35993 + C35992) * C141219 + (C35991 + C35990) * C29775) *
                C21820 +
            ((C35989 + C35988) * C141219 + (C35987 + C35986) * C29775) *
                C21819) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C188 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
              C5873 * C191 + C5865 * C364) *
                 C141327) *
                C141479 +
            ((C16129 + C16130 + C16131) * C188 +
             (C16132 + C16133 + C16134) * C141327) *
                C141365) *
               C1596 -
           (((C5873 * C5393 + C5865 * C5509 + C5871 * C5392 + C5864 * C5508 +
              C5869 * C5391 + C5863 * C5507) *
                 C141327 +
             (C5873 * C5327 + C5865 * C5331 + C5871 * C5326 + C5864 * C5330 +
              C5869 * C5325 + C5863 * C5329) *
                 C188) *
                C141365 +
            ((C16134 + C16133 + C16132) * C141327 +
             (C16131 + C16130 + C16129) * C188) *
                C141479) *
               C141499) *
              C2374 +
          ((((C10836 + C10835 + C10834) * C188 +
             (C10833 + C10832 + C10831) * C141327) *
                C141479 +
            ((C5869 * C13205 + C5863 * C13208 + C5871 * C13206 +
              C5864 * C13209 + C5873 * C13207 + C5865 * C13210) *
                 C188 +
             (C5869 * C13294 + C5863 * C13454 + C5871 * C13295 +
              C5864 * C13455 + C5873 * C13296 + C5865 * C13456) *
                 C141327) *
                C141365) *
               C141499 -
           (((C10831 + C10832 + C10833) * C141327 +
             (C10834 + C10835 + C10836) * C188) *
                C141365 +
            ((C7123 + C7122 + C7121) * C141327 +
             (C7120 + C7119 + C7118) * C188) *
                C141479) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C21918 +
             (C29775 * C189 + C141219 * C362) * C21819 + C30547 * C21919 +
             C30548 * C21820 + C30549 * C21920 + C30550 * C21821) *
                C141479 +
            (C37115 + C37116 + C37099 + C37100 + C37101 + C37102) * C141365) *
               C1596 -
           ((C39703 * C21821 + C39704 * C21920 + C39705 * C21820 +
             C39706 * C21919 + (C29775 * C5391 + C141219 * C5507) * C21819 +
             (C29775 * C5325 + C141219 * C5329) * C21918) *
                C141365 +
            (C37102 + C37101 + C37100 + C37099 + C37116 + C37115) * C141479) *
               C141499) *
              C2374 +
          (((C39697 + C39698 + C39699 + C39700 + C39701 + C39702) * C141479 +
            (C39706 * C21918 + C39705 * C21819 + C39704 * C21919 +
             C39703 * C21820 + (C29775 * C34558 + C141219 * C34559) * C21920 +
             (C29775 * C34615 + C141219 * C34719) * C21821) *
                C141365) *
               C141499 -
           ((C39702 + C39701 + C39700 + C39699 + C39698 + C39697) * C141365 +
            (C30552 * C21821 + C30551 * C21920 + C30550 * C21820 +
             C30549 * C21919 + C30548 * C21819 + C30547 * C21918) *
                C141479) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C5863 +
             C448 * C5864 + C449 * C5865) *
                C141479 +
            (C16259 + C16241 + C16242) * C141365) *
               C1596 -
           ((C16257 * C5865 + C16258 * C5864 +
             (C418 * C5325 + C5566 + C5566 + C141327 * C5561) * C5863) *
                C141365 +
            (C16242 + C16241 + C16259) * C141479) *
               C141499) *
              C2374 +
          (((C18796 + C18788 + C18789) * C141479 +
            ((C418 * C13205 + C18790 + C18790 + C141327 * C13531) * C5863 +
             (C418 * C13206 + C18791 + C18791 + C141327 * C13532) * C5864 +
             (C418 * C13207 + C18792 + C18792 + C141327 * C13533) * C5865) *
                C141365) *
               C141499 -
           ((C18789 + C18788 + C18796) * C141365 +
            (C1192 * C5865 + C1193 * C5864 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C5863) *
                C141479) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
             C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
             C22185 + C21821 * C3196) *
                C141219 * C141479 +
            (C37229 + C37230 + C37231) * C141219 * C141365) *
               C1596 -
           ((C22181 * C29087 + C29410 + C29410 + C21821 * C29405 +
             C22180 * C13205 + C29409 + C29409 + C21820 * C13531 +
             C22179 * C5325 + C29408 + C29408 + C21819 * C5561) *
                C141219 * C141365 +
            (C37231 + C37230 + C37229) * C141219 * C141479) *
               C141499) *
              C2374 +
          (((C39820 + C39821 + C39822) * C141219 * C141479 +
            (C22179 * C13205 + C39811 + C39811 + C21819 * C13531 +
             C22180 * C29087 + C39812 + C39812 + C21820 * C29405 +
             C22181 * C34558 + C39813 + C39813 + C21821 * C34770) *
                C141219 * C141365) *
               C141499 -
           ((C39822 + C39821 + C39820) * C141219 * C141365 +
            (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
             C22180 * C2960 + C23189 + C23189 + C21820 * C3196 + C22179 * C823 +
             C23190 + C23190 + C21819 * C1171) *
                C141219 * C141479) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyz[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C188 +
             (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
              C141365 * C2040) *
                 C141327) *
                C5863 +
            ((C14105 + C14106) * C188 + (C14354 + C14355) * C141327) * C5864 +
            C14362 * C5865) *
               C1596 -
           (((C16366 + C16367) * C141327 + (C16001 + C16002) * C188) * C5865 +
            ((C16368 + C16369) * C141327 + (C16005 + C16006) * C188) * C5864 +
            ((C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
              C141479 * C2040) *
                 C141327 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C188) *
                C5863) *
               C141499) *
              C2374 +
          ((((C14078 * C3490 + C141479 * C3646 + C14079 * C13205 +
              C141365 * C13374) *
                 C188 +
             (C14078 * C3572 + C141479 * C3864 + C14079 * C13294 +
              C141365 * C13614) *
                 C141327) *
                C5863 +
            ((C14078 * C3491 + C141479 * C3647 + C14079 * C13206 +
              C141365 * C13375) *
                 C188 +
             (C14078 * C3573 + C141479 * C3865 + C14079 * C13295 +
              C141365 * C13615) *
                 C141327) *
                C5864 +
            ((C14078 * C3492 + C141479 * C3648 + C14079 * C13207 +
              C141365 * C13376) *
                 C188 +
             (C14078 * C3574 + C141479 * C3866 + C14079 * C13296 +
              C141365 * C13616) *
                 C141327) *
                C5865) *
               C141499 -
           (((C15286 + C15287) * C141327 + (C14968 + C14969) * C188) * C5865 +
            ((C15288 + C15289) * C141327 + (C14972 + C14973) * C188) * C5864 +
            ((C14079 * C3572 + C141365 * C3864 + C14078 * C912 +
              C141479 * C1262) *
                 C141327 +
             (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
              C141479 * C1006) *
                 C188) *
                C5863) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C21918 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C21819 +
            (C35986 + C35987) * C21919 + (C36316 + C36317) * C21820 +
            C38750 * C21920 + C38992 * C21821) *
               C141219 * C1596 -
           ((C39929 + C39930) * C21821 + (C39585 + C39586) * C21920 +
            (C39931 + C39932) * C21820 + (C39589 + C39590) * C21919 +
            (C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
             C141479 * C2040) *
                C21819 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C21918) *
               C141219 * C141499) *
              C2374 +
          (((C39590 + C39589) * C21918 + (C39932 + C39931) * C21819 +
            (C39586 + C39585) * C21919 + (C39930 + C39929) * C21820 +
            (C14078 * C26351 + C141479 * C26579 + C14079 * C34558 +
             C141365 * C34667) *
                C21920 +
            (C14078 * C26477 + C141479 * C26925 + C14079 * C34615 +
             C141365 * C34825) *
                C21821) *
               C141219 * C141499 -
           ((C38997 + C38998) * C21821 + (C38764 + C38765) * C21920 +
            (C36319 + C36318) * C21820 + (C35991 + C35990) * C21919 +
            (C36317 + C36316) * C21819 + (C35987 + C35986) * C21918) *
               C141219 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezx[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
             C5873 * C110 + C5865 * C116) *
                C14078 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
             C5873 * C278 + C5865 * C581) *
                C141479 +
            (C16129 + C16130 + C16131) * C14079 +
            (C16480 + C16481 + C16482) * C141365) *
               C141327 * C1596 -
           ((C5873 * C5451 + C5865 * C5675 + C5871 * C5450 + C5864 * C5674 +
             C5869 * C5449 + C5863 * C5673) *
                C141365 +
            (C5873 * C5327 + C5865 * C5331 + C5871 * C5326 + C5864 * C5330 +
             C5869 * C5325 + C5863 * C5329) *
                C14079 +
            (C16482 + C16481 + C16480) * C141479 +
            (C16131 + C16130 + C16129) * C14078) *
               C141327 * C141499) *
              C2374 +
          (((C10836 + C10835 + C10834) * C14078 +
            (C11157 + C11156 + C11155) * C141479 +
            (C5869 * C13205 + C5863 * C13208 + C5871 * C13206 + C5864 * C13209 +
             C5873 * C13207 + C5865 * C13210) *
                C14079 +
            (C5869 * C13374 + C5863 * C13691 + C5871 * C13375 + C5864 * C13692 +
             C5873 * C13376 + C5865 * C13693) *
                C141365) *
               C141327 * C141499 -
           ((C11155 + C11156 + C11157) * C141365 +
            (C10834 + C10835 + C10836) * C14079 +
            (C7483 + C7482 + C7481) * C141479 +
            (C7120 + C7119 + C7118) * C14078) *
               C141327 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C14078 +
             (C29775 * C276 + C141219 * C579) * C141479 + C37111 * C14079 +
             C37432 * C141365) *
                C21819 +
            (C36420 + C36421 + C36422 + C36423) * C21820 + C39079 * C21821) *
               C1596 -
           ((C40043 + C40033 + C40034 + C40035) * C21821 +
            (C40044 + C40038 + C40039 + C40040) * C21820 +
            ((C29775 * C5449 + C141219 * C5673) * C141365 +
             (C29775 * C5325 + C141219 * C5329) * C14079 + C37432 * C141479 +
             C37111 * C14078) *
                C21819) *
               C141499) *
              C2374 +
          (((C40040 + C40039 + C40038 + C40044) * C21819 +
            (C40035 + C40034 + C40033 + C40043) * C21820 +
            (C32953 * C14078 + C33175 * C141479 +
             (C29775 * C34558 + C141219 * C34559) * C14079 +
             (C29775 * C34667 + C141219 * C34876) * C141365) *
                C21821) *
               C141499 -
           ((C39074 + C39075 + C39076 + C39077) * C21821 +
            (C36427 + C36426 + C36425 + C36424) * C21820 +
            (C36423 + C36422 + C36421 + C36420) * C21819) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[131] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C14078 +
             (C188 * C276 + C141327 * C635) * C141479 + C15877 * C14079 +
             C16596 * C141365) *
                C5863 +
            (C14511 + C14512 + C14513 + C14514) * C5864 + C14525 * C5865) *
               C1596 -
           ((C16599 + C16588 + C16589 + C16590) * C5865 +
            (C16600 + C16593 + C16594 + C16595) * C5864 +
            ((C188 * C5449 + C141327 * C5727) * C141365 +
             (C188 * C5325 + C141327 * C5391) * C14079 + C16596 * C141479 +
             C15877 * C14078) *
                C5863) *
               C141499) *
              C2374 +
          (((C18488 * C14078 + C19093 * C141479 +
             (C188 * C13205 + C141327 * C13294) * C14079 +
             (C188 * C13374 + C141327 * C13768) * C141365) *
                C5863 +
            (C14851 * C14078 + C15497 * C141479 +
             (C188 * C13206 + C141327 * C13295) * C14079 +
             (C188 * C13375 + C141327 * C13769) * C141365) *
                C5864 +
            (C14849 * C14078 + C15496 * C141479 +
             (C188 * C13207 + C141327 * C13296) * C14079 +
             (C188 * C13376 + C141327 * C13770) * C141365) *
                C5865) *
               C141499 -
           ((C15498 + C15488 + C15489 + C15490) * C5865 +
            (C15499 + C15493 + C15494 + C15495) * C5864 +
            (C19093 * C141365 + C18488 * C14079 +
             (C188 * C1006 + C141327 * C1419) * C141479 +
             (C188 * C823 + C141327 * C912) * C14078) *
                C5863) *
               C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C14078 +
            (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
             C21920 * C3084 + C21821 * C3362) *
                C141479 +
            (C36893 + C36894 + C36895) * C14079 +
            (C37538 + C37539 + C37540) * C141365) *
               C141219 * C1596 -
           ((C21920 * C29251 + C21821 * C29639 + C21919 * C13374 +
             C21820 * C13768 + C21918 * C5449 + C21819 * C5727) *
                C141365 +
            (C21920 * C29087 + C21821 * C29173 + C21919 * C13205 +
             C21820 * C13294 + C21918 * C5325 + C21819 * C5391) *
                C14079 +
            (C37540 + C37539 + C37538) * C141479 +
            (C36895 + C36894 + C36893) * C14078) *
               C141219 * C141499) *
              C2374 +
          (((C39463 + C39464 + C39465) * C14078 +
            (C40149 + C40150 + C40151) * C141479 +
            (C21918 * C13205 + C21819 * C13294 + C21919 * C29087 +
             C21820 * C29173 + C21920 * C34558 + C21821 * C34615) *
                C14079 +
            (C21918 * C13374 + C21819 * C13768 + C21919 * C29251 +
             C21820 * C29639 + C21920 * C34667 + C21821 * C34927) *
                C141365) *
               C141219 * C141499 -
           ((C40151 + C40150 + C40149) * C141365 +
            (C39465 + C39464 + C39463) * C14079 +
            (C21920 * C9848 + C21821 * C10284 + C21919 * C3084 +
             C21820 * C3362 + C21918 * C1006 + C21819 * C1419) *
                C141479 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C14078) *
               C141219 * C1596) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[131] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                        C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                           C141327 * C5863 +
                       (C14636 + C14637) * C141327 * C5864 + C14643 * C5865) *
                          C1596 -
                      ((C16723 + C16724) * C141327 * C5865 +
                       (C16725 + C16726) * C141327 * C5864 +
                       (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
                        C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                           C141327 * C5863) *
                          C141499) *
                         C2374 +
                     (((C14599 * C3490 + C19192 + C19192 + C141479 * C4074 +
                        C14600 * C13205 + C19193 + C19193 + C141365 * C13845) *
                           C141327 * C5863 +
                       (C14599 * C3491 + C19194 + C19194 + C141479 * C4075 +
                        C14600 * C13206 + C19195 + C19195 + C141365 * C13846) *
                           C141327 * C5864 +
                       (C14599 * C3492 + C19196 + C19196 + C141479 * C4076 +
                        C14600 * C13207 + C19197 + C19197 + C141365 * C13847) *
                           C141327 * C5865) *
                          C141499 -
                      ((C15622 + C15623) * C141327 * C5865 +
                       (C15624 + C15625) * C141327 * C5864 +
                       (C14600 * C3490 + C15610 + C15610 + C141365 * C4074 +
                        C14599 * C823 + C15611 + C15611 + C141479 * C1505) *
                           C141327 * C5863) *
                          C1596) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                        C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                           C21819 +
                       (C36666 + C36667) * C21820 + C39228 * C21821) *
                          C141219 * C1596 -
                      ((C40268 + C40269) * C21821 + (C40270 + C40271) * C21820 +
                       (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
                        C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                           C21819) *
                          C141219 * C141499) *
                         C2374 +
                     (((C40271 + C40270) * C21819 + (C40269 + C40268) * C21820 +
                       (C14599 * C26351 + C40258 + C40258 + C141479 * C27240 +
                        C14600 * C34558 + C40259 + C40259 + C141365 * C34978) *
                           C21821) *
                          C141219 * C141499 -
                      ((C39239 + C39240) * C21821 + (C36669 + C36668) * C21820 +
                       (C36667 + C36666) * C21819) *
                          C141219 * C1596) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q));
    d2eexx[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 +
             C5876 + C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
             C5865 * C122) *
                C141479 +
            (C15751 + C15752 + C15753) * C141365) *
               C141327 * C4148 -
           ((C5872 * C5327 + C13217 + C13217 + C5865 * C5335 + C5870 * C5326 +
             C13216 + C13216 + C5864 * C5334 + C5868 * C5325 + C13215 + C13215 +
             C5863 * C5333) *
                C141365 +
            (C15753 + C15752 + C15751) * C141479) *
               C141327 * C141499) *
              C141281 * C2376 +
          (((C15754 + C15755 + C15756) * C141479 +
            (C5868 * C5326 + C15736 + C15736 + C5863 * C5334 + C5870 * C5327 +
             C15737 + C15737 + C5864 * C5335 + C5872 * C5328 + C15738 + C15738 +
             C5865 * C5336) *
                C141365) *
               C141327 * C141499 -
           ((C15756 + C15755 + C15754) * C141365 +
            (C5872 * C111 + C5884 + C5884 + C5865 * C123 + C5870 * C110 +
             C5885 + C5885 + C5864 * C122 + C5868 * C109 + C5886 + C5886 +
             C5863 * C121) *
                C141479) *
               C141327 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141479 +
             C36781 * C141365) *
                C21819 +
            (C35748 + C35749) * C21820 + C38599 * C21821) *
               C4148 -
           ((C39351 + C39341) * C21821 + (C39352 + C39344) * C21820 +
            ((C29774 * C5325 + C34562 + C34562 + C141219 * C5333) * C141365 +
             C36781 * C141479) *
                C21819) *
               C141499) *
              C141281 * C2376 +
          (((C36782 * C141479 +
             (C29774 * C5326 + C36774 + C36774 + C141219 * C5334) * C141365) *
                C21819 +
            (C35762 * C141479 +
             (C29774 * C13206 + C36775 + C36775 + C141219 * C13212) * C141365) *
                C21820 +
            (C35763 * C141479 +
             (C29774 * C29088 + C36776 + C36776 + C141219 * C29092) * C141365) *
                C21821) *
               C141499 -
           ((C35765 + C35755) * C21821 + (C35764 + C35752) * C21820 +
            (C36782 * C141365 +
             (C29774 * C109 + C29784 + C29784 + C141219 * C121) * C141479) *
                C21819) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexy[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C5869 +
             (C188 * C114 + C141327 * C195) * C5863 + C218 * C5871 +
             C219 * C5864 + C220 * C5873 + C221 * C5865) *
                C141479 +
            (C15883 + C15884 + C15859 + C15860 + C15861 + C15862) * C141365) *
               C4148 -
           ((C15879 * C5865 + C15880 * C5873 + C15881 * C5864 + C15882 * C5871 +
             (C188 * C5329 + C141327 * C5395) * C5863 +
             (C188 * C5325 + C141327 * C5391) * C5869) *
                C141365 +
            (C15862 + C15861 + C15860 + C15859 + C15884 + C15883) * C141479) *
               C141499) *
              C141281 * C2376 +
          (((C15871 + C15872 + C15873 + C15874 + C15875 + C15876) * C141479 +
            (C15882 * C5869 + C15881 * C5863 + C15880 * C5871 + C15879 * C5864 +
             (C188 * C5328 + C141327 * C5394) * C5873 +
             (C188 * C5332 + C141327 * C5398) * C5865) *
                C141365) *
               C141499 -
           ((C15876 + C15875 + C15874 + C15873 + C15872 + C15871) * C141365 +
            (C223 * C5865 + C222 * C5873 + C221 * C5864 + C220 * C5871 +
             C219 * C5863 + C218 * C5869) *
                C141479) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
              C21920 * C2960 + C21821 * C3026) *
                 C29775 +
             (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
              C21920 * C2964 + C21821 * C3030) *
                 C141219) *
                C141479 +
            ((C36893 + C36894 + C36895) * C29775 +
             (C36896 + C36897 + C36898) * C141219) *
                C141365) *
               C4148 -
           (((C21920 * C29089 + C21821 * C29175 + C21919 * C13208 +
              C21820 * C13297 + C21918 * C5329 + C21819 * C5395) *
                 C141219 +
             (C21920 * C29087 + C21821 * C29173 + C21919 * C13205 +
              C21820 * C13294 + C21918 * C5325 + C21819 * C5391) *
                 C29775) *
                C141365 +
            ((C36898 + C36897 + C36896) * C141219 +
             (C36895 + C36894 + C36893) * C29775) *
                C141479) *
               C141499) *
              C141281 * C2376 +
          ((((C23870 + C23869 + C23868) * C29775 +
             (C23867 + C23866 + C23865) * C141219) *
                C141479 +
            ((C21918 * C5326 + C21819 * C5392 + C21919 * C13206 +
              C21820 * C13295 + C21920 * C29088 + C21821 * C29174) *
                 C29775 +
             (C21918 * C5330 + C21819 * C5396 + C21919 * C13209 +
              C21820 * C13298 + C21920 * C29090 + C21821 * C29176) *
                 C141219) *
                C141365) *
               C141499 -
           (((C23865 + C23866 + C23867) * C141219 +
             (C23868 + C23869 + C23870) * C29775) *
                C141365 +
            ((C21951 + C21950 + C21949) * C141219 +
             (C21948 + C21947 + C21946) * C29775) *
                C141479) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eexz[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C5869 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C5863 +
            (C14105 + C14106) * C5871 + (C14107 + C14108) * C5864 +
            C14117 * C5873 + C14118 * C5865) *
               C141327 * C4148 -
           ((C15999 + C16000) * C5865 + (C16001 + C16002) * C5873 +
            (C16003 + C16004) * C5864 + (C16005 + C16006) * C5871 +
            (C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
             C141479 * C1789) *
                C5863 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C5869) *
               C141327 * C141499) *
              C141281 * C2376 +
          (((C16006 + C16005) * C5869 + (C16004 + C16003) * C5863 +
            (C16002 + C16001) * C5871 + (C16000 + C15999) * C5864 +
            (C14078 * C1598 + C141479 * C1781 + C14079 * C5328 +
             C141365 * C5452) *
                C5873 +
            (C14078 * C1603 + C141479 * C1786 + C14079 * C5332 +
             C141365 * C5456) *
                C5865) *
               C141327 * C141499 -
           ((C14113 + C14114) * C5865 + (C14115 + C14116) * C5873 +
            (C14112 + C14111) * C5864 + (C14110 + C14109) * C5871 +
            (C14108 + C14107) * C5863 + (C14106 + C14105) * C5869) *
               C141327 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C29775 +
             (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
              C141365 * C1789) *
                 C141219) *
                C21819 +
            ((C35986 + C35987) * C29775 + (C35988 + C35989) * C141219) *
                C21820 +
            C38766 * C21821) *
               C4148 -
           (((C39583 + C39584) * C141219 + (C39585 + C39586) * C29775) *
                C21821 +
            ((C39587 + C39588) * C141219 + (C39589 + C39590) * C29775) *
                C21820 +
            ((C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
              C141479 * C1789) *
                 C141219 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C29775) *
                C21819) *
               C141499) *
              C141281 * C2376 +
          ((((C16006 + C16005) * C29775 + (C16004 + C16003) * C141219) *
                C21819 +
            ((C14078 * C3491 + C141479 * C3647 + C14079 * C13206 +
              C141365 * C13375) *
                 C29775 +
             (C14078 * C3495 + C141479 * C3651 + C14079 * C13209 +
              C141365 * C13378) *
                 C141219) *
                C21820 +
            ((C14078 * C10471 + C141479 * C10700 + C14079 * C29088 +
              C141365 * C29252) *
                 C29775 +
             (C14078 * C10474 + C141479 * C10703 + C14079 * C29090 +
              C141365 * C29254) *
                 C141219) *
                C21821) *
               C141499 -
           (((C35997 + C35996) * C141219 + (C35995 + C35994) * C29775) *
                C21821 +
            ((C14970 + C14971) * C141219 + (C14972 + C14973) * C29775) *
                C21820 +
            ((C14108 + C14107) * C141219 + (C14106 + C14105) * C29775) *
                C21819) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C188 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
              C5873 * C191 + C5865 * C364) *
                 C141327) *
                C141479 +
            ((C16129 + C16130 + C16131) * C188 +
             (C16132 + C16133 + C16134) * C141327) *
                C141365) *
               C4148 -
           (((C5873 * C5393 + C5865 * C5509 + C5871 * C5392 + C5864 * C5508 +
              C5869 * C5391 + C5863 * C5507) *
                 C141327 +
             (C5873 * C5327 + C5865 * C5331 + C5871 * C5326 + C5864 * C5330 +
              C5869 * C5325 + C5863 * C5329) *
                 C188) *
                C141365 +
            ((C16134 + C16133 + C16132) * C141327 +
             (C16131 + C16130 + C16129) * C188) *
                C141479) *
               C141499) *
              C141281 * C2376 +
          ((((C16135 + C16136 + C16137) * C188 +
             (C16138 + C16139 + C16140) * C141327) *
                C141479 +
            ((C5869 * C5326 + C5863 * C5330 + C5871 * C5327 + C5864 * C5331 +
              C5873 * C5328 + C5865 * C5332) *
                 C188 +
             (C5869 * C5392 + C5863 * C5508 + C5871 * C5393 + C5864 * C5509 +
              C5873 * C5394 + C5865 * C5510) *
                 C141327) *
                C141365) *
               C141499 -
           (((C16140 + C16139 + C16138) * C141327 +
             (C16137 + C16136 + C16135) * C188) *
                C141365 +
            ((C5873 * C192 + C5865 * C365 + C5871 * C191 + C5864 * C364 +
              C5869 * C190 + C5863 * C363) *
                 C141327 +
             (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
              C5869 * C109 + C5863 * C115) *
                 C188) *
                C141479) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C21918 +
             (C29775 * C189 + C141219 * C362) * C21819 + C30547 * C21919 +
             C30548 * C21820 + C30549 * C21920 + C30550 * C21821) *
                C141479 +
            (C37115 + C37116 + C37099 + C37100 + C37101 + C37102) * C141365) *
               C4148 -
           ((C39703 * C21821 + C39704 * C21920 + C39705 * C21820 +
             C39706 * C21919 + (C29775 * C5391 + C141219 * C5507) * C21819 +
             (C29775 * C5325 + C141219 * C5329) * C21918) *
                C141365 +
            (C37102 + C37101 + C37100 + C37099 + C37116 + C37115) * C141479) *
               C141499) *
              C141281 * C2376 +
          (((C37117 + C37118 + C37107 + C37108 + C37109 + C37110) * C141479 +
            ((C29775 * C5326 + C141219 * C5330) * C21918 +
             (C29775 * C5392 + C141219 * C5508) * C21819 +
             (C29775 * C13206 + C141219 * C13209) * C21919 +
             (C29775 * C13295 + C141219 * C13455) * C21820 +
             (C29775 * C29088 + C141219 * C29090) * C21920 +
             (C29775 * C29174 + C141219 * C29330) * C21821) *
                C141365) *
               C141499 -
           ((C37110 + C37109 + C37108 + C37107 + C37118 + C37117) * C141365 +
            (C30556 * C21821 + C30555 * C21920 + C30554 * C21820 +
             C30553 * C21919 + (C29775 * C190 + C141219 * C363) * C21819 +
             (C29775 * C109 + C141219 * C115) * C21918) *
                C141479) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C5863 +
             C448 * C5864 + C449 * C5865) *
                C141479 +
            (C16259 + C16241 + C16242) * C141365) *
               C4148 -
           ((C16257 * C5865 + C16258 * C5864 +
             (C418 * C5325 + C5566 + C5566 + C141327 * C5561) * C5863) *
                C141365 +
            (C16242 + C16241 + C16259) * C141479) *
               C141499) *
              C141281 * C2376 +
          (((C16247 + C16248 + C16249) * C141479 +
            (C16258 * C5863 + C16257 * C5864 +
             (C418 * C5328 + C5569 + C5569 + C141327 * C5564) * C5865) *
                C141365) *
               C141499 -
           ((C16249 + C16248 + C16247) * C141365 +
            (C450 * C5865 + C449 * C5864 + C448 * C5863) * C141479) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
             C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
             C22185 + C21821 * C3196) *
                C141219 * C141479 +
            (C37229 + C37230 + C37231) * C141219 * C141365) *
               C4148 -
           ((C22181 * C29087 + C29410 + C29410 + C21821 * C29405 +
             C22180 * C13205 + C29409 + C29409 + C21820 * C13531 +
             C22179 * C5325 + C29408 + C29408 + C21819 * C5561) *
                C141219 * C141365 +
            (C37231 + C37230 + C37229) * C141219 * C141479) *
               C141499) *
              C141281 * C2376 +
          (((C24194 + C24193 + C24192) * C141219 * C141479 +
            (C22179 * C5326 + C29411 + C29411 + C21819 * C5562 +
             C22180 * C13206 + C29412 + C29412 + C21820 * C13532 +
             C22181 * C29088 + C29413 + C29413 + C21821 * C29406) *
                C141219 * C141365) *
               C141499 -
           ((C24192 + C24193 + C24194) * C141219 * C141365 +
            (C22221 + C22220 + C22219) * C141219 * C141479) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C188 +
             (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
              C141365 * C2040) *
                 C141327) *
                C5863 +
            ((C14105 + C14106) * C188 + (C14354 + C14355) * C141327) * C5864 +
            C14362 * C5865) *
               C4148 -
           (((C16366 + C16367) * C141327 + (C16001 + C16002) * C188) * C5865 +
            ((C16368 + C16369) * C141327 + (C16005 + C16006) * C188) * C5864 +
            ((C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
              C141479 * C2040) *
                 C141327 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C188) *
                C5863) *
               C141499) *
              C141281 * C2376 +
          ((((C16006 + C16005) * C188 + (C16369 + C16368) * C141327) * C5863 +
            ((C16002 + C16001) * C188 + (C16367 + C16366) * C141327) * C5864 +
            ((C14078 * C1598 + C141479 * C1781 + C14079 * C5328 +
              C141365 * C5452) *
                 C188 +
             (C14078 * C1687 + C141479 * C2037 + C14079 * C5394 +
              C141365 * C5622) *
                 C141327) *
                C5865) *
               C141499 -
           (((C14358 + C14359) * C141327 + (C14115 + C14116) * C188) * C5865 +
            ((C14357 + C14356) * C141327 + (C14110 + C14109) * C188) * C5864 +
            ((C14355 + C14354) * C141327 + (C14106 + C14105) * C188) * C5863) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C21918 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C21819 +
            (C35986 + C35987) * C21919 + (C36316 + C36317) * C21820 +
            C38750 * C21920 + C38992 * C21821) *
               C141219 * C4148 -
           ((C39929 + C39930) * C21821 + (C39585 + C39586) * C21920 +
            (C39931 + C39932) * C21820 + (C39589 + C39590) * C21919 +
            (C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
             C141479 * C2040) *
                C21819 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C21918) *
               C141219 * C141499) *
              C141281 * C2376 +
          (((C16006 + C16005) * C21918 + (C16369 + C16368) * C21819 +
            (C14078 * C3491 + C141479 * C3647 + C14079 * C13206 +
             C141365 * C13375) *
                C21919 +
            (C14078 * C3573 + C141479 * C3865 + C14079 * C13295 +
             C141365 * C13615) *
                C21820 +
            (C14078 * C10471 + C141479 * C10700 + C14079 * C29088 +
             C141365 * C29252) *
                C21920 +
            (C14078 * C10596 + C141479 * C11042 + C14079 * C29174 +
             C141365 * C29488) *
                C21821) *
               C141219 * C141499 -
           ((C36321 + C36320) * C21821 + (C35995 + C35994) * C21920 +
            (C15288 + C15289) * C21820 + (C14972 + C14973) * C21919 +
            (C14355 + C14354) * C21819 + (C14106 + C14105) * C21918) *
               C141219 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezx[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
             C5873 * C110 + C5865 * C116) *
                C14078 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
             C5873 * C278 + C5865 * C581) *
                C141479 +
            (C16129 + C16130 + C16131) * C14079 +
            (C16480 + C16481 + C16482) * C141365) *
               C141327 * C4148 -
           ((C5873 * C5451 + C5865 * C5675 + C5871 * C5450 + C5864 * C5674 +
             C5869 * C5449 + C5863 * C5673) *
                C141365 +
            (C5873 * C5327 + C5865 * C5331 + C5871 * C5326 + C5864 * C5330 +
             C5869 * C5325 + C5863 * C5329) *
                C14079 +
            (C16482 + C16481 + C16480) * C141479 +
            (C16131 + C16130 + C16129) * C14078) *
               C141327 * C141499) *
              C141281 * C2376 +
          (((C16135 + C16136 + C16137) * C14078 +
            (C16483 + C16484 + C16485) * C141479 +
            (C5869 * C5326 + C5863 * C5330 + C5871 * C5327 + C5864 * C5331 +
             C5873 * C5328 + C5865 * C5332) *
                C14079 +
            (C5869 * C5450 + C5863 * C5674 + C5871 * C5451 + C5864 * C5675 +
             C5873 * C5452 + C5865 * C5676) *
                C141365) *
               C141327 * C141499 -
           ((C16485 + C16484 + C16483) * C141365 +
            (C16137 + C16136 + C16135) * C14079 +
            (C5873 * C279 + C5865 * C582 + C5871 * C278 + C5864 * C581 +
             C5869 * C277 + C5863 * C580) *
                C141479 +
            (C5873 * C111 + C5865 * C117 + C5871 * C110 + C5864 * C116 +
             C5869 * C109 + C5863 * C115) *
                C14078) *
               C141327 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C14078 +
             (C29775 * C276 + C141219 * C579) * C141479 + C37111 * C14079 +
             C37432 * C141365) *
                C21819 +
            (C36420 + C36421 + C36422 + C36423) * C21820 + C39079 * C21821) *
               C4148 -
           ((C40043 + C40033 + C40034 + C40035) * C21821 +
            (C40044 + C40038 + C40039 + C40040) * C21820 +
            ((C29775 * C5449 + C141219 * C5673) * C141365 +
             (C29775 * C5325 + C141219 * C5329) * C14079 + C37432 * C141479 +
             C37111 * C14078) *
                C21819) *
               C141499) *
              C141281 * C2376 +
          (((C37113 * C14078 + C37433 * C141479 +
             (C29775 * C5326 + C141219 * C5330) * C14079 +
             (C29775 * C5450 + C141219 * C5674) * C141365) *
                C21819 +
            (C36104 * C14078 + C36438 * C141479 +
             (C29775 * C13206 + C141219 * C13209) * C14079 +
             (C29775 * C13375 + C141219 * C13692) * C141365) *
                C21820 +
            (C36106 * C14078 + C36439 * C141479 +
             (C29775 * C29088 + C141219 * C29090) * C14079 +
             (C29775 * C29252 + C141219 * C29564) * C141365) *
                C21821) *
               C141499 -
           ((C36441 + C36435 + C36434 + C36433) * C21821 +
            (C36440 + C36430 + C36429 + C36428) * C21820 +
            (C37433 * C141365 + C37113 * C14079 +
             (C29775 * C277 + C141219 * C580) * C141479 +
             (C29775 * C109 + C141219 * C115) * C14078) *
                C21819) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezy[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C14078 +
             (C188 * C276 + C141327 * C635) * C141479 + C15877 * C14079 +
             C16596 * C141365) *
                C5863 +
            (C14511 + C14512 + C14513 + C14514) * C5864 + C14525 * C5865) *
               C4148 -
           ((C16599 + C16588 + C16589 + C16590) * C5865 +
            (C16600 + C16593 + C16594 + C16595) * C5864 +
            ((C188 * C5449 + C141327 * C5727) * C141365 +
             (C188 * C5325 + C141327 * C5391) * C14079 + C16596 * C141479 +
             C15877 * C14078) *
                C5863) *
               C141499) *
              C141281 * C2376 +
          (((C16595 + C16594 + C16593 + C16600) * C5863 +
            (C16590 + C16589 + C16588 + C16599) * C5864 +
            (C1711 * C14078 + C2209 * C141479 +
             (C188 * C5328 + C141327 * C5394) * C14079 +
             (C188 * C5452 + C141327 * C5730) * C141365) *
                C5865) *
               C141499 -
           ((C14519 + C14520 + C14521 + C14522) * C5865 +
            (C14518 + C14517 + C14516 + C14515) * C5864 +
            (C14514 + C14513 + C14512 + C14511) * C5863) *
               C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C14078 +
            (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
             C21920 * C3084 + C21821 * C3362) *
                C141479 +
            (C36893 + C36894 + C36895) * C14079 +
            (C37538 + C37539 + C37540) * C141365) *
               C141219 * C4148 -
           ((C21920 * C29251 + C21821 * C29639 + C21919 * C13374 +
             C21820 * C13768 + C21918 * C5449 + C21819 * C5727) *
                C141365 +
            (C21920 * C29087 + C21821 * C29173 + C21919 * C13205 +
             C21820 * C13294 + C21918 * C5325 + C21819 * C5391) *
                C14079 +
            (C37540 + C37539 + C37538) * C141479 +
            (C36895 + C36894 + C36893) * C14078) *
               C141219 * C141499) *
              C141281 * C2376 +
          (((C23870 + C23869 + C23868) * C14078 +
            (C24506 + C24505 + C24504) * C141479 +
            (C21918 * C5326 + C21819 * C5392 + C21919 * C13206 +
             C21820 * C13295 + C21920 * C29088 + C21821 * C29174) *
                C14079 +
            (C21918 * C5450 + C21819 * C5728 + C21919 * C13375 +
             C21820 * C13769 + C21920 * C29252 + C21821 * C29640) *
                C141365) *
               C141219 * C141499 -
           ((C24504 + C24505 + C24506) * C141365 +
            (C23868 + C23869 + C23870) * C14079 +
            (C22473 + C22472 + C22471) * C141479 +
            (C21948 + C21947 + C21946) * C14078) *
               C141219 * C4148) *
              C141281 * C141495)) /
            (p * q * std::sqrt(p + q));
    d2eezz[132] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                        C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                           C141327 * C5863 +
                       (C14636 + C14637) * C141327 * C5864 + C14643 * C5865) *
                          C4148 -
                      ((C16723 + C16724) * C141327 * C5865 +
                       (C16725 + C16726) * C141327 * C5864 +
                       (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
                        C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                           C141327 * C5863) *
                          C141499) *
                         C141281 * C2376 +
                     (((C16726 + C16725) * C141327 * C5863 +
                       (C16724 + C16723) * C141327 * C5864 +
                       (C14599 * C1598 + C16713 + C16713 + C141479 * C2280 +
                        C14600 * C5328 + C16714 + C16714 + C141365 * C5784) *
                           C141327 * C5865) *
                          C141499 -
                      ((C14640 + C14641) * C141327 * C5865 +
                       (C14639 + C14638) * C141327 * C5864 +
                       (C14637 + C14636) * C141327 * C5863) *
                          C4148) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                        C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                           C21819 +
                       (C36666 + C36667) * C21820 + C39228 * C21821) *
                          C141219 * C4148 -
                      ((C40268 + C40269) * C21821 + (C40270 + C40271) * C21820 +
                       (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
                        C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                           C21819) *
                          C141219 * C141499) *
                         C141281 * C2376 +
                     (((C16726 + C16725) * C21819 +
                       (C14599 * C3491 + C19194 + C19194 + C141479 * C4075 +
                        C14600 * C13206 + C19195 + C19195 + C141365 * C13846) *
                           C21820 +
                       (C14599 * C10471 + C37641 + C37641 + C141479 * C11357 +
                        C14600 * C29088 + C37642 + C37642 + C141365 * C29716) *
                           C21821) *
                          C141219 * C141499 -
                      ((C36671 + C36670) * C21821 + (C15624 + C15625) * C21820 +
                       (C14637 + C14636) * C21819) *
                          C141219 * C4148) *
                         C141281 * C141495)) /
                       (p * q * std::sqrt(p + q));
    d2eexx[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 +
             C5876 + C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
             C5865 * C122) *
                C141479 +
            (C15751 + C15752 + C15753) * C141365) *
               C141327 * C4148 -
           ((C5872 * C5327 + C13217 + C13217 + C5865 * C5335 + C5870 * C5326 +
             C13216 + C13216 + C5864 * C5334 + C5868 * C5325 + C13215 + C13215 +
             C5863 * C5333) *
                C141365 +
            (C15753 + C15752 + C15751) * C141479) *
               C141327 * C141499) *
              C816 +
          (((C10497 + C10496 + C10495) * C141479 +
            (C5868 * C13205 + C13218 + C13218 + C5863 * C13211 +
             C5870 * C13206 + C13219 + C13219 + C5864 * C13212 +
             C5872 * C13207 + C13220 + C13220 + C5865 * C13213) *
                C141365) *
               C141327 * C141499 -
           ((C10495 + C10496 + C10497) * C141365 +
            (C6742 + C6741 + C6740) * C141479) *
               C141327 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141479 +
             C36781 * C141365) *
                C21819 +
            (C35748 + C35749) * C21820 + C38599 * C21821) *
               C4148 -
           ((C39351 + C39341) * C21821 + (C39352 + C39344) * C21820 +
            ((C29774 * C5325 + C34562 + C34562 + C141219 * C5333) * C141365 +
             C36781 * C141479) *
                C21819) *
               C141499) *
              C816 +
          (((C39344 + C39352) * C21819 + (C39341 + C39351) * C21820 +
            (C32719 * C141479 +
             (C29774 * C34558 + C34565 + C34565 + C141219 * C34560) * C141365) *
                C21821) *
               C141499 -
           ((C38600 + C38601) * C21821 + (C35751 + C35750) * C21820 +
            (C35749 + C35748) * C21819) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C5869 +
             (C188 * C114 + C141327 * C195) * C5863 + C218 * C5871 +
             C219 * C5864 + C220 * C5873 + C221 * C5865) *
                C141479 +
            (C15883 + C15884 + C15859 + C15860 + C15861 + C15862) * C141365) *
               C4148 -
           ((C15879 * C5865 + C15880 * C5873 + C15881 * C5864 + C15882 * C5871 +
             (C188 * C5329 + C141327 * C5395) * C5863 +
             (C188 * C5325 + C141327 * C5391) * C5869) *
                C141365 +
            (C15862 + C15861 + C15860 + C15859 + C15884 + C15883) * C141479) *
               C141499) *
              C816 +
          (((C18490 + C18491 + C18484 + C18485 + C18486 + C18487) * C141479 +
            ((C188 * C13205 + C141327 * C13294) * C5869 +
             (C188 * C13208 + C141327 * C13297) * C5863 +
             (C188 * C13206 + C141327 * C13295) * C5871 +
             (C188 * C13209 + C141327 * C13298) * C5864 +
             (C188 * C13207 + C141327 * C13296) * C5873 +
             (C188 * C13210 + C141327 * C13299) * C5865) *
                C141365) *
               C141499 -
           ((C18487 + C18486 + C18485 + C18484 + C18491 + C18490) * C141365 +
            (C934 * C5865 + C935 * C5873 + C936 * C5864 + C937 * C5871 +
             (C188 * C828 + C141327 * C917) * C5863 +
             (C188 * C823 + C141327 * C912) * C5869) *
                C141479) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
              C21920 * C2960 + C21821 * C3026) *
                 C29775 +
             (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
              C21920 * C2964 + C21821 * C3030) *
                 C141219) *
                C141479 +
            ((C36893 + C36894 + C36895) * C29775 +
             (C36896 + C36897 + C36898) * C141219) *
                C141365) *
               C4148 -
           (((C21920 * C29089 + C21821 * C29175 + C21919 * C13208 +
              C21820 * C13297 + C21918 * C5329 + C21819 * C5395) *
                 C141219 +
             (C21920 * C29087 + C21821 * C29173 + C21919 * C13205 +
              C21820 * C13294 + C21918 * C5325 + C21819 * C5391) *
                 C29775) *
                C141365 +
            ((C36898 + C36897 + C36896) * C141219 +
             (C36895 + C36894 + C36893) * C29775) *
                C141479) *
               C141499) *
              C816 +
          ((((C39463 + C39464 + C39465) * C29775 +
             (C39466 + C39467 + C39468) * C141219) *
                C141479 +
            ((C21918 * C13205 + C21819 * C13294 + C21919 * C29087 +
              C21820 * C29173 + C21920 * C34558 + C21821 * C34615) *
                 C29775 +
             (C21918 * C13208 + C21819 * C13297 + C21919 * C29089 +
              C21820 * C29175 + C21920 * C34559 + C21821 * C34616) *
                 C141219) *
                C141365) *
               C141499 -
           (((C39468 + C39467 + C39466) * C141219 +
             (C39465 + C39464 + C39463) * C29775) *
                C141365 +
            ((C21920 * C9670 + C21821 * C9771 + C21919 * C2964 +
              C21820 * C3030 + C21918 * C828 + C21819 * C917) *
                 C141219 +
             (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 +
              C21820 * C3026 + C21918 * C823 + C21819 * C912) *
                 C29775) *
                C141479) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C5869 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C5863 +
            (C14105 + C14106) * C5871 + (C14107 + C14108) * C5864 +
            C14117 * C5873 + C14118 * C5865) *
               C141327 * C4148 -
           ((C15999 + C16000) * C5865 + (C16001 + C16002) * C5873 +
            (C16003 + C16004) * C5864 + (C16005 + C16006) * C5871 +
            (C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
             C141479 * C1789) *
                C5863 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C5869) *
               C141327 * C141499) *
              C816 +
          (((C14078 * C3490 + C141479 * C3646 + C14079 * C13205 +
             C141365 * C13374) *
                C5869 +
            (C14078 * C3494 + C141479 * C3650 + C14079 * C13208 +
             C141365 * C13377) *
                C5863 +
            (C14078 * C3491 + C141479 * C3647 + C14079 * C13206 +
             C141365 * C13375) *
                C5871 +
            (C14078 * C3495 + C141479 * C3651 + C14079 * C13209 +
             C141365 * C13378) *
                C5864 +
            (C14078 * C3492 + C141479 * C3648 + C14079 * C13207 +
             C141365 * C13376) *
                C5873 +
            (C14078 * C3496 + C141479 * C3652 + C14079 * C13210 +
             C141365 * C13379) *
                C5865) *
               C141327 * C141499 -
           ((C14966 + C14967) * C5865 + (C14968 + C14969) * C5873 +
            (C14970 + C14971) * C5864 + (C14972 + C14973) * C5871 +
            (C14079 * C3494 + C141365 * C3650 + C14078 * C828 +
             C141479 * C1011) *
                C5863 +
            (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
             C141479 * C1006) *
                C5869) *
               C141327 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C29775 +
             (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
              C141365 * C1789) *
                 C141219) *
                C21819 +
            ((C35986 + C35987) * C29775 + (C35988 + C35989) * C141219) *
                C21820 +
            C38766 * C21821) *
               C4148 -
           (((C39583 + C39584) * C141219 + (C39585 + C39586) * C29775) *
                C21821 +
            ((C39587 + C39588) * C141219 + (C39589 + C39590) * C29775) *
                C21820 +
            ((C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
              C141479 * C1789) *
                 C141219 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C29775) *
                C21819) *
               C141499) *
              C816 +
          ((((C39590 + C39589) * C29775 + (C39588 + C39587) * C141219) *
                C21819 +
            ((C39586 + C39585) * C29775 + (C39584 + C39583) * C141219) *
                C21820 +
            ((C14078 * C26351 + C141479 * C26579 + C14079 * C34558 +
              C141365 * C34667) *
                 C29775 +
             (C14078 * C26353 + C141479 * C26581 + C14079 * C34559 +
              C141365 * C34668) *
                 C141219) *
                C21821) *
               C141499 -
           (((C38762 + C38763) * C141219 + (C38764 + C38765) * C29775) *
                C21821 +
            ((C35993 + C35992) * C141219 + (C35991 + C35990) * C29775) *
                C21820 +
            ((C35989 + C35988) * C141219 + (C35987 + C35986) * C29775) *
                C21819) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
              C5873 * C110 + C5865 * C116) *
                 C188 +
             (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
              C5873 * C191 + C5865 * C364) *
                 C141327) *
                C141479 +
            ((C16129 + C16130 + C16131) * C188 +
             (C16132 + C16133 + C16134) * C141327) *
                C141365) *
               C4148 -
           (((C5873 * C5393 + C5865 * C5509 + C5871 * C5392 + C5864 * C5508 +
              C5869 * C5391 + C5863 * C5507) *
                 C141327 +
             (C5873 * C5327 + C5865 * C5331 + C5871 * C5326 + C5864 * C5330 +
              C5869 * C5325 + C5863 * C5329) *
                 C188) *
                C141365 +
            ((C16134 + C16133 + C16132) * C141327 +
             (C16131 + C16130 + C16129) * C188) *
                C141479) *
               C141499) *
              C816 +
          ((((C10836 + C10835 + C10834) * C188 +
             (C10833 + C10832 + C10831) * C141327) *
                C141479 +
            ((C5869 * C13205 + C5863 * C13208 + C5871 * C13206 +
              C5864 * C13209 + C5873 * C13207 + C5865 * C13210) *
                 C188 +
             (C5869 * C13294 + C5863 * C13454 + C5871 * C13295 +
              C5864 * C13455 + C5873 * C13296 + C5865 * C13456) *
                 C141327) *
                C141365) *
               C141499 -
           (((C10831 + C10832 + C10833) * C141327 +
             (C10834 + C10835 + C10836) * C188) *
                C141365 +
            ((C7123 + C7122 + C7121) * C141327 +
             (C7120 + C7119 + C7118) * C188) *
                C141479) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C21918 +
             (C29775 * C189 + C141219 * C362) * C21819 + C30547 * C21919 +
             C30548 * C21820 + C30549 * C21920 + C30550 * C21821) *
                C141479 +
            (C37115 + C37116 + C37099 + C37100 + C37101 + C37102) * C141365) *
               C4148 -
           ((C39703 * C21821 + C39704 * C21920 + C39705 * C21820 +
             C39706 * C21919 + (C29775 * C5391 + C141219 * C5507) * C21819 +
             (C29775 * C5325 + C141219 * C5329) * C21918) *
                C141365 +
            (C37102 + C37101 + C37100 + C37099 + C37116 + C37115) * C141479) *
               C141499) *
              C816 +
          (((C39697 + C39698 + C39699 + C39700 + C39701 + C39702) * C141479 +
            (C39706 * C21918 + C39705 * C21819 + C39704 * C21919 +
             C39703 * C21820 + (C29775 * C34558 + C141219 * C34559) * C21920 +
             (C29775 * C34615 + C141219 * C34719) * C21821) *
                C141365) *
               C141499 -
           ((C39702 + C39701 + C39700 + C39699 + C39698 + C39697) * C141365 +
            (C30552 * C21821 + C30551 * C21920 + C30550 * C21820 +
             C30549 * C21919 + C30548 * C21819 + C30547 * C21918) *
                C141479) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C418 * C108 + C426 + C426 + C141327 * C419) * C5863 +
             C448 * C5864 + C449 * C5865) *
                C141479 +
            (C16259 + C16241 + C16242) * C141365) *
               C4148 -
           ((C16257 * C5865 + C16258 * C5864 +
             (C418 * C5325 + C5566 + C5566 + C141327 * C5561) * C5863) *
                C141365 +
            (C16242 + C16241 + C16259) * C141479) *
               C141499) *
              C816 +
          (((C18796 + C18788 + C18789) * C141479 +
            ((C418 * C13205 + C18790 + C18790 + C141327 * C13531) * C5863 +
             (C418 * C13206 + C18791 + C18791 + C141327 * C13532) * C5864 +
             (C418 * C13207 + C18792 + C18792 + C141327 * C13533) * C5865) *
                C141365) *
               C141499 -
           ((C18789 + C18788 + C18796) * C141365 +
            (C1192 * C5865 + C1193 * C5864 +
             (C418 * C823 + C1183 + C1183 + C141327 * C1171) * C5863) *
                C141479) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
             C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
             C22185 + C21821 * C3196) *
                C141219 * C141479 +
            (C37229 + C37230 + C37231) * C141219 * C141365) *
               C4148 -
           ((C22181 * C29087 + C29410 + C29410 + C21821 * C29405 +
             C22180 * C13205 + C29409 + C29409 + C21820 * C13531 +
             C22179 * C5325 + C29408 + C29408 + C21819 * C5561) *
                C141219 * C141365 +
            (C37231 + C37230 + C37229) * C141219 * C141479) *
               C141499) *
              C816 +
          (((C39820 + C39821 + C39822) * C141219 * C141479 +
            (C22179 * C13205 + C39811 + C39811 + C21819 * C13531 +
             C22180 * C29087 + C39812 + C39812 + C21820 * C29405 +
             C22181 * C34558 + C39813 + C39813 + C21821 * C34770) *
                C141219 * C141365) *
               C141499 -
           ((C39822 + C39821 + C39820) * C141219 * C141365 +
            (C22181 * C9667 + C23188 + C23188 + C21821 * C10035 +
             C22180 * C2960 + C23189 + C23189 + C21820 * C3196 + C22179 * C823 +
             C23190 + C23190 + C21819 * C1171) *
                C141219 * C141479) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyz[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
              C141365 * C1784) *
                 C188 +
             (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
              C141365 * C2040) *
                 C141327) *
                C5863 +
            ((C14105 + C14106) * C188 + (C14354 + C14355) * C141327) * C5864 +
            C14362 * C5865) *
               C4148 -
           (((C16366 + C16367) * C141327 + (C16001 + C16002) * C188) * C5865 +
            ((C16368 + C16369) * C141327 + (C16005 + C16006) * C188) * C5864 +
            ((C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
              C141479 * C2040) *
                 C141327 +
             (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
              C141479 * C1784) *
                 C188) *
                C5863) *
               C141499) *
              C816 +
          ((((C14078 * C3490 + C141479 * C3646 + C14079 * C13205 +
              C141365 * C13374) *
                 C188 +
             (C14078 * C3572 + C141479 * C3864 + C14079 * C13294 +
              C141365 * C13614) *
                 C141327) *
                C5863 +
            ((C14078 * C3491 + C141479 * C3647 + C14079 * C13206 +
              C141365 * C13375) *
                 C188 +
             (C14078 * C3573 + C141479 * C3865 + C14079 * C13295 +
              C141365 * C13615) *
                 C141327) *
                C5864 +
            ((C14078 * C3492 + C141479 * C3648 + C14079 * C13207 +
              C141365 * C13376) *
                 C188 +
             (C14078 * C3574 + C141479 * C3866 + C14079 * C13296 +
              C141365 * C13616) *
                 C141327) *
                C5865) *
               C141499 -
           (((C15286 + C15287) * C141327 + (C14968 + C14969) * C188) * C5865 +
            ((C15288 + C15289) * C141327 + (C14972 + C14973) * C188) * C5864 +
            ((C14079 * C3572 + C141365 * C3864 + C14078 * C912 +
              C141479 * C1262) *
                 C141327 +
             (C14079 * C3490 + C141365 * C3646 + C14078 * C823 +
              C141479 * C1006) *
                 C188) *
                C5863) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C21918 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C21819 +
            (C35986 + C35987) * C21919 + (C36316 + C36317) * C21820 +
            C38750 * C21920 + C38992 * C21821) *
               C141219 * C4148 -
           ((C39929 + C39930) * C21821 + (C39585 + C39586) * C21920 +
            (C39931 + C39932) * C21820 + (C39589 + C39590) * C21919 +
            (C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
             C141479 * C2040) *
                C21819 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C21918) *
               C141219 * C141499) *
              C816 +
          (((C39590 + C39589) * C21918 + (C39932 + C39931) * C21819 +
            (C39586 + C39585) * C21919 + (C39930 + C39929) * C21820 +
            (C14078 * C26351 + C141479 * C26579 + C14079 * C34558 +
             C141365 * C34667) *
                C21920 +
            (C14078 * C26477 + C141479 * C26925 + C14079 * C34615 +
             C141365 * C34825) *
                C21821) *
               C141219 * C141499 -
           ((C38997 + C38998) * C21821 + (C38764 + C38765) * C21920 +
            (C36319 + C36318) * C21820 + (C35991 + C35990) * C21919 +
            (C36317 + C36316) * C21819 + (C35987 + C35986) * C21918) *
               C141219 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezx[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
             C5873 * C110 + C5865 * C116) *
                C14078 +
            (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
             C5873 * C278 + C5865 * C581) *
                C141479 +
            (C16129 + C16130 + C16131) * C14079 +
            (C16480 + C16481 + C16482) * C141365) *
               C141327 * C4148 -
           ((C5873 * C5451 + C5865 * C5675 + C5871 * C5450 + C5864 * C5674 +
             C5869 * C5449 + C5863 * C5673) *
                C141365 +
            (C5873 * C5327 + C5865 * C5331 + C5871 * C5326 + C5864 * C5330 +
             C5869 * C5325 + C5863 * C5329) *
                C14079 +
            (C16482 + C16481 + C16480) * C141479 +
            (C16131 + C16130 + C16129) * C14078) *
               C141327 * C141499) *
              C816 +
          (((C10836 + C10835 + C10834) * C14078 +
            (C11157 + C11156 + C11155) * C141479 +
            (C5869 * C13205 + C5863 * C13208 + C5871 * C13206 + C5864 * C13209 +
             C5873 * C13207 + C5865 * C13210) *
                C14079 +
            (C5869 * C13374 + C5863 * C13691 + C5871 * C13375 + C5864 * C13692 +
             C5873 * C13376 + C5865 * C13693) *
                C141365) *
               C141327 * C141499 -
           ((C11155 + C11156 + C11157) * C141365 +
            (C10834 + C10835 + C10836) * C14079 +
            (C7483 + C7482 + C7481) * C141479 +
            (C7120 + C7119 + C7118) * C14078) *
               C141327 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C29775 * C108 + C141219 * C114) * C14078 +
             (C29775 * C276 + C141219 * C579) * C141479 + C37111 * C14079 +
             C37432 * C141365) *
                C21819 +
            (C36420 + C36421 + C36422 + C36423) * C21820 + C39079 * C21821) *
               C4148 -
           ((C40043 + C40033 + C40034 + C40035) * C21821 +
            (C40044 + C40038 + C40039 + C40040) * C21820 +
            ((C29775 * C5449 + C141219 * C5673) * C141365 +
             (C29775 * C5325 + C141219 * C5329) * C14079 + C37432 * C141479 +
             C37111 * C14078) *
                C21819) *
               C141499) *
              C816 +
          (((C40040 + C40039 + C40038 + C40044) * C21819 +
            (C40035 + C40034 + C40033 + C40043) * C21820 +
            (C32953 * C14078 + C33175 * C141479 +
             (C29775 * C34558 + C141219 * C34559) * C14079 +
             (C29775 * C34667 + C141219 * C34876) * C141365) *
                C21821) *
               C141499 -
           ((C39074 + C39075 + C39076 + C39077) * C21821 +
            (C36427 + C36426 + C36425 + C36424) * C21820 +
            (C36423 + C36422 + C36421 + C36420) * C21819) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C188 * C108 + C141327 * C189) * C14078 +
             (C188 * C276 + C141327 * C635) * C141479 + C15877 * C14079 +
             C16596 * C141365) *
                C5863 +
            (C14511 + C14512 + C14513 + C14514) * C5864 + C14525 * C5865) *
               C4148 -
           ((C16599 + C16588 + C16589 + C16590) * C5865 +
            (C16600 + C16593 + C16594 + C16595) * C5864 +
            ((C188 * C5449 + C141327 * C5727) * C141365 +
             (C188 * C5325 + C141327 * C5391) * C14079 + C16596 * C141479 +
             C15877 * C14078) *
                C5863) *
               C141499) *
              C816 +
          (((C18488 * C14078 + C19093 * C141479 +
             (C188 * C13205 + C141327 * C13294) * C14079 +
             (C188 * C13374 + C141327 * C13768) * C141365) *
                C5863 +
            (C14851 * C14078 + C15497 * C141479 +
             (C188 * C13206 + C141327 * C13295) * C14079 +
             (C188 * C13375 + C141327 * C13769) * C141365) *
                C5864 +
            (C14849 * C14078 + C15496 * C141479 +
             (C188 * C13207 + C141327 * C13296) * C14079 +
             (C188 * C13376 + C141327 * C13770) * C141365) *
                C5865) *
               C141499 -
           ((C15498 + C15488 + C15489 + C15490) * C5865 +
            (C15499 + C15493 + C15494 + C15495) * C5864 +
            (C19093 * C141365 + C18488 * C14079 +
             (C188 * C1006 + C141327 * C1419) * C141479 +
             (C188 * C823 + C141327 * C912) * C14078) *
                C5863) *
               C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C14078 +
            (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
             C21920 * C3084 + C21821 * C3362) *
                C141479 +
            (C36893 + C36894 + C36895) * C14079 +
            (C37538 + C37539 + C37540) * C141365) *
               C141219 * C4148 -
           ((C21920 * C29251 + C21821 * C29639 + C21919 * C13374 +
             C21820 * C13768 + C21918 * C5449 + C21819 * C5727) *
                C141365 +
            (C21920 * C29087 + C21821 * C29173 + C21919 * C13205 +
             C21820 * C13294 + C21918 * C5325 + C21819 * C5391) *
                C14079 +
            (C37540 + C37539 + C37538) * C141479 +
            (C36895 + C36894 + C36893) * C14078) *
               C141219 * C141499) *
              C816 +
          (((C39463 + C39464 + C39465) * C14078 +
            (C40149 + C40150 + C40151) * C141479 +
            (C21918 * C13205 + C21819 * C13294 + C21919 * C29087 +
             C21820 * C29173 + C21920 * C34558 + C21821 * C34615) *
                C14079 +
            (C21918 * C13374 + C21819 * C13768 + C21919 * C29251 +
             C21820 * C29639 + C21920 * C34667 + C21821 * C34927) *
                C141365) *
               C141219 * C141499 -
           ((C40151 + C40150 + C40149) * C141365 +
            (C39465 + C39464 + C39463) * C14079 +
            (C21920 * C9848 + C21821 * C10284 + C21919 * C3084 +
             C21820 * C3362 + C21918 * C1006 + C21819 * C1419) *
                C141479 +
            (C21920 * C9667 + C21821 * C9768 + C21919 * C2960 + C21820 * C3026 +
             C21918 * C823 + C21819 * C912) *
                C14078) *
               C141219 * C4148) *
              C141497) *
         C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[133] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                        C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                           C141327 * C5863 +
                       (C14636 + C14637) * C141327 * C5864 + C14643 * C5865) *
                          C4148 -
                      ((C16723 + C16724) * C141327 * C5865 +
                       (C16725 + C16726) * C141327 * C5864 +
                       (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
                        C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                           C141327 * C5863) *
                          C141499) *
                         C816 +
                     (((C14599 * C3490 + C19192 + C19192 + C141479 * C4074 +
                        C14600 * C13205 + C19193 + C19193 + C141365 * C13845) *
                           C141327 * C5863 +
                       (C14599 * C3491 + C19194 + C19194 + C141479 * C4075 +
                        C14600 * C13206 + C19195 + C19195 + C141365 * C13846) *
                           C141327 * C5864 +
                       (C14599 * C3492 + C19196 + C19196 + C141479 * C4076 +
                        C14600 * C13207 + C19197 + C19197 + C141365 * C13847) *
                           C141327 * C5865) *
                          C141499 -
                      ((C15622 + C15623) * C141327 * C5865 +
                       (C15624 + C15625) * C141327 * C5864 +
                       (C14600 * C3490 + C15610 + C15610 + C141365 * C4074 +
                        C14599 * C823 + C15611 + C15611 + C141479 * C1505) *
                           C141327 * C5863) *
                          C4148) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                        C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                           C21819 +
                       (C36666 + C36667) * C21820 + C39228 * C21821) *
                          C141219 * C4148 -
                      ((C40268 + C40269) * C21821 + (C40270 + C40271) * C21820 +
                       (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
                        C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                           C21819) *
                          C141219 * C141499) *
                         C816 +
                     (((C40271 + C40270) * C21819 + (C40269 + C40268) * C21820 +
                       (C14599 * C26351 + C40258 + C40258 + C141479 * C27240 +
                        C14600 * C34558 + C40259 + C40259 + C141365 * C34978) *
                           C21821) *
                          C141219 * C141499 -
                      ((C39239 + C39240) * C21821 + (C36669 + C36668) * C21820 +
                       (C36667 + C36666) * C21819) *
                          C141219 * C4148) *
                         C141497) *
                    C141247) /
                       (p * q * std::sqrt(p + q));
    d2eexx[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5868 * C108 + C5875 + C5875 + C5863 * C120 + C5870 * C109 + C5876 +
            C5876 + C5864 * C121 + C5872 * C110 + C5877 + C5877 +
            C5865 * C122) *
               C141479 +
           (C15751 + C15752 + C15753) * C141365) *
              C141327 * C5322 -
          ((C21060 + C21061 + C21062) * C141365 +
           (C15753 + C15752 + C15751) * C141479) *
              C141327 * C5323 +
          ((C21062 + C21061 + C21060) * C141479 +
           (C5868 * C21035 + C21051 + C21051 + C5863 * C21041 + C5870 * C21036 +
            C21052 + C21052 + C5864 * C21042 + C5872 * C21037 + C21053 +
            C21053 + C5865 * C21043) *
               C141365) *
              C141327 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29774 * C108 + C29777 + C29777 + C141219 * C120) * C141479 +
            C36781 * C141365) *
               C21819 +
           (C35748 + C35749) * C21820 + C38599 * C21821) *
              C5322 -
          ((C39351 + C39341) * C21821 + (C39352 + C39344) * C21820 +
           (C42123 * C141365 + C36781 * C141479) * C21819) *
              C5323 +
          ((C42123 * C141479 +
            (C29774 * C21035 + C42118 + C42118 + C141219 * C21041) * C141365) *
               C21819 +
           (C39350 * C141479 +
            (C29774 * C42109 + C42119 + C42119 + C141219 * C42113) * C141365) *
               C21820 +
           (C39349 * C141479 +
            (C29774 * C42110 + C42120 + C42120 + C141219 * C42114) * C141365) *
               C21821) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eexy[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C5869 +
            (C188 * C114 + C141327 * C195) * C5863 + C218 * C5871 +
            C219 * C5864 + C220 * C5873 + C221 * C5865) *
               C141479 +
           (C15883 + C15884 + C15859 + C15860 + C15861 + C15862) * C141365) *
              C5322 -
          ((C21143 + C21144 + C21145 + C21146 + C21153 + C21154) * C141365 +
           (C15862 + C15861 + C15860 + C15859 + C15884 + C15883) * C141479) *
              C5323 +
          ((C21154 + C21153 + C21146 + C21145 + C21144 + C21143) * C141479 +
           ((C188 * C21035 + C141327 * C21136) * C5869 +
            (C188 * C21038 + C141327 * C21139) * C5863 +
            (C188 * C21036 + C141327 * C21137) * C5871 +
            (C188 * C21039 + C141327 * C21140) * C5864 +
            (C188 * C21037 + C141327 * C21138) * C5873 +
            (C188 * C21040 + C141327 * C21141) * C5865) *
               C141365) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
             C21920 * C2960 + C21821 * C3026) *
                C29775 +
            (C21918 * C114 + C21819 * C195 + C21919 * C828 + C21820 * C917 +
             C21920 * C2964 + C21821 * C3030) *
                C141219) *
               C141479 +
           ((C36893 + C36894 + C36895) * C29775 +
            (C36896 + C36897 + C36898) * C141219) *
               C141365) *
              C5322 -
          (((C42214 + C42215 + C42216) * C141219 +
            (C42217 + C42218 + C42219) * C29775) *
               C141365 +
           ((C36898 + C36897 + C36896) * C141219 +
            (C36895 + C36894 + C36893) * C29775) *
               C141479) *
              C5323 +
          (((C42219 + C42218 + C42217) * C29775 +
            (C42216 + C42215 + C42214) * C141219) *
               C141479 +
           ((C21918 * C21035 + C21819 * C21136 + C21919 * C42109 +
             C21820 * C42197 + C21920 * C42110 + C21821 * C42198) *
                C29775 +
            (C21918 * C21038 + C21819 * C21139 + C21919 * C42111 +
             C21820 * C42199 + C21920 * C42112 + C21821 * C42200) *
                C141219) *
               C141365) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eexz[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14078 * C108 + C141479 * C276 + C14079 * C1601 + C141365 * C1784) *
               C5869 +
           (C14078 * C114 + C141479 * C282 + C14079 * C1606 + C141365 * C1789) *
               C5863 +
           (C14105 + C14106) * C5871 + (C14107 + C14108) * C5864 +
           C14117 * C5873 + C14118 * C5865) *
              C141327 * C5322 -
          ((C15999 + C16000) * C5865 + (C16001 + C16002) * C5873 +
           (C16003 + C16004) * C5864 + (C16005 + C16006) * C5871 +
           (C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
            C141479 * C1789) *
               C5863 +
           (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
            C141479 * C1784) *
               C5869) *
              C141327 * C5323 +
          ((C14078 * C5325 + C141479 * C5449 + C14079 * C21035 +
            C141365 * C21228) *
               C5869 +
           (C14078 * C5329 + C141479 * C5453 + C14079 * C21038 +
            C141365 * C21231) *
               C5863 +
           (C14078 * C5326 + C141479 * C5450 + C14079 * C21036 +
            C141365 * C21229) *
               C5871 +
           (C14078 * C5330 + C141479 * C5454 + C14079 * C21039 +
            C141365 * C21232) *
               C5864 +
           (C14078 * C5327 + C141479 * C5451 + C14079 * C21037 +
            C141365 * C21230) *
               C5873 +
           (C14078 * C5331 + C141479 * C5455 + C14079 * C21040 +
            C141365 * C21233) *
               C5865) *
              C141327 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C29775 +
            (C14078 * C114 + C141479 * C282 + C14079 * C1606 +
             C141365 * C1789) *
                C141219) *
               C21819 +
           ((C35986 + C35987) * C29775 + (C35988 + C35989) * C141219) * C21820 +
           C38766 * C21821) *
              C5322 -
          (((C39583 + C39584) * C141219 + (C39585 + C39586) * C29775) * C21821 +
           ((C39587 + C39588) * C141219 + (C39589 + C39590) * C29775) * C21820 +
           ((C14079 * C5329 + C141365 * C5453 + C14078 * C1606 +
             C141479 * C1789) *
                C141219 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C29775) *
               C21819) *
              C5323 +
          (((C14078 * C5325 + C141479 * C5449 + C14079 * C21035 +
             C141365 * C21228) *
                C29775 +
            (C14078 * C5329 + C141479 * C5453 + C14079 * C21038 +
             C141365 * C21231) *
                C141219) *
               C21819 +
           ((C14078 * C13205 + C141479 * C13374 + C14079 * C42109 +
             C141365 * C42293) *
                C29775 +
            (C14078 * C13208 + C141479 * C13377 + C14079 * C42111 +
             C141365 * C42295) *
                C141219) *
               C21820 +
           ((C14078 * C29087 + C141479 * C29251 + C14079 * C42110 +
             C141365 * C42294) *
                C29775 +
            (C14078 * C29089 + C141479 * C29253 + C14079 * C42112 +
             C141365 * C42296) *
                C141219) *
               C21821) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyx[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
             C5873 * C110 + C5865 * C116) *
                C188 +
            (C5869 * C189 + C5863 * C362 + C5871 * C190 + C5864 * C363 +
             C5873 * C191 + C5865 * C364) *
                C141327) *
               C141479 +
           ((C16129 + C16130 + C16131) * C188 +
            (C16132 + C16133 + C16134) * C141327) *
               C141365) *
              C5322 -
          (((C21324 + C21325 + C21326) * C141327 +
            (C21327 + C21328 + C21329) * C188) *
               C141365 +
           ((C16134 + C16133 + C16132) * C141327 +
            (C16131 + C16130 + C16129) * C188) *
               C141479) *
              C5323 +
          (((C21329 + C21328 + C21327) * C188 +
            (C21326 + C21325 + C21324) * C141327) *
               C141479 +
           ((C5869 * C21035 + C5863 * C21038 + C5871 * C21036 + C5864 * C21039 +
             C5873 * C21037 + C5865 * C21040) *
                C188 +
            (C5869 * C21136 + C5863 * C21308 + C5871 * C21137 + C5864 * C21309 +
             C5873 * C21138 + C5865 * C21310) *
                C141327) *
               C141365) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C21918 +
            (C29775 * C189 + C141219 * C362) * C21819 + C30547 * C21919 +
            C30548 * C21820 + C30549 * C21920 + C30550 * C21821) *
               C141479 +
           (C37115 + C37116 + C37099 + C37100 + C37101 + C37102) * C141365) *
              C5322 -
          ((C42374 + C42375 + C42376 + C42377 + C42384 + C42385) * C141365 +
           (C37102 + C37101 + C37100 + C37099 + C37116 + C37115) * C141479) *
              C5323 +
          ((C42385 + C42384 + C42377 + C42376 + C42375 + C42374) * C141479 +
           ((C29775 * C21035 + C141219 * C21038) * C21918 +
            (C29775 * C21136 + C141219 * C21308) * C21819 +
            (C29775 * C42109 + C141219 * C42111) * C21919 +
            (C29775 * C42197 + C141219 * C42371) * C21820 +
            (C29775 * C42110 + C141219 * C42112) * C21920 +
            (C29775 * C42198 + C141219 * C42372) * C21821) *
               C141365) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyy[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C418 * C108 + C426 + C426 + C141327 * C419) * C5863 +
            C448 * C5864 + C449 * C5865) *
               C141479 +
           (C16259 + C16241 + C16242) * C141365) *
              C5322 -
          ((C21407 + C21408 + C21417) * C141365 +
           (C16242 + C16241 + C16259) * C141479) *
              C5323 +
          ((C21417 + C21408 + C21407) * C141479 +
           ((C418 * C21035 + C21411 + C21411 + C141327 * C21403) * C5863 +
            (C418 * C21036 + C21412 + C21412 + C141327 * C21404) * C5864 +
            (C418 * C21037 + C21413 + C21413 + C141327 * C21405) * C5865) *
               C141365) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22179 * C108 + C22183 + C22183 + C21819 * C419 + C22180 * C823 +
            C22184 + C22184 + C21820 * C1171 + C22181 * C2960 + C22185 +
            C22185 + C21821 * C3196) *
               C141219 * C141479 +
           (C37229 + C37230 + C37231) * C141219 * C141365) *
              C5322 -
          ((C42477 + C42478 + C42479) * C141219 * C141365 +
           (C37231 + C37230 + C37229) * C141219 * C141479) *
              C5323 +
          ((C42479 + C42478 + C42477) * C141219 * C141479 +
           (C22179 * C21035 + C42468 + C42468 + C21819 * C21403 +
            C22180 * C42109 + C42469 + C42469 + C21820 * C42459 +
            C22181 * C42110 + C42470 + C42470 + C21821 * C42460) *
               C141219 * C141365) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eeyz[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14078 * C108 + C141479 * C276 + C14079 * C1601 +
             C141365 * C1784) *
                C188 +
            (C14078 * C189 + C141479 * C501 + C14079 * C1690 +
             C141365 * C2040) *
                C141327) *
               C5863 +
           ((C14105 + C14106) * C188 + (C14354 + C14355) * C141327) * C5864 +
           C14362 * C5865) *
              C5322 -
          (((C16366 + C16367) * C141327 + (C16001 + C16002) * C188) * C5865 +
           ((C16368 + C16369) * C141327 + (C16005 + C16006) * C188) * C5864 +
           ((C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
             C141479 * C2040) *
                C141327 +
            (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
             C141479 * C1784) *
                C188) *
               C5863) *
              C5323 +
          (((C14078 * C5325 + C141479 * C5449 + C14079 * C21035 +
             C141365 * C21228) *
                C188 +
            (C14078 * C5391 + C141479 * C5619 + C14079 * C21136 +
             C141365 * C21491) *
                C141327) *
               C5863 +
           ((C14078 * C5326 + C141479 * C5450 + C14079 * C21036 +
             C141365 * C21229) *
                C188 +
            (C14078 * C5392 + C141479 * C5620 + C14079 * C21137 +
             C141365 * C21492) *
                C141327) *
               C5864 +
           ((C14078 * C5327 + C141479 * C5451 + C14079 * C21037 +
             C141365 * C21230) *
                C188 +
            (C14078 * C5393 + C141479 * C5621 + C14079 * C21138 +
             C141365 * C21493) *
                C141327) *
               C5865) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14078 * C108 + C141479 * C276 + C14079 * C1601 + C141365 * C1784) *
               C21918 +
           (C14078 * C189 + C141479 * C501 + C14079 * C1690 + C141365 * C2040) *
               C21819 +
           (C35986 + C35987) * C21919 + (C36316 + C36317) * C21820 +
           C38750 * C21920 + C38992 * C21821) *
              C141219 * C5322 -
          ((C39929 + C39930) * C21821 + (C39585 + C39586) * C21920 +
           (C39931 + C39932) * C21820 + (C39589 + C39590) * C21919 +
           (C14079 * C5391 + C141365 * C5619 + C14078 * C1690 +
            C141479 * C2040) *
               C21819 +
           (C14079 * C5325 + C141365 * C5449 + C14078 * C1601 +
            C141479 * C1784) *
               C21918) *
              C141219 * C5323 +
          ((C14078 * C5325 + C141479 * C5449 + C14079 * C21035 +
            C141365 * C21228) *
               C21918 +
           (C14078 * C5391 + C141479 * C5619 + C14079 * C21136 +
            C141365 * C21491) *
               C21819 +
           (C14078 * C13205 + C141479 * C13374 + C14079 * C42109 +
            C141365 * C42293) *
               C21919 +
           (C14078 * C13294 + C141479 * C13614 + C14079 * C42197 +
            C141365 * C42553) *
               C21820 +
           (C14078 * C29087 + C141479 * C29251 + C14079 * C42110 +
            C141365 * C42294) *
               C21920 +
           (C14078 * C29173 + C141479 * C29487 + C14079 * C42198 +
            C141365 * C42554) *
               C21821) *
              C141219 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eezx[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5869 * C108 + C5863 * C114 + C5871 * C109 + C5864 * C115 +
            C5873 * C110 + C5865 * C116) *
               C14078 +
           (C5869 * C276 + C5863 * C579 + C5871 * C277 + C5864 * C580 +
            C5873 * C278 + C5865 * C581) *
               C141479 +
           (C16129 + C16130 + C16131) * C14079 +
           (C16480 + C16481 + C16482) * C141365) *
              C141327 * C5322 -
          ((C21578 + C21579 + C21580) * C141365 +
           (C21327 + C21328 + C21329) * C14079 +
           (C16482 + C16481 + C16480) * C141479 +
           (C16131 + C16130 + C16129) * C14078) *
              C141327 * C5323 +
          ((C21329 + C21328 + C21327) * C14078 +
           (C21580 + C21579 + C21578) * C141479 +
           (C5869 * C21035 + C5863 * C21038 + C5871 * C21036 + C5864 * C21039 +
            C5873 * C21037 + C5865 * C21040) *
               C14079 +
           (C5869 * C21228 + C5863 * C21568 + C5871 * C21229 + C5864 * C21569 +
            C5873 * C21230 + C5865 * C21570) *
               C141365) *
              C141327 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C29775 * C108 + C141219 * C114) * C14078 +
            (C29775 * C276 + C141219 * C579) * C141479 + C37111 * C14079 +
            C37432 * C141365) *
               C21819 +
           (C36420 + C36421 + C36422 + C36423) * C21820 + C39079 * C21821) *
              C5322 -
          ((C40043 + C40033 + C40034 + C40035) * C21821 +
           (C40044 + C40038 + C40039 + C40040) * C21820 +
           (C42634 * C141365 + C42383 * C14079 + C37432 * C141479 +
            C37111 * C14078) *
               C21819) *
              C5323 +
          ((C42383 * C14078 + C42634 * C141479 +
            (C29775 * C21035 + C141219 * C21038) * C14079 +
            (C29775 * C21228 + C141219 * C21568) * C141365) *
               C21819 +
           (C39706 * C14078 + C40042 * C141479 +
            (C29775 * C42109 + C141219 * C42111) * C14079 +
            (C29775 * C42293 + C141219 * C42629) * C141365) *
               C21820 +
           (C39704 * C14078 + C40041 * C141479 +
            (C29775 * C42110 + C141219 * C42112) * C14079 +
            (C29775 * C42294 + C141219 * C42630) * C141365) *
               C21821) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eezy[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C188 * C108 + C141327 * C189) * C14078 +
            (C188 * C276 + C141327 * C635) * C141479 + C15877 * C14079 +
            C16596 * C141365) *
               C5863 +
           (C14511 + C14512 + C14513 + C14514) * C5864 + C14525 * C5865) *
              C5322 -
          ((C16599 + C16588 + C16589 + C16590) * C5865 +
           (C16600 + C16593 + C16594 + C16595) * C5864 +
           (C21660 * C141365 + C21152 * C14079 + C16596 * C141479 +
            C15877 * C14078) *
               C5863) *
              C5323 +
          ((C21152 * C14078 + C21660 * C141479 +
            (C188 * C21035 + C141327 * C21136) * C14079 +
            (C188 * C21228 + C141327 * C21654) * C141365) *
               C5863 +
           (C15882 * C14078 + C16598 * C141479 +
            (C188 * C21036 + C141327 * C21137) * C14079 +
            (C188 * C21229 + C141327 * C21655) * C141365) *
               C5864 +
           (C15880 * C14078 + C16597 * C141479 +
            (C188 * C21037 + C141327 * C21138) * C14079 +
            (C188 * C21230 + C141327 * C21656) * C141365) *
               C5865) *
              C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21918 * C108 + C21819 * C189 + C21919 * C823 + C21820 * C912 +
            C21920 * C2960 + C21821 * C3026) *
               C14078 +
           (C21918 * C276 + C21819 * C635 + C21919 * C1006 + C21820 * C1419 +
            C21920 * C3084 + C21821 * C3362) *
               C141479 +
           (C36893 + C36894 + C36895) * C14079 +
           (C37538 + C37539 + C37540) * C141365) *
              C141219 * C5322 -
          ((C42717 + C42718 + C42719) * C141365 +
           (C42217 + C42218 + C42219) * C14079 +
           (C37540 + C37539 + C37538) * C141479 +
           (C36895 + C36894 + C36893) * C14078) *
              C141219 * C5323 +
          ((C42219 + C42218 + C42217) * C14078 +
           (C42719 + C42718 + C42717) * C141479 +
           (C21918 * C21035 + C21819 * C21136 + C21919 * C42109 +
            C21820 * C42197 + C21920 * C42110 + C21821 * C42198) *
               C14079 +
           (C21918 * C21228 + C21819 * C21654 + C21919 * C42293 +
            C21820 * C42708 + C21920 * C42294 + C21821 * C42709) *
               C141365) *
              C141219 * C5324) *
         C141281 * C141247) /
            (p * q * std::sqrt(p + q));
    d2eezz[134] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                       C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                          C141327 * C5863 +
                      (C14636 + C14637) * C141327 * C5864 + C14643 * C5865) *
                         C5322 -
                     ((C16723 + C16724) * C141327 * C5865 +
                      (C16725 + C16726) * C141327 * C5864 +
                      (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
                       C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                          C141327 * C5863) *
                         C5323 +
                     ((C14599 * C5325 + C21738 + C21738 + C141479 * C5781 +
                       C14600 * C21035 + C21739 + C21739 + C141365 * C21734) *
                          C141327 * C5863 +
                      (C14599 * C5326 + C21740 + C21740 + C141479 * C5782 +
                       C14600 * C21036 + C21741 + C21741 + C141365 * C21735) *
                          C141327 * C5864 +
                      (C14599 * C5327 + C21742 + C21742 + C141479 * C5783 +
                       C14600 * C21037 + C21743 + C21743 + C141365 * C21736) *
                          C141327 * C5865) *
                         C5324) *
                    C141281 * C141247) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C14599 * C108 + C14602 + C14602 + C141479 * C714 +
                       C14600 * C1601 + C14603 + C14603 + C141365 * C2283) *
                          C21819 +
                      (C36666 + C36667) * C21820 + C39228 * C21821) *
                         C141219 * C5322 -
                     ((C40268 + C40269) * C21821 + (C40270 + C40271) * C21820 +
                      (C14600 * C5325 + C16711 + C16711 + C141365 * C5781 +
                       C14599 * C1601 + C16712 + C16712 + C141479 * C2283) *
                          C21819) *
                         C141219 * C5323 +
                     ((C14599 * C5325 + C21738 + C21738 + C141479 * C5781 +
                       C14600 * C21035 + C21739 + C21739 + C141365 * C21734) *
                          C21819 +
                      (C14599 * C13205 + C42796 + C42796 + C141479 * C13845 +
                       C14600 * C42109 + C42797 + C42797 + C141365 * C42793) *
                          C21820 +
                      (C14599 * C29087 + C42798 + C42798 + C141479 * C29715 +
                       C14600 * C42110 + C42799 + C42799 + C141365 * C42794) *
                          C21821) *
                         C141219 * C5324) *
                    C141281 * C141247) /
                       (p * q * std::sqrt(p + q));
}
